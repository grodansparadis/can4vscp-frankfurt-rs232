

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Feb 19 20:32:05 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   102                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   103                           	psect	pa_nodes,global,class=CODE,delta=1
   104  0000                     tblptru	equ	0xFF8
   105                           tblptrh	equ	0xFF7
   106                           tblptrl	equ	0xFF6
   107                           tablat	equ	0xFF5
   108                           prodh	equ	0xFF4
   109                           prodl	equ	0xFF3
   110                           intcon	equ	0xFF2
   111                           indf0	equ	0xFEF
   112                           fsr0h	equ	0xFEA
   113                           fsr0l	equ	0xFE9
   114                           wreg	equ	0xFE8
   115                           indf1	equ	0xFE7
   116                           postinc1	equ	0xFE6
   117                           postdec1	equ	0xFE5
   118                           fsr1h	equ	0xFE2
   119                           fsr1l	equ	0xFE1
   120                           indf2	equ	0xFDF
   121                           postinc2	equ	0xFDE
   122                           postdec2	equ	0xFDD
   123                           plusw2	equ	0xFDB
   124                           fsr2h	equ	0xFDA
   125                           fsr2l	equ	0xFD9
   126                           status	equ	0xFD8
   127                           
   128                           	psect	mediumconst
   129  006FD8                     __pmediumconst:
   130                           	opt stack 0
   131  006FD8                     _octpowers:
   132                           	opt stack 0
   133  006FD8  0001               	dw	1
   134  006FDA  0000               	dw	0
   135  006FDC  0008               	dw	8
   136  006FDE  0000               	dw	0
   137  006FE0  0040               	dw	64
   138  006FE2  0000               	dw	0
   139  006FE4  0200               	dw	512
   140  006FE6  0000               	dw	0
   141  006FE8  1000               	dw	4096
   142  006FEA  0000               	dw	0
   143  006FEC  8000               	dw	32768
   144  006FEE  0000               	dw	0
   145  006FF0  0000               	dw	0
   146  006FF2  0004               	dw	4
   147  006FF4  0000               	dw	0
   148  006FF6  0020               	dw	32
   149  006FF8  0000               	dw	0
   150  006FFA  0100               	dw	256
   151  006FFC  0000               	dw	0
   152  006FFE  0800               	dw	2048
   153  007000  0000               	dw	0
   154  007002  4000               	dw	16384
   155  007004  0000               	dw	0
   156  007006  0000               	dw	0
   157  007008                     __end_of_octpowers:
   158                           	opt stack 0
   159  007008                     _dpowers:
   160                           	opt stack 0
   161  007008  0001               	dw	1
   162  00700A  0000               	dw	0
   163  00700C  000A               	dw	10
   164  00700E  0000               	dw	0
   165  007010  0064               	dw	100
   166  007012  0000               	dw	0
   167  007014  03E8               	dw	1000
   168  007016  0000               	dw	0
   169  007018  2710               	dw	10000
   170  00701A  0000               	dw	0
   171  00701C  86A0               	dw	34464
   172  00701E  0001               	dw	1
   173  007020  4240               	dw	16960
   174  007022  000F               	dw	15
   175  007024  9680               	dw	38528
   176  007026  0098               	dw	152
   177  007028  E100               	dw	57600
   178  00702A  05F5               	dw	1525
   179  00702C  CA00               	dw	51712
   180  00702E  3B9A               	dw	15258
   181  007030                     __end_of_dpowers:
   182                           	opt stack 0
   183  007030                     _hexpowers:
   184                           	opt stack 0
   185  007030  0001               	dw	1
   186  007032  0000               	dw	0
   187  007034  0010               	dw	16
   188  007036  0000               	dw	0
   189  007038  0100               	dw	256
   190  00703A  0000               	dw	0
   191  00703C  1000               	dw	4096
   192  00703E  0000               	dw	0
   193  007040  0000               	dw	0
   194  007042  0001               	dw	1
   195  007044  0000               	dw	0
   196  007046  0010               	dw	16
   197  007048  0000               	dw	0
   198  00704A  0100               	dw	256
   199  00704C  0000               	dw	0
   200  00704E  1000               	dw	4096
   201  007050                     __end_of_hexpowers:
   202                           	opt stack 0
   203  0000                     _BRGCON1	set	3952
   204  0000                     _BRGCON2	set	3953
   205  0000                     _BRGCON3	set	3954
   206  0000                     _BSEL0	set	3576
   207  0000                     _CANCON	set	3951
   208  0000                     _CIOCON	set	3955
   209  0000                     _COMSTATbits	set	3956
   210  0000                     _ECANCON	set	3959
   211  0000                     _EEADR	set	4009
   212  0000                     _EECON1bits	set	4006
   213  0000                     _EECON2	set	4007
   214  0000                     _EEDATA	set	4008
   215  0000                     _INTCONbits	set	4082
   216  0000                     _MSEL0	set	3568
   217  0000                     _MSEL1	set	3569
   218  0000                     _MSEL2	set	3570
   219  0000                     _OSCCONbits	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIE1bits	set	3997
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIR2bits	set	4001
   224  0000                     _PIR3bits	set	4004
   225  0000                     _RCREG	set	4014
   226  0000                     _RCSTA	set	4011
   227  0000                     _RCSTAbits	set	4011
   228  0000                     _RXB1CONbits	set	3920
   229  0000                     _RXERRCNT	set	3957
   230  0000                     _RXF0EIDH	set	3842
   231  0000                     _RXF0EIDL	set	3843
   232  0000                     _RXF0SIDH	set	3840
   233  0000                     _RXF0SIDL	set	3841
   234  0000                     _RXF10EIDH	set	3446
   235  0000                     _RXF10EIDL	set	3447
   236  0000                     _RXF10SIDH	set	3444
   237  0000                     _RXF10SIDL	set	3445
   238  0000                     _RXF11EIDH	set	3450
   239  0000                     _RXF11EIDL	set	3451
   240  0000                     _RXF11SIDH	set	3448
   241  0000                     _RXF11SIDL	set	3449
   242  0000                     _RXF12EIDH	set	3458
   243  0000                     _RXF12EIDL	set	3459
   244  0000                     _RXF12SIDH	set	3456
   245  0000                     _RXF12SIDL	set	3457
   246  0000                     _RXF13EIDH	set	3462
   247  0000                     _RXF13EIDL	set	3463
   248  0000                     _RXF13SIDH	set	3460
   249  0000                     _RXF13SIDL	set	3461
   250  0000                     _RXF14EIDH	set	3466
   251  0000                     _RXF14EIDL	set	3467
   252  0000                     _RXF14SIDH	set	3464
   253  0000                     _RXF14SIDL	set	3465
   254  0000                     _RXF15EIDH	set	3474
   255  0000                     _RXF15EIDL	set	3475
   256  0000                     _RXF15SIDH	set	3472
   257  0000                     _RXF15SIDL	set	3473
   258  0000                     _RXF1EIDH	set	3846
   259  0000                     _RXF1EIDL	set	3847
   260  0000                     _RXF1SIDH	set	3844
   261  0000                     _RXF1SIDL	set	3845
   262  0000                     _RXF2EIDH	set	3850
   263  0000                     _RXF2EIDL	set	3851
   264  0000                     _RXF2SIDH	set	3848
   265  0000                     _RXF2SIDL	set	3849
   266  0000                     _RXF3EIDH	set	3854
   267  0000                     _RXF3EIDL	set	3855
   268  0000                     _RXF3SIDH	set	3852
   269  0000                     _RXF3SIDL	set	3853
   270  0000                     _RXF4EIDH	set	3858
   271  0000                     _RXF4EIDL	set	3859
   272  0000                     _RXF4SIDH	set	3856
   273  0000                     _RXF4SIDL	set	3857
   274  0000                     _RXF5EIDH	set	3862
   275  0000                     _RXF5EIDL	set	3863
   276  0000                     _RXF5SIDH	set	3860
   277  0000                     _RXF5SIDL	set	3861
   278  0000                     _RXF6EIDH	set	3426
   279  0000                     _RXF6EIDL	set	3427
   280  0000                     _RXF6SIDH	set	3424
   281  0000                     _RXF6SIDL	set	3425
   282  0000                     _RXF7EIDH	set	3430
   283  0000                     _RXF7EIDL	set	3431
   284  0000                     _RXF7SIDH	set	3428
   285  0000                     _RXF7SIDL	set	3429
   286  0000                     _RXF8EIDH	set	3434
   287  0000                     _RXF8EIDL	set	3435
   288  0000                     _RXF8SIDH	set	3432
   289  0000                     _RXF8SIDL	set	3433
   290  0000                     _RXF9EIDH	set	3442
   291  0000                     _RXF9EIDL	set	3443
   292  0000                     _RXF9SIDH	set	3440
   293  0000                     _RXF9SIDL	set	3441
   294  0000                     _RXFBCON0	set	3552
   295  0000                     _RXFBCON1	set	3553
   296  0000                     _RXFBCON2	set	3554
   297  0000                     _RXFBCON3	set	3555
   298  0000                     _RXFBCON4	set	3556
   299  0000                     _RXFBCON5	set	3557
   300  0000                     _RXFBCON6	set	3558
   301  0000                     _RXFBCON7	set	3559
   302  0000                     _RXFCON0	set	3540
   303  0000                     _RXFCON1	set	3541
   304  0000                     _RXM0EIDH	set	3866
   305  0000                     _RXM0EIDL	set	3867
   306  0000                     _RXM0SIDL	set	3865
   307  0000                     _RXM1EIDH	set	3870
   308  0000                     _RXM1EIDL	set	3871
   309  0000                     _RXM1SIDL	set	3869
   310  0000                     _SPBRG	set	4015
   311  0000                     _SPBRGH	set	4016
   312  0000                     _T0CON	set	4053
   313  0000                     _T0CONbits	set	4053
   314  0000                     _TMR0H	set	4055
   315  0000                     _TMR0L	set	4054
   316  0000                     _TRISBbits	set	3987
   317  0000                     _TRISCbits	set	3988
   318  0000                     _TXERRCNT	set	3958
   319  0000                     _TXREG	set	4013
   320  0000                     _TXSTA	set	4012
   321  0000                     _TXSTAbits	set	4012
   322  0000                     _B0RXFUL	set	28935
   323  0000                     _B0TXEN	set	28610
   324  0000                     _B1RXFUL	set	29063
   325  0000                     _B1TXEN	set	28611
   326  0000                     _B2RXFUL	set	29191
   327  0000                     _B2TXEN	set	28612
   328  0000                     _B3RXFUL	set	29319
   329  0000                     _B3TXEN	set	28613
   330  0000                     _B4RXFUL	set	29447
   331  0000                     _B4TXEN	set	28614
   332  0000                     _B5RXFUL	set	29575
   333  0000                     _B5TXEN	set	28615
   334  0000                     _FIFOEMPTY	set	31655
   335  0000                     _IRXIF	set	32039
   336  0000                     _LATC1	set	31833
   337  0000                     _MDSEL0	set	31678
   338  0000                     _MDSEL1	set	31679
   339  0000                     _PEIE	set	32662
   340  0000                     _RCIE	set	31981
   341  0000                     _RCIF	set	31989
   342  0000                     _RCIP	set	31997
   343  0000                     _RXB0FILHIT0	set	31488
   344  0000                     _RXB0FUL	set	31495
   345  0000                     _RXB0IF	set	32032
   346  0000                     _RXB0OVFL	set	31655
   347  0000                     _RXB1IF	set	32033
   348  0000                     _RXB1OVFL	set	31654
   349  0000                     _RXM0EXIDM	set	30923
   350  0000                     _RXM1EXIDEN	set	30955
   351  0000                     _B0CON	set	3616
   352  0000                     _B1CON	set	3632
   353  0000                     _B2CON	set	3648
   354  0000                     _B3CON	set	3664
   355  0000                     _B4CON	set	3680
   356  0000                     _B5CON	set	3696
   357  0000                     _RXB0CON	set	3936
   358  0000                     _RXB1CON	set	3920
   359  0000                     _RXM0SIDH	set	3864
   360  0000                     _RXM1SIDH	set	3868
   361  0000                     _TXB0CON	set	3904
   362  0000                     _TXB1CON	set	3888
   363  0000                     _TXB2CON	set	3872
   364  007050                     __stringdata:
   365                           	opt stack 0
   366  007050                     STR_218:
   367  007050  20                 	db	32
   368  007051  20                 	db	32
   369  007052  20                 	db	32
   370  007053  20                 	db	32
   371  007054  20                 	db	32
   372  007055  20                 	db	32
   373  007056  20                 	db	32
   374  007057  20                 	db	32
   375  007058  20                 	db	32
   376  007059  46                 	db	70	;'F'
   377  00705A  6F                 	db	111	;'o'
   378  00705B  72                 	db	114	;'r'
   379  00705C  6D                 	db	109	;'m'
   380  00705D  61                 	db	97	;'a'
   381  00705E  74                 	db	116	;'t'
   382  00705F  3A                 	db	58	;':'
   383  007060  20                 	db	32
   384  007061  66                 	db	102	;'f'
   385  007062  69                 	db	105	;'i'
   386  007063  6C                 	db	108	;'l'
   387  007064  74                 	db	116	;'t'
   388  007065  65                 	db	101	;'e'
   389  007066  72                 	db	114	;'r'
   390  007067  20                 	db	32
   391  007068  66                 	db	102	;'f'
   392  007069  69                 	db	105	;'i'
   393  00706A  6C                 	db	108	;'l'
   394  00706B  74                 	db	116	;'t'
   395  00706C  65                 	db	101	;'e'
   396  00706D  72                 	db	114	;'r'
   397  00706E  6E                 	db	110	;'n'
   398  00706F  6F                 	db	111	;'o'
   399  007070  2C                 	db	44
   400  007071  70                 	db	112	;'p'
   401  007072  72                 	db	114	;'r'
   402  007073  69                 	db	105	;'i'
   403  007074  6F                 	db	111	;'o'
   404  007075  2C                 	db	44
   405  007076  63                 	db	99	;'c'
   406  007077  6C                 	db	108	;'l'
   407  007078  61                 	db	97	;'a'
   408  007079  73                 	db	115	;'s'
   409  00707A  73                 	db	115	;'s'
   410  00707B  2C                 	db	44
   411  00707C  74                 	db	116	;'t'
   412  00707D  79                 	db	121	;'y'
   413  00707E  70                 	db	112	;'p'
   414  00707F  65                 	db	101	;'e'
   415  007080  2C                 	db	44
   416  007081  6E                 	db	110	;'n'
   417  007082  6F                 	db	111	;'o'
   418  007083  64                 	db	100	;'d'
   419  007084  65                 	db	101	;'e'
   420  007085  69                 	db	105	;'i'
   421  007086  64                 	db	100	;'d'
   422  007087  20                 	db	32
   423  007088  20                 	db	32
   424  007089  28                 	db	40
   425  00708A  66                 	db	102	;'f'
   426  00708B  69                 	db	105	;'i'
   427  00708C  6C                 	db	108	;'l'
   428  00708D  74                 	db	116	;'t'
   429  00708E  65                 	db	101	;'e'
   430  00708F  72                 	db	114	;'r'
   431  007090  6E                 	db	110	;'n'
   432  007091  6F                 	db	111	;'o'
   433  007092  20                 	db	32
   434  007093  3D                 	db	61	;'='
   435  007094  20                 	db	32
   436  007095  30                 	db	48	;'0'
   437  007096  2D                 	db	45
   438  007097  31                 	db	49	;'1'
   439  007098  35                 	db	53	;'5'
   440  007099  29                 	db	41
   441  00709A  2E                 	db	46
   442  00709B  0D                 	db	13
   443  00709C  0A                 	db	10
   444  00709D  00                 	db	0
   445  00709E                     STR_216:
   446  00709E  49                 	db	73	;'I'
   447  00709F  4E                 	db	78	;'N'
   448  0070A0  46                 	db	70	;'F'
   449  0070A1  4F                 	db	79	;'O'
   450  0070A2  20                 	db	32
   451  0070A3  2D                 	db	45
   452  0070A4  20                 	db	32
   453  0070A5  47                 	db	71	;'G'
   454  0070A6  65                 	db	101	;'e'
   455  0070A7  74                 	db	116	;'t'
   456  0070A8  20                 	db	32
   457  0070A9  69                 	db	105	;'i'
   458  0070AA  6E                 	db	110	;'n'
   459  0070AB  66                 	db	102	;'f'
   460  0070AC  6F                 	db	111	;'o'
   461  0070AD  20                 	db	32
   462  0070AE  61                 	db	97	;'a'
   463  0070AF  62                 	db	98	;'b'
   464  0070B0  6F                 	db	111	;'o'
   465  0070B1  75                 	db	117	;'u'
   466  0070B2  74                 	db	116	;'t'
   467  0070B3  20                 	db	32
   468  0070B4  61                 	db	97	;'a'
   469  0070B5  6E                 	db	110	;'n'
   470  0070B6  20                 	db	32
   471  0070B7  65                 	db	101	;'e'
   472  0070B8  78                 	db	120	;'x'
   473  0070B9  69                 	db	105	;'i'
   474  0070BA  73                 	db	115	;'s'
   475  0070BB  74                 	db	116	;'t'
   476  0070BC  65                 	db	101	;'e'
   477  0070BD  6E                 	db	110	;'n'
   478  0070BE  74                 	db	116	;'t'
   479  0070BF  20                 	db	32
   480  0070C0  6E                 	db	110	;'n'
   481  0070C1  6F                 	db	111	;'o'
   482  0070C2  64                 	db	100	;'d'
   483  0070C3  65                 	db	101	;'e'
   484  0070C4  20                 	db	32
   485  0070C5  6F                 	db	111	;'o'
   486  0070C6  6E                 	db	110	;'n'
   487  0070C7  20                 	db	32
   488  0070C8  74                 	db	116	;'t'
   489  0070C9  68                 	db	104	;'h'
   490  0070CA  65                 	db	101	;'e'
   491  0070CB  20                 	db	32
   492  0070CC  62                 	db	98	;'b'
   493  0070CD  75                 	db	117	;'u'
   494  0070CE  73                 	db	115	;'s'
   495  0070CF  20                 	db	32
   496  0070D0  28                 	db	40
   497  0070D1  46                 	db	70	;'F'
   498  0070D2  6F                 	db	111	;'o'
   499  0070D3  72                 	db	114	;'r'
   500  0070D4  6D                 	db	109	;'m'
   501  0070D5  61                 	db	97	;'a'
   502  0070D6  74                 	db	116	;'t'
   503  0070D7  3A                 	db	58	;':'
   504  0070D8  20                 	db	32
   505  0070D9  69                 	db	105	;'i'
   506  0070DA  6E                 	db	110	;'n'
   507  0070DB  66                 	db	102	;'f'
   508  0070DC  6F                 	db	111	;'o'
   509  0070DD  20                 	db	32
   510  0070DE  6E                 	db	110	;'n'
   511  0070DF  69                 	db	105	;'i'
   512  0070E0  63                 	db	99	;'c'
   513  0070E1  6B                 	db	107	;'k'
   514  0070E2  6E                 	db	110	;'n'
   515  0070E3  61                 	db	97	;'a'
   516  0070E4  6D                 	db	109	;'m'
   517  0070E5  65                 	db	101	;'e'
   518  0070E6  29                 	db	41
   519  0070E7  2E                 	db	46
   520  0070E8  0D                 	db	13
   521  0070E9  0A                 	db	10
   522  0070EA  00                 	db	0
   523  0070EB                     STR_220:
   524  0070EB  20                 	db	32
   525  0070EC  20                 	db	32
   526  0070ED  20                 	db	32
   527  0070EE  20                 	db	32
   528  0070EF  20                 	db	32
   529  0070F0  20                 	db	32
   530  0070F1  20                 	db	32
   531  0070F2  46                 	db	70	;'F'
   532  0070F3  6F                 	db	111	;'o'
   533  0070F4  72                 	db	114	;'r'
   534  0070F5  6D                 	db	109	;'m'
   535  0070F6  61                 	db	97	;'a'
   536  0070F7  74                 	db	116	;'t'
   537  0070F8  3A                 	db	58	;':'
   538  0070F9  20                 	db	32
   539  0070FA  6D                 	db	109	;'m'
   540  0070FB  61                 	db	97	;'a'
   541  0070FC  73                 	db	115	;'s'
   542  0070FD  6B                 	db	107	;'k'
   543  0070FE  20                 	db	32
   544  0070FF  6D                 	db	109	;'m'
   545  007100  61                 	db	97	;'a'
   546  007101  73                 	db	115	;'s'
   547  007102  6B                 	db	107	;'k'
   548  007103  6E                 	db	110	;'n'
   549  007104  6F                 	db	111	;'o'
   550  007105  2C                 	db	44
   551  007106  70                 	db	112	;'p'
   552  007107  72                 	db	114	;'r'
   553  007108  69                 	db	105	;'i'
   554  007109  6F                 	db	111	;'o'
   555  00710A  2C                 	db	44
   556  00710B  63                 	db	99	;'c'
   557  00710C  6C                 	db	108	;'l'
   558  00710D  61                 	db	97	;'a'
   559  00710E  73                 	db	115	;'s'
   560  00710F  73                 	db	115	;'s'
   561  007110  2C                 	db	44
   562  007111  74                 	db	116	;'t'
   563  007112  79                 	db	121	;'y'
   564  007113  70                 	db	112	;'p'
   565  007114  65                 	db	101	;'e'
   566  007115  2C                 	db	44
   567  007116  6E                 	db	110	;'n'
   568  007117  6F                 	db	111	;'o'
   569  007118  64                 	db	100	;'d'
   570  007119  65                 	db	101	;'e'
   571  00711A  69                 	db	105	;'i'
   572  00711B  64                 	db	100	;'d'
   573  00711C  20                 	db	32
   574  00711D  28                 	db	40
   575  00711E  6D                 	db	109	;'m'
   576  00711F  61                 	db	97	;'a'
   577  007120  73                 	db	115	;'s'
   578  007121  6B                 	db	107	;'k'
   579  007122  6E                 	db	110	;'n'
   580  007123  6F                 	db	111	;'o'
   581  007124  20                 	db	32
   582  007125  3D                 	db	61	;'='
   583  007126  20                 	db	32
   584  007127  30                 	db	48	;'0'
   585  007128  20                 	db	32
   586  007129  6F                 	db	111	;'o'
   587  00712A  72                 	db	114	;'r'
   588  00712B  20                 	db	32
   589  00712C  31                 	db	49	;'1'
   590  00712D  29                 	db	41
   591  00712E  2E                 	db	46
   592  00712F  0D                 	db	13
   593  007130  0A                 	db	10
   594  007131  00                 	db	0
   595  007132                     STR_214:
   596  007132  52                 	db	82	;'R'
   597  007133  52                 	db	82	;'R'
   598  007134  45                 	db	69	;'E'
   599  007135  47                 	db	71	;'G'
   600  007136  20                 	db	32
   601  007137  2D                 	db	45
   602  007138  20                 	db	32
   603  007139  52                 	db	82	;'R'
   604  00713A  65                 	db	101	;'e'
   605  00713B  61                 	db	97	;'a'
   606  00713C  64                 	db	100	;'d'
   607  00713D  20                 	db	32
   608  00713E  72                 	db	114	;'r'
   609  00713F  65                 	db	101	;'e'
   610  007140  67                 	db	103	;'g'
   611  007141  69                 	db	105	;'i'
   612  007142  73                 	db	115	;'s'
   613  007143  74                 	db	116	;'t'
   614  007144  65                 	db	101	;'e'
   615  007145  72                 	db	114	;'r'
   616  007146  28                 	db	40
   617  007147  73                 	db	115	;'s'
   618  007148  29                 	db	41
   619  007149  20                 	db	32
   620  00714A  6F                 	db	111	;'o'
   621  00714B  66                 	db	102	;'f'
   622  00714C  20                 	db	32
   623  00714D  6E                 	db	110	;'n'
   624  00714E  6F                 	db	111	;'o'
   625  00714F  64                 	db	100	;'d'
   626  007150  65                 	db	101	;'e'
   627  007151  20                 	db	32
   628  007152  28                 	db	40
   629  007153  46                 	db	70	;'F'
   630  007154  6F                 	db	111	;'o'
   631  007155  72                 	db	114	;'r'
   632  007156  6D                 	db	109	;'m'
   633  007157  61                 	db	97	;'a'
   634  007158  74                 	db	116	;'t'
   635  007159  3A                 	db	58	;':'
   636  00715A  20                 	db	32
   637  00715B  72                 	db	114	;'r'
   638  00715C  72                 	db	114	;'r'
   639  00715D  65                 	db	101	;'e'
   640  00715E  67                 	db	103	;'g'
   641  00715F  20                 	db	32
   642  007160  5B                 	db	91	;'['
   643  007161  70                 	db	112	;'p'
   644  007162  61                 	db	97	;'a'
   645  007163  67                 	db	103	;'g'
   646  007164  65                 	db	101	;'e'
   647  007165  3A                 	db	58	;':'
   648  007166  5D                 	db	93	;']'
   649  007167  72                 	db	114	;'r'
   650  007168  65                 	db	101	;'e'
   651  007169  67                 	db	103	;'g'
   652  00716A  20                 	db	32
   653  00716B  5B                 	db	91	;'['
   654  00716C  63                 	db	99	;'c'
   655  00716D  6F                 	db	111	;'o'
   656  00716E  75                 	db	117	;'u'
   657  00716F  6E                 	db	110	;'n'
   658  007170  74                 	db	116	;'t'
   659  007171  5D                 	db	93	;']'
   660  007172  29                 	db	41
   661  007173  2E                 	db	46
   662  007174  0D                 	db	13
   663  007175  0A                 	db	10
   664  007176  00                 	db	0
   665  007177                     STR_229:
   666  007177  2D                 	db	45
   667  007178  2D                 	db	45
   668  007179  2D                 	db	45
   669  00717A  2D                 	db	45
   670  00717B  2D                 	db	45
   671  00717C  2D                 	db	45
   672  00717D  2D                 	db	45
   673  00717E  2D                 	db	45
   674  00717F  2D                 	db	45
   675  007180  2D                 	db	45
   676  007181  2D                 	db	45
   677  007182  2D                 	db	45
   678  007183  2D                 	db	45
   679  007184  2D                 	db	45
   680  007185  2D                 	db	45
   681  007186  2D                 	db	45
   682  007187  2D                 	db	45
   683  007188  2D                 	db	45
   684  007189  2D                 	db	45
   685  00718A  2D                 	db	45
   686  00718B  2D                 	db	45
   687  00718C  2D                 	db	45
   688  00718D  2D                 	db	45
   689  00718E  2D                 	db	45
   690  00718F  2D                 	db	45
   691  007190  2D                 	db	45
   692  007191  2D                 	db	45
   693  007192  2D                 	db	45
   694  007193  2D                 	db	45
   695  007194  2D                 	db	45
   696  007195  2D                 	db	45
   697  007196  2D                 	db	45
   698  007197  2D                 	db	45
   699  007198  2D                 	db	45
   700  007199  2D                 	db	45
   701  00719A  2D                 	db	45
   702  00719B  2D                 	db	45
   703  00719C  2D                 	db	45
   704  00719D  2D                 	db	45
   705  00719E  2D                 	db	45
   706  00719F  2D                 	db	45
   707  0071A0  2D                 	db	45
   708  0071A1  2D                 	db	45
   709  0071A2  2D                 	db	45
   710  0071A3  2D                 	db	45
   711  0071A4  2D                 	db	45
   712  0071A5  2D                 	db	45
   713  0071A6  2D                 	db	45
   714  0071A7  2D                 	db	45
   715  0071A8  2D                 	db	45
   716  0071A9  2D                 	db	45
   717  0071AA  2D                 	db	45
   718  0071AB  2D                 	db	45
   719  0071AC  2D                 	db	45
   720  0071AD  2D                 	db	45
   721  0071AE  2D                 	db	45
   722  0071AF  2D                 	db	45
   723  0071B0  2D                 	db	45
   724  0071B1  2D                 	db	45
   725  0071B2  2D                 	db	45
   726  0071B3  2D                 	db	45
   727  0071B4  2D                 	db	45
   728  0071B5  2D                 	db	45
   729  0071B6  2D                 	db	45
   730  0071B7  0D                 	db	13
   731  0071B8  0A                 	db	10
   732  0071B9  00                 	db	0
   733  0071BA                     STR_224:
   734  0071BA  20                 	db	32
   735  0071BB  20                 	db	32
   736  0071BC  20                 	db	32
   737  0071BD  20                 	db	32
   738  0071BE  52                 	db	82	;'R'
   739  0071BF  57                 	db	87	;'W'
   740  0071C0  54                 	db	84	;'T'
   741  0071C1  49                 	db	73	;'I'
   742  0071C2  4D                 	db	77	;'M'
   743  0071C3  45                 	db	69	;'E'
   744  0071C4  4F                 	db	79	;'O'
   745  0071C5  55                 	db	85	;'U'
   746  0071C6  54                 	db	84	;'T'
   747  0071C7  20                 	db	32
   748  0071C8  2D                 	db	45
   749  0071C9  20                 	db	32
   750  0071CA  53                 	db	83	;'S'
   751  0071CB  65                 	db	101	;'e'
   752  0071CC  74                 	db	116	;'t'
   753  0071CD  20                 	db	32
   754  0071CE  72                 	db	114	;'r'
   755  0071CF  65                 	db	101	;'e'
   756  0071D0  67                 	db	103	;'g'
   757  0071D1  69                 	db	105	;'i'
   758  0071D2  73                 	db	115	;'s'
   759  0071D3  74                 	db	116	;'t'
   760  0071D4  65                 	db	101	;'e'
   761  0071D5  72                 	db	114	;'r'
   762  0071D6  20                 	db	32
   763  0071D7  72                 	db	114	;'r'
   764  0071D8  65                 	db	101	;'e'
   765  0071D9  61                 	db	97	;'a'
   766  0071DA  64                 	db	100	;'d'
   767  0071DB  2F                 	db	47
   768  0071DC  77                 	db	119	;'w'
   769  0071DD  72                 	db	114	;'r'
   770  0071DE  69                 	db	105	;'i'
   771  0071DF  74                 	db	116	;'t'
   772  0071E0  65                 	db	101	;'e'
   773  0071E1  20                 	db	32
   774  0071E2  74                 	db	116	;'t'
   775  0071E3  69                 	db	105	;'i'
   776  0071E4  6D                 	db	109	;'m'
   777  0071E5  65                 	db	101	;'e'
   778  0071E6  6F                 	db	111	;'o'
   779  0071E7  75                 	db	117	;'u'
   780  0071E8  74                 	db	116	;'t'
   781  0071E9  2E                 	db	46
   782  0071EA  20                 	db	32
   783  0071EB  44                 	db	68	;'D'
   784  0071EC  65                 	db	101	;'e'
   785  0071ED  66                 	db	102	;'f'
   786  0071EE  61                 	db	97	;'a'
   787  0071EF  75                 	db	117	;'u'
   788  0071F0  6C                 	db	108	;'l'
   789  0071F1  74                 	db	116	;'t'
   790  0071F2  3D                 	db	61	;'='
   791  0071F3  31                 	db	49	;'1'
   792  0071F4  30                 	db	48	;'0'
   793  0071F5  20                 	db	32
   794  0071F6  6D                 	db	109	;'m'
   795  0071F7  73                 	db	115	;'s'
   796  0071F8  20                 	db	32
   797  0071F9  2E                 	db	46
   798  0071FA  0D                 	db	13
   799  0071FB  0A                 	db	10
   800  0071FC  00                 	db	0
   801  0071FD                     STR_215:
   802  0071FD  57                 	db	87	;'W'
   803  0071FE  52                 	db	82	;'R'
   804  0071FF  45                 	db	69	;'E'
   805  007200  47                 	db	71	;'G'
   806  007201  20                 	db	32
   807  007202  2D                 	db	45
   808  007203  20                 	db	32
   809  007204  57                 	db	87	;'W'
   810  007205  72                 	db	114	;'r'
   811  007206  69                 	db	105	;'i'
   812  007207  74                 	db	116	;'t'
   813  007208  65                 	db	101	;'e'
   814  007209  20                 	db	32
   815  00720A  72                 	db	114	;'r'
   816  00720B  65                 	db	101	;'e'
   817  00720C  67                 	db	103	;'g'
   818  00720D  69                 	db	105	;'i'
   819  00720E  73                 	db	115	;'s'
   820  00720F  74                 	db	116	;'t'
   821  007210  65                 	db	101	;'e'
   822  007211  72                 	db	114	;'r'
   823  007212  20                 	db	32
   824  007213  6F                 	db	111	;'o'
   825  007214  66                 	db	102	;'f'
   826  007215  20                 	db	32
   827  007216  6E                 	db	110	;'n'
   828  007217  6F                 	db	111	;'o'
   829  007218  64                 	db	100	;'d'
   830  007219  65                 	db	101	;'e'
   831  00721A  20                 	db	32
   832  00721B  28                 	db	40
   833  00721C  46                 	db	70	;'F'
   834  00721D  6F                 	db	111	;'o'
   835  00721E  72                 	db	114	;'r'
   836  00721F  6D                 	db	109	;'m'
   837  007220  61                 	db	97	;'a'
   838  007221  74                 	db	116	;'t'
   839  007222  3A                 	db	58	;':'
   840  007223  20                 	db	32
   841  007224  77                 	db	119	;'w'
   842  007225  72                 	db	114	;'r'
   843  007226  65                 	db	101	;'e'
   844  007227  67                 	db	103	;'g'
   845  007228  20                 	db	32
   846  007229  5B                 	db	91	;'['
   847  00722A  70                 	db	112	;'p'
   848  00722B  61                 	db	97	;'a'
   849  00722C  67                 	db	103	;'g'
   850  00722D  65                 	db	101	;'e'
   851  00722E  3A                 	db	58	;':'
   852  00722F  5D                 	db	93	;']'
   853  007230  72                 	db	114	;'r'
   854  007231  65                 	db	101	;'e'
   855  007232  67                 	db	103	;'g'
   856  007233  20                 	db	32
   857  007234  63                 	db	99	;'c'
   858  007235  6F                 	db	111	;'o'
   859  007236  6E                 	db	110	;'n'
   860  007237  74                 	db	116	;'t'
   861  007238  65                 	db	101	;'e'
   862  007239  6E                 	db	110	;'n'
   863  00723A  74                 	db	116	;'t'
   864  00723B  29                 	db	41
   865  00723C  2E                 	db	46
   866  00723D  0D                 	db	13
   867  00723E  0A                 	db	10
   868  00723F  00                 	db	0
   869  007240                     STR_84:
   870  007240  2D                 	db	45
   871  007241  45                 	db	69	;'E'
   872  007242  52                 	db	82	;'R'
   873  007243  52                 	db	82	;'R'
   874  007244  4F                 	db	79	;'O'
   875  007245  52                 	db	82	;'R'
   876  007246  20                 	db	32
   877  007247  2D                 	db	45
   878  007248  20                 	db	32
   879  007249  46                 	db	70	;'F'
   880  00724A  69                 	db	105	;'i'
   881  00724B  6C                 	db	108	;'l'
   882  00724C  74                 	db	116	;'t'
   883  00724D  65                 	db	101	;'e'
   884  00724E  72                 	db	114	;'r'
   885  00724F  20                 	db	32
   886  007250  6E                 	db	110	;'n'
   887  007251  75                 	db	117	;'u'
   888  007252  6D                 	db	109	;'m'
   889  007253  62                 	db	98	;'b'
   890  007254  65                 	db	101	;'e'
   891  007255  72                 	db	114	;'r'
   892  007256  20                 	db	32
   893  007257  63                 	db	99	;'c'
   894  007258  61                 	db	97	;'a'
   895  007259  6E                 	db	110	;'n'
   896  00725A  20                 	db	32
   897  00725B  6F                 	db	111	;'o'
   898  00725C  6E                 	db	110	;'n'
   899  00725D  6C                 	db	108	;'l'
   900  00725E  79                 	db	121	;'y'
   901  00725F  20                 	db	32
   902  007260  62                 	db	98	;'b'
   903  007261  65                 	db	101	;'e'
   904  007262  20                 	db	32
   905  007263  73                 	db	115	;'s'
   906  007264  65                 	db	101	;'e'
   907  007265  74                 	db	116	;'t'
   908  007266  20                 	db	32
   909  007267  74                 	db	116	;'t'
   910  007268  6F                 	db	111	;'o'
   911  007269  20                 	db	32
   912  00726A  61                 	db	97	;'a'
   913  00726B  20                 	db	32
   914  00726C  76                 	db	118	;'v'
   915  00726D  61                 	db	97	;'a'
   916  00726E  6C                 	db	108	;'l'
   917  00726F  75                 	db	117	;'u'
   918  007270  65                 	db	101	;'e'
   919  007271  20                 	db	32
   920  007272  62                 	db	98	;'b'
   921  007273  65                 	db	101	;'e'
   922  007274  74                 	db	116	;'t'
   923  007275  77                 	db	119	;'w'
   924  007276  65                 	db	101	;'e'
   925  007277  65                 	db	101	;'e'
   926  007278  6E                 	db	110	;'n'
   927  007279  20                 	db	32
   928  00727A  30                 	db	48	;'0'
   929  00727B  2D                 	db	45
   930  00727C  31                 	db	49	;'1'
   931  00727D  35                 	db	53	;'5'
   932  00727E  2E                 	db	46
   933  00727F  0D                 	db	13
   934  007280  0A                 	db	10
   935  007281  00                 	db	0
   936  007282                     STR_227:
   937  007282  20                 	db	32
   938  007283  20                 	db	32
   939  007284  20                 	db	32
   940  007285  20                 	db	32
   941  007286  4D                 	db	77	;'M'
   942  007287  4F                 	db	79	;'O'
   943  007288  44                 	db	68	;'D'
   944  007289  45                 	db	69	;'E'
   945  00728A  20                 	db	32
   946  00728B  2D                 	db	45
   947  00728C  20                 	db	32
   948  00728D  53                 	db	83	;'S'
   949  00728E  65                 	db	101	;'e'
   950  00728F  74                 	db	116	;'t'
   951  007290  20                 	db	32
   952  007291  61                 	db	97	;'a'
   953  007292  64                 	db	100	;'d'
   954  007293  61                 	db	97	;'a'
   955  007294  70                 	db	112	;'p'
   956  007295  74                 	db	116	;'t'
   957  007296  65                 	db	101	;'e'
   958  007297  72                 	db	114	;'r'
   959  007298  20                 	db	32
   960  007299  6D                 	db	109	;'m'
   961  00729A  6F                 	db	111	;'o'
   962  00729B  64                 	db	100	;'d'
   963  00729C  65                 	db	101	;'e'
   964  00729D  20                 	db	32
   965  00729E  74                 	db	116	;'t'
   966  00729F  68                 	db	104	;'h'
   967  0072A0  61                 	db	97	;'a'
   968  0072A1  74                 	db	116	;'t'
   969  0072A2  20                 	db	32
   970  0072A3  73                 	db	115	;'s'
   971  0072A4  68                 	db	104	;'h'
   972  0072A5  6F                 	db	111	;'o'
   973  0072A6  75                 	db	117	;'u'
   974  0072A7  6C                 	db	108	;'l'
   975  0072A8  64                 	db	100	;'d'
   976  0072A9  20                 	db	32
   977  0072AA  62                 	db	98	;'b'
   978  0072AB  65                 	db	101	;'e'
   979  0072AC  20                 	db	32
   980  0072AD  75                 	db	117	;'u'
   981  0072AE  73                 	db	115	;'s'
   982  0072AF  65                 	db	101	;'e'
   983  0072B0  64                 	db	100	;'d'
   984  0072B1  20                 	db	32
   985  0072B2  6F                 	db	111	;'o'
   986  0072B3  6E                 	db	110	;'n'
   987  0072B4  20                 	db	32
   988  0072B5  73                 	db	115	;'s'
   989  0072B6  74                 	db	116	;'t'
   990  0072B7  61                 	db	97	;'a'
   991  0072B8  72                 	db	114	;'r'
   992  0072B9  74                 	db	116	;'t'
   993  0072BA  75                 	db	117	;'u'
   994  0072BB  70                 	db	112	;'p'
   995  0072BC  2E                 	db	46
   996  0072BD  0D                 	db	13
   997  0072BE  0A                 	db	10
   998  0072BF  00                 	db	0
   999  0072C0                     STR_187:
  1000  0072C0  54                 	db	84	;'T'
  1001  0072C1  72                 	db	114	;'r'
  1002  0072C2  61                 	db	97	;'a'
  1003  0072C3  6E                 	db	110	;'n'
  1004  0072C4  73                 	db	115	;'s'
  1005  0072C5  6D                 	db	109	;'m'
  1006  0072C6  69                 	db	105	;'i'
  1007  0072C7  74                 	db	116	;'t'
  1008  0072C8  74                 	db	116	;'t'
  1009  0072C9  65                 	db	101	;'e'
  1010  0072CA  72                 	db	114	;'r'
  1011  0072CB  20                 	db	32
  1012  0072CC  69                 	db	105	;'i'
  1013  0072CD  6E                 	db	110	;'n'
  1014  0072CE  20                 	db	32
  1015  0072CF  45                 	db	69	;'E'
  1016  0072D0  72                 	db	114	;'r'
  1017  0072D1  72                 	db	114	;'r'
  1018  0072D2  6F                 	db	111	;'o'
  1019  0072D3  72                 	db	114	;'r'
  1020  0072D4  20                 	db	32
  1021  0072D5  53                 	db	83	;'S'
  1022  0072D6  74                 	db	116	;'t'
  1023  0072D7  61                 	db	97	;'a'
  1024  0072D8  74                 	db	116	;'t'
  1025  0072D9  65                 	db	101	;'e'
  1026  0072DA  20                 	db	32
  1027  0072DB  57                 	db	87	;'W'
  1028  0072DC  61                 	db	97	;'a'
  1029  0072DD  72                 	db	114	;'r'
  1030  0072DE  6E                 	db	110	;'n'
  1031  0072DF  69                 	db	105	;'i'
  1032  0072E0  6E                 	db	110	;'n'
  1033  0072E1  67                 	db	103	;'g'
  1034  0072E2  20                 	db	32
  1035  0072E3  28                 	db	40
  1036  0072E4  31                 	db	49	;'1'
  1037  0072E5  32                 	db	50	;'2'
  1038  0072E6  38                 	db	56	;'8'
  1039  0072E7  20                 	db	32
  1040  0072E8  3E                 	db	62	;'>'
  1041  0072E9  20                 	db	32
  1042  0072EA  54                 	db	84	;'T'
  1043  0072EB  45                 	db	69	;'E'
  1044  0072EC  52                 	db	82	;'R'
  1045  0072ED  52                 	db	82	;'R'
  1046  0072EE  43                 	db	67	;'C'
  1047  0072EF  4E                 	db	78	;'N'
  1048  0072F0  54                 	db	84	;'T'
  1049  0072F1  20                 	db	32
  1050  0072F2  3F                 	db	63	;'?'
  1051  0072F3  20                 	db	32
  1052  0072F4  39                 	db	57	;'9'
  1053  0072F5  36                 	db	54	;'6'
  1054  0072F6  29                 	db	41
  1055  0072F7  0D                 	db	13
  1056  0072F8  0A                 	db	10
  1057  0072F9  00                 	db	0
  1058  0072FA                     STR_189:
  1059  0072FA  54                 	db	84	;'T'
  1060  0072FB  72                 	db	114	;'r'
  1061  0072FC  61                 	db	97	;'a'
  1062  0072FD  6E                 	db	110	;'n'
  1063  0072FE  73                 	db	115	;'s'
  1064  0072FF  6D                 	db	109	;'m'
  1065  007300  69                 	db	105	;'i'
  1066  007301  74                 	db	116	;'t'
  1067  007302  74                 	db	116	;'t'
  1068  007303  65                 	db	101	;'e'
  1069  007304  72                 	db	114	;'r'
  1070  007305  20                 	db	32
  1071  007306  69                 	db	105	;'i'
  1072  007307  6E                 	db	110	;'n'
  1073  007308  20                 	db	32
  1074  007309  45                 	db	69	;'E'
  1075  00730A  72                 	db	114	;'r'
  1076  00730B  72                 	db	114	;'r'
  1077  00730C  6F                 	db	111	;'o'
  1078  00730D  72                 	db	114	;'r'
  1079  00730E  20                 	db	32
  1080  00730F  53                 	db	83	;'S'
  1081  007310  74                 	db	116	;'t'
  1082  007311  61                 	db	97	;'a'
  1083  007312  74                 	db	116	;'t'
  1084  007313  65                 	db	101	;'e'
  1085  007314  20                 	db	32
  1086  007315  42                 	db	66	;'B'
  1087  007316  75                 	db	117	;'u'
  1088  007317  73                 	db	115	;'s'
  1089  007318  20                 	db	32
  1090  007319  50                 	db	80	;'P'
  1091  00731A  61                 	db	97	;'a'
  1092  00731B  73                 	db	115	;'s'
  1093  00731C  73                 	db	115	;'s'
  1094  00731D  69                 	db	105	;'i'
  1095  00731E  76                 	db	118	;'v'
  1096  00731F  65                 	db	101	;'e'
  1097  007320  20                 	db	32
  1098  007321  28                 	db	40
  1099  007322  54                 	db	84	;'T'
  1100  007323  45                 	db	69	;'E'
  1101  007324  52                 	db	82	;'R'
  1102  007325  52                 	db	82	;'R'
  1103  007326  43                 	db	67	;'C'
  1104  007327  4E                 	db	78	;'N'
  1105  007328  54                 	db	84	;'T'
  1106  007329  20                 	db	32
  1107  00732A  3F                 	db	63	;'?'
  1108  00732B  20                 	db	32
  1109  00732C  31                 	db	49	;'1'
  1110  00732D  32                 	db	50	;'2'
  1111  00732E  38                 	db	56	;'8'
  1112  00732F  29                 	db	41
  1113  007330  0D                 	db	13
  1114  007331  0A                 	db	10
  1115  007332  00                 	db	0
  1116  007333                     STR_208:
  1117  007333  20                 	db	32
  1118  007334  20                 	db	32
  1119  007335  20                 	db	32
  1120  007336  20                 	db	32
  1121  007337  20                 	db	32
  1122  007338  46                 	db	70	;'F'
  1123  007339  6F                 	db	111	;'o'
  1124  00733A  72                 	db	114	;'r'
  1125  00733B  6D                 	db	109	;'m'
  1126  00733C  61                 	db	97	;'a'
  1127  00733D  74                 	db	116	;'t'
  1128  00733E  3A                 	db	58	;':'
  1129  00733F  20                 	db	32
  1130  007340  70                 	db	112	;'p'
  1131  007341  72                 	db	114	;'r'
  1132  007342  69                 	db	105	;'i'
  1133  007343  6F                 	db	111	;'o'
  1134  007344  72                 	db	114	;'r'
  1135  007345  69                 	db	105	;'i'
  1136  007346  74                 	db	116	;'t'
  1137  007347  79                 	db	121	;'y'
  1138  007348  2C                 	db	44
  1139  007349  63                 	db	99	;'c'
  1140  00734A  6C                 	db	108	;'l'
  1141  00734B  61                 	db	97	;'a'
  1142  00734C  73                 	db	115	;'s'
  1143  00734D  73                 	db	115	;'s'
  1144  00734E  2C                 	db	44
  1145  00734F  74                 	db	116	;'t'
  1146  007350  79                 	db	121	;'y'
  1147  007351  70                 	db	112	;'p'
  1148  007352  65                 	db	101	;'e'
  1149  007353  2C                 	db	44
  1150  007354  6E                 	db	110	;'n'
  1151  007355  6F                 	db	111	;'o'
  1152  007356  64                 	db	100	;'d'
  1153  007357  65                 	db	101	;'e'
  1154  007358  69                 	db	105	;'i'
  1155  007359  64                 	db	100	;'d'
  1156  00735A  2C                 	db	44
  1157  00735B  63                 	db	99	;'c'
  1158  00735C  6F                 	db	111	;'o'
  1159  00735D  75                 	db	117	;'u'
  1160  00735E  6E                 	db	110	;'n'
  1161  00735F  74                 	db	116	;'t'
  1162  007360  2C                 	db	44
  1163  007361  64                 	db	100	;'d'
  1164  007362  61                 	db	97	;'a'
  1165  007363  74                 	db	116	;'t'
  1166  007364  61                 	db	97	;'a'
  1167  007365  2C                 	db	44
  1168  007366  2C                 	db	44
  1169  007367  2C                 	db	44
  1170  007368  0D                 	db	13
  1171  007369  0A                 	db	10
  1172  00736A  00                 	db	0
  1173  00736B                     STR_194:
  1174  00736B  52                 	db	82	;'R'
  1175  00736C  65                 	db	101	;'e'
  1176  00736D  63                 	db	99	;'c'
  1177  00736E  65                 	db	101	;'e'
  1178  00736F  69                 	db	105	;'i'
  1179  007370  76                 	db	118	;'v'
  1180  007371  65                 	db	101	;'e'
  1181  007372  72                 	db	114	;'r'
  1182  007373  20                 	db	32
  1183  007374  69                 	db	105	;'i'
  1184  007375  6E                 	db	110	;'n'
  1185  007376  20                 	db	32
  1186  007377  45                 	db	69	;'E'
  1187  007378  72                 	db	114	;'r'
  1188  007379  72                 	db	114	;'r'
  1189  00737A  6F                 	db	111	;'o'
  1190  00737B  72                 	db	114	;'r'
  1191  00737C  20                 	db	32
  1192  00737D  53                 	db	83	;'S'
  1193  00737E  74                 	db	116	;'t'
  1194  00737F  61                 	db	97	;'a'
  1195  007380  74                 	db	116	;'t'
  1196  007381  65                 	db	101	;'e'
  1197  007382  20                 	db	32
  1198  007383  57                 	db	87	;'W'
  1199  007384  61                 	db	97	;'a'
  1200  007385  72                 	db	114	;'r'
  1201  007386  6E                 	db	110	;'n'
  1202  007387  69                 	db	105	;'i'
  1203  007388  6E                 	db	110	;'n'
  1204  007389  67                 	db	103	;'g'
  1205  00738A  20                 	db	32
  1206  00738B  28                 	db	40
  1207  00738C  31                 	db	49	;'1'
  1208  00738D  32                 	db	50	;'2'
  1209  00738E  38                 	db	56	;'8'
  1210  00738F  20                 	db	32
  1211  007390  3E                 	db	62	;'>'
  1212  007391  20                 	db	32
  1213  007392  52                 	db	82	;'R'
  1214  007393  45                 	db	69	;'E'
  1215  007394  52                 	db	82	;'R'
  1216  007395  52                 	db	82	;'R'
  1217  007396  43                 	db	67	;'C'
  1218  007397  4E                 	db	78	;'N'
  1219  007398  54                 	db	84	;'T'
  1220  007399  20                 	db	32
  1221  00739A  3F                 	db	63	;'?'
  1222  00739B  20                 	db	32
  1223  00739C  39                 	db	57	;'9'
  1224  00739D  36                 	db	54	;'6'
  1225  00739E  29                 	db	41
  1226  00739F  0D                 	db	13
  1227  0073A0  0A                 	db	10
  1228  0073A1  00                 	db	0
  1229  0073A2                     STR_226:
  1230  0073A2  20                 	db	32
  1231  0073A3  20                 	db	32
  1232  0073A4  20                 	db	32
  1233  0073A5  20                 	db	32
  1234  0073A6  53                 	db	83	;'S'
  1235  0073A7  54                 	db	84	;'T'
  1236  0073A8  41                 	db	65	;'A'
  1237  0073A9  52                 	db	82	;'R'
  1238  0073AA  54                 	db	84	;'T'
  1239  0073AB  49                 	db	73	;'I'
  1240  0073AC  46                 	db	70	;'F'
  1241  0073AD  20                 	db	32
  1242  0073AE  2D                 	db	45
  1243  0073AF  20                 	db	32
  1244  0073B0  53                 	db	83	;'S'
  1245  0073B1  65                 	db	101	;'e'
  1246  0073B2  74                 	db	116	;'t'
  1247  0073B3  20                 	db	32
  1248  0073B4  69                 	db	105	;'i'
  1249  0073B5  6E                 	db	110	;'n'
  1250  0073B6  74                 	db	116	;'t'
  1251  0073B7  65                 	db	101	;'e'
  1252  0073B8  72                 	db	114	;'r'
  1253  0073B9  66                 	db	102	;'f'
  1254  0073BA  61                 	db	97	;'a'
  1255  0073BB  63                 	db	99	;'c'
  1256  0073BC  65                 	db	101	;'e'
  1257  0073BD  20                 	db	32
  1258  0073BE  73                 	db	115	;'s'
  1259  0073BF  74                 	db	116	;'t'
  1260  0073C0  61                 	db	97	;'a'
  1261  0073C1  74                 	db	116	;'t'
  1262  0073C2  65                 	db	101	;'e'
  1263  0073C3  20                 	db	32
  1264  0073C4  74                 	db	116	;'t'
  1265  0073C5  6F                 	db	111	;'o'
  1266  0073C6  20                 	db	32
  1267  0073C7  75                 	db	117	;'u'
  1268  0073C8  73                 	db	115	;'s'
  1269  0073C9  65                 	db	101	;'e'
  1270  0073CA  20                 	db	32
  1271  0073CB  6F                 	db	111	;'o'
  1272  0073CC  6E                 	db	110	;'n'
  1273  0073CD  20                 	db	32
  1274  0073CE  73                 	db	115	;'s'
  1275  0073CF  74                 	db	116	;'t'
  1276  0073D0  61                 	db	97	;'a'
  1277  0073D1  72                 	db	114	;'r'
  1278  0073D2  74                 	db	116	;'t'
  1279  0073D3  75                 	db	117	;'u'
  1280  0073D4  70                 	db	112	;'p'
  1281  0073D5  2E                 	db	46
  1282  0073D6  0D                 	db	13
  1283  0073D7  0A                 	db	10
  1284  0073D8  00                 	db	0
  1285  0073D9  50                 	db	80	;'P'
  1286  0073DA  72                 	db	114	;'r'
  1287  0073DB  65                 	db	101	;'e'
  1288  0073DC  73                 	db	115	;'s'
  1289  0073DD  73                 	db	115	;'s'
  1290  0073DE  20                 	db	32
  1291  0073DF  27                 	db	39
  1292  0073E0  76                 	db	118	;'v'
  1293  0073E1  27                 	db	39
  1294  0073E2  20                 	db	32
  1295  0073E3  77                 	db	119	;'w'
  1296  0073E4  69                 	db	105	;'i'
  1297  0073E5  74                 	db	116	;'t'
  1298  0073E6  68                 	db	104	;'h'
  1299  0073E7  69                 	db	105	;'i'
  1300  0073E8  6E                 	db	110	;'n'
  1301  0073E9  20                 	db	32
  1302  0073EA  74                 	db	116	;'t'
  1303  0073EB  68                 	db	104	;'h'
  1304  0073EC  72                 	db	114	;'r'
  1305  0073ED  65                 	db	101	;'e'
  1306  0073EE  65                 	db	101	;'e'
  1307  0073EF  20                 	db	32
  1308  0073F0  73                 	db	115	;'s'
  1309  0073F1  65                 	db	101	;'e'
  1310  0073F2  63                 	db	99	;'c'
  1311  0073F3  6F                 	db	111	;'o'
  1312  0073F4  6E                 	db	110	;'n'
  1313  0073F5  64                 	db	100	;'d'
  1314  0073F6  73                 	db	115	;'s'
  1315  0073F7  20                 	db	32
  1316  0073F8  74                 	db	116	;'t'
  1317  0073F9  6F                 	db	111	;'o'
  1318  0073FA  20                 	db	32
  1319  0073FB  65                 	db	101	;'e'
  1320  0073FC  6E                 	db	110	;'n'
  1321  0073FD  74                 	db	116	;'t'
  1322  0073FE  65                 	db	101	;'e'
  1323  0073FF  72                 	db	114	;'r'
  1324  007400  20                 	db	32
  1325  007401  76                 	db	118	;'v'
  1326  007402  65                 	db	101	;'e'
  1327  007403  72                 	db	114	;'r'
  1328  007404  62                 	db	98	;'b'
  1329  007405  6F                 	db	111	;'o'
  1330  007406  73                 	db	115	;'s'
  1331  007407  65                 	db	101	;'e'
  1332  007408  20                 	db	32
  1333  007409  6D                 	db	109	;'m'
  1334  00740A  6F                 	db	111	;'o'
  1335  00740B  64                 	db	100	;'d'
  1336  00740C  65                 	db	101	;'e'
  1337  00740D  0D                 	db	13
  1338  00740E  0A                 	db	10
  1339  00740F  00                 	db	0
  1340  007410                     STR_195:
  1341  007410  52                 	db	82	;'R'
  1342  007411  65                 	db	101	;'e'
  1343  007412  63                 	db	99	;'c'
  1344  007413  65                 	db	101	;'e'
  1345  007414  69                 	db	105	;'i'
  1346  007415  76                 	db	118	;'v'
  1347  007416  65                 	db	101	;'e'
  1348  007417  72                 	db	114	;'r'
  1349  007418  20                 	db	32
  1350  007419  69                 	db	105	;'i'
  1351  00741A  6E                 	db	110	;'n'
  1352  00741B  20                 	db	32
  1353  00741C  45                 	db	69	;'E'
  1354  00741D  72                 	db	114	;'r'
  1355  00741E  72                 	db	114	;'r'
  1356  00741F  6F                 	db	111	;'o'
  1357  007420  72                 	db	114	;'r'
  1358  007421  20                 	db	32
  1359  007422  53                 	db	83	;'S'
  1360  007423  74                 	db	116	;'t'
  1361  007424  61                 	db	97	;'a'
  1362  007425  74                 	db	116	;'t'
  1363  007426  65                 	db	101	;'e'
  1364  007427  20                 	db	32
  1365  007428  42                 	db	66	;'B'
  1366  007429  75                 	db	117	;'u'
  1367  00742A  73                 	db	115	;'s'
  1368  00742B  20                 	db	32
  1369  00742C  50                 	db	80	;'P'
  1370  00742D  61                 	db	97	;'a'
  1371  00742E  73                 	db	115	;'s'
  1372  00742F  73                 	db	115	;'s'
  1373  007430  69                 	db	105	;'i'
  1374  007431  76                 	db	118	;'v'
  1375  007432  65                 	db	101	;'e'
  1376  007433  20                 	db	32
  1377  007434  28                 	db	40
  1378  007435  52                 	db	82	;'R'
  1379  007436  45                 	db	69	;'E'
  1380  007437  52                 	db	82	;'R'
  1381  007438  52                 	db	82	;'R'
  1382  007439  43                 	db	67	;'C'
  1383  00743A  4E                 	db	78	;'N'
  1384  00743B  54                 	db	84	;'T'
  1385  00743C  20                 	db	32
  1386  00743D  3F                 	db	63	;'?'
  1387  00743E  20                 	db	32
  1388  00743F  31                 	db	49	;'1'
  1389  007440  32                 	db	50	;'2'
  1390  007441  38                 	db	56	;'8'
  1391  007442  29                 	db	41
  1392  007443  0D                 	db	13
  1393  007444  0A                 	db	10
  1394  007445  00                 	db	0
  1395  007446                     STR_67:
  1396  007446  2D                 	db	45
  1397  007447  45                 	db	69	;'E'
  1398  007448  52                 	db	82	;'R'
  1399  007449  52                 	db	82	;'R'
  1400  00744A  4F                 	db	79	;'O'
  1401  00744B  52                 	db	82	;'R'
  1402  00744C  20                 	db	32
  1403  00744D  2D                 	db	45
  1404  00744E  20                 	db	32
  1405  00744F  4F                 	db	79	;'O'
  1406  007450  6E                 	db	110	;'n'
  1407  007451  65                 	db	101	;'e'
  1408  007452  20                 	db	32
  1409  007453  6F                 	db	111	;'o'
  1410  007454  72                 	db	114	;'r'
  1411  007455  20                 	db	32
  1412  007456  6D                 	db	109	;'m'
  1413  007457  6F                 	db	111	;'o'
  1414  007458  72                 	db	114	;'r'
  1415  007459  65                 	db	101	;'e'
  1416  00745A  20                 	db	32
  1417  00745B  72                 	db	114	;'r'
  1418  00745C  65                 	db	101	;'e'
  1419  00745D  67                 	db	103	;'g'
  1420  00745E  69                 	db	105	;'i'
  1421  00745F  73                 	db	115	;'s'
  1422  007460  74                 	db	116	;'t'
  1423  007461  65                 	db	101	;'e'
  1424  007462  72                 	db	114	;'r'
  1425  007463  28                 	db	40
  1426  007464  73                 	db	115	;'s'
  1427  007465  29                 	db	41
  1428  007466  20                 	db	32
  1429  007467  63                 	db	99	;'c'
  1430  007468  6F                 	db	111	;'o'
  1431  007469  75                 	db	117	;'u'
  1432  00746A  6C                 	db	108	;'l'
  1433  00746B  64                 	db	100	;'d'
  1434  00746C  20                 	db	32
  1435  00746D  6E                 	db	110	;'n'
  1436  00746E  6F                 	db	111	;'o'
  1437  00746F  74                 	db	116	;'t'
  1438  007470  20                 	db	32
  1439  007471  62                 	db	98	;'b'
  1440  007472  65                 	db	101	;'e'
  1441  007473  20                 	db	32
  1442  007474  72                 	db	114	;'r'
  1443  007475  65                 	db	101	;'e'
  1444  007476  61                 	db	97	;'a'
  1445  007477  64                 	db	100	;'d'
  1446  007478  2E                 	db	46
  1447  007479  0D                 	db	13
  1448  00747A  0A                 	db	10
  1449  00747B  00                 	db	0
  1450  00747C                     STR_188:
  1451  00747C  54                 	db	84	;'T'
  1452  00747D  72                 	db	114	;'r'
  1453  00747E  61                 	db	97	;'a'
  1454  00747F  6E                 	db	110	;'n'
  1455  007480  73                 	db	115	;'s'
  1456  007481  6D                 	db	109	;'m'
  1457  007482  69                 	db	105	;'i'
  1458  007483  74                 	db	116	;'t'
  1459  007484  74                 	db	116	;'t'
  1460  007485  65                 	db	101	;'e'
  1461  007486  72                 	db	114	;'r'
  1462  007487  20                 	db	32
  1463  007488  69                 	db	105	;'i'
  1464  007489  6E                 	db	110	;'n'
  1465  00748A  20                 	db	32
  1466  00748B  45                 	db	69	;'E'
  1467  00748C  72                 	db	114	;'r'
  1468  00748D  72                 	db	114	;'r'
  1469  00748E  6F                 	db	111	;'o'
  1470  00748F  72                 	db	114	;'r'
  1471  007490  20                 	db	32
  1472  007491  53                 	db	83	;'S'
  1473  007492  74                 	db	116	;'t'
  1474  007493  61                 	db	97	;'a'
  1475  007494  74                 	db	116	;'t'
  1476  007495  65                 	db	101	;'e'
  1477  007496  20                 	db	32
  1478  007497  42                 	db	66	;'B'
  1479  007498  75                 	db	117	;'u'
  1480  007499  73                 	db	115	;'s'
  1481  00749A  20                 	db	32
  1482  00749B  4F                 	db	79	;'O'
  1483  00749C  46                 	db	70	;'F'
  1484  00749D  46                 	db	70	;'F'
  1485  00749E  20                 	db	32
  1486  00749F  28                 	db	40
  1487  0074A0  54                 	db	84	;'T'
  1488  0074A1  45                 	db	69	;'E'
  1489  0074A2  52                 	db	82	;'R'
  1490  0074A3  52                 	db	82	;'R'
  1491  0074A4  43                 	db	67	;'C'
  1492  0074A5  4E                 	db	78	;'N'
  1493  0074A6  54                 	db	84	;'T'
  1494  0074A7  20                 	db	32
  1495  0074A8  3F                 	db	63	;'?'
  1496  0074A9  20                 	db	32
  1497  0074AA  32                 	db	50	;'2'
  1498  0074AB  35                 	db	53	;'5'
  1499  0074AC  36                 	db	54	;'6'
  1500  0074AD  29                 	db	41
  1501  0074AE  0D                 	db	13
  1502  0074AF  0A                 	db	10
  1503  0074B0  00                 	db	0
  1504  0074B1                     STR_2:
  1505  0074B1  43                 	db	67	;'C'
  1506  0074B2  6F                 	db	111	;'o'
  1507  0074B3  70                 	db	112	;'p'
  1508  0074B4  79                 	db	121	;'y'
  1509  0074B5  72                 	db	114	;'r'
  1510  0074B6  69                 	db	105	;'i'
  1511  0074B7  67                 	db	103	;'g'
  1512  0074B8  68                 	db	104	;'h'
  1513  0074B9  74                 	db	116	;'t'
  1514  0074BA  20                 	db	32
  1515  0074BB  28                 	db	40
  1516  0074BC  43                 	db	67	;'C'
  1517  0074BD  29                 	db	41
  1518  0074BE  20                 	db	32
  1519  0074BF  32                 	db	50	;'2'
  1520  0074C0  30                 	db	48	;'0'
  1521  0074C1  31                 	db	49	;'1'
  1522  0074C2  34                 	db	52	;'4'
  1523  0074C3  2D                 	db	45
  1524  0074C4  32                 	db	50	;'2'
  1525  0074C5  30                 	db	48	;'0'
  1526  0074C6  31                 	db	49	;'1'
  1527  0074C7  35                 	db	53	;'5'
  1528  0074C8  20                 	db	32
  1529  0074C9  47                 	db	71	;'G'
  1530  0074CA  72                 	db	114	;'r'
  1531  0074CB  6F                 	db	111	;'o'
  1532  0074CC  64                 	db	100	;'d'
  1533  0074CD  61                 	db	97	;'a'
  1534  0074CE  6E                 	db	110	;'n'
  1535  0074CF  73                 	db	115	;'s'
  1536  0074D0  20                 	db	32
  1537  0074D1  50                 	db	80	;'P'
  1538  0074D2  61                 	db	97	;'a'
  1539  0074D3  72                 	db	114	;'r'
  1540  0074D4  61                 	db	97	;'a'
  1541  0074D5  64                 	db	100	;'d'
  1542  0074D6  69                 	db	105	;'i'
  1543  0074D7  73                 	db	115	;'s'
  1544  0074D8  20                 	db	32
  1545  0074D9  41                 	db	65	;'A'
  1546  0074DA  42                 	db	66	;'B'
  1547  0074DB  2C                 	db	44
  1548  0074DC  20                 	db	32
  1549  0074DD  53                 	db	83	;'S'
  1550  0074DE  77                 	db	119	;'w'
  1551  0074DF  65                 	db	101	;'e'
  1552  0074E0  64                 	db	100	;'d'
  1553  0074E1  65                 	db	101	;'e'
  1554  0074E2  6E                 	db	110	;'n'
  1555  0074E3  0D                 	db	13
  1556  0074E4  0A                 	db	10
  1557  0074E5  00                 	db	0
  1558  0074E6                     STR_196:
  1559  0074E6  54                 	db	84	;'T'
  1560  0074E7  72                 	db	114	;'r'
  1561  0074E8  61                 	db	97	;'a'
  1562  0074E9  6E                 	db	110	;'n'
  1563  0074EA  73                 	db	115	;'s'
  1564  0074EB  6D                 	db	109	;'m'
  1565  0074EC  69                 	db	105	;'i'
  1566  0074ED  74                 	db	116	;'t'
  1567  0074EE  74                 	db	116	;'t'
  1568  0074EF  65                 	db	101	;'e'
  1569  0074F0  72                 	db	114	;'r'
  1570  0074F1  20                 	db	32
  1571  0074F2  6F                 	db	111	;'o'
  1572  0074F3  72                 	db	114	;'r'
  1573  0074F4  20                 	db	32
  1574  0074F5  52                 	db	82	;'R'
  1575  0074F6  65                 	db	101	;'e'
  1576  0074F7  63                 	db	99	;'c'
  1577  0074F8  65                 	db	101	;'e'
  1578  0074F9  69                 	db	105	;'i'
  1579  0074FA  76                 	db	118	;'v'
  1580  0074FB  65                 	db	101	;'e'
  1581  0074FC  72                 	db	114	;'r'
  1582  0074FD  20                 	db	32
  1583  0074FE  69                 	db	105	;'i'
  1584  0074FF  73                 	db	115	;'s'
  1585  007500  20                 	db	32
  1586  007501  69                 	db	105	;'i'
  1587  007502  6E                 	db	110	;'n'
  1588  007503  20                 	db	32
  1589  007504  45                 	db	69	;'E'
  1590  007505  72                 	db	114	;'r'
  1591  007506  72                 	db	114	;'r'
  1592  007507  6F                 	db	111	;'o'
  1593  007508  72                 	db	114	;'r'
  1594  007509  20                 	db	32
  1595  00750A  53                 	db	83	;'S'
  1596  00750B  74                 	db	116	;'t'
  1597  00750C  61                 	db	97	;'a'
  1598  00750D  74                 	db	116	;'t'
  1599  00750E  65                 	db	101	;'e'
  1600  00750F  20                 	db	32
  1601  007510  57                 	db	87	;'W'
  1602  007511  61                 	db	97	;'a'
  1603  007512  72                 	db	114	;'r'
  1604  007513  6E                 	db	110	;'n'
  1605  007514  69                 	db	105	;'i'
  1606  007515  6E                 	db	110	;'n'
  1607  007516  67                 	db	103	;'g'
  1608  007517  0D                 	db	13
  1609  007518  0A                 	db	10
  1610  007519  00                 	db	0
  1611  00751A                     STR_202:
  1612  00751A  4C                 	db	76	;'L'
  1613  00751B  49                 	db	73	;'I'
  1614  00751C  53                 	db	83	;'S'
  1615  00751D  54                 	db	84	;'T'
  1616  00751E  45                 	db	69	;'E'
  1617  00751F  4E                 	db	78	;'N'
  1618  007520  20                 	db	32
  1619  007521  2D                 	db	45
  1620  007522  20                 	db	32
  1621  007523  4F                 	db	79	;'O'
  1622  007524  70                 	db	112	;'p'
  1623  007525  65                 	db	101	;'e'
  1624  007526  6E                 	db	110	;'n'
  1625  007527  20                 	db	32
  1626  007528  43                 	db	67	;'C'
  1627  007529  41                 	db	65	;'A'
  1628  00752A  4E                 	db	78	;'N'
  1629  00752B  20                 	db	32
  1630  00752C  69                 	db	105	;'i'
  1631  00752D  6E                 	db	110	;'n'
  1632  00752E  74                 	db	116	;'t'
  1633  00752F  65                 	db	101	;'e'
  1634  007530  72                 	db	114	;'r'
  1635  007531  66                 	db	102	;'f'
  1636  007532  61                 	db	97	;'a'
  1637  007533  63                 	db	99	;'c'
  1638  007534  65                 	db	101	;'e'
  1639  007535  20                 	db	32
  1640  007536  69                 	db	105	;'i'
  1641  007537  6E                 	db	110	;'n'
  1642  007538  20                 	db	32
  1643  007539  6C                 	db	108	;'l'
  1644  00753A  69                 	db	105	;'i'
  1645  00753B  73                 	db	115	;'s'
  1646  00753C  74                 	db	116	;'t'
  1647  00753D  65                 	db	101	;'e'
  1648  00753E  6E                 	db	110	;'n'
  1649  00753F  20                 	db	32
  1650  007540  6F                 	db	111	;'o'
  1651  007541  6E                 	db	110	;'n'
  1652  007542  6C                 	db	108	;'l'
  1653  007543  79                 	db	121	;'y'
  1654  007544  20                 	db	32
  1655  007545  6D                 	db	109	;'m'
  1656  007546  6F                 	db	111	;'o'
  1657  007547  64                 	db	100	;'d'
  1658  007548  65                 	db	101	;'e'
  1659  007549  2E                 	db	46
  1660  00754A  0D                 	db	13
  1661  00754B  0A                 	db	10
  1662  00754C  00                 	db	0
  1663  00754D                     STR_96:
  1664  00754D  2D                 	db	45
  1665  00754E  45                 	db	69	;'E'
  1666  00754F  52                 	db	82	;'R'
  1667  007550  52                 	db	82	;'R'
  1668  007551  4F                 	db	79	;'O'
  1669  007552  52                 	db	82	;'R'
  1670  007553  20                 	db	32
  1671  007554  2D                 	db	45
  1672  007555  20                 	db	32
  1673  007556  4D                 	db	77	;'M'
  1674  007557  61                 	db	97	;'a'
  1675  007558  73                 	db	115	;'s'
  1676  007559  6B                 	db	107	;'k'
  1677  00755A  20                 	db	32
  1678  00755B  6E                 	db	110	;'n'
  1679  00755C  75                 	db	117	;'u'
  1680  00755D  6D                 	db	109	;'m'
  1681  00755E  62                 	db	98	;'b'
  1682  00755F  65                 	db	101	;'e'
  1683  007560  72                 	db	114	;'r'
  1684  007561  20                 	db	32
  1685  007562  63                 	db	99	;'c'
  1686  007563  61                 	db	97	;'a'
  1687  007564  6E                 	db	110	;'n'
  1688  007565  20                 	db	32
  1689  007566  6F                 	db	111	;'o'
  1690  007567  6E                 	db	110	;'n'
  1691  007568  6C                 	db	108	;'l'
  1692  007569  79                 	db	121	;'y'
  1693  00756A  20                 	db	32
  1694  00756B  62                 	db	98	;'b'
  1695  00756C  65                 	db	101	;'e'
  1696  00756D  20                 	db	32
  1697  00756E  73                 	db	115	;'s'
  1698  00756F  65                 	db	101	;'e'
  1699  007570  74                 	db	116	;'t'
  1700  007571  20                 	db	32
  1701  007572  61                 	db	97	;'a'
  1702  007573  73                 	db	115	;'s'
  1703  007574  20                 	db	32
  1704  007575  30                 	db	48	;'0'
  1705  007576  20                 	db	32
  1706  007577  6F                 	db	111	;'o'
  1707  007578  72                 	db	114	;'r'
  1708  007579  20                 	db	32
  1709  00757A  31                 	db	49	;'1'
  1710  00757B  2E                 	db	46
  1711  00757C  0D                 	db	13
  1712  00757D  0A                 	db	10
  1713  00757E  00                 	db	0
  1714  00757F                     STR_203:
  1715  00757F  4C                 	db	76	;'L'
  1716  007580  4F                 	db	79	;'O'
  1717  007581  4F                 	db	79	;'O'
  1718  007582  50                 	db	80	;'P'
  1719  007583  42                 	db	66	;'B'
  1720  007584  41                 	db	65	;'A'
  1721  007585  43                 	db	67	;'C'
  1722  007586  4B                 	db	75	;'K'
  1723  007587  20                 	db	32
  1724  007588  2D                 	db	45
  1725  007589  20                 	db	32
  1726  00758A  4F                 	db	79	;'O'
  1727  00758B  70                 	db	112	;'p'
  1728  00758C  65                 	db	101	;'e'
  1729  00758D  6E                 	db	110	;'n'
  1730  00758E  20                 	db	32
  1731  00758F  43                 	db	67	;'C'
  1732  007590  41                 	db	65	;'A'
  1733  007591  4E                 	db	78	;'N'
  1734  007592  20                 	db	32
  1735  007593  69                 	db	105	;'i'
  1736  007594  6E                 	db	110	;'n'
  1737  007595  74                 	db	116	;'t'
  1738  007596  65                 	db	101	;'e'
  1739  007597  72                 	db	114	;'r'
  1740  007598  66                 	db	102	;'f'
  1741  007599  61                 	db	97	;'a'
  1742  00759A  63                 	db	99	;'c'
  1743  00759B  65                 	db	101	;'e'
  1744  00759C  20                 	db	32
  1745  00759D  69                 	db	105	;'i'
  1746  00759E  6E                 	db	110	;'n'
  1747  00759F  20                 	db	32
  1748  0075A0  6C                 	db	108	;'l'
  1749  0075A1  6F                 	db	111	;'o'
  1750  0075A2  6F                 	db	111	;'o'
  1751  0075A3  70                 	db	112	;'p'
  1752  0075A4  62                 	db	98	;'b'
  1753  0075A5  61                 	db	97	;'a'
  1754  0075A6  63                 	db	99	;'c'
  1755  0075A7  6B                 	db	107	;'k'
  1756  0075A8  20                 	db	32
  1757  0075A9  6D                 	db	109	;'m'
  1758  0075AA  6F                 	db	111	;'o'
  1759  0075AB  64                 	db	100	;'d'
  1760  0075AC  65                 	db	101	;'e'
  1761  0075AD  2E                 	db	46
  1762  0075AE  0D                 	db	13
  1763  0075AF  0A                 	db	10
  1764  0075B0  00                 	db	0
  1765  0075B1                     STR_205:
  1766  0075B1  56                 	db	86	;'V'
  1767  0075B2  45                 	db	69	;'E'
  1768  0075B3  52                 	db	82	;'R'
  1769  0075B4  53                 	db	83	;'S'
  1770  0075B5  49                 	db	73	;'I'
  1771  0075B6  4F                 	db	79	;'O'
  1772  0075B7  4E                 	db	78	;'N'
  1773  0075B8  20                 	db	32
  1774  0075B9  2D                 	db	45
  1775  0075BA  20                 	db	32
  1776  0075BB  44                 	db	68	;'D'
  1777  0075BC  69                 	db	105	;'i'
  1778  0075BD  73                 	db	115	;'s'
  1779  0075BE  70                 	db	112	;'p'
  1780  0075BF  6C                 	db	108	;'l'
  1781  0075C0  61                 	db	97	;'a'
  1782  0075C1  79                 	db	121	;'y'
  1783  0075C2  20                 	db	32
  1784  0075C3  66                 	db	102	;'f'
  1785  0075C4  69                 	db	105	;'i'
  1786  0075C5  72                 	db	114	;'r'
  1787  0075C6  6D                 	db	109	;'m'
  1788  0075C7  77                 	db	119	;'w'
  1789  0075C8  61                 	db	97	;'a'
  1790  0075C9  72                 	db	114	;'r'
  1791  0075CA  65                 	db	101	;'e'
  1792  0075CB  20                 	db	32
  1793  0075CC  76                 	db	118	;'v'
  1794  0075CD  65                 	db	101	;'e'
  1795  0075CE  72                 	db	114	;'r'
  1796  0075CF  73                 	db	115	;'s'
  1797  0075D0  69                 	db	105	;'i'
  1798  0075D1  6F                 	db	111	;'o'
  1799  0075D2  6E                 	db	110	;'n'
  1800  0075D3  20                 	db	32
  1801  0075D4  69                 	db	105	;'i'
  1802  0075D5  6E                 	db	110	;'n'
  1803  0075D6  66                 	db	102	;'f'
  1804  0075D7  6F                 	db	111	;'o'
  1805  0075D8  72                 	db	114	;'r'
  1806  0075D9  6D                 	db	109	;'m'
  1807  0075DA  61                 	db	97	;'a'
  1808  0075DB  74                 	db	116	;'t'
  1809  0075DC  69                 	db	105	;'i'
  1810  0075DD  6F                 	db	111	;'o'
  1811  0075DE  6E                 	db	110	;'n'
  1812  0075DF  2E                 	db	46
  1813  0075E0  0D                 	db	13
  1814  0075E1  0A                 	db	10
  1815  0075E2  00                 	db	0
  1816  0075E3                     STR_225:
  1817  0075E3  20                 	db	32
  1818  0075E4  20                 	db	32
  1819  0075E5  20                 	db	32
  1820  0075E6  20                 	db	32
  1821  0075E7  20                 	db	32
  1822  0075E8  20                 	db	32
  1823  0075E9  20                 	db	32
  1824  0075EA  20                 	db	32
  1825  0075EB  20                 	db	32
  1826  0075EC  20                 	db	32
  1827  0075ED  20                 	db	32
  1828  0075EE  20                 	db	32
  1829  0075EF  20                 	db	32
  1830  0075F0  20                 	db	32
  1831  0075F1  20                 	db	32
  1832  0075F2  20                 	db	32
  1833  0075F3  46                 	db	70	;'F'
  1834  0075F4  6F                 	db	111	;'o'
  1835  0075F5  72                 	db	114	;'r'
  1836  0075F6  6D                 	db	109	;'m'
  1837  0075F7  61                 	db	97	;'a'
  1838  0075F8  74                 	db	116	;'t'
  1839  0075F9  3A                 	db	58	;':'
  1840  0075FA  20                 	db	32
  1841  0075FB  73                 	db	115	;'s'
  1842  0075FC  65                 	db	101	;'e'
  1843  0075FD  74                 	db	116	;'t'
  1844  0075FE  20                 	db	32
  1845  0075FF  72                 	db	114	;'r'
  1846  007600  77                 	db	119	;'w'
  1847  007601  74                 	db	116	;'t'
  1848  007602  69                 	db	105	;'i'
  1849  007603  6D                 	db	109	;'m'
  1850  007604  65                 	db	101	;'e'
  1851  007605  6F                 	db	111	;'o'
  1852  007606  75                 	db	117	;'u'
  1853  007607  74                 	db	116	;'t'
  1854  007608  20                 	db	32
  1855  007609  74                 	db	116	;'t'
  1856  00760A  69                 	db	105	;'i'
  1857  00760B  6D                 	db	109	;'m'
  1858  00760C  65                 	db	101	;'e'
  1859  00760D  6F                 	db	111	;'o'
  1860  00760E  75                 	db	117	;'u'
  1861  00760F  74                 	db	116	;'t'
  1862  007610  2E                 	db	46
  1863  007611  0D                 	db	13
  1864  007612  0A                 	db	10
  1865  007613  00                 	db	0
  1866  007614                     STR_223:
  1867  007614  20                 	db	32
  1868  007615  20                 	db	32
  1869  007616  20                 	db	32
  1870  007617  20                 	db	32
  1871  007618  44                 	db	68	;'D'
  1872  007619  45                 	db	69	;'E'
  1873  00761A  43                 	db	67	;'C'
  1874  00761B  49                 	db	73	;'I'
  1875  00761C  4D                 	db	77	;'M'
  1876  00761D  41                 	db	65	;'A'
  1877  00761E  4C                 	db	76	;'L'
  1878  00761F  20                 	db	32
  1879  007620  2D                 	db	45
  1880  007621  20                 	db	32
  1881  007622  44                 	db	68	;'D'
  1882  007623  69                 	db	105	;'i'
  1883  007624  73                 	db	115	;'s'
  1884  007625  70                 	db	112	;'p'
  1885  007626  6C                 	db	108	;'l'
  1886  007627  61                 	db	97	;'a'
  1887  007628  79                 	db	121	;'y'
  1888  007629  20                 	db	32
  1889  00762A  6E                 	db	110	;'n'
  1890  00762B  75                 	db	117	;'u'
  1891  00762C  6D                 	db	109	;'m'
  1892  00762D  65                 	db	101	;'e'
  1893  00762E  72                 	db	114	;'r'
  1894  00762F  69                 	db	105	;'i'
  1895  007630  63                 	db	99	;'c'
  1896  007631  61                 	db	97	;'a'
  1897  007632  6C                 	db	108	;'l'
  1898  007633  73                 	db	115	;'s'
  1899  007634  20                 	db	32
  1900  007635  69                 	db	105	;'i'
  1901  007636  6E                 	db	110	;'n'
  1902  007637  20                 	db	32
  1903  007638  64                 	db	100	;'d'
  1904  007639  65                 	db	101	;'e'
  1905  00763A  63                 	db	99	;'c'
  1906  00763B  69                 	db	105	;'i'
  1907  00763C  6D                 	db	109	;'m'
  1908  00763D  61                 	db	97	;'a'
  1909  00763E  6C                 	db	108	;'l'
  1910  00763F  2E                 	db	46
  1911  007640  0D                 	db	13
  1912  007641  0A                 	db	10
  1913  007642  00                 	db	0
  1914  007643                     STR_222:
  1915  007643  20                 	db	32
  1916  007644  20                 	db	32
  1917  007645  20                 	db	32
  1918  007646  20                 	db	32
  1919  007647  48                 	db	72	;'H'
  1920  007648  45                 	db	69	;'E'
  1921  007649  58                 	db	88	;'X'
  1922  00764A  20                 	db	32
  1923  00764B  2D                 	db	45
  1924  00764C  20                 	db	32
  1925  00764D  44                 	db	68	;'D'
  1926  00764E  69                 	db	105	;'i'
  1927  00764F  73                 	db	115	;'s'
  1928  007650  70                 	db	112	;'p'
  1929  007651  6C                 	db	108	;'l'
  1930  007652  61                 	db	97	;'a'
  1931  007653  79                 	db	121	;'y'
  1932  007654  20                 	db	32
  1933  007655  6E                 	db	110	;'n'
  1934  007656  75                 	db	117	;'u'
  1935  007657  6D                 	db	109	;'m'
  1936  007658  65                 	db	101	;'e'
  1937  007659  72                 	db	114	;'r'
  1938  00765A  69                 	db	105	;'i'
  1939  00765B  63                 	db	99	;'c'
  1940  00765C  61                 	db	97	;'a'
  1941  00765D  6C                 	db	108	;'l'
  1942  00765E  73                 	db	115	;'s'
  1943  00765F  20                 	db	32
  1944  007660  69                 	db	105	;'i'
  1945  007661  6E                 	db	110	;'n'
  1946  007662  20                 	db	32
  1947  007663  68                 	db	104	;'h'
  1948  007664  65                 	db	101	;'e'
  1949  007665  78                 	db	120	;'x'
  1950  007666  61                 	db	97	;'a'
  1951  007667  64                 	db	100	;'d'
  1952  007668  65                 	db	101	;'e'
  1953  007669  63                 	db	99	;'c'
  1954  00766A  69                 	db	105	;'i'
  1955  00766B  6D                 	db	109	;'m'
  1956  00766C  61                 	db	97	;'a'
  1957  00766D  6C                 	db	108	;'l'
  1958  00766E  2E                 	db	46
  1959  00766F  0D                 	db	13
  1960  007670  0A                 	db	10
  1961  007671  00                 	db	0
  1962  007672                     STR_213:
  1963  007672  46                 	db	70	;'F'
  1964  007673  49                 	db	73	;'I'
  1965  007674  4E                 	db	78	;'N'
  1966  007675  44                 	db	68	;'D'
  1967  007676  20                 	db	32
  1968  007677  2D                 	db	45
  1969  007678  20                 	db	32
  1970  007679  46                 	db	70	;'F'
  1971  00767A  69                 	db	105	;'i'
  1972  00767B  6E                 	db	110	;'n'
  1973  00767C  64                 	db	100	;'d'
  1974  00767D  20                 	db	32
  1975  00767E  61                 	db	97	;'a'
  1976  00767F  76                 	db	118	;'v'
  1977  007680  61                 	db	97	;'a'
  1978  007681  69                 	db	105	;'i'
  1979  007682  6C                 	db	108	;'l'
  1980  007683  61                 	db	97	;'a'
  1981  007684  62                 	db	98	;'b'
  1982  007685  6C                 	db	108	;'l'
  1983  007686  65                 	db	101	;'e'
  1984  007687  20                 	db	32
  1985  007688  43                 	db	67	;'C'
  1986  007689  41                 	db	65	;'A'
  1987  00768A  4E                 	db	78	;'N'
  1988  00768B  34                 	db	52	;'4'
  1989  00768C  56                 	db	86	;'V'
  1990  00768D  53                 	db	83	;'S'
  1991  00768E  43                 	db	67	;'C'
  1992  00768F  50                 	db	80	;'P'
  1993  007690  20                 	db	32
  1994  007691  6E                 	db	110	;'n'
  1995  007692  6F                 	db	111	;'o'
  1996  007693  64                 	db	100	;'d'
  1997  007694  65                 	db	101	;'e'
  1998  007695  73                 	db	115	;'s'
  1999  007696  20                 	db	32
  2000  007697  6F                 	db	111	;'o'
  2001  007698  6E                 	db	110	;'n'
  2002  007699  20                 	db	32
  2003  00769A  62                 	db	98	;'b'
  2004  00769B  75                 	db	117	;'u'
  2005  00769C  73                 	db	115	;'s'
  2006  00769D  2E                 	db	46
  2007  00769E  0D                 	db	13
  2008  00769F  0A                 	db	10
  2009  0076A0  00                 	db	0
  2010  0076A1                     STR_201:
  2011  0076A1  53                 	db	83	;'S'
  2012  0076A2  49                 	db	73	;'I'
  2013  0076A3  4C                 	db	76	;'L'
  2014  0076A4  45                 	db	69	;'E'
  2015  0076A5  4E                 	db	78	;'N'
  2016  0076A6  54                 	db	84	;'T'
  2017  0076A7  20                 	db	32
  2018  0076A8  2D                 	db	45
  2019  0076A9  20                 	db	32
  2020  0076AA  4F                 	db	79	;'O'
  2021  0076AB  70                 	db	112	;'p'
  2022  0076AC  65                 	db	101	;'e'
  2023  0076AD  6E                 	db	110	;'n'
  2024  0076AE  20                 	db	32
  2025  0076AF  43                 	db	67	;'C'
  2026  0076B0  41                 	db	65	;'A'
  2027  0076B1  4E                 	db	78	;'N'
  2028  0076B2  20                 	db	32
  2029  0076B3  69                 	db	105	;'i'
  2030  0076B4  6E                 	db	110	;'n'
  2031  0076B5  74                 	db	116	;'t'
  2032  0076B6  65                 	db	101	;'e'
  2033  0076B7  72                 	db	114	;'r'
  2034  0076B8  66                 	db	102	;'f'
  2035  0076B9  61                 	db	97	;'a'
  2036  0076BA  63                 	db	99	;'c'
  2037  0076BB  65                 	db	101	;'e'
  2038  0076BC  20                 	db	32
  2039  0076BD  69                 	db	105	;'i'
  2040  0076BE  6E                 	db	110	;'n'
  2041  0076BF  20                 	db	32
  2042  0076C0  73                 	db	115	;'s'
  2043  0076C1  69                 	db	105	;'i'
  2044  0076C2  6C                 	db	108	;'l'
  2045  0076C3  65                 	db	101	;'e'
  2046  0076C4  6E                 	db	110	;'n'
  2047  0076C5  74                 	db	116	;'t'
  2048  0076C6  20                 	db	32
  2049  0076C7  6D                 	db	109	;'m'
  2050  0076C8  6F                 	db	111	;'o'
  2051  0076C9  64                 	db	100	;'d'
  2052  0076CA  65                 	db	101	;'e'
  2053  0076CB  2E                 	db	46
  2054  0076CC  0D                 	db	13
  2055  0076CD  0A                 	db	10
  2056  0076CE  00                 	db	0
  2057  0076CF                     STR_206:
  2058  0076CF  49                 	db	73	;'I'
  2059  0076D0  46                 	db	70	;'F'
  2060  0076D1  4D                 	db	77	;'M'
  2061  0076D2  4F                 	db	79	;'O'
  2062  0076D3  44                 	db	68	;'D'
  2063  0076D4  45                 	db	69	;'E'
  2064  0076D5  20                 	db	32
  2065  0076D6  2D                 	db	45
  2066  0076D7  20                 	db	32
  2067  0076D8  44                 	db	68	;'D'
  2068  0076D9  69                 	db	105	;'i'
  2069  0076DA  73                 	db	115	;'s'
  2070  0076DB  70                 	db	112	;'p'
  2071  0076DC  6C                 	db	108	;'l'
  2072  0076DD  61                 	db	97	;'a'
  2073  0076DE  79                 	db	121	;'y'
  2074  0076DF  20                 	db	32
  2075  0076E0  73                 	db	115	;'s'
  2076  0076E1  65                 	db	101	;'e'
  2077  0076E2  6C                 	db	108	;'l'
  2078  0076E3  65                 	db	101	;'e'
  2079  0076E4  63                 	db	99	;'c'
  2080  0076E5  74                 	db	116	;'t'
  2081  0076E6  65                 	db	101	;'e'
  2082  0076E7  64                 	db	100	;'d'
  2083  0076E8  20                 	db	32
  2084  0076E9  69                 	db	105	;'i'
  2085  0076EA  6E                 	db	110	;'n'
  2086  0076EB  74                 	db	116	;'t'
  2087  0076EC  65                 	db	101	;'e'
  2088  0076ED  72                 	db	114	;'r'
  2089  0076EE  66                 	db	102	;'f'
  2090  0076EF  61                 	db	97	;'a'
  2091  0076F0  63                 	db	99	;'c'
  2092  0076F1  65                 	db	101	;'e'
  2093  0076F2  20                 	db	32
  2094  0076F3  6D                 	db	109	;'m'
  2095  0076F4  6F                 	db	111	;'o'
  2096  0076F5  64                 	db	100	;'d'
  2097  0076F6  65                 	db	101	;'e'
  2098  0076F7  2E                 	db	46
  2099  0076F8  0D                 	db	13
  2100  0076F9  0A                 	db	10
  2101  0076FA  00                 	db	0
  2102  0076FB                     STR_200:
  2103  0076FB  4F                 	db	79	;'O'
  2104  0076FC  50                 	db	80	;'P'
  2105  0076FD  45                 	db	69	;'E'
  2106  0076FE  4E                 	db	78	;'N'
  2107  0076FF  20                 	db	32
  2108  007700  2D                 	db	45
  2109  007701  20                 	db	32
  2110  007702  4F                 	db	79	;'O'
  2111  007703  70                 	db	112	;'p'
  2112  007704  65                 	db	101	;'e'
  2113  007705  6E                 	db	110	;'n'
  2114  007706  20                 	db	32
  2115  007707  43                 	db	67	;'C'
  2116  007708  41                 	db	65	;'A'
  2117  007709  4E                 	db	78	;'N'
  2118  00770A  20                 	db	32
  2119  00770B  69                 	db	105	;'i'
  2120  00770C  6E                 	db	110	;'n'
  2121  00770D  74                 	db	116	;'t'
  2122  00770E  65                 	db	101	;'e'
  2123  00770F  72                 	db	114	;'r'
  2124  007710  66                 	db	102	;'f'
  2125  007711  61                 	db	97	;'a'
  2126  007712  63                 	db	99	;'c'
  2127  007713  65                 	db	101	;'e'
  2128  007714  20                 	db	32
  2129  007715  69                 	db	105	;'i'
  2130  007716  6E                 	db	110	;'n'
  2131  007717  20                 	db	32
  2132  007718  6E                 	db	110	;'n'
  2133  007719  6F                 	db	111	;'o'
  2134  00771A  72                 	db	114	;'r'
  2135  00771B  6D                 	db	109	;'m'
  2136  00771C  61                 	db	97	;'a'
  2137  00771D  6C                 	db	108	;'l'
  2138  00771E  20                 	db	32
  2139  00771F  6D                 	db	109	;'m'
  2140  007720  6F                 	db	111	;'o'
  2141  007721  64                 	db	100	;'d'
  2142  007722  65                 	db	101	;'e'
  2143  007723  2E                 	db	46
  2144  007724  0D                 	db	13
  2145  007725  0A                 	db	10
  2146  007726  00                 	db	0
  2147  007727                     STR_108:
  2148  007727  2B                 	db	43
  2149  007728  4F                 	db	79	;'O'
  2150  007729  4B                 	db	75	;'K'
  2151  00772A  20                 	db	32
  2152  00772B  2D                 	db	45
  2153  00772C  20                 	db	32
  2154  00772D  4E                 	db	78	;'N'
  2155  00772E  75                 	db	117	;'u'
  2156  00772F  6D                 	db	109	;'m'
  2157  007730  65                 	db	101	;'e'
  2158  007731  72                 	db	114	;'r'
  2159  007732  69                 	db	105	;'i'
  2160  007733  63                 	db	99	;'c'
  2161  007734  61                 	db	97	;'a'
  2162  007735  6C                 	db	108	;'l'
  2163  007736  20                 	db	32
  2164  007737  6F                 	db	111	;'o'
  2165  007738  75                 	db	117	;'u'
  2166  007739  74                 	db	116	;'t'
  2167  00773A  70                 	db	112	;'p'
  2168  00773B  75                 	db	117	;'u'
  2169  00773C  74                 	db	116	;'t'
  2170  00773D  20                 	db	32
  2171  00773E  6E                 	db	110	;'n'
  2172  00773F  6F                 	db	111	;'o'
  2173  007740  77                 	db	119	;'w'
  2174  007741  20                 	db	32
  2175  007742  69                 	db	105	;'i'
  2176  007743  6E                 	db	110	;'n'
  2177  007744  20                 	db	32
  2178  007745  68                 	db	104	;'h'
  2179  007746  65                 	db	101	;'e'
  2180  007747  78                 	db	120	;'x'
  2181  007748  61                 	db	97	;'a'
  2182  007749  64                 	db	100	;'d'
  2183  00774A  65                 	db	101	;'e'
  2184  00774B  63                 	db	99	;'c'
  2185  00774C  69                 	db	105	;'i'
  2186  00774D  6D                 	db	109	;'m'
  2187  00774E  61                 	db	97	;'a'
  2188  00774F  6C                 	db	108	;'l'
  2189  007750  0D                 	db	13
  2190  007751  0A                 	db	10
  2191  007752  00                 	db	0
  2192  007753                     STR_87:
  2193  007753  2D                 	db	45
  2194  007754  45                 	db	69	;'E'
  2195  007755  52                 	db	82	;'R'
  2196  007756  52                 	db	82	;'R'
  2197  007757  4F                 	db	79	;'O'
  2198  007758  52                 	db	82	;'R'
  2199  007759  20                 	db	32
  2200  00775A  2D                 	db	45
  2201  00775B  20                 	db	32
  2202  00775C  66                 	db	102	;'f'
  2203  00775D  69                 	db	105	;'i'
  2204  00775E  6C                 	db	108	;'l'
  2205  00775F  74                 	db	116	;'t'
  2206  007760  65                 	db	101	;'e'
  2207  007761  72                 	db	114	;'r'
  2208  007762  20                 	db	32
  2209  007763  66                 	db	102	;'f'
  2210  007764  6F                 	db	111	;'o'
  2211  007765  72                 	db	114	;'r'
  2212  007766  20                 	db	32
  2213  007767  70                 	db	112	;'p'
  2214  007768  72                 	db	114	;'r'
  2215  007769  69                 	db	105	;'i'
  2216  00776A  6F                 	db	111	;'o'
  2217  00776B  72                 	db	114	;'r'
  2218  00776C  69                 	db	105	;'i'
  2219  00776D  74                 	db	116	;'t'
  2220  00776E  79                 	db	121	;'y'
  2221  00776F  20                 	db	32
  2222  007770  69                 	db	105	;'i'
  2223  007771  73                 	db	115	;'s'
  2224  007772  20                 	db	32
  2225  007773  6D                 	db	109	;'m'
  2226  007774  69                 	db	105	;'i'
  2227  007775  73                 	db	115	;'s'
  2228  007776  73                 	db	115	;'s'
  2229  007777  69                 	db	105	;'i'
  2230  007778  6E                 	db	110	;'n'
  2231  007779  67                 	db	103	;'g'
  2232  00777A  0D                 	db	13
  2233  00777B  0A                 	db	10
  2234  00777C  00                 	db	0
  2235  00777D                     STR_93:
  2236  00777D  2D                 	db	45
  2237  00777E  45                 	db	69	;'E'
  2238  00777F  52                 	db	82	;'R'
  2239  007780  52                 	db	82	;'R'
  2240  007781  4F                 	db	79	;'O'
  2241  007782  52                 	db	82	;'R'
  2242  007783  20                 	db	32
  2243  007784  2D                 	db	45
  2244  007785  20                 	db	32
  2245  007786  66                 	db	102	;'f'
  2246  007787  69                 	db	105	;'i'
  2247  007788  6C                 	db	108	;'l'
  2248  007789  74                 	db	116	;'t'
  2249  00778A  65                 	db	101	;'e'
  2250  00778B  72                 	db	114	;'r'
  2251  00778C  20                 	db	32
  2252  00778D  66                 	db	102	;'f'
  2253  00778E  6F                 	db	111	;'o'
  2254  00778F  72                 	db	114	;'r'
  2255  007790  20                 	db	32
  2256  007791  6E                 	db	110	;'n'
  2257  007792  69                 	db	105	;'i'
  2258  007793  64                 	db	100	;'d'
  2259  007794  65                 	db	101	;'e'
  2260  007795  20                 	db	32
  2261  007796  69                 	db	105	;'i'
  2262  007797  64                 	db	100	;'d'
  2263  007798  20                 	db	32
  2264  007799  69                 	db	105	;'i'
  2265  00779A  73                 	db	115	;'s'
  2266  00779B  20                 	db	32
  2267  00779C  6D                 	db	109	;'m'
  2268  00779D  69                 	db	105	;'i'
  2269  00779E  73                 	db	115	;'s'
  2270  00779F  73                 	db	115	;'s'
  2271  0077A0  69                 	db	105	;'i'
  2272  0077A1  6E                 	db	110	;'n'
  2273  0077A2  67                 	db	103	;'g'
  2274  0077A3  0D                 	db	13
  2275  0077A4  0A                 	db	10
  2276  0077A5  00                 	db	0
  2277  0077A6                     STR_212:
  2278  0077A6  48                 	db	72	;'H'
  2279  0077A7  45                 	db	69	;'E'
  2280  0077A8  4C                 	db	76	;'L'
  2281  0077A9  50                 	db	80	;'P'
  2282  0077AA  20                 	db	32
  2283  0077AB  2D                 	db	45
  2284  0077AC  20                 	db	32
  2285  0077AD  44                 	db	68	;'D'
  2286  0077AE  69                 	db	105	;'i'
  2287  0077AF  73                 	db	115	;'s'
  2288  0077B0  70                 	db	112	;'p'
  2289  0077B1  6C                 	db	108	;'l'
  2290  0077B2  61                 	db	97	;'a'
  2291  0077B3  79                 	db	121	;'y'
  2292  0077B4  20                 	db	32
  2293  0077B5  74                 	db	116	;'t'
  2294  0077B6  68                 	db	104	;'h'
  2295  0077B7  69                 	db	105	;'i'
  2296  0077B8  73                 	db	115	;'s'
  2297  0077B9  20                 	db	32
  2298  0077BA  68                 	db	104	;'h'
  2299  0077BB  65                 	db	101	;'e'
  2300  0077BC  6C                 	db	108	;'l'
  2301  0077BD  70                 	db	112	;'p'
  2302  0077BE  20                 	db	32
  2303  0077BF  69                 	db	105	;'i'
  2304  0077C0  6E                 	db	110	;'n'
  2305  0077C1  66                 	db	102	;'f'
  2306  0077C2  6F                 	db	111	;'o'
  2307  0077C3  72                 	db	114	;'r'
  2308  0077C4  6D                 	db	109	;'m'
  2309  0077C5  61                 	db	97	;'a'
  2310  0077C6  74                 	db	116	;'t'
  2311  0077C7  69                 	db	105	;'i'
  2312  0077C8  6F                 	db	111	;'o'
  2313  0077C9  6E                 	db	110	;'n'
  2314  0077CA  2E                 	db	46
  2315  0077CB  0D                 	db	13
  2316  0077CC  0A                 	db	10
  2317  0077CD  00                 	db	0
  2318  0077CE                     STR_99:
  2319  0077CE  2D                 	db	45
  2320  0077CF  45                 	db	69	;'E'
  2321  0077D0  52                 	db	82	;'R'
  2322  0077D1  52                 	db	82	;'R'
  2323  0077D2  4F                 	db	79	;'O'
  2324  0077D3  52                 	db	82	;'R'
  2325  0077D4  20                 	db	32
  2326  0077D5  2D                 	db	45
  2327  0077D6  20                 	db	32
  2328  0077D7  6D                 	db	109	;'m'
  2329  0077D8  61                 	db	97	;'a'
  2330  0077D9  73                 	db	115	;'s'
  2331  0077DA  6B                 	db	107	;'k'
  2332  0077DB  20                 	db	32
  2333  0077DC  66                 	db	102	;'f'
  2334  0077DD  6F                 	db	111	;'o'
  2335  0077DE  72                 	db	114	;'r'
  2336  0077DF  20                 	db	32
  2337  0077E0  70                 	db	112	;'p'
  2338  0077E1  72                 	db	114	;'r'
  2339  0077E2  69                 	db	105	;'i'
  2340  0077E3  6F                 	db	111	;'o'
  2341  0077E4  72                 	db	114	;'r'
  2342  0077E5  69                 	db	105	;'i'
  2343  0077E6  74                 	db	116	;'t'
  2344  0077E7  79                 	db	121	;'y'
  2345  0077E8  20                 	db	32
  2346  0077E9  69                 	db	105	;'i'
  2347  0077EA  73                 	db	115	;'s'
  2348  0077EB  20                 	db	32
  2349  0077EC  6D                 	db	109	;'m'
  2350  0077ED  69                 	db	105	;'i'
  2351  0077EE  73                 	db	115	;'s'
  2352  0077EF  73                 	db	115	;'s'
  2353  0077F0  69                 	db	105	;'i'
  2354  0077F1  6E                 	db	110	;'n'
  2355  0077F2  67                 	db	103	;'g'
  2356  0077F3  0D                 	db	13
  2357  0077F4  0A                 	db	10
  2358  0077F5  00                 	db	0
  2359  0077F6                     STR_110:
  2360  0077F6  2B                 	db	43
  2361  0077F7  4F                 	db	79	;'O'
  2362  0077F8  4B                 	db	75	;'K'
  2363  0077F9  20                 	db	32
  2364  0077FA  2D                 	db	45
  2365  0077FB  20                 	db	32
  2366  0077FC  4E                 	db	78	;'N'
  2367  0077FD  75                 	db	117	;'u'
  2368  0077FE  6D                 	db	109	;'m'
  2369  0077FF  65                 	db	101	;'e'
  2370  007800  72                 	db	114	;'r'
  2371  007801  69                 	db	105	;'i'
  2372  007802  63                 	db	99	;'c'
  2373  007803  61                 	db	97	;'a'
  2374  007804  6C                 	db	108	;'l'
  2375  007805  20                 	db	32
  2376  007806  6F                 	db	111	;'o'
  2377  007807  75                 	db	117	;'u'
  2378  007808  74                 	db	116	;'t'
  2379  007809  70                 	db	112	;'p'
  2380  00780A  75                 	db	117	;'u'
  2381  00780B  74                 	db	116	;'t'
  2382  00780C  20                 	db	32
  2383  00780D  6E                 	db	110	;'n'
  2384  00780E  6F                 	db	111	;'o'
  2385  00780F  77                 	db	119	;'w'
  2386  007810  20                 	db	32
  2387  007811  69                 	db	105	;'i'
  2388  007812  6E                 	db	110	;'n'
  2389  007813  20                 	db	32
  2390  007814  64                 	db	100	;'d'
  2391  007815  65                 	db	101	;'e'
  2392  007816  63                 	db	99	;'c'
  2393  007817  69                 	db	105	;'i'
  2394  007818  6D                 	db	109	;'m'
  2395  007819  61                 	db	97	;'a'
  2396  00781A  6C                 	db	108	;'l'
  2397  00781B  0D                 	db	13
  2398  00781C  0A                 	db	10
  2399  00781D  00                 	db	0
  2400  00781E                     STR_85:
  2401  00781E  2D                 	db	45
  2402  00781F  45                 	db	69	;'E'
  2403  007820  52                 	db	82	;'R'
  2404  007821  52                 	db	82	;'R'
  2405  007822  4F                 	db	79	;'O'
  2406  007823  52                 	db	82	;'R'
  2407  007824  20                 	db	32
  2408  007825  2D                 	db	45
  2409  007826  20                 	db	32
  2410  007827  4E                 	db	78	;'N'
  2411  007828  6F                 	db	111	;'o'
  2412  007829  20                 	db	32
  2413  00782A  66                 	db	102	;'f'
  2414  00782B  69                 	db	105	;'i'
  2415  00782C  6C                 	db	108	;'l'
  2416  00782D  74                 	db	116	;'t'
  2417  00782E  65                 	db	101	;'e'
  2418  00782F  72                 	db	114	;'r'
  2419  007830  20                 	db	32
  2420  007831  6E                 	db	110	;'n'
  2421  007832  75                 	db	117	;'u'
  2422  007833  6D                 	db	109	;'m'
  2423  007834  62                 	db	98	;'b'
  2424  007835  65                 	db	101	;'e'
  2425  007836  72                 	db	114	;'r'
  2426  007837  20                 	db	32
  2427  007838  73                 	db	115	;'s'
  2428  007839  70                 	db	112	;'p'
  2429  00783A  65                 	db	101	;'e'
  2430  00783B  63                 	db	99	;'c'
  2431  00783C  69                 	db	105	;'i'
  2432  00783D  66                 	db	102	;'f'
  2433  00783E  69                 	db	105	;'i'
  2434  00783F  65                 	db	101	;'e'
  2435  007840  64                 	db	100	;'d'
  2436  007841  2E                 	db	46
  2437  007842  0D                 	db	13
  2438  007843  0A                 	db	10
  2439  007844  00                 	db	0
  2440  007845                     STR_211:
  2441  007845  45                 	db	69	;'E'
  2442  007846  52                 	db	82	;'R'
  2443  007847  52                 	db	82	;'R'
  2444  007848  20                 	db	32
  2445  007849  2D                 	db	45
  2446  00784A  20                 	db	32
  2447  00784B  44                 	db	68	;'D'
  2448  00784C  69                 	db	105	;'i'
  2449  00784D  73                 	db	115	;'s'
  2450  00784E  70                 	db	112	;'p'
  2451  00784F  6C                 	db	108	;'l'
  2452  007850  61                 	db	97	;'a'
  2453  007851  79                 	db	121	;'y'
  2454  007852  20                 	db	32
  2455  007853  43                 	db	67	;'C'
  2456  007854  41                 	db	65	;'A'
  2457  007855  4E                 	db	78	;'N'
  2458  007856  20                 	db	32
  2459  007857  65                 	db	101	;'e'
  2460  007858  72                 	db	114	;'r'
  2461  007859  72                 	db	114	;'r'
  2462  00785A  6F                 	db	111	;'o'
  2463  00785B  72                 	db	114	;'r'
  2464  00785C  20                 	db	32
  2465  00785D  69                 	db	105	;'i'
  2466  00785E  6E                 	db	110	;'n'
  2467  00785F  66                 	db	102	;'f'
  2468  007860  6F                 	db	111	;'o'
  2469  007861  72                 	db	114	;'r'
  2470  007862  6D                 	db	109	;'m'
  2471  007863  61                 	db	97	;'a'
  2472  007864  74                 	db	116	;'t'
  2473  007865  69                 	db	105	;'i'
  2474  007866  6F                 	db	111	;'o'
  2475  007867  6E                 	db	110	;'n'
  2476  007868  2E                 	db	46
  2477  007869  0D                 	db	13
  2478  00786A  0A                 	db	10
  2479  00786B  00                 	db	0
  2480  00786C                     STR_197:
  2481  00786C  48                 	db	72	;'H'
  2482  00786D  65                 	db	101	;'e'
  2483  00786E  6C                 	db	108	;'l'
  2484  00786F  70                 	db	112	;'p'
  2485  007870  20                 	db	32
  2486  007871  66                 	db	102	;'f'
  2487  007872  6F                 	db	111	;'o'
  2488  007873  72                 	db	114	;'r'
  2489  007874  20                 	db	32
  2490  007875  74                 	db	116	;'t'
  2491  007876  68                 	db	104	;'h'
  2492  007877  65                 	db	101	;'e'
  2493  007878  20                 	db	32
  2494  007879  46                 	db	70	;'F'
  2495  00787A  72                 	db	114	;'r'
  2496  00787B  61                 	db	97	;'a'
  2497  00787C  6E                 	db	110	;'n'
  2498  00787D  6B                 	db	107	;'k'
  2499  00787E  66                 	db	102	;'f'
  2500  00787F  75                 	db	117	;'u'
  2501  007880  72                 	db	114	;'r'
  2502  007881  74                 	db	116	;'t'
  2503  007882  20                 	db	32
  2504  007883  52                 	db	82	;'R'
  2505  007884  53                 	db	83	;'S'
  2506  007885  2D                 	db	45
  2507  007886  32                 	db	50	;'2'
  2508  007887  33                 	db	51	;'3'
  2509  007888  32                 	db	50	;'2'
  2510  007889  20                 	db	32
  2511  00788A  6D                 	db	109	;'m'
  2512  00788B  6F                 	db	111	;'o'
  2513  00788C  64                 	db	100	;'d'
  2514  00788D  75                 	db	117	;'u'
  2515  00788E  6C                 	db	108	;'l'
  2516  00788F  65                 	db	101	;'e'
  2517  007890  0D                 	db	13
  2518  007891  0A                 	db	10
  2519  007892  00                 	db	0
  2520  007893                     STR_105:
  2521  007893  2D                 	db	45
  2522  007894  45                 	db	69	;'E'
  2523  007895  52                 	db	82	;'R'
  2524  007896  52                 	db	82	;'R'
  2525  007897  4F                 	db	79	;'O'
  2526  007898  52                 	db	82	;'R'
  2527  007899  20                 	db	32
  2528  00789A  2D                 	db	45
  2529  00789B  20                 	db	32
  2530  00789C  6D                 	db	109	;'m'
  2531  00789D  61                 	db	97	;'a'
  2532  00789E  73                 	db	115	;'s'
  2533  00789F  6B                 	db	107	;'k'
  2534  0078A0  20                 	db	32
  2535  0078A1  66                 	db	102	;'f'
  2536  0078A2  6F                 	db	111	;'o'
  2537  0078A3  72                 	db	114	;'r'
  2538  0078A4  20                 	db	32
  2539  0078A5  6E                 	db	110	;'n'
  2540  0078A6  69                 	db	105	;'i'
  2541  0078A7  64                 	db	100	;'d'
  2542  0078A8  65                 	db	101	;'e'
  2543  0078A9  20                 	db	32
  2544  0078AA  69                 	db	105	;'i'
  2545  0078AB  64                 	db	100	;'d'
  2546  0078AC  20                 	db	32
  2547  0078AD  69                 	db	105	;'i'
  2548  0078AE  73                 	db	115	;'s'
  2549  0078AF  20                 	db	32
  2550  0078B0  6D                 	db	109	;'m'
  2551  0078B1  69                 	db	105	;'i'
  2552  0078B2  73                 	db	115	;'s'
  2553  0078B3  73                 	db	115	;'s'
  2554  0078B4  69                 	db	105	;'i'
  2555  0078B5  6E                 	db	110	;'n'
  2556  0078B6  67                 	db	103	;'g'
  2557  0078B7  0D                 	db	13
  2558  0078B8  0A                 	db	10
  2559  0078B9  00                 	db	0
  2560  0078BA                     STR_89:
  2561  0078BA  2D                 	db	45
  2562  0078BB  45                 	db	69	;'E'
  2563  0078BC  52                 	db	82	;'R'
  2564  0078BD  52                 	db	82	;'R'
  2565  0078BE  4F                 	db	79	;'O'
  2566  0078BF  52                 	db	82	;'R'
  2567  0078C0  20                 	db	32
  2568  0078C1  2D                 	db	45
  2569  0078C2  20                 	db	32
  2570  0078C3  66                 	db	102	;'f'
  2571  0078C4  69                 	db	105	;'i'
  2572  0078C5  6C                 	db	108	;'l'
  2573  0078C6  74                 	db	116	;'t'
  2574  0078C7  65                 	db	101	;'e'
  2575  0078C8  72                 	db	114	;'r'
  2576  0078C9  20                 	db	32
  2577  0078CA  66                 	db	102	;'f'
  2578  0078CB  6F                 	db	111	;'o'
  2579  0078CC  72                 	db	114	;'r'
  2580  0078CD  20                 	db	32
  2581  0078CE  63                 	db	99	;'c'
  2582  0078CF  6C                 	db	108	;'l'
  2583  0078D0  61                 	db	97	;'a'
  2584  0078D1  73                 	db	115	;'s'
  2585  0078D2  73                 	db	115	;'s'
  2586  0078D3  20                 	db	32
  2587  0078D4  69                 	db	105	;'i'
  2588  0078D5  73                 	db	115	;'s'
  2589  0078D6  20                 	db	32
  2590  0078D7  6D                 	db	109	;'m'
  2591  0078D8  69                 	db	105	;'i'
  2592  0078D9  73                 	db	115	;'s'
  2593  0078DA  73                 	db	115	;'s'
  2594  0078DB  69                 	db	105	;'i'
  2595  0078DC  6E                 	db	110	;'n'
  2596  0078DD  67                 	db	103	;'g'
  2597  0078DE  0D                 	db	13
  2598  0078DF  0A                 	db	10
  2599  0078E0  00                 	db	0
  2600  0078E1                     STR_228:
  2601  0078E1  20                 	db	32
  2602  0078E2  20                 	db	32
  2603  0078E3  20                 	db	32
  2604  0078E4  20                 	db	32
  2605  0078E5  20                 	db	32
  2606  0078E6  20                 	db	32
  2607  0078E7  20                 	db	32
  2608  0078E8  20                 	db	32
  2609  0078E9  20                 	db	32
  2610  0078EA  20                 	db	32
  2611  0078EB  20                 	db	32
  2612  0078EC  4D                 	db	77	;'M'
  2613  0078ED  6F                 	db	111	;'o'
  2614  0078EE  64                 	db	100	;'d'
  2615  0078EF  65                 	db	101	;'e'
  2616  0078F0  73                 	db	115	;'s'
  2617  0078F1  3A                 	db	58	;':'
  2618  0078F2  20                 	db	32
  2619  0078F3  76                 	db	118	;'v'
  2620  0078F4  65                 	db	101	;'e'
  2621  0078F5  72                 	db	114	;'r'
  2622  0078F6  62                 	db	98	;'b'
  2623  0078F7  6F                 	db	111	;'o'
  2624  0078F8  73                 	db	115	;'s'
  2625  0078F9  65                 	db	101	;'e'
  2626  0078FA  7C                 	db	124
  2627  0078FB  76                 	db	118	;'v'
  2628  0078FC  73                 	db	115	;'s'
  2629  0078FD  63                 	db	99	;'c'
  2630  0078FE  70                 	db	112	;'p'
  2631  0078FF  7C                 	db	124
  2632  007900  73                 	db	115	;'s'
  2633  007901  6C                 	db	108	;'l'
  2634  007902  63                 	db	99	;'c'
  2635  007903  61                 	db	97	;'a'
  2636  007904  6E                 	db	110	;'n'
  2637  007905  0D                 	db	13
  2638  007906  0A                 	db	10
  2639  007907  00                 	db	0
  2640  007908                     STR_91:
  2641  007908  2D                 	db	45
  2642  007909  45                 	db	69	;'E'
  2643  00790A  52                 	db	82	;'R'
  2644  00790B  52                 	db	82	;'R'
  2645  00790C  4F                 	db	79	;'O'
  2646  00790D  52                 	db	82	;'R'
  2647  00790E  20                 	db	32
  2648  00790F  2D                 	db	45
  2649  007910  20                 	db	32
  2650  007911  66                 	db	102	;'f'
  2651  007912  69                 	db	105	;'i'
  2652  007913  6C                 	db	108	;'l'
  2653  007914  74                 	db	116	;'t'
  2654  007915  65                 	db	101	;'e'
  2655  007916  72                 	db	114	;'r'
  2656  007917  20                 	db	32
  2657  007918  66                 	db	102	;'f'
  2658  007919  6F                 	db	111	;'o'
  2659  00791A  72                 	db	114	;'r'
  2660  00791B  20                 	db	32
  2661  00791C  74                 	db	116	;'t'
  2662  00791D  79                 	db	121	;'y'
  2663  00791E  70                 	db	112	;'p'
  2664  00791F  65                 	db	101	;'e'
  2665  007920  20                 	db	32
  2666  007921  69                 	db	105	;'i'
  2667  007922  73                 	db	115	;'s'
  2668  007923  20                 	db	32
  2669  007924  6D                 	db	109	;'m'
  2670  007925  69                 	db	105	;'i'
  2671  007926  73                 	db	115	;'s'
  2672  007927  73                 	db	115	;'s'
  2673  007928  69                 	db	105	;'i'
  2674  007929  6E                 	db	110	;'n'
  2675  00792A  67                 	db	103	;'g'
  2676  00792B  0D                 	db	13
  2677  00792C  0A                 	db	10
  2678  00792D  00                 	db	0
  2679  00792E                     STR_97:
  2680  00792E  2D                 	db	45
  2681  00792F  45                 	db	69	;'E'
  2682  007930  52                 	db	82	;'R'
  2683  007931  52                 	db	82	;'R'
  2684  007932  4F                 	db	79	;'O'
  2685  007933  52                 	db	82	;'R'
  2686  007934  20                 	db	32
  2687  007935  2D                 	db	45
  2688  007936  20                 	db	32
  2689  007937  4E                 	db	78	;'N'
  2690  007938  6F                 	db	111	;'o'
  2691  007939  20                 	db	32
  2692  00793A  6D                 	db	109	;'m'
  2693  00793B  61                 	db	97	;'a'
  2694  00793C  73                 	db	115	;'s'
  2695  00793D  6B                 	db	107	;'k'
  2696  00793E  20                 	db	32
  2697  00793F  6E                 	db	110	;'n'
  2698  007940  75                 	db	117	;'u'
  2699  007941  6D                 	db	109	;'m'
  2700  007942  62                 	db	98	;'b'
  2701  007943  65                 	db	101	;'e'
  2702  007944  72                 	db	114	;'r'
  2703  007945  20                 	db	32
  2704  007946  73                 	db	115	;'s'
  2705  007947  70                 	db	112	;'p'
  2706  007948  65                 	db	101	;'e'
  2707  007949  63                 	db	99	;'c'
  2708  00794A  69                 	db	105	;'i'
  2709  00794B  66                 	db	102	;'f'
  2710  00794C  69                 	db	105	;'i'
  2711  00794D  65                 	db	101	;'e'
  2712  00794E  64                 	db	100	;'d'
  2713  00794F  2E                 	db	46
  2714  007950  0D                 	db	13
  2715  007951  0A                 	db	10
  2716  007952  00                 	db	0
  2717  007953                     STR_1:
  2718  007953  0D                 	db	13
  2719  007954  0A                 	db	10
  2720  007955  46                 	db	70	;'F'
  2721  007956  72                 	db	114	;'r'
  2722  007957  61                 	db	97	;'a'
  2723  007958  6E                 	db	110	;'n'
  2724  007959  6B                 	db	107	;'k'
  2725  00795A  66                 	db	102	;'f'
  2726  00795B  75                 	db	117	;'u'
  2727  00795C  72                 	db	114	;'r'
  2728  00795D  74                 	db	116	;'t'
  2729  00795E  20                 	db	32
  2730  00795F  52                 	db	82	;'R'
  2731  007960  53                 	db	83	;'S'
  2732  007961  2D                 	db	45
  2733  007962  32                 	db	50	;'2'
  2734  007963  33                 	db	51	;'3'
  2735  007964  32                 	db	50	;'2'
  2736  007965  20                 	db	32
  2737  007966  43                 	db	67	;'C'
  2738  007967  41                 	db	65	;'A'
  2739  007968  4E                 	db	78	;'N'
  2740  007969  34                 	db	52	;'4'
  2741  00796A  56                 	db	86	;'V'
  2742  00796B  53                 	db	83	;'S'
  2743  00796C  43                 	db	67	;'C'
  2744  00796D  50                 	db	80	;'P'
  2745  00796E  20                 	db	32
  2746  00796F  6D                 	db	109	;'m'
  2747  007970  6F                 	db	111	;'o'
  2748  007971  64                 	db	100	;'d'
  2749  007972  75                 	db	117	;'u'
  2750  007973  6C                 	db	108	;'l'
  2751  007974  65                 	db	101	;'e'
  2752  007975  0D                 	db	13
  2753  007976  0A                 	db	10
  2754  007977  00                 	db	0
  2755  007978                     STR_101:
  2756  007978  2D                 	db	45
  2757  007979  45                 	db	69	;'E'
  2758  00797A  52                 	db	82	;'R'
  2759  00797B  52                 	db	82	;'R'
  2760  00797C  4F                 	db	79	;'O'
  2761  00797D  52                 	db	82	;'R'
  2762  00797E  20                 	db	32
  2763  00797F  2D                 	db	45
  2764  007980  20                 	db	32
  2765  007981  6D                 	db	109	;'m'
  2766  007982  61                 	db	97	;'a'
  2767  007983  73                 	db	115	;'s'
  2768  007984  6B                 	db	107	;'k'
  2769  007985  20                 	db	32
  2770  007986  66                 	db	102	;'f'
  2771  007987  6F                 	db	111	;'o'
  2772  007988  72                 	db	114	;'r'
  2773  007989  20                 	db	32
  2774  00798A  63                 	db	99	;'c'
  2775  00798B  6C                 	db	108	;'l'
  2776  00798C  61                 	db	97	;'a'
  2777  00798D  73                 	db	115	;'s'
  2778  00798E  73                 	db	115	;'s'
  2779  00798F  20                 	db	32
  2780  007990  69                 	db	105	;'i'
  2781  007991  73                 	db	115	;'s'
  2782  007992  20                 	db	32
  2783  007993  6D                 	db	109	;'m'
  2784  007994  69                 	db	105	;'i'
  2785  007995  73                 	db	115	;'s'
  2786  007996  73                 	db	115	;'s'
  2787  007997  69                 	db	105	;'i'
  2788  007998  6E                 	db	110	;'n'
  2789  007999  67                 	db	103	;'g'
  2790  00799A  0D                 	db	13
  2791  00799B  0A                 	db	10
  2792  00799C  00                 	db	0
  2793  00799D                     STR_103:
  2794  00799D  2D                 	db	45
  2795  00799E  45                 	db	69	;'E'
  2796  00799F  52                 	db	82	;'R'
  2797  0079A0  52                 	db	82	;'R'
  2798  0079A1  4F                 	db	79	;'O'
  2799  0079A2  52                 	db	82	;'R'
  2800  0079A3  20                 	db	32
  2801  0079A4  2D                 	db	45
  2802  0079A5  20                 	db	32
  2803  0079A6  6D                 	db	109	;'m'
  2804  0079A7  61                 	db	97	;'a'
  2805  0079A8  73                 	db	115	;'s'
  2806  0079A9  6B                 	db	107	;'k'
  2807  0079AA  20                 	db	32
  2808  0079AB  66                 	db	102	;'f'
  2809  0079AC  6F                 	db	111	;'o'
  2810  0079AD  72                 	db	114	;'r'
  2811  0079AE  20                 	db	32
  2812  0079AF  74                 	db	116	;'t'
  2813  0079B0  79                 	db	121	;'y'
  2814  0079B1  70                 	db	112	;'p'
  2815  0079B2  65                 	db	101	;'e'
  2816  0079B3  20                 	db	32
  2817  0079B4  69                 	db	105	;'i'
  2818  0079B5  73                 	db	115	;'s'
  2819  0079B6  20                 	db	32
  2820  0079B7  6D                 	db	109	;'m'
  2821  0079B8  69                 	db	105	;'i'
  2822  0079B9  73                 	db	115	;'s'
  2823  0079BA  73                 	db	115	;'s'
  2824  0079BB  69                 	db	105	;'i'
  2825  0079BC  6E                 	db	110	;'n'
  2826  0079BD  67                 	db	103	;'g'
  2827  0079BE  0D                 	db	13
  2828  0079BF  0A                 	db	10
  2829  0079C0  00                 	db	0
  2830  0079C1                     STR_75:
  2831  0079C1  2B                 	db	43
  2832  0079C2  4F                 	db	79	;'O'
  2833  0079C3  4B                 	db	75	;'K'
  2834  0079C4  20                 	db	32
  2835  0079C5  2D                 	db	45
  2836  0079C6  20                 	db	32
  2837  0079C7  56                 	db	86	;'V'
  2838  0079C8  61                 	db	97	;'a'
  2839  0079C9  6C                 	db	108	;'l'
  2840  0079CA  75                 	db	117	;'u'
  2841  0079CB  65                 	db	101	;'e'
  2842  0079CC  20                 	db	32
  2843  0079CD  77                 	db	119	;'w'
  2844  0079CE  72                 	db	114	;'r'
  2845  0079CF  69                 	db	105	;'i'
  2846  0079D0  74                 	db	116	;'t'
  2847  0079D1  74                 	db	116	;'t'
  2848  0079D2  65                 	db	101	;'e'
  2849  0079D3  6E                 	db	110	;'n'
  2850  0079D4  20                 	db	32
  2851  0079D5  73                 	db	115	;'s'
  2852  0079D6  75                 	db	117	;'u'
  2853  0079D7  63                 	db	99	;'c'
  2854  0079D8  63                 	db	99	;'c'
  2855  0079D9  65                 	db	101	;'e'
  2856  0079DA  73                 	db	115	;'s'
  2857  0079DB  73                 	db	115	;'s'
  2858  0079DC  66                 	db	102	;'f'
  2859  0079DD  75                 	db	117	;'u'
  2860  0079DE  6C                 	db	108	;'l'
  2861  0079DF  6C                 	db	108	;'l'
  2862  0079E0  79                 	db	121	;'y'
  2863  0079E1  0D                 	db	13
  2864  0079E2  0A                 	db	10
  2865  0079E3  00                 	db	0
  2866  0079E4                     STR_221:
  2867  0079E4  53                 	db	83	;'S'
  2868  0079E5  45                 	db	69	;'E'
  2869  0079E6  54                 	db	84	;'T'
  2870  0079E7  20                 	db	32
  2871  0079E8  2D                 	db	45
  2872  0079E9  20                 	db	32
  2873  0079EA  50                 	db	80	;'P'
  2874  0079EB  65                 	db	101	;'e'
  2875  0079EC  72                 	db	114	;'r'
  2876  0079ED  73                 	db	115	;'s'
  2877  0079EE  69                 	db	105	;'i'
  2878  0079EF  73                 	db	115	;'s'
  2879  0079F0  74                 	db	116	;'t'
  2880  0079F1  65                 	db	101	;'e'
  2881  0079F2  6E                 	db	110	;'n'
  2882  0079F3  74                 	db	116	;'t'
  2883  0079F4  20                 	db	32
  2884  0079F5  66                 	db	102	;'f'
  2885  0079F6  75                 	db	117	;'u'
  2886  0079F7  6E                 	db	110	;'n'
  2887  0079F8  63                 	db	99	;'c'
  2888  0079F9  74                 	db	116	;'t'
  2889  0079FA  69                 	db	105	;'i'
  2890  0079FB  6F                 	db	111	;'o'
  2891  0079FC  6E                 	db	110	;'n'
  2892  0079FD  61                 	db	97	;'a'
  2893  0079FE  6C                 	db	108	;'l'
  2894  0079FF  69                 	db	105	;'i'
  2895  007A00  74                 	db	116	;'t'
  2896  007A01  79                 	db	121	;'y'
  2897  007A02  2E                 	db	46
  2898  007A03  0D                 	db	13
  2899  007A04  0A                 	db	10
  2900  007A05  00                 	db	0
  2901  007A06                     STR_60:
  2902  007A06  2D                 	db	45
  2903  007A07  45                 	db	69	;'E'
  2904  007A08  52                 	db	82	;'R'
  2905  007A09  52                 	db	82	;'R'
  2906  007A0A  4F                 	db	79	;'O'
  2907  007A0B  52                 	db	82	;'R'
  2908  007A0C  20                 	db	32
  2909  007A0D  2D                 	db	45
  2910  007A0E  20                 	db	32
  2911  007A0F  55                 	db	85	;'U'
  2912  007A10  6E                 	db	110	;'n'
  2913  007A11  61                 	db	97	;'a'
  2914  007A12  62                 	db	98	;'b'
  2915  007A13  6C                 	db	108	;'l'
  2916  007A14  65                 	db	101	;'e'
  2917  007A15  20                 	db	32
  2918  007A16  74                 	db	116	;'t'
  2919  007A17  6F                 	db	111	;'o'
  2920  007A18  20                 	db	32
  2921  007A19  72                 	db	114	;'r'
  2922  007A1A  65                 	db	101	;'e'
  2923  007A1B  61                 	db	97	;'a'
  2924  007A1C  64                 	db	100	;'d'
  2925  007A1D  20                 	db	32
  2926  007A1E  72                 	db	114	;'r'
  2927  007A1F  65                 	db	101	;'e'
  2928  007A20  67                 	db	103	;'g'
  2929  007A21  69                 	db	105	;'i'
  2930  007A22  73                 	db	115	;'s'
  2931  007A23  74                 	db	116	;'t'
  2932  007A24  65                 	db	101	;'e'
  2933  007A25  72                 	db	114	;'r'
  2934  007A26  20                 	db	32
  2935  007A27  00                 	db	0
  2936  007A28                     STR_210:
  2937  007A28  53                 	db	83	;'S'
  2938  007A29  54                 	db	84	;'T'
  2939  007A2A  41                 	db	65	;'A'
  2940  007A2B  54                 	db	84	;'T'
  2941  007A2C  20                 	db	32
  2942  007A2D  2D                 	db	45
  2943  007A2E  20                 	db	32
  2944  007A2F  44                 	db	68	;'D'
  2945  007A30  69                 	db	105	;'i'
  2946  007A31  73                 	db	115	;'s'
  2947  007A32  70                 	db	112	;'p'
  2948  007A33  6C                 	db	108	;'l'
  2949  007A34  61                 	db	97	;'a'
  2950  007A35  79                 	db	121	;'y'
  2951  007A36  20                 	db	32
  2952  007A37  43                 	db	67	;'C'
  2953  007A38  41                 	db	65	;'A'
  2954  007A39  4E                 	db	78	;'N'
  2955  007A3A  20                 	db	32
  2956  007A3B  73                 	db	115	;'s'
  2957  007A3C  74                 	db	116	;'t'
  2958  007A3D  61                 	db	97	;'a'
  2959  007A3E  74                 	db	116	;'t'
  2960  007A3F  69                 	db	105	;'i'
  2961  007A40  73                 	db	115	;'s'
  2962  007A41  74                 	db	116	;'t'
  2963  007A42  69                 	db	105	;'i'
  2964  007A43  63                 	db	99	;'c'
  2965  007A44  73                 	db	115	;'s'
  2966  007A45  2E                 	db	46
  2967  007A46  0D                 	db	13
  2968  007A47  0A                 	db	10
  2969  007A48  00                 	db	0
  2970  007A49                     STR_36:
  2971  007A49  2D                 	db	45
  2972  007A4A  45                 	db	69	;'E'
  2973  007A4B  52                 	db	82	;'R'
  2974  007A4C  52                 	db	82	;'R'
  2975  007A4D  4F                 	db	79	;'O'
  2976  007A4E  52                 	db	82	;'R'
  2977  007A4F  20                 	db	32
  2978  007A50  2D                 	db	45
  2979  007A51  20                 	db	32
  2980  007A52  46                 	db	70	;'F'
  2981  007A53  61                 	db	97	;'a'
  2982  007A54  69                 	db	105	;'i'
  2983  007A55  6C                 	db	108	;'l'
  2984  007A56  65                 	db	101	;'e'
  2985  007A57  64                 	db	100	;'d'
  2986  007A58  20                 	db	32
  2987  007A59  74                 	db	116	;'t'
  2988  007A5A  6F                 	db	111	;'o'
  2989  007A5B  20                 	db	32
  2990  007A5C  73                 	db	115	;'s'
  2991  007A5D  65                 	db	101	;'e'
  2992  007A5E  6E                 	db	110	;'n'
  2993  007A5F  64                 	db	100	;'d'
  2994  007A60  20                 	db	32
  2995  007A61  65                 	db	101	;'e'
  2996  007A62  76                 	db	118	;'v'
  2997  007A63  65                 	db	101	;'e'
  2998  007A64  6E                 	db	110	;'n'
  2999  007A65  74                 	db	116	;'t'
  3000  007A66  2E                 	db	46
  3001  007A67  0D                 	db	13
  3002  007A68  0A                 	db	10
  3003  007A69  00                 	db	0
  3004  007A6A                     STR_122:
  3005  007A6A  2D                 	db	45
  3006  007A6B  45                 	db	69	;'E'
  3007  007A6C  52                 	db	82	;'R'
  3008  007A6D  52                 	db	82	;'R'
  3009  007A6E  4F                 	db	79	;'O'
  3010  007A6F  52                 	db	82	;'R'
  3011  007A70  20                 	db	32
  3012  007A71  2D                 	db	45
  3013  007A72  20                 	db	32
  3014  007A73  55                 	db	85	;'U'
  3015  007A74  6E                 	db	110	;'n'
  3016  007A75  6B                 	db	107	;'k'
  3017  007A76  6E                 	db	110	;'n'
  3018  007A77  6F                 	db	111	;'o'
  3019  007A78  77                 	db	119	;'w'
  3020  007A79  6E                 	db	110	;'n'
  3021  007A7A  20                 	db	32
  3022  007A7B  27                 	db	39
  3023  007A7C  53                 	db	83	;'S'
  3024  007A7D  45                 	db	69	;'E'
  3025  007A7E  54                 	db	84	;'T'
  3026  007A7F  27                 	db	39
  3027  007A80  20                 	db	32
  3028  007A81  63                 	db	99	;'c'
  3029  007A82  6F                 	db	111	;'o'
  3030  007A83  6D                 	db	109	;'m'
  3031  007A84  6D                 	db	109	;'m'
  3032  007A85  61                 	db	97	;'a'
  3033  007A86  6E                 	db	110	;'n'
  3034  007A87  64                 	db	100	;'d'
  3035  007A88  0D                 	db	13
  3036  007A89  0A                 	db	10
  3037  007A8A  00                 	db	0
  3038  007A8B                     STR_76:
  3039  007A8B  2D                 	db	45
  3040  007A8C  45                 	db	69	;'E'
  3041  007A8D  52                 	db	82	;'R'
  3042  007A8E  52                 	db	82	;'R'
  3043  007A8F  4F                 	db	79	;'O'
  3044  007A90  52                 	db	82	;'R'
  3045  007A91  20                 	db	32
  3046  007A92  2D                 	db	45
  3047  007A93  20                 	db	32
  3048  007A94  46                 	db	70	;'F'
  3049  007A95  61                 	db	97	;'a'
  3050  007A96  69                 	db	105	;'i'
  3051  007A97  6C                 	db	108	;'l'
  3052  007A98  65                 	db	101	;'e'
  3053  007A99  64                 	db	100	;'d'
  3054  007A9A  20                 	db	32
  3055  007A9B  74                 	db	116	;'t'
  3056  007A9C  6F                 	db	111	;'o'
  3057  007A9D  20                 	db	32
  3058  007A9E  77                 	db	119	;'w'
  3059  007A9F  72                 	db	114	;'r'
  3060  007AA0  69                 	db	105	;'i'
  3061  007AA1  74                 	db	116	;'t'
  3062  007AA2  65                 	db	101	;'e'
  3063  007AA3  20                 	db	32
  3064  007AA4  76                 	db	118	;'v'
  3065  007AA5  61                 	db	97	;'a'
  3066  007AA6  6C                 	db	108	;'l'
  3067  007AA7  75                 	db	117	;'u'
  3068  007AA8  65                 	db	101	;'e'
  3069  007AA9  0D                 	db	13
  3070  007AAA  0A                 	db	10
  3071  007AAB  00                 	db	0
  3072  007AAC                     STR_49:
  3073  007AAC  2D                 	db	45
  3074  007AAD  45                 	db	69	;'E'
  3075  007AAE  52                 	db	82	;'R'
  3076  007AAF  52                 	db	82	;'R'
  3077  007AB0  4F                 	db	79	;'O'
  3078  007AB1  52                 	db	82	;'R'
  3079  007AB2  20                 	db	32
  3080  007AB3  2D                 	db	45
  3081  007AB4  20                 	db	32
  3082  007AB5  4E                 	db	78	;'N'
  3083  007AB6  65                 	db	101	;'e'
  3084  007AB7  65                 	db	101	;'e'
  3085  007AB8  64                 	db	100	;'d'
  3086  007AB9  73                 	db	115	;'s'
  3087  007ABA  20                 	db	32
  3088  007ABB  5B                 	db	91	;'['
  3089  007ABC  70                 	db	112	;'p'
  3090  007ABD  61                 	db	97	;'a'
  3091  007ABE  67                 	db	103	;'g'
  3092  007ABF  65                 	db	101	;'e'
  3093  007AC0  3A                 	db	58	;':'
  3094  007AC1  5D                 	db	93	;']'
  3095  007AC2  72                 	db	114	;'r'
  3096  007AC3  65                 	db	101	;'e'
  3097  007AC4  67                 	db	103	;'g'
  3098  007AC5  69                 	db	105	;'i'
  3099  007AC6  73                 	db	115	;'s'
  3100  007AC7  74                 	db	116	;'t'
  3101  007AC8  65                 	db	101	;'e'
  3102  007AC9  72                 	db	114	;'r'
  3103  007ACA  0D                 	db	13
  3104  007ACB  0A                 	db	10
  3105  007ACC  00                 	db	0
  3106  007ACD                     STR_117:
  3107  007ACD  2B                 	db	43
  3108  007ACE  4F                 	db	79	;'O'
  3109  007ACF  4B                 	db	75	;'K'
  3110  007AD0  20                 	db	32
  3111  007AD1  2D                 	db	45
  3112  007AD2  20                 	db	32
  3113  007AD3  4D                 	db	77	;'M'
  3114  007AD4  6F                 	db	111	;'o'
  3115  007AD5  64                 	db	100	;'d'
  3116  007AD6  65                 	db	101	;'e'
  3117  007AD7  20                 	db	32
  3118  007AD8  69                 	db	105	;'i'
  3119  007AD9  73                 	db	115	;'s'
  3120  007ADA  20                 	db	32
  3121  007ADB  6E                 	db	110	;'n'
  3122  007ADC  6F                 	db	111	;'o'
  3123  007ADD  77                 	db	119	;'w'
  3124  007ADE  20                 	db	32
  3125  007ADF  56                 	db	86	;'V'
  3126  007AE0  53                 	db	83	;'S'
  3127  007AE1  43                 	db	67	;'C'
  3128  007AE2  50                 	db	80	;'P'
  3129  007AE3  20                 	db	32
  3130  007AE4  44                 	db	68	;'D'
  3131  007AE5  72                 	db	114	;'r'
  3132  007AE6  69                 	db	105	;'i'
  3133  007AE7  76                 	db	118	;'v'
  3134  007AE8  65                 	db	101	;'e'
  3135  007AE9  72                 	db	114	;'r'
  3136  007AEA  0D                 	db	13
  3137  007AEB  0A                 	db	10
  3138  007AEC  00                 	db	0
  3139  007AED                     STR_6:
  3140  007AED  57                 	db	87	;'W'
  3141  007AEE  69                 	db	105	;'i'
  3142  007AEF  6C                 	db	108	;'l'
  3143  007AF0  6C                 	db	108	;'l'
  3144  007AF1  20                 	db	32
  3145  007AF2  65                 	db	101	;'e'
  3146  007AF3  6E                 	db	110	;'n'
  3147  007AF4  74                 	db	116	;'t'
  3148  007AF5  65                 	db	101	;'e'
  3149  007AF6  72                 	db	114	;'r'
  3150  007AF7  20                 	db	32
  3151  007AF8  62                 	db	98	;'b'
  3152  007AF9  6F                 	db	111	;'o'
  3153  007AFA  6F                 	db	111	;'o'
  3154  007AFB  74                 	db	116	;'t'
  3155  007AFC  6C                 	db	108	;'l'
  3156  007AFD  6F                 	db	111	;'o'
  3157  007AFE  61                 	db	97	;'a'
  3158  007AFF  64                 	db	100	;'d'
  3159  007B00  65                 	db	101	;'e'
  3160  007B01  72                 	db	114	;'r'
  3161  007B02  20                 	db	32
  3162  007B03  6E                 	db	110	;'n'
  3163  007B04  6F                 	db	111	;'o'
  3164  007B05  77                 	db	119	;'w'
  3165  007B06  2E                 	db	46
  3166  007B07  2E                 	db	46
  3167  007B08  2E                 	db	46
  3168  007B09  0D                 	db	13
  3169  007B0A  0A                 	db	10
  3170  007B0B  00                 	db	0
  3171  007B0C                     STR_204:
  3172  007B0C  43                 	db	67	;'C'
  3173  007B0D  4C                 	db	76	;'L'
  3174  007B0E  4F                 	db	79	;'O'
  3175  007B0F  53                 	db	83	;'S'
  3176  007B10  45                 	db	69	;'E'
  3177  007B11  20                 	db	32
  3178  007B12  2D                 	db	45
  3179  007B13  20                 	db	32
  3180  007B14  43                 	db	67	;'C'
  3181  007B15  6C                 	db	108	;'l'
  3182  007B16  6F                 	db	111	;'o'
  3183  007B17  73                 	db	115	;'s'
  3184  007B18  65                 	db	101	;'e'
  3185  007B19  20                 	db	32
  3186  007B1A  43                 	db	67	;'C'
  3187  007B1B  41                 	db	65	;'A'
  3188  007B1C  4E                 	db	78	;'N'
  3189  007B1D  20                 	db	32
  3190  007B1E  69                 	db	105	;'i'
  3191  007B1F  6E                 	db	110	;'n'
  3192  007B20  74                 	db	116	;'t'
  3193  007B21  65                 	db	101	;'e'
  3194  007B22  72                 	db	114	;'r'
  3195  007B23  66                 	db	102	;'f'
  3196  007B24  61                 	db	97	;'a'
  3197  007B25  63                 	db	99	;'c'
  3198  007B26  65                 	db	101	;'e'
  3199  007B27  2E                 	db	46
  3200  007B28  0D                 	db	13
  3201  007B29  0A                 	db	10
  3202  007B2A  00                 	db	0
  3203  007B2B                     STR_4:
  3204  007B2B  54                 	db	84	;'T'
  3205  007B2C  65                 	db	101	;'e'
  3206  007B2D  6D                 	db	109	;'m'
  3207  007B2E  70                 	db	112	;'p'
  3208  007B2F  6F                 	db	111	;'o'
  3209  007B30  72                 	db	114	;'r'
  3210  007B31  61                 	db	97	;'a'
  3211  007B32  72                 	db	114	;'r'
  3212  007B33  79                 	db	121	;'y'
  3213  007B34  20                 	db	32
  3214  007B35  76                 	db	118	;'v'
  3215  007B36  65                 	db	101	;'e'
  3216  007B37  72                 	db	114	;'r'
  3217  007B38  62                 	db	98	;'b'
  3218  007B39  6F                 	db	111	;'o'
  3219  007B3A  73                 	db	115	;'s'
  3220  007B3B  65                 	db	101	;'e'
  3221  007B3C  20                 	db	32
  3222  007B3D  6D                 	db	109	;'m'
  3223  007B3E  6F                 	db	111	;'o'
  3224  007B3F  64                 	db	100	;'d'
  3225  007B40  65                 	db	101	;'e'
  3226  007B41  20                 	db	32
  3227  007B42  73                 	db	115	;'s'
  3228  007B43  65                 	db	101	;'e'
  3229  007B44  74                 	db	116	;'t'
  3230  007B45  0D                 	db	13
  3231  007B46  0A                 	db	10
  3232  007B47  00                 	db	0
  3233  007B48                     STR_115:
  3234  007B48  2B                 	db	43
  3235  007B49  4F                 	db	79	;'O'
  3236  007B4A  4B                 	db	75	;'K'
  3237  007B4B  20                 	db	32
  3238  007B4C  2D                 	db	45
  3239  007B4D  20                 	db	32
  3240  007B4E  4D                 	db	77	;'M'
  3241  007B4F  6F                 	db	111	;'o'
  3242  007B50  64                 	db	100	;'d'
  3243  007B51  65                 	db	101	;'e'
  3244  007B52  20                 	db	32
  3245  007B53  69                 	db	105	;'i'
  3246  007B54  73                 	db	115	;'s'
  3247  007B55  20                 	db	32
  3248  007B56  6E                 	db	110	;'n'
  3249  007B57  6F                 	db	111	;'o'
  3250  007B58  77                 	db	119	;'w'
  3251  007B59  20                 	db	32
  3252  007B5A  76                 	db	118	;'v'
  3253  007B5B  65                 	db	101	;'e'
  3254  007B5C  72                 	db	114	;'r'
  3255  007B5D  62                 	db	98	;'b'
  3256  007B5E  6F                 	db	111	;'o'
  3257  007B5F  73                 	db	115	;'s'
  3258  007B60  65                 	db	101	;'e'
  3259  007B61  0D                 	db	13
  3260  007B62  0A                 	db	10
  3261  007B63  00                 	db	0
  3262  007B64                     STR_199:
  3263  007B64  42                 	db	66	;'B'
  3264  007B65  4F                 	db	79	;'O'
  3265  007B66  4F                 	db	79	;'O'
  3266  007B67  54                 	db	84	;'T'
  3267  007B68  20                 	db	32
  3268  007B69  2D                 	db	45
  3269  007B6A  20                 	db	32
  3270  007B6B  45                 	db	69	;'E'
  3271  007B6C  6E                 	db	110	;'n'
  3272  007B6D  74                 	db	116	;'t'
  3273  007B6E  65                 	db	101	;'e'
  3274  007B6F  72                 	db	114	;'r'
  3275  007B70  20                 	db	32
  3276  007B71  62                 	db	98	;'b'
  3277  007B72  6F                 	db	111	;'o'
  3278  007B73  6F                 	db	111	;'o'
  3279  007B74  74                 	db	116	;'t'
  3280  007B75  6C                 	db	108	;'l'
  3281  007B76  6F                 	db	111	;'o'
  3282  007B77  61                 	db	97	;'a'
  3283  007B78  64                 	db	100	;'d'
  3284  007B79  65                 	db	101	;'e'
  3285  007B7A  72                 	db	114	;'r'
  3286  007B7B  2E                 	db	46
  3287  007B7C  0D                 	db	13
  3288  007B7D  0A                 	db	10
  3289  007B7E  00                 	db	0
  3290  007B7F                     STR_123:
  3291  007B7F  2D                 	db	45
  3292  007B80  45                 	db	69	;'E'
  3293  007B81  52                 	db	82	;'R'
  3294  007B82  52                 	db	82	;'R'
  3295  007B83  4F                 	db	79	;'O'
  3296  007B84  52                 	db	82	;'R'
  3297  007B85  20                 	db	32
  3298  007B86  2D                 	db	45
  3299  007B87  20                 	db	32
  3300  007B88  55                 	db	85	;'U'
  3301  007B89  6E                 	db	110	;'n'
  3302  007B8A  6B                 	db	107	;'k'
  3303  007B8B  6E                 	db	110	;'n'
  3304  007B8C  6F                 	db	111	;'o'
  3305  007B8D  77                 	db	119	;'w'
  3306  007B8E  6E                 	db	110	;'n'
  3307  007B8F  20                 	db	32
  3308  007B90  63                 	db	99	;'c'
  3309  007B91  6F                 	db	111	;'o'
  3310  007B92  6D                 	db	109	;'m'
  3311  007B93  6D                 	db	109	;'m'
  3312  007B94  61                 	db	97	;'a'
  3313  007B95  6E                 	db	110	;'n'
  3314  007B96  64                 	db	100	;'d'
  3315  007B97  0D                 	db	13
  3316  007B98  0A                 	db	10
  3317  007B99  00                 	db	0
  3318  007B9A                     STR_230:
  3319  007B9A  4E                 	db	78	;'N'
  3320  007B9B  6F                 	db	111	;'o'
  3321  007B9C  64                 	db	100	;'d'
  3322  007B9D  65                 	db	101	;'e'
  3323  007B9E  20                 	db	32
  3324  007B9F  66                 	db	102	;'f'
  3325  007BA0  6F                 	db	111	;'o'
  3326  007BA1  75                 	db	117	;'u'
  3327  007BA2  6E                 	db	110	;'n'
  3328  007BA3  64                 	db	100	;'d'
  3329  007BA4  20                 	db	32
  3330  007BA5  77                 	db	119	;'w'
  3331  007BA6  69                 	db	105	;'i'
  3332  007BA7  74                 	db	116	;'t'
  3333  007BA8  68                 	db	104	;'h'
  3334  007BA9  20                 	db	32
  3335  007BAA  6E                 	db	110	;'n'
  3336  007BAB  6F                 	db	111	;'o'
  3337  007BAC  64                 	db	100	;'d'
  3338  007BAD  65                 	db	101	;'e'
  3339  007BAE  20                 	db	32
  3340  007BAF  69                 	db	105	;'i'
  3341  007BB0  64                 	db	100	;'d'
  3342  007BB1  20                 	db	32
  3343  007BB2  3D                 	db	61	;'='
  3344  007BB3  20                 	db	32
  3345  007BB4  00                 	db	0
  3346  007BB5                     STR_119:
  3347  007BB5  2B                 	db	43
  3348  007BB6  4F                 	db	79	;'O'
  3349  007BB7  4B                 	db	75	;'K'
  3350  007BB8  20                 	db	32
  3351  007BB9  2D                 	db	45
  3352  007BBA  20                 	db	32
  3353  007BBB  4D                 	db	77	;'M'
  3354  007BBC  6F                 	db	111	;'o'
  3355  007BBD  64                 	db	100	;'d'
  3356  007BBE  65                 	db	101	;'e'
  3357  007BBF  20                 	db	32
  3358  007BC0  69                 	db	105	;'i'
  3359  007BC1  73                 	db	115	;'s'
  3360  007BC2  20                 	db	32
  3361  007BC3  6E                 	db	110	;'n'
  3362  007BC4  6F                 	db	111	;'o'
  3363  007BC5  77                 	db	119	;'w'
  3364  007BC6  20                 	db	32
  3365  007BC7  53                 	db	83	;'S'
  3366  007BC8  4C                 	db	76	;'L'
  3367  007BC9  43                 	db	67	;'C'
  3368  007BCA  41                 	db	65	;'A'
  3369  007BCB  4E                 	db	78	;'N'
  3370  007BCC  0D                 	db	13
  3371  007BCD  0A                 	db	10
  3372  007BCE  00                 	db	0
  3373  007BCF                     STR_24:
  3374  007BCF  2B                 	db	43
  3375  007BD0  4F                 	db	79	;'O'
  3376  007BD1  4B                 	db	75	;'K'
  3377  007BD2  20                 	db	32
  3378  007BD3  2D                 	db	45
  3379  007BD4  20                 	db	32
  3380  007BD5  4C                 	db	76	;'L'
  3381  007BD6  69                 	db	105	;'i'
  3382  007BD7  73                 	db	115	;'s'
  3383  007BD8  74                 	db	116	;'t'
  3384  007BD9  65                 	db	101	;'e'
  3385  007BDA  6E                 	db	110	;'n'
  3386  007BDB  20                 	db	32
  3387  007BDC  6F                 	db	111	;'o'
  3388  007BDD  6E                 	db	110	;'n'
  3389  007BDE  6C                 	db	108	;'l'
  3390  007BDF  79                 	db	121	;'y'
  3391  007BE0  20                 	db	32
  3392  007BE1  6D                 	db	109	;'m'
  3393  007BE2  6F                 	db	111	;'o'
  3394  007BE3  64                 	db	100	;'d'
  3395  007BE4  65                 	db	101	;'e'
  3396  007BE5  0D                 	db	13
  3397  007BE6  0A                 	db	10
  3398  007BE7  00                 	db	0
  3399  007BE8                     STR_183:
  3400  007BE8  54                 	db	84	;'T'
  3401  007BE9  72                 	db	114	;'r'
  3402  007BEA  61                 	db	97	;'a'
  3403  007BEB  6E                 	db	110	;'n'
  3404  007BEC  73                 	db	115	;'s'
  3405  007BED  6D                 	db	109	;'m'
  3406  007BEE  69                 	db	105	;'i'
  3407  007BEF  74                 	db	116	;'t'
  3408  007BF0  20                 	db	32
  3409  007BF1  45                 	db	69	;'E'
  3410  007BF2  72                 	db	114	;'r'
  3411  007BF3  72                 	db	114	;'r'
  3412  007BF4  6F                 	db	111	;'o'
  3413  007BF5  72                 	db	114	;'r'
  3414  007BF6  20                 	db	32
  3415  007BF7  43                 	db	67	;'C'
  3416  007BF8  6F                 	db	111	;'o'
  3417  007BF9  75                 	db	117	;'u'
  3418  007BFA  6E                 	db	110	;'n'
  3419  007BFB  74                 	db	116	;'t'
  3420  007BFC  65                 	db	101	;'e'
  3421  007BFD  72                 	db	114	;'r'
  3422  007BFE  3A                 	db	58	;':'
  3423  007BFF  20                 	db	32
  3424  007C00  00                 	db	0
  3425  007C01                     STR_207:
  3426  007C01  54                 	db	84	;'T'
  3427  007C02  58                 	db	88	;'X'
  3428  007C03  20                 	db	32
  3429  007C04  2D                 	db	45
  3430  007C05  20                 	db	32
  3431  007C06  53                 	db	83	;'S'
  3432  007C07  65                 	db	101	;'e'
  3433  007C08  6E                 	db	110	;'n'
  3434  007C09  64                 	db	100	;'d'
  3435  007C0A  20                 	db	32
  3436  007C0B  43                 	db	67	;'C'
  3437  007C0C  41                 	db	65	;'A'
  3438  007C0D  4E                 	db	78	;'N'
  3439  007C0E  20                 	db	32
  3440  007C0F  66                 	db	102	;'f'
  3441  007C10  72                 	db	114	;'r'
  3442  007C11  61                 	db	97	;'a'
  3443  007C12  6D                 	db	109	;'m'
  3444  007C13  65                 	db	101	;'e'
  3445  007C14  20                 	db	32
  3446  007C15  2E                 	db	46
  3447  007C16  0D                 	db	13
  3448  007C17  0A                 	db	10
  3449  007C18  00                 	db	0
  3450  007C19                     STR_217:
  3451  007C19  46                 	db	70	;'F'
  3452  007C1A  49                 	db	73	;'I'
  3453  007C1B  4C                 	db	76	;'L'
  3454  007C1C  54                 	db	84	;'T'
  3455  007C1D  45                 	db	69	;'E'
  3456  007C1E  52                 	db	82	;'R'
  3457  007C1F  20                 	db	32
  3458  007C20  2D                 	db	45
  3459  007C21  20                 	db	32
  3460  007C22  53                 	db	83	;'S'
  3461  007C23  65                 	db	101	;'e'
  3462  007C24  74                 	db	116	;'t'
  3463  007C25  20                 	db	32
  3464  007C26  66                 	db	102	;'f'
  3465  007C27  69                 	db	105	;'i'
  3466  007C28  6C                 	db	108	;'l'
  3467  007C29  74                 	db	116	;'t'
  3468  007C2A  65                 	db	101	;'e'
  3469  007C2B  72                 	db	114	;'r'
  3470  007C2C  20                 	db	32
  3471  007C2D  2E                 	db	46
  3472  007C2E  0D                 	db	13
  3473  007C2F  0A                 	db	10
  3474  007C30  00                 	db	0
  3475  007C31                     STR_47:
  3476  007C31  2D                 	db	45
  3477  007C32  45                 	db	69	;'E'
  3478  007C33  52                 	db	82	;'R'
  3479  007C34  52                 	db	82	;'R'
  3480  007C35  4F                 	db	79	;'O'
  3481  007C36  52                 	db	82	;'R'
  3482  007C37  20                 	db	32
  3483  007C38  2D                 	db	45
  3484  007C39  20                 	db	32
  3485  007C3A  4E                 	db	78	;'N'
  3486  007C3B  65                 	db	101	;'e'
  3487  007C3C  65                 	db	101	;'e'
  3488  007C3D  64                 	db	100	;'d'
  3489  007C3E  73                 	db	115	;'s'
  3490  007C3F  20                 	db	32
  3491  007C40  6E                 	db	110	;'n'
  3492  007C41  6F                 	db	111	;'o'
  3493  007C42  64                 	db	100	;'d'
  3494  007C43  65                 	db	101	;'e'
  3495  007C44  69                 	db	105	;'i'
  3496  007C45  64                 	db	100	;'d'
  3497  007C46  0D                 	db	13
  3498  007C47  0A                 	db	10
  3499  007C48  00                 	db	0
  3500  007C49                     STR_27:
  3501  007C49  2D                 	db	45
  3502  007C4A  45                 	db	69	;'E'
  3503  007C4B  52                 	db	82	;'R'
  3504  007C4C  52                 	db	82	;'R'
  3505  007C4D  4F                 	db	79	;'O'
  3506  007C4E  52                 	db	82	;'R'
  3507  007C4F  20                 	db	32
  3508  007C50  2D                 	db	45
  3509  007C51  20                 	db	32
  3510  007C52  55                 	db	85	;'U'
  3511  007C53  6E                 	db	110	;'n'
  3512  007C54  6B                 	db	107	;'k'
  3513  007C55  6E                 	db	110	;'n'
  3514  007C56  6F                 	db	111	;'o'
  3515  007C57  77                 	db	119	;'w'
  3516  007C58  6E                 	db	110	;'n'
  3517  007C59  20                 	db	32
  3518  007C5A  6D                 	db	109	;'m'
  3519  007C5B  6F                 	db	111	;'o'
  3520  007C5C  64                 	db	100	;'d'
  3521  007C5D  65                 	db	101	;'e'
  3522  007C5E  0D                 	db	13
  3523  007C5F  0A                 	db	10
  3524  007C60  00                 	db	0
  3525  007C61                     STR_74:
  3526  007C61  2D                 	db	45
  3527  007C62  45                 	db	69	;'E'
  3528  007C63  52                 	db	82	;'R'
  3529  007C64  52                 	db	82	;'R'
  3530  007C65  4F                 	db	79	;'O'
  3531  007C66  52                 	db	82	;'R'
  3532  007C67  20                 	db	32
  3533  007C68  2D                 	db	45
  3534  007C69  20                 	db	32
  3535  007C6A  4E                 	db	78	;'N'
  3536  007C6B  65                 	db	101	;'e'
  3537  007C6C  65                 	db	101	;'e'
  3538  007C6D  64                 	db	100	;'d'
  3539  007C6E  20                 	db	32
  3540  007C6F  61                 	db	97	;'a'
  3541  007C70  20                 	db	32
  3542  007C71  76                 	db	118	;'v'
  3543  007C72  61                 	db	97	;'a'
  3544  007C73  6C                 	db	108	;'l'
  3545  007C74  75                 	db	117	;'u'
  3546  007C75  65                 	db	101	;'e'
  3547  007C76  0D                 	db	13
  3548  007C77  0A                 	db	10
  3549  007C78  00                 	db	0
  3550  007C79                     STR_190:
  3551  007C79  52                 	db	82	;'R'
  3552  007C7A  65                 	db	101	;'e'
  3553  007C7B  63                 	db	99	;'c'
  3554  007C7C  65                 	db	101	;'e'
  3555  007C7D  69                 	db	105	;'i'
  3556  007C7E  76                 	db	118	;'v'
  3557  007C7F  65                 	db	101	;'e'
  3558  007C80  20                 	db	32
  3559  007C81  45                 	db	69	;'E'
  3560  007C82  72                 	db	114	;'r'
  3561  007C83  72                 	db	114	;'r'
  3562  007C84  6F                 	db	111	;'o'
  3563  007C85  72                 	db	114	;'r'
  3564  007C86  20                 	db	32
  3565  007C87  43                 	db	67	;'C'
  3566  007C88  6F                 	db	111	;'o'
  3567  007C89  75                 	db	117	;'u'
  3568  007C8A  6E                 	db	110	;'n'
  3569  007C8B  74                 	db	116	;'t'
  3570  007C8C  65                 	db	101	;'e'
  3571  007C8D  72                 	db	114	;'r'
  3572  007C8E  3A                 	db	58	;':'
  3573  007C8F  20                 	db	32
  3574  007C90  00                 	db	0
  3575  007C91                     STR_175:
  3576  007C91  55                 	db	85	;'U'
  3577  007C92  41                 	db	65	;'A'
  3578  007C93  52                 	db	82	;'R'
  3579  007C94  54                 	db	84	;'T'
  3580  007C95  20                 	db	32
  3581  007C96  52                 	db	82	;'R'
  3582  007C97  65                 	db	101	;'e'
  3583  007C98  63                 	db	99	;'c'
  3584  007C99  65                 	db	101	;'e'
  3585  007C9A  69                 	db	105	;'i'
  3586  007C9B  76                 	db	118	;'v'
  3587  007C9C  65                 	db	101	;'e'
  3588  007C9D  20                 	db	32
  3589  007C9E  6F                 	db	111	;'o'
  3590  007C9F  76                 	db	118	;'v'
  3591  007CA0  65                 	db	101	;'e'
  3592  007CA1  72                 	db	114	;'r'
  3593  007CA2  72                 	db	114	;'r'
  3594  007CA3  75                 	db	117	;'u'
  3595  007CA4  6E                 	db	110	;'n'
  3596  007CA5  73                 	db	115	;'s'
  3597  007CA6  3A                 	db	58	;':'
  3598  007CA7  20                 	db	32
  3599  007CA8  00                 	db	0
  3600  007CA9                     STR_171:
  3601  007CA9  43                 	db	67	;'C'
  3602  007CAA  41                 	db	65	;'A'
  3603  007CAB  4E                 	db	78	;'N'
  3604  007CAC  20                 	db	32
  3605  007CAD  54                 	db	84	;'T'
  3606  007CAE  72                 	db	114	;'r'
  3607  007CAF  61                 	db	97	;'a'
  3608  007CB0  6E                 	db	110	;'n'
  3609  007CB1  73                 	db	115	;'s'
  3610  007CB2  6D                 	db	109	;'m'
  3611  007CB3  69                 	db	105	;'i'
  3612  007CB4  74                 	db	116	;'t'
  3613  007CB5  20                 	db	32
  3614  007CB6  6F                 	db	111	;'o'
  3615  007CB7  76                 	db	118	;'v'
  3616  007CB8  65                 	db	101	;'e'
  3617  007CB9  72                 	db	114	;'r'
  3618  007CBA  72                 	db	114	;'r'
  3619  007CBB  75                 	db	117	;'u'
  3620  007CBC  6E                 	db	110	;'n'
  3621  007CBD  73                 	db	115	;'s'
  3622  007CBE  3A                 	db	58	;':'
  3623  007CBF  20                 	db	32
  3624  007CC0  00                 	db	0
  3625  007CC1                     STR_209:
  3626  007CC1  52                 	db	82	;'R'
  3627  007CC2  58                 	db	88	;'X'
  3628  007CC3  20                 	db	32
  3629  007CC4  2D                 	db	45
  3630  007CC5  20                 	db	32
  3631  007CC6  52                 	db	82	;'R'
  3632  007CC7  65                 	db	101	;'e'
  3633  007CC8  61                 	db	97	;'a'
  3634  007CC9  64                 	db	100	;'d'
  3635  007CCA  20                 	db	32
  3636  007CCB  43                 	db	67	;'C'
  3637  007CCC  41                 	db	65	;'A'
  3638  007CCD  4E                 	db	78	;'N'
  3639  007CCE  20                 	db	32
  3640  007CCF  66                 	db	102	;'f'
  3641  007CD0  72                 	db	114	;'r'
  3642  007CD1  61                 	db	97	;'a'
  3643  007CD2  6D                 	db	109	;'m'
  3644  007CD3  65                 	db	101	;'e'
  3645  007CD4  2E                 	db	46
  3646  007CD5  0D                 	db	13
  3647  007CD6  0A                 	db	10
  3648  007CD7  00                 	db	0
  3649  007CD8                     STR_167:
  3650  007CD8  43                 	db	67	;'C'
  3651  007CD9  41                 	db	65	;'A'
  3652  007CDA  4E                 	db	78	;'N'
  3653  007CDB  20                 	db	32
  3654  007CDC  52                 	db	82	;'R'
  3655  007CDD  65                 	db	101	;'e'
  3656  007CDE  63                 	db	99	;'c'
  3657  007CDF  65                 	db	101	;'e'
  3658  007CE0  69                 	db	105	;'i'
  3659  007CE1  76                 	db	118	;'v'
  3660  007CE2  65                 	db	101	;'e'
  3661  007CE3  20                 	db	32
  3662  007CE4  6F                 	db	111	;'o'
  3663  007CE5  76                 	db	118	;'v'
  3664  007CE6  65                 	db	101	;'e'
  3665  007CE7  72                 	db	114	;'r'
  3666  007CE8  72                 	db	114	;'r'
  3667  007CE9  75                 	db	117	;'u'
  3668  007CEA  6E                 	db	110	;'n'
  3669  007CEB  73                 	db	115	;'s'
  3670  007CEC  3A                 	db	58	;':'
  3671  007CED  20                 	db	32
  3672  007CEE  00                 	db	0
  3673  007CEF                     STR_252:
  3674  007CEF  55                 	db	85	;'U'
  3675  007CF0  6E                 	db	110	;'n'
  3676  007CF1  6B                 	db	107	;'k'
  3677  007CF2  6E                 	db	110	;'n'
  3678  007CF3  6F                 	db	111	;'o'
  3679  007CF4  77                 	db	119	;'w'
  3680  007CF5  6E                 	db	110	;'n'
  3681  007CF6  20                 	db	32
  3682  007CF7  28                 	db	40
  3683  007CF8  56                 	db	86	;'V'
  3684  007CF9  65                 	db	101	;'e'
  3685  007CFA  72                 	db	114	;'r'
  3686  007CFB  62                 	db	98	;'b'
  3687  007CFC  6F                 	db	111	;'o'
  3688  007CFD  73                 	db	115	;'s'
  3689  007CFE  65                 	db	101	;'e'
  3690  007CFF  20                 	db	32
  3691  007D00  75                 	db	117	;'u'
  3692  007D01  73                 	db	115	;'s'
  3693  007D02  65                 	db	101	;'e'
  3694  007D03  64                 	db	100	;'d'
  3695  007D04  29                 	db	41
  3696  007D05  00                 	db	0
  3697  007D06                     STR_23:
  3698  007D06  2B                 	db	43
  3699  007D07  4F                 	db	79	;'O'
  3700  007D08  4B                 	db	75	;'K'
  3701  007D09  20                 	db	32
  3702  007D0A  2D                 	db	45
  3703  007D0B  20                 	db	32
  3704  007D0C  4C                 	db	76	;'L'
  3705  007D0D  6F                 	db	111	;'o'
  3706  007D0E  6F                 	db	111	;'o'
  3707  007D0F  70                 	db	112	;'p'
  3708  007D10  62                 	db	98	;'b'
  3709  007D11  61                 	db	97	;'a'
  3710  007D12  63                 	db	99	;'c'
  3711  007D13  6B                 	db	107	;'k'
  3712  007D14  20                 	db	32
  3713  007D15  6D                 	db	109	;'m'
  3714  007D16  6F                 	db	111	;'o'
  3715  007D17  64                 	db	100	;'d'
  3716  007D18  65                 	db	101	;'e'
  3717  007D19  0D                 	db	13
  3718  007D1A  0A                 	db	10
  3719  007D1B  00                 	db	0
  3720  007D1C                     STR_159:
  3721  007D1C  52                 	db	82	;'R'
  3722  007D1D  65                 	db	101	;'e'
  3723  007D1E  63                 	db	99	;'c'
  3724  007D1F  65                 	db	101	;'e'
  3725  007D20  69                 	db	105	;'i'
  3726  007D21  76                 	db	118	;'v'
  3727  007D22  65                 	db	101	;'e'
  3728  007D23  64                 	db	100	;'d'
  3729  007D24  20                 	db	32
  3730  007D25  43                 	db	67	;'C'
  3731  007D26  41                 	db	65	;'A'
  3732  007D27  4E                 	db	78	;'N'
  3733  007D28  20                 	db	32
  3734  007D29  66                 	db	102	;'f'
  3735  007D2A  72                 	db	114	;'r'
  3736  007D2B  61                 	db	97	;'a'
  3737  007D2C  6D                 	db	109	;'m'
  3738  007D2D  65                 	db	101	;'e'
  3739  007D2E  73                 	db	115	;'s'
  3740  007D2F  3A                 	db	58	;':'
  3741  007D30  20                 	db	32
  3742  007D31  00                 	db	0
  3743  007D32                     STR_163:
  3744  007D32  52                 	db	82	;'R'
  3745  007D33  65                 	db	101	;'e'
  3746  007D34  63                 	db	99	;'c'
  3747  007D35  65                 	db	101	;'e'
  3748  007D36  69                 	db	105	;'i'
  3749  007D37  76                 	db	118	;'v'
  3750  007D38  65                 	db	101	;'e'
  3751  007D39  64                 	db	100	;'d'
  3752  007D3A  20                 	db	32
  3753  007D3B  43                 	db	67	;'C'
  3754  007D3C  41                 	db	65	;'A'
  3755  007D3D  4E                 	db	78	;'N'
  3756  007D3E  20                 	db	32
  3757  007D3F  62                 	db	98	;'b'
  3758  007D40  79                 	db	121	;'y'
  3759  007D41  74                 	db	116	;'t'
  3760  007D42  65                 	db	101	;'e'
  3761  007D43  73                 	db	115	;'s'
  3762  007D44  3A                 	db	58	;':'
  3763  007D45  20                 	db	32
  3764  007D46  00                 	db	0
  3765  007D47                     STR_219:
  3766  007D47  4D                 	db	77	;'M'
  3767  007D48  41                 	db	65	;'A'
  3768  007D49  53                 	db	83	;'S'
  3769  007D4A  4B                 	db	75	;'K'
  3770  007D4B  20                 	db	32
  3771  007D4C  2D                 	db	45
  3772  007D4D  20                 	db	32
  3773  007D4E  53                 	db	83	;'S'
  3774  007D4F  65                 	db	101	;'e'
  3775  007D50  74                 	db	116	;'t'
  3776  007D51  20                 	db	32
  3777  007D52  6D                 	db	109	;'m'
  3778  007D53  61                 	db	97	;'a'
  3779  007D54  73                 	db	115	;'s'
  3780  007D55  6B                 	db	107	;'k'
  3781  007D56  20                 	db	32
  3782  007D57  2E                 	db	46
  3783  007D58  0D                 	db	13
  3784  007D59  0A                 	db	10
  3785  007D5A  00                 	db	0
  3786  007D5B                     STR_124:
  3787  007D5B  4A                 	db	74	;'J'
  3788  007D5C  46                 	db	70	;'F'
  3789  007D5D  72                 	db	114	;'r'
  3790  007D5E  61                 	db	97	;'a'
  3791  007D5F  6E                 	db	110	;'n'
  3792  007D60  6B                 	db	107	;'k'
  3793  007D61  66                 	db	102	;'f'
  3794  007D62  75                 	db	117	;'u'
  3795  007D63  72                 	db	114	;'r'
  3796  007D64  74                 	db	116	;'t'
  3797  007D65  20                 	db	32
  3798  007D66  52                 	db	82	;'R'
  3799  007D67  53                 	db	83	;'S'
  3800  007D68  2D                 	db	45
  3801  007D69  32                 	db	50	;'2'
  3802  007D6A  33                 	db	51	;'3'
  3803  007D6B  32                 	db	50	;'2'
  3804  007D6C  0D                 	db	13
  3805  007D6D  0A                 	db	10
  3806  007D6E  00                 	db	0
  3807  007D6F                     STR_25:
  3808  007D6F  2B                 	db	43
  3809  007D70  4F                 	db	79	;'O'
  3810  007D71  4B                 	db	75	;'K'
  3811  007D72  20                 	db	32
  3812  007D73  2D                 	db	45
  3813  007D74  20                 	db	32
  3814  007D75  43                 	db	67	;'C'
  3815  007D76  6C                 	db	108	;'l'
  3816  007D77  6F                 	db	111	;'o'
  3817  007D78  73                 	db	115	;'s'
  3818  007D79  65                 	db	101	;'e'
  3819  007D7A  64                 	db	100	;'d'
  3820  007D7B  20                 	db	32
  3821  007D7C  6D                 	db	109	;'m'
  3822  007D7D  6F                 	db	111	;'o'
  3823  007D7E  64                 	db	100	;'d'
  3824  007D7F  65                 	db	101	;'e'
  3825  007D80  0D                 	db	13
  3826  007D81  0A                 	db	10
  3827  007D82  00                 	db	0
  3828  007D83                     STR_20:
  3829  007D83  2B                 	db	43
  3830  007D84  4F                 	db	79	;'O'
  3831  007D85  4B                 	db	75	;'K'
  3832  007D86  20                 	db	32
  3833  007D87  2D                 	db	45
  3834  007D88  20                 	db	32
  3835  007D89  4E                 	db	78	;'N'
  3836  007D8A  6F                 	db	111	;'o'
  3837  007D8B  72                 	db	114	;'r'
  3838  007D8C  6D                 	db	109	;'m'
  3839  007D8D  61                 	db	97	;'a'
  3840  007D8E  6C                 	db	108	;'l'
  3841  007D8F  20                 	db	32
  3842  007D90  6D                 	db	109	;'m'
  3843  007D91  6F                 	db	111	;'o'
  3844  007D92  64                 	db	100	;'d'
  3845  007D93  65                 	db	101	;'e'
  3846  007D94  0D                 	db	13
  3847  007D95  0A                 	db	10
  3848  007D96  00                 	db	0
  3849  007D97                     STR_21:
  3850  007D97  2B                 	db	43
  3851  007D98  4F                 	db	79	;'O'
  3852  007D99  4B                 	db	75	;'K'
  3853  007D9A  20                 	db	32
  3854  007D9B  2D                 	db	45
  3855  007D9C  20                 	db	32
  3856  007D9D  53                 	db	83	;'S'
  3857  007D9E  69                 	db	105	;'i'
  3858  007D9F  6C                 	db	108	;'l'
  3859  007DA0  65                 	db	101	;'e'
  3860  007DA1  6E                 	db	110	;'n'
  3861  007DA2  74                 	db	116	;'t'
  3862  007DA3  20                 	db	32
  3863  007DA4  6D                 	db	109	;'m'
  3864  007DA5  6F                 	db	111	;'o'
  3865  007DA6  64                 	db	100	;'d'
  3866  007DA7  65                 	db	101	;'e'
  3867  007DA8  0D                 	db	13
  3868  007DA9  0A                 	db	10
  3869  007DAA  00                 	db	0
  3870  007DAB                     STR_78:
  3871  007DAB  49                 	db	73	;'I'
  3872  007DAC  6E                 	db	110	;'n'
  3873  007DAD  66                 	db	102	;'f'
  3874  007DAE  6F                 	db	111	;'o'
  3875  007DAF  20                 	db	32
  3876  007DB0  66                 	db	102	;'f'
  3877  007DB1  6F                 	db	111	;'o'
  3878  007DB2  72                 	db	114	;'r'
  3879  007DB3  20                 	db	32
  3880  007DB4  6E                 	db	110	;'n'
  3881  007DB5  6F                 	db	111	;'o'
  3882  007DB6  64                 	db	100	;'d'
  3883  007DB7  65                 	db	101	;'e'
  3884  007DB8  20                 	db	32
  3885  007DB9  69                 	db	105	;'i'
  3886  007DBA  64                 	db	100	;'d'
  3887  007DBB  20                 	db	32
  3888  007DBC  3D                 	db	61	;'='
  3889  007DBD  20                 	db	32
  3890  007DBE  00                 	db	0
  3891  007DBF                     STR_241:
  3892  007DBF  46                 	db	70	;'F'
  3893  007DC0  69                 	db	105	;'i'
  3894  007DC1  72                 	db	114	;'r'
  3895  007DC2  6D                 	db	109	;'m'
  3896  007DC3  77                 	db	119	;'w'
  3897  007DC4  61                 	db	97	;'a'
  3898  007DC5  72                 	db	114	;'r'
  3899  007DC6  65                 	db	101	;'e'
  3900  007DC7  20                 	db	32
  3901  007DC8  76                 	db	118	;'v'
  3902  007DC9  65                 	db	101	;'e'
  3903  007DCA  72                 	db	114	;'r'
  3904  007DCB  73                 	db	115	;'s'
  3905  007DCC  69                 	db	105	;'i'
  3906  007DCD  6F                 	db	111	;'o'
  3907  007DCE  6E                 	db	110	;'n'
  3908  007DCF  20                 	db	32
  3909  007DD0  3D                 	db	61	;'='
  3910  007DD1  20                 	db	32
  3911  007DD2  00                 	db	0
  3912  007DD3                     STR_22:
  3913  007DD3  2B                 	db	43
  3914  007DD4  4F                 	db	79	;'O'
  3915  007DD5  4B                 	db	75	;'K'
  3916  007DD6  20                 	db	32
  3917  007DD7  2D                 	db	45
  3918  007DD8  20                 	db	32
  3919  007DD9  53                 	db	83	;'S'
  3920  007DDA  6C                 	db	108	;'l'
  3921  007DDB  65                 	db	101	;'e'
  3922  007DDC  65                 	db	101	;'e'
  3923  007DDD  70                 	db	112	;'p'
  3924  007DDE  20                 	db	32
  3925  007DDF  6D                 	db	109	;'m'
  3926  007DE0  6F                 	db	111	;'o'
  3927  007DE1  64                 	db	100	;'d'
  3928  007DE2  65                 	db	101	;'e'
  3929  007DE3  0D                 	db	13
  3930  007DE4  0A                 	db	10
  3931  007DE5  00                 	db	0
  3932  007DE6                     STR_26:
  3933  007DE6  2B                 	db	43
  3934  007DE7  4F                 	db	79	;'O'
  3935  007DE8  4B                 	db	75	;'K'
  3936  007DE9  20                 	db	32
  3937  007DEA  2D                 	db	45
  3938  007DEB  20                 	db	32
  3939  007DEC  42                 	db	66	;'B'
  3940  007DED  69                 	db	105	;'i'
  3941  007DEE  74                 	db	116	;'t'
  3942  007DEF  73                 	db	115	;'s'
  3943  007DF0  20                 	db	32
  3944  007DF1  6D                 	db	109	;'m'
  3945  007DF2  6F                 	db	111	;'o'
  3946  007DF3  64                 	db	100	;'d'
  3947  007DF4  65                 	db	101	;'e'
  3948  007DF5  0D                 	db	13
  3949  007DF6  0A                 	db	10
  3950  007DF7  00                 	db	0
  3951  007DF8                     STR_39:
  3952  007DF8  2B                 	db	43
  3953  007DF9  4F                 	db	79	;'O'
  3954  007DFA  4B                 	db	75	;'K'
  3955  007DFB  20                 	db	32
  3956  007DFC  2D                 	db	45
  3957  007DFD  20                 	db	32
  3958  007DFE  6E                 	db	110	;'n'
  3959  007DFF  6F                 	db	111	;'o'
  3960  007E00  20                 	db	32
  3961  007E01  65                 	db	101	;'e'
  3962  007E02  76                 	db	118	;'v'
  3963  007E03  65                 	db	101	;'e'
  3964  007E04  6E                 	db	110	;'n'
  3965  007E05  74                 	db	116	;'t'
  3966  007E06  73                 	db	115	;'s'
  3967  007E07  0D                 	db	13
  3968  007E08  0A                 	db	10
  3969  007E09  00                 	db	0
  3970  007E0A                     STR_151:
  3971  007E0A  53                 	db	83	;'S'
  3972  007E0B  65                 	db	101	;'e'
  3973  007E0C  6E                 	db	110	;'n'
  3974  007E0D  74                 	db	116	;'t'
  3975  007E0E  20                 	db	32
  3976  007E0F  43                 	db	67	;'C'
  3977  007E10  41                 	db	65	;'A'
  3978  007E11  4E                 	db	78	;'N'
  3979  007E12  20                 	db	32
  3980  007E13  66                 	db	102	;'f'
  3981  007E14  72                 	db	114	;'r'
  3982  007E15  61                 	db	97	;'a'
  3983  007E16  6D                 	db	109	;'m'
  3984  007E17  65                 	db	101	;'e'
  3985  007E18  73                 	db	115	;'s'
  3986  007E19  3A                 	db	58	;':'
  3987  007E1A  20                 	db	32
  3988  007E1B  00                 	db	0
  3989  007E1C                     STR_254:
  3990  007E1C  30                 	db	48	;'0'
  3991  007E1D  31                 	db	49	;'1'
  3992  007E1E  32                 	db	50	;'2'
  3993  007E1F  33                 	db	51	;'3'
  3994  007E20  34                 	db	52	;'4'
  3995  007E21  35                 	db	53	;'5'
  3996  007E22  36                 	db	54	;'6'
  3997  007E23  37                 	db	55	;'7'
  3998  007E24  38                 	db	56	;'8'
  3999  007E25  39                 	db	57	;'9'
  4000  007E26  41                 	db	65	;'A'
  4001  007E27  42                 	db	66	;'B'
  4002  007E28  43                 	db	67	;'C'
  4003  007E29  44                 	db	68	;'D'
  4004  007E2A  45                 	db	69	;'E'
  4005  007E2B  46                 	db	70	;'F'
  4006  007E2C  00                 	db	0
  4007  007E2D                     STR_255:
  4008  007E2D  30                 	db	48	;'0'
  4009  007E2E  31                 	db	49	;'1'
  4010  007E2F  32                 	db	50	;'2'
  4011  007E30  33                 	db	51	;'3'
  4012  007E31  34                 	db	52	;'4'
  4013  007E32  35                 	db	53	;'5'
  4014  007E33  36                 	db	54	;'6'
  4015  007E34  37                 	db	55	;'7'
  4016  007E35  38                 	db	56	;'8'
  4017  007E36  39                 	db	57	;'9'
  4018  007E37  61                 	db	97	;'a'
  4019  007E38  62                 	db	98	;'b'
  4020  007E39  63                 	db	99	;'c'
  4021  007E3A  64                 	db	100	;'d'
  4022  007E3B  65                 	db	101	;'e'
  4023  007E3C  66                 	db	102	;'f'
  4024  007E3D  00                 	db	0
  4025  007E3E                     STR_155:
  4026  007E3E  53                 	db	83	;'S'
  4027  007E3F  65                 	db	101	;'e'
  4028  007E40  6E                 	db	110	;'n'
  4029  007E41  74                 	db	116	;'t'
  4030  007E42  20                 	db	32
  4031  007E43  43                 	db	67	;'C'
  4032  007E44  41                 	db	65	;'A'
  4033  007E45  4E                 	db	78	;'N'
  4034  007E46  20                 	db	32
  4035  007E47  62                 	db	98	;'b'
  4036  007E48  79                 	db	121	;'y'
  4037  007E49  74                 	db	116	;'t'
  4038  007E4A  65                 	db	101	;'e'
  4039  007E4B  73                 	db	115	;'s'
  4040  007E4C  3A                 	db	58	;':'
  4041  007E4D  20                 	db	32
  4042  007E4E  00                 	db	0
  4043  007E4F                     STR_233:
  4044  007E4F  20                 	db	32
  4045  007E50  6E                 	db	110	;'n'
  4046  007E51  6F                 	db	111	;'o'
  4047  007E52  64                 	db	100	;'d'
  4048  007E53  65                 	db	101	;'e'
  4049  007E54  73                 	db	115	;'s'
  4050  007E55  20                 	db	32
  4051  007E56  66                 	db	102	;'f'
  4052  007E57  6F                 	db	111	;'o'
  4053  007E58  75                 	db	117	;'u'
  4054  007E59  6E                 	db	110	;'n'
  4055  007E5A  64                 	db	100	;'d'
  4056  007E5B  0D                 	db	13
  4057  007E5C  0A                 	db	10
  4058  007E5D  00                 	db	0
  4059  007E5E                     STR_51:
  4060  007E5E  56                 	db	86	;'V'
  4061  007E5F  61                 	db	97	;'a'
  4062  007E60  6C                 	db	108	;'l'
  4063  007E61  75                 	db	117	;'u'
  4064  007E62  65                 	db	101	;'e'
  4065  007E63  20                 	db	32
  4066  007E64  66                 	db	102	;'f'
  4067  007E65  6F                 	db	111	;'o'
  4068  007E66  72                 	db	114	;'r'
  4069  007E67  20                 	db	32
  4070  007E68  72                 	db	114	;'r'
  4071  007E69  65                 	db	101	;'e'
  4072  007E6A  67                 	db	103	;'g'
  4073  007E6B  20                 	db	32
  4074  007E6C  00                 	db	0
  4075  007E6D                     STR_239:
  4076  007E6D  4D                 	db	77	;'M'
  4077  007E6E  44                 	db	68	;'D'
  4078  007E6F  46                 	db	70	;'F'
  4079  007E70  20                 	db	32
  4080  007E71  3D                 	db	61	;'='
  4081  007E72  20                 	db	32
  4082  007E73  68                 	db	104	;'h'
  4083  007E74  74                 	db	116	;'t'
  4084  007E75  74                 	db	116	;'t'
  4085  007E76  70                 	db	112	;'p'
  4086  007E77  3A                 	db	58	;':'
  4087  007E78  2F                 	db	47
  4088  007E79  2F                 	db	47
  4089  007E7A  00                 	db	0
  4090  007E7B                     STR_249:
  4091  007E7B  56                 	db	86	;'V'
  4092  007E7C  53                 	db	83	;'S'
  4093  007E7D  43                 	db	67	;'C'
  4094  007E7E  50                 	db	80	;'P'
  4095  007E7F  20                 	db	32
  4096  007E80  44                 	db	68	;'D'
  4097  007E81  72                 	db	114	;'r'
  4098  007E82  69                 	db	105	;'i'
  4099  007E83  76                 	db	118	;'v'
  4100  007E84  65                 	db	101	;'e'
  4101  007E85  72                 	db	114	;'r'
  4102  007E86  00                 	db	0
  4103  007E87                     STR_111:
  4104  007E87  52                 	db	82	;'R'
  4105  007E88  57                 	db	87	;'W'
  4106  007E89  54                 	db	84	;'T'
  4107  007E8A  49                 	db	73	;'I'
  4108  007E8B  4D                 	db	77	;'M'
  4109  007E8C  45                 	db	69	;'E'
  4110  007E8D  4F                 	db	79	;'O'
  4111  007E8E  55                 	db	85	;'U'
  4112  007E8F  54                 	db	84	;'T'
  4113  007E90  20                 	db	32
  4114  007E91  00                 	db	0
  4115  007E92                     STR_149:
  4116  007E92  2C                 	db	44
  4117  007E93  44                 	db	68	;'D'
  4118  007E94  61                 	db	97	;'a'
  4119  007E95  74                 	db	116	;'t'
  4120  007E96  61                 	db	97	;'a'
  4121  007E97  3D                 	db	61	;'='
  4122  007E98  6E                 	db	110	;'n'
  4123  007E99  6F                 	db	111	;'o'
  4124  007E9A  6E                 	db	110	;'n'
  4125  007E9B  65                 	db	101	;'e'
  4126  007E9C  00                 	db	0
  4127  007E9D                     STR_245:
  4128  007E9D  56                 	db	86	;'V'
  4129  007E9E  65                 	db	101	;'e'
  4130  007E9F  72                 	db	114	;'r'
  4131  007EA0  73                 	db	115	;'s'
  4132  007EA1  69                 	db	105	;'i'
  4133  007EA2  6F                 	db	111	;'o'
  4134  007EA3  6E                 	db	110	;'n'
  4135  007EA4  3A                 	db	58	;':'
  4136  007EA5  20                 	db	32
  4137  007EA6  00                 	db	0
  4138  007EA7                     STR_251:
  4139  007EA7  56                 	db	86	;'V'
  4140  007EA8  53                 	db	83	;'S'
  4141  007EA9  43                 	db	67	;'C'
  4142  007EAA  50                 	db	80	;'P'
  4143  007EAB  20                 	db	32
  4144  007EAC  4E                 	db	78	;'N'
  4145  007EAD  6F                 	db	111	;'o'
  4146  007EAE  64                 	db	100	;'d'
  4147  007EAF  65                 	db	101	;'e'
  4148  007EB0  00                 	db	0
  4149  007EB1                     STR_250:
  4150  007EB1  53                 	db	83	;'S'
  4151  007EB2  4C                 	db	76	;'L'
  4152  007EB3  20                 	db	32
  4153  007EB4  44                 	db	68	;'D'
  4154  007EB5  72                 	db	114	;'r'
  4155  007EB6  69                 	db	105	;'i'
  4156  007EB7  76                 	db	118	;'v'
  4157  007EB8  65                 	db	101	;'e'
  4158  007EB9  72                 	db	114	;'r'
  4159  007EBA  00                 	db	0
  4160  007EBB                     STR_112:
  4161  007EBB  53                 	db	83	;'S'
  4162  007EBC  54                 	db	84	;'T'
  4163  007EBD  41                 	db	65	;'A'
  4164  007EBE  52                 	db	82	;'R'
  4165  007EBF  54                 	db	84	;'T'
  4166  007EC0  49                 	db	73	;'I'
  4167  007EC1  46                 	db	70	;'F'
  4168  007EC2  20                 	db	32
  4169  007EC3  00                 	db	0
  4170  007EC4                     STR_139:
  4171  007EC4  2C                 	db	44
  4172  007EC5  6E                 	db	110	;'n'
  4173  007EC6  6F                 	db	111	;'o'
  4174  007EC7  64                 	db	100	;'d'
  4175  007EC8  65                 	db	101	;'e'
  4176  007EC9  69                 	db	105	;'i'
  4177  007ECA  64                 	db	100	;'d'
  4178  007ECB  3D                 	db	61	;'='
  4179  007ECC  00                 	db	0
  4180  007ECD                     STR_13:
  4181  007ECD  4C                 	db	76	;'L'
  4182  007ECE  4F                 	db	79	;'O'
  4183  007ECF  4F                 	db	79	;'O'
  4184  007ED0  50                 	db	80	;'P'
  4185  007ED1  42                 	db	66	;'B'
  4186  007ED2  41                 	db	65	;'A'
  4187  007ED3  43                 	db	67	;'C'
  4188  007ED4  4B                 	db	75	;'K'
  4189  007ED5  00                 	db	0
  4190  007ED6                     STR_125:
  4191  007ED6  56                 	db	86	;'V'
  4192  007ED7  31                 	db	49	;'1'
  4193  007ED8  30                 	db	48	;'0'
  4194  007ED9  31                 	db	49	;'1'
  4195  007EDA  31                 	db	49	;'1'
  4196  007EDB  0D                 	db	13
  4197  007EDC  0A                 	db	10
  4198  007EDD  00                 	db	0
  4199  007EDE                     STR_126:
  4200  007EDE  4E                 	db	78	;'N'
  4201  007EDF  31                 	db	49	;'1'
  4202  007EE0  39                 	db	57	;'9'
  4203  007EE1  37                 	db	55	;'7'
  4204  007EE2  37                 	db	55	;'7'
  4205  007EE3  0D                 	db	13
  4206  007EE4  0A                 	db	10
  4207  007EE5  00                 	db	0
  4208  007EE6                     STR_234:
  4209  007EE6  47                 	db	71	;'G'
  4210  007EE7  55                 	db	85	;'U'
  4211  007EE8  49                 	db	73	;'I'
  4212  007EE9  44                 	db	68	;'D'
  4213  007EEA  20                 	db	32
  4214  007EEB  3D                 	db	61	;'='
  4215  007EEC  20                 	db	32
  4216  007EED  00                 	db	0
  4217  007EEE                     STR_120:
  4218  007EEE  46                 	db	70	;'F'
  4219  007EEF  49                 	db	73	;'I'
  4220  007EF0  4C                 	db	76	;'L'
  4221  007EF1  54                 	db	84	;'T'
  4222  007EF2  45                 	db	69	;'E'
  4223  007EF3  52                 	db	82	;'R'
  4224  007EF4  20                 	db	32
  4225  007EF5  00                 	db	0
  4226  007EF6                     STR_133:
  4227  007EF6  2C                 	db	44
  4228  007EF7  63                 	db	99	;'c'
  4229  007EF8  6C                 	db	108	;'l'
  4230  007EF9  61                 	db	97	;'a'
  4231  007EFA  73                 	db	115	;'s'
  4232  007EFB  73                 	db	115	;'s'
  4233  007EFC  3D                 	db	61	;'='
  4234  007EFD  00                 	db	0
  4235  007EFE                     STR_114:
  4236  007EFE  56                 	db	86	;'V'
  4237  007EFF  45                 	db	69	;'E'
  4238  007F00  52                 	db	82	;'R'
  4239  007F01  42                 	db	66	;'B'
  4240  007F02  4F                 	db	79	;'O'
  4241  007F03  53                 	db	83	;'S'
  4242  007F04  45                 	db	69	;'E'
  4243  007F05  00                 	db	0
  4244  007F06                     STR_109:
  4245  007F06  44                 	db	68	;'D'
  4246  007F07  45                 	db	69	;'E'
  4247  007F08  43                 	db	67	;'C'
  4248  007F09  49                 	db	73	;'I'
  4249  007F0A  4D                 	db	77	;'M'
  4250  007F0B  41                 	db	65	;'A'
  4251  007F0C  4C                 	db	76	;'L'
  4252  007F0D  00                 	db	0
  4253  007F0E                     STR_17:
  4254  007F0E  56                 	db	86	;'V'
  4255  007F0F  45                 	db	69	;'E'
  4256  007F10  52                 	db	82	;'R'
  4257  007F11  53                 	db	83	;'S'
  4258  007F12  49                 	db	73	;'I'
  4259  007F13  4F                 	db	79	;'O'
  4260  007F14  4E                 	db	78	;'N'
  4261  007F15  00                 	db	0
  4262  007F16                     STR_168:
  4263  007F16  30                 	db	48	;'0'
  4264  007F17  78                 	db	120	;'x'
  4265  007F18  25                 	db	37
  4266  007F19  30                 	db	48	;'0'
  4267  007F1A  38                 	db	56	;'8'
  4268  007F1B  6C                 	db	108	;'l'
  4269  007F1C  58                 	db	88	;'X'
  4270  007F1D  00                 	db	0
  4271  007F1E                     STR_248:
  4272  007F1E  56                 	db	86	;'V'
  4273  007F1F  65                 	db	101	;'e'
  4274  007F20  72                 	db	114	;'r'
  4275  007F21  62                 	db	98	;'b'
  4276  007F22  6F                 	db	111	;'o'
  4277  007F23  73                 	db	115	;'s'
  4278  007F24  65                 	db	101	;'e'
  4279  007F25  00                 	db	0
  4280  007F26                     STR_247:
  4281  007F26  4D                 	db	77	;'M'
  4282  007F27  6F                 	db	111	;'o'
  4283  007F28  64                 	db	100	;'d'
  4284  007F29  65                 	db	101	;'e'
  4285  007F2A  3A                 	db	58	;':'
  4286  007F2B  20                 	db	32
  4287  007F2C  00                 	db	0
  4288  007F2D                     STR_145:
  4289  007F2D  2C                 	db	44
  4290  007F2E  44                 	db	68	;'D'
  4291  007F2F  61                 	db	97	;'a'
  4292  007F30  74                 	db	116	;'t'
  4293  007F31  61                 	db	97	;'a'
  4294  007F32  3D                 	db	61	;'='
  4295  007F33  00                 	db	0
  4296  007F34                     STR_136:
  4297  007F34  2C                 	db	44
  4298  007F35  74                 	db	116	;'t'
  4299  007F36  79                 	db	121	;'y'
  4300  007F37  70                 	db	112	;'p'
  4301  007F38  65                 	db	101	;'e'
  4302  007F39  3D                 	db	61	;'='
  4303  007F3A  00                 	db	0
  4304  007F3B                     STR_142:
  4305  007F3B  2C                 	db	44
  4306  007F3C  73                 	db	115	;'s'
  4307  007F3D  69                 	db	105	;'i'
  4308  007F3E  7A                 	db	122	;'z'
  4309  007F3F  65                 	db	101	;'e'
  4310  007F40  3D                 	db	61	;'='
  4311  007F41  00                 	db	0
  4312  007F42                     STR_130:
  4313  007F42  3C                 	db	60	;'<'
  4314  007F43  50                 	db	80	;'P'
  4315  007F44  72                 	db	114	;'r'
  4316  007F45  69                 	db	105	;'i'
  4317  007F46  6F                 	db	111	;'o'
  4318  007F47  3D                 	db	61	;'='
  4319  007F48  00                 	db	0
  4320  007F49                     STR_19:
  4321  007F49  49                 	db	73	;'I'
  4322  007F4A  46                 	db	70	;'F'
  4323  007F4B  4D                 	db	77	;'M'
  4324  007F4C  4F                 	db	79	;'O'
  4325  007F4D  44                 	db	68	;'D'
  4326  007F4E  45                 	db	69	;'E'
  4327  007F4F  00                 	db	0
  4328  007F50                     STR_15:
  4329  007F50  4C                 	db	76	;'L'
  4330  007F51  49                 	db	73	;'I'
  4331  007F52  53                 	db	83	;'S'
  4332  007F53  54                 	db	84	;'T'
  4333  007F54  45                 	db	69	;'E'
  4334  007F55  4E                 	db	78	;'N'
  4335  007F56  00                 	db	0
  4336  007F57                     STR_82:
  4337  007F57  46                 	db	70	;'F'
  4338  007F58  49                 	db	73	;'I'
  4339  007F59  4C                 	db	76	;'L'
  4340  007F5A  54                 	db	84	;'T'
  4341  007F5B  45                 	db	69	;'E'
  4342  007F5C  52                 	db	82	;'R'
  4343  007F5D  00                 	db	0
  4344  007F5E                     STR_9:
  4345  007F5E  53                 	db	83	;'S'
  4346  007F5F  49                 	db	73	;'I'
  4347  007F60  4C                 	db	76	;'L'
  4348  007F61  45                 	db	69	;'E'
  4349  007F62  4E                 	db	78	;'N'
  4350  007F63  54                 	db	84	;'T'
  4351  007F64  00                 	db	0
  4352  007F65                     STR_52:
  4353  007F65  30                 	db	48	;'0'
  4354  007F66  78                 	db	120	;'x'
  4355  007F67  25                 	db	37
  4356  007F68  30                 	db	48	;'0'
  4357  007F69  32                 	db	50	;'2'
  4358  007F6A  58                 	db	88	;'X'
  4359  007F6B  00                 	db	0
  4360  007F6C                     STR_134:
  4361  007F6C  30                 	db	48	;'0'
  4362  007F6D  78                 	db	120	;'x'
  4363  007F6E  25                 	db	37
  4364  007F6F  30                 	db	48	;'0'
  4365  007F70  34                 	db	52	;'4'
  4366  007F71  58                 	db	88	;'X'
  4367  007F72  00                 	db	0
  4368  007F73                     STR_152:
  4369  007F73  30                 	db	48	;'0'
  4370  007F74  78                 	db	120	;'x'
  4371  007F75  25                 	db	37
  4372  007F76  30                 	db	48	;'0'
  4373  007F77  38                 	db	56	;'8'
  4374  007F78  58                 	db	88	;'X'
  4375  007F79  00                 	db	0
  4376  007F7A                     STR_127:
  4377  007F7A  46                 	db	70	;'F'
  4378  007F7B  30                 	db	48	;'0'
  4379  007F7C  30                 	db	48	;'0'
  4380  007F7D  0D                 	db	13
  4381  007F7E  0A                 	db	10
  4382  007F7F  00                 	db	0
  4383  007F80                     STR_8:
  4384  007F80  2B                 	db	43
  4385  007F81  4F                 	db	79	;'O'
  4386  007F82  4B                 	db	75	;'K'
  4387  007F83  0D                 	db	13
  4388  007F84  0A                 	db	10
  4389  007F85  00                 	db	0
  4390  007F86                     STR_113:
  4391  007F86  4D                 	db	77	;'M'
  4392  007F87  4F                 	db	79	;'O'
  4393  007F88  44                 	db	68	;'D'
  4394  007F89  45                 	db	69	;'E'
  4395  007F8A  20                 	db	32
  4396  007F8B  00                 	db	0
  4397  007F8C                     STR_121:
  4398  007F8C  4D                 	db	77	;'M'
  4399  007F8D  41                 	db	65	;'A'
  4400  007F8E  53                 	db	83	;'S'
  4401  007F8F  4B                 	db	75	;'K'
  4402  007F90  20                 	db	32
  4403  007F91  00                 	db	0
  4404  007F92                     STR_11:
  4405  007F92  43                 	db	67	;'C'
  4406  007F93  4C                 	db	76	;'L'
  4407  007F94  4F                 	db	79	;'O'
  4408  007F95  53                 	db	83	;'S'
  4409  007F96  45                 	db	69	;'E'
  4410  007F97  00                 	db	0
  4411  007F98                     STR_118:
  4412  007F98  53                 	db	83	;'S'
  4413  007F99  4C                 	db	76	;'L'
  4414  007F9A  43                 	db	67	;'C'
  4415  007F9B  41                 	db	65	;'A'
  4416  007F9C  4E                 	db	78	;'N'
  4417  007F9D  00                 	db	0
  4418  007F9E                     STR_106:
  4419  007F9E  53                 	db	83	;'S'
  4420  007F9F  45                 	db	69	;'E'
  4421  007FA0  54                 	db	84	;'T'
  4422  007FA1  20                 	db	32
  4423  007FA2  00                 	db	0
  4424  007FA3                     STR_44:
  4425  007FA3  46                 	db	70	;'F'
  4426  007FA4  49                 	db	73	;'I'
  4427  007FA5  4E                 	db	78	;'N'
  4428  007FA6  44                 	db	68	;'D'
  4429  007FA7  00                 	db	0
  4430  007FA8                     STR_45:
  4431  007FA8  52                 	db	82	;'R'
  4432  007FA9  52                 	db	82	;'R'
  4433  007FAA  45                 	db	69	;'E'
  4434  007FAB  47                 	db	71	;'G'
  4435  007FAC  00                 	db	0
  4436  007FAD                     STR_68:
  4437  007FAD  57                 	db	87	;'W'
  4438  007FAE  52                 	db	82	;'R'
  4439  007FAF  45                 	db	69	;'E'
  4440  007FB0  47                 	db	71	;'G'
  4441  007FB1  00                 	db	0
  4442  007FB2                     STR_94:
  4443  007FB2  4D                 	db	77	;'M'
  4444  007FB3  41                 	db	65	;'A'
  4445  007FB4  53                 	db	83	;'S'
  4446  007FB5  4B                 	db	75	;'K'
  4447  007FB6  00                 	db	0
  4448  007FB7                     STR_7:
  4449  007FB7  4F                 	db	79	;'O'
  4450  007FB8  50                 	db	80	;'P'
  4451  007FB9  45                 	db	69	;'E'
  4452  007FBA  4E                 	db	78	;'N'
  4453  007FBB  00                 	db	0
  4454  007FBC                     STR_77:
  4455  007FBC  49                 	db	73	;'I'
  4456  007FBD  4E                 	db	78	;'N'
  4457  007FBE  46                 	db	70	;'F'
  4458  007FBF  4F                 	db	79	;'O'
  4459  007FC0  00                 	db	0
  4460  007FC1                     STR_116:
  4461  007FC1  56                 	db	86	;'V'
  4462  007FC2  53                 	db	83	;'S'
  4463  007FC3  43                 	db	67	;'C'
  4464  007FC4  50                 	db	80	;'P'
  4465  007FC5  00                 	db	0
  4466  007FC6                     STR_42:
  4467  007FC6  48                 	db	72	;'H'
  4468  007FC7  45                 	db	69	;'E'
  4469  007FC8  4C                 	db	76	;'L'
  4470  007FC9  50                 	db	80	;'P'
  4471  007FCA  00                 	db	0
  4472  007FCB                     STR_40:
  4473  007FCB  53                 	db	83	;'S'
  4474  007FCC  54                 	db	84	;'T'
  4475  007FCD  41                 	db	65	;'A'
  4476  007FCE  54                 	db	84	;'T'
  4477  007FCF  00                 	db	0
  4478  007FD0                     STR_5:
  4479  007FD0  42                 	db	66	;'B'
  4480  007FD1  4F                 	db	79	;'O'
  4481  007FD2  4F                 	db	79	;'O'
  4482  007FD3  54                 	db	84	;'T'
  4483  007FD4  00                 	db	0
  4484  007FD5                     STR_150:
  4485  007FD5  3E                 	db	62	;'>'
  4486  007FD6  0D                 	db	13
  4487  007FD7  0A                 	db	10
  4488  007FD8  00                 	db	0
  4489  007FD9                     STR_41:
  4490  007FD9  45                 	db	69	;'E'
  4491  007FDA  52                 	db	82	;'R'
  4492  007FDB  52                 	db	82	;'R'
  4493  007FDC  00                 	db	0
  4494  007FDD                     STR_107:
  4495  007FDD  48                 	db	72	;'H'
  4496  007FDE  45                 	db	69	;'E'
  4497  007FDF  58                 	db	88	;'X'
  4498  007FE0  00                 	db	0
  4499  007FE1                     STR_153:
  4500  007FE1  25                 	db	37
  4501  007FE2  6C                 	db	108	;'l'
  4502  007FE3  75                 	db	117	;'u'
  4503  007FE4  00                 	db	0
  4504  007FE5                     STR_236:
  4505  007FE5  2D                 	db	45
  4506  007FE6  2D                 	db	45
  4507  007FE7  00                 	db	0
  4508  007FE8                     STR_37:
  4509  007FE8  52                 	db	82	;'R'
  4510  007FE9  58                 	db	88	;'X'
  4511  007FEA  00                 	db	0
  4512  007FEB                     STR_28:
  4513  007FEB  54                 	db	84	;'T'
  4514  007FEC  58                 	db	88	;'X'
  4515  007FED  00                 	db	0
  4516  007FEE                     STR_53:
  4517  007FEE  25                 	db	37
  4518  007FEF  64                 	db	100	;'d'
  4519  007FF0  00                 	db	0
  4520  007FF1                     STR_129:
  4521  007FF1  07                 	db	7
  4522  007FF2  00                 	db	0
  4523  007FF3                     STR_128:
  4524  007FF3  0D                 	db	13
  4525  007FF4  00                 	db	0
  4526  007FF5                     STR_29:
  4527  007FF5  2C                 	db	44
  4528  007FF6  00                 	db	0
  4529  007FF7                     STR_243:
  4530  007FF7  2E                 	db	46
  4531  007FF8  00                 	db	0
  4532  007FF9                     STR_235:
  4533  007FF9  30                 	db	48	;'0'
  4534  007FFA  00                 	db	0
  4535  007FFB                     STR_237:
  4536  007FFB  3A                 	db	58	;':'
  4537  007FFC  00                 	db	0
  4538  007FFD                     STR_242:
  4539  007FFD  3F                 	db	63	;'?'
  4540  007FFE  00                 	db	0
  4541  007FFF                     __end_of__stringdata:
  4542                           	opt stack 0
  4543                           
  4544                           ; #config settings
  4545  007FFF  00                 	db	0	; dummy byte at the end
  4546  0000                     tblptru	equ	0xFF8
  4547                           tblptrh	equ	0xFF7
  4548                           tblptrl	equ	0xFF6
  4549                           tablat	equ	0xFF5
  4550                           prodh	equ	0xFF4
  4551                           prodl	equ	0xFF3
  4552                           intcon	equ	0xFF2
  4553                           indf0	equ	0xFEF
  4554                           fsr0h	equ	0xFEA
  4555                           fsr0l	equ	0xFE9
  4556                           wreg	equ	0xFE8
  4557                           indf1	equ	0xFE7
  4558                           postinc1	equ	0xFE6
  4559                           postdec1	equ	0xFE5
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           plusw2	equ	0xFDB
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570                           	psect	cinit
  4571  004998                     __pcinit:
  4572                           	opt stack 0
  4573  004998                     start_initialization:
  4574                           	opt stack 0
  4575  004998                     __initialization:
  4576                           	opt stack 0
  4577                           
  4578                           ; Clear objects allocated to BIGRAM (494 bytes)
  4579  004998  EE04  F000         	lfsr	0,__pbssBIGRAM
  4580  00499C  EE11 F0EE          	lfsr	1,494
  4581  0049A0                     clear_0:
  4582  0049A0  6AEE               	clrf	postinc0,c
  4583  0049A2  50E5               	movf	postdec1,w,c
  4584  0049A4  50E1               	movf	fsr1l,w,c
  4585  0049A6  E1FC               	bnz	clear_0
  4586  0049A8  50E2               	movf	fsr1h,w,c
  4587  0049AA  E1FA               	bnz	clear_0
  4588                           
  4589                           ; Clear objects allocated to BANK3 (256 bytes)
  4590  0049AC  EE03  F000         	lfsr	0,__pbssBANK3
  4591  0049B0  EE11 F000          	lfsr	1,256
  4592  0049B4                     clear_1:
  4593  0049B4  6AEE               	clrf	postinc0,c
  4594  0049B6  50E5               	movf	postdec1,w,c
  4595  0049B8  50E1               	movf	fsr1l,w,c
  4596  0049BA  E1FC               	bnz	clear_1
  4597  0049BC  50E2               	movf	fsr1h,w,c
  4598  0049BE  E1FA               	bnz	clear_1
  4599                           
  4600                           ; Clear objects allocated to BANK2 (128 bytes)
  4601  0049C0  EE02  F000         	lfsr	0,__pbssBANK2
  4602  0049C4  0E80               	movlw	128
  4603  0049C6                     clear_2:
  4604  0049C6  6AEE               	clrf	postinc0,c
  4605  0049C8  06E8               	decf	wreg,f,c
  4606  0049CA  E1FD               	bnz	clear_2
  4607                           
  4608                           ; Clear objects allocated to BANK1 (208 bytes)
  4609  0049CC  EE01  F000         	lfsr	0,__pbssBANK1
  4610  0049D0  0ED0               	movlw	208
  4611  0049D2                     clear_3:
  4612  0049D2  6AEE               	clrf	postinc0,c
  4613  0049D4  06E8               	decf	wreg,f,c
  4614  0049D6  E1FD               	bnz	clear_3
  4615                           
  4616                           ; Clear objects allocated to BANK0 (21 bytes)
  4617  0049D8  EE00  F0CB         	lfsr	0,__pbssBANK0
  4618  0049DC  0E15               	movlw	21
  4619  0049DE                     clear_4:
  4620  0049DE  6AEE               	clrf	postinc0,c
  4621  0049E0  06E8               	decf	wreg,f,c
  4622  0049E2  E1FD               	bnz	clear_4
  4623                           
  4624                           ; Clear objects allocated to COMRAM (21 bytes)
  4625  0049E4  EE00  F033         	lfsr	0,__pbssCOMRAM
  4626  0049E8  0E15               	movlw	21
  4627  0049EA                     clear_5:
  4628  0049EA  6AEE               	clrf	postinc0,c
  4629  0049EC  06E8               	decf	wreg,f,c
  4630  0049EE  E1FD               	bnz	clear_5
  4631  0049F0                     end_of_initialization:
  4632                           	opt stack 0
  4633  0049F0                     __end_of__initialization:
  4634                           	opt stack 0
  4635  0049F0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4636  0049F2  6EF8               	movwf	tblptru,c
  4637  0049F4  0100               	movlb	0
  4638  0049F6  EFF5  F017         	goto	_main	;jump to C main() function
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           indf0	equ	0xFEF
  4647                           postinc0	equ	0xFEE
  4648                           fsr0h	equ	0xFEA
  4649                           fsr0l	equ	0xFE9
  4650                           wreg	equ	0xFE8
  4651                           indf1	equ	0xFE7
  4652                           postinc1	equ	0xFE6
  4653                           postdec1	equ	0xFE5
  4654                           fsr1h	equ	0xFE2
  4655                           fsr1l	equ	0xFE1
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           plusw2	equ	0xFDB
  4660                           fsr2h	equ	0xFDA
  4661                           fsr2l	equ	0xFD9
  4662                           status	equ	0xFD8
  4663                           
  4664                           	psect	bssCOMRAM
  4665  000033                     __pbssCOMRAM:
  4666                           	opt stack 0
  4667  000033                     _made_table:
  4668                           	opt stack 0
  4669  000033                     	ds	2
  4670  000035                     _status_led_cnt:
  4671                           	opt stack 0
  4672  000035                     	ds	2
  4673  000037                     strtok@sp:
  4674                           	opt stack 0
  4675  000037                     	ds	2
  4676  000039                     _USART_Status:
  4677                           	opt stack 0
  4678  000039                     	ds	1
  4679  00003A                     __ECANRxFilterHitInfo:
  4680                           	opt stack 0
  4681  00003A                     	ds	1
  4682  00003B                     _bDLE:
  4683                           	opt stack 0
  4684  00003B                     	ds	1
  4685  00003C                     _ledFunctionality:
  4686                           	opt stack 0
  4687  00003C                     	ds	1
  4688  00003D                     _nTimeStamp:
  4689                           	opt stack 0
  4690  00003D                     	ds	1
  4691  00003E                     _sequencyno:
  4692                           	opt stack 0
  4693  00003E                     	ds	1
  4694  00003F                     _stateVscpDriver:
  4695                           	opt stack 0
  4696  00003F                     	ds	1
  4697  000040                     _vscpData:
  4698                           	opt stack 0
  4699  000040                     	ds	8
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           indf0	equ	0xFEF
  4708                           postinc0	equ	0xFEE
  4709                           fsr0h	equ	0xFEA
  4710                           fsr0l	equ	0xFE9
  4711                           wreg	equ	0xFE8
  4712                           indf1	equ	0xFE7
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           plusw2	equ	0xFDB
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725                           	psect	bssBANK0
  4726  0000CB                     __pbssBANK0:
  4727                           	opt stack 0
  4728  0000CB                     _timekeeper:
  4729                           	opt stack 0
  4730  0000CB                     	ds	4
  4731  0000CF                     _timer:
  4732                           	opt stack 0
  4733  0000CF                     	ds	4
  4734  0000D3                     _bHex:
  4735                           	opt stack 0
  4736  0000D3                     	ds	1
  4737  0000D4                     _bInitiated:
  4738                           	opt stack 0
  4739  0000D4                     	ds	1
  4740  0000D5                     _bOpen:
  4741                           	opt stack 0
  4742  0000D5                     	ds	1
  4743  0000D6                     _bSilent:
  4744                           	opt stack 0
  4745  0000D6                     	ds	1
  4746  0000D7                     _mode:
  4747                           	opt stack 0
  4748  0000D7                     	ds	1
  4749  0000D8                     _pos:
  4750                           	opt stack 0
  4751  0000D8                     	ds	1
  4752  0000D9                     _rwtimeout:
  4753                           	opt stack 0
  4754  0000D9                     	ds	1
  4755  0000DA                     _vscpClass:
  4756                           	opt stack 0
  4757  0000DA                     	ds	2
  4758  0000DC                     _vscpNodeId:
  4759                           	opt stack 0
  4760  0000DC                     	ds	1
  4761  0000DD                     _vscpPriority:
  4762                           	opt stack 0
  4763  0000DD                     	ds	1
  4764  0000DE                     _vscpSize:
  4765                           	opt stack 0
  4766  0000DE                     	ds	1
  4767  0000DF                     _vscpType:
  4768                           	opt stack 0
  4769  0000DF                     	ds	1
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           intcon	equ	0xFF2
  4777                           indf0	equ	0xFEF
  4778                           postinc0	equ	0xFEE
  4779                           fsr0h	equ	0xFEA
  4780                           fsr0l	equ	0xFE9
  4781                           wreg	equ	0xFE8
  4782                           indf1	equ	0xFE7
  4783                           postinc1	equ	0xFE6
  4784                           postdec1	equ	0xFE5
  4785                           fsr1h	equ	0xFE2
  4786                           fsr1l	equ	0xFE1
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           postdec2	equ	0xFDD
  4790                           plusw2	equ	0xFDB
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795                           	psect	bssBANK1
  4796  000100                     __pbssBANK1:
  4797                           	opt stack 0
  4798  000100                     _can_receiveOverruns:
  4799                           	opt stack 0
  4800  000100                     	ds	4
  4801  000104                     _can_transmitOverruns:
  4802                           	opt stack 0
  4803  000104                     	ds	4
  4804  000108                     _cntRxBytes:
  4805                           	opt stack 0
  4806  000108                     	ds	4
  4807  00010C                     _cntRxFrames:
  4808                           	opt stack 0
  4809  00010C                     	ds	4
  4810  000110                     _cntTxBytes:
  4811                           	opt stack 0
  4812  000110                     	ds	4
  4813  000114                     _cntTxFrames:
  4814                           	opt stack 0
  4815  000114                     	ds	4
  4816  000118                     _uart_receiveOverruns:
  4817                           	opt stack 0
  4818  000118                     	ds	4
  4819  00011C                     _uart_transmitOverruns:
  4820                           	opt stack 0
  4821  00011C                     	ds	4
  4822  000120                     _cmdbuf:
  4823                           	opt stack 0
  4824  000120                     	ds	80
  4825  000170                     _wrkbuf:
  4826                           	opt stack 0
  4827  000170                     	ds	80
  4828  0001C0                     _canInputFifo:
  4829                           	opt stack 0
  4830  0001C0                     	ds	8
  4831  0001C8                     _serialInputFifo:
  4832                           	opt stack 0
  4833  0001C8                     	ds	8
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           indf0	equ	0xFEF
  4842                           postinc0	equ	0xFEE
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           indf1	equ	0xFE7
  4847                           postinc1	equ	0xFE6
  4848                           postdec1	equ	0xFE5
  4849                           fsr1h	equ	0xFE2
  4850                           fsr1l	equ	0xFE1
  4851                           indf2	equ	0xFDF
  4852                           postinc2	equ	0xFDE
  4853                           postdec2	equ	0xFDD
  4854                           plusw2	equ	0xFDB
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859                           	psect	bssBANK2
  4860  000200                     __pbssBANK2:
  4861                           	opt stack 0
  4862  000200                     _inputBuffer:
  4863                           	opt stack 0
  4864  000200                     	ds	128
  4865                           tblptru	equ	0xFF8
  4866                           tblptrh	equ	0xFF7
  4867                           tblptrl	equ	0xFF6
  4868                           tablat	equ	0xFF5
  4869                           prodh	equ	0xFF4
  4870                           prodl	equ	0xFF3
  4871                           intcon	equ	0xFF2
  4872                           indf0	equ	0xFEF
  4873                           postinc0	equ	0xFEE
  4874                           fsr0h	equ	0xFEA
  4875                           fsr0l	equ	0xFE9
  4876                           wreg	equ	0xFE8
  4877                           indf1	equ	0xFE7
  4878                           postinc1	equ	0xFE6
  4879                           postdec1	equ	0xFE5
  4880                           fsr1h	equ	0xFE2
  4881                           fsr1l	equ	0xFE1
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           plusw2	equ	0xFDB
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890                           	psect	bssBANK3
  4891  000300                     __pbssBANK3:
  4892                           	opt stack 0
  4893  000300                     _crc8_table:
  4894                           	opt stack 0
  4895  000300                     	ds	256
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           indf0	equ	0xFEF
  4904                           postinc0	equ	0xFEE
  4905                           fsr0h	equ	0xFEA
  4906                           fsr0l	equ	0xFE9
  4907                           wreg	equ	0xFE8
  4908                           indf1	equ	0xFE7
  4909                           postinc1	equ	0xFE6
  4910                           postdec1	equ	0xFE5
  4911                           fsr1h	equ	0xFE2
  4912                           fsr1l	equ	0xFE1
  4913                           indf2	equ	0xFDF
  4914                           postinc2	equ	0xFDE
  4915                           postdec2	equ	0xFDD
  4916                           plusw2	equ	0xFDB
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921                           	psect	bssBIGRAM
  4922  000400                     __pbssBIGRAM:
  4923                           	opt stack 0
  4924  000400                     _caninputBuffer:
  4925                           	opt stack 0
  4926  000400                     	ds	494
  4927                           tblptru	equ	0xFF8
  4928                           tblptrh	equ	0xFF7
  4929                           tblptrl	equ	0xFF6
  4930                           tablat	equ	0xFF5
  4931                           prodh	equ	0xFF4
  4932                           prodl	equ	0xFF3
  4933                           intcon	equ	0xFF2
  4934                           indf0	equ	0xFEF
  4935                           postinc0	equ	0xFEE
  4936                           fsr0h	equ	0xFEA
  4937                           fsr0l	equ	0xFE9
  4938                           wreg	equ	0xFE8
  4939                           indf1	equ	0xFE7
  4940                           postinc1	equ	0xFE6
  4941                           postdec1	equ	0xFE5
  4942                           fsr1h	equ	0xFE2
  4943                           fsr1l	equ	0xFE1
  4944                           indf2	equ	0xFDF
  4945                           postinc2	equ	0xFDE
  4946                           postdec2	equ	0xFDD
  4947                           plusw2	equ	0xFDB
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952                           	psect	cstackBANK2
  4953  000280                     __pcstackBANK2:
  4954                           	opt stack 0
  4955  000280                     doModeVerbose@id:
  4956                           	opt stack 0
  4957                           
  4958                           ; 4 bytes @ 0x0
  4959  000280                     	ds	4
  4960  000284                     doModeVerbose@preg:
  4961                           	opt stack 0
  4962                           
  4963                           ; 2 bytes @ 0x4
  4964  000284                     	ds	2
  4965  000286                     doModeVerbose@preg_1176:
  4966                           	opt stack 0
  4967                           
  4968                           ; 2 bytes @ 0x6
  4969  000286                     	ds	2
  4970  000288                     doModeVerbose@filter_class:
  4971                           	opt stack 0
  4972                           
  4973                           ; 2 bytes @ 0x8
  4974  000288                     	ds	2
  4975  00028A                     doModeVerbose@mask_class:
  4976                           	opt stack 0
  4977                           
  4978                           ; 2 bytes @ 0xA
  4979  00028A                     	ds	2
  4980  00028C                     doModeVerbose@nodeid:
  4981                           	opt stack 0
  4982                           
  4983                           ; 1 bytes @ 0xC
  4984  00028C                     	ds	1
  4985  00028D                     doModeVerbose@nodeid_1168:
  4986                           	opt stack 0
  4987                           
  4988                           ; 1 bytes @ 0xD
  4989  00028D                     	ds	1
  4990  00028E                     doModeVerbose@filter_priority:
  4991                           	opt stack 0
  4992                           
  4993                           ; 1 bytes @ 0xE
  4994  00028E                     	ds	1
  4995  00028F                     doModeVerbose@filter_type:
  4996                           	opt stack 0
  4997                           
  4998                           ; 1 bytes @ 0xF
  4999  00028F                     	ds	1
  5000  000290                     doModeVerbose@filter_nodeid:
  5001                           	opt stack 0
  5002                           
  5003                           ; 1 bytes @ 0x10
  5004  000290                     	ds	1
  5005  000291                     doModeVerbose@mask_priority:
  5006                           	opt stack 0
  5007                           
  5008                           ; 1 bytes @ 0x11
  5009  000291                     	ds	1
  5010  000292                     doModeVerbose@mask_type:
  5011                           	opt stack 0
  5012                           
  5013                           ; 1 bytes @ 0x12
  5014  000292                     	ds	1
  5015  000293                     doModeVerbose@mask_nodeid:
  5016                           	opt stack 0
  5017                           
  5018                           ; 1 bytes @ 0x13
  5019  000293                     	ds	1
  5020  000294                     _doModeVerbose$1136:
  5021                           	opt stack 0
  5022                           
  5023                           ; 2 bytes @ 0x14
  5024  000294                     	ds	2
  5025  000296                     _doModeVerbose$1148:
  5026                           	opt stack 0
  5027                           
  5028                           ; 2 bytes @ 0x16
  5029  000296                     	ds	2
  5030  000298                     _doModeVerbose$1153:
  5031                           	opt stack 0
  5032                           
  5033                           ; 2 bytes @ 0x18
  5034  000298                     	ds	2
  5035  00029A                     _doModeVerbose$1159:
  5036                           	opt stack 0
  5037                           
  5038                           ; 2 bytes @ 0x1A
  5039  00029A                     	ds	2
  5040  00029C                     _doModeVerbose$1163:
  5041                           	opt stack 0
  5042                           
  5043                           ; 2 bytes @ 0x1C
  5044  00029C                     	ds	2
  5045  00029E                     _doModeVerbose$1188:
  5046                           	opt stack 0
  5047                           
  5048                           ; 2 bytes @ 0x1E
  5049  00029E                     	ds	2
  5050  0002A0                     doModeVerbose@rv:
  5051                           	opt stack 0
  5052                           
  5053                           ; 1 bytes @ 0x20
  5054  0002A0                     	ds	1
  5055  0002A1                     doModeVerbose@page_1169:
  5056                           	opt stack 0
  5057                           
  5058                           ; 1 bytes @ 0x21
  5059  0002A1                     	ds	1
  5060  0002A2                     doModeVerbose@reg_1170:
  5061                           	opt stack 0
  5062                           
  5063                           ; 1 bytes @ 0x22
  5064  0002A2                     	ds	1
  5065  0002A3                     doModeVerbose@id_1227:
  5066                           	opt stack 0
  5067                           
  5068                           ; 4 bytes @ 0x23
  5069  0002A3                     	ds	4
  5070  0002A7                     doModeVerbose@value_1171:
  5071                           	opt stack 0
  5072                           
  5073                           ; 1 bytes @ 0x27
  5074  0002A7                     	ds	1
  5075  0002A8                     doModeVerbose@filterno:
  5076                           	opt stack 0
  5077                           
  5078                           ; 1 bytes @ 0x28
  5079  0002A8                     	ds	1
  5080  0002A9                     doModeVerbose@maskno:
  5081                           	opt stack 0
  5082                           
  5083                           ; 1 bytes @ 0x29
  5084  0002A9                     	ds	1
  5085  0002AA                     doModeVerbose@i:
  5086                           	opt stack 0
  5087                           
  5088                           ; 1 bytes @ 0x2A
  5089  0002AA                     	ds	1
  5090  0002AB                     doModeVerbose@count:
  5091                           	opt stack 0
  5092                           
  5093                           ; 1 bytes @ 0x2B
  5094  0002AB                     	ds	1
  5095  0002AC                     doModeVerbose@c:
  5096                           	opt stack 0
  5097                           
  5098                           ; 1 bytes @ 0x2C
  5099  0002AC                     	ds	1
  5100  0002AD                     doModeVerbose@page:
  5101                           	opt stack 0
  5102                           
  5103                           ; 1 bytes @ 0x2D
  5104  0002AD                     	ds	1
  5105  0002AE                     doModeVerbose@reg:
  5106                           	opt stack 0
  5107                           
  5108                           ; 1 bytes @ 0x2E
  5109  0002AE                     	ds	1
  5110  0002AF                     doModeVerbose@nodeid_1183:
  5111                           	opt stack 0
  5112                           
  5113                           ; 1 bytes @ 0x2F
  5114  0002AF                     	ds	1
  5115  0002B0                     doModeVerbose@i_1118:
  5116                           	opt stack 0
  5117                           
  5118                           ; 1 bytes @ 0x30
  5119  0002B0                     	ds	1
  5120  0002B1                     doModeVerbose@value:
  5121                           	opt stack 0
  5122                           
  5123                           ; 1 bytes @ 0x31
  5124  0002B1                     	ds	1
  5125  0002B2                     doModeVerbose@p_1124:
  5126                           	opt stack 0
  5127                           
  5128                           ; 2 bytes @ 0x32
  5129  0002B2                     	ds	2
  5130  0002B4                     doModeVerbose@p_1172:
  5131                           	opt stack 0
  5132                           
  5133                           ; 2 bytes @ 0x34
  5134  0002B4                     	ds	2
  5135  0002B6                     doModeVerbose@ifmode:
  5136                           	opt stack 0
  5137                           
  5138                           ; 1 bytes @ 0x36
  5139  0002B6                     	ds	1
  5140  0002B7                     doModeVerbose@p:
  5141                           	opt stack 0
  5142                           
  5143                           ; 2 bytes @ 0x37
  5144  0002B7                     	ds	2
  5145  0002B9                     doModeVerbose@p_1196:
  5146                           	opt stack 0
  5147                           
  5148                           ; 2 bytes @ 0x39
  5149  0002B9                     	ds	2
  5150  0002BB                     doModeVerbose@p_1215:
  5151                           	opt stack 0
  5152                           
  5153                           ; 2 bytes @ 0x3B
  5154  0002BB                     	ds	2
  5155                           tblptru	equ	0xFF8
  5156                           tblptrh	equ	0xFF7
  5157                           tblptrl	equ	0xFF6
  5158                           tablat	equ	0xFF5
  5159                           prodh	equ	0xFF4
  5160                           prodl	equ	0xFF3
  5161                           intcon	equ	0xFF2
  5162                           indf0	equ	0xFEF
  5163                           postinc0	equ	0xFEE
  5164                           fsr0h	equ	0xFEA
  5165                           fsr0l	equ	0xFE9
  5166                           wreg	equ	0xFE8
  5167                           indf1	equ	0xFE7
  5168                           postinc1	equ	0xFE6
  5169                           postdec1	equ	0xFE5
  5170                           fsr1h	equ	0xFE2
  5171                           fsr1l	equ	0xFE1
  5172                           indf2	equ	0xFDF
  5173                           postinc2	equ	0xFDE
  5174                           postdec2	equ	0xFDD
  5175                           plusw2	equ	0xFDB
  5176                           fsr2h	equ	0xFDA
  5177                           fsr2l	equ	0xFD9
  5178                           status	equ	0xFD8
  5179                           
  5180                           	psect	cstackBANK0
  5181  000060                     __pcstackBANK0:
  5182                           	opt stack 0
  5183  000060                     ?_getVSCPFrame:
  5184                           	opt stack 0
  5185  000060                     ?_sprintf:
  5186                           	opt stack 0
  5187  000060                     ?_ultoa:
  5188                           	opt stack 0
  5189  000060                     getVSCPFrame@pvscptype:
  5190                           	opt stack 0
  5191  000060                     sprintf@sp:
  5192                           	opt stack 0
  5193  000060                     ultoa@buf:
  5194                           	opt stack 0
  5195  000060                     receivePrintEventCANAL@data:
  5196                           	opt stack 0
  5197  000060                     ECANSendMessage@pb:
  5198                           	opt stack 0
  5199  000060                     printFirmwareVersion@wrkbuf:
  5200                           	opt stack 0
  5201                           
  5202                           ; 20 bytes @ 0x0
  5203  000060                     	ds	1
  5204  000061                     getVSCPFrame@pNodeId:
  5205                           	opt stack 0
  5206                           
  5207                           ; 1 bytes @ 0x1
  5208  000061                     	ds	1
  5209  000062                     getVSCPFrame@pPriority:
  5210                           	opt stack 0
  5211  000062                     sprintf@f:
  5212                           	opt stack 0
  5213  000062                     ultoa@val:
  5214                           	opt stack 0
  5215                           
  5216                           ; 4 bytes @ 0x2
  5217  000062                     	ds	1
  5218  000063                     getVSCPFrame@pSize:
  5219                           	opt stack 0
  5220                           
  5221                           ; 1 bytes @ 0x3
  5222  000063                     	ds	1
  5223  000064                     getVSCPFrame@pData:
  5224                           	opt stack 0
  5225                           
  5226                           ; 1 bytes @ 0x4
  5227  000064                     	ds	1
  5228  000065                     ??_getVSCPFrame:
  5229                           
  5230                           ; 0 bytes @ 0x5
  5231  000065                     	ds	1
  5232  000066                     ultoa@base:
  5233                           	opt stack 0
  5234                           
  5235                           ; 2 bytes @ 0x6
  5236  000066                     	ds	2
  5237  000068                     receivePrintEventCANAL@i:
  5238                           	opt stack 0
  5239  000068                     sprintf@idx:
  5240                           	opt stack 0
  5241  000068                     ultoa@v:
  5242                           	opt stack 0
  5243                           
  5244                           ; 4 bytes @ 0x8
  5245  000068                     	ds	1
  5246  000069                     receivePrintEventCANAL@dlc:
  5247                           	opt stack 0
  5248  000069                     getVSCPFrame@pvscpclass:
  5249                           	opt stack 0
  5250  000069                     _sprintf$2141:
  5251                           	opt stack 0
  5252                           
  5253                           ; 2 bytes @ 0x9
  5254  000069                     	ds	1
  5255  00006A                     receivePrintEventCANAL@id:
  5256                           	opt stack 0
  5257  00006A                     getVSCPFrame@id:
  5258                           	opt stack 0
  5259                           
  5260                           ; 4 bytes @ 0xA
  5261  00006A                     	ds	1
  5262  00006B                     _sprintf$2142:
  5263                           	opt stack 0
  5264                           
  5265                           ; 2 bytes @ 0xB
  5266  00006B                     	ds	1
  5267  00006C                     ultoa@c:
  5268                           	opt stack 0
  5269                           
  5270                           ; 1 bytes @ 0xC
  5271  00006C                     	ds	1
  5272  00006D                     ??_receivePrintEventSLCAN:
  5273  00006D                     _sprintf$2148:
  5274                           	opt stack 0
  5275                           
  5276                           ; 2 bytes @ 0xD
  5277  00006D                     	ds	1
  5278  00006E                     receivePrintEventCANAL@crc:
  5279                           	opt stack 0
  5280                           
  5281                           ; 1 bytes @ 0xE
  5282  00006E                     	ds	1
  5283  00006F                     sprintf@ap:
  5284                           	opt stack 0
  5285                           
  5286                           ; 1 bytes @ 0xF
  5287  00006F                     	ds	1
  5288  000070                     receivePrintEventSLCAN@dlc:
  5289                           	opt stack 0
  5290  000070                     sprintf@prec:
  5291                           	opt stack 0
  5292                           
  5293                           ; 2 bytes @ 0x10
  5294  000070                     	ds	1
  5295  000071                     receivePrintEventSLCAN@id:
  5296                           	opt stack 0
  5297                           
  5298                           ; 4 bytes @ 0x11
  5299  000071                     	ds	1
  5300  000072                     ECANSendMessage@mode:
  5301                           	opt stack 0
  5302  000072                     sprintf@width:
  5303                           	opt stack 0
  5304                           
  5305                           ; 2 bytes @ 0x12
  5306  000072                     	ds	1
  5307  000073                     ECANSendMessage@buffers:
  5308                           	opt stack 0
  5309                           
  5310                           ; 1 bytes @ 0x13
  5311  000073                     	ds	1
  5312  000074                     ECANSendMessage@j:
  5313                           	opt stack 0
  5314  000074                     sprintf@_val:
  5315                           	opt stack 0
  5316                           
  5317                           ; 4 bytes @ 0x14
  5318  000074                     	ds	1
  5319  000075                     ECANSendMessage@tempBSEL0:
  5320                           	opt stack 0
  5321  000075                     receivePrintEventSLCAN@i:
  5322                           	opt stack 0
  5323                           
  5324                           ; 2 bytes @ 0x15
  5325  000075                     	ds	1
  5326  000076                     ECANSendMessage@tempPtr:
  5327                           	opt stack 0
  5328                           
  5329                           ; 2 bytes @ 0x16
  5330  000076                     	ds	2
  5331  000078                     ECANSendMessage@temp:
  5332                           	opt stack 0
  5333  000078                     sprintf@c:
  5334                           	opt stack 0
  5335                           
  5336                           ; 1 bytes @ 0x18
  5337  000078                     	ds	1
  5338  000079                     ECANSendMessage@i:
  5339                           	opt stack 0
  5340  000079                     sprintf@flag:
  5341                           	opt stack 0
  5342                           
  5343                           ; 2 bytes @ 0x19
  5344  000079                     	ds	1
  5345  00007A                     ECANSendMessage@ptr:
  5346                           	opt stack 0
  5347                           
  5348                           ; 2 bytes @ 0x1A
  5349  00007A                     	ds	1
  5350  00007B                     ??_receivePrintEventVerbose:
  5351  00007B                     _printStatistics$1362:
  5352                           	opt stack 0
  5353  00007B                     _printErrors$1387:
  5354                           	opt stack 0
  5355                           
  5356                           ; 2 bytes @ 0x1B
  5357  00007B                     	ds	1
  5358  00007C                     ?_sendCANFrame:
  5359                           	opt stack 0
  5360  00007C                     sendCANFrame@id:
  5361                           	opt stack 0
  5362                           
  5363                           ; 4 bytes @ 0x1C
  5364  00007C                     	ds	1
  5365  00007D                     _printStatistics$1368:
  5366                           	opt stack 0
  5367  00007D                     _printErrors$1393:
  5368                           	opt stack 0
  5369                           
  5370                           ; 2 bytes @ 0x1D
  5371  00007D                     	ds	2
  5372  00007F                     _printStatistics$1374:
  5373                           	opt stack 0
  5374  00007F                     _printErrors$1399:
  5375                           	opt stack 0
  5376                           
  5377                           ; 2 bytes @ 0x1F
  5378  00007F                     	ds	1
  5379  000080                     sendCANFrame@dlc:
  5380                           	opt stack 0
  5381  000080                     _receivePrintEventVerbose$1280:
  5382                           	opt stack 0
  5383                           
  5384                           ; 2 bytes @ 0x20
  5385  000080                     	ds	1
  5386  000081                     _printStatistics$1380:
  5387                           	opt stack 0
  5388  000081                     _printErrors$1405:
  5389                           	opt stack 0
  5390  000081                     sendCANFrame@pdata:
  5391                           	opt stack 0
  5392                           
  5393                           ; 2 bytes @ 0x21
  5394  000081                     	ds	1
  5395  000082                     _receivePrintEventVerbose$1285:
  5396                           	opt stack 0
  5397                           
  5398                           ; 2 bytes @ 0x22
  5399  000082                     	ds	1
  5400  000083                     ??_doModeSLCAN:
  5401  000083                     ??_receiveVSCPModeCanalMsg:
  5402  000083                     ?_sendVSCPFrame:
  5403                           	opt stack 0
  5404  000083                     _printErrors$1411:
  5405                           	opt stack 0
  5406  000083                     sendVSCPFrame@vscpclass:
  5407                           	opt stack 0
  5408                           
  5409                           ; 2 bytes @ 0x23
  5410  000083                     	ds	1
  5411  000084                     _receivePrintEventVerbose$1290:
  5412                           	opt stack 0
  5413                           
  5414                           ; 2 bytes @ 0x24
  5415  000084                     	ds	1
  5416  000085                     sendVSCPFrame@vscptype:
  5417                           	opt stack 0
  5418  000085                     _printErrors$1420:
  5419                           	opt stack 0
  5420                           
  5421                           ; 2 bytes @ 0x25
  5422  000085                     	ds	1
  5423  000086                     sendVSCPFrame@nodeid:
  5424                           	opt stack 0
  5425  000086                     _receivePrintEventVerbose$1295:
  5426                           	opt stack 0
  5427                           
  5428                           ; 2 bytes @ 0x26
  5429  000086                     	ds	1
  5430  000087                     sendVSCPFrame@priority:
  5431                           	opt stack 0
  5432                           
  5433                           ; 1 bytes @ 0x27
  5434  000087                     	ds	1
  5435  000088                     sendVSCPFrame@size:
  5436                           	opt stack 0
  5437  000088                     _receivePrintEventVerbose$1300:
  5438                           	opt stack 0
  5439                           
  5440                           ; 2 bytes @ 0x28
  5441  000088                     	ds	1
  5442  000089                     sendVSCPFrame@pData:
  5443                           	opt stack 0
  5444                           
  5445                           ; 1 bytes @ 0x29
  5446  000089                     	ds	1
  5447  00008A                     ??_sendVSCPFrame:
  5448  00008A                     _receivePrintEventVerbose$1305:
  5449                           	opt stack 0
  5450  00008A                     doModeSLCAN@id:
  5451                           	opt stack 0
  5452                           
  5453                           ; 4 bytes @ 0x2A
  5454  00008A                     	ds	2
  5455  00008C                     receivePrintEventVerbose@i:
  5456                           	opt stack 0
  5457                           
  5458                           ; 1 bytes @ 0x2C
  5459  00008C                     	ds	2
  5460  00008E                     doModeSLCAN@dlc:
  5461                           	opt stack 0
  5462                           
  5463                           ; 1 bytes @ 0x2E
  5464  00008E                     	ds	1
  5465  00008F                     doModeSLCAN@c:
  5466                           	opt stack 0
  5467                           
  5468                           ; 1 bytes @ 0x2F
  5469  00008F                     	ds	1
  5470  000090                     doModeSLCAN@rv:
  5471                           	opt stack 0
  5472                           
  5473                           ; 1 bytes @ 0x30
  5474  000090                     	ds	7
  5475  000097                     receiveVSCPModeCanalMsg@data:
  5476                           	opt stack 0
  5477                           
  5478                           ; 8 bytes @ 0x37
  5479  000097                     	ds	7
  5480  00009E                     ?_readRegisterExtended:
  5481                           	opt stack 0
  5482  00009E                     ?_writeRegisterExtended:
  5483                           	opt stack 0
  5484  00009E                     ?_readRegister:
  5485                           	opt stack 0
  5486  00009E                     readRegister@reg:
  5487                           	opt stack 0
  5488  00009E                     readRegisterExtended@page:
  5489                           	opt stack 0
  5490  00009E                     writeRegisterExtended@page:
  5491                           	opt stack 0
  5492                           
  5493                           ; 2 bytes @ 0x3E
  5494  00009E                     	ds	1
  5495  00009F                     readRegister@timeout:
  5496                           	opt stack 0
  5497  00009F                     receiveVSCPModeCanalMsg@id:
  5498                           	opt stack 0
  5499                           
  5500                           ; 4 bytes @ 0x3F
  5501  00009F                     	ds	1
  5502  0000A0                     readRegisterExtended@reg:
  5503                           	opt stack 0
  5504  0000A0                     writeRegisterExtended@reg:
  5505                           	opt stack 0
  5506                           
  5507                           ; 1 bytes @ 0x40
  5508  0000A0                     	ds	1
  5509  0000A1                     readRegister@value:
  5510                           	opt stack 0
  5511  0000A1                     readRegisterExtended@timeout:
  5512                           	opt stack 0
  5513  0000A1                     writeRegisterExtended@timeout:
  5514                           	opt stack 0
  5515                           
  5516                           ; 2 bytes @ 0x41
  5517  0000A1                     	ds	1
  5518  0000A2                     ??_readRegister:
  5519                           
  5520                           ; 0 bytes @ 0x42
  5521  0000A2                     	ds	1
  5522  0000A3                     receiveVSCPModeCanalMsg@dlc:
  5523                           	opt stack 0
  5524  0000A3                     readRegisterExtended@value:
  5525                           	opt stack 0
  5526  0000A3                     writeRegisterExtended@value:
  5527                           	opt stack 0
  5528                           
  5529                           ; 2 bytes @ 0x43
  5530  0000A3                     	ds	2
  5531  0000A5                     ??_readRegisterExtended:
  5532  0000A5                     ??_writeRegisterExtended:
  5533                           
  5534                           ; 0 bytes @ 0x45
  5535  0000A5                     	ds	1
  5536  0000A6                     printGUID@nodeid:
  5537                           	opt stack 0
  5538  0000A6                     printMDF@nodeid:
  5539                           	opt stack 0
  5540  0000A6                     printNodeFirmwareVersion@nodeid:
  5541                           	opt stack 0
  5542                           
  5543                           ; 1 bytes @ 0x46
  5544  0000A6                     	ds	1
  5545  0000A7                     printMDF@value:
  5546                           	opt stack 0
  5547  0000A7                     printGUID@buf:
  5548                           	opt stack 0
  5549  0000A7                     printNodeFirmwareVersion@buf:
  5550                           	opt stack 0
  5551                           
  5552                           ; 3 bytes @ 0x47
  5553  0000A7                     	ds	1
  5554  0000A8                     printMDF@p:
  5555                           	opt stack 0
  5556                           
  5557                           ; 2 bytes @ 0x48
  5558  0000A8                     	ds	2
  5559  0000AA                     printGUID@value:
  5560                           	opt stack 0
  5561  0000AA                     printMDF@i:
  5562                           	opt stack 0
  5563  0000AA                     printNodeFirmwareVersion@value:
  5564                           	opt stack 0
  5565                           
  5566                           ; 1 bytes @ 0x4A
  5567  0000AA                     	ds	1
  5568  0000AB                     printGUID@i:
  5569                           	opt stack 0
  5570  0000AB                     printNodeFirmwareVersion@i:
  5571                           	opt stack 0
  5572                           
  5573                           ; 1 bytes @ 0x4B
  5574  0000AB                     	ds	1
  5575  0000AC                     _findNodes$1464:
  5576                           	opt stack 0
  5577                           
  5578                           ; 2 bytes @ 0x4C
  5579  0000AC                     	ds	2
  5580  0000AE                     findNodes@nFound:
  5581                           	opt stack 0
  5582                           
  5583                           ; 1 bytes @ 0x4E
  5584  0000AE                     	ds	1
  5585  0000AF                     findNodes@value:
  5586                           	opt stack 0
  5587                           
  5588                           ; 1 bytes @ 0x4F
  5589  0000AF                     	ds	1
  5590  0000B0                     findNodes@i:
  5591                           	opt stack 0
  5592                           
  5593                           ; 1 bytes @ 0x50
  5594  0000B0                     	ds	1
  5595  0000B1                     ??_doModeVerbose:
  5596                           
  5597                           ; 0 bytes @ 0x51
  5598  0000B1                     	ds	20
  5599  0000C5                     
  5600                           ; 2 bytes @ 0x65
  5601  0000C5                     	ds	2
  5602  0000C7                     
  5603                           ; 3 bytes @ 0x67
  5604  0000C7                     	ds	3
  5605  0000CA                     main@c:
  5606                           	opt stack 0
  5607                           
  5608                           ; 1 bytes @ 0x6A
  5609  0000CA                     	ds	1
  5610                           tblptru	equ	0xFF8
  5611                           tblptrh	equ	0xFF7
  5612                           tblptrl	equ	0xFF6
  5613                           tablat	equ	0xFF5
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           intcon	equ	0xFF2
  5617                           indf0	equ	0xFEF
  5618                           postinc0	equ	0xFEE
  5619                           fsr0h	equ	0xFEA
  5620                           fsr0l	equ	0xFE9
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           postinc1	equ	0xFE6
  5624                           postdec1	equ	0xFE5
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           postdec2	equ	0xFDD
  5630                           plusw2	equ	0xFDB
  5631                           fsr2h	equ	0xFDA
  5632                           fsr2l	equ	0xFD9
  5633                           status	equ	0xFD8
  5634                           
  5635                           	psect	cstackCOMRAM
  5636  000001                     __pcstackCOMRAM:
  5637                           	opt stack 0
  5638  000001                     ?i1_WriteTimer0:
  5639                           	opt stack 0
  5640  000001                     ?_fifo_write:
  5641                           	opt stack 0
  5642  000001                     ReadUSART@data:
  5643                           	opt stack 0
  5644  000001                     fifo_write@f:
  5645                           	opt stack 0
  5646  000001                     i1WriteTimer0@timer0:
  5647                           	opt stack 0
  5648                           
  5649                           ; 2 bytes @ 0x0
  5650  000001                     	ds	2
  5651  000003                     fifo_write@buf:
  5652                           	opt stack 0
  5653  000003                     i1WriteTimer0@timer:
  5654                           	opt stack 0
  5655                           
  5656                           ; 2 bytes @ 0x2
  5657  000003                     	ds	1
  5658  000004                     fifo_write@nbytes:
  5659                           	opt stack 0
  5660                           
  5661                           ; 4 bytes @ 0x3
  5662  000004                     	ds	4
  5663  000008                     ??_fifo_write:
  5664                           
  5665                           ; 0 bytes @ 0x7
  5666  000008                     	ds	4
  5667  00000C                     fifo_write@p:
  5668                           	opt stack 0
  5669                           
  5670                           ; 1 bytes @ 0xB
  5671  00000C                     	ds	1
  5672  00000D                     fifo_write@i:
  5673                           	opt stack 0
  5674                           
  5675                           ; 4 bytes @ 0xC
  5676  00000D                     	ds	4
  5677  000011                     ??_Interrupt:
  5678                           
  5679                           ; 0 bytes @ 0x10
  5680  000011                     	ds	7
  5681  000018                     Interrupt@c:
  5682                           	opt stack 0
  5683                           
  5684                           ; 1 bytes @ 0x17
  5685  000018                     	ds	1
  5686  000019                     ?_fifo_init:
  5687                           	opt stack 0
  5688  000019                     ?_WriteTimer0:
  5689                           	opt stack 0
  5690  000019                     ?_OpenUSART:
  5691                           	opt stack 0
  5692  000019                     ?_writeEEPROM:
  5693                           	opt stack 0
  5694  000019                     ?_setFilter:
  5695                           	opt stack 0
  5696  000019                     ?__CANIDToRegs:
  5697                           	opt stack 0
  5698  000019                     ?__RegsToCANID:
  5699                           	opt stack 0
  5700  000019                     ??_isdigit:
  5701  000019                     ?_readEEPROM:
  5702                           	opt stack 0
  5703  000019                     ?_fifo_read:
  5704                           	opt stack 0
  5705  000019                     ?_memset:
  5706                           	opt stack 0
  5707  000019                     ?_strcpy:
  5708                           	opt stack 0
  5709  000019                     ?_strchr:
  5710                           	opt stack 0
  5711  000019                     ?_strlen:
  5712                           	opt stack 0
  5713  000019                     ?_memcpy:
  5714                           	opt stack 0
  5715  000019                     ?_strcat:
  5716                           	opt stack 0
  5717  000019                     ?__ECANPointBuffer:
  5718                           	opt stack 0
  5719  000019                     ?___lwdiv:
  5720                           	opt stack 0
  5721  000019                     ?___lwmod:
  5722                           	opt stack 0
  5723  000019                     ?___wmul:
  5724                           	opt stack 0
  5725  000019                     ?___lldiv:
  5726                           	opt stack 0
  5727  000019                     ECANSetOperationMode@mode:
  5728                           	opt stack 0
  5729  000019                     nibbleFromChar@c:
  5730                           	opt stack 0
  5731  000019                     OpenTimer0@config:
  5732                           	opt stack 0
  5733  000019                     WriteUSART@data:
  5734                           	opt stack 0
  5735  000019                     toupper@c:
  5736                           	opt stack 0
  5737  000019                     __CANIDToRegs@ptr:
  5738                           	opt stack 0
  5739  000019                     __RegsToCANID@ptr:
  5740                           	opt stack 0
  5741  000019                     fifo_init@f:
  5742                           	opt stack 0
  5743  000019                     fifo_read@f:
  5744                           	opt stack 0
  5745  000019                     writeEEPROM@address:
  5746                           	opt stack 0
  5747  000019                     readEEPROM@address:
  5748                           	opt stack 0
  5749  000019                     _init_crc8$2079:
  5750                           	opt stack 0
  5751  000019                     WriteTimer0@timer0:
  5752                           	opt stack 0
  5753  000019                     OpenUSART@spbrg:
  5754                           	opt stack 0
  5755  000019                     ___lwdiv@dividend:
  5756                           	opt stack 0
  5757  000019                     ___lwmod@dividend:
  5758                           	opt stack 0
  5759  000019                     memcpy@d1:
  5760                           	opt stack 0
  5761  000019                     memset@p1:
  5762                           	opt stack 0
  5763  000019                     strcat@to:
  5764                           	opt stack 0
  5765  000019                     strchr@ptr:
  5766                           	opt stack 0
  5767  000019                     strcpy@to:
  5768                           	opt stack 0
  5769  000019                     strlen@s:
  5770                           	opt stack 0
  5771  000019                     ___wmul@multiplier:
  5772                           	opt stack 0
  5773  000019                     setFilter@val:
  5774                           	opt stack 0
  5775  000019                     ___lldiv@dividend:
  5776                           	opt stack 0
  5777                           
  5778                           ; 4 bytes @ 0x18
  5779  000019                     	ds	1
  5780  00001A                     ?_putsUSART:
  5781                           	opt stack 0
  5782  00001A                     ??_printBinary:
  5783  00001A                     ?_strichr:
  5784                           	opt stack 0
  5785  00001A                     _isdigit$2892:
  5786                           	opt stack 0
  5787  00001A                     putsUSART@data:
  5788                           	opt stack 0
  5789  00001A                     strichr@ptr:
  5790                           	opt stack 0
  5791                           
  5792                           ; 2 bytes @ 0x19
  5793  00001A                     	ds	1
  5794  00001B                     __RegsToCANID@val:
  5795                           	opt stack 0
  5796  00001B                     writeEEPROM@data:
  5797                           	opt stack 0
  5798  00001B                     readEEPROM@data:
  5799                           	opt stack 0
  5800  00001B                     OpenUSART@config:
  5801                           	opt stack 0
  5802  00001B                     isdigit@c:
  5803                           	opt stack 0
  5804  00001B                     fifo_init@buf:
  5805                           	opt stack 0
  5806  00001B                     fifo_read@buf:
  5807                           	opt stack 0
  5808  00001B                     init_crc8@j:
  5809                           	opt stack 0
  5810  00001B                     WriteTimer0@timer:
  5811                           	opt stack 0
  5812  00001B                     ___lwdiv@divisor:
  5813                           	opt stack 0
  5814  00001B                     ___lwmod@divisor:
  5815                           	opt stack 0
  5816  00001B                     memcpy@s1:
  5817                           	opt stack 0
  5818  00001B                     memset@c:
  5819                           	opt stack 0
  5820  00001B                     strcat@from:
  5821                           	opt stack 0
  5822  00001B                     strchr@chr:
  5823                           	opt stack 0
  5824  00001B                     strcpy@from:
  5825                           	opt stack 0
  5826  00001B                     strlen@cp:
  5827                           	opt stack 0
  5828  00001B                     ___wmul@multiplicand:
  5829                           	opt stack 0
  5830  00001B                     __CANIDToRegs@val:
  5831                           	opt stack 0
  5832                           
  5833                           ; 4 bytes @ 0x1A
  5834  00001B                     	ds	1
  5835  00001C                     ??_putsUSART:
  5836  00001C                     init_app_eeprom@i:
  5837                           	opt stack 0
  5838  00001C                     printBinary@value:
  5839                           	opt stack 0
  5840  00001C                     __RegsToCANID@type:
  5841                           	opt stack 0
  5842  00001C                     __ECANPointBuffer@b:
  5843                           	opt stack 0
  5844  00001C                     strichr@chr:
  5845                           	opt stack 0
  5846                           
  5847                           ; 2 bytes @ 0x1B
  5848  00001C                     	ds	1
  5849  00001D                     ??_strchr:
  5850  00001D                     ??_setFilter:
  5851  00001D                     ??__RegsToCANID:
  5852  00001D                     ?_hexStringToBytes:
  5853                           	opt stack 0
  5854  00001D                     ?_strnicmp:
  5855                           	opt stack 0
  5856  00001D                     init_crc8@crc:
  5857                           	opt stack 0
  5858  00001D                     ___lwdiv@counter:
  5859                           	opt stack 0
  5860  00001D                     ___lwmod@counter:
  5861                           	opt stack 0
  5862  00001D                     printBinary@i:
  5863                           	opt stack 0
  5864  00001D                     __ECANPointBuffer@pt:
  5865                           	opt stack 0
  5866  00001D                     fifo_init@size:
  5867                           	opt stack 0
  5868  00001D                     fifo_read@nbytes:
  5869                           	opt stack 0
  5870  00001D                     hexStringToBytes@buf:
  5871                           	opt stack 0
  5872  00001D                     memcpy@n:
  5873                           	opt stack 0
  5874  00001D                     memset@n:
  5875                           	opt stack 0
  5876  00001D                     strcat@cp:
  5877                           	opt stack 0
  5878  00001D                     strcpy@cp:
  5879                           	opt stack 0
  5880  00001D                     strnicmp@s1:
  5881                           	opt stack 0
  5882  00001D                     ___wmul@product:
  5883                           	opt stack 0
  5884  00001D                     ___lldiv@divisor:
  5885                           	opt stack 0
  5886                           
  5887                           ; 4 bytes @ 0x1C
  5888  00001D                     	ds	1
  5889  00001E                     init_crc8@i:
  5890                           	opt stack 0
  5891  00001E                     ___lwdiv@quotient:
  5892                           	opt stack 0
  5893                           
  5894                           ; 2 bytes @ 0x1D
  5895  00001E                     	ds	1
  5896  00001F                     ??_fifo_read:
  5897  00001F                     ?_atoi:
  5898                           	opt stack 0
  5899  00001F                     ?_strspn:
  5900                           	opt stack 0
  5901  00001F                     ?_strcspn:
  5902                           	opt stack 0
  5903  00001F                     __CANIDToRegs@type:
  5904                           	opt stack 0
  5905  00001F                     __RegsToCANID@Value:
  5906                           	opt stack 0
  5907  00001F                     hexStringToBytes@size:
  5908                           	opt stack 0
  5909  00001F                     atoi@s:
  5910                           	opt stack 0
  5911  00001F                     memcpy@d:
  5912                           	opt stack 0
  5913  00001F                     memset@p:
  5914                           	opt stack 0
  5915  00001F                     strnicmp@s2:
  5916                           	opt stack 0
  5917  00001F                     strcspn@s1:
  5918                           	opt stack 0
  5919  00001F                     strspn@s1:
  5920                           	opt stack 0
  5921                           
  5922                           ; 2 bytes @ 0x1E
  5923  00001F                     	ds	1
  5924  000020                     ??__CANIDToRegs:
  5925  000020                     ?_crc8:
  5926                           	opt stack 0
  5927  000020                     ?_ECANReceiveMessage:
  5928                           	opt stack 0
  5929  000020                     ?_utoa:
  5930                           	opt stack 0
  5931  000020                     ECANReceiveMessage@data:
  5932                           	opt stack 0
  5933  000020                     crc8@crc:
  5934                           	opt stack 0
  5935  000020                     hexStringToBytes@inhex:
  5936                           	opt stack 0
  5937  000020                     utoa@buf:
  5938                           	opt stack 0
  5939                           
  5940                           ; 2 bytes @ 0x1F
  5941  000020                     	ds	1
  5942  000021                     ??_atoi:
  5943  000021                     ___lldiv@counter:
  5944                           	opt stack 0
  5945  000021                     memcpy@s:
  5946                           	opt stack 0
  5947  000021                     strnicmp@len:
  5948                           	opt stack 0
  5949  000021                     strcspn@s2:
  5950                           	opt stack 0
  5951  000021                     strspn@s2:
  5952                           	opt stack 0
  5953                           
  5954                           ; 2 bytes @ 0x20
  5955  000021                     	ds	1
  5956  000022                     ??_hexStringToBytes:
  5957  000022                     ECANReceiveMessage@dataLen:
  5958                           	opt stack 0
  5959  000022                     __CANIDToRegs@Value:
  5960                           	opt stack 0
  5961  000022                     crc8@m:
  5962                           	opt stack 0
  5963  000022                     utoa@val:
  5964                           	opt stack 0
  5965  000022                     ___lldiv@quotient:
  5966                           	opt stack 0
  5967                           
  5968                           ; 4 bytes @ 0x21
  5969  000022                     	ds	1
  5970  000023                     ??_crc8:
  5971  000023                     ??_strnicmp:
  5972  000023                     ?_ECANSendMessage:
  5973                           	opt stack 0
  5974  000023                     setFilter@filter:
  5975                           	opt stack 0
  5976  000023                     ECANReceiveMessage@msgFlags:
  5977                           	opt stack 0
  5978  000023                     atoi@sign:
  5979                           	opt stack 0
  5980  000023                     fifo_read@p:
  5981                           	opt stack 0
  5982  000023                     strcspn@i:
  5983                           	opt stack 0
  5984  000023                     strspn@i:
  5985                           	opt stack 0
  5986  000023                     ECANSendMessage@id:
  5987                           	opt stack 0
  5988                           
  5989                           ; 4 bytes @ 0x22
  5990  000023                     	ds	1
  5991  000024                     setFilter@sidh:
  5992                           	opt stack 0
  5993  000024                     ECANReceiveMessage@id:
  5994                           	opt stack 0
  5995  000024                     atoi@a:
  5996                           	opt stack 0
  5997  000024                     utoa@base:
  5998                           	opt stack 0
  5999                           
  6000                           ; 2 bytes @ 0x23
  6001  000024                     	ds	1
  6002  000025                     ?_sendEscapedUartData:
  6003                           	opt stack 0
  6004  000025                     ?_calcCRC:
  6005                           	opt stack 0
  6006  000025                     ?_strtok:
  6007                           	opt stack 0
  6008  000025                     setFilter@sidl:
  6009                           	opt stack 0
  6010  000025                     strnicmp@r:
  6011                           	opt stack 0
  6012  000025                     sendEscapedUartData@pcrc:
  6013                           	opt stack 0
  6014  000025                     calcCRC@p:
  6015                           	opt stack 0
  6016  000025                     ECANReceiveMessage@savedPtr:
  6017                           	opt stack 0
  6018  000025                     fifo_read@i:
  6019                           	opt stack 0
  6020  000025                     hexStringToBytes@len:
  6021                           	opt stack 0
  6022  000025                     strtok@s1:
  6023                           	opt stack 0
  6024                           
  6025                           ; 2 bytes @ 0x24
  6026  000025                     	ds	1
  6027  000026                     ?_stristr:
  6028                           	opt stack 0
  6029  000026                     ?___llmod:
  6030                           	opt stack 0
  6031  000026                     setFilter@eidh:
  6032                           	opt stack 0
  6033  000026                     utoa@v:
  6034                           	opt stack 0
  6035  000026                     stristr@s1:
  6036                           	opt stack 0
  6037  000026                     ___llmod@dividend:
  6038                           	opt stack 0
  6039                           
  6040                           ; 4 bytes @ 0x25
  6041  000026                     	ds	1
  6042  000027                     sendEscapedUartData@c:
  6043                           	opt stack 0
  6044  000027                     calcCRC@len:
  6045                           	opt stack 0
  6046  000027                     setFilter@eidl:
  6047                           	opt stack 0
  6048  000027                     ECANReceiveMessage@i:
  6049                           	opt stack 0
  6050  000027                     ECANSendMessage@data:
  6051                           	opt stack 0
  6052  000027                     hexStringToBytes@p:
  6053                           	opt stack 0
  6054  000027                     strtok@s2:
  6055                           	opt stack 0
  6056                           
  6057                           ; 2 bytes @ 0x26
  6058  000027                     	ds	1
  6059  000028                     ?_sendVSCPDriverCommandReply:
  6060                           	opt stack 0
  6061  000028                     sendVSCPDriverErrorFrame@errorcode:
  6062                           	opt stack 0
  6063  000028                     sendVSCPDriverAck@crc:
  6064                           	opt stack 0
  6065  000028                     sendVSCPDriverNack@crc:
  6066                           	opt stack 0
  6067  000028                     sendVSCPDriverCommandReply@cmdCode:
  6068                           	opt stack 0
  6069  000028                     calcCRC@j:
  6070                           	opt stack 0
  6071  000028                     ECANReceiveMessage@mode:
  6072                           	opt stack 0
  6073  000028                     utoa@c:
  6074                           	opt stack 0
  6075  000028                     stristr@s2:
  6076                           	opt stack 0
  6077                           
  6078                           ; 2 bytes @ 0x27
  6079  000028                     	ds	1
  6080  000029                     ?_itoa:
  6081                           	opt stack 0
  6082  000029                     sendVSCPDriverErrorFrame@crc:
  6083                           	opt stack 0
  6084  000029                     sendVSCPDriverCommandReply@cmdReplyCode:
  6085                           	opt stack 0
  6086  000029                     calcCRC@crc:
  6087                           	opt stack 0
  6088  000029                     ECANSendMessage@dataLen:
  6089                           	opt stack 0
  6090  000029                     ECANReceiveMessage@temp:
  6091                           	opt stack 0
  6092  000029                     hexStringToBytes@i:
  6093                           	opt stack 0
  6094  000029                     itoa@buf:
  6095                           	opt stack 0
  6096                           
  6097                           ; 2 bytes @ 0x28
  6098  000029                     	ds	1
  6099  00002A                     sendVSCPDriverCommandReply@crc:
  6100                           	opt stack 0
  6101  00002A                     ECANSendMessage@msgFlags:
  6102                           	opt stack 0
  6103  00002A                     ECANReceiveMessage@ptr:
  6104                           	opt stack 0
  6105  00002A                     ___llmod@divisor:
  6106                           	opt stack 0
  6107                           
  6108                           ; 4 bytes @ 0x29
  6109  00002A                     	ds	1
  6110  00002B                     ??_ECANSendMessage:
  6111  00002B                     itoa@val:
  6112                           	opt stack 0
  6113                           
  6114                           ; 2 bytes @ 0x2A
  6115  00002B                     	ds	1
  6116  00002C                     ?_getCANFrame:
  6117                           	opt stack 0
  6118  00002C                     getCANFrame@pdlc:
  6119                           	opt stack 0
  6120  00002C                     sendVSCPFrame@id:
  6121                           	opt stack 0
  6122                           
  6123                           ; 4 bytes @ 0x2B
  6124  00002C                     	ds	1
  6125  00002D                     getCANFrame@pdata:
  6126                           	opt stack 0
  6127  00002D                     itoa@base:
  6128                           	opt stack 0
  6129                           
  6130                           ; 2 bytes @ 0x2C
  6131  00002D                     	ds	1
  6132  00002E                     ___llmod@counter:
  6133                           	opt stack 0
  6134                           
  6135                           ; 1 bytes @ 0x2D
  6136  00002E                     	ds	1
  6137  00002F                     ??_sprintf:
  6138  00002F                     getCANFrame@pid:
  6139                           	opt stack 0
  6140                           
  6141                           ; 1 bytes @ 0x2E
  6142  00002F                     	ds	1
  6143  000030                     getCANFrame@flags:
  6144                           	opt stack 0
  6145                           
  6146                           ; 1 bytes @ 0x2F
  6147  000030                     	ds	1
  6148  000031                     doModeVscp@c:
  6149                           	opt stack 0
  6150  000031                     readRegister@nodeid:
  6151                           	opt stack 0
  6152  000031                     readRegisterExtended@nodeid:
  6153                           	opt stack 0
  6154  000031                     writeRegisterExtended@nodeid:
  6155                           	opt stack 0
  6156                           
  6157                           ; 1 bytes @ 0x30
  6158  000031                     	ds	1
  6159  000032                     ??_main:
  6160                           
  6161                           ; 0 bytes @ 0x31
  6162  000032                     	ds	1
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           indf0	equ	0xFEF
  6171                           postinc0	equ	0xFEE
  6172                           fsr0h	equ	0xFEA
  6173                           fsr0l	equ	0xFE9
  6174                           wreg	equ	0xFE8
  6175                           indf1	equ	0xFE7
  6176                           postinc1	equ	0xFE6
  6177                           postdec1	equ	0xFE5
  6178                           fsr1h	equ	0xFE2
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;;
  6189 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6190 ;;
  6191 ;; *************** function _main *****************
  6192 ;; Defined at:
  6193 ;;		line 129 in file "main.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  argc            2  101[BANK0 ] int 
  6196 ;;  argv            3  103[BANK0 ] PTR PTR unsigned char 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  c               1  106[BANK0 ] unsigned char 
  6199 ;; Return value:  Size  Location     Type
  6200 ;;                  2  101[BANK0 ] int 
  6201 ;; Registers used:
  6202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6203 ;; Tracked objects:
  6204 ;;		On entry : 0/0
  6205 ;;		On exit  : F/0
  6206 ;;		Unchanged: 0/0
  6207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6208 ;;      Params:         0       5       0       0       0       0       0
  6209 ;;      Locals:         0       1       0       0       0       0       0
  6210 ;;      Temps:          1       0       0       0       0       0       0
  6211 ;;      Totals:         1       6       0       0       0       0       0
  6212 ;;Total ram usage:        7 bytes
  6213 ;; Hardware stack levels required when called:   10
  6214 ;; This function calls:
  6215 ;;		_fifo_init
  6216 ;;		_init_crc8
  6217 ;;		_readEEPROM
  6218 ;;		_vscp_restoreDefaults
  6219 ;;		_init
  6220 ;;		_putsUSART
  6221 ;;		_printFirmwareVersion
  6222 ;;		_printMode
  6223 ;;		_fifo_read
  6224 ;;		_doModeVerbose
  6225 ;;		_doModeVscp
  6226 ;;		_doModeSLCAN
  6227 ;;		_doModeVscpNode
  6228 ;; This function is called by:
  6229 ;;		Startup code after reset
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text0
  6234  002FEA                     __ptext0:
  6235                           	opt stack 0
  6236  002FEA                     _main:
  6237                           	opt stack 21
  6238                           
  6239                           ;main.c: 131: fifo_init(&serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6240                           
  6241                           ;incstack = 0
  6242                           ;incstack = 0
  6243  002FEA  0E01               	movlw	high _serialInputFifo
  6244  002FEC  6E1A               	movwf	?_fifo_init+1,c
  6245  002FEE  0EC8               	movlw	low _serialInputFifo
  6246  002FF0  6E19               	movwf	?_fifo_init,c
  6247  002FF2  0102               	movlb	2	; () banked
  6248  002FF4  0E02               	movlw	high _inputBuffer
  6249  002FF6  6E1C               	movwf	?_fifo_init+3,c
  6250  002FF8  0E00               	movlw	low _inputBuffer
  6251  002FFA  6E1B               	movwf	?_fifo_init+2,c
  6252  002FFC  6A1E               	clrf	?_fifo_init+5,c
  6253  002FFE  0E80               	movlw	128
  6254  003000  6E1D               	movwf	?_fifo_init+4,c
  6255  003002  EC05  F027         	call	_fifo_init	;wreg free
  6256                           
  6257                           ;main.c: 132: fifo_init(&canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6258  003006  0101               	movlb	1	; () banked
  6259  003008  0E01               	movlw	high _canInputFifo
  6260  00300A  6E1A               	movwf	?_fifo_init+1,c
  6261  00300C  0EC0               	movlw	low _canInputFifo
  6262  00300E  6E19               	movwf	?_fifo_init,c
  6263  003010  0E04               	movlw	high _caninputBuffer
  6264  003012  6E1C               	movwf	?_fifo_init+3,c
  6265  003014  0E00               	movlw	low _caninputBuffer
  6266  003016  6E1B               	movwf	?_fifo_init+2,c
  6267  003018  0E01               	movlw	1
  6268  00301A  6E1E               	movwf	?_fifo_init+5,c
  6269  00301C  0EEE               	movlw	238
  6270  00301E  6E1D               	movwf	?_fifo_init+4,c
  6271  003020  EC05  F027         	call	_fifo_init	;wreg free
  6272                           
  6273                           ;main.c: 135: init_crc8();
  6274  003024  EC97  F024         	call	_init_crc8	;wreg free
  6275                           
  6276                           ;main.c: 139: if ((0x55 != readEEPROM(0x01)) ||
  6277                           ;main.c: 140: (0xaa != readEEPROM(0x02))) {
  6278  003028  6A1A               	clrf	?_readEEPROM+1,c
  6279  00302A  0E01               	movlw	1
  6280  00302C  6E19               	movwf	?_readEEPROM,c
  6281  00302E  ECD7  F028         	call	_readEEPROM	;wreg free
  6282  003032  0A55               	xorlw	85
  6283  003034  E107               	bnz	l12490
  6284  003036  6A1A               	clrf	?_readEEPROM+1,c
  6285  003038  0E02               	movlw	2
  6286  00303A  6E19               	movwf	?_readEEPROM,c
  6287  00303C  ECD7  F028         	call	_readEEPROM	;wreg free
  6288  003040  0AAA               	xorlw	170
  6289  003042  A4D8               	btfss	status,2,c
  6290  003044                     l12490:
  6291                           
  6292                           ;main.c: 141: vscp_restoreDefaults();
  6293  003044  ECE9  F028         	call	_vscp_restoreDefaults	;wreg free
  6294                           
  6295                           ;main.c: 142: }
  6296                           ;main.c: 144: init();
  6297  003048  ECC3  F026         	call	_init	;wreg free
  6298                           
  6299                           ;main.c: 148: _delay((unsigned long)((10)*(40000000/4000.0)));
  6300  00304C  0E82               	movlw	130
  6301  00304E  6E32               	movwf	??_main& (0+255),c
  6302  003050  0EDD               	movlw	221
  6303  003052                     u18777:
  6304  003052  2EE8               	decfsz	wreg,f,c
  6305  003054  D7FE               	goto	u18777
  6306  003056  2E32               	decfsz	??_main& (0+255),f,c
  6307  003058  D7FC               	goto	u18777
  6308  00305A  D000               	nop2	
  6309                           
  6310                           ;main.c: 152: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6311  00305C  0E79               	movlw	high STR_1
  6312  00305E  6E1B               	movwf	?_putsUSART+1,c
  6313  003060  0E53               	movlw	low STR_1
  6314  003062  6E1A               	movwf	?_putsUSART,c
  6315  003064  ECE6  F025         	call	_putsUSART	;wreg free
  6316                           
  6317                           ;main.c: 153: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6318  003068  0E74               	movlw	high STR_2
  6319  00306A  6E1B               	movwf	?_putsUSART+1,c
  6320  00306C  0EB1               	movlw	low STR_2
  6321  00306E  6E1A               	movwf	?_putsUSART,c
  6322  003070  ECE6  F025         	call	_putsUSART	;wreg free
  6323                           
  6324                           ;main.c: 154: printFirmwareVersion();
  6325  003074  EC65  F022         	call	_printFirmwareVersion	;wreg free
  6326                           
  6327                           ;main.c: 155: printMode();
  6328  003078  EC27  F024         	call	_printMode	;wreg free
  6329                           
  6330                           ;main.c: 159: if (0 && (0 != mode)) {
  6331  00307C  D02A               	goto	l12522
  6332  00307E                     l374:
  6333                           
  6334                           ; BSR set to: 0
  6335  00307E  0004               	clrwdt		;# 
  6336                           
  6337                           ;main.c: 170: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6338  003080  0E01               	movlw	high _serialInputFifo
  6339  003082  6E1A               	movwf	?_fifo_read+1,c
  6340  003084  0EC8               	movlw	low _serialInputFifo
  6341  003086  6E19               	movwf	?_fifo_read,c
  6342  003088  0100               	movlb	0	; () banked
  6343  00308A  0E00               	movlw	high main@c
  6344  00308C  6E1C               	movwf	?_fifo_read+3,c
  6345  00308E  0ECA               	movlw	low main@c
  6346  003090  6E1B               	movwf	?_fifo_read+2,c
  6347  003092  6A1E               	clrf	?_fifo_read+5,c
  6348  003094  0E01               	movlw	1
  6349  003096  6E1D               	movwf	?_fifo_read+4,c
  6350  003098  EC61  F01F         	call	_fifo_read	;wreg free
  6351  00309C  0419               	decf	?_fifo_read,w,c
  6352  00309E  101A               	iorwf	?_fifo_read+1,w,c
  6353  0030A0  E10D               	bnz	l375
  6354                           
  6355                           ;main.c: 171: (INTCONbits.GIE = 1);
  6356  0030A2  8EF2               	bsf	intcon,7,c	;volatile
  6357                           
  6358                           ;main.c: 172: if ('v' == c) {
  6359  0030A4  0100               	movlb	0	; () banked
  6360  0030A6  51CA               	movf	main@c& (0+255),w,b
  6361  0030A8  0A76               	xorlw	118
  6362  0030AA  E108               	bnz	l375
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;main.c: 173: mode = 0;
  6366  0030AC  6BD7               	clrf	_mode& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;main.c: 174: putsUSART((char *) "Temporary verbose mode set\r\n");
  6370  0030AE  0E7B               	movlw	high STR_4
  6371  0030B0  6E1B               	movwf	?_putsUSART+1,c
  6372  0030B2  0E2B               	movlw	low STR_4
  6373  0030B4  6E1A               	movwf	?_putsUSART,c
  6374  0030B6  ECE6  F025         	call	_putsUSART	;wreg free
  6375                           
  6376                           ;main.c: 175: break;
  6377  0030BA  D00B               	goto	l12522
  6378  0030BC                     l375:
  6379                           
  6380                           ;main.c: 176: }
  6381                           ;main.c: 177: }
  6382                           ;main.c: 178: (INTCONbits.GIE = 1);
  6383  0030BC  8EF2               	bsf	intcon,7,c	;volatile
  6384  0030BE  0EB8               	movlw	184
  6385  0030C0  0100               	movlb	0	; () banked
  6386  0030C2  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
  6387  0030C4  0E0B               	movlw	11
  6388  0030C6  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6389  0030C8  0E00               	movlw	0
  6390  0030CA  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6391  0030CC  0E00               	movlw	0
  6392  0030CE  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6393  0030D0  E3D6               	bnc	l374
  6394  0030D2                     l12522:
  6395                           
  6396                           ;main.c: 179: }
  6397                           ;main.c: 180: }
  6398                           ;main.c: 182: ledFunctionality = 1;
  6399  0030D2  0E01               	movlw	1
  6400  0030D4  6E3C               	movwf	_ledFunctionality,c
  6401  0030D6                     l378:
  6402  0030D6  0004               	clrwdt		;# 
  6403                           
  6404                           ;main.c: 190: if (COMSTATbits.TXBO) {
  6405  0030D8  AA74               	btfss	3956,5,c	;volatile
  6406  0030DA  D002               	goto	l379
  6407                           
  6408                           ;main.c: 192: ledFunctionality = 6;
  6409  0030DC  0E06               	movlw	6
  6410  0030DE  D009               	goto	L1
  6411  0030E0                     l379:
  6412  0030E0  B874               	btfsc	3956,4,c	;volatile
  6413  0030E2  D002               	goto	l12530
  6414  0030E4  A674               	btfss	3956,3,c	;volatile
  6415  0030E6  D002               	goto	l381
  6416  0030E8                     l12530:
  6417                           
  6418                           ;main.c: 195: ledFunctionality = 5;
  6419  0030E8  0E05               	movlw	5
  6420  0030EA  D003               	goto	L1
  6421  0030EC                     l381:
  6422                           
  6423                           ;main.c: 198: ledFunctionality = 4;
  6424  0030EC  0E04               	movlw	4
  6425  0030EE  A074               	btfss	3956,0,c	;volatile
  6426                           
  6427                           ;main.c: 201: ledFunctionality = 1;
  6428                           
  6429                           ;main.c: 199: } else {
  6430  0030F0  0E01               	movlw	1
  6431  0030F2                     L1:
  6432  0030F2  6E3C               	movwf	_ledFunctionality,c
  6433                           
  6434                           ;main.c: 202: }
  6435                           ;main.c: 205: if (COMSTATbits.RXBnOVFL) {
  6436  0030F4  AC74               	btfss	3956,6,c	;volatile
  6437  0030F6  D007               	goto	l12542
  6438                           
  6439                           ;main.c: 206: can_receiveOverruns++;
  6440  0030F8  0101               	movlb	1	; () banked
  6441  0030FA  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6442  0030FC  0E00               	movlw	0
  6443  0030FE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6444  003100  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6445  003102  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6446                           
  6447                           ; BSR set to: 1
  6448                           ;main.c: 207: COMSTATbits.RXBnOVFL = 0;
  6449  003104  9C74               	bcf	3956,6,c	;volatile
  6450  003106                     l12542:
  6451                           
  6452                           ;main.c: 208: }
  6453                           ;main.c: 210: if (0 == mode) {
  6454  003106  0100               	movlb	0	; () banked
  6455  003108  67D7               	tstfsz	_mode& (0+255),b
  6456  00310A  D003               	goto	l12546
  6457  00310C                     l12544:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 211: doModeVerbose();
  6461  00310C  ECD5  F000         	call	_doModeVerbose	;wreg free
  6462                           
  6463                           ;main.c: 212: } else if (1 == mode) {
  6464  003110  D7E2               	goto	l378
  6465  003112                     l12546:
  6466                           
  6467                           ; BSR set to: 0
  6468  003112  05D7               	decf	_mode& (0+255),w,b
  6469  003114  E103               	bnz	l12550
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;main.c: 213: doModeVscp();
  6473  003116  ECF4  F014         	call	_doModeVscp	;wreg free
  6474                           
  6475                           ;main.c: 214: } else if (2 == mode) {
  6476  00311A  D7DD               	goto	l378
  6477  00311C                     l12550:
  6478                           
  6479                           ; BSR set to: 0
  6480  00311C  51D7               	movf	_mode& (0+255),w,b
  6481  00311E  0A02               	xorlw	2
  6482  003120  E103               	bnz	l12554
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;main.c: 215: doModeSLCAN();
  6486  003122  ECE2  F00D         	call	_doModeSLCAN	;wreg free
  6487                           
  6488                           ;main.c: 216: } else if (3 == mode) {
  6489  003126  D7D7               	goto	l378
  6490  003128                     l12554:
  6491                           
  6492                           ; BSR set to: 0
  6493  003128  51D7               	movf	_mode& (0+255),w,b
  6494  00312A  0A03               	xorlw	3
  6495  00312C  E1EF               	bnz	l12544
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;main.c: 217: doModeVscpNode();
  6499  00312E  ECED  F028         	call	_doModeVscpNode	;wreg free
  6500                           
  6501                           ;main.c: 218: } else {
  6502  003132  D7D1               	goto	l378
  6503  003134                     __end_of_main:
  6504                           	opt stack 0
  6505                           tblptru	equ	0xFF8
  6506                           tblptrh	equ	0xFF7
  6507                           tblptrl	equ	0xFF6
  6508                           tablat	equ	0xFF5
  6509                           prodh	equ	0xFF4
  6510                           prodl	equ	0xFF3
  6511                           intcon	equ	0xFF2
  6512                           indf0	equ	0xFEF
  6513                           postinc0	equ	0xFEE
  6514                           fsr0h	equ	0xFEA
  6515                           fsr0l	equ	0xFE9
  6516                           wreg	equ	0xFE8
  6517                           indf1	equ	0xFE7
  6518                           postinc1	equ	0xFE6
  6519                           postdec1	equ	0xFE5
  6520                           fsr1h	equ	0xFE2
  6521                           fsr1l	equ	0xFE1
  6522                           indf2	equ	0xFDF
  6523                           postinc2	equ	0xFDE
  6524                           postdec2	equ	0xFDD
  6525                           plusw2	equ	0xFDB
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _doModeVscpNode *****************
  6531 ;; Defined at:
  6532 ;;		line 1310 in file "main.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		None
  6541 ;; Tracked objects:
  6542 ;;		On entry : F/0
  6543 ;;		On exit  : F/0
  6544 ;;		Unchanged: F/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6546 ;;      Params:         0       0       0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    2
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text1
  6561  0051DA                     __ptext1:
  6562                           	opt stack 0
  6563  0051DA                     _doModeVscpNode:
  6564                           	opt stack 28
  6565                           
  6566                           ; BSR set to: 0
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;incstack = 0
  6570                           ;incstack = 0
  6571  0051DA  0012               	return	
  6572  0051DC                     __end_of_doModeVscpNode:
  6573                           	opt stack 0
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           indf0	equ	0xFEF
  6582                           postinc0	equ	0xFEE
  6583                           fsr0h	equ	0xFEA
  6584                           fsr0l	equ	0xFE9
  6585                           wreg	equ	0xFE8
  6586                           indf1	equ	0xFE7
  6587                           postinc1	equ	0xFE6
  6588                           postdec1	equ	0xFE5
  6589                           fsr1h	equ	0xFE2
  6590                           fsr1l	equ	0xFE1
  6591                           indf2	equ	0xFDF
  6592                           postinc2	equ	0xFDE
  6593                           postdec2	equ	0xFDD
  6594                           plusw2	equ	0xFDB
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _doModeSLCAN *****************
  6600 ;; Defined at:
  6601 ;;		line 1110 in file "main.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  id              4   42[BANK0 ] unsigned long 
  6606 ;;  dlc             1   46[BANK0 ] unsigned char 
  6607 ;;  rv              1   48[BANK0 ] enum E15660
  6608 ;;  c               1   47[BANK0 ] unsigned char 
  6609 ;; Return value:  Size  Location     Type
  6610 ;;		None               void
  6611 ;; Registers used:
  6612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6613 ;; Tracked objects:
  6614 ;;		On entry : F/0
  6615 ;;		On exit  : C/0
  6616 ;;		Unchanged: 0/0
  6617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6618 ;;      Params:         0       0       0       0       0       0       0
  6619 ;;      Locals:         0       7       0       0       0       0       0
  6620 ;;      Temps:          0       7       0       0       0       0       0
  6621 ;;      Totals:         0      14       0       0       0       0       0
  6622 ;;Total ram usage:       14 bytes
  6623 ;; Hardware stack levels used:    1
  6624 ;; Hardware stack levels required when called:    6
  6625 ;; This function calls:
  6626 ;;		_putsUSART
  6627 ;;		_fifo_read
  6628 ;;		_writeEEPROM
  6629 ;;		_ECANSetOperationMode
  6630 ;;		_memset
  6631 ;;		_receivePrintEventSLCAN
  6632 ;;		_strlen
  6633 ;;		_hexStringToBytes
  6634 ;;		_memcpy
  6635 ;;		_sendCANFrame
  6636 ;; This function is called by:
  6637 ;;		_main
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text2
  6642  001BC4                     __ptext2:
  6643                           	opt stack 0
  6644  001BC4                     _doModeSLCAN:
  6645                           	opt stack 24
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;main.c: 1111: uint8_t c;
  6649                           ;main.c: 1112: BOOL rv = 0;
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;incstack = 0
  6653                           ;incstack = 0
  6654  001BC4  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;main.c: 1115: receivePrintEventSLCAN();
  6658  001BC6  EC2B  F014         	call	_receivePrintEventSLCAN	;wreg free
  6659                           
  6660                           ;main.c: 1118: (INTCONbits.GIE = 0);
  6661  001BCA  9EF2               	bcf	intcon,7,c	;volatile
  6662                           
  6663                           ;main.c: 1120: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6664  001BCC  0E01               	movlw	high _serialInputFifo
  6665  001BCE  6E1A               	movwf	?_fifo_read+1,c
  6666  001BD0  0EC8               	movlw	low _serialInputFifo
  6667  001BD2  6E19               	movwf	?_fifo_read,c
  6668  001BD4  0100               	movlb	0	; () banked
  6669  001BD6  0E00               	movlw	high doModeSLCAN@c
  6670  001BD8  6E1C               	movwf	?_fifo_read+3,c
  6671  001BDA  0E8F               	movlw	low doModeSLCAN@c
  6672  001BDC  6E1B               	movwf	?_fifo_read+2,c
  6673  001BDE  6A1E               	clrf	?_fifo_read+5,c
  6674  001BE0  0E01               	movlw	1
  6675  001BE2  6E1D               	movwf	?_fifo_read+4,c
  6676  001BE4  EC61  F01F         	call	_fifo_read	;wreg free
  6677  001BE8  0419               	decf	?_fifo_read,w,c
  6678  001BEA  101A               	iorwf	?_fifo_read+1,w,c
  6679  001BEC  E001 D1AF          	bnz	l13300
  6680                           
  6681                           ;main.c: 1123: (INTCONbits.GIE = 1);
  6682  001BF0  8EF2               	bsf	intcon,7,c	;volatile
  6683                           
  6684                           ;main.c: 1125: if (0x0d != c) {
  6685  001BF2  0100               	movlb	0	; () banked
  6686  001BF4  518F               	movf	doModeSLCAN@c& (0+255),w,b
  6687  001BF6  0A0D               	xorlw	13
  6688  001BF8  E101 D160          	bz	l13288
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;main.c: 1126: cmdbuf[ pos ] = c;
  6692  001BFC  0E20               	movlw	low _cmdbuf
  6693  001BFE  25D8               	addwf	_pos& (0+255),w,b
  6694  001C00  6ED9               	movwf	fsr2l,c
  6695  001C02  6ADA               	clrf	fsr2h,c
  6696  001C04  0E01               	movlw	high _cmdbuf
  6697  001C06  22DA               	addwfc	fsr2h,f,c
  6698  001C08  C08F  FFDF         	movff	doModeSLCAN@c,indf2
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;main.c: 1127: pos++;
  6702  001C0C  2BD8               	incf	_pos& (0+255),f,b
  6703  001C0E  D1A0               	goto	l670
  6704  001C10                     l13182:
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 1135: if (1 == strlen(cmdbuf)) {
  6708  001C10  0101               	movlb	1	; () banked
  6709  001C12  0E01               	movlw	high _cmdbuf
  6710  001C14  6E1A               	movwf	?_strlen+1,c
  6711  001C16  0E20               	movlw	low _cmdbuf
  6712  001C18  6E19               	movwf	?_strlen,c
  6713  001C1A  EC82  F027         	call	_strlen	;wreg free
  6714  001C1E  0419               	decf	?_strlen,w,c
  6715  001C20  101A               	iorwf	?_strlen+1,w,c
  6716  001C22  E001 D176          	bnz	l13290
  6717                           
  6718                           ;main.c: 1136: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6719  001C26  0E7D               	movlw	high STR_124
  6720  001C28  6E1B               	movwf	?_putsUSART+1,c
  6721  001C2A  0E5B               	movlw	low STR_124
  6722  001C2C  6E1A               	movwf	?_putsUSART,c
  6723  001C2E  ECE6  F025         	call	_putsUSART	;wreg free
  6724  001C32                     l13186:
  6725                           
  6726                           ;main.c: 1137: rv = 1;
  6727  001C32  0E01               	movlw	1
  6728  001C34  D0ED               	goto	L4
  6729  001C36                     l13188:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;main.c: 1143: if (1 == strlen(cmdbuf)) {
  6733  001C36  0101               	movlb	1	; () banked
  6734  001C38  0E01               	movlw	high _cmdbuf
  6735  001C3A  6E1A               	movwf	?_strlen+1,c
  6736  001C3C  0E20               	movlw	low _cmdbuf
  6737  001C3E  6E19               	movwf	?_strlen,c
  6738  001C40  EC82  F027         	call	_strlen	;wreg free
  6739  001C44  0419               	decf	?_strlen,w,c
  6740  001C46  101A               	iorwf	?_strlen+1,w,c
  6741  001C48  E001 D163          	bnz	l13290
  6742                           
  6743                           ;main.c: 1144: putsUSART((char *) "V1011\r\n");
  6744  001C4C  0E7E               	movlw	high STR_125
  6745  001C4E  6E1B               	movwf	?_putsUSART+1,c
  6746  001C50  0ED6               	movlw	low STR_125
  6747  001C52  6E1A               	movwf	?_putsUSART,c
  6748  001C54  ECE6  F025         	call	_putsUSART	;wreg free
  6749  001C58  D7EC               	goto	l13186
  6750  001C5A                     l13194:
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;main.c: 1151: if (1 == strlen(cmdbuf)) {
  6754  001C5A  0101               	movlb	1	; () banked
  6755  001C5C  0E01               	movlw	high _cmdbuf
  6756  001C5E  6E1A               	movwf	?_strlen+1,c
  6757  001C60  0E20               	movlw	low _cmdbuf
  6758  001C62  6E19               	movwf	?_strlen,c
  6759  001C64  EC82  F027         	call	_strlen	;wreg free
  6760  001C68  0419               	decf	?_strlen,w,c
  6761  001C6A  101A               	iorwf	?_strlen+1,w,c
  6762  001C6C  E001 D151          	bnz	l13290
  6763                           
  6764                           ;main.c: 1152: putsUSART((char *) "N1977\r\n");
  6765  001C70  0E7E               	movlw	high STR_126
  6766  001C72  6E1B               	movwf	?_putsUSART+1,c
  6767  001C74  0EDE               	movlw	low STR_126
  6768  001C76  6E1A               	movwf	?_putsUSART,c
  6769  001C78  ECE6  F025         	call	_putsUSART	;wreg free
  6770  001C7C  D7DA               	goto	l13186
  6771  001C7E                     l13200:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;main.c: 1161: bInitiated = 1;
  6775  001C7E  0E01               	movlw	1
  6776  001C80  6FD4               	movwf	_bInitiated& (0+255),b
  6777                           
  6778                           ;main.c: 1162: rv = 1;
  6779  001C82  D0C7               	goto	L3
  6780  001C84                     l680:
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;main.c: 1167: if (!bOpen) {
  6784  001C84  67D5               	tstfsz	_bOpen& (0+255),b
  6785  001C86  D003               	goto	l13204
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;main.c: 1168: bInitiated = 1;
  6789  001C88  0E01               	movlw	1
  6790  001C8A  6FD4               	movwf	_bInitiated& (0+255),b
  6791                           
  6792                           ;main.c: 1169: rv = 1;
  6793  001C8C  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  6794  001C8E                     l13204:
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;main.c: 1174: if (1 == strlen(cmdbuf)) {
  6798  001C8E  0101               	movlb	1	; () banked
  6799  001C90  0E01               	movlw	high _cmdbuf
  6800  001C92  6E1A               	movwf	?_strlen+1,c
  6801  001C94  0E20               	movlw	low _cmdbuf
  6802  001C96  6E19               	movwf	?_strlen,c
  6803  001C98  EC82  F027         	call	_strlen	;wreg free
  6804  001C9C  0419               	decf	?_strlen,w,c
  6805  001C9E  101A               	iorwf	?_strlen+1,w,c
  6806  001CA0  E001 D137          	bnz	l13290
  6807                           
  6808                           ;main.c: 1175: if (!bOpen && bInitiated) {
  6809  001CA4  0100               	movlb	0	; () banked
  6810  001CA6  67D5               	tstfsz	_bOpen& (0+255),b
  6811  001CA8  D134               	goto	l13290
  6812                           
  6813                           ; BSR set to: 0
  6814  001CAA  51D4               	movf	_bInitiated& (0+255),w,b
  6815  001CAC  E101 D131          	bz	l13290
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;main.c: 1176: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6819  001CB0  0E00               	movlw	0
  6820  001CB2  ECAD  F028         	call	_ECANSetOperationMode
  6821                           
  6822                           ;main.c: 1177: bOpen = 1;
  6823  001CB6  0E01               	movlw	1
  6824  001CB8  0100               	movlb	0	; () banked
  6825  001CBA  6FD5               	movwf	_bOpen& (0+255),b
  6826  001CBC  D7BA               	goto	l13186
  6827  001CBE                     l13216:
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;main.c: 1185: if (1 == strlen(cmdbuf)) {
  6831  001CBE  0101               	movlb	1	; () banked
  6832  001CC0  0E01               	movlw	high _cmdbuf
  6833  001CC2  6E1A               	movwf	?_strlen+1,c
  6834  001CC4  0E20               	movlw	low _cmdbuf
  6835  001CC6  6E19               	movwf	?_strlen,c
  6836  001CC8  EC82  F027         	call	_strlen	;wreg free
  6837  001CCC  0419               	decf	?_strlen,w,c
  6838  001CCE  101A               	iorwf	?_strlen+1,w,c
  6839  001CD0  E001 D11F          	bnz	l13290
  6840                           
  6841                           ;main.c: 1186: if (bOpen) {
  6842  001CD4  0100               	movlb	0	; () banked
  6843  001CD6  51D5               	movf	_bOpen& (0+255),w,b
  6844  001CD8  E0AC               	bz	l13186
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;main.c: 1187: ECANSetOperationMode(0x20);
  6848  001CDA  0E20               	movlw	32
  6849  001CDC  ECAD  F028         	call	_ECANSetOperationMode
  6850                           
  6851                           ;main.c: 1188: bOpen = 0;
  6852  001CE0  0100               	movlb	0	; () banked
  6853  001CE2  6BD5               	clrf	_bOpen& (0+255),b
  6854  001CE4  D7A6               	goto	l13186
  6855  001CE6                     l13226:
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;main.c: 1201: if (bOpen && (strlen(cmdbuf) >= 10)) {
  6859  001CE6  51D5               	movf	_bOpen& (0+255),w,b
  6860  001CE8  E101 D113          	bz	l13290
  6861                           
  6862                           ; BSR set to: 0
  6863  001CEC  0101               	movlb	1	; () banked
  6864  001CEE  0E01               	movlw	high _cmdbuf
  6865  001CF0  6E1A               	movwf	?_strlen+1,c
  6866  001CF2  0E20               	movlw	low _cmdbuf
  6867  001CF4  6E19               	movwf	?_strlen,c
  6868  001CF6  EC82  F027         	call	_strlen	;wreg free
  6869  001CFA  0E0A               	movlw	10
  6870  001CFC  5C19               	subwf	?_strlen,w,c
  6871  001CFE  0E00               	movlw	0
  6872  001D00  581A               	subwfb	?_strlen+1,w,c
  6873  001D02  E201 D106          	bnc	l13290
  6874                           
  6875                           ;main.c: 1203: uint32_t id;
  6876                           ;main.c: 1204: uint8_t dlc;
  6877                           ;main.c: 1206: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  6878  001D06  0101               	movlb	1	; () banked
  6879  001D08  0E01               	movlw	high _wrkbuf
  6880  001D0A  6E1E               	movwf	?_hexStringToBytes+1,c
  6881  001D0C  0E70               	movlw	low _wrkbuf
  6882  001D0E  6E1D               	movwf	?_hexStringToBytes,c
  6883  001D10  0E50               	movlw	80
  6884  001D12  6E1F               	movwf	?_hexStringToBytes+2,c
  6885  001D14  0E01               	movlw	high _cmdbuf
  6886  001D16  6E21               	movwf	?_hexStringToBytes+4,c
  6887  001D18  0E20               	movlw	low _cmdbuf
  6888  001D1A  6E20               	movwf	?_hexStringToBytes+3,c
  6889  001D1C  EC85  F021         	call	_hexStringToBytes	;wreg free
  6890  001D20  0100               	movlb	0	; () banked
  6891  001D22  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6892  001D24  0E05               	movlw	5
  6893  001D26  5D83               	subwf	??_doModeSLCAN& (0+255),w,b
  6894  001D28  E201 D0F3          	bnc	l13290
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;main.c: 1208: }
  6898                           ;main.c: 1210: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  6899  001D2C  C173  F083         	movff	_wrkbuf+3,??_doModeSLCAN
  6900  001D30  0E08               	movlw	8
  6901  001D32  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6902  001D34  C172  F084         	movff	_wrkbuf+2,??_doModeSLCAN+1
  6903  001D38  0E10               	movlw	16
  6904  001D3A  2784               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  6905  001D3C  C171  F085         	movff	_wrkbuf+1,??_doModeSLCAN+2
  6906  001D40  0E18               	movlw	24
  6907  001D42  2785               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  6908  001D44  C170  F086         	movff	_wrkbuf,??_doModeSLCAN+3
  6909  001D48  6B87               	clrf	(??_doModeSLCAN+4)& (0+255),b
  6910  001D4A  6B88               	clrf	(??_doModeSLCAN+5)& (0+255),b
  6911  001D4C  6B89               	clrf	(??_doModeSLCAN+6)& (0+255),b
  6912  001D4E  2B85               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  6913  001D50  D001               	goto	u17570
  6914  001D52                     u17575:
  6915  001D52  D8FF               	call	PL82	;call to abstracted procedure
  6916  001D54                     u17570:
  6917  001D54  2F85               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  6918  001D56  D7FD               	goto	u17575
  6919  001D58  2B84               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  6920  001D5A  D001               	goto	u17580
  6921  001D5C                     u17585:
  6922  001D5C  D8FA               	call	PL82	;call to abstracted procedure
  6923  001D5E                     u17580:
  6924  001D5E  2F84               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  6925  001D60  D7FD               	goto	u17585
  6926  001D62  2B83               	incf	??_doModeSLCAN& (0+255),f,b
  6927  001D64  D001               	goto	u17590
  6928  001D66                     u17595:
  6929  001D66  D8F5               	call	PL82	;call to abstracted procedure
  6930  001D68                     u17590:
  6931  001D68  2F83               	decfsz	??_doModeSLCAN& (0+255),f,b
  6932  001D6A  D7FD               	goto	u17595
  6933  001D6C  C089  F08D         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  6934  001D70  C088  F08C         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  6935  001D74  C087  F08B         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  6936  001D78  C086  F08A         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;main.c: 1211: dlc = vscpData[4];
  6940  001D7C  C044  F08E         	movff	_vscpData+4,doModeSLCAN@dlc
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;main.c: 1214: if (dlc > 8) break;
  6944  001D80  0E08               	movlw	8
  6945  001D82  658E               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  6946  001D84  D001               	goto	l13242
  6947  001D86  D0C5               	goto	l13290
  6948  001D88                     l13242:
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;main.c: 1215: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  6952  001D88  90D8               	bcf	status,0,c
  6953  001D8A  358E               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  6954  001D8C  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6955  001D8E  6B84               	clrf	(??_doModeSLCAN+1)& (0+255),b
  6956  001D90  3784               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  6957  001D92  0E0A               	movlw	10
  6958  001D94  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6959  001D96  0E00               	movlw	0
  6960  001D98  2384               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  6961  001D9A  0101               	movlb	1	; () banked
  6962  001D9C  0E01               	movlw	high _cmdbuf
  6963  001D9E  6E1A               	movwf	?_strlen+1,c
  6964  001DA0  0E20               	movlw	low _cmdbuf
  6965  001DA2  6E19               	movwf	?_strlen,c
  6966  001DA4  EC82  F027         	call	_strlen	;wreg free
  6967  001DA8  0100               	movlb	0	; () banked
  6968  001DAA  5183               	movf	??_doModeSLCAN& (0+255),w,b
  6969  001DAC  5C19               	subwf	?_strlen,w,c
  6970  001DAE  5184               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  6971  001DB0  581A               	subwfb	?_strlen+1,w,c
  6972  001DB2  E201 D0AE          	bnc	l13290
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;main.c: 1217: memcpy(vscpData, vscpData + 5, dlc);
  6976  001DB6  0E40               	movlw	low _vscpData
  6977  001DB8  6E19               	movwf	?_memcpy,c
  6978  001DBA  0E00               	movlw	high _vscpData
  6979  001DBC  6E1A               	movwf	?_memcpy+1,c
  6980  001DBE  0E0F               	movlw	15
  6981  001DC0  6E1A               	movwf	?_memcpy+1,c
  6982  001DC2  0E5F               	movlw	__accesstop+-1
  6983  001DC4  6419               	cpfsgt	?_memcpy,c
  6984  001DC6  6A1A               	clrf	?_memcpy+1,c
  6985  001DC8  0E45               	movlw	low (_vscpData+5)
  6986  001DCA  6E1B               	movwf	?_memcpy+2,c
  6987  001DCC  0E00               	movlw	high (_vscpData+5)
  6988  001DCE  6E1C               	movwf	?_memcpy+3,c
  6989  001DD0  0E0F               	movlw	15
  6990  001DD2  6E1C               	movwf	?_memcpy+3,c
  6991  001DD4  0E5F               	movlw	__accesstop+-1
  6992  001DD6  641B               	cpfsgt	?_memcpy+2,c
  6993  001DD8  6A1C               	clrf	?_memcpy+3,c
  6994  001DDA  C08E  F01D         	movff	doModeSLCAN@dlc,?_memcpy+4
  6995  001DDE  6A1E               	clrf	?_memcpy+5,c
  6996  001DE0  ECE5  F026         	call	_memcpy	;wreg free
  6997                           
  6998                           ;main.c: 1219: rv = sendCANFrame(id, dlc, vscpData);
  6999  001DE4  C08A  F07C         	movff	doModeSLCAN@id,?_sendCANFrame
  7000  001DE8  C08B  F07D         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7001  001DEC  C08C  F07E         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7002  001DF0  C08D  F07F         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7003  001DF4  C08E  F080         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7004  001DF8  0E40               	movlw	low _vscpData
  7005  001DFA  0100               	movlb	0	; () banked
  7006  001DFC  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  7007  001DFE  0E00               	movlw	high _vscpData
  7008  001E00  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  7009  001E02  0E0F               	movlw	15
  7010  001E04  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  7011  001E06  0E5F               	movlw	__accesstop+-1
  7012  001E08  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
  7013  001E0A  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
  7014  001E0C  ECA0  F027         	call	_sendCANFrame	;wreg free
  7015  001E10                     L4:
  7016  001E10  0100               	movlb	0	; () banked
  7017  001E12                     L3:
  7018  001E12  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  7019  001E14  D07E               	goto	l13290
  7020  001E16                     l13250:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;main.c: 1234: if (bOpen && (strlen(cmdbuf) == 1)) {
  7024  001E16  51D5               	movf	_bOpen& (0+255),w,b
  7025  001E18  E07C               	bz	l13290
  7026                           
  7027                           ; BSR set to: 0
  7028  001E1A  0101               	movlb	1	; () banked
  7029  001E1C  0E01               	movlw	high _cmdbuf
  7030  001E1E  6E1A               	movwf	?_strlen+1,c
  7031  001E20  0E20               	movlw	low _cmdbuf
  7032  001E22  6E19               	movwf	?_strlen,c
  7033  001E24  EC82  F027         	call	_strlen	;wreg free
  7034  001E28  0419               	decf	?_strlen,w,c
  7035  001E2A  101A               	iorwf	?_strlen+1,w,c
  7036  001E2C  E172               	bnz	l13290
  7037                           
  7038                           ;main.c: 1235: putsUSART((char *) "F00\r\n");
  7039  001E2E  0E7F               	movlw	high STR_127
  7040  001E30  6E1B               	movwf	?_putsUSART+1,c
  7041  001E32  0E7A               	movlw	low STR_127
  7042  001E34  6E1A               	movwf	?_putsUSART,c
  7043  001E36  ECE6  F025         	call	_putsUSART	;wreg free
  7044  001E3A  D06B               	goto	l13290
  7045  001E3C                     l13260:
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;main.c: 1251: if (2 == strlen(cmdbuf)) {
  7049  001E3C  0101               	movlb	1	; () banked
  7050  001E3E  0E01               	movlw	high _cmdbuf
  7051  001E40  6E1A               	movwf	?_strlen+1,c
  7052  001E42  0E20               	movlw	low _cmdbuf
  7053  001E44  6E19               	movwf	?_strlen,c
  7054  001E46  EC82  F027         	call	_strlen	;wreg free
  7055  001E4A  5019               	movf	?_strlen,w,c
  7056  001E4C  0A02               	xorlw	2
  7057  001E4E  101A               	iorwf	?_strlen+1,w,c
  7058  001E50  E160               	bnz	l13290
  7059                           
  7060                           ;main.c: 1252: if (!bOpen) {
  7061  001E52  0100               	movlb	0	; () banked
  7062  001E54  67D5               	tstfsz	_bOpen& (0+255),b
  7063  001E56  D05D               	goto	l13290
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;main.c: 1253: if ('0' == cmdbuf[1]) {
  7067  001E58  0101               	movlb	1	; () banked
  7068  001E5A  5121               	movf	(_cmdbuf+1)& (0+255),w,b
  7069  001E5C  0A30               	xorlw	48
  7070  001E5E  E109               	bnz	l13272
  7071                           
  7072                           ; BSR set to: 1
  7073                           ;main.c: 1254: nTimeStamp = 0;
  7074  001E60  6A3D               	clrf	_nTimeStamp,c
  7075                           
  7076                           ; BSR set to: 1
  7077                           ;main.c: 1256: writeEEPROM(0x05, 0);
  7078  001E62  6A1A               	clrf	?_writeEEPROM+1,c
  7079  001E64  0E05               	movlw	5
  7080  001E66  6E19               	movwf	?_writeEEPROM,c
  7081  001E68  0E00               	movlw	0
  7082  001E6A  6A1B               	clrf	?_writeEEPROM+2,c
  7083  001E6C  EC6D  F028         	call	_writeEEPROM	;wreg free
  7084  001E70  D6E0               	goto	l13186
  7085  001E72                     l13272:
  7086                           
  7087                           ; BSR set to: 1
  7088  001E72  5121               	movf	(_cmdbuf+1)& (0+255),w,b
  7089  001E74  0A31               	xorlw	49
  7090  001E76  E10A               	bnz	l705
  7091                           
  7092                           ; BSR set to: 1
  7093                           ;main.c: 1259: nTimeStamp = 1;
  7094  001E78  0E01               	movlw	1
  7095  001E7A  6E3D               	movwf	_nTimeStamp,c
  7096                           
  7097                           ; BSR set to: 1
  7098                           ;main.c: 1261: writeEEPROM(0x05,
  7099                           ;main.c: 1262: 1);
  7100  001E7C  6A1A               	clrf	?_writeEEPROM+1,c
  7101  001E7E  0E05               	movlw	5
  7102  001E80  6E19               	movwf	?_writeEEPROM,c
  7103  001E82  0E01               	movlw	1
  7104  001E84  6E1B               	movwf	?_writeEEPROM+2,c
  7105  001E86  EC6D  F028         	call	_writeEEPROM	;wreg free
  7106  001E8A  D6D3               	goto	l13186
  7107  001E8C                     l705:
  7108                           
  7109                           ; BSR set to: 1
  7110                           ;main.c: 1265: rv = 0;
  7111  001E8C  0100               	movlb	0	; () banked
  7112  001E8E  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  7113  001E90  D040               	goto	l13290
  7114  001E92                     l13280:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;main.c: 1273: writeEEPROM(0x01, 0xFF);
  7118  001E92  6A1A               	clrf	?_writeEEPROM+1,c
  7119  001E94  0E01               	movlw	1
  7120  001E96  6E19               	movwf	?_writeEEPROM,c
  7121  001E98  0EFF               	movlw	255
  7122  001E9A  681B               	setf	?_writeEEPROM+2,c
  7123  001E9C  EC6D  F028         	call	_writeEEPROM	;wreg free
  7124  001EA0  00FF               	reset		;# 
  7125                           
  7126                           ;main.c: 1275: break;
  7127  001EA2  D037               	goto	l13290
  7128  001EA4                     l13282:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;main.c: 1278: {
  7132                           ;main.c: 1280: if (0 == strlen(cmdbuf)) {
  7133  001EA4  0101               	movlb	1	; () banked
  7134  001EA6  0E01               	movlw	high _cmdbuf
  7135  001EA8  6E1A               	movwf	?_strlen+1,c
  7136  001EAA  0E20               	movlw	low _cmdbuf
  7137  001EAC  6E19               	movwf	?_strlen,c
  7138  001EAE  EC82  F027         	call	_strlen	;wreg free
  7139  001EB2  501A               	movf	?_strlen+1,w,c
  7140  001EB4  1019               	iorwf	?_strlen,w,c
  7141  001EB6  E101 D6BC          	bz	l13186
  7142  001EBA  D02B               	goto	l13290
  7143  001EBC                     l13288:
  7144                           
  7145                           ; BSR set to: 0
  7146  001EBC  518F               	movf	doModeSLCAN@c& (0+255),w,b
  7147                           
  7148                           ; Switch size 1, requested type "space"
  7149                           ; Number of cases is 16, Range of values is 66 to 116
  7150                           ; switch strategies available:
  7151                           ; Name         Instructions Cycles
  7152                           ; simple_byte           49    25 (average)
  7153                           ;	Chosen strategy is simple_byte
  7154  001EBE  0A42               	xorlw	66	; case 66
  7155  001EC0  E0E8               	bz	l13280
  7156  001EC2  0A01               	xorlw	1	; case 67
  7157  001EC4  E101 D6FB          	bz	l13216
  7158  001EC8  0A05               	xorlw	5	; case 70
  7159  001ECA  E0A5               	bz	l13250
  7160  001ECC  0A0C               	xorlw	12	; case 74
  7161  001ECE  E101 D69F          	bz	l13182
  7162  001ED2  0A07               	xorlw	7	; case 77
  7163  001ED4  E101 D6AD          	bz	l13186
  7164  001ED8  0A03               	xorlw	3	; case 78
  7165  001EDA  E101 D6BE          	bz	l13194
  7166  001EDE  0A01               	xorlw	1	; case 79
  7167  001EE0  E101 D6D5          	bz	l13204
  7168  001EE4  0A1D               	xorlw	29	; case 82
  7169  001EE6  E015               	bz	l13290
  7170  001EE8  0A01               	xorlw	1	; case 83
  7171  001EEA  E101 D6C8          	bz	l13200
  7172  001EEE  0A07               	xorlw	7	; case 84
  7173  001EF0  E101 D6F9          	bz	l13226
  7174  001EF4  0A02               	xorlw	2	; case 86
  7175  001EF6  E101 D69E          	bz	l13188
  7176  001EFA  0A0C               	xorlw	12	; case 90
  7177  001EFC  E09F               	bz	l13260
  7178  001EFE  0A37               	xorlw	55	; case 109
  7179  001F00  E101 D697          	bz	l13186
  7180  001F04  0A1F               	xorlw	31	; case 114
  7181  001F06  E005               	bz	l13290
  7182  001F08  0A01               	xorlw	1	; case 115
  7183  001F0A  E101 D6BB          	bz	l680
  7184  001F0E  0A07               	xorlw	7	; case 116
  7185  001F10  E1C9               	bnz	l13282
  7186  001F12                     l13290:
  7187                           
  7188                           ;main.c: 1288: if (rv) {
  7189  001F12  0100               	movlb	0	; () banked
  7190  001F14  5190               	movf	doModeSLCAN@rv& (0+255),w,b
  7191  001F16  E007               	bz	l13294
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;main.c: 1290: putsUSART((char *) "\r");
  7195  001F18  0E7F               	movlw	high STR_128
  7196  001F1A  6E1B               	movwf	?_putsUSART+1,c
  7197  001F1C  0EF3               	movlw	low STR_128
  7198  001F1E  6E1A               	movwf	?_putsUSART,c
  7199  001F20  ECE6  F025         	call	_putsUSART	;wreg free
  7200                           
  7201                           ;main.c: 1291: } else {
  7202  001F24  D006               	goto	l13296
  7203  001F26                     l13294:
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;main.c: 1293: putsUSART((char *) "\a");
  7207  001F26  0E7F               	movlw	high STR_129
  7208  001F28  6E1B               	movwf	?_putsUSART+1,c
  7209  001F2A  0EF1               	movlw	low STR_129
  7210  001F2C  6E1A               	movwf	?_putsUSART,c
  7211  001F2E  ECE6  F025         	call	_putsUSART	;wreg free
  7212  001F32                     l13296:
  7213                           
  7214                           ;main.c: 1294: }
  7215                           ;main.c: 1297: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7216  001F32  0101               	movlb	1	; () banked
  7217  001F34  0E01               	movlw	high _cmdbuf
  7218  001F36  6E1A               	movwf	?_memset+1,c
  7219  001F38  0E20               	movlw	low _cmdbuf
  7220  001F3A  6E19               	movwf	?_memset,c
  7221  001F3C  6A1C               	clrf	?_memset+3,c
  7222  001F3E  6A1B               	clrf	?_memset+2,c
  7223  001F40  6A1E               	clrf	?_memset+5,c
  7224  001F42  0E50               	movlw	80
  7225  001F44  6E1D               	movwf	?_memset+4,c
  7226  001F46  EC57  F028         	call	_memset	;wreg free
  7227                           
  7228                           ;main.c: 1298: pos = 0;
  7229  001F4A  0100               	movlb	0	; () banked
  7230  001F4C  6BD8               	clrf	_pos& (0+255),b
  7231  001F4E                     l13300:
  7232                           
  7233                           ;main.c: 1300: }
  7234                           ;main.c: 1303: (INTCONbits.GIE = 1);
  7235  001F4E  8EF2               	bsf	intcon,7,c	;volatile
  7236  001F50                     l670:
  7237  001F50  0012               	return	
  7238  001F52                     __end_of_doModeSLCAN:
  7239                           	opt stack 0
  7240  001F52                     PL82:
  7241                           	opt stack 24
  7242  001F52  90D8               	bcf	status,0,c
  7243  001F54  3786               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7244  001F56  3787               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7245  001F58  3788               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7246  001F5A  3789               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7247  001F5C  0012               	return	
  7248  001F5E                     __end_ofPL82:
  7249                           	opt stack 0
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           indf0	equ	0xFEF
  7258                           postinc0	equ	0xFEE
  7259                           fsr0h	equ	0xFEA
  7260                           fsr0l	equ	0xFE9
  7261                           wreg	equ	0xFE8
  7262                           indf1	equ	0xFE7
  7263                           postinc1	equ	0xFE6
  7264                           postdec1	equ	0xFE5
  7265                           fsr1h	equ	0xFE2
  7266                           fsr1l	equ	0xFE1
  7267                           indf2	equ	0xFDF
  7268                           postinc2	equ	0xFDE
  7269                           postdec2	equ	0xFDD
  7270                           plusw2	equ	0xFDB
  7271                           fsr2h	equ	0xFDA
  7272                           fsr2l	equ	0xFD9
  7273                           status	equ	0xFD8
  7274                           
  7275 ;; *************** function _hexStringToBytes *****************
  7276 ;; Defined at:
  7277 ;;		line 31 in file "hexutils.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  buf             2   28[COMRAM] PTR unsigned char 
  7280 ;;		 -> wrkbuf(80), 
  7281 ;;  size            1   30[COMRAM] unsigned char 
  7282 ;;  inhex           2   31[COMRAM] PTR unsigned char 
  7283 ;;		 -> cmdbuf(80), 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  i               2   40[COMRAM] int 
  7286 ;;  p               2   38[COMRAM] PTR unsigned char 
  7287 ;;		 -> cmdbuf(80), 
  7288 ;;  len             2   36[COMRAM] int 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      unsigned char 
  7291 ;; Registers used:
  7292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : F/1
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7298 ;;      Params:         5       0       0       0       0       0       0
  7299 ;;      Locals:         6       0       0       0       0       0       0
  7300 ;;      Temps:          3       0       0       0       0       0       0
  7301 ;;      Totals:        14       0       0       0       0       0       0
  7302 ;;Total ram usage:       14 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    3
  7305 ;; This function calls:
  7306 ;;		_strlen
  7307 ;;		_nibbleFromChar
  7308 ;; This function is called by:
  7309 ;;		_doModeSLCAN
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text3
  7314  00430A                     __ptext3:
  7315                           	opt stack 0
  7316  00430A                     _hexStringToBytes:
  7317                           	opt stack 26
  7318                           
  7319                           ; BSR set to: 1
  7320                           ;hexutils.c: 32: uint8_t *p;
  7321                           ;hexutils.c: 33: int len, i;
  7322                           ;hexutils.c: 35: len = strlen(inhex) / 2;
  7323                           
  7324                           ;incstack = 0
  7325                           ;incstack = 0
  7326  00430A  C020  F019         	movff	hexStringToBytes@inhex,?_strlen
  7327  00430E  C021  F01A         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7328  004312  EC82  F027         	call	_strlen	;wreg free
  7329  004316  90D8               	bcf	status,0,c
  7330  004318  301A               	rrcf	?_strlen+1,w,c
  7331  00431A  6E26               	movwf	hexStringToBytes@len+1,c
  7332  00431C  3019               	rrcf	?_strlen,w,c
  7333  00431E  6E25               	movwf	hexStringToBytes@len,c
  7334                           
  7335                           ;hexutils.c: 36: if ( len > size ) return 0;
  7336  004320  501F               	movf	hexStringToBytes@size,w,c
  7337  004322  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7338  004324  6A23               	clrf	(??_hexStringToBytes+1)& (0+255),c
  7339  004326  5023               	movf	??_hexStringToBytes+1,w,c
  7340  004328  0A80               	xorlw	128
  7341  00432A  6E24               	movwf	(??_hexStringToBytes+2)& (0+255),c
  7342  00432C  5025               	movf	hexStringToBytes@len,w,c
  7343  00432E  5C22               	subwf	??_hexStringToBytes,w,c
  7344  004330  5026               	movf	hexStringToBytes@len+1,w,c
  7345  004332  0A80               	xorlw	128
  7346  004334  5824               	subwfb	(??_hexStringToBytes+2)& (0+255),w,c
  7347  004336  E202               	bc	l1493
  7348  004338  0E00               	movlw	0
  7349  00433A  D033               	goto	l1494
  7350  00433C                     l1493:
  7351                           
  7352                           ;hexutils.c: 37: for (i=0, p = (uint8_t *)inhex; i<len; i++) {
  7353  00433C  6A29               	clrf	hexStringToBytes@i,c
  7354  00433E  6A2A               	clrf	hexStringToBytes@i+1,c
  7355  004340  C020  F027         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7356  004344  C021  F028         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7357  004348  D022               	goto	l11828
  7358  00434A                     l11822:
  7359                           
  7360                           ;hexutils.c: 38: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
  7361  00434A  5029               	movf	hexStringToBytes@i,w,c
  7362  00434C  241D               	addwf	hexStringToBytes@buf,w,c
  7363  00434E  6ED9               	movwf	fsr2l,c
  7364  004350  502A               	movf	hexStringToBytes@i+1,w,c
  7365  004352  201E               	addwfc	hexStringToBytes@buf+1,w,c
  7366  004354  6EDA               	movwf	fsr2h,c
  7367  004356  EE10 F001          	lfsr	1,1
  7368  00435A  5027               	movf	hexStringToBytes@p,w,c
  7369  00435C  26E1               	addwf	fsr1l,f,c
  7370  00435E  5028               	movf	hexStringToBytes@p+1,w,c
  7371  004360  22E2               	addwfc	fsr1h,f,c
  7372  004362  50E7               	movf	indf1,w,c
  7373  004364  EC25  F027         	call	_nibbleFromChar
  7374  004368  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7375  00436A  C027  FFE1         	movff	hexStringToBytes@p,fsr1l
  7376  00436E  C028  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7377  004372  50E7               	movf	indf1,w,c
  7378  004374  EC25  F027         	call	_nibbleFromChar
  7379  004378  6E23               	movwf	(??_hexStringToBytes+1)& (0+255),c
  7380  00437A  3823               	swapf	??_hexStringToBytes+1,w,c
  7381  00437C  0BF0               	andlw	240
  7382  00437E  1022               	iorwf	??_hexStringToBytes,w,c
  7383  004380  6EDF               	movwf	indf2,c
  7384                           
  7385                           ;hexutils.c: 39: p += 2;
  7386  004382  0E02               	movlw	2
  7387  004384  2627               	addwf	hexStringToBytes@p,f,c
  7388  004386  0E00               	movlw	0
  7389  004388  2228               	addwfc	hexStringToBytes@p+1,f,c
  7390  00438A  4A29               	infsnz	hexStringToBytes@i,f,c
  7391  00438C  2A2A               	incf	hexStringToBytes@i+1,f,c
  7392  00438E                     l11828:
  7393  00438E  502A               	movf	hexStringToBytes@i+1,w,c
  7394  004390  0A80               	xorlw	128
  7395  004392  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7396  004394  5025               	movf	hexStringToBytes@len,w,c
  7397  004396  5C29               	subwf	hexStringToBytes@i,w,c
  7398  004398  5026               	movf	hexStringToBytes@len+1,w,c
  7399  00439A  0A80               	xorlw	128
  7400  00439C  5822               	subwfb	??_hexStringToBytes& (0+255),w,c
  7401  00439E  E3D5               	bnc	l11822
  7402                           
  7403                           ;hexutils.c: 40: }
  7404                           ;hexutils.c: 42: return i;
  7405  0043A0  5029               	movf	hexStringToBytes@i,w,c
  7406  0043A2                     l1494:
  7407  0043A2  0012               	return	
  7408  0043A4                     __end_of_hexStringToBytes:
  7409                           	opt stack 0
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           intcon	equ	0xFF2
  7417                           indf0	equ	0xFEF
  7418                           postinc0	equ	0xFEE
  7419                           fsr0h	equ	0xFEA
  7420                           fsr0l	equ	0xFE9
  7421                           wreg	equ	0xFE8
  7422                           indf1	equ	0xFE7
  7423                           postinc1	equ	0xFE6
  7424                           postdec1	equ	0xFE5
  7425                           fsr1h	equ	0xFE2
  7426                           fsr1l	equ	0xFE1
  7427                           indf2	equ	0xFDF
  7428                           postinc2	equ	0xFDE
  7429                           postdec2	equ	0xFDD
  7430                           plusw2	equ	0xFDB
  7431                           fsr2h	equ	0xFDA
  7432                           fsr2l	equ	0xFD9
  7433                           status	equ	0xFD8
  7434                           
  7435 ;; *************** function _nibbleFromChar *****************
  7436 ;; Defined at:
  7437 ;;		line 16 in file "hexutils.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;  c               1    wreg     unsigned char 
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  c               1   24[COMRAM] unsigned char 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  1    wreg      unsigned char 
  7444 ;; Registers used:
  7445 ;;		wreg, status,2, status,0
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/1
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7451 ;;      Params:         0       0       0       0       0       0       0
  7452 ;;      Locals:         1       0       0       0       0       0       0
  7453 ;;      Temps:          0       0       0       0       0       0       0
  7454 ;;      Totals:         1       0       0       0       0       0       0
  7455 ;;Total ram usage:        1 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    2
  7458 ;; This function calls:
  7459 ;;		Nothing
  7460 ;; This function is called by:
  7461 ;;		_hexStringToBytes
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text4
  7466  004E4A                     __ptext4:
  7467                           	opt stack 0
  7468  004E4A                     _nibbleFromChar:
  7469                           	opt stack 26
  7470                           
  7471                           ;incstack = 0
  7472                           ;incstack = 0
  7473                           ;nibbleFromChar@c stored from wreg
  7474  004E4A  CFE8 F019          	movff	wreg,nibbleFromChar@c
  7475                           
  7476                           ;hexutils.c: 17: if(c >= '0' && c <= '9') return c - '0';
  7477  004E4E  0E2F               	movlw	47
  7478  004E50  6419               	cpfsgt	nibbleFromChar@c,c
  7479  004E52  D006               	goto	l12272
  7480  004E54  0E3A               	movlw	58
  7481  004E56  6019               	cpfslt	nibbleFromChar@c,c
  7482  004E58  D003               	goto	l12272
  7483  004E5A  5019               	movf	nibbleFromChar@c,w,c
  7484  004E5C  0FD0               	addlw	208
  7485  004E5E  D013               	goto	l1488
  7486  004E60                     l12272:
  7487                           
  7488                           ;hexutils.c: 18: if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  7489  004E60  0E60               	movlw	96
  7490  004E62  6419               	cpfsgt	nibbleFromChar@c,c
  7491  004E64  D006               	goto	l12280
  7492  004E66  0E67               	movlw	103
  7493  004E68  6019               	cpfslt	nibbleFromChar@c,c
  7494  004E6A  D003               	goto	l12280
  7495  004E6C  5019               	movf	nibbleFromChar@c,w,c
  7496  004E6E  0FA9               	addlw	169
  7497  004E70  D00A               	goto	l1488
  7498  004E72                     l12280:
  7499                           
  7500                           ;hexutils.c: 19: if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  7501  004E72  0E40               	movlw	64
  7502  004E74  6419               	cpfsgt	nibbleFromChar@c,c
  7503  004E76  D006               	goto	l12288
  7504  004E78  0E47               	movlw	71
  7505  004E7A  6019               	cpfslt	nibbleFromChar@c,c
  7506  004E7C  D003               	goto	l12288
  7507  004E7E  5019               	movf	nibbleFromChar@c,w,c
  7508  004E80  0FC9               	addlw	201
  7509  004E82  D001               	goto	l1488
  7510  004E84                     l12288:
  7511                           
  7512                           ;hexutils.c: 20: return 255;
  7513  004E84  0EFF               	movlw	255
  7514  004E86                     l1488:
  7515  004E86  0012               	return	
  7516  004E88                     __end_of_nibbleFromChar:
  7517                           	opt stack 0
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           indf0	equ	0xFEF
  7526                           postinc0	equ	0xFEE
  7527                           fsr0h	equ	0xFEA
  7528                           fsr0l	equ	0xFE9
  7529                           wreg	equ	0xFE8
  7530                           indf1	equ	0xFE7
  7531                           postinc1	equ	0xFE6
  7532                           postdec1	equ	0xFE5
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           plusw2	equ	0xFDB
  7539                           fsr2h	equ	0xFDA
  7540                           fsr2l	equ	0xFD9
  7541                           status	equ	0xFD8
  7542                           
  7543 ;; *************** function _receivePrintEventSLCAN *****************
  7544 ;; Defined at:
  7545 ;;		line 1737 in file "main.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;		None
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  id              4   17[BANK0 ] unsigned long 
  7550 ;;  i               2   21[BANK0 ] int 
  7551 ;;  dlc             1   16[BANK0 ] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  1    wreg      enum E15660
  7554 ;; Registers used:
  7555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : F/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7561 ;;      Params:         0       0       0       0       0       0       0
  7562 ;;      Locals:         0       7       0       0       0       0       0
  7563 ;;      Temps:          0       3       0       0       0       0       0
  7564 ;;      Totals:         0      10       0       0       0       0       0
  7565 ;;Total ram usage:       10 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    5
  7568 ;; This function calls:
  7569 ;;		_putsUSART
  7570 ;;		_WriteUSART
  7571 ;;		_strlen
  7572 ;;		_getCANFrame
  7573 ;;		_ultoa
  7574 ;;		_itoa
  7575 ;; This function is called by:
  7576 ;;		_doModeSLCAN
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text5
  7581  002856                     __ptext5:
  7582                           	opt stack 0
  7583  002856                     _receivePrintEventSLCAN:
  7584                           	opt stack 24
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;main.c: 1738: int i;
  7588                           ;main.c: 1739: uint8_t dlc;
  7589                           ;main.c: 1740: uint32_t id;
  7590                           ;main.c: 1742: if (getCANFrame(&id, &dlc, vscpData)) {
  7591                           
  7592                           ;incstack = 0
  7593                           ;incstack = 0
  7594  002856  0E70               	movlw	low receivePrintEventSLCAN@dlc
  7595  002858  6E2C               	movwf	?_getCANFrame,c
  7596  00285A  0E40               	movlw	low _vscpData
  7597  00285C  6E2D               	movwf	?_getCANFrame+1,c
  7598  00285E  0E00               	movlw	high _vscpData
  7599  002860  6E2E               	movwf	?_getCANFrame+2,c
  7600  002862  0E0F               	movlw	15
  7601  002864  6E2E               	movwf	?_getCANFrame+2,c
  7602  002866  0E5F               	movlw	__accesstop+-1
  7603  002868  642D               	cpfsgt	?_getCANFrame+1,c
  7604  00286A  6A2E               	clrf	?_getCANFrame+2,c
  7605  00286C  0E71               	movlw	receivePrintEventSLCAN@id& (0+255)
  7606  00286E  EC40  F028         	call	_getCANFrame
  7607  002872  0900               	iorlw	0
  7608  002874  E101 D0B0          	bz	l960
  7609                           
  7610                           ;main.c: 1745: cntRxFrames++;
  7611  002878  0101               	movlb	1	; () banked
  7612  00287A  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7613  00287C  0E00               	movlw	0
  7614  00287E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7615  002880  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7616  002882  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7617                           
  7618                           ;main.c: 1746: cntRxBytes += dlc;
  7619  002884  0100               	movlb	0	; () banked
  7620  002886  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7621  002888  0101               	movlb	1	; () banked
  7622  00288A  2708               	addwf	_cntRxBytes& (0+255),f,b
  7623  00288C  0E00               	movlw	0
  7624  00288E  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7625  002890  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7626  002892  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7627  002894                     l933:
  7628  002894  A2AC               	btfss	4012,1,c	;volatile
  7629  002896  D7FE               	goto	l933
  7630                           
  7631                           ;main.c: 1749: WriteUSART('T');
  7632  002898  0E54               	movlw	84
  7633  00289A  ECC4  F028         	call	_WriteUSART
  7634                           
  7635                           ;main.c: 1751: ultoa(wrkbuf, id, 16);
  7636  00289E  0E01               	movlw	high _wrkbuf
  7637  0028A0  0100               	movlb	0	; () banked
  7638  0028A2  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7639  0028A4  0E70               	movlw	low _wrkbuf
  7640  0028A6  6F60               	movwf	?_ultoa& (0+255),b
  7641  0028A8  C071  F062         	movff	receivePrintEventSLCAN@id,?_ultoa+2
  7642  0028AC  C072  F063         	movff	receivePrintEventSLCAN@id+1,?_ultoa+3
  7643  0028B0  C073  F064         	movff	receivePrintEventSLCAN@id+2,?_ultoa+4
  7644  0028B4  C074  F065         	movff	receivePrintEventSLCAN@id+3,?_ultoa+5
  7645  0028B8  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7646  0028BA  0E10               	movlw	16
  7647  0028BC  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7648  0028BE  EC63  F01C         	call	_ultoa	;wreg free
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;main.c: 1753: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7652  0028C2  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7653  0028C4  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7654  0028C6                     l938:
  7655                           
  7656                           ; BSR set to: 0
  7657  0028C6  A2AC               	btfss	4012,1,c	;volatile
  7658  0028C8  D7FE               	goto	l938
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;main.c: 1755: WriteUSART('0');
  7662  0028CA  0E30               	movlw	48
  7663  0028CC  ECC4  F028         	call	_WriteUSART
  7664                           
  7665                           ; BSR set to: 0
  7666  0028D0  D884               	call	PL88	;call to abstracted procedure
  7667  0028D2  B4D8               	btfsc	status,2,c
  7668  0028D4  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7669  0028D6  E3F7               	bnc	l938
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;main.c: 1756: }
  7673                           ;main.c: 1757: putsUSART(wrkbuf);
  7674  0028D8  0101               	movlb	1	; () banked
  7675  0028DA  0E01               	movlw	high _wrkbuf
  7676  0028DC  6E1B               	movwf	?_putsUSART+1,c
  7677  0028DE  0E70               	movlw	low _wrkbuf
  7678  0028E0  6E1A               	movwf	?_putsUSART,c
  7679  0028E2  ECE6  F025         	call	_putsUSART	;wreg free
  7680                           
  7681                           ;main.c: 1760: itoa(wrkbuf, dlc, 16);
  7682  0028E6  0E01               	movlw	high _wrkbuf
  7683  0028E8  6E2A               	movwf	?_itoa+1,c
  7684  0028EA  0E70               	movlw	low _wrkbuf
  7685  0028EC  6E29               	movwf	?_itoa,c
  7686  0028EE  0100               	movlb	0	; () banked
  7687  0028F0  C070  F02B         	movff	receivePrintEventSLCAN@dlc,?_itoa+2
  7688  0028F4  6A2C               	clrf	?_itoa+3,c
  7689  0028F6  6A2E               	clrf	?_itoa+5,c
  7690  0028F8  0E10               	movlw	16
  7691  0028FA  6E2D               	movwf	?_itoa+4,c
  7692  0028FC  ECD9  F027         	call	_itoa	;wreg free
  7693  002900                     l941:
  7694  002900  A2AC               	btfss	4012,1,c	;volatile
  7695  002902  D7FE               	goto	l941
  7696                           
  7697                           ;main.c: 1762: WriteUSART(wrkbuf[0]);
  7698  002904  0101               	movlb	1	; () banked
  7699  002906  5170               	movf	_wrkbuf& (0+255),w,b
  7700  002908  ECC4  F028         	call	_WriteUSART
  7701                           
  7702                           ;main.c: 1765: for (i = 0; i < dlc; i++) {
  7703  00290C  0100               	movlb	0	; () banked
  7704  00290E  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7705  002910  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7706  002912  D02B               	goto	l13942
  7707  002914                     l13930:
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;main.c: 1766: itoa(wrkbuf, vscpData[i], 16);
  7711  002914  0E01               	movlw	high _wrkbuf
  7712  002916  6E2A               	movwf	?_itoa+1,c
  7713  002918  0E70               	movlw	low _wrkbuf
  7714  00291A  6E29               	movwf	?_itoa,c
  7715  00291C  0100               	movlb	0	; () banked
  7716  00291E  5175               	movf	receivePrintEventSLCAN@i& (0+255),w,b
  7717  002920  0F40               	addlw	low _vscpData
  7718  002922  6ED9               	movwf	fsr2l,c
  7719  002924  6ADA               	clrf	fsr2h,c
  7720  002926  50DF               	movf	indf2,w,c
  7721  002928  6E2B               	movwf	?_itoa+2,c
  7722  00292A  6A2C               	clrf	?_itoa+3,c
  7723  00292C  6A2E               	clrf	?_itoa+5,c
  7724  00292E  0E10               	movlw	16
  7725  002930  6E2D               	movwf	?_itoa+4,c
  7726  002932  ECD9  F027         	call	_itoa	;wreg free
  7727                           
  7728                           ;main.c: 1768: if (2 != strlen(wrkbuf)) {
  7729  002936  0101               	movlb	1	; () banked
  7730  002938  0E01               	movlw	high _wrkbuf
  7731  00293A  6E1A               	movwf	?_strlen+1,c
  7732  00293C  0E70               	movlw	low _wrkbuf
  7733  00293E  6E19               	movwf	?_strlen,c
  7734  002940  EC82  F027         	call	_strlen	;wreg free
  7735  002944  5019               	movf	?_strlen,w,c
  7736  002946  0A02               	xorlw	2
  7737  002948  101A               	iorwf	?_strlen+1,w,c
  7738  00294A  E005               	bz	l13938
  7739  00294C                     l947:
  7740  00294C  A2AC               	btfss	4012,1,c	;volatile
  7741  00294E  D7FE               	goto	l947
  7742                           
  7743                           ;main.c: 1770: WriteUSART('0');
  7744  002950  0E30               	movlw	48
  7745  002952  ECC4  F028         	call	_WriteUSART
  7746  002956                     l13938:
  7747                           
  7748                           ;main.c: 1771: }
  7749                           ;main.c: 1773: putsUSART(wrkbuf);
  7750  002956  0101               	movlb	1	; () banked
  7751  002958  0E01               	movlw	high _wrkbuf
  7752  00295A  6E1B               	movwf	?_putsUSART+1,c
  7753  00295C  0E70               	movlw	low _wrkbuf
  7754  00295E  6E1A               	movwf	?_putsUSART,c
  7755  002960  ECE6  F025         	call	_putsUSART	;wreg free
  7756  002964  0100               	movlb	0	; () banked
  7757  002966  4B75               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7758  002968  2B76               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7759  00296A                     l13942:
  7760                           
  7761                           ; BSR set to: 0
  7762  00296A  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7763  00296C  6F6D               	movwf	??_receivePrintEventSLCAN& (0+255),b
  7764  00296E  6B6E               	clrf	(??_receivePrintEventSLCAN+1)& (0+255),b
  7765  002970  5176               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7766  002972  0A80               	xorlw	128
  7767  002974  6F6F               	movwf	(??_receivePrintEventSLCAN+2)& (0+255),b
  7768  002976  516D               	movf	??_receivePrintEventSLCAN& (0+255),w,b
  7769  002978  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7770  00297A  516E               	movf	(??_receivePrintEventSLCAN+1)& (0+255),w,b
  7771  00297C  0A80               	xorlw	128
  7772  00297E  596F               	subwfb	(??_receivePrintEventSLCAN+2)& (0+255),w,b
  7773  002980  E3C9               	bnc	l13930
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;main.c: 1774: }
  7777                           ;main.c: 1777: if (nTimeStamp) {
  7778  002982  503D               	movf	_nTimeStamp,w,c
  7779  002984  E024               	bz	l957
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;main.c: 1778: ultoa(wrkbuf, timer, 16);
  7783  002986  0E01               	movlw	high _wrkbuf
  7784  002988  0100               	movlb	0	; () banked
  7785  00298A  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7786  00298C  0E70               	movlw	low _wrkbuf
  7787  00298E  6F60               	movwf	?_ultoa& (0+255),b
  7788  002990  C0CF  F062         	movff	_timer,?_ultoa+2	;volatile
  7789  002994  C0D0  F063         	movff	_timer+1,?_ultoa+3	;volatile
  7790  002998  C0D1  F064         	movff	_timer+2,?_ultoa+4	;volatile
  7791  00299C  C0D2  F065         	movff	_timer+3,?_ultoa+5	;volatile
  7792  0029A0  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7793  0029A2  0E10               	movlw	16
  7794  0029A4  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7795  0029A6  EC63  F01C         	call	_ultoa	;wreg free
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;main.c: 1780: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7799  0029AA  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7800  0029AC  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7801  0029AE                     l954:
  7802                           
  7803                           ; BSR set to: 0
  7804  0029AE  A2AC               	btfss	4012,1,c	;volatile
  7805  0029B0  D7FE               	goto	l954
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;main.c: 1782: WriteUSART('0');
  7809  0029B2  0E30               	movlw	48
  7810  0029B4  ECC4  F028         	call	_WriteUSART
  7811                           
  7812                           ; BSR set to: 0
  7813  0029B8  D810               	call	PL88	;call to abstracted procedure
  7814  0029BA  B4D8               	btfsc	status,2,c
  7815  0029BC  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7816  0029BE  E3F7               	bnc	l954
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;main.c: 1783: }
  7820                           ;main.c: 1784: putsUSART(wrkbuf);
  7821  0029C0  0101               	movlb	1	; () banked
  7822  0029C2  0E01               	movlw	high _wrkbuf
  7823  0029C4  6E1B               	movwf	?_putsUSART+1,c
  7824  0029C6  0E70               	movlw	low _wrkbuf
  7825  0029C8  6E1A               	movwf	?_putsUSART,c
  7826  0029CA  ECE6  F025         	call	_putsUSART	;wreg free
  7827  0029CE                     l957:
  7828  0029CE  A2AC               	btfss	4012,1,c	;volatile
  7829  0029D0  D7FE               	goto	l957
  7830                           
  7831                           ;main.c: 1788: WriteUSART(0x0d);
  7832  0029D2  0E0D               	movlw	13
  7833  0029D4  ECC4  F028         	call	_WriteUSART
  7834  0029D8                     l960:
  7835  0029D8  0012               	return	
  7836  0029DA                     __end_of_receivePrintEventSLCAN:
  7837                           	opt stack 0
  7838  0029DA                     PL88:
  7839                           	opt stack 24
  7840  0029DA  0100               	movlb	0	; () banked
  7841  0029DC  4B75               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7842  0029DE  2B76               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7843  0029E0  5176               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7844  0029E2  0A80               	xorlw	128
  7845  0029E4  0F80               	addlw	-128
  7846  0029E6  0CB8               	retlw	184
  7847  0029E8                     __end_ofPL88:
  7848                           	opt stack 0
  7849                           tblptru	equ	0xFF8
  7850                           tblptrh	equ	0xFF7
  7851                           tblptrl	equ	0xFF6
  7852                           tablat	equ	0xFF5
  7853                           prodh	equ	0xFF4
  7854                           prodl	equ	0xFF3
  7855                           intcon	equ	0xFF2
  7856                           indf0	equ	0xFEF
  7857                           postinc0	equ	0xFEE
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           indf1	equ	0xFE7
  7862                           postinc1	equ	0xFE6
  7863                           postdec1	equ	0xFE5
  7864                           fsr1h	equ	0xFE2
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           plusw2	equ	0xFDB
  7870                           fsr2h	equ	0xFDA
  7871                           fsr2l	equ	0xFD9
  7872                           status	equ	0xFD8
  7873                           
  7874 ;; *************** function _ultoa *****************
  7875 ;; Defined at:
  7876 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  7879 ;;		 -> wrkbuf(80), 
  7880 ;;  val             4    2[BANK0 ] unsigned long 
  7881 ;;  base            2    6[BANK0 ] int 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  v               4    8[BANK0 ] unsigned long 
  7884 ;;  c               1   12[BANK0 ] unsigned char 
  7885 ;; Return value:  Size  Location     Type
  7886 ;;                  2    0[BANK0 ] PTR unsigned char 
  7887 ;; Registers used:
  7888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7889 ;; Tracked objects:
  7890 ;;		On entry : F/0
  7891 ;;		On exit  : F/0
  7892 ;;		Unchanged: 0/0
  7893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7894 ;;      Params:         0       8       0       0       0       0       0
  7895 ;;      Locals:         0       5       0       0       0       0       0
  7896 ;;      Temps:          0       0       0       0       0       0       0
  7897 ;;      Totals:         0      13       0       0       0       0       0
  7898 ;;Total ram usage:       13 bytes
  7899 ;; Hardware stack levels used:    1
  7900 ;; Hardware stack levels required when called:    3
  7901 ;; This function calls:
  7902 ;;		___lldiv
  7903 ;;		___llmod
  7904 ;; This function is called by:
  7905 ;;		_receivePrintEventSLCAN
  7906 ;; This function uses a non-reentrant model
  7907 ;;
  7908                           
  7909                           	psect	text6
  7910  0038C6                     __ptext6:
  7911                           	opt stack 0
  7912  0038C6                     _ultoa:
  7913                           	opt stack 25
  7914                           
  7915                           ; BSR set to: 0
  7916                           
  7917                           ;incstack = 0
  7918                           ;incstack = 0
  7919  0038C6  C062  F068         	movff	ultoa@val,ultoa@v
  7920  0038CA  C063  F069         	movff	ultoa@val+1,ultoa@v+1
  7921  0038CE  C064  F06A         	movff	ultoa@val+2,ultoa@v+2
  7922  0038D2  C065  F06B         	movff	ultoa@val+3,ultoa@v+3
  7923  0038D6                     l13968:
  7924                           
  7925                           ; BSR set to: 0
  7926  0038D6  C068  F019         	movff	ultoa@v,?___lldiv
  7927  0038DA  C069  F01A         	movff	ultoa@v+1,?___lldiv+1
  7928  0038DE  C06A  F01B         	movff	ultoa@v+2,?___lldiv+2
  7929  0038E2  C06B  F01C         	movff	ultoa@v+3,?___lldiv+3
  7930  0038E6  D858               	call	PL72	;call to abstracted procedure
  7931  0038E8  ECEC  F023         	call	___lldiv	;wreg free
  7932  0038EC  C01C  F06B         	movff	?___lldiv+3,ultoa@v+3
  7933  0038F0  C01B  F06A         	movff	?___lldiv+2,ultoa@v+2
  7934  0038F4  C01A  F069         	movff	?___lldiv+1,ultoa@v+1
  7935  0038F8  C019  F068         	movff	?___lldiv,ultoa@v
  7936                           
  7937                           ; BSR set to: 0
  7938  0038FC  4B60               	infsnz	ultoa@buf& (0+255),f,b
  7939  0038FE  2B61               	incf	(ultoa@buf+1)& (0+255),f,b
  7940                           
  7941                           ; BSR set to: 0
  7942  003900  516B               	movf	(ultoa@v+3)& (0+255),w,b
  7943  003902  1168               	iorwf	ultoa@v& (0+255),w,b
  7944  003904  1169               	iorwf	(ultoa@v+1)& (0+255),w,b
  7945  003906  116A               	iorwf	(ultoa@v+2)& (0+255),w,b
  7946  003908  E1E6               	bnz	l13968
  7947                           
  7948                           ; BSR set to: 0
  7949  00390A  C060  FFD9         	movff	ultoa@buf,fsr2l
  7950  00390E  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  7951  003912  6ADF               	clrf	indf2,c
  7952                           
  7953                           ; BSR set to: 0
  7954  003914  0760               	decf	ultoa@buf& (0+255),f,b
  7955  003916  A0D8               	btfss	status,0,c
  7956  003918  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  7957  00391A                     l13978:
  7958                           
  7959                           ; BSR set to: 0
  7960  00391A  C062  F026         	movff	ultoa@val,?___llmod
  7961  00391E  C063  F027         	movff	ultoa@val+1,?___llmod+1
  7962  003922  C064  F028         	movff	ultoa@val+2,?___llmod+2
  7963  003926  C065  F029         	movff	ultoa@val+3,?___llmod+3
  7964  00392A  C066  F02A         	movff	ultoa@base,?___llmod+4
  7965  00392E  C067  F02B         	movff	ultoa@base+1,?___llmod+5
  7966  003932  0E00               	movlw	0
  7967  003934  BE2B               	btfsc	?___llmod+5,7,c
  7968  003936  0EFF               	movlw	-1
  7969  003938  6E2C               	movwf	?___llmod+6,c
  7970  00393A  6E2D               	movwf	?___llmod+7,c
  7971  00393C  EC2E  F025         	call	___llmod	;wreg free
  7972  003940  5026               	movf	?___llmod,w,c
  7973  003942  6F6C               	movwf	ultoa@c& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976  003944  C062  F019         	movff	ultoa@val,?___lldiv
  7977  003948  C063  F01A         	movff	ultoa@val+1,?___lldiv+1
  7978  00394C  C064  F01B         	movff	ultoa@val+2,?___lldiv+2
  7979  003950  C065  F01C         	movff	ultoa@val+3,?___lldiv+3
  7980  003954  D821               	call	PL72	;call to abstracted procedure
  7981  003956  ECEC  F023         	call	___lldiv	;wreg free
  7982  00395A  C01C  F065         	movff	?___lldiv+3,ultoa@val+3
  7983  00395E  C01B  F064         	movff	?___lldiv+2,ultoa@val+2
  7984  003962  C01A  F063         	movff	?___lldiv+1,ultoa@val+1
  7985  003966  C019  F062         	movff	?___lldiv,ultoa@val
  7986                           
  7987                           ; BSR set to: 0
  7988  00396A  0E09               	movlw	9
  7989  00396C  656C               	cpfsgt	ultoa@c& (0+255),b
  7990  00396E  D002               	goto	l2293
  7991                           
  7992                           ; BSR set to: 0
  7993  003970  0E07               	movlw	7
  7994  003972  276C               	addwf	ultoa@c& (0+255),f,b
  7995  003974                     l2293:
  7996                           
  7997                           ; BSR set to: 0
  7998  003974  0E30               	movlw	48
  7999  003976  276C               	addwf	ultoa@c& (0+255),f,b
  8000                           
  8001                           ; BSR set to: 0
  8002  003978  C060  FFD9         	movff	ultoa@buf,fsr2l
  8003  00397C  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  8004  003980  C06C  FFDF         	movff	ultoa@c,indf2
  8005                           
  8006                           ; BSR set to: 0
  8007  003984  0760               	decf	ultoa@buf& (0+255),f,b
  8008  003986  A0D8               	btfss	status,0,c
  8009  003988  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  8010                           
  8011                           ; BSR set to: 0
  8012  00398A  5165               	movf	(ultoa@val+3)& (0+255),w,b
  8013  00398C  1162               	iorwf	ultoa@val& (0+255),w,b
  8014  00398E  1163               	iorwf	(ultoa@val+1)& (0+255),w,b
  8015  003990  1164               	iorwf	(ultoa@val+2)& (0+255),w,b
  8016  003992  B4D8               	btfsc	status,2,c
  8017                           
  8018                           ; BSR set to: 0
  8019  003994  0012               	return	
  8020  003996  D7C1               	goto	l13978
  8021  003998                     __end_of_ultoa:
  8022                           	opt stack 0
  8023  003998                     PL72:
  8024                           	opt stack 25
  8025  003998  C066  F01D         	movff	ultoa@base,?___lldiv+4
  8026  00399C  C067  F01E         	movff	ultoa@base+1,?___lldiv+5
  8027  0039A0  0E00               	movlw	0
  8028  0039A2  BE1E               	btfsc	?___lldiv+5,7,c
  8029  0039A4  0EFF               	movlw	-1
  8030  0039A6  6E1F               	movwf	?___lldiv+6,c
  8031  0039A8  6E20               	movwf	?___lldiv+7,c
  8032  0039AA  0012               	return	
  8033  0039AC                     __end_ofPL72:
  8034                           	opt stack 0
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           indf0	equ	0xFEF
  8043                           postinc0	equ	0xFEE
  8044                           fsr0h	equ	0xFEA
  8045                           fsr0l	equ	0xFE9
  8046                           wreg	equ	0xFE8
  8047                           indf1	equ	0xFE7
  8048                           postinc1	equ	0xFE6
  8049                           postdec1	equ	0xFE5
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           plusw2	equ	0xFDB
  8056                           fsr2h	equ	0xFDA
  8057                           fsr2l	equ	0xFD9
  8058                           status	equ	0xFD8
  8059                           
  8060 ;; *************** function _doModeVscp *****************
  8061 ;; Defined at:
  8062 ;;		line 945 in file "main.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;		None
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  c               1   48[COMRAM] unsigned char 
  8067 ;; Return value:  Size  Location     Type
  8068 ;;		None               void
  8069 ;; Registers used:
  8070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8071 ;; Tracked objects:
  8072 ;;		On entry : F/0
  8073 ;;		On exit  : C/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8076 ;;      Params:         0       0       0       0       0       0       0
  8077 ;;      Locals:         1       0       0       0       0       0       0
  8078 ;;      Temps:          0       0       0       0       0       0       0
  8079 ;;      Totals:         1       0       0       0       0       0       0
  8080 ;;Total ram usage:        1 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    6
  8083 ;; This function calls:
  8084 ;;		_fifo_read
  8085 ;;		_ECANSetOperationMode
  8086 ;;		_receivePrintEventCANAL
  8087 ;;		_calcCRC
  8088 ;;		_sendVSCPDriverErrorFrame
  8089 ;;		_sendVSCPDriverAck
  8090 ;;		_receiveVSCPModeCanalMsg
  8091 ;;		_sendVSCPDriverNack
  8092 ;;		_sendVSCPDriverCommandReply
  8093 ;; This function is called by:
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text7
  8099  0029E8                     __ptext7:
  8100                           	opt stack 0
  8101  0029E8                     _doModeVscp:
  8102                           	opt stack 24
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 946: uint8_t c;
  8106                           ;main.c: 949: if (!bSilent) {
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;incstack = 0
  8110                           ;incstack = 0
  8111  0029E8  67D6               	tstfsz	_bSilent& (0+255),b
  8112  0029EA  D002               	goto	l10106
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 950: receivePrintEventCANAL();
  8116  0029EC  EC9A  F018         	call	_receivePrintEventCANAL	;wreg free
  8117  0029F0                     l10106:
  8118                           
  8119                           ;main.c: 951: }
  8120                           ;main.c: 954: (INTCONbits.GIE = 0);
  8121  0029F0  9EF2               	bcf	intcon,7,c	;volatile
  8122                           
  8123                           ;main.c: 956: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  8124  0029F2  0101               	movlb	1	; () banked
  8125  0029F4  0E01               	movlw	high _serialInputFifo
  8126  0029F6  6E1A               	movwf	?_fifo_read+1,c
  8127  0029F8  0EC8               	movlw	low _serialInputFifo
  8128  0029FA  6E19               	movwf	?_fifo_read,c
  8129  0029FC  0E31               	movlw	low doModeVscp@c
  8130  0029FE  6E1B               	movwf	?_fifo_read+2,c
  8131  002A00  0E00               	movlw	high doModeVscp@c
  8132  002A02  6E1C               	movwf	?_fifo_read+3,c
  8133  002A04  0E0F               	movlw	15
  8134  002A06  6E1C               	movwf	?_fifo_read+3,c
  8135  002A08  0E5F               	movlw	__accesstop+-1
  8136  002A0A  641B               	cpfsgt	?_fifo_read+2,c
  8137  002A0C  6A1C               	clrf	?_fifo_read+3,c
  8138  002A0E  6A1E               	clrf	?_fifo_read+5,c
  8139  002A10  0E01               	movlw	1
  8140  002A12  6E1D               	movwf	?_fifo_read+4,c
  8141  002A14  EC61  F01F         	call	_fifo_read	;wreg free
  8142  002A18  0419               	decf	?_fifo_read,w,c
  8143  002A1A  101A               	iorwf	?_fifo_read+1,w,c
  8144  002A1C  E001 D09B          	bnz	l10232
  8145                           
  8146                           ;main.c: 959: (INTCONbits.GIE = 1);
  8147  002A20  8EF2               	bsf	intcon,7,c	;volatile
  8148                           
  8149                           ;main.c: 961: if (0 == stateVscpDriver) {
  8150  002A22  663F               	tstfsz	_stateVscpDriver,c
  8151  002A24  D00E               	goto	l10126
  8152                           
  8153                           ;main.c: 962: if (bDLE) {
  8154  002A26  503B               	movf	_bDLE,w,c
  8155  002A28  E009               	bz	l10122
  8156                           
  8157                           ;main.c: 963: bDLE = 0;
  8158  002A2A  6A3B               	clrf	_bDLE,c
  8159                           
  8160                           ;main.c: 966: if (0x02 == c) {
  8161  002A2C  5031               	movf	doModeVscp@c,w,c
  8162  002A2E  0A02               	xorlw	2
  8163  002A30  E122               	bnz	l10160
  8164                           
  8165                           ;main.c: 967: stateVscpDriver = 1;
  8166  002A32  0E01               	movlw	1
  8167  002A34  6E3F               	movwf	_stateVscpDriver,c
  8168                           
  8169                           ;main.c: 968: pos = 0;
  8170  002A36  0100               	movlb	0	; () banked
  8171  002A38  6BD8               	clrf	_pos& (0+255),b
  8172  002A3A  D01D               	goto	l10160
  8173  002A3C                     l10122:
  8174                           
  8175                           ;main.c: 971: bDLE = 1;
  8176  002A3C  0E01               	movlw	1
  8177  002A3E  6E3B               	movwf	_bDLE,c
  8178  002A40  D08B               	goto	l628
  8179  002A42                     l10126:
  8180  002A42  043F               	decf	_stateVscpDriver,w,c
  8181  002A44  E118               	bnz	l10160
  8182                           
  8183                           ;main.c: 976: if (bDLE) {
  8184  002A46  503B               	movf	_bDLE,w,c
  8185  002A48  E00C               	bz	l10144
  8186                           
  8187                           ;main.c: 978: bDLE = 0;
  8188  002A4A  6A3B               	clrf	_bDLE,c
  8189                           
  8190                           ;main.c: 981: if (0x03 == c) {
  8191  002A4C  5031               	movf	doModeVscp@c,w,c
  8192  002A4E  0A03               	xorlw	3
  8193  002A50  E103               	bnz	l10136
  8194                           
  8195                           ;main.c: 982: stateVscpDriver = 2;
  8196  002A52  0E02               	movlw	2
  8197  002A54  6E3F               	movwf	_stateVscpDriver,c
  8198                           
  8199                           ;main.c: 983: }
  8200  002A56  D00F               	goto	l10160
  8201  002A58                     l10136:
  8202                           
  8203                           ;main.c: 984: else if (0x10 == c) {
  8204  002A58  5031               	movf	doModeVscp@c,w,c
  8205  002A5A  0A10               	xorlw	16
  8206  002A5C  E10C               	bnz	l10160
  8207                           
  8208                           ;main.c: 986: cmdbuf[ pos++ ] = c;
  8209                           
  8210                           ; BSR set to: 1
  8211  002A5E  D87D               	call	PL56	;call to abstracted procedure
  8212  002A60  D07B               	goto	l628
  8213  002A62                     l10144:
  8214                           
  8215                           ;main.c: 991: if (0x10 == c) {
  8216  002A62  5031               	movf	doModeVscp@c,w,c
  8217  002A64  0A10               	xorlw	16
  8218  002A66  E0EA               	bz	l10122
  8219                           
  8220                           ;main.c: 996: cmdbuf[ pos++ ] = c;
  8221                           
  8222                           ; BSR set to: 1
  8223  002A68  D878               	call	PL56	;call to abstracted procedure
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;main.c: 998: if (pos >= 128u) {
  8227  002A6A  0E7F               	movlw	127
  8228  002A6C  65D8               	cpfsgt	_pos& (0+255),b
  8229  002A6E  D074               	goto	l628
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;main.c: 1001: pos = 0;
  8233  002A70  6BD8               	clrf	_pos& (0+255),b
  8234                           
  8235                           ;main.c: 1002: stateVscpDriver = 0;
  8236  002A72  6A3F               	clrf	_stateVscpDriver,c
  8237  002A74  D071               	goto	l628
  8238  002A76                     l10160:
  8239                           
  8240                           ;main.c: 1006: }
  8241                           ;main.c: 1007: }
  8242                           ;main.c: 1008: }
  8243                           ;main.c: 1013: if (2 == stateVscpDriver) {
  8244  002A76  503F               	movf	_stateVscpDriver,w,c
  8245  002A78  0A02               	xorlw	2
  8246  002A7A  E16D               	bnz	l10232
  8247                           
  8248                           ;main.c: 1016: stateVscpDriver = 0;
  8249  002A7C  6A3F               	clrf	_stateVscpDriver,c
  8250                           
  8251                           ;main.c: 1028: if (calcCRC(cmdbuf, pos)) {
  8252  002A7E  0101               	movlb	1	; () banked
  8253  002A80  0E01               	movlw	high _cmdbuf
  8254  002A82  6E26               	movwf	?_calcCRC+1,c
  8255  002A84  0E20               	movlw	low _cmdbuf
  8256  002A86  6E25               	movwf	?_calcCRC,c
  8257  002A88  C0D8  F027         	movff	_pos,?_calcCRC+2
  8258  002A8C  ECBD  F027         	call	_calcCRC	;wreg free
  8259  002A90  0900               	iorlw	0
  8260  002A92  E003               	bz	l10168
  8261                           
  8262                           ;main.c: 1029: sendVSCPDriverErrorFrame(1);
  8263  002A94  0E01               	movlw	1
  8264  002A96  EC25  F01E         	call	_sendVSCPDriverErrorFrame
  8265  002A9A                     l10168:
  8266                           
  8267                           ;main.c: 1030: }
  8268                           ;main.c: 1033: if (0 ==
  8269                           ;main.c: 1034: cmdbuf[ 0 ]) {
  8270  002A9A  0101               	movlb	1	; () banked
  8271  002A9C  6720               	tstfsz	_cmdbuf& (0+255),b
  8272  002A9E  D003               	goto	l10172
  8273  002AA0                     l10170:
  8274                           
  8275                           ;main.c: 1035: sendVSCPDriverAck();
  8276  002AA0  EC86  F020         	call	_sendVSCPDriverAck	;wreg free
  8277                           
  8278                           ;main.c: 1036: }
  8279  002AA4  D055               	goto	l10228
  8280  002AA6                     l10172:
  8281                           
  8282                           ; BSR set to: 1
  8283                           ;main.c: 1037: else if (1 ==
  8284                           ;main.c: 1038: cmdbuf[ 0 ]) {
  8285  002AA6  0520               	decf	_cmdbuf& (0+255),w,b
  8286  002AA8  E053               	bz	l10228
  8287                           
  8288                           ; BSR set to: 1
  8289                           ;main.c: 1041: else if (2 ==
  8290                           ;main.c: 1042: cmdbuf[ 0 ]) {
  8291  002AAA  5120               	movf	_cmdbuf& (0+255),w,b
  8292  002AAC  0A02               	xorlw	2
  8293  002AAE  E107               	bnz	l10184
  8294                           
  8295                           ; BSR set to: 1
  8296                           ;main.c: 1043: if (receiveVSCPModeCanalMsg()) {
  8297  002AB0  EC49  F01D         	call	_receiveVSCPModeCanalMsg	;wreg free
  8298  002AB4  0900               	iorlw	0
  8299  002AB6  E1F4               	bnz	l10170
  8300  002AB8                     l10182:
  8301                           
  8302                           ;main.c: 1046: sendVSCPDriverNack();
  8303  002AB8  ECC8  F01F         	call	_sendVSCPDriverNack	;wreg free
  8304  002ABC  D049               	goto	l10228
  8305  002ABE                     l10184:
  8306                           
  8307                           ; BSR set to: 1
  8308                           ;main.c: 1049: else if (3 ==
  8309                           ;main.c: 1050: cmdbuf[ 0 ]) {
  8310  002ABE  5120               	movf	_cmdbuf& (0+255),w,b
  8311  002AC0  0A03               	xorlw	3
  8312  002AC2  E0FA               	bz	l10182
  8313                           
  8314                           ; BSR set to: 1
  8315                           ;main.c: 1053: else if (4 ==
  8316                           ;main.c: 1054: cmdbuf[ 0 ]) {
  8317  002AC4  5120               	movf	_cmdbuf& (0+255),w,b
  8318  002AC6  0A04               	xorlw	4
  8319  002AC8  E0F7               	bz	l10182
  8320                           
  8321                           ; BSR set to: 1
  8322                           ;main.c: 1057: else if (255 ==
  8323                           ;main.c: 1058: cmdbuf[ 0 ]) {
  8324  002ACA  2920               	incf	_cmdbuf& (0+255),w,b
  8325  002ACC  E13E               	bnz	l10226
  8326                           
  8327                           ; BSR set to: 1
  8328                           ;main.c: 1060: if (cmdbuf[ 5 ] ==
  8329                           ;main.c: 1061: 0) {
  8330  002ACE  6725               	tstfsz	(_cmdbuf+5)& (0+255),b
  8331  002AD0  D005               	goto	l10198
  8332                           
  8333                           ; BSR set to: 1
  8334                           ;main.c: 1062: sendVSCPDriverCommandReply(0, 0);
  8335  002AD2  0E00               	movlw	0
  8336  002AD4  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8337  002AD6  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8338                           
  8339                           ;main.c: 1063: }
  8340  002ADA  D03A               	goto	l10228
  8341  002ADC                     l10198:
  8342                           
  8343                           ; BSR set to: 1
  8344                           ;main.c: 1064: else if (cmdbuf[ 5 ] ==
  8345                           ;main.c: 1065: 1) {
  8346  002ADC  0525               	decf	(_cmdbuf+5)& (0+255),w,b
  8347  002ADE  E109               	bnz	l10204
  8348                           
  8349                           ; BSR set to: 1
  8350                           ;main.c: 1066: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8351  002AE0  0E00               	movlw	0
  8352  002AE2  ECAD  F028         	call	_ECANSetOperationMode
  8353                           
  8354                           ;main.c: 1067: sendVSCPDriverCommandReply(0, 1);
  8355  002AE6  0E01               	movlw	1
  8356  002AE8  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8357  002AEA  0E00               	movlw	0
  8358  002AEC  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8359                           
  8360                           ;main.c: 1068: }
  8361  002AF0  D02F               	goto	l10228
  8362  002AF2                     l10204:
  8363                           
  8364                           ; BSR set to: 1
  8365                           ;main.c: 1069: else if (cmdbuf[ 5 ] ==
  8366                           ;main.c: 1070: 2) {
  8367  002AF2  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8368  002AF4  0A02               	xorlw	2
  8369  002AF6  E109               	bnz	l10210
  8370                           
  8371                           ; BSR set to: 1
  8372                           ;main.c: 1071: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8373  002AF8  0E40               	movlw	64
  8374  002AFA  ECAD  F028         	call	_ECANSetOperationMode
  8375                           
  8376                           ;main.c: 1072: sendVSCPDriverCommandReply(0, 2);
  8377  002AFE  0E02               	movlw	2
  8378  002B00  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8379  002B02  0E00               	movlw	0
  8380  002B04  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8381                           
  8382                           ;main.c: 1073: }
  8383  002B08  D023               	goto	l10228
  8384  002B0A                     l10210:
  8385                           
  8386                           ; BSR set to: 1
  8387                           ;main.c: 1074: else if (cmdbuf[ 5 ] ==
  8388                           ;main.c: 1075: 3) {
  8389  002B0A  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8390  002B0C  0A03               	xorlw	3
  8391  002B0E  E109               	bnz	l10216
  8392                           
  8393                           ; BSR set to: 1
  8394                           ;main.c: 1076: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8395  002B10  0E60               	movlw	96
  8396  002B12  ECAD  F028         	call	_ECANSetOperationMode
  8397                           
  8398                           ;main.c: 1077: sendVSCPDriverCommandReply(0, 3);
  8399  002B16  0E03               	movlw	3
  8400  002B18  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8401  002B1A  0E00               	movlw	0
  8402  002B1C  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8403                           
  8404                           ;main.c: 1078: }
  8405  002B20  D017               	goto	l10228
  8406  002B22                     l10216:
  8407                           
  8408                           ; BSR set to: 1
  8409                           ;main.c: 1079: else if (cmdbuf[ 5 ] ==
  8410                           ;main.c: 1080: 4) {
  8411  002B22  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8412  002B24  0A04               	xorlw	4
  8413  002B26  E109               	bnz	l10222
  8414                           
  8415                           ; BSR set to: 1
  8416                           ;main.c: 1081: ECANSetOperationMode(0x20);
  8417  002B28  0E20               	movlw	32
  8418  002B2A  ECAD  F028         	call	_ECANSetOperationMode
  8419                           
  8420                           ;main.c: 1082: sendVSCPDriverCommandReply(0, 4);
  8421  002B2E  0E04               	movlw	4
  8422  002B30  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8423  002B32  0E00               	movlw	0
  8424  002B34  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8425                           
  8426                           ;main.c: 1083: }
  8427  002B38  D00B               	goto	l10228
  8428  002B3A                     l10222:
  8429                           
  8430                           ; BSR set to: 1
  8431                           ;main.c: 1084: else if (cmdbuf[ 5 ] ==
  8432                           ;main.c: 1085: 5) {
  8433  002B3A  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8434  002B3C  0A05               	xorlw	5
  8435  002B3E  E108               	bnz	l10228
  8436                           
  8437                           ; BSR set to: 1
  8438                           ;main.c: 1086: sendVSCPDriverCommandReply(0, 0);
  8439  002B40  0E00               	movlw	0
  8440  002B42  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8441  002B44  ECEC  F01B         	call	_sendVSCPDriverCommandReply
  8442  002B48  D003               	goto	l10228
  8443  002B4A                     l10226:
  8444                           
  8445                           ; BSR set to: 1
  8446                           ;main.c: 1091: sendVSCPDriverErrorFrame(2);
  8447  002B4A  0E02               	movlw	2
  8448  002B4C  EC25  F01E         	call	_sendVSCPDriverErrorFrame
  8449  002B50                     l10228:
  8450                           
  8451                           ;main.c: 1092: }
  8452                           ;main.c: 1095: pos = 0;
  8453  002B50  0100               	movlb	0	; () banked
  8454  002B52  6BD8               	clrf	_pos& (0+255),b
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;main.c: 1096: stateVscpDriver = 0;
  8458  002B54  6A3F               	clrf	_stateVscpDriver,c
  8459  002B56                     l10232:
  8460                           
  8461                           ;main.c: 1098: }
  8462                           ;main.c: 1100: }
  8463                           ;main.c: 1103: (INTCONbits.GIE = 1);
  8464  002B56  8EF2               	bsf	intcon,7,c	;volatile
  8465  002B58                     l628:
  8466  002B58  0012               	return	
  8467  002B5A                     __end_of_doModeVscp:
  8468                           	opt stack 0
  8469  002B5A                     PL56:
  8470                           	opt stack 24
  8471  002B5A  0E20               	movlw	low _cmdbuf
  8472  002B5C  0100               	movlb	0	; () banked
  8473  002B5E  25D8               	addwf	_pos& (0+255),w,b
  8474  002B60  6ED9               	movwf	fsr2l,c
  8475  002B62  6ADA               	clrf	fsr2h,c
  8476  002B64  0E01               	movlw	high _cmdbuf
  8477  002B66  22DA               	addwfc	fsr2h,f,c
  8478  002B68  C031  FFDF         	movff	doModeVscp@c,indf2
  8479  002B6C  2BD8               	incf	_pos& (0+255),f,b
  8480  002B6E  0012               	return	
  8481  002B70                     __end_ofPL56:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           indf0	equ	0xFEF
  8491                           postinc0	equ	0xFEE
  8492                           fsr0h	equ	0xFEA
  8493                           fsr0l	equ	0xFE9
  8494                           wreg	equ	0xFE8
  8495                           indf1	equ	0xFE7
  8496                           postinc1	equ	0xFE6
  8497                           postdec1	equ	0xFE5
  8498                           fsr1h	equ	0xFE2
  8499                           fsr1l	equ	0xFE1
  8500                           indf2	equ	0xFDF
  8501                           postinc2	equ	0xFDE
  8502                           postdec2	equ	0xFDD
  8503                           plusw2	equ	0xFDB
  8504                           fsr2h	equ	0xFDA
  8505                           fsr2l	equ	0xFD9
  8506                           status	equ	0xFD8
  8507                           
  8508 ;; *************** function _sendVSCPDriverCommandReply *****************
  8509 ;; Defined at:
  8510 ;;		line 1477 in file "main.c"
  8511 ;; Parameters:    Size  Location     Type
  8512 ;;  cmdReplyCode    1    wreg     unsigned char 
  8513 ;;  cmdCode         1   39[COMRAM] unsigned char 
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;  cmdReplyCode    1   40[COMRAM] unsigned char 
  8516 ;;  crc             1   41[COMRAM] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;		None               void
  8519 ;; Registers used:
  8520 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/1
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8526 ;;      Params:         1       0       0       0       0       0       0
  8527 ;;      Locals:         2       0       0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0
  8529 ;;      Totals:         3       0       0       0       0       0       0
  8530 ;;Total ram usage:        3 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    5
  8533 ;; This function calls:
  8534 ;;		_WriteUSART
  8535 ;;		_sendEscapedUartData
  8536 ;;		_crc8
  8537 ;; This function is called by:
  8538 ;;		_doModeVscp
  8539 ;; This function uses a non-reentrant model
  8540 ;;
  8541                           
  8542                           	psect	text8
  8543  0037D8                     __ptext8:
  8544                           	opt stack 0
  8545  0037D8                     _sendVSCPDriverCommandReply:
  8546                           	opt stack 24
  8547                           
  8548                           ;incstack = 0
  8549                           ;incstack = 0
  8550                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8551  0037D8  CFE8 F029          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8552                           
  8553                           ;main.c: 1478: uint8_t crc = 0;
  8554  0037DC  6A2A               	clrf	sendVSCPDriverCommandReply@crc,c
  8555  0037DE                     l815:
  8556  0037DE  A2AC               	btfss	4012,1,c	;volatile
  8557  0037E0  D7FE               	goto	l815
  8558                           
  8559                           ;main.c: 1482: WriteUSART(0x10);
  8560  0037E2  0E10               	movlw	16
  8561  0037E4  ECC4  F028         	call	_WriteUSART
  8562  0037E8                     l818:
  8563  0037E8  A2AC               	btfss	4012,1,c	;volatile
  8564  0037EA  D7FE               	goto	l818
  8565                           
  8566                           ;main.c: 1484: WriteUSART(0x02);
  8567  0037EC  0E02               	movlw	2
  8568  0037EE  ECC4  F028         	call	_WriteUSART
  8569  0037F2                     l821:
  8570  0037F2  A2AC               	btfss	4012,1,c	;volatile
  8571  0037F4  D7FE               	goto	l821
  8572                           
  8573                           ;main.c: 1488: WriteUSART(254);
  8574  0037F6  0EFE               	movlw	254
  8575  0037F8  ECC4  F028         	call	_WriteUSART
  8576                           
  8577                           ;main.c: 1489: crc8(&crc, 254);
  8578  0037FC  D85C               	call	PL28	;call to abstracted procedure
  8579  0037FE  6420               	cpfsgt	?_crc8,c
  8580  003800  6A21               	clrf	?_crc8+1,c
  8581  003802  0EFE               	movlw	254
  8582  003804  6E22               	movwf	?_crc8+2,c
  8583  003806  ECF5  F027         	call	_crc8	;wreg free
  8584  00380A                     l824:
  8585  00380A  A2AC               	btfss	4012,1,c	;volatile
  8586  00380C  D7FE               	goto	l824
  8587                           
  8588                           ;main.c: 1493: WriteUSART(0);
  8589  00380E  0E00               	movlw	0
  8590  003810  ECC4  F028         	call	_WriteUSART
  8591                           
  8592                           ;main.c: 1494: crc8(&crc, 0);
  8593  003814  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8594  003816  6E20               	movwf	?_crc8,c
  8595  003818  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8596  00381A  EC20  F020         	call	PL4	;call to abstracted procedure
  8597  00381E  ECF5  F027         	call	_crc8	;wreg free
  8598                           
  8599                           ; BSR set to: 3
  8600                           ;main.c: 1497: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8601  003822  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8602  003824  6E25               	movwf	?_sendEscapedUartData,c
  8603  003826  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8604  003828  EC8C  F01E         	call	PL46	;call to abstracted procedure
  8605  00382C  6425               	cpfsgt	?_sendEscapedUartData,c
  8606  00382E  6A26               	clrf	?_sendEscapedUartData+1,c
  8607  003830  0101               	movlb	1	; () banked
  8608  003832  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  8609  003834  EC60  F024         	call	_sendEscapedUartData
  8610  003838                     l827:
  8611  003838  A2AC               	btfss	4012,1,c	;volatile
  8612  00383A  D7FE               	goto	l827
  8613                           
  8614                           ;main.c: 1501: WriteUSART(0);
  8615  00383C  0E00               	movlw	0
  8616  00383E  ECC4  F028         	call	_WriteUSART
  8617                           
  8618                           ;main.c: 1502: crc8(&crc, 0);
  8619  003842  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8620  003844  6E20               	movwf	?_crc8,c
  8621  003846  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8622  003848  EC20  F020         	call	PL4	;call to abstracted procedure
  8623  00384C  ECF5  F027         	call	_crc8	;wreg free
  8624  003850                     l830:
  8625  003850  A2AC               	btfss	4012,1,c	;volatile
  8626  003852  D7FE               	goto	l830
  8627                           
  8628                           ;main.c: 1504: WriteUSART(2);
  8629  003854  0E02               	movlw	2
  8630  003856  ECC4  F028         	call	_WriteUSART
  8631                           
  8632                           ;main.c: 1505: crc8(&crc, 2);
  8633  00385A  D82D               	call	PL28	;call to abstracted procedure
  8634  00385C  6420               	cpfsgt	?_crc8,c
  8635  00385E  6A21               	clrf	?_crc8+1,c
  8636  003860  0E02               	movlw	2
  8637  003862  6E22               	movwf	?_crc8+2,c
  8638  003864  ECF5  F027         	call	_crc8	;wreg free
  8639  003868                     l833:
  8640  003868  A2AC               	btfss	4012,1,c	;volatile
  8641  00386A  D7FE               	goto	l833
  8642                           
  8643                           ;main.c: 1509: sendEscapedUartData(cmdReplyCode, &crc);
  8644  00386C  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8645  00386E  6E25               	movwf	?_sendEscapedUartData,c
  8646  003870  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8647  003872  EC8C  F01E         	call	PL46	;call to abstracted procedure
  8648  003876  6425               	cpfsgt	?_sendEscapedUartData,c
  8649  003878  6A26               	clrf	?_sendEscapedUartData+1,c
  8650  00387A  5029               	movf	sendVSCPDriverCommandReply@cmdReplyCode,w,c
  8651  00387C  EC60  F024         	call	_sendEscapedUartData
  8652  003880                     l836:
  8653  003880  A2AC               	btfss	4012,1,c	;volatile
  8654  003882  D7FE               	goto	l836
  8655                           
  8656                           ;main.c: 1513: sendEscapedUartData(cmdCode, &crc);
  8657  003884  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8658  003886  6E25               	movwf	?_sendEscapedUartData,c
  8659  003888  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8660  00388A  EC8C  F01E         	call	PL46	;call to abstracted procedure
  8661  00388E  6425               	cpfsgt	?_sendEscapedUartData,c
  8662  003890  6A26               	clrf	?_sendEscapedUartData+1,c
  8663  003892  5028               	movf	sendVSCPDriverCommandReply@cmdCode,w,c
  8664  003894  EC60  F024         	call	_sendEscapedUartData
  8665                           
  8666                           ;main.c: 1516: sendEscapedUartData(crc, (0));
  8667  003898  6A26               	clrf	?_sendEscapedUartData+1,c
  8668  00389A  6A25               	clrf	?_sendEscapedUartData,c
  8669  00389C  502A               	movf	sendVSCPDriverCommandReply@crc,w,c
  8670  00389E  EC60  F024         	call	_sendEscapedUartData
  8671  0038A2                     l839:
  8672  0038A2  A2AC               	btfss	4012,1,c	;volatile
  8673  0038A4  D7FE               	goto	l839
  8674                           
  8675                           ;main.c: 1520: WriteUSART(0x10);
  8676  0038A6  0E10               	movlw	16
  8677  0038A8  ECC4  F028         	call	_WriteUSART
  8678  0038AC                     l842:
  8679  0038AC  A2AC               	btfss	4012,1,c	;volatile
  8680  0038AE  D7FE               	goto	l842
  8681                           
  8682                           ;main.c: 1522: WriteUSART(0x03);
  8683  0038B0  0E03               	movlw	3
  8684  0038B2  EFC4  F028         	goto	_WriteUSART
  8685  0038B6                     __end_of_sendVSCPDriverCommandReply:
  8686                           	opt stack 0
  8687  0038B6                     PL28:
  8688                           	opt stack 24
  8689  0038B6  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8690  0038B8  6E20               	movwf	?_crc8,c
  8691  0038BA  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8692  0038BC  6E21               	movwf	?_crc8+1,c
  8693  0038BE  0E0F               	movlw	15
  8694  0038C0  6E21               	movwf	?_crc8+1,c
  8695  0038C2  0E5F               	movlw	__accesstop+-1
  8696  0038C4  0012               	return	
  8697  0038C6                     __end_ofPL28:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           indf0	equ	0xFEF
  8707                           postinc0	equ	0xFEE
  8708                           fsr0h	equ	0xFEA
  8709                           fsr0l	equ	0xFE9
  8710                           wreg	equ	0xFE8
  8711                           indf1	equ	0xFE7
  8712                           postinc1	equ	0xFE6
  8713                           postdec1	equ	0xFE5
  8714                           fsr1h	equ	0xFE2
  8715                           fsr1l	equ	0xFE1
  8716                           indf2	equ	0xFDF
  8717                           postinc2	equ	0xFDE
  8718                           postdec2	equ	0xFDD
  8719                           plusw2	equ	0xFDB
  8720                           fsr2h	equ	0xFDA
  8721                           fsr2l	equ	0xFD9
  8722                           status	equ	0xFD8
  8723                           
  8724 ;; *************** function _sendVSCPDriverNack *****************
  8725 ;; Defined at:
  8726 ;;		line 1433 in file "main.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;  crc             1   39[COMRAM] unsigned char 
  8731 ;; Return value:  Size  Location     Type
  8732 ;;		None               void
  8733 ;; Registers used:
  8734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : E/1
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8740 ;;      Params:         0       0       0       0       0       0       0
  8741 ;;      Locals:         1       0       0       0       0       0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0
  8743 ;;      Totals:         1       0       0       0       0       0       0
  8744 ;;Total ram usage:        1 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    5
  8747 ;; This function calls:
  8748 ;;		_WriteUSART
  8749 ;;		_sendEscapedUartData
  8750 ;;		_crc8
  8751 ;; This function is called by:
  8752 ;;		_doModeVscp
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           	psect	text9
  8757  003F90                     __ptext9:
  8758                           	opt stack 0
  8759  003F90                     _sendVSCPDriverNack:
  8760                           	opt stack 24
  8761                           
  8762                           ;main.c: 1434: uint8_t crc = 0;
  8763                           
  8764                           ;incstack = 0
  8765                           ;incstack = 0
  8766  003F90  6A28               	clrf	sendVSCPDriverNack@crc,c
  8767  003F92                     l788:
  8768  003F92  A2AC               	btfss	4012,1,c	;volatile
  8769  003F94  D7FE               	goto	l788
  8770                           
  8771                           ;main.c: 1438: WriteUSART(0x10);
  8772  003F96  0E10               	movlw	16
  8773  003F98  ECC4  F028         	call	_WriteUSART
  8774  003F9C                     l791:
  8775  003F9C  A2AC               	btfss	4012,1,c	;volatile
  8776  003F9E  D7FE               	goto	l791
  8777                           
  8778                           ;main.c: 1440: WriteUSART(0x02);
  8779  003FA0  0E02               	movlw	2
  8780  003FA2  ECC4  F028         	call	_WriteUSART
  8781  003FA6                     l794:
  8782  003FA6  A2AC               	btfss	4012,1,c	;volatile
  8783  003FA8  D7FE               	goto	l794
  8784                           
  8785                           ;main.c: 1444: WriteUSART(252);
  8786  003FAA  0EFC               	movlw	252
  8787  003FAC  ECC4  F028         	call	_WriteUSART
  8788                           
  8789                           ;main.c: 1445: crc8(&crc, 252);
  8790  003FB0  0E28               	movlw	low sendVSCPDriverNack@crc
  8791  003FB2  6E20               	movwf	?_crc8,c
  8792  003FB4  0E00               	movlw	high sendVSCPDriverNack@crc
  8793  003FB6  6E21               	movwf	?_crc8+1,c
  8794  003FB8  0E0F               	movlw	15
  8795  003FBA  6E21               	movwf	?_crc8+1,c
  8796  003FBC  0E5F               	movlw	__accesstop+-1
  8797  003FBE  6420               	cpfsgt	?_crc8,c
  8798  003FC0  6A21               	clrf	?_crc8+1,c
  8799  003FC2  0EFC               	movlw	252
  8800  003FC4  6E22               	movwf	?_crc8+2,c
  8801  003FC6  ECF5  F027         	call	_crc8	;wreg free
  8802  003FCA                     l797:
  8803  003FCA  A2AC               	btfss	4012,1,c	;volatile
  8804  003FCC  D7FE               	goto	l797
  8805                           
  8806                           ;main.c: 1449: WriteUSART(0);
  8807  003FCE  0E00               	movlw	0
  8808  003FD0  ECC4  F028         	call	_WriteUSART
  8809                           
  8810                           ;main.c: 1450: crc8(&crc, 0);
  8811  003FD4  0E28               	movlw	low sendVSCPDriverNack@crc
  8812  003FD6  6E20               	movwf	?_crc8,c
  8813  003FD8  0E00               	movlw	high sendVSCPDriverNack@crc
  8814  003FDA  D832               	call	PL4	;call to abstracted procedure
  8815  003FDC  ECF5  F027         	call	_crc8	;wreg free
  8816                           
  8817                           ; BSR set to: 3
  8818                           ;main.c: 1453: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8819  003FE0  0E28               	movlw	low sendVSCPDriverNack@crc
  8820  003FE2  6E25               	movwf	?_sendEscapedUartData,c
  8821  003FE4  0E00               	movlw	high sendVSCPDriverNack@crc
  8822  003FE6  EC8C  F01E         	call	PL46	;call to abstracted procedure
  8823  003FEA  6425               	cpfsgt	?_sendEscapedUartData,c
  8824  003FEC  6A26               	clrf	?_sendEscapedUartData+1,c
  8825  003FEE  0101               	movlb	1	; () banked
  8826  003FF0  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  8827  003FF2  EC60  F024         	call	_sendEscapedUartData
  8828  003FF6                     l800:
  8829  003FF6  A2AC               	btfss	4012,1,c	;volatile
  8830  003FF8  D7FE               	goto	l800
  8831                           
  8832                           ;main.c: 1457: WriteUSART(0);
  8833  003FFA  0E00               	movlw	0
  8834  003FFC  ECC4  F028         	call	_WriteUSART
  8835                           
  8836                           ;main.c: 1458: crc8(&crc, 0);
  8837  004000  0E28               	movlw	low sendVSCPDriverNack@crc
  8838  004002  6E20               	movwf	?_crc8,c
  8839  004004  0E00               	movlw	high sendVSCPDriverNack@crc
  8840  004006  D81C               	call	PL4	;call to abstracted procedure
  8841  004008  ECF5  F027         	call	_crc8	;wreg free
  8842  00400C                     l803:
  8843  00400C  A2AC               	btfss	4012,1,c	;volatile
  8844  00400E  D7FE               	goto	l803
  8845                           
  8846                           ;main.c: 1460: WriteUSART(0);
  8847  004010  0E00               	movlw	0
  8848  004012  ECC4  F028         	call	_WriteUSART
  8849                           
  8850                           ;main.c: 1461: crc8(&crc, 0);
  8851  004016  0E28               	movlw	low sendVSCPDriverNack@crc
  8852  004018  6E20               	movwf	?_crc8,c
  8853  00401A  0E00               	movlw	high sendVSCPDriverNack@crc
  8854  00401C  D811               	call	PL4	;call to abstracted procedure
  8855  00401E  ECF5  F027         	call	_crc8	;wreg free
  8856                           
  8857                           ; BSR set to: 3
  8858                           ;main.c: 1464: sendEscapedUartData(crc, (0));
  8859  004022  6A26               	clrf	?_sendEscapedUartData+1,c
  8860  004024  6A25               	clrf	?_sendEscapedUartData,c
  8861  004026  5028               	movf	sendVSCPDriverNack@crc,w,c
  8862  004028  EC60  F024         	call	_sendEscapedUartData
  8863  00402C                     l806:
  8864  00402C  A2AC               	btfss	4012,1,c	;volatile
  8865  00402E  D7FE               	goto	l806
  8866                           
  8867                           ;main.c: 1468: WriteUSART(0x10);
  8868  004030  0E10               	movlw	16
  8869  004032  ECC4  F028         	call	_WriteUSART
  8870  004036                     l809:
  8871  004036  A2AC               	btfss	4012,1,c	;volatile
  8872  004038  D7FE               	goto	l809
  8873                           
  8874                           ;main.c: 1470: WriteUSART(0x03);
  8875  00403A  0E03               	movlw	3
  8876  00403C  EFC4  F028         	goto	_WriteUSART
  8877  004040                     __end_of_sendVSCPDriverNack:
  8878                           	opt stack 0
  8879  004040                     PL4:
  8880                           	opt stack 24
  8881  004040  6E21               	movwf	?_crc8+1,c
  8882  004042  0E0F               	movlw	15
  8883  004044  6E21               	movwf	?_crc8+1,c
  8884  004046  0E5F               	movlw	__accesstop+-1
  8885  004048  6420               	cpfsgt	?_crc8,c
  8886  00404A  6A21               	clrf	?_crc8+1,c
  8887  00404C  6A22               	clrf	?_crc8+2,c
  8888  00404E  0C00               	retlw	0
  8889  004050                     __end_ofPL4:
  8890                           	opt stack 0
  8891                           tblptru	equ	0xFF8
  8892                           tblptrh	equ	0xFF7
  8893                           tblptrl	equ	0xFF6
  8894                           tablat	equ	0xFF5
  8895                           prodh	equ	0xFF4
  8896                           prodl	equ	0xFF3
  8897                           intcon	equ	0xFF2
  8898                           indf0	equ	0xFEF
  8899                           postinc0	equ	0xFEE
  8900                           fsr0h	equ	0xFEA
  8901                           fsr0l	equ	0xFE9
  8902                           wreg	equ	0xFE8
  8903                           indf1	equ	0xFE7
  8904                           postinc1	equ	0xFE6
  8905                           postdec1	equ	0xFE5
  8906                           fsr1h	equ	0xFE2
  8907                           fsr1l	equ	0xFE1
  8908                           indf2	equ	0xFDF
  8909                           postinc2	equ	0xFDE
  8910                           postdec2	equ	0xFDD
  8911                           plusw2	equ	0xFDB
  8912                           fsr2h	equ	0xFDA
  8913                           fsr2l	equ	0xFD9
  8914                           status	equ	0xFD8
  8915                           
  8916 ;; *************** function _receiveVSCPModeCanalMsg *****************
  8917 ;; Defined at:
  8918 ;;		line 1798 in file "main.c"
  8919 ;; Parameters:    Size  Location     Type
  8920 ;;		None
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;  data            8   55[BANK0 ] unsigned char [8]
  8923 ;;  id              4   63[BANK0 ] unsigned long 
  8924 ;;  dlc             1   67[BANK0 ] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      enum E15660
  8927 ;; Registers used:
  8928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8929 ;; Tracked objects:
  8930 ;;		On entry : F/1
  8931 ;;		On exit  : E/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8934 ;;      Params:         0       0       0       0       0       0       0
  8935 ;;      Locals:         0      13       0       0       0       0       0
  8936 ;;      Temps:          0      20       0       0       0       0       0
  8937 ;;      Totals:         0      33       0       0       0       0       0
  8938 ;;Total ram usage:       33 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    5
  8941 ;; This function calls:
  8942 ;;		_memcpy
  8943 ;;		_sendCANFrame
  8944 ;; This function is called by:
  8945 ;;		_doModeVscp
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           	psect	text10
  8950  003A92                     __ptext10:
  8951                           	opt stack 0
  8952  003A92                     _receiveVSCPModeCanalMsg:
  8953                           	opt stack 24
  8954                           
  8955                           ; BSR set to: 1
  8956                           ;main.c: 1799: uint32_t id;
  8957                           ;main.c: 1800: uint8_t dlc;
  8958                           ;main.c: 1801: uint8_t data[8];
  8959                           ;main.c: 1803: id = ((uint32_t) cmdbuf[5] << 26) |
  8960                           ;main.c: 1804: ((uint32_t) cmdbuf[5 + 1] << 16) |
  8961                           ;main.c: 1805: ((uint32_t) cmdbuf[5 + 2] << 8) |
  8962                           ;main.c: 1806: cmdbuf[5 + 3];
  8963                           
  8964                           ;incstack = 0
  8965                           ;incstack = 0
  8966  003A92  C127  F083         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  8967  003A96  0100               	movlb	0	; () banked
  8968  003A98  6B84               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  8969  003A9A  6B85               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  8970  003A9C  6B86               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  8971  003A9E  C085  F086         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  8972  003AA2  C084  F085         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  8973  003AA6  C083  F084         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  8974  003AAA  6B83               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  8975  003AAC  C126  F087         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  8976  003AB0  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8977  003AB2  6B89               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  8978  003AB4  6B8A               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  8979  003AB6  C088  F08A         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  8980  003ABA  C087  F089         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  8981  003ABE  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8982  003AC0  6B87               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  8983  003AC2  C125  F08B         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  8984  003AC6  6B8C               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  8985  003AC8  6B8D               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  8986  003ACA  6B8E               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  8987  003ACC  0E1A               	movlw	26
  8988  003ACE                     u14935:
  8989  003ACE  90D8               	bcf	status,0,c
  8990  003AD0  378B               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  8991  003AD2  378C               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  8992  003AD4  378D               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  8993  003AD6  378E               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  8994  003AD8  2EE8               	decfsz	wreg,f,c
  8995  003ADA  D7F9               	goto	u14935
  8996  003ADC  5187               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  8997  003ADE  118B               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  8998  003AE0  6F8F               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  8999  003AE2  5188               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9000  003AE4  118C               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9001  003AE6  6F90               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9002  003AE8  5189               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9003  003AEA  118D               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9004  003AEC  6F91               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9005  003AEE  518A               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9006  003AF0  118E               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9007  003AF2  6F92               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9008  003AF4  5183               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9009  003AF6  118F               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9010  003AF8  6F93               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9011  003AFA  5184               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9012  003AFC  1190               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9013  003AFE  6F94               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9014  003B00  5185               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9015  003B02  1191               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9016  003B04  6F95               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9017  003B06  5186               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9018  003B08  1192               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9019  003B0A  6F96               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9020  003B0C  0101               	movlb	1	; () banked
  9021  003B0E  5128               	movf	(_cmdbuf+8)& (0+255),w,b
  9022  003B10  0100               	movlb	0	; () banked
  9023  003B12  1193               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9024  003B14  6F9F               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9025  003B16  5194               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9026  003B18  6FA0               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9027  003B1A  5195               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9028  003B1C  6FA1               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9029  003B1E  5196               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9030  003B20  6FA2               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9031                           
  9032                           ;main.c: 1807: dlc = cmdbuf[4] - 4;
  9033  003B22  0101               	movlb	1	; () banked
  9034  003B24  5124               	movf	(_cmdbuf+4)& (0+255),w,b
  9035  003B26  0FFC               	addlw	252
  9036  003B28  0100               	movlb	0	; () banked
  9037  003B2A  6FA3               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;main.c: 1808: memcpy(data, cmdbuf + 5 + 4, dlc);
  9041  003B2C  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9042  003B2E  6E1A               	movwf	?_memcpy+1,c
  9043  003B30  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  9044  003B32  6E19               	movwf	?_memcpy,c
  9045  003B34  0E29               	movlw	low (_cmdbuf+9)
  9046  003B36  6F83               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9047  003B38  0E01               	movlw	high (_cmdbuf+9)
  9048  003B3A  6F84               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9049  003B3C  C083  F01B         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9050  003B40  C084  F01C         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9051  003B44  C0A3  F01D         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9052  003B48  6A1E               	clrf	?_memcpy+5,c
  9053  003B4A  ECE5  F026         	call	_memcpy	;wreg free
  9054                           
  9055                           ;main.c: 1810: return sendCANFrame(id, dlc, data);
  9056  003B4E  C09F  F07C         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9057  003B52  C0A0  F07D         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9058  003B56  C0A1  F07E         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9059  003B5A  C0A2  F07F         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9060  003B5E  C0A3  F080         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9061  003B62  0100               	movlb	0	; () banked
  9062  003B64  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9063  003B66  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  9064  003B68  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  9065  003B6A  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  9066  003B6C  EFA0  F027         	goto	_sendCANFrame	;wreg free
  9067  003B70                     __end_of_receiveVSCPModeCanalMsg:
  9068                           	opt stack 0
  9069                           tblptru	equ	0xFF8
  9070                           tblptrh	equ	0xFF7
  9071                           tblptrl	equ	0xFF6
  9072                           tablat	equ	0xFF5
  9073                           prodh	equ	0xFF4
  9074                           prodl	equ	0xFF3
  9075                           intcon	equ	0xFF2
  9076                           indf0	equ	0xFEF
  9077                           postinc0	equ	0xFEE
  9078                           fsr0h	equ	0xFEA
  9079                           fsr0l	equ	0xFE9
  9080                           wreg	equ	0xFE8
  9081                           indf1	equ	0xFE7
  9082                           postinc1	equ	0xFE6
  9083                           postdec1	equ	0xFE5
  9084                           fsr1h	equ	0xFE2
  9085                           fsr1l	equ	0xFE1
  9086                           indf2	equ	0xFDF
  9087                           postinc2	equ	0xFDE
  9088                           postdec2	equ	0xFDD
  9089                           plusw2	equ	0xFDB
  9090                           fsr2h	equ	0xFDA
  9091                           fsr2l	equ	0xFD9
  9092                           status	equ	0xFD8
  9093                           
  9094 ;; *************** function _memcpy *****************
  9095 ;; Defined at:
  9096 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9097 ;; Parameters:    Size  Location     Type
  9098 ;;  d1              2   24[COMRAM] PTR void 
  9099 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9100 ;;  s1              2   26[COMRAM] PTR const void 
  9101 ;;		 -> vscpData(8), cmdbuf(80), 
  9102 ;;  n               2   28[COMRAM] unsigned int 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  s               2   32[COMRAM] PTR const unsigned char 
  9105 ;;		 -> vscpData(8), cmdbuf(80), 
  9106 ;;  d               2   30[COMRAM] PTR unsigned char 
  9107 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  2   24[COMRAM] PTR void 
  9110 ;; Registers used:
  9111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9112 ;; Tracked objects:
  9113 ;;		On entry : F/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9117 ;;      Params:         6       0       0       0       0       0       0
  9118 ;;      Locals:         4       0       0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0
  9120 ;;      Totals:        10       0       0       0       0       0       0
  9121 ;;Total ram usage:       10 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    2
  9124 ;; This function calls:
  9125 ;;		Nothing
  9126 ;; This function is called by:
  9127 ;;		_doModeSLCAN
  9128 ;;		_receiveVSCPModeCanalMsg
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           	psect	text11
  9133  004DCA                     __ptext11:
  9134                           	opt stack 0
  9135  004DCA                     _memcpy:
  9136                           	opt stack 27
  9137                           
  9138                           ; BSR set to: 0
  9139                           
  9140                           ;incstack = 0
  9141                           ;incstack = 0
  9142  004DCA  C01B  F021         	movff	memcpy@s1,memcpy@s
  9143  004DCE  C01C  F022         	movff	memcpy@s1+1,memcpy@s+1
  9144  004DD2  C019  F01F         	movff	memcpy@d1,memcpy@d
  9145  004DD6  C01A  F020         	movff	memcpy@d1+1,memcpy@d+1
  9146  004DDA  D00E               	goto	l11842
  9147  004DDC                     l11836:
  9148  004DDC  C021  FFD9         	movff	memcpy@s,fsr2l
  9149  004DE0  C022  FFDA         	movff	memcpy@s+1,fsr2h
  9150  004DE4  C01F  FFE1         	movff	memcpy@d,fsr1l
  9151  004DE8  C020  FFE2         	movff	memcpy@d+1,fsr1h
  9152  004DEC  CFDF FFE7          	movff	indf2,indf1
  9153  004DF0  4A21               	infsnz	memcpy@s,f,c
  9154  004DF2  2A22               	incf	memcpy@s+1,f,c
  9155  004DF4  4A1F               	infsnz	memcpy@d,f,c
  9156  004DF6  2A20               	incf	memcpy@d+1,f,c
  9157  004DF8                     l11842:
  9158  004DF8  061D               	decf	memcpy@n,f,c
  9159  004DFA  A0D8               	btfss	status,0,c
  9160  004DFC  061E               	decf	memcpy@n+1,f,c
  9161  004DFE  281D               	incf	memcpy@n& (0+255),w,c
  9162  004E00  B4D8               	btfsc	status,2,c
  9163  004E02  281E               	incf	(memcpy@n+1)& (0+255),w,c
  9164  004E04  B4D8               	btfsc	status,2,c
  9165  004E06  0012               	return	
  9166  004E08  D7E9               	goto	l11836
  9167  004E0A                     __end_of_memcpy:
  9168                           	opt stack 0
  9169                           tblptru	equ	0xFF8
  9170                           tblptrh	equ	0xFF7
  9171                           tblptrl	equ	0xFF6
  9172                           tablat	equ	0xFF5
  9173                           prodh	equ	0xFF4
  9174                           prodl	equ	0xFF3
  9175                           intcon	equ	0xFF2
  9176                           indf0	equ	0xFEF
  9177                           postinc0	equ	0xFEE
  9178                           fsr0h	equ	0xFEA
  9179                           fsr0l	equ	0xFE9
  9180                           wreg	equ	0xFE8
  9181                           indf1	equ	0xFE7
  9182                           postinc1	equ	0xFE6
  9183                           postdec1	equ	0xFE5
  9184                           fsr1h	equ	0xFE2
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           postdec2	equ	0xFDD
  9189                           plusw2	equ	0xFDB
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function _sendVSCPDriverAck *****************
  9195 ;; Defined at:
  9196 ;;		line 1389 in file "main.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;		None
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  crc             1   39[COMRAM] unsigned char 
  9201 ;; Return value:  Size  Location     Type
  9202 ;;		None               void
  9203 ;; Registers used:
  9204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9205 ;; Tracked objects:
  9206 ;;		On entry : E/1
  9207 ;;		On exit  : 0/0
  9208 ;;		Unchanged: 0/0
  9209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9210 ;;      Params:         0       0       0       0       0       0       0
  9211 ;;      Locals:         1       0       0       0       0       0       0
  9212 ;;      Temps:          0       0       0       0       0       0       0
  9213 ;;      Totals:         1       0       0       0       0       0       0
  9214 ;;Total ram usage:        1 bytes
  9215 ;; Hardware stack levels used:    1
  9216 ;; Hardware stack levels required when called:    5
  9217 ;; This function calls:
  9218 ;;		_WriteUSART
  9219 ;;		_sendEscapedUartData
  9220 ;;		_crc8
  9221 ;; This function is called by:
  9222 ;;		_doModeVscp
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           	psect	text12
  9227  00410C                     __ptext12:
  9228                           	opt stack 0
  9229  00410C                     _sendVSCPDriverAck:
  9230                           	opt stack 24
  9231                           
  9232                           ;main.c: 1390: uint8_t crc = 0;
  9233                           
  9234                           ;incstack = 0
  9235                           ;incstack = 0
  9236  00410C  6A28               	clrf	sendVSCPDriverAck@crc,c
  9237  00410E                     l761:
  9238  00410E  A2AC               	btfss	4012,1,c	;volatile
  9239  004110  D7FE               	goto	l761
  9240                           
  9241                           ;main.c: 1394: WriteUSART(0x10);
  9242  004112  0E10               	movlw	16
  9243  004114  ECC4  F028         	call	_WriteUSART
  9244  004118                     l764:
  9245  004118  A2AC               	btfss	4012,1,c	;volatile
  9246  00411A  D7FE               	goto	l764
  9247                           
  9248                           ;main.c: 1396: WriteUSART(0x02);
  9249  00411C  0E02               	movlw	2
  9250  00411E  ECC4  F028         	call	_WriteUSART
  9251  004122                     l767:
  9252  004122  A2AC               	btfss	4012,1,c	;volatile
  9253  004124  D7FE               	goto	l767
  9254                           
  9255                           ;main.c: 1400: WriteUSART(251);
  9256  004126  0EFB               	movlw	251
  9257  004128  ECC4  F028         	call	_WriteUSART
  9258                           
  9259                           ;main.c: 1401: crc8(&crc, 251);
  9260  00412C  0E28               	movlw	low sendVSCPDriverAck@crc
  9261  00412E  6E20               	movwf	?_crc8,c
  9262  004130  0E00               	movlw	high sendVSCPDriverAck@crc
  9263  004132  6E21               	movwf	?_crc8+1,c
  9264  004134  0E0F               	movlw	15
  9265  004136  6E21               	movwf	?_crc8+1,c
  9266  004138  0E5F               	movlw	__accesstop+-1
  9267  00413A  6420               	cpfsgt	?_crc8,c
  9268  00413C  6A21               	clrf	?_crc8+1,c
  9269  00413E  0EFB               	movlw	251
  9270  004140  6E22               	movwf	?_crc8+2,c
  9271  004142  ECF5  F027         	call	_crc8	;wreg free
  9272  004146                     l770:
  9273  004146  A2AC               	btfss	4012,1,c	;volatile
  9274  004148  D7FE               	goto	l770
  9275                           
  9276                           ;main.c: 1405: WriteUSART(0);
  9277  00414A  0E00               	movlw	0
  9278  00414C  ECC4  F028         	call	_WriteUSART
  9279                           
  9280                           ;main.c: 1406: crc8(&crc, 0);
  9281  004150  0E28               	movlw	low sendVSCPDriverAck@crc
  9282  004152  6E20               	movwf	?_crc8,c
  9283  004154  0E00               	movlw	high sendVSCPDriverAck@crc
  9284  004156  EC20  F020         	call	PL4	;call to abstracted procedure
  9285  00415A  ECF5  F027         	call	_crc8	;wreg free
  9286                           
  9287                           ; BSR set to: 3
  9288                           ;main.c: 1409: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9289  00415E  0E28               	movlw	low sendVSCPDriverAck@crc
  9290  004160  6E25               	movwf	?_sendEscapedUartData,c
  9291  004162  0E00               	movlw	high sendVSCPDriverAck@crc
  9292  004164  EC8C  F01E         	call	PL46	;call to abstracted procedure
  9293  004168  6425               	cpfsgt	?_sendEscapedUartData,c
  9294  00416A  6A26               	clrf	?_sendEscapedUartData+1,c
  9295  00416C  0101               	movlb	1	; () banked
  9296  00416E  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  9297  004170  EC60  F024         	call	_sendEscapedUartData
  9298  004174                     l773:
  9299  004174  A2AC               	btfss	4012,1,c	;volatile
  9300  004176  D7FE               	goto	l773
  9301                           
  9302                           ;main.c: 1413: WriteUSART(0);
  9303  004178  0E00               	movlw	0
  9304  00417A  ECC4  F028         	call	_WriteUSART
  9305                           
  9306                           ;main.c: 1414: crc8(&crc, 0);
  9307  00417E  0E28               	movlw	low sendVSCPDriverAck@crc
  9308  004180  6E20               	movwf	?_crc8,c
  9309  004182  0E00               	movlw	high sendVSCPDriverAck@crc
  9310  004184  EC20  F020         	call	PL4	;call to abstracted procedure
  9311  004188  ECF5  F027         	call	_crc8	;wreg free
  9312  00418C                     l776:
  9313  00418C  A2AC               	btfss	4012,1,c	;volatile
  9314  00418E  D7FE               	goto	l776
  9315                           
  9316                           ;main.c: 1416: WriteUSART(0);
  9317  004190  0E00               	movlw	0
  9318  004192  ECC4  F028         	call	_WriteUSART
  9319                           
  9320                           ;main.c: 1417: crc8(&crc, 0);
  9321  004196  0E28               	movlw	low sendVSCPDriverAck@crc
  9322  004198  6E20               	movwf	?_crc8,c
  9323  00419A  0E00               	movlw	high sendVSCPDriverAck@crc
  9324  00419C  EC20  F020         	call	PL4	;call to abstracted procedure
  9325  0041A0  ECF5  F027         	call	_crc8	;wreg free
  9326                           
  9327                           ; BSR set to: 3
  9328                           ;main.c: 1420: sendEscapedUartData(crc, (0));
  9329  0041A4  6A26               	clrf	?_sendEscapedUartData+1,c
  9330  0041A6  6A25               	clrf	?_sendEscapedUartData,c
  9331  0041A8  5028               	movf	sendVSCPDriverAck@crc,w,c
  9332  0041AA  EC60  F024         	call	_sendEscapedUartData
  9333  0041AE                     l779:
  9334  0041AE  A2AC               	btfss	4012,1,c	;volatile
  9335  0041B0  D7FE               	goto	l779
  9336                           
  9337                           ;main.c: 1424: WriteUSART(0x10);
  9338  0041B2  0E10               	movlw	16
  9339  0041B4  ECC4  F028         	call	_WriteUSART
  9340  0041B8                     l782:
  9341  0041B8  A2AC               	btfss	4012,1,c	;volatile
  9342  0041BA  D7FE               	goto	l782
  9343                           
  9344                           ;main.c: 1426: WriteUSART(0x03);
  9345  0041BC  0E03               	movlw	3
  9346  0041BE  EFC4  F028         	goto	_WriteUSART
  9347  0041C2                     __end_of_sendVSCPDriverAck:
  9348                           	opt stack 0
  9349                           tblptru	equ	0xFF8
  9350                           tblptrh	equ	0xFF7
  9351                           tblptrl	equ	0xFF6
  9352                           tablat	equ	0xFF5
  9353                           prodh	equ	0xFF4
  9354                           prodl	equ	0xFF3
  9355                           intcon	equ	0xFF2
  9356                           indf0	equ	0xFEF
  9357                           postinc0	equ	0xFEE
  9358                           fsr0h	equ	0xFEA
  9359                           fsr0l	equ	0xFE9
  9360                           wreg	equ	0xFE8
  9361                           indf1	equ	0xFE7
  9362                           postinc1	equ	0xFE6
  9363                           postdec1	equ	0xFE5
  9364                           fsr1h	equ	0xFE2
  9365                           fsr1l	equ	0xFE1
  9366                           indf2	equ	0xFDF
  9367                           postinc2	equ	0xFDE
  9368                           postdec2	equ	0xFDD
  9369                           plusw2	equ	0xFDB
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9375 ;; Defined at:
  9376 ;;		line 1342 in file "main.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  errorcode       1    wreg     unsigned char 
  9379 ;; Auto vars:     Size  Location     Type
  9380 ;;  errorcode       1   39[COMRAM] unsigned char 
  9381 ;;  crc             1   40[COMRAM] unsigned char 
  9382 ;; Return value:  Size  Location     Type
  9383 ;;		None               void
  9384 ;; Registers used:
  9385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9386 ;; Tracked objects:
  9387 ;;		On entry : D/1
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9391 ;;      Params:         0       0       0       0       0       0       0
  9392 ;;      Locals:         2       0       0       0       0       0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0
  9394 ;;      Totals:         2       0       0       0       0       0       0
  9395 ;;Total ram usage:        2 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    5
  9398 ;; This function calls:
  9399 ;;		_WriteUSART
  9400 ;;		_sendEscapedUartData
  9401 ;;		_crc8
  9402 ;; This function is called by:
  9403 ;;		_doModeVscp
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           	psect	text13
  9408  003C4A                     __ptext13:
  9409                           	opt stack 0
  9410  003C4A                     _sendVSCPDriverErrorFrame:
  9411                           	opt stack 24
  9412                           
  9413                           ;incstack = 0
  9414                           ;incstack = 0
  9415                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9416  003C4A  CFE8 F028          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9417                           
  9418                           ;main.c: 1343: uint8_t crc = 0;
  9419  003C4E  6A29               	clrf	sendVSCPDriverErrorFrame@crc,c
  9420  003C50                     l734:
  9421  003C50  A2AC               	btfss	4012,1,c	;volatile
  9422  003C52  D7FE               	goto	l734
  9423                           
  9424                           ;main.c: 1347: WriteUSART(0x10);
  9425  003C54  0E10               	movlw	16
  9426  003C56  ECC4  F028         	call	_WriteUSART
  9427  003C5A                     l737:
  9428  003C5A  A2AC               	btfss	4012,1,c	;volatile
  9429  003C5C  D7FE               	goto	l737
  9430                           
  9431                           ;main.c: 1349: WriteUSART(0x02);
  9432  003C5E  0E02               	movlw	2
  9433  003C60  ECC4  F028         	call	_WriteUSART
  9434  003C64                     l740:
  9435  003C64  A2AC               	btfss	4012,1,c	;volatile
  9436  003C66  D7FE               	goto	l740
  9437                           
  9438                           ;main.c: 1353: WriteUSART(253);
  9439  003C68  0EFD               	movlw	253
  9440  003C6A  ECC4  F028         	call	_WriteUSART
  9441                           
  9442                           ;main.c: 1354: crc8(&crc, 253);
  9443  003C6E  D84C               	call	PL24	;call to abstracted procedure
  9444  003C70  6420               	cpfsgt	?_crc8,c
  9445  003C72  6A21               	clrf	?_crc8+1,c
  9446  003C74  0EFD               	movlw	253
  9447  003C76  6E22               	movwf	?_crc8+2,c
  9448  003C78  ECF5  F027         	call	_crc8	;wreg free
  9449  003C7C                     l743:
  9450  003C7C  A2AC               	btfss	4012,1,c	;volatile
  9451  003C7E  D7FE               	goto	l743
  9452                           
  9453                           ;main.c: 1358: WriteUSART(0);
  9454  003C80  0E00               	movlw	0
  9455  003C82  ECC4  F028         	call	_WriteUSART
  9456                           
  9457                           ;main.c: 1359: crc8(&crc, 0);
  9458  003C86  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9459  003C88  6E20               	movwf	?_crc8,c
  9460  003C8A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9461  003C8C  EC20  F020         	call	PL4	;call to abstracted procedure
  9462  003C90  ECF5  F027         	call	_crc8	;wreg free
  9463                           
  9464                           ; BSR set to: 3
  9465                           ;main.c: 1362: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9466  003C94  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9467  003C96  6E25               	movwf	?_sendEscapedUartData,c
  9468  003C98  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9469  003C9A  D83E               	call	PL46	;call to abstracted procedure
  9470  003C9C  6425               	cpfsgt	?_sendEscapedUartData,c
  9471  003C9E  6A26               	clrf	?_sendEscapedUartData+1,c
  9472  003CA0  0101               	movlb	1	; () banked
  9473  003CA2  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  9474  003CA4  EC60  F024         	call	_sendEscapedUartData
  9475  003CA8                     l746:
  9476  003CA8  A2AC               	btfss	4012,1,c	;volatile
  9477  003CAA  D7FE               	goto	l746
  9478                           
  9479                           ;main.c: 1366: WriteUSART(0);
  9480  003CAC  0E00               	movlw	0
  9481  003CAE  ECC4  F028         	call	_WriteUSART
  9482                           
  9483                           ;main.c: 1367: crc8(&crc, 0);
  9484  003CB2  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9485  003CB4  6E20               	movwf	?_crc8,c
  9486  003CB6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9487  003CB8  EC20  F020         	call	PL4	;call to abstracted procedure
  9488  003CBC  ECF5  F027         	call	_crc8	;wreg free
  9489  003CC0                     l749:
  9490  003CC0  A2AC               	btfss	4012,1,c	;volatile
  9491  003CC2  D7FE               	goto	l749
  9492                           
  9493                           ;main.c: 1369: WriteUSART(1);
  9494  003CC4  0E01               	movlw	1
  9495  003CC6  ECC4  F028         	call	_WriteUSART
  9496                           
  9497                           ;main.c: 1370: crc8(&crc, 1);
  9498  003CCA  D81E               	call	PL24	;call to abstracted procedure
  9499  003CCC  6420               	cpfsgt	?_crc8,c
  9500  003CCE  6A21               	clrf	?_crc8+1,c
  9501  003CD0  0E01               	movlw	1
  9502  003CD2  6E22               	movwf	?_crc8+2,c
  9503  003CD4  ECF5  F027         	call	_crc8	;wreg free
  9504                           
  9505                           ; BSR set to: 3
  9506                           ;main.c: 1373: sendEscapedUartData(errorcode, &crc);
  9507  003CD8  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9508  003CDA  6E25               	movwf	?_sendEscapedUartData,c
  9509  003CDC  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9510  003CDE  D81C               	call	PL46	;call to abstracted procedure
  9511  003CE0  6425               	cpfsgt	?_sendEscapedUartData,c
  9512  003CE2  6A26               	clrf	?_sendEscapedUartData+1,c
  9513  003CE4  5028               	movf	sendVSCPDriverErrorFrame@errorcode,w,c
  9514  003CE6  EC60  F024         	call	_sendEscapedUartData
  9515                           
  9516                           ;main.c: 1376: sendEscapedUartData(crc, (0));
  9517  003CEA  6A26               	clrf	?_sendEscapedUartData+1,c
  9518  003CEC  6A25               	clrf	?_sendEscapedUartData,c
  9519  003CEE  5029               	movf	sendVSCPDriverErrorFrame@crc,w,c
  9520  003CF0  EC60  F024         	call	_sendEscapedUartData
  9521  003CF4                     l752:
  9522  003CF4  A2AC               	btfss	4012,1,c	;volatile
  9523  003CF6  D7FE               	goto	l752
  9524                           
  9525                           ;main.c: 1380: WriteUSART(0x10);
  9526  003CF8  0E10               	movlw	16
  9527  003CFA  ECC4  F028         	call	_WriteUSART
  9528  003CFE                     l755:
  9529  003CFE  A2AC               	btfss	4012,1,c	;volatile
  9530  003D00  D7FE               	goto	l755
  9531                           
  9532                           ;main.c: 1382: WriteUSART(0x03);
  9533  003D02  0E03               	movlw	3
  9534  003D04  EFC4  F028         	goto	_WriteUSART
  9535  003D08                     __end_of_sendVSCPDriverErrorFrame:
  9536                           	opt stack 0
  9537  003D08                     PL24:
  9538                           	opt stack 24
  9539  003D08  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9540  003D0A  6E20               	movwf	?_crc8,c
  9541  003D0C  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9542  003D0E  6E21               	movwf	?_crc8+1,c
  9543  003D10  0E0F               	movlw	15
  9544  003D12  6E21               	movwf	?_crc8+1,c
  9545  003D14  0E5F               	movlw	__accesstop+-1
  9546  003D16  0012               	return	
  9547  003D18                     __end_ofPL24:
  9548                           	opt stack 0
  9549  003D18                     PL46:
  9550                           	opt stack 24
  9551  003D18  6E26               	movwf	?_sendEscapedUartData+1,c
  9552  003D1A  0E0F               	movlw	15
  9553  003D1C  6E26               	movwf	?_sendEscapedUartData+1,c
  9554  003D1E  0E5F               	movlw	__accesstop+-1
  9555  003D20  0012               	return	
  9556  003D22                     __end_ofPL46:
  9557                           	opt stack 0
  9558                           tblptru	equ	0xFF8
  9559                           tblptrh	equ	0xFF7
  9560                           tblptrl	equ	0xFF6
  9561                           tablat	equ	0xFF5
  9562                           prodh	equ	0xFF4
  9563                           prodl	equ	0xFF3
  9564                           intcon	equ	0xFF2
  9565                           indf0	equ	0xFEF
  9566                           postinc0	equ	0xFEE
  9567                           fsr0h	equ	0xFEA
  9568                           fsr0l	equ	0xFE9
  9569                           wreg	equ	0xFE8
  9570                           indf1	equ	0xFE7
  9571                           postinc1	equ	0xFE6
  9572                           postdec1	equ	0xFE5
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           plusw2	equ	0xFDB
  9579                           fsr2h	equ	0xFDA
  9580                           fsr2l	equ	0xFD9
  9581                           status	equ	0xFD8
  9582                           
  9583 ;; *************** function _calcCRC *****************
  9584 ;; Defined at:
  9585 ;;		line 2015 in file "main.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  p               2   36[COMRAM] PTR unsigned char 
  9588 ;;		 -> cmdbuf(80), 
  9589 ;;  len             1   38[COMRAM] unsigned char 
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;  crc             1   40[COMRAM] unsigned char 
  9592 ;;  j               1   39[COMRAM] unsigned char 
  9593 ;; Return value:  Size  Location     Type
  9594 ;;                  1    wreg      unsigned char 
  9595 ;; Registers used:
  9596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9597 ;; Tracked objects:
  9598 ;;		On entry : F/1
  9599 ;;		On exit  : D/1
  9600 ;;		Unchanged: 0/0
  9601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9602 ;;      Params:         3       0       0       0       0       0       0
  9603 ;;      Locals:         2       0       0       0       0       0       0
  9604 ;;      Temps:          0       0       0       0       0       0       0
  9605 ;;      Totals:         5       0       0       0       0       0       0
  9606 ;;Total ram usage:        5 bytes
  9607 ;; Hardware stack levels used:    1
  9608 ;; Hardware stack levels required when called:    4
  9609 ;; This function calls:
  9610 ;;		_crc8
  9611 ;; This function is called by:
  9612 ;;		_doModeVscp
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           	psect	text14
  9617  004F7A                     __ptext14:
  9618                           	opt stack 0
  9619  004F7A                     _calcCRC:
  9620                           	opt stack 25
  9621                           
  9622                           ; BSR set to: 1
  9623                           ;main.c: 2016: uint8_t j;
  9624                           ;main.c: 2017: uint8_t crc = 0;
  9625                           
  9626                           ;incstack = 0
  9627                           ;incstack = 0
  9628  004F7A  6A29               	clrf	calcCRC@crc,c
  9629                           
  9630                           ;main.c: 2019: for (j = 0; j < len; j++) {
  9631  004F7C  6A28               	clrf	calcCRC@j,c
  9632  004F7E  D014               	goto	l11602
  9633  004F80                     l11598:
  9634                           
  9635                           ;main.c: 2020: crc8(&crc, p[j]);
  9636  004F80  0E29               	movlw	low calcCRC@crc
  9637  004F82  6E20               	movwf	?_crc8,c
  9638  004F84  0E00               	movlw	high calcCRC@crc
  9639  004F86  6E21               	movwf	?_crc8+1,c
  9640  004F88  0E0F               	movlw	15
  9641  004F8A  6E21               	movwf	?_crc8+1,c
  9642  004F8C  0E5F               	movlw	__accesstop+-1
  9643  004F8E  6420               	cpfsgt	?_crc8,c
  9644  004F90  6A21               	clrf	?_crc8+1,c
  9645  004F92  5028               	movf	calcCRC@j,w,c
  9646  004F94  2425               	addwf	calcCRC@p,w,c
  9647  004F96  6ED9               	movwf	fsr2l,c
  9648  004F98  0E00               	movlw	0
  9649  004F9A  2026               	addwfc	calcCRC@p+1,w,c
  9650  004F9C  6EDA               	movwf	fsr2h,c
  9651  004F9E  50DF               	movf	indf2,w,c
  9652  004FA0  6E22               	movwf	?_crc8+2,c
  9653  004FA2  ECF5  F027         	call	_crc8	;wreg free
  9654                           
  9655                           ; BSR set to: 3
  9656  004FA6  2A28               	incf	calcCRC@j,f,c
  9657  004FA8                     l11602:
  9658  004FA8  5027               	movf	calcCRC@len,w,c
  9659  004FAA  5C28               	subwf	calcCRC@j,w,c
  9660  004FAC  E3E9               	bnc	l11598
  9661                           
  9662                           ;main.c: 2021: }
  9663                           ;main.c: 2023: return crc;
  9664  004FAE  5029               	movf	calcCRC@crc,w,c
  9665  004FB0  0012               	return	
  9666  004FB2                     __end_of_calcCRC:
  9667                           	opt stack 0
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           indf0	equ	0xFEF
  9676                           postinc0	equ	0xFEE
  9677                           fsr0h	equ	0xFEA
  9678                           fsr0l	equ	0xFE9
  9679                           wreg	equ	0xFE8
  9680                           indf1	equ	0xFE7
  9681                           postinc1	equ	0xFE6
  9682                           postdec1	equ	0xFE5
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           plusw2	equ	0xFDB
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _receivePrintEventCANAL *****************
  9694 ;; Defined at:
  9695 ;;		line 1582 in file "main.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  crc             1   14[BANK0 ] unsigned char 
  9700 ;;  data            8    0[BANK0 ] unsigned char [8]
  9701 ;;  id              4   10[BANK0 ] unsigned long 
  9702 ;;  dlc             1    9[BANK0 ] unsigned char 
  9703 ;;  i               1    8[BANK0 ] unsigned char 
  9704 ;; Return value:  Size  Location     Type
  9705 ;;                  1    wreg      enum E15660
  9706 ;; Registers used:
  9707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9708 ;; Tracked objects:
  9709 ;;		On entry : F/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9713 ;;      Params:         0       0       0       0       0       0       0
  9714 ;;      Locals:         0      15       0       0       0       0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0
  9716 ;;      Totals:         0      15       0       0       0       0       0
  9717 ;;Total ram usage:       15 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; Hardware stack levels required when called:    5
  9720 ;; This function calls:
  9721 ;;		_WriteUSART
  9722 ;;		_sendEscapedUartData
  9723 ;;		_crc8
  9724 ;;		_getCANFrame
  9725 ;; This function is called by:
  9726 ;;		_doModeVscp
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           	psect	text15
  9731  003134                     __ptext15:
  9732                           	opt stack 0
  9733  003134                     _receivePrintEventCANAL:
  9734                           	opt stack 24
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 1583: uint8_t i;
  9738                           ;main.c: 1584: uint32_t id;
  9739                           ;main.c: 1585: uint8_t dlc;
  9740                           ;main.c: 1586: uint8_t data[8];
  9741                           ;main.c: 1588: if (getCANFrame(&id, &dlc, &data)) {
  9742                           
  9743                           ;incstack = 0
  9744                           ;incstack = 0
  9745  003134  0E69               	movlw	low receivePrintEventCANAL@dlc
  9746  003136  6E2C               	movwf	?_getCANFrame,c
  9747  003138  0E00               	movlw	high receivePrintEventCANAL@data
  9748  00313A  6E2E               	movwf	?_getCANFrame+2,c
  9749  00313C  0E60               	movlw	low receivePrintEventCANAL@data
  9750  00313E  6E2D               	movwf	?_getCANFrame+1,c
  9751  003140  0E6A               	movlw	receivePrintEventCANAL@id& (0+255)
  9752  003142  EC40  F028         	call	_getCANFrame
  9753  003146  0900               	iorlw	0
  9754  003148  E101 D090          	bz	l904
  9755                           
  9756                           ;main.c: 1590: uint8_t crc = 0;
  9757  00314C  0100               	movlb	0	; () banked
  9758  00314E  6B6E               	clrf	receivePrintEventCANAL@crc& (0+255),b
  9759                           
  9760                           ; BSR set to: 0
  9761                           ;main.c: 1593: cntRxFrames++;
  9762  003150  0101               	movlb	1	; () banked
  9763  003152  2B0C               	incf	_cntRxFrames& (0+255),f,b
  9764  003154  0E00               	movlw	0
  9765  003156  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  9766  003158  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  9767  00315A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  9768                           
  9769                           ;main.c: 1594: cntRxBytes += dlc;
  9770  00315C  0100               	movlb	0	; () banked
  9771  00315E  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9772  003160  0101               	movlb	1	; () banked
  9773  003162  2708               	addwf	_cntRxBytes& (0+255),f,b
  9774  003164  0E00               	movlw	0
  9775  003166  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  9776  003168  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  9777  00316A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  9778  00316C                     l883:
  9779  00316C  A2AC               	btfss	4012,1,c	;volatile
  9780  00316E  D7FE               	goto	l883
  9781                           
  9782                           ;main.c: 1598: WriteUSART(0x10);
  9783  003170  0E10               	movlw	16
  9784  003172  ECC4  F028         	call	_WriteUSART
  9785  003176                     l886:
  9786  003176  A2AC               	btfss	4012,1,c	;volatile
  9787  003178  D7FE               	goto	l886
  9788                           
  9789                           ;main.c: 1600: WriteUSART(0x02);
  9790  00317A  0E02               	movlw	2
  9791  00317C  ECC4  F028         	call	_WriteUSART
  9792  003180                     l889:
  9793  003180  A2AC               	btfss	4012,1,c	;volatile
  9794  003182  D7FE               	goto	l889
  9795                           
  9796                           ;main.c: 1604: WriteUSART(2);
  9797  003184  0E02               	movlw	2
  9798  003186  ECC4  F028         	call	_WriteUSART
  9799                           
  9800                           ;main.c: 1605: crc8(&crc, 2);
  9801  00318A  0100               	movlb	0	; () banked
  9802  00318C  0E00               	movlw	high receivePrintEventCANAL@crc
  9803  00318E  6E21               	movwf	?_crc8+1,c
  9804  003190  0E6E               	movlw	low receivePrintEventCANAL@crc
  9805  003192  6E20               	movwf	?_crc8,c
  9806  003194  0E02               	movlw	2
  9807  003196  6E22               	movwf	?_crc8+2,c
  9808  003198  ECF5  F027         	call	_crc8	;wreg free
  9809  00319C                     l892:
  9810  00319C  A2AC               	btfss	4012,1,c	;volatile
  9811  00319E  D7FE               	goto	l892
  9812                           
  9813                           ;main.c: 1609: WriteUSART(0);
  9814  0031A0  0E00               	movlw	0
  9815  0031A2  ECC4  F028         	call	_WriteUSART
  9816                           
  9817                           ;main.c: 1610: crc8(&crc, 0);
  9818  0031A6  0100               	movlb	0	; () banked
  9819  0031A8  0E00               	movlw	high receivePrintEventCANAL@crc
  9820  0031AA  6E21               	movwf	?_crc8+1,c
  9821  0031AC  0E6E               	movlw	low receivePrintEventCANAL@crc
  9822  0031AE  6E20               	movwf	?_crc8,c
  9823  0031B0  0E00               	movlw	0
  9824  0031B2  6A22               	clrf	?_crc8+2,c
  9825  0031B4  ECF5  F027         	call	_crc8	;wreg free
  9826                           
  9827                           ; BSR set to: 3
  9828                           ;main.c: 1613: sendEscapedUartData(sequencyno, &crc);
  9829  0031B8  0100               	movlb	0	; () banked
  9830  0031BA  0E00               	movlw	high receivePrintEventCANAL@crc
  9831  0031BC  6E26               	movwf	?_sendEscapedUartData+1,c
  9832  0031BE  0E6E               	movlw	low receivePrintEventCANAL@crc
  9833  0031C0  6E25               	movwf	?_sendEscapedUartData,c
  9834  0031C2  503E               	movf	_sequencyno,w,c
  9835  0031C4  EC60  F024         	call	_sendEscapedUartData
  9836                           
  9837                           ;main.c: 1614: sequencyno++;
  9838  0031C8  2A3E               	incf	_sequencyno,f,c
  9839                           
  9840                           ;main.c: 1617: sendEscapedUartData(0, &crc);
  9841  0031CA  0100               	movlb	0	; () banked
  9842  0031CC  0E00               	movlw	high receivePrintEventCANAL@crc
  9843  0031CE  6E26               	movwf	?_sendEscapedUartData+1,c
  9844  0031D0  0E6E               	movlw	low receivePrintEventCANAL@crc
  9845  0031D2  6E25               	movwf	?_sendEscapedUartData,c
  9846  0031D4  0E00               	movlw	0
  9847  0031D6  EC60  F024         	call	_sendEscapedUartData
  9848                           
  9849                           ;main.c: 1618: sendEscapedUartData(4 + dlc, &crc);
  9850  0031DA  D849               	call	PL94	;call to abstracted procedure
  9851  0031DC  0F04               	addlw	4
  9852  0031DE  EC60  F024         	call	_sendEscapedUartData
  9853                           
  9854                           ;main.c: 1624: sendEscapedUartData((id >> 24) & 0xff, &crc);
  9855  0031E2  0E00               	movlw	high receivePrintEventCANAL@crc
  9856  0031E4  6E26               	movwf	?_sendEscapedUartData+1,c
  9857  0031E6  0E6E               	movlw	low receivePrintEventCANAL@crc
  9858  0031E8  6E25               	movwf	?_sendEscapedUartData,c
  9859  0031EA  0100               	movlb	0	; () banked
  9860  0031EC  516D               	movf	(receivePrintEventCANAL@id+3)& (0+255),w,b
  9861  0031EE  EC60  F024         	call	_sendEscapedUartData
  9862                           
  9863                           ;main.c: 1625: sendEscapedUartData((id >> 16) & 0xff, &crc);
  9864  0031F2  0E00               	movlw	high receivePrintEventCANAL@crc
  9865  0031F4  6E26               	movwf	?_sendEscapedUartData+1,c
  9866  0031F6  0E6E               	movlw	low receivePrintEventCANAL@crc
  9867  0031F8  6E25               	movwf	?_sendEscapedUartData,c
  9868  0031FA  0100               	movlb	0	; () banked
  9869  0031FC  516C               	movf	(receivePrintEventCANAL@id+2)& (0+255),w,b
  9870  0031FE  EC60  F024         	call	_sendEscapedUartData
  9871                           
  9872                           ;main.c: 1626: sendEscapedUartData((id >> 8) & 0xff, &crc);
  9873  003202  0E00               	movlw	high receivePrintEventCANAL@crc
  9874  003204  6E26               	movwf	?_sendEscapedUartData+1,c
  9875  003206  0E6E               	movlw	low receivePrintEventCANAL@crc
  9876  003208  6E25               	movwf	?_sendEscapedUartData,c
  9877  00320A  0100               	movlb	0	; () banked
  9878  00320C  516B               	movf	(receivePrintEventCANAL@id+1)& (0+255),w,b
  9879  00320E  EC60  F024         	call	_sendEscapedUartData
  9880                           
  9881                           ;main.c: 1627: sendEscapedUartData(id & 0xff, &crc);
  9882  003212  0100               	movlb	0	; () banked
  9883  003214  0E00               	movlw	high receivePrintEventCANAL@crc
  9884  003216  6E26               	movwf	?_sendEscapedUartData+1,c
  9885  003218  0E6E               	movlw	low receivePrintEventCANAL@crc
  9886  00321A  6E25               	movwf	?_sendEscapedUartData,c
  9887  00321C  516A               	movf	receivePrintEventCANAL@id& (0+255),w,b
  9888  00321E  EC60  F024         	call	_sendEscapedUartData
  9889                           
  9890                           ;main.c: 1630: sendEscapedUartData(dlc, &crc);
  9891  003222  D825               	call	PL94	;call to abstracted procedure
  9892  003224  EC60  F024         	call	_sendEscapedUartData
  9893                           
  9894                           ;main.c: 1632: for (i = 0; i < dlc; i++) {
  9895  003228  0100               	movlb	0	; () banked
  9896  00322A  6B68               	clrf	receivePrintEventCANAL@i& (0+255),b
  9897  00322C  D00D               	goto	l11586
  9898  00322E                     l11582:
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;main.c: 1633: sendEscapedUartData(data[ i ], &crc);
  9902  00322E  0E00               	movlw	high receivePrintEventCANAL@crc
  9903  003230  6E26               	movwf	?_sendEscapedUartData+1,c
  9904  003232  0E6E               	movlw	low receivePrintEventCANAL@crc
  9905  003234  6E25               	movwf	?_sendEscapedUartData,c
  9906  003236  5168               	movf	receivePrintEventCANAL@i& (0+255),w,b
  9907  003238  0F60               	addlw	low receivePrintEventCANAL@data
  9908  00323A  6ED9               	movwf	fsr2l,c
  9909  00323C  6ADA               	clrf	fsr2h,c
  9910  00323E  50DF               	movf	indf2,w,c
  9911  003240  EC60  F024         	call	_sendEscapedUartData
  9912  003244  0100               	movlb	0	; () banked
  9913  003246  2B68               	incf	receivePrintEventCANAL@i& (0+255),f,b
  9914  003248                     l11586:
  9915                           
  9916                           ; BSR set to: 0
  9917  003248  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9918  00324A  5D68               	subwf	receivePrintEventCANAL@i& (0+255),w,b
  9919  00324C  E3F0               	bnc	l11582
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;main.c: 1634: }
  9923                           ;main.c: 1637: sendEscapedUartData(crc, (0));
  9924  00324E  6A26               	clrf	?_sendEscapedUartData+1,c
  9925  003250  6A25               	clrf	?_sendEscapedUartData,c
  9926  003252  516E               	movf	receivePrintEventCANAL@crc& (0+255),w,b
  9927  003254  EC60  F024         	call	_sendEscapedUartData
  9928  003258                     l898:
  9929  003258  A2AC               	btfss	4012,1,c	;volatile
  9930  00325A  D7FE               	goto	l898
  9931                           
  9932                           ;main.c: 1641: WriteUSART(0x10);
  9933  00325C  0E10               	movlw	16
  9934  00325E  ECC4  F028         	call	_WriteUSART
  9935  003262                     l901:
  9936  003262  A2AC               	btfss	4012,1,c	;volatile
  9937  003264  D7FE               	goto	l901
  9938                           
  9939                           ;main.c: 1643: WriteUSART(0x03);
  9940  003266  0E03               	movlw	3
  9941  003268  ECC4  F028         	call	_WriteUSART
  9942  00326C                     l904:
  9943  00326C  0012               	return	
  9944  00326E                     __end_of_receivePrintEventCANAL:
  9945                           	opt stack 0
  9946  00326E                     PL94:
  9947                           	opt stack 24
  9948  00326E  0100               	movlb	0	; () banked
  9949  003270  0E00               	movlw	high receivePrintEventCANAL@crc
  9950  003272  6E26               	movwf	?_sendEscapedUartData+1,c
  9951  003274  0E6E               	movlw	low receivePrintEventCANAL@crc
  9952  003276  6E25               	movwf	?_sendEscapedUartData,c
  9953  003278  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9954  00327A  0012               	return	
  9955  00327C                     __end_ofPL94:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           prodh	equ	0xFF4
  9962                           prodl	equ	0xFF3
  9963                           intcon	equ	0xFF2
  9964                           indf0	equ	0xFEF
  9965                           postinc0	equ	0xFEE
  9966                           fsr0h	equ	0xFEA
  9967                           fsr0l	equ	0xFE9
  9968                           wreg	equ	0xFE8
  9969                           indf1	equ	0xFE7
  9970                           postinc1	equ	0xFE6
  9971                           postdec1	equ	0xFE5
  9972                           fsr1h	equ	0xFE2
  9973                           fsr1l	equ	0xFE1
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           plusw2	equ	0xFDB
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function _sendEscapedUartData *****************
  9983 ;; Defined at:
  9984 ;;		line 1318 in file "main.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;  c               1    wreg     unsigned char 
  9987 ;;  pcrc            2   36[COMRAM] PTR unsigned char 
  9988 ;;		 -> sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNac
      +k@crc(1), 
  9989 ;;		 -> sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  c               1   38[COMRAM] unsigned char 
  9992 ;; Return value:  Size  Location     Type
  9993 ;;		None               void
  9994 ;; Registers used:
  9995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/1
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10001 ;;      Params:         2       0       0       0       0       0       0
 10002 ;;      Locals:         1       0       0       0       0       0       0
 10003 ;;      Temps:          0       0       0       0       0       0       0
 10004 ;;      Totals:         3       0       0       0       0       0       0
 10005 ;;Total ram usage:        3 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    4
 10008 ;; This function calls:
 10009 ;;		_WriteUSART
 10010 ;;		_crc8
 10011 ;; This function is called by:
 10012 ;;		_sendVSCPDriverErrorFrame
 10013 ;;		_sendVSCPDriverAck
 10014 ;;		_sendVSCPDriverNack
 10015 ;;		_sendVSCPDriverCommandReply
 10016 ;;		_receivePrintEventCANAL
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           	psect	text16
 10021  0048C0                     __ptext16:
 10022                           	opt stack 0
 10023  0048C0                     _sendEscapedUartData:
 10024                           	opt stack 24
 10025                           
 10026                           ;incstack = 0
 10027                           ;incstack = 0
 10028                           ;sendEscapedUartData@c stored from wreg
 10029  0048C0  CFE8 F027          	movff	wreg,sendEscapedUartData@c
 10030                           
 10031                           ;main.c: 1319: if (0x10 == c) {
 10032  0048C4  5027               	movf	sendEscapedUartData@c,w,c
 10033  0048C6  0A10               	xorlw	16
 10034  0048C8  E121               	bnz	l727
 10035  0048CA                     l718:
 10036  0048CA  A2AC               	btfss	4012,1,c	;volatile
 10037  0048CC  D7FE               	goto	l718
 10038                           
 10039                           ;main.c: 1322: WriteUSART(0x10);
 10040  0048CE  0E10               	movlw	16
 10041  0048D0  ECC4  F028         	call	_WriteUSART
 10042                           
 10043                           ;main.c: 1323: if ((0) != pcrc) crc8(pcrc, 0x10);
 10044  0048D4  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10045  0048D6  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10046  0048D8  E008               	bz	l722
 10047  0048DA  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10048  0048DE  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10049  0048E2  0E10               	movlw	16
 10050  0048E4  6E22               	movwf	?_crc8+2,c
 10051  0048E6  ECF5  F027         	call	_crc8	;wreg free
 10052  0048EA                     l722:
 10053  0048EA  A2AC               	btfss	4012,1,c	;volatile
 10054  0048EC  D7FE               	goto	l722
 10055                           
 10056                           ;main.c: 1326: WriteUSART(0x10);
 10057  0048EE  0E10               	movlw	16
 10058  0048F0  ECC4  F028         	call	_WriteUSART
 10059                           
 10060                           ;main.c: 1327: if ((0) != pcrc) crc8(pcrc, 0x10);
 10061  0048F4  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10062  0048F6  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10063  0048F8  E019               	bz	l731
 10064  0048FA  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10065  0048FE  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10066  004902  0E10               	movlw	16
 10067  004904  6E22               	movwf	?_crc8+2,c
 10068  004906  ECF5  F027         	call	_crc8	;wreg free
 10069  00490A  D010               	goto	l731
 10070  00490C                     l727:
 10071  00490C  A2AC               	btfss	4012,1,c	;volatile
 10072  00490E  D7FE               	goto	l727
 10073                           
 10074                           ;main.c: 1332: WriteUSART(c);
 10075  004910  5027               	movf	sendEscapedUartData@c,w,c
 10076  004912  ECC4  F028         	call	_WriteUSART
 10077                           
 10078                           ;main.c: 1333: if ((0) != pcrc) crc8(pcrc, c);
 10079  004916  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10080  004918  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10081  00491A  E008               	bz	l731
 10082  00491C  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10083  004920  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10084  004924  C027  F022         	movff	sendEscapedUartData@c,?_crc8+2
 10085  004928  ECF5  F027         	call	_crc8	;wreg free
 10086  00492C                     l731:
 10087  00492C  0012               	return	
 10088  00492E                     __end_of_sendEscapedUartData:
 10089                           	opt stack 0
 10090                           tblptru	equ	0xFF8
 10091                           tblptrh	equ	0xFF7
 10092                           tblptrl	equ	0xFF6
 10093                           tablat	equ	0xFF5
 10094                           prodh	equ	0xFF4
 10095                           prodl	equ	0xFF3
 10096                           intcon	equ	0xFF2
 10097                           indf0	equ	0xFEF
 10098                           postinc0	equ	0xFEE
 10099                           fsr0h	equ	0xFEA
 10100                           fsr0l	equ	0xFE9
 10101                           wreg	equ	0xFE8
 10102                           indf1	equ	0xFE7
 10103                           postinc1	equ	0xFE6
 10104                           postdec1	equ	0xFE5
 10105                           fsr1h	equ	0xFE2
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           plusw2	equ	0xFDB
 10111                           fsr2h	equ	0xFDA
 10112                           fsr2l	equ	0xFD9
 10113                           status	equ	0xFD8
 10114                           
 10115 ;; *************** function _crc8 *****************
 10116 ;; Defined at:
 10117 ;;		line 47 in file "crc8.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  crc             2   31[COMRAM] PTR unsigned char 
 10120 ;;		 -> calcCRC@crc(1), sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), 
 10121 ;;		 -> sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10122 ;;  m               1   33[COMRAM] unsigned char 
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;		None
 10125 ;; Return value:  Size  Location     Type
 10126 ;;		None               void
 10127 ;; Registers used:
 10128 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/1
 10131 ;;		On exit  : F/3
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10134 ;;      Params:         3       0       0       0       0       0       0
 10135 ;;      Locals:         0       0       0       0       0       0       0
 10136 ;;      Temps:          2       0       0       0       0       0       0
 10137 ;;      Totals:         5       0       0       0       0       0       0
 10138 ;;Total ram usage:        5 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:    3
 10141 ;; This function calls:
 10142 ;;		_init_crc8
 10143 ;; This function is called by:
 10144 ;;		_sendEscapedUartData
 10145 ;;		_sendVSCPDriverErrorFrame
 10146 ;;		_sendVSCPDriverAck
 10147 ;;		_sendVSCPDriverNack
 10148 ;;		_sendVSCPDriverCommandReply
 10149 ;;		_receivePrintEventCANAL
 10150 ;;		_calcCRC
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           	psect	text17
 10155  004FEA                     __ptext17:
 10156                           	opt stack 0
 10157  004FEA                     _crc8:
 10158                           	opt stack 25
 10159                           
 10160                           ;crc8.c: 48: if ( !made_table ) {
 10161                           
 10162                           ;incstack = 0
 10163                           ;incstack = 0
 10164  004FEA  5034               	movf	_made_table+1,w,c
 10165  004FEC  1033               	iorwf	_made_table,w,c
 10166  004FEE  B4D8               	btfsc	status,2,c
 10167                           
 10168                           ;crc8.c: 49: init_crc8();
 10169  004FF0  EC97  F024         	call	_init_crc8	;wreg free
 10170                           
 10171                           ;crc8.c: 50: }
 10172                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 10173  004FF4  C020  FFD9         	movff	crc8@crc,fsr2l
 10174  004FF8  C021  FFDA         	movff	crc8@crc+1,fsr2h
 10175  004FFC  50DF               	movf	indf2,w,c
 10176  004FFE  1822               	xorwf	crc8@m,w,c
 10177  005000  6E23               	movwf	??_crc8& (0+255),c
 10178  005002  6A24               	clrf	(??_crc8+1)& (0+255),c
 10179  005004  0103               	movlb	3	; () banked
 10180  005006  0E00               	movlw	low _crc8_table
 10181  005008  2423               	addwf	??_crc8,w,c
 10182  00500A  6ED9               	movwf	fsr2l,c
 10183  00500C  0E03               	movlw	high _crc8_table
 10184  00500E  2024               	addwfc	??_crc8+1,w,c
 10185  005010  6EDA               	movwf	fsr2h,c
 10186  005012  C020  FFE1         	movff	crc8@crc,fsr1l
 10187  005016  C021  FFE2         	movff	crc8@crc+1,fsr1h
 10188  00501A  CFDF FFE7          	movff	indf2,indf1
 10189                           
 10190                           ; BSR set to: 3
 10191  00501E  0012               	return	
 10192  005020                     __end_of_crc8:
 10193                           	opt stack 0
 10194                           tblptru	equ	0xFF8
 10195                           tblptrh	equ	0xFF7
 10196                           tblptrl	equ	0xFF6
 10197                           tablat	equ	0xFF5
 10198                           prodh	equ	0xFF4
 10199                           prodl	equ	0xFF3
 10200                           intcon	equ	0xFF2
 10201                           indf0	equ	0xFEF
 10202                           postinc0	equ	0xFEE
 10203                           fsr0h	equ	0xFEA
 10204                           fsr0l	equ	0xFE9
 10205                           wreg	equ	0xFE8
 10206                           indf1	equ	0xFE7
 10207                           postinc1	equ	0xFE6
 10208                           postdec1	equ	0xFE5
 10209                           fsr1h	equ	0xFE2
 10210                           fsr1l	equ	0xFE1
 10211                           indf2	equ	0xFDF
 10212                           postinc2	equ	0xFDE
 10213                           postdec2	equ	0xFDD
 10214                           plusw2	equ	0xFDB
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _init_crc8 *****************
 10220 ;; Defined at:
 10221 ;;		line 25 in file "crc8.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  i               2   29[COMRAM] int 
 10226 ;;  j               2   26[COMRAM] int 
 10227 ;;  crc             1   28[COMRAM] unsigned char 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;		None               void
 10230 ;; Registers used:
 10231 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/1
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10237 ;;      Params:         0       0       0       0       0       0       0
 10238 ;;      Locals:         7       0       0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0
 10240 ;;      Totals:         7       0       0       0       0       0       0
 10241 ;;Total ram usage:        7 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    2
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_main
 10248 ;;		_crc8
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text18
 10253  00492E                     __ptext18:
 10254                           	opt stack 0
 10255  00492E                     _init_crc8:
 10256                           	opt stack 25
 10257                           
 10258                           ;crc8.c: 26: int i,j;
 10259                           ;crc8.c: 27: unsigned char crc;
 10260                           ;crc8.c: 29: if (!made_table) {
 10261                           
 10262                           ; BSR set to: 3
 10263                           ;incstack = 0
 10264                           ;incstack = 0
 10265  00492E  5034               	movf	_made_table+1,w,c
 10266  004930  1033               	iorwf	_made_table,w,c
 10267  004932  E131               	bnz	l1478
 10268                           
 10269                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 10270  004934  6A1E               	clrf	init_crc8@i,c
 10271  004936  6A1F               	clrf	init_crc8@i+1,c
 10272  004938                     l1470:
 10273                           
 10274                           ;crc8.c: 31: crc = i;
 10275  004938  C01E  F01D         	movff	init_crc8@i,init_crc8@crc
 10276                           
 10277                           ;crc8.c: 32: for (j=0; j<8; j++) {
 10278  00493C  6A1B               	clrf	init_crc8@j,c
 10279  00493E  6A1C               	clrf	init_crc8@j+1,c
 10280  004940                     l1472:
 10281                           
 10282                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 10283  004940  BE1D               	btfsc	init_crc8@crc,7,c
 10284  004942  D003               	goto	l9376
 10285  004944  6A19               	clrf	_init_crc8$2079,c
 10286  004946  6A1A               	clrf	_init_crc8$2079+1,c
 10287  004948  D003               	goto	l9378
 10288  00494A                     l9376:
 10289  00494A  6A1A               	clrf	_init_crc8$2079+1,c
 10290  00494C  0E07               	movlw	7
 10291  00494E  6E19               	movwf	_init_crc8$2079,c
 10292  004950                     l9378:
 10293  004950  501D               	movf	init_crc8@crc,w,c
 10294  004952  241D               	addwf	init_crc8@crc,w,c
 10295  004954  1819               	xorwf	_init_crc8$2079,w,c
 10296  004956  6E1D               	movwf	init_crc8@crc,c
 10297  004958  4A1B               	infsnz	init_crc8@j,f,c
 10298  00495A  2A1C               	incf	init_crc8@j+1,f,c
 10299  00495C  501C               	movf	init_crc8@j+1,w,c
 10300  00495E  0A80               	xorlw	128
 10301  004960  0F80               	addlw	-128
 10302  004962  0E08               	movlw	8
 10303  004964  B4D8               	btfsc	status,2,c
 10304  004966  5C1B               	subwf	init_crc8@j,w,c
 10305  004968  E3EB               	bnc	l1472
 10306                           
 10307                           ;crc8.c: 34: }
 10308                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 10309  00496A  0103               	movlb	3	; () banked
 10310  00496C  0E00               	movlw	low _crc8_table
 10311  00496E  241E               	addwf	init_crc8@i,w,c
 10312  004970  6ED9               	movwf	fsr2l,c
 10313  004972  0E03               	movlw	high _crc8_table
 10314  004974  201F               	addwfc	init_crc8@i+1,w,c
 10315  004976  6EDA               	movwf	fsr2h,c
 10316  004978  C01D  FFDF         	movff	init_crc8@crc,indf2
 10317                           
 10318                           ; BSR set to: 3
 10319  00497C  4A1E               	infsnz	init_crc8@i,f,c
 10320  00497E  2A1F               	incf	init_crc8@i+1,f,c
 10321                           
 10322                           ; BSR set to: 3
 10323  004980  501F               	movf	init_crc8@i+1,w,c
 10324  004982  0A80               	xorlw	128
 10325  004984  0F7F               	addlw	-129
 10326  004986  0E00               	movlw	0
 10327  004988  B4D8               	btfsc	status,2,c
 10328  00498A  5C1E               	subwf	init_crc8@i,w,c
 10329  00498C  E3D5               	bnc	l1470
 10330                           
 10331                           ; BSR set to: 3
 10332                           ;crc8.c: 37: }
 10333                           ;crc8.c: 38: made_table=1;
 10334  00498E  0E00               	movlw	0
 10335  004990  6E34               	movwf	_made_table+1,c
 10336  004992  0E01               	movlw	1
 10337  004994  6E33               	movwf	_made_table,c
 10338  004996                     l1478:
 10339  004996  0012               	return	
 10340  004998                     __end_of_init_crc8:
 10341                           	opt stack 0
 10342                           tblptru	equ	0xFF8
 10343                           tblptrh	equ	0xFF7
 10344                           tblptrl	equ	0xFF6
 10345                           tablat	equ	0xFF5
 10346                           prodh	equ	0xFF4
 10347                           prodl	equ	0xFF3
 10348                           intcon	equ	0xFF2
 10349                           indf0	equ	0xFEF
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           postinc1	equ	0xFE6
 10356                           postdec1	equ	0xFE5
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           plusw2	equ	0xFDB
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function _doModeVerbose *****************
 10368 ;; Defined at:
 10369 ;;		line 411 in file "main.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;		None
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 10374 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10375 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10376 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10377 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10378 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10379 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10380 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 10381 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10382 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10383 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10384 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10385 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10386 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10387 ;;  id              4   35[BANK2 ] unsigned long 
 10388 ;;  p               2   59[BANK2 ] PTR unsigned char 
 10389 ;;		 -> NULL(0), cmdbuf(80), 
 10390 ;;  mask_class      2   10[BANK2 ] unsigned short 
 10391 ;;  maskno          1   41[BANK2 ] unsigned char 
 10392 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 10393 ;;  mask_type       1   18[BANK2 ] unsigned char 
 10394 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 10395 ;;  id              4    0[BANK2 ] unsigned long 
 10396 ;;  p               2   57[BANK2 ] PTR unsigned char 
 10397 ;;		 -> NULL(0), cmdbuf(80), 
 10398 ;;  filter_class    2    8[BANK2 ] unsigned short 
 10399 ;;  filterno        1   40[BANK2 ] unsigned char 
 10400 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 10401 ;;  filter_type     1   15[BANK2 ] unsigned char 
 10402 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 10403 ;;  nodeid          1   47[BANK2 ] unsigned char 
 10404 ;;  p               2   52[BANK2 ] PTR unsigned char 
 10405 ;;		 -> NULL(0), cmdbuf(80), 
 10406 ;;  value           1   39[BANK2 ] unsigned char 
 10407 ;;  reg             1   34[BANK2 ] unsigned char 
 10408 ;;  page            1   33[BANK2 ] unsigned char 
 10409 ;;  nodeid          1   13[BANK2 ] unsigned char 
 10410 ;;  p               2   50[BANK2 ] PTR unsigned char 
 10411 ;;		 -> NULL(0), cmdbuf(80), 
 10412 ;;  value           1   49[BANK2 ] unsigned char 
 10413 ;;  i               1   48[BANK2 ] unsigned char 
 10414 ;;  reg             1   46[BANK2 ] unsigned char 
 10415 ;;  page            1   45[BANK2 ] unsigned char 
 10416 ;;  count           1   43[BANK2 ] unsigned char 
 10417 ;;  rv              1   32[BANK2 ] enum E15660
 10418 ;;  nodeid          1   12[BANK2 ] unsigned char 
 10419 ;;  p               2   55[BANK2 ] PTR unsigned char 
 10420 ;;		 -> NULL(0), cmdbuf(80), 
 10421 ;;  ifmode          1   54[BANK2 ] enum E16362
 10422 ;;  c               1   44[BANK2 ] unsigned char 
 10423 ;;  i               1   42[BANK2 ] unsigned char 
 10424 ;; Return value:  Size  Location     Type
 10425 ;;		None               void
 10426 ;; Registers used:
 10427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10433 ;;      Params:         0       0       0       0       0       0       0
 10434 ;;      Locals:         0       0       0      61       0       0       0
 10435 ;;      Temps:          0      20       0       0       0       0       0
 10436 ;;      Totals:         0      20       0      61       0       0       0
 10437 ;;Total ram usage:       81 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; Hardware stack levels required when called:    9
 10440 ;; This function calls:
 10441 ;;		_putsUSART
 10442 ;;		_printFirmwareVersion
 10443 ;;		_fifo_read
 10444 ;;		_writeEEPROM
 10445 ;;		_receivePrintEventVerbose
 10446 ;;		_stristr
 10447 ;;		_ECANSetOperationMode
 10448 ;;		_strtok
 10449 ;;		_atoi
 10450 ;;		_memset
 10451 ;;		_sendVSCPFrame
 10452 ;;		_printStatistics
 10453 ;;		_printErrors
 10454 ;;		_printHelp
 10455 ;;		_findNodes
 10456 ;;		_strcpy
 10457 ;;		_strchr
 10458 ;;		_readRegisterExtended
 10459 ;;		_sprintf
 10460 ;;		_WriteUSART
 10461 ;;		_printBinary
 10462 ;;		_writeRegisterExtended
 10463 ;;		_printNodeFirmwareVersion
 10464 ;;		_printGUID
 10465 ;;		_printMDF
 10466 ;;		_setFilter
 10467 ;;		__CANIDToRegs
 10468 ;; This function is called by:
 10469 ;;		_main
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           	psect	text19
 10474  0001AA                     __ptext19:
 10475                           	opt stack 0
 10476  0001AA                     _doModeVerbose:
 10477                           	opt stack 21
 10478                           
 10479                           ;main.c: 412: uint8_t c;
 10480                           ;main.c: 413: uint8_t i;
 10481                           ;main.c: 416: if (!bSilent) {
 10482                           
 10483                           ;incstack = 0
 10484                           ;incstack = 0
 10485  0001AA  0100               	movlb	0	; () banked
 10486  0001AC  67D6               	tstfsz	_bSilent& (0+255),b
 10487  0001AE  D002               	goto	l12564
 10488                           
 10489                           ; BSR set to: 0
 10490                           ;main.c: 417: receivePrintEventVerbose();
 10491  0001B0  ECFC  F010         	call	_receivePrintEventVerbose	;wreg free
 10492  0001B4                     l12564:
 10493                           
 10494                           ;main.c: 418: }
 10495                           ;main.c: 421: (INTCONbits.GIE = 0);
 10496  0001B4  9EF2               	bcf	intcon,7,c	;volatile
 10497                           
 10498                           ;main.c: 423: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 10499  0001B6  0E01               	movlw	high _serialInputFifo
 10500  0001B8  6E1A               	movwf	?_fifo_read+1,c
 10501  0001BA  0EC8               	movlw	low _serialInputFifo
 10502  0001BC  6E19               	movwf	?_fifo_read,c
 10503  0001BE  0102               	movlb	2	; () banked
 10504  0001C0  0E02               	movlw	high doModeVerbose@c
 10505  0001C2  6E1C               	movwf	?_fifo_read+3,c
 10506  0001C4  0EAC               	movlw	low doModeVerbose@c
 10507  0001C6  6E1B               	movwf	?_fifo_read+2,c
 10508  0001C8  6A1E               	clrf	?_fifo_read+5,c
 10509  0001CA  0E01               	movlw	1
 10510  0001CC  6E1D               	movwf	?_fifo_read+4,c
 10511  0001CE  EC61  F01F         	call	_fifo_read	;wreg free
 10512  0001D2  0419               	decf	?_fifo_read,w,c
 10513  0001D4  101A               	iorwf	?_fifo_read+1,w,c
 10514  0001D6  E002 EFA1  F009    	bnz	l13162
 10515                           
 10516                           ;main.c: 426: (INTCONbits.GIE = 1);
 10517  0001DC  8EF2               	bsf	intcon,7,c	;volatile
 10518                           
 10519                           ;main.c: 429: cmdbuf[ pos ] = c;
 10520  0001DE  0E20               	movlw	low _cmdbuf
 10521  0001E0  0100               	movlb	0	; () banked
 10522  0001E2  25D8               	addwf	_pos& (0+255),w,b
 10523  0001E4  6ED9               	movwf	fsr2l,c
 10524  0001E6  6ADA               	clrf	fsr2h,c
 10525  0001E8  0E01               	movlw	high _cmdbuf
 10526  0001EA  22DA               	addwfc	fsr2h,f,c
 10527  0001EC  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 10528                           
 10529                           ; BSR set to: 2
 10530                           ;main.c: 430: pos++;
 10531  0001F0  2BD8               	incf	_pos& (0+255),f,b
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;main.c: 432: if (pos >= 128u) {
 10535  0001F2  0E7F               	movlw	127
 10536  0001F4  65D8               	cpfsgt	_pos& (0+255),b
 10537  0001F6  D001               	goto	l12578
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;main.c: 436: pos = 0;
 10541  0001F8  6BD8               	clrf	_pos& (0+255),b
 10542  0001FA                     l12578:
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;main.c: 438: }
 10546                           ;main.c: 441: if (0x0d == c) {
 10547  0001FA  0102               	movlb	2	; () banked
 10548  0001FC  51AC               	movf	doModeVerbose@c& (0+255),w,b
 10549  0001FE  0A0D               	xorlw	13
 10550  000200  E002 EFA1  F009    	bnz	l13162
 10551                           
 10552                           ; BSR set to: 2
 10553                           ;main.c: 443: cmdbuf[ pos ] = 0;
 10554  000206  0E20               	movlw	low _cmdbuf
 10555  000208  0100               	movlb	0	; () banked
 10556  00020A  25D8               	addwf	_pos& (0+255),w,b
 10557  00020C  6ED9               	movwf	fsr2l,c
 10558  00020E  6ADA               	clrf	fsr2h,c
 10559  000210  0101               	movlb	1	; () banked
 10560  000212  0E01               	movlw	high _cmdbuf
 10561  000214  22DA               	addwfc	fsr2h,f,c
 10562  000216  6ADF               	clrf	indf2,c
 10563                           
 10564                           ; BSR set to: 1
 10565                           ;main.c: 446: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 10566  000218  6E27               	movwf	?_stristr+1,c
 10567  00021A  0E20               	movlw	low _cmdbuf
 10568  00021C  6E26               	movwf	?_stristr,c
 10569  00021E  0E7F               	movlw	high STR_5
 10570  000220  6E29               	movwf	?_stristr+3,c
 10571  000222  0ED0               	movlw	low STR_5
 10572  000224  6E28               	movwf	?_stristr+2,c
 10573  000226  EC75  F023         	call	_stristr	;wreg free
 10574  00022A  ECA3  F009         	call	PL2	;call to abstracted procedure
 10575  00022E  E102               	bnz	u16535
 10576  000230  5026               	movf	?_stristr,w,c
 10577  000232  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10578  000234                     u16535:
 10579  000234  E10F               	bnz	l12588
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;main.c: 447: putsUSART((char *) "Will enter bootloader now...\r\n");
 10583  000236  0E7A               	movlw	high STR_6
 10584  000238  6E1B               	movwf	?_putsUSART+1,c
 10585  00023A  0EED               	movlw	low STR_6
 10586  00023C  6E1A               	movwf	?_putsUSART,c
 10587  00023E  ECE6  F025         	call	_putsUSART	;wreg free
 10588                           
 10589                           ;main.c: 448: writeEEPROM(0x00, 0xFF);
 10590  000242  6A1A               	clrf	?_writeEEPROM+1,c
 10591  000244  6A19               	clrf	?_writeEEPROM,c
 10592  000246  0EFF               	movlw	255
 10593  000248  681B               	setf	?_writeEEPROM+2,c
 10594  00024A  EC6D  F028         	call	_writeEEPROM	;wreg free
 10595  00024E  00FF               	reset		;# 
 10596                           
 10597                           ;main.c: 450: }
 10598  000250  EF93  F009         	goto	l13158
 10599  000254                     l12588:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;main.c: 451: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 10603  000254  0101               	movlb	1	; () banked
 10604  000256  0E01               	movlw	high _cmdbuf
 10605  000258  6E27               	movwf	?_stristr+1,c
 10606  00025A  0E20               	movlw	low _cmdbuf
 10607  00025C  6E26               	movwf	?_stristr,c
 10608  00025E  0E7F               	movlw	high STR_7
 10609  000260  6E29               	movwf	?_stristr+3,c
 10610  000262  0EB7               	movlw	low STR_7
 10611  000264  6E28               	movwf	?_stristr+2,c
 10612  000266  EC75  F023         	call	_stristr	;wreg free
 10613  00026A  ECA3  F009         	call	PL2	;call to abstracted procedure
 10614  00026E  E102               	bnz	u16545
 10615  000270  5026               	movf	?_stristr,w,c
 10616  000272  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10617  000274                     u16545:
 10618  000274  E10C               	bnz	l12596
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;main.c: 452: bSilent = 0;
 10622  000276  6BD6               	clrf	_bSilent& (0+255),b
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;main.c: 453: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10626  000278  0E00               	movlw	0
 10627  00027A  ECAD  F028         	call	_ECANSetOperationMode
 10628                           
 10629                           ;main.c: 454: putsUSART((char *) "+OK\r\n");
 10630  00027E  0E7F               	movlw	high STR_8
 10631  000280  6E1B               	movwf	?_putsUSART+1,c
 10632  000282  0E80               	movlw	low STR_8
 10633  000284  6E1A               	movwf	?_putsUSART,c
 10634  000286  ECE6  F025         	call	_putsUSART	;wreg free
 10635                           
 10636                           ;main.c: 455: }
 10637  00028A  EF93  F009         	goto	l13158
 10638  00028E                     l12596:
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;main.c: 456: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 10642  00028E  0101               	movlb	1	; () banked
 10643  000290  0E01               	movlw	high _cmdbuf
 10644  000292  6E27               	movwf	?_stristr+1,c
 10645  000294  0E20               	movlw	low _cmdbuf
 10646  000296  6E26               	movwf	?_stristr,c
 10647  000298  0E7F               	movlw	high STR_9
 10648  00029A  6E29               	movwf	?_stristr+3,c
 10649  00029C  0E5E               	movlw	low STR_9
 10650  00029E  6E28               	movwf	?_stristr+2,c
 10651  0002A0  EC75  F023         	call	_stristr	;wreg free
 10652  0002A4  ECA3  F009         	call	PL2	;call to abstracted procedure
 10653  0002A8  E102               	bnz	u16555
 10654  0002AA  5026               	movf	?_stristr,w,c
 10655  0002AC  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10656  0002AE                     u16555:
 10657  0002AE  E10D               	bnz	l12604
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;main.c: 457: bSilent = 1;
 10661  0002B0  0E01               	movlw	1
 10662  0002B2  6FD6               	movwf	_bSilent& (0+255),b
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;main.c: 458: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10666  0002B4  0E00               	movlw	0
 10667  0002B6  ECAD  F028         	call	_ECANSetOperationMode
 10668                           
 10669                           ;main.c: 459: putsUSART((char *) "+OK\r\n");
 10670  0002BA  0E7F               	movlw	high STR_8
 10671  0002BC  6E1B               	movwf	?_putsUSART+1,c
 10672  0002BE  0E80               	movlw	low STR_8
 10673  0002C0  6E1A               	movwf	?_putsUSART,c
 10674  0002C2  ECE6  F025         	call	_putsUSART	;wreg free
 10675                           
 10676                           ;main.c: 460: }
 10677  0002C6  EF93  F009         	goto	l13158
 10678  0002CA                     l12604:
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 461: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 10682  0002CA  0101               	movlb	1	; () banked
 10683  0002CC  0E01               	movlw	high _cmdbuf
 10684  0002CE  6E27               	movwf	?_stristr+1,c
 10685  0002D0  0E20               	movlw	low _cmdbuf
 10686  0002D2  6E26               	movwf	?_stristr,c
 10687  0002D4  0E7F               	movlw	high STR_11
 10688  0002D6  6E29               	movwf	?_stristr+3,c
 10689  0002D8  0E92               	movlw	low STR_11
 10690  0002DA  6E28               	movwf	?_stristr+2,c
 10691  0002DC  EC75  F023         	call	_stristr	;wreg free
 10692  0002E0  ECA3  F009         	call	PL2	;call to abstracted procedure
 10693  0002E4  E102               	bnz	u16565
 10694  0002E6  5026               	movf	?_stristr,w,c
 10695  0002E8  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10696  0002EA                     u16565:
 10697  0002EA  E10D               	bnz	l12612
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 462: bSilent = 1;
 10701  0002EC  0E01               	movlw	1
 10702  0002EE  6FD6               	movwf	_bSilent& (0+255),b
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;main.c: 463: ECANSetOperationMode(0x20);
 10706  0002F0  0E20               	movlw	32
 10707  0002F2  ECAD  F028         	call	_ECANSetOperationMode
 10708                           
 10709                           ;main.c: 464: putsUSART((char *) "+OK\r\n");
 10710  0002F6  0E7F               	movlw	high STR_8
 10711  0002F8  6E1B               	movwf	?_putsUSART+1,c
 10712  0002FA  0E80               	movlw	low STR_8
 10713  0002FC  6E1A               	movwf	?_putsUSART,c
 10714  0002FE  ECE6  F025         	call	_putsUSART	;wreg free
 10715                           
 10716                           ;main.c: 465: }
 10717  000302  EF93  F009         	goto	l13158
 10718  000306                     l12612:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;main.c: 466: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 10722  000306  0101               	movlb	1	; () banked
 10723  000308  0E01               	movlw	high _cmdbuf
 10724  00030A  6E27               	movwf	?_stristr+1,c
 10725  00030C  0E20               	movlw	low _cmdbuf
 10726  00030E  6E26               	movwf	?_stristr,c
 10727  000310  0E7E               	movlw	high STR_13
 10728  000312  6E29               	movwf	?_stristr+3,c
 10729  000314  0ECD               	movlw	low STR_13
 10730  000316  6E28               	movwf	?_stristr+2,c
 10731  000318  EC75  F023         	call	_stristr	;wreg free
 10732  00031C  ECA3  F009         	call	PL2	;call to abstracted procedure
 10733  000320  E102               	bnz	u16575
 10734  000322  5026               	movf	?_stristr,w,c
 10735  000324  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10736  000326                     u16575:
 10737  000326  E10C               	bnz	l12620
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;main.c: 467: bSilent = 0;
 10741  000328  6BD6               	clrf	_bSilent& (0+255),b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;main.c: 468: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 10745  00032A  0E40               	movlw	64
 10746  00032C  ECAD  F028         	call	_ECANSetOperationMode
 10747                           
 10748                           ;main.c: 469: putsUSART((char *) "+OK\r\n");
 10749  000330  0E7F               	movlw	high STR_8
 10750  000332  6E1B               	movwf	?_putsUSART+1,c
 10751  000334  0E80               	movlw	low STR_8
 10752  000336  6E1A               	movwf	?_putsUSART,c
 10753  000338  ECE6  F025         	call	_putsUSART	;wreg free
 10754                           
 10755                           ;main.c: 470: }
 10756  00033C  EF93  F009         	goto	l13158
 10757  000340                     l12620:
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;main.c: 471: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 10761  000340  0101               	movlb	1	; () banked
 10762  000342  0E01               	movlw	high _cmdbuf
 10763  000344  6E27               	movwf	?_stristr+1,c
 10764  000346  0E20               	movlw	low _cmdbuf
 10765  000348  6E26               	movwf	?_stristr,c
 10766  00034A  0E7F               	movlw	high STR_15
 10767  00034C  6E29               	movwf	?_stristr+3,c
 10768  00034E  0E50               	movlw	low STR_15
 10769  000350  6E28               	movwf	?_stristr+2,c
 10770  000352  EC75  F023         	call	_stristr	;wreg free
 10771  000356  ECA3  F009         	call	PL2	;call to abstracted procedure
 10772  00035A  E102               	bnz	u16585
 10773  00035C  5026               	movf	?_stristr,w,c
 10774  00035E  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10775  000360                     u16585:
 10776  000360  E10C               	bnz	l12628
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;main.c: 472: bSilent = 0;
 10780  000362  6BD6               	clrf	_bSilent& (0+255),b
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;main.c: 473: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 10784  000364  0E60               	movlw	96
 10785  000366  ECAD  F028         	call	_ECANSetOperationMode
 10786                           
 10787                           ;main.c: 474: putsUSART((char *) "+OK\r\n");
 10788  00036A  0E7F               	movlw	high STR_8
 10789  00036C  6E1B               	movwf	?_putsUSART+1,c
 10790  00036E  0E80               	movlw	low STR_8
 10791  000370  6E1A               	movwf	?_putsUSART,c
 10792  000372  ECE6  F025         	call	_putsUSART	;wreg free
 10793                           
 10794                           ;main.c: 475: }
 10795  000376  EF93  F009         	goto	l13158
 10796  00037A                     l12628:
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;main.c: 477: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 10800  00037A  0101               	movlb	1	; () banked
 10801  00037C  0E01               	movlw	high _cmdbuf
 10802  00037E  6E27               	movwf	?_stristr+1,c
 10803  000380  0E20               	movlw	low _cmdbuf
 10804  000382  6E26               	movwf	?_stristr,c
 10805  000384  0E7F               	movlw	high STR_17
 10806  000386  6E29               	movwf	?_stristr+3,c
 10807  000388  0E0E               	movlw	low STR_17
 10808  00038A  6E28               	movwf	?_stristr+2,c
 10809  00038C  EC75  F023         	call	_stristr	;wreg free
 10810  000390  ECA3  F009         	call	PL2	;call to abstracted procedure
 10811  000394  E102               	bnz	u16595
 10812  000396  5026               	movf	?_stristr,w,c
 10813  000398  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10814  00039A                     u16595:
 10815  00039A  E10A               	bnz	l12634
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;main.c: 478: printFirmwareVersion();
 10819  00039C  EC65  F022         	call	_printFirmwareVersion	;wreg free
 10820                           
 10821                           ;main.c: 479: putsUSART((char *) "+OK\r\n");
 10822  0003A0  0E7F               	movlw	high STR_8
 10823  0003A2  6E1B               	movwf	?_putsUSART+1,c
 10824  0003A4  0E80               	movlw	low STR_8
 10825  0003A6  6E1A               	movwf	?_putsUSART,c
 10826  0003A8  ECE6  F025         	call	_putsUSART	;wreg free
 10827                           
 10828                           ;main.c: 480: }
 10829  0003AC  EF93  F009         	goto	l13158
 10830  0003B0                     l12634:
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;main.c: 481: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 10834  0003B0  0101               	movlb	1	; () banked
 10835  0003B2  0E01               	movlw	high _cmdbuf
 10836  0003B4  6E27               	movwf	?_stristr+1,c
 10837  0003B6  0E20               	movlw	low _cmdbuf
 10838  0003B8  6E26               	movwf	?_stristr,c
 10839  0003BA  0E7F               	movlw	high STR_19
 10840  0003BC  6E29               	movwf	?_stristr+3,c
 10841  0003BE  0E49               	movlw	low STR_19
 10842  0003C0  6E28               	movwf	?_stristr+2,c
 10843  0003C2  EC75  F023         	call	_stristr	;wreg free
 10844  0003C6  ECA3  F009         	call	PL2	;call to abstracted procedure
 10845  0003CA  E102               	bnz	u16605
 10846  0003CC  5026               	movf	?_stristr,w,c
 10847  0003CE  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10848  0003D0                     u16605:
 10849  0003D0  E161               	bnz	l12670
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;main.c: 482: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 10853  0003D2  506F               	movf	3951,w,c	;volatile
 10854  0003D4  0BE0               	andlw	224
 10855  0003D6  0102               	movlb	2	; () banked
 10856  0003D8  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 10857                           
 10858                           ; BSR set to: 2
 10859                           ;main.c: 483: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 10860  0003DA  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 10861  0003DC  D00B               	goto	l12644
 10862                           
 10863                           ; BSR set to: 2
 10864  0003DE  0100               	movlb	0	; () banked
 10865  0003E0  67D6               	tstfsz	_bSilent& (0+255),b
 10866  0003E2  D008               	goto	l12644
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;main.c: 484: putsUSART((char *) "+OK - Normal mode\r\n");
 10870  0003E4  0E7D               	movlw	high STR_20
 10871  0003E6  6E1B               	movwf	?_putsUSART+1,c
 10872  0003E8  0E83               	movlw	low STR_20
 10873  0003EA  6E1A               	movwf	?_putsUSART,c
 10874  0003EC  ECE6  F025         	call	_putsUSART	;wreg free
 10875                           
 10876                           ;main.c: 485: } else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 10877  0003F0  EF93  F009         	goto	l13158
 10878  0003F4                     l12644:
 10879  0003F4  0102               	movlb	2	; () banked
 10880  0003F6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10881  0003F8  0E01               	movlw	1
 10882  0003FA  A4D8               	btfss	status,2,c
 10883  0003FC  0E00               	movlw	0
 10884  0003FE  0100               	movlb	0	; () banked
 10885  000400  15D6               	andwf	_bSilent& (0+255),w,b
 10886  000402  E008               	bz	l12648
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 486: putsUSART((char *) "+OK - Silent mode\r\n");
 10890  000404  0E7D               	movlw	high STR_21
 10891  000406  6E1B               	movwf	?_putsUSART+1,c
 10892  000408  0E97               	movlw	low STR_21
 10893  00040A  6E1A               	movwf	?_putsUSART,c
 10894  00040C  ECE6  F025         	call	_putsUSART	;wreg free
 10895                           
 10896                           ;main.c: 487: } else if (ECAN_OP_MODE_SLEEP == ifmode) {
 10897  000410  EF93  F009         	goto	l13158
 10898  000414                     l12648:
 10899                           
 10900                           ; BSR set to: 0
 10901  000414  0102               	movlb	2	; () banked
 10902  000416  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10903  000418  0A20               	xorlw	32
 10904  00041A  E108               	bnz	l12652
 10905                           
 10906                           ; BSR set to: 2
 10907                           ;main.c: 488: putsUSART((char *) "+OK - Sleep mode\r\n");
 10908  00041C  0E7D               	movlw	high STR_22
 10909  00041E  6E1B               	movwf	?_putsUSART+1,c
 10910  000420  0ED3               	movlw	low STR_22
 10911  000422  6E1A               	movwf	?_putsUSART,c
 10912  000424  ECE6  F025         	call	_putsUSART	;wreg free
 10913                           
 10914                           ;main.c: 489: } else if (ECAN_OP_MODE_LOOP == ifmode) {
 10915  000428  EF93  F009         	goto	l13158
 10916  00042C                     l12652:
 10917                           
 10918                           ; BSR set to: 2
 10919  00042C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10920  00042E  0A40               	xorlw	64
 10921  000430  E108               	bnz	l12656
 10922                           
 10923                           ; BSR set to: 2
 10924                           ;main.c: 490: putsUSART((char *) "+OK - Loopback mode\r\n");
 10925  000432  0E7D               	movlw	high STR_23
 10926  000434  6E1B               	movwf	?_putsUSART+1,c
 10927  000436  0E06               	movlw	low STR_23
 10928  000438  6E1A               	movwf	?_putsUSART,c
 10929  00043A  ECE6  F025         	call	_putsUSART	;wreg free
 10930                           
 10931                           ;main.c: 491: } else if (ECAN_OP_MODE_LISTEN == ifmode) {
 10932  00043E  EF93  F009         	goto	l13158
 10933  000442                     l12656:
 10934                           
 10935                           ; BSR set to: 2
 10936  000442  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10937  000444  0A60               	xorlw	96
 10938  000446  E108               	bnz	l12660
 10939                           
 10940                           ; BSR set to: 2
 10941                           ;main.c: 492: putsUSART((char *) "+OK - Listen only mode\r\n");
 10942  000448  0E7B               	movlw	high STR_24
 10943  00044A  6E1B               	movwf	?_putsUSART+1,c
 10944  00044C  0ECF               	movlw	low STR_24
 10945  00044E  6E1A               	movwf	?_putsUSART,c
 10946  000450  ECE6  F025         	call	_putsUSART	;wreg free
 10947                           
 10948                           ;main.c: 493: } else if (ECAN_OP_MODE_CONFIG == ifmode) {
 10949  000454  EF93  F009         	goto	l13158
 10950  000458                     l12660:
 10951                           
 10952                           ; BSR set to: 2
 10953  000458  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10954  00045A  0A80               	xorlw	128
 10955  00045C  E108               	bnz	l12664
 10956                           
 10957                           ; BSR set to: 2
 10958                           ;main.c: 494: putsUSART((char *) "+OK - Closed mode\r\n");
 10959  00045E  0E7D               	movlw	high STR_25
 10960  000460  6E1B               	movwf	?_putsUSART+1,c
 10961  000462  0E6F               	movlw	low STR_25
 10962  000464  6E1A               	movwf	?_putsUSART,c
 10963  000466  ECE6  F025         	call	_putsUSART	;wreg free
 10964                           
 10965                           ;main.c: 495: } else if (ECAN_OP_MODE_BITS == ifmode) {
 10966  00046A  EF93  F009         	goto	l13158
 10967  00046E                     l12664:
 10968                           
 10969                           ; BSR set to: 2
 10970  00046E  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 10971  000470  0AE0               	xorlw	224
 10972  000472  E108               	bnz	l12668
 10973                           
 10974                           ; BSR set to: 2
 10975                           ;main.c: 496: putsUSART((char *) "+OK - Bits mode\r\n");
 10976  000474  0E7D               	movlw	high STR_26
 10977  000476  6E1B               	movwf	?_putsUSART+1,c
 10978  000478  0EE6               	movlw	low STR_26
 10979  00047A  6E1A               	movwf	?_putsUSART,c
 10980  00047C  ECE6  F025         	call	_putsUSART	;wreg free
 10981                           
 10982                           ;main.c: 497: } else {
 10983  000480  EF93  F009         	goto	l13158
 10984  000484                     l12668:
 10985                           
 10986                           ; BSR set to: 2
 10987                           ;main.c: 498: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 10988  000484  0E7C               	movlw	high STR_27
 10989  000486  6E1B               	movwf	?_putsUSART+1,c
 10990  000488  0E49               	movlw	low STR_27
 10991  00048A  6E1A               	movwf	?_putsUSART,c
 10992  00048C  ECE6  F025         	call	_putsUSART	;wreg free
 10993  000490  EF93  F009         	goto	l13158
 10994  000494                     l12670:
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;main.c: 502: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 10998  000494  0101               	movlb	1	; () banked
 10999  000496  0E01               	movlw	high _cmdbuf
 11000  000498  6E27               	movwf	?_stristr+1,c
 11001  00049A  0E20               	movlw	low _cmdbuf
 11002  00049C  6E26               	movwf	?_stristr,c
 11003  00049E  0E7F               	movlw	high STR_28
 11004  0004A0  6E29               	movwf	?_stristr+3,c
 11005  0004A2  0EEB               	movlw	low STR_28
 11006  0004A4  6E28               	movwf	?_stristr+2,c
 11007  0004A6  EC75  F023         	call	_stristr	;wreg free
 11008  0004AA  ECA3  F009         	call	PL2	;call to abstracted procedure
 11009  0004AE  E102               	bnz	u16705
 11010  0004B0  5026               	movf	?_stristr,w,c
 11011  0004B2  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11012  0004B4                     u16705:
 11013  0004B4  E001 D0D9          	bnz	l12724
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;main.c: 504: char *p = strtok(cmdbuf, ",");
 11017  0004B8  ECF1  F009         	call	PL30	;call to abstracted procedure
 11018  0004BC  EC1C  F022         	call	_strtok	;wreg free
 11019  0004C0  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11020  0004C4  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11021                           
 11022                           ;main.c: 507: vscpPriority = 3;
 11023  0004C8  0E03               	movlw	3
 11024  0004CA  0100               	movlb	0	; () banked
 11025  0004CC  6FDD               	movwf	_vscpPriority& (0+255),b
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;main.c: 508: if ((0) != p) {
 11029  0004CE  0102               	movlb	2	; () banked
 11030  0004D0  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11031  0004D2  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11032  0004D4  E009               	bz	l12680
 11033                           
 11034                           ; BSR set to: 2
 11035                           ;main.c: 509: vscpPriority = atoi(p);
 11036  0004D6  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11037  0004DA  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11038  0004DE  EC6D  F01B         	call	_atoi	;wreg free
 11039  0004E2  501F               	movf	?_atoi,w,c
 11040  0004E4  0100               	movlb	0	; () banked
 11041  0004E6  6FDD               	movwf	_vscpPriority& (0+255),b
 11042  0004E8                     l12680:
 11043                           
 11044                           ;main.c: 510: }
 11045                           ;main.c: 513: vscpClass = 0;
 11046  0004E8  0100               	movlb	0	; () banked
 11047  0004EA  6BDA               	clrf	_vscpClass& (0+255),b
 11048  0004EC  6BDB               	clrf	(_vscpClass+1)& (0+255),b
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;main.c: 514: if ((0) != (p = strtok((0), ","))) {
 11052  0004EE  ECAA  F009         	call	PL6	;call to abstracted procedure
 11053  0004F2  EC1C  F022         	call	_strtok	;wreg free
 11054  0004F6  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11055  0004FA  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11056  0004FE  0102               	movlb	2	; () banked
 11057  000500  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11058  000502  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11059  000504  E00A               	bz	l12686
 11060                           
 11061                           ; BSR set to: 2
 11062                           ;main.c: 515: vscpClass = atoi(p);
 11063  000506  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11064  00050A  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11065  00050E  EC6D  F01B         	call	_atoi	;wreg free
 11066  000512  C01F  F0DA         	movff	?_atoi,_vscpClass
 11067  000516  C020  F0DB         	movff	?_atoi+1,_vscpClass+1
 11068  00051A                     l12686:
 11069                           
 11070                           ;main.c: 516: }
 11071                           ;main.c: 519: vscpType = 0;
 11072  00051A  0100               	movlb	0	; () banked
 11073  00051C  6BDF               	clrf	_vscpType& (0+255),b
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;main.c: 520: if ((0) != (p = strtok((0), ","))) {
 11077  00051E  ECAA  F009         	call	PL6	;call to abstracted procedure
 11078  000522  EC1C  F022         	call	_strtok	;wreg free
 11079  000526  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11080  00052A  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11081  00052E  0102               	movlb	2	; () banked
 11082  000530  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11083  000532  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11084  000534  E009               	bz	l12692
 11085                           
 11086                           ; BSR set to: 2
 11087                           ;main.c: 521: vscpType = atoi(p);
 11088  000536  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11089  00053A  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11090  00053E  EC6D  F01B         	call	_atoi	;wreg free
 11091  000542  501F               	movf	?_atoi,w,c
 11092  000544  0100               	movlb	0	; () banked
 11093  000546  6FDF               	movwf	_vscpType& (0+255),b
 11094  000548                     l12692:
 11095                           
 11096                           ;main.c: 522: }
 11097                           ;main.c: 525: vscpNodeId = 0;
 11098  000548  0100               	movlb	0	; () banked
 11099  00054A  6BDC               	clrf	_vscpNodeId& (0+255),b
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;main.c: 526: if ((0) != (p = strtok((0), ","))) {
 11103  00054C  ECAA  F009         	call	PL6	;call to abstracted procedure
 11104  000550  EC1C  F022         	call	_strtok	;wreg free
 11105  000554  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11106  000558  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11107  00055C  0102               	movlb	2	; () banked
 11108  00055E  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11109  000560  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11110  000562  E009               	bz	l12698
 11111                           
 11112                           ; BSR set to: 2
 11113                           ;main.c: 527: vscpNodeId = atoi(p);
 11114  000564  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11115  000568  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11116  00056C  EC6D  F01B         	call	_atoi	;wreg free
 11117  000570  501F               	movf	?_atoi,w,c
 11118  000572  0100               	movlb	0	; () banked
 11119  000574  6FDC               	movwf	_vscpNodeId& (0+255),b
 11120  000576                     l12698:
 11121                           
 11122                           ;main.c: 528: }
 11123                           ;main.c: 531: vscpSize = 0;
 11124  000576  0100               	movlb	0	; () banked
 11125  000578  6BDE               	clrf	_vscpSize& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;main.c: 532: if ((0) != (p = strtok((0), ","))) {
 11129  00057A  ECAA  F009         	call	PL6	;call to abstracted procedure
 11130  00057E  EC1C  F022         	call	_strtok	;wreg free
 11131  000582  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11132  000586  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11133  00058A  0102               	movlb	2	; () banked
 11134  00058C  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11135  00058E  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11136  000590  E009               	bz	l12704
 11137                           
 11138                           ; BSR set to: 2
 11139                           ;main.c: 533: vscpSize = atoi(p);
 11140  000592  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11141  000596  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11142  00059A  EC6D  F01B         	call	_atoi	;wreg free
 11143  00059E  501F               	movf	?_atoi,w,c
 11144  0005A0  0100               	movlb	0	; () banked
 11145  0005A2  6FDE               	movwf	_vscpSize& (0+255),b
 11146  0005A4                     l12704:
 11147                           
 11148                           ;main.c: 534: }
 11149                           ;main.c: 536: memset(vscpData, 0, 8);
 11150  0005A4  0E40               	movlw	low _vscpData
 11151  0005A6  6E19               	movwf	?_memset,c
 11152  0005A8  0E00               	movlw	high _vscpData
 11153  0005AA  6E1A               	movwf	?_memset+1,c
 11154  0005AC  0E0F               	movlw	15
 11155  0005AE  6E1A               	movwf	?_memset+1,c
 11156  0005B0  0E5F               	movlw	__accesstop+-1
 11157  0005B2  6419               	cpfsgt	?_memset,c
 11158  0005B4  6A1A               	clrf	?_memset+1,c
 11159  0005B6  6A1C               	clrf	?_memset+3,c
 11160  0005B8  6A1B               	clrf	?_memset+2,c
 11161  0005BA  6A1E               	clrf	?_memset+5,c
 11162  0005BC  0E08               	movlw	8
 11163  0005BE  6E1D               	movwf	?_memset+4,c
 11164  0005C0  EC57  F028         	call	_memset	;wreg free
 11165                           
 11166                           ;main.c: 537: for (i = 0; i < vscpSize; i++) {
 11167  0005C4  0102               	movlb	2	; () banked
 11168  0005C6  6BAA               	clrf	doModeVerbose@i& (0+255),b
 11169  0005C8  D01A               	goto	l12714
 11170  0005CA                     l12708:
 11171                           
 11172                           ; BSR set to: 2
 11173                           ;main.c: 538: if ((0) != (p = strtok((0), ","))) {
 11174  0005CA  ECAA  F009         	call	PL6	;call to abstracted procedure
 11175  0005CE  EC1C  F022         	call	_strtok	;wreg free
 11176  0005D2  C025  F2B7         	movff	?_strtok,doModeVerbose@p
 11177  0005D6  C026  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11178  0005DA  0102               	movlb	2	; () banked
 11179  0005DC  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11180  0005DE  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11181  0005E0  E013               	bz	l12716
 11182                           
 11183                           ; BSR set to: 2
 11184                           ;main.c: 539: vscpData[ i ] = atoi(p);
 11185  0005E2  51AA               	movf	doModeVerbose@i& (0+255),w,b
 11186  0005E4  0F40               	addlw	low _vscpData
 11187  0005E6  6ED9               	movwf	fsr2l,c
 11188  0005E8  6ADA               	clrf	fsr2h,c
 11189  0005EA  C2B7  F01F         	movff	doModeVerbose@p,?_atoi
 11190  0005EE  C2B8  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11191  0005F2  EC6D  F01B         	call	_atoi	;wreg free
 11192  0005F6  501F               	movf	?_atoi,w,c
 11193  0005F8  6EDF               	movwf	indf2,c
 11194                           
 11195                           ;main.c: 540: } else {
 11196  0005FA  0102               	movlb	2	; () banked
 11197  0005FC  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 11198  0005FE                     l12714:
 11199                           
 11200                           ; BSR set to: 2
 11201  0005FE  0100               	movlb	0	; () banked
 11202  000600  51DE               	movf	_vscpSize& (0+255),w,b
 11203  000602  0102               	movlb	2	; () banked
 11204  000604  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 11205  000606  E3E1               	bnc	l12708
 11206  000608                     l12716:
 11207                           
 11208                           ; BSR set to: 2
 11209                           ;main.c: 542: }
 11210                           ;main.c: 543: }
 11211                           ;main.c: 545: if (sendVSCPFrame(vscpClass,
 11212                           ;main.c: 546: vscpType,
 11213                           ;main.c: 547: vscpNodeId,
 11214                           ;main.c: 548: vscpPriority,
 11215                           ;main.c: 549: vscpSize,
 11216                           ;main.c: 550: vscpData)) {
 11217  000608  C0DA  F083         	movff	_vscpClass,?_sendVSCPFrame
 11218  00060C  C0DB  F084         	movff	_vscpClass+1,?_sendVSCPFrame+1
 11219  000610  C0DF  F085         	movff	_vscpType,?_sendVSCPFrame+2
 11220  000614  C0DC  F086         	movff	_vscpNodeId,?_sendVSCPFrame+3
 11221  000618  C0DD  F087         	movff	_vscpPriority,?_sendVSCPFrame+4
 11222  00061C  C0DE  F088         	movff	_vscpSize,?_sendVSCPFrame+5
 11223  000620  0E40               	movlw	low _vscpData
 11224  000622  0100               	movlb	0	; () banked
 11225  000624  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 11226  000626  EC28  F020         	call	_sendVSCPFrame	;wreg free
 11227  00062A  0900               	iorlw	0
 11228  00062C  E016               	bz	l12722
 11229                           
 11230                           ;main.c: 552: cntTxFrames++;
 11231  00062E  0101               	movlb	1	; () banked
 11232  000630  2B14               	incf	_cntTxFrames& (0+255),f,b
 11233  000632  0E00               	movlw	0
 11234  000634  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 11235  000636  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 11236  000638  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 11237                           
 11238                           ;main.c: 553: cntTxBytes += vscpSize;
 11239  00063A  0100               	movlb	0	; () banked
 11240  00063C  51DE               	movf	_vscpSize& (0+255),w,b
 11241  00063E  0101               	movlb	1	; () banked
 11242  000640  2710               	addwf	_cntTxBytes& (0+255),f,b
 11243  000642  0E00               	movlw	0
 11244  000644  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 11245  000646  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 11246  000648  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 11247                           
 11248                           ; BSR set to: 1
 11249                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11250  00064A  0E7F               	movlw	high STR_8
 11251  00064C  6E1B               	movwf	?_putsUSART+1,c
 11252  00064E  0E80               	movlw	low STR_8
 11253  000650  6E1A               	movwf	?_putsUSART,c
 11254  000652  ECE6  F025         	call	_putsUSART	;wreg free
 11255                           
 11256                           ;main.c: 555: } else {
 11257  000656  EF93  F009         	goto	l13158
 11258  00065A                     l12722:
 11259                           
 11260                           ;main.c: 556: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 11261  00065A  0E7A               	movlw	high STR_36
 11262  00065C  6E1B               	movwf	?_putsUSART+1,c
 11263  00065E  0E49               	movlw	low STR_36
 11264  000660  6E1A               	movwf	?_putsUSART,c
 11265  000662  ECE6  F025         	call	_putsUSART	;wreg free
 11266  000666  EF93  F009         	goto	l13158
 11267  00066A                     l12724:
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;main.c: 559: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 11271  00066A  0101               	movlb	1	; () banked
 11272  00066C  0E01               	movlw	high _cmdbuf
 11273  00066E  6E27               	movwf	?_stristr+1,c
 11274  000670  0E20               	movlw	low _cmdbuf
 11275  000672  6E26               	movwf	?_stristr,c
 11276  000674  0E7F               	movlw	high STR_37
 11277  000676  6E29               	movwf	?_stristr+3,c
 11278  000678  0EE8               	movlw	low STR_37
 11279  00067A  6E28               	movwf	?_stristr+2,c
 11280  00067C  EC75  F023         	call	_stristr	;wreg free
 11281  000680  ECA3  F009         	call	PL2	;call to abstracted procedure
 11282  000684  E102               	bnz	u16795
 11283  000686  5026               	movf	?_stristr,w,c
 11284  000688  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11285  00068A                     u16795:
 11286  00068A  E114               	bnz	l12732
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;main.c: 560: if (receivePrintEventVerbose()) {
 11290  00068C  ECFC  F010         	call	_receivePrintEventVerbose	;wreg free
 11291  000690  0900               	iorlw	0
 11292  000692  E008               	bz	l12730
 11293                           
 11294                           ;main.c: 561: putsUSART((char *) "+OK\r\n");
 11295  000694  0E7F               	movlw	high STR_8
 11296  000696  6E1B               	movwf	?_putsUSART+1,c
 11297  000698  0E80               	movlw	low STR_8
 11298  00069A  6E1A               	movwf	?_putsUSART,c
 11299  00069C  ECE6  F025         	call	_putsUSART	;wreg free
 11300                           
 11301                           ;main.c: 562: } else {
 11302  0006A0  EF93  F009         	goto	l13158
 11303  0006A4                     l12730:
 11304                           
 11305                           ;main.c: 563: putsUSART((char *) "+OK - no events\r\n");
 11306  0006A4  0E7D               	movlw	high STR_39
 11307  0006A6  6E1B               	movwf	?_putsUSART+1,c
 11308  0006A8  0EF8               	movlw	low STR_39
 11309  0006AA  6E1A               	movwf	?_putsUSART,c
 11310  0006AC  ECE6  F025         	call	_putsUSART	;wreg free
 11311  0006B0  EF93  F009         	goto	l13158
 11312  0006B4                     l12732:
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;main.c: 566: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 11316  0006B4  0101               	movlb	1	; () banked
 11317  0006B6  0E01               	movlw	high _cmdbuf
 11318  0006B8  6E27               	movwf	?_stristr+1,c
 11319  0006BA  0E20               	movlw	low _cmdbuf
 11320  0006BC  6E26               	movwf	?_stristr,c
 11321  0006BE  0E7F               	movlw	high STR_40
 11322  0006C0  6E29               	movwf	?_stristr+3,c
 11323  0006C2  0ECB               	movlw	low STR_40
 11324  0006C4  6E28               	movwf	?_stristr+2,c
 11325  0006C6  EC75  F023         	call	_stristr	;wreg free
 11326  0006CA  ECA3  F009         	call	PL2	;call to abstracted procedure
 11327  0006CE  E102               	bnz	u16815
 11328  0006D0  5026               	movf	?_stristr,w,c
 11329  0006D2  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11330  0006D4                     u16815:
 11331  0006D4  E104               	bnz	l12736
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;main.c: 567: printStatistics();
 11335  0006D6  ECB8  F015         	call	_printStatistics	;wreg free
 11336                           
 11337                           ;main.c: 568: }
 11338  0006DA  EF93  F009         	goto	l13158
 11339  0006DE                     l12736:
 11340                           
 11341                           ; BSR set to: 0
 11342                           ;main.c: 569: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 11343  0006DE  0101               	movlb	1	; () banked
 11344  0006E0  0E01               	movlw	high _cmdbuf
 11345  0006E2  6E27               	movwf	?_stristr+1,c
 11346  0006E4  0E20               	movlw	low _cmdbuf
 11347  0006E6  6E26               	movwf	?_stristr,c
 11348  0006E8  0E7F               	movlw	high STR_41
 11349  0006EA  6E29               	movwf	?_stristr+3,c
 11350  0006EC  0ED9               	movlw	low STR_41
 11351  0006EE  6E28               	movwf	?_stristr+2,c
 11352  0006F0  EC75  F023         	call	_stristr	;wreg free
 11353  0006F4  ECA3  F009         	call	PL2	;call to abstracted procedure
 11354  0006F8  E102               	bnz	u16825
 11355  0006FA  5026               	movf	?_stristr,w,c
 11356  0006FC  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11357  0006FE                     u16825:
 11358  0006FE  E104               	bnz	l12740
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;main.c: 570: printErrors();
 11362  000700  ECAF  F00F         	call	_printErrors	;wreg free
 11363                           
 11364                           ;main.c: 571: }
 11365  000704  EF93  F009         	goto	l13158
 11366  000708                     l12740:
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;main.c: 572: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 11370  000708  0101               	movlb	1	; () banked
 11371  00070A  0E01               	movlw	high _cmdbuf
 11372  00070C  6E27               	movwf	?_stristr+1,c
 11373  00070E  0E20               	movlw	low _cmdbuf
 11374  000710  6E26               	movwf	?_stristr,c
 11375  000712  0E7F               	movlw	high STR_42
 11376  000714  6E29               	movwf	?_stristr+3,c
 11377  000716  0EC6               	movlw	low STR_42
 11378  000718  6E28               	movwf	?_stristr+2,c
 11379  00071A  EC75  F023         	call	_stristr	;wreg free
 11380  00071E  ECA3  F009         	call	PL2	;call to abstracted procedure
 11381  000722  E102               	bnz	u16835
 11382  000724  5026               	movf	?_stristr,w,c
 11383  000726  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11384  000728                     u16835:
 11385  000728  E10A               	bnz	l12744
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;main.c: 573: printHelp();
 11389  00072A  EC7C  F016         	call	_printHelp	;wreg free
 11390                           
 11391                           ;main.c: 574: putsUSART((char *) "+OK\r\n");
 11392  00072E  0E7F               	movlw	high STR_8
 11393  000730  6E1B               	movwf	?_putsUSART+1,c
 11394  000732  0E80               	movlw	low STR_8
 11395  000734  6E1A               	movwf	?_putsUSART,c
 11396  000736  ECE6  F025         	call	_putsUSART	;wreg free
 11397                           
 11398                           ;main.c: 575: }
 11399  00073A  EF93  F009         	goto	l13158
 11400  00073E                     l12744:
 11401                           
 11402                           ; BSR set to: 0
 11403                           ;main.c: 576: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 11404  00073E  0101               	movlb	1	; () banked
 11405  000740  0E01               	movlw	high _cmdbuf
 11406  000742  6E27               	movwf	?_stristr+1,c
 11407  000744  0E20               	movlw	low _cmdbuf
 11408  000746  6E26               	movwf	?_stristr,c
 11409  000748  0E7F               	movlw	high STR_44
 11410  00074A  6E29               	movwf	?_stristr+3,c
 11411  00074C  0EA3               	movlw	low STR_44
 11412  00074E  6E28               	movwf	?_stristr+2,c
 11413  000750  EC75  F023         	call	_stristr	;wreg free
 11414  000754  ECA3  F009         	call	PL2	;call to abstracted procedure
 11415  000758  E102               	bnz	u16845
 11416  00075A  5026               	movf	?_stristr,w,c
 11417  00075C  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11418  00075E                     u16845:
 11419  00075E  E104               	bnz	l12748
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;main.c: 577: findNodes();
 11423  000760  ECD6  F01C         	call	_findNodes	;wreg free
 11424                           
 11425                           ;main.c: 578: }
 11426  000764  EF93  F009         	goto	l13158
 11427  000768                     l12748:
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;main.c: 580: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 11431  000768  0101               	movlb	1	; () banked
 11432  00076A  0E01               	movlw	high _cmdbuf
 11433  00076C  6E27               	movwf	?_stristr+1,c
 11434  00076E  0E20               	movlw	low _cmdbuf
 11435  000770  6E26               	movwf	?_stristr,c
 11436  000772  0E7F               	movlw	high STR_45
 11437  000774  6E29               	movwf	?_stristr+3,c
 11438  000776  0EA8               	movlw	low STR_45
 11439  000778  6E28               	movwf	?_stristr+2,c
 11440  00077A  EC75  F023         	call	_stristr	;wreg free
 11441  00077E  ECA3  F009         	call	PL2	;call to abstracted procedure
 11442  000782  E102               	bnz	u16855
 11443  000784  5026               	movf	?_stristr,w,c
 11444  000786  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11445  000788                     u16855:
 11446  000788  E001 D1AB          	bnz	l12878
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;main.c: 582: uint8_t i;
 11450                           ;main.c: 583: uint8_t nodeid;
 11451                           ;main.c: 584: uint8_t page = 0;
 11452  00078C  0102               	movlb	2	; () banked
 11453  00078E  6BAD               	clrf	doModeVerbose@page& (0+255),b
 11454                           
 11455                           ; BSR set to: 2
 11456                           ;main.c: 585: uint8_t reg;
 11457                           ;main.c: 586: uint8_t value;
 11458                           ;main.c: 587: uint8_t count = 1;
 11459  000790  0E01               	movlw	1
 11460  000792  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11461                           
 11462                           ; BSR set to: 2
 11463                           ;main.c: 589: strcpy(cmdbuf, cmdbuf + 5);
 11464  000794  ECD6  F009         	call	PL10	;call to abstracted procedure
 11465  000798  EC29  F028         	call	_strcpy	;wreg free
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;main.c: 590: char *p = strtok(cmdbuf, " ");
 11469  00079C  0101               	movlb	1	; () banked
 11470  00079E  ECFB  F009         	call	PL34	;call to abstracted procedure
 11471  0007A2  EC1C  F022         	call	_strtok	;wreg free
 11472  0007A6  C025  F2B2         	movff	?_strtok,doModeVerbose@p_1124
 11473  0007AA  C026  F2B3         	movff	?_strtok+1,doModeVerbose@p_1124+1
 11474                           
 11475                           ;main.c: 591: if ((0) != p) {
 11476  0007AE  0102               	movlb	2	; () banked
 11477  0007B0  51B3               	movf	(doModeVerbose@p_1124+1)& (0+255),w,b
 11478  0007B2  11B2               	iorwf	doModeVerbose@p_1124& (0+255),w,b
 11479  0007B4  E00A               	bz	l12762
 11480                           
 11481                           ; BSR set to: 2
 11482                           ;main.c: 592: nodeid = atoi(p);
 11483  0007B6  C2B2  F01F         	movff	doModeVerbose@p_1124,?_atoi
 11484  0007BA  C2B3  F020         	movff	doModeVerbose@p_1124+1,?_atoi+1
 11485  0007BE  EC6D  F01B         	call	_atoi	;wreg free
 11486  0007C2  501F               	movf	?_atoi,w,c
 11487  0007C4  0102               	movlb	2	; () banked
 11488  0007C6  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 11489                           
 11490                           ;main.c: 593: } else {
 11491  0007C8  D008               	goto	l12766
 11492  0007CA                     l12762:
 11493                           
 11494                           ; BSR set to: 2
 11495                           ;main.c: 594: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11496  0007CA  0E7C               	movlw	high STR_47
 11497  0007CC  6E1B               	movwf	?_putsUSART+1,c
 11498  0007CE  0E31               	movlw	low STR_47
 11499  0007D0  6E1A               	movwf	?_putsUSART,c
 11500  0007D2  ECE6  F025         	call	_putsUSART	;wreg free
 11501  0007D6  EFA2  F009         	goto	l498
 11502  0007DA                     l12766:
 11503                           
 11504                           ; BSR set to: 2
 11505                           ;main.c: 596: }
 11506                           ;main.c: 598: if ((0) != (p = strtok((0), " "))) {
 11507  0007DA  EC04  F00A         	call	PL36	;call to abstracted procedure
 11508  0007DE  EC1C  F022         	call	_strtok	;wreg free
 11509  0007E2  C025  F2B2         	movff	?_strtok,doModeVerbose@p_1124
 11510  0007E6  C026  F2B3         	movff	?_strtok+1,doModeVerbose@p_1124+1
 11511  0007EA  0102               	movlb	2	; () banked
 11512  0007EC  51B3               	movf	(doModeVerbose@p_1124+1)& (0+255),w,b
 11513  0007EE  11B2               	iorwf	doModeVerbose@p_1124& (0+255),w,b
 11514  0007F0  E033               	bz	l12774
 11515                           
 11516                           ; BSR set to: 2
 11517                           ;main.c: 600: char *preg;
 11518                           ;main.c: 601: if (preg = strchr(p, ':')) {
 11519  0007F2  C2B2  F019         	movff	doModeVerbose@p_1124,?_strchr
 11520  0007F6  C2B3  F01A         	movff	doModeVerbose@p_1124+1,?_strchr+1
 11521  0007FA  6A1C               	clrf	?_strchr+3,c
 11522  0007FC  0E3A               	movlw	58
 11523  0007FE  6E1B               	movwf	?_strchr+2,c
 11524  000800  EC5F  F025         	call	_strchr	;wreg free
 11525  000804  C019  F284         	movff	?_strchr,doModeVerbose@preg
 11526  000808  C01A  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 11527  00080C  0102               	movlb	2	; () banked
 11528  00080E  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 11529  000810  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 11530  000812  E018               	bz	l12772
 11531                           
 11532                           ; BSR set to: 2
 11533                           ;main.c: 602: page = atoi(p);
 11534  000814  C2B2  F01F         	movff	doModeVerbose@p_1124,?_atoi
 11535  000818  C2B3  F020         	movff	doModeVerbose@p_1124+1,?_atoi+1
 11536  00081C  EC6D  F01B         	call	_atoi	;wreg free
 11537  000820  501F               	movf	?_atoi,w,c
 11538  000822  0102               	movlb	2	; () banked
 11539  000824  6FAD               	movwf	doModeVerbose@page& (0+255),b
 11540                           
 11541                           ;main.c: 603: reg = atoi(preg + 1);
 11542  000826  2984               	incf	doModeVerbose@preg& (0+255),w,b
 11543  000828  0100               	movlb	0	; () banked
 11544  00082A  6FB1               	movwf	??_doModeVerbose& (0+255),b
 11545  00082C  0E00               	movlw	0
 11546  00082E  0102               	movlb	2	; () banked
 11547  000830  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 11548  000832  0100               	movlb	0	; () banked
 11549  000834  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11550  000836  C0B1  F01F         	movff	??_doModeVerbose,?_atoi
 11551  00083A  C0B2  F020         	movff	??_doModeVerbose+1,?_atoi+1
 11552  00083E  EC6D  F01B         	call	_atoi	;wreg free
 11553  000842  D006               	goto	L5
 11554  000844                     l12772:
 11555                           
 11556                           ; BSR set to: 2
 11557                           ;main.c: 605: reg = atoi(p);
 11558  000844  C2B2  F01F         	movff	doModeVerbose@p_1124,?_atoi
 11559  000848  C2B3  F020         	movff	doModeVerbose@p_1124+1,?_atoi+1
 11560  00084C  EC6D  F01B         	call	_atoi	;wreg free
 11561  000850                     L5:
 11562  000850  501F               	movf	?_atoi,w,c
 11563  000852  0102               	movlb	2	; () banked
 11564  000854  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 11565  000856  D008               	goto	l12778
 11566  000858                     l12774:
 11567                           
 11568                           ; BSR set to: 2
 11569                           ;main.c: 610: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 11570  000858  0E7A               	movlw	high STR_49
 11571  00085A  6E1B               	movwf	?_putsUSART+1,c
 11572  00085C  0EAC               	movlw	low STR_49
 11573  00085E  6E1A               	movwf	?_putsUSART,c
 11574  000860  ECE6  F025         	call	_putsUSART	;wreg free
 11575  000864  EFA2  F009         	goto	l498
 11576  000868                     l12778:
 11577                           
 11578                           ; BSR set to: 2
 11579                           ;main.c: 612: }
 11580                           ;main.c: 615: if ((0) != (p = strtok((0), " "))) {
 11581  000868  EC04  F00A         	call	PL36	;call to abstracted procedure
 11582  00086C  EC1C  F022         	call	_strtok	;wreg free
 11583  000870  C025  F2B2         	movff	?_strtok,doModeVerbose@p_1124
 11584  000874  C026  F2B3         	movff	?_strtok+1,doModeVerbose@p_1124+1
 11585  000878  0102               	movlb	2	; () banked
 11586  00087A  51B3               	movf	(doModeVerbose@p_1124+1)& (0+255),w,b
 11587  00087C  11B2               	iorwf	doModeVerbose@p_1124& (0+255),w,b
 11588  00087E  E00D               	bz	l503
 11589                           
 11590                           ; BSR set to: 2
 11591                           ;main.c: 616: count = atoi(p);
 11592  000880  C2B2  F01F         	movff	doModeVerbose@p_1124,?_atoi
 11593  000884  C2B3  F020         	movff	doModeVerbose@p_1124+1,?_atoi+1
 11594  000888  EC6D  F01B         	call	_atoi	;wreg free
 11595  00088C  501F               	movf	?_atoi,w,c
 11596  00088E  0102               	movlb	2	; () banked
 11597  000890  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11598                           
 11599                           ; BSR set to: 2
 11600                           ;main.c: 617: if (0 == count) count = 1;
 11601  000892  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 11602  000894  D002               	goto	l503
 11603                           
 11604                           ; BSR set to: 2
 11605  000896  0E01               	movlw	1
 11606  000898  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11607  00089A                     l503:
 11608                           
 11609                           ; BSR set to: 2
 11610                           ;main.c: 618: }
 11611                           ;main.c: 620: BOOL rv = 1;
 11612  00089A  0E01               	movlw	1
 11613  00089C  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 11614                           
 11615                           ; BSR set to: 2
 11616                           ;main.c: 621: for (i = 0; i < count; i++) {
 11617  00089E  6BB0               	clrf	doModeVerbose@i_1118& (0+255),b
 11618  0008A0  D10A               	goto	l12870
 11619  0008A2                     l12788:
 11620                           
 11621                           ; BSR set to: 2
 11622                           ;main.c: 623: if (readRegisterExtended(nodeid,
 11623                           ;main.c: 624: page,
 11624                           ;main.c: 625: (reg + i) & 0xff,
 11625                           ;main.c: 626: rwtimeout,
 11626                           ;main.c: 627: &value)) {
 11627  0008A2  0100               	movlb	0	; () banked
 11628  0008A4  C2AD  F09E         	movff	doModeVerbose@page,?_readRegisterExtended
 11629  0008A8  6B9F               	clrf	(?_readRegisterExtended+1)& (0+255),b
 11630  0008AA  0102               	movlb	2	; () banked
 11631  0008AC  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 11632  0008AE  25B0               	addwf	doModeVerbose@i_1118& (0+255),w,b
 11633  0008B0  0100               	movlb	0	; () banked
 11634  0008B2  6FA0               	movwf	(?_readRegisterExtended+2)& (0+255),b
 11635  0008B4  C0D9  F0A1         	movff	_rwtimeout,?_readRegisterExtended+3
 11636  0008B8  6BA2               	clrf	(?_readRegisterExtended+4)& (0+255),b
 11637  0008BA  0E02               	movlw	high doModeVerbose@value
 11638  0008BC  6FA4               	movwf	(?_readRegisterExtended+6)& (0+255),b
 11639  0008BE  0EB1               	movlw	low doModeVerbose@value
 11640  0008C0  6FA3               	movwf	(?_readRegisterExtended+5)& (0+255),b
 11641  0008C2  0102               	movlb	2	; () banked
 11642  0008C4  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 11643  0008C6  EC91  F01E         	call	_readRegisterExtended
 11644  0008CA  0900               	iorlw	0
 11645  0008CC  E101 D09B          	bz	l507
 11646                           
 11647                           ;main.c: 628: putsUSART((char *) "Value for reg ");
 11648  0008D0  0E7E               	movlw	high STR_51
 11649  0008D2  6E1B               	movwf	?_putsUSART+1,c
 11650  0008D4  0E5E               	movlw	low STR_51
 11651  0008D6  6E1A               	movwf	?_putsUSART,c
 11652  0008D8  ECE6  F025         	call	_putsUSART	;wreg free
 11653                           
 11654                           ;main.c: 629: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 11655  0008DC  0100               	movlb	0	; () banked
 11656  0008DE  67D3               	tstfsz	_bHex& (0+255),b
 11657  0008E0  D005               	goto	l12796
 11658                           
 11659                           ; BSR set to: 0
 11660  0008E2  0E7F               	movlw	high STR_53
 11661  0008E4  0102               	movlb	2	; () banked
 11662  0008E6  6F95               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 11663  0008E8  0EEE               	movlw	low STR_53
 11664  0008EA  D004               	goto	L6
 11665  0008EC                     l12796:
 11666                           
 11667                           ; BSR set to: 0
 11668  0008EC  0E7F               	movlw	high STR_52
 11669  0008EE  0102               	movlb	2	; () banked
 11670  0008F0  6F95               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 11671  0008F2  0E65               	movlw	low STR_52
 11672  0008F4                     L6:
 11673  0008F4  6F94               	movwf	_doModeVerbose$1136& (0+255),b
 11674                           
 11675                           ; BSR set to: 2
 11676  0008F6  0E01               	movlw	high _wrkbuf
 11677  0008F8  0100               	movlb	0	; () banked
 11678  0008FA  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11679  0008FC  0E70               	movlw	low _wrkbuf
 11680  0008FE  6F60               	movwf	?_sprintf& (0+255),b
 11681  000900  C294  F062         	movff	_doModeVerbose$1136,?_sprintf+2
 11682  000904  C295  F063         	movff	_doModeVerbose$1136+1,?_sprintf+3
 11683  000908  C2AD  F064         	movff	doModeVerbose@page,?_sprintf+4
 11684  00090C  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11685  00090E  EC3C  F00A         	call	_sprintf	;wreg free
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;main.c: 630: putsUSART(wrkbuf);
 11689  000912  0101               	movlb	1	; () banked
 11690  000914  0E01               	movlw	high _wrkbuf
 11691  000916  6E1B               	movwf	?_putsUSART+1,c
 11692  000918  0E70               	movlw	low _wrkbuf
 11693  00091A  6E1A               	movwf	?_putsUSART,c
 11694  00091C  ECE6  F025         	call	_putsUSART	;wreg free
 11695  000920                     l512:
 11696  000920  A2AC               	btfss	4012,1,c	;volatile
 11697  000922  D7FE               	goto	l512
 11698                           
 11699                           ;main.c: 632: WriteUSART(':');
 11700  000924  0E3A               	movlw	58
 11701  000926  ECC4  F028         	call	_WriteUSART
 11702                           
 11703                           ;main.c: 633: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 11704  00092A  0100               	movlb	0	; () banked
 11705  00092C  67D3               	tstfsz	_bHex& (0+255),b
 11706  00092E  D005               	goto	l12808
 11707                           
 11708                           ; BSR set to: 0
 11709  000930  0E7F               	movlw	high STR_53
 11710  000932  0102               	movlb	2	; () banked
 11711  000934  6F97               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 11712  000936  0EEE               	movlw	low STR_53
 11713  000938  D004               	goto	L7
 11714  00093A                     l12808:
 11715                           
 11716                           ; BSR set to: 0
 11717  00093A  0E7F               	movlw	high STR_52
 11718  00093C  0102               	movlb	2	; () banked
 11719  00093E  6F97               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 11720  000940  0E65               	movlw	low STR_52
 11721  000942                     L7:
 11722  000942  6F96               	movwf	_doModeVerbose$1148& (0+255),b
 11723                           
 11724                           ; BSR set to: 2
 11725  000944  0E01               	movlw	high _wrkbuf
 11726  000946  0100               	movlb	0	; () banked
 11727  000948  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11728  00094A  0E70               	movlw	low _wrkbuf
 11729  00094C  6F60               	movwf	?_sprintf& (0+255),b
 11730  00094E  C296  F062         	movff	_doModeVerbose$1148,?_sprintf+2
 11731  000952  C297  F063         	movff	_doModeVerbose$1148+1,?_sprintf+3
 11732  000956  EC18  F00A         	call	PL42	;call to abstracted procedure
 11733  00095A  EC3C  F00A         	call	_sprintf	;wreg free
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;main.c: 634: putsUSART(wrkbuf);
 11737  00095E  0101               	movlb	1	; () banked
 11738  000960  0E01               	movlw	high _wrkbuf
 11739  000962  6E1B               	movwf	?_putsUSART+1,c
 11740  000964  0E70               	movlw	low _wrkbuf
 11741  000966  6E1A               	movwf	?_putsUSART,c
 11742  000968  ECE6  F025         	call	_putsUSART	;wreg free
 11743                           
 11744                           ;main.c: 635: putsUSART((char *) " = ");
 11745  00096C  0E7E               	movlw	high (STR_234+4)
 11746  00096E  6E1B               	movwf	?_putsUSART+1,c
 11747  000970  0EEA               	movlw	low (STR_234+4)
 11748  000972  6E1A               	movwf	?_putsUSART,c
 11749  000974  ECE6  F025         	call	_putsUSART	;wreg free
 11750                           
 11751                           ;main.c: 636: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 11752  000978  0100               	movlb	0	; () banked
 11753  00097A  67D3               	tstfsz	_bHex& (0+255),b
 11754  00097C  D005               	goto	l12820
 11755                           
 11756                           ; BSR set to: 0
 11757  00097E  0E7F               	movlw	high STR_53
 11758  000980  0102               	movlb	2	; () banked
 11759  000982  6F99               	movwf	(_doModeVerbose$1153+1)& (0+255),b
 11760  000984  0EEE               	movlw	low STR_53
 11761  000986  D004               	goto	L8
 11762  000988                     l12820:
 11763                           
 11764                           ; BSR set to: 0
 11765  000988  0E7F               	movlw	high STR_52
 11766  00098A  0102               	movlb	2	; () banked
 11767  00098C  6F99               	movwf	(_doModeVerbose$1153+1)& (0+255),b
 11768  00098E  0E65               	movlw	low STR_52
 11769  000990                     L8:
 11770  000990  6F98               	movwf	_doModeVerbose$1153& (0+255),b
 11771                           
 11772                           ; BSR set to: 2
 11773  000992  0E01               	movlw	high _wrkbuf
 11774  000994  0100               	movlb	0	; () banked
 11775  000996  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11776  000998  0E70               	movlw	low _wrkbuf
 11777  00099A  6F60               	movwf	?_sprintf& (0+255),b
 11778  00099C  C298  F062         	movff	_doModeVerbose$1153,?_sprintf+2
 11779  0009A0  C299  F063         	movff	_doModeVerbose$1153+1,?_sprintf+3
 11780  0009A4  C2B1  F064         	movff	doModeVerbose@value,?_sprintf+4
 11781  0009A8  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11782  0009AA  EC3C  F00A         	call	_sprintf	;wreg free
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;main.c: 637: putsUSART(wrkbuf);
 11786  0009AE  0101               	movlb	1	; () banked
 11787  0009B0  0E01               	movlw	high _wrkbuf
 11788  0009B2  6E1B               	movwf	?_putsUSART+1,c
 11789  0009B4  0E70               	movlw	low _wrkbuf
 11790  0009B6  6E1A               	movwf	?_putsUSART,c
 11791  0009B8  ECE6  F025         	call	_putsUSART	;wreg free
 11792  0009BC                     l523:
 11793  0009BC  A2AC               	btfss	4012,1,c	;volatile
 11794  0009BE  D7FE               	goto	l523
 11795                           
 11796                           ;main.c: 639: WriteUSART(' ');
 11797  0009C0  0E20               	movlw	32
 11798  0009C2  ECC4  F028         	call	_WriteUSART
 11799  0009C6                     l526:
 11800  0009C6  A2AC               	btfss	4012,1,c	;volatile
 11801  0009C8  D7FE               	goto	l526
 11802                           
 11803                           ;main.c: 641: if ((value > 32) && (value < 127)) {
 11804  0009CA  0E20               	movlw	32
 11805  0009CC  0102               	movlb	2	; () banked
 11806  0009CE  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 11807  0009D0  D007               	goto	l12834
 11808                           
 11809                           ; BSR set to: 2
 11810  0009D2  0E7F               	movlw	127
 11811  0009D4  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 11812  0009D6  D004               	goto	l12834
 11813                           
 11814                           ; BSR set to: 2
 11815                           ;main.c: 642: WriteUSART(value);
 11816  0009D8  51B1               	movf	doModeVerbose@value& (0+255),w,b
 11817  0009DA  ECC4  F028         	call	_WriteUSART
 11818                           
 11819                           ;main.c: 643: } else {
 11820  0009DE  D003               	goto	l531
 11821  0009E0                     l12834:
 11822                           
 11823                           ; BSR set to: 2
 11824                           ;main.c: 644: WriteUSART('.');
 11825  0009E0  0E2E               	movlw	46
 11826  0009E2  ECC4  F028         	call	_WriteUSART
 11827  0009E6                     l531:
 11828  0009E6  A2AC               	btfss	4012,1,c	;volatile
 11829  0009E8  D7FE               	goto	l531
 11830                           
 11831                           ;main.c: 647: WriteUSART(' ');
 11832  0009EA  0E20               	movlw	32
 11833  0009EC  ECC4  F028         	call	_WriteUSART
 11834                           
 11835                           ;main.c: 648: printBinary(value);
 11836  0009F0  0102               	movlb	2	; () banked
 11837  0009F2  51B1               	movf	doModeVerbose@value& (0+255),w,b
 11838  0009F4  EC5C  F026         	call	_printBinary
 11839                           
 11840                           ;main.c: 649: putsUSART((char *) "\r\n");
 11841  0009F8  0E74               	movlw	high (STR_188+50)
 11842  0009FA  6E1B               	movwf	?_putsUSART+1,c
 11843  0009FC  0EAE               	movlw	low (STR_188+50)
 11844  0009FE  6E1A               	movwf	?_putsUSART,c
 11845  000A00  ECE6  F025         	call	_putsUSART	;wreg free
 11846                           
 11847                           ;main.c: 650: } else {
 11848  000A04  D056               	goto	l12868
 11849  000A06                     l507:
 11850                           
 11851                           ;main.c: 651: rv = 0;
 11852  000A06  0102               	movlb	2	; () banked
 11853  000A08  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 11854                           
 11855                           ; BSR set to: 2
 11856                           ;main.c: 652: putsUSART((char *) "-ERROR - Unable to read register ");
 11857  000A0A  0E7A               	movlw	high STR_60
 11858  000A0C  6E1B               	movwf	?_putsUSART+1,c
 11859  000A0E  0E06               	movlw	low STR_60
 11860  000A10  6E1A               	movwf	?_putsUSART,c
 11861  000A12  ECE6  F025         	call	_putsUSART	;wreg free
 11862                           
 11863                           ;main.c: 653: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 11864  000A16  0100               	movlb	0	; () banked
 11865  000A18  67D3               	tstfsz	_bHex& (0+255),b
 11866  000A1A  D005               	goto	l12848
 11867                           
 11868                           ; BSR set to: 0
 11869  000A1C  0E7F               	movlw	high STR_53
 11870  000A1E  0102               	movlb	2	; () banked
 11871  000A20  6F9B               	movwf	(_doModeVerbose$1159+1)& (0+255),b
 11872  000A22  0EEE               	movlw	low STR_53
 11873  000A24  D004               	goto	L9
 11874  000A26                     l12848:
 11875                           
 11876                           ; BSR set to: 0
 11877  000A26  0E7F               	movlw	high STR_52
 11878  000A28  0102               	movlb	2	; () banked
 11879  000A2A  6F9B               	movwf	(_doModeVerbose$1159+1)& (0+255),b
 11880  000A2C  0E65               	movlw	low STR_52
 11881  000A2E                     L9:
 11882  000A2E  6F9A               	movwf	_doModeVerbose$1159& (0+255),b
 11883                           
 11884                           ; BSR set to: 2
 11885  000A30  0E01               	movlw	high _wrkbuf
 11886  000A32  0100               	movlb	0	; () banked
 11887  000A34  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11888  000A36  0E70               	movlw	low _wrkbuf
 11889  000A38  6F60               	movwf	?_sprintf& (0+255),b
 11890  000A3A  C29A  F062         	movff	_doModeVerbose$1159,?_sprintf+2
 11891  000A3E  C29B  F063         	movff	_doModeVerbose$1159+1,?_sprintf+3
 11892  000A42  C2AD  F064         	movff	doModeVerbose@page,?_sprintf+4
 11893  000A46  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11894  000A48  EC3C  F00A         	call	_sprintf	;wreg free
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;main.c: 654: putsUSART(wrkbuf);
 11898  000A4C  0101               	movlb	1	; () banked
 11899  000A4E  0E01               	movlw	high _wrkbuf
 11900  000A50  6E1B               	movwf	?_putsUSART+1,c
 11901  000A52  0E70               	movlw	low _wrkbuf
 11902  000A54  6E1A               	movwf	?_putsUSART,c
 11903  000A56  ECE6  F025         	call	_putsUSART	;wreg free
 11904  000A5A                     l539:
 11905  000A5A  A2AC               	btfss	4012,1,c	;volatile
 11906  000A5C  D7FE               	goto	l539
 11907                           
 11908                           ;main.c: 656: WriteUSART(':');
 11909  000A5E  0E3A               	movlw	58
 11910  000A60  ECC4  F028         	call	_WriteUSART
 11911                           
 11912                           ;main.c: 657: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 11913  000A64  0100               	movlb	0	; () banked
 11914  000A66  67D3               	tstfsz	_bHex& (0+255),b
 11915  000A68  D005               	goto	l12860
 11916                           
 11917                           ; BSR set to: 0
 11918  000A6A  0E7F               	movlw	high STR_53
 11919  000A6C  0102               	movlb	2	; () banked
 11920  000A6E  6F9D               	movwf	(_doModeVerbose$1163+1)& (0+255),b
 11921  000A70  0EEE               	movlw	low STR_53
 11922  000A72  D004               	goto	L10
 11923  000A74                     l12860:
 11924                           
 11925                           ; BSR set to: 0
 11926  000A74  0E7F               	movlw	high STR_52
 11927  000A76  0102               	movlb	2	; () banked
 11928  000A78  6F9D               	movwf	(_doModeVerbose$1163+1)& (0+255),b
 11929  000A7A  0E65               	movlw	low STR_52
 11930  000A7C                     L10:
 11931  000A7C  6F9C               	movwf	_doModeVerbose$1163& (0+255),b
 11932                           
 11933                           ; BSR set to: 2
 11934  000A7E  0E01               	movlw	high _wrkbuf
 11935  000A80  0100               	movlb	0	; () banked
 11936  000A82  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11937  000A84  0E70               	movlw	low _wrkbuf
 11938  000A86  6F60               	movwf	?_sprintf& (0+255),b
 11939  000A88  C29C  F062         	movff	_doModeVerbose$1163,?_sprintf+2
 11940  000A8C  C29D  F063         	movff	_doModeVerbose$1163+1,?_sprintf+3
 11941  000A90  EC18  F00A         	call	PL42	;call to abstracted procedure
 11942  000A94  EC3C  F00A         	call	_sprintf	;wreg free
 11943                           
 11944                           ; BSR set to: 0
 11945                           ;main.c: 658: putsUSART(wrkbuf);
 11946  000A98  0101               	movlb	1	; () banked
 11947  000A9A  0E01               	movlw	high _wrkbuf
 11948  000A9C  6E1B               	movwf	?_putsUSART+1,c
 11949  000A9E  0E70               	movlw	low _wrkbuf
 11950  000AA0  6E1A               	movwf	?_putsUSART,c
 11951  000AA2  ECE6  F025         	call	_putsUSART	;wreg free
 11952                           
 11953                           ;main.c: 659: putsUSART((char *) "\r\n");
 11954  000AA6  0E74               	movlw	high (STR_188+50)
 11955  000AA8  6E1B               	movwf	?_putsUSART+1,c
 11956  000AAA  0EAE               	movlw	low (STR_188+50)
 11957  000AAC  6E1A               	movwf	?_putsUSART,c
 11958  000AAE  ECE6  F025         	call	_putsUSART	;wreg free
 11959  000AB2                     l12868:
 11960  000AB2  0102               	movlb	2	; () banked
 11961  000AB4  2BB0               	incf	doModeVerbose@i_1118& (0+255),f,b
 11962  000AB6                     l12870:
 11963                           
 11964                           ; BSR set to: 2
 11965  000AB6  51AB               	movf	doModeVerbose@count& (0+255),w,b
 11966  000AB8  5DB0               	subwf	doModeVerbose@i_1118& (0+255),w,b
 11967  000ABA  E201 D6F2          	bnc	l12788
 11968                           
 11969                           ; BSR set to: 2
 11970                           ;main.c: 660: }
 11971                           ;main.c: 661: }
 11972                           ;main.c: 663: if (rv) {
 11973  000ABE  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 11974  000AC0  E008               	bz	l12876
 11975                           
 11976                           ; BSR set to: 2
 11977                           ;main.c: 664: putsUSART((char *) "+OK\r\n");
 11978  000AC2  0E7F               	movlw	high STR_8
 11979  000AC4  6E1B               	movwf	?_putsUSART+1,c
 11980  000AC6  0E80               	movlw	low STR_8
 11981  000AC8  6E1A               	movwf	?_putsUSART,c
 11982  000ACA  ECE6  F025         	call	_putsUSART	;wreg free
 11983                           
 11984                           ;main.c: 665: } else {
 11985  000ACE  EF93  F009         	goto	l13158
 11986  000AD2                     l12876:
 11987                           
 11988                           ; BSR set to: 2
 11989                           ;main.c: 666: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 11990  000AD2  0E74               	movlw	high STR_67
 11991  000AD4  6E1B               	movwf	?_putsUSART+1,c
 11992  000AD6  0E46               	movlw	low STR_67
 11993  000AD8  6E1A               	movwf	?_putsUSART,c
 11994  000ADA  ECE6  F025         	call	_putsUSART	;wreg free
 11995  000ADE  EF93  F009         	goto	l13158
 11996  000AE2                     l12878:
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;main.c: 671: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 12000  000AE2  0101               	movlb	1	; () banked
 12001  000AE4  0E01               	movlw	high _cmdbuf
 12002  000AE6  6E27               	movwf	?_stristr+1,c
 12003  000AE8  0E20               	movlw	low _cmdbuf
 12004  000AEA  6E26               	movwf	?_stristr,c
 12005  000AEC  0E7F               	movlw	high STR_68
 12006  000AEE  6E29               	movwf	?_stristr+3,c
 12007  000AF0  0EAD               	movlw	low STR_68
 12008  000AF2  6E28               	movwf	?_stristr+2,c
 12009  000AF4  EC75  F023         	call	_stristr	;wreg free
 12010  000AF8  ECA3  F009         	call	PL2	;call to abstracted procedure
 12011  000AFC  E102               	bnz	u17065
 12012  000AFE  5026               	movf	?_stristr,w,c
 12013  000B00  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12014  000B02                     u17065:
 12015  000B02  E001 D0A8          	bnz	l12920
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;main.c: 673: uint8_t nodeid;
 12019                           ;main.c: 674: uint8_t page = 0;
 12020  000B06  0102               	movlb	2	; () banked
 12021  000B08  6BA1               	clrf	doModeVerbose@page_1169& (0+255),b
 12022                           
 12023                           ; BSR set to: 2
 12024                           ;main.c: 675: uint8_t reg;
 12025                           ;main.c: 676: uint8_t value;
 12026                           ;main.c: 678: strcpy(cmdbuf, cmdbuf + 5);
 12027  000B0A  ECD6  F009         	call	PL10	;call to abstracted procedure
 12028  000B0E  EC29  F028         	call	_strcpy	;wreg free
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;main.c: 679: char *p = strtok(cmdbuf, " ");
 12032  000B12  0101               	movlb	1	; () banked
 12033  000B14  ECFB  F009         	call	PL34	;call to abstracted procedure
 12034  000B18  EC1C  F022         	call	_strtok	;wreg free
 12035  000B1C  C025  F2B4         	movff	?_strtok,doModeVerbose@p_1172
 12036  000B20  C026  F2B5         	movff	?_strtok+1,doModeVerbose@p_1172+1
 12037                           
 12038                           ;main.c: 680: if ((0) != p) {
 12039  000B24  0102               	movlb	2	; () banked
 12040  000B26  51B5               	movf	(doModeVerbose@p_1172+1)& (0+255),w,b
 12041  000B28  11B4               	iorwf	doModeVerbose@p_1172& (0+255),w,b
 12042  000B2A  E00A               	bz	l12890
 12043                           
 12044                           ; BSR set to: 2
 12045                           ;main.c: 681: nodeid = atoi(p);
 12046  000B2C  C2B4  F01F         	movff	doModeVerbose@p_1172,?_atoi
 12047  000B30  C2B5  F020         	movff	doModeVerbose@p_1172+1,?_atoi+1
 12048  000B34  EC6D  F01B         	call	_atoi	;wreg free
 12049  000B38  501F               	movf	?_atoi,w,c
 12050  000B3A  0102               	movlb	2	; () banked
 12051  000B3C  6F8D               	movwf	doModeVerbose@nodeid_1168& (0+255),b
 12052                           
 12053                           ;main.c: 682: } else {
 12054  000B3E  D007               	goto	l12894
 12055  000B40                     l12890:
 12056                           
 12057                           ; BSR set to: 2
 12058                           ;main.c: 683: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12059  000B40  0E7C               	movlw	high STR_47
 12060  000B42  6E1B               	movwf	?_putsUSART+1,c
 12061  000B44  0E31               	movlw	low STR_47
 12062  000B46  6E1A               	movwf	?_putsUSART,c
 12063  000B48  ECE6  F025         	call	_putsUSART	;wreg free
 12064  000B4C  D3FB               	goto	l498
 12065  000B4E                     l12894:
 12066                           
 12067                           ; BSR set to: 2
 12068                           ;main.c: 685: }
 12069                           ;main.c: 687: if ((0) != (p = strtok((0), " "))) {
 12070  000B4E  EC04  F00A         	call	PL36	;call to abstracted procedure
 12071  000B52  EC1C  F022         	call	_strtok	;wreg free
 12072  000B56  C025  F2B4         	movff	?_strtok,doModeVerbose@p_1172
 12073  000B5A  C026  F2B5         	movff	?_strtok+1,doModeVerbose@p_1172+1
 12074  000B5E  0102               	movlb	2	; () banked
 12075  000B60  51B5               	movf	(doModeVerbose@p_1172+1)& (0+255),w,b
 12076  000B62  11B4               	iorwf	doModeVerbose@p_1172& (0+255),w,b
 12077  000B64  E033               	bz	l12902
 12078                           
 12079                           ; BSR set to: 2
 12080                           ;main.c: 689: char *preg;
 12081                           ;main.c: 690: if (preg = strchr(p, ':')) {
 12082  000B66  C2B4  F019         	movff	doModeVerbose@p_1172,?_strchr
 12083  000B6A  C2B5  F01A         	movff	doModeVerbose@p_1172+1,?_strchr+1
 12084  000B6E  6A1C               	clrf	?_strchr+3,c
 12085  000B70  0E3A               	movlw	58
 12086  000B72  6E1B               	movwf	?_strchr+2,c
 12087  000B74  EC5F  F025         	call	_strchr	;wreg free
 12088  000B78  C019  F286         	movff	?_strchr,doModeVerbose@preg_1176
 12089  000B7C  C01A  F287         	movff	?_strchr+1,doModeVerbose@preg_1176+1
 12090  000B80  0102               	movlb	2	; () banked
 12091  000B82  5187               	movf	(doModeVerbose@preg_1176+1)& (0+255),w,b
 12092  000B84  1186               	iorwf	doModeVerbose@preg_1176& (0+255),w,b
 12093  000B86  E018               	bz	l12900
 12094                           
 12095                           ; BSR set to: 2
 12096                           ;main.c: 691: page = atoi(p);
 12097  000B88  C2B4  F01F         	movff	doModeVerbose@p_1172,?_atoi
 12098  000B8C  C2B5  F020         	movff	doModeVerbose@p_1172+1,?_atoi+1
 12099  000B90  EC6D  F01B         	call	_atoi	;wreg free
 12100  000B94  501F               	movf	?_atoi,w,c
 12101  000B96  0102               	movlb	2	; () banked
 12102  000B98  6FA1               	movwf	doModeVerbose@page_1169& (0+255),b
 12103                           
 12104                           ;main.c: 692: reg = atoi(preg + 1);
 12105  000B9A  2986               	incf	doModeVerbose@preg_1176& (0+255),w,b
 12106  000B9C  0100               	movlb	0	; () banked
 12107  000B9E  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12108  000BA0  0E00               	movlw	0
 12109  000BA2  0102               	movlb	2	; () banked
 12110  000BA4  2187               	addwfc	(doModeVerbose@preg_1176+1)& (0+255),w,b
 12111  000BA6  0100               	movlb	0	; () banked
 12112  000BA8  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12113  000BAA  C0B1  F01F         	movff	??_doModeVerbose,?_atoi
 12114  000BAE  C0B2  F020         	movff	??_doModeVerbose+1,?_atoi+1
 12115  000BB2  EC6D  F01B         	call	_atoi	;wreg free
 12116  000BB6  D006               	goto	L11
 12117  000BB8                     l12900:
 12118                           
 12119                           ; BSR set to: 2
 12120                           ;main.c: 694: reg = atoi(p);
 12121  000BB8  C2B4  F01F         	movff	doModeVerbose@p_1172,?_atoi
 12122  000BBC  C2B5  F020         	movff	doModeVerbose@p_1172+1,?_atoi+1
 12123  000BC0  EC6D  F01B         	call	_atoi	;wreg free
 12124  000BC4                     L11:
 12125  000BC4  501F               	movf	?_atoi,w,c
 12126  000BC6  0102               	movlb	2	; () banked
 12127  000BC8  6FA2               	movwf	doModeVerbose@reg_1170& (0+255),b
 12128  000BCA  D007               	goto	l12906
 12129  000BCC                     l12902:
 12130                           
 12131                           ; BSR set to: 2
 12132                           ;main.c: 698: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12133  000BCC  0E7A               	movlw	high STR_49
 12134  000BCE  6E1B               	movwf	?_putsUSART+1,c
 12135  000BD0  0EAC               	movlw	low STR_49
 12136  000BD2  6E1A               	movwf	?_putsUSART,c
 12137  000BD4  ECE6  F025         	call	_putsUSART	;wreg free
 12138  000BD8  D3B5               	goto	l498
 12139  000BDA                     l12906:
 12140                           
 12141                           ; BSR set to: 2
 12142                           ;main.c: 700: }
 12143                           ;main.c: 703: if ((0) != (p = strtok((0), " "))) {
 12144  000BDA  EC04  F00A         	call	PL36	;call to abstracted procedure
 12145  000BDE  EC1C  F022         	call	_strtok	;wreg free
 12146  000BE2  C025  F2B4         	movff	?_strtok,doModeVerbose@p_1172
 12147  000BE6  C026  F2B5         	movff	?_strtok+1,doModeVerbose@p_1172+1
 12148  000BEA  0102               	movlb	2	; () banked
 12149  000BEC  51B5               	movf	(doModeVerbose@p_1172+1)& (0+255),w,b
 12150  000BEE  11B4               	iorwf	doModeVerbose@p_1172& (0+255),w,b
 12151  000BF0  E00A               	bz	l12910
 12152                           
 12153                           ; BSR set to: 2
 12154                           ;main.c: 704: value = atoi(p);
 12155  000BF2  C2B4  F01F         	movff	doModeVerbose@p_1172,?_atoi
 12156  000BF6  C2B5  F020         	movff	doModeVerbose@p_1172+1,?_atoi+1
 12157  000BFA  EC6D  F01B         	call	_atoi	;wreg free
 12158  000BFE  501F               	movf	?_atoi,w,c
 12159  000C00  0102               	movlb	2	; () banked
 12160  000C02  6FA7               	movwf	doModeVerbose@value_1171& (0+255),b
 12161                           
 12162                           ;main.c: 705: } else {
 12163  000C04  D007               	goto	l12914
 12164  000C06                     l12910:
 12165                           
 12166                           ; BSR set to: 2
 12167                           ;main.c: 706: putsUSART((char *) "-ERROR - Need a value\r\n");
 12168  000C06  0E7C               	movlw	high STR_74
 12169  000C08  6E1B               	movwf	?_putsUSART+1,c
 12170  000C0A  0E61               	movlw	low STR_74
 12171  000C0C  6E1A               	movwf	?_putsUSART,c
 12172  000C0E  ECE6  F025         	call	_putsUSART	;wreg free
 12173  000C12  D398               	goto	l498
 12174  000C14                     l12914:
 12175                           
 12176                           ; BSR set to: 2
 12177                           ;main.c: 708: }
 12178                           ;main.c: 710: if (writeRegisterExtended(nodeid,
 12179                           ;main.c: 711: page,
 12180                           ;main.c: 712: reg,
 12181                           ;main.c: 713: rwtimeout,
 12182                           ;main.c: 714: &value)) {
 12183  000C14  0100               	movlb	0	; () banked
 12184  000C16  C2A1  F09E         	movff	doModeVerbose@page_1169,?_writeRegisterExtended
 12185  000C1A  6B9F               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 12186  000C1C  C2A2  F0A0         	movff	doModeVerbose@reg_1170,?_writeRegisterExtended+2
 12187  000C20  C0D9  F0A1         	movff	_rwtimeout,?_writeRegisterExtended+3
 12188  000C24  6BA2               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 12189  000C26  0E02               	movlw	high doModeVerbose@value_1171
 12190  000C28  6FA4               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 12191  000C2A  0EA7               	movlw	low doModeVerbose@value_1171
 12192  000C2C  6FA3               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 12193  000C2E  0102               	movlb	2	; () banked
 12194  000C30  518D               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 12195  000C32  ECB8  F01D         	call	_writeRegisterExtended
 12196  000C36  0900               	iorlw	0
 12197  000C38  E007               	bz	l12918
 12198                           
 12199                           ;main.c: 715: putsUSART((char *) "+OK - Value written successfully\r\n");
 12200  000C3A  0E79               	movlw	high STR_75
 12201  000C3C  6E1B               	movwf	?_putsUSART+1,c
 12202  000C3E  0EC1               	movlw	low STR_75
 12203  000C40  6E1A               	movwf	?_putsUSART,c
 12204  000C42  ECE6  F025         	call	_putsUSART	;wreg free
 12205                           
 12206                           ;main.c: 716: } else {
 12207  000C46  D36F               	goto	l13158
 12208  000C48                     l12918:
 12209                           
 12210                           ;main.c: 717: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 12211  000C48  0E7A               	movlw	high STR_76
 12212  000C4A  6E1B               	movwf	?_putsUSART+1,c
 12213  000C4C  0E8B               	movlw	low STR_76
 12214  000C4E  6E1A               	movwf	?_putsUSART,c
 12215  000C50  ECE6  F025         	call	_putsUSART	;wreg free
 12216  000C54  D368               	goto	l13158
 12217  000C56                     l12920:
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;main.c: 722: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 12221  000C56  0101               	movlb	1	; () banked
 12222  000C58  0E01               	movlw	high _cmdbuf
 12223  000C5A  6E27               	movwf	?_stristr+1,c
 12224  000C5C  0E20               	movlw	low _cmdbuf
 12225  000C5E  6E26               	movwf	?_stristr,c
 12226  000C60  0E7F               	movlw	high STR_77
 12227  000C62  6E29               	movwf	?_stristr+3,c
 12228  000C64  0EBC               	movlw	low STR_77
 12229  000C66  6E28               	movwf	?_stristr+2,c
 12230  000C68  EC75  F023         	call	_stristr	;wreg free
 12231  000C6C  DB6C               	call	PL2	;call to abstracted procedure
 12232  000C6E  E102               	bnz	u17125
 12233  000C70  5026               	movf	?_stristr,w,c
 12234  000C72  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12235  000C74                     u17125:
 12236  000C74  E154               	bnz	l12946
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;main.c: 723: uint8_t nodeid;
 12240                           ;main.c: 725: strcpy(cmdbuf, cmdbuf + 9);
 12241  000C76  0E01               	movlw	high _cmdbuf
 12242  000C78  6E1A               	movwf	?_strcpy+1,c
 12243  000C7A  0E20               	movlw	low _cmdbuf
 12244  000C7C  6E19               	movwf	?_strcpy,c
 12245  000C7E  0E29               	movlw	low (_cmdbuf+9)
 12246  000C80  0100               	movlb	0	; () banked
 12247  000C82  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12248  000C84  0E01               	movlw	high (_cmdbuf+9)
 12249  000C86  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12250  000C88  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12251  000C8C  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12252  000C90  EC29  F028         	call	_strcpy	;wreg free
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;main.c: 726: nodeid = atoi(cmdbuf);
 12256  000C94  0101               	movlb	1	; () banked
 12257  000C96  0E01               	movlw	high _cmdbuf
 12258  000C98  6E20               	movwf	?_atoi+1,c
 12259  000C9A  0E20               	movlw	low _cmdbuf
 12260  000C9C  6E1F               	movwf	?_atoi,c
 12261  000C9E  EC6D  F01B         	call	_atoi	;wreg free
 12262  000CA2  501F               	movf	?_atoi,w,c
 12263  000CA4  0102               	movlb	2	; () banked
 12264  000CA6  6FAF               	movwf	doModeVerbose@nodeid_1183& (0+255),b
 12265                           
 12266                           ; BSR set to: 2
 12267                           ;main.c: 728: putsUSART((char *) "Info for node id = ");
 12268  000CA8  0E7D               	movlw	high STR_78
 12269  000CAA  6E1B               	movwf	?_putsUSART+1,c
 12270  000CAC  0EAB               	movlw	low STR_78
 12271  000CAE  6E1A               	movwf	?_putsUSART,c
 12272  000CB0  ECE6  F025         	call	_putsUSART	;wreg free
 12273                           
 12274                           ;main.c: 729: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 12275  000CB4  0100               	movlb	0	; () banked
 12276  000CB6  67D3               	tstfsz	_bHex& (0+255),b
 12277  000CB8  D005               	goto	l12932
 12278                           
 12279                           ; BSR set to: 0
 12280  000CBA  0E7F               	movlw	high STR_53
 12281  000CBC  0102               	movlb	2	; () banked
 12282  000CBE  6F9F               	movwf	(_doModeVerbose$1188+1)& (0+255),b
 12283  000CC0  0EEE               	movlw	low STR_53
 12284  000CC2  D004               	goto	L12
 12285  000CC4                     l12932:
 12286                           
 12287                           ; BSR set to: 0
 12288  000CC4  0E7F               	movlw	high STR_52
 12289  000CC6  0102               	movlb	2	; () banked
 12290  000CC8  6F9F               	movwf	(_doModeVerbose$1188+1)& (0+255),b
 12291  000CCA  0E65               	movlw	low STR_52
 12292  000CCC                     L12:
 12293  000CCC  6F9E               	movwf	_doModeVerbose$1188& (0+255),b
 12294                           
 12295                           ; BSR set to: 2
 12296  000CCE  0E01               	movlw	high _wrkbuf
 12297  000CD0  0100               	movlb	0	; () banked
 12298  000CD2  6F61               	movwf	(?_sprintf+1)& (0+255),b
 12299  000CD4  0E70               	movlw	low _wrkbuf
 12300  000CD6  6F60               	movwf	?_sprintf& (0+255),b
 12301  000CD8  C29E  F062         	movff	_doModeVerbose$1188,?_sprintf+2
 12302  000CDC  C29F  F063         	movff	_doModeVerbose$1188+1,?_sprintf+3
 12303  000CE0  C2AF  F064         	movff	doModeVerbose@nodeid_1183,?_sprintf+4
 12304  000CE4  6B65               	clrf	(?_sprintf+5)& (0+255),b
 12305  000CE6  EC3C  F00A         	call	_sprintf	;wreg free
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;main.c: 730: putsUSART(wrkbuf);
 12309  000CEA  0101               	movlb	1	; () banked
 12310  000CEC  0E01               	movlw	high _wrkbuf
 12311  000CEE  6E1B               	movwf	?_putsUSART+1,c
 12312  000CF0  0E70               	movlw	low _wrkbuf
 12313  000CF2  6E1A               	movwf	?_putsUSART,c
 12314  000CF4  ECE6  F025         	call	_putsUSART	;wreg free
 12315                           
 12316                           ;main.c: 731: putsUSART((char *) "\r\n");
 12317  000CF8  0E74               	movlw	high (STR_188+50)
 12318  000CFA  6E1B               	movwf	?_putsUSART+1,c
 12319  000CFC  0EAE               	movlw	low (STR_188+50)
 12320  000CFE  6E1A               	movwf	?_putsUSART,c
 12321  000D00  ECE6  F025         	call	_putsUSART	;wreg free
 12322                           
 12323                           ;main.c: 732: printNodeFirmwareVersion(nodeid);
 12324  000D04  0102               	movlb	2	; () banked
 12325  000D06  51AF               	movf	doModeVerbose@nodeid_1183& (0+255),w,b
 12326  000D08  ECF9  F01E         	call	_printNodeFirmwareVersion
 12327                           
 12328                           ;main.c: 733: printGUID(nodeid);
 12329  000D0C  0102               	movlb	2	; () banked
 12330  000D0E  51AF               	movf	doModeVerbose@nodeid_1183& (0+255),w,b
 12331  000D10  ECEA  F01A         	call	_printGUID
 12332                           
 12333                           ;main.c: 734: printMDF(nodeid);
 12334  000D14  0102               	movlb	2	; () banked
 12335  000D16  51AF               	movf	doModeVerbose@nodeid_1183& (0+255),w,b
 12336  000D18  ECD2  F021         	call	_printMDF
 12337                           
 12338                           ;main.c: 735: }
 12339  000D1C  D304               	goto	l13158
 12340  000D1E                     l12946:
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;main.c: 738: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 12344  000D1E  0101               	movlb	1	; () banked
 12345  000D20  0E01               	movlw	high _cmdbuf
 12346  000D22  6E27               	movwf	?_stristr+1,c
 12347  000D24  0E20               	movlw	low _cmdbuf
 12348  000D26  6E26               	movwf	?_stristr,c
 12349  000D28  0E7F               	movlw	high STR_82
 12350  000D2A  6E29               	movwf	?_stristr+3,c
 12351  000D2C  0E57               	movlw	low STR_82
 12352  000D2E  6E28               	movwf	?_stristr+2,c
 12353  000D30  EC75  F023         	call	_stristr	;wreg free
 12354  000D34  DB08               	call	PL2	;call to abstracted procedure
 12355  000D36  E102               	bnz	u17145
 12356  000D38  5026               	movf	?_stristr,w,c
 12357  000D3A  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12358  000D3C                     u17145:
 12359  000D3C  E001 D0C6          	bnz	l13012
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;main.c: 740: uint8_t filterno;
 12363                           ;main.c: 741: uint8_t filter_priority;
 12364                           ;main.c: 742: uint16_t filter_class;
 12365                           ;main.c: 743: uint8_t filter_type;
 12366                           ;main.c: 744: uint8_t filter_nodeid;
 12367                           ;main.c: 746: strcpy(cmdbuf, cmdbuf + 8);
 12368  000D40  0E01               	movlw	high _cmdbuf
 12369  000D42  DB42               	call	PL16	;call to abstracted procedure
 12370  000D44  EC29  F028         	call	_strcpy	;wreg free
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;main.c: 747: char *p = strtok(cmdbuf, ",");
 12374  000D48  DB4C               	call	PL30	;call to abstracted procedure
 12375  000D4A  EC1C  F022         	call	_strtok	;wreg free
 12376  000D4E  C025  F2B9         	movff	?_strtok,doModeVerbose@p_1196
 12377  000D52  C026  F2BA         	movff	?_strtok+1,doModeVerbose@p_1196+1
 12378                           
 12379                           ;main.c: 748: if ((0) != p) {
 12380  000D56  0102               	movlb	2	; () banked
 12381  000D58  51BA               	movf	(doModeVerbose@p_1196+1)& (0+255),w,b
 12382  000D5A  11B9               	iorwf	doModeVerbose@p_1196& (0+255),w,b
 12383  000D5C  E013               	bz	l12962
 12384                           
 12385                           ; BSR set to: 2
 12386                           ;main.c: 749: filterno = atoi(p);
 12387  000D5E  C2B9  F01F         	movff	doModeVerbose@p_1196,?_atoi
 12388  000D62  C2BA  F020         	movff	doModeVerbose@p_1196+1,?_atoi+1
 12389  000D66  EC6D  F01B         	call	_atoi	;wreg free
 12390  000D6A  501F               	movf	?_atoi,w,c
 12391  000D6C  0102               	movlb	2	; () banked
 12392  000D6E  6FA8               	movwf	doModeVerbose@filterno& (0+255),b
 12393                           
 12394                           ; BSR set to: 2
 12395                           ;main.c: 750: if (filterno > 15) {
 12396  000D70  0E0F               	movlw	15
 12397  000D72  65A8               	cpfsgt	doModeVerbose@filterno& (0+255),b
 12398  000D74  D00E               	goto	l12966
 12399                           
 12400                           ; BSR set to: 2
 12401                           ;main.c: 751: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 12402  000D76  0E72               	movlw	high STR_84
 12403  000D78  6E1B               	movwf	?_putsUSART+1,c
 12404  000D7A  0E40               	movlw	low STR_84
 12405  000D7C  6E1A               	movwf	?_putsUSART,c
 12406  000D7E  ECE6  F025         	call	_putsUSART	;wreg free
 12407  000D82  D2E0               	goto	l498
 12408  000D84                     l12962:
 12409                           
 12410                           ; BSR set to: 2
 12411                           ;main.c: 755: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 12412  000D84  0E78               	movlw	high STR_85
 12413  000D86  6E1B               	movwf	?_putsUSART+1,c
 12414  000D88  0E1E               	movlw	low STR_85
 12415  000D8A  6E1A               	movwf	?_putsUSART,c
 12416  000D8C  ECE6  F025         	call	_putsUSART	;wreg free
 12417  000D90  D2D9               	goto	l498
 12418  000D92                     l12966:
 12419                           
 12420                           ; BSR set to: 2
 12421                           ;main.c: 757: }
 12422                           ;main.c: 760: p = strtok((0), ",");
 12423  000D92  DAE0               	call	PL6	;call to abstracted procedure
 12424  000D94  EC1C  F022         	call	_strtok	;wreg free
 12425  000D98  C025  F2B9         	movff	?_strtok,doModeVerbose@p_1196
 12426  000D9C  C026  F2BA         	movff	?_strtok+1,doModeVerbose@p_1196+1
 12427                           
 12428                           ;main.c: 761: if ((0) != p) {
 12429  000DA0  0102               	movlb	2	; () banked
 12430  000DA2  51BA               	movf	(doModeVerbose@p_1196+1)& (0+255),w,b
 12431  000DA4  11B9               	iorwf	doModeVerbose@p_1196& (0+255),w,b
 12432  000DA6  E00A               	bz	l12972
 12433                           
 12434                           ; BSR set to: 2
 12435                           ;main.c: 762: filter_priority = atoi(p);
 12436  000DA8  C2B9  F01F         	movff	doModeVerbose@p_1196,?_atoi
 12437  000DAC  C2BA  F020         	movff	doModeVerbose@p_1196+1,?_atoi+1
 12438  000DB0  EC6D  F01B         	call	_atoi	;wreg free
 12439  000DB4  501F               	movf	?_atoi,w,c
 12440  000DB6  0102               	movlb	2	; () banked
 12441  000DB8  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 12442                           
 12443                           ;main.c: 763: } else {
 12444  000DBA  D007               	goto	l12976
 12445  000DBC                     l12972:
 12446                           
 12447                           ; BSR set to: 2
 12448                           ;main.c: 764: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 12449  000DBC  0E77               	movlw	high STR_87
 12450  000DBE  6E1B               	movwf	?_putsUSART+1,c
 12451  000DC0  0E53               	movlw	low STR_87
 12452  000DC2  6E1A               	movwf	?_putsUSART,c
 12453  000DC4  ECE6  F025         	call	_putsUSART	;wreg free
 12454  000DC8  D2BD               	goto	l498
 12455  000DCA                     l12976:
 12456                           
 12457                           ; BSR set to: 2
 12458                           ;main.c: 766: }
 12459                           ;main.c: 769: p = strtok((0), ",");
 12460  000DCA  DAC4               	call	PL6	;call to abstracted procedure
 12461  000DCC  EC1C  F022         	call	_strtok	;wreg free
 12462  000DD0  C025  F2B9         	movff	?_strtok,doModeVerbose@p_1196
 12463  000DD4  C026  F2BA         	movff	?_strtok+1,doModeVerbose@p_1196+1
 12464                           
 12465                           ;main.c: 770: if ((0) != p) {
 12466  000DD8  0102               	movlb	2	; () banked
 12467  000DDA  51BA               	movf	(doModeVerbose@p_1196+1)& (0+255),w,b
 12468  000DDC  11B9               	iorwf	doModeVerbose@p_1196& (0+255),w,b
 12469  000DDE  E00B               	bz	l12982
 12470                           
 12471                           ; BSR set to: 2
 12472                           ;main.c: 771: filter_class = atoi(p);
 12473  000DE0  C2B9  F01F         	movff	doModeVerbose@p_1196,?_atoi
 12474  000DE4  C2BA  F020         	movff	doModeVerbose@p_1196+1,?_atoi+1
 12475  000DE8  EC6D  F01B         	call	_atoi	;wreg free
 12476  000DEC  C01F  F288         	movff	?_atoi,doModeVerbose@filter_class
 12477  000DF0  C020  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 12478                           
 12479                           ;main.c: 772: } else {
 12480  000DF4  D007               	goto	l12986
 12481  000DF6                     l12982:
 12482                           
 12483                           ; BSR set to: 2
 12484                           ;main.c: 773: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 12485  000DF6  0E78               	movlw	high STR_89
 12486  000DF8  6E1B               	movwf	?_putsUSART+1,c
 12487  000DFA  0EBA               	movlw	low STR_89
 12488  000DFC  6E1A               	movwf	?_putsUSART,c
 12489  000DFE  ECE6  F025         	call	_putsUSART	;wreg free
 12490  000E02  D2A0               	goto	l498
 12491  000E04                     l12986:
 12492                           
 12493                           ;main.c: 775: }
 12494                           ;main.c: 778: p = strtok((0), ",");
 12495  000E04  DAA7               	call	PL6	;call to abstracted procedure
 12496  000E06  EC1C  F022         	call	_strtok	;wreg free
 12497  000E0A  C025  F2B9         	movff	?_strtok,doModeVerbose@p_1196
 12498  000E0E  C026  F2BA         	movff	?_strtok+1,doModeVerbose@p_1196+1
 12499                           
 12500                           ;main.c: 779: if ((0) != p) {
 12501  000E12  0102               	movlb	2	; () banked
 12502  000E14  51BA               	movf	(doModeVerbose@p_1196+1)& (0+255),w,b
 12503  000E16  11B9               	iorwf	doModeVerbose@p_1196& (0+255),w,b
 12504  000E18  E00A               	bz	l12992
 12505                           
 12506                           ; BSR set to: 2
 12507                           ;main.c: 780: filter_type = atoi(p);
 12508  000E1A  C2B9  F01F         	movff	doModeVerbose@p_1196,?_atoi
 12509  000E1E  C2BA  F020         	movff	doModeVerbose@p_1196+1,?_atoi+1
 12510  000E22  EC6D  F01B         	call	_atoi	;wreg free
 12511  000E26  501F               	movf	?_atoi,w,c
 12512  000E28  0102               	movlb	2	; () banked
 12513  000E2A  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 12514                           
 12515                           ;main.c: 781: } else {
 12516  000E2C  D007               	goto	l12996
 12517  000E2E                     l12992:
 12518                           
 12519                           ; BSR set to: 2
 12520                           ;main.c: 782: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 12521  000E2E  0E79               	movlw	high STR_91
 12522  000E30  6E1B               	movwf	?_putsUSART+1,c
 12523  000E32  0E08               	movlw	low STR_91
 12524  000E34  6E1A               	movwf	?_putsUSART,c
 12525  000E36  ECE6  F025         	call	_putsUSART	;wreg free
 12526  000E3A  D284               	goto	l498
 12527  000E3C                     l12996:
 12528                           
 12529                           ; BSR set to: 2
 12530                           ;main.c: 784: }
 12531                           ;main.c: 787: p = strtok((0), ",");
 12532  000E3C  DA8B               	call	PL6	;call to abstracted procedure
 12533  000E3E  EC1C  F022         	call	_strtok	;wreg free
 12534  000E42  C025  F2B9         	movff	?_strtok,doModeVerbose@p_1196
 12535  000E46  C026  F2BA         	movff	?_strtok+1,doModeVerbose@p_1196+1
 12536                           
 12537                           ;main.c: 788: if ((0) != p) {
 12538  000E4A  0102               	movlb	2	; () banked
 12539  000E4C  51BA               	movf	(doModeVerbose@p_1196+1)& (0+255),w,b
 12540  000E4E  11B9               	iorwf	doModeVerbose@p_1196& (0+255),w,b
 12541  000E50  E00A               	bz	l13002
 12542                           
 12543                           ; BSR set to: 2
 12544                           ;main.c: 789: filter_nodeid = atoi(p);
 12545  000E52  C2B9  F01F         	movff	doModeVerbose@p_1196,?_atoi
 12546  000E56  C2BA  F020         	movff	doModeVerbose@p_1196+1,?_atoi+1
 12547  000E5A  EC6D  F01B         	call	_atoi	;wreg free
 12548  000E5E  501F               	movf	?_atoi,w,c
 12549  000E60  0102               	movlb	2	; () banked
 12550  000E62  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 12551                           
 12552                           ;main.c: 790: } else {
 12553  000E64  D007               	goto	l13006
 12554  000E66                     l13002:
 12555                           
 12556                           ; BSR set to: 2
 12557                           ;main.c: 791: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 12558  000E66  0E77               	movlw	high STR_93
 12559  000E68  6E1B               	movwf	?_putsUSART+1,c
 12560  000E6A  0E7D               	movlw	low STR_93
 12561  000E6C  6E1A               	movwf	?_putsUSART,c
 12562  000E6E  ECE6  F025         	call	_putsUSART	;wreg free
 12563  000E72  D268               	goto	l498
 12564  000E74                     l13006:
 12565                           
 12566                           ; BSR set to: 2
 12567                           ;main.c: 793: }
 12568                           ;main.c: 796: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12569  000E74  0E80               	movlw	128
 12570  000E76  ECAD  F028         	call	_ECANSetOperationMode
 12571                           
 12572                           ;main.c: 798: uint32_t id = ((uint32_t) filter_priority << 26) |
 12573                           ;main.c: 799: ((uint32_t) filter_class << 16) |
 12574                           ;main.c: 800: ((uint32_t) filter_type << 8) |
 12575                           ;main.c: 801: filter_nodeid;
 12576  000E7A  C28F  F0B1         	movff	doModeVerbose@filter_type,??_doModeVerbose
 12577  000E7E  DACB               	call	PL40	;call to abstracted procedure
 12578  000E80  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 12579  000E82  0100               	movlb	0	; () banked
 12580  000E84  6FB5               	movwf	(??_doModeVerbose+4)& (0+255),b
 12581  000E86  0102               	movlb	2	; () banked
 12582  000E88  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 12583  000E8A  DAEB               	call	PL58	;call to abstracted procedure
 12584  000E8C  C28E  F0B9         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 12585  000E90  DA68               	call	PL8	;call to abstracted procedure
 12586  000E92  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 12587  000E94  0100               	movlb	0	; () banked
 12588  000E96  11C1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12589  000E98  0102               	movlb	2	; () banked
 12590  000E9A  6F80               	movwf	doModeVerbose@id& (0+255),b
 12591  000E9C  0100               	movlb	0	; () banked
 12592  000E9E  51C2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12593  000EA0  0102               	movlb	2	; () banked
 12594  000EA2  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 12595  000EA4  0100               	movlb	0	; () banked
 12596  000EA6  51C3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12597  000EA8  0102               	movlb	2	; () banked
 12598  000EAA  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 12599  000EAC  0100               	movlb	0	; () banked
 12600  000EAE  51C4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12601  000EB0  0102               	movlb	2	; () banked
 12602  000EB2  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 12603                           
 12604                           ; BSR set to: 2
 12605                           ;main.c: 802: setFilter(filterno, id);
 12606  000EB4  C280  F019         	movff	doModeVerbose@id,?_setFilter
 12607  000EB8  C281  F01A         	movff	doModeVerbose@id+1,?_setFilter+1
 12608  000EBC  C282  F01B         	movff	doModeVerbose@id+2,?_setFilter+2
 12609  000EC0  C283  F01C         	movff	doModeVerbose@id+3,?_setFilter+3
 12610  000EC4  51A8               	movf	doModeVerbose@filterno& (0+255),w,b
 12611  000EC6  EC3D  F013         	call	_setFilter
 12612                           
 12613                           ;main.c: 803: }
 12614  000ECA  D22D               	goto	l13158
 12615  000ECC                     l13012:
 12616                           
 12617                           ; BSR set to: 0
 12618                           ;main.c: 806: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 12619  000ECC  0101               	movlb	1	; () banked
 12620  000ECE  0E01               	movlw	high _cmdbuf
 12621  000ED0  6E27               	movwf	?_stristr+1,c
 12622  000ED2  0E20               	movlw	low _cmdbuf
 12623  000ED4  6E26               	movwf	?_stristr,c
 12624  000ED6  0E7F               	movlw	high STR_94
 12625  000ED8  6E29               	movwf	?_stristr+3,c
 12626  000EDA  0EB2               	movlw	low STR_94
 12627  000EDC  6E28               	movwf	?_stristr+2,c
 12628  000EDE  EC75  F023         	call	_stristr	;wreg free
 12629  000EE2  DA31               	call	PL2	;call to abstracted procedure
 12630  000EE4  E102               	bnz	u17225
 12631  000EE6  5026               	movf	?_stristr,w,c
 12632  000EE8  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12633  000EEA                     u17225:
 12634  000EEA  E001 D0CD          	bnz	l13082
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;main.c: 808: uint8_t maskno;
 12638                           ;main.c: 809: uint8_t mask_priority;
 12639                           ;main.c: 810: uint16_t mask_class;
 12640                           ;main.c: 811: uint8_t mask_type;
 12641                           ;main.c: 812: uint8_t mask_nodeid;
 12642                           ;main.c: 814: strcpy(cmdbuf, cmdbuf + 8);
 12643  000EEE  0E01               	movlw	high _cmdbuf
 12644  000EF0  DA6B               	call	PL16	;call to abstracted procedure
 12645  000EF2  EC29  F028         	call	_strcpy	;wreg free
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;main.c: 815: char *p = strtok(cmdbuf, ",");
 12649  000EF6  DA75               	call	PL30	;call to abstracted procedure
 12650  000EF8  EC1C  F022         	call	_strtok	;wreg free
 12651  000EFC  C025  F2BB         	movff	?_strtok,doModeVerbose@p_1215
 12652  000F00  C026  F2BC         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12653                           
 12654                           ;main.c: 816: if ((0) != p) {
 12655  000F04  0102               	movlb	2	; () banked
 12656  000F06  51BC               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12657  000F08  11BB               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12658  000F0A  E013               	bz	l13028
 12659                           
 12660                           ; BSR set to: 2
 12661                           ;main.c: 817: maskno = atoi(p);
 12662  000F0C  C2BB  F01F         	movff	doModeVerbose@p_1215,?_atoi
 12663  000F10  C2BC  F020         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12664  000F14  EC6D  F01B         	call	_atoi	;wreg free
 12665  000F18  501F               	movf	?_atoi,w,c
 12666  000F1A  0102               	movlb	2	; () banked
 12667  000F1C  6FA9               	movwf	doModeVerbose@maskno& (0+255),b
 12668                           
 12669                           ; BSR set to: 2
 12670                           ;main.c: 818: if (maskno > 1) {
 12671  000F1E  0E01               	movlw	1
 12672  000F20  65A9               	cpfsgt	doModeVerbose@maskno& (0+255),b
 12673  000F22  D00E               	goto	l13032
 12674                           
 12675                           ; BSR set to: 2
 12676                           ;main.c: 819: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 12677  000F24  0E75               	movlw	high STR_96
 12678  000F26  6E1B               	movwf	?_putsUSART+1,c
 12679  000F28  0E4D               	movlw	low STR_96
 12680  000F2A  6E1A               	movwf	?_putsUSART,c
 12681  000F2C  ECE6  F025         	call	_putsUSART	;wreg free
 12682  000F30  D209               	goto	l498
 12683  000F32                     l13028:
 12684                           
 12685                           ; BSR set to: 2
 12686                           ;main.c: 823: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 12687  000F32  0E79               	movlw	high STR_97
 12688  000F34  6E1B               	movwf	?_putsUSART+1,c
 12689  000F36  0E2E               	movlw	low STR_97
 12690  000F38  6E1A               	movwf	?_putsUSART,c
 12691  000F3A  ECE6  F025         	call	_putsUSART	;wreg free
 12692  000F3E  D202               	goto	l498
 12693  000F40                     l13032:
 12694                           
 12695                           ; BSR set to: 2
 12696                           ;main.c: 825: }
 12697                           ;main.c: 828: p = strtok((0), ",");
 12698  000F40  DA09               	call	PL6	;call to abstracted procedure
 12699  000F42  EC1C  F022         	call	_strtok	;wreg free
 12700  000F46  C025  F2BB         	movff	?_strtok,doModeVerbose@p_1215
 12701  000F4A  C026  F2BC         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12702                           
 12703                           ;main.c: 829: if ((0) != p) {
 12704  000F4E  0102               	movlb	2	; () banked
 12705  000F50  51BC               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12706  000F52  11BB               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12707  000F54  E00A               	bz	l13038
 12708                           
 12709                           ; BSR set to: 2
 12710                           ;main.c: 830: mask_priority = atoi(p);
 12711  000F56  C2BB  F01F         	movff	doModeVerbose@p_1215,?_atoi
 12712  000F5A  C2BC  F020         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12713  000F5E  EC6D  F01B         	call	_atoi	;wreg free
 12714  000F62  501F               	movf	?_atoi,w,c
 12715  000F64  0102               	movlb	2	; () banked
 12716  000F66  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 12717                           
 12718                           ;main.c: 831: } else {
 12719  000F68  D007               	goto	l13042
 12720  000F6A                     l13038:
 12721                           
 12722                           ; BSR set to: 2
 12723                           ;main.c: 832: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 12724  000F6A  0E77               	movlw	high STR_99
 12725  000F6C  6E1B               	movwf	?_putsUSART+1,c
 12726  000F6E  0ECE               	movlw	low STR_99
 12727  000F70  6E1A               	movwf	?_putsUSART,c
 12728  000F72  ECE6  F025         	call	_putsUSART	;wreg free
 12729  000F76  D1E6               	goto	l498
 12730  000F78                     l13042:
 12731                           
 12732                           ; BSR set to: 2
 12733                           ;main.c: 834: }
 12734                           ;main.c: 837: p = strtok((0), ",");
 12735  000F78  D9ED               	call	PL6	;call to abstracted procedure
 12736  000F7A  EC1C  F022         	call	_strtok	;wreg free
 12737  000F7E  C025  F2BB         	movff	?_strtok,doModeVerbose@p_1215
 12738  000F82  C026  F2BC         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12739                           
 12740                           ;main.c: 838: if ((0) != p) {
 12741  000F86  0102               	movlb	2	; () banked
 12742  000F88  51BC               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12743  000F8A  11BB               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12744  000F8C  E00B               	bz	l13048
 12745                           
 12746                           ; BSR set to: 2
 12747                           ;main.c: 839: mask_class = atoi(p);
 12748  000F8E  C2BB  F01F         	movff	doModeVerbose@p_1215,?_atoi
 12749  000F92  C2BC  F020         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12750  000F96  EC6D  F01B         	call	_atoi	;wreg free
 12751  000F9A  C01F  F28A         	movff	?_atoi,doModeVerbose@mask_class
 12752  000F9E  C020  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 12753                           
 12754                           ;main.c: 840: } else {
 12755  000FA2  D007               	goto	l13052
 12756  000FA4                     l13048:
 12757                           
 12758                           ; BSR set to: 2
 12759                           ;main.c: 841: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 12760  000FA4  0E79               	movlw	high STR_101
 12761  000FA6  6E1B               	movwf	?_putsUSART+1,c
 12762  000FA8  0E78               	movlw	low STR_101
 12763  000FAA  6E1A               	movwf	?_putsUSART,c
 12764  000FAC  ECE6  F025         	call	_putsUSART	;wreg free
 12765  000FB0  D1C9               	goto	l498
 12766  000FB2                     l13052:
 12767                           
 12768                           ;main.c: 843: }
 12769                           ;main.c: 846: p = strtok((0), ",");
 12770  000FB2  D9D0               	call	PL6	;call to abstracted procedure
 12771  000FB4  EC1C  F022         	call	_strtok	;wreg free
 12772  000FB8  C025  F2BB         	movff	?_strtok,doModeVerbose@p_1215
 12773  000FBC  C026  F2BC         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12774                           
 12775                           ;main.c: 847: if ((0) != p) {
 12776  000FC0  0102               	movlb	2	; () banked
 12777  000FC2  51BC               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12778  000FC4  11BB               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12779  000FC6  E00A               	bz	l13058
 12780                           
 12781                           ; BSR set to: 2
 12782                           ;main.c: 848: mask_type = atoi(p);
 12783  000FC8  C2BB  F01F         	movff	doModeVerbose@p_1215,?_atoi
 12784  000FCC  C2BC  F020         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12785  000FD0  EC6D  F01B         	call	_atoi	;wreg free
 12786  000FD4  501F               	movf	?_atoi,w,c
 12787  000FD6  0102               	movlb	2	; () banked
 12788  000FD8  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 12789                           
 12790                           ;main.c: 849: } else {
 12791  000FDA  D007               	goto	l13062
 12792  000FDC                     l13058:
 12793                           
 12794                           ; BSR set to: 2
 12795                           ;main.c: 850: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 12796  000FDC  0E79               	movlw	high STR_103
 12797  000FDE  6E1B               	movwf	?_putsUSART+1,c
 12798  000FE0  0E9D               	movlw	low STR_103
 12799  000FE2  6E1A               	movwf	?_putsUSART,c
 12800  000FE4  ECE6  F025         	call	_putsUSART	;wreg free
 12801  000FE8  D1AD               	goto	l498
 12802  000FEA                     l13062:
 12803                           
 12804                           ; BSR set to: 2
 12805                           ;main.c: 852: }
 12806                           ;main.c: 855: p = strtok((0), ",");
 12807  000FEA  D9B4               	call	PL6	;call to abstracted procedure
 12808  000FEC  EC1C  F022         	call	_strtok	;wreg free
 12809  000FF0  C025  F2BB         	movff	?_strtok,doModeVerbose@p_1215
 12810  000FF4  C026  F2BC         	movff	?_strtok+1,doModeVerbose@p_1215+1
 12811                           
 12812                           ;main.c: 856: if ((0) != p) {
 12813  000FF8  0102               	movlb	2	; () banked
 12814  000FFA  51BC               	movf	(doModeVerbose@p_1215+1)& (0+255),w,b
 12815  000FFC  11BB               	iorwf	doModeVerbose@p_1215& (0+255),w,b
 12816  000FFE  E00A               	bz	l13068
 12817                           
 12818                           ; BSR set to: 2
 12819                           ;main.c: 857: mask_nodeid = atoi(p);
 12820  001000  C2BB  F01F         	movff	doModeVerbose@p_1215,?_atoi
 12821  001004  C2BC  F020         	movff	doModeVerbose@p_1215+1,?_atoi+1
 12822  001008  EC6D  F01B         	call	_atoi	;wreg free
 12823  00100C  501F               	movf	?_atoi,w,c
 12824  00100E  0102               	movlb	2	; () banked
 12825  001010  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 12826                           
 12827                           ;main.c: 858: } else {
 12828  001012  D007               	goto	l13072
 12829  001014                     l13068:
 12830                           
 12831                           ; BSR set to: 2
 12832                           ;main.c: 859: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 12833  001014  0E78               	movlw	high STR_105
 12834  001016  6E1B               	movwf	?_putsUSART+1,c
 12835  001018  0E93               	movlw	low STR_105
 12836  00101A  6E1A               	movwf	?_putsUSART,c
 12837  00101C  ECE6  F025         	call	_putsUSART	;wreg free
 12838  001020  D191               	goto	l498
 12839  001022                     l13072:
 12840                           
 12841                           ; BSR set to: 2
 12842                           ;main.c: 861: }
 12843                           ;main.c: 863: uint32_t id = ((uint32_t) mask_priority << 26) |
 12844                           ;main.c: 864: ((uint32_t) mask_class << 16) |
 12845                           ;main.c: 865: ((uint32_t) mask_type << 8) |
 12846                           ;main.c: 866: mask_nodeid;
 12847  001022  C292  F0B1         	movff	doModeVerbose@mask_type,??_doModeVerbose
 12848  001026  D9F7               	call	PL40	;call to abstracted procedure
 12849  001028  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 12850  00102A  0100               	movlb	0	; () banked
 12851  00102C  6FB5               	movwf	(??_doModeVerbose+4)& (0+255),b
 12852  00102E  0102               	movlb	2	; () banked
 12853  001030  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 12854  001032  DA17               	call	PL58	;call to abstracted procedure
 12855  001034  C291  F0B9         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 12856  001038  D994               	call	PL8	;call to abstracted procedure
 12857  00103A  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 12858  00103C  0100               	movlb	0	; () banked
 12859  00103E  11C1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12860  001040  0102               	movlb	2	; () banked
 12861  001042  6FA3               	movwf	doModeVerbose@id_1227& (0+255),b
 12862  001044  0100               	movlb	0	; () banked
 12863  001046  51C2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12864  001048  0102               	movlb	2	; () banked
 12865  00104A  6FA4               	movwf	(doModeVerbose@id_1227+1)& (0+255),b
 12866  00104C  0100               	movlb	0	; () banked
 12867  00104E  51C3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12868  001050  0102               	movlb	2	; () banked
 12869  001052  6FA5               	movwf	(doModeVerbose@id_1227+2)& (0+255),b
 12870  001054  0100               	movlb	0	; () banked
 12871  001056  51C4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12872  001058  0102               	movlb	2	; () banked
 12873  00105A  6FA6               	movwf	(doModeVerbose@id_1227+3)& (0+255),b
 12874                           
 12875                           ; BSR set to: 2
 12876                           ;main.c: 869: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12877  00105C  0E80               	movlw	128
 12878  00105E  ECAD  F028         	call	_ECANSetOperationMode
 12879                           
 12880                           ;main.c: 871: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 12881                           ;main.c: 872: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 12882  001062  0102               	movlb	2	; () banked
 12883  001064  51A9               	movf	doModeVerbose@maskno& (0+255),w,b
 12884  001066  E008               	bz	l13080
 12885                           
 12886                           ; BSR set to: 2
 12887  001068  010F               	movlb	15	; () banked
 12888  00106A  0E0F               	movlw	15	;volatile
 12889  00106C  6E1A               	movwf	?__CANIDToRegs+1,c
 12890  00106E  0E18               	movlw	24	;volatile
 12891  001070  D9EC               	call	PL52	;call to abstracted procedure
 12892  001072  EC60  F01A         	call	__CANIDToRegs	;wreg free
 12893  001076  D157               	goto	l13158
 12894  001078                     l13080:
 12895                           
 12896                           ; BSR set to: 2
 12897  001078  010F               	movlb	15	; () banked
 12898  00107A  0E0F               	movlw	15	;volatile
 12899  00107C  6E1A               	movwf	?__CANIDToRegs+1,c
 12900  00107E  0E1C               	movlw	28	;volatile
 12901  001080  D9E4               	call	PL52	;call to abstracted procedure
 12902  001082  EC60  F01A         	call	__CANIDToRegs	;wreg free
 12903  001086  D14F               	goto	l13158
 12904  001088                     l13082:
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;main.c: 879: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 12908  001088  0101               	movlb	1	; () banked
 12909  00108A  0E01               	movlw	high _cmdbuf
 12910  00108C  6E27               	movwf	?_stristr+1,c
 12911  00108E  0E20               	movlw	low _cmdbuf
 12912  001090  6E26               	movwf	?_stristr,c
 12913  001092  0E7F               	movlw	high STR_106
 12914  001094  6E29               	movwf	?_stristr+3,c
 12915  001096  0E9E               	movlw	low STR_106
 12916  001098  6E28               	movwf	?_stristr+2,c
 12917  00109A  EC75  F023         	call	_stristr	;wreg free
 12918  00109E  D953               	call	PL2	;call to abstracted procedure
 12919  0010A0  E102               	bnz	u17315
 12920  0010A2  5026               	movf	?_stristr,w,c
 12921  0010A4  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12922  0010A6                     u17315:
 12923  0010A6  E001 D138          	bnz	l13156
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;main.c: 882: strcpy(cmdbuf, cmdbuf + 4);
 12927  0010AA  0E01               	movlw	high _cmdbuf
 12928  0010AC  6E1A               	movwf	?_strcpy+1,c
 12929  0010AE  0E20               	movlw	low _cmdbuf
 12930  0010B0  6E19               	movwf	?_strcpy,c
 12931  0010B2  0E24               	movlw	low (_cmdbuf+4)
 12932  0010B4  0100               	movlb	0	; () banked
 12933  0010B6  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12934  0010B8  0E01               	movlw	high (_cmdbuf+4)
 12935  0010BA  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12936  0010BC  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12937  0010C0  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12938  0010C4  EC29  F028         	call	_strcpy	;wreg free
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;main.c: 885: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 12942  0010C8  0101               	movlb	1	; () banked
 12943  0010CA  0E01               	movlw	high _cmdbuf
 12944  0010CC  6E27               	movwf	?_stristr+1,c
 12945  0010CE  0E20               	movlw	low _cmdbuf
 12946  0010D0  6E26               	movwf	?_stristr,c
 12947  0010D2  0E7F               	movlw	high STR_107
 12948  0010D4  6E29               	movwf	?_stristr+3,c
 12949  0010D6  0EDD               	movlw	low STR_107
 12950  0010D8  6E28               	movwf	?_stristr+2,c
 12951  0010DA  EC75  F023         	call	_stristr	;wreg free
 12952  0010DE  D933               	call	PL2	;call to abstracted procedure
 12953  0010E0  E102               	bnz	u17325
 12954  0010E2  5026               	movf	?_stristr,w,c
 12955  0010E4  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12956  0010E6                     u17325:
 12957  0010E6  E110               	bnz	l13094
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;main.c: 886: bHex = 1;
 12961  0010E8  0E01               	movlw	1
 12962  0010EA  6FD3               	movwf	_bHex& (0+255),b
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;main.c: 887: writeEEPROM(0x06, 1);
 12966  0010EC  6A1A               	clrf	?_writeEEPROM+1,c
 12967  0010EE  0E06               	movlw	6
 12968  0010F0  6E19               	movwf	?_writeEEPROM,c
 12969  0010F2  0E01               	movlw	1
 12970  0010F4  6E1B               	movwf	?_writeEEPROM+2,c
 12971  0010F6  EC6D  F028         	call	_writeEEPROM	;wreg free
 12972                           
 12973                           ;main.c: 888: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 12974  0010FA  0E77               	movlw	high STR_108
 12975  0010FC  6E1B               	movwf	?_putsUSART+1,c
 12976  0010FE  0E27               	movlw	low STR_108
 12977  001100  6E1A               	movwf	?_putsUSART,c
 12978  001102  ECE6  F025         	call	_putsUSART	;wreg free
 12979                           
 12980                           ;main.c: 889: }
 12981  001106  D10F               	goto	l13158
 12982  001108                     l13094:
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;main.c: 890: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 12986  001108  0101               	movlb	1	; () banked
 12987  00110A  0E01               	movlw	high _cmdbuf
 12988  00110C  6E27               	movwf	?_stristr+1,c
 12989  00110E  0E20               	movlw	low _cmdbuf
 12990  001110  6E26               	movwf	?_stristr,c
 12991  001112  0E7F               	movlw	high STR_109
 12992  001114  6E29               	movwf	?_stristr+3,c
 12993  001116  0E06               	movlw	low STR_109
 12994  001118  6E28               	movwf	?_stristr+2,c
 12995  00111A  EC75  F023         	call	_stristr	;wreg free
 12996  00111E  D913               	call	PL2	;call to abstracted procedure
 12997  001120  E102               	bnz	u17335
 12998  001122  5026               	movf	?_stristr,w,c
 12999  001124  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 13000  001126                     u17335:
 13001  001126  E10F               	bnz	l13102
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;main.c: 891: bHex = 0;
 13005  001128  6BD3               	clrf	_bHex& (0+255),b
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;main.c: 892: writeEEPROM(0x06, 0);
 13009  00112A  6A1A               	clrf	?_writeEEPROM+1,c
 13010  00112C  0E06               	movlw	6
 13011  00112E  6E19               	movwf	?_writeEEPROM,c
 13012  001130  0E00               	movlw	0
 13013  001132  6A1B               	clrf	?_writeEEPROM+2,c
 13014  001134  EC6D  F028         	call	_writeEEPROM	;wreg free
 13015                           
 13016                           ;main.c: 893: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 13017  001138  0E77               	movlw	high STR_110
 13018  00113A  6E1B               	movwf	?_putsUSART+1,c
 13019  00113C  0EF6               	movlw	low STR_110
 13020  00113E  6E1A               	movwf	?_putsUSART,c
 13021  001140  ECE6  F025         	call	_putsUSART	;wreg free
 13022                           
 13023                           ;main.c: 894: } else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 13024  001144  D0F0               	goto	l13158
 13025  001146                     l13102:
 13026                           
 13027                           ; BSR set to: 0
 13028  001146  0101               	movlb	1	; () banked
 13029  001148  0E01               	movlw	high _cmdbuf
 13030  00114A  6E27               	movwf	?_stristr+1,c
 13031  00114C  0E20               	movlw	low _cmdbuf
 13032  00114E  6E26               	movwf	?_stristr,c
 13033  001150  0E7E               	movlw	high STR_111
 13034  001152  6E29               	movwf	?_stristr+3,c
 13035  001154  0E87               	movlw	low STR_111
 13036  001156  6E28               	movwf	?_stristr+2,c
 13037  001158  EC75  F023         	call	_stristr	;wreg free
 13038  00115C  5027               	movf	?_stristr+1,w,c
 13039  00115E  1026               	iorwf	?_stristr,w,c
 13040  001160  E025               	bz	l13114
 13041                           
 13042                           ;main.c: 895: strcpy(cmdbuf, cmdbuf + 10);
 13043  001162  0E01               	movlw	high _cmdbuf
 13044  001164  6E1A               	movwf	?_strcpy+1,c
 13045  001166  0E20               	movlw	low _cmdbuf
 13046  001168  6E19               	movwf	?_strcpy,c
 13047  00116A  0E2A               	movlw	low (_cmdbuf+10)
 13048  00116C  0100               	movlb	0	; () banked
 13049  00116E  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13050  001170  0E01               	movlw	high (_cmdbuf+10)
 13051  001172  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13052  001174  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13053  001178  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13054  00117C  EC29  F028         	call	_strcpy	;wreg free
 13055                           
 13056                           ; BSR set to: 0
 13057                           ;main.c: 896: rwtimeout = atoi(cmdbuf);
 13058  001180  0101               	movlb	1	; () banked
 13059  001182  0E01               	movlw	high _cmdbuf
 13060  001184  6E20               	movwf	?_atoi+1,c
 13061  001186  0E20               	movlw	low _cmdbuf
 13062  001188  6E1F               	movwf	?_atoi,c
 13063  00118A  EC6D  F01B         	call	_atoi	;wreg free
 13064  00118E  501F               	movf	?_atoi,w,c
 13065  001190  0100               	movlb	0	; () banked
 13066  001192  6FD9               	movwf	_rwtimeout& (0+255),b
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;main.c: 897: if (rwtimeout < 10u) {
 13070  001194  0E0A               	movlw	10
 13071  001196  61D9               	cpfslt	_rwtimeout& (0+255),b
 13072  001198  D001               	goto	l13112
 13073                           
 13074                           ; BSR set to: 0
 13075                           ;main.c: 898: rwtimeout = 10u;
 13076  00119A  6FD9               	movwf	_rwtimeout& (0+255),b
 13077  00119C                     l13112:
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;main.c: 899: }
 13081                           ;main.c: 900: writeEEPROM(0x09, rwtimeout);
 13082  00119C  6A1A               	clrf	?_writeEEPROM+1,c
 13083  00119E  0E09               	movlw	9
 13084  0011A0  6E19               	movwf	?_writeEEPROM,c
 13085  0011A2  C0D9  F01B         	movff	_rwtimeout,?_writeEEPROM+2
 13086  0011A6  EC6D  F028         	call	_writeEEPROM	;wreg free
 13087                           
 13088                           ;main.c: 901: } else if (0 != stristr(cmdbuf, "STARTIF ")) {
 13089  0011AA  D0BD               	goto	l13158
 13090  0011AC                     l13114:
 13091  0011AC  0101               	movlb	1	; () banked
 13092  0011AE  0E01               	movlw	high _cmdbuf
 13093  0011B0  6E27               	movwf	?_stristr+1,c
 13094  0011B2  0E20               	movlw	low _cmdbuf
 13095  0011B4  6E26               	movwf	?_stristr,c
 13096  0011B6  0E7E               	movlw	high STR_112
 13097  0011B8  6E29               	movwf	?_stristr+3,c
 13098  0011BA  0EBB               	movlw	low STR_112
 13099  0011BC  6E28               	movwf	?_stristr+2,c
 13100  0011BE  EC75  F023         	call	_stristr	;wreg free
 13101  0011C2  5027               	movf	?_stristr+1,w,c
 13102  0011C4  1026               	iorwf	?_stristr,w,c
 13103  0011C6  E005               	bz	l13118
 13104                           
 13105                           ;main.c: 902: strcpy(cmdbuf, cmdbuf + 8);
 13106  0011C8  0E01               	movlw	high _cmdbuf
 13107  0011CA  D8FE               	call	PL16	;call to abstracted procedure
 13108  0011CC  EC29  F028         	call	_strcpy	;wreg free
 13109                           
 13110                           ;main.c: 903: } else if (0 != stristr(cmdbuf, "MODE ")) {
 13111  0011D0  D0AA               	goto	l13158
 13112  0011D2                     l13118:
 13113  0011D2  0101               	movlb	1	; () banked
 13114  0011D4  0E01               	movlw	high _cmdbuf
 13115  0011D6  6E27               	movwf	?_stristr+1,c
 13116  0011D8  0E20               	movlw	low _cmdbuf
 13117  0011DA  6E26               	movwf	?_stristr,c
 13118  0011DC  0E7F               	movlw	high STR_113
 13119  0011DE  6E29               	movwf	?_stristr+3,c
 13120  0011E0  0E86               	movlw	low STR_113
 13121  0011E2  6E28               	movwf	?_stristr+2,c
 13122  0011E4  EC75  F023         	call	_stristr	;wreg free
 13123  0011E8  5027               	movf	?_stristr+1,w,c
 13124  0011EA  1026               	iorwf	?_stristr,w,c
 13125  0011EC  E05F               	bz	l13146
 13126                           
 13127                           ;main.c: 904: strcpy(cmdbuf, cmdbuf + 5);
 13128  0011EE  D8DE               	call	PL10	;call to abstracted procedure
 13129  0011F0  EC29  F028         	call	_strcpy	;wreg free
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;main.c: 905: if (0 != stristr(cmdbuf, "VERBOSE")) {
 13133  0011F4  0101               	movlb	1	; () banked
 13134  0011F6  0E01               	movlw	high _cmdbuf
 13135  0011F8  6E27               	movwf	?_stristr+1,c
 13136  0011FA  0E20               	movlw	low _cmdbuf
 13137  0011FC  6E26               	movwf	?_stristr,c
 13138  0011FE  0E7E               	movlw	high STR_114
 13139  001200  6E29               	movwf	?_stristr+3,c
 13140  001202  0EFE               	movlw	low STR_114
 13141  001204  6E28               	movwf	?_stristr+2,c
 13142  001206  EC75  F023         	call	_stristr	;wreg free
 13143  00120A  5027               	movf	?_stristr+1,w,c
 13144  00120C  1026               	iorwf	?_stristr,w,c
 13145  00120E  E010               	bz	l13130
 13146                           
 13147                           ;main.c: 906: mode = 0;
 13148  001210  0100               	movlb	0	; () banked
 13149  001212  6BD7               	clrf	_mode& (0+255),b
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;main.c: 907: writeEEPROM(0x03, 0);
 13153  001214  6A1A               	clrf	?_writeEEPROM+1,c
 13154  001216  0E03               	movlw	3
 13155  001218  6E19               	movwf	?_writeEEPROM,c
 13156  00121A  0E00               	movlw	0
 13157  00121C  6A1B               	clrf	?_writeEEPROM+2,c
 13158  00121E  EC6D  F028         	call	_writeEEPROM	;wreg free
 13159                           
 13160                           ;main.c: 908: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 13161  001222  0E7B               	movlw	high STR_115
 13162  001224  6E1B               	movwf	?_putsUSART+1,c
 13163  001226  0E48               	movlw	low STR_115
 13164  001228  6E1A               	movwf	?_putsUSART,c
 13165  00122A  ECE6  F025         	call	_putsUSART	;wreg free
 13166                           
 13167                           ;main.c: 909: } else if (0 != stristr(cmdbuf, "VSCP")) {
 13168  00122E  D07B               	goto	l13158
 13169  001230                     l13130:
 13170  001230  0101               	movlb	1	; () banked
 13171  001232  0E01               	movlw	high _cmdbuf
 13172  001234  6E27               	movwf	?_stristr+1,c
 13173  001236  0E20               	movlw	low _cmdbuf
 13174  001238  6E26               	movwf	?_stristr,c
 13175  00123A  0E7F               	movlw	high STR_116
 13176  00123C  6E29               	movwf	?_stristr+3,c
 13177  00123E  0EC1               	movlw	low STR_116
 13178  001240  6E28               	movwf	?_stristr+2,c
 13179  001242  EC75  F023         	call	_stristr	;wreg free
 13180  001246  5027               	movf	?_stristr+1,w,c
 13181  001248  1026               	iorwf	?_stristr,w,c
 13182  00124A  E011               	bz	l13138
 13183                           
 13184                           ;main.c: 910: mode = 1;
 13185  00124C  0E01               	movlw	1
 13186  00124E  0100               	movlb	0	; () banked
 13187  001250  6FD7               	movwf	_mode& (0+255),b
 13188                           
 13189                           ; BSR set to: 0
 13190                           ;main.c: 911: writeEEPROM(0x03, 1);
 13191  001252  6A1A               	clrf	?_writeEEPROM+1,c
 13192  001254  0E03               	movlw	3
 13193  001256  6E19               	movwf	?_writeEEPROM,c
 13194  001258  0E01               	movlw	1
 13195  00125A  6E1B               	movwf	?_writeEEPROM+2,c
 13196  00125C  EC6D  F028         	call	_writeEEPROM	;wreg free
 13197                           
 13198                           ;main.c: 912: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 13199  001260  0E7A               	movlw	high STR_117
 13200  001262  6E1B               	movwf	?_putsUSART+1,c
 13201  001264  0ECD               	movlw	low STR_117
 13202  001266  6E1A               	movwf	?_putsUSART,c
 13203  001268  ECE6  F025         	call	_putsUSART	;wreg free
 13204                           
 13205                           ;main.c: 913: } else if (0 != stristr(cmdbuf, "SLCAN")) {
 13206  00126C  D05C               	goto	l13158
 13207  00126E                     l13138:
 13208  00126E  0101               	movlb	1	; () banked
 13209  001270  0E01               	movlw	high _cmdbuf
 13210  001272  6E27               	movwf	?_stristr+1,c
 13211  001274  0E20               	movlw	low _cmdbuf
 13212  001276  6E26               	movwf	?_stristr,c
 13213  001278  0E7F               	movlw	high STR_118
 13214  00127A  6E29               	movwf	?_stristr+3,c
 13215  00127C  0E98               	movlw	low STR_118
 13216  00127E  6E28               	movwf	?_stristr+2,c
 13217  001280  EC75  F023         	call	_stristr	;wreg free
 13218  001284  5027               	movf	?_stristr+1,w,c
 13219  001286  1026               	iorwf	?_stristr,w,c
 13220  001288  E04E               	bz	l13158
 13221                           
 13222                           ;main.c: 914: mode = 2;
 13223  00128A  0E02               	movlw	2
 13224  00128C  0100               	movlb	0	; () banked
 13225  00128E  6FD7               	movwf	_mode& (0+255),b
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;main.c: 915: writeEEPROM(0x03, 2);
 13229  001290  6A1A               	clrf	?_writeEEPROM+1,c
 13230  001292  0E03               	movlw	3
 13231  001294  6E19               	movwf	?_writeEEPROM,c
 13232  001296  0E02               	movlw	2
 13233  001298  6E1B               	movwf	?_writeEEPROM+2,c
 13234  00129A  EC6D  F028         	call	_writeEEPROM	;wreg free
 13235                           
 13236                           ;main.c: 916: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 13237  00129E  0E7B               	movlw	high STR_119
 13238  0012A0  6E1B               	movwf	?_putsUSART+1,c
 13239  0012A2  0EB5               	movlw	low STR_119
 13240  0012A4  6E1A               	movwf	?_putsUSART,c
 13241  0012A6  ECE6  F025         	call	_putsUSART	;wreg free
 13242  0012AA  D03D               	goto	l13158
 13243  0012AC                     l13146:
 13244                           
 13245                           ;main.c: 919: else if (0 != stristr(cmdbuf, "FILTER ")) {
 13246  0012AC  0101               	movlb	1	; () banked
 13247  0012AE  0E01               	movlw	high _cmdbuf
 13248  0012B0  6E27               	movwf	?_stristr+1,c
 13249  0012B2  0E20               	movlw	low _cmdbuf
 13250  0012B4  6E26               	movwf	?_stristr,c
 13251  0012B6  0E7E               	movlw	high STR_120
 13252  0012B8  6E29               	movwf	?_stristr+3,c
 13253  0012BA  0EEE               	movlw	low STR_120
 13254  0012BC  6E28               	movwf	?_stristr+2,c
 13255  0012BE  EC75  F023         	call	_stristr	;wreg free
 13256  0012C2  5027               	movf	?_stristr+1,w,c
 13257  0012C4  1026               	iorwf	?_stristr,w,c
 13258  0012C6  E010               	bz	l13150
 13259                           
 13260                           ;main.c: 920: strcpy(cmdbuf, cmdbuf + 7);
 13261  0012C8  0E01               	movlw	high _cmdbuf
 13262  0012CA  6E1A               	movwf	?_strcpy+1,c
 13263  0012CC  0E20               	movlw	low _cmdbuf
 13264  0012CE  6E19               	movwf	?_strcpy,c
 13265  0012D0  0E27               	movlw	low (_cmdbuf+7)
 13266  0012D2  0100               	movlb	0	; () banked
 13267  0012D4  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13268  0012D6  0E01               	movlw	high (_cmdbuf+7)
 13269  0012D8  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13270  0012DA  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13271  0012DE  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13272  0012E2  EC29  F028         	call	_strcpy	;wreg free
 13273                           
 13274                           ;main.c: 921: }
 13275  0012E6  D01F               	goto	l13158
 13276  0012E8                     l13150:
 13277                           
 13278                           ;main.c: 922: else if (0 != stristr(cmdbuf, "MASK ")) {
 13279  0012E8  0101               	movlb	1	; () banked
 13280  0012EA  0E01               	movlw	high _cmdbuf
 13281  0012EC  6E27               	movwf	?_stristr+1,c
 13282  0012EE  0E20               	movlw	low _cmdbuf
 13283  0012F0  6E26               	movwf	?_stristr,c
 13284  0012F2  0E7F               	movlw	high STR_121
 13285  0012F4  6E29               	movwf	?_stristr+3,c
 13286  0012F6  0E8C               	movlw	low STR_121
 13287  0012F8  6E28               	movwf	?_stristr+2,c
 13288  0012FA  EC75  F023         	call	_stristr	;wreg free
 13289  0012FE  5027               	movf	?_stristr+1,w,c
 13290  001300  1026               	iorwf	?_stristr,w,c
 13291  001302  E004               	bz	l13154
 13292                           
 13293                           ;main.c: 923: strcpy(cmdbuf, cmdbuf + 5);
 13294  001304  D853               	call	PL10	;call to abstracted procedure
 13295  001306  EC29  F028         	call	_strcpy	;wreg free
 13296                           
 13297                           ;main.c: 924: } else {
 13298  00130A  D00D               	goto	l13158
 13299  00130C                     l13154:
 13300                           
 13301                           ;main.c: 925: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 13302  00130C  0E7A               	movlw	high STR_122
 13303  00130E  6E1B               	movwf	?_putsUSART+1,c
 13304  001310  0E6A               	movlw	low STR_122
 13305  001312  6E1A               	movwf	?_putsUSART,c
 13306  001314  ECE6  F025         	call	_putsUSART	;wreg free
 13307  001318  D006               	goto	l13158
 13308  00131A                     l13156:
 13309                           
 13310                           ; BSR set to: 0
 13311                           ;main.c: 929: putsUSART((char *) "-ERROR - Unknown command\r\n");
 13312  00131A  0E7B               	movlw	high STR_123
 13313  00131C  6E1B               	movwf	?_putsUSART+1,c
 13314  00131E  0E7F               	movlw	low STR_123
 13315  001320  6E1A               	movwf	?_putsUSART,c
 13316  001322  ECE6  F025         	call	_putsUSART	;wreg free
 13317  001326                     l13158:
 13318                           
 13319                           ;main.c: 930: }
 13320                           ;main.c: 932: memset(cmdbuf, 0, sizeof ( cmdbuf));
 13321  001326  0101               	movlb	1	; () banked
 13322  001328  0E01               	movlw	high _cmdbuf
 13323  00132A  6E1A               	movwf	?_memset+1,c
 13324  00132C  0E20               	movlw	low _cmdbuf
 13325  00132E  6E19               	movwf	?_memset,c
 13326  001330  6A1C               	clrf	?_memset+3,c
 13327  001332  6A1B               	clrf	?_memset+2,c
 13328  001334  6A1E               	clrf	?_memset+5,c
 13329  001336  0E50               	movlw	80
 13330  001338  6E1D               	movwf	?_memset+4,c
 13331  00133A  EC57  F028         	call	_memset	;wreg free
 13332                           
 13333                           ;main.c: 933: pos = 0;
 13334  00133E  0100               	movlb	0	; () banked
 13335  001340  6BD8               	clrf	_pos& (0+255),b
 13336  001342                     l13162:
 13337                           
 13338                           ;main.c: 934: }
 13339                           ;main.c: 935: }
 13340                           ;main.c: 938: (INTCONbits.GIE = 1);
 13341  001342  8EF2               	bsf	intcon,7,c	;volatile
 13342  001344                     l498:
 13343  001344  0012               	return	
 13344  001346                     __end_of_doModeVerbose:
 13345                           	opt stack 0
 13346  001346                     PL2:
 13347                           	opt stack 21
 13348  001346  0E20               	movlw	low _cmdbuf
 13349  001348  0100               	movlb	0	; () banked
 13350  00134A  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13351  00134C  0E01               	movlw	high _cmdbuf
 13352  00134E  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13353  001350  1827               	xorwf	?_stristr+1,w,c
 13354  001352  0012               	return	
 13355  001354                     __end_ofPL2:
 13356                           	opt stack 0
 13357  001354                     PL6:
 13358                           	opt stack 21
 13359  001354  6A26               	clrf	?_strtok+1,c
 13360  001356  6A25               	clrf	?_strtok,c
 13361  001358  0E7F               	movlw	high STR_29
 13362  00135A  6E28               	movwf	?_strtok+3,c
 13363  00135C  0EF5               	movlw	low STR_29
 13364  00135E  6E27               	movwf	?_strtok+2,c
 13365  001360  0012               	return	
 13366  001362                     __end_ofPL6:
 13367                           	opt stack 0
 13368  001362                     PL8:
 13369                           	opt stack 21
 13370  001362  6BBA               	clrf	(??_doModeVerbose+9)& (0+255),b
 13371  001364  6BBB               	clrf	(??_doModeVerbose+10)& (0+255),b
 13372  001366  6BBC               	clrf	(??_doModeVerbose+11)& (0+255),b
 13373  001368  0E1A               	movlw	26
 13374  00136A                     u17215:
 13375  00136A  90D8               	bcf	status,0,c
 13376  00136C  37B9               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 13377  00136E  37BA               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 13378  001370  37BB               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 13379  001372  37BC               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 13380  001374  2EE8               	decfsz	wreg,f,c
 13381  001376  D7F9               	goto	u17215
 13382  001378  51B5               	movf	(??_doModeVerbose+4)& (0+255),w,b
 13383  00137A  11B9               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 13384  00137C  6FBD               	movwf	(??_doModeVerbose+12)& (0+255),b
 13385  00137E  51B6               	movf	(??_doModeVerbose+5)& (0+255),w,b
 13386  001380  11BA               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 13387  001382  6FBE               	movwf	(??_doModeVerbose+13)& (0+255),b
 13388  001384  51B7               	movf	(??_doModeVerbose+6)& (0+255),w,b
 13389  001386  11BB               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 13390  001388  6FBF               	movwf	(??_doModeVerbose+14)& (0+255),b
 13391  00138A  51B8               	movf	(??_doModeVerbose+7)& (0+255),w,b
 13392  00138C  11BC               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 13393  00138E  6FC0               	movwf	(??_doModeVerbose+15)& (0+255),b
 13394  001390  51B1               	movf	??_doModeVerbose& (0+255),w,b
 13395  001392  11BD               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 13396  001394  6FC1               	movwf	(??_doModeVerbose+16)& (0+255),b
 13397  001396  51B2               	movf	(??_doModeVerbose+1)& (0+255),w,b
 13398  001398  11BE               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 13399  00139A  6FC2               	movwf	(??_doModeVerbose+17)& (0+255),b
 13400  00139C  51B3               	movf	(??_doModeVerbose+2)& (0+255),w,b
 13401  00139E  11BF               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 13402  0013A0  6FC3               	movwf	(??_doModeVerbose+18)& (0+255),b
 13403  0013A2  51B4               	movf	(??_doModeVerbose+3)& (0+255),w,b
 13404  0013A4  11C0               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 13405  0013A6  6FC4               	movwf	(??_doModeVerbose+19)& (0+255),b
 13406  0013A8  0102               	movlb	2	; () banked
 13407  0013AA  0012               	return	
 13408  0013AC                     __end_ofPL8:
 13409                           	opt stack 0
 13410  0013AC                     PL10:
 13411                           	opt stack 21
 13412  0013AC  0E01               	movlw	high _cmdbuf
 13413  0013AE  6E1A               	movwf	?_strcpy+1,c
 13414  0013B0  0E20               	movlw	low _cmdbuf
 13415  0013B2  6E19               	movwf	?_strcpy,c
 13416  0013B4  0E25               	movlw	low (_cmdbuf+5)
 13417  0013B6  0100               	movlb	0	; () banked
 13418  0013B8  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13419  0013BA  0E01               	movlw	high (_cmdbuf+5)
 13420  0013BC  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13421  0013BE  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13422  0013C2  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13423  0013C6  0012               	return	
 13424  0013C8                     __end_ofPL10:
 13425                           	opt stack 0
 13426  0013C8                     PL16:
 13427                           	opt stack 21
 13428  0013C8  6E1A               	movwf	?_strcpy+1,c
 13429  0013CA  0E20               	movlw	low _cmdbuf
 13430  0013CC  6E19               	movwf	?_strcpy,c
 13431  0013CE  0E28               	movlw	low (_cmdbuf+8)
 13432  0013D0  0100               	movlb	0	; () banked
 13433  0013D2  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13434  0013D4  0E01               	movlw	high (_cmdbuf+8)
 13435  0013D6  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13436  0013D8  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13437  0013DC  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13438  0013E0  0012               	return	
 13439  0013E2                     __end_ofPL16:
 13440                           	opt stack 0
 13441  0013E2                     PL30:
 13442                           	opt stack 21
 13443  0013E2  0101               	movlb	1	; () banked
 13444  0013E4  0E01               	movlw	high _cmdbuf
 13445  0013E6  6E26               	movwf	?_strtok+1,c
 13446  0013E8  0E20               	movlw	low _cmdbuf
 13447  0013EA  6E25               	movwf	?_strtok,c
 13448  0013EC  0E7F               	movlw	high STR_29
 13449  0013EE  6E28               	movwf	?_strtok+3,c
 13450  0013F0  0EF5               	movlw	low STR_29
 13451  0013F2  6E27               	movwf	?_strtok+2,c
 13452  0013F4  0012               	return	
 13453  0013F6                     __end_ofPL30:
 13454                           	opt stack 0
 13455  0013F6                     PL34:
 13456                           	opt stack 21
 13457  0013F6  0E01               	movlw	high _cmdbuf
 13458  0013F8  6E26               	movwf	?_strtok+1,c
 13459  0013FA  0E20               	movlw	low _cmdbuf
 13460  0013FC  6E25               	movwf	?_strtok,c
 13461  0013FE  0E7F               	movlw	high (STR_247+5)
 13462  001400  6E28               	movwf	?_strtok+3,c
 13463  001402  0E2B               	movlw	low (STR_247+5)
 13464  001404  6E27               	movwf	?_strtok+2,c
 13465  001406  0012               	return	
 13466  001408                     __end_ofPL34:
 13467                           	opt stack 0
 13468  001408                     PL36:
 13469                           	opt stack 21
 13470  001408  6A26               	clrf	?_strtok+1,c
 13471  00140A  6A25               	clrf	?_strtok,c
 13472  00140C  0E7F               	movlw	high (STR_247+5)
 13473  00140E  6E28               	movwf	?_strtok+3,c
 13474  001410  0E2B               	movlw	low (STR_247+5)
 13475  001412  6E27               	movwf	?_strtok+2,c
 13476  001414  0012               	return	
 13477  001416                     __end_ofPL36:
 13478                           	opt stack 0
 13479  001416                     PL40:
 13480                           	opt stack 21
 13481  001416  0100               	movlb	0	; () banked
 13482  001418  6BB2               	clrf	(??_doModeVerbose+1)& (0+255),b
 13483  00141A  6BB3               	clrf	(??_doModeVerbose+2)& (0+255),b
 13484  00141C  6BB4               	clrf	(??_doModeVerbose+3)& (0+255),b
 13485  00141E  C0B3  F0B4         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 13486  001422  C0B2  F0B3         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 13487  001426  C0B1  F0B2         	movff	??_doModeVerbose,??_doModeVerbose+1
 13488  00142A  6BB1               	clrf	??_doModeVerbose& (0+255),b
 13489  00142C  0102               	movlb	2	; () banked
 13490  00142E  0012               	return	
 13491  001430                     __end_ofPL40:
 13492                           	opt stack 0
 13493  001430                     PL42:
 13494                           	opt stack 21
 13495  001430  0102               	movlb	2	; () banked
 13496  001432  51B0               	movf	doModeVerbose@i_1118& (0+255),w,b
 13497  001434  C2AE  F0B1         	movff	doModeVerbose@reg,??_doModeVerbose
 13498  001438  0100               	movlb	0	; () banked
 13499  00143A  6BB2               	clrf	(??_doModeVerbose+1)& (0+255),b
 13500  00143C  27B1               	addwf	??_doModeVerbose& (0+255),f,b
 13501  00143E  0E00               	movlw	0
 13502  001440  23B2               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 13503  001442  51B1               	movf	??_doModeVerbose& (0+255),w,b
 13504  001444  6F64               	movwf	(?_sprintf+4)& (0+255),b
 13505  001446  6B65               	clrf	(?_sprintf+5)& (0+255),b
 13506  001448  0012               	return	
 13507  00144A                     __end_ofPL42:
 13508                           	opt stack 0
 13509  00144A                     PL52:
 13510                           	opt stack 21
 13511  00144A  6E19               	movwf	?__CANIDToRegs,c
 13512  00144C  C2A3  F01B         	movff	doModeVerbose@id_1227,?__CANIDToRegs+2
 13513  001450  C2A4  F01C         	movff	doModeVerbose@id_1227+1,?__CANIDToRegs+3
 13514  001454  C2A5  F01D         	movff	doModeVerbose@id_1227+2,?__CANIDToRegs+4
 13515  001458  C2A6  F01E         	movff	doModeVerbose@id_1227+3,?__CANIDToRegs+5
 13516  00145C  0E01               	movlw	1
 13517  00145E  6E1F               	movwf	?__CANIDToRegs+6,c
 13518  001460  0C01               	retlw	1
 13519  001462                     __end_ofPL52:
 13520                           	opt stack 0
 13521  001462                     PL58:
 13522                           	opt stack 21
 13523  001462  0100               	movlb	0	; () banked
 13524  001464  6FB6               	movwf	(??_doModeVerbose+5)& (0+255),b
 13525  001466  6BB7               	clrf	(??_doModeVerbose+6)& (0+255),b
 13526  001468  6BB8               	clrf	(??_doModeVerbose+7)& (0+255),b
 13527  00146A  C0B6  F0B8         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 13528  00146E  C0B5  F0B7         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 13529  001472  6BB6               	clrf	(??_doModeVerbose+5)& (0+255),b
 13530  001474  6BB5               	clrf	(??_doModeVerbose+4)& (0+255),b
 13531  001476  0012               	return	
 13532  001478                     __end_ofPL58:
 13533                           	opt stack 0
 13534                           tblptru	equ	0xFF8
 13535                           tblptrh	equ	0xFF7
 13536                           tblptrl	equ	0xFF6
 13537                           tablat	equ	0xFF5
 13538                           prodh	equ	0xFF4
 13539                           prodl	equ	0xFF3
 13540                           intcon	equ	0xFF2
 13541                           indf0	equ	0xFEF
 13542                           postinc0	equ	0xFEE
 13543                           fsr0h	equ	0xFEA
 13544                           fsr0l	equ	0xFE9
 13545                           wreg	equ	0xFE8
 13546                           indf1	equ	0xFE7
 13547                           postinc1	equ	0xFE6
 13548                           postdec1	equ	0xFE5
 13549                           fsr1h	equ	0xFE2
 13550                           fsr1l	equ	0xFE1
 13551                           indf2	equ	0xFDF
 13552                           postinc2	equ	0xFDE
 13553                           postdec2	equ	0xFDD
 13554                           plusw2	equ	0xFDB
 13555                           fsr2h	equ	0xFDA
 13556                           fsr2l	equ	0xFD9
 13557                           status	equ	0xFD8
 13558                           
 13559 ;; *************** function _setFilter *****************
 13560 ;; Defined at:
 13561 ;;		line 2393 in file "main.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;  filter          1    wreg     unsigned char 
 13564 ;;  val             4   24[COMRAM] unsigned long 
 13565 ;; Auto vars:     Size  Location     Type
 13566 ;;  filter          1   34[COMRAM] unsigned char 
 13567 ;;  eidl            1   38[COMRAM] unsigned char 
 13568 ;;  eidh            1   37[COMRAM] unsigned char 
 13569 ;;  sidl            1   36[COMRAM] unsigned char 
 13570 ;;  sidh            1   35[COMRAM] unsigned char 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;		None               void
 13573 ;; Registers used:
 13574 ;;		wreg, status,2, status,0
 13575 ;; Tracked objects:
 13576 ;;		On entry : F/2
 13577 ;;		On exit  : F/2
 13578 ;;		Unchanged: F/0
 13579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13580 ;;      Params:         4       0       0       0       0       0       0
 13581 ;;      Locals:         5       0       0       0       0       0       0
 13582 ;;      Temps:          6       0       0       0       0       0       0
 13583 ;;      Totals:        15       0       0       0       0       0       0
 13584 ;;Total ram usage:       15 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    2
 13587 ;; This function calls:
 13588 ;;		Nothing
 13589 ;; This function is called by:
 13590 ;;		_doModeVerbose
 13591 ;; This function uses a non-reentrant model
 13592 ;;
 13593                           
 13594                           	psect	text20
 13595  00267A                     __ptext20:
 13596                           	opt stack 0
 13597  00267A                     _setFilter:
 13598                           	opt stack 27
 13599                           
 13600                           ;incstack = 0
 13601                           ;incstack = 0
 13602                           ;setFilter@filter stored from wreg
 13603  00267A  CFE8 F023          	movff	wreg,setFilter@filter
 13604                           
 13605                           ; BSR set to: 2
 13606                           ;main.c: 2394: uint8_t sidh = (long) val >> 21L;
 13607  00267E  0E15               	movlw	21
 13608  002680  6E1D               	movwf	??_setFilter& (0+255),c
 13609  002682  C019  F01E         	movff	setFilter@val,??_setFilter+1
 13610  002686  C01A  F01F         	movff	setFilter@val+1,??_setFilter+2
 13611  00268A  C01B  F020         	movff	setFilter@val+2,??_setFilter+3
 13612  00268E  C01C  F021         	movff	setFilter@val+3,??_setFilter+4
 13613  002692                     u14625:
 13614  002692  661D               	tstfsz	??_setFilter,c
 13615  002694  D001               	goto	u14626
 13616  002696  D007               	goto	u14627
 13617  002698                     u14626:
 13618  002698  3421               	rlcf	??_setFilter+4,w,c
 13619  00269A  3221               	rrcf	??_setFilter+4,f,c
 13620  00269C  3220               	rrcf	??_setFilter+3,f,c
 13621  00269E  321F               	rrcf	??_setFilter+2,f,c
 13622  0026A0  321E               	rrcf	??_setFilter+1,f,c
 13623  0026A2  2E1D               	decfsz	??_setFilter,f,c
 13624  0026A4  D7F6               	goto	u14625
 13625  0026A6                     u14627:
 13626  0026A6  501E               	movf	??_setFilter+1,w,c
 13627  0026A8  6E24               	movwf	setFilter@sidh,c
 13628                           
 13629                           ;main.c: 2395: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 13630                           ;main.c: 2396: ((long) (val) & 0x03L) |
 13631                           ;main.c: 2397: 0x08;
 13632  0026AA  C019  F01D         	movff	setFilter@val,??_setFilter
 13633  0026AE  0E03               	movlw	3
 13634  0026B0  161D               	andwf	??_setFilter,f,c
 13635  0026B2  0E0D               	movlw	13
 13636  0026B4  6E1E               	movwf	(??_setFilter+1)& (0+255),c
 13637  0026B6  C019  F01F         	movff	setFilter@val,??_setFilter+2
 13638  0026BA  C01A  F020         	movff	setFilter@val+1,??_setFilter+3
 13639  0026BE  C01B  F021         	movff	setFilter@val+2,??_setFilter+4
 13640  0026C2  C01C  F022         	movff	setFilter@val+3,??_setFilter+5
 13641  0026C6                     u14635:
 13642  0026C6  661E               	tstfsz	??_setFilter+1,c
 13643  0026C8  D001               	goto	u14636
 13644  0026CA  D007               	goto	u14637
 13645  0026CC                     u14636:
 13646  0026CC  3422               	rlcf	??_setFilter+5,w,c
 13647  0026CE  3222               	rrcf	??_setFilter+5,f,c
 13648  0026D0  3221               	rrcf	??_setFilter+4,f,c
 13649  0026D2  3220               	rrcf	??_setFilter+3,f,c
 13650  0026D4  321F               	rrcf	??_setFilter+2,f,c
 13651  0026D6  2E1E               	decfsz	??_setFilter+1,f,c
 13652  0026D8  D7F6               	goto	u14635
 13653  0026DA                     u14637:
 13654  0026DA  501F               	movf	??_setFilter+2,w,c
 13655  0026DC  0BE0               	andlw	224
 13656  0026DE  101D               	iorwf	??_setFilter,w,c
 13657  0026E0  0908               	iorlw	8
 13658  0026E2  6E25               	movwf	setFilter@sidl,c
 13659                           
 13660                           ; BSR set to: 2
 13661                           ;main.c: 2398: uint8_t eidh = (long) val >> 8L;
 13662  0026E4  C01A  F026         	movff	setFilter@val+1,setFilter@eidh
 13663                           
 13664                           ; BSR set to: 2
 13665                           ;main.c: 2399: uint8_t eidl = val;
 13666  0026E8  C019  F027         	movff	setFilter@val,setFilter@eidl
 13667                           
 13668                           ;main.c: 2401: switch (filter) {
 13669  0026EC  D090               	goto	l11516
 13670  0026EE                     l1138:
 13671                           
 13672                           ; BSR set to: 2
 13673                           ;main.c: 2404: RXF0SIDH = sidh;
 13674  0026EE  C024  FF00         	movff	setFilter@sidh,3840	;volatile
 13675                           
 13676                           ;main.c: 2405: RXF0SIDL = sidl;
 13677  0026F2  C025  FF01         	movff	setFilter@sidl,3841	;volatile
 13678                           
 13679                           ;main.c: 2406: RXF0EIDH = eidh;
 13680  0026F6  C026  FF02         	movff	setFilter@eidh,3842	;volatile
 13681                           
 13682                           ;main.c: 2407: RXF0EIDL = eidl;
 13683  0026FA  C027  FF03         	movff	setFilter@eidl,3843	;volatile
 13684                           
 13685                           ;main.c: 2408: break;
 13686  0026FE  D0AA               	goto	l1155
 13687  002700                     l1140:
 13688                           
 13689                           ; BSR set to: 2
 13690                           ;main.c: 2411: RXF1SIDH = sidh;
 13691  002700  C024  FF04         	movff	setFilter@sidh,3844	;volatile
 13692                           
 13693                           ;main.c: 2412: RXF1SIDL = sidl;
 13694  002704  C025  FF05         	movff	setFilter@sidl,3845	;volatile
 13695                           
 13696                           ;main.c: 2413: RXF1EIDH = eidh;
 13697  002708  C026  FF06         	movff	setFilter@eidh,3846	;volatile
 13698                           
 13699                           ;main.c: 2414: RXF1EIDL = eidl;
 13700  00270C  C027  FF07         	movff	setFilter@eidl,3847	;volatile
 13701                           
 13702                           ;main.c: 2415: break;
 13703  002710  D0A1               	goto	l1155
 13704  002712                     l1141:
 13705                           
 13706                           ; BSR set to: 2
 13707                           ;main.c: 2418: RXF2SIDH = sidh;
 13708  002712  C024  FF08         	movff	setFilter@sidh,3848	;volatile
 13709                           
 13710                           ;main.c: 2419: RXF2SIDL = sidl;
 13711  002716  C025  FF09         	movff	setFilter@sidl,3849	;volatile
 13712                           
 13713                           ;main.c: 2420: RXF2EIDH = eidh;
 13714  00271A  C026  FF0A         	movff	setFilter@eidh,3850	;volatile
 13715                           
 13716                           ;main.c: 2421: RXF2EIDL = eidl;
 13717  00271E  C027  FF0B         	movff	setFilter@eidl,3851	;volatile
 13718                           
 13719                           ;main.c: 2422: break;
 13720  002722  D098               	goto	l1155
 13721  002724                     l1142:
 13722                           
 13723                           ; BSR set to: 2
 13724                           ;main.c: 2425: RXF3SIDH = sidh;
 13725  002724  C024  FF0C         	movff	setFilter@sidh,3852	;volatile
 13726                           
 13727                           ;main.c: 2426: RXF3SIDL = sidl;
 13728  002728  C025  FF0D         	movff	setFilter@sidl,3853	;volatile
 13729                           
 13730                           ;main.c: 2427: RXF3EIDH = eidh;
 13731  00272C  C026  FF0E         	movff	setFilter@eidh,3854	;volatile
 13732                           
 13733                           ;main.c: 2428: RXF3EIDL = eidl;
 13734  002730  C027  FF0F         	movff	setFilter@eidl,3855	;volatile
 13735                           
 13736                           ;main.c: 2429: break;
 13737  002734  D08F               	goto	l1155
 13738  002736                     l1143:
 13739                           
 13740                           ; BSR set to: 2
 13741                           ;main.c: 2432: RXF4SIDH = sidh;
 13742  002736  C024  FF10         	movff	setFilter@sidh,3856	;volatile
 13743                           
 13744                           ;main.c: 2433: RXF4SIDL = sidl;
 13745  00273A  C025  FF11         	movff	setFilter@sidl,3857	;volatile
 13746                           
 13747                           ;main.c: 2434: RXF4EIDH = eidh;
 13748  00273E  C026  FF12         	movff	setFilter@eidh,3858	;volatile
 13749                           
 13750                           ;main.c: 2435: RXF4EIDL = eidl;
 13751  002742  C027  FF13         	movff	setFilter@eidl,3859	;volatile
 13752                           
 13753                           ;main.c: 2436: break;
 13754  002746  D086               	goto	l1155
 13755  002748                     l1144:
 13756                           
 13757                           ; BSR set to: 2
 13758                           ;main.c: 2439: RXF5SIDH = sidh;
 13759  002748  C024  FF14         	movff	setFilter@sidh,3860	;volatile
 13760                           
 13761                           ;main.c: 2440: RXF5SIDL = sidl;
 13762  00274C  C025  FF15         	movff	setFilter@sidl,3861	;volatile
 13763                           
 13764                           ;main.c: 2441: RXF5EIDH = eidh;
 13765  002750  C026  FF16         	movff	setFilter@eidh,3862	;volatile
 13766                           
 13767                           ;main.c: 2442: RXF5EIDL = eidl;
 13768  002754  C027  FF17         	movff	setFilter@eidl,3863	;volatile
 13769                           
 13770                           ;main.c: 2443: break;
 13771  002758  D07D               	goto	l1155
 13772  00275A                     l1145:
 13773                           
 13774                           ; BSR set to: 2
 13775                           ;main.c: 2446: RXF6SIDH = sidh;
 13776  00275A  C024  FD60         	movff	setFilter@sidh,3424	;volatile
 13777                           
 13778                           ;main.c: 2447: RXF6SIDL = sidl;
 13779  00275E  C025  FD61         	movff	setFilter@sidl,3425	;volatile
 13780                           
 13781                           ;main.c: 2448: RXF6EIDH = eidh;
 13782  002762  C026  FD62         	movff	setFilter@eidh,3426	;volatile
 13783                           
 13784                           ;main.c: 2449: RXF6EIDL = eidl;
 13785  002766  C027  FD63         	movff	setFilter@eidl,3427	;volatile
 13786                           
 13787                           ;main.c: 2450: break;
 13788  00276A  D074               	goto	l1155
 13789  00276C                     l1146:
 13790                           
 13791                           ; BSR set to: 2
 13792                           ;main.c: 2453: RXF7SIDH = sidh;
 13793  00276C  C024  FD64         	movff	setFilter@sidh,3428	;volatile
 13794                           
 13795                           ;main.c: 2454: RXF7SIDL = sidl;
 13796  002770  C025  FD65         	movff	setFilter@sidl,3429	;volatile
 13797                           
 13798                           ;main.c: 2455: RXF7EIDH = eidh;
 13799  002774  C026  FD66         	movff	setFilter@eidh,3430	;volatile
 13800                           
 13801                           ;main.c: 2456: RXF7EIDL = eidl;
 13802  002778  C027  FD67         	movff	setFilter@eidl,3431	;volatile
 13803                           
 13804                           ;main.c: 2457: break;
 13805  00277C  D06B               	goto	l1155
 13806  00277E                     l1147:
 13807                           
 13808                           ; BSR set to: 2
 13809                           ;main.c: 2460: RXF8SIDH = sidh;
 13810  00277E  C024  FD68         	movff	setFilter@sidh,3432	;volatile
 13811                           
 13812                           ;main.c: 2461: RXF8SIDL = sidl;
 13813  002782  C025  FD69         	movff	setFilter@sidl,3433	;volatile
 13814                           
 13815                           ;main.c: 2462: RXF8EIDH = eidh;
 13816  002786  C026  FD6A         	movff	setFilter@eidh,3434	;volatile
 13817                           
 13818                           ;main.c: 2463: RXF8EIDL = eidl;
 13819  00278A  C027  FD6B         	movff	setFilter@eidl,3435	;volatile
 13820                           
 13821                           ;main.c: 2464: break;
 13822  00278E  D062               	goto	l1155
 13823  002790                     l1148:
 13824                           
 13825                           ; BSR set to: 2
 13826                           ;main.c: 2467: RXF9SIDH = sidh;
 13827  002790  C024  FD70         	movff	setFilter@sidh,3440	;volatile
 13828                           
 13829                           ;main.c: 2468: RXF9SIDL = sidl;
 13830  002794  C025  FD71         	movff	setFilter@sidl,3441	;volatile
 13831                           
 13832                           ;main.c: 2469: RXF9EIDH = eidh;
 13833  002798  C026  FD72         	movff	setFilter@eidh,3442	;volatile
 13834                           
 13835                           ;main.c: 2470: RXF9EIDL = eidl;
 13836  00279C  C027  FD73         	movff	setFilter@eidl,3443	;volatile
 13837                           
 13838                           ;main.c: 2471: break;
 13839  0027A0  D059               	goto	l1155
 13840  0027A2                     l1149:
 13841                           
 13842                           ; BSR set to: 2
 13843                           ;main.c: 2474: RXF10SIDH = sidh;
 13844  0027A2  C024  FD74         	movff	setFilter@sidh,3444	;volatile
 13845                           
 13846                           ;main.c: 2475: RXF10SIDL = sidl;
 13847  0027A6  C025  FD75         	movff	setFilter@sidl,3445	;volatile
 13848                           
 13849                           ;main.c: 2476: RXF10EIDH = eidh;
 13850  0027AA  C026  FD76         	movff	setFilter@eidh,3446	;volatile
 13851                           
 13852                           ;main.c: 2477: RXF10EIDL = eidl;
 13853  0027AE  C027  FD77         	movff	setFilter@eidl,3447	;volatile
 13854                           
 13855                           ;main.c: 2478: break;
 13856  0027B2  D050               	goto	l1155
 13857  0027B4                     l1150:
 13858                           
 13859                           ; BSR set to: 2
 13860                           ;main.c: 2481: RXF11SIDH = sidh;
 13861  0027B4  C024  FD78         	movff	setFilter@sidh,3448	;volatile
 13862                           
 13863                           ;main.c: 2482: RXF11SIDL = sidl;
 13864  0027B8  C025  FD79         	movff	setFilter@sidl,3449	;volatile
 13865                           
 13866                           ;main.c: 2483: RXF11EIDH = eidh;
 13867  0027BC  C026  FD7A         	movff	setFilter@eidh,3450	;volatile
 13868                           
 13869                           ;main.c: 2484: RXF11EIDL = eidl;
 13870  0027C0  C027  FD7B         	movff	setFilter@eidl,3451	;volatile
 13871                           
 13872                           ;main.c: 2485: break;
 13873  0027C4  D047               	goto	l1155
 13874  0027C6                     l1151:
 13875                           
 13876                           ; BSR set to: 2
 13877                           ;main.c: 2488: RXF12SIDH = sidh;
 13878  0027C6  C024  FD80         	movff	setFilter@sidh,3456	;volatile
 13879                           
 13880                           ;main.c: 2489: RXF12SIDL = sidl;
 13881  0027CA  C025  FD81         	movff	setFilter@sidl,3457	;volatile
 13882                           
 13883                           ;main.c: 2490: RXF12EIDH = eidh;
 13884  0027CE  C026  FD82         	movff	setFilter@eidh,3458	;volatile
 13885                           
 13886                           ;main.c: 2491: RXF12EIDL = eidl;
 13887  0027D2  C027  FD83         	movff	setFilter@eidl,3459	;volatile
 13888                           
 13889                           ;main.c: 2492: break;
 13890  0027D6  D03E               	goto	l1155
 13891  0027D8                     l1152:
 13892                           
 13893                           ; BSR set to: 2
 13894                           ;main.c: 2495: RXF13SIDH = sidh;
 13895  0027D8  C024  FD84         	movff	setFilter@sidh,3460	;volatile
 13896                           
 13897                           ;main.c: 2496: RXF13SIDL = sidl;
 13898  0027DC  C025  FD85         	movff	setFilter@sidl,3461	;volatile
 13899                           
 13900                           ;main.c: 2497: RXF13EIDH = eidh;
 13901  0027E0  C026  FD86         	movff	setFilter@eidh,3462	;volatile
 13902                           
 13903                           ;main.c: 2498: RXF13EIDL = eidl;
 13904  0027E4  C027  FD87         	movff	setFilter@eidl,3463	;volatile
 13905                           
 13906                           ;main.c: 2499: break;
 13907  0027E8  D035               	goto	l1155
 13908  0027EA                     l1153:
 13909                           
 13910                           ; BSR set to: 2
 13911                           ;main.c: 2502: RXF14SIDH = sidh;
 13912  0027EA  C024  FD88         	movff	setFilter@sidh,3464	;volatile
 13913                           
 13914                           ;main.c: 2503: RXF14SIDL = sidl;
 13915  0027EE  C025  FD89         	movff	setFilter@sidl,3465	;volatile
 13916                           
 13917                           ;main.c: 2504: RXF14EIDH = eidh;
 13918  0027F2  C026  FD8A         	movff	setFilter@eidh,3466	;volatile
 13919                           
 13920                           ;main.c: 2505: RXF14EIDL = eidl;
 13921  0027F6  C027  FD8B         	movff	setFilter@eidl,3467	;volatile
 13922                           
 13923                           ;main.c: 2506: break;
 13924  0027FA  D02C               	goto	l1155
 13925  0027FC                     l1154:
 13926                           
 13927                           ; BSR set to: 2
 13928                           ;main.c: 2509: RXF15SIDH = sidh;
 13929  0027FC  C024  FD90         	movff	setFilter@sidh,3472	;volatile
 13930                           
 13931                           ;main.c: 2510: RXF15SIDL = sidl;
 13932  002800  C025  FD91         	movff	setFilter@sidl,3473	;volatile
 13933                           
 13934                           ;main.c: 2511: RXF15EIDH = eidh;
 13935  002804  C026  FD92         	movff	setFilter@eidh,3474	;volatile
 13936                           
 13937                           ;main.c: 2512: RXF15EIDL = eidl;
 13938  002808  C027  FD93         	movff	setFilter@eidl,3475	;volatile
 13939                           
 13940                           ;main.c: 2513: break;
 13941  00280C  D023               	goto	l1155
 13942  00280E                     l11516:
 13943                           
 13944                           ; BSR set to: 2
 13945  00280E  5023               	movf	setFilter@filter,w,c
 13946                           
 13947                           ; Switch size 1, requested type "space"
 13948                           ; Number of cases is 16, Range of values is 0 to 15
 13949                           ; switch strategies available:
 13950                           ; Name         Instructions Cycles
 13951                           ; simple_byte           49    25 (average)
 13952                           ;	Chosen strategy is simple_byte
 13953  002810  E101 D76D          	bz	l1138
 13954  002814  0A01               	xorlw	1	; case 1
 13955  002816  E101 D773          	bz	l1140
 13956  00281A  0A03               	xorlw	3	; case 2
 13957  00281C  E101 D779          	bz	l1141
 13958  002820  0A01               	xorlw	1	; case 3
 13959  002822  E080               	bz	l1142
 13960  002824  0A07               	xorlw	7	; case 4
 13961  002826  E087               	bz	l1143
 13962  002828  0A01               	xorlw	1	; case 5
 13963  00282A  E08E               	bz	l1144
 13964  00282C  0A03               	xorlw	3	; case 6
 13965  00282E  E095               	bz	l1145
 13966  002830  0A01               	xorlw	1	; case 7
 13967  002832  E09C               	bz	l1146
 13968  002834  0A0F               	xorlw	15	; case 8
 13969  002836  E0A3               	bz	l1147
 13970  002838  0A01               	xorlw	1	; case 9
 13971  00283A  E0AA               	bz	l1148
 13972  00283C  0A03               	xorlw	3	; case 10
 13973  00283E  E0B1               	bz	l1149
 13974  002840  0A01               	xorlw	1	; case 11
 13975  002842  E0B8               	bz	l1150
 13976  002844  0A07               	xorlw	7	; case 12
 13977  002846  E0BF               	bz	l1151
 13978  002848  0A01               	xorlw	1	; case 13
 13979  00284A  E0C6               	bz	l1152
 13980  00284C  0A03               	xorlw	3	; case 14
 13981  00284E  E0CD               	bz	l1153
 13982  002850  0A01               	xorlw	1	; case 15
 13983  002852  E0D4               	bz	l1154
 13984  002854                     l1155:
 13985                           
 13986                           ; BSR set to: 2
 13987  002854  0012               	return	
 13988  002856                     __end_of_setFilter:
 13989                           	opt stack 0
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           intcon	equ	0xFF2
 13997                           indf0	equ	0xFEF
 13998                           postinc0	equ	0xFEE
 13999                           fsr0h	equ	0xFEA
 14000                           fsr0l	equ	0xFE9
 14001                           wreg	equ	0xFE8
 14002                           indf1	equ	0xFE7
 14003                           postinc1	equ	0xFE6
 14004                           postdec1	equ	0xFE5
 14005                           fsr1h	equ	0xFE2
 14006                           fsr1l	equ	0xFE1
 14007                           indf2	equ	0xFDF
 14008                           postinc2	equ	0xFDE
 14009                           postdec2	equ	0xFDD
 14010                           plusw2	equ	0xFDB
 14011                           fsr2h	equ	0xFDA
 14012                           fsr2l	equ	0xFD9
 14013                           status	equ	0xFD8
 14014                           
 14015 ;; *************** function _writeRegisterExtended *****************
 14016 ;; Defined at:
 14017 ;;		line 1965 in file "main.c"
 14018 ;; Parameters:    Size  Location     Type
 14019 ;;  nodeid          1    wreg     unsigned char 
 14020 ;;  page            2   62[BANK0 ] unsigned short 
 14021 ;;  reg             1   64[BANK0 ] unsigned char 
 14022 ;;  timeout         2   65[BANK0 ] unsigned short 
 14023 ;;  value           2   67[BANK0 ] PTR unsigned char 
 14024 ;;		 -> doModeVerbose@value_1171(1), 
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;  nodeid          1   48[COMRAM] unsigned char 
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  1    wreg      enum E15660
 14029 ;; Registers used:
 14030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : F/2
 14033 ;;		On exit  : E/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14036 ;;      Params:         0       7       0       0       0       0       0
 14037 ;;      Locals:         1       0       0       0       0       0       0
 14038 ;;      Temps:          0       4       0       0       0       0       0
 14039 ;;      Totals:         1      11       0       0       0       0       0
 14040 ;;Total ram usage:       12 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; Hardware stack levels required when called:    6
 14043 ;; This function calls:
 14044 ;;		_sendVSCPFrame
 14045 ;;		_getVSCPFrame
 14046 ;; This function is called by:
 14047 ;;		_doModeVerbose
 14048 ;; This function uses a non-reentrant model
 14049 ;;
 14050                           
 14051                           	psect	text21
 14052  003B70                     __ptext21:
 14053                           	opt stack 0
 14054  003B70                     _writeRegisterExtended:
 14055                           	opt stack 23
 14056                           
 14057                           ; BSR set to: 2
 14058                           ;incstack = 0
 14059                           ;incstack = 0
 14060                           ;writeRegisterExtended@nodeid stored from wreg
 14061  003B70  CFE8 F031          	movff	wreg,writeRegisterExtended@nodeid
 14062                           
 14063                           ; BSR set to: 2
 14064                           ;main.c: 1966: vscpData[ 0 ] = nodeid;
 14065  003B74  C031  F040         	movff	writeRegisterExtended@nodeid,_vscpData
 14066                           
 14067                           ; BSR set to: 2
 14068                           ;main.c: 1967: vscpData[ 1 ] = page >> 8;
 14069  003B78  0100               	movlb	0	; () banked
 14070  003B7A  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14071  003B7C  6E41               	movwf	_vscpData+1,c
 14072                           
 14073                           ; BSR set to: 0
 14074                           ;main.c: 1968: vscpData[ 2 ] = page & 0xff;
 14075  003B7E  C09E  F042         	movff	writeRegisterExtended@page,_vscpData+2
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;main.c: 1969: vscpData[ 3 ] = reg;
 14079  003B82  C0A0  F043         	movff	writeRegisterExtended@reg,_vscpData+3
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;main.c: 1970: vscpData[ 4 ] = *value;
 14083  003B86  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14084  003B8A  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14085  003B8E  50DF               	movf	indf2,w,c
 14086  003B90  6E44               	movwf	_vscpData+4,c
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;main.c: 1972: if (sendVSCPFrame(0,
 14090                           ;main.c: 1973: 38,
 14091                           ;main.c: 1974: 0,
 14092                           ;main.c: 1975: 0,
 14093                           ;main.c: 1976: 5,
 14094                           ;main.c: 1977: vscpData)) {
 14095  003B92  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14096  003B94  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14097  003B96  0E26               	movlw	38
 14098  003B98  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14099  003B9A  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14100  003B9C  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14101  003B9E  0E05               	movlw	5
 14102  003BA0  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14103  003BA2  0E40               	movlw	low _vscpData
 14104  003BA4  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14105  003BA6  EC28  F020         	call	_sendVSCPFrame	;wreg free
 14106  003BAA  0900               	iorlw	0
 14107  003BAC  E04C               	bz	l11416
 14108                           
 14109                           ;main.c: 1979: timekeeper = 0;
 14110  003BAE  0100               	movlb	0	; () banked
 14111  003BB0  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 14112  003BB2  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14113  003BB4  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14114  003BB6  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14115                           
 14116                           ;main.c: 1980: while (timekeeper < timeout) {
 14117  003BB8  D036               	goto	l11414
 14118  003BBA                     l995:
 14119                           
 14120                           ; BSR set to: 0
 14121  003BBA  0004               	clrwdt		;# 
 14122                           
 14123                           ;main.c: 1984: if (getVSCPFrame(&vscpClass,
 14124                           ;main.c: 1985: &vscpType,
 14125                           ;main.c: 1986: &vscpNodeId,
 14126                           ;main.c: 1987: &vscpPriority,
 14127                           ;main.c: 1988: &vscpSize,
 14128                           ;main.c: 1989: vscpData)) {
 14129  003BBC  0100               	movlb	0	; () banked
 14130  003BBE  0EDF               	movlw	low _vscpType
 14131  003BC0  6F60               	movwf	?_getVSCPFrame& (0+255),b
 14132  003BC2  0EDC               	movlw	low _vscpNodeId
 14133  003BC4  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14134  003BC6  0EDD               	movlw	low _vscpPriority
 14135  003BC8  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14136  003BCA  0EDE               	movlw	low _vscpSize
 14137  003BCC  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14138  003BCE  0E40               	movlw	low _vscpData
 14139  003BD0  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14140  003BD2  0EDA               	movlw	_vscpClass& (0+255)
 14141  003BD4  ECF2  F022         	call	_getVSCPFrame
 14142  003BD8  0900               	iorlw	0
 14143  003BDA  E025               	bz	l11414
 14144                           
 14145                           ;main.c: 1991: if ((nodeid == vscpNodeId) &&
 14146                           ;main.c: 1992: (5 == vscpSize) &&
 14147                           ;main.c: 1993: (0 == vscpData[ 0 ]) &&
 14148                           ;main.c: 1994: ((page >> 8) == vscpData[ 1 ]) &&
 14149                           ;main.c: 1995: ((page & 0xff) == vscpData[ 2 ]) &&
 14150                           ;main.c: 1996: (reg == vscpData[ 3 ]) &&
 14151                           ;main.c: 1997: (*value == vscpData[ 4 ])) {
 14152  003BDC  0100               	movlb	0	; () banked
 14153  003BDE  51DC               	movf	_vscpNodeId& (0+255),w,b
 14154  003BE0  6231               	cpfseq	writeRegisterExtended@nodeid,c
 14155  003BE2  D021               	goto	l11414
 14156                           
 14157                           ; BSR set to: 0
 14158  003BE4  51DE               	movf	_vscpSize& (0+255),w,b
 14159  003BE6  0A05               	xorlw	5
 14160  003BE8  E11E               	bnz	l11414
 14161                           
 14162                           ; BSR set to: 0
 14163  003BEA  6640               	tstfsz	_vscpData,c
 14164  003BEC  D01C               	goto	l11414
 14165                           
 14166                           ; BSR set to: 0
 14167  003BEE  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14168  003BF0  1841               	xorwf	_vscpData+1,w,c
 14169  003BF2  E119               	bnz	l11414
 14170                           
 14171                           ; BSR set to: 0
 14172  003BF4  519E               	movf	writeRegisterExtended@page& (0+255),w,b
 14173  003BF6  EE20  F042         	lfsr	2,_vscpData+2
 14174  003BFA  62DF               	cpfseq	indf2,c
 14175  003BFC  D014               	goto	l11414
 14176                           
 14177                           ; BSR set to: 0
 14178  003BFE  51A0               	movf	writeRegisterExtended@reg& (0+255),w,b
 14179  003C00  EE20  F043         	lfsr	2,_vscpData+3
 14180  003C04  62DF               	cpfseq	indf2,c
 14181  003C06  D00F               	goto	l11414
 14182                           
 14183                           ; BSR set to: 0
 14184  003C08  5044               	movf	_vscpData+4,w,c
 14185  003C0A  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14186  003C0E  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14187  003C12  62DF               	cpfseq	indf2,c
 14188  003C14  D008               	goto	l11414
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;main.c: 1998: *value = vscpData[ 1 ];
 14192  003C16  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14193  003C1A  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14194  003C1E  C041  FFDF         	movff	_vscpData+1,indf2
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;main.c: 1999: return 1;
 14198  003C22  0E01               	movlw	1
 14199  003C24  D011               	goto	l998
 14200  003C26                     l11414:
 14201  003C26  0100               	movlb	0	; () banked
 14202  003C28  51A1               	movf	writeRegisterExtended@timeout& (0+255),w,b
 14203  003C2A  6FA5               	movwf	??_writeRegisterExtended& (0+255),b
 14204  003C2C  51A2               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 14205  003C2E  6FA6               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 14206  003C30  6BA7               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 14207  003C32  6BA8               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 14208  003C34  51A5               	movf	??_writeRegisterExtended& (0+255),w,b
 14209  003C36  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 14210  003C38  51A6               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 14211  003C3A  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14212  003C3C  51A7               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 14213  003C3E  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14214  003C40  51A8               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 14215  003C42  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14216  003C44  E3BA               	bnc	l995
 14217  003C46                     l11416:
 14218                           
 14219                           ;main.c: 2000: }
 14220                           ;main.c: 2002: }
 14221                           ;main.c: 2004: }
 14222                           ;main.c: 2006: }
 14223                           ;main.c: 2008: return 0;
 14224  003C46  0E00               	movlw	0
 14225  003C48                     l998:
 14226  003C48  0012               	return	
 14227  003C4A                     __end_of_writeRegisterExtended:
 14228                           	opt stack 0
 14229                           tblptru	equ	0xFF8
 14230                           tblptrh	equ	0xFF7
 14231                           tblptrl	equ	0xFF6
 14232                           tablat	equ	0xFF5
 14233                           prodh	equ	0xFF4
 14234                           prodl	equ	0xFF3
 14235                           intcon	equ	0xFF2
 14236                           indf0	equ	0xFEF
 14237                           postinc0	equ	0xFEE
 14238                           fsr0h	equ	0xFEA
 14239                           fsr0l	equ	0xFE9
 14240                           wreg	equ	0xFE8
 14241                           indf1	equ	0xFE7
 14242                           postinc1	equ	0xFE6
 14243                           postdec1	equ	0xFE5
 14244                           fsr1h	equ	0xFE2
 14245                           fsr1l	equ	0xFE1
 14246                           indf2	equ	0xFDF
 14247                           postinc2	equ	0xFDE
 14248                           postdec2	equ	0xFDD
 14249                           plusw2	equ	0xFDB
 14250                           fsr2h	equ	0xFDA
 14251                           fsr2l	equ	0xFD9
 14252                           status	equ	0xFD8
 14253                           
 14254 ;; *************** function _printBinary *****************
 14255 ;; Defined at:
 14256 ;;		line 2049 in file "main.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  value           1    wreg     unsigned char 
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  value           1   27[COMRAM] unsigned char 
 14261 ;;  i               2   28[COMRAM] int 
 14262 ;; Return value:  Size  Location     Type
 14263 ;;		None               void
 14264 ;; Registers used:
 14265 ;;		wreg, status,2, status,0, cstack
 14266 ;; Tracked objects:
 14267 ;;		On entry : F/2
 14268 ;;		On exit  : 0/0
 14269 ;;		Unchanged: 0/0
 14270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14271 ;;      Params:         0       0       0       0       0       0       0
 14272 ;;      Locals:         3       0       0       0       0       0       0
 14273 ;;      Temps:          2       0       0       0       0       0       0
 14274 ;;      Totals:         5       0       0       0       0       0       0
 14275 ;;Total ram usage:        5 bytes
 14276 ;; Hardware stack levels used:    1
 14277 ;; Hardware stack levels required when called:    3
 14278 ;; This function calls:
 14279 ;;		_WriteUSART
 14280 ;; This function is called by:
 14281 ;;		_doModeVerbose
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           	psect	text22
 14286  004CB8                     __ptext22:
 14287                           	opt stack 0
 14288  004CB8                     _printBinary:
 14289                           	opt stack 26
 14290                           
 14291                           ;incstack = 0
 14292                           ;incstack = 0
 14293                           ;printBinary@value stored from wreg
 14294  004CB8  CFE8 F01C          	movff	wreg,printBinary@value
 14295                           
 14296                           ; BSR set to: 2
 14297                           ;main.c: 2050: int i;
 14298                           ;main.c: 2052: for (i = 7; i >= 0; i--) {
 14299  004CBC  6A1E               	clrf	printBinary@i+1,c
 14300  004CBE  0E07               	movlw	7
 14301  004CC0  6E1D               	movwf	printBinary@i,c
 14302  004CC2                     l11366:
 14303                           
 14304                           ;main.c: 2053: if (value & (1 << i)) {
 14305  004CC2  C01D  F01A         	movff	printBinary@i,??_printBinary
 14306  004CC6  0E01               	movlw	1
 14307  004CC8  6E1B               	movwf	(??_printBinary+1)& (0+255),c
 14308  004CCA  2A1A               	incf	??_printBinary,f,c
 14309  004CCC  D002               	goto	u14384
 14310  004CCE                     u14385:
 14311  004CCE  90D8               	bcf	status,0,c
 14312  004CD0  361B               	rlcf	??_printBinary+1,f,c
 14313  004CD2                     u14384:
 14314  004CD2  2E1A               	decfsz	??_printBinary,f,c
 14315  004CD4  D7FC               	goto	u14385
 14316  004CD6  501B               	movf	??_printBinary+1,w,c
 14317  004CD8  141C               	andwf	printBinary@value,w,c
 14318  004CDA  E006               	bz	l1018
 14319  004CDC                     l1014:
 14320  004CDC  A2AC               	btfss	4012,1,c	;volatile
 14321  004CDE  D7FE               	goto	l1014
 14322                           
 14323                           ;main.c: 2055: WriteUSART('1');
 14324  004CE0  0E31               	movlw	49
 14325  004CE2  ECC4  F028         	call	_WriteUSART
 14326                           
 14327                           ;main.c: 2056: } else {
 14328  004CE6  D005               	goto	l11374
 14329  004CE8                     l1018:
 14330  004CE8  A2AC               	btfss	4012,1,c	;volatile
 14331  004CEA  D7FE               	goto	l1018
 14332                           
 14333                           ;main.c: 2058: WriteUSART('0');
 14334  004CEC  0E30               	movlw	48
 14335  004CEE  ECC4  F028         	call	_WriteUSART
 14336  004CF2                     l11374:
 14337  004CF2  061D               	decf	printBinary@i,f,c
 14338  004CF4  A0D8               	btfss	status,0,c
 14339  004CF6  061E               	decf	printBinary@i+1,f,c
 14340  004CF8  BE1E               	btfsc	printBinary@i+1,7,c
 14341  004CFA  0012               	return	
 14342  004CFC  D7E2               	goto	l11366
 14343  004CFE                     __end_of_printBinary:
 14344                           	opt stack 0
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           intcon	equ	0xFF2
 14352                           indf0	equ	0xFEF
 14353                           postinc0	equ	0xFEE
 14354                           fsr0h	equ	0xFEA
 14355                           fsr0l	equ	0xFE9
 14356                           wreg	equ	0xFE8
 14357                           indf1	equ	0xFE7
 14358                           postinc1	equ	0xFE6
 14359                           postdec1	equ	0xFE5
 14360                           fsr1h	equ	0xFE2
 14361                           fsr1l	equ	0xFE1
 14362                           indf2	equ	0xFDF
 14363                           postinc2	equ	0xFDE
 14364                           postdec2	equ	0xFDD
 14365                           plusw2	equ	0xFDB
 14366                           fsr2h	equ	0xFDA
 14367                           fsr2l	equ	0xFD9
 14368                           status	equ	0xFD8
 14369                           
 14370 ;; *************** function _readRegisterExtended *****************
 14371 ;; Defined at:
 14372 ;;		line 1866 in file "main.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;  nodeid          1    wreg     unsigned char 
 14375 ;;  page            2   62[BANK0 ] unsigned short 
 14376 ;;  reg             1   64[BANK0 ] unsigned char 
 14377 ;;  timeout         2   65[BANK0 ] unsigned short 
 14378 ;;  value           2   67[BANK0 ] PTR unsigned char 
 14379 ;;		 -> doModeVerbose@value(1), 
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;  nodeid          1   48[COMRAM] unsigned char 
 14382 ;; Return value:  Size  Location     Type
 14383 ;;                  1    wreg      enum E15660
 14384 ;; Registers used:
 14385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14386 ;; Tracked objects:
 14387 ;;		On entry : F/2
 14388 ;;		On exit  : E/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14391 ;;      Params:         0       7       0       0       0       0       0
 14392 ;;      Locals:         1       0       0       0       0       0       0
 14393 ;;      Temps:          0       4       0       0       0       0       0
 14394 ;;      Totals:         1      11       0       0       0       0       0
 14395 ;;Total ram usage:       12 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    6
 14398 ;; This function calls:
 14399 ;;		_sendVSCPFrame
 14400 ;;		_getVSCPFrame
 14401 ;; This function is called by:
 14402 ;;		_doModeVerbose
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           	psect	text23
 14407  003D22                     __ptext23:
 14408                           	opt stack 0
 14409  003D22                     _readRegisterExtended:
 14410                           	opt stack 23
 14411                           
 14412                           ;incstack = 0
 14413                           ;incstack = 0
 14414                           ;readRegisterExtended@nodeid stored from wreg
 14415  003D22  CFE8 F031          	movff	wreg,readRegisterExtended@nodeid
 14416                           
 14417                           ; BSR set to: 2
 14418                           ;main.c: 1867: vscpData[ 0 ] = nodeid;
 14419  003D26  C031  F040         	movff	readRegisterExtended@nodeid,_vscpData
 14420                           
 14421                           ; BSR set to: 2
 14422                           ;main.c: 1868: vscpData[ 1 ] = page >> 8;
 14423  003D2A  0100               	movlb	0	; () banked
 14424  003D2C  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14425  003D2E  6E41               	movwf	_vscpData+1,c
 14426                           
 14427                           ; BSR set to: 0
 14428                           ;main.c: 1869: vscpData[ 2 ] = page & 0xff;
 14429  003D30  C09E  F042         	movff	readRegisterExtended@page,_vscpData+2
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;main.c: 1870: vscpData[ 3 ] = reg;
 14433  003D34  C0A0  F043         	movff	readRegisterExtended@reg,_vscpData+3
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;main.c: 1871: vscpData[ 4 ] = 1;
 14437  003D38  0E01               	movlw	1
 14438  003D3A  6E44               	movwf	_vscpData+4,c
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;main.c: 1873: if (sendVSCPFrame(0,
 14442                           ;main.c: 1874: 37,
 14443                           ;main.c: 1875: 0,
 14444                           ;main.c: 1876: 0,
 14445                           ;main.c: 1877: 5,
 14446                           ;main.c: 1878: vscpData)) {
 14447  003D3C  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14448  003D3E  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14449  003D40  0E25               	movlw	37
 14450  003D42  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14451  003D44  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14452  003D46  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14453  003D48  0E05               	movlw	5
 14454  003D4A  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14455  003D4C  0E40               	movlw	low _vscpData
 14456  003D4E  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14457  003D50  EC28  F020         	call	_sendVSCPFrame	;wreg free
 14458  003D54  0900               	iorlw	0
 14459  003D56  E04B               	bz	l11006
 14460                           
 14461                           ;main.c: 1880: timekeeper = 0;
 14462  003D58  0100               	movlb	0	; () banked
 14463  003D5A  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 14464  003D5C  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14465  003D5E  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14466  003D60  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14467                           
 14468                           ;main.c: 1881: while (timekeeper < timeout) {
 14469  003D62  D035               	goto	l11004
 14470  003D64                     l977:
 14471                           
 14472                           ; BSR set to: 0
 14473  003D64  0004               	clrwdt		;# 
 14474                           
 14475                           ;main.c: 1885: if (getVSCPFrame(&vscpClass,
 14476                           ;main.c: 1886: &vscpType,
 14477                           ;main.c: 1887: &vscpNodeId,
 14478                           ;main.c: 1888: &vscpPriority,
 14479                           ;main.c: 1889: &vscpSize,
 14480                           ;main.c: 1890: vscpData)) {
 14481  003D66  0100               	movlb	0	; () banked
 14482  003D68  0EDF               	movlw	low _vscpType
 14483  003D6A  6F60               	movwf	?_getVSCPFrame& (0+255),b
 14484  003D6C  0EDC               	movlw	low _vscpNodeId
 14485  003D6E  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14486  003D70  0EDD               	movlw	low _vscpPriority
 14487  003D72  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14488  003D74  0EDE               	movlw	low _vscpSize
 14489  003D76  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14490  003D78  0E40               	movlw	low _vscpData
 14491  003D7A  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14492  003D7C  0EDA               	movlw	_vscpClass& (0+255)
 14493  003D7E  ECF2  F022         	call	_getVSCPFrame
 14494  003D82  0900               	iorlw	0
 14495  003D84  E024               	bz	l11004
 14496                           
 14497                           ;main.c: 1891: if ((nodeid == vscpNodeId) &&
 14498                           ;main.c: 1892: (0 == vscpClass) &&
 14499                           ;main.c: 1893: (39 == vscpType) &&
 14500                           ;main.c: 1894: (5 == vscpSize) &&
 14501                           ;main.c: 1895: (0 == vscpData[ 0 ]) &&
 14502                           ;main.c: 1896: ((page >> 8) == vscpData[ 1 ]) &&
 14503                           ;main.c: 1897: ((page & 0xff) == vscpData[ 2 ]) &&
 14504                           ;main.c: 1898: (reg == vscpData[ 3 ])) {
 14505  003D86  0100               	movlb	0	; () banked
 14506  003D88  51DC               	movf	_vscpNodeId& (0+255),w,b
 14507  003D8A  6231               	cpfseq	readRegisterExtended@nodeid,c
 14508  003D8C  D020               	goto	l11004
 14509                           
 14510                           ; BSR set to: 0
 14511  003D8E  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 14512  003D90  11DA               	iorwf	_vscpClass& (0+255),w,b
 14513  003D92  E11D               	bnz	l11004
 14514                           
 14515                           ; BSR set to: 0
 14516  003D94  51DF               	movf	_vscpType& (0+255),w,b
 14517  003D96  0A27               	xorlw	39
 14518  003D98  E11A               	bnz	l11004
 14519                           
 14520                           ; BSR set to: 0
 14521  003D9A  51DE               	movf	_vscpSize& (0+255),w,b
 14522  003D9C  0A05               	xorlw	5
 14523  003D9E  E117               	bnz	l11004
 14524                           
 14525                           ; BSR set to: 0
 14526  003DA0  6640               	tstfsz	_vscpData,c
 14527  003DA2  D015               	goto	l11004
 14528                           
 14529                           ; BSR set to: 0
 14530  003DA4  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14531  003DA6  1841               	xorwf	_vscpData+1,w,c
 14532  003DA8  E112               	bnz	l11004
 14533                           
 14534                           ; BSR set to: 0
 14535  003DAA  519E               	movf	readRegisterExtended@page& (0+255),w,b
 14536  003DAC  EE20  F042         	lfsr	2,_vscpData+2
 14537  003DB0  62DF               	cpfseq	indf2,c
 14538  003DB2  D00D               	goto	l11004
 14539                           
 14540                           ; BSR set to: 0
 14541  003DB4  51A0               	movf	readRegisterExtended@reg& (0+255),w,b
 14542  003DB6  EE20  F043         	lfsr	2,_vscpData+3
 14543  003DBA  62DF               	cpfseq	indf2,c
 14544  003DBC  D008               	goto	l11004
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;main.c: 1899: *value = vscpData[ 4 ];
 14548  003DBE  C0A3  FFD9         	movff	readRegisterExtended@value,fsr2l
 14549  003DC2  C0A4  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 14550  003DC6  C044  FFDF         	movff	_vscpData+4,indf2
 14551                           
 14552                           ; BSR set to: 0
 14553                           ;main.c: 1900: return 1;
 14554  003DCA  0E01               	movlw	1
 14555  003DCC  D011               	goto	l980
 14556  003DCE                     l11004:
 14557  003DCE  0100               	movlb	0	; () banked
 14558  003DD0  51A1               	movf	readRegisterExtended@timeout& (0+255),w,b
 14559  003DD2  6FA5               	movwf	??_readRegisterExtended& (0+255),b
 14560  003DD4  51A2               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 14561  003DD6  6FA6               	movwf	(??_readRegisterExtended+1)& (0+255),b
 14562  003DD8  6BA7               	clrf	(??_readRegisterExtended+2)& (0+255),b
 14563  003DDA  6BA8               	clrf	(??_readRegisterExtended+3)& (0+255),b
 14564  003DDC  51A5               	movf	??_readRegisterExtended& (0+255),w,b
 14565  003DDE  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 14566  003DE0  51A6               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 14567  003DE2  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14568  003DE4  51A7               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 14569  003DE6  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14570  003DE8  51A8               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 14571  003DEA  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14572  003DEC  E3BB               	bnc	l977
 14573  003DEE                     l11006:
 14574                           
 14575                           ;main.c: 1901: }
 14576                           ;main.c: 1902: }
 14577                           ;main.c: 1903: }
 14578                           ;main.c: 1904: }
 14579                           ;main.c: 1906: return 0;
 14580  003DEE  0E00               	movlw	0
 14581  003DF0                     l980:
 14582  003DF0  0012               	return	
 14583  003DF2                     __end_of_readRegisterExtended:
 14584                           	opt stack 0
 14585                           tblptru	equ	0xFF8
 14586                           tblptrh	equ	0xFF7
 14587                           tblptrl	equ	0xFF6
 14588                           tablat	equ	0xFF5
 14589                           prodh	equ	0xFF4
 14590                           prodl	equ	0xFF3
 14591                           intcon	equ	0xFF2
 14592                           indf0	equ	0xFEF
 14593                           postinc0	equ	0xFEE
 14594                           fsr0h	equ	0xFEA
 14595                           fsr0l	equ	0xFE9
 14596                           wreg	equ	0xFE8
 14597                           indf1	equ	0xFE7
 14598                           postinc1	equ	0xFE6
 14599                           postdec1	equ	0xFE5
 14600                           fsr1h	equ	0xFE2
 14601                           fsr1l	equ	0xFE1
 14602                           indf2	equ	0xFDF
 14603                           postinc2	equ	0xFDE
 14604                           postdec2	equ	0xFDD
 14605                           plusw2	equ	0xFDB
 14606                           fsr2h	equ	0xFDA
 14607                           fsr2l	equ	0xFD9
 14608                           status	equ	0xFD8
 14609                           
 14610 ;; *************** function _strcpy *****************
 14611 ;; Defined at:
 14612 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  to              2   24[COMRAM] PTR unsigned char 
 14615 ;;		 -> cmdbuf(80), 
 14616 ;;  from            2   26[COMRAM] PTR const unsigned char 
 14617 ;;		 -> cmdbuf(80), 
 14618 ;; Auto vars:     Size  Location     Type
 14619 ;;  cp              2   28[COMRAM] PTR unsigned char 
 14620 ;;		 -> cmdbuf(80), 
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  2   24[COMRAM] PTR unsigned char 
 14623 ;; Registers used:
 14624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14625 ;; Tracked objects:
 14626 ;;		On entry : F/0
 14627 ;;		On exit  : F/0
 14628 ;;		Unchanged: F/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14630 ;;      Params:         4       0       0       0       0       0       0
 14631 ;;      Locals:         2       0       0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0
 14633 ;;      Totals:         6       0       0       0       0       0       0
 14634 ;;Total ram usage:        6 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:    2
 14637 ;; This function calls:
 14638 ;;		Nothing
 14639 ;; This function is called by:
 14640 ;;		_doModeVerbose
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644                           	psect	text24
 14645  005052                     __ptext24:
 14646                           	opt stack 0
 14647  005052                     _strcpy:
 14648                           	opt stack 27
 14649                           
 14650                           ; BSR set to: 0
 14651                           
 14652                           ;incstack = 0
 14653                           ;incstack = 0
 14654  005052  C019  F01D         	movff	strcpy@to,strcpy@cp
 14655  005056  C01A  F01E         	movff	strcpy@to+1,strcpy@cp+1
 14656  00505A  D004               	goto	l10958
 14657  00505C                     l10956:
 14658                           
 14659                           ; BSR set to: 0
 14660  00505C  4A1D               	infsnz	strcpy@cp,f,c
 14661  00505E  2A1E               	incf	strcpy@cp+1,f,c
 14662  005060  4A1B               	infsnz	strcpy@from,f,c
 14663  005062  2A1C               	incf	strcpy@from+1,f,c
 14664  005064                     l10958:
 14665                           
 14666                           ; BSR set to: 0
 14667  005064  C01B  FFD9         	movff	strcpy@from,fsr2l
 14668  005068  C01C  FFDA         	movff	strcpy@from+1,fsr2h
 14669  00506C  C01D  FFE1         	movff	strcpy@cp,fsr1l
 14670  005070  C01E  FFE2         	movff	strcpy@cp+1,fsr1h
 14671  005074  CFDF FFE7          	movff	indf2,indf1
 14672  005078  50E7               	movf	indf1,w,c
 14673  00507A  B4D8               	btfsc	status,2,c
 14674                           
 14675                           ; BSR set to: 0
 14676  00507C  0012               	return	
 14677  00507E  D7EE               	goto	l10956
 14678  005080                     __end_of_strcpy:
 14679                           	opt stack 0
 14680                           tblptru	equ	0xFF8
 14681                           tblptrh	equ	0xFF7
 14682                           tblptrl	equ	0xFF6
 14683                           tablat	equ	0xFF5
 14684                           prodh	equ	0xFF4
 14685                           prodl	equ	0xFF3
 14686                           intcon	equ	0xFF2
 14687                           indf0	equ	0xFEF
 14688                           postinc0	equ	0xFEE
 14689                           fsr0h	equ	0xFEA
 14690                           fsr0l	equ	0xFE9
 14691                           wreg	equ	0xFE8
 14692                           indf1	equ	0xFE7
 14693                           postinc1	equ	0xFE6
 14694                           postdec1	equ	0xFE5
 14695                           fsr1h	equ	0xFE2
 14696                           fsr1l	equ	0xFE1
 14697                           indf2	equ	0xFDF
 14698                           postinc2	equ	0xFDE
 14699                           postdec2	equ	0xFDD
 14700                           plusw2	equ	0xFDB
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705 ;; *************** function _findNodes *****************
 14706 ;; Defined at:
 14707 ;;		line 2203 in file "main.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;		None
 14710 ;; Auto vars:     Size  Location     Type
 14711 ;;  i               1   80[BANK0 ] unsigned char 
 14712 ;;  value           1   79[BANK0 ] unsigned char 
 14713 ;;  nFound          1   78[BANK0 ] unsigned char 
 14714 ;; Return value:  Size  Location     Type
 14715 ;;		None               void
 14716 ;; Registers used:
 14717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14718 ;; Tracked objects:
 14719 ;;		On entry : F/0
 14720 ;;		On exit  : 0/0
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14723 ;;      Params:         0       0       0       0       0       0       0
 14724 ;;      Locals:         0       5       0       0       0       0       0
 14725 ;;      Temps:          0       0       0       0       0       0       0
 14726 ;;      Totals:         0       5       0       0       0       0       0
 14727 ;;Total ram usage:        5 bytes
 14728 ;; Hardware stack levels used:    1
 14729 ;; Hardware stack levels required when called:    8
 14730 ;; This function calls:
 14731 ;;		_putsUSART
 14732 ;;		_printNodeFirmwareVersion
 14733 ;;		_printGUID
 14734 ;;		_printMDF
 14735 ;;		_itoa
 14736 ;;		_readRegister
 14737 ;; This function is called by:
 14738 ;;		_doModeVerbose
 14739 ;; This function uses a non-reentrant model
 14740 ;;
 14741                           
 14742                           	psect	text25
 14743  0039AC                     __ptext25:
 14744                           	opt stack 0
 14745  0039AC                     _findNodes:
 14746                           	opt stack 21
 14747                           
 14748                           ; BSR set to: 0
 14749                           ;main.c: 2204: uint8_t nFound = 0;
 14750                           
 14751                           ; BSR set to: 0
 14752                           ;incstack = 0
 14753                           ;incstack = 0
 14754  0039AC  6BAE               	clrf	findNodes@nFound& (0+255),b
 14755                           
 14756                           ; BSR set to: 0
 14757                           ;main.c: 2205: uint8_t i;
 14758                           ;main.c: 2206: uint8_t value;
 14759                           ;main.c: 2208: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14760  0039AE  0E71               	movlw	high STR_229
 14761  0039B0  6E1B               	movwf	?_putsUSART+1,c
 14762  0039B2  0E77               	movlw	low STR_229
 14763  0039B4  6E1A               	movwf	?_putsUSART,c
 14764  0039B6  ECE6  F025         	call	_putsUSART	;wreg free
 14765                           
 14766                           ;main.c: 2210: for (i = 1; i != 0; i++) {
 14767  0039BA  0E01               	movlw	1
 14768  0039BC  0100               	movlb	0	; () banked
 14769  0039BE  6FB0               	movwf	findNodes@i& (0+255),b
 14770  0039C0                     l1079:
 14771                           
 14772                           ; BSR set to: 0
 14773  0039C0  0004               	clrwdt		;# 
 14774                           
 14775                           ;main.c: 2214: if (readRegister(i,
 14776                           ;main.c: 2215: 0xE0,
 14777                           ;main.c: 2216: rwtimeout,
 14778                           ;main.c: 2217: &value)) {
 14779  0039C2  0EE0               	movlw	224
 14780  0039C4  0100               	movlb	0	; () banked
 14781  0039C6  6F9E               	movwf	?_readRegister& (0+255),b
 14782  0039C8  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 14783  0039CC  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 14784  0039CE  0EAF               	movlw	low findNodes@value
 14785  0039D0  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 14786  0039D2  51B0               	movf	findNodes@i& (0+255),w,b
 14787  0039D4  ECE1  F020         	call	_readRegister
 14788  0039D8  0900               	iorlw	0
 14789  0039DA  E03E               	bz	l10944
 14790                           
 14791                           ;main.c: 2218: putsUSART((char *) "Node found with node id = ");
 14792  0039DC  0E7B               	movlw	high STR_230
 14793  0039DE  6E1B               	movwf	?_putsUSART+1,c
 14794  0039E0  0E9A               	movlw	low STR_230
 14795  0039E2  6E1A               	movwf	?_putsUSART,c
 14796  0039E4  ECE6  F025         	call	_putsUSART	;wreg free
 14797                           
 14798                           ;main.c: 2219: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 14799  0039E8  0100               	movlb	0	; () banked
 14800  0039EA  67D3               	tstfsz	_bHex& (0+255),b
 14801  0039EC  D003               	goto	l10926
 14802                           
 14803                           ; BSR set to: 0
 14804  0039EE  6BAD               	clrf	(_findNodes$1464+1)& (0+255),b
 14805  0039F0  0E0A               	movlw	10
 14806  0039F2  D002               	goto	L13
 14807  0039F4                     l10926:
 14808                           
 14809                           ; BSR set to: 0
 14810  0039F4  6BAD               	clrf	(_findNodes$1464+1)& (0+255),b
 14811  0039F6  0E10               	movlw	16
 14812  0039F8                     L13:
 14813  0039F8  6FAC               	movwf	_findNodes$1464& (0+255),b
 14814                           
 14815                           ; BSR set to: 0
 14816  0039FA  0E01               	movlw	high _wrkbuf
 14817  0039FC  6E2A               	movwf	?_itoa+1,c
 14818  0039FE  0E70               	movlw	low _wrkbuf
 14819  003A00  6E29               	movwf	?_itoa,c
 14820  003A02  0100               	movlb	0	; () banked
 14821  003A04  C0DC  F02B         	movff	_vscpNodeId,?_itoa+2
 14822  003A08  6A2C               	clrf	?_itoa+3,c
 14823  003A0A  C0AC  F02D         	movff	_findNodes$1464,?_itoa+4
 14824  003A0E  C0AD  F02E         	movff	_findNodes$1464+1,?_itoa+5
 14825  003A12  ECD9  F027         	call	_itoa	;wreg free
 14826                           
 14827                           ;main.c: 2220: putsUSART(wrkbuf);
 14828  003A16  0101               	movlb	1	; () banked
 14829  003A18  0E01               	movlw	high _wrkbuf
 14830  003A1A  6E1B               	movwf	?_putsUSART+1,c
 14831  003A1C  0E70               	movlw	low _wrkbuf
 14832  003A1E  6E1A               	movwf	?_putsUSART,c
 14833  003A20  ECE6  F025         	call	_putsUSART	;wreg free
 14834                           
 14835                           ;main.c: 2221: putsUSART((char *) "\r\n");
 14836  003A24  0E74               	movlw	high (STR_188+50)
 14837  003A26  6E1B               	movwf	?_putsUSART+1,c
 14838  003A28  0EAE               	movlw	low (STR_188+50)
 14839  003A2A  6E1A               	movwf	?_putsUSART,c
 14840  003A2C  ECE6  F025         	call	_putsUSART	;wreg free
 14841                           
 14842                           ;main.c: 2222: printNodeFirmwareVersion(i);
 14843  003A30  0100               	movlb	0	; () banked
 14844  003A32  51B0               	movf	findNodes@i& (0+255),w,b
 14845  003A34  ECF9  F01E         	call	_printNodeFirmwareVersion
 14846                           
 14847                           ;main.c: 2223: printGUID(i);
 14848  003A38  0100               	movlb	0	; () banked
 14849  003A3A  51B0               	movf	findNodes@i& (0+255),w,b
 14850  003A3C  ECEA  F01A         	call	_printGUID
 14851                           
 14852                           ;main.c: 2224: printMDF(i);
 14853  003A40  0100               	movlb	0	; () banked
 14854  003A42  51B0               	movf	findNodes@i& (0+255),w,b
 14855  003A44  ECD2  F021         	call	_printMDF
 14856                           
 14857                           ;main.c: 2225: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14858  003A48  0E71               	movlw	high STR_229
 14859  003A4A  6E1B               	movwf	?_putsUSART+1,c
 14860  003A4C  0E77               	movlw	low STR_229
 14861  003A4E  6E1A               	movwf	?_putsUSART,c
 14862  003A50  ECE6  F025         	call	_putsUSART	;wreg free
 14863                           
 14864                           ;main.c: 2226: nFound++;
 14865  003A54  0100               	movlb	0	; () banked
 14866  003A56  2BAE               	incf	findNodes@nFound& (0+255),f,b
 14867  003A58                     l10944:
 14868  003A58  0100               	movlb	0	; () banked
 14869  003A5A  2BB0               	incf	findNodes@i& (0+255),f,b
 14870                           
 14871                           ; BSR set to: 0
 14872  003A5C  67B0               	tstfsz	findNodes@i& (0+255),b
 14873  003A5E  D7B0               	goto	l1079
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;main.c: 2227: }
 14877                           ;main.c: 2229: }
 14878                           ;main.c: 2231: itoa(wrkbuf, nFound, 10);
 14879  003A60  0E01               	movlw	high _wrkbuf
 14880  003A62  6E2A               	movwf	?_itoa+1,c
 14881  003A64  0E70               	movlw	low _wrkbuf
 14882  003A66  6E29               	movwf	?_itoa,c
 14883  003A68  C0AE  F02B         	movff	findNodes@nFound,?_itoa+2
 14884  003A6C  6A2C               	clrf	?_itoa+3,c
 14885  003A6E  6A2E               	clrf	?_itoa+5,c
 14886  003A70  0E0A               	movlw	10
 14887  003A72  6E2D               	movwf	?_itoa+4,c
 14888  003A74  ECD9  F027         	call	_itoa	;wreg free
 14889                           
 14890                           ;main.c: 2232: putsUSART(wrkbuf);
 14891  003A78  0101               	movlb	1	; () banked
 14892  003A7A  0E01               	movlw	high _wrkbuf
 14893  003A7C  6E1B               	movwf	?_putsUSART+1,c
 14894  003A7E  0E70               	movlw	low _wrkbuf
 14895  003A80  6E1A               	movwf	?_putsUSART,c
 14896  003A82  ECE6  F025         	call	_putsUSART	;wreg free
 14897                           
 14898                           ;main.c: 2233: putsUSART((char *) " nodes found\r\n");
 14899  003A86  0E7E               	movlw	high STR_233
 14900  003A88  6E1B               	movwf	?_putsUSART+1,c
 14901  003A8A  0E4F               	movlw	low STR_233
 14902  003A8C  6E1A               	movwf	?_putsUSART,c
 14903  003A8E  EFE6  F025         	goto	_putsUSART	;wreg free
 14904  003A92                     __end_of_findNodes:
 14905                           	opt stack 0
 14906                           tblptru	equ	0xFF8
 14907                           tblptrh	equ	0xFF7
 14908                           tblptrl	equ	0xFF6
 14909                           tablat	equ	0xFF5
 14910                           prodh	equ	0xFF4
 14911                           prodl	equ	0xFF3
 14912                           intcon	equ	0xFF2
 14913                           indf0	equ	0xFEF
 14914                           postinc0	equ	0xFEE
 14915                           fsr0h	equ	0xFEA
 14916                           fsr0l	equ	0xFE9
 14917                           wreg	equ	0xFE8
 14918                           indf1	equ	0xFE7
 14919                           postinc1	equ	0xFE6
 14920                           postdec1	equ	0xFE5
 14921                           fsr1h	equ	0xFE2
 14922                           fsr1l	equ	0xFE1
 14923                           indf2	equ	0xFDF
 14924                           postinc2	equ	0xFDE
 14925                           postdec2	equ	0xFDD
 14926                           plusw2	equ	0xFDB
 14927                           fsr2h	equ	0xFDA
 14928                           fsr2l	equ	0xFD9
 14929                           status	equ	0xFD8
 14930                           
 14931 ;; *************** function _printMDF *****************
 14932 ;; Defined at:
 14933 ;;		line 2282 in file "main.c"
 14934 ;; Parameters:    Size  Location     Type
 14935 ;;  nodeid          1    wreg     unsigned char 
 14936 ;; Auto vars:     Size  Location     Type
 14937 ;;  nodeid          1   70[BANK0 ] unsigned char 
 14938 ;;  p               2   72[BANK0 ] PTR unsigned char 
 14939 ;;		 -> wrkbuf(80), 
 14940 ;;  i               1   74[BANK0 ] unsigned char 
 14941 ;;  value           1   71[BANK0 ] unsigned char 
 14942 ;; Return value:  Size  Location     Type
 14943 ;;		None               void
 14944 ;; Registers used:
 14945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14946 ;; Tracked objects:
 14947 ;;		On entry : D/2
 14948 ;;		On exit  : 0/0
 14949 ;;		Unchanged: 0/0
 14950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14951 ;;      Params:         0       0       0       0       0       0       0
 14952 ;;      Locals:         0       5       0       0       0       0       0
 14953 ;;      Temps:          0       0       0       0       0       0       0
 14954 ;;      Totals:         0       5       0       0       0       0       0
 14955 ;;Total ram usage:        5 bytes
 14956 ;; Hardware stack levels used:    1
 14957 ;; Hardware stack levels required when called:    7
 14958 ;; This function calls:
 14959 ;;		_putsUSART
 14960 ;;		_memset
 14961 ;;		_readRegister
 14962 ;; This function is called by:
 14963 ;;		_doModeVerbose
 14964 ;;		_findNodes
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           	psect	text26
 14969  0043A4                     __ptext26:
 14970                           	opt stack 0
 14971  0043A4                     _printMDF:
 14972                           	opt stack 22
 14973                           
 14974                           ;incstack = 0
 14975                           ;incstack = 0
 14976                           ;printMDF@nodeid stored from wreg
 14977  0043A4  CFE8 F0A6          	movff	wreg,printMDF@nodeid
 14978                           
 14979                           ;main.c: 2283: uint8_t i;
 14980                           ;main.c: 2284: uint8_t value;
 14981                           ;main.c: 2285: char *p = wrkbuf;
 14982  0043A8  0E01               	movlw	high _wrkbuf
 14983  0043AA  0100               	movlb	0	; () banked
 14984  0043AC  6FA9               	movwf	(printMDF@p+1)& (0+255),b
 14985  0043AE  0E70               	movlw	low _wrkbuf
 14986  0043B0  6FA8               	movwf	printMDF@p& (0+255),b
 14987                           
 14988                           ; BSR set to: 0
 14989                           ;main.c: 2286: memset(wrkbuf, 0, sizeof (wrkbuf));
 14990  0043B2  0101               	movlb	1	; () banked
 14991  0043B4  0E01               	movlw	high _wrkbuf
 14992  0043B6  6E1A               	movwf	?_memset+1,c
 14993  0043B8  0E70               	movlw	low _wrkbuf
 14994  0043BA  6E19               	movwf	?_memset,c
 14995  0043BC  6A1C               	clrf	?_memset+3,c
 14996  0043BE  6A1B               	clrf	?_memset+2,c
 14997  0043C0  6A1E               	clrf	?_memset+5,c
 14998  0043C2  0E50               	movlw	80
 14999  0043C4  6E1D               	movwf	?_memset+4,c
 15000  0043C6  EC57  F028         	call	_memset	;wreg free
 15001                           
 15002                           ;main.c: 2287: putsUSART((char *) "MDF = http://");
 15003  0043CA  0E7E               	movlw	high STR_239
 15004  0043CC  6E1B               	movwf	?_putsUSART+1,c
 15005  0043CE  0E6D               	movlw	low STR_239
 15006  0043D0  6E1A               	movwf	?_putsUSART,c
 15007  0043D2  ECE6  F025         	call	_putsUSART	;wreg free
 15008                           
 15009                           ;main.c: 2289: for (i = 0; i < 32; i++) {
 15010  0043D6  0100               	movlb	0	; () banked
 15011  0043D8  6BAA               	clrf	printMDF@i& (0+255),b
 15012  0043DA                     l11492:
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;main.c: 2290: if (readRegister(nodeid,
 15016                           ;main.c: 2291: 0xE0 + i,
 15017                           ;main.c: 2292: rwtimeout,
 15018                           ;main.c: 2293: &value)) {
 15019  0043DA  51AA               	movf	printMDF@i& (0+255),w,b
 15020  0043DC  0FE0               	addlw	224
 15021  0043DE  6F9E               	movwf	?_readRegister& (0+255),b
 15022  0043E0  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15023  0043E4  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15024  0043E6  0EA7               	movlw	low printMDF@value
 15025  0043E8  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15026  0043EA  51A6               	movf	printMDF@nodeid& (0+255),w,b
 15027  0043EC  ECE1  F020         	call	_readRegister
 15028  0043F0  0900               	iorlw	0
 15029  0043F2  E00A               	bz	l11498
 15030                           
 15031                           ;main.c: 2294: *p = value;
 15032  0043F4  C0A8  FFD9         	movff	printMDF@p,fsr2l
 15033  0043F8  C0A9  FFDA         	movff	printMDF@p+1,fsr2h
 15034  0043FC  C0A7  FFDF         	movff	printMDF@value,indf2
 15035  004400                     l11496:
 15036                           
 15037                           ;main.c: 2295: p++;
 15038  004400  0100               	movlb	0	; () banked
 15039  004402  4BA8               	infsnz	printMDF@p& (0+255),f,b
 15040  004404  2BA9               	incf	(printMDF@p+1)& (0+255),f,b
 15041                           
 15042                           ;main.c: 2297: } else {
 15043  004406  D007               	goto	l11502
 15044  004408                     l11498:
 15045                           
 15046                           ;main.c: 2298: *p = '?';
 15047  004408  C0A8  FFD9         	movff	printMDF@p,fsr2l
 15048  00440C  C0A9  FFDA         	movff	printMDF@p+1,fsr2h
 15049  004410  0E3F               	movlw	63
 15050  004412  6EDF               	movwf	indf2,c
 15051  004414  D7F5               	goto	l11496
 15052  004416                     l11502:
 15053                           
 15054                           ; BSR set to: 0
 15055  004416  2BAA               	incf	printMDF@i& (0+255),f,b
 15056                           
 15057                           ; BSR set to: 0
 15058  004418  0E1F               	movlw	31
 15059  00441A  65AA               	cpfsgt	printMDF@i& (0+255),b
 15060  00441C  D7DE               	goto	l11492
 15061                           
 15062                           ; BSR set to: 0
 15063                           ;main.c: 2300: }
 15064                           ;main.c: 2301: }
 15065                           ;main.c: 2303: putsUSART(wrkbuf);
 15066  00441E  0101               	movlb	1	; () banked
 15067  004420  0E01               	movlw	high _wrkbuf
 15068  004422  6E1B               	movwf	?_putsUSART+1,c
 15069  004424  0E70               	movlw	low _wrkbuf
 15070  004426  6E1A               	movwf	?_putsUSART,c
 15071  004428  ECE6  F025         	call	_putsUSART	;wreg free
 15072                           
 15073                           ;main.c: 2304: putsUSART((char *) "\r\n");
 15074  00442C  0E74               	movlw	high (STR_188+50)
 15075  00442E  6E1B               	movwf	?_putsUSART+1,c
 15076  004430  0EAE               	movlw	low (STR_188+50)
 15077  004432  6E1A               	movwf	?_putsUSART,c
 15078  004434  EFE6  F025         	goto	_putsUSART	;wreg free
 15079  004438                     __end_of_printMDF:
 15080                           	opt stack 0
 15081                           tblptru	equ	0xFF8
 15082                           tblptrh	equ	0xFF7
 15083                           tblptrl	equ	0xFF6
 15084                           tablat	equ	0xFF5
 15085                           prodh	equ	0xFF4
 15086                           prodl	equ	0xFF3
 15087                           intcon	equ	0xFF2
 15088                           indf0	equ	0xFEF
 15089                           postinc0	equ	0xFEE
 15090                           fsr0h	equ	0xFEA
 15091                           fsr0l	equ	0xFE9
 15092                           wreg	equ	0xFE8
 15093                           indf1	equ	0xFE7
 15094                           postinc1	equ	0xFE6
 15095                           postdec1	equ	0xFE5
 15096                           fsr1h	equ	0xFE2
 15097                           fsr1l	equ	0xFE1
 15098                           indf2	equ	0xFDF
 15099                           postinc2	equ	0xFDE
 15100                           postdec2	equ	0xFDD
 15101                           plusw2	equ	0xFDB
 15102                           fsr2h	equ	0xFDA
 15103                           fsr2l	equ	0xFD9
 15104                           status	equ	0xFD8
 15105                           
 15106 ;; *************** function _printGUID *****************
 15107 ;; Defined at:
 15108 ;;		line 2242 in file "main.c"
 15109 ;; Parameters:    Size  Location     Type
 15110 ;;  nodeid          1    wreg     unsigned char 
 15111 ;; Auto vars:     Size  Location     Type
 15112 ;;  nodeid          1   70[BANK0 ] unsigned char 
 15113 ;;  buf             3   71[BANK0 ] unsigned char [3]
 15114 ;;  i               1   75[BANK0 ] unsigned char 
 15115 ;;  value           1   74[BANK0 ] unsigned char 
 15116 ;; Return value:  Size  Location     Type
 15117 ;;		None               void
 15118 ;; Registers used:
 15119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15120 ;; Tracked objects:
 15121 ;;		On entry : D/2
 15122 ;;		On exit  : 0/0
 15123 ;;		Unchanged: 0/0
 15124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15125 ;;      Params:         0       0       0       0       0       0       0
 15126 ;;      Locals:         0       6       0       0       0       0       0
 15127 ;;      Temps:          0       0       0       0       0       0       0
 15128 ;;      Totals:         0       6       0       0       0       0       0
 15129 ;;Total ram usage:        6 bytes
 15130 ;; Hardware stack levels used:    1
 15131 ;; Hardware stack levels required when called:    7
 15132 ;; This function calls:
 15133 ;;		_putsUSART
 15134 ;;		_memset
 15135 ;;		_strlen
 15136 ;;		_itoa
 15137 ;;		_readRegister
 15138 ;;		_strcat
 15139 ;; This function is called by:
 15140 ;;		_doModeVerbose
 15141 ;;		_findNodes
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           	psect	text27
 15146  0035D4                     __ptext27:
 15147                           	opt stack 0
 15148  0035D4                     _printGUID:
 15149                           	opt stack 22
 15150                           
 15151                           ;incstack = 0
 15152                           ;incstack = 0
 15153                           ;printGUID@nodeid stored from wreg
 15154  0035D4  CFE8 F0A6          	movff	wreg,printGUID@nodeid
 15155                           
 15156                           ;main.c: 2243: uint8_t i;
 15157                           ;main.c: 2244: uint8_t value;
 15158                           ;main.c: 2245: char buf[3];
 15159                           ;main.c: 2247: memset(wrkbuf, 0, sizeof (wrkbuf));
 15160  0035D8  0101               	movlb	1	; () banked
 15161  0035DA  0E01               	movlw	high _wrkbuf
 15162  0035DC  6E1A               	movwf	?_memset+1,c
 15163  0035DE  0E70               	movlw	low _wrkbuf
 15164  0035E0  6E19               	movwf	?_memset,c
 15165  0035E2  6A1C               	clrf	?_memset+3,c
 15166  0035E4  6A1B               	clrf	?_memset+2,c
 15167  0035E6  6A1E               	clrf	?_memset+5,c
 15168  0035E8  0E50               	movlw	80
 15169  0035EA  6E1D               	movwf	?_memset+4,c
 15170  0035EC  EC57  F028         	call	_memset	;wreg free
 15171                           
 15172                           ;main.c: 2248: putsUSART((char *) "GUID = ");
 15173  0035F0  0E7E               	movlw	high STR_234
 15174  0035F2  6E1B               	movwf	?_putsUSART+1,c
 15175  0035F4  0EE6               	movlw	low STR_234
 15176  0035F6  6E1A               	movwf	?_putsUSART,c
 15177  0035F8  ECE6  F025         	call	_putsUSART	;wreg free
 15178                           
 15179                           ;main.c: 2250: for (i = 0; i < 16; i++) {
 15180  0035FC  0100               	movlb	0	; () banked
 15181  0035FE  6BAB               	clrf	printGUID@i& (0+255),b
 15182  003600                     l11458:
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;main.c: 2251: if (readRegister(nodeid,
 15186                           ;main.c: 2252: 0xD0 + i,
 15187                           ;main.c: 2253: rwtimeout,
 15188                           ;main.c: 2254: &value)) {
 15189  003600  51AB               	movf	printGUID@i& (0+255),w,b
 15190  003602  0FD0               	addlw	208
 15191  003604  6F9E               	movwf	?_readRegister& (0+255),b
 15192  003606  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15193  00360A  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15194  00360C  0EAA               	movlw	low printGUID@value
 15195  00360E  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15196  003610  51A6               	movf	printGUID@nodeid& (0+255),w,b
 15197  003612  ECE1  F020         	call	_readRegister
 15198  003616  0900               	iorlw	0
 15199  003618  E02A               	bz	l11468
 15200                           
 15201                           ;main.c: 2255: itoa(buf, value, 16);
 15202  00361A  0100               	movlb	0	; () banked
 15203  00361C  0E00               	movlw	high printGUID@buf
 15204  00361E  6E2A               	movwf	?_itoa+1,c
 15205  003620  0EA7               	movlw	low printGUID@buf
 15206  003622  6E29               	movwf	?_itoa,c
 15207  003624  C0AA  F02B         	movff	printGUID@value,?_itoa+2
 15208  003628  6A2C               	clrf	?_itoa+3,c
 15209  00362A  6A2E               	clrf	?_itoa+5,c
 15210  00362C  0E10               	movlw	16
 15211  00362E  6E2D               	movwf	?_itoa+4,c
 15212  003630  ECD9  F027         	call	_itoa	;wreg free
 15213                           
 15214                           ;main.c: 2256: if (1 == strlen(buf)) {
 15215  003634  0100               	movlb	0	; () banked
 15216  003636  0E00               	movlw	high printGUID@buf
 15217  003638  6E1A               	movwf	?_strlen+1,c
 15218  00363A  0EA7               	movlw	low printGUID@buf
 15219  00363C  6E19               	movwf	?_strlen,c
 15220  00363E  EC82  F027         	call	_strlen	;wreg free
 15221  003642  0419               	decf	?_strlen,w,c
 15222  003644  101A               	iorwf	?_strlen+1,w,c
 15223  003646  E10F               	bnz	l11466
 15224                           
 15225                           ;main.c: 2257: strcat(wrkbuf, "0");
 15226  003648  0101               	movlb	1	; () banked
 15227  00364A  0E01               	movlw	high _wrkbuf
 15228  00364C  6E1A               	movwf	?_strcat+1,c
 15229  00364E  0E70               	movlw	low _wrkbuf
 15230  003650  6E19               	movwf	?_strcat,c
 15231  003652  0E7F               	movlw	high STR_235
 15232  003654  6E1C               	movwf	?_strcat+3,c
 15233  003656  0EF9               	movlw	low STR_235
 15234  003658  6E1B               	movwf	?_strcat+2,c
 15235  00365A  ECBB  F025         	call	_strcat	;wreg free
 15236                           
 15237                           ;main.c: 2258: strcat(wrkbuf, buf);
 15238  00365E  D833               	call	PL76	;call to abstracted procedure
 15239  003660  ECBB  F025         	call	_strcat	;wreg free
 15240                           
 15241                           ;main.c: 2259: } else {
 15242  003664  D00F               	goto	l11470
 15243  003666                     l11466:
 15244                           
 15245                           ;main.c: 2260: strcat(wrkbuf, buf);
 15246  003666  D82F               	call	PL76	;call to abstracted procedure
 15247  003668  ECBB  F025         	call	_strcat	;wreg free
 15248  00366C  D00B               	goto	l11470
 15249  00366E                     l11468:
 15250                           
 15251                           ;main.c: 2264: strcat(wrkbuf, "--");
 15252  00366E  0101               	movlb	1	; () banked
 15253  003670  0E01               	movlw	high _wrkbuf
 15254  003672  6E1A               	movwf	?_strcat+1,c
 15255  003674  0E70               	movlw	low _wrkbuf
 15256  003676  6E19               	movwf	?_strcat,c
 15257  003678  0E7F               	movlw	high STR_236
 15258  00367A  6E1C               	movwf	?_strcat+3,c
 15259  00367C  0EE5               	movlw	low STR_236
 15260  00367E  6E1B               	movwf	?_strcat+2,c
 15261  003680  ECBB  F025         	call	_strcat	;wreg free
 15262  003684                     l11470:
 15263                           
 15264                           ;main.c: 2265: }
 15265                           ;main.c: 2267: if (i < 15) {
 15266  003684  0E0F               	movlw	15
 15267  003686  0100               	movlb	0	; () banked
 15268  003688  61AB               	cpfslt	printGUID@i& (0+255),b
 15269  00368A  D00B               	goto	l11474
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;main.c: 2268: strcat(wrkbuf, ":");
 15273  00368C  0101               	movlb	1	; () banked
 15274  00368E  0E01               	movlw	high _wrkbuf
 15275  003690  6E1A               	movwf	?_strcat+1,c
 15276  003692  0E70               	movlw	low _wrkbuf
 15277  003694  6E19               	movwf	?_strcat,c
 15278  003696  0E7F               	movlw	high STR_237
 15279  003698  6E1C               	movwf	?_strcat+3,c
 15280  00369A  0EFB               	movlw	low STR_237
 15281  00369C  6E1B               	movwf	?_strcat+2,c
 15282  00369E  ECBB  F025         	call	_strcat	;wreg free
 15283  0036A2                     l11474:
 15284  0036A2  0100               	movlb	0	; () banked
 15285  0036A4  2BAB               	incf	printGUID@i& (0+255),f,b
 15286                           
 15287                           ; BSR set to: 0
 15288  0036A6  0E0F               	movlw	15
 15289  0036A8  65AB               	cpfsgt	printGUID@i& (0+255),b
 15290  0036AA  D7AA               	goto	l11458
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;main.c: 2269: }
 15294                           ;main.c: 2271: }
 15295                           ;main.c: 2273: putsUSART(wrkbuf);
 15296  0036AC  0101               	movlb	1	; () banked
 15297  0036AE  0E01               	movlw	high _wrkbuf
 15298  0036B0  6E1B               	movwf	?_putsUSART+1,c
 15299  0036B2  0E70               	movlw	low _wrkbuf
 15300  0036B4  6E1A               	movwf	?_putsUSART,c
 15301  0036B6  ECE6  F025         	call	_putsUSART	;wreg free
 15302                           
 15303                           ;main.c: 2274: putsUSART((char *) "\r\n");
 15304  0036BA  0E74               	movlw	high (STR_188+50)
 15305  0036BC  6E1B               	movwf	?_putsUSART+1,c
 15306  0036BE  0EAE               	movlw	low (STR_188+50)
 15307  0036C0  6E1A               	movwf	?_putsUSART,c
 15308  0036C2  EFE6  F025         	goto	_putsUSART	;wreg free
 15309  0036C6                     __end_of_printGUID:
 15310                           	opt stack 0
 15311  0036C6                     PL76:
 15312                           	opt stack 22
 15313  0036C6  0E01               	movlw	high _wrkbuf
 15314  0036C8  6E1A               	movwf	?_strcat+1,c
 15315  0036CA  0E70               	movlw	low _wrkbuf
 15316  0036CC  6E19               	movwf	?_strcat,c
 15317  0036CE  0100               	movlb	0	; () banked
 15318  0036D0  0E00               	movlw	high printGUID@buf
 15319  0036D2  6E1C               	movwf	?_strcat+3,c
 15320  0036D4  0EA7               	movlw	low printGUID@buf
 15321  0036D6  6E1B               	movwf	?_strcat+2,c
 15322  0036D8  0012               	return	
 15323  0036DA                     __end_ofPL76:
 15324                           	opt stack 0
 15325                           tblptru	equ	0xFF8
 15326                           tblptrh	equ	0xFF7
 15327                           tblptrl	equ	0xFF6
 15328                           tablat	equ	0xFF5
 15329                           prodh	equ	0xFF4
 15330                           prodl	equ	0xFF3
 15331                           intcon	equ	0xFF2
 15332                           indf0	equ	0xFEF
 15333                           postinc0	equ	0xFEE
 15334                           fsr0h	equ	0xFEA
 15335                           fsr0l	equ	0xFE9
 15336                           wreg	equ	0xFE8
 15337                           indf1	equ	0xFE7
 15338                           postinc1	equ	0xFE6
 15339                           postdec1	equ	0xFE5
 15340                           fsr1h	equ	0xFE2
 15341                           fsr1l	equ	0xFE1
 15342                           indf2	equ	0xFDF
 15343                           postinc2	equ	0xFDE
 15344                           postdec2	equ	0xFDD
 15345                           plusw2	equ	0xFDB
 15346                           fsr2h	equ	0xFDA
 15347                           fsr2l	equ	0xFD9
 15348                           status	equ	0xFD8
 15349                           
 15350 ;; *************** function _printNodeFirmwareVersion *****************
 15351 ;; Defined at:
 15352 ;;		line 2311 in file "main.c"
 15353 ;; Parameters:    Size  Location     Type
 15354 ;;  nodeid          1    wreg     unsigned char 
 15355 ;; Auto vars:     Size  Location     Type
 15356 ;;  nodeid          1   70[BANK0 ] unsigned char 
 15357 ;;  buf             3   71[BANK0 ] unsigned char [3]
 15358 ;;  i               1   75[BANK0 ] unsigned char 
 15359 ;;  value           1   74[BANK0 ] unsigned char 
 15360 ;; Return value:  Size  Location     Type
 15361 ;;		None               void
 15362 ;; Registers used:
 15363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15364 ;; Tracked objects:
 15365 ;;		On entry : D/2
 15366 ;;		On exit  : 0/0
 15367 ;;		Unchanged: 0/0
 15368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15369 ;;      Params:         0       0       0       0       0       0       0
 15370 ;;      Locals:         0       6       0       0       0       0       0
 15371 ;;      Temps:          0       0       0       0       0       0       0
 15372 ;;      Totals:         0       6       0       0       0       0       0
 15373 ;;Total ram usage:        6 bytes
 15374 ;; Hardware stack levels used:    1
 15375 ;; Hardware stack levels required when called:    7
 15376 ;; This function calls:
 15377 ;;		_putsUSART
 15378 ;;		_memset
 15379 ;;		_itoa
 15380 ;;		_readRegister
 15381 ;;		_strcat
 15382 ;; This function is called by:
 15383 ;;		_doModeVerbose
 15384 ;;		_findNodes
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           	psect	text28
 15389  003DF2                     __ptext28:
 15390                           	opt stack 0
 15391  003DF2                     _printNodeFirmwareVersion:
 15392                           	opt stack 22
 15393                           
 15394                           ;incstack = 0
 15395                           ;incstack = 0
 15396                           ;printNodeFirmwareVersion@nodeid stored from wreg
 15397  003DF2  CFE8 F0A6          	movff	wreg,printNodeFirmwareVersion@nodeid
 15398                           
 15399                           ;main.c: 2312: uint8_t i;
 15400                           ;main.c: 2313: uint8_t value;
 15401                           ;main.c: 2314: char buf[3];
 15402                           ;main.c: 2316: memset(wrkbuf, 0, sizeof (wrkbuf));
 15403  003DF6  0101               	movlb	1	; () banked
 15404  003DF8  0E01               	movlw	high _wrkbuf
 15405  003DFA  6E1A               	movwf	?_memset+1,c
 15406  003DFC  0E70               	movlw	low _wrkbuf
 15407  003DFE  6E19               	movwf	?_memset,c
 15408  003E00  6A1C               	clrf	?_memset+3,c
 15409  003E02  6A1B               	clrf	?_memset+2,c
 15410  003E04  6A1E               	clrf	?_memset+5,c
 15411  003E06  0E50               	movlw	80
 15412  003E08  6E1D               	movwf	?_memset+4,c
 15413  003E0A  EC57  F028         	call	_memset	;wreg free
 15414                           
 15415                           ;main.c: 2317: putsUSART((char *) "Firmware version = ");
 15416  003E0E  0E7D               	movlw	high STR_241
 15417  003E10  6E1B               	movwf	?_putsUSART+1,c
 15418  003E12  0EBF               	movlw	low STR_241
 15419  003E14  6E1A               	movwf	?_putsUSART,c
 15420  003E16  ECE6  F025         	call	_putsUSART	;wreg free
 15421                           
 15422                           ;main.c: 2319: for (i = 0; i < 3; i++) {
 15423  003E1A  0100               	movlb	0	; () banked
 15424  003E1C  6BAB               	clrf	printNodeFirmwareVersion@i& (0+255),b
 15425  003E1E                     l11430:
 15426                           
 15427                           ; BSR set to: 0
 15428                           ;main.c: 2320: if (readRegister(nodeid,
 15429                           ;main.c: 2321: 0x94 + i,
 15430                           ;main.c: 2322: rwtimeout,
 15431                           ;main.c: 2323: &value)) {
 15432  003E1E  51AB               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 15433  003E20  0F94               	addlw	148
 15434  003E22  6F9E               	movwf	?_readRegister& (0+255),b
 15435  003E24  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15436  003E28  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15437  003E2A  0EAA               	movlw	low printNodeFirmwareVersion@value
 15438  003E2C  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15439  003E2E  51A6               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 15440  003E30  ECE1  F020         	call	_readRegister
 15441  003E34  0900               	iorlw	0
 15442  003E36  E019               	bz	l11436
 15443                           
 15444                           ;main.c: 2324: itoa(buf, value, 16);
 15445  003E38  0100               	movlb	0	; () banked
 15446  003E3A  0E00               	movlw	high printNodeFirmwareVersion@buf
 15447  003E3C  6E2A               	movwf	?_itoa+1,c
 15448  003E3E  0EA7               	movlw	low printNodeFirmwareVersion@buf
 15449  003E40  6E29               	movwf	?_itoa,c
 15450  003E42  C0AA  F02B         	movff	printNodeFirmwareVersion@value,?_itoa+2
 15451  003E46  6A2C               	clrf	?_itoa+3,c
 15452  003E48  6A2E               	clrf	?_itoa+5,c
 15453  003E4A  0E10               	movlw	16
 15454  003E4C  6E2D               	movwf	?_itoa+4,c
 15455  003E4E  ECD9  F027         	call	_itoa	;wreg free
 15456                           
 15457                           ;main.c: 2325: strcat(wrkbuf, buf);
 15458  003E52  0E01               	movlw	high _wrkbuf
 15459  003E54  6E1A               	movwf	?_strcat+1,c
 15460  003E56  0E70               	movlw	low _wrkbuf
 15461  003E58  6E19               	movwf	?_strcat,c
 15462  003E5A  0100               	movlb	0	; () banked
 15463  003E5C  0E00               	movlw	high printNodeFirmwareVersion@buf
 15464  003E5E  6E1C               	movwf	?_strcat+3,c
 15465  003E60  0EA7               	movlw	low printNodeFirmwareVersion@buf
 15466  003E62  6E1B               	movwf	?_strcat+2,c
 15467  003E64  ECBB  F025         	call	_strcat	;wreg free
 15468                           
 15469                           ;main.c: 2326: } else {
 15470  003E68  D00B               	goto	l11438
 15471  003E6A                     l11436:
 15472                           
 15473                           ;main.c: 2327: strcat(wrkbuf, "?");
 15474  003E6A  0101               	movlb	1	; () banked
 15475  003E6C  0E01               	movlw	high _wrkbuf
 15476  003E6E  6E1A               	movwf	?_strcat+1,c
 15477  003E70  0E70               	movlw	low _wrkbuf
 15478  003E72  6E19               	movwf	?_strcat,c
 15479  003E74  0E7F               	movlw	high STR_242
 15480  003E76  6E1C               	movwf	?_strcat+3,c
 15481  003E78  0EFD               	movlw	low STR_242
 15482  003E7A  6E1B               	movwf	?_strcat+2,c
 15483  003E7C  ECBB  F025         	call	_strcat	;wreg free
 15484  003E80                     l11438:
 15485                           
 15486                           ;main.c: 2328: }
 15487                           ;main.c: 2330: if (i < 2) {
 15488  003E80  0E02               	movlw	2
 15489  003E82  0100               	movlb	0	; () banked
 15490  003E84  61AB               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 15491  003E86  D00B               	goto	l11442
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;main.c: 2331: strcat(wrkbuf, ".");
 15495  003E88  0101               	movlb	1	; () banked
 15496  003E8A  0E01               	movlw	high _wrkbuf
 15497  003E8C  6E1A               	movwf	?_strcat+1,c
 15498  003E8E  0E70               	movlw	low _wrkbuf
 15499  003E90  6E19               	movwf	?_strcat,c
 15500  003E92  0E7F               	movlw	high STR_243
 15501  003E94  6E1C               	movwf	?_strcat+3,c
 15502  003E96  0EF7               	movlw	low STR_243
 15503  003E98  6E1B               	movwf	?_strcat+2,c
 15504  003E9A  ECBB  F025         	call	_strcat	;wreg free
 15505  003E9E                     l11442:
 15506  003E9E  0100               	movlb	0	; () banked
 15507  003EA0  2BAB               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 15508                           
 15509                           ; BSR set to: 0
 15510  003EA2  0E02               	movlw	2
 15511  003EA4  65AB               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 15512  003EA6  D7BB               	goto	l11430
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;main.c: 2332: }
 15516                           ;main.c: 2334: }
 15517                           ;main.c: 2336: putsUSART(wrkbuf);
 15518  003EA8  0101               	movlb	1	; () banked
 15519  003EAA  0E01               	movlw	high _wrkbuf
 15520  003EAC  6E1B               	movwf	?_putsUSART+1,c
 15521  003EAE  0E70               	movlw	low _wrkbuf
 15522  003EB0  6E1A               	movwf	?_putsUSART,c
 15523  003EB2  ECE6  F025         	call	_putsUSART	;wreg free
 15524                           
 15525                           ;main.c: 2337: putsUSART((char *) "\r\n");
 15526  003EB6  0E74               	movlw	high (STR_188+50)
 15527  003EB8  6E1B               	movwf	?_putsUSART+1,c
 15528  003EBA  0EAE               	movlw	low (STR_188+50)
 15529  003EBC  6E1A               	movwf	?_putsUSART,c
 15530  003EBE  EFE6  F025         	goto	_putsUSART	;wreg free
 15531  003EC2                     __end_of_printNodeFirmwareVersion:
 15532                           	opt stack 0
 15533                           tblptru	equ	0xFF8
 15534                           tblptrh	equ	0xFF7
 15535                           tblptrl	equ	0xFF6
 15536                           tablat	equ	0xFF5
 15537                           prodh	equ	0xFF4
 15538                           prodl	equ	0xFF3
 15539                           intcon	equ	0xFF2
 15540                           indf0	equ	0xFEF
 15541                           postinc0	equ	0xFEE
 15542                           fsr0h	equ	0xFEA
 15543                           fsr0l	equ	0xFE9
 15544                           wreg	equ	0xFE8
 15545                           indf1	equ	0xFE7
 15546                           postinc1	equ	0xFE6
 15547                           postdec1	equ	0xFE5
 15548                           fsr1h	equ	0xFE2
 15549                           fsr1l	equ	0xFE1
 15550                           indf2	equ	0xFDF
 15551                           postinc2	equ	0xFDE
 15552                           postdec2	equ	0xFDD
 15553                           plusw2	equ	0xFDB
 15554                           fsr2h	equ	0xFDA
 15555                           fsr2l	equ	0xFD9
 15556                           status	equ	0xFD8
 15557                           
 15558 ;; *************** function _strcat *****************
 15559 ;; Defined at:
 15560 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 15561 ;; Parameters:    Size  Location     Type
 15562 ;;  to              2   24[COMRAM] PTR unsigned char 
 15563 ;;		 -> wrkbuf(80), 
 15564 ;;  from            2   26[COMRAM] PTR const unsigned char 
 15565 ;;		 -> STR_243(2), STR_242(2), printNodeFirmwareVersion@buf(3), STR_237(2), 
 15566 ;;		 -> STR_236(3), STR_235(2), printGUID@buf(3), 
 15567 ;; Auto vars:     Size  Location     Type
 15568 ;;  cp              2   28[COMRAM] PTR unsigned char 
 15569 ;;		 -> wrkbuf(80), 
 15570 ;; Return value:  Size  Location     Type
 15571 ;;                  2   24[COMRAM] PTR unsigned char 
 15572 ;; Registers used:
 15573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15574 ;; Tracked objects:
 15575 ;;		On entry : E/1
 15576 ;;		On exit  : 0/0
 15577 ;;		Unchanged: 0/0
 15578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15579 ;;      Params:         4       0       0       0       0       0       0
 15580 ;;      Locals:         2       0       0       0       0       0       0
 15581 ;;      Temps:          0       0       0       0       0       0       0
 15582 ;;      Totals:         6       0       0       0       0       0       0
 15583 ;;Total ram usage:        6 bytes
 15584 ;; Hardware stack levels used:    1
 15585 ;; Hardware stack levels required when called:    2
 15586 ;; This function calls:
 15587 ;;		Nothing
 15588 ;; This function is called by:
 15589 ;;		_printGUID
 15590 ;;		_printNodeFirmwareVersion
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594                           	psect	text29
 15595  004B76                     __ptext29:
 15596                           	opt stack 0
 15597  004B76                     _strcat:
 15598                           	opt stack 26
 15599                           
 15600                           ;incstack = 0
 15601                           ;incstack = 0
 15602  004B76  C019  F01D         	movff	strcat@to,strcat@cp
 15603  004B7A  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
 15604  004B7E  D002               	goto	l11994
 15605  004B80                     l11992:
 15606  004B80  4A1D               	infsnz	strcat@cp,f,c
 15607  004B82  2A1E               	incf	strcat@cp+1,f,c
 15608  004B84                     l11994:
 15609  004B84  C01D  FFD9         	movff	strcat@cp,fsr2l
 15610  004B88  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15611  004B8C  50DF               	movf	indf2,w,c
 15612  004B8E  E005               	bz	l11998
 15613  004B90  D7F7               	goto	l11992
 15614  004B92                     l11996:
 15615  004B92  4A1D               	infsnz	strcat@cp,f,c
 15616  004B94  2A1E               	incf	strcat@cp+1,f,c
 15617  004B96  4A1B               	infsnz	strcat@from,f,c
 15618  004B98  2A1C               	incf	strcat@from+1,f,c
 15619  004B9A                     l11998:
 15620  004B9A  C01B  FFF6         	movff	strcat@from,tblptrl
 15621  004B9E  C01C  FFF7         	movff	strcat@from+1,tblptrh
 15622  004BA2  6AF8               	clrf	tblptru,c
 15623  004BA4  C01D  FFD9         	movff	strcat@cp,fsr2l
 15624  004BA8  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15625  004BAC  0E05               	movlw	(high __ramtop+-1)
 15626  004BAE  64F7               	cpfsgt	tblptrh,c
 15627  004BB0  D003               	bra	u15577
 15628  004BB2  0008               	tblrd		*
 15629  004BB4  50F5               	movf	tablat,w,c
 15630  004BB6  D005               	bra	u15570
 15631  004BB8                     u15577:
 15632  004BB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 15633  004BBC  CFF7 FFEA          	movff	tblptrh,fsr0h
 15634  004BC0  50EF               	movf	indf0,w,c
 15635  004BC2                     u15570:
 15636  004BC2  6EDF               	movwf	indf2,c
 15637  004BC4  50DF               	movf	indf2,w,c
 15638  004BC6  B4D8               	btfsc	status,2,c
 15639  004BC8  0012               	return	
 15640  004BCA  D7E3               	goto	l11996
 15641  004BCC                     __end_of_strcat:
 15642                           	opt stack 0
 15643                           tblptru	equ	0xFF8
 15644                           tblptrh	equ	0xFF7
 15645                           tblptrl	equ	0xFF6
 15646                           tablat	equ	0xFF5
 15647                           prodh	equ	0xFF4
 15648                           prodl	equ	0xFF3
 15649                           intcon	equ	0xFF2
 15650                           indf0	equ	0xFEF
 15651                           postinc0	equ	0xFEE
 15652                           fsr0h	equ	0xFEA
 15653                           fsr0l	equ	0xFE9
 15654                           wreg	equ	0xFE8
 15655                           indf1	equ	0xFE7
 15656                           postinc1	equ	0xFE6
 15657                           postdec1	equ	0xFE5
 15658                           fsr1h	equ	0xFE2
 15659                           fsr1l	equ	0xFE1
 15660                           indf2	equ	0xFDF
 15661                           postinc2	equ	0xFDE
 15662                           postdec2	equ	0xFDD
 15663                           plusw2	equ	0xFDB
 15664                           fsr2h	equ	0xFDA
 15665                           fsr2l	equ	0xFD9
 15666                           status	equ	0xFD8
 15667                           
 15668 ;; *************** function _readRegister *****************
 15669 ;; Defined at:
 15670 ;;		line 1821 in file "main.c"
 15671 ;; Parameters:    Size  Location     Type
 15672 ;;  nodeid          1    wreg     unsigned char 
 15673 ;;  reg             1   62[BANK0 ] unsigned char 
 15674 ;;  timeout         2   63[BANK0 ] unsigned short 
 15675 ;;  value           1   65[BANK0 ] PTR unsigned char 
 15676 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 15677 ;; Auto vars:     Size  Location     Type
 15678 ;;  nodeid          1   48[COMRAM] unsigned char 
 15679 ;; Return value:  Size  Location     Type
 15680 ;;                  1    wreg      enum E15660
 15681 ;; Registers used:
 15682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15683 ;; Tracked objects:
 15684 ;;		On entry : F/0
 15685 ;;		On exit  : E/0
 15686 ;;		Unchanged: 0/0
 15687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15688 ;;      Params:         0       4       0       0       0       0       0
 15689 ;;      Locals:         1       0       0       0       0       0       0
 15690 ;;      Temps:          0       4       0       0       0       0       0
 15691 ;;      Totals:         1       8       0       0       0       0       0
 15692 ;;Total ram usage:        9 bytes
 15693 ;; Hardware stack levels used:    1
 15694 ;; Hardware stack levels required when called:    6
 15695 ;; This function calls:
 15696 ;;		_sendVSCPFrame
 15697 ;;		_getVSCPFrame
 15698 ;; This function is called by:
 15699 ;;		_findNodes
 15700 ;;		_printGUID
 15701 ;;		_printMDF
 15702 ;;		_printNodeFirmwareVersion
 15703 ;; This function uses a non-reentrant model
 15704 ;;
 15705                           
 15706                           	psect	text30
 15707  0041C2                     __ptext30:
 15708                           	opt stack 0
 15709  0041C2                     _readRegister:
 15710                           	opt stack 22
 15711                           
 15712                           ;incstack = 0
 15713                           ;incstack = 0
 15714                           ;readRegister@nodeid stored from wreg
 15715  0041C2  CFE8 F031          	movff	wreg,readRegister@nodeid
 15716                           
 15717                           ; BSR set to: 0
 15718                           ;main.c: 1822: vscpData[ 0 ] = nodeid;
 15719  0041C6  C031  F040         	movff	readRegister@nodeid,_vscpData
 15720                           
 15721                           ; BSR set to: 0
 15722                           ;main.c: 1823: vscpData[ 1 ] = reg;
 15723  0041CA  C09E  F041         	movff	readRegister@reg,_vscpData+1
 15724                           
 15725                           ; BSR set to: 0
 15726                           ;main.c: 1825: if (sendVSCPFrame(0,
 15727                           ;main.c: 1826: 9,
 15728                           ;main.c: 1827: 0,
 15729                           ;main.c: 1828: 0,
 15730                           ;main.c: 1829: 2,
 15731                           ;main.c: 1830: vscpData)) {
 15732  0041CE  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15733  0041D0  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 15734  0041D2  0E09               	movlw	9
 15735  0041D4  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15736  0041D6  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15737  0041D8  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15738  0041DA  0E02               	movlw	2
 15739  0041DC  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15740  0041DE  0E40               	movlw	low _vscpData
 15741  0041E0  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15742  0041E2  EC28  F020         	call	_sendVSCPFrame	;wreg free
 15743  0041E6  0900               	iorlw	0
 15744  0041E8  E03E               	bz	l11986
 15745                           
 15746                           ;main.c: 1832: timekeeper = 0;
 15747  0041EA  0100               	movlb	0	; () banked
 15748  0041EC  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 15749  0041EE  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15750  0041F0  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15751  0041F2  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15752                           
 15753                           ;main.c: 1833: while (timekeeper < timeout) {
 15754  0041F4  D028               	goto	l11984
 15755  0041F6                     l968:
 15756                           
 15757                           ; BSR set to: 0
 15758  0041F6  0004               	clrwdt		;# 
 15759                           
 15760                           ;main.c: 1837: if (getVSCPFrame(&vscpClass,
 15761                           ;main.c: 1838: &vscpType,
 15762                           ;main.c: 1839: &vscpNodeId,
 15763                           ;main.c: 1840: &vscpPriority,
 15764                           ;main.c: 1841: &vscpSize,
 15765                           ;main.c: 1842: vscpData)) {
 15766  0041F8  0100               	movlb	0	; () banked
 15767  0041FA  0EDF               	movlw	low _vscpType
 15768  0041FC  6F60               	movwf	?_getVSCPFrame& (0+255),b
 15769  0041FE  0EDC               	movlw	low _vscpNodeId
 15770  004200  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15771  004202  0EDD               	movlw	low _vscpPriority
 15772  004204  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15773  004206  0EDE               	movlw	low _vscpSize
 15774  004208  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15775  00420A  0E40               	movlw	low _vscpData
 15776  00420C  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15777  00420E  0EDA               	movlw	_vscpClass& (0+255)
 15778  004210  ECF2  F022         	call	_getVSCPFrame
 15779  004214  0900               	iorlw	0
 15780  004216  E017               	bz	l11984
 15781                           
 15782                           ;main.c: 1843: if ((nodeid == vscpNodeId) &&
 15783                           ;main.c: 1844: (0 == vscpClass) &&
 15784                           ;main.c: 1845: (10 == vscpType) &&
 15785                           ;main.c: 1846: (2 == vscpSize) &&
 15786                           ;main.c: 1847: (reg == vscpData[ 0 ])) {
 15787  004218  0100               	movlb	0	; () banked
 15788  00421A  51DC               	movf	_vscpNodeId& (0+255),w,b
 15789  00421C  6231               	cpfseq	readRegister@nodeid,c
 15790  00421E  D013               	goto	l11984
 15791                           
 15792                           ; BSR set to: 0
 15793  004220  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 15794  004222  11DA               	iorwf	_vscpClass& (0+255),w,b
 15795  004224  E110               	bnz	l11984
 15796                           
 15797                           ; BSR set to: 0
 15798  004226  51DF               	movf	_vscpType& (0+255),w,b
 15799  004228  0A0A               	xorlw	10
 15800  00422A  E10D               	bnz	l11984
 15801                           
 15802                           ; BSR set to: 0
 15803  00422C  51DE               	movf	_vscpSize& (0+255),w,b
 15804  00422E  0A02               	xorlw	2
 15805  004230  E10A               	bnz	l11984
 15806                           
 15807                           ; BSR set to: 0
 15808  004232  5040               	movf	_vscpData,w,c
 15809  004234  639E               	cpfseq	readRegister@reg& (0+255),b
 15810  004236  D007               	goto	l11984
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;main.c: 1848: *value = vscpData[ 1 ];
 15814  004238  51A1               	movf	readRegister@value& (0+255),w,b
 15815  00423A  6ED9               	movwf	fsr2l,c
 15816  00423C  6ADA               	clrf	fsr2h,c
 15817  00423E  C041  FFDF         	movff	_vscpData+1,indf2
 15818                           
 15819                           ; BSR set to: 0
 15820                           ;main.c: 1849: return 1;
 15821  004242  0E01               	movlw	1
 15822  004244  D011               	goto	l971
 15823  004246                     l11984:
 15824  004246  0100               	movlb	0	; () banked
 15825  004248  519F               	movf	readRegister@timeout& (0+255),w,b
 15826  00424A  6FA2               	movwf	??_readRegister& (0+255),b
 15827  00424C  51A0               	movf	(readRegister@timeout+1)& (0+255),w,b
 15828  00424E  6FA3               	movwf	(??_readRegister+1)& (0+255),b
 15829  004250  6BA4               	clrf	(??_readRegister+2)& (0+255),b
 15830  004252  6BA5               	clrf	(??_readRegister+3)& (0+255),b
 15831  004254  51A2               	movf	??_readRegister& (0+255),w,b
 15832  004256  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 15833  004258  51A3               	movf	(??_readRegister+1)& (0+255),w,b
 15834  00425A  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15835  00425C  51A4               	movf	(??_readRegister+2)& (0+255),w,b
 15836  00425E  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15837  004260  51A5               	movf	(??_readRegister+3)& (0+255),w,b
 15838  004262  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15839  004264  E3C8               	bnc	l968
 15840  004266                     l11986:
 15841                           
 15842                           ;main.c: 1850: }
 15843                           ;main.c: 1851: }
 15844                           ;main.c: 1852: }
 15845                           ;main.c: 1853: }
 15846                           ;main.c: 1855: return 0;
 15847  004266  0E00               	movlw	0
 15848  004268                     l971:
 15849  004268  0012               	return	
 15850  00426A                     __end_of_readRegister:
 15851                           	opt stack 0
 15852                           tblptru	equ	0xFF8
 15853                           tblptrh	equ	0xFF7
 15854                           tblptrl	equ	0xFF6
 15855                           tablat	equ	0xFF5
 15856                           prodh	equ	0xFF4
 15857                           prodl	equ	0xFF3
 15858                           intcon	equ	0xFF2
 15859                           indf0	equ	0xFEF
 15860                           postinc0	equ	0xFEE
 15861                           fsr0h	equ	0xFEA
 15862                           fsr0l	equ	0xFE9
 15863                           wreg	equ	0xFE8
 15864                           indf1	equ	0xFE7
 15865                           postinc1	equ	0xFE6
 15866                           postdec1	equ	0xFE5
 15867                           fsr1h	equ	0xFE2
 15868                           fsr1l	equ	0xFE1
 15869                           indf2	equ	0xFDF
 15870                           postinc2	equ	0xFDE
 15871                           postdec2	equ	0xFDD
 15872                           plusw2	equ	0xFDB
 15873                           fsr2h	equ	0xFDA
 15874                           fsr2l	equ	0xFD9
 15875                           status	equ	0xFD8
 15876                           
 15877 ;; *************** function _sendVSCPFrame *****************
 15878 ;; Defined at:
 15879 ;;		line 2529 in file "main.c"
 15880 ;; Parameters:    Size  Location     Type
 15881 ;;  vscpclass       2   35[BANK0 ] unsigned short 
 15882 ;;  vscptype        1   37[BANK0 ] unsigned char 
 15883 ;;  nodeid          1   38[BANK0 ] unsigned char 
 15884 ;;  priority        1   39[BANK0 ] unsigned char 
 15885 ;;  size            1   40[BANK0 ] unsigned char 
 15886 ;;  pData           1   41[BANK0 ] PTR unsigned char 
 15887 ;;		 -> vscpData(8), 
 15888 ;; Auto vars:     Size  Location     Type
 15889 ;;  id              4   43[COMRAM] unsigned long 
 15890 ;; Return value:  Size  Location     Type
 15891 ;;                  1    wreg      unsigned char 
 15892 ;; Registers used:
 15893 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15894 ;; Tracked objects:
 15895 ;;		On entry : F/0
 15896 ;;		On exit  : E/0
 15897 ;;		Unchanged: 0/0
 15898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15899 ;;      Params:         0       7       0       0       0       0       0
 15900 ;;      Locals:         4       0       0       0       0       0       0
 15901 ;;      Temps:          0      20       0       0       0       0       0
 15902 ;;      Totals:         4      27       0       0       0       0       0
 15903 ;;Total ram usage:       31 bytes
 15904 ;; Hardware stack levels used:    1
 15905 ;; Hardware stack levels required when called:    5
 15906 ;; This function calls:
 15907 ;;		_sendCANFrame
 15908 ;; This function is called by:
 15909 ;;		_doModeVerbose
 15910 ;;		_readRegister
 15911 ;;		_readRegisterExtended
 15912 ;;		_writeRegisterExtended
 15913 ;; This function uses a non-reentrant model
 15914 ;;
 15915                           
 15916                           	psect	text31
 15917  004050                     __ptext31:
 15918                           	opt stack 0
 15919  004050                     _sendVSCPFrame:
 15920                           	opt stack 22
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;main.c: 2530: uint32_t id = ((uint32_t) priority << 26) |
 15924                           ;main.c: 2531: ((uint32_t) vscpclass << 16) |
 15925                           ;main.c: 2532: ((uint32_t) vscptype << 8) |
 15926                           ;main.c: 2533: nodeid;
 15927                           
 15928                           ;incstack = 0
 15929                           ;incstack = 0
 15930  004050  C085  F08A         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15931  004054  6B8B               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15932  004056  6B8C               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15933  004058  6B8D               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15934  00405A  C08C  F08D         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15935  00405E  C08B  F08C         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15936  004062  C08A  F08B         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15937  004066  6B8A               	clrf	??_sendVSCPFrame& (0+255),b
 15938  004068  5183               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15939  00406A  6F8E               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15940  00406C  5184               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15941  00406E  6F8F               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15942  004070  6B90               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15943  004072  6B91               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15944  004074  C08F  F091         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15945  004078  C08E  F090         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15946  00407C  6B8F               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15947  00407E  6B8E               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15948  004080  C087  F092         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15949  004084  6B93               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15950  004086  6B94               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15951  004088  6B95               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15952  00408A  0E1A               	movlw	26
 15953  00408C                     u13385:
 15954  00408C  90D8               	bcf	status,0,c
 15955  00408E  3792               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15956  004090  3793               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15957  004092  3794               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15958  004094  3795               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15959  004096  2EE8               	decfsz	wreg,f,c
 15960  004098  D7F9               	goto	u13385
 15961  00409A  518E               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15962  00409C  1192               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15963  00409E  6F96               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15964  0040A0  518F               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15965  0040A2  1193               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15966  0040A4  6F97               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15967  0040A6  5190               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15968  0040A8  1194               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15969  0040AA  6F98               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15970  0040AC  5191               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15971  0040AE  1195               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15972  0040B0  6F99               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15973  0040B2  518A               	movf	??_sendVSCPFrame& (0+255),w,b
 15974  0040B4  1196               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15975  0040B6  6F9A               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15976  0040B8  518B               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15977  0040BA  1197               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15978  0040BC  6F9B               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15979  0040BE  518C               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15980  0040C0  1198               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15981  0040C2  6F9C               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15982  0040C4  518D               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15983  0040C6  1199               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15984  0040C8  6F9D               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15985  0040CA  5186               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15986  0040CC  119A               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15987  0040CE  6E2C               	movwf	sendVSCPFrame@id,c
 15988  0040D0  519B               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15989  0040D2  6E2D               	movwf	sendVSCPFrame@id+1,c
 15990  0040D4  519C               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15991  0040D6  6E2E               	movwf	sendVSCPFrame@id+2,c
 15992  0040D8  519D               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15993  0040DA  6E2F               	movwf	sendVSCPFrame@id+3,c
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;main.c: 2535: if (!sendCANFrame(id, size, pData)) {
 15997  0040DC  C02C  F07C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15998  0040E0  C02D  F07D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15999  0040E4  C02E  F07E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 16000  0040E8  C02F  F07F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 16001  0040EC  C088  F080         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 16002  0040F0  C089  F081         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 16003  0040F4  0E0F               	movlw	15
 16004  0040F6  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
 16005  0040F8  0E5F               	movlw	__accesstop+-1
 16006  0040FA  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
 16007  0040FC  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
 16008  0040FE  ECA0  F027         	call	_sendCANFrame	;wreg free
 16009  004102  0900               	iorlw	0
 16010                           
 16011                           ;main.c: 2537: return 0;
 16012  004104  0E00               	movlw	0
 16013  004106  A4D8               	btfss	status,2,c
 16014                           
 16015                           ;main.c: 2538: }
 16016                           ;main.c: 2540: return 1;
 16017  004108  0E01               	movlw	1
 16018  00410A  0012               	return	
 16019  00410C                     __end_of_sendVSCPFrame:
 16020                           	opt stack 0
 16021                           tblptru	equ	0xFF8
 16022                           tblptrh	equ	0xFF7
 16023                           tblptrl	equ	0xFF6
 16024                           tablat	equ	0xFF5
 16025                           prodh	equ	0xFF4
 16026                           prodl	equ	0xFF3
 16027                           intcon	equ	0xFF2
 16028                           indf0	equ	0xFEF
 16029                           postinc0	equ	0xFEE
 16030                           fsr0h	equ	0xFEA
 16031                           fsr0l	equ	0xFE9
 16032                           wreg	equ	0xFE8
 16033                           indf1	equ	0xFE7
 16034                           postinc1	equ	0xFE6
 16035                           postdec1	equ	0xFE5
 16036                           fsr1h	equ	0xFE2
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           plusw2	equ	0xFDB
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function _sendCANFrame *****************
 16047 ;; Defined at:
 16048 ;;		line 2573 in file "main.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  id              4   28[BANK0 ] unsigned long 
 16051 ;;  dlc             1   32[BANK0 ] unsigned char 
 16052 ;;  pdata           2   33[BANK0 ] PTR unsigned char 
 16053 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;		None
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      unsigned char 
 16058 ;; Registers used:
 16059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16060 ;; Tracked objects:
 16061 ;;		On entry : F/0
 16062 ;;		On exit  : E/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16065 ;;      Params:         0       7       0       0       0       0       0
 16066 ;;      Locals:         0       0       0       0       0       0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0
 16068 ;;      Totals:         0       7       0       0       0       0       0
 16069 ;;Total ram usage:        7 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    4
 16072 ;; This function calls:
 16073 ;;		_ECANSendMessage
 16074 ;; This function is called by:
 16075 ;;		_doModeSLCAN
 16076 ;;		_receiveVSCPModeCanalMsg
 16077 ;;		_sendVSCPFrame
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           	psect	text32
 16082  004F40                     __ptext32:
 16083                           	opt stack 0
 16084  004F40                     _sendCANFrame:
 16085                           	opt stack 25
 16086                           
 16087                           ; BSR set to: 0
 16088                           ;main.c: 2574: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 16089                           
 16090                           ;incstack = 0
 16091                           ;incstack = 0
 16092  004F40  C07C  F023         	movff	sendCANFrame@id,?_ECANSendMessage
 16093  004F44  C07D  F024         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16094  004F48  C07E  F025         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16095  004F4C  C07F  F026         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16096  004F50  C081  F027         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16097  004F54  C082  F028         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16098  004F58  C080  F029         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16099  004F5C  0E20               	movlw	32
 16100  004F5E  6E2A               	movwf	?_ECANSendMessage+7,c
 16101  004F60  EC3C  F017         	call	_ECANSendMessage	;wreg free
 16102  004F64  0900               	iorlw	0
 16103  004F66  E107               	bnz	l11852
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;main.c: 2576: can_transmitOverruns++;
 16107  004F68  0101               	movlb	1	; () banked
 16108  004F6A  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 16109  004F6C  0E00               	movlw	0
 16110  004F6E  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 16111  004F70  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 16112  004F72  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 16113                           
 16114                           ; BSR set to: 1
 16115                           ;main.c: 2577: return 0;
 16116  004F74  D001               	goto	l1167
 16117  004F76                     l11852:
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;main.c: 2578: }
 16121                           ;main.c: 2580: return 1;
 16122  004F76  0E01               	movlw	1
 16123  004F78                     l1167:
 16124  004F78  0012               	return	
 16125  004F7A                     __end_of_sendCANFrame:
 16126                           	opt stack 0
 16127                           tblptru	equ	0xFF8
 16128                           tblptrh	equ	0xFF7
 16129                           tblptrl	equ	0xFF6
 16130                           tablat	equ	0xFF5
 16131                           prodh	equ	0xFF4
 16132                           prodl	equ	0xFF3
 16133                           intcon	equ	0xFF2
 16134                           indf0	equ	0xFEF
 16135                           postinc0	equ	0xFEE
 16136                           fsr0h	equ	0xFEA
 16137                           fsr0l	equ	0xFE9
 16138                           wreg	equ	0xFE8
 16139                           indf1	equ	0xFE7
 16140                           postinc1	equ	0xFE6
 16141                           postdec1	equ	0xFE5
 16142                           fsr1h	equ	0xFE2
 16143                           fsr1l	equ	0xFE1
 16144                           indf2	equ	0xFDF
 16145                           postinc2	equ	0xFDE
 16146                           postdec2	equ	0xFDD
 16147                           plusw2	equ	0xFDB
 16148                           fsr2h	equ	0xFDA
 16149                           fsr2l	equ	0xFD9
 16150                           status	equ	0xFD8
 16151                           
 16152 ;; *************** function _ECANSendMessage *****************
 16153 ;; Defined at:
 16154 ;;		line 617 in file "ECAN.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;  id              4   34[COMRAM] unsigned long 
 16157 ;;  data            2   38[COMRAM] PTR unsigned char 
 16158 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16159 ;;  dataLen         1   40[COMRAM] unsigned char 
 16160 ;;  msgFlags        1   41[COMRAM] enum E16306
 16161 ;; Auto vars:     Size  Location     Type
 16162 ;;  pb             18    0[BANK0 ] PTR unsigned char [9]
 16163 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16164 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16165 ;;		 -> B0CON(1), 
 16166 ;;  ptr             2   26[BANK0 ] PTR unsigned char 
 16167 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16168 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16169 ;;		 -> B0CON(1), 
 16170 ;;  tempPtr         2   22[BANK0 ] PTR unsigned char 
 16171 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16172 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16173 ;;		 -> B0CON(1), 
 16174 ;;  i               1   25[BANK0 ] unsigned char 
 16175 ;;  temp            1   24[BANK0 ] unsigned char 
 16176 ;;  tempBSEL0       1   21[BANK0 ] struct .
 16177 ;;  j               1   20[BANK0 ] unsigned char 
 16178 ;;  buffers         1   19[BANK0 ] unsigned char 
 16179 ;;  mode            1   18[BANK0 ] unsigned char 
 16180 ;; Return value:  Size  Location     Type
 16181 ;;                  1    wreg      enum E15660
 16182 ;; Registers used:
 16183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16184 ;; Tracked objects:
 16185 ;;		On entry : F/0
 16186 ;;		On exit  : F/0
 16187 ;;		Unchanged: 0/0
 16188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16189 ;;      Params:         8       0       0       0       0       0       0
 16190 ;;      Locals:         0      28       0       0       0       0       0
 16191 ;;      Temps:          1       0       0       0       0       0       0
 16192 ;;      Totals:         9      28       0       0       0       0       0
 16193 ;;Total ram usage:       37 bytes
 16194 ;; Hardware stack levels used:    1
 16195 ;; Hardware stack levels required when called:    3
 16196 ;; This function calls:
 16197 ;;		__CANIDToRegs
 16198 ;; This function is called by:
 16199 ;;		_sendCANFrame
 16200 ;; This function uses a non-reentrant model
 16201 ;;
 16202                           
 16203                           	psect	text33
 16204  002E78                     __ptext33:
 16205                           	opt stack 0
 16206  002E78                     _ECANSendMessage:
 16207                           	opt stack 25
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;ECAN.c: 619: BYTE mode;
 16211                           ;ECAN.c: 620: BYTE buffers;
 16212                           ;ECAN.c: 628: BYTE i,j;
 16213                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16214                           ;ECAN.c: 630: BYTE* pb[9];
 16215                           ;ECAN.c: 631: BYTE temp;
 16216                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16217                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16218                           
 16219                           ;incstack = 0
 16220                           ;incstack = 0
 16221  002E78  0E0F               	movlw	15	;volatile
 16222  002E7A  0100               	movlb	0	; () banked
 16223  002E7C  6F61               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 16224  002E7E  0E40               	movlw	64	;volatile
 16225  002E80  6F60               	movwf	ECANSendMessage@pb& (0+255),b
 16226                           
 16227                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16228  002E82  0E0F               	movlw	15	;volatile
 16229  002E84  6F63               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 16230  002E86  0E30               	movlw	48	;volatile
 16231  002E88  6F62               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 16232                           
 16233                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16234  002E8A  0E0F               	movlw	15	;volatile
 16235  002E8C  6F65               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 16236  002E8E  0E20               	movlw	32	;volatile
 16237  002E90  6F64               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 16238                           
 16239                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16240  002E92  0E0E               	movlw	14	;volatile
 16241  002E94  6F67               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 16242  002E96  0E20               	movlw	32	;volatile
 16243  002E98  6F66               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 16244                           
 16245                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16246  002E9A  0E0E               	movlw	14	;volatile
 16247  002E9C  6F69               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 16248  002E9E  0E30               	movlw	48	;volatile
 16249  002EA0  6F68               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 16250                           
 16251                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16252  002EA2  0E0E               	movlw	14	;volatile
 16253  002EA4  6F6B               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 16254  002EA6  0E40               	movlw	64	;volatile
 16255  002EA8  6F6A               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 16256                           
 16257                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16258  002EAA  0E0E               	movlw	14	;volatile
 16259  002EAC  6F6D               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 16260  002EAE  0E50               	movlw	80	;volatile
 16261  002EB0  6F6C               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 16262                           
 16263                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16264  002EB2  0E0E               	movlw	14	;volatile
 16265  002EB4  6F6F               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 16266  002EB6  0E60               	movlw	96	;volatile
 16267  002EB8  6F6E               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 16268                           
 16269                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16270  002EBA  0E0E               	movlw	14	;volatile
 16271  002EBC  6F71               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 16272  002EBE  0E70               	movlw	112	;volatile
 16273  002EC0  6F70               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 16274                           
 16275                           ; BSR set to: 0
 16276                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16277  002EC2  5077               	movf	3959,w,c	;volatile
 16278  002EC4  0BC0               	andlw	192
 16279  002EC6  6F72               	movwf	ECANSendMessage@mode& (0+255),b
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;ECAN.c: 660: if ( mode == 0x00 )
 16283  002EC8  6772               	tstfsz	ECANSendMessage@mode& (0+255),b
 16284  002ECA  D002               	goto	l12008
 16285                           
 16286                           ; BSR set to: 0
 16287                           ;ECAN.c: 661: buffers = 2;
 16288  002ECC  0E02               	movlw	2
 16289  002ECE  D001               	goto	L14
 16290  002ED0                     l12008:
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;ECAN.c: 662: else
 16294                           ;ECAN.c: 663: buffers = 8;
 16295  002ED0  0E08               	movlw	8
 16296  002ED2                     L14:
 16297  002ED2  6F73               	movwf	ECANSendMessage@buffers& (0+255),b
 16298                           
 16299                           ; BSR set to: 0
 16300                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16301  002ED4  010D               	movlb	13	; () banked
 16302  002ED6  90D8               	bcf	status,0,c
 16303  002ED8  31F8               	rrcf	248,w,b	;volatile
 16304  002EDA  0100               	movlb	0	; () banked
 16305  002EDC  6F75               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 16306                           
 16307                           ; BSR set to: 0
 16308                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16309  002EDE  6B79               	clrf	ECANSendMessage@i& (0+255),b
 16310  002EE0  D07E               	goto	l12068
 16311  002EE2                     l12014:
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;ECAN.c: 688: {
 16315                           ;ECAN.c: 693: ptr = pb[i];
 16316  002EE2  5179               	movf	ECANSendMessage@i& (0+255),w,b
 16317  002EE4  0D02               	mullw	2
 16318  002EE6  50F3               	movf	prodl,w,c
 16319  002EE8  0F60               	addlw	low ECANSendMessage@pb
 16320  002EEA  6ED9               	movwf	fsr2l,c
 16321  002EEC  6ADA               	clrf	fsr2h,c
 16322  002EEE  CFDE F07A          	movff	postinc2,ECANSendMessage@ptr
 16323  002EF2  CFDD F07B          	movff	postdec2,ECANSendMessage@ptr+1
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;ECAN.c: 694: tempPtr = ptr;
 16327  002EF6  C07A  F076         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16328  002EFA  C07B  F077         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16329                           
 16330                           ; BSR set to: 0
 16331                           ;ECAN.c: 702: if ( i > 2 )
 16332  002EFE  0E02               	movlw	2
 16333  002F00  6579               	cpfsgt	ECANSendMessage@i& (0+255),b
 16334  002F02  D004               	goto	l12026
 16335                           
 16336                           ; BSR set to: 0
 16337                           ;ECAN.c: 703: {
 16338                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16339  002F04  90D8               	bcf	status,0,c
 16340  002F06  3375               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16344  002F08  A175               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 16345  002F0A  D068               	goto	l12066
 16346  002F0C                     l12026:
 16347                           
 16348                           ; BSR set to: 0
 16349                           ;ECAN.c: 714: }
 16350                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16351  002F0C  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16352  002F10  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16353  002F14  50DF               	movf	indf2,w,c
 16354  002F16  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16355  002F18  B62B               	btfsc	??_ECANSendMessage,3,c
 16356  002F1A  D060               	goto	l12066
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;ECAN.c: 721: {
 16360                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16361  002F1C  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16362  002F20  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16363  002F24  0EFC               	movlw	252
 16364  002F26  16DF               	andwf	indf2,f,c
 16365                           
 16366                           ; BSR set to: 0
 16367                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16368  002F28  C02A  F02B         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16369  002F2C  0E03               	movlw	3
 16370  002F2E  162B               	andwf	??_ECANSendMessage,f,c
 16371  002F30  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16372  002F34  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16373  002F38  502B               	movf	??_ECANSendMessage,w,c
 16374  002F3A  12DF               	iorwf	indf2,f,c
 16375                           
 16376                           ; BSR set to: 0
 16377                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16378  002F3C  AC2A               	btfss	ECANSendMessage@msgFlags,6,c
 16379  002F3E  D004               	goto	l1333
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16383  002F40  5029               	movf	ECANSendMessage@dataLen,w,c
 16384  002F42  0940               	iorlw	64
 16385  002F44  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16386  002F46  D002               	goto	l12036
 16387  002F48                     l1333:
 16388                           
 16389                           ; BSR set to: 0
 16390                           ;ECAN.c: 729: else
 16391                           ;ECAN.c: 730: temp = dataLen;
 16392  002F48  C029  F078         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16393  002F4C                     l12036:
 16394                           
 16395                           ; BSR set to: 0
 16396                           ;ECAN.c: 732: *(ptr+5) = temp;
 16397  002F4C  EE20 F005          	lfsr	2,5
 16398  002F50  517A               	movf	ECANSendMessage@ptr& (0+255),w,b
 16399  002F52  26D9               	addwf	fsr2l,f,c
 16400  002F54  517B               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 16401  002F56  22DA               	addwfc	fsr2h,f,c
 16402  002F58  C078  FFDF         	movff	ECANSendMessage@temp,indf2
 16403                           
 16404                           ; BSR set to: 0
 16405                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16406  002F5C  AA2A               	btfss	ECANSendMessage@msgFlags,5,c
 16407  002F5E  D003               	goto	l1335
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;ECAN.c: 736: temp = 1;
 16411  002F60  0E01               	movlw	1
 16412  002F62  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16413  002F64  D001               	goto	l12042
 16414  002F66                     l1335:
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;ECAN.c: 738: else
 16418                           ;ECAN.c: 739: temp = 0;
 16419  002F66  6B78               	clrf	ECANSendMessage@temp& (0+255),b
 16420  002F68                     l12042:
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16424  002F68  297A               	incf	ECANSendMessage@ptr& (0+255),w,b
 16425  002F6A  6E19               	movwf	?__CANIDToRegs,c
 16426  002F6C  0E00               	movlw	0
 16427  002F6E  217B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 16428  002F70  6E1A               	movwf	?__CANIDToRegs+1,c
 16429  002F72  C023  F01B         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16430  002F76  C024  F01C         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16431  002F7A  C025  F01D         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16432  002F7E  C026  F01E         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16433  002F82  C078  F01F         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16434  002F86  EC60  F01A         	call	__CANIDToRegs	;wreg free
 16435                           
 16436                           ;ECAN.c: 745: ptr += 6;
 16437  002F8A  0E06               	movlw	6
 16438  002F8C  0100               	movlb	0	; () banked
 16439  002F8E  277A               	addwf	ECANSendMessage@ptr& (0+255),f,b
 16440  002F90  0E00               	movlw	0
 16441  002F92  237B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16445  002F94  6B74               	clrf	ECANSendMessage@j& (0+255),b
 16446  002F96  D00F               	goto	l12056
 16447  002F98                     l12048:
 16448                           
 16449                           ; BSR set to: 0
 16450                           ;ECAN.c: 748: *ptr++ = *data++;
 16451  002F98  C027  FFD9         	movff	ECANSendMessage@data,fsr2l
 16452  002F9C  C028  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16453  002FA0  C07A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16454  002FA4  C07B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16455  002FA8  CFDF FFE7          	movff	indf2,indf1
 16456                           
 16457                           ; BSR set to: 0
 16458  002FAC  4A27               	infsnz	ECANSendMessage@data,f,c
 16459  002FAE  2A28               	incf	ECANSendMessage@data+1,f,c
 16460                           
 16461                           ; BSR set to: 0
 16462  002FB0  4B7A               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 16463  002FB2  2B7B               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 16464                           
 16465                           ; BSR set to: 0
 16466  002FB4  2B74               	incf	ECANSendMessage@j& (0+255),f,b
 16467  002FB6                     l12056:
 16468                           
 16469                           ; BSR set to: 0
 16470  002FB6  5029               	movf	ECANSendMessage@dataLen,w,c
 16471  002FB8  5D74               	subwf	ECANSendMessage@j& (0+255),w,b
 16472  002FBA  E3EE               	bnc	l12048
 16473                           
 16474                           ; BSR set to: 0
 16475                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16476  002FBC  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16477  002FC0  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16478  002FC4  50DF               	movf	indf2,w,c
 16479  002FC6  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16480  002FC8  B42B               	btfsc	??_ECANSendMessage,2,c
 16481  002FCA  D006               	goto	l12062
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16485  002FCC  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16486  002FD0  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16487  002FD4  0E00               	movlw	0
 16488  002FD6  86DB               	bsf	plusw2,3,c
 16489  002FD8                     l12062:
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;ECAN.c: 755: return TRUE;
 16493  002FD8  0E01               	movlw	1
 16494  002FDA  D006               	goto	l1341
 16495  002FDC                     l12066:
 16496                           
 16497                           ; BSR set to: 0
 16498  002FDC  2B79               	incf	ECANSendMessage@i& (0+255),f,b
 16499  002FDE                     l12068:
 16500                           
 16501                           ; BSR set to: 0
 16502  002FDE  5173               	movf	ECANSendMessage@buffers& (0+255),w,b
 16503  002FE0  5D79               	subwf	ECANSendMessage@i& (0+255),w,b
 16504  002FE2  E201 D77E          	bnc	l12014
 16505                           
 16506                           ; BSR set to: 0
 16507                           ;ECAN.c: 756: }
 16508                           ;ECAN.c: 757: }
 16509                           ;ECAN.c: 760: return FALSE;
 16510  002FE6  0E00               	movlw	0
 16511  002FE8                     l1341:
 16512                           
 16513                           ; BSR set to: 0
 16514  002FE8  0012               	return	
 16515  002FEA                     __end_of_ECANSendMessage:
 16516                           	opt stack 0
 16517                           tblptru	equ	0xFF8
 16518                           tblptrh	equ	0xFF7
 16519                           tblptrl	equ	0xFF6
 16520                           tablat	equ	0xFF5
 16521                           prodh	equ	0xFF4
 16522                           prodl	equ	0xFF3
 16523                           intcon	equ	0xFF2
 16524                           indf0	equ	0xFEF
 16525                           postinc0	equ	0xFEE
 16526                           fsr0h	equ	0xFEA
 16527                           fsr0l	equ	0xFE9
 16528                           wreg	equ	0xFE8
 16529                           indf1	equ	0xFE7
 16530                           postinc1	equ	0xFE6
 16531                           postdec1	equ	0xFE5
 16532                           fsr1h	equ	0xFE2
 16533                           fsr1l	equ	0xFE1
 16534                           indf2	equ	0xFDF
 16535                           postinc2	equ	0xFDE
 16536                           postdec2	equ	0xFDD
 16537                           plusw2	equ	0xFDB
 16538                           fsr2h	equ	0xFDA
 16539                           fsr2l	equ	0xFD9
 16540                           status	equ	0xFD8
 16541                           
 16542 ;; *************** function __CANIDToRegs *****************
 16543 ;; Defined at:
 16544 ;;		line 1099 in file "ECAN.c"
 16545 ;; Parameters:    Size  Location     Type
 16546 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 16547 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16548 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16549 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 16550 ;;  val             4   26[COMRAM] unsigned long 
 16551 ;;  type            1   30[COMRAM] unsigned char 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;  Value           1   33[COMRAM] PTR struct _CAN_MESSAGE_
 16554 ;;		 -> _CANIDToRegs@val(4), 
 16555 ;; Return value:  Size  Location     Type
 16556 ;;		None               void
 16557 ;; Registers used:
 16558 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16559 ;; Tracked objects:
 16560 ;;		On entry : 0/F
 16561 ;;		On exit  : 0/0
 16562 ;;		Unchanged: 0/0
 16563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16564 ;;      Params:         7       0       0       0       0       0       0
 16565 ;;      Locals:         1       0       0       0       0       0       0
 16566 ;;      Temps:          2       0       0       0       0       0       0
 16567 ;;      Totals:        10       0       0       0       0       0       0
 16568 ;;Total ram usage:       10 bytes
 16569 ;; Hardware stack levels used:    1
 16570 ;; Hardware stack levels required when called:    2
 16571 ;; This function calls:
 16572 ;;		Nothing
 16573 ;; This function is called by:
 16574 ;;		_doModeVerbose
 16575 ;;		_ECANSendMessage
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           	psect	text34
 16580  0034C0                     __ptext34:
 16581                           	opt stack 0
 16582  0034C0                     __CANIDToRegs:
 16583                           	opt stack 25
 16584                           
 16585                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16586                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16587                           
 16588                           ; BSR set to: 0
 16589                           ;incstack = 0
 16590                           ;incstack = 0
 16591  0034C0  0E1B               	movlw	low __CANIDToRegs@val
 16592  0034C2  6E22               	movwf	__CANIDToRegs@Value,c
 16593                           
 16594                           ;ECAN.c: 1104: if ( type == 0 )
 16595  0034C4  661F               	tstfsz	__CANIDToRegs@type,c
 16596  0034C6  D022               	goto	l11528
 16597                           
 16598                           ;ECAN.c: 1105: {
 16599                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16600  0034C8  5022               	movf	__CANIDToRegs@Value,w,c
 16601  0034CA  6ED9               	movwf	fsr2l,c
 16602  0034CC  6ADA               	clrf	fsr2h,c
 16603  0034CE  50DF               	movf	indf2,w,c
 16604  0034D0  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16605  0034D2  90D8               	bcf	status,0,c
 16606  0034D4  3220               	rrcf	??__CANIDToRegs,f,c
 16607  0034D6  90D8               	bcf	status,0,c
 16608  0034D8  3220               	rrcf	??__CANIDToRegs,f,c
 16609  0034DA  90D8               	bcf	status,0,c
 16610  0034DC  3020               	rrcf	??__CANIDToRegs,w,c
 16611                           
 16612                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16613  0034DE  D862               	call	PL54	;call to abstracted procedure
 16614  0034E0  2AD9               	incf	fsr2l,f,c
 16615  0034E2  6ADA               	clrf	fsr2h,c
 16616  0034E4  D872               	call	PL96	;call to abstracted procedure
 16617  0034E6                     u14655:
 16618  0034E6  90D8               	bcf	status,0,c
 16619  0034E8  3620               	rlcf	??__CANIDToRegs,f,c
 16620  0034EA  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16621  0034EC  D7FC               	goto	u14655
 16622  0034EE  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16623                           
 16624                           ;ECAN.c: 1109: ptr++;
 16625                           
 16626                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16627  0034F2  D846               	call	PL32	;call to abstracted procedure
 16628  0034F4  D86A               	call	PL96	;call to abstracted procedure
 16629  0034F6                     u14665:
 16630  0034F6  90D8               	bcf	status,0,c
 16631  0034F8  3620               	rlcf	??__CANIDToRegs,f,c
 16632  0034FA  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16633  0034FC  D7FC               	goto	u14665
 16634  0034FE  5020               	movf	??__CANIDToRegs,w,c
 16635  003500  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16636  003504  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16637  003508  6EDF               	movwf	indf2,c
 16638                           
 16639                           ;ECAN.c: 1111: }
 16640  00350A  D039               	goto	l1395
 16641  00350C                     l11528:
 16642                           
 16643                           ;ECAN.c: 1112: else
 16644                           ;ECAN.c: 1113: {
 16645                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16646  00350C  5022               	movf	__CANIDToRegs@Value,w,c
 16647  00350E  D842               	call	PL48	;call to abstracted procedure
 16648  003510  0E05               	movlw	5
 16649  003512  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16650  003514                     u14675:
 16651  003514  90D8               	bcf	status,0,c
 16652  003516  3220               	rrcf	??__CANIDToRegs,f,c
 16653  003518  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16654  00351A  D7FC               	goto	u14675
 16655  00351C  5020               	movf	??__CANIDToRegs,w,c
 16656                           
 16657                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16658  00351E  D842               	call	PL54	;call to abstracted procedure
 16659  003520  0E03               	movlw	3
 16660  003522  D849               	call	PL74	;call to abstracted procedure
 16661  003524  3620               	rlcf	??__CANIDToRegs,f,c
 16662  003526  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16663                           
 16664                           ;ECAN.c: 1117: ptr++;
 16665                           
 16666                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16667  00352A  D82A               	call	PL32	;call to abstracted procedure
 16668  00352C  0E02               	movlw	2
 16669  00352E  D843               	call	PL74	;call to abstracted procedure
 16670  003530  3420               	rlcf	??__CANIDToRegs,w,c
 16671  003532  0BE0               	andlw	224
 16672  003534  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16673  003538  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16674  00353C  6EDF               	movwf	indf2,c
 16675                           
 16676                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16677  00353E  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16678  003542  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16679  003546  0E00               	movlw	0
 16680  003548  86DB               	bsf	plusw2,3,c
 16681                           
 16682                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16683  00354A  5022               	movf	__CANIDToRegs@Value,w,c
 16684  00354C  D823               	call	PL48	;call to abstracted procedure
 16685  00354E  0E03               	movlw	3
 16686  003550  1620               	andwf	??__CANIDToRegs,f,c
 16687  003552  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16688                           
 16689                           ;ECAN.c: 1122: ptr++;
 16690                           
 16691                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16692  003556  D814               	call	PL32	;call to abstracted procedure
 16693  003558  2AD9               	incf	fsr2l,f,c
 16694  00355A  6ADA               	clrf	fsr2h,c
 16695  00355C  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16696  003560  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16697  003564  CFDF FFE7          	movff	indf2,indf1
 16698                           
 16699                           ;ECAN.c: 1124: ptr++;
 16700  003568  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16701  00356A  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16702                           
 16703                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16704  00356C  5022               	movf	__CANIDToRegs@Value,w,c
 16705  00356E  6ED9               	movwf	fsr2l,c
 16706  003570  6ADA               	clrf	fsr2h,c
 16707  003572  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16708  003576  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16709  00357A  CFDF FFE7          	movff	indf2,indf1
 16710  00357E                     l1395:
 16711  00357E  0012               	return	
 16712  003580                     __end_of__CANIDToRegs:
 16713                           	opt stack 0
 16714  003580                     PL32:
 16715                           	opt stack 25
 16716  003580  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16717  003584  5020               	movf	??__CANIDToRegs,w,c
 16718  003586  12DF               	iorwf	indf2,f,c
 16719  003588  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16720  00358A  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16721  00358C  5022               	movf	__CANIDToRegs@Value,w,c
 16722  00358E  6ED9               	movwf	fsr2l,c
 16723  003590  6ADA               	clrf	fsr2h,c
 16724  003592  0012               	return	
 16725  003594                     __end_ofPL32:
 16726                           	opt stack 0
 16727  003594                     PL48:
 16728                           	opt stack 25
 16729  003594  6ED9               	movwf	fsr2l,c
 16730  003596  6ADA               	clrf	fsr2h,c
 16731  003598  0E02               	movlw	2
 16732  00359A  26D9               	addwf	fsr2l,f,c
 16733  00359C  6ADA               	clrf	fsr2h,c
 16734  00359E  50DF               	movf	indf2,w,c
 16735  0035A0  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16736  0035A2  0012               	return	
 16737  0035A4                     __end_ofPL48:
 16738                           	opt stack 0
 16739  0035A4                     PL54:
 16740                           	opt stack 25
 16741  0035A4  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16742  0035A8  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16743  0035AC  6EDF               	movwf	indf2,c
 16744  0035AE  5022               	movf	__CANIDToRegs@Value,w,c
 16745  0035B0  6ED9               	movwf	fsr2l,c
 16746  0035B2  6ADA               	clrf	fsr2h,c
 16747  0035B4  0012               	return	
 16748  0035B6                     __end_ofPL54:
 16749                           	opt stack 0
 16750  0035B6                     PL74:
 16751                           	opt stack 25
 16752  0035B6  26D9               	addwf	fsr2l,f,c
 16753  0035B8  6ADA               	clrf	fsr2h,c
 16754  0035BA  50DF               	movf	indf2,w,c
 16755  0035BC  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16756  0035BE  90D8               	bcf	status,0,c
 16757  0035C0  3620               	rlcf	??__CANIDToRegs,f,c
 16758  0035C2  90D8               	bcf	status,0,c
 16759  0035C4  3620               	rlcf	??__CANIDToRegs,f,c
 16760  0035C6  90D8               	bcf	status,0,c
 16761  0035C8  0012               	return	
 16762  0035CA                     __end_ofPL74:
 16763                           	opt stack 0
 16764  0035CA                     PL96:
 16765                           	opt stack 25
 16766  0035CA  50DF               	movf	indf2,w,c
 16767  0035CC  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16768  0035CE  0E05               	movlw	5
 16769  0035D0  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16770  0035D2  0C05               	retlw	5
 16771  0035D4                     __end_ofPL96:
 16772                           	opt stack 0
 16773                           tblptru	equ	0xFF8
 16774                           tblptrh	equ	0xFF7
 16775                           tblptrl	equ	0xFF6
 16776                           tablat	equ	0xFF5
 16777                           prodh	equ	0xFF4
 16778                           prodl	equ	0xFF3
 16779                           intcon	equ	0xFF2
 16780                           indf0	equ	0xFEF
 16781                           postinc0	equ	0xFEE
 16782                           fsr0h	equ	0xFEA
 16783                           fsr0l	equ	0xFE9
 16784                           wreg	equ	0xFE8
 16785                           indf1	equ	0xFE7
 16786                           postinc1	equ	0xFE6
 16787                           postdec1	equ	0xFE5
 16788                           fsr1h	equ	0xFE2
 16789                           fsr1l	equ	0xFE1
 16790                           indf2	equ	0xFDF
 16791                           postinc2	equ	0xFDE
 16792                           postdec2	equ	0xFDD
 16793                           plusw2	equ	0xFDB
 16794                           fsr2h	equ	0xFDA
 16795                           fsr2l	equ	0xFD9
 16796                           status	equ	0xFD8
 16797                           
 16798 ;; *************** function _memset *****************
 16799 ;; Defined at:
 16800 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 16801 ;; Parameters:    Size  Location     Type
 16802 ;;  p1              2   24[COMRAM] PTR void 
 16803 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16804 ;;  c               2   26[COMRAM] int 
 16805 ;;  n               2   28[COMRAM] unsigned int 
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;  p               2   30[COMRAM] PTR unsigned char 
 16808 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16809 ;; Return value:  Size  Location     Type
 16810 ;;                  2   24[COMRAM] PTR void 
 16811 ;; Registers used:
 16812 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16813 ;; Tracked objects:
 16814 ;;		On entry : C/1
 16815 ;;		On exit  : 0/0
 16816 ;;		Unchanged: 0/0
 16817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16818 ;;      Params:         6       0       0       0       0       0       0
 16819 ;;      Locals:         2       0       0       0       0       0       0
 16820 ;;      Temps:          0       0       0       0       0       0       0
 16821 ;;      Totals:         8       0       0       0       0       0       0
 16822 ;;Total ram usage:        8 bytes
 16823 ;; Hardware stack levels used:    1
 16824 ;; Hardware stack levels required when called:    2
 16825 ;; This function calls:
 16826 ;;		Nothing
 16827 ;; This function is called by:
 16828 ;;		_doModeVerbose
 16829 ;;		_doModeSLCAN
 16830 ;;		_printGUID
 16831 ;;		_printMDF
 16832 ;;		_printNodeFirmwareVersion
 16833 ;; This function uses a non-reentrant model
 16834 ;;
 16835                           
 16836                           	psect	text35
 16837  0050AE                     __ptext35:
 16838                           	opt stack 0
 16839  0050AE                     _memset:
 16840                           	opt stack 27
 16841                           
 16842                           ;incstack = 0
 16843                           ;incstack = 0
 16844  0050AE  C019  F01F         	movff	memset@p1,memset@p
 16845  0050B2  C01A  F020         	movff	memset@p1+1,memset@p+1
 16846  0050B6  D008               	goto	l10730
 16847  0050B8                     l10726:
 16848  0050B8  C01F  FFD9         	movff	memset@p,fsr2l
 16849  0050BC  C020  FFDA         	movff	memset@p+1,fsr2h
 16850  0050C0  C01B  FFDF         	movff	memset@c,indf2
 16851  0050C4  4A1F               	infsnz	memset@p,f,c
 16852  0050C6  2A20               	incf	memset@p+1,f,c
 16853  0050C8                     l10730:
 16854  0050C8  061D               	decf	memset@n,f,c
 16855  0050CA  A0D8               	btfss	status,0,c
 16856  0050CC  061E               	decf	memset@n+1,f,c
 16857  0050CE  281D               	incf	memset@n& (0+255),w,c
 16858  0050D0  B4D8               	btfsc	status,2,c
 16859  0050D2  281E               	incf	(memset@n+1)& (0+255),w,c
 16860  0050D4  B4D8               	btfsc	status,2,c
 16861  0050D6  0012               	return	
 16862  0050D8  D7EF               	goto	l10726
 16863  0050DA                     __end_of_memset:
 16864                           	opt stack 0
 16865                           tblptru	equ	0xFF8
 16866                           tblptrh	equ	0xFF7
 16867                           tblptrl	equ	0xFF6
 16868                           tablat	equ	0xFF5
 16869                           prodh	equ	0xFF4
 16870                           prodl	equ	0xFF3
 16871                           intcon	equ	0xFF2
 16872                           indf0	equ	0xFEF
 16873                           postinc0	equ	0xFEE
 16874                           fsr0h	equ	0xFEA
 16875                           fsr0l	equ	0xFE9
 16876                           wreg	equ	0xFE8
 16877                           indf1	equ	0xFE7
 16878                           postinc1	equ	0xFE6
 16879                           postdec1	equ	0xFE5
 16880                           fsr1h	equ	0xFE2
 16881                           fsr1l	equ	0xFE1
 16882                           indf2	equ	0xFDF
 16883                           postinc2	equ	0xFDE
 16884                           postdec2	equ	0xFDD
 16885                           plusw2	equ	0xFDB
 16886                           fsr2h	equ	0xFDA
 16887                           fsr2l	equ	0xFD9
 16888                           status	equ	0xFD8
 16889                           
 16890 ;; *************** function _printHelp *****************
 16891 ;; Defined at:
 16892 ;;		line 2163 in file "main.c"
 16893 ;; Parameters:    Size  Location     Type
 16894 ;;		None
 16895 ;; Auto vars:     Size  Location     Type
 16896 ;;		None
 16897 ;; Return value:  Size  Location     Type
 16898 ;;		None               void
 16899 ;; Registers used:
 16900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16901 ;; Tracked objects:
 16902 ;;		On entry : F/0
 16903 ;;		On exit  : 0/0
 16904 ;;		Unchanged: 0/0
 16905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16906 ;;      Params:         0       0       0       0       0       0       0
 16907 ;;      Locals:         0       0       0       0       0       0       0
 16908 ;;      Temps:          0       0       0       0       0       0       0
 16909 ;;      Totals:         0       0       0       0       0       0       0
 16910 ;;Total ram usage:        0 bytes
 16911 ;; Hardware stack levels used:    1
 16912 ;; Hardware stack levels required when called:    4
 16913 ;; This function calls:
 16914 ;;		_putsUSART
 16915 ;; This function is called by:
 16916 ;;		_doModeVerbose
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           	psect	text36
 16921  002CF8                     __ptext36:
 16922                           	opt stack 0
 16923  002CF8                     _printHelp:
 16924                           	opt stack 25
 16925                           
 16926                           ; BSR set to: 0
 16927                           ;main.c: 2164: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 16928                           
 16929                           ;incstack = 0
 16930                           ;incstack = 0
 16931  002CF8  0E78               	movlw	high STR_197
 16932  002CFA  6E1B               	movwf	?_putsUSART+1,c
 16933  002CFC  0E6C               	movlw	low STR_197
 16934  002CFE  6E1A               	movwf	?_putsUSART,c
 16935  002D00  ECE6  F025         	call	_putsUSART	;wreg free
 16936                           
 16937                           ;main.c: 2165: putsUSART((char *) "------------------------------------\r\n");
 16938  002D04  0E71               	movlw	high (STR_229+28)
 16939  002D06  6E1B               	movwf	?_putsUSART+1,c
 16940  002D08  0E93               	movlw	low (STR_229+28)
 16941  002D0A  6E1A               	movwf	?_putsUSART,c
 16942  002D0C  ECE6  F025         	call	_putsUSART	;wreg free
 16943                           
 16944                           ;main.c: 2166: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 16945  002D10  0E7B               	movlw	high STR_199
 16946  002D12  6E1B               	movwf	?_putsUSART+1,c
 16947  002D14  0E64               	movlw	low STR_199
 16948  002D16  6E1A               	movwf	?_putsUSART,c
 16949  002D18  ECE6  F025         	call	_putsUSART	;wreg free
 16950                           
 16951                           ;main.c: 2167: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 16952  002D1C  0E76               	movlw	high STR_200
 16953  002D1E  6E1B               	movwf	?_putsUSART+1,c
 16954  002D20  0EFB               	movlw	low STR_200
 16955  002D22  6E1A               	movwf	?_putsUSART,c
 16956  002D24  ECE6  F025         	call	_putsUSART	;wreg free
 16957                           
 16958                           ;main.c: 2168: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 16959  002D28  0E76               	movlw	high STR_201
 16960  002D2A  6E1B               	movwf	?_putsUSART+1,c
 16961  002D2C  0EA1               	movlw	low STR_201
 16962  002D2E  6E1A               	movwf	?_putsUSART,c
 16963  002D30  ECE6  F025         	call	_putsUSART	;wreg free
 16964                           
 16965                           ;main.c: 2169: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 16966  002D34  0E75               	movlw	high STR_202
 16967  002D36  6E1B               	movwf	?_putsUSART+1,c
 16968  002D38  0E1A               	movlw	low STR_202
 16969  002D3A  6E1A               	movwf	?_putsUSART,c
 16970  002D3C  ECE6  F025         	call	_putsUSART	;wreg free
 16971                           
 16972                           ;main.c: 2170: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 16973  002D40  0E75               	movlw	high STR_203
 16974  002D42  6E1B               	movwf	?_putsUSART+1,c
 16975  002D44  0E7F               	movlw	low STR_203
 16976  002D46  6E1A               	movwf	?_putsUSART,c
 16977  002D48  ECE6  F025         	call	_putsUSART	;wreg free
 16978                           
 16979                           ;main.c: 2171: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 16980  002D4C  0E7B               	movlw	high STR_204
 16981  002D4E  6E1B               	movwf	?_putsUSART+1,c
 16982  002D50  0E0C               	movlw	low STR_204
 16983  002D52  6E1A               	movwf	?_putsUSART,c
 16984  002D54  ECE6  F025         	call	_putsUSART	;wreg free
 16985                           
 16986                           ;main.c: 2172: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 16987  002D58  0E75               	movlw	high STR_205
 16988  002D5A  6E1B               	movwf	?_putsUSART+1,c
 16989  002D5C  0EB1               	movlw	low STR_205
 16990  002D5E  6E1A               	movwf	?_putsUSART,c
 16991  002D60  ECE6  F025         	call	_putsUSART	;wreg free
 16992                           
 16993                           ;main.c: 2173: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 16994  002D64  0E76               	movlw	high STR_206
 16995  002D66  6E1B               	movwf	?_putsUSART+1,c
 16996  002D68  0ECF               	movlw	low STR_206
 16997  002D6A  6E1A               	movwf	?_putsUSART,c
 16998  002D6C  ECE6  F025         	call	_putsUSART	;wreg free
 16999                           
 17000                           ;main.c: 2174: putsUSART((char *) "TX - Send CAN frame .\r\n");
 17001  002D70  0E7C               	movlw	high STR_207
 17002  002D72  6E1B               	movwf	?_putsUSART+1,c
 17003  002D74  0E01               	movlw	low STR_207
 17004  002D76  6E1A               	movwf	?_putsUSART,c
 17005  002D78  ECE6  F025         	call	_putsUSART	;wreg free
 17006                           
 17007                           ;main.c: 2175: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 17008  002D7C  0E73               	movlw	high STR_208
 17009  002D7E  6E1B               	movwf	?_putsUSART+1,c
 17010  002D80  0E33               	movlw	low STR_208
 17011  002D82  6E1A               	movwf	?_putsUSART,c
 17012  002D84  ECE6  F025         	call	_putsUSART	;wreg free
 17013                           
 17014                           ;main.c: 2176: putsUSART((char *) "RX - Read CAN frame.\r\n");
 17015  002D88  0E7C               	movlw	high STR_209
 17016  002D8A  6E1B               	movwf	?_putsUSART+1,c
 17017  002D8C  0EC1               	movlw	low STR_209
 17018  002D8E  6E1A               	movwf	?_putsUSART,c
 17019  002D90  ECE6  F025         	call	_putsUSART	;wreg free
 17020                           
 17021                           ;main.c: 2177: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 17022  002D94  0E7A               	movlw	high STR_210
 17023  002D96  6E1B               	movwf	?_putsUSART+1,c
 17024  002D98  0E28               	movlw	low STR_210
 17025  002D9A  6E1A               	movwf	?_putsUSART,c
 17026  002D9C  ECE6  F025         	call	_putsUSART	;wreg free
 17027                           
 17028                           ;main.c: 2178: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 17029  002DA0  0E78               	movlw	high STR_211
 17030  002DA2  6E1B               	movwf	?_putsUSART+1,c
 17031  002DA4  0E45               	movlw	low STR_211
 17032  002DA6  6E1A               	movwf	?_putsUSART,c
 17033  002DA8  ECE6  F025         	call	_putsUSART	;wreg free
 17034                           
 17035                           ;main.c: 2179: putsUSART((char *) "HELP - Display this help information.\r\n");
 17036  002DAC  0E77               	movlw	high STR_212
 17037  002DAE  6E1B               	movwf	?_putsUSART+1,c
 17038  002DB0  0EA6               	movlw	low STR_212
 17039  002DB2  6E1A               	movwf	?_putsUSART,c
 17040  002DB4  ECE6  F025         	call	_putsUSART	;wreg free
 17041                           
 17042                           ;main.c: 2180: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 17043  002DB8  0E76               	movlw	high STR_213
 17044  002DBA  6E1B               	movwf	?_putsUSART+1,c
 17045  002DBC  0E72               	movlw	low STR_213
 17046  002DBE  6E1A               	movwf	?_putsUSART,c
 17047  002DC0  ECE6  F025         	call	_putsUSART	;wreg free
 17048                           
 17049                           ;main.c: 2181: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 17050  002DC4  0E71               	movlw	high STR_214
 17051  002DC6  6E1B               	movwf	?_putsUSART+1,c
 17052  002DC8  0E32               	movlw	low STR_214
 17053  002DCA  6E1A               	movwf	?_putsUSART,c
 17054  002DCC  ECE6  F025         	call	_putsUSART	;wreg free
 17055                           
 17056                           ;main.c: 2182: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 17057  002DD0  0E71               	movlw	high STR_215
 17058  002DD2  6E1B               	movwf	?_putsUSART+1,c
 17059  002DD4  0EFD               	movlw	low STR_215
 17060  002DD6  6E1A               	movwf	?_putsUSART,c
 17061  002DD8  ECE6  F025         	call	_putsUSART	;wreg free
 17062                           
 17063                           ;main.c: 2183: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 17064  002DDC  0E70               	movlw	high STR_216
 17065  002DDE  6E1B               	movwf	?_putsUSART+1,c
 17066  002DE0  0E9E               	movlw	low STR_216
 17067  002DE2  6E1A               	movwf	?_putsUSART,c
 17068  002DE4  ECE6  F025         	call	_putsUSART	;wreg free
 17069                           
 17070                           ;main.c: 2184: putsUSART((char *) "FILTER - Set filter .\r\n");
 17071  002DE8  0E7C               	movlw	high STR_217
 17072  002DEA  6E1B               	movwf	?_putsUSART+1,c
 17073  002DEC  0E19               	movlw	low STR_217
 17074  002DEE  6E1A               	movwf	?_putsUSART,c
 17075  002DF0  ECE6  F025         	call	_putsUSART	;wreg free
 17076                           
 17077                           ;main.c: 2185: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 17078  002DF4  0E70               	movlw	high STR_218
 17079  002DF6  6E1B               	movwf	?_putsUSART+1,c
 17080  002DF8  0E50               	movlw	low STR_218
 17081  002DFA  6E1A               	movwf	?_putsUSART,c
 17082  002DFC  ECE6  F025         	call	_putsUSART	;wreg free
 17083                           
 17084                           ;main.c: 2186: putsUSART((char *) "MASK - Set mask .\r\n");
 17085  002E00  0E7D               	movlw	high STR_219
 17086  002E02  6E1B               	movwf	?_putsUSART+1,c
 17087  002E04  0E47               	movlw	low STR_219
 17088  002E06  6E1A               	movwf	?_putsUSART,c
 17089  002E08  ECE6  F025         	call	_putsUSART	;wreg free
 17090                           
 17091                           ;main.c: 2187: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 17092  002E0C  0E70               	movlw	high STR_220
 17093  002E0E  6E1B               	movwf	?_putsUSART+1,c
 17094  002E10  0EEB               	movlw	low STR_220
 17095  002E12  6E1A               	movwf	?_putsUSART,c
 17096  002E14  ECE6  F025         	call	_putsUSART	;wreg free
 17097                           
 17098                           ;main.c: 2188: putsUSART((char *) "SET - Persistent functionality.\r\n");
 17099  002E18  0E79               	movlw	high STR_221
 17100  002E1A  6E1B               	movwf	?_putsUSART+1,c
 17101  002E1C  0EE4               	movlw	low STR_221
 17102  002E1E  6E1A               	movwf	?_putsUSART,c
 17103  002E20  ECE6  F025         	call	_putsUSART	;wreg free
 17104                           
 17105                           ;main.c: 2189: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 17106  002E24  0E76               	movlw	high STR_222
 17107  002E26  6E1B               	movwf	?_putsUSART+1,c
 17108  002E28  0E43               	movlw	low STR_222
 17109  002E2A  6E1A               	movwf	?_putsUSART,c
 17110  002E2C  ECE6  F025         	call	_putsUSART	;wreg free
 17111                           
 17112                           ;main.c: 2190: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 17113  002E30  0E76               	movlw	high STR_223
 17114  002E32  6E1B               	movwf	?_putsUSART+1,c
 17115  002E34  0E14               	movlw	low STR_223
 17116  002E36  6E1A               	movwf	?_putsUSART,c
 17117  002E38  ECE6  F025         	call	_putsUSART	;wreg free
 17118                           
 17119                           ;main.c: 2191: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 17120  002E3C  0E71               	movlw	high STR_224
 17121  002E3E  6E1B               	movwf	?_putsUSART+1,c
 17122  002E40  0EBA               	movlw	low STR_224
 17123  002E42  6E1A               	movwf	?_putsUSART,c
 17124  002E44  ECE6  F025         	call	_putsUSART	;wreg free
 17125                           
 17126                           ;main.c: 2192: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 17127  002E48  0E75               	movlw	high STR_225
 17128  002E4A  6E1B               	movwf	?_putsUSART+1,c
 17129  002E4C  0EE3               	movlw	low STR_225
 17130  002E4E  6E1A               	movwf	?_putsUSART,c
 17131  002E50  ECE6  F025         	call	_putsUSART	;wreg free
 17132                           
 17133                           ;main.c: 2193: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 17134  002E54  0E73               	movlw	high STR_226
 17135  002E56  6E1B               	movwf	?_putsUSART+1,c
 17136  002E58  0EA2               	movlw	low STR_226
 17137  002E5A  6E1A               	movwf	?_putsUSART,c
 17138  002E5C  ECE6  F025         	call	_putsUSART	;wreg free
 17139                           
 17140                           ;main.c: 2194: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 17141  002E60  0E72               	movlw	high STR_227
 17142  002E62  6E1B               	movwf	?_putsUSART+1,c
 17143  002E64  0E82               	movlw	low STR_227
 17144  002E66  6E1A               	movwf	?_putsUSART,c
 17145  002E68  ECE6  F025         	call	_putsUSART	;wreg free
 17146                           
 17147                           ;main.c: 2195: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 17148  002E6C  0E78               	movlw	high STR_228
 17149  002E6E  6E1B               	movwf	?_putsUSART+1,c
 17150  002E70  0EE1               	movlw	low STR_228
 17151  002E72  6E1A               	movwf	?_putsUSART,c
 17152  002E74  EFE6  F025         	goto	_putsUSART	;wreg free
 17153  002E78                     __end_of_printHelp:
 17154                           	opt stack 0
 17155                           tblptru	equ	0xFF8
 17156                           tblptrh	equ	0xFF7
 17157                           tblptrl	equ	0xFF6
 17158                           tablat	equ	0xFF5
 17159                           prodh	equ	0xFF4
 17160                           prodl	equ	0xFF3
 17161                           intcon	equ	0xFF2
 17162                           indf0	equ	0xFEF
 17163                           postinc0	equ	0xFEE
 17164                           fsr0h	equ	0xFEA
 17165                           fsr0l	equ	0xFE9
 17166                           wreg	equ	0xFE8
 17167                           indf1	equ	0xFE7
 17168                           postinc1	equ	0xFE6
 17169                           postdec1	equ	0xFE5
 17170                           fsr1h	equ	0xFE2
 17171                           fsr1l	equ	0xFE1
 17172                           indf2	equ	0xFDF
 17173                           postinc2	equ	0xFDE
 17174                           postdec2	equ	0xFDD
 17175                           plusw2	equ	0xFDB
 17176                           fsr2h	equ	0xFDA
 17177                           fsr2l	equ	0xFD9
 17178                           status	equ	0xFD8
 17179                           
 17180 ;; *************** function _printErrors *****************
 17181 ;; Defined at:
 17182 ;;		line 2093 in file "main.c"
 17183 ;; Parameters:    Size  Location     Type
 17184 ;;		None
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;		None
 17187 ;; Return value:  Size  Location     Type
 17188 ;;		None               void
 17189 ;; Registers used:
 17190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17191 ;; Tracked objects:
 17192 ;;		On entry : F/0
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17196 ;;      Params:         0       0       0       0       0       0       0
 17197 ;;      Locals:         0      12       0       0       0       0       0
 17198 ;;      Temps:          0       0       0       0       0       0       0
 17199 ;;      Totals:         0      12       0       0       0       0       0
 17200 ;;Total ram usage:       12 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    4
 17203 ;; This function calls:
 17204 ;;		_putsUSART
 17205 ;;		_sprintf
 17206 ;; This function is called by:
 17207 ;;		_doModeVerbose
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           	psect	text37
 17212  001F5E                     __ptext37:
 17213                           	opt stack 0
 17214  001F5E                     _printErrors:
 17215                           	opt stack 25
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;main.c: 2094: putsUSART((char *) "CAN Receive overruns: ");
 17219                           
 17220                           ;incstack = 0
 17221                           ;incstack = 0
 17222  001F5E  0E7C               	movlw	high STR_167
 17223  001F60  6E1B               	movwf	?_putsUSART+1,c
 17224  001F62  0ED8               	movlw	low STR_167
 17225  001F64  6E1A               	movwf	?_putsUSART,c
 17226  001F66  ECE6  F025         	call	_putsUSART	;wreg free
 17227                           
 17228                           ;main.c: 2095: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 17229  001F6A  0100               	movlb	0	; () banked
 17230  001F6C  67D3               	tstfsz	_bHex& (0+255),b
 17231  001F6E  D004               	goto	l13460
 17232                           
 17233                           ; BSR set to: 0
 17234  001F70  0E7F               	movlw	high STR_153
 17235  001F72  6F7C               	movwf	(_printErrors$1387+1)& (0+255),b
 17236  001F74  0EE1               	movlw	low STR_153
 17237  001F76  D003               	goto	L15
 17238  001F78                     l13460:
 17239                           
 17240                           ; BSR set to: 0
 17241  001F78  0E7F               	movlw	high STR_168
 17242  001F7A  6F7C               	movwf	(_printErrors$1387+1)& (0+255),b
 17243  001F7C  0E16               	movlw	low STR_168
 17244  001F7E                     L15:
 17245  001F7E  6F7B               	movwf	_printErrors$1387& (0+255),b
 17246                           
 17247                           ; BSR set to: 0
 17248  001F80  0E01               	movlw	high _wrkbuf
 17249  001F82  0100               	movlb	0	; () banked
 17250  001F84  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17251  001F86  0E70               	movlw	low _wrkbuf
 17252  001F88  6F60               	movwf	?_sprintf& (0+255),b
 17253  001F8A  C07B  F062         	movff	_printErrors$1387,?_sprintf+2
 17254  001F8E  C07C  F063         	movff	_printErrors$1387+1,?_sprintf+3
 17255  001F92  C100  F064         	movff	_can_receiveOverruns,?_sprintf+4
 17256  001F96  C101  F065         	movff	_can_receiveOverruns+1,?_sprintf+5
 17257  001F9A  C102  F066         	movff	_can_receiveOverruns+2,?_sprintf+6
 17258  001F9E  C103  F067         	movff	_can_receiveOverruns+3,?_sprintf+7
 17259  001FA2  EC3C  F00A         	call	_sprintf	;wreg free
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;main.c: 2096: putsUSART(wrkbuf);
 17263  001FA6  0101               	movlb	1	; () banked
 17264  001FA8  0E01               	movlw	high _wrkbuf
 17265  001FAA  6E1B               	movwf	?_putsUSART+1,c
 17266  001FAC  0E70               	movlw	low _wrkbuf
 17267  001FAE  6E1A               	movwf	?_putsUSART,c
 17268  001FB0  ECE6  F025         	call	_putsUSART	;wreg free
 17269                           
 17270                           ;main.c: 2097: putsUSART((char *) "\r\n");
 17271  001FB4  0E74               	movlw	high (STR_188+50)
 17272  001FB6  6E1B               	movwf	?_putsUSART+1,c
 17273  001FB8  0EAE               	movlw	low (STR_188+50)
 17274  001FBA  6E1A               	movwf	?_putsUSART,c
 17275  001FBC  ECE6  F025         	call	_putsUSART	;wreg free
 17276                           
 17277                           ;main.c: 2099: putsUSART((char *) "CAN Transmit overruns: ");
 17278  001FC0  0E7C               	movlw	high STR_171
 17279  001FC2  6E1B               	movwf	?_putsUSART+1,c
 17280  001FC4  0EA9               	movlw	low STR_171
 17281  001FC6  6E1A               	movwf	?_putsUSART,c
 17282  001FC8  ECE6  F025         	call	_putsUSART	;wreg free
 17283                           
 17284                           ;main.c: 2100: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 17285  001FCC  0100               	movlb	0	; () banked
 17286  001FCE  67D3               	tstfsz	_bHex& (0+255),b
 17287  001FD0  D004               	goto	l13474
 17288                           
 17289                           ; BSR set to: 0
 17290  001FD2  0E7F               	movlw	high STR_153
 17291  001FD4  6F7E               	movwf	(_printErrors$1393+1)& (0+255),b
 17292  001FD6  0EE1               	movlw	low STR_153
 17293  001FD8  D003               	goto	L16
 17294  001FDA                     l13474:
 17295                           
 17296                           ; BSR set to: 0
 17297  001FDA  0E7F               	movlw	high STR_168
 17298  001FDC  6F7E               	movwf	(_printErrors$1393+1)& (0+255),b
 17299  001FDE  0E16               	movlw	low STR_168
 17300  001FE0                     L16:
 17301  001FE0  6F7D               	movwf	_printErrors$1393& (0+255),b
 17302                           
 17303                           ; BSR set to: 0
 17304  001FE2  0E01               	movlw	high _wrkbuf
 17305  001FE4  0100               	movlb	0	; () banked
 17306  001FE6  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17307  001FE8  0E70               	movlw	low _wrkbuf
 17308  001FEA  6F60               	movwf	?_sprintf& (0+255),b
 17309  001FEC  C07D  F062         	movff	_printErrors$1393,?_sprintf+2
 17310  001FF0  C07E  F063         	movff	_printErrors$1393+1,?_sprintf+3
 17311  001FF4  C104  F064         	movff	_can_transmitOverruns,?_sprintf+4
 17312  001FF8  C105  F065         	movff	_can_transmitOverruns+1,?_sprintf+5
 17313  001FFC  C106  F066         	movff	_can_transmitOverruns+2,?_sprintf+6
 17314  002000  C107  F067         	movff	_can_transmitOverruns+3,?_sprintf+7
 17315  002004  EC3C  F00A         	call	_sprintf	;wreg free
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;main.c: 2101: putsUSART(wrkbuf);
 17319  002008  0101               	movlb	1	; () banked
 17320  00200A  0E01               	movlw	high _wrkbuf
 17321  00200C  6E1B               	movwf	?_putsUSART+1,c
 17322  00200E  0E70               	movlw	low _wrkbuf
 17323  002010  6E1A               	movwf	?_putsUSART,c
 17324  002012  ECE6  F025         	call	_putsUSART	;wreg free
 17325                           
 17326                           ;main.c: 2102: putsUSART((char *) "\r\n");
 17327  002016  0E74               	movlw	high (STR_188+50)
 17328  002018  6E1B               	movwf	?_putsUSART+1,c
 17329  00201A  0EAE               	movlw	low (STR_188+50)
 17330  00201C  6E1A               	movwf	?_putsUSART,c
 17331  00201E  ECE6  F025         	call	_putsUSART	;wreg free
 17332                           
 17333                           ;main.c: 2104: putsUSART((char *) "UART Receive overruns: ");
 17334  002022  0E7C               	movlw	high STR_175
 17335  002024  6E1B               	movwf	?_putsUSART+1,c
 17336  002026  0E91               	movlw	low STR_175
 17337  002028  6E1A               	movwf	?_putsUSART,c
 17338  00202A  ECE6  F025         	call	_putsUSART	;wreg free
 17339                           
 17340                           ;main.c: 2105: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 17341  00202E  0100               	movlb	0	; () banked
 17342  002030  67D3               	tstfsz	_bHex& (0+255),b
 17343  002032  D004               	goto	l13488
 17344                           
 17345                           ; BSR set to: 0
 17346  002034  0E7F               	movlw	high STR_153
 17347  002036  6F80               	movwf	(_printErrors$1399+1)& (0+255),b
 17348  002038  0EE1               	movlw	low STR_153
 17349  00203A  D003               	goto	L17
 17350  00203C                     l13488:
 17351                           
 17352                           ; BSR set to: 0
 17353  00203C  0E7F               	movlw	high STR_168
 17354  00203E  6F80               	movwf	(_printErrors$1399+1)& (0+255),b
 17355  002040  0E16               	movlw	low STR_168
 17356  002042                     L17:
 17357  002042  6F7F               	movwf	_printErrors$1399& (0+255),b
 17358                           
 17359                           ; BSR set to: 0
 17360  002044  0E01               	movlw	high _wrkbuf
 17361  002046  0100               	movlb	0	; () banked
 17362  002048  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17363  00204A  0E70               	movlw	low _wrkbuf
 17364  00204C  6F60               	movwf	?_sprintf& (0+255),b
 17365  00204E  C07F  F062         	movff	_printErrors$1399,?_sprintf+2
 17366  002052  C080  F063         	movff	_printErrors$1399+1,?_sprintf+3
 17367  002056  C118  F064         	movff	_uart_receiveOverruns,?_sprintf+4
 17368  00205A  C119  F065         	movff	_uart_receiveOverruns+1,?_sprintf+5
 17369  00205E  C11A  F066         	movff	_uart_receiveOverruns+2,?_sprintf+6
 17370  002062  C11B  F067         	movff	_uart_receiveOverruns+3,?_sprintf+7
 17371  002066  EC3C  F00A         	call	_sprintf	;wreg free
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;main.c: 2106: putsUSART(wrkbuf);
 17375  00206A  0101               	movlb	1	; () banked
 17376  00206C  0E01               	movlw	high _wrkbuf
 17377  00206E  6E1B               	movwf	?_putsUSART+1,c
 17378  002070  0E70               	movlw	low _wrkbuf
 17379  002072  6E1A               	movwf	?_putsUSART,c
 17380  002074  ECE6  F025         	call	_putsUSART	;wreg free
 17381                           
 17382                           ;main.c: 2107: putsUSART((char *) "\r\n");
 17383  002078  0E74               	movlw	high (STR_188+50)
 17384  00207A  6E1B               	movwf	?_putsUSART+1,c
 17385  00207C  0EAE               	movlw	low (STR_188+50)
 17386  00207E  6E1A               	movwf	?_putsUSART,c
 17387  002080  ECE6  F025         	call	_putsUSART	;wreg free
 17388                           
 17389                           ;main.c: 2109: putsUSART((char *) "UART Receive overruns: ");
 17390  002084  0E7C               	movlw	high STR_175
 17391  002086  6E1B               	movwf	?_putsUSART+1,c
 17392  002088  0E91               	movlw	low STR_175
 17393  00208A  6E1A               	movwf	?_putsUSART,c
 17394  00208C  ECE6  F025         	call	_putsUSART	;wreg free
 17395                           
 17396                           ;main.c: 2110: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 17397  002090  0100               	movlb	0	; () banked
 17398  002092  67D3               	tstfsz	_bHex& (0+255),b
 17399  002094  D004               	goto	l13502
 17400                           
 17401                           ; BSR set to: 0
 17402  002096  0E7F               	movlw	high STR_153
 17403  002098  6F82               	movwf	(_printErrors$1405+1)& (0+255),b
 17404  00209A  0EE1               	movlw	low STR_153
 17405  00209C  D003               	goto	L18
 17406  00209E                     l13502:
 17407                           
 17408                           ; BSR set to: 0
 17409  00209E  0E7F               	movlw	high STR_168
 17410  0020A0  6F82               	movwf	(_printErrors$1405+1)& (0+255),b
 17411  0020A2  0E16               	movlw	low STR_168
 17412  0020A4                     L18:
 17413  0020A4  6F81               	movwf	_printErrors$1405& (0+255),b
 17414                           
 17415                           ; BSR set to: 0
 17416  0020A6  0E01               	movlw	high _wrkbuf
 17417  0020A8  0100               	movlb	0	; () banked
 17418  0020AA  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17419  0020AC  0E70               	movlw	low _wrkbuf
 17420  0020AE  6F60               	movwf	?_sprintf& (0+255),b
 17421  0020B0  C081  F062         	movff	_printErrors$1405,?_sprintf+2
 17422  0020B4  C082  F063         	movff	_printErrors$1405+1,?_sprintf+3
 17423  0020B8  C11C  F064         	movff	_uart_transmitOverruns,?_sprintf+4
 17424  0020BC  C11D  F065         	movff	_uart_transmitOverruns+1,?_sprintf+5
 17425  0020C0  C11E  F066         	movff	_uart_transmitOverruns+2,?_sprintf+6
 17426  0020C4  C11F  F067         	movff	_uart_transmitOverruns+3,?_sprintf+7
 17427  0020C8  EC3C  F00A         	call	_sprintf	;wreg free
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;main.c: 2111: putsUSART(wrkbuf);
 17431  0020CC  0101               	movlb	1	; () banked
 17432  0020CE  0E01               	movlw	high _wrkbuf
 17433  0020D0  6E1B               	movwf	?_putsUSART+1,c
 17434  0020D2  0E70               	movlw	low _wrkbuf
 17435  0020D4  6E1A               	movwf	?_putsUSART,c
 17436  0020D6  ECE6  F025         	call	_putsUSART	;wreg free
 17437                           
 17438                           ;main.c: 2112: putsUSART((char *) "\r\n");
 17439  0020DA  0E74               	movlw	high (STR_188+50)
 17440  0020DC  6E1B               	movwf	?_putsUSART+1,c
 17441  0020DE  0EAE               	movlw	low (STR_188+50)
 17442  0020E0  6E1A               	movwf	?_putsUSART,c
 17443  0020E2  ECE6  F025         	call	_putsUSART	;wreg free
 17444                           
 17445                           ;main.c: 2118: putsUSART((char *) "Transmit Error Counter: ");
 17446  0020E6  0E7B               	movlw	high STR_183
 17447  0020E8  6E1B               	movwf	?_putsUSART+1,c
 17448  0020EA  0EE8               	movlw	low STR_183
 17449  0020EC  6E1A               	movwf	?_putsUSART,c
 17450  0020EE  ECE6  F025         	call	_putsUSART	;wreg free
 17451                           
 17452                           ;main.c: 2119: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 17453  0020F2  0100               	movlb	0	; () banked
 17454  0020F4  67D3               	tstfsz	_bHex& (0+255),b
 17455  0020F6  D004               	goto	l13516
 17456                           
 17457                           ; BSR set to: 0
 17458  0020F8  0E7F               	movlw	high STR_53
 17459  0020FA  6F84               	movwf	(_printErrors$1411+1)& (0+255),b
 17460  0020FC  0EEE               	movlw	low STR_53
 17461  0020FE  D003               	goto	L19
 17462  002100                     l13516:
 17463                           
 17464                           ; BSR set to: 0
 17465  002100  0E7F               	movlw	high STR_52
 17466  002102  6F84               	movwf	(_printErrors$1411+1)& (0+255),b
 17467  002104  0E65               	movlw	low STR_52
 17468  002106                     L19:
 17469  002106  6F83               	movwf	_printErrors$1411& (0+255),b
 17470                           
 17471                           ; BSR set to: 0
 17472  002108  0E01               	movlw	high _wrkbuf
 17473  00210A  0100               	movlb	0	; () banked
 17474  00210C  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17475  00210E  0E70               	movlw	low _wrkbuf
 17476  002110  6F60               	movwf	?_sprintf& (0+255),b
 17477  002112  C083  F062         	movff	_printErrors$1411,?_sprintf+2
 17478  002116  C084  F063         	movff	_printErrors$1411+1,?_sprintf+3
 17479  00211A  CF76 F064          	movff	3958,?_sprintf+4	;volatile
 17480  00211E  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17481  002120  EC3C  F00A         	call	_sprintf	;wreg free
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;main.c: 2120: putsUSART(wrkbuf);
 17485  002124  0101               	movlb	1	; () banked
 17486  002126  0E01               	movlw	high _wrkbuf
 17487  002128  6E1B               	movwf	?_putsUSART+1,c
 17488  00212A  0E70               	movlw	low _wrkbuf
 17489  00212C  6E1A               	movwf	?_putsUSART,c
 17490  00212E  ECE6  F025         	call	_putsUSART	;wreg free
 17491                           
 17492                           ;main.c: 2121: putsUSART((char *) "\r\n");
 17493  002132  0E74               	movlw	high (STR_188+50)
 17494  002134  6E1B               	movwf	?_putsUSART+1,c
 17495  002136  0EAE               	movlw	low (STR_188+50)
 17496  002138  6E1A               	movwf	?_putsUSART,c
 17497  00213A  ECE6  F025         	call	_putsUSART	;wreg free
 17498                           
 17499                           ;main.c: 2123: if (COMSTATbits.TXWARN) {
 17500  00213E  A474               	btfss	3956,2,c	;volatile
 17501  002140  D006               	goto	l13528
 17502                           
 17503                           ;main.c: 2124: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 17504  002142  0E72               	movlw	high STR_187
 17505  002144  6E1B               	movwf	?_putsUSART+1,c
 17506  002146  0EC0               	movlw	low STR_187
 17507  002148  6E1A               	movwf	?_putsUSART,c
 17508  00214A  ECE6  F025         	call	_putsUSART	;wreg free
 17509  00214E                     l13528:
 17510                           
 17511                           ;main.c: 2125: }
 17512                           ;main.c: 2127: if (COMSTATbits.TXBO) {
 17513  00214E  AA74               	btfss	3956,5,c	;volatile
 17514  002150  D006               	goto	l13532
 17515                           
 17516                           ;main.c: 2128: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 17517  002152  0E74               	movlw	high STR_188
 17518  002154  6E1B               	movwf	?_putsUSART+1,c
 17519  002156  0E7C               	movlw	low STR_188
 17520  002158  6E1A               	movwf	?_putsUSART,c
 17521  00215A  ECE6  F025         	call	_putsUSART	;wreg free
 17522  00215E                     l13532:
 17523                           
 17524                           ;main.c: 2129: }
 17525                           ;main.c: 2131: if (COMSTATbits.TXBP) {
 17526  00215E  A874               	btfss	3956,4,c	;volatile
 17527  002160  D006               	goto	l1065
 17528                           
 17529                           ;main.c: 2132: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 17530  002162  0E72               	movlw	high STR_189
 17531  002164  6E1B               	movwf	?_putsUSART+1,c
 17532  002166  0EFA               	movlw	low STR_189
 17533  002168  6E1A               	movwf	?_putsUSART,c
 17534  00216A  ECE6  F025         	call	_putsUSART	;wreg free
 17535  00216E                     l1065:
 17536                           
 17537                           ;main.c: 2133: }
 17538                           ;main.c: 2139: putsUSART((char *) "Receive Error Counter: ");
 17539  00216E  0E7C               	movlw	high STR_190
 17540  002170  6E1B               	movwf	?_putsUSART+1,c
 17541  002172  0E79               	movlw	low STR_190
 17542  002174  6E1A               	movwf	?_putsUSART,c
 17543  002176  ECE6  F025         	call	_putsUSART	;wreg free
 17544                           
 17545                           ;main.c: 2140: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 17546  00217A  0100               	movlb	0	; () banked
 17547  00217C  67D3               	tstfsz	_bHex& (0+255),b
 17548  00217E  D004               	goto	l13540
 17549                           
 17550                           ; BSR set to: 0
 17551  002180  0E7F               	movlw	high STR_53
 17552  002182  6F86               	movwf	(_printErrors$1420+1)& (0+255),b
 17553  002184  0EEE               	movlw	low STR_53
 17554  002186  D003               	goto	L20
 17555  002188                     l13540:
 17556                           
 17557                           ; BSR set to: 0
 17558  002188  0E7F               	movlw	high STR_52
 17559  00218A  6F86               	movwf	(_printErrors$1420+1)& (0+255),b
 17560  00218C  0E65               	movlw	low STR_52
 17561  00218E                     L20:
 17562  00218E  6F85               	movwf	_printErrors$1420& (0+255),b
 17563                           
 17564                           ; BSR set to: 0
 17565  002190  0E01               	movlw	high _wrkbuf
 17566  002192  0100               	movlb	0	; () banked
 17567  002194  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17568  002196  0E70               	movlw	low _wrkbuf
 17569  002198  6F60               	movwf	?_sprintf& (0+255),b
 17570  00219A  C085  F062         	movff	_printErrors$1420,?_sprintf+2
 17571  00219E  C086  F063         	movff	_printErrors$1420+1,?_sprintf+3
 17572  0021A2  CF75 F064          	movff	3957,?_sprintf+4	;volatile
 17573  0021A6  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17574  0021A8  EC3C  F00A         	call	_sprintf	;wreg free
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;main.c: 2141: putsUSART(wrkbuf);
 17578  0021AC  0101               	movlb	1	; () banked
 17579  0021AE  0E01               	movlw	high _wrkbuf
 17580  0021B0  6E1B               	movwf	?_putsUSART+1,c
 17581  0021B2  0E70               	movlw	low _wrkbuf
 17582  0021B4  6E1A               	movwf	?_putsUSART,c
 17583  0021B6  ECE6  F025         	call	_putsUSART	;wreg free
 17584                           
 17585                           ;main.c: 2142: putsUSART((char *) "\r\n");
 17586  0021BA  0E74               	movlw	high (STR_188+50)
 17587  0021BC  6E1B               	movwf	?_putsUSART+1,c
 17588  0021BE  0EAE               	movlw	low (STR_188+50)
 17589  0021C0  6E1A               	movwf	?_putsUSART,c
 17590  0021C2  ECE6  F025         	call	_putsUSART	;wreg free
 17591                           
 17592                           ;main.c: 2144: if (COMSTATbits.RXWARN) {
 17593  0021C6  A274               	btfss	3956,1,c	;volatile
 17594  0021C8  D006               	goto	l13552
 17595                           
 17596                           ;main.c: 2145: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 17597  0021CA  0E73               	movlw	high STR_194
 17598  0021CC  6E1B               	movwf	?_putsUSART+1,c
 17599  0021CE  0E6B               	movlw	low STR_194
 17600  0021D0  6E1A               	movwf	?_putsUSART,c
 17601  0021D2  ECE6  F025         	call	_putsUSART	;wreg free
 17602  0021D6                     l13552:
 17603                           
 17604                           ;main.c: 2146: }
 17605                           ;main.c: 2148: if (COMSTATbits.RXBP) {
 17606  0021D6  A674               	btfss	3956,3,c	;volatile
 17607  0021D8  D006               	goto	l13556
 17608                           
 17609                           ;main.c: 2149: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 17610  0021DA  0E74               	movlw	high STR_195
 17611  0021DC  6E1B               	movwf	?_putsUSART+1,c
 17612  0021DE  0E10               	movlw	low STR_195
 17613  0021E0  6E1A               	movwf	?_putsUSART,c
 17614  0021E2  ECE6  F025         	call	_putsUSART	;wreg free
 17615  0021E6                     l13556:
 17616                           
 17617                           ;main.c: 2150: }
 17618                           ;main.c: 2152: if (COMSTATbits.EWARN) {
 17619  0021E6  A074               	btfss	3956,0,c	;volatile
 17620  0021E8  D006               	goto	l1073
 17621                           
 17622                           ;main.c: 2153: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 17623  0021EA  0E74               	movlw	high STR_196
 17624  0021EC  6E1B               	movwf	?_putsUSART+1,c
 17625  0021EE  0EE6               	movlw	low STR_196
 17626  0021F0  6E1A               	movwf	?_putsUSART,c
 17627  0021F2  ECE6  F025         	call	_putsUSART	;wreg free
 17628  0021F6                     l1073:
 17629  0021F6  0012               	return	
 17630  0021F8                     __end_of_printErrors:
 17631                           	opt stack 0
 17632                           tblptru	equ	0xFF8
 17633                           tblptrh	equ	0xFF7
 17634                           tblptrl	equ	0xFF6
 17635                           tablat	equ	0xFF5
 17636                           prodh	equ	0xFF4
 17637                           prodl	equ	0xFF3
 17638                           intcon	equ	0xFF2
 17639                           indf0	equ	0xFEF
 17640                           postinc0	equ	0xFEE
 17641                           fsr0h	equ	0xFEA
 17642                           fsr0l	equ	0xFE9
 17643                           wreg	equ	0xFE8
 17644                           indf1	equ	0xFE7
 17645                           postinc1	equ	0xFE6
 17646                           postdec1	equ	0xFE5
 17647                           fsr1h	equ	0xFE2
 17648                           fsr1l	equ	0xFE1
 17649                           indf2	equ	0xFDF
 17650                           postinc2	equ	0xFDE
 17651                           postdec2	equ	0xFDD
 17652                           plusw2	equ	0xFDB
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _printStatistics *****************
 17658 ;; Defined at:
 17659 ;;		line 2067 in file "main.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;		None
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;		None
 17664 ;; Return value:  Size  Location     Type
 17665 ;;		None               void
 17666 ;; Registers used:
 17667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17668 ;; Tracked objects:
 17669 ;;		On entry : F/0
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17673 ;;      Params:         0       0       0       0       0       0       0
 17674 ;;      Locals:         0       8       0       0       0       0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0
 17676 ;;      Totals:         0       8       0       0       0       0       0
 17677 ;;Total ram usage:        8 bytes
 17678 ;; Hardware stack levels used:    1
 17679 ;; Hardware stack levels required when called:    4
 17680 ;; This function calls:
 17681 ;;		_putsUSART
 17682 ;;		_sprintf
 17683 ;; This function is called by:
 17684 ;;		_doModeVerbose
 17685 ;; This function uses a non-reentrant model
 17686 ;;
 17687                           
 17688                           	psect	text38
 17689  002B70                     __ptext38:
 17690                           	opt stack 0
 17691  002B70                     _printStatistics:
 17692                           	opt stack 25
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;main.c: 2068: putsUSART((char *) "Sent CAN frames: ");
 17696                           
 17697                           ;incstack = 0
 17698                           ;incstack = 0
 17699  002B70  0E7E               	movlw	high STR_151
 17700  002B72  6E1B               	movwf	?_putsUSART+1,c
 17701  002B74  0E0A               	movlw	low STR_151
 17702  002B76  6E1A               	movwf	?_putsUSART,c
 17703  002B78  ECE6  F025         	call	_putsUSART	;wreg free
 17704                           
 17705                           ;main.c: 2069: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 17706  002B7C  0100               	movlb	0	; () banked
 17707  002B7E  67D3               	tstfsz	_bHex& (0+255),b
 17708  002B80  D004               	goto	l13404
 17709                           
 17710                           ; BSR set to: 0
 17711  002B82  0E7F               	movlw	high STR_153
 17712  002B84  6F7C               	movwf	(_printStatistics$1362+1)& (0+255),b
 17713  002B86  0EE1               	movlw	low STR_153
 17714  002B88  D003               	goto	L21
 17715  002B8A                     l13404:
 17716                           
 17717                           ; BSR set to: 0
 17718  002B8A  0E7F               	movlw	high STR_152
 17719  002B8C  6F7C               	movwf	(_printStatistics$1362+1)& (0+255),b
 17720  002B8E  0E73               	movlw	low STR_152
 17721  002B90                     L21:
 17722  002B90  6F7B               	movwf	_printStatistics$1362& (0+255),b
 17723                           
 17724                           ; BSR set to: 0
 17725  002B92  0E01               	movlw	high _wrkbuf
 17726  002B94  0100               	movlb	0	; () banked
 17727  002B96  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17728  002B98  0E70               	movlw	low _wrkbuf
 17729  002B9A  6F60               	movwf	?_sprintf& (0+255),b
 17730  002B9C  C07B  F062         	movff	_printStatistics$1362,?_sprintf+2
 17731  002BA0  C07C  F063         	movff	_printStatistics$1362+1,?_sprintf+3
 17732  002BA4  C114  F064         	movff	_cntTxFrames,?_sprintf+4
 17733  002BA8  C115  F065         	movff	_cntTxFrames+1,?_sprintf+5
 17734  002BAC  C116  F066         	movff	_cntTxFrames+2,?_sprintf+6
 17735  002BB0  C117  F067         	movff	_cntTxFrames+3,?_sprintf+7
 17736  002BB4  EC3C  F00A         	call	_sprintf	;wreg free
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;main.c: 2070: putsUSART(wrkbuf);
 17740  002BB8  0101               	movlb	1	; () banked
 17741  002BBA  0E01               	movlw	high _wrkbuf
 17742  002BBC  6E1B               	movwf	?_putsUSART+1,c
 17743  002BBE  0E70               	movlw	low _wrkbuf
 17744  002BC0  6E1A               	movwf	?_putsUSART,c
 17745  002BC2  ECE6  F025         	call	_putsUSART	;wreg free
 17746                           
 17747                           ;main.c: 2071: putsUSART((char *) "\r\n");
 17748  002BC6  0E74               	movlw	high (STR_188+50)
 17749  002BC8  6E1B               	movwf	?_putsUSART+1,c
 17750  002BCA  0EAE               	movlw	low (STR_188+50)
 17751  002BCC  6E1A               	movwf	?_putsUSART,c
 17752  002BCE  ECE6  F025         	call	_putsUSART	;wreg free
 17753                           
 17754                           ;main.c: 2073: putsUSART((char *) "Sent CAN bytes: ");
 17755  002BD2  0E7E               	movlw	high STR_155
 17756  002BD4  6E1B               	movwf	?_putsUSART+1,c
 17757  002BD6  0E3E               	movlw	low STR_155
 17758  002BD8  6E1A               	movwf	?_putsUSART,c
 17759  002BDA  ECE6  F025         	call	_putsUSART	;wreg free
 17760                           
 17761                           ;main.c: 2074: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 17762  002BDE  0100               	movlb	0	; () banked
 17763  002BE0  67D3               	tstfsz	_bHex& (0+255),b
 17764  002BE2  D004               	goto	l13418
 17765                           
 17766                           ; BSR set to: 0
 17767  002BE4  0E7F               	movlw	high STR_153
 17768  002BE6  6F7E               	movwf	(_printStatistics$1368+1)& (0+255),b
 17769  002BE8  0EE1               	movlw	low STR_153
 17770  002BEA  D003               	goto	L22
 17771  002BEC                     l13418:
 17772                           
 17773                           ; BSR set to: 0
 17774  002BEC  0E7F               	movlw	high STR_152
 17775  002BEE  6F7E               	movwf	(_printStatistics$1368+1)& (0+255),b
 17776  002BF0  0E73               	movlw	low STR_152
 17777  002BF2                     L22:
 17778  002BF2  6F7D               	movwf	_printStatistics$1368& (0+255),b
 17779                           
 17780                           ; BSR set to: 0
 17781  002BF4  0E01               	movlw	high _wrkbuf
 17782  002BF6  0100               	movlb	0	; () banked
 17783  002BF8  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17784  002BFA  0E70               	movlw	low _wrkbuf
 17785  002BFC  6F60               	movwf	?_sprintf& (0+255),b
 17786  002BFE  C07D  F062         	movff	_printStatistics$1368,?_sprintf+2
 17787  002C02  C07E  F063         	movff	_printStatistics$1368+1,?_sprintf+3
 17788  002C06  C110  F064         	movff	_cntTxBytes,?_sprintf+4
 17789  002C0A  C111  F065         	movff	_cntTxBytes+1,?_sprintf+5
 17790  002C0E  C112  F066         	movff	_cntTxBytes+2,?_sprintf+6
 17791  002C12  C113  F067         	movff	_cntTxBytes+3,?_sprintf+7
 17792  002C16  EC3C  F00A         	call	_sprintf	;wreg free
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;main.c: 2075: putsUSART(wrkbuf);
 17796  002C1A  0101               	movlb	1	; () banked
 17797  002C1C  0E01               	movlw	high _wrkbuf
 17798  002C1E  6E1B               	movwf	?_putsUSART+1,c
 17799  002C20  0E70               	movlw	low _wrkbuf
 17800  002C22  6E1A               	movwf	?_putsUSART,c
 17801  002C24  ECE6  F025         	call	_putsUSART	;wreg free
 17802                           
 17803                           ;main.c: 2076: putsUSART((char *) "\r\n");
 17804  002C28  0E74               	movlw	high (STR_188+50)
 17805  002C2A  6E1B               	movwf	?_putsUSART+1,c
 17806  002C2C  0EAE               	movlw	low (STR_188+50)
 17807  002C2E  6E1A               	movwf	?_putsUSART,c
 17808  002C30  ECE6  F025         	call	_putsUSART	;wreg free
 17809                           
 17810                           ;main.c: 2078: putsUSART((char *) "Received CAN frames: ");
 17811  002C34  0E7D               	movlw	high STR_159
 17812  002C36  6E1B               	movwf	?_putsUSART+1,c
 17813  002C38  0E1C               	movlw	low STR_159
 17814  002C3A  6E1A               	movwf	?_putsUSART,c
 17815  002C3C  ECE6  F025         	call	_putsUSART	;wreg free
 17816                           
 17817                           ;main.c: 2079: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 17818  002C40  0100               	movlb	0	; () banked
 17819  002C42  67D3               	tstfsz	_bHex& (0+255),b
 17820  002C44  D004               	goto	l13432
 17821                           
 17822                           ; BSR set to: 0
 17823  002C46  0E7F               	movlw	high STR_153
 17824  002C48  6F80               	movwf	(_printStatistics$1374+1)& (0+255),b
 17825  002C4A  0EE1               	movlw	low STR_153
 17826  002C4C  D003               	goto	L23
 17827  002C4E                     l13432:
 17828                           
 17829                           ; BSR set to: 0
 17830  002C4E  0E7F               	movlw	high STR_152
 17831  002C50  6F80               	movwf	(_printStatistics$1374+1)& (0+255),b
 17832  002C52  0E73               	movlw	low STR_152
 17833  002C54                     L23:
 17834  002C54  6F7F               	movwf	_printStatistics$1374& (0+255),b
 17835                           
 17836                           ; BSR set to: 0
 17837  002C56  0E01               	movlw	high _wrkbuf
 17838  002C58  0100               	movlb	0	; () banked
 17839  002C5A  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17840  002C5C  0E70               	movlw	low _wrkbuf
 17841  002C5E  6F60               	movwf	?_sprintf& (0+255),b
 17842  002C60  C07F  F062         	movff	_printStatistics$1374,?_sprintf+2
 17843  002C64  C080  F063         	movff	_printStatistics$1374+1,?_sprintf+3
 17844  002C68  C10C  F064         	movff	_cntRxFrames,?_sprintf+4
 17845  002C6C  C10D  F065         	movff	_cntRxFrames+1,?_sprintf+5
 17846  002C70  C10E  F066         	movff	_cntRxFrames+2,?_sprintf+6
 17847  002C74  C10F  F067         	movff	_cntRxFrames+3,?_sprintf+7
 17848  002C78  EC3C  F00A         	call	_sprintf	;wreg free
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;main.c: 2080: putsUSART(wrkbuf);
 17852  002C7C  0101               	movlb	1	; () banked
 17853  002C7E  0E01               	movlw	high _wrkbuf
 17854  002C80  6E1B               	movwf	?_putsUSART+1,c
 17855  002C82  0E70               	movlw	low _wrkbuf
 17856  002C84  6E1A               	movwf	?_putsUSART,c
 17857  002C86  ECE6  F025         	call	_putsUSART	;wreg free
 17858                           
 17859                           ;main.c: 2081: putsUSART((char *) "\r\n");
 17860  002C8A  0E74               	movlw	high (STR_188+50)
 17861  002C8C  6E1B               	movwf	?_putsUSART+1,c
 17862  002C8E  0EAE               	movlw	low (STR_188+50)
 17863  002C90  6E1A               	movwf	?_putsUSART,c
 17864  002C92  ECE6  F025         	call	_putsUSART	;wreg free
 17865                           
 17866                           ;main.c: 2083: putsUSART((char *) "Received CAN bytes: ");
 17867  002C96  0E7D               	movlw	high STR_163
 17868  002C98  6E1B               	movwf	?_putsUSART+1,c
 17869  002C9A  0E32               	movlw	low STR_163
 17870  002C9C  6E1A               	movwf	?_putsUSART,c
 17871  002C9E  ECE6  F025         	call	_putsUSART	;wreg free
 17872                           
 17873                           ;main.c: 2084: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 17874  002CA2  0100               	movlb	0	; () banked
 17875  002CA4  67D3               	tstfsz	_bHex& (0+255),b
 17876  002CA6  D004               	goto	l13446
 17877                           
 17878                           ; BSR set to: 0
 17879  002CA8  0E7F               	movlw	high STR_153
 17880  002CAA  6F82               	movwf	(_printStatistics$1380+1)& (0+255),b
 17881  002CAC  0EE1               	movlw	low STR_153
 17882  002CAE  D003               	goto	L24
 17883  002CB0                     l13446:
 17884                           
 17885                           ; BSR set to: 0
 17886  002CB0  0E7F               	movlw	high STR_152
 17887  002CB2  6F82               	movwf	(_printStatistics$1380+1)& (0+255),b
 17888  002CB4  0E73               	movlw	low STR_152
 17889  002CB6                     L24:
 17890  002CB6  6F81               	movwf	_printStatistics$1380& (0+255),b
 17891                           
 17892                           ; BSR set to: 0
 17893  002CB8  0E01               	movlw	high _wrkbuf
 17894  002CBA  0100               	movlb	0	; () banked
 17895  002CBC  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17896  002CBE  0E70               	movlw	low _wrkbuf
 17897  002CC0  6F60               	movwf	?_sprintf& (0+255),b
 17898  002CC2  C081  F062         	movff	_printStatistics$1380,?_sprintf+2
 17899  002CC6  C082  F063         	movff	_printStatistics$1380+1,?_sprintf+3
 17900  002CCA  C108  F064         	movff	_cntRxBytes,?_sprintf+4
 17901  002CCE  C109  F065         	movff	_cntRxBytes+1,?_sprintf+5
 17902  002CD2  C10A  F066         	movff	_cntRxBytes+2,?_sprintf+6
 17903  002CD6  C10B  F067         	movff	_cntRxBytes+3,?_sprintf+7
 17904  002CDA  EC3C  F00A         	call	_sprintf	;wreg free
 17905                           
 17906                           ; BSR set to: 0
 17907                           ;main.c: 2085: putsUSART(wrkbuf);
 17908  002CDE  0101               	movlb	1	; () banked
 17909  002CE0  0E01               	movlw	high _wrkbuf
 17910  002CE2  6E1B               	movwf	?_putsUSART+1,c
 17911  002CE4  0E70               	movlw	low _wrkbuf
 17912  002CE6  6E1A               	movwf	?_putsUSART,c
 17913  002CE8  ECE6  F025         	call	_putsUSART	;wreg free
 17914                           
 17915                           ;main.c: 2086: putsUSART((char *) "\r\n");
 17916  002CEC  0E74               	movlw	high (STR_188+50)
 17917  002CEE  6E1B               	movwf	?_putsUSART+1,c
 17918  002CF0  0EAE               	movlw	low (STR_188+50)
 17919  002CF2  6E1A               	movwf	?_putsUSART,c
 17920  002CF4  EFE6  F025         	goto	_putsUSART	;wreg free
 17921  002CF8                     __end_of_printStatistics:
 17922                           	opt stack 0
 17923                           tblptru	equ	0xFF8
 17924                           tblptrh	equ	0xFF7
 17925                           tblptrl	equ	0xFF6
 17926                           tablat	equ	0xFF5
 17927                           prodh	equ	0xFF4
 17928                           prodl	equ	0xFF3
 17929                           intcon	equ	0xFF2
 17930                           indf0	equ	0xFEF
 17931                           postinc0	equ	0xFEE
 17932                           fsr0h	equ	0xFEA
 17933                           fsr0l	equ	0xFE9
 17934                           wreg	equ	0xFE8
 17935                           indf1	equ	0xFE7
 17936                           postinc1	equ	0xFE6
 17937                           postdec1	equ	0xFE5
 17938                           fsr1h	equ	0xFE2
 17939                           fsr1l	equ	0xFE1
 17940                           indf2	equ	0xFDF
 17941                           postinc2	equ	0xFDE
 17942                           postdec2	equ	0xFDD
 17943                           plusw2	equ	0xFDB
 17944                           fsr2h	equ	0xFDA
 17945                           fsr2l	equ	0xFD9
 17946                           status	equ	0xFD8
 17947                           
 17948 ;; *************** function _atoi *****************
 17949 ;; Defined at:
 17950 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 17951 ;; Parameters:    Size  Location     Type
 17952 ;;  s               2   30[COMRAM] PTR const unsigned char 
 17953 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 17954 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 17955 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 17956 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 17957 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 17958 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 17959 ;; Auto vars:     Size  Location     Type
 17960 ;;  a               2   35[COMRAM] int 
 17961 ;;  sign            1   34[COMRAM] unsigned char 
 17962 ;; Return value:  Size  Location     Type
 17963 ;;                  2   30[COMRAM] int 
 17964 ;; Registers used:
 17965 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17966 ;; Tracked objects:
 17967 ;;		On entry : C/2
 17968 ;;		On exit  : 0/0
 17969 ;;		Unchanged: 0/0
 17970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17971 ;;      Params:         2       0       0       0       0       0       0
 17972 ;;      Locals:         3       0       0       0       0       0       0
 17973 ;;      Temps:          2       0       0       0       0       0       0
 17974 ;;      Totals:         7       0       0       0       0       0       0
 17975 ;;Total ram usage:        7 bytes
 17976 ;; Hardware stack levels used:    1
 17977 ;; Hardware stack levels required when called:    3
 17978 ;; This function calls:
 17979 ;;		_isdigit
 17980 ;;		___wmul
 17981 ;; This function is called by:
 17982 ;;		_doModeVerbose
 17983 ;; This function uses a non-reentrant model
 17984 ;;
 17985                           
 17986                           	psect	text39
 17987  0036DA                     __ptext39:
 17988                           	opt stack 0
 17989  0036DA                     _atoi:
 17990                           	opt stack 26
 17991                           
 17992                           ;incstack = 0
 17993                           ;incstack = 0
 17994  0036DA  D002               	goto	l10702
 17995  0036DC                     l10700:
 17996  0036DC  4A1F               	infsnz	atoi@s,f,c
 17997  0036DE  2A20               	incf	atoi@s+1,f,c
 17998  0036E0                     l10702:
 17999  0036E0  501F               	movf	atoi@s,w,c
 18000  0036E2  6EF6               	movwf	tblptrl,c
 18001  0036E4  6EE9               	movwf	fsr0l,c
 18002  0036E6  0E05               	movlw	(high __ramtop+-1)
 18003  0036E8  6EEA               	movwf	fsr0h,c
 18004  0036EA  5020               	movf	atoi@s+1,w,c
 18005  0036EC  64EA               	cpfsgt	fsr0h,c
 18006  0036EE  D003               	bra	u13257
 18007  0036F0  6EEA               	movwf	fsr0h,c
 18008  0036F2  50EF               	movf	indf0,w,c
 18009  0036F4  D003               	bra	u13250
 18010  0036F6                     u13257:
 18011  0036F6  6EF7               	movwf	tblptrh,c
 18012  0036F8  0008               	tblrd		*
 18013  0036FA  50F5               	movf	tablat,w,c
 18014  0036FC                     u13250:
 18015  0036FC  0A20               	xorlw	32
 18016  0036FE  E0EE               	bz	l10700
 18017  003700  D864               	call	PL22	;call to abstracted procedure
 18018  003702  64EA               	cpfsgt	fsr0h,c
 18019  003704  D003               	bra	u13277
 18020  003706  6EEA               	movwf	fsr0h,c
 18021  003708  50EF               	movf	indf0,w,c
 18022  00370A  D003               	bra	u13270
 18023  00370C                     u13277:
 18024  00370C  6EF7               	movwf	tblptrh,c
 18025  00370E  0008               	tblrd		*
 18026  003710  50F5               	movf	tablat,w,c
 18027  003712                     u13270:
 18028  003712  0A09               	xorlw	9
 18029  003714  E0E3               	bz	l10700
 18030  003716  6A24               	clrf	atoi@a,c
 18031  003718  6A25               	clrf	atoi@a+1,c
 18032  00371A  6A23               	clrf	atoi@sign,c
 18033  00371C  D856               	call	PL22	;call to abstracted procedure
 18034  00371E  64EA               	cpfsgt	fsr0h,c
 18035  003720  D003               	bra	u13297
 18036  003722  6EEA               	movwf	fsr0h,c
 18037  003724  50EF               	movf	indf0,w,c
 18038  003726  D003               	bra	u13290
 18039  003728                     u13297:
 18040  003728  6EF7               	movwf	tblptrh,c
 18041  00372A  0008               	tblrd		*
 18042  00372C  50F5               	movf	tablat,w,c
 18043  00372E                     u13290:
 18044  00372E  0A2D               	xorlw	45
 18045  003730  E102               	bnz	l10710
 18046  003732  2A23               	incf	atoi@sign,f,c
 18047  003734  D00B               	goto	l10712
 18048  003736                     l10710:
 18049  003736  D849               	call	PL22	;call to abstracted procedure
 18050  003738  64EA               	cpfsgt	fsr0h,c
 18051  00373A  D003               	bra	u13317
 18052  00373C  6EEA               	movwf	fsr0h,c
 18053  00373E  50EF               	movf	indf0,w,c
 18054  003740  D003               	bra	u13310
 18055  003742                     u13317:
 18056  003742  6EF7               	movwf	tblptrh,c
 18057  003744  0008               	tblrd		*
 18058  003746  50F5               	movf	tablat,w,c
 18059  003748                     u13310:
 18060  003748  0A2B               	xorlw	43
 18061  00374A  E11F               	bnz	l10718
 18062  00374C                     l10712:
 18063  00374C  4A1F               	infsnz	atoi@s,f,c
 18064  00374E  2A20               	incf	atoi@s+1,f,c
 18065  003750  D01C               	goto	l10718
 18066  003752                     l10714:
 18067  003752  C024  F019         	movff	atoi@a,?___wmul
 18068  003756  C025  F01A         	movff	atoi@a+1,?___wmul+1
 18069  00375A  6A1C               	clrf	?___wmul+3,c
 18070  00375C  0E0A               	movlw	10
 18071  00375E  6E1B               	movwf	?___wmul+2,c
 18072  003760  EC10  F028         	call	___wmul	;wreg free
 18073  003764  D832               	call	PL22	;call to abstracted procedure
 18074  003766  64EA               	cpfsgt	fsr0h,c
 18075  003768  D003               	bra	u13337
 18076  00376A  6EEA               	movwf	fsr0h,c
 18077  00376C  50EF               	movf	indf0,w,c
 18078  00376E  D003               	bra	u13330
 18079  003770                     u13337:
 18080  003770  6EF7               	movwf	tblptrh,c
 18081  003772  0008               	tblrd		*
 18082  003774  50F5               	movf	tablat,w,c
 18083  003776                     u13330:
 18084  003776  2619               	addwf	?___wmul,f,c
 18085  003778  0E00               	movlw	0
 18086  00377A  221A               	addwfc	?___wmul+1,f,c
 18087  00377C  0ED0               	movlw	208
 18088  00377E  2419               	addwf	?___wmul,w,c
 18089  003780  6E24               	movwf	atoi@a,c
 18090  003782  0EFF               	movlw	255
 18091  003784  201A               	addwfc	?___wmul+1,w,c
 18092  003786  6E25               	movwf	atoi@a+1,c
 18093  003788  D7E1               	goto	l10712
 18094  00378A                     l10718:
 18095  00378A  D81F               	call	PL22	;call to abstracted procedure
 18096  00378C  64EA               	cpfsgt	fsr0h,c
 18097  00378E  D003               	bra	u13347
 18098  003790  6EEA               	movwf	fsr0h,c
 18099  003792  50EF               	movf	indf0,w,c
 18100  003794  D003               	bra	u13340
 18101  003796                     u13347:
 18102  003796  6EF7               	movwf	tblptrh,c
 18103  003798  0008               	tblrd		*
 18104  00379A  50F5               	movf	tablat,w,c
 18105  00379C                     u13340:
 18106  00379C  EC80  F028         	call	_isdigit
 18107  0037A0  E2D8               	bc	l10714
 18108  0037A2  5023               	movf	atoi@sign,w,c
 18109  0037A4  E00D               	bz	l1918
 18110  0037A6  C024  F021         	movff	atoi@a,??_atoi
 18111  0037AA  C025  F022         	movff	atoi@a+1,??_atoi+1
 18112  0037AE  1E21               	comf	??_atoi,f,c
 18113  0037B0  1E22               	comf	??_atoi+1,f,c
 18114  0037B2  4A21               	infsnz	??_atoi,f,c
 18115  0037B4  2A22               	incf	??_atoi+1,f,c
 18116  0037B6  C021  F01F         	movff	??_atoi,?_atoi
 18117  0037BA  C022  F020         	movff	??_atoi+1,?_atoi+1
 18118  0037BE  D004               	goto	l1919
 18119  0037C0                     l1918:
 18120  0037C0  C024  F01F         	movff	atoi@a,?_atoi
 18121  0037C4  C025  F020         	movff	atoi@a+1,?_atoi+1
 18122  0037C8                     l1919:
 18123  0037C8  0012               	return	
 18124  0037CA                     __end_of_atoi:
 18125                           	opt stack 0
 18126  0037CA                     PL22:
 18127                           	opt stack 26
 18128  0037CA  501F               	movf	atoi@s,w,c
 18129  0037CC  6EF6               	movwf	tblptrl,c
 18130  0037CE  6EE9               	movwf	fsr0l,c
 18131  0037D0  0E05               	movlw	(high __ramtop+-1)
 18132  0037D2  6EEA               	movwf	fsr0h,c
 18133  0037D4  5020               	movf	atoi@s+1,w,c
 18134  0037D6  0012               	return	
 18135  0037D8                     __end_ofPL22:
 18136                           	opt stack 0
 18137                           tblptru	equ	0xFF8
 18138                           tblptrh	equ	0xFF7
 18139                           tblptrl	equ	0xFF6
 18140                           tablat	equ	0xFF5
 18141                           prodh	equ	0xFF4
 18142                           prodl	equ	0xFF3
 18143                           intcon	equ	0xFF2
 18144                           indf0	equ	0xFEF
 18145                           postinc0	equ	0xFEE
 18146                           fsr0h	equ	0xFEA
 18147                           fsr0l	equ	0xFE9
 18148                           wreg	equ	0xFE8
 18149                           indf1	equ	0xFE7
 18150                           postinc1	equ	0xFE6
 18151                           postdec1	equ	0xFE5
 18152                           fsr1h	equ	0xFE2
 18153                           fsr1l	equ	0xFE1
 18154                           indf2	equ	0xFDF
 18155                           postinc2	equ	0xFDE
 18156                           postdec2	equ	0xFDD
 18157                           plusw2	equ	0xFDB
 18158                           fsr2h	equ	0xFDA
 18159                           fsr2l	equ	0xFD9
 18160                           status	equ	0xFD8
 18161                           
 18162 ;; *************** function _strtok *****************
 18163 ;; Defined at:
 18164 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 18165 ;; Parameters:    Size  Location     Type
 18166 ;;  s1              2   36[COMRAM] PTR unsigned char 
 18167 ;;		 -> NULL(0), cmdbuf(80), 
 18168 ;;  s2              2   38[COMRAM] PTR const unsigned char 
 18169 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18170 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18171 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18172 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18173 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18174 ;;		 -> STR_30(2), STR_29(2), 
 18175 ;; Auto vars:     Size  Location     Type
 18176 ;;		None
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  2   36[COMRAM] PTR unsigned char 
 18179 ;; Registers used:
 18180 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/1
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18186 ;;      Params:         4       0       0       0       0       0       0
 18187 ;;      Locals:         0       0       0       0       0       0       0
 18188 ;;      Temps:          0       0       0       0       0       0       0
 18189 ;;      Totals:         4       0       0       0       0       0       0
 18190 ;;Total ram usage:        4 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    4
 18193 ;; This function calls:
 18194 ;;		_strspn
 18195 ;;		_strcspn
 18196 ;; This function is called by:
 18197 ;;		_doModeVerbose
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text40
 18202  004438                     __ptext40:
 18203                           	opt stack 0
 18204  004438                     _strtok:
 18205                           	opt stack 25
 18206                           
 18207                           ;incstack = 0
 18208                           ;incstack = 0
 18209  004438  5026               	movf	strtok@s1+1,w,c
 18210  00443A  1025               	iorwf	strtok@s1,w,c
 18211  00443C  E104               	bnz	l10680
 18212  00443E  C037  F025         	movff	strtok@sp,strtok@s1
 18213  004442  C038  F026         	movff	strtok@sp+1,strtok@s1+1
 18214  004446                     l10680:
 18215  004446  5026               	movf	strtok@s1+1,w,c
 18216  004448  1025               	iorwf	strtok@s1,w,c
 18217  00444A  E016               	bz	L25
 18218  00444C  C025  F01F         	movff	strtok@s1,?_strspn
 18219  004450  C026  F020         	movff	strtok@s1+1,?_strspn+1
 18220  004454  C027  F021         	movff	strtok@s2,?_strspn+2
 18221  004458  C028  F022         	movff	strtok@s2+1,?_strspn+3
 18222  00445C  ECA1  F026         	call	_strspn	;wreg free
 18223  004460  501F               	movf	?_strspn,w,c
 18224  004462  2625               	addwf	strtok@s1,f,c
 18225  004464  5020               	movf	?_strspn+1,w,c
 18226  004466  2226               	addwfc	strtok@s1+1,f,c
 18227  004468  C025  FFD9         	movff	strtok@s1,fsr2l
 18228  00446C  C026  FFDA         	movff	strtok@s1+1,fsr2h
 18229  004470  50DF               	movf	indf2,w,c
 18230  004472  E105               	bnz	l10690
 18231  004474  6A37               	clrf	strtok@sp,c
 18232  004476  6A38               	clrf	strtok@sp+1,c
 18233  004478                     L25:
 18234  004478  6A25               	clrf	?_strtok,c
 18235  00447A  6A26               	clrf	?_strtok+1,c
 18236  00447C  D025               	goto	l2411
 18237  00447E                     l10690:
 18238  00447E  C025  F01F         	movff	strtok@s1,?_strcspn
 18239  004482  C026  F020         	movff	strtok@s1+1,?_strcspn+1
 18240  004486  C027  F021         	movff	strtok@s2,?_strcspn+2
 18241  00448A  C028  F022         	movff	strtok@s2+1,?_strcspn+3
 18242  00448E  EC7F  F026         	call	_strcspn	;wreg free
 18243  004492  501F               	movf	?_strcspn,w,c
 18244  004494  2425               	addwf	strtok@s1,w,c
 18245  004496  6E37               	movwf	strtok@sp,c
 18246  004498  5020               	movf	?_strcspn+1,w,c
 18247  00449A  2026               	addwfc	strtok@s1+1,w,c
 18248  00449C  6E38               	movwf	strtok@sp+1,c
 18249  00449E  C037  FFD9         	movff	strtok@sp,fsr2l
 18250  0044A2  C038  FFDA         	movff	strtok@sp+1,fsr2h
 18251  0044A6  50DF               	movf	indf2,w,c
 18252  0044A8  E009               	bz	l2413
 18253  0044AA  C037  FFD9         	movff	strtok@sp,fsr2l
 18254  0044AE  C038  FFDA         	movff	strtok@sp+1,fsr2h
 18255  0044B2  0E00               	movlw	0
 18256  0044B4  6EDF               	movwf	indf2,c
 18257  0044B6  4A37               	infsnz	strtok@sp,f,c
 18258  0044B8  2A38               	incf	strtok@sp+1,f,c
 18259  0044BA  D002               	goto	l2414
 18260  0044BC                     l2413:
 18261  0044BC  6A37               	clrf	strtok@sp,c
 18262  0044BE  6A38               	clrf	strtok@sp+1,c
 18263  0044C0                     l2414:
 18264  0044C0  C025  F025         	movff	strtok@s1,?_strtok
 18265  0044C4  C026  F026         	movff	strtok@s1+1,?_strtok+1
 18266  0044C8                     l2411:
 18267  0044C8  0012               	return	
 18268  0044CA                     __end_of_strtok:
 18269                           	opt stack 0
 18270                           tblptru	equ	0xFF8
 18271                           tblptrh	equ	0xFF7
 18272                           tblptrl	equ	0xFF6
 18273                           tablat	equ	0xFF5
 18274                           prodh	equ	0xFF4
 18275                           prodl	equ	0xFF3
 18276                           intcon	equ	0xFF2
 18277                           indf0	equ	0xFEF
 18278                           postinc0	equ	0xFEE
 18279                           fsr0h	equ	0xFEA
 18280                           fsr0l	equ	0xFE9
 18281                           wreg	equ	0xFE8
 18282                           indf1	equ	0xFE7
 18283                           postinc1	equ	0xFE6
 18284                           postdec1	equ	0xFE5
 18285                           fsr1h	equ	0xFE2
 18286                           fsr1l	equ	0xFE1
 18287                           indf2	equ	0xFDF
 18288                           postinc2	equ	0xFDE
 18289                           postdec2	equ	0xFDD
 18290                           plusw2	equ	0xFDB
 18291                           fsr2h	equ	0xFDA
 18292                           fsr2l	equ	0xFD9
 18293                           status	equ	0xFD8
 18294                           
 18295 ;; *************** function _strcspn *****************
 18296 ;; Defined at:
 18297 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 18298 ;; Parameters:    Size  Location     Type
 18299 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18300 ;;		 -> NULL(0), cmdbuf(80), 
 18301 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18302 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18303 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18304 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18305 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18306 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18307 ;;		 -> STR_30(2), STR_29(2), 
 18308 ;; Auto vars:     Size  Location     Type
 18309 ;;  i               2   34[COMRAM] unsigned int 
 18310 ;; Return value:  Size  Location     Type
 18311 ;;                  2   30[COMRAM] unsigned int 
 18312 ;; Registers used:
 18313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18314 ;; Tracked objects:
 18315 ;;		On entry : 0/1
 18316 ;;		On exit  : 0/0
 18317 ;;		Unchanged: 0/0
 18318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18319 ;;      Params:         4       0       0       0       0       0       0
 18320 ;;      Locals:         2       0       0       0       0       0       0
 18321 ;;      Temps:          0       0       0       0       0       0       0
 18322 ;;      Totals:         6       0       0       0       0       0       0
 18323 ;;Total ram usage:        6 bytes
 18324 ;; Hardware stack levels used:    1
 18325 ;; Hardware stack levels required when called:    3
 18326 ;; This function calls:
 18327 ;;		_strchr
 18328 ;; This function is called by:
 18329 ;;		_strtok
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333                           	psect	text41
 18334  004CFE                     __ptext41:
 18335                           	opt stack 0
 18336  004CFE                     _strcspn:
 18337                           	opt stack 25
 18338                           
 18339                           ;incstack = 0
 18340                           ;incstack = 0
 18341  004CFE  6A23               	clrf	strcspn@i,c
 18342  004D00  6A24               	clrf	strcspn@i+1,c
 18343  004D02  D004               	goto	l12456
 18344  004D04                     l12454:
 18345  004D04  4A1F               	infsnz	strcspn@s1,f,c
 18346  004D06  2A20               	incf	strcspn@s1+1,f,c
 18347  004D08  4A23               	infsnz	strcspn@i,f,c
 18348  004D0A  2A24               	incf	strcspn@i+1,f,c
 18349  004D0C                     l12456:
 18350  004D0C  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18351  004D10  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18352  004D14  50DF               	movf	indf2,w,c
 18353  004D16  E010               	bz	l2438
 18354  004D18  C021  F019         	movff	strcspn@s2,?_strchr
 18355  004D1C  C022  F01A         	movff	strcspn@s2+1,?_strchr+1
 18356  004D20  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18357  004D24  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18358  004D28  50DF               	movf	indf2,w,c
 18359  004D2A  6E1B               	movwf	?_strchr+2,c
 18360  004D2C  6A1C               	clrf	?_strchr+3,c
 18361  004D2E  EC5F  F025         	call	_strchr	;wreg free
 18362  004D32  501A               	movf	?_strchr+1,w,c
 18363  004D34  1019               	iorwf	?_strchr,w,c
 18364  004D36  E0E6               	bz	l12454
 18365  004D38                     l2438:
 18366  004D38  C023  F01F         	movff	strcspn@i,?_strcspn
 18367  004D3C  C024  F020         	movff	strcspn@i+1,?_strcspn+1
 18368  004D40  0012               	return	
 18369  004D42                     __end_of_strcspn:
 18370                           	opt stack 0
 18371                           tblptru	equ	0xFF8
 18372                           tblptrh	equ	0xFF7
 18373                           tblptrl	equ	0xFF6
 18374                           tablat	equ	0xFF5
 18375                           prodh	equ	0xFF4
 18376                           prodl	equ	0xFF3
 18377                           intcon	equ	0xFF2
 18378                           indf0	equ	0xFEF
 18379                           postinc0	equ	0xFEE
 18380                           fsr0h	equ	0xFEA
 18381                           fsr0l	equ	0xFE9
 18382                           wreg	equ	0xFE8
 18383                           indf1	equ	0xFE7
 18384                           postinc1	equ	0xFE6
 18385                           postdec1	equ	0xFE5
 18386                           fsr1h	equ	0xFE2
 18387                           fsr1l	equ	0xFE1
 18388                           indf2	equ	0xFDF
 18389                           postinc2	equ	0xFDE
 18390                           postdec2	equ	0xFDD
 18391                           plusw2	equ	0xFDB
 18392                           fsr2h	equ	0xFDA
 18393                           fsr2l	equ	0xFD9
 18394                           status	equ	0xFD8
 18395                           
 18396 ;; *************** function _strspn *****************
 18397 ;; Defined at:
 18398 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 18399 ;; Parameters:    Size  Location     Type
 18400 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18401 ;;		 -> NULL(0), cmdbuf(80), 
 18402 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18403 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18404 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18405 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18406 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18407 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18408 ;;		 -> STR_30(2), STR_29(2), 
 18409 ;; Auto vars:     Size  Location     Type
 18410 ;;  i               2   34[COMRAM] unsigned int 
 18411 ;; Return value:  Size  Location     Type
 18412 ;;                  2   30[COMRAM] unsigned int 
 18413 ;; Registers used:
 18414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18415 ;; Tracked objects:
 18416 ;;		On entry : 0/1
 18417 ;;		On exit  : 0/0
 18418 ;;		Unchanged: 0/0
 18419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18420 ;;      Params:         4       0       0       0       0       0       0
 18421 ;;      Locals:         2       0       0       0       0       0       0
 18422 ;;      Temps:          0       0       0       0       0       0       0
 18423 ;;      Totals:         6       0       0       0       0       0       0
 18424 ;;Total ram usage:        6 bytes
 18425 ;; Hardware stack levels used:    1
 18426 ;; Hardware stack levels required when called:    3
 18427 ;; This function calls:
 18428 ;;		_strchr
 18429 ;; This function is called by:
 18430 ;;		_strtok
 18431 ;; This function uses a non-reentrant model
 18432 ;;
 18433                           
 18434                           	psect	text42
 18435  004D42                     __ptext42:
 18436                           	opt stack 0
 18437  004D42                     _strspn:
 18438                           	opt stack 25
 18439                           
 18440                           ;incstack = 0
 18441                           ;incstack = 0
 18442  004D42  6A23               	clrf	strspn@i,c
 18443  004D44  6A24               	clrf	strspn@i+1,c
 18444  004D46  D004               	goto	l12448
 18445  004D48                     l12446:
 18446  004D48  4A1F               	infsnz	strspn@s1,f,c
 18447  004D4A  2A20               	incf	strspn@s1+1,f,c
 18448  004D4C  4A23               	infsnz	strspn@i,f,c
 18449  004D4E  2A24               	incf	strspn@i+1,f,c
 18450  004D50                     l12448:
 18451  004D50  C01F  FFD9         	movff	strspn@s1,fsr2l
 18452  004D54  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18453  004D58  50DF               	movf	indf2,w,c
 18454  004D5A  E010               	bz	l2457
 18455  004D5C  C021  F019         	movff	strspn@s2,?_strchr
 18456  004D60  C022  F01A         	movff	strspn@s2+1,?_strchr+1
 18457  004D64  C01F  FFD9         	movff	strspn@s1,fsr2l
 18458  004D68  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18459  004D6C  50DF               	movf	indf2,w,c
 18460  004D6E  6E1B               	movwf	?_strchr+2,c
 18461  004D70  6A1C               	clrf	?_strchr+3,c
 18462  004D72  EC5F  F025         	call	_strchr	;wreg free
 18463  004D76  501A               	movf	?_strchr+1,w,c
 18464  004D78  1019               	iorwf	?_strchr,w,c
 18465  004D7A  E1E6               	bnz	l12446
 18466  004D7C                     l2457:
 18467  004D7C  C023  F01F         	movff	strspn@i,?_strspn
 18468  004D80  C024  F020         	movff	strspn@i+1,?_strspn+1
 18469  004D84  0012               	return	
 18470  004D86                     __end_of_strspn:
 18471                           	opt stack 0
 18472                           tblptru	equ	0xFF8
 18473                           tblptrh	equ	0xFF7
 18474                           tblptrl	equ	0xFF6
 18475                           tablat	equ	0xFF5
 18476                           prodh	equ	0xFF4
 18477                           prodl	equ	0xFF3
 18478                           intcon	equ	0xFF2
 18479                           indf0	equ	0xFEF
 18480                           postinc0	equ	0xFEE
 18481                           fsr0h	equ	0xFEA
 18482                           fsr0l	equ	0xFE9
 18483                           wreg	equ	0xFE8
 18484                           indf1	equ	0xFE7
 18485                           postinc1	equ	0xFE6
 18486                           postdec1	equ	0xFE5
 18487                           fsr1h	equ	0xFE2
 18488                           fsr1l	equ	0xFE1
 18489                           indf2	equ	0xFDF
 18490                           postinc2	equ	0xFDE
 18491                           postdec2	equ	0xFDD
 18492                           plusw2	equ	0xFDB
 18493                           fsr2h	equ	0xFDA
 18494                           fsr2l	equ	0xFD9
 18495                           status	equ	0xFD8
 18496                           
 18497 ;; *************** function _strchr *****************
 18498 ;; Defined at:
 18499 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 18500 ;; Parameters:    Size  Location     Type
 18501 ;;  ptr             2   24[COMRAM] PTR const unsigned char 
 18502 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18503 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18504 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18505 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18506 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18507 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 18508 ;;  chr             2   26[COMRAM] int 
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;		None
 18511 ;; Return value:  Size  Location     Type
 18512 ;;                  2   24[COMRAM] PTR unsigned char 
 18513 ;; Registers used:
 18514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/2
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18520 ;;      Params:         4       0       0       0       0       0       0
 18521 ;;      Locals:         0       0       0       0       0       0       0
 18522 ;;      Temps:          2       0       0       0       0       0       0
 18523 ;;      Totals:         6       0       0       0       0       0       0
 18524 ;;Total ram usage:        6 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    2
 18527 ;; This function calls:
 18528 ;;		Nothing
 18529 ;; This function is called by:
 18530 ;;		_doModeVerbose
 18531 ;;		_strcspn
 18532 ;;		_strspn
 18533 ;; This function uses a non-reentrant model
 18534 ;;
 18535                           
 18536                           	psect	text43
 18537  004ABE                     __ptext43:
 18538                           	opt stack 0
 18539  004ABE                     _strchr:
 18540                           	opt stack 27
 18541  004ABE                     l2359:
 18542  004ABE  5019               	movf	strchr@ptr,w,c
 18543  004AC0  6EF6               	movwf	tblptrl,c
 18544  004AC2  6EE9               	movwf	fsr0l,c
 18545  004AC4  0E05               	movlw	(high __ramtop+-1)
 18546  004AC6  6EEA               	movwf	fsr0h,c
 18547  004AC8  501A               	movf	strchr@ptr+1,w,c
 18548  004ACA  64EA               	cpfsgt	fsr0h,c
 18549  004ACC  D003               	bra	u13617
 18550  004ACE  6EEA               	movwf	fsr0h,c
 18551  004AD0  50EF               	movf	indf0,w,c
 18552  004AD2  D003               	bra	u13610
 18553  004AD4                     u13617:
 18554  004AD4  6EF7               	movwf	tblptrh,c
 18555  004AD6  0008               	tblrd		*
 18556  004AD8  50F5               	movf	tablat,w,c
 18557  004ADA                     u13610:
 18558  004ADA  181B               	xorwf	strchr@chr,w,c
 18559  004ADC  E105               	bnz	l10964
 18560  004ADE  C019  F019         	movff	strchr@ptr,?_strchr
 18561  004AE2  C01A  F01A         	movff	strchr@ptr+1,?_strchr+1
 18562  004AE6  D018               	goto	l2361
 18563  004AE8                     l10964:
 18564  004AE8  5019               	movf	strchr@ptr,w,c
 18565  004AEA  6E1D               	movwf	??_strchr& (0+255),c
 18566  004AEC  501A               	movf	strchr@ptr+1,w,c
 18567  004AEE  6E1E               	movwf	(??_strchr+1)& (0+255),c
 18568  004AF0  4A19               	infsnz	strchr@ptr,f,c
 18569  004AF2  2A1A               	incf	strchr@ptr+1,f,c
 18570  004AF4  501D               	movf	??_strchr,w,c
 18571  004AF6  6EF6               	movwf	tblptrl,c
 18572  004AF8  6EE9               	movwf	fsr0l,c
 18573  004AFA  0E05               	movlw	(high __ramtop+-1)
 18574  004AFC  6EEA               	movwf	fsr0h,c
 18575  004AFE  501E               	movf	??_strchr+1,w,c
 18576  004B00  64EA               	cpfsgt	fsr0h,c
 18577  004B02  D003               	bra	u13637
 18578  004B04  6EEA               	movwf	fsr0h,c
 18579  004B06  50EF               	movf	indf0,w,c
 18580  004B08  D003               	bra	u13630
 18581  004B0A                     u13637:
 18582  004B0A  6EF7               	movwf	tblptrh,c
 18583  004B0C  0008               	tblrd		*
 18584  004B0E  50F5               	movf	tablat,w,c
 18585  004B10                     u13630:
 18586  004B10  0900               	iorlw	0
 18587  004B12  E1D5               	bnz	l2359
 18588  004B14  6A19               	clrf	?_strchr,c
 18589  004B16  6A1A               	clrf	?_strchr+1,c
 18590  004B18                     l2361:
 18591  004B18  0012               	return	
 18592  004B1A                     __end_of_strchr:
 18593                           	opt stack 0
 18594                           tblptru	equ	0xFF8
 18595                           tblptrh	equ	0xFF7
 18596                           tblptrl	equ	0xFF6
 18597                           tablat	equ	0xFF5
 18598                           prodh	equ	0xFF4
 18599                           prodl	equ	0xFF3
 18600                           intcon	equ	0xFF2
 18601                           indf0	equ	0xFEF
 18602                           postinc0	equ	0xFEE
 18603                           fsr0h	equ	0xFEA
 18604                           fsr0l	equ	0xFE9
 18605                           wreg	equ	0xFE8
 18606                           indf1	equ	0xFE7
 18607                           postinc1	equ	0xFE6
 18608                           postdec1	equ	0xFE5
 18609                           fsr1h	equ	0xFE2
 18610                           fsr1l	equ	0xFE1
 18611                           indf2	equ	0xFDF
 18612                           postinc2	equ	0xFDE
 18613                           postdec2	equ	0xFDD
 18614                           plusw2	equ	0xFDB
 18615                           fsr2h	equ	0xFDA
 18616                           fsr2l	equ	0xFD9
 18617                           status	equ	0xFD8
 18618                           
 18619 ;; *************** function _stristr *****************
 18620 ;; Defined at:
 18621 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;  s1              2   37[COMRAM] PTR const unsigned char 
 18624 ;;		 -> NULL(0), cmdbuf(80), 
 18625 ;;  s2              2   39[COMRAM] PTR const unsigned char 
 18626 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18627 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18628 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18629 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18630 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18631 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18632 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18633 ;;		 -> STR_7(5), STR_5(5), 
 18634 ;; Auto vars:     Size  Location     Type
 18635 ;;		None
 18636 ;; Return value:  Size  Location     Type
 18637 ;;                  2   37[COMRAM] PTR unsigned char 
 18638 ;; Registers used:
 18639 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18640 ;; Tracked objects:
 18641 ;;		On entry : F/1
 18642 ;;		On exit  : 0/0
 18643 ;;		Unchanged: 0/0
 18644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18645 ;;      Params:         4       0       0       0       0       0       0
 18646 ;;      Locals:         0       0       0       0       0       0       0
 18647 ;;      Temps:          0       0       0       0       0       0       0
 18648 ;;      Totals:         4       0       0       0       0       0       0
 18649 ;;Total ram usage:        4 bytes
 18650 ;; Hardware stack levels used:    1
 18651 ;; Hardware stack levels required when called:    4
 18652 ;; This function calls:
 18653 ;;		_strlen
 18654 ;;		_strnicmp
 18655 ;;		_strichr
 18656 ;; This function is called by:
 18657 ;;		_doModeVerbose
 18658 ;; This function uses a non-reentrant model
 18659 ;;
 18660                           
 18661                           	psect	text44
 18662  0046EA                     __ptext44:
 18663                           	opt stack 0
 18664  0046EA                     _stristr:
 18665                           	opt stack 25
 18666                           
 18667                           ; BSR set to: 1
 18668                           
 18669                           ;incstack = 0
 18670                           ;incstack = 0
 18671  0046EA  D02F               	goto	l10668
 18672  0046EC                     l10662:
 18673  0046EC  C026  F01D         	movff	stristr@s1,?_strnicmp
 18674  0046F0  C027  F01E         	movff	stristr@s1+1,?_strnicmp+1
 18675  0046F4  C028  F01F         	movff	stristr@s2,?_strnicmp+2
 18676  0046F8  C029  F020         	movff	stristr@s2+1,?_strnicmp+3
 18677  0046FC  C028  F019         	movff	stristr@s2,?_strlen
 18678  004700  C029  F01A         	movff	stristr@s2+1,?_strlen+1
 18679  004704  EC82  F027         	call	_strlen	;wreg free
 18680  004708  C019  F021         	movff	?_strlen,?_strnicmp+4
 18681  00470C  C01A  F022         	movff	?_strlen+1,?_strnicmp+5
 18682  004710  ECFD  F024         	call	_strnicmp	;wreg free
 18683  004714  501E               	movf	?_strnicmp+1,w,c
 18684  004716  101D               	iorwf	?_strnicmp,w,c
 18685  004718  E105               	bnz	l10666
 18686  00471A  C026  F026         	movff	stristr@s1,?_stristr
 18687  00471E  C027  F027         	movff	stristr@s1+1,?_stristr+1
 18688  004722  D01E               	goto	l2380
 18689  004724                     l10666:
 18690  004724  2826               	incf	stristr@s1,w,c
 18691  004726  6E1A               	movwf	?_strichr,c
 18692  004728  0E00               	movlw	0
 18693  00472A  2027               	addwfc	stristr@s1+1,w,c
 18694  00472C  6E1B               	movwf	?_strichr+1,c
 18695  00472E  C028  FFF6         	movff	stristr@s2,tblptrl
 18696  004732  C029  FFF7         	movff	stristr@s2+1,tblptrh
 18697  004736  0008               	tblrd		*
 18698  004738  50F5               	movf	tablat,w,c
 18699  00473A  6E1C               	movwf	?_strichr+2,c
 18700  00473C  6A1D               	clrf	?_strichr+3,c
 18701  00473E  EC44  F027         	call	_strichr	;wreg free
 18702  004742  C01A  F026         	movff	?_strichr,stristr@s1
 18703  004746  C01B  F027         	movff	?_strichr+1,stristr@s1+1
 18704  00474A                     l10668:
 18705  00474A  5027               	movf	stristr@s1+1,w,c
 18706  00474C  1026               	iorwf	stristr@s1,w,c
 18707  00474E  E006               	bz	l2383
 18708  004750  C026  FFD9         	movff	stristr@s1,fsr2l
 18709  004754  C027  FFDA         	movff	stristr@s1+1,fsr2h
 18710  004758  50DF               	movf	indf2,w,c
 18711  00475A  E1C8               	bnz	l10662
 18712  00475C                     l2383:
 18713  00475C  6A26               	clrf	?_stristr,c
 18714  00475E  6A27               	clrf	?_stristr+1,c
 18715  004760                     l2380:
 18716  004760  0012               	return	
 18717  004762                     __end_of_stristr:
 18718                           	opt stack 0
 18719                           tblptru	equ	0xFF8
 18720                           tblptrh	equ	0xFF7
 18721                           tblptrl	equ	0xFF6
 18722                           tablat	equ	0xFF5
 18723                           prodh	equ	0xFF4
 18724                           prodl	equ	0xFF3
 18725                           intcon	equ	0xFF2
 18726                           indf0	equ	0xFEF
 18727                           postinc0	equ	0xFEE
 18728                           fsr0h	equ	0xFEA
 18729                           fsr0l	equ	0xFE9
 18730                           wreg	equ	0xFE8
 18731                           indf1	equ	0xFE7
 18732                           postinc1	equ	0xFE6
 18733                           postdec1	equ	0xFE5
 18734                           fsr1h	equ	0xFE2
 18735                           fsr1l	equ	0xFE1
 18736                           indf2	equ	0xFDF
 18737                           postinc2	equ	0xFDE
 18738                           postdec2	equ	0xFDD
 18739                           plusw2	equ	0xFDB
 18740                           fsr2h	equ	0xFDA
 18741                           fsr2l	equ	0xFD9
 18742                           status	equ	0xFD8
 18743                           
 18744 ;; *************** function _strichr *****************
 18745 ;; Defined at:
 18746 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 18747 ;; Parameters:    Size  Location     Type
 18748 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 18749 ;;		 -> NULL(0), cmdbuf(80), 
 18750 ;;  chr             2   27[COMRAM] int 
 18751 ;; Auto vars:     Size  Location     Type
 18752 ;;		None
 18753 ;; Return value:  Size  Location     Type
 18754 ;;                  2   25[COMRAM] PTR unsigned char 
 18755 ;; Registers used:
 18756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18757 ;; Tracked objects:
 18758 ;;		On entry : 0/1
 18759 ;;		On exit  : 0/0
 18760 ;;		Unchanged: 0/0
 18761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18762 ;;      Params:         4       0       0       0       0       0       0
 18763 ;;      Locals:         0       0       0       0       0       0       0
 18764 ;;      Temps:          0       0       0       0       0       0       0
 18765 ;;      Totals:         4       0       0       0       0       0       0
 18766 ;;Total ram usage:        4 bytes
 18767 ;; Hardware stack levels used:    1
 18768 ;; Hardware stack levels required when called:    3
 18769 ;; This function calls:
 18770 ;;		_toupper
 18771 ;; This function is called by:
 18772 ;;		_stristr
 18773 ;; This function uses a non-reentrant model
 18774 ;;
 18775                           
 18776                           	psect	text45
 18777  004E88                     __ptext45:
 18778                           	opt stack 0
 18779  004E88                     _strichr:
 18780                           	opt stack 25
 18781                           
 18782                           ;incstack = 0
 18783                           ;incstack = 0
 18784  004E88  501C               	movf	strichr@chr,w,c
 18785  004E8A  ECB9  F028         	call	_toupper
 18786  004E8E  6E1C               	movwf	strichr@chr,c
 18787  004E90  6A1D               	clrf	strichr@chr+1,c
 18788  004E92  D010               	goto	l12432
 18789  004E94                     l12426:
 18790  004E94  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18791  004E98  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18792  004E9C  50DF               	movf	indf2,w,c
 18793  004E9E  ECB9  F028         	call	_toupper
 18794  004EA2  181C               	xorwf	strichr@chr,w,c
 18795  004EA4  E105               	bnz	l12430
 18796  004EA6  C01A  F01A         	movff	strichr@ptr,?_strichr
 18797  004EAA  C01B  F01B         	movff	strichr@ptr+1,?_strichr+1
 18798  004EAE  D00A               	goto	l2447
 18799  004EB0                     l12430:
 18800  004EB0  4A1A               	infsnz	strichr@ptr,f,c
 18801  004EB2  2A1B               	incf	strichr@ptr+1,f,c
 18802  004EB4                     l12432:
 18803  004EB4  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18804  004EB8  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18805  004EBC  50DF               	movf	indf2,w,c
 18806  004EBE  E1EA               	bnz	l12426
 18807  004EC0  6A1A               	clrf	?_strichr,c
 18808  004EC2  6A1B               	clrf	?_strichr+1,c
 18809  004EC4                     l2447:
 18810  004EC4  0012               	return	
 18811  004EC6                     __end_of_strichr:
 18812                           	opt stack 0
 18813                           tblptru	equ	0xFF8
 18814                           tblptrh	equ	0xFF7
 18815                           tblptrl	equ	0xFF6
 18816                           tablat	equ	0xFF5
 18817                           prodh	equ	0xFF4
 18818                           prodl	equ	0xFF3
 18819                           intcon	equ	0xFF2
 18820                           indf0	equ	0xFEF
 18821                           postinc0	equ	0xFEE
 18822                           fsr0h	equ	0xFEA
 18823                           fsr0l	equ	0xFE9
 18824                           wreg	equ	0xFE8
 18825                           indf1	equ	0xFE7
 18826                           postinc1	equ	0xFE6
 18827                           postdec1	equ	0xFE5
 18828                           fsr1h	equ	0xFE2
 18829                           fsr1l	equ	0xFE1
 18830                           indf2	equ	0xFDF
 18831                           postinc2	equ	0xFDE
 18832                           postdec2	equ	0xFDD
 18833                           plusw2	equ	0xFDB
 18834                           fsr2h	equ	0xFDA
 18835                           fsr2l	equ	0xFD9
 18836                           status	equ	0xFD8
 18837                           
 18838 ;; *************** function _strnicmp *****************
 18839 ;; Defined at:
 18840 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 18841 ;; Parameters:    Size  Location     Type
 18842 ;;  s1              2   28[COMRAM] PTR const unsigned char 
 18843 ;;		 -> NULL(0), cmdbuf(80), 
 18844 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 18845 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18846 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18847 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18848 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18849 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18850 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18851 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18852 ;;		 -> STR_7(5), STR_5(5), 
 18853 ;;  len             2   32[COMRAM] unsigned int 
 18854 ;; Auto vars:     Size  Location     Type
 18855 ;;  r               1   36[COMRAM] char 
 18856 ;; Return value:  Size  Location     Type
 18857 ;;                  2   28[COMRAM] int 
 18858 ;; Registers used:
 18859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/1
 18862 ;;		On exit  : 0/0
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18865 ;;      Params:         6       0       0       0       0       0       0
 18866 ;;      Locals:         1       0       0       0       0       0       0
 18867 ;;      Temps:          2       0       0       0       0       0       0
 18868 ;;      Totals:         9       0       0       0       0       0       0
 18869 ;;Total ram usage:        9 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; Hardware stack levels required when called:    3
 18872 ;; This function calls:
 18873 ;;		_toupper
 18874 ;; This function is called by:
 18875 ;;		_stristr
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           	psect	text46
 18880  0049FA                     __ptext46:
 18881                           	opt stack 0
 18882  0049FA                     _strnicmp:
 18883                           	opt stack 25
 18884                           
 18885                           ;incstack = 0
 18886                           ;incstack = 0
 18887  0049FA  D026               	goto	l12422
 18888  0049FC                     l12412:
 18889  0049FC  C01F  FFF6         	movff	strnicmp@s2,tblptrl
 18890  004A00  C020  FFF7         	movff	strnicmp@s2+1,tblptrh
 18891  004A04  0008               	tblrd		*
 18892  004A06  50F5               	movf	tablat,w,c
 18893  004A08  ECB9  F028         	call	_toupper
 18894  004A0C  6E23               	movwf	??_strnicmp& (0+255),c
 18895  004A0E  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18896  004A12  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18897  004A16  50DF               	movf	indf2,w,c
 18898  004A18  ECB9  F028         	call	_toupper
 18899  004A1C  6E24               	movwf	(??_strnicmp+1)& (0+255),c
 18900  004A1E  5023               	movf	??_strnicmp,w,c
 18901  004A20  5C24               	subwf	??_strnicmp+1,w,c
 18902  004A22  6E25               	movwf	strnicmp@r,c
 18903  004A24  6625               	tstfsz	strnicmp@r& (0+255),c
 18904  004A26  D006               	goto	l12416
 18905  004A28  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18906  004A2C  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18907  004A30  50DF               	movf	indf2,w,c
 18908  004A32  E106               	bnz	l12420
 18909  004A34                     l12416:
 18910  004A34  5025               	movf	strnicmp@r,w,c
 18911  004A36  6E1D               	movwf	?_strnicmp,c
 18912  004A38  6A1E               	clrf	?_strnicmp+1,c
 18913  004A3A  BE1D               	btfsc	?_strnicmp,7,c
 18914  004A3C  061E               	decf	?_strnicmp+1,f,c
 18915  004A3E  D00D               	goto	l2399
 18916  004A40                     l12420:
 18917  004A40  4A1D               	infsnz	strnicmp@s1,f,c
 18918  004A42  2A1E               	incf	strnicmp@s1+1,f,c
 18919  004A44  4A1F               	infsnz	strnicmp@s2,f,c
 18920  004A46  2A20               	incf	strnicmp@s2+1,f,c
 18921  004A48                     l12422:
 18922  004A48  0621               	decf	strnicmp@len,f,c
 18923  004A4A  A0D8               	btfss	status,0,c
 18924  004A4C  0622               	decf	strnicmp@len+1,f,c
 18925  004A4E  2821               	incf	strnicmp@len& (0+255),w,c
 18926  004A50  B4D8               	btfsc	status,2,c
 18927  004A52  2822               	incf	(strnicmp@len+1)& (0+255),w,c
 18928  004A54  E1D3               	bnz	l12412
 18929  004A56  6A1D               	clrf	?_strnicmp,c
 18930  004A58  6A1E               	clrf	?_strnicmp+1,c
 18931  004A5A                     l2399:
 18932  004A5A  0012               	return	
 18933  004A5C                     __end_of_strnicmp:
 18934                           	opt stack 0
 18935                           tblptru	equ	0xFF8
 18936                           tblptrh	equ	0xFF7
 18937                           tblptrl	equ	0xFF6
 18938                           tablat	equ	0xFF5
 18939                           prodh	equ	0xFF4
 18940                           prodl	equ	0xFF3
 18941                           intcon	equ	0xFF2
 18942                           indf0	equ	0xFEF
 18943                           postinc0	equ	0xFEE
 18944                           fsr0h	equ	0xFEA
 18945                           fsr0l	equ	0xFE9
 18946                           wreg	equ	0xFE8
 18947                           indf1	equ	0xFE7
 18948                           postinc1	equ	0xFE6
 18949                           postdec1	equ	0xFE5
 18950                           fsr1h	equ	0xFE2
 18951                           fsr1l	equ	0xFE1
 18952                           indf2	equ	0xFDF
 18953                           postinc2	equ	0xFDE
 18954                           postdec2	equ	0xFDD
 18955                           plusw2	equ	0xFDB
 18956                           fsr2h	equ	0xFDA
 18957                           fsr2l	equ	0xFD9
 18958                           status	equ	0xFD8
 18959                           
 18960 ;; *************** function _toupper *****************
 18961 ;; Defined at:
 18962 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 18963 ;; Parameters:    Size  Location     Type
 18964 ;;  c               1    wreg     unsigned char 
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;  c               1   24[COMRAM] unsigned char 
 18967 ;; Return value:  Size  Location     Type
 18968 ;;                  1    wreg      unsigned char 
 18969 ;; Registers used:
 18970 ;;		wreg, status,2, status,0
 18971 ;; Tracked objects:
 18972 ;;		On entry : 0/1
 18973 ;;		On exit  : 0/0
 18974 ;;		Unchanged: 0/0
 18975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18976 ;;      Params:         0       0       0       0       0       0       0
 18977 ;;      Locals:         1       0       0       0       0       0       0
 18978 ;;      Temps:          0       0       0       0       0       0       0
 18979 ;;      Totals:         1       0       0       0       0       0       0
 18980 ;;Total ram usage:        1 bytes
 18981 ;; Hardware stack levels used:    1
 18982 ;; Hardware stack levels required when called:    2
 18983 ;; This function calls:
 18984 ;;		Nothing
 18985 ;; This function is called by:
 18986 ;;		_strnicmp
 18987 ;;		_strichr
 18988 ;; This function uses a non-reentrant model
 18989 ;;
 18990                           
 18991                           	psect	text47
 18992  005172                     __ptext47:
 18993                           	opt stack 0
 18994  005172                     _toupper:
 18995                           	opt stack 25
 18996                           
 18997                           ;incstack = 0
 18998                           ;incstack = 0
 18999                           ;toupper@c stored from wreg
 19000  005172  CFE8 F019          	movff	wreg,toupper@c
 19001  005176  0E7B               	movlw	123
 19002  005178  6019               	cpfslt	toupper@c,c
 19003  00517A  D004               	goto	l12440
 19004  00517C  0E60               	movlw	96
 19005  00517E  6419               	cpfsgt	toupper@c,c
 19006  005180  D001               	goto	l12440
 19007  005182  9A19               	bcf	toupper@c,5,c
 19008  005184                     l12440:
 19009  005184  5019               	movf	toupper@c,w,c
 19010  005186  0012               	return	
 19011  005188                     __end_of_toupper:
 19012                           	opt stack 0
 19013                           tblptru	equ	0xFF8
 19014                           tblptrh	equ	0xFF7
 19015                           tblptrl	equ	0xFF6
 19016                           tablat	equ	0xFF5
 19017                           prodh	equ	0xFF4
 19018                           prodl	equ	0xFF3
 19019                           intcon	equ	0xFF2
 19020                           indf0	equ	0xFEF
 19021                           postinc0	equ	0xFEE
 19022                           fsr0h	equ	0xFEA
 19023                           fsr0l	equ	0xFE9
 19024                           wreg	equ	0xFE8
 19025                           indf1	equ	0xFE7
 19026                           postinc1	equ	0xFE6
 19027                           postdec1	equ	0xFE5
 19028                           fsr1h	equ	0xFE2
 19029                           fsr1l	equ	0xFE1
 19030                           indf2	equ	0xFDF
 19031                           postinc2	equ	0xFDE
 19032                           postdec2	equ	0xFDD
 19033                           plusw2	equ	0xFDB
 19034                           fsr2h	equ	0xFDA
 19035                           fsr2l	equ	0xFD9
 19036                           status	equ	0xFD8
 19037                           
 19038 ;; *************** function _strlen *****************
 19039 ;; Defined at:
 19040 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 19041 ;; Parameters:    Size  Location     Type
 19042 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19043 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19044 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19045 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19046 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19047 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19048 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19049 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19050 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19051 ;;		 -> cmdbuf(80), 
 19052 ;; Auto vars:     Size  Location     Type
 19053 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19054 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19055 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19056 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19057 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19058 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19059 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19060 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19061 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19062 ;;		 -> cmdbuf(80), 
 19063 ;; Return value:  Size  Location     Type
 19064 ;;                  2   24[COMRAM] unsigned int 
 19065 ;; Registers used:
 19066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19067 ;; Tracked objects:
 19068 ;;		On entry : 0/1
 19069 ;;		On exit  : 0/0
 19070 ;;		Unchanged: 0/0
 19071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19072 ;;      Params:         2       0       0       0       0       0       0
 19073 ;;      Locals:         2       0       0       0       0       0       0
 19074 ;;      Temps:          0       0       0       0       0       0       0
 19075 ;;      Totals:         4       0       0       0       0       0       0
 19076 ;;Total ram usage:        4 bytes
 19077 ;; Hardware stack levels used:    1
 19078 ;; Hardware stack levels required when called:    2
 19079 ;; This function calls:
 19080 ;;		Nothing
 19081 ;; This function is called by:
 19082 ;;		_doModeSLCAN
 19083 ;;		_receivePrintEventSLCAN
 19084 ;;		_printGUID
 19085 ;;		_hexStringToBytes
 19086 ;;		_stristr
 19087 ;; This function uses a non-reentrant model
 19088 ;;
 19089                           
 19090                           	psect	text48
 19091  004F04                     __ptext48:
 19092                           	opt stack 0
 19093  004F04                     _strlen:
 19094                           	opt stack 26
 19095                           
 19096                           ;incstack = 0
 19097                           ;incstack = 0
 19098  004F04  C019  F01B         	movff	strlen@s,strlen@cp
 19099  004F08  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19100  004F0C  D002               	goto	l11808
 19101  004F0E                     l11806:
 19102  004F0E  4A1B               	infsnz	strlen@cp,f,c
 19103  004F10  2A1C               	incf	strlen@cp+1,f,c
 19104  004F12                     l11808:
 19105  004F12  501B               	movf	strlen@cp,w,c
 19106  004F14  6EF6               	movwf	tblptrl,c
 19107  004F16  6EE9               	movwf	fsr0l,c
 19108  004F18  0E05               	movlw	(high __ramtop+-1)
 19109  004F1A  6EEA               	movwf	fsr0h,c
 19110  004F1C  501C               	movf	strlen@cp+1,w,c
 19111  004F1E  64EA               	cpfsgt	fsr0h,c
 19112  004F20  D003               	bra	u15247
 19113  004F22  6EEA               	movwf	fsr0h,c
 19114  004F24  50EF               	movf	indf0,w,c
 19115  004F26  D003               	bra	u15240
 19116  004F28                     u15247:
 19117  004F28  6EF7               	movwf	tblptrh,c
 19118  004F2A  0008               	tblrd		*
 19119  004F2C  50F5               	movf	tablat,w,c
 19120  004F2E                     u15240:
 19121  004F2E  0900               	iorlw	0
 19122  004F30  E1EE               	bnz	l11806
 19123  004F32  5019               	movf	strlen@s,w,c
 19124  004F34  5C1B               	subwf	strlen@cp,w,c
 19125  004F36  6E19               	movwf	?_strlen,c
 19126  004F38  501A               	movf	strlen@s+1,w,c
 19127  004F3A  581C               	subwfb	strlen@cp+1,w,c
 19128  004F3C  6E1A               	movwf	?_strlen+1,c
 19129  004F3E  0012               	return	
 19130  004F40                     __end_of_strlen:
 19131                           	opt stack 0
 19132                           tblptru	equ	0xFF8
 19133                           tblptrh	equ	0xFF7
 19134                           tblptrl	equ	0xFF6
 19135                           tablat	equ	0xFF5
 19136                           prodh	equ	0xFF4
 19137                           prodl	equ	0xFF3
 19138                           intcon	equ	0xFF2
 19139                           indf0	equ	0xFEF
 19140                           postinc0	equ	0xFEE
 19141                           fsr0h	equ	0xFEA
 19142                           fsr0l	equ	0xFE9
 19143                           wreg	equ	0xFE8
 19144                           indf1	equ	0xFE7
 19145                           postinc1	equ	0xFE6
 19146                           postdec1	equ	0xFE5
 19147                           fsr1h	equ	0xFE2
 19148                           fsr1l	equ	0xFE1
 19149                           indf2	equ	0xFDF
 19150                           postinc2	equ	0xFDE
 19151                           postdec2	equ	0xFDD
 19152                           plusw2	equ	0xFDB
 19153                           fsr2h	equ	0xFDA
 19154                           fsr2l	equ	0xFD9
 19155                           status	equ	0xFD8
 19156                           
 19157 ;; *************** function _receivePrintEventVerbose *****************
 19158 ;; Defined at:
 19159 ;;		line 1529 in file "main.c"
 19160 ;; Parameters:    Size  Location     Type
 19161 ;;		None
 19162 ;; Auto vars:     Size  Location     Type
 19163 ;;  i               1   44[BANK0 ] unsigned char 
 19164 ;; Return value:  Size  Location     Type
 19165 ;;                  1    wreg      enum E15660
 19166 ;; Registers used:
 19167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 19168 ;; Tracked objects:
 19169 ;;		On entry : F/0
 19170 ;;		On exit  : 0/0
 19171 ;;		Unchanged: 0/0
 19172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19173 ;;      Params:         0       0       0       0       0       0       0
 19174 ;;      Locals:         0      13       0       0       0       0       0
 19175 ;;      Temps:          0       5       0       0       0       0       0
 19176 ;;      Totals:         0      18       0       0       0       0       0
 19177 ;;Total ram usage:       18 bytes
 19178 ;; Hardware stack levels used:    1
 19179 ;; Hardware stack levels required when called:    6
 19180 ;; This function calls:
 19181 ;;		_putsUSART
 19182 ;;		_sprintf
 19183 ;;		_getVSCPFrame
 19184 ;; This function is called by:
 19185 ;;		_doModeVerbose
 19186 ;; This function uses a non-reentrant model
 19187 ;;
 19188                           
 19189                           	psect	text49
 19190  0021F8                     __ptext49:
 19191                           	opt stack 0
 19192  0021F8                     _receivePrintEventVerbose:
 19193                           	opt stack 23
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;main.c: 1530: uint8_t i;
 19197                           ;main.c: 1532: if (getVSCPFrame(&vscpClass,
 19198                           ;main.c: 1533: &vscpType,
 19199                           ;main.c: 1534: &vscpNodeId,
 19200                           ;main.c: 1535: &vscpPriority,
 19201                           ;main.c: 1536: &vscpSize,
 19202                           ;main.c: 1537: vscpData)) {
 19203                           
 19204                           ;incstack = 0
 19205                           ;incstack = 0
 19206  0021F8  0EDF               	movlw	low _vscpType
 19207  0021FA  6F60               	movwf	?_getVSCPFrame& (0+255),b
 19208  0021FC  0EDC               	movlw	low _vscpNodeId
 19209  0021FE  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 19210  002200  0EDD               	movlw	low _vscpPriority
 19211  002202  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 19212  002204  0EDE               	movlw	low _vscpSize
 19213  002206  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 19214  002208  0E40               	movlw	low _vscpData
 19215  00220A  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 19216  00220C  0EDA               	movlw	_vscpClass& (0+255)
 19217  00220E  ECF2  F022         	call	_getVSCPFrame
 19218  002212  0900               	iorlw	0
 19219  002214  E101 D129          	bz	l13394
 19220                           
 19221                           ;main.c: 1540: cntRxFrames++;
 19222  002218  0101               	movlb	1	; () banked
 19223  00221A  2B0C               	incf	_cntRxFrames& (0+255),f,b
 19224  00221C  0E00               	movlw	0
 19225  00221E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 19226  002220  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 19227  002222  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 19228                           
 19229                           ;main.c: 1541: cntRxBytes += vscpSize;
 19230  002224  0100               	movlb	0	; () banked
 19231  002226  51DE               	movf	_vscpSize& (0+255),w,b
 19232  002228  0101               	movlb	1	; () banked
 19233  00222A  2708               	addwf	_cntRxBytes& (0+255),f,b
 19234  00222C  0E00               	movlw	0
 19235  00222E  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 19236  002230  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 19237  002232  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 19238                           
 19239                           ; BSR set to: 1
 19240                           ;main.c: 1543: putsUSART((char *) "<Prio=");
 19241  002234  0E7F               	movlw	high STR_130
 19242  002236  6E1B               	movwf	?_putsUSART+1,c
 19243  002238  0E42               	movlw	low STR_130
 19244  00223A  6E1A               	movwf	?_putsUSART,c
 19245  00223C  ECE6  F025         	call	_putsUSART	;wreg free
 19246                           
 19247                           ;main.c: 1544: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 19248  002240  0100               	movlb	0	; () banked
 19249  002242  67D3               	tstfsz	_bHex& (0+255),b
 19250  002244  D004               	goto	l13312
 19251                           
 19252                           ; BSR set to: 0
 19253  002246  0E7F               	movlw	high STR_53
 19254  002248  6F81               	movwf	(_receivePrintEventVerbose$1280+1)& (0+255),b
 19255  00224A  0EEE               	movlw	low STR_53
 19256  00224C  D003               	goto	L26
 19257  00224E                     l13312:
 19258                           
 19259                           ; BSR set to: 0
 19260  00224E  0E7F               	movlw	high STR_52
 19261  002250  6F81               	movwf	(_receivePrintEventVerbose$1280+1)& (0+255),b
 19262  002252  0E65               	movlw	low STR_52
 19263  002254                     L26:
 19264  002254  6F80               	movwf	_receivePrintEventVerbose$1280& (0+255),b
 19265                           
 19266                           ; BSR set to: 0
 19267  002256  0E01               	movlw	high _wrkbuf
 19268  002258  0100               	movlb	0	; () banked
 19269  00225A  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19270  00225C  0E70               	movlw	low _wrkbuf
 19271  00225E  6F60               	movwf	?_sprintf& (0+255),b
 19272  002260  C080  F062         	movff	_receivePrintEventVerbose$1280,?_sprintf+2
 19273  002264  C081  F063         	movff	_receivePrintEventVerbose$1280+1,?_sprintf+3
 19274  002268  C0DD  F064         	movff	_vscpPriority,?_sprintf+4
 19275  00226C  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19276  00226E  EC3C  F00A         	call	_sprintf	;wreg free
 19277                           
 19278                           ; BSR set to: 0
 19279                           ;main.c: 1545: putsUSART(wrkbuf);
 19280  002272  0101               	movlb	1	; () banked
 19281  002274  0E01               	movlw	high _wrkbuf
 19282  002276  6E1B               	movwf	?_putsUSART+1,c
 19283  002278  0E70               	movlw	low _wrkbuf
 19284  00227A  6E1A               	movwf	?_putsUSART,c
 19285  00227C  ECE6  F025         	call	_putsUSART	;wreg free
 19286                           
 19287                           ;main.c: 1546: putsUSART((char *) ",class=");
 19288  002280  0E7E               	movlw	high STR_133
 19289  002282  6E1B               	movwf	?_putsUSART+1,c
 19290  002284  0EF6               	movlw	low STR_133
 19291  002286  6E1A               	movwf	?_putsUSART,c
 19292  002288  ECE6  F025         	call	_putsUSART	;wreg free
 19293                           
 19294                           ;main.c: 1547: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 19295  00228C  0100               	movlb	0	; () banked
 19296  00228E  67D3               	tstfsz	_bHex& (0+255),b
 19297  002290  D004               	goto	l13324
 19298                           
 19299                           ; BSR set to: 0
 19300  002292  0E7F               	movlw	high STR_53
 19301  002294  6F83               	movwf	(_receivePrintEventVerbose$1285+1)& (0+255),b
 19302  002296  0EEE               	movlw	low STR_53
 19303  002298  D003               	goto	L27
 19304  00229A                     l13324:
 19305                           
 19306                           ; BSR set to: 0
 19307  00229A  0E7F               	movlw	high STR_134
 19308  00229C  6F83               	movwf	(_receivePrintEventVerbose$1285+1)& (0+255),b
 19309  00229E  0E6C               	movlw	low STR_134
 19310  0022A0                     L27:
 19311  0022A0  6F82               	movwf	_receivePrintEventVerbose$1285& (0+255),b
 19312                           
 19313                           ; BSR set to: 0
 19314  0022A2  0E01               	movlw	high _wrkbuf
 19315  0022A4  0100               	movlb	0	; () banked
 19316  0022A6  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19317  0022A8  0E70               	movlw	low _wrkbuf
 19318  0022AA  6F60               	movwf	?_sprintf& (0+255),b
 19319  0022AC  C082  F062         	movff	_receivePrintEventVerbose$1285,?_sprintf+2
 19320  0022B0  C083  F063         	movff	_receivePrintEventVerbose$1285+1,?_sprintf+3
 19321  0022B4  C0DA  F064         	movff	_vscpClass,?_sprintf+4
 19322  0022B8  C0DB  F065         	movff	_vscpClass+1,?_sprintf+5
 19323  0022BC  EC3C  F00A         	call	_sprintf	;wreg free
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;main.c: 1548: putsUSART(wrkbuf);
 19327  0022C0  0101               	movlb	1	; () banked
 19328  0022C2  0E01               	movlw	high _wrkbuf
 19329  0022C4  6E1B               	movwf	?_putsUSART+1,c
 19330  0022C6  0E70               	movlw	low _wrkbuf
 19331  0022C8  6E1A               	movwf	?_putsUSART,c
 19332  0022CA  ECE6  F025         	call	_putsUSART	;wreg free
 19333                           
 19334                           ;main.c: 1549: putsUSART((char *) ",type=");
 19335  0022CE  0E7F               	movlw	high STR_136
 19336  0022D0  6E1B               	movwf	?_putsUSART+1,c
 19337  0022D2  0E34               	movlw	low STR_136
 19338  0022D4  6E1A               	movwf	?_putsUSART,c
 19339  0022D6  ECE6  F025         	call	_putsUSART	;wreg free
 19340                           
 19341                           ;main.c: 1550: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 19342  0022DA  0100               	movlb	0	; () banked
 19343  0022DC  67D3               	tstfsz	_bHex& (0+255),b
 19344  0022DE  D004               	goto	l13336
 19345                           
 19346                           ; BSR set to: 0
 19347  0022E0  0E7F               	movlw	high STR_53
 19348  0022E2  6F85               	movwf	(_receivePrintEventVerbose$1290+1)& (0+255),b
 19349  0022E4  0EEE               	movlw	low STR_53
 19350  0022E6  D003               	goto	L28
 19351  0022E8                     l13336:
 19352                           
 19353                           ; BSR set to: 0
 19354  0022E8  0E7F               	movlw	high STR_52
 19355  0022EA  6F85               	movwf	(_receivePrintEventVerbose$1290+1)& (0+255),b
 19356  0022EC  0E65               	movlw	low STR_52
 19357  0022EE                     L28:
 19358  0022EE  6F84               	movwf	_receivePrintEventVerbose$1290& (0+255),b
 19359                           
 19360                           ; BSR set to: 0
 19361  0022F0  0E01               	movlw	high _wrkbuf
 19362  0022F2  0100               	movlb	0	; () banked
 19363  0022F4  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19364  0022F6  0E70               	movlw	low _wrkbuf
 19365  0022F8  6F60               	movwf	?_sprintf& (0+255),b
 19366  0022FA  C084  F062         	movff	_receivePrintEventVerbose$1290,?_sprintf+2
 19367  0022FE  C085  F063         	movff	_receivePrintEventVerbose$1290+1,?_sprintf+3
 19368  002302  C0DF  F064         	movff	_vscpType,?_sprintf+4
 19369  002306  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19370  002308  EC3C  F00A         	call	_sprintf	;wreg free
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;main.c: 1551: putsUSART(wrkbuf);
 19374  00230C  0101               	movlb	1	; () banked
 19375  00230E  0E01               	movlw	high _wrkbuf
 19376  002310  6E1B               	movwf	?_putsUSART+1,c
 19377  002312  0E70               	movlw	low _wrkbuf
 19378  002314  6E1A               	movwf	?_putsUSART,c
 19379  002316  ECE6  F025         	call	_putsUSART	;wreg free
 19380                           
 19381                           ;main.c: 1552: putsUSART((char *) ",nodeid=");
 19382  00231A  0E7E               	movlw	high STR_139
 19383  00231C  6E1B               	movwf	?_putsUSART+1,c
 19384  00231E  0EC4               	movlw	low STR_139
 19385  002320  6E1A               	movwf	?_putsUSART,c
 19386  002322  ECE6  F025         	call	_putsUSART	;wreg free
 19387                           
 19388                           ;main.c: 1553: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 19389  002326  0100               	movlb	0	; () banked
 19390  002328  67D3               	tstfsz	_bHex& (0+255),b
 19391  00232A  D004               	goto	l13348
 19392                           
 19393                           ; BSR set to: 0
 19394  00232C  0E7F               	movlw	high STR_53
 19395  00232E  6F87               	movwf	(_receivePrintEventVerbose$1295+1)& (0+255),b
 19396  002330  0EEE               	movlw	low STR_53
 19397  002332  D003               	goto	L29
 19398  002334                     l13348:
 19399                           
 19400                           ; BSR set to: 0
 19401  002334  0E7F               	movlw	high STR_52
 19402  002336  6F87               	movwf	(_receivePrintEventVerbose$1295+1)& (0+255),b
 19403  002338  0E65               	movlw	low STR_52
 19404  00233A                     L29:
 19405  00233A  6F86               	movwf	_receivePrintEventVerbose$1295& (0+255),b
 19406                           
 19407                           ; BSR set to: 0
 19408  00233C  0E01               	movlw	high _wrkbuf
 19409  00233E  0100               	movlb	0	; () banked
 19410  002340  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19411  002342  0E70               	movlw	low _wrkbuf
 19412  002344  6F60               	movwf	?_sprintf& (0+255),b
 19413  002346  C086  F062         	movff	_receivePrintEventVerbose$1295,?_sprintf+2
 19414  00234A  C087  F063         	movff	_receivePrintEventVerbose$1295+1,?_sprintf+3
 19415  00234E  C0DC  F064         	movff	_vscpNodeId,?_sprintf+4
 19416  002352  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19417  002354  EC3C  F00A         	call	_sprintf	;wreg free
 19418                           
 19419                           ; BSR set to: 0
 19420                           ;main.c: 1554: putsUSART(wrkbuf);
 19421  002358  0101               	movlb	1	; () banked
 19422  00235A  0E01               	movlw	high _wrkbuf
 19423  00235C  6E1B               	movwf	?_putsUSART+1,c
 19424  00235E  0E70               	movlw	low _wrkbuf
 19425  002360  6E1A               	movwf	?_putsUSART,c
 19426  002362  ECE6  F025         	call	_putsUSART	;wreg free
 19427                           
 19428                           ;main.c: 1555: putsUSART((char *) ",size=");
 19429  002366  0E7F               	movlw	high STR_142
 19430  002368  6E1B               	movwf	?_putsUSART+1,c
 19431  00236A  0E3B               	movlw	low STR_142
 19432  00236C  6E1A               	movwf	?_putsUSART,c
 19433  00236E  ECE6  F025         	call	_putsUSART	;wreg free
 19434                           
 19435                           ;main.c: 1556: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 19436  002372  0100               	movlb	0	; () banked
 19437  002374  67D3               	tstfsz	_bHex& (0+255),b
 19438  002376  D004               	goto	l13360
 19439                           
 19440                           ; BSR set to: 0
 19441  002378  0E7F               	movlw	high STR_53
 19442  00237A  6F89               	movwf	(_receivePrintEventVerbose$1300+1)& (0+255),b
 19443  00237C  0EEE               	movlw	low STR_53
 19444  00237E  D003               	goto	L30
 19445  002380                     l13360:
 19446                           
 19447                           ; BSR set to: 0
 19448  002380  0E7F               	movlw	high STR_52
 19449  002382  6F89               	movwf	(_receivePrintEventVerbose$1300+1)& (0+255),b
 19450  002384  0E65               	movlw	low STR_52
 19451  002386                     L30:
 19452  002386  6F88               	movwf	_receivePrintEventVerbose$1300& (0+255),b
 19453                           
 19454                           ; BSR set to: 0
 19455  002388  0E01               	movlw	high _wrkbuf
 19456  00238A  0100               	movlb	0	; () banked
 19457  00238C  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19458  00238E  0E70               	movlw	low _wrkbuf
 19459  002390  6F60               	movwf	?_sprintf& (0+255),b
 19460  002392  C088  F062         	movff	_receivePrintEventVerbose$1300,?_sprintf+2
 19461  002396  C089  F063         	movff	_receivePrintEventVerbose$1300+1,?_sprintf+3
 19462  00239A  C0DE  F064         	movff	_vscpSize,?_sprintf+4
 19463  00239E  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19464  0023A0  EC3C  F00A         	call	_sprintf	;wreg free
 19465                           
 19466                           ; BSR set to: 0
 19467                           ;main.c: 1557: putsUSART(wrkbuf);
 19468  0023A4  0101               	movlb	1	; () banked
 19469  0023A6  0E01               	movlw	high _wrkbuf
 19470  0023A8  6E1B               	movwf	?_putsUSART+1,c
 19471  0023AA  0E70               	movlw	low _wrkbuf
 19472  0023AC  6E1A               	movwf	?_putsUSART,c
 19473  0023AE  ECE6  F025         	call	_putsUSART	;wreg free
 19474                           
 19475                           ;main.c: 1558: if (vscpSize > 0) {
 19476  0023B2  0100               	movlb	0	; () banked
 19477  0023B4  51DE               	movf	_vscpSize& (0+255),w,b
 19478  0023B6  E04B               	bz	l13388
 19479                           
 19480                           ; BSR set to: 0
 19481                           ;main.c: 1559: putsUSART((char *) ",Data=");
 19482  0023B8  0E7F               	movlw	high STR_145
 19483  0023BA  6E1B               	movwf	?_putsUSART+1,c
 19484  0023BC  0E2D               	movlw	low STR_145
 19485  0023BE  6E1A               	movwf	?_putsUSART,c
 19486  0023C0  ECE6  F025         	call	_putsUSART	;wreg free
 19487                           
 19488                           ;main.c: 1560: for (i = 0; i < vscpSize; i++) {
 19489  0023C4  0100               	movlb	0	; () banked
 19490  0023C6  6B8C               	clrf	receivePrintEventVerbose@i& (0+255),b
 19491  0023C8  D03E               	goto	l13386
 19492  0023CA                     l871:
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;main.c: 1562: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 19496  0023CA  67D3               	tstfsz	_bHex& (0+255),b
 19497  0023CC  D004               	goto	l13374
 19498                           
 19499                           ; BSR set to: 0
 19500  0023CE  0E7F               	movlw	high STR_53
 19501  0023D0  6F8B               	movwf	(_receivePrintEventVerbose$1305+1)& (0+255),b
 19502  0023D2  0EEE               	movlw	low STR_53
 19503  0023D4  D003               	goto	L31
 19504  0023D6                     l13374:
 19505                           
 19506                           ; BSR set to: 0
 19507  0023D6  0E7F               	movlw	high STR_52
 19508  0023D8  6F8B               	movwf	(_receivePrintEventVerbose$1305+1)& (0+255),b
 19509  0023DA  0E65               	movlw	low STR_52
 19510  0023DC                     L31:
 19511  0023DC  6F8A               	movwf	_receivePrintEventVerbose$1305& (0+255),b
 19512                           
 19513                           ; BSR set to: 0
 19514  0023DE  0E01               	movlw	high _wrkbuf
 19515  0023E0  0100               	movlb	0	; () banked
 19516  0023E2  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19517  0023E4  0E70               	movlw	low _wrkbuf
 19518  0023E6  6F60               	movwf	?_sprintf& (0+255),b
 19519  0023E8  C08A  F062         	movff	_receivePrintEventVerbose$1305,?_sprintf+2
 19520  0023EC  C08B  F063         	movff	_receivePrintEventVerbose$1305+1,?_sprintf+3
 19521  0023F0  518C               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19522  0023F2  0F40               	addlw	low _vscpData
 19523  0023F4  6ED9               	movwf	fsr2l,c
 19524  0023F6  6ADA               	clrf	fsr2h,c
 19525  0023F8  50DF               	movf	indf2,w,c
 19526  0023FA  6F64               	movwf	(?_sprintf+4)& (0+255),b
 19527  0023FC  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19528  0023FE  EC3C  F00A         	call	_sprintf	;wreg free
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;main.c: 1563: putsUSART(wrkbuf);
 19532  002402  0101               	movlb	1	; () banked
 19533  002404  0E01               	movlw	high _wrkbuf
 19534  002406  6E1B               	movwf	?_putsUSART+1,c
 19535  002408  0E70               	movlw	low _wrkbuf
 19536  00240A  6E1A               	movwf	?_putsUSART,c
 19537  00240C  ECE6  F025         	call	_putsUSART	;wreg free
 19538                           
 19539                           ;main.c: 1564: if (i < (vscpSize - 1)) {
 19540  002410  0EFF               	movlw	255
 19541  002412  0100               	movlb	0	; () banked
 19542  002414  25DE               	addwf	_vscpSize& (0+255),w,b
 19543  002416  6F7B               	movwf	??_receivePrintEventVerbose& (0+255),b
 19544  002418  6B7C               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 19545  00241A  0EFF               	movlw	255
 19546  00241C  237C               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 19547  00241E  518C               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19548  002420  6F7D               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 19549  002422  6B7E               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 19550  002424  517E               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 19551  002426  0A80               	xorlw	128
 19552  002428  6F7F               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 19553  00242A  517B               	movf	??_receivePrintEventVerbose& (0+255),w,b
 19554  00242C  5D7D               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 19555  00242E  517C               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 19556  002430  0A80               	xorlw	128
 19557  002432  597F               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 19558  002434  E206               	bc	l13384
 19559                           
 19560                           ; BSR set to: 0
 19561                           ;main.c: 1565: putsUSART((char *) ",");
 19562  002436  0E7F               	movlw	high STR_29
 19563  002438  6E1B               	movwf	?_putsUSART+1,c
 19564  00243A  0EF5               	movlw	low STR_29
 19565  00243C  6E1A               	movwf	?_putsUSART,c
 19566  00243E  ECE6  F025         	call	_putsUSART	;wreg free
 19567  002442                     l13384:
 19568  002442  0100               	movlb	0	; () banked
 19569  002444  2B8C               	incf	receivePrintEventVerbose@i& (0+255),f,b
 19570  002446                     l13386:
 19571                           
 19572                           ; BSR set to: 0
 19573  002446  51DE               	movf	_vscpSize& (0+255),w,b
 19574  002448  5D8C               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 19575  00244A  E207               	bc	l878
 19576  00244C  D7BE               	goto	l871
 19577  00244E                     l13388:
 19578                           
 19579                           ; BSR set to: 0
 19580                           ;main.c: 1569: putsUSART((char *) ",Data=none");
 19581  00244E  0E7E               	movlw	high STR_149
 19582  002450  6E1B               	movwf	?_putsUSART+1,c
 19583  002452  0E92               	movlw	low STR_149
 19584  002454  6E1A               	movwf	?_putsUSART,c
 19585  002456  ECE6  F025         	call	_putsUSART	;wreg free
 19586  00245A                     l878:
 19587                           
 19588                           ;main.c: 1570: }
 19589                           ;main.c: 1571: putsUSART((char *) ">\r\n");
 19590  00245A  0E7F               	movlw	high STR_150
 19591  00245C  6E1B               	movwf	?_putsUSART+1,c
 19592  00245E  0ED5               	movlw	low STR_150
 19593  002460  6E1A               	movwf	?_putsUSART,c
 19594  002462  ECE6  F025         	call	_putsUSART	;wreg free
 19595                           
 19596                           ;main.c: 1572: return 1;
 19597  002466  0E01               	movlw	1
 19598  002468  D001               	goto	l879
 19599  00246A                     l13394:
 19600                           
 19601                           ;main.c: 1573: }
 19602                           ;main.c: 1575: return 0;
 19603  00246A  0E00               	movlw	0
 19604  00246C                     l879:
 19605  00246C  0012               	return	
 19606  00246E                     __end_of_receivePrintEventVerbose:
 19607                           	opt stack 0
 19608                           tblptru	equ	0xFF8
 19609                           tblptrh	equ	0xFF7
 19610                           tblptrl	equ	0xFF6
 19611                           tablat	equ	0xFF5
 19612                           prodh	equ	0xFF4
 19613                           prodl	equ	0xFF3
 19614                           intcon	equ	0xFF2
 19615                           indf0	equ	0xFEF
 19616                           postinc0	equ	0xFEE
 19617                           fsr0h	equ	0xFEA
 19618                           fsr0l	equ	0xFE9
 19619                           wreg	equ	0xFE8
 19620                           indf1	equ	0xFE7
 19621                           postinc1	equ	0xFE6
 19622                           postdec1	equ	0xFE5
 19623                           fsr1h	equ	0xFE2
 19624                           fsr1l	equ	0xFE1
 19625                           indf2	equ	0xFDF
 19626                           postinc2	equ	0xFDE
 19627                           postdec2	equ	0xFDD
 19628                           plusw2	equ	0xFDB
 19629                           fsr2h	equ	0xFDA
 19630                           fsr2l	equ	0xFD9
 19631                           status	equ	0xFD8
 19632                           
 19633 ;; *************** function _getVSCPFrame *****************
 19634 ;; Defined at:
 19635 ;;		line 2553 in file "main.c"
 19636 ;; Parameters:    Size  Location     Type
 19637 ;;  pvscpclass      1    wreg     PTR unsigned short 
 19638 ;;		 -> vscpClass(2), 
 19639 ;;  pvscptype       1    0[BANK0 ] PTR unsigned char 
 19640 ;;		 -> vscpType(1), 
 19641 ;;  pNodeId         1    1[BANK0 ] PTR unsigned char 
 19642 ;;		 -> vscpNodeId(1), 
 19643 ;;  pPriority       1    2[BANK0 ] PTR unsigned char 
 19644 ;;		 -> vscpPriority(1), 
 19645 ;;  pSize           1    3[BANK0 ] PTR unsigned char 
 19646 ;;		 -> vscpSize(1), 
 19647 ;;  pData           1    4[BANK0 ] PTR unsigned char 
 19648 ;;		 -> vscpData(8), 
 19649 ;; Auto vars:     Size  Location     Type
 19650 ;;  pvscpclass      1    9[BANK0 ] PTR unsigned short 
 19651 ;;		 -> vscpClass(2), 
 19652 ;;  id              4   10[BANK0 ] unsigned long 
 19653 ;; Return value:  Size  Location     Type
 19654 ;;                  1    wreg      unsigned char 
 19655 ;; Registers used:
 19656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 19657 ;; Tracked objects:
 19658 ;;		On entry : F/0
 19659 ;;		On exit  : 0/0
 19660 ;;		Unchanged: 0/0
 19661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19662 ;;      Params:         0       5       0       0       0       0       0
 19663 ;;      Locals:         0       5       0       0       0       0       0
 19664 ;;      Temps:          0       4       0       0       0       0       0
 19665 ;;      Totals:         0      14       0       0       0       0       0
 19666 ;;Total ram usage:       14 bytes
 19667 ;; Hardware stack levels used:    1
 19668 ;; Hardware stack levels required when called:    5
 19669 ;; This function calls:
 19670 ;;		_getCANFrame
 19671 ;; This function is called by:
 19672 ;;		_receivePrintEventVerbose
 19673 ;;		_readRegister
 19674 ;;		_readRegisterExtended
 19675 ;;		_writeRegisterExtended
 19676 ;; This function uses a non-reentrant model
 19677 ;;
 19678                           
 19679                           	psect	text50
 19680  0045E4                     __ptext50:
 19681                           	opt stack 0
 19682  0045E4                     _getVSCPFrame:
 19683                           	opt stack 22
 19684                           
 19685                           ;incstack = 0
 19686                           ;incstack = 0
 19687                           ;getVSCPFrame@pvscpclass stored from wreg
 19688  0045E4  CFE8 F069          	movff	wreg,getVSCPFrame@pvscpclass
 19689                           
 19690                           ; BSR set to: 0
 19691                           ;main.c: 2554: uint32_t id;
 19692                           ;main.c: 2556: if (!getCANFrame(&id, pSize, pData)) {
 19693  0045E8  C063  F02C         	movff	getVSCPFrame@pSize,?_getCANFrame
 19694  0045EC  C064  F02D         	movff	getVSCPFrame@pData,?_getCANFrame+1
 19695  0045F0  0E0F               	movlw	15
 19696  0045F2  6E2E               	movwf	?_getCANFrame+2,c
 19697  0045F4  0E5F               	movlw	__accesstop+-1
 19698  0045F6  642D               	cpfsgt	?_getCANFrame+1,c
 19699  0045F8  6A2E               	clrf	?_getCANFrame+2,c
 19700  0045FA  0E6A               	movlw	getVSCPFrame@id& (0+255)
 19701  0045FC  EC40  F028         	call	_getCANFrame
 19702  004600  0900               	iorlw	0
 19703  004602  E102               	bnz	l11890
 19704                           
 19705                           ;main.c: 2557: return 0;
 19706  004604  0E00               	movlw	0
 19707  004606  D02F               	goto	l1163
 19708  004608                     l11890:
 19709                           
 19710                           ;main.c: 2558: }
 19711                           ;main.c: 2560: *pNodeId = id & 0x0ff;
 19712  004608  0100               	movlb	0	; () banked
 19713  00460A  5161               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 19714  00460C  6ED9               	movwf	fsr2l,c
 19715  00460E  6ADA               	clrf	fsr2h,c
 19716  004610  C06A  FFDF         	movff	getVSCPFrame@id,indf2
 19717                           
 19718                           ;main.c: 2561: *pvscptype = (id >> 8) & 0xff;
 19719  004614  5160               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 19720  004616  6ED9               	movwf	fsr2l,c
 19721  004618  6ADA               	clrf	fsr2h,c
 19722  00461A  C06B  FFDF         	movff	getVSCPFrame@id+1,indf2
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;main.c: 2562: *pvscpclass = (id >> 16) & 0x1ff;
 19726  00461E  516C               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 19727  004620  6F65               	movwf	??_getVSCPFrame& (0+255),b
 19728  004622  0E01               	movlw	1
 19729  004624  156D               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 19730  004626  6F66               	movwf	(??_getVSCPFrame+1)& (0+255),b
 19731  004628  5169               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 19732  00462A  6ED9               	movwf	fsr2l,c
 19733  00462C  6ADA               	clrf	fsr2h,c
 19734  00462E  C065  FFDE         	movff	??_getVSCPFrame,postinc2
 19735  004632  C066  FFDD         	movff	??_getVSCPFrame+1,postdec2
 19736                           
 19737                           ; BSR set to: 0
 19738                           ;main.c: 2563: *pPriority = (uint16_t) (0x07 & (id >> 26));
 19739  004636  5162               	movf	getVSCPFrame@pPriority& (0+255),w,b
 19740  004638  6ED9               	movwf	fsr2l,c
 19741  00463A  6ADA               	clrf	fsr2h,c
 19742  00463C  C06A  F065         	movff	getVSCPFrame@id,??_getVSCPFrame
 19743  004640  C06B  F066         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 19744  004644  C06C  F067         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 19745  004648  C06D  F068         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 19746  00464C  0E1B               	movlw	27
 19747  00464E  D005               	goto	u15400
 19748  004650                     u15405:
 19749  004650  90D8               	bcf	status,0,c
 19750  004652  3368               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 19751  004654  3367               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 19752  004656  3366               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 19753  004658  3365               	rrcf	??_getVSCPFrame& (0+255),f,b
 19754  00465A                     u15400:
 19755  00465A  2EE8               	decfsz	wreg,f,c
 19756  00465C  D7F9               	goto	u15405
 19757  00465E  5165               	movf	??_getVSCPFrame& (0+255),w,b
 19758  004660  0B07               	andlw	7
 19759  004662  6EDF               	movwf	indf2,c
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;main.c: 2565: return 1;
 19763  004664  0E01               	movlw	1
 19764  004666                     l1163:
 19765  004666  0012               	return	
 19766  004668                     __end_of_getVSCPFrame:
 19767                           	opt stack 0
 19768                           tblptru	equ	0xFF8
 19769                           tblptrh	equ	0xFF7
 19770                           tblptrl	equ	0xFF6
 19771                           tablat	equ	0xFF5
 19772                           prodh	equ	0xFF4
 19773                           prodl	equ	0xFF3
 19774                           intcon	equ	0xFF2
 19775                           indf0	equ	0xFEF
 19776                           postinc0	equ	0xFEE
 19777                           fsr0h	equ	0xFEA
 19778                           fsr0l	equ	0xFE9
 19779                           wreg	equ	0xFE8
 19780                           indf1	equ	0xFE7
 19781                           postinc1	equ	0xFE6
 19782                           postdec1	equ	0xFE5
 19783                           fsr1h	equ	0xFE2
 19784                           fsr1l	equ	0xFE1
 19785                           indf2	equ	0xFDF
 19786                           postinc2	equ	0xFDE
 19787                           postdec2	equ	0xFDD
 19788                           plusw2	equ	0xFDB
 19789                           fsr2h	equ	0xFDA
 19790                           fsr2l	equ	0xFD9
 19791                           status	equ	0xFD8
 19792                           
 19793 ;; *************** function _getCANFrame *****************
 19794 ;; Defined at:
 19795 ;;		line 2587 in file "main.c"
 19796 ;; Parameters:    Size  Location     Type
 19797 ;;  pid             1    wreg     PTR unsigned long 
 19798 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19799 ;;  pdlc            1   43[COMRAM] PTR unsigned char 
 19800 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19801 ;;  pdata           2   44[COMRAM] PTR unsigned char 
 19802 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19803 ;; Auto vars:     Size  Location     Type
 19804 ;;  pid             1   46[COMRAM] PTR unsigned long 
 19805 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19806 ;;  flags           1   47[COMRAM] enum E16349
 19807 ;; Return value:  Size  Location     Type
 19808 ;;                  1    wreg      unsigned char 
 19809 ;; Registers used:
 19810 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19811 ;; Tracked objects:
 19812 ;;		On entry : F/0
 19813 ;;		On exit  : 0/0
 19814 ;;		Unchanged: 0/0
 19815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19816 ;;      Params:         3       0       0       0       0       0       0
 19817 ;;      Locals:         2       0       0       0       0       0       0
 19818 ;;      Temps:          0       0       0       0       0       0       0
 19819 ;;      Totals:         5       0       0       0       0       0       0
 19820 ;;Total ram usage:        5 bytes
 19821 ;; Hardware stack levels used:    1
 19822 ;; Hardware stack levels required when called:    4
 19823 ;; This function calls:
 19824 ;;		_ECANReceiveMessage
 19825 ;; This function is called by:
 19826 ;;		_receivePrintEventCANAL
 19827 ;;		_receivePrintEventSLCAN
 19828 ;;		_getVSCPFrame
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           	psect	text51
 19833  005080                     __ptext51:
 19834                           	opt stack 0
 19835  005080                     _getCANFrame:
 19836                           	opt stack 24
 19837                           
 19838                           ;incstack = 0
 19839                           ;incstack = 0
 19840                           ;getCANFrame@pid stored from wreg
 19841  005080  CFE8 F02F          	movff	wreg,getCANFrame@pid
 19842                           
 19843                           ; BSR set to: 0
 19844                           ;main.c: 2589: ECAN_RX_MSG_FLAGS flags;
 19845                           ;main.c: 2591: if (ECANReceiveMessage((unsigned long *) pid,
 19846                           ;main.c: 2592: (BYTE*) pdata,
 19847                           ;main.c: 2593: (BYTE*) pdlc,
 19848                           ;main.c: 2594: &flags)) {
 19849  005084  C02D  F020         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 19850  005088  C02E  F021         	movff	getCANFrame@pdata+1,?_ECANReceiveMessage+1
 19851  00508C  C02C  F022         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+2
 19852  005090  0E30               	movlw	low getCANFrame@flags
 19853  005092  6E23               	movwf	?_ECANReceiveMessage+3,c
 19854  005094  502F               	movf	getCANFrame@pid,w,c
 19855  005096  EC37  F012         	call	_ECANReceiveMessage
 19856  00509A  0900               	iorlw	0
 19857  00509C  E002               	bz	l11904
 19858                           
 19859                           ;main.c: 2597: if (flags & ECAN_RX_RTR_FRAME) return 0;
 19860  00509E  AC30               	btfss	getCANFrame@flags,6,c
 19861  0050A0  D002               	goto	l1171
 19862  0050A2                     l11904:
 19863  0050A2  0E00               	movlw	0
 19864  0050A4  D003               	goto	l1172
 19865  0050A6                     l1171:
 19866                           
 19867                           ;main.c: 2600: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 19868  0050A6  AA30               	btfss	getCANFrame@flags,5,c
 19869  0050A8  D7FC               	goto	l11904
 19870                           
 19871                           ;main.c: 2602: return 1;
 19872  0050AA  0E01               	movlw	1
 19873  0050AC                     l1172:
 19874  0050AC  0012               	return	
 19875  0050AE                     __end_of_getCANFrame:
 19876                           	opt stack 0
 19877                           tblptru	equ	0xFF8
 19878                           tblptrh	equ	0xFF7
 19879                           tblptrl	equ	0xFF6
 19880                           tablat	equ	0xFF5
 19881                           prodh	equ	0xFF4
 19882                           prodl	equ	0xFF3
 19883                           intcon	equ	0xFF2
 19884                           indf0	equ	0xFEF
 19885                           postinc0	equ	0xFEE
 19886                           fsr0h	equ	0xFEA
 19887                           fsr0l	equ	0xFE9
 19888                           wreg	equ	0xFE8
 19889                           indf1	equ	0xFE7
 19890                           postinc1	equ	0xFE6
 19891                           postdec1	equ	0xFE5
 19892                           fsr1h	equ	0xFE2
 19893                           fsr1l	equ	0xFE1
 19894                           indf2	equ	0xFDF
 19895                           postinc2	equ	0xFDE
 19896                           postdec2	equ	0xFDD
 19897                           plusw2	equ	0xFDB
 19898                           fsr2h	equ	0xFDA
 19899                           fsr2l	equ	0xFD9
 19900                           status	equ	0xFD8
 19901                           
 19902 ;; *************** function _ECANReceiveMessage *****************
 19903 ;; Defined at:
 19904 ;;		line 803 in file "ECAN.c"
 19905 ;; Parameters:    Size  Location     Type
 19906 ;;  id              1    wreg     PTR unsigned long 
 19907 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19908 ;;  data            2   31[COMRAM] PTR unsigned char 
 19909 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19910 ;;  dataLen         1   33[COMRAM] PTR unsigned char 
 19911 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19912 ;;  msgFlags        1   34[COMRAM] PTR enum E16324
 19913 ;;		 -> getCANFrame@flags(1), 
 19914 ;; Auto vars:     Size  Location     Type
 19915 ;;  id              1   35[COMRAM] PTR unsigned long 
 19916 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19917 ;;  ptr             2   41[COMRAM] PTR unsigned char 
 19918 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19919 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19920 ;;  savedPtr        2   36[COMRAM] PTR unsigned char 
 19921 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19922 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19923 ;;  temp            1   40[COMRAM] struct .
 19924 ;;  mode            1   39[COMRAM] unsigned char 
 19925 ;;  i               1   38[COMRAM] unsigned char 
 19926 ;; Return value:  Size  Location     Type
 19927 ;;                  1    wreg      enum E15660
 19928 ;; Registers used:
 19929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19930 ;; Tracked objects:
 19931 ;;		On entry : F/0
 19932 ;;		On exit  : 0/0
 19933 ;;		Unchanged: 0/0
 19934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19935 ;;      Params:         4       0       0       0       0       0       0
 19936 ;;      Locals:         8       0       0       0       0       0       0
 19937 ;;      Temps:          0       0       0       0       0       0       0
 19938 ;;      Totals:        12       0       0       0       0       0       0
 19939 ;;Total ram usage:       12 bytes
 19940 ;; Hardware stack levels used:    1
 19941 ;; Hardware stack levels required when called:    3
 19942 ;; This function calls:
 19943 ;;		__ECANPointBuffer
 19944 ;;		__RegsToCANID
 19945 ;; This function is called by:
 19946 ;;		_getCANFrame
 19947 ;; This function uses a non-reentrant model
 19948 ;;
 19949                           
 19950                           	psect	text52
 19951  00246E                     __ptext52:
 19952                           	opt stack 0
 19953  00246E                     _ECANReceiveMessage:
 19954                           	opt stack 24
 19955                           
 19956                           ;incstack = 0
 19957                           ;incstack = 0
 19958                           ;ECANReceiveMessage@id stored from wreg
 19959  00246E  CFE8 F024          	movff	wreg,ECANReceiveMessage@id
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;ECAN.c: 805: BYTE mode;
 19963                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 19964                           ;ECAN.c: 809: char i;
 19965                           ;ECAN.c: 810: BYTE_VAL temp;
 19966                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 19967  002472  6A3A               	clrf	__ECANRxFilterHitInfo,c
 19968                           
 19969                           ; BSR set to: 0
 19970                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 19971  002474  5077               	movf	3959,w,c	;volatile
 19972  002476  0BC0               	andlw	192
 19973  002478  6E28               	movwf	ECANReceiveMessage@mode,c
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;ECAN.c: 816: if ( mode == 0x00 )
 19977  00247A  6628               	tstfsz	ECANReceiveMessage@mode,c
 19978  00247C  D032               	goto	l12112
 19979                           
 19980                           ; BSR set to: 0
 19981                           ;ECAN.c: 822: {
 19982                           ;ECAN.c: 824: if ( RXB0FUL )
 19983  00247E  AE60               	btfss	3936,7,c	;volatile
 19984  002480  D012               	goto	l1346
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;ECAN.c: 825: {
 19988                           ;ECAN.c: 827: RXB0IF = 0;
 19989  002482  90A4               	bcf	4004,0,c	;volatile
 19990                           
 19991                           ;ECAN.c: 830: if ( RXB0OVFL )
 19992  002484  AE74               	btfss	3956,7,c	;volatile
 19993  002486  D006               	goto	l12088
 19994                           
 19995                           ; BSR set to: 0
 19996                           ;ECAN.c: 831: {
 19997                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 19998  002488  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 19999  00248A  6ED9               	movwf	fsr2l,c
 20000  00248C  6ADA               	clrf	fsr2h,c
 20001  00248E  0E00               	movlw	0
 20002  002490  86DB               	bsf	plusw2,3,c
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;ECAN.c: 833: RXB0OVFL = 0;
 20006  002492  9E74               	bcf	3956,7,c	;volatile
 20007  002494                     l12088:
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;ECAN.c: 834: }
 20011                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 20012  002494  A060               	btfss	3936,0,c	;volatile
 20013  002496  D002               	bra	u15715
 20014  002498  803A               	bsf	__ECANRxFilterHitInfo,0,c
 20015  00249A  D001               	bra	u15717
 20016  00249C                     u15715:
 20017  00249C  903A               	bcf	__ECANRxFilterHitInfo,0,c
 20018  00249E                     u15717:
 20019                           
 20020                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 20021  00249E  0E0F               	movlw	15	;volatile
 20022  0024A0  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20023  0024A2  0E60               	movlw	96	;volatile
 20024  0024A4  D01A               	goto	L32
 20025  0024A6                     l1346:
 20026                           
 20027                           ; BSR set to: 0
 20028                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 20029  0024A6  010F               	movlb	15	; () banked
 20030  0024A8  AF50               	btfss	80,7,b	;volatile
 20031  0024AA  D019               	goto	l12106
 20032                           
 20033                           ; BSR set to: 15
 20034                           ;ECAN.c: 842: {
 20035                           ;ECAN.c: 844: RXB1IF = 0;
 20036  0024AC  92A4               	bcf	4004,1,c	;volatile
 20037                           
 20038                           ;ECAN.c: 847: if ( RXB1OVFL )
 20039  0024AE  AC74               	btfss	3956,6,c	;volatile
 20040  0024B0  D006               	goto	l12098
 20041                           
 20042                           ; BSR set to: 15
 20043                           ;ECAN.c: 848: {
 20044                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 20045  0024B2  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20046  0024B4  6ED9               	movwf	fsr2l,c
 20047  0024B6  6ADA               	clrf	fsr2h,c
 20048  0024B8  0E00               	movlw	0
 20049  0024BA  86DB               	bsf	plusw2,3,c
 20050                           
 20051                           ; BSR set to: 15
 20052                           ;ECAN.c: 850: RXB1OVFL = 0;
 20053  0024BC  9C74               	bcf	3956,6,c	;volatile
 20054  0024BE                     l12098:
 20055                           
 20056                           ; BSR set to: 15
 20057                           ;ECAN.c: 851: }
 20058                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 20059  0024BE  5150               	movf	80,w,b	;volatile
 20060  0024C0  0B07               	andlw	7
 20061  0024C2  6E3A               	movwf	__ECANRxFilterHitInfo,c
 20062                           
 20063                           ; BSR set to: 15
 20064                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 20065  0024C4  0E02               	movlw	2
 20066  0024C6  603A               	cpfslt	__ECANRxFilterHitInfo,c
 20067  0024C8  D005               	goto	l12104
 20068                           
 20069                           ; BSR set to: 15
 20070                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 20071  0024CA  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20072  0024CC  6ED9               	movwf	fsr2l,c
 20073  0024CE  6ADA               	clrf	fsr2h,c
 20074  0024D0  0E00               	movlw	0
 20075  0024D2  8EDB               	bsf	plusw2,7,c
 20076  0024D4                     l12104:
 20077                           
 20078                           ; BSR set to: 15
 20079                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 20080  0024D4  0E0F               	movlw	15	;volatile
 20081  0024D6  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20082  0024D8  0E50               	movlw	80	;volatile
 20083  0024DA                     L32:
 20084  0024DA  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20085                           
 20086                           ;ECAN.c: 860: }
 20087  0024DC  D065               	goto	l12166
 20088  0024DE                     l12106:
 20089                           
 20090                           ;ECAN.c: 861: else
 20091                           ;ECAN.c: 862: return FALSE;
 20092  0024DE  0E00               	movlw	0
 20093  0024E0  D0C4               	goto	l1353
 20094  0024E2                     l12112:
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;ECAN.c: 869: else if ( mode == 0x40 )
 20098  0024E2  5028               	movf	ECANReceiveMessage@mode,w,c
 20099  0024E4  0A40               	xorlw	64
 20100  0024E6  E146               	bnz	l1356
 20101                           
 20102                           ; BSR set to: 0
 20103                           ;ECAN.c: 875: {
 20104                           ;ECAN.c: 876: if ( RXB0FUL )
 20105  0024E8  AE60               	btfss	3936,7,c	;volatile
 20106  0024EA  D004               	goto	l1357
 20107                           
 20108                           ; BSR set to: 0
 20109                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 20110  0024EC  0E0F               	movlw	15	;volatile
 20111  0024EE  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20112  0024F0  0E60               	movlw	96	;volatile
 20113  0024F2  D03E               	goto	L39
 20114  0024F4                     l1357:
 20115                           
 20116                           ; BSR set to: 0
 20117                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 20118  0024F4  010F               	movlb	15	; () banked
 20119  0024F6  AF50               	btfss	80,7,b	;volatile
 20120  0024F8  D004               	goto	l1359
 20121                           
 20122                           ; BSR set to: 15
 20123                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 20124  0024FA  0E0F               	movlw	15	;volatile
 20125  0024FC  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20126  0024FE  0E50               	movlw	80	;volatile
 20127  002500  D037               	goto	L39
 20128  002502                     l1359:
 20129                           
 20130                           ; BSR set to: 15
 20131                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 20132  002502  010D               	movlb	13
 20133  002504  B5F8               	btfsc	248,2,b	;volatile
 20134  002506  D007               	goto	l1361
 20135  002508  010E               	movlb	14
 20136  00250A  AF20               	btfss	32,7,b	;volatile
 20137  00250C  D004               	goto	l1361
 20138                           
 20139                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 20140  00250E  0E0E               	movlw	14	;volatile
 20141  002510  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20142  002512  0E20               	movlw	32	;volatile
 20143  002514  D02D               	goto	L39
 20144  002516                     l1361:
 20145                           
 20146                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 20147  002516  010D               	movlb	13
 20148  002518  B7F8               	btfsc	248,3,b	;volatile
 20149  00251A  D007               	goto	l1363
 20150  00251C  010E               	movlb	14
 20151  00251E  AF30               	btfss	48,7,b	;volatile
 20152  002520  D004               	goto	l1363
 20153                           
 20154                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 20155  002522  0E0E               	movlw	14	;volatile
 20156  002524  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20157  002526  0E30               	movlw	48	;volatile
 20158  002528  D023               	goto	L39
 20159  00252A                     l1363:
 20160                           
 20161                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 20162  00252A  010D               	movlb	13
 20163  00252C  B9F8               	btfsc	248,4,b	;volatile
 20164  00252E  D007               	goto	l1365
 20165  002530  010E               	movlb	14
 20166  002532  AF40               	btfss	64,7,b	;volatile
 20167  002534  D004               	goto	l1365
 20168                           
 20169                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 20170  002536  0E0E               	movlw	14	;volatile
 20171  002538  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20172  00253A  0E40               	movlw	64	;volatile
 20173  00253C  D019               	goto	L39
 20174  00253E                     l1365:
 20175                           
 20176                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 20177  00253E  010D               	movlb	13
 20178  002540  BBF8               	btfsc	248,5,b	;volatile
 20179  002542  D005               	goto	l1367
 20180  002544  010E               	movlb	14
 20181  002546  AF50               	btfss	80,7,b	;volatile
 20182  002548  D002               	goto	l1367
 20183                           
 20184                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 20185  00254A  0E0E               	movlw	14	;volatile
 20186  00254C  D7D7               	goto	L40
 20187  00254E                     l1367:
 20188                           
 20189                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 20190  00254E  010D               	movlb	13
 20191  002550  BDF8               	btfsc	248,6,b	;volatile
 20192  002552  D005               	goto	l1369
 20193  002554  010E               	movlb	14
 20194  002556  AF60               	btfss	96,7,b	;volatile
 20195  002558  D002               	goto	l1369
 20196                           
 20197                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 20198  00255A  0E0E               	movlw	14	;volatile
 20199  00255C  D7C8               	goto	L41
 20200  00255E                     l1369:
 20201                           
 20202                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 20203  00255E  010D               	movlb	13
 20204  002560  BFF8               	btfsc	248,7,b	;volatile
 20205  002562  D7BD               	goto	l12106
 20206  002564  010E               	movlb	14
 20207  002566  AF70               	btfss	112,7,b	;volatile
 20208  002568  D7BA               	goto	l12106
 20209                           
 20210                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 20211  00256A  0E0E               	movlw	14	;volatile
 20212  00256C  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20213  00256E  0E70               	movlw	112	;volatile
 20214  002570                     L39:
 20215  002570  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20216  002572  D00A               	goto	l12156
 20217  002574                     l1356:
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;ECAN.c: 910: else
 20221                           ;ECAN.c: 915: {
 20222                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 20223  002574  AE74               	btfss	3956,7,c	;volatile
 20224  002576  D7B3               	goto	l12106
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;ECAN.c: 917: {
 20228                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 20229  002578  506F               	movf	3951,w,c	;volatile
 20230  00257A  0B07               	andlw	7
 20231  00257C  ECB1  F023         	call	__ECANPointBuffer
 20232  002580  C019  F02A         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 20233  002584  C01A  F02B         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 20234  002588                     l12156:
 20235                           
 20236                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 20237  002588  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20238  00258C  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20239  002590  50DF               	movf	indf2,w,c
 20240  002592  0B1F               	andlw	31
 20241  002594  6E3A               	movwf	__ECANRxFilterHitInfo,c
 20242                           
 20243                           ;ECAN.c: 932: RXB1IF = 0;
 20244  002596  92A4               	bcf	4004,1,c	;volatile
 20245                           
 20246                           ;ECAN.c: 934: if ( RXB1OVFL )
 20247  002598  AC74               	btfss	3956,6,c	;volatile
 20248  00259A  D006               	goto	l12166
 20249                           
 20250                           ;ECAN.c: 935: {
 20251                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 20252  00259C  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20253  00259E  6ED9               	movwf	fsr2l,c
 20254  0025A0  6ADA               	clrf	fsr2h,c
 20255  0025A2  0E00               	movlw	0
 20256  0025A4  86DB               	bsf	plusw2,3,c
 20257                           
 20258                           ;ECAN.c: 937: RXB1OVFL = 0;
 20259  0025A6  9C74               	bcf	3956,6,c	;volatile
 20260  0025A8                     l12166:
 20261                           
 20262                           ;ECAN.c: 942: savedPtr = ptr;
 20263  0025A8  C02A  F025         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 20264  0025AC  C02B  F026         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 20265                           
 20266                           ;ECAN.c: 943: *msgFlags = 0;
 20267  0025B0  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20268  0025B2  6ED9               	movwf	fsr2l,c
 20269  0025B4  6ADA               	clrf	fsr2h,c
 20270  0025B6  6ADF               	clrf	indf2,c
 20271                           
 20272                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 20273  0025B8  EE20 F005          	lfsr	2,5
 20274  0025BC  D857               	call	PL90	;call to abstracted procedure
 20275                           
 20276                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 20277  0025BE  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20278  0025C0  6ED9               	movwf	fsr2l,c
 20279  0025C2  6ADA               	clrf	fsr2h,c
 20280  0025C4  5029               	movf	ECANReceiveMessage@temp,w,c
 20281  0025C6  0B0F               	andlw	15
 20282  0025C8  6EDF               	movwf	indf2,c
 20283                           
 20284                           ;ECAN.c: 950: if ( temp.bits.b6 )
 20285  0025CA  AC29               	btfss	ECANReceiveMessage@temp,6,c
 20286  0025CC  D005               	goto	l1377
 20287                           
 20288                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 20289  0025CE  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20290  0025D0  6ED9               	movwf	fsr2l,c
 20291  0025D2  6ADA               	clrf	fsr2h,c
 20292  0025D4  0E00               	movlw	0
 20293  0025D6  8CDB               	bsf	plusw2,6,c
 20294  0025D8                     l1377:
 20295                           
 20296                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 20297  0025D8  EE20 F002          	lfsr	2,2
 20298  0025DC  D847               	call	PL90	;call to abstracted procedure
 20299                           
 20300                           ;ECAN.c: 955: if ( temp.bits.b3 )
 20301  0025DE  A629               	btfss	ECANReceiveMessage@temp,3,c
 20302  0025E0  D008               	goto	l1378
 20303                           
 20304                           ;ECAN.c: 956: {
 20305                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 20306  0025E2  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20307  0025E4  6ED9               	movwf	fsr2l,c
 20308  0025E6  6ADA               	clrf	fsr2h,c
 20309  0025E8  0E00               	movlw	0
 20310  0025EA  8ADB               	bsf	plusw2,5,c
 20311                           
 20312                           ;ECAN.c: 958: temp.Val = 1;
 20313  0025EC  0E01               	movlw	1
 20314  0025EE  6E29               	movwf	ECANReceiveMessage@temp,c
 20315                           
 20316                           ;ECAN.c: 959: }
 20317  0025F0  D001               	goto	l12184
 20318  0025F2                     l1378:
 20319                           
 20320                           ;ECAN.c: 960: else
 20321                           ;ECAN.c: 961: temp.Val = 0;
 20322  0025F2  6A29               	clrf	ECANReceiveMessage@temp,c
 20323  0025F4                     l12184:
 20324                           
 20325                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 20326  0025F4  282A               	incf	ECANReceiveMessage@ptr,w,c
 20327  0025F6  6E19               	movwf	?__RegsToCANID,c
 20328  0025F8  0E00               	movlw	0
 20329  0025FA  202B               	addwfc	ECANReceiveMessage@ptr+1,w,c
 20330  0025FC  6E1A               	movwf	?__RegsToCANID+1,c
 20331  0025FE  C024  F01B         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 20332  002602  C029  F01C         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 20333  002606  ECD1  F019         	call	__RegsToCANID	;wreg free
 20334                           
 20335                           ;ECAN.c: 966: ptr += 6;
 20336  00260A  0E06               	movlw	6
 20337  00260C  262A               	addwf	ECANReceiveMessage@ptr,f,c
 20338  00260E  0E00               	movlw	0
 20339  002610  222B               	addwfc	ECANReceiveMessage@ptr+1,f,c
 20340                           
 20341                           ;ECAN.c: 967: temp.Val = *dataLen;
 20342  002612  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20343  002614  6ED9               	movwf	fsr2l,c
 20344  002616  6ADA               	clrf	fsr2h,c
 20345  002618  50DF               	movf	indf2,w,c
 20346  00261A  6E29               	movwf	ECANReceiveMessage@temp,c
 20347                           
 20348                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 20349  00261C  6A27               	clrf	ECANReceiveMessage@i,c
 20350  00261E  D00F               	goto	l12200
 20351  002620                     l12192:
 20352                           
 20353                           ;ECAN.c: 969: *data++ = *ptr++;
 20354  002620  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20355  002624  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20356  002628  C020  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 20357  00262C  C021  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 20358  002630  CFDF FFE7          	movff	indf2,indf1
 20359  002634  4A2A               	infsnz	ECANReceiveMessage@ptr,f,c
 20360  002636  2A2B               	incf	ECANReceiveMessage@ptr+1,f,c
 20361  002638  4A20               	infsnz	ECANReceiveMessage@data,f,c
 20362  00263A  2A21               	incf	ECANReceiveMessage@data+1,f,c
 20363  00263C  2A27               	incf	ECANReceiveMessage@i,f,c
 20364  00263E                     l12200:
 20365  00263E  5029               	movf	ECANReceiveMessage@temp,w,c
 20366  002640  5C27               	subwf	ECANReceiveMessage@i,w,c
 20367  002642  E3EE               	bnc	l12192
 20368                           
 20369                           ;ECAN.c: 972: if ( IRXIF )
 20370  002644  AEA4               	btfss	4004,7,c	;volatile
 20371  002646  D006               	goto	l12206
 20372                           
 20373                           ;ECAN.c: 973: {
 20374                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 20375  002648  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20376  00264A  6ED9               	movwf	fsr2l,c
 20377  00264C  6ADA               	clrf	fsr2h,c
 20378  00264E  0E00               	movlw	0
 20379  002650  88DB               	bsf	plusw2,4,c
 20380                           
 20381                           ;ECAN.c: 975: IRXIF = 0;
 20382  002652  9EA4               	bcf	4004,7,c	;volatile
 20383  002654                     l12206:
 20384                           
 20385                           ;ECAN.c: 976: }
 20386                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 20387  002654  C025  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 20388  002658  C026  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 20389  00265C  0E7F               	movlw	127
 20390  00265E  16DF               	andwf	indf2,f,c
 20391                           
 20392                           ;ECAN.c: 983: if ( mode == 0x80 )
 20393  002660  5028               	movf	ECANReceiveMessage@mode,w,c
 20394  002662  0A80               	xorlw	128
 20395  002664  B4D8               	btfsc	status,2,c
 20396                           
 20397                           ;ECAN.c: 984: FIFOEMPTY = 0;
 20398  002666  9E74               	bcf	3956,7,c	;volatile
 20399                           
 20400                           ;ECAN.c: 990: return TRUE;
 20401  002668  0E01               	movlw	1
 20402  00266A                     l1353:
 20403  00266A  0012               	return	
 20404  00266C                     __end_of_ECANReceiveMessage:
 20405                           	opt stack 0
 20406  00266C                     PL90:
 20407                           	opt stack 24
 20408  00266C  502A               	movf	ECANReceiveMessage@ptr,w,c
 20409  00266E  26D9               	addwf	fsr2l,f,c
 20410  002670  502B               	movf	ECANReceiveMessage@ptr+1,w,c
 20411  002672  22DA               	addwfc	fsr2h,f,c
 20412  002674  50DF               	movf	indf2,w,c
 20413  002676  6E29               	movwf	ECANReceiveMessage@temp,c
 20414  002678  0012               	return	
 20415  00267A                     __end_ofPL90:
 20416                           	opt stack 0
 20417                           tblptru	equ	0xFF8
 20418                           tblptrh	equ	0xFF7
 20419                           tblptrl	equ	0xFF6
 20420                           tablat	equ	0xFF5
 20421                           prodh	equ	0xFF4
 20422                           prodl	equ	0xFF3
 20423                           intcon	equ	0xFF2
 20424                           indf0	equ	0xFEF
 20425                           postinc0	equ	0xFEE
 20426                           fsr0h	equ	0xFEA
 20427                           fsr0l	equ	0xFE9
 20428                           wreg	equ	0xFE8
 20429                           indf1	equ	0xFE7
 20430                           postinc1	equ	0xFE6
 20431                           postdec1	equ	0xFE5
 20432                           fsr1h	equ	0xFE2
 20433                           fsr1l	equ	0xFE1
 20434                           indf2	equ	0xFDF
 20435                           postinc2	equ	0xFDE
 20436                           postdec2	equ	0xFDD
 20437                           plusw2	equ	0xFDB
 20438                           fsr2h	equ	0xFDA
 20439                           fsr2l	equ	0xFD9
 20440                           status	equ	0xFD8
 20441                           
 20442 ;; *************** function __RegsToCANID *****************
 20443 ;; Defined at:
 20444 ;;		line 1156 in file "ECAN.c"
 20445 ;; Parameters:    Size  Location     Type
 20446 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 20447 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20448 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20449 ;;  val             1   26[COMRAM] PTR unsigned long 
 20450 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20451 ;;  type            1   27[COMRAM] unsigned char 
 20452 ;; Auto vars:     Size  Location     Type
 20453 ;;  Value           1   30[COMRAM] PTR struct _CAN_MESSAGE_
 20454 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20455 ;; Return value:  Size  Location     Type
 20456 ;;		None               void
 20457 ;; Registers used:
 20458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20459 ;; Tracked objects:
 20460 ;;		On entry : 0/0
 20461 ;;		On exit  : 0/0
 20462 ;;		Unchanged: 0/0
 20463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20464 ;;      Params:         4       0       0       0       0       0       0
 20465 ;;      Locals:         1       0       0       0       0       0       0
 20466 ;;      Temps:          2       0       0       0       0       0       0
 20467 ;;      Totals:         7       0       0       0       0       0       0
 20468 ;;Total ram usage:        7 bytes
 20469 ;; Hardware stack levels used:    1
 20470 ;; Hardware stack levels required when called:    2
 20471 ;; This function calls:
 20472 ;;		Nothing
 20473 ;; This function is called by:
 20474 ;;		_ECANReceiveMessage
 20475 ;; This function uses a non-reentrant model
 20476 ;;
 20477                           
 20478                           	psect	text53
 20479  0033A2                     __ptext53:
 20480                           	opt stack 0
 20481  0033A2                     __RegsToCANID:
 20482                           	opt stack 24
 20483                           
 20484                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 20485                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 20486                           
 20487                           ;incstack = 0
 20488                           ;incstack = 0
 20489  0033A2  C01B  F01F         	movff	__RegsToCANID@val,__RegsToCANID@Value
 20490                           
 20491                           ;ECAN.c: 1161: if ( type == 0 )
 20492  0033A6  661C               	tstfsz	__RegsToCANID@type,c
 20493  0033A8  D02B               	goto	l12250
 20494                           
 20495                           ;ECAN.c: 1162: {
 20496                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 20497  0033AA  501F               	movf	__RegsToCANID@Value,w,c
 20498  0033AC  6ED9               	movwf	fsr2l,c
 20499  0033AE  D86C               	call	PL68	;call to abstracted procedure
 20500  0033B0  361D               	rlcf	??__RegsToCANID,f,c
 20501  0033B2  90D8               	bcf	status,0,c
 20502  0033B4  361D               	rlcf	??__RegsToCANID,f,c
 20503  0033B6  90D8               	bcf	status,0,c
 20504  0033B8  341D               	rlcf	??__RegsToCANID,w,c
 20505  0033BA  6EDF               	movwf	indf2,c
 20506                           
 20507                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 20508  0033BC  501F               	movf	__RegsToCANID@Value,w,c
 20509  0033BE  6ED9               	movwf	fsr2l,c
 20510  0033C0  6ADA               	clrf	fsr2h,c
 20511  0033C2  2AD9               	incf	fsr2l,f,c
 20512  0033C4  6ADA               	clrf	fsr2h,c
 20513  0033C6  D873               	call	PL78	;call to abstracted procedure
 20514  0033C8                     u15985:
 20515  0033C8  90D8               	bcf	status,0,c
 20516  0033CA  321D               	rrcf	??__RegsToCANID,f,c
 20517  0033CC  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20518  0033CE  D7FC               	goto	u15985
 20519  0033D0  501D               	movf	??__RegsToCANID,w,c
 20520                           
 20521                           ;ECAN.c: 1166: ptr++;
 20522                           
 20523                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 20524  0033D2  D863               	call	PL70	;call to abstracted procedure
 20525  0033D4  0E05               	movlw	5
 20526  0033D6  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20527  0033D8                     u15995:
 20528  0033D8  90D8               	bcf	status,0,c
 20529  0033DA  321D               	rrcf	??__RegsToCANID,f,c
 20530  0033DC  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20531  0033DE  D7FC               	goto	u15995
 20532  0033E0  501F               	movf	__RegsToCANID@Value,w,c
 20533  0033E2  6ED9               	movwf	fsr2l,c
 20534  0033E4  6ADA               	clrf	fsr2h,c
 20535  0033E6  501D               	movf	??__RegsToCANID,w,c
 20536  0033E8  12DF               	iorwf	indf2,f,c
 20537                           
 20538                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 20539  0033EA  D83D               	call	PL38	;call to abstracted procedure
 20540  0033EC  6ADF               	clrf	indf2,c
 20541                           
 20542                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 20543  0033EE  501F               	movf	__RegsToCANID@Value,w,c
 20544  0033F0  6ED9               	movwf	fsr2l,c
 20545  0033F2  6ADA               	clrf	fsr2h,c
 20546  0033F4  0E03               	movlw	3
 20547  0033F6  26D9               	addwf	fsr2l,f,c
 20548  0033F8  6ADA               	clrf	fsr2h,c
 20549  0033FA  0E00               	movlw	0
 20550  0033FC  6EDF               	movwf	indf2,c
 20551                           
 20552                           ;ECAN.c: 1170: }
 20553  0033FE  D032               	goto	l1400
 20554  003400                     l12250:
 20555                           
 20556                           ;ECAN.c: 1171: else
 20557                           ;ECAN.c: 1172: {
 20558                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 20559  003400  D832               	call	PL38	;call to abstracted procedure
 20560  003402  D855               	call	PL78	;call to abstracted procedure
 20561  003404                     u16005:
 20562  003404  90D8               	bcf	status,0,c
 20563  003406  361D               	rlcf	??__RegsToCANID,f,c
 20564  003408  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20565  00340A  D7FC               	goto	u16005
 20566  00340C  501D               	movf	??__RegsToCANID,w,c
 20567  00340E  6EDF               	movwf	indf2,c
 20568                           
 20569                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 20570  003410  501F               	movf	__RegsToCANID@Value,w,c
 20571  003412  6ED9               	movwf	fsr2l,c
 20572  003414  6ADA               	clrf	fsr2h,c
 20573  003416  0E03               	movlw	3
 20574  003418  26D9               	addwf	fsr2l,f,c
 20575  00341A  D836               	call	PL68	;call to abstracted procedure
 20576  00341C  321D               	rrcf	??__RegsToCANID,f,c
 20577  00341E  90D8               	bcf	status,0,c
 20578  003420  321D               	rrcf	??__RegsToCANID,f,c
 20579  003422  90D8               	bcf	status,0,c
 20580  003424  301D               	rrcf	??__RegsToCANID,w,c
 20581                           
 20582                           ;ECAN.c: 1176: ptr++;
 20583                           
 20584                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 20585  003426  D839               	call	PL70	;call to abstracted procedure
 20586  003428  0E03               	movlw	3
 20587  00342A  161D               	andwf	??__RegsToCANID,f,c
 20588  00342C  D81C               	call	PL38	;call to abstracted procedure
 20589  00342E  501D               	movf	??__RegsToCANID,w,c
 20590  003430  12DF               	iorwf	indf2,f,c
 20591                           
 20592                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 20593  003432  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20594  003436  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20595  00343A  50DF               	movf	indf2,w,c
 20596  00343C  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20597  00343E  90D8               	bcf	status,0,c
 20598  003440  321D               	rrcf	??__RegsToCANID,f,c
 20599  003442  90D8               	bcf	status,0,c
 20600  003444  321D               	rrcf	??__RegsToCANID,f,c
 20601  003446  90D8               	bcf	status,0,c
 20602  003448  321D               	rrcf	??__RegsToCANID,f,c
 20603  00344A  0E1C               	movlw	28
 20604  00344C  161D               	andwf	??__RegsToCANID,f,c
 20605  00344E  D80B               	call	PL38	;call to abstracted procedure
 20606  003450  501D               	movf	??__RegsToCANID,w,c
 20607  003452  12DF               	iorwf	indf2,f,c
 20608                           
 20609                           ;ECAN.c: 1180: ptr++;
 20610                           
 20611                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 20612  003454  D80F               	call	PL64	;call to abstracted procedure
 20613  003456  2AE1               	incf	fsr1l,f,c
 20614  003458  6AE2               	clrf	fsr1h,c
 20615  00345A  CFDF FFE7          	movff	indf2,indf1
 20616                           
 20617                           ;ECAN.c: 1182: ptr++;
 20618                           
 20619                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 20620  00345E  D80A               	call	PL64	;call to abstracted procedure
 20621  003460  CFDF FFE7          	movff	indf2,indf1
 20622  003464                     l1400:
 20623  003464  0012               	return	
 20624  003466                     __end_of__RegsToCANID:
 20625                           	opt stack 0
 20626  003466                     PL38:
 20627                           	opt stack 24
 20628  003466  501F               	movf	__RegsToCANID@Value,w,c
 20629  003468  6ED9               	movwf	fsr2l,c
 20630  00346A  6ADA               	clrf	fsr2h,c
 20631  00346C  0E02               	movlw	2
 20632  00346E  26D9               	addwf	fsr2l,f,c
 20633  003470  6ADA               	clrf	fsr2h,c
 20634  003472  0012               	return	
 20635  003474                     __end_ofPL38:
 20636                           	opt stack 0
 20637  003474                     PL64:
 20638                           	opt stack 24
 20639  003474  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20640  003476  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20641  003478  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20642  00347C  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20643  003480  501F               	movf	__RegsToCANID@Value,w,c
 20644  003482  6EE1               	movwf	fsr1l,c
 20645  003484  6AE2               	clrf	fsr1h,c
 20646  003486  0012               	return	
 20647  003488                     __end_ofPL64:
 20648                           	opt stack 0
 20649  003488                     PL68:
 20650                           	opt stack 24
 20651  003488  6ADA               	clrf	fsr2h,c
 20652  00348A  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20653  00348E  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20654  003492  50E7               	movf	indf1,w,c
 20655  003494  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20656  003496  90D8               	bcf	status,0,c
 20657  003498  0012               	return	
 20658  00349A                     __end_ofPL68:
 20659                           	opt stack 0
 20660  00349A                     PL70:
 20661                           	opt stack 24
 20662  00349A  6EDF               	movwf	indf2,c
 20663  00349C  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20664  00349E  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20665  0034A0  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20666  0034A4  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20667  0034A8  50DF               	movf	indf2,w,c
 20668  0034AA  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20669  0034AC  0012               	return	
 20670  0034AE                     __end_ofPL70:
 20671                           	opt stack 0
 20672  0034AE                     PL78:
 20673                           	opt stack 24
 20674  0034AE  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20675  0034B2  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20676  0034B6  50E7               	movf	indf1,w,c
 20677  0034B8  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20678  0034BA  0E05               	movlw	5
 20679  0034BC  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20680  0034BE  0C05               	retlw	5
 20681  0034C0                     __end_ofPL78:
 20682                           	opt stack 0
 20683                           tblptru	equ	0xFF8
 20684                           tblptrh	equ	0xFF7
 20685                           tblptrl	equ	0xFF6
 20686                           tablat	equ	0xFF5
 20687                           prodh	equ	0xFF4
 20688                           prodl	equ	0xFF3
 20689                           intcon	equ	0xFF2
 20690                           indf0	equ	0xFEF
 20691                           postinc0	equ	0xFEE
 20692                           fsr0h	equ	0xFEA
 20693                           fsr0l	equ	0xFE9
 20694                           wreg	equ	0xFE8
 20695                           indf1	equ	0xFE7
 20696                           postinc1	equ	0xFE6
 20697                           postdec1	equ	0xFE5
 20698                           fsr1h	equ	0xFE2
 20699                           fsr1l	equ	0xFE1
 20700                           indf2	equ	0xFDF
 20701                           postinc2	equ	0xFDE
 20702                           postdec2	equ	0xFDD
 20703                           plusw2	equ	0xFDB
 20704                           fsr2h	equ	0xFDA
 20705                           fsr2l	equ	0xFD9
 20706                           status	equ	0xFD8
 20707                           
 20708 ;; *************** function __ECANPointBuffer *****************
 20709 ;; Defined at:
 20710 ;;		line 1207 in file "ECAN.c"
 20711 ;; Parameters:    Size  Location     Type
 20712 ;;  b               1    wreg     unsigned char 
 20713 ;; Auto vars:     Size  Location     Type
 20714 ;;  b               1   27[COMRAM] unsigned char 
 20715 ;;  pt              2   28[COMRAM] PTR unsigned char 
 20716 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20717 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20718 ;; Return value:  Size  Location     Type
 20719 ;;                  2   24[COMRAM] PTR unsigned char 
 20720 ;; Registers used:
 20721 ;;		wreg, status,2, status,0
 20722 ;; Tracked objects:
 20723 ;;		On entry : F/0
 20724 ;;		On exit  : 0/0
 20725 ;;		Unchanged: 0/0
 20726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20727 ;;      Params:         3       0       0       0       0       0       0
 20728 ;;      Locals:         3       0       0       0       0       0       0
 20729 ;;      Temps:          0       0       0       0       0       0       0
 20730 ;;      Totals:         6       0       0       0       0       0       0
 20731 ;;Total ram usage:        6 bytes
 20732 ;; Hardware stack levels used:    1
 20733 ;; Hardware stack levels required when called:    2
 20734 ;; This function calls:
 20735 ;;		Nothing
 20736 ;; This function is called by:
 20737 ;;		_ECANReceiveMessage
 20738 ;; This function uses a non-reentrant model
 20739 ;;
 20740                           
 20741                           	psect	text54
 20742  004762                     __ptext54:
 20743                           	opt stack 0
 20744  004762                     __ECANPointBuffer:
 20745                           	opt stack 24
 20746                           
 20747                           ;incstack = 0
 20748                           ;incstack = 0
 20749                           ;__ECANPointBuffer@b stored from wreg
 20750  004762  CFE8 F01C          	movff	wreg,__ECANPointBuffer@b
 20751                           
 20752                           ; BSR set to: 0
 20753                           ;ECAN.c: 1208: BYTE* pt;
 20754                           ;ECAN.c: 1210: switch(b)
 20755  004766  D024               	goto	l12236
 20756  004768                     l12218:
 20757                           
 20758                           ; BSR set to: 0
 20759                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 20760  004768  0E0F               	movlw	15	;volatile
 20761  00476A  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20762  00476C  0E60               	movlw	96	;volatile
 20763  00476E  D01E               	goto	L48
 20764  004770                     l12220:
 20765                           
 20766                           ; BSR set to: 0
 20767                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 20768  004770  010F               	movlb	15	; () banked
 20769  004772  0E0F               	movlw	15	;volatile
 20770  004774  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20771  004776  0E50               	movlw	80	;volatile
 20772  004778  D019               	goto	L48
 20773  00477A                     l12222:
 20774                           
 20775                           ; BSR set to: 0
 20776                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 20777  00477A  010E               	movlb	14	; () banked
 20778  00477C  0E0E               	movlw	14	;volatile
 20779  00477E  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20780  004780  0E20               	movlw	32	;volatile
 20781  004782  D014               	goto	L48
 20782  004784                     l12224:
 20783                           
 20784                           ; BSR set to: 0
 20785                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 20786  004784  010E               	movlb	14	; () banked
 20787  004786  0E0E               	movlw	14	;volatile
 20788  004788  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20789  00478A  0E30               	movlw	48	;volatile
 20790  00478C  D00F               	goto	L48
 20791  00478E                     l12226:
 20792                           
 20793                           ; BSR set to: 0
 20794                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 20795  00478E  010E               	movlb	14	; () banked
 20796  004790  0E0E               	movlw	14	;volatile
 20797  004792  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20798  004794  0E40               	movlw	64	;volatile
 20799  004796  D00A               	goto	L48
 20800  004798                     l12228:
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 20804  004798  010E               	movlb	14	; () banked
 20805  00479A  0E0E               	movlw	14	;volatile
 20806  00479C  D7EB               	goto	L49
 20807  00479E                     l12230:
 20808                           
 20809                           ; BSR set to: 0
 20810                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 20811  00479E  010E               	movlb	14	; () banked
 20812  0047A0  0E0E               	movlw	14	;volatile
 20813  0047A2  D7E3               	goto	L50
 20814  0047A4                     l12232:
 20815                           
 20816                           ; BSR set to: 0
 20817                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 20818  0047A4  010E               	movlb	14	; () banked
 20819  0047A6  0E0E               	movlw	14	;volatile
 20820  0047A8  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20821  0047AA  0E70               	movlw	112	;volatile
 20822  0047AC                     L48:
 20823  0047AC  6E1D               	movwf	__ECANPointBuffer@pt,c
 20824                           
 20825                           ;ECAN.c: 1235: break;
 20826  0047AE  D00F               	goto	l1405
 20827  0047B0                     l12236:
 20828                           
 20829                           ; BSR set to: 0
 20830  0047B0  501C               	movf	__ECANPointBuffer@b,w,c
 20831                           
 20832                           ; Switch size 1, requested type "space"
 20833                           ; Number of cases is 7, Range of values is 0 to 6
 20834                           ; switch strategies available:
 20835                           ; Name         Instructions Cycles
 20836                           ; simple_byte           22    12 (average)
 20837                           ;	Chosen strategy is simple_byte
 20838  0047B2  E0DA               	bz	l12218
 20839  0047B4  0A01               	xorlw	1	; case 1
 20840  0047B6  E0DC               	bz	l12220
 20841  0047B8  0A03               	xorlw	3	; case 2
 20842  0047BA  E0DF               	bz	l12222
 20843  0047BC  0A01               	xorlw	1	; case 3
 20844  0047BE  E0E2               	bz	l12224
 20845  0047C0  0A07               	xorlw	7	; case 4
 20846  0047C2  E0E5               	bz	l12226
 20847  0047C4  0A01               	xorlw	1	; case 5
 20848  0047C6  E0E8               	bz	l12228
 20849  0047C8  0A03               	xorlw	3	; case 6
 20850  0047CA  E0E9               	bz	l12230
 20851  0047CC  D7EB               	goto	l12232
 20852  0047CE                     l1405:
 20853                           
 20854                           ;ECAN.c: 1237: return (pt);
 20855  0047CE  C01D  F019         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 20856  0047D2  C01E  F01A         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 20857  0047D6  0012               	return	
 20858  0047D8                     __end_of__ECANPointBuffer:
 20859                           	opt stack 0
 20860                           tblptru	equ	0xFF8
 20861                           tblptrh	equ	0xFF7
 20862                           tblptrl	equ	0xFF6
 20863                           tablat	equ	0xFF5
 20864                           prodh	equ	0xFF4
 20865                           prodl	equ	0xFF3
 20866                           intcon	equ	0xFF2
 20867                           indf0	equ	0xFEF
 20868                           postinc0	equ	0xFEE
 20869                           fsr0h	equ	0xFEA
 20870                           fsr0l	equ	0xFE9
 20871                           wreg	equ	0xFE8
 20872                           indf1	equ	0xFE7
 20873                           postinc1	equ	0xFE6
 20874                           postdec1	equ	0xFE5
 20875                           fsr1h	equ	0xFE2
 20876                           fsr1l	equ	0xFE1
 20877                           indf2	equ	0xFDF
 20878                           postinc2	equ	0xFDE
 20879                           postdec2	equ	0xFDD
 20880                           plusw2	equ	0xFDB
 20881                           fsr2h	equ	0xFDA
 20882                           fsr2l	equ	0xFD9
 20883                           status	equ	0xFD8
 20884                           
 20885 ;; *************** function _sprintf *****************
 20886 ;; Defined at:
 20887 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 20888 ;; Parameters:    Size  Location     Type
 20889 ;;  sp              2    0[BANK0 ] PTR unsigned char 
 20890 ;;		 -> wrkbuf(80), 
 20891 ;;  f               2    2[BANK0 ] PTR const unsigned char 
 20892 ;;		 -> STR_192(3), STR_191(7), STR_185(3), STR_184(7), 
 20893 ;;		 -> STR_181(4), STR_180(8), STR_177(4), STR_176(8), 
 20894 ;;		 -> STR_173(4), STR_172(8), STR_169(4), STR_168(8), 
 20895 ;;		 -> STR_165(4), STR_164(7), STR_161(4), STR_160(7), 
 20896 ;;		 -> STR_157(4), STR_156(7), STR_153(4), STR_152(7), 
 20897 ;;		 -> STR_147(3), STR_146(7), STR_144(3), STR_143(7), 
 20898 ;;		 -> STR_141(3), STR_140(7), STR_138(3), STR_137(7), 
 20899 ;;		 -> STR_135(3), STR_134(7), STR_132(3), STR_131(7), 
 20900 ;;		 -> STR_80(3), STR_79(7), STR_64(3), STR_63(7), 
 20901 ;;		 -> STR_62(3), STR_61(7), STR_58(3), STR_57(7), 
 20902 ;;		 -> STR_55(3), STR_54(7), STR_53(3), STR_52(7), 
 20903 ;; Auto vars:     Size  Location     Type
 20904 ;;  idx             1    8[BANK0 ] unsigned char 
 20905 ;;  _val            4   20[BANK0 ] struct .
 20906 ;;  flag            2   25[BANK0 ] unsigned short 
 20907 ;;  width           2   18[BANK0 ] int 
 20908 ;;  prec            2   16[BANK0 ] int 
 20909 ;;  c               1   24[BANK0 ] char 
 20910 ;;  ap              1   15[BANK0 ] PTR void [1]
 20911 ;;		 -> ?_sprintf(2), 
 20912 ;; Return value:  Size  Location     Type
 20913 ;;                  2    0[BANK0 ] int 
 20914 ;; Registers used:
 20915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20916 ;; Tracked objects:
 20917 ;;		On entry : F/0
 20918 ;;		On exit  : F/0
 20919 ;;		Unchanged: 0/0
 20920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20921 ;;      Params:         0       8       0       0       0       0       0
 20922 ;;      Locals:         0      19       0       0       0       0       0
 20923 ;;      Temps:          3       0       0       0       0       0       0
 20924 ;;      Totals:         3      27       0       0       0       0       0
 20925 ;;Total ram usage:       30 bytes
 20926 ;; Hardware stack levels used:    1
 20927 ;; Hardware stack levels required when called:    3
 20928 ;; This function calls:
 20929 ;;		_isdigit
 20930 ;;		___lldiv
 20931 ;;		___llmod
 20932 ;;		___wmul
 20933 ;; This function is called by:
 20934 ;;		_doModeVerbose
 20935 ;;		_receivePrintEventVerbose
 20936 ;;		_printStatistics
 20937 ;;		_printErrors
 20938 ;; This function uses a non-reentrant model
 20939 ;;
 20940                           
 20941                           	psect	text55
 20942  001478                     __ptext55:
 20943                           	opt stack 0
 20944  001478                     _sprintf:
 20945                           	opt stack 26
 20946                           
 20947                           ; BSR set to: 0
 20948                           ;doprnt.c: 494: va_list ap;
 20949                           ;doprnt.c: 499: signed char c;
 20950                           ;doprnt.c: 501: int width;
 20951                           ;doprnt.c: 504: int prec;
 20952                           ;doprnt.c: 508: unsigned short flag;
 20953                           ;doprnt.c: 527: union {
 20954                           ;doprnt.c: 528: unsigned long _val;
 20955                           ;doprnt.c: 529: struct {
 20956                           ;doprnt.c: 530: const char * _cp;
 20957                           ;doprnt.c: 531: unsigned _len;
 20958                           ;doprnt.c: 532: } _str;
 20959                           ;doprnt.c: 533: } _val;
 20960                           ;doprnt.c: 542: *ap = __va_start();
 20961                           
 20962                           ;incstack = 0
 20963                           ;incstack = 0
 20964  001478  0E64               	movlw	low (?_sprintf+4)
 20965  00147A  6F6F               	movwf	sprintf@ap& (0+255),b
 20966                           
 20967                           ;doprnt.c: 545: while(c = *f++) {
 20968  00147C  D332               	goto	l13896
 20969  00147E                     l13562:
 20970                           
 20971                           ; BSR set to: 0
 20972                           ;doprnt.c: 547: if(c != '%')
 20973  00147E  5178               	movf	sprintf@c& (0+255),w,b
 20974  001480  0A25               	xorlw	37
 20975  001482  E009               	bz	l1529
 20976                           
 20977                           ; BSR set to: 0
 20978                           ;doprnt.c: 549: {
 20979                           ;doprnt.c: 550: ((*sp++ = (c)));
 20980  001484  C060  FFD9         	movff	sprintf@sp,fsr2l
 20981  001488  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 20982  00148C  C078  FFDF         	movff	sprintf@c,indf2
 20983                           
 20984                           ; BSR set to: 0
 20985  001490  4B60               	infsnz	sprintf@sp& (0+255),f,b
 20986  001492  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 20987                           
 20988                           ;doprnt.c: 551: continue;
 20989  001494  D326               	goto	l13896
 20990  001496                     l1529:
 20991                           
 20992                           ; BSR set to: 0
 20993                           ;doprnt.c: 552: }
 20994                           ;doprnt.c: 555: width = 0;
 20995  001496  6B72               	clrf	sprintf@width& (0+255),b
 20996  001498  6B73               	clrf	(sprintf@width+1)& (0+255),b
 20997                           
 20998                           ;doprnt.c: 557: flag = 0;
 20999  00149A  6B79               	clrf	sprintf@flag& (0+255),b
 21000  00149C  6B7A               	clrf	(sprintf@flag+1)& (0+255),b
 21001  00149E  D009               	goto	l13578
 21002  0014A0                     l13568:
 21003                           
 21004                           ; BSR set to: 0
 21005                           ;doprnt.c: 563: flag |= 0x08;
 21006  0014A0  8779               	bsf	sprintf@flag& (0+255),3,b
 21007  0014A2  D005               	goto	L51
 21008  0014A4                     l13570:
 21009                           
 21010                           ; BSR set to: 0
 21011                           ;doprnt.c: 570: flag |= 0x01;
 21012  0014A4  8179               	bsf	sprintf@flag& (0+255),0,b
 21013  0014A6  D003               	goto	L51
 21014  0014A8                     l13572:
 21015                           
 21016                           ; BSR set to: 0
 21017                           ;doprnt.c: 583: flag |= 0x800;
 21018  0014A8  877A               	bsf	(sprintf@flag+1)& (0+255),3,b
 21019  0014AA  D001               	goto	L51
 21020  0014AC                     l13574:
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;doprnt.c: 589: flag |= 0x04;
 21024  0014AC  8579               	bsf	sprintf@flag& (0+255),2,b
 21025  0014AE                     L51:
 21026                           
 21027                           ;doprnt.c: 590: f++;
 21028  0014AE  4B62               	infsnz	sprintf@f& (0+255),f,b
 21029  0014B0  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21030  0014B2                     l13578:
 21031                           
 21032                           ; BSR set to: 0
 21033  0014B2  C062  FFF6         	movff	sprintf@f,tblptrl
 21034  0014B6  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21035  0014BA  0008               	tblrd		*
 21036  0014BC  50F5               	movf	tablat,w,c
 21037                           
 21038                           ; Switch size 1, requested type "space"
 21039                           ; Number of cases is 4, Range of values is 32 to 48
 21040                           ; switch strategies available:
 21041                           ; Name         Instructions Cycles
 21042                           ; simple_byte           13     7 (average)
 21043                           ;	Chosen strategy is simple_byte
 21044  0014BE  0A20               	xorlw	32	; case 32
 21045  0014C0  E0F1               	bz	l13570
 21046  0014C2  0A03               	xorlw	3	; case 35
 21047  0014C4  E0F1               	bz	l13572
 21048  0014C6  0A0E               	xorlw	14	; case 45
 21049  0014C8  E0EB               	bz	l13568
 21050  0014CA  0A1D               	xorlw	29	; case 48
 21051  0014CC  E0EF               	bz	l13574
 21052                           
 21053                           ; BSR set to: 0
 21054                           ;doprnt.c: 602: if(flag & 0x08)
 21055  0014CE  B779               	btfsc	sprintf@flag& (0+255),3,b
 21056                           
 21057                           ; BSR set to: 0
 21058                           ;doprnt.c: 603: flag &= ~0x04;
 21059  0014D0  9579               	bcf	sprintf@flag& (0+255),2,b
 21060                           
 21061                           ; BSR set to: 0
 21062                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21063  0014D2  C062  FFF6         	movff	sprintf@f,tblptrl
 21064  0014D6  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21065  0014DA  0008               	tblrd		*
 21066  0014DC  50F5               	movf	tablat,w,c
 21067  0014DE  EC80  F028         	call	_isdigit
 21068  0014E2  E327               	bnc	l13594
 21069                           
 21070                           ;doprnt.c: 607: width = 0;
 21071  0014E4  0100               	movlb	0	; () banked
 21072  0014E6  6B72               	clrf	sprintf@width& (0+255),b
 21073  0014E8  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21074  0014EA                     l13586:
 21075                           
 21076                           ;doprnt.c: 609: width *= 10;
 21077  0014EA  C072  F019         	movff	sprintf@width,?___wmul
 21078  0014EE  C073  F01A         	movff	sprintf@width+1,?___wmul+1
 21079  0014F2  6A1C               	clrf	?___wmul+3,c
 21080  0014F4  0E0A               	movlw	10
 21081  0014F6  6E1B               	movwf	?___wmul+2,c
 21082  0014F8  EC10  F028         	call	___wmul	;wreg free
 21083  0014FC  C019  F072         	movff	?___wmul,sprintf@width
 21084  001500  C01A  F073         	movff	?___wmul+1,sprintf@width+1
 21085                           
 21086                           ;doprnt.c: 610: width += *f++ - '0';
 21087  001504  0100               	movlb	0	; () banked
 21088  001506  C062  FFF6         	movff	sprintf@f,tblptrl
 21089  00150A  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21090  00150E  0008               	tblrd		*
 21091  001510  CFF5 F02F          	movff	tablat,??_sprintf
 21092  001514  0ED0               	movlw	208
 21093  001516  242F               	addwf	??_sprintf,w,c
 21094  001518  6E30               	movwf	(??_sprintf+1)& (0+255),c
 21095  00151A  6A31               	clrf	(??_sprintf+2)& (0+255),c
 21096  00151C  0EFF               	movlw	255
 21097  00151E  2231               	addwfc	(??_sprintf+2)& (0+255),f,c
 21098  001520  5030               	movf	??_sprintf+1,w,c
 21099  001522  2772               	addwf	sprintf@width& (0+255),f,b
 21100  001524  5031               	movf	??_sprintf+2,w,c
 21101  001526  2373               	addwfc	(sprintf@width+1)& (0+255),f,b
 21102                           
 21103                           ; BSR set to: 0
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21107  001528  DB3A               	call	PL80	;call to abstracted procedure
 21108  00152A  EC80  F028         	call	_isdigit
 21109  00152E  E315               	bnc	l13602
 21110  001530  D7DC               	goto	l13586
 21111  001532                     l13594:
 21112  001532  0100               	movlb	0	; () banked
 21113  001534  C062  FFF6         	movff	sprintf@f,tblptrl
 21114  001538  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21115  00153C  0008               	tblrd		*
 21116  00153E  50F5               	movf	tablat,w,c
 21117  001540  0A2A               	xorlw	42
 21118  001542  E10B               	bnz	l13602
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21122  001544  516F               	movf	sprintf@ap& (0+255),w,b
 21123  001546  6ED9               	movwf	fsr2l,c
 21124  001548  6ADA               	clrf	fsr2h,c
 21125  00154A  CFDE F072          	movff	postinc2,sprintf@width
 21126  00154E  CFDD F073          	movff	postdec2,sprintf@width+1
 21127                           
 21128                           ; BSR set to: 0
 21129  001552  0E02               	movlw	2
 21130  001554  276F               	addwf	sprintf@ap& (0+255),f,b
 21131                           
 21132                           ; BSR set to: 0
 21133                           ;doprnt.c: 615: f++;
 21134  001556  4B62               	infsnz	sprintf@f& (0+255),f,b
 21135  001558  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21136  00155A                     l13602:
 21137                           
 21138                           ;doprnt.c: 617: }
 21139                           ;doprnt.c: 620: if(*f == '.') {
 21140  00155A  0100               	movlb	0	; () banked
 21141  00155C  C062  FFF6         	movff	sprintf@f,tblptrl
 21142  001560  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21143  001564  0008               	tblrd		*
 21144  001566  50F5               	movf	tablat,w,c
 21145  001568  0A2E               	xorlw	46
 21146  00156A  E138               	bnz	l1545
 21147                           
 21148                           ; BSR set to: 0
 21149                           ;doprnt.c: 621: flag |= 0x4000;
 21150  00156C  8D7A               	bsf	(sprintf@flag+1)& (0+255),6,b
 21151                           
 21152                           ;doprnt.c: 622: f++;
 21153                           
 21154                           ; BSR set to: 0
 21155                           ;doprnt.c: 624: if(*f == '*') {
 21156  00156E  DB17               	call	PL80	;call to abstracted procedure
 21157  001570  0A2A               	xorlw	42
 21158  001572  E10C               	bnz	l1546
 21159                           
 21160                           ; BSR set to: 0
 21161                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21162  001574  516F               	movf	sprintf@ap& (0+255),w,b
 21163  001576  6ED9               	movwf	fsr2l,c
 21164  001578  6ADA               	clrf	fsr2h,c
 21165  00157A  CFDE F070          	movff	postinc2,sprintf@prec
 21166  00157E  CFDD F071          	movff	postdec2,sprintf@prec+1
 21167                           
 21168                           ; BSR set to: 0
 21169  001582  0E02               	movlw	2
 21170  001584  276F               	addwf	sprintf@ap& (0+255),f,b
 21171                           
 21172                           ; BSR set to: 0
 21173                           ;doprnt.c: 626: f++;
 21174  001586  4B62               	infsnz	sprintf@f& (0+255),f,b
 21175  001588  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21176                           
 21177                           ;doprnt.c: 627: } else
 21178  00158A  D089               	goto	l13672
 21179  00158C                     l1546:
 21180                           
 21181                           ; BSR set to: 0
 21182                           ;doprnt.c: 629: {
 21183                           ;doprnt.c: 630: prec = 0;
 21184  00158C  6B70               	clrf	sprintf@prec& (0+255),b
 21185  00158E  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21186                           
 21187                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21188  001590  D01B               	goto	l13618
 21189  001592                     l13614:
 21190                           
 21191                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21192  001592  C070  F019         	movff	sprintf@prec,?___wmul
 21193  001596  C071  F01A         	movff	sprintf@prec+1,?___wmul+1
 21194  00159A  6A1C               	clrf	?___wmul+3,c
 21195  00159C  0E0A               	movlw	10
 21196  00159E  6E1B               	movwf	?___wmul+2,c
 21197  0015A0  EC10  F028         	call	___wmul	;wreg free
 21198  0015A4  0100               	movlb	0	; () banked
 21199  0015A6  C062  FFF6         	movff	sprintf@f,tblptrl
 21200  0015AA  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21201  0015AE  0008               	tblrd		*
 21202  0015B0  50F5               	movf	tablat,w,c
 21203  0015B2  2619               	addwf	?___wmul,f,c
 21204  0015B4  0E00               	movlw	0
 21205  0015B6  221A               	addwfc	?___wmul+1,f,c
 21206  0015B8  0ED0               	movlw	208
 21207  0015BA  2419               	addwf	?___wmul,w,c
 21208  0015BC  6F70               	movwf	sprintf@prec& (0+255),b
 21209  0015BE  0EFF               	movlw	255
 21210  0015C0  201A               	addwfc	?___wmul+1,w,c
 21211  0015C2  6F71               	movwf	(sprintf@prec+1)& (0+255),b
 21212                           
 21213                           ; BSR set to: 0
 21214  0015C4  4B62               	infsnz	sprintf@f& (0+255),f,b
 21215  0015C6  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21216  0015C8                     l13618:
 21217                           
 21218                           ; BSR set to: 0
 21219  0015C8  C062  FFF6         	movff	sprintf@f,tblptrl
 21220  0015CC  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21221  0015D0  0008               	tblrd		*
 21222  0015D2  50F5               	movf	tablat,w,c
 21223  0015D4  EC80  F028         	call	_isdigit
 21224  0015D8  E362               	bnc	l13672
 21225  0015DA  D7DB               	goto	l13614
 21226  0015DC                     l1545:
 21227                           
 21228                           ; BSR set to: 0
 21229                           ;doprnt.c: 635: prec = 0;
 21230  0015DC  6B70               	clrf	sprintf@prec& (0+255),b
 21231  0015DE  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21232  0015E0  D05E               	goto	l13672
 21233  0015E2                     l13620:
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;doprnt.c: 652: flag |= 0x10;
 21237  0015E2  8979               	bsf	sprintf@flag& (0+255),4,b
 21238                           
 21239                           ;doprnt.c: 653: goto loop;
 21240  0015E4  D05C               	goto	l13672
 21241  0015E6                     l13622:
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;doprnt.c: 700: flag |= 0x40;
 21245  0015E6  8D79               	bsf	sprintf@flag& (0+255),6,b
 21246                           
 21247                           ;doprnt.c: 702: break;
 21248  0015E8  D070               	goto	l13674
 21249  0015EA                     l13624:
 21250                           
 21251                           ; BSR set to: 0
 21252                           ;doprnt.c: 723: flag |= 0x20;
 21253  0015EA  8B79               	bsf	sprintf@flag& (0+255),5,b
 21254  0015EC                     l1562:
 21255                           
 21256                           ; BSR set to: 0
 21257                           ;doprnt.c: 730: flag |= 0x80;
 21258  0015EC  8F79               	bsf	sprintf@flag& (0+255),7,b
 21259                           
 21260                           ;doprnt.c: 732: break;
 21261  0015EE  D06D               	goto	l13674
 21262  0015F0                     l13626:
 21263                           
 21264                           ; BSR set to: 0
 21265                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21266  0015F0  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21267  0015F2  1170               	iorwf	sprintf@prec& (0+255),w,b
 21268  0015F4  E009               	bz	l13632
 21269                           
 21270                           ; BSR set to: 0
 21271  0015F6  5175               	movf	(sprintf@_val+1)& (0+255),w,b
 21272  0015F8  5D70               	subwf	sprintf@prec& (0+255),w,b
 21273  0015FA  5176               	movf	(sprintf@_val+2)& (0+255),w,b
 21274  0015FC  5971               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21275  0015FE  E204               	bc	l13632
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;doprnt.c: 763: _val._str._len = prec;
 21279  001600  C070  F075         	movff	sprintf@prec,sprintf@_val+1
 21280  001604  C071  F076         	movff	sprintf@prec+1,sprintf@_val+2
 21281  001608                     l13632:
 21282                           
 21283                           ; BSR set to: 0
 21284                           ;doprnt.c: 766: if(width > _val._str._len)
 21285  001608  5172               	movf	sprintf@width& (0+255),w,b
 21286  00160A  5D75               	subwf	(sprintf@_val+1)& (0+255),w,b
 21287  00160C  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21288  00160E  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21289  001610  E207               	bc	l1565
 21290                           
 21291                           ; BSR set to: 0
 21292                           ;doprnt.c: 767: width -= _val._str._len;
 21293  001612  EE20  F075         	lfsr	2,sprintf@_val+1
 21294  001616  50DE               	movf	postinc2,w,c
 21295  001618  5F72               	subwf	sprintf@width& (0+255),f,b
 21296  00161A  50DD               	movf	postdec2,w,c
 21297  00161C  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21298  00161E  D002               	goto	l1566
 21299  001620                     l1565:
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;doprnt.c: 768: else
 21303                           ;doprnt.c: 769: width = 0;
 21304  001620  6B72               	clrf	sprintf@width& (0+255),b
 21305  001622  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21306  001624                     l1566:
 21307                           
 21308                           ; BSR set to: 0
 21309                           ;doprnt.c: 771: if(!(flag & 0x08))
 21310  001624  A779               	btfss	sprintf@flag& (0+255),3,b
 21311  001626  D004               	goto	l13642
 21312  001628  D015               	goto	l13650
 21313  00162A                     l13638:
 21314                           
 21315                           ; BSR set to: 0
 21316                           ;doprnt.c: 774: ((*sp++ = (' ')));
 21317  00162A  DAA8               	call	PL62	;call to abstracted procedure
 21318                           
 21319                           ; BSR set to: 0
 21320  00162C  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21321  00162E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21322  001630                     l13642:
 21323                           
 21324                           ; BSR set to: 0
 21325  001630  0772               	decf	sprintf@width& (0+255),f,b
 21326  001632  DAC3               	call	PL98	;call to abstracted procedure
 21327  001634  B4D8               	btfsc	status,2,c
 21328  001636  2973               	incf	(sprintf@width+1)& (0+255),w,b
 21329  001638  E00D               	bz	l13650
 21330  00163A  D7F7               	goto	l13638
 21331  00163C                     l13644:
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 21335  00163C  5174               	movf	sprintf@_val& (0+255),w,b
 21336  00163E  6ED9               	movwf	fsr2l,c
 21337  001640  6ADA               	clrf	fsr2h,c
 21338  001642  C060  FFE1         	movff	sprintf@sp,fsr1l
 21339  001646  C061  FFE2         	movff	sprintf@sp+1,fsr1h
 21340  00164A  CFDF FFE7          	movff	indf2,indf1
 21341                           
 21342                           ; BSR set to: 0
 21343  00164E  2B74               	incf	sprintf@_val& (0+255),f,b
 21344                           
 21345                           ; BSR set to: 0
 21346  001650  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21347  001652  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21348  001654                     l13650:
 21349                           
 21350                           ; BSR set to: 0
 21351  001654  0775               	decf	(sprintf@_val+1)& (0+255),f,b
 21352  001656  A0D8               	btfss	status,0,c
 21353  001658  0776               	decf	(sprintf@_val+2)& (0+255),f,b
 21354  00165A  0100               	movlb	0	; () banked
 21355  00165C  2975               	incf	(sprintf@_val+1)& (0+255),w,b
 21356  00165E  B4D8               	btfsc	status,2,c
 21357  001660  2976               	incf	(sprintf@_val+2)& (0+255),w,b
 21358  001662  E1EC               	bnz	l13644
 21359                           
 21360                           ; BSR set to: 0
 21361                           ;doprnt.c: 779: if(flag & 0x08)
 21362  001664  B779               	btfsc	sprintf@flag& (0+255),3,b
 21363  001666  D004               	goto	l13658
 21364  001668  D23C               	goto	l13896
 21365  00166A                     l13654:
 21366                           
 21367                           ; BSR set to: 0
 21368                           ;doprnt.c: 781: ((*sp++ = (' ')));
 21369  00166A  DA88               	call	PL62	;call to abstracted procedure
 21370                           
 21371                           ; BSR set to: 0
 21372  00166C  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21373  00166E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21374  001670                     l13658:
 21375                           
 21376                           ; BSR set to: 0
 21377  001670  0772               	decf	sprintf@width& (0+255),f,b
 21378  001672  DAA3               	call	PL98	;call to abstracted procedure
 21379  001674  B4D8               	btfsc	status,2,c
 21380  001676  2973               	incf	(sprintf@width+1)& (0+255),w,b
 21381  001678  E101 D233          	bz	l13896
 21382  00167C  D7F6               	goto	l13654
 21383  00167E                     l13660:
 21384                           
 21385                           ; BSR set to: 0
 21386                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21387  00167E  516F               	movf	sprintf@ap& (0+255),w,b
 21388  001680  6ED9               	movwf	fsr2l,c
 21389  001682  6ADA               	clrf	fsr2h,c
 21390  001684  50DF               	movf	indf2,w,c
 21391  001686  6F78               	movwf	sprintf@c& (0+255),b
 21392                           
 21393                           ; BSR set to: 0
 21394  001688  0E02               	movlw	2
 21395  00168A  276F               	addwf	sprintf@ap& (0+255),f,b
 21396  00168C                     l13664:
 21397                           
 21398                           ; BSR set to: 0
 21399                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 21400  00168C  0E78               	movlw	low sprintf@c
 21401  00168E  6F74               	movwf	sprintf@_val& (0+255),b
 21402                           
 21403                           ; BSR set to: 0
 21404                           ;doprnt.c: 815: _val._str._len = 1;
 21405  001690  6B76               	clrf	(sprintf@_val+2)& (0+255),b
 21406  001692  0E01               	movlw	1
 21407  001694  6F75               	movwf	(sprintf@_val+1)& (0+255),b
 21408                           
 21409                           ;doprnt.c: 816: goto dostring;
 21410  001696  D7AC               	goto	l13626
 21411  001698                     l13668:
 21412                           
 21413                           ; BSR set to: 0
 21414                           ;doprnt.c: 827: flag |= 0xC0;
 21415  001698  0EC0               	movlw	192
 21416  00169A  1379               	iorwf	sprintf@flag& (0+255),f,b
 21417                           
 21418                           ;doprnt.c: 828: break;
 21419  00169C  D016               	goto	l13674
 21420  00169E                     l13672:
 21421  00169E  0100               	movlb	0	; () banked
 21422  0016A0  DA74               	call	PL66	;call to abstracted procedure
 21423  0016A2  5178               	movf	sprintf@c& (0+255),w,b
 21424                           
 21425                           ; Switch size 1, requested type "space"
 21426                           ; Number of cases is 9, Range of values is 0 to 120
 21427                           ; switch strategies available:
 21428                           ; Name         Instructions Cycles
 21429                           ; simple_byte           28    15 (average)
 21430                           ;	Chosen strategy is simple_byte
 21431  0016A4  E101 D221          	bz	l13898
 21432  0016A8  0A58               	xorlw	88	; case 88
 21433  0016AA  E09F               	bz	l13624
 21434  0016AC  0A3B               	xorlw	59	; case 99
 21435  0016AE  E0E7               	bz	l13660
 21436  0016B0  0A07               	xorlw	7	; case 100
 21437  0016B2  E00B               	bz	l13674
 21438  0016B4  0A0D               	xorlw	13	; case 105
 21439  0016B6  E009               	bz	l13674
 21440  0016B8  0A05               	xorlw	5	; case 108
 21441  0016BA  E093               	bz	l13620
 21442  0016BC  0A03               	xorlw	3	; case 111
 21443  0016BE  E093               	bz	l13622
 21444  0016C0  0A1A               	xorlw	26	; case 117
 21445  0016C2  E0EA               	bz	l13668
 21446  0016C4  0A0D               	xorlw	13	; case 120
 21447  0016C6  E092               	bz	l1562
 21448  0016C8  D7E1               	goto	l13664
 21449  0016CA                     l13674:
 21450                           
 21451                           ; BSR set to: 0
 21452                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 21453  0016CA  5179               	movf	sprintf@flag& (0+255),w,b
 21454  0016CC  0BC0               	andlw	192
 21455  0016CE  E120               	bnz	l1581
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;doprnt.c: 1260: {
 21459                           ;doprnt.c: 1262: if(flag & 0x10)
 21460  0016D0  A979               	btfss	sprintf@flag& (0+255),4,b
 21461  0016D2  D003               	goto	l13682
 21462                           
 21463                           ; BSR set to: 0
 21464                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 21465  0016D4  516F               	movf	sprintf@ap& (0+255),w,b
 21466                           
 21467                           ; BSR set to: 0
 21468  0016D6  DA47               	call	PL50	;call to abstracted procedure
 21469  0016D8  D00D               	goto	L52
 21470  0016DA                     l13682:
 21471                           
 21472                           ; BSR set to: 0
 21473                           ;doprnt.c: 1264: else
 21474                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 21475  0016DA  516F               	movf	sprintf@ap& (0+255),w,b
 21476  0016DC  6ED9               	movwf	fsr2l,c
 21477  0016DE  6ADA               	clrf	fsr2h,c
 21478  0016E0  CFDE F074          	movff	postinc2,sprintf@_val
 21479  0016E4  CFDD F075          	movff	postdec2,sprintf@_val+1
 21480  0016E8  0E00               	movlw	0
 21481  0016EA  BF75               	btfsc	(sprintf@_val+1)& (0+255),7,b
 21482  0016EC  0EFF               	movlw	-1
 21483  0016EE  6F76               	movwf	(sprintf@_val+2)& (0+255),b
 21484  0016F0  6F77               	movwf	(sprintf@_val+3)& (0+255),b
 21485                           
 21486                           ; BSR set to: 0
 21487  0016F2  0E02               	movlw	2
 21488  0016F4                     L52:
 21489  0016F4  276F               	addwf	sprintf@ap& (0+255),f,b
 21490                           
 21491                           ; BSR set to: 0
 21492                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 21493  0016F6  AF77               	btfss	(sprintf@_val+3)& (0+255),7,b
 21494  0016F8  D01F               	goto	l13700
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;doprnt.c: 1269: flag |= 0x03;
 21498  0016FA  0E03               	movlw	3
 21499  0016FC  1379               	iorwf	sprintf@flag& (0+255),f,b
 21500                           
 21501                           ; BSR set to: 0
 21502                           ;doprnt.c: 1270: _val._val = -_val._val;
 21503  0016FE  1F77               	comf	(sprintf@_val+3)& (0+255),f,b
 21504  001700  1F76               	comf	(sprintf@_val+2)& (0+255),f,b
 21505  001702  1F75               	comf	(sprintf@_val+1)& (0+255),f,b
 21506  001704  6D74               	negf	sprintf@_val& (0+255),b
 21507  001706  0E00               	movlw	0
 21508  001708  2375               	addwfc	(sprintf@_val+1)& (0+255),f,b
 21509  00170A  2376               	addwfc	(sprintf@_val+2)& (0+255),f,b
 21510  00170C  2377               	addwfc	(sprintf@_val+3)& (0+255),f,b
 21511  00170E  D014               	goto	l13700
 21512  001710                     l1581:
 21513                           
 21514                           ; BSR set to: 0
 21515                           ;doprnt.c: 1275: else
 21516                           ;doprnt.c: 1280: {
 21517                           ;doprnt.c: 1288: if(flag & 0x10)
 21518  001710  A979               	btfss	sprintf@flag& (0+255),4,b
 21519  001712  D003               	goto	l13696
 21520                           
 21521                           ; BSR set to: 0
 21522                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 21523  001714  516F               	movf	sprintf@ap& (0+255),w,b
 21524                           
 21525                           ; BSR set to: 0
 21526  001716  DA27               	call	PL50	;call to abstracted procedure
 21527  001718  D00E               	goto	L53
 21528  00171A                     l13696:
 21529                           
 21530                           ; BSR set to: 0
 21531                           ;doprnt.c: 1290: else
 21532                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21533  00171A  516F               	movf	sprintf@ap& (0+255),w,b
 21534  00171C  6ED9               	movwf	fsr2l,c
 21535  00171E  6ADA               	clrf	fsr2h,c
 21536  001720  CFDE F02F          	movff	postinc2,??_sprintf
 21537  001724  CFDD F030          	movff	postdec2,??_sprintf+1
 21538  001728  C02F  F074         	movff	??_sprintf,sprintf@_val
 21539  00172C  C030  F075         	movff	??_sprintf+1,sprintf@_val+1
 21540  001730  6B76               	clrf	(sprintf@_val+2)& (0+255),b
 21541  001732  6B77               	clrf	(sprintf@_val+3)& (0+255),b
 21542                           
 21543                           ; BSR set to: 0
 21544  001734  0E02               	movlw	2
 21545  001736                     L53:
 21546  001736  276F               	addwf	sprintf@ap& (0+255),f,b
 21547  001738                     l13700:
 21548                           
 21549                           ; BSR set to: 0
 21550                           ;doprnt.c: 1294: }
 21551                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 21552  001738  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21553  00173A  1170               	iorwf	sprintf@prec& (0+255),w,b
 21554  00173C  E15C               	bnz	l13750
 21555                           
 21556                           ; BSR set to: 0
 21557  00173E  5177               	movf	(sprintf@_val+3)& (0+255),w,b
 21558  001740  1174               	iorwf	sprintf@_val& (0+255),w,b
 21559  001742  1175               	iorwf	(sprintf@_val+1)& (0+255),w,b
 21560  001744  1176               	iorwf	(sprintf@_val+2)& (0+255),w,b
 21561  001746  E157               	bnz	l13750
 21562                           
 21563                           ; BSR set to: 0
 21564                           ;doprnt.c: 1298: prec++;
 21565  001748  4B70               	infsnz	sprintf@prec& (0+255),f,b
 21566  00174A  2B71               	incf	(sprintf@prec+1)& (0+255),f,b
 21567  00174C  D054               	goto	l13750
 21568  00174E                     l13706:
 21569                           
 21570                           ; BSR set to: 0
 21571                           ;doprnt.c: 1309: case 0xC0:
 21572                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21573  00174E  0E01               	movlw	1
 21574  001750  6F78               	movwf	sprintf@c& (0+255),b
 21575  001752                     l13708:
 21576                           
 21577                           ; BSR set to: 0
 21578  001752  5178               	movf	sprintf@c& (0+255),w,b
 21579  001754  0A0A               	xorlw	10
 21580  001756  E058               	bz	l13752
 21581                           
 21582                           ; BSR set to: 0
 21583                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 21584  001758  5178               	movf	sprintf@c& (0+255),w,b
 21585  00175A  0D04               	mullw	4
 21586  00175C  0E08               	movlw	low _dpowers
 21587  00175E  24F3               	addwf	prodl,w,c
 21588  001760  6EF6               	movwf	tblptrl,c
 21589  001762  0E70               	movlw	high _dpowers
 21590  001764  20F4               	addwfc	prodh,w,c
 21591  001766  6EF7               	movwf	tblptrh,c
 21592  001768  0009               	tblrd		*+
 21593  00176A  50F5               	movf	tablat,w,c
 21594  00176C  5D74               	subwf	sprintf@_val& (0+255),w,b
 21595  00176E  0009               	tblrd		*+
 21596  001770  50F5               	movf	tablat,w,c
 21597  001772  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21598  001774  0009               	tblrd		*+
 21599  001776  50F5               	movf	tablat,w,c
 21600  001778  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21601  00177A  0009               	tblrd		*+
 21602  00177C  50F5               	movf	tablat,w,c
 21603  00177E  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21604  001780  E343               	bnc	l13752
 21605                           
 21606                           ; BSR set to: 0
 21607  001782  2B78               	incf	sprintf@c& (0+255),f,b
 21608  001784  D7E6               	goto	l13708
 21609  001786                     l13720:
 21610                           
 21611                           ; BSR set to: 0
 21612                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21613  001786  0E01               	movlw	1
 21614  001788  6F78               	movwf	sprintf@c& (0+255),b
 21615  00178A                     l13722:
 21616                           
 21617                           ; BSR set to: 0
 21618  00178A  5178               	movf	sprintf@c& (0+255),w,b
 21619  00178C  0A08               	xorlw	8
 21620  00178E  E03C               	bz	l13752
 21621                           
 21622                           ; BSR set to: 0
 21623                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 21624  001790  5178               	movf	sprintf@c& (0+255),w,b
 21625  001792  0D04               	mullw	4
 21626  001794  0E30               	movlw	low _hexpowers
 21627  001796  24F3               	addwf	prodl,w,c
 21628  001798  6EF6               	movwf	tblptrl,c
 21629  00179A  0E70               	movlw	high _hexpowers
 21630  00179C  20F4               	addwfc	prodh,w,c
 21631  00179E  6EF7               	movwf	tblptrh,c
 21632  0017A0  0009               	tblrd		*+
 21633  0017A2  50F5               	movf	tablat,w,c
 21634  0017A4  5D74               	subwf	sprintf@_val& (0+255),w,b
 21635  0017A6  0009               	tblrd		*+
 21636  0017A8  50F5               	movf	tablat,w,c
 21637  0017AA  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21638  0017AC  0009               	tblrd		*+
 21639  0017AE  50F5               	movf	tablat,w,c
 21640  0017B0  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21641  0017B2  0009               	tblrd		*+
 21642  0017B4  50F5               	movf	tablat,w,c
 21643  0017B6  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21644  0017B8  E327               	bnc	l13752
 21645                           
 21646                           ; BSR set to: 0
 21647  0017BA  2B78               	incf	sprintf@c& (0+255),f,b
 21648  0017BC  D7E6               	goto	l13722
 21649  0017BE                     l13734:
 21650                           
 21651                           ; BSR set to: 0
 21652                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 21653  0017BE  0E01               	movlw	1
 21654  0017C0  6F78               	movwf	sprintf@c& (0+255),b
 21655  0017C2                     l13736:
 21656                           
 21657                           ; BSR set to: 0
 21658  0017C2  5178               	movf	sprintf@c& (0+255),w,b
 21659  0017C4  0A0C               	xorlw	12
 21660  0017C6  E020               	bz	l13752
 21661                           
 21662                           ; BSR set to: 0
 21663                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 21664  0017C8  5178               	movf	sprintf@c& (0+255),w,b
 21665  0017CA  0D04               	mullw	4
 21666  0017CC  0ED8               	movlw	low _octpowers
 21667  0017CE  24F3               	addwf	prodl,w,c
 21668  0017D0  6EF6               	movwf	tblptrl,c
 21669  0017D2  0E6F               	movlw	high _octpowers
 21670  0017D4  20F4               	addwfc	prodh,w,c
 21671  0017D6  6EF7               	movwf	tblptrh,c
 21672  0017D8  0009               	tblrd		*+
 21673  0017DA  50F5               	movf	tablat,w,c
 21674  0017DC  5D74               	subwf	sprintf@_val& (0+255),w,b
 21675  0017DE  0009               	tblrd		*+
 21676  0017E0  50F5               	movf	tablat,w,c
 21677  0017E2  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21678  0017E4  0009               	tblrd		*+
 21679  0017E6  50F5               	movf	tablat,w,c
 21680  0017E8  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21681  0017EA  0009               	tblrd		*+
 21682  0017EC  50F5               	movf	tablat,w,c
 21683  0017EE  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21684  0017F0  E30B               	bnc	l13752
 21685                           
 21686                           ; BSR set to: 0
 21687  0017F2  2B78               	incf	sprintf@c& (0+255),f,b
 21688  0017F4  D7E6               	goto	l13736
 21689  0017F6                     l13750:
 21690                           
 21691                           ; BSR set to: 0
 21692  0017F6  5179               	movf	sprintf@flag& (0+255),w,b
 21693  0017F8  0BC0               	andlw	192
 21694                           
 21695                           ; Switch size 1, requested type "space"
 21696                           ; Number of cases is 4, Range of values is 0 to 192
 21697                           ; switch strategies available:
 21698                           ; Name         Instructions Cycles
 21699                           ; simple_byte           13     7 (average)
 21700                           ;	Chosen strategy is simple_byte
 21701  0017FA  E0A9               	bz	l13706
 21702  0017FC  0A40               	xorlw	64	; case 64
 21703  0017FE  E0DF               	bz	l13734
 21704  001800  0AC0               	xorlw	192	; case 128
 21705  001802  E0C1               	bz	l13720
 21706  001804  0A40               	xorlw	64	; case 192
 21707  001806  E0A3               	bz	l13706
 21708  001808                     l13752:
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;doprnt.c: 1346: if(c < prec)
 21712  001808  0E80               	movlw	128
 21713  00180A  BF78               	btfsc	sprintf@c& (0+255),7,b
 21714  00180C  0E7F               	movlw	127
 21715  00180E  6E2F               	movwf	??_sprintf& (0+255),c
 21716  001810  5170               	movf	sprintf@prec& (0+255),w,b
 21717  001812  5D78               	subwf	sprintf@c& (0+255),w,b
 21718  001814  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21719  001816  0A80               	xorlw	128
 21720  001818  582F               	subwfb	??_sprintf& (0+255),w,c
 21721  00181A  E203               	bc	l13756
 21722                           
 21723                           ; BSR set to: 0
 21724                           ;doprnt.c: 1347: c = prec;
 21725  00181C  C070  F078         	movff	sprintf@prec,sprintf@c
 21726  001820  D00F               	goto	l13760
 21727  001822                     l13756:
 21728                           
 21729                           ; BSR set to: 0
 21730                           ;doprnt.c: 1348: else if(prec < c)
 21731  001822  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21732  001824  0A80               	xorlw	128
 21733  001826  6E2F               	movwf	??_sprintf& (0+255),c
 21734  001828  5178               	movf	sprintf@c& (0+255),w,b
 21735  00182A  5D70               	subwf	sprintf@prec& (0+255),w,b
 21736  00182C  0E80               	movlw	128
 21737  00182E  BF78               	btfsc	sprintf@c& (0+255),7,b
 21738  001830  0E7F               	movlw	127
 21739  001832  582F               	subwfb	??_sprintf& (0+255),w,c
 21740  001834  E205               	bc	l13760
 21741                           
 21742                           ; BSR set to: 0
 21743                           ;doprnt.c: 1349: prec = c;
 21744  001836  5178               	movf	sprintf@c& (0+255),w,b
 21745  001838  6F70               	movwf	sprintf@prec& (0+255),b
 21746  00183A  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21747  00183C  BF70               	btfsc	sprintf@prec& (0+255),7,b
 21748  00183E  0771               	decf	(sprintf@prec+1)& (0+255),f,b
 21749  001840                     l13760:
 21750                           
 21751                           ; BSR set to: 0
 21752                           ;doprnt.c: 1352: if(width && flag & 0x03)
 21753  001840  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21754  001842  1172               	iorwf	sprintf@width& (0+255),w,b
 21755  001844  E006               	bz	l13766
 21756                           
 21757                           ; BSR set to: 0
 21758  001846  5179               	movf	sprintf@flag& (0+255),w,b
 21759  001848  0B03               	andlw	3
 21760  00184A  E003               	bz	l13766
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;doprnt.c: 1353: width--;
 21764  00184C  0772               	decf	sprintf@width& (0+255),f,b
 21765  00184E  A0D8               	btfss	status,0,c
 21766  001850  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21767  001852                     l13766:
 21768                           
 21769                           ; BSR set to: 0
 21770                           ;doprnt.c: 1355: if(flag & 0x4000) {
 21771  001852  AD7A               	btfss	(sprintf@flag+1)& (0+255),6,b
 21772  001854  D010               	goto	l13772
 21773                           
 21774                           ; BSR set to: 0
 21775                           ;doprnt.c: 1356: if(width > prec)
 21776  001856  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21777  001858  0A80               	xorlw	128
 21778  00185A  6E2F               	movwf	??_sprintf& (0+255),c
 21779  00185C  5172               	movf	sprintf@width& (0+255),w,b
 21780  00185E  5D70               	subwf	sprintf@prec& (0+255),w,b
 21781  001860  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21782  001862  0A80               	xorlw	128
 21783  001864  582F               	subwfb	??_sprintf& (0+255),w,c
 21784  001866  E205               	bc	l1609
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;doprnt.c: 1357: width -= prec;
 21788  001868  5170               	movf	sprintf@prec& (0+255),w,b
 21789  00186A  5F72               	subwf	sprintf@width& (0+255),f,b
 21790  00186C  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21791  00186E  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21792  001870  D002               	goto	l13772
 21793  001872                     l1609:
 21794                           
 21795                           ; BSR set to: 0
 21796                           ;doprnt.c: 1358: else
 21797                           ;doprnt.c: 1359: width = 0;
 21798  001872  6B72               	clrf	sprintf@width& (0+255),b
 21799  001874  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21800  001876                     l13772:
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;doprnt.c: 1360: }
 21804                           ;doprnt.c: 1364: if((flag & (
 21805                           ;doprnt.c: 1366: 0x04|
 21806                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 21807  001876  0EC4               	movlw	196
 21808  001878  D94E               	call	PL18	;call to abstracted procedure
 21809  00187A  0E40               	movlw	64
 21810  00187C  B4D8               	btfsc	status,2,c
 21811  00187E  182F               	xorwf	??_sprintf,w,c
 21812  001880  E107               	bnz	l13778
 21813                           
 21814                           ; BSR set to: 0
 21815                           ;doprnt.c: 1369: if(width)
 21816  001882  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21817  001884  1172               	iorwf	sprintf@width& (0+255),w,b
 21818  001886  E018               	bz	l13784
 21819                           
 21820                           ; BSR set to: 0
 21821                           ;doprnt.c: 1370: width--;
 21822  001888  0772               	decf	sprintf@width& (0+255),f,b
 21823  00188A  A0D8               	btfss	status,0,c
 21824  00188C  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21825  00188E  D014               	goto	l13784
 21826  001890                     l13778:
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21830  001890  0EC0               	movlw	192
 21831  001892  D941               	call	PL18	;call to abstracted procedure
 21832  001894  0E80               	movlw	128
 21833  001896  B4D8               	btfsc	status,2,c
 21834  001898  182F               	xorwf	??_sprintf,w,c
 21835  00189A  E10E               	bnz	l13784
 21836                           
 21837                           ; BSR set to: 0
 21838                           ;doprnt.c: 1379: if(width > 2)
 21839  00189C  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21840  00189E  0A80               	xorlw	128
 21841  0018A0  0F80               	addlw	-128
 21842  0018A2  0E03               	movlw	3
 21843  0018A4  B4D8               	btfsc	status,2,c
 21844  0018A6  5D72               	subwf	sprintf@width& (0+255),w,b
 21845  0018A8  E305               	bnc	l1615
 21846                           
 21847                           ; BSR set to: 0
 21848                           ;doprnt.c: 1380: width -= 2;
 21849  0018AA  0EFE               	movlw	254
 21850  0018AC  2772               	addwf	sprintf@width& (0+255),f,b
 21851  0018AE  0EFF               	movlw	255
 21852  0018B0  2373               	addwfc	(sprintf@width+1)& (0+255),f,b
 21853  0018B2  D002               	goto	l13784
 21854  0018B4                     l1615:
 21855                           
 21856                           ; BSR set to: 0
 21857                           ;doprnt.c: 1381: else
 21858                           ;doprnt.c: 1382: width = 0;
 21859  0018B4  6B72               	clrf	sprintf@width& (0+255),b
 21860  0018B6  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21861  0018B8                     l13784:
 21862                           
 21863                           ; BSR set to: 0
 21864                           ;doprnt.c: 1383: }
 21865                           ;doprnt.c: 1388: if(width > c)
 21866  0018B8  0E80               	movlw	128
 21867  0018BA  BF78               	btfsc	sprintf@c& (0+255),7,b
 21868  0018BC  0E7F               	movlw	127
 21869  0018BE  6E2F               	movwf	??_sprintf& (0+255),c
 21870  0018C0  5172               	movf	sprintf@width& (0+255),w,b
 21871  0018C2  5D78               	subwf	sprintf@c& (0+255),w,b
 21872  0018C4  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21873  0018C6  0A80               	xorlw	128
 21874  0018C8  582F               	subwfb	??_sprintf& (0+255),w,c
 21875  0018CA  E207               	bc	l1617
 21876                           
 21877                           ; BSR set to: 0
 21878                           ;doprnt.c: 1389: width -= c;
 21879  0018CC  5178               	movf	sprintf@c& (0+255),w,b
 21880  0018CE  5F72               	subwf	sprintf@width& (0+255),f,b
 21881  0018D0  0E00               	movlw	0
 21882  0018D2  BF78               	btfsc	sprintf@c& (0+255),7,b
 21883  0018D4  0EFF               	movlw	255
 21884  0018D6  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21885  0018D8  D002               	goto	l1618
 21886  0018DA                     l1617:
 21887                           
 21888                           ; BSR set to: 0
 21889                           ;doprnt.c: 1390: else
 21890                           ;doprnt.c: 1391: width = 0;
 21891  0018DA  6B72               	clrf	sprintf@width& (0+255),b
 21892  0018DC  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21893  0018DE                     l1618:
 21894                           
 21895                           ; BSR set to: 0
 21896                           ;doprnt.c: 1394: if(flag & 0x04) {
 21897  0018DE  A579               	btfss	sprintf@flag& (0+255),2,b
 21898  0018E0  D03C               	goto	l13822
 21899                           
 21900                           ; BSR set to: 0
 21901                           ;doprnt.c: 1399: if(flag & 0x03)
 21902  0018E2  5179               	movf	sprintf@flag& (0+255),w,b
 21903  0018E4  0B03               	andlw	3
 21904  0018E6  E009               	bz	l1620
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 21908  0018E8  C060  FFD9         	movff	sprintf@sp,fsr2l
 21909  0018EC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21910  0018F0  0E2D               	movlw	45
 21911  0018F2  6EDF               	movwf	indf2,c
 21912  0018F4                     l13792:
 21913                           
 21914                           ; BSR set to: 0
 21915  0018F4  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21916  0018F6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21917  0018F8  D022               	goto	l13814
 21918  0018FA                     l1620:
 21919                           
 21920                           ; BSR set to: 0
 21921                           ;doprnt.c: 1403: else
 21922                           ;doprnt.c: 1406: if(flag & 0x01)
 21923  0018FA  A179               	btfss	sprintf@flag& (0+255),0,b
 21924  0018FC  D006               	goto	l13798
 21925                           
 21926                           ; BSR set to: 0
 21927                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 21928  0018FE  C060  FFD9         	movff	sprintf@sp,fsr2l
 21929  001902  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21930  001906  0E20               	movlw	32
 21931  001908  D7F4               	goto	L54
 21932  00190A                     l13798:
 21933                           
 21934                           ; BSR set to: 0
 21935                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21936  00190A  0EC0               	movlw	192
 21937  00190C  D904               	call	PL18	;call to abstracted procedure
 21938  00190E  0E80               	movlw	128
 21939  001910  B4D8               	btfsc	status,2,c
 21940  001912  182F               	xorwf	??_sprintf,w,c
 21941  001914  E114               	bnz	l13814
 21942                           
 21943                           ; BSR set to: 0
 21944                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 21945  001916  C060  FFD9         	movff	sprintf@sp,fsr2l
 21946  00191A  D94A               	call	PL84	;call to abstracted procedure
 21947                           
 21948                           ; BSR set to: 0
 21949  00191C  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21950  00191E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21951                           
 21952                           ; BSR set to: 0
 21953                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 21954  001920  BB79               	btfsc	sprintf@flag& (0+255),5,b
 21955  001922  D003               	goto	l13808
 21956                           
 21957                           ; BSR set to: 0
 21958  001924  6B6A               	clrf	(_sprintf$2141+1)& (0+255),b
 21959  001926  0E78               	movlw	120
 21960  001928  D002               	goto	L55
 21961  00192A                     l13808:
 21962                           
 21963                           ; BSR set to: 0
 21964  00192A  6B6A               	clrf	(_sprintf$2141+1)& (0+255),b
 21965  00192C  0E58               	movlw	88
 21966  00192E                     L55:
 21967  00192E  6F69               	movwf	_sprintf$2141& (0+255),b
 21968                           
 21969                           ; BSR set to: 0
 21970  001930  C060  FFD9         	movff	sprintf@sp,fsr2l
 21971  001934  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21972  001938  C069  FFDF         	movff	_sprintf$2141,indf2
 21973  00193C  D7DB               	goto	l13792
 21974  00193E                     l13814:
 21975                           
 21976                           ; BSR set to: 0
 21977                           ;doprnt.c: 1419: }
 21978                           ;doprnt.c: 1422: if(width)
 21979  00193E  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21980  001940  1172               	iorwf	sprintf@width& (0+255),w,b
 21981  001942  E101 D0B9          	bz	l13886
 21982                           
 21983                           ; BSR set to: 0
 21984                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 21985  001946  C060  FFD9         	movff	sprintf@sp,fsr2l
 21986  00194A  D932               	call	PL84	;call to abstracted procedure
 21987                           
 21988                           ; BSR set to: 0
 21989  00194C  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21990  00194E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21991                           
 21992                           ; BSR set to: 0
 21993                           ;doprnt.c: 1425: while(--width);
 21994  001950  0772               	decf	sprintf@width& (0+255),f,b
 21995  001952  A0D8               	btfss	status,0,c
 21996  001954  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21997  001956  0100               	movlb	0	; () banked
 21998  001958  D7F2               	goto	l13814
 21999  00195A                     l13822:
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;doprnt.c: 1429: {
 22003                           ;doprnt.c: 1431: if(width
 22004                           ;doprnt.c: 1433: && !(flag & 0x08)
 22005                           ;doprnt.c: 1435: )
 22006  00195A  5173               	movf	(sprintf@width+1)& (0+255),w,b
 22007  00195C  1172               	iorwf	sprintf@width& (0+255),w,b
 22008  00195E  A4D8               	btfss	status,2,c
 22009                           
 22010                           ; BSR set to: 0
 22011  001960  B779               	btfsc	sprintf@flag& (0+255),3,b
 22012  001962  D004               	goto	l13832
 22013  001964                     l13826:
 22014                           
 22015                           ; BSR set to: 0
 22016                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22017  001964  C060  FFD9         	movff	sprintf@sp,fsr2l
 22018                           
 22019                           ; BSR set to: 0
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;doprnt.c: 1438: while(--width);
 22023  001968  D8F1               	call	PL44	;call to abstracted procedure
 22024  00196A  E1FC               	bnz	l13826
 22025  00196C                     l13832:
 22026                           
 22027                           ; BSR set to: 0
 22028                           ;doprnt.c: 1445: if(flag & 0x03)
 22029  00196C  5179               	movf	sprintf@flag& (0+255),w,b
 22030  00196E  0B03               	andlw	3
 22031  001970  E009               	bz	l1636
 22032                           
 22033                           ; BSR set to: 0
 22034                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22035  001972  C060  FFD9         	movff	sprintf@sp,fsr2l
 22036  001976  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22037  00197A  0E2D               	movlw	45
 22038  00197C  6EDF               	movwf	indf2,c
 22039                           
 22040                           ; BSR set to: 0
 22041  00197E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22042  001980  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22043  001982  D008               	goto	l13842
 22044  001984                     l1636:
 22045                           
 22046                           ; BSR set to: 0
 22047                           ;doprnt.c: 1450: else if(flag & 0x01)
 22048  001984  A179               	btfss	sprintf@flag& (0+255),0,b
 22049  001986  D006               	goto	l13842
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22053  001988  C060  FFD9         	movff	sprintf@sp,fsr2l
 22054  00198C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22055  001990  0E20               	movlw	32
 22056  001992  D7F4               	goto	L56
 22057  001994                     l13842:
 22058                           
 22059                           ; BSR set to: 0
 22060                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22061  001994  0EC0               	movlw	192
 22062  001996  D8BF               	call	PL18	;call to abstracted procedure
 22063  001998  0E40               	movlw	64
 22064  00199A  B4D8               	btfsc	status,2,c
 22065  00199C  182F               	xorwf	??_sprintf,w,c
 22066  00199E  E106               	bnz	l13848
 22067                           
 22068                           ; BSR set to: 0
 22069                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22070  0019A0  C060  FFD9         	movff	sprintf@sp,fsr2l
 22071  0019A4  D905               	call	PL84	;call to abstracted procedure
 22072  0019A6                     l13846:
 22073                           
 22074                           ; BSR set to: 0
 22075  0019A6  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22076  0019A8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22077  0019AA  D086               	goto	l13886
 22078  0019AC                     l13848:
 22079                           
 22080                           ; BSR set to: 0
 22081                           ;doprnt.c: 1457: else
 22082                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22083  0019AC  0EC0               	movlw	192
 22084  0019AE  D8B3               	call	PL18	;call to abstracted procedure
 22085  0019B0  0E80               	movlw	128
 22086  0019B2  B4D8               	btfsc	status,2,c
 22087  0019B4  182F               	xorwf	??_sprintf,w,c
 22088  0019B6  E001 D07F          	bnz	l13886
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22092  0019BA  C060  FFD9         	movff	sprintf@sp,fsr2l
 22093  0019BE  D8F8               	call	PL84	;call to abstracted procedure
 22094                           
 22095                           ; BSR set to: 0
 22096  0019C0  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22097  0019C2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22098                           
 22099                           ; BSR set to: 0
 22100                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22101  0019C4  BB79               	btfsc	sprintf@flag& (0+255),5,b
 22102  0019C6  D003               	goto	l13858
 22103                           
 22104                           ; BSR set to: 0
 22105  0019C8  6B6C               	clrf	(_sprintf$2142+1)& (0+255),b
 22106  0019CA  0E78               	movlw	120
 22107  0019CC  D002               	goto	L57
 22108  0019CE                     l13858:
 22109                           
 22110                           ; BSR set to: 0
 22111  0019CE  6B6C               	clrf	(_sprintf$2142+1)& (0+255),b
 22112  0019D0  0E58               	movlw	88
 22113  0019D2                     L57:
 22114  0019D2  6F6B               	movwf	_sprintf$2142& (0+255),b
 22115                           
 22116                           ; BSR set to: 0
 22117  0019D4  C060  FFD9         	movff	sprintf@sp,fsr2l
 22118  0019D8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22119  0019DC  C06B  FFDF         	movff	_sprintf$2142,indf2
 22120  0019E0  D7E2               	goto	l13846
 22121  0019E2                     l13864:
 22122                           
 22123                           ; BSR set to: 0
 22124                           ;doprnt.c: 1493: case 0xC0:
 22125                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22126  0019E2  C070  F02F         	movff	sprintf@prec,??_sprintf
 22127  0019E6  C071  F030         	movff	sprintf@prec+1,??_sprintf+1
 22128  0019EA  90D8               	bcf	status,0,c
 22129  0019EC  362F               	rlcf	??_sprintf,f,c
 22130  0019EE  3630               	rlcf	??_sprintf+1,f,c
 22131  0019F0  90D8               	bcf	status,0,c
 22132  0019F2  362F               	rlcf	??_sprintf,f,c
 22133  0019F4  3630               	rlcf	??_sprintf+1,f,c
 22134  0019F6  0E08               	movlw	low _dpowers
 22135  0019F8  242F               	addwf	??_sprintf,w,c
 22136  0019FA  6EF6               	movwf	tblptrl,c
 22137  0019FC  0E70               	movlw	high _dpowers
 22138  0019FE  D87C               	call	PL12	;call to abstracted procedure
 22139  001A00  C074  F019         	movff	sprintf@_val,?___lldiv
 22140  001A04  C075  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22141  001A08  C076  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22142  001A0C  C077  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22143  001A10  ECEC  F023         	call	___lldiv	;wreg free
 22144  001A14  C01C  F029         	movff	?___lldiv+3,?___llmod+3
 22145  001A18  C01B  F028         	movff	?___lldiv+2,?___llmod+2
 22146  001A1C  C01A  F027         	movff	?___lldiv+1,?___llmod+1
 22147  001A20  C019  F026         	movff	?___lldiv,?___llmod
 22148  001A24  0E0A               	movlw	10
 22149  001A26  6E2A               	movwf	?___llmod+4,c
 22150  001A28  0E00               	movlw	0
 22151  001A2A  6A2B               	clrf	?___llmod+5,c
 22152  001A2C  6A2C               	clrf	?___llmod+6,c
 22153  001A2E  6A2D               	clrf	?___llmod+7,c
 22154  001A30  EC2E  F025         	call	___llmod	;wreg free
 22155  001A34  5026               	movf	?___llmod,w,c
 22156  001A36  D02D               	goto	L58
 22157  001A38                     l13866:
 22158                           
 22159                           ; BSR set to: 0
 22160                           ;doprnt.c: 1506: {
 22161                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22162  001A38  D876               	call	PL20	;call to abstracted procedure
 22163  001A3A  0E30               	movlw	low _hexpowers
 22164  001A3C  242F               	addwf	??_sprintf,w,c
 22165  001A3E  6EF6               	movwf	tblptrl,c
 22166  001A40  0E70               	movlw	high _hexpowers
 22167  001A42  D85A               	call	PL12	;call to abstracted procedure
 22168  001A44  ECEC  F023         	call	___lldiv	;wreg free
 22169  001A48  5019               	movf	?___lldiv,w,c
 22170  001A4A  0B0F               	andlw	15
 22171  001A4C  6F68               	movwf	sprintf@idx& (0+255),b
 22172                           
 22173                           ; BSR set to: 0
 22174                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22175  001A4E  BB79               	btfsc	sprintf@flag& (0+255),5,b
 22176  001A50  D004               	goto	l13872
 22177                           
 22178                           ; BSR set to: 0
 22179  001A52  0E7E               	movlw	high STR_255
 22180  001A54  6F6E               	movwf	(_sprintf$2148+1)& (0+255),b
 22181  001A56  0E2D               	movlw	low STR_255
 22182  001A58  D003               	goto	L59
 22183  001A5A                     l13872:
 22184                           
 22185                           ; BSR set to: 0
 22186  001A5A  0E7E               	movlw	high STR_254
 22187  001A5C  6F6E               	movwf	(_sprintf$2148+1)& (0+255),b
 22188  001A5E  0E1C               	movlw	low STR_254
 22189  001A60                     L59:
 22190  001A60  6F6D               	movwf	_sprintf$2148& (0+255),b
 22191                           
 22192                           ; BSR set to: 0
 22193  001A62  5168               	movf	sprintf@idx& (0+255),w,b
 22194  001A64  256D               	addwf	_sprintf$2148& (0+255),w,b
 22195  001A66  6E2F               	movwf	??_sprintf& (0+255),c
 22196  001A68  0E00               	movlw	0
 22197  001A6A  216E               	addwfc	(_sprintf$2148+1)& (0+255),w,b
 22198  001A6C  6E30               	movwf	(??_sprintf+1)& (0+255),c
 22199  001A6E  C02F  FFF6         	movff	??_sprintf,tblptrl
 22200  001A72  C030  FFF7         	movff	??_sprintf+1,tblptrh
 22201  001A76  0008               	tblrd		*
 22202  001A78  CFF5 F078          	movff	tablat,sprintf@c
 22203                           
 22204                           ;doprnt.c: 1515: }
 22205                           ;doprnt.c: 1517: break;
 22206  001A7C  D016               	goto	l13882
 22207  001A7E                     l13876:
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22211  001A7E  D853               	call	PL20	;call to abstracted procedure
 22212  001A80  0ED8               	movlw	low _octpowers
 22213  001A82  242F               	addwf	??_sprintf,w,c
 22214  001A84  6EF6               	movwf	tblptrl,c
 22215  001A86  0E6F               	movlw	high _octpowers
 22216  001A88  D837               	call	PL12	;call to abstracted procedure
 22217  001A8A  ECEC  F023         	call	___lldiv	;wreg free
 22218  001A8E  5019               	movf	?___lldiv,w,c
 22219  001A90  0B07               	andlw	7
 22220  001A92                     L58:
 22221  001A92  0F30               	addlw	48
 22222  001A94  6F78               	movwf	sprintf@c& (0+255),b
 22223                           
 22224                           ;doprnt.c: 1527: break;
 22225  001A96  D009               	goto	l13882
 22226  001A98                     l13880:
 22227                           
 22228                           ; BSR set to: 0
 22229  001A98  5179               	movf	sprintf@flag& (0+255),w,b
 22230  001A9A  0BC0               	andlw	192
 22231                           
 22232                           ; Switch size 1, requested type "space"
 22233                           ; Number of cases is 4, Range of values is 0 to 192
 22234                           ; switch strategies available:
 22235                           ; Name         Instructions Cycles
 22236                           ; simple_byte           13     7 (average)
 22237                           ;	Chosen strategy is simple_byte
 22238  001A9C  E0A2               	bz	l13864
 22239  001A9E  0A40               	xorlw	64	; case 64
 22240  001AA0  E0EE               	bz	l13876
 22241  001AA2  0AC0               	xorlw	192	; case 128
 22242  001AA4  E0C9               	bz	l13866
 22243  001AA6  0A40               	xorlw	64	; case 192
 22244  001AA8  E09C               	bz	l13864
 22245  001AAA                     l13882:
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22249  001AAA  C060  FFD9         	movff	sprintf@sp,fsr2l
 22250  001AAE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22251  001AB2  C078  FFDF         	movff	sprintf@c,indf2
 22252  001AB6  D777               	goto	l13846
 22253  001AB8                     l13886:
 22254                           
 22255                           ; BSR set to: 0
 22256  001AB8  0770               	decf	sprintf@prec& (0+255),f,b
 22257  001ABA  A0D8               	btfss	status,0,c
 22258  001ABC  0771               	decf	(sprintf@prec+1)& (0+255),f,b
 22259  001ABE  0100               	movlb	0	; () banked
 22260  001AC0  2970               	incf	sprintf@prec& (0+255),w,b
 22261  001AC2  B4D8               	btfsc	status,2,c
 22262  001AC4  2971               	incf	(sprintf@prec+1)& (0+255),w,b
 22263  001AC6  E1E8               	bnz	l13880
 22264                           
 22265                           ; BSR set to: 0
 22266                           ;doprnt.c: 1532: }
 22267                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22268  001AC8  A779               	btfss	sprintf@flag& (0+255),3,b
 22269  001ACA  D00B               	goto	l13896
 22270                           
 22271                           ; BSR set to: 0
 22272  001ACC  5173               	movf	(sprintf@width+1)& (0+255),w,b
 22273  001ACE  0A80               	xorlw	128
 22274  001AD0  0F80               	addlw	-128
 22275  001AD2  0E01               	movlw	1
 22276  001AD4  B4D8               	btfsc	status,2,c
 22277  001AD6  5D72               	subwf	sprintf@width& (0+255),w,b
 22278  001AD8  E304               	bnc	l13896
 22279  001ADA                     l13890:
 22280                           
 22281                           ; BSR set to: 0
 22282                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22283  001ADA  C060  FFD9         	movff	sprintf@sp,fsr2l
 22284                           
 22285                           ; BSR set to: 0
 22286                           
 22287                           ; BSR set to: 0
 22288                           ;doprnt.c: 1538: while(--width);
 22289  001ADE  D836               	call	PL44	;call to abstracted procedure
 22290  001AE0  E1FC               	bnz	l13890
 22291  001AE2                     l13896:
 22292                           
 22293                           ; BSR set to: 0
 22294  001AE2  D853               	call	PL66	;call to abstracted procedure
 22295  001AE4  0100               	movlb	0	; () banked
 22296  001AE6  6778               	tstfsz	sprintf@c& (0+255),b
 22297  001AE8  D4CA               	goto	l13562
 22298  001AEA                     l13898:
 22299                           
 22300                           ; BSR set to: 0
 22301                           ;doprnt.c: 1545: *sp = 0;
 22302  001AEA  C060  FFD9         	movff	sprintf@sp,fsr2l
 22303  001AEE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22304  001AF2  0E00               	movlw	0
 22305  001AF4  6EDF               	movwf	indf2,c
 22306                           
 22307                           ; BSR set to: 0
 22308  001AF6  0C00               	retlw	0
 22309  001AF8                     __end_of_sprintf:
 22310                           	opt stack 0
 22311  001AF8                     PL12:
 22312                           	opt stack 26
 22313  001AF8  2030               	addwfc	??_sprintf+1,w,c
 22314  001AFA  6EF7               	movwf	tblptrh,c
 22315  001AFC  0009               	tblrd		*+
 22316  001AFE  CFF5 F01D          	movff	tablat,?___lldiv+4
 22317  001B02  0009               	tblrd		*+
 22318  001B04  CFF5 F01E          	movff	tablat,?___lldiv+5
 22319  001B08  0009               	tblrd		*+
 22320  001B0A  CFF5 F01F          	movff	tablat,?___lldiv+6
 22321  001B0E  000A               	tblrd		*-
 22322  001B10  CFF5 F020          	movff	tablat,?___lldiv+7
 22323  001B14  0012               	return	
 22324  001B16                     __end_ofPL12:
 22325                           	opt stack 0
 22326  001B16                     PL18:
 22327                           	opt stack 26
 22328  001B16  1579               	andwf	sprintf@flag& (0+255),w,b
 22329  001B18  6E2F               	movwf	??_sprintf& (0+255),c
 22330  001B1A  0E08               	movlw	8
 22331  001B1C  157A               	andwf	(sprintf@flag+1)& (0+255),w,b
 22332  001B1E  6E30               	movwf	(??_sprintf+1)& (0+255),c
 22333  001B20  5030               	movf	??_sprintf+1,w,c
 22334  001B22  0A08               	xorlw	8
 22335  001B24  0012               	return	
 22336  001B26                     __end_ofPL18:
 22337                           	opt stack 0
 22338  001B26                     PL20:
 22339                           	opt stack 26
 22340  001B26  C074  F019         	movff	sprintf@_val,?___lldiv
 22341  001B2A  C075  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22342  001B2E  C076  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22343  001B32  C077  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22344  001B36  C070  F02F         	movff	sprintf@prec,??_sprintf
 22345  001B3A  C071  F030         	movff	sprintf@prec+1,??_sprintf+1
 22346  001B3E  90D8               	bcf	status,0,c
 22347  001B40  362F               	rlcf	??_sprintf,f,c
 22348  001B42  3630               	rlcf	??_sprintf+1,f,c
 22349  001B44  90D8               	bcf	status,0,c
 22350  001B46  362F               	rlcf	??_sprintf,f,c
 22351  001B48  3630               	rlcf	??_sprintf+1,f,c
 22352  001B4A  0012               	return	
 22353  001B4C                     __end_ofPL20:
 22354                           	opt stack 0
 22355  001B4C                     PL44:
 22356                           	opt stack 26
 22357  001B4C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22358  001B50  0E20               	movlw	32
 22359  001B52  6EDF               	movwf	indf2,c
 22360  001B54  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22361  001B56  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22362  001B58  0772               	decf	sprintf@width& (0+255),f,b
 22363  001B5A  A0D8               	btfss	status,0,c
 22364  001B5C  0773               	decf	(sprintf@width+1)& (0+255),f,b
 22365  001B5E  0100               	movlb	0	; () banked
 22366  001B60  5173               	movf	(sprintf@width+1)& (0+255),w,b
 22367  001B62  1172               	iorwf	sprintf@width& (0+255),w,b
 22368  001B64  0012               	return	
 22369  001B66                     __end_ofPL44:
 22370                           	opt stack 0
 22371  001B66                     PL50:
 22372                           	opt stack 26
 22373  001B66  6ED9               	movwf	fsr2l,c
 22374  001B68  6ADA               	clrf	fsr2h,c
 22375  001B6A  CFDE F074          	movff	postinc2,sprintf@_val
 22376  001B6E  CFDE F075          	movff	postinc2,sprintf@_val+1
 22377  001B72  CFDE F076          	movff	postinc2,sprintf@_val+2
 22378  001B76  CFDE F077          	movff	postinc2,sprintf@_val+3
 22379  001B7A  0C04               	retlw	4
 22380  001B7C                     __end_ofPL50:
 22381                           	opt stack 0
 22382  001B7C                     PL62:
 22383                           	opt stack 26
 22384  001B7C  C060  FFD9         	movff	sprintf@sp,fsr2l
 22385  001B80  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22386  001B84  0E20               	movlw	32
 22387  001B86  6EDF               	movwf	indf2,c
 22388  001B88  0C20               	retlw	32
 22389  001B8A                     __end_ofPL62:
 22390                           	opt stack 0
 22391  001B8A                     PL66:
 22392                           	opt stack 26
 22393  001B8A  C062  FFF6         	movff	sprintf@f,tblptrl
 22394  001B8E  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22395  001B92  4B62               	infsnz	sprintf@f& (0+255),f,b
 22396  001B94  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22397  001B96  0008               	tblrd		*
 22398  001B98  CFF5 F078          	movff	tablat,sprintf@c
 22399  001B9C  0012               	return	
 22400  001B9E                     __end_ofPL66:
 22401                           	opt stack 0
 22402  001B9E                     PL80:
 22403                           	opt stack 26
 22404  001B9E  4B62               	infsnz	sprintf@f& (0+255),f,b
 22405  001BA0  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22406  001BA2  C062  FFF6         	movff	sprintf@f,tblptrl
 22407  001BA6  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22408  001BAA  0008               	tblrd		*
 22409  001BAC  50F5               	movf	tablat,w,c
 22410  001BAE  0012               	return	
 22411  001BB0                     __end_ofPL80:
 22412                           	opt stack 0
 22413  001BB0                     PL84:
 22414                           	opt stack 26
 22415  001BB0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22416  001BB4  0E30               	movlw	48
 22417  001BB6  6EDF               	movwf	indf2,c
 22418  001BB8  0C30               	retlw	48
 22419  001BBA                     __end_ofPL84:
 22420                           	opt stack 0
 22421  001BBA                     PL98:
 22422                           	opt stack 26
 22423  001BBA  A0D8               	btfss	status,0,c
 22424  001BBC  0773               	decf	(sprintf@width+1)& (0+255),f,b
 22425  001BBE  0100               	movlb	0	; () banked
 22426  001BC0  2972               	incf	sprintf@width& (0+255),w,b
 22427  001BC2  0012               	return	
 22428  001BC4                     __end_ofPL98:
 22429                           	opt stack 0
 22430                           tblptru	equ	0xFF8
 22431                           tblptrh	equ	0xFF7
 22432                           tblptrl	equ	0xFF6
 22433                           tablat	equ	0xFF5
 22434                           prodh	equ	0xFF4
 22435                           prodl	equ	0xFF3
 22436                           intcon	equ	0xFF2
 22437                           indf0	equ	0xFEF
 22438                           postinc0	equ	0xFEE
 22439                           fsr0h	equ	0xFEA
 22440                           fsr0l	equ	0xFE9
 22441                           wreg	equ	0xFE8
 22442                           indf1	equ	0xFE7
 22443                           postinc1	equ	0xFE6
 22444                           postdec1	equ	0xFE5
 22445                           fsr1h	equ	0xFE2
 22446                           fsr1l	equ	0xFE1
 22447                           indf2	equ	0xFDF
 22448                           postinc2	equ	0xFDE
 22449                           postdec2	equ	0xFDD
 22450                           plusw2	equ	0xFDB
 22451                           fsr2h	equ	0xFDA
 22452                           fsr2l	equ	0xFD9
 22453                           status	equ	0xFD8
 22454                           
 22455 ;; *************** function ___wmul *****************
 22456 ;; Defined at:
 22457 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 22458 ;; Parameters:    Size  Location     Type
 22459 ;;  multiplier      2   24[COMRAM] unsigned int 
 22460 ;;  multiplicand    2   26[COMRAM] unsigned int 
 22461 ;; Auto vars:     Size  Location     Type
 22462 ;;  product         2   28[COMRAM] unsigned int 
 22463 ;; Return value:  Size  Location     Type
 22464 ;;                  2   24[COMRAM] unsigned int 
 22465 ;; Registers used:
 22466 ;;		wreg, status,2, status,0, prodl, prodh
 22467 ;; Tracked objects:
 22468 ;;		On entry : 0/2
 22469 ;;		On exit  : 0/0
 22470 ;;		Unchanged: 0/0
 22471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22472 ;;      Params:         4       0       0       0       0       0       0
 22473 ;;      Locals:         2       0       0       0       0       0       0
 22474 ;;      Temps:          0       0       0       0       0       0       0
 22475 ;;      Totals:         6       0       0       0       0       0       0
 22476 ;;Total ram usage:        6 bytes
 22477 ;; Hardware stack levels used:    1
 22478 ;; Hardware stack levels required when called:    2
 22479 ;; This function calls:
 22480 ;;		Nothing
 22481 ;; This function is called by:
 22482 ;;		_sprintf
 22483 ;;		_atoi
 22484 ;; This function uses a non-reentrant model
 22485 ;;
 22486                           
 22487                           	psect	text56
 22488  005020                     __ptext56:
 22489                           	opt stack 0
 22490  005020                     ___wmul:
 22491                           	opt stack 26
 22492                           
 22493                           ; BSR set to: 0
 22494                           ;incstack = 0
 22495                           ;incstack = 0
 22496  005020  5019               	movf	___wmul@multiplier,w,c
 22497  005022  021B               	mulwf	___wmul@multiplicand,c
 22498  005024  CFF3 F01D          	movff	prodl,___wmul@product
 22499  005028  CFF4 F01E          	movff	prodh,___wmul@product+1
 22500  00502C  5019               	movf	___wmul@multiplier,w,c
 22501  00502E  021C               	mulwf	___wmul@multiplicand+1,c
 22502  005030  D808               	call	PL86	;call to abstracted procedure
 22503  005032  501A               	movf	___wmul@multiplier+1,w,c
 22504  005034  021B               	mulwf	___wmul@multiplicand,c
 22505  005036  D805               	call	PL86	;call to abstracted procedure
 22506  005038  C01D  F019         	movff	___wmul@product,?___wmul
 22507  00503C  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 22508  005040  0012               	return	
 22509  005042                     __end_of___wmul:
 22510                           	opt stack 0
 22511  005042                     PL86:
 22512                           	opt stack 26
 22513  005042  CFF3 FFF4          	movff	prodl,prodh
 22514  005046  6AF3               	clrf	prodl,c
 22515  005048  50F3               	movf	prodl,w,c
 22516  00504A  261D               	addwf	___wmul@product,f,c
 22517  00504C  50F4               	movf	prodh,w,c
 22518  00504E  221E               	addwfc	___wmul@product+1,f,c
 22519  005050  0012               	return	
 22520  005052                     __end_ofPL86:
 22521                           	opt stack 0
 22522                           tblptru	equ	0xFF8
 22523                           tblptrh	equ	0xFF7
 22524                           tblptrl	equ	0xFF6
 22525                           tablat	equ	0xFF5
 22526                           prodh	equ	0xFF4
 22527                           prodl	equ	0xFF3
 22528                           intcon	equ	0xFF2
 22529                           indf0	equ	0xFEF
 22530                           postinc0	equ	0xFEE
 22531                           fsr0h	equ	0xFEA
 22532                           fsr0l	equ	0xFE9
 22533                           wreg	equ	0xFE8
 22534                           indf1	equ	0xFE7
 22535                           postinc1	equ	0xFE6
 22536                           postdec1	equ	0xFE5
 22537                           fsr1h	equ	0xFE2
 22538                           fsr1l	equ	0xFE1
 22539                           indf2	equ	0xFDF
 22540                           postinc2	equ	0xFDE
 22541                           postdec2	equ	0xFDD
 22542                           plusw2	equ	0xFDB
 22543                           fsr2h	equ	0xFDA
 22544                           fsr2l	equ	0xFD9
 22545                           status	equ	0xFD8
 22546                           
 22547 ;; *************** function ___llmod *****************
 22548 ;; Defined at:
 22549 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 22550 ;; Parameters:    Size  Location     Type
 22551 ;;  dividend        4   37[COMRAM] unsigned long 
 22552 ;;  divisor         4   41[COMRAM] unsigned long 
 22553 ;; Auto vars:     Size  Location     Type
 22554 ;;  counter         1   45[COMRAM] unsigned char 
 22555 ;; Return value:  Size  Location     Type
 22556 ;;                  4   37[COMRAM] unsigned long 
 22557 ;; Registers used:
 22558 ;;		wreg, status,2, status,0
 22559 ;; Tracked objects:
 22560 ;;		On entry : F/0
 22561 ;;		On exit  : F/0
 22562 ;;		Unchanged: F/0
 22563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22564 ;;      Params:         8       0       0       0       0       0       0
 22565 ;;      Locals:         1       0       0       0       0       0       0
 22566 ;;      Temps:          0       0       0       0       0       0       0
 22567 ;;      Totals:         9       0       0       0       0       0       0
 22568 ;;Total ram usage:        9 bytes
 22569 ;; Hardware stack levels used:    1
 22570 ;; Hardware stack levels required when called:    2
 22571 ;; This function calls:
 22572 ;;		Nothing
 22573 ;; This function is called by:
 22574 ;;		_sprintf
 22575 ;;		_ultoa
 22576 ;; This function uses a non-reentrant model
 22577 ;;
 22578                           
 22579                           	psect	text57
 22580  004A5C                     __ptext57:
 22581                           	opt stack 0
 22582  004A5C                     ___llmod:
 22583                           	opt stack 25
 22584                           
 22585                           ; BSR set to: 0
 22586                           
 22587                           ;incstack = 0
 22588                           ;incstack = 0
 22589  004A5C  502D               	movf	___llmod@divisor+3,w,c
 22590  004A5E  102A               	iorwf	___llmod@divisor,w,c
 22591  004A60  102B               	iorwf	___llmod@divisor+1,w,c
 22592  004A62  102C               	iorwf	___llmod@divisor+2,w,c
 22593  004A64  E023               	bz	l2235
 22594                           
 22595                           ; BSR set to: 0
 22596  004A66  0E01               	movlw	1
 22597  004A68  6E2E               	movwf	___llmod@counter,c
 22598  004A6A  D006               	goto	l14020
 22599  004A6C                     l14018:
 22600                           
 22601                           ; BSR set to: 0
 22602  004A6C  90D8               	bcf	status,0,c
 22603  004A6E  362A               	rlcf	___llmod@divisor,f,c
 22604  004A70  362B               	rlcf	___llmod@divisor+1,f,c
 22605  004A72  362C               	rlcf	___llmod@divisor+2,f,c
 22606  004A74  362D               	rlcf	___llmod@divisor+3,f,c
 22607  004A76  2A2E               	incf	___llmod@counter,f,c
 22608  004A78                     l14020:
 22609                           
 22610                           ; BSR set to: 0
 22611  004A78  AE2D               	btfss	___llmod@divisor+3,7,c
 22612  004A7A  D7F8               	goto	l14018
 22613  004A7C                     l14022:
 22614                           
 22615                           ; BSR set to: 0
 22616  004A7C  502A               	movf	___llmod@divisor,w,c
 22617  004A7E  5C26               	subwf	___llmod@dividend,w,c
 22618  004A80  502B               	movf	___llmod@divisor+1,w,c
 22619  004A82  5827               	subwfb	___llmod@dividend+1,w,c
 22620  004A84  502C               	movf	___llmod@divisor+2,w,c
 22621  004A86  5828               	subwfb	___llmod@dividend+2,w,c
 22622  004A88  502D               	movf	___llmod@divisor+3,w,c
 22623  004A8A  5829               	subwfb	___llmod@dividend+3,w,c
 22624  004A8C  E308               	bnc	l14026
 22625                           
 22626                           ; BSR set to: 0
 22627  004A8E  502A               	movf	___llmod@divisor,w,c
 22628  004A90  5E26               	subwf	___llmod@dividend,f,c
 22629  004A92  502B               	movf	___llmod@divisor+1,w,c
 22630  004A94  5A27               	subwfb	___llmod@dividend+1,f,c
 22631  004A96  502C               	movf	___llmod@divisor+2,w,c
 22632  004A98  5A28               	subwfb	___llmod@dividend+2,f,c
 22633  004A9A  502D               	movf	___llmod@divisor+3,w,c
 22634  004A9C  5A29               	subwfb	___llmod@dividend+3,f,c
 22635  004A9E                     l14026:
 22636                           
 22637                           ; BSR set to: 0
 22638  004A9E  90D8               	bcf	status,0,c
 22639  004AA0  322D               	rrcf	___llmod@divisor+3,f,c
 22640  004AA2  322C               	rrcf	___llmod@divisor+2,f,c
 22641  004AA4  322B               	rrcf	___llmod@divisor+1,f,c
 22642  004AA6  322A               	rrcf	___llmod@divisor,f,c
 22643                           
 22644                           ; BSR set to: 0
 22645  004AA8  2E2E               	decfsz	___llmod@counter,f,c
 22646  004AAA  D7E8               	goto	l14022
 22647  004AAC                     l2235:
 22648                           
 22649                           ; BSR set to: 0
 22650  004AAC  C026  F026         	movff	___llmod@dividend,?___llmod
 22651  004AB0  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 22652  004AB4  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 22653  004AB8  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 22654                           
 22655                           ; BSR set to: 0
 22656  004ABC  0012               	return	
 22657  004ABE                     __end_of___llmod:
 22658                           	opt stack 0
 22659                           tblptru	equ	0xFF8
 22660                           tblptrh	equ	0xFF7
 22661                           tblptrl	equ	0xFF6
 22662                           tablat	equ	0xFF5
 22663                           prodh	equ	0xFF4
 22664                           prodl	equ	0xFF3
 22665                           intcon	equ	0xFF2
 22666                           indf0	equ	0xFEF
 22667                           postinc0	equ	0xFEE
 22668                           fsr0h	equ	0xFEA
 22669                           fsr0l	equ	0xFE9
 22670                           wreg	equ	0xFE8
 22671                           indf1	equ	0xFE7
 22672                           postinc1	equ	0xFE6
 22673                           postdec1	equ	0xFE5
 22674                           fsr1h	equ	0xFE2
 22675                           fsr1l	equ	0xFE1
 22676                           indf2	equ	0xFDF
 22677                           postinc2	equ	0xFDE
 22678                           postdec2	equ	0xFDD
 22679                           plusw2	equ	0xFDB
 22680                           fsr2h	equ	0xFDA
 22681                           fsr2l	equ	0xFD9
 22682                           status	equ	0xFD8
 22683                           
 22684 ;; *************** function ___lldiv *****************
 22685 ;; Defined at:
 22686 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 22687 ;; Parameters:    Size  Location     Type
 22688 ;;  dividend        4   24[COMRAM] unsigned long 
 22689 ;;  divisor         4   28[COMRAM] unsigned long 
 22690 ;; Auto vars:     Size  Location     Type
 22691 ;;  quotient        4   33[COMRAM] unsigned long 
 22692 ;;  counter         1   32[COMRAM] unsigned char 
 22693 ;; Return value:  Size  Location     Type
 22694 ;;                  4   24[COMRAM] unsigned long 
 22695 ;; Registers used:
 22696 ;;		wreg, status,2, status,0
 22697 ;; Tracked objects:
 22698 ;;		On entry : F/0
 22699 ;;		On exit  : F/0
 22700 ;;		Unchanged: F/0
 22701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22702 ;;      Params:         8       0       0       0       0       0       0
 22703 ;;      Locals:         5       0       0       0       0       0       0
 22704 ;;      Temps:          0       0       0       0       0       0       0
 22705 ;;      Totals:        13       0       0       0       0       0       0
 22706 ;;Total ram usage:       13 bytes
 22707 ;; Hardware stack levels used:    1
 22708 ;; Hardware stack levels required when called:    2
 22709 ;; This function calls:
 22710 ;;		Nothing
 22711 ;; This function is called by:
 22712 ;;		_sprintf
 22713 ;;		_ultoa
 22714 ;; This function uses a non-reentrant model
 22715 ;;
 22716                           
 22717                           	psect	text58
 22718  0047D8                     __ptext58:
 22719                           	opt stack 0
 22720  0047D8                     ___lldiv:
 22721                           	opt stack 25
 22722                           
 22723                           ; BSR set to: 0
 22724                           
 22725                           ; BSR set to: 0
 22726                           ;incstack = 0
 22727                           ;incstack = 0
 22728  0047D8  6A22               	clrf	___lldiv@quotient,c
 22729  0047DA  6A23               	clrf	___lldiv@quotient+1,c
 22730  0047DC  6A24               	clrf	___lldiv@quotient+2,c
 22731  0047DE  6A25               	clrf	___lldiv@quotient+3,c
 22732                           
 22733                           ; BSR set to: 0
 22734  0047E0  5020               	movf	___lldiv@divisor+3,w,c
 22735  0047E2  101D               	iorwf	___lldiv@divisor,w,c
 22736  0047E4  101E               	iorwf	___lldiv@divisor+1,w,c
 22737  0047E6  101F               	iorwf	___lldiv@divisor+2,w,c
 22738  0047E8  E029               	bz	l2225
 22739                           
 22740                           ; BSR set to: 0
 22741  0047EA  0E01               	movlw	1
 22742  0047EC  6E21               	movwf	___lldiv@counter,c
 22743  0047EE  D006               	goto	l14000
 22744  0047F0                     l13998:
 22745                           
 22746                           ; BSR set to: 0
 22747  0047F0  90D8               	bcf	status,0,c
 22748  0047F2  361D               	rlcf	___lldiv@divisor,f,c
 22749  0047F4  361E               	rlcf	___lldiv@divisor+1,f,c
 22750  0047F6  361F               	rlcf	___lldiv@divisor+2,f,c
 22751  0047F8  3620               	rlcf	___lldiv@divisor+3,f,c
 22752  0047FA  2A21               	incf	___lldiv@counter,f,c
 22753  0047FC                     l14000:
 22754                           
 22755                           ; BSR set to: 0
 22756  0047FC  AE20               	btfss	___lldiv@divisor+3,7,c
 22757  0047FE  D7F8               	goto	l13998
 22758  004800                     l14002:
 22759                           
 22760                           ; BSR set to: 0
 22761  004800  90D8               	bcf	status,0,c
 22762  004802  3622               	rlcf	___lldiv@quotient,f,c
 22763  004804  3623               	rlcf	___lldiv@quotient+1,f,c
 22764  004806  3624               	rlcf	___lldiv@quotient+2,f,c
 22765  004808  3625               	rlcf	___lldiv@quotient+3,f,c
 22766                           
 22767                           ; BSR set to: 0
 22768  00480A  501D               	movf	___lldiv@divisor,w,c
 22769  00480C  5C19               	subwf	___lldiv@dividend,w,c
 22770  00480E  501E               	movf	___lldiv@divisor+1,w,c
 22771  004810  581A               	subwfb	___lldiv@dividend+1,w,c
 22772  004812  501F               	movf	___lldiv@divisor+2,w,c
 22773  004814  581B               	subwfb	___lldiv@dividend+2,w,c
 22774  004816  5020               	movf	___lldiv@divisor+3,w,c
 22775  004818  581C               	subwfb	___lldiv@dividend+3,w,c
 22776  00481A  E309               	bnc	l14010
 22777                           
 22778                           ; BSR set to: 0
 22779  00481C  501D               	movf	___lldiv@divisor,w,c
 22780  00481E  5E19               	subwf	___lldiv@dividend,f,c
 22781  004820  501E               	movf	___lldiv@divisor+1,w,c
 22782  004822  5A1A               	subwfb	___lldiv@dividend+1,f,c
 22783  004824  501F               	movf	___lldiv@divisor+2,w,c
 22784  004826  5A1B               	subwfb	___lldiv@dividend+2,f,c
 22785  004828  5020               	movf	___lldiv@divisor+3,w,c
 22786  00482A  5A1C               	subwfb	___lldiv@dividend+3,f,c
 22787                           
 22788                           ; BSR set to: 0
 22789  00482C  8022               	bsf	___lldiv@quotient,0,c
 22790  00482E                     l14010:
 22791                           
 22792                           ; BSR set to: 0
 22793  00482E  90D8               	bcf	status,0,c
 22794  004830  3220               	rrcf	___lldiv@divisor+3,f,c
 22795  004832  321F               	rrcf	___lldiv@divisor+2,f,c
 22796  004834  321E               	rrcf	___lldiv@divisor+1,f,c
 22797  004836  321D               	rrcf	___lldiv@divisor,f,c
 22798                           
 22799                           ; BSR set to: 0
 22800  004838  2E21               	decfsz	___lldiv@counter,f,c
 22801  00483A  D7E2               	goto	l14002
 22802  00483C                     l2225:
 22803                           
 22804                           ; BSR set to: 0
 22805  00483C  C022  F019         	movff	___lldiv@quotient,?___lldiv
 22806  004840  C023  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 22807  004844  C024  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 22808  004848  C025  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 22809                           
 22810                           ; BSR set to: 0
 22811  00484C  0012               	return	
 22812  00484E                     __end_of___lldiv:
 22813                           	opt stack 0
 22814                           tblptru	equ	0xFF8
 22815                           tblptrh	equ	0xFF7
 22816                           tblptrl	equ	0xFF6
 22817                           tablat	equ	0xFF5
 22818                           prodh	equ	0xFF4
 22819                           prodl	equ	0xFF3
 22820                           intcon	equ	0xFF2
 22821                           indf0	equ	0xFEF
 22822                           postinc0	equ	0xFEE
 22823                           fsr0h	equ	0xFEA
 22824                           fsr0l	equ	0xFE9
 22825                           wreg	equ	0xFE8
 22826                           indf1	equ	0xFE7
 22827                           postinc1	equ	0xFE6
 22828                           postdec1	equ	0xFE5
 22829                           fsr1h	equ	0xFE2
 22830                           fsr1l	equ	0xFE1
 22831                           indf2	equ	0xFDF
 22832                           postinc2	equ	0xFDE
 22833                           postdec2	equ	0xFDD
 22834                           plusw2	equ	0xFDB
 22835                           fsr2h	equ	0xFDA
 22836                           fsr2l	equ	0xFD9
 22837                           status	equ	0xFD8
 22838                           
 22839 ;; *************** function _isdigit *****************
 22840 ;; Defined at:
 22841 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 22842 ;; Parameters:    Size  Location     Type
 22843 ;;  c               1    wreg     unsigned char 
 22844 ;; Auto vars:     Size  Location     Type
 22845 ;;  c               1   26[COMRAM] unsigned char 
 22846 ;; Return value:  Size  Location     Type
 22847 ;;		None               void
 22848 ;; Registers used:
 22849 ;;		wreg, status,2, status,0
 22850 ;; Tracked objects:
 22851 ;;		On entry : 0/2
 22852 ;;		On exit  : 0/0
 22853 ;;		Unchanged: 0/0
 22854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22855 ;;      Params:         0       0       0       0       0       0       0
 22856 ;;      Locals:         2       0       0       0       0       0       0
 22857 ;;      Temps:          1       0       0       0       0       0       0
 22858 ;;      Totals:         3       0       0       0       0       0       0
 22859 ;;Total ram usage:        3 bytes
 22860 ;; Hardware stack levels used:    1
 22861 ;; Hardware stack levels required when called:    2
 22862 ;; This function calls:
 22863 ;;		Nothing
 22864 ;; This function is called by:
 22865 ;;		_sprintf
 22866 ;;		_atoi
 22867 ;; This function uses a non-reentrant model
 22868 ;;
 22869                           
 22870                           	psect	text59
 22871  005100                     __ptext59:
 22872                           	opt stack 0
 22873  005100                     _isdigit:
 22874                           	opt stack 26
 22875                           
 22876                           ; BSR set to: 0
 22877                           ;incstack = 0
 22878                           ;incstack = 0
 22879                           ;isdigit@c stored from wreg
 22880  005100  CFE8 F01B          	movff	wreg,isdigit@c
 22881  005104  6A1A               	clrf	_isdigit$2892,c
 22882  005106  0E3A               	movlw	58
 22883  005108  601B               	cpfslt	isdigit@c,c
 22884  00510A  D005               	goto	l12300
 22885  00510C  0E2F               	movlw	47
 22886  00510E  641B               	cpfsgt	isdigit@c,c
 22887  005110  D002               	goto	l12300
 22888  005112  0E01               	movlw	1
 22889  005114  6E1A               	movwf	_isdigit$2892,c
 22890  005116                     l12300:
 22891  005116  C01A  F019         	movff	_isdigit$2892,??_isdigit
 22892  00511A  3019               	rrcf	??_isdigit,w,c
 22893  00511C  0012               	return	
 22894  00511E                     __end_of_isdigit:
 22895                           	opt stack 0
 22896                           tblptru	equ	0xFF8
 22897                           tblptrh	equ	0xFF7
 22898                           tblptrl	equ	0xFF6
 22899                           tablat	equ	0xFF5
 22900                           prodh	equ	0xFF4
 22901                           prodl	equ	0xFF3
 22902                           intcon	equ	0xFF2
 22903                           indf0	equ	0xFEF
 22904                           postinc0	equ	0xFEE
 22905                           fsr0h	equ	0xFEA
 22906                           fsr0l	equ	0xFE9
 22907                           wreg	equ	0xFE8
 22908                           indf1	equ	0xFE7
 22909                           postinc1	equ	0xFE6
 22910                           postdec1	equ	0xFE5
 22911                           fsr1h	equ	0xFE2
 22912                           fsr1l	equ	0xFE1
 22913                           indf2	equ	0xFDF
 22914                           postinc2	equ	0xFDE
 22915                           postdec2	equ	0xFDD
 22916                           plusw2	equ	0xFDB
 22917                           fsr2h	equ	0xFDA
 22918                           fsr2l	equ	0xFD9
 22919                           status	equ	0xFD8
 22920                           
 22921 ;; *************** function _fifo_read *****************
 22922 ;; Defined at:
 22923 ;;		line 29 in file "fifo.c"
 22924 ;; Parameters:    Size  Location     Type
 22925 ;;  f               2   24[COMRAM] PTR struct .
 22926 ;;		 -> serialInputFifo(8), 
 22927 ;;  buf             2   26[COMRAM] PTR void 
 22928 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22929 ;;  nbytes          2   28[COMRAM] unsigned short 
 22930 ;; Auto vars:     Size  Location     Type
 22931 ;;  i               2   36[COMRAM] unsigned short 
 22932 ;;  p               2   34[COMRAM] PTR unsigned char 
 22933 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22934 ;; Return value:  Size  Location     Type
 22935 ;;                  2   24[COMRAM] unsigned short 
 22936 ;; Registers used:
 22937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 22938 ;; Tracked objects:
 22939 ;;		On entry : C/0
 22940 ;;		On exit  : C/0
 22941 ;;		Unchanged: C/0
 22942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22943 ;;      Params:         6       0       0       0       0       0       0
 22944 ;;      Locals:         4       0       0       0       0       0       0
 22945 ;;      Temps:          4       0       0       0       0       0       0
 22946 ;;      Totals:        14       0       0       0       0       0       0
 22947 ;;Total ram usage:       14 bytes
 22948 ;; Hardware stack levels used:    1
 22949 ;; Hardware stack levels required when called:    2
 22950 ;; This function calls:
 22951 ;;		Nothing
 22952 ;; This function is called by:
 22953 ;;		_main
 22954 ;;		_doModeVerbose
 22955 ;;		_doModeVscp
 22956 ;;		_doModeSLCAN
 22957 ;; This function uses a non-reentrant model
 22958 ;;
 22959                           
 22960                           	psect	text60
 22961  003EC2                     __ptext60:
 22962                           	opt stack 0
 22963  003EC2                     _fifo_read:
 22964                           	opt stack 27
 22965                           
 22966                           ;fifo.c: 30: uint16_t i;
 22967                           ;fifo.c: 31: uint8_t *p;
 22968                           ;fifo.c: 32: p = buf;
 22969                           
 22970                           ;incstack = 0
 22971                           ;incstack = 0
 22972  003EC2  C01B  F023         	movff	fifo_read@buf,fifo_read@p
 22973  003EC6  C01C  F024         	movff	fifo_read@buf+1,fifo_read@p+1
 22974                           
 22975                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22976  003ECA  6A25               	clrf	fifo_read@i,c
 22977  003ECC  6A26               	clrf	fifo_read@i+1,c
 22978  003ECE  D045               	goto	l9496
 22979  003ED0                     l9482:
 22980                           
 22981                           ;fifo.c: 36: if (f->tail != f->head) {
 22982  003ED0  EE20 F002          	lfsr	2,2
 22983  003ED4  D84C               	call	PL26	;call to abstracted procedure
 22984  003ED6  B4D8               	btfsc	status,2,c
 22985  003ED8  18E7               	xorwf	indf1,w,c
 22986  003EDA  E038               	bz	l1421
 22987                           
 22988                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22989  003EDC  EE20 F004          	lfsr	2,4
 22990  003EE0  5019               	movf	fifo_read@f,w,c
 22991  003EE2  26D9               	addwf	fsr2l,f,c
 22992  003EE4  501A               	movf	fifo_read@f+1,w,c
 22993  003EE6  22DA               	addwfc	fsr2h,f,c
 22994  003EE8  CFDE F01F          	movff	postinc2,??_fifo_read
 22995  003EEC  CFDD F020          	movff	postdec2,??_fifo_read+1
 22996  003EF0  C019  FFD9         	movff	fifo_read@f,fsr2l
 22997  003EF4  C01A  FFDA         	movff	fifo_read@f+1,fsr2h
 22998  003EF8  CFDE F021          	movff	postinc2,??_fifo_read+2
 22999  003EFC  CFDD F022          	movff	postdec2,??_fifo_read+3
 23000  003F00  501F               	movf	??_fifo_read,w,c
 23001  003F02  2421               	addwf	??_fifo_read+2,w,c
 23002  003F04  6ED9               	movwf	fsr2l,c
 23003  003F06  5020               	movf	??_fifo_read+1,w,c
 23004  003F08  2022               	addwfc	??_fifo_read+3,w,c
 23005  003F0A  6EDA               	movwf	fsr2h,c
 23006  003F0C  C023  FFE1         	movff	fifo_read@p,fsr1l
 23007  003F10  C024  FFE2         	movff	fifo_read@p+1,fsr1h
 23008  003F14  CFDF FFE7          	movff	indf2,indf1
 23009  003F18  4A23               	infsnz	fifo_read@p,f,c
 23010  003F1A  2A24               	incf	fifo_read@p+1,f,c
 23011                           
 23012                           ;fifo.c: 38: f->tail++;
 23013  003F1C  EE20 F004          	lfsr	2,4
 23014  003F20  5019               	movf	fifo_read@f,w,c
 23015  003F22  26D9               	addwf	fsr2l,f,c
 23016  003F24  501A               	movf	fifo_read@f+1,w,c
 23017  003F26  22DA               	addwfc	fsr2h,f,c
 23018  003F28  2ADE               	incf	postinc2,f,c
 23019  003F2A  0E00               	movlw	0
 23020  003F2C  22DD               	addwfc	postdec2,f,c
 23021                           
 23022                           ;fifo.c: 39: if (f->tail == f->size) {
 23023  003F2E  EE20 F006          	lfsr	2,6
 23024  003F32  D81D               	call	PL26	;call to abstracted procedure
 23025  003F34  B4D8               	btfsc	status,2,c
 23026  003F36  18E7               	xorwf	indf1,w,c
 23027  003F38  E10E               	bnz	l9494
 23028                           
 23029                           ;fifo.c: 40: f->tail = 0;
 23030  003F3A  EE20 F004          	lfsr	2,4
 23031  003F3E  5019               	movf	fifo_read@f,w,c
 23032  003F40  26D9               	addwf	fsr2l,f,c
 23033  003F42  501A               	movf	fifo_read@f+1,w,c
 23034  003F44  22DA               	addwfc	fsr2h,f,c
 23035  003F46  6ADE               	clrf	postinc2,c
 23036  003F48  6ADD               	clrf	postdec2,c
 23037  003F4A  D005               	goto	l9494
 23038  003F4C                     l1421:
 23039                           
 23040                           ;fifo.c: 43: else {
 23041                           ;fifo.c: 44: return i;
 23042  003F4C  C025  F019         	movff	fifo_read@i,?_fifo_read
 23043  003F50  C026  F01A         	movff	fifo_read@i+1,?_fifo_read+1
 23044  003F54  D00B               	goto	l1424
 23045  003F56                     l9494:
 23046  003F56  4A25               	infsnz	fifo_read@i,f,c
 23047  003F58  2A26               	incf	fifo_read@i+1,f,c
 23048  003F5A                     l9496:
 23049  003F5A  501D               	movf	fifo_read@nbytes,w,c
 23050  003F5C  5C25               	subwf	fifo_read@i,w,c
 23051  003F5E  501E               	movf	fifo_read@nbytes+1,w,c
 23052  003F60  5826               	subwfb	fifo_read@i+1,w,c
 23053  003F62  E3B6               	bnc	l9482
 23054                           
 23055                           ;fifo.c: 45: }
 23056                           ;fifo.c: 47: }
 23057                           ;fifo.c: 49: return nbytes;
 23058  003F64  C01D  F019         	movff	fifo_read@nbytes,?_fifo_read
 23059  003F68  C01E  F01A         	movff	fifo_read@nbytes+1,?_fifo_read+1
 23060  003F6C                     l1424:
 23061  003F6C  0012               	return	
 23062  003F6E                     __end_of_fifo_read:
 23063                           	opt stack 0
 23064  003F6E                     PL26:
 23065                           	opt stack 27
 23066  003F6E  5019               	movf	fifo_read@f,w,c
 23067  003F70  26D9               	addwf	fsr2l,f,c
 23068  003F72  501A               	movf	fifo_read@f+1,w,c
 23069  003F74  22DA               	addwfc	fsr2h,f,c
 23070  003F76  EE10 F004          	lfsr	1,4
 23071  003F7A  5019               	movf	fifo_read@f,w,c
 23072  003F7C  26E1               	addwf	fsr1l,f,c
 23073  003F7E  501A               	movf	fifo_read@f+1,w,c
 23074  003F80  22E2               	addwfc	fsr1h,f,c
 23075  003F82  52E6               	movf	postinc1,f,c
 23076  003F84  52DE               	movf	postinc2,f,c
 23077  003F86  50DD               	movf	postdec2,w,c
 23078  003F88  18E5               	xorwf	postdec1,w,c
 23079  003F8A  CFDF FFE8          	movff	indf2,wreg
 23080  003F8E  0012               	return	
 23081  003F90                     __end_ofPL26:
 23082                           	opt stack 0
 23083                           tblptru	equ	0xFF8
 23084                           tblptrh	equ	0xFF7
 23085                           tblptrl	equ	0xFF6
 23086                           tablat	equ	0xFF5
 23087                           prodh	equ	0xFF4
 23088                           prodl	equ	0xFF3
 23089                           intcon	equ	0xFF2
 23090                           indf0	equ	0xFEF
 23091                           postinc0	equ	0xFEE
 23092                           fsr0h	equ	0xFEA
 23093                           fsr0l	equ	0xFE9
 23094                           wreg	equ	0xFE8
 23095                           indf1	equ	0xFE7
 23096                           postinc1	equ	0xFE6
 23097                           postdec1	equ	0xFE5
 23098                           fsr1h	equ	0xFE2
 23099                           fsr1l	equ	0xFE1
 23100                           indf2	equ	0xFDF
 23101                           postinc2	equ	0xFDE
 23102                           postdec2	equ	0xFDD
 23103                           plusw2	equ	0xFDB
 23104                           fsr2h	equ	0xFDA
 23105                           fsr2l	equ	0xFD9
 23106                           status	equ	0xFD8
 23107                           
 23108 ;; *************** function _printFirmwareVersion *****************
 23109 ;; Defined at:
 23110 ;;		line 2353 in file "main.c"
 23111 ;; Parameters:    Size  Location     Type
 23112 ;;		None
 23113 ;; Auto vars:     Size  Location     Type
 23114 ;;  wrkbuf         20    0[BANK0 ] unsigned char [20]
 23115 ;; Return value:  Size  Location     Type
 23116 ;;		None               void
 23117 ;; Registers used:
 23118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23119 ;; Tracked objects:
 23120 ;;		On entry : 0/0
 23121 ;;		On exit  : 0/0
 23122 ;;		Unchanged: 0/0
 23123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23124 ;;      Params:         0       0       0       0       0       0       0
 23125 ;;      Locals:         0      20       0       0       0       0       0
 23126 ;;      Temps:          0       0       0       0       0       0       0
 23127 ;;      Totals:         0      20       0       0       0       0       0
 23128 ;;Total ram usage:       20 bytes
 23129 ;; Hardware stack levels used:    1
 23130 ;; Hardware stack levels required when called:    5
 23131 ;; This function calls:
 23132 ;;		_putsUSART
 23133 ;;		_WriteUSART
 23134 ;;		_itoa
 23135 ;; This function is called by:
 23136 ;;		_main
 23137 ;;		_doModeVerbose
 23138 ;; This function uses a non-reentrant model
 23139 ;;
 23140                           
 23141                           	psect	text61
 23142  0044CA                     __ptext61:
 23143                           	opt stack 0
 23144  0044CA                     _printFirmwareVersion:
 23145                           	opt stack 24
 23146                           
 23147                           ;main.c: 2354: char wrkbuf[20];
 23148                           ;main.c: 2355: putsUSART((char *) "Version: ");
 23149                           
 23150                           ;incstack = 0
 23151                           ;incstack = 0
 23152  0044CA  0E7E               	movlw	high STR_245
 23153  0044CC  6E1B               	movwf	?_putsUSART+1,c
 23154  0044CE  0E9D               	movlw	low STR_245
 23155  0044D0  6E1A               	movwf	?_putsUSART,c
 23156  0044D2  ECE6  F025         	call	_putsUSART	;wreg free
 23157                           
 23158                           ;main.c: 2356: itoa(wrkbuf, 1, 10);
 23159  0044D6  D83A               	call	PL60	;call to abstracted procedure
 23160  0044D8  0E01               	movlw	1
 23161  0044DA  6E2B               	movwf	?_itoa+2,c
 23162  0044DC  6A2E               	clrf	?_itoa+5,c
 23163  0044DE  0E0A               	movlw	10
 23164  0044E0  6E2D               	movwf	?_itoa+4,c
 23165  0044E2  ECD9  F027         	call	_itoa	;wreg free
 23166                           
 23167                           ;main.c: 2357: putsUSART(wrkbuf);
 23168  0044E6  0100               	movlb	0	; () banked
 23169  0044E8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23170  0044EA  6E1B               	movwf	?_putsUSART+1,c
 23171  0044EC  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23172  0044EE  6E1A               	movwf	?_putsUSART,c
 23173  0044F0  ECE6  F025         	call	_putsUSART	;wreg free
 23174  0044F4                     l1117:
 23175  0044F4  A2AC               	btfss	4012,1,c	;volatile
 23176  0044F6  D7FE               	goto	l1117
 23177                           
 23178                           ;main.c: 2359: WriteUSART('.');
 23179  0044F8  0E2E               	movlw	46
 23180  0044FA  ECC4  F028         	call	_WriteUSART
 23181                           
 23182                           ;main.c: 2360: itoa(wrkbuf, 0, 10);
 23183  0044FE  D826               	call	PL60	;call to abstracted procedure
 23184  004500  6A2B               	clrf	?_itoa+2,c
 23185  004502  6A2E               	clrf	?_itoa+5,c
 23186  004504  0E0A               	movlw	10
 23187  004506  6E2D               	movwf	?_itoa+4,c
 23188  004508  ECD9  F027         	call	_itoa	;wreg free
 23189                           
 23190                           ;main.c: 2361: putsUSART(wrkbuf);
 23191  00450C  0100               	movlb	0	; () banked
 23192  00450E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23193  004510  6E1B               	movwf	?_putsUSART+1,c
 23194  004512  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23195  004514  6E1A               	movwf	?_putsUSART,c
 23196  004516  ECE6  F025         	call	_putsUSART	;wreg free
 23197  00451A                     l1120:
 23198  00451A  A2AC               	btfss	4012,1,c	;volatile
 23199  00451C  D7FE               	goto	l1120
 23200                           
 23201                           ;main.c: 2363: WriteUSART('.');
 23202  00451E  0E2E               	movlw	46
 23203  004520  ECC4  F028         	call	_WriteUSART
 23204                           
 23205                           ;main.c: 2364: itoa(wrkbuf, 0, 10);
 23206  004524  D813               	call	PL60	;call to abstracted procedure
 23207  004526  6A2B               	clrf	?_itoa+2,c
 23208  004528  6A2E               	clrf	?_itoa+5,c
 23209  00452A  0E0A               	movlw	10
 23210  00452C  6E2D               	movwf	?_itoa+4,c
 23211  00452E  ECD9  F027         	call	_itoa	;wreg free
 23212                           
 23213                           ;main.c: 2365: putsUSART(wrkbuf);
 23214  004532  0100               	movlb	0	; () banked
 23215  004534  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23216  004536  6E1B               	movwf	?_putsUSART+1,c
 23217  004538  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23218  00453A  6E1A               	movwf	?_putsUSART,c
 23219  00453C  ECE6  F025         	call	_putsUSART	;wreg free
 23220                           
 23221                           ;main.c: 2366: putsUSART((char *) "\r\n");
 23222  004540  0E74               	movlw	high (STR_188+50)
 23223  004542  6E1B               	movwf	?_putsUSART+1,c
 23224  004544  0EAE               	movlw	low (STR_188+50)
 23225  004546  6E1A               	movwf	?_putsUSART,c
 23226  004548  EFE6  F025         	goto	_putsUSART	;wreg free
 23227  00454C                     __end_of_printFirmwareVersion:
 23228                           	opt stack 0
 23229  00454C                     PL60:
 23230                           	opt stack 24
 23231  00454C  0100               	movlb	0	; () banked
 23232  00454E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23233  004550  6E2A               	movwf	?_itoa+1,c
 23234  004552  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23235  004554  6E29               	movwf	?_itoa,c
 23236  004556  6A2C               	clrf	?_itoa+3,c
 23237  004558  0012               	return	
 23238  00455A                     __end_ofPL60:
 23239                           	opt stack 0
 23240                           tblptru	equ	0xFF8
 23241                           tblptrh	equ	0xFF7
 23242                           tblptrl	equ	0xFF6
 23243                           tablat	equ	0xFF5
 23244                           prodh	equ	0xFF4
 23245                           prodl	equ	0xFF3
 23246                           intcon	equ	0xFF2
 23247                           indf0	equ	0xFEF
 23248                           postinc0	equ	0xFEE
 23249                           fsr0h	equ	0xFEA
 23250                           fsr0l	equ	0xFE9
 23251                           wreg	equ	0xFE8
 23252                           indf1	equ	0xFE7
 23253                           postinc1	equ	0xFE6
 23254                           postdec1	equ	0xFE5
 23255                           fsr1h	equ	0xFE2
 23256                           fsr1l	equ	0xFE1
 23257                           indf2	equ	0xFDF
 23258                           postinc2	equ	0xFDE
 23259                           postdec2	equ	0xFDD
 23260                           plusw2	equ	0xFDB
 23261                           fsr2h	equ	0xFDA
 23262                           fsr2l	equ	0xFD9
 23263                           status	equ	0xFD8
 23264                           
 23265 ;; *************** function _itoa *****************
 23266 ;; Defined at:
 23267 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23268 ;; Parameters:    Size  Location     Type
 23269 ;;  buf             2   40[COMRAM] PTR unsigned char 
 23270 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23271 ;;  val             2   42[COMRAM] int 
 23272 ;;  base            2   44[COMRAM] int 
 23273 ;; Auto vars:     Size  Location     Type
 23274 ;;  cp              2    0        PTR unsigned char 
 23275 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23276 ;; Return value:  Size  Location     Type
 23277 ;;                  2   40[COMRAM] PTR unsigned char 
 23278 ;; Registers used:
 23279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23280 ;; Tracked objects:
 23281 ;;		On entry : F/0
 23282 ;;		On exit  : 0/0
 23283 ;;		Unchanged: 0/0
 23284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23285 ;;      Params:         6       0       0       0       0       0       0
 23286 ;;      Locals:         2       0       0       0       0       0       0
 23287 ;;      Temps:          0       0       0       0       0       0       0
 23288 ;;      Totals:         8       0       0       0       0       0       0
 23289 ;;Total ram usage:        8 bytes
 23290 ;; Hardware stack levels used:    1
 23291 ;; Hardware stack levels required when called:    4
 23292 ;; This function calls:
 23293 ;;		_utoa
 23294 ;; This function is called by:
 23295 ;;		_receivePrintEventSLCAN
 23296 ;;		_findNodes
 23297 ;;		_printGUID
 23298 ;;		_printNodeFirmwareVersion
 23299 ;;		_printFirmwareVersion
 23300 ;; This function uses a non-reentrant model
 23301 ;;
 23302                           
 23303                           	psect	text62
 23304  004FB2                     __ptext62:
 23305                           	opt stack 0
 23306  004FB2                     _itoa:
 23307                           	opt stack 24
 23308                           
 23309                           ; BSR set to: 0
 23310                           
 23311                           ;incstack = 0
 23312                           ;incstack = 0
 23313  004FB2  AE2C               	btfss	itoa@val+1,7,c
 23314  004FB4  D00C               	goto	l11954
 23315                           
 23316                           ; BSR set to: 0
 23317  004FB6  C029  FFD9         	movff	itoa@buf,fsr2l
 23318  004FBA  C02A  FFDA         	movff	itoa@buf+1,fsr2h
 23319  004FBE  0E2D               	movlw	45
 23320  004FC0  6EDF               	movwf	indf2,c
 23321                           
 23322                           ; BSR set to: 0
 23323  004FC2  4A29               	infsnz	itoa@buf,f,c
 23324  004FC4  2A2A               	incf	itoa@buf+1,f,c
 23325                           
 23326                           ; BSR set to: 0
 23327  004FC6  6C2B               	negf	itoa@val,c
 23328  004FC8  1E2C               	comf	itoa@val+1,f,c
 23329  004FCA  B0D8               	btfsc	status,0,c
 23330  004FCC  2A2C               	incf	itoa@val+1,f,c
 23331  004FCE                     l11954:
 23332                           
 23333                           ; BSR set to: 0
 23334  004FCE  C029  F020         	movff	itoa@buf,?_utoa
 23335  004FD2  C02A  F021         	movff	itoa@buf+1,?_utoa+1
 23336  004FD6  C02B  F022         	movff	itoa@val,?_utoa+2
 23337  004FDA  C02C  F023         	movff	itoa@val+1,?_utoa+3
 23338  004FDE  C02D  F024         	movff	itoa@base,?_utoa+4
 23339  004FE2  C02E  F025         	movff	itoa@base+1,?_utoa+5
 23340  004FE6  EF35  F021         	goto	_utoa	;wreg free
 23341  004FEA                     __end_of_itoa:
 23342                           	opt stack 0
 23343                           tblptru	equ	0xFF8
 23344                           tblptrh	equ	0xFF7
 23345                           tblptrl	equ	0xFF6
 23346                           tablat	equ	0xFF5
 23347                           prodh	equ	0xFF4
 23348                           prodl	equ	0xFF3
 23349                           intcon	equ	0xFF2
 23350                           indf0	equ	0xFEF
 23351                           postinc0	equ	0xFEE
 23352                           fsr0h	equ	0xFEA
 23353                           fsr0l	equ	0xFE9
 23354                           wreg	equ	0xFE8
 23355                           indf1	equ	0xFE7
 23356                           postinc1	equ	0xFE6
 23357                           postdec1	equ	0xFE5
 23358                           fsr1h	equ	0xFE2
 23359                           fsr1l	equ	0xFE1
 23360                           indf2	equ	0xFDF
 23361                           postinc2	equ	0xFDE
 23362                           postdec2	equ	0xFDD
 23363                           plusw2	equ	0xFDB
 23364                           fsr2h	equ	0xFDA
 23365                           fsr2l	equ	0xFD9
 23366                           status	equ	0xFD8
 23367                           
 23368 ;; *************** function _utoa *****************
 23369 ;; Defined at:
 23370 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23371 ;; Parameters:    Size  Location     Type
 23372 ;;  buf             2   31[COMRAM] PTR unsigned char 
 23373 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23374 ;;  val             2   33[COMRAM] unsigned int 
 23375 ;;  base            2   35[COMRAM] int 
 23376 ;; Auto vars:     Size  Location     Type
 23377 ;;  v               2   37[COMRAM] unsigned int 
 23378 ;;  c               1   39[COMRAM] unsigned char 
 23379 ;; Return value:  Size  Location     Type
 23380 ;;                  2   31[COMRAM] PTR unsigned char 
 23381 ;; Registers used:
 23382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23383 ;; Tracked objects:
 23384 ;;		On entry : F/0
 23385 ;;		On exit  : 0/0
 23386 ;;		Unchanged: 0/0
 23387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23388 ;;      Params:         6       0       0       0       0       0       0
 23389 ;;      Locals:         3       0       0       0       0       0       0
 23390 ;;      Temps:          0       0       0       0       0       0       0
 23391 ;;      Totals:         9       0       0       0       0       0       0
 23392 ;;Total ram usage:        9 bytes
 23393 ;; Hardware stack levels used:    1
 23394 ;; Hardware stack levels required when called:    3
 23395 ;; This function calls:
 23396 ;;		___lwdiv
 23397 ;;		___lwmod
 23398 ;; This function is called by:
 23399 ;;		_itoa
 23400 ;; This function uses a non-reentrant model
 23401 ;;
 23402                           
 23403                           	psect	text63
 23404  00426A                     __ptext63:
 23405                           	opt stack 0
 23406  00426A                     _utoa:
 23407                           	opt stack 24
 23408                           
 23409                           ; BSR set to: 0
 23410                           
 23411                           ;incstack = 0
 23412                           ;incstack = 0
 23413  00426A  C022  F026         	movff	utoa@val,utoa@v
 23414  00426E  C023  F027         	movff	utoa@val+1,utoa@v+1
 23415  004272                     l12306:
 23416  004272  C026  F019         	movff	utoa@v,?___lwdiv
 23417  004276  C027  F01A         	movff	utoa@v+1,?___lwdiv+1
 23418  00427A  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23419  00427E  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23420  004282  EC37  F026         	call	___lwdiv	;wreg free
 23421  004286  C019  F026         	movff	?___lwdiv,utoa@v
 23422  00428A  C01A  F027         	movff	?___lwdiv+1,utoa@v+1
 23423  00428E  4A20               	infsnz	utoa@buf,f,c
 23424  004290  2A21               	incf	utoa@buf+1,f,c
 23425  004292  5027               	movf	utoa@v+1,w,c
 23426  004294  1026               	iorwf	utoa@v,w,c
 23427  004296  E1ED               	bnz	l12306
 23428  004298  C020  FFD9         	movff	utoa@buf,fsr2l
 23429  00429C  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23430  0042A0  0E00               	movlw	0
 23431  0042A2  6ADF               	clrf	indf2,c
 23432  0042A4  0620               	decf	utoa@buf,f,c
 23433  0042A6  A0D8               	btfss	status,0,c
 23434  0042A8  0621               	decf	utoa@buf+1,f,c
 23435  0042AA                     l12316:
 23436  0042AA  C022  F019         	movff	utoa@val,?___lwmod
 23437  0042AE  C023  F01A         	movff	utoa@val+1,?___lwmod+1
 23438  0042B2  C024  F01B         	movff	utoa@base,?___lwmod+2
 23439  0042B6  C025  F01C         	movff	utoa@base+1,?___lwmod+3
 23440  0042BA  EC63  F027         	call	___lwmod	;wreg free
 23441  0042BE  5019               	movf	?___lwmod,w,c
 23442  0042C0  6E28               	movwf	utoa@c,c
 23443  0042C2  C022  F019         	movff	utoa@val,?___lwdiv
 23444  0042C6  C023  F01A         	movff	utoa@val+1,?___lwdiv+1
 23445  0042CA  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23446  0042CE  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23447  0042D2  EC37  F026         	call	___lwdiv	;wreg free
 23448  0042D6  C019  F022         	movff	?___lwdiv,utoa@val
 23449  0042DA  C01A  F023         	movff	?___lwdiv+1,utoa@val+1
 23450  0042DE  0E09               	movlw	9
 23451  0042E0  6428               	cpfsgt	utoa@c,c
 23452  0042E2  D002               	goto	l2194
 23453  0042E4  0E07               	movlw	7
 23454  0042E6  2628               	addwf	utoa@c,f,c
 23455  0042E8                     l2194:
 23456  0042E8  0E30               	movlw	48
 23457  0042EA  2628               	addwf	utoa@c,f,c
 23458  0042EC  C020  FFD9         	movff	utoa@buf,fsr2l
 23459  0042F0  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23460  0042F4  C028  FFDF         	movff	utoa@c,indf2
 23461  0042F8  0620               	decf	utoa@buf,f,c
 23462  0042FA  A0D8               	btfss	status,0,c
 23463  0042FC  0621               	decf	utoa@buf+1,f,c
 23464  0042FE  5023               	movf	utoa@val+1,w,c
 23465  004300  1022               	iorwf	utoa@val,w,c
 23466  004302  E1D3               	bnz	l12316
 23467                           
 23468                           ;	Return value of _utoa is never used
 23469  004304  4A20               	infsnz	utoa@buf,f,c
 23470  004306  2A21               	incf	utoa@buf+1,f,c
 23471  004308  0012               	return	
 23472  00430A                     __end_of_utoa:
 23473                           	opt stack 0
 23474                           tblptru	equ	0xFF8
 23475                           tblptrh	equ	0xFF7
 23476                           tblptrl	equ	0xFF6
 23477                           tablat	equ	0xFF5
 23478                           prodh	equ	0xFF4
 23479                           prodl	equ	0xFF3
 23480                           intcon	equ	0xFF2
 23481                           indf0	equ	0xFEF
 23482                           postinc0	equ	0xFEE
 23483                           fsr0h	equ	0xFEA
 23484                           fsr0l	equ	0xFE9
 23485                           wreg	equ	0xFE8
 23486                           indf1	equ	0xFE7
 23487                           postinc1	equ	0xFE6
 23488                           postdec1	equ	0xFE5
 23489                           fsr1h	equ	0xFE2
 23490                           fsr1l	equ	0xFE1
 23491                           indf2	equ	0xFDF
 23492                           postinc2	equ	0xFDE
 23493                           postdec2	equ	0xFDD
 23494                           plusw2	equ	0xFDB
 23495                           fsr2h	equ	0xFDA
 23496                           fsr2l	equ	0xFD9
 23497                           status	equ	0xFD8
 23498                           
 23499 ;; *************** function ___lwmod *****************
 23500 ;; Defined at:
 23501 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 23502 ;; Parameters:    Size  Location     Type
 23503 ;;  dividend        2   24[COMRAM] unsigned int 
 23504 ;;  divisor         2   26[COMRAM] unsigned int 
 23505 ;; Auto vars:     Size  Location     Type
 23506 ;;  counter         1   28[COMRAM] unsigned char 
 23507 ;; Return value:  Size  Location     Type
 23508 ;;                  2   24[COMRAM] unsigned int 
 23509 ;; Registers used:
 23510 ;;		wreg, status,2, status,0
 23511 ;; Tracked objects:
 23512 ;;		On entry : 0/0
 23513 ;;		On exit  : 0/0
 23514 ;;		Unchanged: 0/0
 23515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23516 ;;      Params:         4       0       0       0       0       0       0
 23517 ;;      Locals:         1       0       0       0       0       0       0
 23518 ;;      Temps:          0       0       0       0       0       0       0
 23519 ;;      Totals:         5       0       0       0       0       0       0
 23520 ;;Total ram usage:        5 bytes
 23521 ;; Hardware stack levels used:    1
 23522 ;; Hardware stack levels required when called:    2
 23523 ;; This function calls:
 23524 ;;		Nothing
 23525 ;; This function is called by:
 23526 ;;		_utoa
 23527 ;; This function uses a non-reentrant model
 23528 ;;
 23529                           
 23530                           	psect	text64
 23531  004EC6                     __ptext64:
 23532                           	opt stack 0
 23533  004EC6                     ___lwmod:
 23534                           	opt stack 24
 23535                           
 23536                           ;incstack = 0
 23537                           ;incstack = 0
 23538  004EC6  501C               	movf	___lwmod@divisor+1,w,c
 23539  004EC8  101B               	iorwf	___lwmod@divisor,w,c
 23540  004ECA  E017               	bz	l2318
 23541  004ECC  0E01               	movlw	1
 23542  004ECE  6E1D               	movwf	___lwmod@counter,c
 23543  004ED0  D004               	goto	l12400
 23544  004ED2                     l12398:
 23545  004ED2  90D8               	bcf	status,0,c
 23546  004ED4  361B               	rlcf	___lwmod@divisor,f,c
 23547  004ED6  361C               	rlcf	___lwmod@divisor+1,f,c
 23548  004ED8  2A1D               	incf	___lwmod@counter,f,c
 23549  004EDA                     l12400:
 23550  004EDA  AE1C               	btfss	___lwmod@divisor+1,7,c
 23551  004EDC  D7FA               	goto	l12398
 23552  004EDE                     l12402:
 23553  004EDE  501B               	movf	___lwmod@divisor,w,c
 23554  004EE0  5C19               	subwf	___lwmod@dividend,w,c
 23555  004EE2  501C               	movf	___lwmod@divisor+1,w,c
 23556  004EE4  581A               	subwfb	___lwmod@dividend+1,w,c
 23557  004EE6  E304               	bnc	l12406
 23558  004EE8  501B               	movf	___lwmod@divisor,w,c
 23559  004EEA  5E19               	subwf	___lwmod@dividend,f,c
 23560  004EEC  501C               	movf	___lwmod@divisor+1,w,c
 23561  004EEE  5A1A               	subwfb	___lwmod@dividend+1,f,c
 23562  004EF0                     l12406:
 23563  004EF0  90D8               	bcf	status,0,c
 23564  004EF2  321C               	rrcf	___lwmod@divisor+1,f,c
 23565  004EF4  321B               	rrcf	___lwmod@divisor,f,c
 23566  004EF6  2E1D               	decfsz	___lwmod@counter,f,c
 23567  004EF8  D7F2               	goto	l12402
 23568  004EFA                     l2318:
 23569  004EFA  C019  F019         	movff	___lwmod@dividend,?___lwmod
 23570  004EFE  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
 23571  004F02  0012               	return	
 23572  004F04                     __end_of___lwmod:
 23573                           	opt stack 0
 23574                           tblptru	equ	0xFF8
 23575                           tblptrh	equ	0xFF7
 23576                           tblptrl	equ	0xFF6
 23577                           tablat	equ	0xFF5
 23578                           prodh	equ	0xFF4
 23579                           prodl	equ	0xFF3
 23580                           intcon	equ	0xFF2
 23581                           indf0	equ	0xFEF
 23582                           postinc0	equ	0xFEE
 23583                           fsr0h	equ	0xFEA
 23584                           fsr0l	equ	0xFE9
 23585                           wreg	equ	0xFE8
 23586                           indf1	equ	0xFE7
 23587                           postinc1	equ	0xFE6
 23588                           postdec1	equ	0xFE5
 23589                           fsr1h	equ	0xFE2
 23590                           fsr1l	equ	0xFE1
 23591                           indf2	equ	0xFDF
 23592                           postinc2	equ	0xFDE
 23593                           postdec2	equ	0xFDD
 23594                           plusw2	equ	0xFDB
 23595                           fsr2h	equ	0xFDA
 23596                           fsr2l	equ	0xFD9
 23597                           status	equ	0xFD8
 23598                           
 23599 ;; *************** function ___lwdiv *****************
 23600 ;; Defined at:
 23601 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 23602 ;; Parameters:    Size  Location     Type
 23603 ;;  dividend        2   24[COMRAM] unsigned int 
 23604 ;;  divisor         2   26[COMRAM] unsigned int 
 23605 ;; Auto vars:     Size  Location     Type
 23606 ;;  quotient        2   29[COMRAM] unsigned int 
 23607 ;;  counter         1   28[COMRAM] unsigned char 
 23608 ;; Return value:  Size  Location     Type
 23609 ;;                  2   24[COMRAM] unsigned int 
 23610 ;; Registers used:
 23611 ;;		wreg, status,2, status,0
 23612 ;; Tracked objects:
 23613 ;;		On entry : 0/0
 23614 ;;		On exit  : 0/0
 23615 ;;		Unchanged: 0/0
 23616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23617 ;;      Params:         4       0       0       0       0       0       0
 23618 ;;      Locals:         3       0       0       0       0       0       0
 23619 ;;      Temps:          0       0       0       0       0       0       0
 23620 ;;      Totals:         7       0       0       0       0       0       0
 23621 ;;Total ram usage:        7 bytes
 23622 ;; Hardware stack levels used:    1
 23623 ;; Hardware stack levels required when called:    2
 23624 ;; This function calls:
 23625 ;;		Nothing
 23626 ;; This function is called by:
 23627 ;;		_utoa
 23628 ;; This function uses a non-reentrant model
 23629 ;;
 23630                           
 23631                           	psect	text65
 23632  004C6E                     __ptext65:
 23633                           	opt stack 0
 23634  004C6E                     ___lwdiv:
 23635                           	opt stack 24
 23636                           
 23637                           ;incstack = 0
 23638                           ;incstack = 0
 23639  004C6E  6A1E               	clrf	___lwdiv@quotient,c
 23640  004C70  6A1F               	clrf	___lwdiv@quotient+1,c
 23641  004C72  501C               	movf	___lwdiv@divisor+1,w,c
 23642  004C74  101B               	iorwf	___lwdiv@divisor,w,c
 23643  004C76  E01B               	bz	l2308
 23644  004C78  0E01               	movlw	1
 23645  004C7A  6E1D               	movwf	___lwdiv@counter,c
 23646  004C7C  D004               	goto	l12380
 23647  004C7E                     l12378:
 23648  004C7E  90D8               	bcf	status,0,c
 23649  004C80  361B               	rlcf	___lwdiv@divisor,f,c
 23650  004C82  361C               	rlcf	___lwdiv@divisor+1,f,c
 23651  004C84  2A1D               	incf	___lwdiv@counter,f,c
 23652  004C86                     l12380:
 23653  004C86  AE1C               	btfss	___lwdiv@divisor+1,7,c
 23654  004C88  D7FA               	goto	l12378
 23655  004C8A                     l12382:
 23656  004C8A  90D8               	bcf	status,0,c
 23657  004C8C  361E               	rlcf	___lwdiv@quotient,f,c
 23658  004C8E  361F               	rlcf	___lwdiv@quotient+1,f,c
 23659  004C90  501B               	movf	___lwdiv@divisor,w,c
 23660  004C92  5C19               	subwf	___lwdiv@dividend,w,c
 23661  004C94  501C               	movf	___lwdiv@divisor+1,w,c
 23662  004C96  581A               	subwfb	___lwdiv@dividend+1,w,c
 23663  004C98  E305               	bnc	l12390
 23664  004C9A  501B               	movf	___lwdiv@divisor,w,c
 23665  004C9C  5E19               	subwf	___lwdiv@dividend,f,c
 23666  004C9E  501C               	movf	___lwdiv@divisor+1,w,c
 23667  004CA0  5A1A               	subwfb	___lwdiv@dividend+1,f,c
 23668  004CA2  801E               	bsf	___lwdiv@quotient,0,c
 23669  004CA4                     l12390:
 23670  004CA4  90D8               	bcf	status,0,c
 23671  004CA6  321C               	rrcf	___lwdiv@divisor+1,f,c
 23672  004CA8  321B               	rrcf	___lwdiv@divisor,f,c
 23673  004CAA  2E1D               	decfsz	___lwdiv@counter,f,c
 23674  004CAC  D7EE               	goto	l12382
 23675  004CAE                     l2308:
 23676  004CAE  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
 23677  004CB2  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23678  004CB6  0012               	return	
 23679  004CB8                     __end_of___lwdiv:
 23680                           	opt stack 0
 23681                           tblptru	equ	0xFF8
 23682                           tblptrh	equ	0xFF7
 23683                           tblptrl	equ	0xFF6
 23684                           tablat	equ	0xFF5
 23685                           prodh	equ	0xFF4
 23686                           prodl	equ	0xFF3
 23687                           intcon	equ	0xFF2
 23688                           indf0	equ	0xFEF
 23689                           postinc0	equ	0xFEE
 23690                           fsr0h	equ	0xFEA
 23691                           fsr0l	equ	0xFE9
 23692                           wreg	equ	0xFE8
 23693                           indf1	equ	0xFE7
 23694                           postinc1	equ	0xFE6
 23695                           postdec1	equ	0xFE5
 23696                           fsr1h	equ	0xFE2
 23697                           fsr1l	equ	0xFE1
 23698                           indf2	equ	0xFDF
 23699                           postinc2	equ	0xFDE
 23700                           postdec2	equ	0xFDD
 23701                           plusw2	equ	0xFDB
 23702                           fsr2h	equ	0xFDA
 23703                           fsr2l	equ	0xFD9
 23704                           status	equ	0xFD8
 23705                           
 23706 ;; *************** function _printMode *****************
 23707 ;; Defined at:
 23708 ;;		line 2373 in file "main.c"
 23709 ;; Parameters:    Size  Location     Type
 23710 ;;		None
 23711 ;; Auto vars:     Size  Location     Type
 23712 ;;		None
 23713 ;; Return value:  Size  Location     Type
 23714 ;;		None               void
 23715 ;; Registers used:
 23716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23717 ;; Tracked objects:
 23718 ;;		On entry : 0/0
 23719 ;;		On exit  : 0/0
 23720 ;;		Unchanged: 0/0
 23721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23722 ;;      Params:         0       0       0       0       0       0       0
 23723 ;;      Locals:         0       0       0       0       0       0       0
 23724 ;;      Temps:          0       0       0       0       0       0       0
 23725 ;;      Totals:         0       0       0       0       0       0       0
 23726 ;;Total ram usage:        0 bytes
 23727 ;; Hardware stack levels used:    1
 23728 ;; Hardware stack levels required when called:    4
 23729 ;; This function calls:
 23730 ;;		_putsUSART
 23731 ;; This function is called by:
 23732 ;;		_main
 23733 ;; This function uses a non-reentrant model
 23734 ;;
 23735                           
 23736                           	psect	text66
 23737  00484E                     __ptext66:
 23738                           	opt stack 0
 23739  00484E                     _printMode:
 23740                           	opt stack 26
 23741                           
 23742                           ;main.c: 2374: putsUSART((char *) "Mode: ");
 23743                           
 23744                           ;incstack = 0
 23745                           ;incstack = 0
 23746  00484E  0E7F               	movlw	high STR_247
 23747  004850  6E1B               	movwf	?_putsUSART+1,c
 23748  004852  0E26               	movlw	low STR_247
 23749  004854  6E1A               	movwf	?_putsUSART,c
 23750  004856  ECE6  F025         	call	_putsUSART	;wreg free
 23751                           
 23752                           ;main.c: 2375: if (0 == mode) {
 23753  00485A  0100               	movlb	0	; () banked
 23754  00485C  67D7               	tstfsz	_mode& (0+255),b
 23755  00485E  D007               	goto	l9466
 23756                           
 23757                           ; BSR set to: 0
 23758                           ;main.c: 2376: putsUSART((char *) "Verbose");
 23759  004860  0E7F               	movlw	high STR_248
 23760  004862  6E1B               	movwf	?_putsUSART+1,c
 23761  004864  0E1E               	movlw	low STR_248
 23762  004866  6E1A               	movwf	?_putsUSART,c
 23763  004868  ECE6  F025         	call	_putsUSART	;wreg free
 23764                           
 23765                           ;main.c: 2377: } else if (1 == mode) {
 23766  00486C  D023               	goto	l1127
 23767  00486E                     l9466:
 23768                           
 23769                           ; BSR set to: 0
 23770  00486E  05D7               	decf	_mode& (0+255),w,b
 23771  004870  E107               	bnz	l9470
 23772                           
 23773                           ; BSR set to: 0
 23774                           ;main.c: 2378: putsUSART((char *) "VSCP Driver");
 23775  004872  0E7E               	movlw	high STR_249
 23776  004874  6E1B               	movwf	?_putsUSART+1,c
 23777  004876  0E7B               	movlw	low STR_249
 23778  004878  6E1A               	movwf	?_putsUSART,c
 23779  00487A  ECE6  F025         	call	_putsUSART	;wreg free
 23780                           
 23781                           ;main.c: 2379: } else if (2 == mode) {
 23782  00487E  D01A               	goto	l1127
 23783  004880                     l9470:
 23784                           
 23785                           ; BSR set to: 0
 23786  004880  51D7               	movf	_mode& (0+255),w,b
 23787  004882  0A02               	xorlw	2
 23788  004884  E107               	bnz	l9474
 23789                           
 23790                           ; BSR set to: 0
 23791                           ;main.c: 2380: putsUSART((char *) "SL Driver");
 23792  004886  0E7E               	movlw	high STR_250
 23793  004888  6E1B               	movwf	?_putsUSART+1,c
 23794  00488A  0EB1               	movlw	low STR_250
 23795  00488C  6E1A               	movwf	?_putsUSART,c
 23796  00488E  ECE6  F025         	call	_putsUSART	;wreg free
 23797                           
 23798                           ;main.c: 2381: } else if (3 == mode) {
 23799  004892  D010               	goto	l1127
 23800  004894                     l9474:
 23801                           
 23802                           ; BSR set to: 0
 23803  004894  51D7               	movf	_mode& (0+255),w,b
 23804  004896  0A03               	xorlw	3
 23805  004898  E107               	bnz	l9478
 23806                           
 23807                           ; BSR set to: 0
 23808                           ;main.c: 2382: putsUSART((char *) "VSCP Node");
 23809  00489A  0E7E               	movlw	high STR_251
 23810  00489C  6E1B               	movwf	?_putsUSART+1,c
 23811  00489E  0EA7               	movlw	low STR_251
 23812  0048A0  6E1A               	movwf	?_putsUSART,c
 23813  0048A2  ECE6  F025         	call	_putsUSART	;wreg free
 23814                           
 23815                           ;main.c: 2383: } else {
 23816  0048A6  D006               	goto	l1127
 23817  0048A8                     l9478:
 23818                           
 23819                           ; BSR set to: 0
 23820                           ;main.c: 2384: putsUSART((char *) "Unknown (Verbose used)");
 23821  0048A8  0E7C               	movlw	high STR_252
 23822  0048AA  6E1B               	movwf	?_putsUSART+1,c
 23823  0048AC  0EEF               	movlw	low STR_252
 23824  0048AE  6E1A               	movwf	?_putsUSART,c
 23825  0048B0  ECE6  F025         	call	_putsUSART	;wreg free
 23826  0048B4                     l1127:
 23827                           
 23828                           ;main.c: 2385: }
 23829                           ;main.c: 2386: putsUSART((char *) "\r\n");
 23830  0048B4  0E74               	movlw	high (STR_188+50)
 23831  0048B6  6E1B               	movwf	?_putsUSART+1,c
 23832  0048B8  0EAE               	movlw	low (STR_188+50)
 23833  0048BA  6E1A               	movwf	?_putsUSART,c
 23834  0048BC  EFE6  F025         	goto	_putsUSART	;wreg free
 23835  0048C0                     __end_of_printMode:
 23836                           	opt stack 0
 23837                           tblptru	equ	0xFF8
 23838                           tblptrh	equ	0xFF7
 23839                           tblptrl	equ	0xFF6
 23840                           tablat	equ	0xFF5
 23841                           prodh	equ	0xFF4
 23842                           prodl	equ	0xFF3
 23843                           intcon	equ	0xFF2
 23844                           indf0	equ	0xFEF
 23845                           postinc0	equ	0xFEE
 23846                           fsr0h	equ	0xFEA
 23847                           fsr0l	equ	0xFE9
 23848                           wreg	equ	0xFE8
 23849                           indf1	equ	0xFE7
 23850                           postinc1	equ	0xFE6
 23851                           postdec1	equ	0xFE5
 23852                           fsr1h	equ	0xFE2
 23853                           fsr1l	equ	0xFE1
 23854                           indf2	equ	0xFDF
 23855                           postinc2	equ	0xFDE
 23856                           postdec2	equ	0xFDD
 23857                           plusw2	equ	0xFDB
 23858                           fsr2h	equ	0xFDA
 23859                           fsr2l	equ	0xFD9
 23860                           status	equ	0xFD8
 23861                           
 23862 ;; *************** function _putsUSART *****************
 23863 ;; Defined at:
 23864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 23865 ;; Parameters:    Size  Location     Type
 23866 ;;  data            2   25[COMRAM] PTR unsigned char 
 23867 ;;		 -> STR_253(3), STR_252(23), STR_251(10), STR_250(10), 
 23868 ;;		 -> STR_249(12), STR_248(8), STR_247(7), STR_246(3), 
 23869 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_245(10), STR_244(3), STR_241(20), 
 23870 ;;		 -> STR_240(3), STR_239(14), STR_238(3), STR_234(8), 
 23871 ;;		 -> STR_233(15), STR_232(67), STR_231(3), STR_230(27), 
 23872 ;;		 -> STR_229(67), STR_228(39), STR_227(62), STR_226(55), 
 23873 ;;		 -> STR_225(49), STR_224(67), STR_223(47), STR_222(47), 
 23874 ;;		 -> STR_221(34), STR_220(71), STR_219(20), STR_218(78), 
 23875 ;;		 -> STR_217(24), STR_216(77), STR_215(67), STR_214(69), 
 23876 ;;		 -> STR_213(47), STR_212(40), STR_211(39), STR_210(33), 
 23877 ;;		 -> STR_209(23), STR_208(56), STR_207(24), STR_206(44), 
 23878 ;;		 -> STR_205(50), STR_204(31), STR_203(50), STR_202(51), 
 23879 ;;		 -> STR_201(46), STR_200(44), STR_199(27), STR_198(39), 
 23880 ;;		 -> STR_197(39), STR_196(52), STR_195(54), STR_194(55), 
 23881 ;;		 -> STR_193(3), STR_190(24), STR_189(57), STR_188(53), 
 23882 ;;		 -> STR_187(58), STR_186(3), STR_183(25), STR_182(3), 
 23883 ;;		 -> STR_179(24), STR_178(3), STR_175(24), STR_174(3), 
 23884 ;;		 -> STR_171(24), STR_170(3), STR_167(23), STR_166(3), 
 23885 ;;		 -> STR_163(21), STR_162(3), STR_159(22), STR_158(3), 
 23886 ;;		 -> STR_155(17), STR_154(3), STR_151(18), STR_150(4), 
 23887 ;;		 -> STR_149(11), STR_148(2), STR_145(7), STR_142(7), 
 23888 ;;		 -> STR_139(9), STR_136(7), STR_133(8), STR_130(7), 
 23889 ;;		 -> STR_129(2), STR_128(2), STR_127(6), STR_126(8), 
 23890 ;;		 -> STR_125(8), STR_124(20), STR_123(27), STR_122(33), 
 23891 ;;		 -> STR_119(26), STR_117(32), STR_115(28), STR_110(40), 
 23892 ;;		 -> STR_108(44), STR_105(39), STR_103(36), STR_101(37), 
 23893 ;;		 -> STR_99(40), STR_97(37), STR_96(50), STR_93(41), 
 23894 ;;		 -> STR_91(38), STR_89(39), STR_87(42), STR_85(39), 
 23895 ;;		 -> STR_84(66), STR_81(3), STR_78(20), STR_76(33), 
 23896 ;;		 -> STR_75(35), STR_74(24), STR_72(33), STR_70(24), 
 23897 ;;		 -> STR_67(54), STR_66(6), STR_65(3), STR_60(34), 
 23898 ;;		 -> STR_59(3), STR_56(4), wrkbuf(80), STR_51(15), 
 23899 ;;		 -> STR_49(33), STR_47(24), STR_43(6), STR_39(18), 
 23900 ;;		 -> STR_38(6), STR_36(33), STR_35(6), STR_27(24), 
 23901 ;;		 -> STR_26(18), STR_25(20), STR_24(25), STR_23(22), 
 23902 ;;		 -> STR_22(19), STR_21(20), STR_20(20), STR_18(6), 
 23903 ;;		 -> STR_16(6), STR_14(6), STR_12(6), STR_10(6), 
 23904 ;;		 -> STR_8(6), STR_6(31), STR_4(29), STR_3(55), 
 23905 ;;		 -> STR_2(53), STR_1(37), 
 23906 ;; Auto vars:     Size  Location     Type
 23907 ;;		None
 23908 ;; Return value:  Size  Location     Type
 23909 ;;		None               void
 23910 ;; Registers used:
 23911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23912 ;; Tracked objects:
 23913 ;;		On entry : 0/0
 23914 ;;		On exit  : 0/0
 23915 ;;		Unchanged: 0/0
 23916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23917 ;;      Params:         2       0       0       0       0       0       0
 23918 ;;      Locals:         0       0       0       0       0       0       0
 23919 ;;      Temps:          2       0       0       0       0       0       0
 23920 ;;      Totals:         4       0       0       0       0       0       0
 23921 ;;Total ram usage:        4 bytes
 23922 ;; Hardware stack levels used:    1
 23923 ;; Hardware stack levels required when called:    3
 23924 ;; This function calls:
 23925 ;;		_WriteUSART
 23926 ;; This function is called by:
 23927 ;;		_main
 23928 ;;		_doModeVerbose
 23929 ;;		_doModeSLCAN
 23930 ;;		_receivePrintEventVerbose
 23931 ;;		_receivePrintEventSLCAN
 23932 ;;		_printStatistics
 23933 ;;		_printErrors
 23934 ;;		_printHelp
 23935 ;;		_findNodes
 23936 ;;		_printGUID
 23937 ;;		_printMDF
 23938 ;;		_printNodeFirmwareVersion
 23939 ;;		_printFirmwareVersion
 23940 ;;		_printMode
 23941 ;; This function uses a non-reentrant model
 23942 ;;
 23943                           
 23944                           	psect	text67
 23945  004BCC                     __ptext67:
 23946                           	opt stack 0
 23947  004BCC                     _putsUSART:
 23948                           	opt stack 25
 23949  004BCC                     l1726:
 23950  004BCC  A2AC               	btfss	4012,1,c	;volatile
 23951  004BCE  D7FE               	goto	l1726
 23952  004BD0  501A               	movf	putsUSART@data,w,c
 23953  004BD2  6EF6               	movwf	tblptrl,c
 23954  004BD4  6EE9               	movwf	fsr0l,c
 23955  004BD6  0E05               	movlw	(high __ramtop+-1)
 23956  004BD8  6EEA               	movwf	fsr0h,c
 23957  004BDA  501B               	movf	putsUSART@data+1,w,c
 23958  004BDC  64EA               	cpfsgt	fsr0h,c
 23959  004BDE  D003               	bra	u11347
 23960  004BE0  6EEA               	movwf	fsr0h,c
 23961  004BE2  50EF               	movf	indf0,w,c
 23962  004BE4  D003               	bra	u11340
 23963  004BE6                     u11347:
 23964  004BE6  6EF7               	movwf	tblptrh,c
 23965  004BE8  0008               	tblrd		*
 23966  004BEA  50F5               	movf	tablat,w,c
 23967  004BEC                     u11340:
 23968  004BEC  ECC4  F028         	call	_WriteUSART
 23969  004BF0  501A               	movf	putsUSART@data,w,c
 23970  004BF2  6E1C               	movwf	??_putsUSART& (0+255),c
 23971  004BF4  501B               	movf	putsUSART@data+1,w,c
 23972  004BF6  6E1D               	movwf	(??_putsUSART+1)& (0+255),c
 23973  004BF8  4A1A               	infsnz	putsUSART@data,f,c
 23974  004BFA  2A1B               	incf	putsUSART@data+1,f,c
 23975  004BFC  501C               	movf	??_putsUSART,w,c
 23976  004BFE  6EF6               	movwf	tblptrl,c
 23977  004C00  6EE9               	movwf	fsr0l,c
 23978  004C02  0E05               	movlw	(high __ramtop+-1)
 23979  004C04  6EEA               	movwf	fsr0h,c
 23980  004C06  501D               	movf	??_putsUSART+1,w,c
 23981  004C08  64EA               	cpfsgt	fsr0h,c
 23982  004C0A  D003               	bra	u11357
 23983  004C0C  6EEA               	movwf	fsr0h,c
 23984  004C0E  50EF               	movf	indf0,w,c
 23985  004C10  D003               	bra	u11350
 23986  004C12                     u11357:
 23987  004C12  6EF7               	movwf	tblptrh,c
 23988  004C14  0008               	tblrd		*
 23989  004C16  50F5               	movf	tablat,w,c
 23990  004C18                     u11350:
 23991  004C18  0900               	iorlw	0
 23992  004C1A  B4D8               	btfsc	status,2,c
 23993  004C1C  0012               	return	
 23994  004C1E  D7D6               	goto	l1726
 23995  004C20                     __end_of_putsUSART:
 23996                           	opt stack 0
 23997                           tblptru	equ	0xFF8
 23998                           tblptrh	equ	0xFF7
 23999                           tblptrl	equ	0xFF6
 24000                           tablat	equ	0xFF5
 24001                           prodh	equ	0xFF4
 24002                           prodl	equ	0xFF3
 24003                           intcon	equ	0xFF2
 24004                           indf0	equ	0xFEF
 24005                           postinc0	equ	0xFEE
 24006                           fsr0h	equ	0xFEA
 24007                           fsr0l	equ	0xFE9
 24008                           wreg	equ	0xFE8
 24009                           indf1	equ	0xFE7
 24010                           postinc1	equ	0xFE6
 24011                           postdec1	equ	0xFE5
 24012                           fsr1h	equ	0xFE2
 24013                           fsr1l	equ	0xFE1
 24014                           indf2	equ	0xFDF
 24015                           postinc2	equ	0xFDE
 24016                           postdec2	equ	0xFDD
 24017                           plusw2	equ	0xFDB
 24018                           fsr2h	equ	0xFDA
 24019                           fsr2l	equ	0xFD9
 24020                           status	equ	0xFD8
 24021                           
 24022 ;; *************** function _WriteUSART *****************
 24023 ;; Defined at:
 24024 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24025 ;; Parameters:    Size  Location     Type
 24026 ;;  data            1    wreg     unsigned char 
 24027 ;; Auto vars:     Size  Location     Type
 24028 ;;  data            1   24[COMRAM] unsigned char 
 24029 ;; Return value:  Size  Location     Type
 24030 ;;		None               void
 24031 ;; Registers used:
 24032 ;;		wreg
 24033 ;; Tracked objects:
 24034 ;;		On entry : 0/1
 24035 ;;		On exit  : 0/0
 24036 ;;		Unchanged: 0/0
 24037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24038 ;;      Params:         0       0       0       0       0       0       0
 24039 ;;      Locals:         1       0       0       0       0       0       0
 24040 ;;      Temps:          0       0       0       0       0       0       0
 24041 ;;      Totals:         1       0       0       0       0       0       0
 24042 ;;Total ram usage:        1 bytes
 24043 ;; Hardware stack levels used:    1
 24044 ;; Hardware stack levels required when called:    2
 24045 ;; This function calls:
 24046 ;;		Nothing
 24047 ;; This function is called by:
 24048 ;;		_doModeVerbose
 24049 ;;		_sendEscapedUartData
 24050 ;;		_sendVSCPDriverErrorFrame
 24051 ;;		_sendVSCPDriverAck
 24052 ;;		_sendVSCPDriverNack
 24053 ;;		_sendVSCPDriverCommandReply
 24054 ;;		_receivePrintEventCANAL
 24055 ;;		_receivePrintEventSLCAN
 24056 ;;		_printBinary
 24057 ;;		_printFirmwareVersion
 24058 ;;		_putsUSART
 24059 ;; This function uses a non-reentrant model
 24060 ;;
 24061                           
 24062                           	psect	text68
 24063  005188                     __ptext68:
 24064                           	opt stack 0
 24065  005188                     _WriteUSART:
 24066                           	opt stack 26
 24067                           
 24068                           ;incstack = 0
 24069                           ;incstack = 0
 24070                           ;WriteUSART@data stored from wreg
 24071  005188  CFE8 F019          	movff	wreg,WriteUSART@data
 24072  00518C  ACAC               	btfss	4012,6,c	;volatile
 24073  00518E  D003               	goto	l11358
 24074  005190  90AC               	bcf	4012,0,c	;volatile
 24075  005192  B239               	btfsc	_USART_Status,1,c
 24076  005194  80AC               	bsf	4012,0,c	;volatile
 24077  005196                     l11358:
 24078  005196  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
 24079  00519A  0012               	return	
 24080  00519C                     __end_of_WriteUSART:
 24081                           	opt stack 0
 24082                           tblptru	equ	0xFF8
 24083                           tblptrh	equ	0xFF7
 24084                           tblptrl	equ	0xFF6
 24085                           tablat	equ	0xFF5
 24086                           prodh	equ	0xFF4
 24087                           prodl	equ	0xFF3
 24088                           intcon	equ	0xFF2
 24089                           indf0	equ	0xFEF
 24090                           postinc0	equ	0xFEE
 24091                           fsr0h	equ	0xFEA
 24092                           fsr0l	equ	0xFE9
 24093                           wreg	equ	0xFE8
 24094                           indf1	equ	0xFE7
 24095                           postinc1	equ	0xFE6
 24096                           postdec1	equ	0xFE5
 24097                           fsr1h	equ	0xFE2
 24098                           fsr1l	equ	0xFE1
 24099                           indf2	equ	0xFDF
 24100                           postinc2	equ	0xFDE
 24101                           postdec2	equ	0xFDD
 24102                           plusw2	equ	0xFDB
 24103                           fsr2h	equ	0xFDA
 24104                           fsr2l	equ	0xFD9
 24105                           status	equ	0xFD8
 24106                           
 24107 ;; *************** function _init *****************
 24108 ;; Defined at:
 24109 ;;		line 300 in file "main.c"
 24110 ;; Parameters:    Size  Location     Type
 24111 ;;		None
 24112 ;; Auto vars:     Size  Location     Type
 24113 ;;		None
 24114 ;; Return value:  Size  Location     Type
 24115 ;;		None               void
 24116 ;; Registers used:
 24117 ;;		wreg, status,2, status,0, cstack
 24118 ;; Tracked objects:
 24119 ;;		On entry : 0/0
 24120 ;;		On exit  : 0/0
 24121 ;;		Unchanged: 0/0
 24122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24123 ;;      Params:         0       0       0       0       0       0       0
 24124 ;;      Locals:         0       0       0       0       0       0       0
 24125 ;;      Temps:          0       0       0       0       0       0       0
 24126 ;;      Totals:         0       0       0       0       0       0       0
 24127 ;;Total ram usage:        0 bytes
 24128 ;; Hardware stack levels used:    1
 24129 ;; Hardware stack levels required when called:    4
 24130 ;; This function calls:
 24131 ;;		_WriteTimer0
 24132 ;;		_init_app_ram
 24133 ;;		_OpenUSART
 24134 ;;		_OpenTimer0
 24135 ;;		_ECANInitialize
 24136 ;; This function is called by:
 24137 ;;		_main
 24138 ;; This function uses a non-reentrant model
 24139 ;;
 24140                           
 24141                           	psect	text69
 24142  004D86                     __ptext69:
 24143                           	opt stack 0
 24144  004D86                     _init:
 24145                           	opt stack 26
 24146                           
 24147                           ;main.c: 303: init_app_ram();
 24148                           
 24149                           ;incstack = 0
 24150                           ;incstack = 0
 24151  004D86  EC10  F026         	call	_init_app_ram	;wreg free
 24152                           
 24153                           ; BSR set to: 0
 24154                           ;main.c: 306: OSCCONbits.IRCF0 = 1;
 24155  004D8A  88D3               	bsf	4051,4,c	;volatile
 24156                           
 24157                           ; BSR set to: 0
 24158                           ;main.c: 307: OSCCONbits.IRCF1 = 1;
 24159  004D8C  8AD3               	bsf	4051,5,c	;volatile
 24160                           
 24161                           ; BSR set to: 0
 24162                           ;main.c: 308: OSCCONbits.IRCF2 = 1;
 24163  004D8E  8CD3               	bsf	4051,6,c	;volatile
 24164                           
 24165                           ; BSR set to: 0
 24166                           ;main.c: 309: OSCTUNEbits.PLLEN = 1;
 24167  004D90  8C9B               	bsf	3995,6,c	;volatile
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;main.c: 311: TRISBbits.RB2 = 0;
 24171  004D92  9493               	bcf	3987,2,c	;volatile
 24172                           
 24173                           ; BSR set to: 0
 24174                           ;main.c: 312: TRISBbits.RB3 = 1;
 24175  004D94  8693               	bsf	3987,3,c	;volatile
 24176                           
 24177                           ; BSR set to: 0
 24178                           ;main.c: 314: TRISCbits.RC1 = 0;
 24179  004D96  9294               	bcf	3988,1,c	;volatile
 24180                           
 24181                           ; BSR set to: 0
 24182                           ;main.c: 315: TRISCbits.RC6 = 0;
 24183  004D98  9C94               	bcf	3988,6,c	;volatile
 24184                           
 24185                           ; BSR set to: 0
 24186                           ;main.c: 316: TRISCbits.RC7 = 1;
 24187  004D9A  8E94               	bsf	3988,7,c	;volatile
 24188                           
 24189                           ;main.c: 320: OpenUSART(0b01111111 &
 24190                           ;main.c: 321: 0b11111111 &
 24191                           ;main.c: 322: 0b11111110 &
 24192                           ;main.c: 323: 0b11111101 &
 24193                           ;main.c: 324: 0b11111111,
 24194                           ;main.c: 325: 21);
 24195  004D9C  6A1A               	clrf	?_OpenUSART+1,c
 24196  004D9E  0E15               	movlw	21
 24197  004DA0  6E19               	movwf	?_OpenUSART,c
 24198  004DA2  0E7C               	movlw	124
 24199  004DA4  EC8D  F025         	call	_OpenUSART
 24200                           
 24201                           ; BSR set to: 0
 24202                           ;main.c: 327: RCIF = 0;
 24203  004DA8  9A9E               	bcf	3998,5,c	;volatile
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;main.c: 328: RCIP = 0;
 24207  004DAA  9A9F               	bcf	3999,5,c	;volatile
 24208                           
 24209                           ; BSR set to: 0
 24210                           ;main.c: 329: RCIE = 1;
 24211  004DAC  8A9D               	bsf	3997,5,c	;volatile
 24212                           
 24213                           ; BSR set to: 0
 24214                           ;main.c: 330: PEIE = 1;
 24215  004DAE  8CF2               	bsf	intcon,6,c	;volatile
 24216                           
 24217                           ; BSR set to: 0
 24218                           ;main.c: 333: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 24219  004DB0  0E92               	movlw	146
 24220  004DB2  EC8F  F028         	call	_OpenTimer0
 24221                           
 24222                           ; BSR set to: 0
 24223                           ;main.c: 334: WriteTimer0(0xfb1d);
 24224  004DB6  0EFB               	movlw	251
 24225  004DB8  6E1A               	movwf	?_WriteTimer0+1,c
 24226  004DBA  0E1D               	movlw	29
 24227  004DBC  6E19               	movwf	?_WriteTimer0,c
 24228  004DBE  ECCE  F028         	call	_WriteTimer0	;wreg free
 24229                           
 24230                           ;main.c: 337: ECANInitialize();
 24231  004DC2  EC34  F023         	call	_ECANInitialize	;wreg free
 24232                           
 24233                           ;main.c: 360: (INTCONbits.GIE = 1);
 24234  004DC6  8EF2               	bsf	intcon,7,c	;volatile
 24235  004DC8  0012               	return	
 24236  004DCA                     __end_of_init:
 24237                           	opt stack 0
 24238                           tblptru	equ	0xFF8
 24239                           tblptrh	equ	0xFF7
 24240                           tblptrl	equ	0xFF6
 24241                           tablat	equ	0xFF5
 24242                           prodh	equ	0xFF4
 24243                           prodl	equ	0xFF3
 24244                           intcon	equ	0xFF2
 24245                           indf0	equ	0xFEF
 24246                           postinc0	equ	0xFEE
 24247                           fsr0h	equ	0xFEA
 24248                           fsr0l	equ	0xFE9
 24249                           wreg	equ	0xFE8
 24250                           indf1	equ	0xFE7
 24251                           postinc1	equ	0xFE6
 24252                           postdec1	equ	0xFE5
 24253                           fsr1h	equ	0xFE2
 24254                           fsr1l	equ	0xFE1
 24255                           indf2	equ	0xFDF
 24256                           postinc2	equ	0xFDE
 24257                           postdec2	equ	0xFDD
 24258                           plusw2	equ	0xFDB
 24259                           fsr2h	equ	0xFDA
 24260                           fsr2l	equ	0xFD9
 24261                           status	equ	0xFD8
 24262                           
 24263 ;; *************** function _ECANInitialize *****************
 24264 ;; Defined at:
 24265 ;;		line 168 in file "ECAN.c"
 24266 ;; Parameters:    Size  Location     Type
 24267 ;;		None
 24268 ;; Auto vars:     Size  Location     Type
 24269 ;;		None
 24270 ;; Return value:  Size  Location     Type
 24271 ;;		None               void
 24272 ;; Registers used:
 24273 ;;		wreg, status,2, status,0, cstack
 24274 ;; Tracked objects:
 24275 ;;		On entry : F/0
 24276 ;;		On exit  : 0/0
 24277 ;;		Unchanged: 0/0
 24278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24279 ;;      Params:         0       0       0       0       0       0       0
 24280 ;;      Locals:         0       0       0       0       0       0       0
 24281 ;;      Temps:          0       0       0       0       0       0       0
 24282 ;;      Totals:         0       0       0       0       0       0       0
 24283 ;;Total ram usage:        0 bytes
 24284 ;; Hardware stack levels used:    1
 24285 ;; Hardware stack levels required when called:    3
 24286 ;; This function calls:
 24287 ;;		_ECANSetOperationMode
 24288 ;; This function is called by:
 24289 ;;		_init
 24290 ;; This function uses a non-reentrant model
 24291 ;;
 24292                           
 24293                           	psect	text70
 24294  004668                     __ptext70:
 24295                           	opt stack 0
 24296  004668                     _ECANInitialize:
 24297                           	opt stack 26
 24298                           
 24299                           ; BSR set to: 0
 24300                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24301                           
 24302                           ;incstack = 0
 24303                           ;incstack = 0
 24304  004668  0E80               	movlw	128
 24305  00466A  ECAD  F028         	call	_ECANSetOperationMode
 24306                           
 24307                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24308  00466E  0E09               	movlw	9
 24309  004670  6E70               	movwf	3952,c	;volatile
 24310                           
 24311                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24312  004672  0EFC               	movlw	252
 24313  004674  6E71               	movwf	3953,c	;volatile
 24314                           
 24315                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24316                           ;ECAN.c: 181: (0 << 6) |
 24317                           ;ECAN.c: 182: (2-1);
 24318  004676  0E01               	movlw	1
 24319  004678  6E72               	movwf	3954,c	;volatile
 24320                           
 24321                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24322  00467A  0E20               	movlw	32
 24323  00467C  6E73               	movwf	3955,c	;volatile
 24324                           
 24325                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24326  00467E  8E77               	bsf	3959,7,c	;volatile
 24327                           
 24328                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24329  004680  9C77               	bcf	3959,6,c	;volatile
 24330                           
 24331                           ;ECAN.c: 205: RXB0CON = 0;
 24332  004682  6A60               	clrf	3936,c	;volatile
 24333                           
 24334                           ;ECAN.c: 211: RXB1CON = 0;
 24335  004684  010F               	movlb	15	; () banked
 24336  004686  6B50               	clrf	80,b	;volatile
 24337                           
 24338                           ; BSR set to: 15
 24339                           ;ECAN.c: 221: B0CON = 0;
 24340  004688  010E               	movlb	14	; () banked
 24341  00468A  6B20               	clrf	32,b	;volatile
 24342                           
 24343                           ; BSR set to: 14
 24344                           ;ECAN.c: 231: B1CON = 0;
 24345  00468C  6B30               	clrf	48,b	;volatile
 24346                           
 24347                           ; BSR set to: 14
 24348                           ;ECAN.c: 241: B2CON = 0;
 24349  00468E  6B40               	clrf	64,b	;volatile
 24350                           
 24351                           ; BSR set to: 14
 24352                           ;ECAN.c: 254: B3CON = 0 << 2;
 24353  004690  6B50               	clrf	80,b	;volatile
 24354                           
 24355                           ; BSR set to: 14
 24356                           ;ECAN.c: 264: B4CON = 0 << 2;
 24357  004692  6B60               	clrf	96,b	;volatile
 24358                           
 24359                           ; BSR set to: 14
 24360                           ;ECAN.c: 274: B5CON = 0 << 2;
 24361  004694  6B70               	clrf	112,b	;volatile
 24362                           
 24363                           ; BSR set to: 14
 24364                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24365  004696  0EE0               	movlw	224
 24366  004698  010D               	movlb	13	; () banked
 24367  00469A  6FF8               	movwf	248,b	;volatile
 24368                           
 24369                           ; BSR set to: 13
 24370                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24371  00469C  010F               	movlb	15	; () banked
 24372  00469E  6B00               	clrf	0,b	;volatile
 24373                           
 24374                           ; BSR set to: 15
 24375  0046A0  0E08               	movlw	8
 24376  0046A2  6F01               	movwf	1,b	;volatile
 24377                           
 24378                           ; BSR set to: 15
 24379  0046A4  6B02               	clrf	2,b	;volatile
 24380                           
 24381                           ; BSR set to: 15
 24382  0046A6  6B03               	clrf	3,b	;volatile
 24383                           
 24384                           ; BSR set to: 15
 24385                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24386  0046A8  0E01               	movlw	1
 24387  0046AA  010D               	movlb	13	; () banked
 24388  0046AC  6FD4               	movwf	212,b	;volatile
 24389                           
 24390                           ; BSR set to: 13
 24391                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24392  0046AE  6BD5               	clrf	213,b	;volatile
 24393                           
 24394                           ; BSR set to: 13
 24395                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 24396  0046B0  6BE0               	clrf	224,b	;volatile
 24397                           
 24398                           ; BSR set to: 13
 24399                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 24400  0046B2  0E11               	movlw	17
 24401  0046B4  6FE1               	movwf	225,b	;volatile
 24402                           
 24403                           ; BSR set to: 13
 24404                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 24405  0046B6  6FE2               	movwf	226,b	;volatile
 24406                           
 24407                           ; BSR set to: 13
 24408                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 24409  0046B8  6BE3               	clrf	227,b	;volatile
 24410                           
 24411                           ; BSR set to: 13
 24412                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 24413  0046BA  6BE4               	clrf	228,b	;volatile
 24414                           
 24415                           ; BSR set to: 13
 24416                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 24417  0046BC  6BE5               	clrf	229,b	;volatile
 24418                           
 24419                           ; BSR set to: 13
 24420                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 24421  0046BE  6BE6               	clrf	230,b	;volatile
 24422                           
 24423                           ; BSR set to: 13
 24424                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 24425  0046C0  6BE7               	clrf	231,b	;volatile
 24426                           
 24427                           ; BSR set to: 13
 24428                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 24429  0046C2  0E54               	movlw	84
 24430  0046C4  6FF0               	movwf	240,b	;volatile
 24431                           
 24432                           ; BSR set to: 13
 24433                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 24434  0046C6  0E05               	movlw	5
 24435  0046C8  6FF1               	movwf	241,b	;volatile
 24436                           
 24437                           ; BSR set to: 13
 24438                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24439  0046CA  6BF2               	clrf	242,b	;volatile
 24440                           
 24441                           ; BSR set to: 13
 24442                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24443  0046CC  6BF2               	clrf	242,b	;volatile
 24444                           
 24445                           ; BSR set to: 13
 24446                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 24447  0046CE  010F               	movlb	15	; () banked
 24448  0046D0  6B18               	clrf	24,b	;volatile
 24449                           
 24450                           ; BSR set to: 15
 24451  0046D2  6B19               	clrf	25,b	;volatile
 24452                           
 24453                           ; BSR set to: 15
 24454  0046D4  6B1A               	clrf	26,b	;volatile
 24455                           
 24456                           ; BSR set to: 15
 24457  0046D6  6B1B               	clrf	27,b	;volatile
 24458                           
 24459                           ; BSR set to: 15
 24460                           ;ECAN.c: 482: RXM0EXIDM = 1;
 24461  0046D8  8719               	bsf	25,3,b	;volatile
 24462                           
 24463                           ; BSR set to: 15
 24464                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 24465  0046DA  6B1C               	clrf	28,b	;volatile
 24466                           
 24467                           ; BSR set to: 15
 24468  0046DC  6B1D               	clrf	29,b	;volatile
 24469                           
 24470                           ; BSR set to: 15
 24471  0046DE  6B1E               	clrf	30,b	;volatile
 24472                           
 24473                           ; BSR set to: 15
 24474  0046E0  6B1F               	clrf	31,b	;volatile
 24475                           
 24476                           ; BSR set to: 15
 24477                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 24478  0046E2  871D               	bsf	29,3,b	;volatile
 24479                           
 24480                           ; BSR set to: 15
 24481                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 24482  0046E4  0E20               	movlw	32
 24483  0046E6  EFAD  F028         	goto	_ECANSetOperationMode
 24484  0046EA                     __end_of_ECANInitialize:
 24485                           	opt stack 0
 24486                           tblptru	equ	0xFF8
 24487                           tblptrh	equ	0xFF7
 24488                           tblptrl	equ	0xFF6
 24489                           tablat	equ	0xFF5
 24490                           prodh	equ	0xFF4
 24491                           prodl	equ	0xFF3
 24492                           intcon	equ	0xFF2
 24493                           indf0	equ	0xFEF
 24494                           postinc0	equ	0xFEE
 24495                           fsr0h	equ	0xFEA
 24496                           fsr0l	equ	0xFE9
 24497                           wreg	equ	0xFE8
 24498                           indf1	equ	0xFE7
 24499                           postinc1	equ	0xFE6
 24500                           postdec1	equ	0xFE5
 24501                           fsr1h	equ	0xFE2
 24502                           fsr1l	equ	0xFE1
 24503                           indf2	equ	0xFDF
 24504                           postinc2	equ	0xFDE
 24505                           postdec2	equ	0xFDD
 24506                           plusw2	equ	0xFDB
 24507                           fsr2h	equ	0xFDA
 24508                           fsr2l	equ	0xFD9
 24509                           status	equ	0xFD8
 24510                           
 24511 ;; *************** function _ECANSetOperationMode *****************
 24512 ;; Defined at:
 24513 ;;		line 1012 in file "ECAN.c"
 24514 ;; Parameters:    Size  Location     Type
 24515 ;;  mode            1    wreg     enum E16337
 24516 ;; Auto vars:     Size  Location     Type
 24517 ;;  mode            1   24[COMRAM] enum E16337
 24518 ;; Return value:  Size  Location     Type
 24519 ;;		None               void
 24520 ;; Registers used:
 24521 ;;		wreg, status,2, status,0
 24522 ;; Tracked objects:
 24523 ;;		On entry : 0/0
 24524 ;;		On exit  : 0/0
 24525 ;;		Unchanged: 0/0
 24526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24527 ;;      Params:         0       0       0       0       0       0       0
 24528 ;;      Locals:         1       0       0       0       0       0       0
 24529 ;;      Temps:          0       0       0       0       0       0       0
 24530 ;;      Totals:         1       0       0       0       0       0       0
 24531 ;;Total ram usage:        1 bytes
 24532 ;; Hardware stack levels used:    1
 24533 ;; Hardware stack levels required when called:    2
 24534 ;; This function calls:
 24535 ;;		Nothing
 24536 ;; This function is called by:
 24537 ;;		_doModeVerbose
 24538 ;;		_doModeVscp
 24539 ;;		_doModeSLCAN
 24540 ;;		_ECANInitialize
 24541 ;; This function uses a non-reentrant model
 24542 ;;
 24543                           
 24544                           	psect	text71
 24545  00515A                     __ptext71:
 24546                           	opt stack 0
 24547  00515A                     _ECANSetOperationMode:
 24548                           	opt stack 27
 24549                           
 24550                           ;incstack = 0
 24551                           ;incstack = 0
 24552                           ;ECANSetOperationMode@mode stored from wreg
 24553  00515A  CFE8 F019          	movff	wreg,ECANSetOperationMode@mode
 24554                           
 24555                           ;ECAN.c: 1013: CANCON &= 0x1F;
 24556  00515E  0E1F               	movlw	31
 24557  005160  166F               	andwf	3951,f,c	;volatile
 24558                           
 24559                           ;ECAN.c: 1014: CANCON |= mode;
 24560  005162  5019               	movf	ECANSetOperationMode@mode,w,c
 24561  005164  126F               	iorwf	3951,f,c	;volatile
 24562  005166                     l10674:
 24563  005166  506F               	movf	3951,w,c	;volatile
 24564  005168  0BE0               	andlw	224
 24565  00516A  1819               	xorwf	ECANSetOperationMode@mode,w,c
 24566  00516C  B4D8               	btfsc	status,2,c
 24567  00516E  0012               	return	
 24568  005170  D7FA               	goto	l10674
 24569  005172                     __end_of_ECANSetOperationMode:
 24570                           	opt stack 0
 24571                           tblptru	equ	0xFF8
 24572                           tblptrh	equ	0xFF7
 24573                           tblptrl	equ	0xFF6
 24574                           tablat	equ	0xFF5
 24575                           prodh	equ	0xFF4
 24576                           prodl	equ	0xFF3
 24577                           intcon	equ	0xFF2
 24578                           indf0	equ	0xFEF
 24579                           postinc0	equ	0xFEE
 24580                           fsr0h	equ	0xFEA
 24581                           fsr0l	equ	0xFE9
 24582                           wreg	equ	0xFE8
 24583                           indf1	equ	0xFE7
 24584                           postinc1	equ	0xFE6
 24585                           postdec1	equ	0xFE5
 24586                           fsr1h	equ	0xFE2
 24587                           fsr1l	equ	0xFE1
 24588                           indf2	equ	0xFDF
 24589                           postinc2	equ	0xFDE
 24590                           postdec2	equ	0xFDD
 24591                           plusw2	equ	0xFDB
 24592                           fsr2h	equ	0xFDA
 24593                           fsr2l	equ	0xFD9
 24594                           status	equ	0xFD8
 24595                           
 24596 ;; *************** function _OpenTimer0 *****************
 24597 ;; Defined at:
 24598 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 24599 ;; Parameters:    Size  Location     Type
 24600 ;;  config          1    wreg     unsigned char 
 24601 ;; Auto vars:     Size  Location     Type
 24602 ;;  config          1   24[COMRAM] unsigned char 
 24603 ;; Return value:  Size  Location     Type
 24604 ;;		None               void
 24605 ;; Registers used:
 24606 ;;		wreg, status,2, status,0
 24607 ;; Tracked objects:
 24608 ;;		On entry : F/0
 24609 ;;		On exit  : F/0
 24610 ;;		Unchanged: F/0
 24611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24612 ;;      Params:         0       0       0       0       0       0       0
 24613 ;;      Locals:         1       0       0       0       0       0       0
 24614 ;;      Temps:          0       0       0       0       0       0       0
 24615 ;;      Totals:         1       0       0       0       0       0       0
 24616 ;;Total ram usage:        1 bytes
 24617 ;; Hardware stack levels used:    1
 24618 ;; Hardware stack levels required when called:    2
 24619 ;; This function calls:
 24620 ;;		Nothing
 24621 ;; This function is called by:
 24622 ;;		_init
 24623 ;; This function uses a non-reentrant model
 24624 ;;
 24625                           
 24626                           	psect	text72
 24627  00511E                     __ptext72:
 24628                           	opt stack 0
 24629  00511E                     _OpenTimer0:
 24630                           	opt stack 27
 24631                           
 24632                           ;incstack = 0
 24633                           ;incstack = 0
 24634                           ;OpenTimer0@config stored from wreg
 24635  00511E  CFE8 F019          	movff	wreg,OpenTimer0@config
 24636                           
 24637                           ; BSR set to: 0
 24638  005122  5019               	movf	OpenTimer0@config,w,c
 24639  005124  0B7F               	andlw	127
 24640  005126  6ED5               	movwf	4053,c	;volatile
 24641                           
 24642                           ; BSR set to: 0
 24643  005128  6AD7               	clrf	4055,c	;volatile
 24644                           
 24645                           ; BSR set to: 0
 24646  00512A  6AD6               	clrf	4054,c	;volatile
 24647                           
 24648                           ; BSR set to: 0
 24649  00512C  94F2               	bcf	intcon,2,c	;volatile
 24650                           
 24651                           ; BSR set to: 0
 24652  00512E  AE19               	btfss	OpenTimer0@config,7,c
 24653  005130  D002               	goto	l1676
 24654                           
 24655                           ; BSR set to: 0
 24656  005132  8AF2               	bsf	intcon,5,c	;volatile
 24657  005134  D001               	goto	l1677
 24658  005136                     l1676:
 24659                           
 24660                           ; BSR set to: 0
 24661  005136  9AF2               	bcf	intcon,5,c	;volatile
 24662  005138                     l1677:
 24663                           
 24664                           ; BSR set to: 0
 24665  005138  8ED5               	bsf	4053,7,c	;volatile
 24666                           
 24667                           ; BSR set to: 0
 24668  00513A  0012               	return	
 24669  00513C                     __end_of_OpenTimer0:
 24670                           	opt stack 0
 24671                           tblptru	equ	0xFF8
 24672                           tblptrh	equ	0xFF7
 24673                           tblptrl	equ	0xFF6
 24674                           tablat	equ	0xFF5
 24675                           prodh	equ	0xFF4
 24676                           prodl	equ	0xFF3
 24677                           intcon	equ	0xFF2
 24678                           indf0	equ	0xFEF
 24679                           postinc0	equ	0xFEE
 24680                           fsr0h	equ	0xFEA
 24681                           fsr0l	equ	0xFE9
 24682                           wreg	equ	0xFE8
 24683                           indf1	equ	0xFE7
 24684                           postinc1	equ	0xFE6
 24685                           postdec1	equ	0xFE5
 24686                           fsr1h	equ	0xFE2
 24687                           fsr1l	equ	0xFE1
 24688                           indf2	equ	0xFDF
 24689                           postinc2	equ	0xFDE
 24690                           postdec2	equ	0xFDD
 24691                           plusw2	equ	0xFDB
 24692                           fsr2h	equ	0xFDA
 24693                           fsr2l	equ	0xFD9
 24694                           status	equ	0xFD8
 24695                           
 24696 ;; *************** function _OpenUSART *****************
 24697 ;; Defined at:
 24698 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 24699 ;; Parameters:    Size  Location     Type
 24700 ;;  config          1    wreg     unsigned char 
 24701 ;;  spbrg           2   24[COMRAM] unsigned int 
 24702 ;; Auto vars:     Size  Location     Type
 24703 ;;  config          1   26[COMRAM] unsigned char 
 24704 ;; Return value:  Size  Location     Type
 24705 ;;		None               void
 24706 ;; Registers used:
 24707 ;;		wreg, status,2
 24708 ;; Tracked objects:
 24709 ;;		On entry : F/0
 24710 ;;		On exit  : F/0
 24711 ;;		Unchanged: F/0
 24712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24713 ;;      Params:         2       0       0       0       0       0       0
 24714 ;;      Locals:         1       0       0       0       0       0       0
 24715 ;;      Temps:          0       0       0       0       0       0       0
 24716 ;;      Totals:         3       0       0       0       0       0       0
 24717 ;;Total ram usage:        3 bytes
 24718 ;; Hardware stack levels used:    1
 24719 ;; Hardware stack levels required when called:    2
 24720 ;; This function calls:
 24721 ;;		Nothing
 24722 ;; This function is called by:
 24723 ;;		_init
 24724 ;; This function uses a non-reentrant model
 24725 ;;
 24726                           
 24727                           	psect	text73
 24728  004B1A                     __ptext73:
 24729                           	opt stack 0
 24730  004B1A                     _OpenUSART:
 24731                           	opt stack 27
 24732                           
 24733                           ; BSR set to: 0
 24734                           ;incstack = 0
 24735                           ;incstack = 0
 24736                           ;OpenUSART@config stored from wreg
 24737  004B1A  CFE8 F01B          	movff	wreg,OpenUSART@config
 24738                           
 24739                           ; BSR set to: 0
 24740  004B1E  6AAC               	clrf	4012,c	;volatile
 24741  004B20  6AAB               	clrf	4011,c	;volatile
 24742                           
 24743                           ; BSR set to: 0
 24744  004B22  B01B               	btfsc	OpenUSART@config,0,c
 24745                           
 24746                           ; BSR set to: 0
 24747  004B24  88AC               	bsf	4012,4,c	;volatile
 24748                           
 24749                           ; BSR set to: 0
 24750  004B26  A21B               	btfss	OpenUSART@config,1,c
 24751  004B28  D002               	goto	l10388
 24752                           
 24753                           ; BSR set to: 0
 24754  004B2A  8CAC               	bsf	4012,6,c	;volatile
 24755  004B2C  8CAB               	bsf	4011,6,c	;volatile
 24756  004B2E                     l10388:
 24757                           
 24758                           ; BSR set to: 0
 24759  004B2E  B41B               	btfsc	OpenUSART@config,2,c
 24760                           
 24761                           ; BSR set to: 0
 24762  004B30  8EAC               	bsf	4012,7,c	;volatile
 24763                           
 24764                           ; BSR set to: 0
 24765  004B32  A61B               	btfss	OpenUSART@config,3,c
 24766  004B34  D002               	goto	l1709
 24767                           
 24768                           ; BSR set to: 0
 24769  004B36  88AB               	bsf	4011,4,c	;volatile
 24770  004B38  D001               	goto	l10396
 24771  004B3A                     l1709:
 24772                           
 24773                           ; BSR set to: 0
 24774  004B3A  8AAB               	bsf	4011,5,c	;volatile
 24775  004B3C                     l10396:
 24776                           
 24777                           ; BSR set to: 0
 24778  004B3C  B81B               	btfsc	OpenUSART@config,4,c
 24779                           
 24780                           ; BSR set to: 0
 24781  004B3E  84AC               	bsf	4012,2,c	;volatile
 24782                           
 24783                           ; BSR set to: 0
 24784  004B40  989E               	bcf	3998,4,c	;volatile
 24785                           
 24786                           ; BSR set to: 0
 24787  004B42  BA1B               	btfsc	OpenUSART@config,5,c
 24788                           
 24789                           ; BSR set to: 0
 24790  004B44  86AB               	bsf	4011,3,c	;volatile
 24791                           
 24792                           ; BSR set to: 0
 24793  004B46  AC1B               	btfss	OpenUSART@config,6,c
 24794  004B48  D002               	goto	l1713
 24795                           
 24796                           ; BSR set to: 0
 24797  004B4A  8A9D               	bsf	3997,5,c	;volatile
 24798  004B4C  D001               	goto	l1714
 24799  004B4E                     l1713:
 24800                           
 24801                           ; BSR set to: 0
 24802  004B4E  9A9D               	bcf	3997,5,c	;volatile
 24803  004B50                     l1714:
 24804                           
 24805                           ; BSR set to: 0
 24806  004B50  9A9E               	bcf	3998,5,c	;volatile
 24807                           
 24808                           ; BSR set to: 0
 24809  004B52  AE1B               	btfss	OpenUSART@config,7,c
 24810  004B54  D002               	goto	l1715
 24811                           
 24812                           ; BSR set to: 0
 24813  004B56  889D               	bsf	3997,4,c	;volatile
 24814  004B58  D001               	goto	l1716
 24815  004B5A                     l1715:
 24816                           
 24817                           ; BSR set to: 0
 24818  004B5A  989D               	bcf	3997,4,c	;volatile
 24819  004B5C                     l1716:
 24820                           
 24821                           ; BSR set to: 0
 24822  004B5C  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 24823                           
 24824                           ; BSR set to: 0
 24825  004B60  501A               	movf	OpenUSART@spbrg+1,w,c
 24826  004B62  6EB0               	movwf	4016,c	;volatile
 24827                           
 24828                           ; BSR set to: 0
 24829  004B64  8AAC               	bsf	4012,5,c	;volatile
 24830                           
 24831                           ; BSR set to: 0
 24832  004B66  8EAB               	bsf	4011,7,c	;volatile
 24833                           
 24834                           ; BSR set to: 0
 24835  004B68  9C94               	bcf	3988,6,c	;volatile
 24836                           
 24837                           ; BSR set to: 0
 24838  004B6A  8E94               	bsf	3988,7,c	;volatile
 24839                           
 24840                           ; BSR set to: 0
 24841  004B6C  B8AC               	btfsc	4012,4,c	;volatile
 24842                           
 24843                           ; BSR set to: 0
 24844  004B6E  BEAC               	btfsc	4012,7,c	;volatile
 24845  004B70  D001               	goto	l1718
 24846                           
 24847                           ; BSR set to: 0
 24848  004B72  8C94               	bsf	3988,6,c	;volatile
 24849  004B74                     l1718:
 24850                           
 24851                           ; BSR set to: 0
 24852  004B74  0012               	return	
 24853  004B76                     __end_of_OpenUSART:
 24854                           	opt stack 0
 24855                           tblptru	equ	0xFF8
 24856                           tblptrh	equ	0xFF7
 24857                           tblptrl	equ	0xFF6
 24858                           tablat	equ	0xFF5
 24859                           prodh	equ	0xFF4
 24860                           prodl	equ	0xFF3
 24861                           intcon	equ	0xFF2
 24862                           indf0	equ	0xFEF
 24863                           postinc0	equ	0xFEE
 24864                           fsr0h	equ	0xFEA
 24865                           fsr0l	equ	0xFE9
 24866                           wreg	equ	0xFE8
 24867                           indf1	equ	0xFE7
 24868                           postinc1	equ	0xFE6
 24869                           postdec1	equ	0xFE5
 24870                           fsr1h	equ	0xFE2
 24871                           fsr1l	equ	0xFE1
 24872                           indf2	equ	0xFDF
 24873                           postinc2	equ	0xFDE
 24874                           postdec2	equ	0xFDD
 24875                           plusw2	equ	0xFDB
 24876                           fsr2h	equ	0xFDA
 24877                           fsr2l	equ	0xFD9
 24878                           status	equ	0xFD8
 24879                           
 24880 ;; *************** function _WriteTimer0 *****************
 24881 ;; Defined at:
 24882 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 24883 ;; Parameters:    Size  Location     Type
 24884 ;;  timer0          2   24[COMRAM] unsigned int 
 24885 ;; Auto vars:     Size  Location     Type
 24886 ;;  timer           2   26[COMRAM] struct Timers
 24887 ;; Return value:  Size  Location     Type
 24888 ;;		None               void
 24889 ;; Registers used:
 24890 ;;		None
 24891 ;; Tracked objects:
 24892 ;;		On entry : F/0
 24893 ;;		On exit  : F/0
 24894 ;;		Unchanged: F/0
 24895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24896 ;;      Params:         2       0       0       0       0       0       0
 24897 ;;      Locals:         2       0       0       0       0       0       0
 24898 ;;      Temps:          0       0       0       0       0       0       0
 24899 ;;      Totals:         4       0       0       0       0       0       0
 24900 ;;Total ram usage:        4 bytes
 24901 ;; Hardware stack levels used:    1
 24902 ;; Hardware stack levels required when called:    2
 24903 ;; This function calls:
 24904 ;;		Nothing
 24905 ;; This function is called by:
 24906 ;;		_init
 24907 ;; This function uses a non-reentrant model
 24908 ;;
 24909                           
 24910                           	psect	text74
 24911  00519C                     __ptext74:
 24912                           	opt stack 0
 24913  00519C                     _WriteTimer0:
 24914                           	opt stack 27
 24915                           
 24916                           ; BSR set to: 0
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;incstack = 0
 24920                           ;incstack = 0
 24921  00519C  C019  F01B         	movff	WriteTimer0@timer0,WriteTimer0@timer
 24922  0051A0  C01A  F01C         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 24923  0051A4  C01C  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 24924  0051A8  C01B  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 24925                           
 24926                           ; BSR set to: 0
 24927  0051AC  0012               	return	
 24928  0051AE                     __end_of_WriteTimer0:
 24929                           	opt stack 0
 24930                           tblptru	equ	0xFF8
 24931                           tblptrh	equ	0xFF7
 24932                           tblptrl	equ	0xFF6
 24933                           tablat	equ	0xFF5
 24934                           prodh	equ	0xFF4
 24935                           prodl	equ	0xFF3
 24936                           intcon	equ	0xFF2
 24937                           indf0	equ	0xFEF
 24938                           postinc0	equ	0xFEE
 24939                           fsr0h	equ	0xFEA
 24940                           fsr0l	equ	0xFE9
 24941                           wreg	equ	0xFE8
 24942                           indf1	equ	0xFE7
 24943                           postinc1	equ	0xFE6
 24944                           postdec1	equ	0xFE5
 24945                           fsr1h	equ	0xFE2
 24946                           fsr1l	equ	0xFE1
 24947                           indf2	equ	0xFDF
 24948                           postinc2	equ	0xFDE
 24949                           postdec2	equ	0xFDD
 24950                           plusw2	equ	0xFDB
 24951                           fsr2h	equ	0xFDA
 24952                           fsr2l	equ	0xFD9
 24953                           status	equ	0xFD8
 24954                           
 24955 ;; *************** function _vscp_restoreDefaults *****************
 24956 ;; Defined at:
 24957 ;;		line 2344 in file "main.c"
 24958 ;; Parameters:    Size  Location     Type
 24959 ;;		None
 24960 ;; Auto vars:     Size  Location     Type
 24961 ;;		None
 24962 ;; Return value:  Size  Location     Type
 24963 ;;		None               void
 24964 ;; Registers used:
 24965 ;;		wreg, status,2, status,0, cstack
 24966 ;; Tracked objects:
 24967 ;;		On entry : 0/0
 24968 ;;		On exit  : F/0
 24969 ;;		Unchanged: 0/0
 24970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24971 ;;      Params:         0       0       0       0       0       0       0
 24972 ;;      Locals:         0       0       0       0       0       0       0
 24973 ;;      Temps:          0       0       0       0       0       0       0
 24974 ;;      Totals:         0       0       0       0       0       0       0
 24975 ;;Total ram usage:        0 bytes
 24976 ;; Hardware stack levels used:    1
 24977 ;; Hardware stack levels required when called:    4
 24978 ;; This function calls:
 24979 ;;		_init_app_ram
 24980 ;;		_init_app_eeprom
 24981 ;; This function is called by:
 24982 ;;		_main
 24983 ;; This function uses a non-reentrant model
 24984 ;;
 24985                           
 24986                           	psect	text75
 24987  0051D2                     __ptext75:
 24988                           	opt stack 0
 24989  0051D2                     _vscp_restoreDefaults:
 24990                           	opt stack 26
 24991                           
 24992                           ;main.c: 2345: init_app_eeprom();
 24993                           
 24994                           ; BSR set to: 0
 24995                           ;incstack = 0
 24996                           ;incstack = 0
 24997  0051D2  ECAD  F022         	call	_init_app_eeprom	;wreg free
 24998                           
 24999                           ;main.c: 2346: init_app_ram();
 25000  0051D6  EF10  F026         	goto	_init_app_ram	;wreg free
 25001  0051DA                     __end_of_vscp_restoreDefaults:
 25002                           	opt stack 0
 25003                           tblptru	equ	0xFF8
 25004                           tblptrh	equ	0xFF7
 25005                           tblptrl	equ	0xFF6
 25006                           tablat	equ	0xFF5
 25007                           prodh	equ	0xFF4
 25008                           prodl	equ	0xFF3
 25009                           intcon	equ	0xFF2
 25010                           indf0	equ	0xFEF
 25011                           postinc0	equ	0xFEE
 25012                           fsr0h	equ	0xFEA
 25013                           fsr0l	equ	0xFE9
 25014                           wreg	equ	0xFE8
 25015                           indf1	equ	0xFE7
 25016                           postinc1	equ	0xFE6
 25017                           postdec1	equ	0xFE5
 25018                           fsr1h	equ	0xFE2
 25019                           fsr1l	equ	0xFE1
 25020                           indf2	equ	0xFDF
 25021                           postinc2	equ	0xFDE
 25022                           postdec2	equ	0xFDD
 25023                           plusw2	equ	0xFDB
 25024                           fsr2h	equ	0xFDA
 25025                           fsr2l	equ	0xFD9
 25026                           status	equ	0xFD8
 25027                           
 25028 ;; *************** function _init_app_eeprom *****************
 25029 ;; Defined at:
 25030 ;;		line 385 in file "main.c"
 25031 ;; Parameters:    Size  Location     Type
 25032 ;;		None
 25033 ;; Auto vars:     Size  Location     Type
 25034 ;;  i               1   27[COMRAM] unsigned char 
 25035 ;; Return value:  Size  Location     Type
 25036 ;;		None               void
 25037 ;; Registers used:
 25038 ;;		wreg, status,2, status,0, cstack
 25039 ;; Tracked objects:
 25040 ;;		On entry : 0/0
 25041 ;;		On exit  : 0/0
 25042 ;;		Unchanged: 0/0
 25043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25044 ;;      Params:         0       0       0       0       0       0       0
 25045 ;;      Locals:         1       0       0       0       0       0       0
 25046 ;;      Temps:          0       0       0       0       0       0       0
 25047 ;;      Totals:         1       0       0       0       0       0       0
 25048 ;;Total ram usage:        1 bytes
 25049 ;; Hardware stack levels used:    1
 25050 ;; Hardware stack levels required when called:    3
 25051 ;; This function calls:
 25052 ;;		_writeEEPROM
 25053 ;; This function is called by:
 25054 ;;		_vscp_restoreDefaults
 25055 ;; This function uses a non-reentrant model
 25056 ;;
 25057                           
 25058                           	psect	text76
 25059  00455A                     __ptext76:
 25060                           	opt stack 0
 25061  00455A                     _init_app_eeprom:
 25062                           	opt stack 26
 25063                           
 25064                           ;main.c: 386: uint8_t i;
 25065                           ;main.c: 388: writeEEPROM(0x01, 0x55);
 25066                           
 25067                           ; BSR set to: 0
 25068                           ;incstack = 0
 25069                           ;incstack = 0
 25070  00455A  6A1A               	clrf	?_writeEEPROM+1,c
 25071  00455C  0E01               	movlw	1
 25072  00455E  6E19               	movwf	?_writeEEPROM,c
 25073  004560  0E55               	movlw	85
 25074  004562  6E1B               	movwf	?_writeEEPROM+2,c
 25075  004564  EC6D  F028         	call	_writeEEPROM	;wreg free
 25076                           
 25077                           ;main.c: 389: writeEEPROM(0x02, 0xAA);
 25078  004568  6A1A               	clrf	?_writeEEPROM+1,c
 25079  00456A  0E02               	movlw	2
 25080  00456C  6E19               	movwf	?_writeEEPROM,c
 25081  00456E  0EAA               	movlw	170
 25082  004570  6E1B               	movwf	?_writeEEPROM+2,c
 25083  004572  EC6D  F028         	call	_writeEEPROM	;wreg free
 25084                           
 25085                           ;main.c: 390: writeEEPROM(0x03, 0);
 25086  004576  6A1A               	clrf	?_writeEEPROM+1,c
 25087  004578  0E03               	movlw	3
 25088  00457A  6E19               	movwf	?_writeEEPROM,c
 25089  00457C  0E00               	movlw	0
 25090  00457E  6A1B               	clrf	?_writeEEPROM+2,c
 25091  004580  EC6D  F028         	call	_writeEEPROM	;wreg free
 25092                           
 25093                           ;main.c: 391: writeEEPROM(0x05, 0);
 25094  004584  6A1A               	clrf	?_writeEEPROM+1,c
 25095  004586  0E05               	movlw	5
 25096  004588  6E19               	movwf	?_writeEEPROM,c
 25097  00458A  0E00               	movlw	0
 25098  00458C  6A1B               	clrf	?_writeEEPROM+2,c
 25099  00458E  EC6D  F028         	call	_writeEEPROM	;wreg free
 25100                           
 25101                           ;main.c: 392: writeEEPROM(0x06, 0);
 25102  004592  6A1A               	clrf	?_writeEEPROM+1,c
 25103  004594  0E06               	movlw	6
 25104  004596  6E19               	movwf	?_writeEEPROM,c
 25105  004598  0E00               	movlw	0
 25106  00459A  6A1B               	clrf	?_writeEEPROM+2,c
 25107  00459C  EC6D  F028         	call	_writeEEPROM	;wreg free
 25108                           
 25109                           ;main.c: 393: writeEEPROM(0x09, 10u);
 25110  0045A0  6A1A               	clrf	?_writeEEPROM+1,c
 25111  0045A2  0E09               	movlw	9
 25112  0045A4  6E19               	movwf	?_writeEEPROM,c
 25113  0045A6  0E0A               	movlw	10
 25114  0045A8  6E1B               	movwf	?_writeEEPROM+2,c
 25115  0045AA  EC6D  F028         	call	_writeEEPROM	;wreg free
 25116                           
 25117                           ;main.c: 396: for (i = 0x20; i < (0x5C + 4); i++) {
 25118  0045AE  0E20               	movlw	32
 25119  0045B0  6E1C               	movwf	init_app_eeprom@i,c
 25120  0045B2                     l10538:
 25121                           
 25122                           ;main.c: 397: writeEEPROM(0x01, 0xFF);
 25123  0045B2  6A1A               	clrf	?_writeEEPROM+1,c
 25124  0045B4  0E01               	movlw	1
 25125  0045B6  6E19               	movwf	?_writeEEPROM,c
 25126  0045B8  0EFF               	movlw	255
 25127  0045BA  681B               	setf	?_writeEEPROM+2,c
 25128  0045BC  EC6D  F028         	call	_writeEEPROM	;wreg free
 25129  0045C0  2A1C               	incf	init_app_eeprom@i,f,c
 25130  0045C2  0E5F               	movlw	95
 25131  0045C4  641C               	cpfsgt	init_app_eeprom@i,c
 25132  0045C6  D7F5               	goto	l10538
 25133                           
 25134                           ;main.c: 398: }
 25135                           ;main.c: 401: for (i = 0x60; i < (0x64 + 4); i++) {
 25136  0045C8  0E60               	movlw	96
 25137  0045CA  6E1C               	movwf	init_app_eeprom@i,c
 25138  0045CC                     l10550:
 25139                           
 25140                           ;main.c: 402: writeEEPROM(0x01, 0xFF);
 25141  0045CC  6A1A               	clrf	?_writeEEPROM+1,c
 25142  0045CE  0E01               	movlw	1
 25143  0045D0  6E19               	movwf	?_writeEEPROM,c
 25144  0045D2  0EFF               	movlw	255
 25145  0045D4  681B               	setf	?_writeEEPROM+2,c
 25146  0045D6  EC6D  F028         	call	_writeEEPROM	;wreg free
 25147  0045DA  2A1C               	incf	init_app_eeprom@i,f,c
 25148  0045DC  0E67               	movlw	103
 25149  0045DE  641C               	cpfsgt	init_app_eeprom@i,c
 25150  0045E0  D7F5               	goto	l10550
 25151  0045E2  0C67               	retlw	103
 25152  0045E4                     __end_of_init_app_eeprom:
 25153                           	opt stack 0
 25154                           tblptru	equ	0xFF8
 25155                           tblptrh	equ	0xFF7
 25156                           tblptrl	equ	0xFF6
 25157                           tablat	equ	0xFF5
 25158                           prodh	equ	0xFF4
 25159                           prodl	equ	0xFF3
 25160                           intcon	equ	0xFF2
 25161                           indf0	equ	0xFEF
 25162                           postinc0	equ	0xFEE
 25163                           fsr0h	equ	0xFEA
 25164                           fsr0l	equ	0xFE9
 25165                           wreg	equ	0xFE8
 25166                           indf1	equ	0xFE7
 25167                           postinc1	equ	0xFE6
 25168                           postdec1	equ	0xFE5
 25169                           fsr1h	equ	0xFE2
 25170                           fsr1l	equ	0xFE1
 25171                           indf2	equ	0xFDF
 25172                           postinc2	equ	0xFDE
 25173                           postdec2	equ	0xFDD
 25174                           plusw2	equ	0xFDB
 25175                           fsr2h	equ	0xFDA
 25176                           fsr2l	equ	0xFD9
 25177                           status	equ	0xFD8
 25178                           
 25179 ;; *************** function _writeEEPROM *****************
 25180 ;; Defined at:
 25181 ;;		line 23 in file "eeprom.c"
 25182 ;; Parameters:    Size  Location     Type
 25183 ;;  address         2   24[COMRAM] unsigned short 
 25184 ;;  data            1   26[COMRAM] unsigned char 
 25185 ;; Auto vars:     Size  Location     Type
 25186 ;;		None
 25187 ;; Return value:  Size  Location     Type
 25188 ;;		None               void
 25189 ;; Registers used:
 25190 ;;		wreg, status,2
 25191 ;; Tracked objects:
 25192 ;;		On entry : 0/1
 25193 ;;		On exit  : 0/0
 25194 ;;		Unchanged: 0/0
 25195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25196 ;;      Params:         3       0       0       0       0       0       0
 25197 ;;      Locals:         0       0       0       0       0       0       0
 25198 ;;      Temps:          0       0       0       0       0       0       0
 25199 ;;      Totals:         3       0       0       0       0       0       0
 25200 ;;Total ram usage:        3 bytes
 25201 ;; Hardware stack levels used:    1
 25202 ;; Hardware stack levels required when called:    2
 25203 ;; This function calls:
 25204 ;;		Nothing
 25205 ;; This function is called by:
 25206 ;;		_init_app_eeprom
 25207 ;;		_doModeVerbose
 25208 ;;		_doModeSLCAN
 25209 ;; This function uses a non-reentrant model
 25210 ;;
 25211                           
 25212                           	psect	text77
 25213  0050DA                     __ptext77:
 25214                           	opt stack 0
 25215  0050DA                     _writeEEPROM:
 25216                           	opt stack 27
 25217                           
 25218                           ;eeprom.c: 29: EEADR = address & 0xff;
 25219                           
 25220                           ;incstack = 0
 25221                           ;incstack = 0
 25222  0050DA  C019  FFA9         	movff	writeEEPROM@address,4009	;volatile
 25223                           
 25224                           ;eeprom.c: 30: EEDATA = data;
 25225  0050DE  C01B  FFA8         	movff	writeEEPROM@data,4008	;volatile
 25226                           
 25227                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 25228  0050E2  9EA6               	bcf	4006,7,c	;volatile
 25229                           
 25230                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 25231  0050E4  9CA6               	bcf	4006,6,c	;volatile
 25232                           
 25233                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 25234  0050E6  84A6               	bsf	4006,2,c	;volatile
 25235                           
 25236                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 25237  0050E8  9EF2               	bcf	intcon,7,c	;volatile
 25238                           
 25239                           ;eeprom.c: 37: EECON2 = 0x55;
 25240  0050EA  0E55               	movlw	85
 25241  0050EC  6EA7               	movwf	4007,c	;volatile
 25242                           
 25243                           ;eeprom.c: 38: EECON2 = 0xaa;
 25244  0050EE  0EAA               	movlw	170
 25245  0050F0  6EA7               	movwf	4007,c	;volatile
 25246                           
 25247                           ;eeprom.c: 39: EECON1bits.WR = 1;
 25248  0050F2  82A6               	bsf	4006,1,c	;volatile
 25249                           
 25250                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 25251  0050F4  8EF2               	bsf	intcon,7,c	;volatile
 25252  0050F6                     l1456:
 25253  0050F6  A8A1               	btfss	4001,4,c	;volatile
 25254  0050F8  D7FE               	goto	l1456
 25255                           
 25256                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 25257  0050FA  98A1               	bcf	4001,4,c	;volatile
 25258                           
 25259                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 25260  0050FC  94A6               	bcf	4006,2,c	;volatile
 25261  0050FE  0012               	return	
 25262  005100                     __end_of_writeEEPROM:
 25263                           	opt stack 0
 25264                           tblptru	equ	0xFF8
 25265                           tblptrh	equ	0xFF7
 25266                           tblptrl	equ	0xFF6
 25267                           tablat	equ	0xFF5
 25268                           prodh	equ	0xFF4
 25269                           prodl	equ	0xFF3
 25270                           intcon	equ	0xFF2
 25271                           indf0	equ	0xFEF
 25272                           postinc0	equ	0xFEE
 25273                           fsr0h	equ	0xFEA
 25274                           fsr0l	equ	0xFE9
 25275                           wreg	equ	0xFE8
 25276                           indf1	equ	0xFE7
 25277                           postinc1	equ	0xFE6
 25278                           postdec1	equ	0xFE5
 25279                           fsr1h	equ	0xFE2
 25280                           fsr1l	equ	0xFE1
 25281                           indf2	equ	0xFDF
 25282                           postinc2	equ	0xFDE
 25283                           postdec2	equ	0xFDD
 25284                           plusw2	equ	0xFDB
 25285                           fsr2h	equ	0xFDA
 25286                           fsr2l	equ	0xFD9
 25287                           status	equ	0xFD8
 25288                           
 25289 ;; *************** function _init_app_ram *****************
 25290 ;; Defined at:
 25291 ;;		line 368 in file "main.c"
 25292 ;; Parameters:    Size  Location     Type
 25293 ;;		None
 25294 ;; Auto vars:     Size  Location     Type
 25295 ;;		None
 25296 ;; Return value:  Size  Location     Type
 25297 ;;		None               void
 25298 ;; Registers used:
 25299 ;;		wreg, status,2, cstack
 25300 ;; Tracked objects:
 25301 ;;		On entry : 0/0
 25302 ;;		On exit  : F/0
 25303 ;;		Unchanged: 0/0
 25304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25305 ;;      Params:         0       0       0       0       0       0       0
 25306 ;;      Locals:         0       0       0       0       0       0       0
 25307 ;;      Temps:          0       0       0       0       0       0       0
 25308 ;;      Totals:         0       0       0       0       0       0       0
 25309 ;;Total ram usage:        0 bytes
 25310 ;; Hardware stack levels used:    1
 25311 ;; Hardware stack levels required when called:    3
 25312 ;; This function calls:
 25313 ;;		_readEEPROM
 25314 ;; This function is called by:
 25315 ;;		_init
 25316 ;;		_vscp_restoreDefaults
 25317 ;; This function uses a non-reentrant model
 25318 ;;
 25319                           
 25320                           	psect	text78
 25321  004C20                     __ptext78:
 25322                           	opt stack 0
 25323  004C20                     _init_app_ram:
 25324                           	opt stack 26
 25325                           
 25326                           ;main.c: 370: can_receiveOverruns = 0;
 25327                           
 25328                           ;incstack = 0
 25329                           ;incstack = 0
 25330  004C20  0101               	movlb	1	; () banked
 25331  004C22  6B00               	clrf	_can_receiveOverruns& (0+255),b
 25332  004C24  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 25333  004C26  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 25334  004C28  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 25335                           
 25336                           ;main.c: 371: can_transmitOverruns = 0;
 25337  004C2A  6B04               	clrf	_can_transmitOverruns& (0+255),b
 25338  004C2C  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 25339  004C2E  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 25340  004C30  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 25341                           
 25342                           ;main.c: 372: uart_receiveOverruns = 0;
 25343  004C32  6B18               	clrf	_uart_receiveOverruns& (0+255),b
 25344  004C34  6B19               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 25345  004C36  6B1A               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 25346  004C38  6B1B               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 25347                           
 25348                           ;main.c: 373: uart_transmitOverruns = 0;
 25349  004C3A  6B1C               	clrf	_uart_transmitOverruns& (0+255),b
 25350  004C3C  6B1D               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 25351  004C3E  6B1E               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 25352  004C40  6B1F               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 25353                           
 25354                           ; BSR set to: 1
 25355                           ;main.c: 375: bHex = readEEPROM(0x06);
 25356  004C42  6A1A               	clrf	?_readEEPROM+1,c
 25357  004C44  0E06               	movlw	6
 25358  004C46  6E19               	movwf	?_readEEPROM,c
 25359  004C48  ECD7  F028         	call	_readEEPROM	;wreg free
 25360  004C4C  0100               	movlb	0	; () banked
 25361  004C4E  6FD3               	movwf	_bHex& (0+255),b
 25362                           
 25363                           ;main.c: 376: mode = readEEPROM(0x03);
 25364  004C50  6A1A               	clrf	?_readEEPROM+1,c
 25365  004C52  0E03               	movlw	3
 25366  004C54  6E19               	movwf	?_readEEPROM,c
 25367  004C56  ECD7  F028         	call	_readEEPROM	;wreg free
 25368  004C5A  0100               	movlb	0	; () banked
 25369  004C5C  6FD7               	movwf	_mode& (0+255),b
 25370                           
 25371                           ;main.c: 378: rwtimeout = readEEPROM(0x09);
 25372  004C5E  6A1A               	clrf	?_readEEPROM+1,c
 25373  004C60  0E09               	movlw	9
 25374  004C62  6E19               	movwf	?_readEEPROM,c
 25375  004C64  ECD7  F028         	call	_readEEPROM	;wreg free
 25376  004C68  0100               	movlb	0	; () banked
 25377  004C6A  6FD9               	movwf	_rwtimeout& (0+255),b
 25378                           
 25379                           ; BSR set to: 0
 25380  004C6C  0012               	return	
 25381  004C6E                     __end_of_init_app_ram:
 25382                           	opt stack 0
 25383                           tblptru	equ	0xFF8
 25384                           tblptrh	equ	0xFF7
 25385                           tblptrl	equ	0xFF6
 25386                           tablat	equ	0xFF5
 25387                           prodh	equ	0xFF4
 25388                           prodl	equ	0xFF3
 25389                           intcon	equ	0xFF2
 25390                           indf0	equ	0xFEF
 25391                           postinc0	equ	0xFEE
 25392                           fsr0h	equ	0xFEA
 25393                           fsr0l	equ	0xFE9
 25394                           wreg	equ	0xFE8
 25395                           indf1	equ	0xFE7
 25396                           postinc1	equ	0xFE6
 25397                           postdec1	equ	0xFE5
 25398                           fsr1h	equ	0xFE2
 25399                           fsr1l	equ	0xFE1
 25400                           indf2	equ	0xFDF
 25401                           postinc2	equ	0xFDE
 25402                           postdec2	equ	0xFDD
 25403                           plusw2	equ	0xFDB
 25404                           fsr2h	equ	0xFDA
 25405                           fsr2l	equ	0xFD9
 25406                           status	equ	0xFD8
 25407                           
 25408 ;; *************** function _readEEPROM *****************
 25409 ;; Defined at:
 25410 ;;		line 87 in file "eeprom.c"
 25411 ;; Parameters:    Size  Location     Type
 25412 ;;  address         2   24[COMRAM] unsigned short 
 25413 ;; Auto vars:     Size  Location     Type
 25414 ;;  data            1   26[COMRAM] unsigned char 
 25415 ;; Return value:  Size  Location     Type
 25416 ;;                  1    wreg      unsigned char 
 25417 ;; Registers used:
 25418 ;;		wreg, status,2
 25419 ;; Tracked objects:
 25420 ;;		On entry : 0/0
 25421 ;;		On exit  : 0/0
 25422 ;;		Unchanged: 0/0
 25423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25424 ;;      Params:         2       0       0       0       0       0       0
 25425 ;;      Locals:         1       0       0       0       0       0       0
 25426 ;;      Temps:          0       0       0       0       0       0       0
 25427 ;;      Totals:         3       0       0       0       0       0       0
 25428 ;;Total ram usage:        3 bytes
 25429 ;; Hardware stack levels used:    1
 25430 ;; Hardware stack levels required when called:    2
 25431 ;; This function calls:
 25432 ;;		Nothing
 25433 ;; This function is called by:
 25434 ;;		_main
 25435 ;;		_init_app_ram
 25436 ;; This function uses a non-reentrant model
 25437 ;;
 25438                           
 25439                           	psect	text79
 25440  0051AE                     __ptext79:
 25441                           	opt stack 0
 25442  0051AE                     _readEEPROM:
 25443                           	opt stack 26
 25444                           
 25445                           ;eeprom.c: 88: uint8_t data;
 25446                           ;eeprom.c: 93: EEADR = address & 0xff;
 25447                           
 25448                           ; BSR set to: 0
 25449                           ;incstack = 0
 25450                           ;incstack = 0
 25451  0051AE  C019  FFA9         	movff	readEEPROM@address,4009	;volatile
 25452                           
 25453                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 25454  0051B2  9EA6               	bcf	4006,7,c	;volatile
 25455                           
 25456                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 25457  0051B4  9CA6               	bcf	4006,6,c	;volatile
 25458                           
 25459                           ;eeprom.c: 96: EECON1bits.RD = 1;
 25460  0051B6  80A6               	bsf	4006,0,c	;volatile
 25461                           
 25462                           ;eeprom.c: 97: data = EEDATA;
 25463  0051B8  CFA8 F01B          	movff	4008,readEEPROM@data	;volatile
 25464                           
 25465                           ;eeprom.c: 99: return data;
 25466  0051BC  501B               	movf	readEEPROM@data,w,c
 25467  0051BE  0012               	return	
 25468  0051C0                     __end_of_readEEPROM:
 25469                           	opt stack 0
 25470                           tblptru	equ	0xFF8
 25471                           tblptrh	equ	0xFF7
 25472                           tblptrl	equ	0xFF6
 25473                           tablat	equ	0xFF5
 25474                           prodh	equ	0xFF4
 25475                           prodl	equ	0xFF3
 25476                           intcon	equ	0xFF2
 25477                           indf0	equ	0xFEF
 25478                           postinc0	equ	0xFEE
 25479                           fsr0h	equ	0xFEA
 25480                           fsr0l	equ	0xFE9
 25481                           wreg	equ	0xFE8
 25482                           indf1	equ	0xFE7
 25483                           postinc1	equ	0xFE6
 25484                           postdec1	equ	0xFE5
 25485                           fsr1h	equ	0xFE2
 25486                           fsr1l	equ	0xFE1
 25487                           indf2	equ	0xFDF
 25488                           postinc2	equ	0xFDE
 25489                           postdec2	equ	0xFDD
 25490                           plusw2	equ	0xFDB
 25491                           fsr2h	equ	0xFDA
 25492                           fsr2l	equ	0xFD9
 25493                           status	equ	0xFD8
 25494                           
 25495 ;; *************** function _fifo_init *****************
 25496 ;; Defined at:
 25497 ;;		line 14 in file "fifo.c"
 25498 ;; Parameters:    Size  Location     Type
 25499 ;;  f               2   24[COMRAM] PTR struct .
 25500 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 25501 ;;  buf             2   26[COMRAM] PTR unsigned char 
 25502 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 25503 ;;  size            2   28[COMRAM] unsigned short 
 25504 ;; Auto vars:     Size  Location     Type
 25505 ;;		None
 25506 ;; Return value:  Size  Location     Type
 25507 ;;		None               void
 25508 ;; Registers used:
 25509 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25510 ;; Tracked objects:
 25511 ;;		On entry : C/2
 25512 ;;		On exit  : C/0
 25513 ;;		Unchanged: C/0
 25514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25515 ;;      Params:         6       0       0       0       0       0       0
 25516 ;;      Locals:         0       0       0       0       0       0       0
 25517 ;;      Temps:          0       0       0       0       0       0       0
 25518 ;;      Totals:         6       0       0       0       0       0       0
 25519 ;;Total ram usage:        6 bytes
 25520 ;; Hardware stack levels used:    1
 25521 ;; Hardware stack levels required when called:    2
 25522 ;; This function calls:
 25523 ;;		Nothing
 25524 ;; This function is called by:
 25525 ;;		_main
 25526 ;; This function uses a non-reentrant model
 25527 ;;
 25528                           
 25529                           	psect	text80
 25530  004E0A                     __ptext80:
 25531                           	opt stack 0
 25532  004E0A                     _fifo_init:
 25533                           	opt stack 28
 25534                           
 25535                           ;fifo.c: 15: f->head = 0;
 25536                           
 25537                           ;incstack = 0
 25538                           ;incstack = 0
 25539  004E0A  EE20 F002          	lfsr	2,2
 25540  004E0E  D816               	call	PL92	;call to abstracted procedure
 25541                           
 25542                           ;fifo.c: 16: f->tail = 0;
 25543  004E10  EE20 F004          	lfsr	2,4
 25544  004E14  D813               	call	PL92	;call to abstracted procedure
 25545                           
 25546                           ;fifo.c: 17: f->size = size;
 25547  004E16  EE20 F006          	lfsr	2,6
 25548  004E1A  5019               	movf	fifo_init@f,w,c
 25549  004E1C  26D9               	addwf	fsr2l,f,c
 25550  004E1E  501A               	movf	fifo_init@f+1,w,c
 25551  004E20  22DA               	addwfc	fsr2h,f,c
 25552  004E22  C01D  FFDE         	movff	fifo_init@size,postinc2
 25553  004E26  C01E  FFDD         	movff	fifo_init@size+1,postdec2
 25554                           
 25555                           ;fifo.c: 18: f->buf = buf;
 25556  004E2A  C019  FFD9         	movff	fifo_init@f,fsr2l
 25557  004E2E  C01A  FFDA         	movff	fifo_init@f+1,fsr2h
 25558  004E32  C01B  FFDE         	movff	fifo_init@buf,postinc2
 25559  004E36  C01C  FFDD         	movff	fifo_init@buf+1,postdec2
 25560  004E3A  0012               	return	
 25561  004E3C                     __end_of_fifo_init:
 25562                           	opt stack 0
 25563  004E3C                     PL92:
 25564                           	opt stack 28
 25565  004E3C  5019               	movf	fifo_init@f,w,c
 25566  004E3E  26D9               	addwf	fsr2l,f,c
 25567  004E40  501A               	movf	fifo_init@f+1,w,c
 25568  004E42  22DA               	addwfc	fsr2h,f,c
 25569  004E44  6ADE               	clrf	postinc2,c
 25570  004E46  6ADD               	clrf	postdec2,c
 25571  004E48  0012               	return	
 25572  004E4A                     __end_ofPL92:
 25573                           	opt stack 0
 25574                           tblptru	equ	0xFF8
 25575                           tblptrh	equ	0xFF7
 25576                           tblptrl	equ	0xFF6
 25577                           tablat	equ	0xFF5
 25578                           prodh	equ	0xFF4
 25579                           prodl	equ	0xFF3
 25580                           intcon	equ	0xFF2
 25581                           indf0	equ	0xFEF
 25582                           postinc0	equ	0xFEE
 25583                           fsr0h	equ	0xFEA
 25584                           fsr0l	equ	0xFE9
 25585                           wreg	equ	0xFE8
 25586                           indf1	equ	0xFE7
 25587                           postinc1	equ	0xFE6
 25588                           postdec1	equ	0xFE5
 25589                           fsr1h	equ	0xFE2
 25590                           fsr1l	equ	0xFE1
 25591                           indf2	equ	0xFDF
 25592                           postinc2	equ	0xFDE
 25593                           postdec2	equ	0xFDD
 25594                           plusw2	equ	0xFDB
 25595                           fsr2h	equ	0xFDA
 25596                           fsr2l	equ	0xFD9
 25597                           status	equ	0xFD8
 25598                           
 25599 ;; *************** function _Interrupt *****************
 25600 ;; Defined at:
 25601 ;;		line 232 in file "main.c"
 25602 ;; Parameters:    Size  Location     Type
 25603 ;;		None
 25604 ;; Auto vars:     Size  Location     Type
 25605 ;;  c               1   23[COMRAM] unsigned char 
 25606 ;; Return value:  Size  Location     Type
 25607 ;;		None               void
 25608 ;; Registers used:
 25609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25610 ;; Tracked objects:
 25611 ;;		On entry : 0/0
 25612 ;;		On exit  : 0/0
 25613 ;;		Unchanged: 0/0
 25614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25615 ;;      Params:         0       0       0       0       0       0       0
 25616 ;;      Locals:         1       0       0       0       0       0       0
 25617 ;;      Temps:          7       0       0       0       0       0       0
 25618 ;;      Totals:         8       0       0       0       0       0       0
 25619 ;;Total ram usage:        8 bytes
 25620 ;; Hardware stack levels used:    1
 25621 ;; Hardware stack levels required when called:    1
 25622 ;; This function calls:
 25623 ;;		_ReadUSART
 25624 ;;		_fifo_write
 25625 ;;		i1_WriteTimer0
 25626 ;; This function is called by:
 25627 ;;		Interrupt level 1
 25628 ;; This function uses a non-reentrant model
 25629 ;;
 25630                           
 25631                           	psect	intcodelo
 25632  000018                     __pintcodelo:
 25633                           	opt stack 0
 25634  000018                     _Interrupt:
 25635                           	opt stack 21
 25636                           
 25637                           ;incstack = 0
 25638  000018  CFD8 F011          	movff	status,??_Interrupt
 25639  00001C  CFE8 F012          	movff	wreg,??_Interrupt+1
 25640  000020  CFE0 F013          	movff	bsr,??_Interrupt+2
 25641  000024  CFE1 F014          	movff	fsr1l,??_Interrupt+3
 25642  000028  CFE2 F015          	movff	fsr1h,??_Interrupt+4
 25643  00002C  CFD9 F016          	movff	fsr2l,??_Interrupt+5
 25644  000030  CFDA F017          	movff	fsr2h,??_Interrupt+6
 25645  000034                     
 25646                           ;main.c: 233: uint8_t c;
 25647                           ;main.c: 236: if (1 == PIR1bits.RCIF) {
 25648  000034  AA9E               	btfss	3998,5,c	;volatile
 25649  000036  D001               	goto	i1u1099_21
 25650  000038  D001               	goto	i1u1099_20
 25651  00003A                     i1u1099_21:
 25652  00003A  D024               	goto	i1l401
 25653  00003C                     i1u1099_20:
 25654  00003C                     
 25655                           ;main.c: 238: c = ReadUSART();
 25656  00003C  EC9E  F028         	call	_ReadUSART	;wreg free
 25657  000040  6E18               	movwf	Interrupt@c,c
 25658  000042                     
 25659                           ;main.c: 240: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 25660  000042  0101               	movlb	1	; () banked
 25661  000044  0E01               	movlw	high _serialInputFifo
 25662  000046  6E02               	movwf	?_fifo_write+1,c
 25663  000048  0EC8               	movlw	low _serialInputFifo
 25664  00004A  6E01               	movwf	?_fifo_write,c
 25665  00004C  0E18               	movlw	low Interrupt@c
 25666  00004E  6E03               	movwf	?_fifo_write+2,c
 25667  000050  0E01               	movlw	1
 25668  000052  6E04               	movwf	?_fifo_write+3,c
 25669  000054  0E00               	movlw	0
 25670  000056  6E05               	movwf	?_fifo_write+4,c
 25671  000058  0E00               	movlw	0
 25672  00005A  6E06               	movwf	?_fifo_write+5,c
 25673  00005C  0E00               	movlw	0
 25674  00005E  6E07               	movwf	?_fifo_write+6,c
 25675  000060  EC3E  F019         	call	_fifo_write	;wreg free
 25676  000064  0401               	decf	?_fifo_write,w,c
 25677  000066  1002               	iorwf	?_fifo_write+1,w,c
 25678  000068  B4D8               	btfsc	status,2,c
 25679  00006A  D001               	goto	i1u1100_21
 25680  00006C  D001               	goto	i1u1100_20
 25681  00006E                     i1u1100_21:
 25682  00006E  D008               	goto	i1l9210
 25683  000070                     i1u1100_20:
 25684  000070                     
 25685                           ; BSR set to: 1
 25686                           ;main.c: 242: uart_receiveOverruns++;
 25687  000070  0E01               	movlw	1
 25688  000072  2718               	addwf	_uart_receiveOverruns& (0+255),f,b
 25689  000074  0E00               	movlw	0
 25690  000076  2319               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 25691  000078  0E00               	movlw	0
 25692  00007A  231A               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 25693  00007C  0E00               	movlw	0
 25694  00007E  231B               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 25695  000080                     i1l9210:
 25696                           
 25697                           ; BSR set to: 1
 25698                           ;main.c: 243: }
 25699                           ;main.c: 246: PIR1bits.RCIF = 0;
 25700  000080  9A9E               	bcf	3998,5,c	;volatile
 25701                           
 25702                           ;main.c: 247: }
 25703  000082  D07D               	goto	i1l403
 25704  000084                     i1l401:
 25705                           
 25706                           ;main.c: 248: else if (1 == INTCONbits.TMR0IF) {
 25707  000084  A4F2               	btfss	intcon,2,c	;volatile
 25708  000086  D001               	goto	i1u1101_21
 25709  000088  D001               	goto	i1u1101_20
 25710  00008A                     i1u1101_21:
 25711  00008A  D079               	goto	i1l403
 25712  00008C                     i1u1101_20:
 25713  00008C                     
 25714                           ;main.c: 250: timer++;
 25715  00008C  0E01               	movlw	1
 25716  00008E  0100               	movlb	0	; () banked
 25717  000090  27CF               	addwf	_timer& (0+255),f,b	;volatile
 25718  000092  0E00               	movlw	0
 25719  000094  23D0               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 25720  000096  0E00               	movlw	0
 25721  000098  23D1               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 25722  00009A  0E00               	movlw	0
 25723  00009C  23D2               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 25724                           
 25725                           ;main.c: 251: timekeeper++;
 25726  00009E  0E01               	movlw	1
 25727  0000A0  27CB               	addwf	_timekeeper& (0+255),f,b	;volatile
 25728  0000A2  0E00               	movlw	0
 25729  0000A4  23CC               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 25730  0000A6  0E00               	movlw	0
 25731  0000A8  23CD               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 25732  0000AA  0E00               	movlw	0
 25733  0000AC  23CE               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 25734  0000AE                     
 25735                           ; BSR set to: 0
 25736                           ;main.c: 253: WriteTimer0(0xfb1d);
 25737  0000AE  0EFB               	movlw	251
 25738  0000B0  6E02               	movwf	?i1_WriteTimer0+1,c
 25739  0000B2  0E1D               	movlw	29
 25740  0000B4  6E01               	movwf	?i1_WriteTimer0,c
 25741  0000B6  ECE0  F028         	call	i1_WriteTimer0	;wreg free
 25742  0000BA                     
 25743                           ; BSR set to: 0
 25744                           ;main.c: 256: status_led_cnt++;
 25745  0000BA  4A35               	infsnz	_status_led_cnt,f,c	;volatile
 25746  0000BC  2A36               	incf	_status_led_cnt+1,f,c	;volatile
 25747  0000BE                     
 25748                           ; BSR set to: 0
 25749                           ;main.c: 257: if ((2 == ledFunctionality) &&
 25750                           ;main.c: 258: (status_led_cnt > 1000)) {
 25751  0000BE  503C               	movf	_ledFunctionality,w,c
 25752  0000C0  0A02               	xorlw	2
 25753  0000C2  A4D8               	btfss	status,2,c
 25754  0000C4  D001               	goto	i1u1102_21
 25755  0000C6  D001               	goto	i1u1102_20
 25756  0000C8                     i1u1102_21:
 25757  0000C8  D00C               	goto	i1l9224
 25758  0000CA                     i1u1102_20:
 25759  0000CA                     
 25760                           ; BSR set to: 0
 25761  0000CA  0EE9               	movlw	233
 25762  0000CC  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25763  0000CE  0E03               	movlw	3
 25764  0000D0  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25765  0000D2  A0D8               	btfss	status,0,c
 25766  0000D4  D001               	goto	i1u1103_21
 25767  0000D6  D001               	goto	i1u1103_20
 25768  0000D8                     i1u1103_21:
 25769  0000D8  D004               	goto	i1l9224
 25770  0000DA                     i1u1103_20:
 25771  0000DA                     i1l9222:
 25772                           
 25773                           ; BSR set to: 0
 25774                           ;main.c: 259: LATC1 = ~LATC1;
 25775  0000DA  728B               	btg	3979,1,c	;volatile
 25776                           
 25777                           ;main.c: 260: status_led_cnt = 0;
 25778  0000DC  6A35               	clrf	_status_led_cnt,c	;volatile
 25779  0000DE  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25780                           
 25781                           ;main.c: 261: } else if ((3 == ledFunctionality) &&
 25782  0000E0  D04D               	goto	i1l406
 25783  0000E2                     i1l9224:
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;main.c: 262: (status_led_cnt > 400)) {
 25787  0000E2  503C               	movf	_ledFunctionality,w,c
 25788  0000E4  0A03               	xorlw	3
 25789  0000E6  A4D8               	btfss	status,2,c
 25790  0000E8  D001               	goto	i1u1104_21
 25791  0000EA  D001               	goto	i1u1104_20
 25792  0000EC                     i1u1104_21:
 25793  0000EC  D009               	goto	i1l9230
 25794  0000EE                     i1u1104_20:
 25795  0000EE                     
 25796                           ; BSR set to: 0
 25797  0000EE  0E91               	movlw	145
 25798  0000F0  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25799  0000F2  0E01               	movlw	1
 25800  0000F4  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25801  0000F6  A0D8               	btfss	status,0,c
 25802  0000F8  D001               	goto	i1u1105_21
 25803  0000FA  D001               	goto	i1u1105_20
 25804  0000FC                     i1u1105_21:
 25805  0000FC  D001               	goto	i1l9230
 25806  0000FE                     i1u1105_20:
 25807  0000FE  D7ED               	goto	i1l9222
 25808  000100                     i1l9230:
 25809                           
 25810                           ; BSR set to: 0
 25811                           ;main.c: 266: (status_led_cnt > 100)) {
 25812  000100  503C               	movf	_ledFunctionality,w,c
 25813  000102  0A04               	xorlw	4
 25814  000104  A4D8               	btfss	status,2,c
 25815  000106  D001               	goto	i1u1106_21
 25816  000108  D001               	goto	i1u1106_20
 25817  00010A                     i1u1106_21:
 25818  00010A  D009               	goto	i1l9236
 25819  00010C                     i1u1106_20:
 25820  00010C                     
 25821                           ; BSR set to: 0
 25822  00010C  0E65               	movlw	101
 25823  00010E  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25824  000110  0E00               	movlw	0
 25825  000112  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25826  000114  A0D8               	btfss	status,0,c
 25827  000116  D001               	goto	i1u1107_21
 25828  000118  D001               	goto	i1u1107_20
 25829  00011A                     i1u1107_21:
 25830  00011A  D001               	goto	i1l9236
 25831  00011C                     i1u1107_20:
 25832  00011C  D7DE               	goto	i1l9222
 25833  00011E                     i1l9236:
 25834                           
 25835                           ; BSR set to: 0
 25836                           ;main.c: 270: (status_led_cnt > 70)) {
 25837  00011E  503C               	movf	_ledFunctionality,w,c
 25838  000120  0A05               	xorlw	5
 25839  000122  A4D8               	btfss	status,2,c
 25840  000124  D001               	goto	i1u1108_21
 25841  000126  D001               	goto	i1u1108_20
 25842  000128                     i1u1108_21:
 25843  000128  D009               	goto	i1l9242
 25844  00012A                     i1u1108_20:
 25845  00012A                     
 25846                           ; BSR set to: 0
 25847  00012A  0E47               	movlw	71
 25848  00012C  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25849  00012E  0E00               	movlw	0
 25850  000130  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25851  000132  A0D8               	btfss	status,0,c
 25852  000134  D001               	goto	i1u1109_21
 25853  000136  D001               	goto	i1u1109_20
 25854  000138                     i1u1109_21:
 25855  000138  D001               	goto	i1l9242
 25856  00013A                     i1u1109_20:
 25857  00013A  D7CF               	goto	i1l9222
 25858  00013C                     i1l9242:
 25859                           
 25860                           ; BSR set to: 0
 25861                           ;main.c: 274: (status_led_cnt > 40)) {
 25862  00013C  503C               	movf	_ledFunctionality,w,c
 25863  00013E  0A06               	xorlw	6
 25864  000140  A4D8               	btfss	status,2,c
 25865  000142  D001               	goto	i1u1110_21
 25866  000144  D001               	goto	i1u1110_20
 25867  000146                     i1u1110_21:
 25868  000146  D009               	goto	i1l9248
 25869  000148                     i1u1110_20:
 25870  000148                     
 25871                           ; BSR set to: 0
 25872  000148  0E29               	movlw	41
 25873  00014A  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25874  00014C  0E00               	movlw	0
 25875  00014E  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25876  000150  A0D8               	btfss	status,0,c
 25877  000152  D001               	goto	i1u1111_21
 25878  000154  D001               	goto	i1u1111_20
 25879  000156                     i1u1111_21:
 25880  000156  D001               	goto	i1l9248
 25881  000158                     i1u1111_20:
 25882  000158  D7C0               	goto	i1l9222
 25883  00015A                     i1l9248:
 25884                           
 25885                           ; BSR set to: 0
 25886  00015A  043C               	decf	_ledFunctionality,w,c
 25887  00015C  A4D8               	btfss	status,2,c
 25888  00015E  D001               	goto	i1u1112_21
 25889  000160  D001               	goto	i1u1112_20
 25890  000162                     i1u1112_21:
 25891  000162  D004               	goto	i1l415
 25892  000164                     i1u1112_20:
 25893  000164                     
 25894                           ; BSR set to: 0
 25895                           ;main.c: 278: LATC1 = 1;
 25896  000164  828B               	bsf	3979,1,c	;volatile
 25897                           
 25898                           ;main.c: 279: status_led_cnt = 0;
 25899  000166  6A35               	clrf	_status_led_cnt,c	;volatile
 25900  000168  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25901                           
 25902                           ;main.c: 280: } else if (0 == ledFunctionality) {
 25903  00016A  D008               	goto	i1l406
 25904  00016C                     i1l415:
 25905                           
 25906                           ; BSR set to: 0
 25907  00016C  663C               	tstfsz	_ledFunctionality,c
 25908  00016E  D001               	goto	i1u1113_21
 25909  000170  D001               	goto	i1u1113_20
 25910  000172                     i1u1113_21:
 25911  000172  D004               	goto	i1l412
 25912  000174                     i1u1113_20:
 25913  000174                     
 25914                           ; BSR set to: 0
 25915                           ;main.c: 281: LATC1 = 0;
 25916  000174  928B               	bcf	3979,1,c	;volatile
 25917                           
 25918                           ;main.c: 282: status_led_cnt = 0;
 25919  000176  6A35               	clrf	_status_led_cnt,c	;volatile
 25920  000178  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25921  00017A  D000               	goto	i1l406
 25922  00017C                     i1l412:
 25923  00017C                     i1l406:
 25924                           
 25925                           ; BSR set to: 0
 25926                           ;main.c: 283: }
 25927                           ;main.c: 285: INTCONbits.TMR0IF = 0;
 25928  00017C  94F2               	bcf	intcon,2,c	;volatile
 25929  00017E                     i1l403:
 25930                           
 25931                           ;main.c: 286: }
 25932                           ;main.c: 288: if ( 1 == PIR3bits.RXBNIF ) {
 25933  00017E  A2A4               	btfss	4004,1,c	;volatile
 25934  000180  D001               	goto	i1u1114_21
 25935  000182  D001               	goto	i1u1114_20
 25936  000184                     i1u1114_21:
 25937  000184  D001               	goto	i1l419
 25938  000186                     i1u1114_20:
 25939  000186                     
 25940                           ;main.c: 290: PIR3bits.RXBNIF = 0;
 25941  000186  92A4               	bcf	4004,1,c	;volatile
 25942  000188                     i1l419:
 25943  000188  C017  FFDA         	movff	??_Interrupt+6,fsr2h
 25944  00018C  C016  FFD9         	movff	??_Interrupt+5,fsr2l
 25945  000190  C015  FFE2         	movff	??_Interrupt+4,fsr1h
 25946  000194  C014  FFE1         	movff	??_Interrupt+3,fsr1l
 25947  000198  C013  FFE0         	movff	??_Interrupt+2,bsr
 25948  00019C  C012  FFE8         	movff	??_Interrupt+1,wreg
 25949  0001A0  C011  FFD8         	movff	??_Interrupt,status
 25950  0001A4  0010               	retfie	
 25951  0001A6                     __end_of_Interrupt:
 25952                           	opt stack 0
 25953                           tblptru	equ	0xFF8
 25954                           tblptrh	equ	0xFF7
 25955                           tblptrl	equ	0xFF6
 25956                           tablat	equ	0xFF5
 25957                           prodh	equ	0xFF4
 25958                           prodl	equ	0xFF3
 25959                           intcon	equ	0xFF2
 25960                           indf0	equ	0xFEF
 25961                           postinc0	equ	0xFEE
 25962                           fsr0h	equ	0xFEA
 25963                           fsr0l	equ	0xFE9
 25964                           wreg	equ	0xFE8
 25965                           indf1	equ	0xFE7
 25966                           postinc1	equ	0xFE6
 25967                           postdec1	equ	0xFE5
 25968                           fsr1h	equ	0xFE2
 25969                           fsr1l	equ	0xFE1
 25970                           bsr	equ	0xFE0
 25971                           indf2	equ	0xFDF
 25972                           postinc2	equ	0xFDE
 25973                           postdec2	equ	0xFDD
 25974                           plusw2	equ	0xFDB
 25975                           fsr2h	equ	0xFDA
 25976                           fsr2l	equ	0xFD9
 25977                           status	equ	0xFD8
 25978                           
 25979 ;; *************** function i1_WriteTimer0 *****************
 25980 ;; Defined at:
 25981 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25982 ;; Parameters:    Size  Location     Type
 25983 ;;  timer0          2    0[COMRAM] unsigned int 
 25984 ;; Auto vars:     Size  Location     Type
 25985 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 25986 ;; Return value:  Size  Location     Type
 25987 ;;		None               void
 25988 ;; Registers used:
 25989 ;;		None
 25990 ;; Tracked objects:
 25991 ;;		On entry : F/0
 25992 ;;		On exit  : F/0
 25993 ;;		Unchanged: F/0
 25994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25995 ;;      Params:         2       0       0       0       0       0       0
 25996 ;;      Locals:         2       0       0       0       0       0       0
 25997 ;;      Temps:          0       0       0       0       0       0       0
 25998 ;;      Totals:         4       0       0       0       0       0       0
 25999 ;;Total ram usage:        4 bytes
 26000 ;; Hardware stack levels used:    1
 26001 ;; This function calls:
 26002 ;;		Nothing
 26003 ;; This function is called by:
 26004 ;;		_Interrupt
 26005 ;; This function uses a non-reentrant model
 26006 ;;
 26007                           
 26008                           	psect	text82
 26009  0051C0                     __ptext82:
 26010                           	opt stack 0
 26011  0051C0                     i1_WriteTimer0:
 26012                           	opt stack 21
 26013                           
 26014                           ; BSR set to: 0
 26015                           
 26016                           ;incstack = 0
 26017                           ;incstack = 0
 26018  0051C0  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 26019  0051C4  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 26020  0051C8  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 26021  0051CC  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 26022                           
 26023                           ; BSR set to: 0
 26024  0051D0  0012               	return	
 26025  0051D2                     __end_ofi1_WriteTimer0:
 26026                           	opt stack 0
 26027                           tblptru	equ	0xFF8
 26028                           tblptrh	equ	0xFF7
 26029                           tblptrl	equ	0xFF6
 26030                           tablat	equ	0xFF5
 26031                           prodh	equ	0xFF4
 26032                           prodl	equ	0xFF3
 26033                           intcon	equ	0xFF2
 26034                           indf0	equ	0xFEF
 26035                           postinc0	equ	0xFEE
 26036                           fsr0h	equ	0xFEA
 26037                           fsr0l	equ	0xFE9
 26038                           wreg	equ	0xFE8
 26039                           indf1	equ	0xFE7
 26040                           postinc1	equ	0xFE6
 26041                           postdec1	equ	0xFE5
 26042                           fsr1h	equ	0xFE2
 26043                           fsr1l	equ	0xFE1
 26044                           bsr	equ	0xFE0
 26045                           indf2	equ	0xFDF
 26046                           postinc2	equ	0xFDE
 26047                           postdec2	equ	0xFDD
 26048                           plusw2	equ	0xFDB
 26049                           fsr2h	equ	0xFDA
 26050                           fsr2l	equ	0xFD9
 26051                           status	equ	0xFD8
 26052                           
 26053 ;; *************** function _fifo_write *****************
 26054 ;; Defined at:
 26055 ;;		line 61 in file "fifo.c"
 26056 ;; Parameters:    Size  Location     Type
 26057 ;;  f               2    0[COMRAM] PTR struct .
 26058 ;;		 -> serialInputFifo(8), 
 26059 ;;  buf             1    2[COMRAM] PTR const void 
 26060 ;;		 -> Interrupt@c(1), 
 26061 ;;  nbytes          4    3[COMRAM] unsigned long 
 26062 ;; Auto vars:     Size  Location     Type
 26063 ;;  i               4   12[COMRAM] unsigned long 
 26064 ;;  p               1   11[COMRAM] PTR const unsigned char 
 26065 ;;		 -> Interrupt@c(1), 
 26066 ;; Return value:  Size  Location     Type
 26067 ;;                  2    0[COMRAM] unsigned short 
 26068 ;; Registers used:
 26069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26070 ;; Tracked objects:
 26071 ;;		On entry : F/1
 26072 ;;		On exit  : F/1
 26073 ;;		Unchanged: F/0
 26074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26075 ;;      Params:         7       0       0       0       0       0       0
 26076 ;;      Locals:         5       0       0       0       0       0       0
 26077 ;;      Temps:          4       0       0       0       0       0       0
 26078 ;;      Totals:        16       0       0       0       0       0       0
 26079 ;;Total ram usage:       16 bytes
 26080 ;; Hardware stack levels used:    1
 26081 ;; This function calls:
 26082 ;;		Nothing
 26083 ;; This function is called by:
 26084 ;;		_Interrupt
 26085 ;; This function uses a non-reentrant model
 26086 ;;
 26087                           
 26088                           	psect	text83
 26089  00327C                     __ptext83:
 26090                           	opt stack 0
 26091  00327C                     _fifo_write:
 26092                           	opt stack 21
 26093                           
 26094                           ; BSR set to: 1
 26095                           ;fifo.c: 62: uint32_t i;
 26096                           ;fifo.c: 63: const uint8_t *p;
 26097                           ;fifo.c: 64: p = buf;
 26098                           
 26099                           ; BSR set to: 0
 26100                           ;incstack = 0
 26101                           ;incstack = 0
 26102  00327C  C003  F00C         	movff	fifo_write@buf,fifo_write@p
 26103                           
 26104                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 26105  003280  6A0D               	clrf	fifo_write@i,c
 26106  003282  6A0E               	clrf	fifo_write@i+1,c
 26107  003284  6A0F               	clrf	fifo_write@i+2,c
 26108  003286  6A10               	clrf	fifo_write@i+3,c
 26109  003288  D067               	goto	i1l7104
 26110  00328A                     i1l7084:
 26111                           
 26112                           ; BSR set to: 1
 26113                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 26114                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 26115  00328A  EE20 F004          	lfsr	2,4
 26116  00328E  5001               	movf	fifo_write@f,w,c
 26117  003290  D871               	call	PL14	;call to abstracted procedure
 26118  003292  E102               	bnz	i1u753_25
 26119  003294  5008               	movf	??_fifo_write,w,c
 26120  003296  180A               	xorwf	??_fifo_write+2,w,c
 26121  003298                     i1u753_25:
 26122  003298  E011               	bz	i1l1432
 26123                           
 26124                           ; BSR set to: 1
 26125  00329A  EE20 F006          	lfsr	2,6
 26126  00329E  5001               	movf	fifo_write@f,w,c
 26127  0032A0  D869               	call	PL14	;call to abstracted procedure
 26128  0032A2  E102               	bnz	i1u754_25
 26129  0032A4  5008               	movf	??_fifo_write,w,c
 26130  0032A6  180A               	xorwf	??_fifo_write+2,w,c
 26131  0032A8                     i1u754_25:
 26132  0032A8  E10E               	bnz	i1l7092
 26133                           
 26134                           ; BSR set to: 1
 26135  0032AA  EE20 F004          	lfsr	2,4
 26136  0032AE  5001               	movf	fifo_write@f,w,c
 26137  0032B0  26D9               	addwf	fsr2l,f,c
 26138  0032B2  5002               	movf	fifo_write@f+1,w,c
 26139  0032B4  22DA               	addwfc	fsr2h,f,c
 26140  0032B6  50DE               	movf	postinc2,w,c
 26141  0032B8  10DD               	iorwf	postdec2,w,c
 26142  0032BA  E105               	bnz	i1l7092
 26143  0032BC                     i1l1432:
 26144                           
 26145                           ; BSR set to: 1
 26146                           ;fifo.c: 71: return i;
 26147  0032BC  C00D  F001         	movff	fifo_write@i,?_fifo_write
 26148  0032C0  C00E  F002         	movff	fifo_write@i+1,?_fifo_write+1
 26149  0032C4  D056               	goto	i1l1433
 26150  0032C6                     i1l7092:
 26151                           
 26152                           ; BSR set to: 1
 26153                           ;fifo.c: 73: else {
 26154                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 26155  0032C6  500C               	movf	fifo_write@p,w,c
 26156  0032C8  6ED9               	movwf	fsr2l,c
 26157  0032CA  6ADA               	clrf	fsr2h,c
 26158  0032CC  EE10 F002          	lfsr	1,2
 26159  0032D0  5001               	movf	fifo_write@f,w,c
 26160  0032D2  26E1               	addwf	fsr1l,f,c
 26161  0032D4  5002               	movf	fifo_write@f+1,w,c
 26162  0032D6  22E2               	addwfc	fsr1h,f,c
 26163  0032D8  CFE6 F008          	movff	postinc1,??_fifo_write
 26164  0032DC  CFE5 F009          	movff	postdec1,??_fifo_write+1
 26165  0032E0  C001  FFE1         	movff	fifo_write@f,fsr1l
 26166  0032E4  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 26167  0032E8  CFE6 F00A          	movff	postinc1,??_fifo_write+2
 26168  0032EC  CFE5 F00B          	movff	postdec1,??_fifo_write+3
 26169  0032F0  5008               	movf	??_fifo_write,w,c
 26170  0032F2  240A               	addwf	??_fifo_write+2,w,c
 26171  0032F4  6EE1               	movwf	fsr1l,c
 26172  0032F6  5009               	movf	??_fifo_write+1,w,c
 26173  0032F8  200B               	addwfc	??_fifo_write+3,w,c
 26174  0032FA  6EE2               	movwf	fsr1h,c
 26175  0032FC  CFDF FFE7          	movff	indf2,indf1
 26176                           
 26177                           ; BSR set to: 1
 26178  003300  2A0C               	incf	fifo_write@p,f,c
 26179                           
 26180                           ; BSR set to: 1
 26181                           ;fifo.c: 75: f->head++;
 26182  003302  EE20 F002          	lfsr	2,2
 26183  003306  5001               	movf	fifo_write@f,w,c
 26184  003308  26D9               	addwf	fsr2l,f,c
 26185  00330A  5002               	movf	fifo_write@f+1,w,c
 26186  00330C  22DA               	addwfc	fsr2h,f,c
 26187  00330E  2ADE               	incf	postinc2,f,c
 26188  003310  0E00               	movlw	0
 26189  003312  22DD               	addwfc	postdec2,f,c
 26190                           
 26191                           ; BSR set to: 1
 26192                           ;fifo.c: 76: if (f->head == f->size) {
 26193  003314  EE20 F006          	lfsr	2,6
 26194  003318  5001               	movf	fifo_write@f,w,c
 26195  00331A  26D9               	addwf	fsr2l,f,c
 26196  00331C  5002               	movf	fifo_write@f+1,w,c
 26197  00331E  22DA               	addwfc	fsr2h,f,c
 26198  003320  EE10 F002          	lfsr	1,2
 26199  003324  5001               	movf	fifo_write@f,w,c
 26200  003326  26E1               	addwf	fsr1l,f,c
 26201  003328  5002               	movf	fifo_write@f+1,w,c
 26202  00332A  22E2               	addwfc	fsr1h,f,c
 26203  00332C  52E6               	movf	postinc1,f,c
 26204  00332E  52DE               	movf	postinc2,f,c
 26205  003330  50DD               	movf	postdec2,w,c
 26206  003332  18E5               	xorwf	postdec1,w,c
 26207  003334  CFDF FFE8          	movff	indf2,wreg
 26208  003338  B4D8               	btfsc	status,2,c
 26209  00333A  18E7               	xorwf	indf1,w,c
 26210  00333C  E108               	bnz	i1l7102
 26211                           
 26212                           ; BSR set to: 1
 26213                           ;fifo.c: 77: f->head = 0;
 26214  00333E  EE20 F002          	lfsr	2,2
 26215  003342  5001               	movf	fifo_write@f,w,c
 26216  003344  26D9               	addwf	fsr2l,f,c
 26217  003346  5002               	movf	fifo_write@f+1,w,c
 26218  003348  22DA               	addwfc	fsr2h,f,c
 26219  00334A  6ADE               	clrf	postinc2,c
 26220  00334C  6ADD               	clrf	postdec2,c
 26221  00334E                     i1l7102:
 26222                           
 26223                           ; BSR set to: 1
 26224  00334E  2A0D               	incf	fifo_write@i,f,c
 26225  003350  0E00               	movlw	0
 26226  003352  220E               	addwfc	fifo_write@i+1,f,c
 26227  003354  220F               	addwfc	fifo_write@i+2,f,c
 26228  003356  2210               	addwfc	fifo_write@i+3,f,c
 26229  003358                     i1l7104:
 26230                           
 26231                           ; BSR set to: 1
 26232  003358  5004               	movf	fifo_write@nbytes,w,c
 26233  00335A  5C0D               	subwf	fifo_write@i,w,c
 26234  00335C  5005               	movf	fifo_write@nbytes+1,w,c
 26235  00335E  580E               	subwfb	fifo_write@i+1,w,c
 26236  003360  5006               	movf	fifo_write@nbytes+2,w,c
 26237  003362  580F               	subwfb	fifo_write@i+2,w,c
 26238  003364  5007               	movf	fifo_write@nbytes+3,w,c
 26239  003366  5810               	subwfb	fifo_write@i+3,w,c
 26240  003368  E390               	bnc	i1l7084
 26241                           
 26242                           ; BSR set to: 1
 26243                           ;fifo.c: 78: }
 26244                           ;fifo.c: 79: }
 26245                           ;fifo.c: 81: }
 26246                           ;fifo.c: 83: return nbytes;
 26247  00336A  C004  F001         	movff	fifo_write@nbytes,?_fifo_write
 26248  00336E  C005  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 26249  003372                     i1l1433:
 26250                           
 26251                           ; BSR set to: 1
 26252  003372  0012               	return	
 26253  003374                     __end_of_fifo_write:
 26254                           	opt stack 0
 26255  003374                     PL14:
 26256                           	opt stack 21
 26257  003374  26D9               	addwf	fsr2l,f,c
 26258  003376  5002               	movf	fifo_write@f+1,w,c
 26259  003378  22DA               	addwfc	fsr2h,f,c
 26260  00337A  CFDE F008          	movff	postinc2,??_fifo_write
 26261  00337E  CFDD F009          	movff	postdec2,??_fifo_write+1
 26262  003382  EE20 F002          	lfsr	2,2
 26263  003386  5001               	movf	fifo_write@f,w,c
 26264  003388  26D9               	addwf	fsr2l,f,c
 26265  00338A  5002               	movf	fifo_write@f+1,w,c
 26266  00338C  22DA               	addwfc	fsr2h,f,c
 26267  00338E  CFDE F00A          	movff	postinc2,??_fifo_write+2
 26268  003392  CFDD F00B          	movff	postdec2,??_fifo_write+3
 26269  003396  2A0A               	incf	??_fifo_write+2,f,c
 26270  003398  0E00               	movlw	0
 26271  00339A  220B               	addwfc	??_fifo_write+3,f,c
 26272  00339C  5009               	movf	??_fifo_write+1,w,c
 26273  00339E  180B               	xorwf	??_fifo_write+3,w,c
 26274  0033A0  0012               	return	
 26275  0033A2                     __end_ofPL14:
 26276                           	opt stack 0
 26277                           tblptru	equ	0xFF8
 26278                           tblptrh	equ	0xFF7
 26279                           tblptrl	equ	0xFF6
 26280                           tablat	equ	0xFF5
 26281                           prodh	equ	0xFF4
 26282                           prodl	equ	0xFF3
 26283                           intcon	equ	0xFF2
 26284                           indf0	equ	0xFEF
 26285                           postinc0	equ	0xFEE
 26286                           fsr0h	equ	0xFEA
 26287                           fsr0l	equ	0xFE9
 26288                           wreg	equ	0xFE8
 26289                           indf1	equ	0xFE7
 26290                           postinc1	equ	0xFE6
 26291                           postdec1	equ	0xFE5
 26292                           fsr1h	equ	0xFE2
 26293                           fsr1l	equ	0xFE1
 26294                           bsr	equ	0xFE0
 26295                           indf2	equ	0xFDF
 26296                           postinc2	equ	0xFDE
 26297                           postdec2	equ	0xFDD
 26298                           plusw2	equ	0xFDB
 26299                           fsr2h	equ	0xFDA
 26300                           fsr2l	equ	0xFD9
 26301                           status	equ	0xFD8
 26302                           
 26303 ;; *************** function _ReadUSART *****************
 26304 ;; Defined at:
 26305 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 26306 ;; Parameters:    Size  Location     Type
 26307 ;;		None
 26308 ;; Auto vars:     Size  Location     Type
 26309 ;;  data            1    0[COMRAM] unsigned char 
 26310 ;; Return value:  Size  Location     Type
 26311 ;;                  1    wreg      unsigned char 
 26312 ;; Registers used:
 26313 ;;		wreg, status,2, status,0
 26314 ;; Tracked objects:
 26315 ;;		On entry : 0/0
 26316 ;;		On exit  : 0/0
 26317 ;;		Unchanged: 0/0
 26318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26319 ;;      Params:         0       0       0       0       0       0       0
 26320 ;;      Locals:         1       0       0       0       0       0       0
 26321 ;;      Temps:          0       0       0       0       0       0       0
 26322 ;;      Totals:         1       0       0       0       0       0       0
 26323 ;;Total ram usage:        1 bytes
 26324 ;; Hardware stack levels used:    1
 26325 ;; This function calls:
 26326 ;;		Nothing
 26327 ;; This function is called by:
 26328 ;;		_Interrupt
 26329 ;; This function uses a non-reentrant model
 26330 ;;
 26331                           
 26332                           	psect	text84
 26333  00513C                     __ptext84:
 26334                           	opt stack 0
 26335  00513C                     _ReadUSART:
 26336                           	opt stack 21
 26337                           
 26338                           ; BSR set to: 1
 26339                           ;incstack = 0
 26340                           ;incstack = 0
 26341  00513C  0EF2               	movlw	242
 26342  00513E  1639               	andwf	_USART_Status,f,c
 26343  005140  ACAB               	btfss	4011,6,c	;volatile
 26344  005142  D003               	goto	i1l1739
 26345  005144  9039               	bcf	_USART_Status,0,c
 26346  005146  B0AB               	btfsc	4011,0,c	;volatile
 26347  005148  8039               	bsf	_USART_Status,0,c
 26348  00514A                     i1l1739:
 26349  00514A  B4AB               	btfsc	4011,2,c	;volatile
 26350  00514C  8439               	bsf	_USART_Status,2,c
 26351  00514E  B2AB               	btfsc	4011,1,c	;volatile
 26352  005150  8639               	bsf	_USART_Status,3,c
 26353  005152  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 26354  005156  5001               	movf	ReadUSART@data,w,c
 26355  005158  0012               	return	
 26356  00515A                     __end_of_ReadUSART:
 26357                           	opt stack 0
 26358                           tblptru	equ	0xFF8
 26359                           tblptrh	equ	0xFF7
 26360                           tblptrl	equ	0xFF6
 26361                           tablat	equ	0xFF5
 26362                           prodh	equ	0xFF4
 26363                           prodl	equ	0xFF3
 26364                           intcon	equ	0xFF2
 26365                           indf0	equ	0xFEF
 26366                           postinc0	equ	0xFEE
 26367                           fsr0h	equ	0xFEA
 26368                           fsr0l	equ	0xFE9
 26369                           wreg	equ	0xFE8
 26370                           indf1	equ	0xFE7
 26371                           postinc1	equ	0xFE6
 26372                           postdec1	equ	0xFE5
 26373                           fsr1h	equ	0xFE2
 26374                           fsr1l	equ	0xFE1
 26375                           bsr	equ	0xFE0
 26376                           indf2	equ	0xFDF
 26377                           postinc2	equ	0xFDE
 26378                           postdec2	equ	0xFDD
 26379                           plusw2	equ	0xFDB
 26380                           fsr2h	equ	0xFDA
 26381                           fsr2l	equ	0xFD9
 26382                           status	equ	0xFD8
 26383                           tblptru	equ	0xFF8
 26384                           tblptrh	equ	0xFF7
 26385                           tblptrl	equ	0xFF6
 26386                           tablat	equ	0xFF5
 26387                           prodh	equ	0xFF4
 26388                           prodl	equ	0xFF3
 26389                           intcon	equ	0xFF2
 26390                           indf0	equ	0xFEF
 26391                           postinc0	equ	0xFEE
 26392                           fsr0h	equ	0xFEA
 26393                           fsr0l	equ	0xFE9
 26394                           wreg	equ	0xFE8
 26395                           indf1	equ	0xFE7
 26396                           postinc1	equ	0xFE6
 26397                           postdec1	equ	0xFE5
 26398                           fsr1h	equ	0xFE2
 26399                           fsr1l	equ	0xFE1
 26400                           bsr	equ	0xFE0
 26401                           indf2	equ	0xFDF
 26402                           postinc2	equ	0xFDE
 26403                           postdec2	equ	0xFDD
 26404                           plusw2	equ	0xFDB
 26405                           fsr2h	equ	0xFDA
 26406                           fsr2l	equ	0xFD9
 26407                           status	equ	0xFD8
 26408                           
 26409                           	psect	rparam
 26410  0000                     tblptru	equ	0xFF8
 26411                           tblptrh	equ	0xFF7
 26412                           tblptrl	equ	0xFF6
 26413                           tablat	equ	0xFF5
 26414                           prodh	equ	0xFF4
 26415                           prodl	equ	0xFF3
 26416                           intcon	equ	0xFF2
 26417                           indf0	equ	0xFEF
 26418                           postinc0	equ	0xFEE
 26419                           fsr0h	equ	0xFEA
 26420                           fsr0l	equ	0xFE9
 26421                           wreg	equ	0xFE8
 26422                           indf1	equ	0xFE7
 26423                           postinc1	equ	0xFE6
 26424                           postdec1	equ	0xFE5
 26425                           fsr1h	equ	0xFE2
 26426                           fsr1l	equ	0xFE1
 26427                           bsr	equ	0xFE0
 26428                           indf2	equ	0xFDF
 26429                           postinc2	equ	0xFDE
 26430                           postdec2	equ	0xFDD
 26431                           plusw2	equ	0xFDB
 26432                           fsr2h	equ	0xFDA
 26433                           fsr2l	equ	0xFD9
 26434                           status	equ	0xFD8
 26435                           tblptru	equ	0xFF8
 26436                           tblptrh	equ	0xFF7
 26437                           tblptrl	equ	0xFF6
 26438                           tablat	equ	0xFF5
 26439                           prodh	equ	0xFF4
 26440                           prodl	equ	0xFF3
 26441                           intcon	equ	0xFF2
 26442                           indf0	equ	0xFEF
 26443                           postinc0	equ	0xFEE
 26444                           fsr0h	equ	0xFEA
 26445                           fsr0l	equ	0xFE9
 26446                           wreg	equ	0xFE8
 26447                           indf1	equ	0xFE7
 26448                           postinc1	equ	0xFE6
 26449                           postdec1	equ	0xFE5
 26450                           fsr1h	equ	0xFE2
 26451                           fsr1l	equ	0xFE1
 26452                           bsr	equ	0xFE0
 26453                           indf2	equ	0xFDF
 26454                           postinc2	equ	0xFDE
 26455                           postdec2	equ	0xFDD
 26456                           plusw2	equ	0xFDB
 26457                           fsr2h	equ	0xFDA
 26458                           fsr2l	equ	0xFD9
 26459                           status	equ	0xFD8


Data Sizes:
    Strings     4015
    Constant    120
    Data        0
    BSS         1128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     50      71
    BANK0           160    107     128
    BANK1           256      0     208
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(COMRAM[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_write	unsigned short  size(2) Largest target is 0

    ?_fifo_read	unsigned short  size(2) Largest target is 0

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_243(CODE[2]), STR_242(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_237(CODE[2]), 
		 -> STR_236(CODE[3]), STR_235(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_253(CODE[3]), STR_252(CODE[23]), STR_251(CODE[10]), STR_250(CODE[10]), 
		 -> STR_249(CODE[12]), STR_248(CODE[8]), STR_247(CODE[7]), STR_246(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_245(CODE[10]), STR_244(CODE[3]), STR_241(CODE[20]), 
		 -> STR_240(CODE[3]), STR_239(CODE[14]), STR_238(CODE[3]), STR_234(CODE[8]), 
		 -> STR_233(CODE[15]), STR_232(CODE[67]), STR_231(CODE[3]), STR_230(CODE[27]), 
		 -> STR_229(CODE[67]), STR_228(CODE[39]), STR_227(CODE[62]), STR_226(CODE[55]), 
		 -> STR_225(CODE[49]), STR_224(CODE[67]), STR_223(CODE[47]), STR_222(CODE[47]), 
		 -> STR_221(CODE[34]), STR_220(CODE[71]), STR_219(CODE[20]), STR_218(CODE[78]), 
		 -> STR_217(CODE[24]), STR_216(CODE[77]), STR_215(CODE[67]), STR_214(CODE[69]), 
		 -> STR_213(CODE[47]), STR_212(CODE[40]), STR_211(CODE[39]), STR_210(CODE[33]), 
		 -> STR_209(CODE[23]), STR_208(CODE[56]), STR_207(CODE[24]), STR_206(CODE[44]), 
		 -> STR_205(CODE[50]), STR_204(CODE[31]), STR_203(CODE[50]), STR_202(CODE[51]), 
		 -> STR_201(CODE[46]), STR_200(CODE[44]), STR_199(CODE[27]), STR_198(CODE[39]), 
		 -> STR_197(CODE[39]), STR_196(CODE[52]), STR_195(CODE[54]), STR_194(CODE[55]), 
		 -> STR_193(CODE[3]), STR_190(CODE[24]), STR_189(CODE[57]), STR_188(CODE[53]), 
		 -> STR_187(CODE[58]), STR_186(CODE[3]), STR_183(CODE[25]), STR_182(CODE[3]), 
		 -> STR_179(CODE[24]), STR_178(CODE[3]), STR_175(CODE[24]), STR_174(CODE[3]), 
		 -> STR_171(CODE[24]), STR_170(CODE[3]), STR_167(CODE[23]), STR_166(CODE[3]), 
		 -> STR_163(CODE[21]), STR_162(CODE[3]), STR_159(CODE[22]), STR_158(CODE[3]), 
		 -> STR_155(CODE[17]), STR_154(CODE[3]), STR_151(CODE[18]), STR_150(CODE[4]), 
		 -> STR_149(CODE[11]), STR_148(CODE[2]), STR_145(CODE[7]), STR_142(CODE[7]), 
		 -> STR_139(CODE[9]), STR_136(CODE[7]), STR_133(CODE[8]), STR_130(CODE[7]), 
		 -> STR_129(CODE[2]), STR_128(CODE[2]), STR_127(CODE[6]), STR_126(CODE[8]), 
		 -> STR_125(CODE[8]), STR_124(CODE[20]), STR_123(CODE[27]), STR_122(CODE[33]), 
		 -> STR_119(CODE[26]), STR_117(CODE[32]), STR_115(CODE[28]), STR_110(CODE[40]), 
		 -> STR_108(CODE[44]), STR_105(CODE[39]), STR_103(CODE[36]), STR_101(CODE[37]), 
		 -> STR_99(CODE[40]), STR_97(CODE[37]), STR_96(CODE[50]), STR_93(CODE[41]), 
		 -> STR_91(CODE[38]), STR_89(CODE[39]), STR_87(CODE[42]), STR_85(CODE[39]), 
		 -> STR_84(CODE[66]), STR_81(CODE[3]), STR_78(CODE[20]), STR_76(CODE[33]), 
		 -> STR_75(CODE[35]), STR_74(CODE[24]), STR_72(CODE[33]), STR_70(CODE[24]), 
		 -> STR_67(CODE[54]), STR_66(CODE[6]), STR_65(CODE[3]), STR_60(CODE[34]), 
		 -> STR_59(CODE[3]), STR_56(CODE[4]), wrkbuf(BANK1[80]), STR_51(CODE[15]), 
		 -> STR_49(CODE[33]), STR_47(CODE[24]), STR_43(CODE[6]), STR_39(CODE[18]), 
		 -> STR_38(CODE[6]), STR_36(CODE[33]), STR_35(CODE[6]), STR_27(CODE[24]), 
		 -> STR_26(CODE[18]), STR_25(CODE[20]), STR_24(CODE[25]), STR_23(CODE[22]), 
		 -> STR_22(CODE[19]), STR_21(CODE[20]), STR_20(CODE[20]), STR_18(CODE[6]), 
		 -> STR_16(CODE[6]), STR_14(CODE[6]), STR_12(CODE[6]), STR_10(CODE[6]), 
		 -> STR_8(CODE[6]), STR_6(CODE[31]), STR_4(CODE[29]), STR_3(CODE[55]), 
		 -> STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2148	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_255(CODE[17]), STR_254(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_192(CODE[3]), STR_191(CODE[7]), STR_185(CODE[3]), STR_184(CODE[7]), 
		 -> STR_181(CODE[4]), STR_180(CODE[8]), STR_177(CODE[4]), STR_176(CODE[8]), 
		 -> STR_173(CODE[4]), STR_172(CODE[8]), STR_169(CODE[4]), STR_168(CODE[8]), 
		 -> STR_165(CODE[4]), STR_164(CODE[7]), STR_161(CODE[4]), STR_160(CODE[7]), 
		 -> STR_157(CODE[4]), STR_156(CODE[7]), STR_153(CODE[4]), STR_152(CODE[7]), 
		 -> STR_147(CODE[3]), STR_146(CODE[7]), STR_144(CODE[3]), STR_143(CODE[7]), 
		 -> STR_141(CODE[3]), STR_140(CODE[7]), STR_138(CODE[3]), STR_137(CODE[7]), 
		 -> STR_135(CODE[3]), STR_134(CODE[7]), STR_132(CODE[3]), STR_131(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[7]), STR_64(CODE[3]), STR_63(CODE[7]), 
		 -> STR_62(CODE[3]), STR_61(CODE[7]), STR_58(CODE[3]), STR_57(CODE[7]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[3]), STR_52(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2128$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(COMRAM[1]), sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), 
		 -> sendVSCPDriverNack@crc(COMRAM[1]), sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(BANK0[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_192(CODE[3]), STR_191(CODE[7]), 

    printErrors$1411	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[3]), STR_184(CODE[7]), 

    printErrors$1405	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_181(CODE[4]), STR_180(CODE[8]), 

    printErrors$1399	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_177(CODE[4]), STR_176(CODE[8]), 

    printErrors$1393	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_173(CODE[4]), STR_172(CODE[8]), 

    printErrors$1387	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_169(CODE[4]), STR_168(CODE[8]), 

    printStatistics$1380	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_165(CODE[4]), STR_164(CODE[7]), 

    printStatistics$1374	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[4]), STR_160(CODE[7]), 

    printStatistics$1368	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_157(CODE[4]), STR_156(CODE[7]), 

    printStatistics$1362	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[4]), STR_152(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1171(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1305	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1300	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1295	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    receivePrintEventVerbose$1290	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_138(CODE[3]), STR_137(CODE[7]), 

    receivePrintEventVerbose$1285	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_135(CODE[3]), STR_134(CODE[7]), 

    receivePrintEventVerbose$1280	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_132(CODE[3]), STR_131(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), sendVSCPDriverNack@crc(COMRAM[1]), 
		 -> sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    doModeVerbose@p_1215	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1196	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1188	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_80(CODE[3]), STR_79(CODE[7]), 

    doModeVerbose@preg_1176	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1172	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1163	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[3]), STR_63(CODE[7]), 

    doModeVerbose$1159	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1153	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_58(CODE[3]), STR_57(CODE[7]), 

    doModeVerbose$1148	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_55(CODE[3]), STR_54(CODE[7]), 

    doModeVerbose$1136	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[3]), STR_52(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1124	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _main->_doModeVscp
    _hexStringToBytes->_strlen
    _receivePrintEventSLCAN->_getCANFrame
    _receivePrintEventSLCAN->_itoa
    _ultoa->___llmod
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receivePrintEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_readRegisterExtended
    _doModeVerbose->_sprintf
    _doModeVerbose->_writeRegisterExtended
    _printBinary->_WriteUSART
    _findNodes->_readRegister
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_fifo_write

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receivePrintEventSLCAN->_ultoa
    _doModeVscp->_receiveVSCPModeCanalMsg
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _receivePrintEventVerbose->_sprintf

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  126777
                                             49 COMRAM     1     1      0
                                            101 BANK0      6     1      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9700
                                             35 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
             _receivePrintEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                             28 COMRAM    14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventSLCAN                              10    10      0    5318
                                             13 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                              0 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   13500
                                             48 COMRAM     1     1      0
                          _fifo_read
               _ECANSetOperationMode
             _receivePrintEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1517
                                             39 COMRAM     3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1393
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             35 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                             24 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1393
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1455
                                             39 COMRAM     2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             36 COMRAM     5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventCANAL                              15    15      0    4057
                                              0 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     737
                                             36 COMRAM     3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                             31 COMRAM     5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                             24 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   99918
                                             81 BANK0     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                             24 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4932
                                             48 COMRAM     1     1      0
                                             62 BANK0     11     4      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                             25 COMRAM     5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4870
                                             48 COMRAM     1     1      0
                                             62 BANK0     11     4      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   24882
                                             76 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5245
                                             70 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6772
                                             70 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6577
                                             70 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4746
                                             48 COMRAM     1     1      0
                                             62 BANK0      8     4      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2199
                                             43 COMRAM     4     4      0
                                             35 BANK0     27    20      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             28 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             34 COMRAM     9     1      8
                                              0 BANK0     28    28      0
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                             24 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7420
                                             27 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7312
                                             27 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                             30 COMRAM     7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             36 COMRAM     4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             37 COMRAM     4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                             25 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                             28 COMRAM     9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    9919
                                             27 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        14     9      5    2361
                                              0 BANK0     14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     2      3    1954
                                             43 COMRAM     5     2      3
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  12     8      4    1720
                                             31 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     697
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      86
                                             24 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7003
                                             46 COMRAM     3     3      0
                                              0 BANK0     27    19      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fifo_read                                           14     8      6     446
                                             24 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                              0 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             40 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                             31 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                             25 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                             27 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                             24 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                            8     8      0     646
                                             16 COMRAM     8     8      0
                          _ReadUSART
                         _fifo_write
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         16     9      7     378
                                              0 COMRAM    16     9      7
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receivePrintEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receivePrintEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      80       5       80.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     32      47       1       74.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     354       3        0.0%
DATA                 0      0     54E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Feb 19 20:32:05 2015

                 __end_of_doModeVerbose 1346                            printBinary@i 001D  
                           fifo_write@f 0001                             fifo_write@i 000D  
                           fifo_write@p 000C                   __end_of_sendVSCPFrame 410C  
            doModeVerbose@filter_nodeid 0290                                      PL2 1346  
                                    PL4 4040                                      PL6 1354  
                                    PL8 1362                             __CFG_CPB$ON 000000  
                                    bsr 000FE0                     ___wmul@multiplicand 001B  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 51DC  
                                   PL10 13AC                                     PL20 1B26  
                                   PL12 1AF8                                     PL30 13E2  
                                   PL22 37CA                                     PL14 3374  
                                   PL40 1416                                     PL32 3580  
                                   PL24 3D08                                     PL16 13C8  
                                   PL50 1B66                                     PL42 1430  
                                   PL34 13F6                                     PL26 3F6E  
                                   PL18 1B16                                     PL60 454C  
                                   PL52 144A                                     PL44 1B4C  
                                   PL36 1408                                     PL28 38B6  
                                   PL70 349A                                     PL62 1B7C  
                                   PL54 35A4                                     PL46 3D18  
                                   PL38 3466                             __CFG_LVP$ON 000000  
                                   PL80 1B9E                                     PL72 3998  
                                   PL64 3474                                     PL56 2B5A  
                                   PL48 3594                                     PL90 266C  
                                   PL82 1F52                                     PL74 35B6  
                                   PL66 1B8A                                     PL58 1462  
                                   PL92 4E3C                                     PL84 1BB0  
                                   PL76 36C6                                     PL68 3488  
                                   PL94 326E                                     PL86 5042  
                                   PL78 34AE                                     PL96 35CA  
                                   PL88 29DA                                     PL98 1BBA  
               sendEscapedUartData@pcrc 0025                 receivePrintEventCANAL@i 0068  
                           __CFG_WDT$ON 000000                                     l503 089A  
                                   l512 0920                                     l531 09E6  
                                   l523 09BC                                     l507 0A06  
                                   l381 30EC                                     l526 09C6  
                                   l374 307E                                     l375 30BC  
                                   l800 3FF6                                     l705 1E8C  
                                   l722 48EA                                     l378 30D6  
                                   l539 0A5A                                     l731 492C  
                                   l803 400C                                     l379 30E0  
                                   l740 3C64                                     l628 2B58  
                                   l901 3262                                     l821 37F2  
                                   l718 48CA                                     l734 3C50  
                                   l806 402C                                     l830 3850  
                                   l670 1F50                                     l727 490C  
                                   l743 3C7C                                     l815 37DE  
                                   l904 326C                                     l752 3CF4  
                                   l824 380A                                     l680 1C84  
                                   l737 3C5A                                     l761 410E  
                                   l809 4036                                     l833 3868  
                                   l498 1344                                     l746 3CA8  
                                   l770 4146                                     l842 38AC  
                                   l818 37E8                                     l755 3CFE  
                                   l827 3838                                     l764 4118  
                                   l836 3880                                     l749 3CC0  
                                   l773 4174                                     l941 2900  
                                   l933 2894                                     l782 41B8  
                                   l871 23CA                                     l767 4122  
                                   l791 3F9C                                     l839 38A2  
                                   l776 418C                                     l960 29D8  
                                   l794 3FA6                                     l954 29AE  
                                   l938 28C6                                     l971 4268  
                                   l883 316C                                     l779 41AE  
                                   l947 294C                                     l980 3DF0  
                                   l892 319C                                     l788 3F92  
                                   l797 3FCA                                     l957 29CE  
                                   l878 245A                                     l886 3176  
                                   l879 246C                                     l968 41F6  
                                   l977 3D64                                     l889 3180  
                                   l898 3258                                     l995 3BBA  
                                   l998 3C48                          getVSCPFrame@id 006A  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _pos 00D8  
        __size_of_writeRegisterExtended 00DA                                     wreg 000FE8  
         __end_of_writeRegisterExtended 3C4A                 receivePrintEventSLCAN@i 0075  
              receivePrintEventCANAL@id 006A                                    l1014 4CDC  
                                  l1120 451A                                    l1018 4CE8  
                                  l1140 2700                                    l1117 44F4  
                                  l1141 2712                                    l1150 27B4  
                                  l1142 2724                                    l1127 48B4  
                                  l1151 27C6                                    l1143 2736  
                                  l1400 3464                                    l1152 27D8  
                                  l1144 2748                                    l1073 21F6  
                                  l1065 216E                                    l1153 27EA  
                                  l1145 275A                                    l1154 27FC  
                                  l1146 276C                                    l1138 26EE  
                                  l1171 50A6                                    l1163 4666  
                                  l1147 277E                                    l1155 2854  
                                  l1172 50AC                                    l1148 2790  
                                  l1421 3F4C                                    l1405 47CE  
                                  l1341 2FE8                                    l1333 2F48  
                                  l1149 27A2                                    l1335 2F66  
                                  l1167 4F78                                    l1079 39C0  
                                  l1424 3F6C                                    l2225 483C  
                                  l1361 2516                                    l1353 266A  
                                  l1346 24A6                                    l2235 4AAC  
                                  l1363 252A                                    l2411 44C8  
                                  l2308 4CAE                                    l1620 18FA  
                                  l1356 2574                                    l1365 253E  
                                  l1357 24F4                                    l2413 44BC  
                                  l2318 4EFA                                    l2414 44C0  
                                  l1470 4938                                    l1615 18B4  
                                  l1367 254E                                    l1359 2502  
                                  l1456 50F6                                    l1472 4940  
                                  l1713 4B4E                                    l1617 18DA  
                                  l1609 1872                                    l1545 15DC  
                                  l1529 1496                                    l1377 25D8  
                                  l1369 255E                                    l2361 4B18  
                                  l1714 4B50                                    l2194 42E8  
                                  l1618 18DE                                    l1562 15EC  
                                  l1546 158C                                    l1378 25F2  
                                  l1715 4B5A                                    l1395 357E  
                                  l1716 4B5C                                    l1636 1984  
                                  l2380 4760                                    l1709 4B3A  
                                  l1581 1710                                    l1565 1620  
                                  l2293 3974                                    l1493 433C  
                                  l1718 4B74                                    l1726 4BCC  
                                  l1566 1624                                    l2438 4D38  
                                  l1478 4996                                    l1494 43A2  
                                  l2447 4EC4                                    l2383 475C  
                                  l2359 4ABE                                    l1488 4E86  
                                  l2457 4D7C                                    l1676 5136  
                                  l1677 5138                                    l1918 37C0  
                                  l2399 4A5A                                    l1919 37C8  
                                  l9470 4880                                    l9376 494A  
                                  l9474 4894                                    l9466 486E  
                                  l9482 3ED0                                    l9378 4950  
                                  l9478 48A8                                    l9494 3F56  
                                  l9496 3F5A                                    STR_1 7953  
                                  STR_2 74B1                                    STR_3 73D9  
                                  STR_4 7B2B                                    STR_5 7FD0  
                                  STR_6 7AED                                    STR_7 7FB7  
                                  STR_8 7F80                                    STR_9 7F5E  
                                  _PEIE 007F96                          sendCANFrame@id 007C  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 001A  
                                  _bDLE 003B              __end_of_sendVSCPDriverNack 4040  
                                  _bHex 00D3            doModeVerbose@filter_priority 028E  
                                  _crc8 4FEA                                    _atoi 36DA  
                                  _main 2FEA                                    _init 4D86  
                                  _mode 00D7                                    _itoa 4FB2  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 426A  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 01A6  
                          _sprintf$2141 0069                            _sprintf$2142 006B  
                          _sprintf$2148 006D                             _writeEEPROM 50DA  
             ECANReceiveMessage@dataLen 0022                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0062                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4668  
                      __RegsToCANID@val 001B                        __RegsToCANID@ptr 0019  
                  __size_of_getCANFrame 002E                ?_receiveVSCPModeCanalMsg 0001  
              receivePrintEventSLCAN@id 0071                         ?_doModeVscpNode 0001  
                                 l10210 2B0A                                   l10122 2A3C  
                                 l10106 29F0                                   l11004 3DCE  
                                 l10204 2AF2                                   l11006 3DEE  
                                 l10222 2B3A                                   l10126 2A42  
                                 l10216 2B22                                   l10136 2A58  
                                 l10144 2A62                                   l10160 2A76  
                                 l10232 2B56                                   l10226 2B4A  
                                 l10170 2AA0                                   l10228 2B50  
                                 l10172 2AA6                                   l12014 2EE2  
                                 l10182 2AB8                                   l12200 263E  
                                 l12104 24D4                                   l12112 24E2  
                                 l12008 2ED0                                   l10184 2ABE  
                                 l10168 2A9A                                   _B0CON 000E20  
                                 l12106 24DE                                   l12042 2F68  
                                 l12026 2F0C                                   l13002 0E66  
                                 l12300 5116                                   l12220 4770  
                                 l10700 36DC                                   l12036 2F4C  
                                 l13012 0ECC                                   l10550 45CC  
                                 l12230 479E                                   l12222 477A  
                                 l12206 2654                                   l10710 3736  
                                 l10702 36E0                                   l12062 2FD8  
                                 l11430 3E1E                                   l11502 4416  
                                 l11414 3C26                                   l13102 1146  
                                 l13006 0E74                                   l10198 2ADC  
                                 l12400 4EDA                                   l14000 47FC  
                                 l12232 47A4                                   l12224 4784  
                                 l10712 374C                                   l12048 2F98  
                                 l12056 2FB6                                   l11416 3C46  
                                 l13112 119C                                   l13032 0F40  
                                 l13200 1C7E                                   _B1CON 000E30  
                                 l10538 45B2                                   l12402 4EDE  
                                 l12306 4272                                   l14010 482E  
                                 l14002 4800                                   l12226 478E  
                                 l12218 4768                                   l12250 3400  
                                 l10714 3752                                   l10730 50C8  
                                 l12066 2FDC                                   l11442 3E9E  
                                 l13130 1230                                   l13114 11AC  
                                 l13042 0F78                                   l11602 4FA8  
                                 l10396 4B3C                                   l10388 4B2E  
                                 l12316 42AA                                   l14020 4A78  
                                 l12228 4798                                   l12236 47B0  
                                 l12156 2588                                   l12420 4A40  
                                 l12412 49FC                                   l12068 2FDE  
                                 l11436 3E6A                                   l11516 280E  
                                 l13052 0FB2                                   l13028 0F32  
                                 l13204 1C8E                                   l13300 1F4E  
                                 l11358 5196                                   l12406 4EF0  
                                 l14022 4A7C                                   l12166 25A8  
                                 l12422 4A48                                   l12430 4EB0  
                                 l10662 46EC                                   l10718 378A  
                                 l10726 50B8                                   l11438 3E80  
                                 l11470 3684                                   l11374 4CF2  
                                 l11366 4CC2                                   l13150 12E8  
                                 l13118 11D2                                   l13062 0FEA  
                                 l13038 0F6A                                   l12192 2620  
                                 l12184 25F4                                   l12088 2494  
                                 l13312 224E                                   l12440 5184  
                                 l12416 4A34                                   l12432 4EB4  
                                 l10680 4446                                   l11528 350C  
                                 l13080 1078                                   l13072 1022  
                                 l13048 0FA4                                   l12280 4E72  
                                 l12272 4E60                                   l13216 1CBE  
                                 _B2CON 000E40                                   l10674 5166  
                                 l14026 4A9E                                   l14018 4A6C  
                                 l12098 24BE                                   l12426 4E94  
                                 l10666 4724                                   l10690 447E  
                                 l11474 36A2                                   l11466 3666  
                                 l11458 3600                                   l13154 130C  
                                 l13138 126E                                   l13146 12AC  
                                 l13058 0FDC                                   l13082 1088  
                                 l13162 1342                                   l13250 1E16  
                                 l13242 1D88                                   l13226 1CE6  
                                 l12530 30E8                                   l12522 30D2  
                                 l12380 4C86                                   l13324 229A  
                                 l10668 474A                                   l13404 2B8A  
                                 l11468 366E                                   l11492 43DA  
                                 l13156 131A                                   l13068 1014  
                                 l12620 0340                                   l12612 0306  
                                 l12604 02CA                                   l13260 1E3C  
                                 l12390 4CA4                                   l12382 4C8A  
                                 l11806 4F0E                                   l12446 4D48  
                                 l12454 4D04                                   l13502 209E  
                                 l10926 39F4                                   l13094 1108  
                                 l13158 1326                                   l11582 322E  
                                 l11822 434A                                   l13182 1C10  
                                 l12550 311C                                   l12542 3106  
                                 l11904 50A2                                   l13360 2380  
                                 l13336 22E8                                   l11808 4F12  
                                 l12448 4D50                                   l12456 4D0C  
                                 l13432 2C4E                                   l11496 4400  
                                 l10944 3A58                                   l12704 05A4  
                                 l12288 4E84                                   l13280 1E92  
                                 l13272 1E72                                   l12544 310C  
                                 _B3CON 000E50                                   l12378 4C7E  
                                 l13602 155A                                   l13418 2BEC  
                                 l11498 4408                                   l12730 06A4  
                                 l12722 065A                                   l12714 05FE  
                                 l12634 03B0                                   l11586 3248  
                                 l11842 4DF8                                   l13282 1EA4  
                                 l13194 1C5A                                   l13186 1C32  
                                 l13290 1F12                                   l12554 3128  
                                 l12546 3112                                   l12490 3044  
                                 l13700 1738                                   l13620 15E2  
                                 l13348 2334                                   l10964 4AE8  
                                 l13540 2188                                   l13532 215E  
                                 l13516 2100                                   l13460 1F78  
                                 l11852 4F76                                   l10956 505C  
                                 l12900 0BB8                                   l12820 0988  
                                 l12740 0708                                   l12732 06B4  
                                 l12716 0608                                   l12708 05CA  
                                 l12724 066A                                   l12660 0458  
                                 l12652 042C                                   l12644 03F4  
                                 l12628 037A                                   l12564 01B4  
                                 l11836 4DDC                                   l11828 438E  
                                 l13188 1C36                                   l12398 4ED2  
                                 l13622 15E6                                   l13614 1592  
                                 l13374 23D6                                   l13446 2CB0  
                                 l10958 5064                                   l12910 0C06  
                                 l12902 0BCC                                   l12670 0494  
                                 l11598 4F80                                   l13294 1F26  
                                 l13720 1786                                   l13632 1608  
                                 l13624 15EA                                   l13384 2442  
                                 l13552 21D6                                   l13528 214E  
                                 l12920 0C56                                   l12808 093A  
                                 l12744 073E                                   l12736 06DE  
                                 l12680 04E8                                   l12664 046E  
                                 l12656 0442                                   l12648 0414  
                                 l13296 1F32                                   l13288 1EBC  
                                 _B4CON 000E60                                   l11954 4FCE  
                                 l13722 178A                                   l13706 174E  
                                 l13642 1630                                   l13650 1654  
                                 l13626 15F0                                   l13618 15C8  
                                 l13570 14A4                                   l13562 147E  
                                 l11890 4608                                   l13386 2446  
                                 l13394 246A                                   l13474 1FDA  
                                 l12914 0C14                                   l12906 0BDA  
                                 l12834 09E0                                   l12762 07CA  
                                 l12578 01FA                                   l13708 1752  
                                 l13660 167E                                   l13644 163C  
                                 l13572 14A8                                   l13388 244E  
                                 l13556 21E6                                   l12932 0CC4  
                                 l12860 0A74                                   l12772 0844  
                                 l12748 0768                                   l12692 0548  
                                 l12668 0484                                   l12596 028E  
                                 l12588 0254                                   l13814 193E  
                                 l13822 195A                                   l13734 17BE  
                                 l13750 17F6                                   l13654 166A  
                                 l13638 162A                                   l13574 14AC  
                                 l12918 0C48                                   l12870 0AB6  
                                 l12774 0858                                   l12766 07DA  
                                 l12686 051A                                   l13832 196C  
                                 l13808 192A                                   l13760 1840  
                                 l13736 17C2                                   l13752 1808  
                                 l13664 168C                                   l13672 169E  
                                 l13568 14A0                                   l13488 203C  
                                 l11984 4246                                   l11992 4B80  
                                 l12848 0A26                                   _B5CON 000E70  
                                 l13842 1994                                   l13826 1964  
                                 l13682 16DA                                   l13658 1670  
                                 l13674 16CA                                   l13586 14EA  
                                 l13594 1532                                   l13578 14B2  
                                 l11986 4266                                   l11994 4B84  
                                 l12962 0D84                                   l12946 0D1E  
                                 l12890 0B40                                   l12778 0868  
                                 l12698 0576                                   l13930 2914  
                                 l13772 1876                                   l13756 1822  
                                 l13668 1698                                   l11996 4B92  
                                 l12972 0DBC                                   l12876 0AD2  
                                 l12868 0AB2                                   l12796 08EC  
                                 l12788 08A2                                   l13846 19A6  
                                 l13766 1852                                   l11998 4B9A  
                                 l12982 0DF6                                   l12966 0D92  
                                 l12894 0B4E                                   l12878 0AE2  
                                 l13942 296A                                   l13880 1A98  
                                 l13872 1A5A                                   l13864 19E2  
                                 l13848 19AC                                   l13792 18F4  
                                 l13784 18B8                                   l13696 171A  
                                 l12992 0E2E                                   l12976 0DCA  
                                 l13890 1ADA                                   l13866 1A38  
                                 l13882 1AAA                                   l13858 19CE  
                                 l13778 1890                                   l12986 0E04  
                                 l13938 2956                                   l13876 1A7E  
                                 l12996 0E3C                                   l13886 1AB8  
                                 l13798 190A                                   ?_crc8 0020  
                                 l13896 1AE2                                   l13968 38D6  
                                 l13898 1AEA                                   l13978 391A  
                                 l13998 47F0                    __size_of_doModeSLCAN 038E  
                    writeEEPROM@address 0019                                   ?_atoi 001F  
                                 ?_main 00C5                                   ?_init 0001  
                                 ?_itoa 0029                           i1_WriteTimer0 51C0  
                                 _EEADR 000FA9                                   STR_10 7F80  
                                 STR_11 7F92                                   STR_12 7F80  
                                 STR_20 7D83                                   STR_13 7ECD  
                                 STR_21 7D97                                   STR_14 7F80  
                                 STR_30 7FF5                                   STR_22 7DD3  
                                 STR_31 7FF5                                   STR_15 7F50  
                                 STR_23 7D06                                   STR_16 7F80  
                                 STR_32 7FF5                                   STR_40 7FCB  
                                 STR_24 7BCF                                   STR_33 7FF5  
                                 STR_41 7FD9                                   STR_17 7F0E  
                                 STR_25 7D6F                                   STR_18 7F80  
                                 STR_50 7F2B                                   STR_34 7FF5  
                                 STR_42 7FC6                                   STR_26 7DE6  
                                 STR_43 7F80                                   STR_35 7F80  
                                 STR_19 7F49                                   STR_51 7E5E  
                                 STR_27 7C49                                   STR_28 7FEB  
                                 STR_44 7FA3                                   STR_52 7F65  
                                 STR_36 7A49                                   STR_60 7A06  
                                 STR_61 7F65                                   STR_29 7FF5  
                                 STR_53 7FEE                                   STR_37 7FE8  
                                 STR_45 7FA8                                   STR_38 7F80  
                                 STR_70 7C31                                   STR_46 7F2B  
                                 STR_54 7F65                                   STR_62 7FEE  
                                 STR_71 7F2B                                   STR_63 7F65  
                                 STR_55 7FEE                                   STR_39 7DF8  
                                 STR_47 7C31                                   STR_72 7AAC  
                                 STR_48 7F2B                                   STR_56 7EEA  
                                 STR_80 7FEE                                   STR_64 7FEE  
                                 STR_81 74AE                                   STR_65 74AE  
                                 STR_73 7F2B                                   STR_57 7F65  
                                 STR_49 7AAC                                   STR_66 7F80  
                                 STR_90 7FF5                                   STR_58 7FEE  
                                 STR_82 7F57                                   STR_74 7C61  
                                 STR_59 74AE                                   STR_83 7FF5  
                                 STR_75 79C1                                   STR_91 7908  
                                 STR_67 7446                                   STR_92 7FF5  
                                 STR_68 7FAD                                   STR_76 7A8B  
                                 STR_84 7240                                   STR_69 7F2B  
                                 STR_77 7FBC                                   STR_85 781E  
                                 STR_93 777D                                   STR_86 7FF5  
                                 STR_94 7FB2                                   STR_78 7DAB  
                                 STR_95 7FF5                                   STR_79 7F65  
                                 STR_87 7753                                   STR_88 7FF5  
                                 STR_96 754D                                   STR_97 792E  
                                 STR_89 78BA                                   STR_98 7FF5  
                                 STR_99 77CE            __end_of_printFirmwareVersion 454C  
                                 _BSEL0 000DF8                         __end_of___lldiv 484E  
                                 ?_utoa 0020                         __end_of_calcCRC 4FB2  
                                 _T0CON 000FD5                                   u11340 4BEC  
                                 u11350 4C18                         __end_of___llmod 4ABE  
                                 u11347 4BE6                                   u11357 4C12  
                                 u13310 3748                                   u13330 3776  
                                 u13250 36FC                                   u13340 379C  
                                 u13317 3742                                   u13270 3712  
                                 _LATC1 007C59                                   u13337 3770  
                                 u13257 36F6                                   u13610 4ADA  
                                 u13290 372E                                   u13347 3796  
                                 u16005 3404                                   u13277 370C  
                                 u13630 4B10                                   u15400 465A  
                                 u15240 4F2E                                   u13617 4AD4  
                                 u13297 3728                                   u13385 408C  
                                 u15405 4650                                   u13637 4B0A  
                                 u15247 4F28                                   u14384 4CD2  
                                 u14385 4CCE                                   u14625 2692  
                                 u14626 2698                                   u14635 26C6  
                                 u14627 26A6                                   u14636 26CC  
                                 u14637 26DA                                   u17125 0C74  
                                 u14655 34E6                                   u17215 136A  
                                 u14665 34F6                                   u17225 0EEA  
                                 u17145 0D3C                                   u17065 0B02  
                                 u15570 4BC2                                   u15715 249C  
                                 u14675 3514                                   u17315 10A6  
                                 u15717 249E                                   u17325 10E6  
                                 u16605 03D0                                   u17335 1126  
                                 u16535 0234                                   u14935 3ACE  
                                 u15577 4BB8                                   u16705 04B4  
                                 u16545 0274                                   u16555 02AE  
                                 u16565 02EA                                   u16815 06D4  
                                 u16575 0326                                   u16825 06FE  
                                 u16585 0360                                   u17570 1D54  
                       __end_of___lwdiv 4CB8                                   u16835 0728  
                                 u16595 039A                                   u17580 1D5E  
                                 u16845 075E                                   u17590 1D68  
                                 u16855 0788                                   u17575 1D52  
                                 u15985 33C8                                   u17585 1D5C  
                                 u15995 33D8                                   u16795 068A  
                                 u17595 1D66                            _vscpPriority 00DD  
                                 i1l401 0084                                   u18777 3052  
                                 i1l403 017E                                   i1l412 017C  
                                 i1l406 017C                                   i1l415 016C  
                       __end_of___lwmod 4F04                                   i1l419 0188  
                       sendCANFrame@dlc 0080                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 001C  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00A0  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00D5                 readRegisterExtended@reg 00A0  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 430A                                   crc8@m 0022  
                       __end_of_dpowers 7030                         __end_of_isdigit 511E  
                                 _timer 00CF                                   atoi@a 0024  
                                 atoi@s 001F                                   main@c 00CA  
                                 _ultoa 38C6                              Interrupt@c 0018  
            ??_printNodeFirmwareVersion 0032                        _printErrors$1411 0083  
                      _printErrors$1420 0085                        _printErrors$1405 0081  
                      _printErrors$1393 007D                                   tablat 000FF5  
                      _printErrors$1387 007B                        _printErrors$1399 007F  
           __end_of_sendEscapedUartData 492E                                   plusw2 000FDB  
                                 utoa@c 0028                                   utoa@v 0026  
                                 status 000FD8                 ?_receivePrintEventCANAL 0001  
                       __end_of_sprintf 1AF8                         __end_of_strichr 4EC6  
                       __end_of_strcspn 4D42                         __end_of_toupper 5188  
                       __end_of_stristr 4762                 ?_receivePrintEventSLCAN 0001  
     __size_of_receivePrintEventVerbose 0276                     doModeVerbose@i_1118 02B0  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1124 02B2  
                   doModeVerbose@p_1215 02BB                     doModeVerbose@p_1172 02B4  
                   doModeVerbose@p_1196 02B9                          WriteUSART@data 0019  
                  _ECANSetOperationMode 515A                            _canInputFifo 01C0  
                       __initialization 4998                  doModeVerbose@page_1169 02A1  
                          __end_of_crc8 5020                            __end_of_atoi 37CA  
                          __end_of_main 3134                            __end_of_init 4DCA  
                          __end_of_itoa 4FEA                            __end_of_utoa 430A  
                   doModeVerbose@ifmode 02B6                     doModeVerbose@maskno 02A9  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 008A  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 0090  
                     ??_ECANSendMessage 002B                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00A3                                  ??_crc8 0023  
                 getVSCPFrame@pvscptype 0060                                  ??_atoi 0021  
                ??_vscp_restoreDefaults 001D                                  ??_main 0032  
                     readRegister@value 00A1                                  ??_init 001D  
                                ??_itoa 002F                                  ??_utoa 0026  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 003F                       __RegsToCANID@type 001C  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 0023  
                         ?_readRegister 009E               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1176 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00A1  
            ECANReceiveMessage@savedPtr 0025                                  _CANCON 000F6F  
                      ___llmod@dividend 0026                                  STR_100 7FF5  
                                STR_101 7978                                  STR_102 7FF5  
                                STR_110 77F6                                  STR_111 7E87  
                                STR_103 799D                                  STR_104 7FF5  
                                STR_120 7EEE                                  STR_112 7EBB  
                                STR_200 76FB                                  STR_121 7F8C  
                                STR_113 7F86                                  STR_105 7893  
                                STR_201 76A1                                  STR_106 7F9E  
                                STR_130 7F42                                  STR_114 7EFE  
                                STR_122 7A6A                                  STR_210 7A28  
                                STR_202 751A                                  STR_131 7F65  
                                STR_107 7FDD                                  STR_123 7B7F  
                                STR_115 7B48                                  STR_211 7845  
                                STR_203 757F                                  STR_140 7F65  
                                STR_132 7FEE                                  STR_116 7FC1  
                                STR_124 7D5B                                  STR_204 7B0C  
                                STR_212 77A6                                  STR_108 7727  
                                STR_220 70EB                                  STR_141 7FEE  
                                STR_109 7F06                                  STR_133 7EF6  
                                STR_125 7ED6                                  STR_117 7ACD  
                                STR_221 79E4                                  STR_213 7672  
                                STR_205 75B1                                  STR_150 7FD5  
                                STR_118 7F98                                  STR_134 7F6C  
                                STR_142 7F3B                                  STR_126 7EDE  
                                STR_230 7B9A                                  STR_206 76CF  
                                STR_222 7643                                  STR_214 7132  
                                STR_231 74AE                                  STR_143 7F65  
                                STR_135 7FEE                                  STR_127 7F7A  
                                STR_151 7E0A                                  STR_207 7C01  
                                STR_119 7BB5                                  STR_223 7614  
                                STR_215 71FD                                  STR_240 74AE  
                                STR_232 7177                                  STR_160 7F73  
                                STR_144 7FEE                                  STR_128 7FF3  
                                STR_152 7F73                                  STR_136 7F34  
                                STR_208 7333                                  STR_224 71BA  
                                STR_216 709E                                  STR_137 7F65  
                                STR_161 7FE1                                  STR_129 7FF1  
                                STR_153 7FE1                                  STR_145 7F2D  
                                STR_233 7E4F                                  STR_241 7DBF  
                                STR_209 7CC1                                  STR_217 7C19  
                                STR_225 75E3                                  STR_170 74AE  
                                STR_162 74AE                                  STR_154 74AE  
                                STR_146 7F65                                  STR_138 7FEE  
                                STR_242 7FFD                                  STR_234 7EE6  
                                STR_250 7EB1                                  STR_226 73A2  
                                STR_218 7050                                  STR_147 7FEE  
                                STR_235 7FF9                                  STR_243 7FF7  
                                STR_139 7EC4                                  STR_251 7EA7  
                                STR_155 7E3E                                  STR_219 7D47  
                                STR_163 7D32                                  STR_171 7CA9  
                                STR_227 7282                                  STR_244 74AE  
                                STR_148 7FF5                                  STR_164 7F73  
                                STR_156 7F73                                  STR_180 7F16  
                                STR_172 7F16                                  STR_236 7FE5  
                                STR_252 7CEF                                  STR_228 78E1  
                                STR_253 74AE                                  STR_181 7FE1  
                                STR_173 7FE1                                  STR_165 7FE1  
                                STR_157 7FE1                                  STR_237 7FFB  
                                STR_245 7E9D                                  STR_149 7E92  
                                STR_229 7177                                  _EEDATA 000FA8  
                                STR_246 74AE                                  STR_238 74AE  
                                STR_182 74AE                                  STR_174 74AE  
                                STR_166 74AE                                  STR_158 74AE  
                                STR_254 7E1C                                  STR_190 7C79  
                                STR_191 7F65                                  STR_247 7F26  
                                STR_239 7E6D                                  STR_255 7E2D  
                                STR_159 7D1C                                  STR_167 7CD8  
                                STR_175 7C91                                  STR_183 7BE8  
                                STR_184 7F65                                  STR_176 7F16  
                                STR_192 7FEE                                  STR_248 7F1E  
                                STR_168 7F16                                  STR_193 74AE  
                                STR_185 7FEE                                  STR_177 7FE1  
                                STR_169 7FE1                                  STR_249 7E7B  
                                STR_186 74AE                                  STR_178 74AE  
                                STR_194 736B                                  STR_179 7C91  
                                STR_195 7410                                  STR_187 72C0  
                                STR_196 74E6                                  STR_188 747C  
                                STR_197 786C                                  STR_189 72FA  
                                STR_198 7193                                  STR_199 7B64  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3DF2  
                                _CIOCON 000F73                         __CFG_BBSIZ$2048 000000  
                                ?_ultoa 0060            ??_sendVSCPDriverCommandReply 0029  
                                i1l1432 32BC                                  i1l1433 3372  
                         ?_init_app_ram 0001                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1739 514A  
                                i1l7102 334E                                  i1l7104 3358  
                            _OpenTimer0 511E                                  i1l7092 32C6  
                                i1l7084 328A          __end_of_receivePrintEventCANAL 326E  
                                i1l9210 0080                                  i1l9202 0034  
                                i1l9220 00CA                                  i1l9212 008C  
                                i1l9204 003C                                  i1l9230 0100  
                                i1l9222 00DA                                  i1l9214 00AE  
                                i1l9206 0042                                  i1l9232 010C  
                                i1l9224 00E2                                  i1l9216 00BA  
                                i1l9208 0070                                  i1l9250 0164  
                                i1l9242 013C                                  i1l9226 00EE  
                                i1l9218 00BE                                  i1l9252 0174  
                                i1l9244 0148                                  i1l9236 011E  
                                i1l9254 0186                                  i1l9238 012A  
                                i1l9248 015A                         _init_app_eeprom 455A  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                          __CFG_WDTPS$128 000000  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0020  
        __end_of_receivePrintEventSLCAN 29DA                  ECANReceiveMessage@mode 0028  
                ECANReceiveMessage@temp 0029                       getVSCPFrame@pData 0064  
            ??_sendVSCPDriverErrorFrame 0028                       getVSCPFrame@pSize 0063  
                    _doModeVerbose$1136 0294                      _doModeVerbose$1153 0298  
                    _doModeVerbose$1163 029C                      _doModeVerbose$1148 0296  
                    _doModeVerbose$1159 029A                      _doModeVerbose$1188 029E  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0022  
                    __size_of_Interrupt 018E                readRegisterExtended@page 009E  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0004  
                        getCANFrame@pid 002F                                  ___wmul 5020  
                            _bInitiated 00D4                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0021                               ??_calcCRC 0028  
                                _cmdbuf 0120                               ??___llmod 002E  
                      OpenTimer0@config 0019                               ??___lwdiv 001D  
                             ??___lwmod 001D           _receivePrintEventVerbose$1300 0088  
         _receivePrintEventVerbose$1305 008A           _receivePrintEventVerbose$1280 0080  
         _receivePrintEventVerbose$1290 0084           _receivePrintEventVerbose$1285 0082  
         _receivePrintEventVerbose$1295 0086                                  _memcpy 4DCA  
                                _memset 50AE                                  clear_0 49A0  
                                clear_1 49B4                                  clear_2 49C6  
                                clear_3 49D2                                  clear_4 49DE  
                                clear_5 49EA                           ?_sendCANFrame 007C  
                                _strcat 4B76                                  _strchr 4ABE  
                                _strcpy 5052                                  _strlen 4F04  
                                _wrkbuf 0170                                  _strtok 4438  
                                _strspn 4D42     __size_of_sendVSCPDriverCommandReply 00DE  
                             ??_isdigit 0019                        __end_of_printMDF 4438  
                          __mediumconst 6FD8                          ??_readRegister 00A2  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 006C  
                                ultoa@v 0068                            ?_printErrors 0001  
                             ??_sprintf 002F                               ??_strichr 001E  
                             ??_strcspn 0023                               ??_toupper 0019  
                        ??_init_app_ram 001C                               ??_stristr 002A  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 4A5C  
                            __accesstop 0060                 __end_of__initialization 49F0  
                  _printFirmwareVersion 44CA                         writeEEPROM@data 001B  
                 __size_of_getVSCPFrame 0084                    doModeVerbose@id_1227 02A3  
                            _WriteUSART 5188                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0188                    _printStatistics$1362 007B  
                  _printStatistics$1380 0081                    _printStatistics$1374 007F  
                  _printStatistics$1368 007D                   _uart_transmitOverruns 011C  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 3998  
                            __end_ofPL2 1354                              __end_ofPL4 4050  
                            __end_ofPL6 1362                              __end_ofPL8 13AC  
                        ??_sendCANFrame 002C                       __end_of_ReadUSART 515A  
                         ?__RegsToCANID 0019             __size_of_ECANReceiveMessage 01FE  
                    sendVSCPFrame@pData 0089                         readRegister@reg 009E  
                  sendVSCPDriverAck@crc 0028                      __size_of_findNodes 00E6  
                        doModeSLCAN@dlc 008E                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00AC                  getVSCPFrame@pvscpclass 0069  
               __end_of_init_app_eeprom 45E4                       __end_of_Interrupt 01A6  
                         ReadUSART@data 0001                      readRegister@nodeid 0031  
                        _status_led_cnt 0035                      __RegsToCANID@Value 001F  
                            _crc8_table 0300                       __end_of_OpenUSART 4B76  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00AB  
                       setFilter@filter 0023                            sprintf@width 0072  
      __end_of_printNodeFirmwareVersion 3EC2                              _doModeVscp 29E8  
                               ??_ultoa 002F                            _getVSCPFrame 45E4  
                            __pbssBANK0 00CB                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0029  
                            calcCRC@len 0027                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0019                      __size_of_init_crc8 006A  
                         setFilter@eidh 0026                           setFilter@eidl 0027  
                         setFilter@sidh 0024                           setFilter@sidl 0025  
                          ?_writeEEPROM 0019                        ??_doModeVscpNode 0019  
                            _nTimeStamp 003D                __end_of_hexStringToBytes 43A4  
              ECANSetOperationMode@mode 0019                                 ?___wmul 0019  
                    __size_of_setFilter 01DC                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 003A  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 3F90  
                               _B5RXFUL 007387                        WriteTimer0@timer 001B  
                         putsUSART@data 001A                    _readRegisterExtended 3D22  
                               ?_memcpy 0019                                 _ECANCON 000F77  
                               ?_memset 0019                           ??_WriteTimer0 001B  
                        ??__RegsToCANID 001D                   sendVSCPFrame@priority 0087  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0019  
                               ?_strchr 0019                                 ?_strcpy 0019  
                               ?_strlen 0019                                 ?_strtok 0025  
                               ?_strspn 001F                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00F2  
                   ?_sendVSCPDriverNack 0001                              _fifo_write 327C  
                    __size_of_printHelp 0180                      __size_of_printMode 0072  
                 sendVSCPFrame@vscptype 0085                 doModeVerbose@value_1171 02A7  
                     sendCANFrame@pdata 0081                              _made_table 0033  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4762  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0054  
    __end_of_sendVSCPDriverCommandReply 38B6              _sendVSCPDriverCommandReply 37D8  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 3B70        __size_of_receiveVSCPModeCanalMsg 00DE  
                __size_of_doModeVerbose 119C                    sendEscapedUartData@c 0027  
                __size_of_sendVSCPFrame 00BC        __end_of_sendVSCPDriverErrorFrame 3D08  
                            _readEEPROM 51AE                    ??_sendVSCPDriverNack 0028  
            printFirmwareVersion@wrkbuf 0060                         _ECANSendMessage 2E78  
                               __Hparam 0000                       __end_of_findNodes 3A92  
                               __Lparam 0000                       __end_of_fifo_init 4E3C  
                     __end_of_fifo_read 3F6E                           ??_getCANFrame 002F  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00A3  
                  __end_of_readRegister 426A                               ?_printMDF 0001  
                               _bSilent 00D6               receiveVSCPModeCanalMsg@id 009F  
                         ??_doModeSLCAN 0083                                 ___lldiv 47D8  
                       __size_of___wmul 0022                                 _calcCRC 4F7A  
                       getCANFrame@pdlc 002C                                 ___llmod 4A5C  
                               ___lwdiv 4C6E                               _FIFOEMPTY 007BA7  
                               ___lwmod 4EC6                   ?_readRegisterExtended 009E  
           printNodeFirmwareVersion@buf 00A7                    __end_of_init_app_ram 4C6E  
                          init_crc8@crc 001D                                 __pcinit 4998  
                       __size_of_memcpy 0040                         __size_of_memset 002C  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 001D                                 __ptext0 2FEA  
                               __ptext1 51DA                                 __ptext2 1BC4  
                               __ptext3 430A                                 __ptext4 4E4A  
                               __ptext5 2856                                 __ptext6 38C6  
                               __ptext7 29E8                                 __ptext8 37D8  
                               __ptext9 3F90                                 crc8@crc 0020  
         printNodeFirmwareVersion@value 00AA                       ??_printStatistics 0032  
                             _T0CONbits 000FD5                         __size_of_strcat 0056  
                       __size_of_strchr 005C                         __size_of_strcpy 002E  
                       __size_of_strlen 003C                       __end_of_hexpowers 7050  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 7008                       __end_of_init_crc8 4998  
                               _isdigit 5100          printNodeFirmwareVersion@nodeid 00A6  
                   __end_of_WriteTimer0 51AE                          _nibbleFromChar 4E4A  
                      ?_init_app_eeprom 0001                                 _sprintf 1478  
                     __end_of_setFilter 2856                                 _strichr 4E88  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02AA  
                        doModeVerbose@p 02B7                                 _strcspn 4CFE  
                               _toupper 5172                             ?_doModeVscp 0001  
                               _stristr 46EA                    __size_of_printBinary 0046  
                  end_of_initialization 49F0                       __end_of_octpowers 7008  
                  __size_of_printErrors 029A                                 memcpy@d 001F  
                               memcpy@n 001D                                 memcpy@s 0021  
                ??_printFirmwareVersion 0031                               i1u1100_20 0070  
                             i1u1100_21 006E                               i1u1101_20 008C  
                             i1u1101_21 008A                               i1u1110_20 0148  
                             i1u1102_20 00CA                               i1u1110_21 0146  
                             i1u1102_21 00C8                               i1u1111_20 0158  
                             i1u1103_20 00DA                               i1u1111_21 0156  
                             i1u1103_21 00D8                               i1u1112_20 0164  
                             i1u1104_20 00EE                               i1u1112_21 0162  
                             i1u1104_21 00EC                                 itoa@buf 0029  
                             i1u1113_20 0174                               i1u1105_20 00FE  
                             i1u1113_21 0172                               i1u1105_21 00FC  
                             i1u1114_20 0186                               i1u1106_20 010C  
                             i1u1114_21 0184                               i1u1106_21 010A  
                             i1u1107_20 011C                               i1u1107_21 011A  
                             i1u1108_20 012A                               i1u1108_21 0128  
                             i1u1109_20 013A                                 memset@c 001B  
                             i1u1109_21 0138                                 itoa@val 002B  
                               memset@n 001D                                 memset@p 001F  
                         __Lmediumconst 6FD8                    __end_of_sendCANFrame 4F7A  
                             i1u1099_20 003C                               i1u1099_21 003A  
                   _can_receiveOverruns 0100                       __end_of_printGUID 36C6  
                       ___lldiv@divisor 001D                       __end_of_printHelp 2E78  
                       ___lldiv@counter 0021                       __end_of_printMode 48C0  
                     ECANSendMessage@id 0023                       ECANSendMessage@pb 0060  
          __size_of_sendEscapedUartData 006E                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0032  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0082  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 4C20  
                    __ECANPointBuffer@b 001C                           _doModeVerbose 01AA  
                               utoa@buf 0020       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0022               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 4050                                 strlen@s 0019  
                            _sequencyno 003E                              _timekeeper 00CB  
                             _RXM0EXIDM 0078CB                                 strspn@i 0023  
                            ??_strnicmp 0023                     __end_of_getCANFrame 50AE  
                            findNodes@i 00B0                  __end_of_nibbleFromChar 4E88  
                   __end_of_doModeSLCAN 1F52                             ?_fifo_write 0001  
                            fifo_init@f 0019           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0019                              fifo_read@i 0025  
                            fifo_read@p 0023                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 009E  
     sendVSCPDriverCommandReply@cmdCode 0028                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0019                 __end_of_ECANSendMessage 2FEA  
                  _uart_receiveOverruns 0118                _receivePrintEventVerbose 21F8  
                            _vscpNodeId 00DC                           ?__CANIDToRegs 0019  
                  __end_of__RegsToCANID 3466                             ?_readEEPROM 0019  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                        _init_crc8$2079 0019                  ??_readRegisterExtended 00A5  
                        ?_doModeVerbose 0001                          ?_sendVSCPFrame 0083  
                  __size_of_writeEEPROM 0026                          __end_of___wmul 5042  
                   __size_of_doModeVscp 0172                             _WriteTimer0 519C  
                        __end_of_memcpy 4E0A                          __end_of_memset 50DA  
     __size_of_sendVSCPDriverErrorFrame 00BE               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                          __end_of_strcat 4BCC  
                        __end_of_strchr 4B1A                          __end_of_strcpy 5080  
                        __end_of_strlen 4F40                doModeVerbose@filter_type 028F  
                        __end_of_strtok 44CA                          __end_of_strspn 4D86  
                           __end_ofPL10 13C8                             __end_ofPL20 1B4C  
                           __end_ofPL12 1B16                             __end_ofPL30 13F6  
                           __end_ofPL22 37D8                             __end_ofPL14 33A2  
                           __end_ofPL40 1430                             __end_ofPL32 3594  
                           __end_ofPL24 3D18                             __end_ofPL16 13E2  
                           __end_ofPL50 1B7C                             __end_ofPL42 144A  
                           __end_ofPL34 1408                             __end_ofPL26 3F90  
                           __end_ofPL18 1B26                             __end_ofPL60 455A  
                           __end_ofPL52 1462                             __end_ofPL44 1B66  
                           __end_ofPL36 1416                             __end_ofPL28 38C6  
                           __end_ofPL70 34AE                             __end_ofPL62 1B8A  
                           __end_ofPL54 35B6                             __end_ofPL46 3D22  
                           __end_ofPL38 3474                             __end_ofPL80 1BB0  
                           __end_ofPL72 39AC                             __end_ofPL64 3488  
                           __end_ofPL56 2B70                             __end_ofPL48 35A4  
                           __end_ofPL90 267A                             __end_ofPL82 1F5E  
                           __end_ofPL74 35CA                             __end_ofPL66 1B9E  
                           __end_ofPL58 1478                             __end_ofPL92 4E4A  
                           __end_ofPL84 1BBA                             __end_ofPL76 36DA  
                           __end_ofPL68 349A                             __end_ofPL94 327C  
                           __end_ofPL86 5052                             __end_ofPL78 34C0  
                           __end_ofPL96 35D4                             __end_ofPL88 29E8  
                           __end_ofPL98 1BC4                     start_initialization 4998  
                             _ReadUSART 513C                         findNodes@nFound 00AE  
                 doModeVerbose@reg_1170 02A2                   doModeVerbose@filterno 02A8  
               _receiveVSCPModeCanalMsg 3A92                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 008F                            ??_OpenTimer0 0019  
sendVSCPDriverCommandReply@cmdReplyCode 0029                               _Interrupt 0018  
                        ??__CANIDToRegs 0020              readRegisterExtended@nodeid 0031  
                             _OpenUSART 4B1A                     sendVSCPFrame@nodeid 0086  
                       ___llmod@divisor 002A                   __size_of_readRegister 00A8  
                       ___llmod@counter 002E                   ECANReceiveMessage@ptr 002A  
                   __size_of_fifo_write 00F8                   __size_of_init_app_ram 004E  
                        _findNodes$1464 00AC                __end_of__ECANPointBuffer 47D8  
                     __CANIDToRegs@type 001F                              init_crc8@i 001E  
                            init_crc8@j 001B                             _getCANFrame 5080  
                              ??___wmul 001D                       ?_hexStringToBytes 001D  
                           _doModeSLCAN 1BC4              __end_of_ECANReceiveMessage 266C  
                              ??_memcpy 001F                     readRegister@timeout 009F  
                              ??_memset 001F                   sendVSCPDriverNack@crc 0028  
              doModeVerbose@mask_nodeid 0293                   __end_ofi1_WriteTimer0 51D2  
                    ??_hexStringToBytes 0022                                ??_strcat 001D  
                              ??_strchr 001D                                ??_strcpy 001D  
                              ??_strlen 001B                      __end_of_OpenTimer0 513C  
                              ??_strtok 0029                                ??_strspn 0023  
                   __size_of_readEEPROM 0012                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0033                              ?_ReadUSART 0001  
              ??_receivePrintEventCANAL 0031                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7FFF  
              ??_receivePrintEventSLCAN 006D                            _readRegister 41C2  
                 __size_of_sendCANFrame 003A                            _isdigit$2892 001A  
           ?_sendVSCPDriverCommandReply 0028             sendVSCPDriverErrorFrame@crc 0029  
                      ?_ECANSendMessage 0023                       sendVSCPFrame@size 0088  
                          _init_app_ram 4C20                              ?_Interrupt 0001  
                            ?_OpenUSART 0019                             sprintf@_val 0074  
                           sprintf@flag 0079                             sprintf@prec 0070  
                      _ledFunctionality 003C                doModeVerbose@nodeid_1183 02AF  
              doModeVerbose@nodeid_1168 028D                            setFilter@val 0019  
                      ___lwdiv@dividend 0019                         ??_doModeVerbose 00B1  
         __size_of_ECANSetOperationMode 0018                         _printStatistics 2B70  
                          ??_WriteUSART 0019                         ??_sendVSCPFrame 008A  
                        _ECANInitialize 4668                       _sendVSCPDriverAck 410C  
                         __pmediumconst 6FD8               receivePrintEventCANAL@dlc 0069  
             receivePrintEventCANAL@crc 006E                                ?___lldiv 0019  
                              ?_calcCRC 0025                                ?___llmod 0026  
                             _findNodes 39AC                                ?___lwdiv 0019  
                              ?___lwmod 0019                               _fifo_init 4E0A  
                             _fifo_read 3EC2                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0094                             __pintcodelo 0018  
                          _sendCANFrame 4F40                       WriteTimer0@timer0 0019  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0083                     ??_sendVSCPDriverAck 0028  
                     __size_of_strnicmp 0062                         printGUID@nodeid 00A6  
                   _sendEscapedUartData 48C0                               _hexpowers 7030  
                      ___lwdiv@quotient 001E                               _init_crc8 492E  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0060                                ?_strichr 001A  
                           _cntRxFrames 010C                            ??_doModeVscp 0031  
                              ?_strcspn 001F                                ?_toupper 0001  
                              ?_stristr 0026                      __end_of_WriteUSART 519C  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                        ___wmul@product 001D                  sendVSCPFrame@vscpclass 0083  
                             _setFilter 267A                             strnicmp@len 0021  
                             _octpowers 6FD8                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 00B0                  __end_of_ECANInitialize 46EA  
             __end_of_sendVSCPDriverAck 41C2                                i1u753_25 3298  
                              _PIR1bits 000F9E                                i1u754_25 32A8  
                              _PIR2bits 000FA1                                _PIR3bits 000FA4  
                      ECANSendMessage@i 0079                        ECANSendMessage@j 0074  
                  ?_sendEscapedUartData 0025                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0029  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 0027                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 35D4  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00AB                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 2CF8                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 484E  
                            ?_fifo_init 0019                              ?_fifo_read 0019  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 2B5A  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 3580  
                             _putsUSART 4BCC                             __stringdata 7050  
                     ___wmul@multiplier 0019               receivePrintEventSLCAN@dlc 0070  
                          __RegsToCANID 33A2                               _vscpClass 00DA  
               ??_writeRegisterExtended 00A5                            ??_fifo_write 0008  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 007B  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0061  
                         ??_printBinary 001A         __size_of_receivePrintEventCANAL 013A  
                      doModeVerbose@reg 02AE                           ??_printErrors 0032  
                            ?_init_crc8 0001         __size_of_receivePrintEventSLCAN 0184  
                             _rwtimeout 00D9               writeRegisterExtended@page 009E  
                           ??_Interrupt 0011                 __end_of_printStatistics 2CF8  
                           ??_OpenUSART 001B            writeRegisterExtended@timeout 00A1  
                          ??_readEEPROM 001B                __size_of_init_app_eeprom 008A  
                            ?_setFilter 0019                         OpenUSART@config 001B  
                        findNodes@value 00AF            __end_of_vscp_restoreDefaults 51DA  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 0082  
       __end_of_receiveVSCPModeCanalMsg 3B70                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 0024  
                 ??_sendEscapedUartData 0027                                __Lrparam 0000  
                      __CANIDToRegs@val 001B                      __end_of_fifo_write 3374  
                      __CANIDToRegs@ptr 0019             receiveVSCPModeCanalMsg@data 0097  
                            ?_printGUID 0001                             doModeVscp@c 0031  
                            ?_printHelp 0001                              ?_printMode 0001  
                       nibbleFromChar@c 0019                        ??_nibbleFromChar 0019  
                      __size_of___lldiv 0076                        __size_of_calcCRC 0038  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                        getCANFrame@flags 0030  
                          ?_WriteTimer0 0019                        getCANFrame@pdata 002D  
                            ?_putsUSART 001A                         fifo_read@nbytes 001D  
                            sprintf@idx 0068                      __end_of_readEEPROM 51C0  
                 hexStringToBytes@inhex 0020                                calcCRC@j 0028  
                              calcCRC@p 0025                              strcat@from 001B  
                      __size_of_isdigit 001E                         ___lwdiv@divisor 001B  
                       ___lwdiv@counter 001D                                __ptext10 3A92  
                              __ptext11 4DCA                                __ptext20 267A  
                              __ptext12 410C                                __ptext21 3B70  
                              __ptext13 3C4A                                __ptext30 41C2  
                              __ptext22 4CB8                                __ptext14 4F7A  
                              __ptext31 4050                                __ptext23 3D22  
                              __ptext15 3134                                __ptext40 4438  
                              __ptext32 4F40                                __ptext24 5052  
                              __ptext16 48C0                                __ptext41 4CFE  
                              __ptext33 2E78                                __ptext25 39AC  
                              __ptext17 4FEA                                __ptext50 45E4  
                              __ptext42 4D42                                __ptext34 34C0  
                              __ptext26 43A4                                __ptext18 492E  
                              __ptext51 5080                                __ptext43 4ABE  
                              __ptext35 50AE                                __ptext27 35D4  
                              __ptext19 01AA                                __ptext60 3EC2  
                              __ptext52 246E                                __ptext44 46EA  
                              __ptext36 2CF8                                __ptext28 3DF2  
                              __ptext61 44CA                                __ptext53 33A2  
                              __ptext45 4E88                                __ptext37 1F5E  
                              __ptext29 4B76                                __ptext70 4668  
                              __ptext62 4FB2                                __ptext54 4762  
                              __ptext46 49FA                                __ptext38 2B70  
                              __ptext71 515A                                __ptext63 426A  
                              __ptext55 1478                                __ptext47 5172  
                              __ptext39 36DA                                __ptext80 4E0A  
                              __ptext72 511E                                __ptext64 4EC6  
                              __ptext56 5020                                __ptext48 4F04  
                              __ptext73 4B1A                                __ptext65 4C6E  
                              __ptext57 4A5C                                __ptext49 21F8  
                              __ptext82 51C0                                __ptext74 519C  
                              __ptext66 484E                                __ptext58 47D8  
                              __ptext83 327C                                __ptext75 51D2  
                              __ptext67 4BCC                                __ptext59 5100  
                              __ptext84 513C                                __ptext76 455A  
                              __ptext68 5188                                __ptext77 50DA  
                              __ptext69 4D86                                __ptext78 4C20  
                              __ptext79 51AE                          printMDF@nodeid 00A6  
                         ?_getVSCPFrame 0060                              strichr@chr 001C  
                      __size_of_sprintf 0680                              strichr@ptr 001A  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 001B                          printGUID@value 00AA  
                   __end_of_printBinary 4CFE                           __size_of_crc8 0036  
                         __size_of_atoi 00F0                           __size_of_main 014A  
                         __size_of_init 0044                           __size_of_itoa 0038  
                   __end_of_printErrors 21F8                           __size_of_utoa 00A0  
                            strnicmp@s1 001D                              strnicmp@s2 001F  
                           _inputBuffer 0200              __size_of_sendVSCPDriverAck 00B6  
                _receivePrintEventCANAL 3134                           ??_writeEEPROM 001C  
              _printNodeFirmwareVersion 3DF2                     ECANSendMessage@data 0027  
              ECANSendMessage@tempBSEL0 0075                                _printMDF 43A4  
                             printMDF@i 00AA                  _receivePrintEventSLCAN 2856  
                             printMDF@p 00A8                            ?_getCANFrame 002C  
                   ECANSendMessage@mode 0072                     ECANSendMessage@temp 0078  
                     ?__ECANPointBuffer 0019                                atoi@sign 0023  
                           ??_findNodes 0032                            ?_doModeSLCAN 0001  
                           ??_fifo_init 001F                             ??_fifo_read 001F  
                              _vscpData 0040           __size_of_readRegisterExtended 00D0  
                              main@argc 00C5                                main@argv 00C7  
                              _vscpSize 00DE                      ??__ECANPointBuffer 001C  
                              _vscpType 00DF                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 0028                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 49FA  
                      init_app_eeprom@i 001C             writeRegisterExtended@nodeid 0031  
                       _serialInputFifo 01C8                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0019                     ECANReceiveMessage@i 0027  
                              memcpy@d1 0019                                memcpy@s1 001B  
             receivePrintEventVerbose@i 008C                                itoa@base 002D  
                              isdigit@c 001B                      _ECANReceiveMessage 246E  
                              memset@p1 0019                             ??_init_crc8 0019  
                             ultoa@base 0066                          ??_getVSCPFrame 0065  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 002C  
                              intlevel1 0000                               sprintf@ap 006F  
                             sprintf@sp 0060                    hexStringToBytes@size 001F  
                             strchr@chr 001B                        ?_printStatistics 0001  
                      ___lwmod@dividend 0019                               strchr@ptr 0019  
                   ?_ECANReceiveMessage 0020                        ___lldiv@dividend 0019  
                           ??_setFilter 001D                           printMDF@value 00A7  
                             strcspn@s1 001F                               strcspn@s2 0021  
               ECANSendMessage@msgFlags 002A                              _OSCCONbits 000FD3  
                             strnicmp@r 0025                               stristr@s1 0026  
                             stristr@s2 0028                      ECANSendMessage@ptr 007A  
                     ??_init_app_eeprom 001C              receivePrintEventCANAL@data 0060  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 0032  
                        readEEPROM@data 001B                             ??_printHelp 001E  
                           ??_printMode 001E                _sendVSCPDriverErrorFrame 3C4A  
                ECANSendMessage@dataLen 0029                     __end_of_writeEEPROM 5100  
                   __ECANPointBuffer@pt 001D                    ??_ECANReceiveMessage 0024  
                           ??_putsUSART 001C                                utoa@base 0024  
                              ultoa@buf 0060                                ultoa@val 0062  
                         fifo_init@size 001D                                sprintf@c 0078  
                              sprintf@f 0062                     hexStringToBytes@buf 001D  
                              strcat@cp 001D                     hexStringToBytes@len 0025  
                        _doModeVscpNode 51DA                                strcat@to 0019  
      __end_of_receivePrintEventVerbose 246E                  ECANSendMessage@buffers 0073  
                      ___lldiv@quotient 0022                         ___lwmod@divisor 001B  
          __end_of_ECANSetOperationMode 5172                    _vscp_restoreDefaults 51D2  
                          printGUID@buf 00A7                                strcpy@cp 001D  
                              strlen@cp 001B                                strcpy@to 0019  
                       ___lwmod@counter 001D                                strcspn@i 0023  
                              toupper@c 0019                             _printBinary 4CB8  
                              strtok@s1 0025                                strtok@s2 0027  
                              strspn@s1 001F                                strspn@s2 0021  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0037  
                ECANSendMessage@tempPtr 0076                             _printErrors 1F5E  
                          fifo_init@buf 001B                            fifo_read@buf 001B  
         sendVSCPDriverCommandReply@crc 002A                            __CANIDToRegs 34C0  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0039  
             readRegisterExtended@value 00A3                __size_of_ECANSendMessage 0172  
