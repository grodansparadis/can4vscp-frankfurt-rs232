

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Oct 06 23:07:48 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   108                           	psect	pa_nodes,global,class=CODE,delta=1
   109  0000                     tblptru	equ	0xFF8
   110                           tblptrh	equ	0xFF7
   111                           tblptrl	equ	0xFF6
   112                           tablat	equ	0xFF5
   113                           prodh	equ	0xFF4
   114                           prodl	equ	0xFF3
   115                           intcon	equ	0xFF2
   116                           indf0	equ	0xFEF
   117                           fsr0h	equ	0xFEA
   118                           fsr0l	equ	0xFE9
   119                           wreg	equ	0xFE8
   120                           indf1	equ	0xFE7
   121                           postinc1	equ	0xFE6
   122                           postdec1	equ	0xFE5
   123                           fsr1h	equ	0xFE2
   124                           fsr1l	equ	0xFE1
   125                           indf2	equ	0xFDF
   126                           postinc2	equ	0xFDE
   127                           postdec2	equ	0xFDD
   128                           plusw2	equ	0xFDB
   129                           fsr2h	equ	0xFDA
   130                           fsr2l	equ	0xFD9
   131                           status	equ	0xFD8
   132                           
   133                           	psect	mediumconst
   134  006BA6                     __pmediumconst:
   135                           	opt stack 0
   136  006BA6                     _octpowers:
   137                           	opt stack 0
   138  006BA6  0001               	dw	1
   139  006BA8  0000               	dw	0
   140  006BAA  0008               	dw	8
   141  006BAC  0000               	dw	0
   142  006BAE  0040               	dw	64
   143  006BB0  0000               	dw	0
   144  006BB2  0200               	dw	512
   145  006BB4  0000               	dw	0
   146  006BB6  1000               	dw	4096
   147  006BB8  0000               	dw	0
   148  006BBA  8000               	dw	32768
   149  006BBC  0000               	dw	0
   150  006BBE  0000               	dw	0
   151  006BC0  0004               	dw	4
   152  006BC2  0000               	dw	0
   153  006BC4  0020               	dw	32
   154  006BC6  0000               	dw	0
   155  006BC8  0100               	dw	256
   156  006BCA  0000               	dw	0
   157  006BCC  0800               	dw	2048
   158  006BCE  0000               	dw	0
   159  006BD0  4000               	dw	16384
   160  006BD2  0000               	dw	0
   161  006BD4  0000               	dw	0
   162  006BD6                     __end_of_octpowers:
   163                           	opt stack 0
   164  006BD6                     _dpowers:
   165                           	opt stack 0
   166  006BD6  0001               	dw	1
   167  006BD8  0000               	dw	0
   168  006BDA  000A               	dw	10
   169  006BDC  0000               	dw	0
   170  006BDE  0064               	dw	100
   171  006BE0  0000               	dw	0
   172  006BE2  03E8               	dw	1000
   173  006BE4  0000               	dw	0
   174  006BE6  2710               	dw	10000
   175  006BE8  0000               	dw	0
   176  006BEA  86A0               	dw	34464
   177  006BEC  0001               	dw	1
   178  006BEE  4240               	dw	16960
   179  006BF0  000F               	dw	15
   180  006BF2  9680               	dw	38528
   181  006BF4  0098               	dw	152
   182  006BF6  E100               	dw	57600
   183  006BF8  05F5               	dw	1525
   184  006BFA  CA00               	dw	51712
   185  006BFC  3B9A               	dw	15258
   186  006BFE                     __end_of_dpowers:
   187                           	opt stack 0
   188  006BFE                     _hexpowers:
   189                           	opt stack 0
   190  006BFE  0001               	dw	1
   191  006C00  0000               	dw	0
   192  006C02  0010               	dw	16
   193  006C04  0000               	dw	0
   194  006C06  0100               	dw	256
   195  006C08  0000               	dw	0
   196  006C0A  1000               	dw	4096
   197  006C0C  0000               	dw	0
   198  006C0E  0000               	dw	0
   199  006C10  0001               	dw	1
   200  006C12  0000               	dw	0
   201  006C14  0010               	dw	16
   202  006C16  0000               	dw	0
   203  006C18  0100               	dw	256
   204  006C1A  0000               	dw	0
   205  006C1C  1000               	dw	4096
   206  006C1E                     __end_of_hexpowers:
   207                           	opt stack 0
   208  0000                     _BRGCON1	set	3952
   209  0000                     _BRGCON2	set	3953
   210  0000                     _BRGCON3	set	3954
   211  0000                     _BSEL0	set	3576
   212  0000                     _CANCON	set	3951
   213  0000                     _CIOCON	set	3955
   214  0000                     _COMSTATbits	set	3956
   215  0000                     _ECANCON	set	3959
   216  0000                     _EEADR	set	4009
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _MSEL0	set	3568
   222  0000                     _MSEL1	set	3569
   223  0000                     _MSEL2	set	3570
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _RCREG	set	4014
   229  0000                     _RCSTA	set	4011
   230  0000                     _RCSTAbits	set	4011
   231  0000                     _RXB1CONbits	set	3920
   232  0000                     _RXERRCNT	set	3957
   233  0000                     _RXF0EIDH	set	3842
   234  0000                     _RXF0EIDL	set	3843
   235  0000                     _RXF0SIDH	set	3840
   236  0000                     _RXF0SIDL	set	3841
   237  0000                     _RXF10EIDH	set	3446
   238  0000                     _RXF10EIDL	set	3447
   239  0000                     _RXF10SIDH	set	3444
   240  0000                     _RXF10SIDL	set	3445
   241  0000                     _RXF11EIDH	set	3450
   242  0000                     _RXF11EIDL	set	3451
   243  0000                     _RXF11SIDH	set	3448
   244  0000                     _RXF11SIDL	set	3449
   245  0000                     _RXF12EIDH	set	3458
   246  0000                     _RXF12EIDL	set	3459
   247  0000                     _RXF12SIDH	set	3456
   248  0000                     _RXF12SIDL	set	3457
   249  0000                     _RXF13EIDH	set	3462
   250  0000                     _RXF13EIDL	set	3463
   251  0000                     _RXF13SIDH	set	3460
   252  0000                     _RXF13SIDL	set	3461
   253  0000                     _RXF14EIDH	set	3466
   254  0000                     _RXF14EIDL	set	3467
   255  0000                     _RXF14SIDH	set	3464
   256  0000                     _RXF14SIDL	set	3465
   257  0000                     _RXF15EIDH	set	3474
   258  0000                     _RXF15EIDL	set	3475
   259  0000                     _RXF15SIDH	set	3472
   260  0000                     _RXF15SIDL	set	3473
   261  0000                     _RXF1EIDH	set	3846
   262  0000                     _RXF1EIDL	set	3847
   263  0000                     _RXF1SIDH	set	3844
   264  0000                     _RXF1SIDL	set	3845
   265  0000                     _RXF2EIDH	set	3850
   266  0000                     _RXF2EIDL	set	3851
   267  0000                     _RXF2SIDH	set	3848
   268  0000                     _RXF2SIDL	set	3849
   269  0000                     _RXF3EIDH	set	3854
   270  0000                     _RXF3EIDL	set	3855
   271  0000                     _RXF3SIDH	set	3852
   272  0000                     _RXF3SIDL	set	3853
   273  0000                     _RXF4EIDH	set	3858
   274  0000                     _RXF4EIDL	set	3859
   275  0000                     _RXF4SIDH	set	3856
   276  0000                     _RXF4SIDL	set	3857
   277  0000                     _RXF5EIDH	set	3862
   278  0000                     _RXF5EIDL	set	3863
   279  0000                     _RXF5SIDH	set	3860
   280  0000                     _RXF5SIDL	set	3861
   281  0000                     _RXF6EIDH	set	3426
   282  0000                     _RXF6EIDL	set	3427
   283  0000                     _RXF6SIDH	set	3424
   284  0000                     _RXF6SIDL	set	3425
   285  0000                     _RXF7EIDH	set	3430
   286  0000                     _RXF7EIDL	set	3431
   287  0000                     _RXF7SIDH	set	3428
   288  0000                     _RXF7SIDL	set	3429
   289  0000                     _RXF8EIDH	set	3434
   290  0000                     _RXF8EIDL	set	3435
   291  0000                     _RXF8SIDH	set	3432
   292  0000                     _RXF8SIDL	set	3433
   293  0000                     _RXF9EIDH	set	3442
   294  0000                     _RXF9EIDL	set	3443
   295  0000                     _RXF9SIDH	set	3440
   296  0000                     _RXF9SIDL	set	3441
   297  0000                     _RXFBCON0	set	3552
   298  0000                     _RXFBCON1	set	3553
   299  0000                     _RXFBCON2	set	3554
   300  0000                     _RXFBCON3	set	3555
   301  0000                     _RXFBCON4	set	3556
   302  0000                     _RXFBCON5	set	3557
   303  0000                     _RXFBCON6	set	3558
   304  0000                     _RXFBCON7	set	3559
   305  0000                     _RXFCON0	set	3540
   306  0000                     _RXFCON1	set	3541
   307  0000                     _RXM0EIDH	set	3866
   308  0000                     _RXM0EIDL	set	3867
   309  0000                     _RXM0SIDL	set	3865
   310  0000                     _RXM1EIDH	set	3870
   311  0000                     _RXM1EIDL	set	3871
   312  0000                     _RXM1SIDL	set	3869
   313  0000                     _SPBRG	set	4015
   314  0000                     _SPBRGH	set	4016
   315  0000                     _T0CON	set	4053
   316  0000                     _T0CONbits	set	4053
   317  0000                     _TMR0H	set	4055
   318  0000                     _TMR0L	set	4054
   319  0000                     _TRISBbits	set	3987
   320  0000                     _TRISCbits	set	3988
   321  0000                     _TXERRCNT	set	3958
   322  0000                     _TXREG	set	4013
   323  0000                     _TXSTA	set	4012
   324  0000                     _TXSTAbits	set	4012
   325  0000                     _B0RXFUL	set	28935
   326  0000                     _B0TXEN	set	28610
   327  0000                     _B1RXFUL	set	29063
   328  0000                     _B1TXEN	set	28611
   329  0000                     _B2RXFUL	set	29191
   330  0000                     _B2TXEN	set	28612
   331  0000                     _B3RXFUL	set	29319
   332  0000                     _B3TXEN	set	28613
   333  0000                     _B4RXFUL	set	29447
   334  0000                     _B4TXEN	set	28614
   335  0000                     _B5RXFUL	set	29575
   336  0000                     _B5TXEN	set	28615
   337  0000                     _ERRIE	set	32029
   338  0000                     _FIFOEMPTY	set	31655
   339  0000                     _IRXIF	set	32039
   340  0000                     _LATC1	set	31833
   341  0000                     _MDSEL0	set	31678
   342  0000                     _MDSEL1	set	31679
   343  0000                     _PEIE	set	32662
   344  0000                     _RCIE	set	31981
   345  0000                     _RCIF	set	31989
   346  0000                     _RCIP	set	31997
   347  0000                     _RXB0FILHIT0	set	31488
   348  0000                     _RXB0FUL	set	31495
   349  0000                     _RXB0IF	set	32032
   350  0000                     _RXB0OVFL	set	31655
   351  0000                     _RXB1IF	set	32033
   352  0000                     _RXB1OVFL	set	31654
   353  0000                     _RXBnIE	set	32025
   354  0000                     _RXBnIF	set	32033
   355  0000                     _RXM0EXIDM	set	30923
   356  0000                     _RXM1EXIDEN	set	30955
   357  0000                     _B0CON	set	3616
   358  0000                     _B1CON	set	3632
   359  0000                     _B2CON	set	3648
   360  0000                     _B3CON	set	3664
   361  0000                     _B4CON	set	3680
   362  0000                     _B5CON	set	3696
   363  0000                     _RXB0CON	set	3936
   364  0000                     _RXB1CON	set	3920
   365  0000                     _RXM0SIDH	set	3864
   366  0000                     _RXM1SIDH	set	3868
   367  0000                     _TXB0CON	set	3904
   368  0000                     _TXB1CON	set	3888
   369  0000                     _TXB2CON	set	3872
   370  006C1E                     __stringdata:
   371                           	opt stack 0
   372  006C1E                     STR_258:
   373  006C1E  20                 	db	32
   374  006C1F  20                 	db	32
   375  006C20  20                 	db	32
   376  006C21  20                 	db	32
   377  006C22  20                 	db	32
   378  006C23  20                 	db	32
   379  006C24  20                 	db	32
   380  006C25  20                 	db	32
   381  006C26  20                 	db	32
   382  006C27  46                 	db	70	;'F'
   383  006C28  6F                 	db	111	;'o'
   384  006C29  72                 	db	114	;'r'
   385  006C2A  6D                 	db	109	;'m'
   386  006C2B  61                 	db	97	;'a'
   387  006C2C  74                 	db	116	;'t'
   388  006C2D  3A                 	db	58	;':'
   389  006C2E  20                 	db	32
   390  006C2F  66                 	db	102	;'f'
   391  006C30  69                 	db	105	;'i'
   392  006C31  6C                 	db	108	;'l'
   393  006C32  74                 	db	116	;'t'
   394  006C33  65                 	db	101	;'e'
   395  006C34  72                 	db	114	;'r'
   396  006C35  20                 	db	32
   397  006C36  66                 	db	102	;'f'
   398  006C37  69                 	db	105	;'i'
   399  006C38  6C                 	db	108	;'l'
   400  006C39  74                 	db	116	;'t'
   401  006C3A  65                 	db	101	;'e'
   402  006C3B  72                 	db	114	;'r'
   403  006C3C  6E                 	db	110	;'n'
   404  006C3D  6F                 	db	111	;'o'
   405  006C3E  2C                 	db	44
   406  006C3F  70                 	db	112	;'p'
   407  006C40  72                 	db	114	;'r'
   408  006C41  69                 	db	105	;'i'
   409  006C42  6F                 	db	111	;'o'
   410  006C43  2C                 	db	44
   411  006C44  63                 	db	99	;'c'
   412  006C45  6C                 	db	108	;'l'
   413  006C46  61                 	db	97	;'a'
   414  006C47  73                 	db	115	;'s'
   415  006C48  73                 	db	115	;'s'
   416  006C49  2C                 	db	44
   417  006C4A  74                 	db	116	;'t'
   418  006C4B  79                 	db	121	;'y'
   419  006C4C  70                 	db	112	;'p'
   420  006C4D  65                 	db	101	;'e'
   421  006C4E  2C                 	db	44
   422  006C4F  6E                 	db	110	;'n'
   423  006C50  6F                 	db	111	;'o'
   424  006C51  64                 	db	100	;'d'
   425  006C52  65                 	db	101	;'e'
   426  006C53  69                 	db	105	;'i'
   427  006C54  64                 	db	100	;'d'
   428  006C55  20                 	db	32
   429  006C56  20                 	db	32
   430  006C57  28                 	db	40
   431  006C58  66                 	db	102	;'f'
   432  006C59  69                 	db	105	;'i'
   433  006C5A  6C                 	db	108	;'l'
   434  006C5B  74                 	db	116	;'t'
   435  006C5C  65                 	db	101	;'e'
   436  006C5D  72                 	db	114	;'r'
   437  006C5E  6E                 	db	110	;'n'
   438  006C5F  6F                 	db	111	;'o'
   439  006C60  20                 	db	32
   440  006C61  3D                 	db	61	;'='
   441  006C62  20                 	db	32
   442  006C63  30                 	db	48	;'0'
   443  006C64  2D                 	db	45
   444  006C65  31                 	db	49	;'1'
   445  006C66  35                 	db	53	;'5'
   446  006C67  29                 	db	41
   447  006C68  2E                 	db	46
   448  006C69  0D                 	db	13
   449  006C6A  0A                 	db	10
   450  006C6B  00                 	db	0
   451  006C6C                     STR_256:
   452  006C6C  49                 	db	73	;'I'
   453  006C6D  4E                 	db	78	;'N'
   454  006C6E  46                 	db	70	;'F'
   455  006C6F  4F                 	db	79	;'O'
   456  006C70  20                 	db	32
   457  006C71  2D                 	db	45
   458  006C72  20                 	db	32
   459  006C73  47                 	db	71	;'G'
   460  006C74  65                 	db	101	;'e'
   461  006C75  74                 	db	116	;'t'
   462  006C76  20                 	db	32
   463  006C77  69                 	db	105	;'i'
   464  006C78  6E                 	db	110	;'n'
   465  006C79  66                 	db	102	;'f'
   466  006C7A  6F                 	db	111	;'o'
   467  006C7B  20                 	db	32
   468  006C7C  61                 	db	97	;'a'
   469  006C7D  62                 	db	98	;'b'
   470  006C7E  6F                 	db	111	;'o'
   471  006C7F  75                 	db	117	;'u'
   472  006C80  74                 	db	116	;'t'
   473  006C81  20                 	db	32
   474  006C82  61                 	db	97	;'a'
   475  006C83  6E                 	db	110	;'n'
   476  006C84  20                 	db	32
   477  006C85  65                 	db	101	;'e'
   478  006C86  78                 	db	120	;'x'
   479  006C87  69                 	db	105	;'i'
   480  006C88  73                 	db	115	;'s'
   481  006C89  74                 	db	116	;'t'
   482  006C8A  65                 	db	101	;'e'
   483  006C8B  6E                 	db	110	;'n'
   484  006C8C  74                 	db	116	;'t'
   485  006C8D  20                 	db	32
   486  006C8E  6E                 	db	110	;'n'
   487  006C8F  6F                 	db	111	;'o'
   488  006C90  64                 	db	100	;'d'
   489  006C91  65                 	db	101	;'e'
   490  006C92  20                 	db	32
   491  006C93  6F                 	db	111	;'o'
   492  006C94  6E                 	db	110	;'n'
   493  006C95  20                 	db	32
   494  006C96  74                 	db	116	;'t'
   495  006C97  68                 	db	104	;'h'
   496  006C98  65                 	db	101	;'e'
   497  006C99  20                 	db	32
   498  006C9A  62                 	db	98	;'b'
   499  006C9B  75                 	db	117	;'u'
   500  006C9C  73                 	db	115	;'s'
   501  006C9D  20                 	db	32
   502  006C9E  28                 	db	40
   503  006C9F  46                 	db	70	;'F'
   504  006CA0  6F                 	db	111	;'o'
   505  006CA1  72                 	db	114	;'r'
   506  006CA2  6D                 	db	109	;'m'
   507  006CA3  61                 	db	97	;'a'
   508  006CA4  74                 	db	116	;'t'
   509  006CA5  3A                 	db	58	;':'
   510  006CA6  20                 	db	32
   511  006CA7  69                 	db	105	;'i'
   512  006CA8  6E                 	db	110	;'n'
   513  006CA9  66                 	db	102	;'f'
   514  006CAA  6F                 	db	111	;'o'
   515  006CAB  20                 	db	32
   516  006CAC  6E                 	db	110	;'n'
   517  006CAD  69                 	db	105	;'i'
   518  006CAE  63                 	db	99	;'c'
   519  006CAF  6B                 	db	107	;'k'
   520  006CB0  6E                 	db	110	;'n'
   521  006CB1  61                 	db	97	;'a'
   522  006CB2  6D                 	db	109	;'m'
   523  006CB3  65                 	db	101	;'e'
   524  006CB4  29                 	db	41
   525  006CB5  2E                 	db	46
   526  006CB6  0D                 	db	13
   527  006CB7  0A                 	db	10
   528  006CB8  00                 	db	0
   529  006CB9                     STR_254:
   530  006CB9  52                 	db	82	;'R'
   531  006CBA  52                 	db	82	;'R'
   532  006CBB  45                 	db	69	;'E'
   533  006CBC  47                 	db	71	;'G'
   534  006CBD  20                 	db	32
   535  006CBE  2D                 	db	45
   536  006CBF  20                 	db	32
   537  006CC0  52                 	db	82	;'R'
   538  006CC1  65                 	db	101	;'e'
   539  006CC2  61                 	db	97	;'a'
   540  006CC3  64                 	db	100	;'d'
   541  006CC4  20                 	db	32
   542  006CC5  72                 	db	114	;'r'
   543  006CC6  65                 	db	101	;'e'
   544  006CC7  67                 	db	103	;'g'
   545  006CC8  69                 	db	105	;'i'
   546  006CC9  73                 	db	115	;'s'
   547  006CCA  74                 	db	116	;'t'
   548  006CCB  65                 	db	101	;'e'
   549  006CCC  72                 	db	114	;'r'
   550  006CCD  28                 	db	40
   551  006CCE  73                 	db	115	;'s'
   552  006CCF  29                 	db	41
   553  006CD0  20                 	db	32
   554  006CD1  6F                 	db	111	;'o'
   555  006CD2  66                 	db	102	;'f'
   556  006CD3  20                 	db	32
   557  006CD4  6E                 	db	110	;'n'
   558  006CD5  6F                 	db	111	;'o'
   559  006CD6  64                 	db	100	;'d'
   560  006CD7  65                 	db	101	;'e'
   561  006CD8  20                 	db	32
   562  006CD9  28                 	db	40
   563  006CDA  46                 	db	70	;'F'
   564  006CDB  6F                 	db	111	;'o'
   565  006CDC  72                 	db	114	;'r'
   566  006CDD  6D                 	db	109	;'m'
   567  006CDE  61                 	db	97	;'a'
   568  006CDF  74                 	db	116	;'t'
   569  006CE0  3A                 	db	58	;':'
   570  006CE1  20                 	db	32
   571  006CE2  72                 	db	114	;'r'
   572  006CE3  72                 	db	114	;'r'
   573  006CE4  65                 	db	101	;'e'
   574  006CE5  67                 	db	103	;'g'
   575  006CE6  20                 	db	32
   576  006CE7  6E                 	db	110	;'n'
   577  006CE8  6F                 	db	111	;'o'
   578  006CE9  64                 	db	100	;'d'
   579  006CEA  65                 	db	101	;'e'
   580  006CEB  69                 	db	105	;'i'
   581  006CEC  64                 	db	100	;'d'
   582  006CED  20                 	db	32
   583  006CEE  5B                 	db	91	;'['
   584  006CEF  70                 	db	112	;'p'
   585  006CF0  61                 	db	97	;'a'
   586  006CF1  67                 	db	103	;'g'
   587  006CF2  65                 	db	101	;'e'
   588  006CF3  3A                 	db	58	;':'
   589  006CF4  5D                 	db	93	;']'
   590  006CF5  72                 	db	114	;'r'
   591  006CF6  65                 	db	101	;'e'
   592  006CF7  67                 	db	103	;'g'
   593  006CF8  20                 	db	32
   594  006CF9  5B                 	db	91	;'['
   595  006CFA  63                 	db	99	;'c'
   596  006CFB  6F                 	db	111	;'o'
   597  006CFC  75                 	db	117	;'u'
   598  006CFD  6E                 	db	110	;'n'
   599  006CFE  74                 	db	116	;'t'
   600  006CFF  5D                 	db	93	;']'
   601  006D00  29                 	db	41
   602  006D01  2E                 	db	46
   603  006D02  0D                 	db	13
   604  006D03  0A                 	db	10
   605  006D04  00                 	db	0
   606  006D05                     STR_255:
   607  006D05  57                 	db	87	;'W'
   608  006D06  52                 	db	82	;'R'
   609  006D07  45                 	db	69	;'E'
   610  006D08  47                 	db	71	;'G'
   611  006D09  20                 	db	32
   612  006D0A  2D                 	db	45
   613  006D0B  20                 	db	32
   614  006D0C  57                 	db	87	;'W'
   615  006D0D  72                 	db	114	;'r'
   616  006D0E  69                 	db	105	;'i'
   617  006D0F  74                 	db	116	;'t'
   618  006D10  65                 	db	101	;'e'
   619  006D11  20                 	db	32
   620  006D12  72                 	db	114	;'r'
   621  006D13  65                 	db	101	;'e'
   622  006D14  67                 	db	103	;'g'
   623  006D15  69                 	db	105	;'i'
   624  006D16  73                 	db	115	;'s'
   625  006D17  74                 	db	116	;'t'
   626  006D18  65                 	db	101	;'e'
   627  006D19  72                 	db	114	;'r'
   628  006D1A  20                 	db	32
   629  006D1B  6F                 	db	111	;'o'
   630  006D1C  66                 	db	102	;'f'
   631  006D1D  20                 	db	32
   632  006D1E  6E                 	db	110	;'n'
   633  006D1F  6F                 	db	111	;'o'
   634  006D20  64                 	db	100	;'d'
   635  006D21  65                 	db	101	;'e'
   636  006D22  20                 	db	32
   637  006D23  28                 	db	40
   638  006D24  46                 	db	70	;'F'
   639  006D25  6F                 	db	111	;'o'
   640  006D26  72                 	db	114	;'r'
   641  006D27  6D                 	db	109	;'m'
   642  006D28  61                 	db	97	;'a'
   643  006D29  74                 	db	116	;'t'
   644  006D2A  3A                 	db	58	;':'
   645  006D2B  20                 	db	32
   646  006D2C  77                 	db	119	;'w'
   647  006D2D  72                 	db	114	;'r'
   648  006D2E  65                 	db	101	;'e'
   649  006D2F  67                 	db	103	;'g'
   650  006D30  20                 	db	32
   651  006D31  6E                 	db	110	;'n'
   652  006D32  6F                 	db	111	;'o'
   653  006D33  64                 	db	100	;'d'
   654  006D34  65                 	db	101	;'e'
   655  006D35  69                 	db	105	;'i'
   656  006D36  64                 	db	100	;'d'
   657  006D37  20                 	db	32
   658  006D38  5B                 	db	91	;'['
   659  006D39  70                 	db	112	;'p'
   660  006D3A  61                 	db	97	;'a'
   661  006D3B  67                 	db	103	;'g'
   662  006D3C  65                 	db	101	;'e'
   663  006D3D  3A                 	db	58	;':'
   664  006D3E  5D                 	db	93	;']'
   665  006D3F  72                 	db	114	;'r'
   666  006D40  65                 	db	101	;'e'
   667  006D41  67                 	db	103	;'g'
   668  006D42  20                 	db	32
   669  006D43  63                 	db	99	;'c'
   670  006D44  6F                 	db	111	;'o'
   671  006D45  6E                 	db	110	;'n'
   672  006D46  74                 	db	116	;'t'
   673  006D47  65                 	db	101	;'e'
   674  006D48  6E                 	db	110	;'n'
   675  006D49  74                 	db	116	;'t'
   676  006D4A  29                 	db	41
   677  006D4B  2E                 	db	46
   678  006D4C  0D                 	db	13
   679  006D4D  0A                 	db	10
   680  006D4E  00                 	db	0
   681  006D4F                     STR_260:
   682  006D4F  20                 	db	32
   683  006D50  20                 	db	32
   684  006D51  20                 	db	32
   685  006D52  20                 	db	32
   686  006D53  20                 	db	32
   687  006D54  20                 	db	32
   688  006D55  20                 	db	32
   689  006D56  46                 	db	70	;'F'
   690  006D57  6F                 	db	111	;'o'
   691  006D58  72                 	db	114	;'r'
   692  006D59  6D                 	db	109	;'m'
   693  006D5A  61                 	db	97	;'a'
   694  006D5B  74                 	db	116	;'t'
   695  006D5C  3A                 	db	58	;':'
   696  006D5D  20                 	db	32
   697  006D5E  6D                 	db	109	;'m'
   698  006D5F  61                 	db	97	;'a'
   699  006D60  73                 	db	115	;'s'
   700  006D61  6B                 	db	107	;'k'
   701  006D62  20                 	db	32
   702  006D63  6D                 	db	109	;'m'
   703  006D64  61                 	db	97	;'a'
   704  006D65  73                 	db	115	;'s'
   705  006D66  6B                 	db	107	;'k'
   706  006D67  6E                 	db	110	;'n'
   707  006D68  6F                 	db	111	;'o'
   708  006D69  2C                 	db	44
   709  006D6A  70                 	db	112	;'p'
   710  006D6B  72                 	db	114	;'r'
   711  006D6C  69                 	db	105	;'i'
   712  006D6D  6F                 	db	111	;'o'
   713  006D6E  2C                 	db	44
   714  006D6F  63                 	db	99	;'c'
   715  006D70  6C                 	db	108	;'l'
   716  006D71  61                 	db	97	;'a'
   717  006D72  73                 	db	115	;'s'
   718  006D73  73                 	db	115	;'s'
   719  006D74  2C                 	db	44
   720  006D75  74                 	db	116	;'t'
   721  006D76  79                 	db	121	;'y'
   722  006D77  70                 	db	112	;'p'
   723  006D78  65                 	db	101	;'e'
   724  006D79  2C                 	db	44
   725  006D7A  6E                 	db	110	;'n'
   726  006D7B  6F                 	db	111	;'o'
   727  006D7C  64                 	db	100	;'d'
   728  006D7D  65                 	db	101	;'e'
   729  006D7E  69                 	db	105	;'i'
   730  006D7F  64                 	db	100	;'d'
   731  006D80  20                 	db	32
   732  006D81  28                 	db	40
   733  006D82  6D                 	db	109	;'m'
   734  006D83  61                 	db	97	;'a'
   735  006D84  73                 	db	115	;'s'
   736  006D85  6B                 	db	107	;'k'
   737  006D86  6E                 	db	110	;'n'
   738  006D87  6F                 	db	111	;'o'
   739  006D88  20                 	db	32
   740  006D89  3D                 	db	61	;'='
   741  006D8A  20                 	db	32
   742  006D8B  30                 	db	48	;'0'
   743  006D8C  20                 	db	32
   744  006D8D  6F                 	db	111	;'o'
   745  006D8E  72                 	db	114	;'r'
   746  006D8F  20                 	db	32
   747  006D90  31                 	db	49	;'1'
   748  006D91  29                 	db	41
   749  006D92  2E                 	db	46
   750  006D93  0D                 	db	13
   751  006D94  0A                 	db	10
   752  006D95  00                 	db	0
   753  006D96                     STR_270:
   754  006D96  2D                 	db	45
   755  006D97  2D                 	db	45
   756  006D98  2D                 	db	45
   757  006D99  2D                 	db	45
   758  006D9A  2D                 	db	45
   759  006D9B  2D                 	db	45
   760  006D9C  2D                 	db	45
   761  006D9D  2D                 	db	45
   762  006D9E  2D                 	db	45
   763  006D9F  2D                 	db	45
   764  006DA0  2D                 	db	45
   765  006DA1  2D                 	db	45
   766  006DA2  2D                 	db	45
   767  006DA3  2D                 	db	45
   768  006DA4  2D                 	db	45
   769  006DA5  2D                 	db	45
   770  006DA6  2D                 	db	45
   771  006DA7  2D                 	db	45
   772  006DA8  2D                 	db	45
   773  006DA9  2D                 	db	45
   774  006DAA  2D                 	db	45
   775  006DAB  2D                 	db	45
   776  006DAC  2D                 	db	45
   777  006DAD  2D                 	db	45
   778  006DAE  2D                 	db	45
   779  006DAF  2D                 	db	45
   780  006DB0  2D                 	db	45
   781  006DB1  2D                 	db	45
   782  006DB2  2D                 	db	45
   783  006DB3  2D                 	db	45
   784  006DB4  2D                 	db	45
   785  006DB5  2D                 	db	45
   786  006DB6  2D                 	db	45
   787  006DB7  2D                 	db	45
   788  006DB8  2D                 	db	45
   789  006DB9  2D                 	db	45
   790  006DBA  2D                 	db	45
   791  006DBB  2D                 	db	45
   792  006DBC  2D                 	db	45
   793  006DBD  2D                 	db	45
   794  006DBE  2D                 	db	45
   795  006DBF  2D                 	db	45
   796  006DC0  2D                 	db	45
   797  006DC1  2D                 	db	45
   798  006DC2  2D                 	db	45
   799  006DC3  2D                 	db	45
   800  006DC4  2D                 	db	45
   801  006DC5  2D                 	db	45
   802  006DC6  2D                 	db	45
   803  006DC7  2D                 	db	45
   804  006DC8  2D                 	db	45
   805  006DC9  2D                 	db	45
   806  006DCA  2D                 	db	45
   807  006DCB  2D                 	db	45
   808  006DCC  2D                 	db	45
   809  006DCD  2D                 	db	45
   810  006DCE  2D                 	db	45
   811  006DCF  2D                 	db	45
   812  006DD0  2D                 	db	45
   813  006DD1  2D                 	db	45
   814  006DD2  2D                 	db	45
   815  006DD3  2D                 	db	45
   816  006DD4  2D                 	db	45
   817  006DD5  2D                 	db	45
   818  006DD6  0D                 	db	13
   819  006DD7  0A                 	db	10
   820  006DD8  00                 	db	0
   821  006DD9                     STR_264:
   822  006DD9  20                 	db	32
   823  006DDA  20                 	db	32
   824  006DDB  20                 	db	32
   825  006DDC  20                 	db	32
   826  006DDD  52                 	db	82	;'R'
   827  006DDE  57                 	db	87	;'W'
   828  006DDF  54                 	db	84	;'T'
   829  006DE0  49                 	db	73	;'I'
   830  006DE1  4D                 	db	77	;'M'
   831  006DE2  45                 	db	69	;'E'
   832  006DE3  4F                 	db	79	;'O'
   833  006DE4  55                 	db	85	;'U'
   834  006DE5  54                 	db	84	;'T'
   835  006DE6  20                 	db	32
   836  006DE7  2D                 	db	45
   837  006DE8  20                 	db	32
   838  006DE9  53                 	db	83	;'S'
   839  006DEA  65                 	db	101	;'e'
   840  006DEB  74                 	db	116	;'t'
   841  006DEC  20                 	db	32
   842  006DED  72                 	db	114	;'r'
   843  006DEE  65                 	db	101	;'e'
   844  006DEF  67                 	db	103	;'g'
   845  006DF0  69                 	db	105	;'i'
   846  006DF1  73                 	db	115	;'s'
   847  006DF2  74                 	db	116	;'t'
   848  006DF3  65                 	db	101	;'e'
   849  006DF4  72                 	db	114	;'r'
   850  006DF5  20                 	db	32
   851  006DF6  72                 	db	114	;'r'
   852  006DF7  65                 	db	101	;'e'
   853  006DF8  61                 	db	97	;'a'
   854  006DF9  64                 	db	100	;'d'
   855  006DFA  2F                 	db	47
   856  006DFB  77                 	db	119	;'w'
   857  006DFC  72                 	db	114	;'r'
   858  006DFD  69                 	db	105	;'i'
   859  006DFE  74                 	db	116	;'t'
   860  006DFF  65                 	db	101	;'e'
   861  006E00  20                 	db	32
   862  006E01  74                 	db	116	;'t'
   863  006E02  69                 	db	105	;'i'
   864  006E03  6D                 	db	109	;'m'
   865  006E04  65                 	db	101	;'e'
   866  006E05  6F                 	db	111	;'o'
   867  006E06  75                 	db	117	;'u'
   868  006E07  74                 	db	116	;'t'
   869  006E08  2E                 	db	46
   870  006E09  20                 	db	32
   871  006E0A  44                 	db	68	;'D'
   872  006E0B  65                 	db	101	;'e'
   873  006E0C  66                 	db	102	;'f'
   874  006E0D  61                 	db	97	;'a'
   875  006E0E  75                 	db	117	;'u'
   876  006E0F  6C                 	db	108	;'l'
   877  006E10  74                 	db	116	;'t'
   878  006E11  3D                 	db	61	;'='
   879  006E12  32                 	db	50	;'2'
   880  006E13  30                 	db	48	;'0'
   881  006E14  20                 	db	32
   882  006E15  6D                 	db	109	;'m'
   883  006E16  73                 	db	115	;'s'
   884  006E17  20                 	db	32
   885  006E18  2E                 	db	46
   886  006E19  0D                 	db	13
   887  006E1A  0A                 	db	10
   888  006E1B  00                 	db	0
   889  006E1C                     STR_107:
   890  006E1C  2D                 	db	45
   891  006E1D  45                 	db	69	;'E'
   892  006E1E  52                 	db	82	;'R'
   893  006E1F  52                 	db	82	;'R'
   894  006E20  4F                 	db	79	;'O'
   895  006E21  52                 	db	82	;'R'
   896  006E22  20                 	db	32
   897  006E23  2D                 	db	45
   898  006E24  20                 	db	32
   899  006E25  46                 	db	70	;'F'
   900  006E26  69                 	db	105	;'i'
   901  006E27  6C                 	db	108	;'l'
   902  006E28  74                 	db	116	;'t'
   903  006E29  65                 	db	101	;'e'
   904  006E2A  72                 	db	114	;'r'
   905  006E2B  20                 	db	32
   906  006E2C  6E                 	db	110	;'n'
   907  006E2D  75                 	db	117	;'u'
   908  006E2E  6D                 	db	109	;'m'
   909  006E2F  62                 	db	98	;'b'
   910  006E30  65                 	db	101	;'e'
   911  006E31  72                 	db	114	;'r'
   912  006E32  20                 	db	32
   913  006E33  63                 	db	99	;'c'
   914  006E34  61                 	db	97	;'a'
   915  006E35  6E                 	db	110	;'n'
   916  006E36  20                 	db	32
   917  006E37  6F                 	db	111	;'o'
   918  006E38  6E                 	db	110	;'n'
   919  006E39  6C                 	db	108	;'l'
   920  006E3A  79                 	db	121	;'y'
   921  006E3B  20                 	db	32
   922  006E3C  62                 	db	98	;'b'
   923  006E3D  65                 	db	101	;'e'
   924  006E3E  20                 	db	32
   925  006E3F  73                 	db	115	;'s'
   926  006E40  65                 	db	101	;'e'
   927  006E41  74                 	db	116	;'t'
   928  006E42  20                 	db	32
   929  006E43  74                 	db	116	;'t'
   930  006E44  6F                 	db	111	;'o'
   931  006E45  20                 	db	32
   932  006E46  61                 	db	97	;'a'
   933  006E47  20                 	db	32
   934  006E48  76                 	db	118	;'v'
   935  006E49  61                 	db	97	;'a'
   936  006E4A  6C                 	db	108	;'l'
   937  006E4B  75                 	db	117	;'u'
   938  006E4C  65                 	db	101	;'e'
   939  006E4D  20                 	db	32
   940  006E4E  62                 	db	98	;'b'
   941  006E4F  65                 	db	101	;'e'
   942  006E50  74                 	db	116	;'t'
   943  006E51  77                 	db	119	;'w'
   944  006E52  65                 	db	101	;'e'
   945  006E53  65                 	db	101	;'e'
   946  006E54  6E                 	db	110	;'n'
   947  006E55  20                 	db	32
   948  006E56  30                 	db	48	;'0'
   949  006E57  2D                 	db	45
   950  006E58  31                 	db	49	;'1'
   951  006E59  35                 	db	53	;'5'
   952  006E5A  2E                 	db	46
   953  006E5B  0D                 	db	13
   954  006E5C  0A                 	db	10
   955  006E5D  00                 	db	0
   956  006E5E                     STR_267:
   957  006E5E  20                 	db	32
   958  006E5F  20                 	db	32
   959  006E60  20                 	db	32
   960  006E61  20                 	db	32
   961  006E62  4D                 	db	77	;'M'
   962  006E63  4F                 	db	79	;'O'
   963  006E64  44                 	db	68	;'D'
   964  006E65  45                 	db	69	;'E'
   965  006E66  20                 	db	32
   966  006E67  2D                 	db	45
   967  006E68  20                 	db	32
   968  006E69  53                 	db	83	;'S'
   969  006E6A  65                 	db	101	;'e'
   970  006E6B  74                 	db	116	;'t'
   971  006E6C  20                 	db	32
   972  006E6D  61                 	db	97	;'a'
   973  006E6E  64                 	db	100	;'d'
   974  006E6F  61                 	db	97	;'a'
   975  006E70  70                 	db	112	;'p'
   976  006E71  74                 	db	116	;'t'
   977  006E72  65                 	db	101	;'e'
   978  006E73  72                 	db	114	;'r'
   979  006E74  20                 	db	32
   980  006E75  6D                 	db	109	;'m'
   981  006E76  6F                 	db	111	;'o'
   982  006E77  64                 	db	100	;'d'
   983  006E78  65                 	db	101	;'e'
   984  006E79  20                 	db	32
   985  006E7A  74                 	db	116	;'t'
   986  006E7B  68                 	db	104	;'h'
   987  006E7C  61                 	db	97	;'a'
   988  006E7D  74                 	db	116	;'t'
   989  006E7E  20                 	db	32
   990  006E7F  73                 	db	115	;'s'
   991  006E80  68                 	db	104	;'h'
   992  006E81  6F                 	db	111	;'o'
   993  006E82  75                 	db	117	;'u'
   994  006E83  6C                 	db	108	;'l'
   995  006E84  64                 	db	100	;'d'
   996  006E85  20                 	db	32
   997  006E86  62                 	db	98	;'b'
   998  006E87  65                 	db	101	;'e'
   999  006E88  20                 	db	32
  1000  006E89  75                 	db	117	;'u'
  1001  006E8A  73                 	db	115	;'s'
  1002  006E8B  65                 	db	101	;'e'
  1003  006E8C  64                 	db	100	;'d'
  1004  006E8D  20                 	db	32
  1005  006E8E  6F                 	db	111	;'o'
  1006  006E8F  6E                 	db	110	;'n'
  1007  006E90  20                 	db	32
  1008  006E91  73                 	db	115	;'s'
  1009  006E92  74                 	db	116	;'t'
  1010  006E93  61                 	db	97	;'a'
  1011  006E94  72                 	db	114	;'r'
  1012  006E95  74                 	db	116	;'t'
  1013  006E96  75                 	db	117	;'u'
  1014  006E97  70                 	db	112	;'p'
  1015  006E98  2E                 	db	46
  1016  006E99  0D                 	db	13
  1017  006E9A  0A                 	db	10
  1018  006E9B  00                 	db	0
  1019  006E9C                     STR_227:
  1020  006E9C  54                 	db	84	;'T'
  1021  006E9D  72                 	db	114	;'r'
  1022  006E9E  61                 	db	97	;'a'
  1023  006E9F  6E                 	db	110	;'n'
  1024  006EA0  73                 	db	115	;'s'
  1025  006EA1  6D                 	db	109	;'m'
  1026  006EA2  69                 	db	105	;'i'
  1027  006EA3  74                 	db	116	;'t'
  1028  006EA4  74                 	db	116	;'t'
  1029  006EA5  65                 	db	101	;'e'
  1030  006EA6  72                 	db	114	;'r'
  1031  006EA7  20                 	db	32
  1032  006EA8  69                 	db	105	;'i'
  1033  006EA9  6E                 	db	110	;'n'
  1034  006EAA  20                 	db	32
  1035  006EAB  45                 	db	69	;'E'
  1036  006EAC  72                 	db	114	;'r'
  1037  006EAD  72                 	db	114	;'r'
  1038  006EAE  6F                 	db	111	;'o'
  1039  006EAF  72                 	db	114	;'r'
  1040  006EB0  20                 	db	32
  1041  006EB1  53                 	db	83	;'S'
  1042  006EB2  74                 	db	116	;'t'
  1043  006EB3  61                 	db	97	;'a'
  1044  006EB4  74                 	db	116	;'t'
  1045  006EB5  65                 	db	101	;'e'
  1046  006EB6  20                 	db	32
  1047  006EB7  57                 	db	87	;'W'
  1048  006EB8  61                 	db	97	;'a'
  1049  006EB9  72                 	db	114	;'r'
  1050  006EBA  6E                 	db	110	;'n'
  1051  006EBB  69                 	db	105	;'i'
  1052  006EBC  6E                 	db	110	;'n'
  1053  006EBD  67                 	db	103	;'g'
  1054  006EBE  20                 	db	32
  1055  006EBF  28                 	db	40
  1056  006EC0  31                 	db	49	;'1'
  1057  006EC1  32                 	db	50	;'2'
  1058  006EC2  38                 	db	56	;'8'
  1059  006EC3  20                 	db	32
  1060  006EC4  3E                 	db	62	;'>'
  1061  006EC5  20                 	db	32
  1062  006EC6  54                 	db	84	;'T'
  1063  006EC7  45                 	db	69	;'E'
  1064  006EC8  52                 	db	82	;'R'
  1065  006EC9  52                 	db	82	;'R'
  1066  006ECA  43                 	db	67	;'C'
  1067  006ECB  4E                 	db	78	;'N'
  1068  006ECC  54                 	db	84	;'T'
  1069  006ECD  20                 	db	32
  1070  006ECE  3F                 	db	63	;'?'
  1071  006ECF  20                 	db	32
  1072  006ED0  39                 	db	57	;'9'
  1073  006ED1  36                 	db	54	;'6'
  1074  006ED2  29                 	db	41
  1075  006ED3  0D                 	db	13
  1076  006ED4  0A                 	db	10
  1077  006ED5  00                 	db	0
  1078  006ED6                     STR_2:
  1079  006ED6  43                 	db	67	;'C'
  1080  006ED7  6F                 	db	111	;'o'
  1081  006ED8  70                 	db	112	;'p'
  1082  006ED9  79                 	db	121	;'y'
  1083  006EDA  72                 	db	114	;'r'
  1084  006EDB  69                 	db	105	;'i'
  1085  006EDC  67                 	db	103	;'g'
  1086  006EDD  68                 	db	104	;'h'
  1087  006EDE  74                 	db	116	;'t'
  1088  006EDF  20                 	db	32
  1089  006EE0  28                 	db	40
  1090  006EE1  43                 	db	67	;'C'
  1091  006EE2  29                 	db	41
  1092  006EE3  20                 	db	32
  1093  006EE4  32                 	db	50	;'2'
  1094  006EE5  30                 	db	48	;'0'
  1095  006EE6  31                 	db	49	;'1'
  1096  006EE7  34                 	db	52	;'4'
  1097  006EE8  2D                 	db	45
  1098  006EE9  32                 	db	50	;'2'
  1099  006EEA  30                 	db	48	;'0'
  1100  006EEB  31                 	db	49	;'1'
  1101  006EEC  35                 	db	53	;'5'
  1102  006EED  20                 	db	32
  1103  006EEE  50                 	db	80	;'P'
  1104  006EEF  61                 	db	97	;'a'
  1105  006EF0  72                 	db	114	;'r'
  1106  006EF1  61                 	db	97	;'a'
  1107  006EF2  64                 	db	100	;'d'
  1108  006EF3  69                 	db	105	;'i'
  1109  006EF4  73                 	db	115	;'s'
  1110  006EF5  65                 	db	101	;'e'
  1111  006EF6  20                 	db	32
  1112  006EF7  6F                 	db	111	;'o'
  1113  006EF8  66                 	db	102	;'f'
  1114  006EF9  20                 	db	32
  1115  006EFA  74                 	db	116	;'t'
  1116  006EFB  68                 	db	104	;'h'
  1117  006EFC  65                 	db	101	;'e'
  1118  006EFD  20                 	db	32
  1119  006EFE  46                 	db	70	;'F'
  1120  006EFF  72                 	db	114	;'r'
  1121  006F00  6F                 	db	111	;'o'
  1122  006F01  67                 	db	103	;'g'
  1123  006F02  20                 	db	32
  1124  006F03  41                 	db	65	;'A'
  1125  006F04  42                 	db	66	;'B'
  1126  006F05  2C                 	db	44
  1127  006F06  20                 	db	32
  1128  006F07  53                 	db	83	;'S'
  1129  006F08  77                 	db	119	;'w'
  1130  006F09  65                 	db	101	;'e'
  1131  006F0A  64                 	db	100	;'d'
  1132  006F0B  65                 	db	101	;'e'
  1133  006F0C  6E                 	db	110	;'n'
  1134  006F0D  0D                 	db	13
  1135  006F0E  0A                 	db	10
  1136  006F0F  00                 	db	0
  1137  006F10                     STR_229:
  1138  006F10  54                 	db	84	;'T'
  1139  006F11  72                 	db	114	;'r'
  1140  006F12  61                 	db	97	;'a'
  1141  006F13  6E                 	db	110	;'n'
  1142  006F14  73                 	db	115	;'s'
  1143  006F15  6D                 	db	109	;'m'
  1144  006F16  69                 	db	105	;'i'
  1145  006F17  74                 	db	116	;'t'
  1146  006F18  74                 	db	116	;'t'
  1147  006F19  65                 	db	101	;'e'
  1148  006F1A  72                 	db	114	;'r'
  1149  006F1B  20                 	db	32
  1150  006F1C  69                 	db	105	;'i'
  1151  006F1D  6E                 	db	110	;'n'
  1152  006F1E  20                 	db	32
  1153  006F1F  45                 	db	69	;'E'
  1154  006F20  72                 	db	114	;'r'
  1155  006F21  72                 	db	114	;'r'
  1156  006F22  6F                 	db	111	;'o'
  1157  006F23  72                 	db	114	;'r'
  1158  006F24  20                 	db	32
  1159  006F25  53                 	db	83	;'S'
  1160  006F26  74                 	db	116	;'t'
  1161  006F27  61                 	db	97	;'a'
  1162  006F28  74                 	db	116	;'t'
  1163  006F29  65                 	db	101	;'e'
  1164  006F2A  20                 	db	32
  1165  006F2B  42                 	db	66	;'B'
  1166  006F2C  75                 	db	117	;'u'
  1167  006F2D  73                 	db	115	;'s'
  1168  006F2E  20                 	db	32
  1169  006F2F  50                 	db	80	;'P'
  1170  006F30  61                 	db	97	;'a'
  1171  006F31  73                 	db	115	;'s'
  1172  006F32  73                 	db	115	;'s'
  1173  006F33  69                 	db	105	;'i'
  1174  006F34  76                 	db	118	;'v'
  1175  006F35  65                 	db	101	;'e'
  1176  006F36  20                 	db	32
  1177  006F37  28                 	db	40
  1178  006F38  54                 	db	84	;'T'
  1179  006F39  45                 	db	69	;'E'
  1180  006F3A  52                 	db	82	;'R'
  1181  006F3B  52                 	db	82	;'R'
  1182  006F3C  43                 	db	67	;'C'
  1183  006F3D  4E                 	db	78	;'N'
  1184  006F3E  54                 	db	84	;'T'
  1185  006F3F  20                 	db	32
  1186  006F40  3F                 	db	63	;'?'
  1187  006F41  20                 	db	32
  1188  006F42  31                 	db	49	;'1'
  1189  006F43  32                 	db	50	;'2'
  1190  006F44  38                 	db	56	;'8'
  1191  006F45  29                 	db	41
  1192  006F46  0D                 	db	13
  1193  006F47  0A                 	db	10
  1194  006F48  00                 	db	0
  1195  006F49                     STR_248:
  1196  006F49  20                 	db	32
  1197  006F4A  20                 	db	32
  1198  006F4B  20                 	db	32
  1199  006F4C  20                 	db	32
  1200  006F4D  20                 	db	32
  1201  006F4E  46                 	db	70	;'F'
  1202  006F4F  6F                 	db	111	;'o'
  1203  006F50  72                 	db	114	;'r'
  1204  006F51  6D                 	db	109	;'m'
  1205  006F52  61                 	db	97	;'a'
  1206  006F53  74                 	db	116	;'t'
  1207  006F54  3A                 	db	58	;':'
  1208  006F55  20                 	db	32
  1209  006F56  70                 	db	112	;'p'
  1210  006F57  72                 	db	114	;'r'
  1211  006F58  69                 	db	105	;'i'
  1212  006F59  6F                 	db	111	;'o'
  1213  006F5A  72                 	db	114	;'r'
  1214  006F5B  69                 	db	105	;'i'
  1215  006F5C  74                 	db	116	;'t'
  1216  006F5D  79                 	db	121	;'y'
  1217  006F5E  2C                 	db	44
  1218  006F5F  63                 	db	99	;'c'
  1219  006F60  6C                 	db	108	;'l'
  1220  006F61  61                 	db	97	;'a'
  1221  006F62  73                 	db	115	;'s'
  1222  006F63  73                 	db	115	;'s'
  1223  006F64  2C                 	db	44
  1224  006F65  74                 	db	116	;'t'
  1225  006F66  79                 	db	121	;'y'
  1226  006F67  70                 	db	112	;'p'
  1227  006F68  65                 	db	101	;'e'
  1228  006F69  2C                 	db	44
  1229  006F6A  6E                 	db	110	;'n'
  1230  006F6B  6F                 	db	111	;'o'
  1231  006F6C  64                 	db	100	;'d'
  1232  006F6D  65                 	db	101	;'e'
  1233  006F6E  69                 	db	105	;'i'
  1234  006F6F  64                 	db	100	;'d'
  1235  006F70  2C                 	db	44
  1236  006F71  63                 	db	99	;'c'
  1237  006F72  6F                 	db	111	;'o'
  1238  006F73  75                 	db	117	;'u'
  1239  006F74  6E                 	db	110	;'n'
  1240  006F75  74                 	db	116	;'t'
  1241  006F76  2C                 	db	44
  1242  006F77  64                 	db	100	;'d'
  1243  006F78  61                 	db	97	;'a'
  1244  006F79  74                 	db	116	;'t'
  1245  006F7A  61                 	db	97	;'a'
  1246  006F7B  2C                 	db	44
  1247  006F7C  2C                 	db	44
  1248  006F7D  2C                 	db	44
  1249  006F7E  0D                 	db	13
  1250  006F7F  0A                 	db	10
  1251  006F80  00                 	db	0
  1252  006F81                     STR_234:
  1253  006F81  52                 	db	82	;'R'
  1254  006F82  65                 	db	101	;'e'
  1255  006F83  63                 	db	99	;'c'
  1256  006F84  65                 	db	101	;'e'
  1257  006F85  69                 	db	105	;'i'
  1258  006F86  76                 	db	118	;'v'
  1259  006F87  65                 	db	101	;'e'
  1260  006F88  72                 	db	114	;'r'
  1261  006F89  20                 	db	32
  1262  006F8A  69                 	db	105	;'i'
  1263  006F8B  6E                 	db	110	;'n'
  1264  006F8C  20                 	db	32
  1265  006F8D  45                 	db	69	;'E'
  1266  006F8E  72                 	db	114	;'r'
  1267  006F8F  72                 	db	114	;'r'
  1268  006F90  6F                 	db	111	;'o'
  1269  006F91  72                 	db	114	;'r'
  1270  006F92  20                 	db	32
  1271  006F93  53                 	db	83	;'S'
  1272  006F94  74                 	db	116	;'t'
  1273  006F95  61                 	db	97	;'a'
  1274  006F96  74                 	db	116	;'t'
  1275  006F97  65                 	db	101	;'e'
  1276  006F98  20                 	db	32
  1277  006F99  57                 	db	87	;'W'
  1278  006F9A  61                 	db	97	;'a'
  1279  006F9B  72                 	db	114	;'r'
  1280  006F9C  6E                 	db	110	;'n'
  1281  006F9D  69                 	db	105	;'i'
  1282  006F9E  6E                 	db	110	;'n'
  1283  006F9F  67                 	db	103	;'g'
  1284  006FA0  20                 	db	32
  1285  006FA1  28                 	db	40
  1286  006FA2  31                 	db	49	;'1'
  1287  006FA3  32                 	db	50	;'2'
  1288  006FA4  38                 	db	56	;'8'
  1289  006FA5  20                 	db	32
  1290  006FA6  3E                 	db	62	;'>'
  1291  006FA7  20                 	db	32
  1292  006FA8  52                 	db	82	;'R'
  1293  006FA9  45                 	db	69	;'E'
  1294  006FAA  52                 	db	82	;'R'
  1295  006FAB  52                 	db	82	;'R'
  1296  006FAC  43                 	db	67	;'C'
  1297  006FAD  4E                 	db	78	;'N'
  1298  006FAE  54                 	db	84	;'T'
  1299  006FAF  20                 	db	32
  1300  006FB0  3F                 	db	63	;'?'
  1301  006FB1  20                 	db	32
  1302  006FB2  39                 	db	57	;'9'
  1303  006FB3  36                 	db	54	;'6'
  1304  006FB4  29                 	db	41
  1305  006FB5  0D                 	db	13
  1306  006FB6  0A                 	db	10
  1307  006FB7  00                 	db	0
  1308  006FB8                     STR_266:
  1309  006FB8  20                 	db	32
  1310  006FB9  20                 	db	32
  1311  006FBA  20                 	db	32
  1312  006FBB  20                 	db	32
  1313  006FBC  53                 	db	83	;'S'
  1314  006FBD  54                 	db	84	;'T'
  1315  006FBE  41                 	db	65	;'A'
  1316  006FBF  52                 	db	82	;'R'
  1317  006FC0  54                 	db	84	;'T'
  1318  006FC1  49                 	db	73	;'I'
  1319  006FC2  46                 	db	70	;'F'
  1320  006FC3  20                 	db	32
  1321  006FC4  2D                 	db	45
  1322  006FC5  20                 	db	32
  1323  006FC6  53                 	db	83	;'S'
  1324  006FC7  65                 	db	101	;'e'
  1325  006FC8  74                 	db	116	;'t'
  1326  006FC9  20                 	db	32
  1327  006FCA  69                 	db	105	;'i'
  1328  006FCB  6E                 	db	110	;'n'
  1329  006FCC  74                 	db	116	;'t'
  1330  006FCD  65                 	db	101	;'e'
  1331  006FCE  72                 	db	114	;'r'
  1332  006FCF  66                 	db	102	;'f'
  1333  006FD0  61                 	db	97	;'a'
  1334  006FD1  63                 	db	99	;'c'
  1335  006FD2  65                 	db	101	;'e'
  1336  006FD3  20                 	db	32
  1337  006FD4  73                 	db	115	;'s'
  1338  006FD5  74                 	db	116	;'t'
  1339  006FD6  61                 	db	97	;'a'
  1340  006FD7  74                 	db	116	;'t'
  1341  006FD8  65                 	db	101	;'e'
  1342  006FD9  20                 	db	32
  1343  006FDA  74                 	db	116	;'t'
  1344  006FDB  6F                 	db	111	;'o'
  1345  006FDC  20                 	db	32
  1346  006FDD  75                 	db	117	;'u'
  1347  006FDE  73                 	db	115	;'s'
  1348  006FDF  65                 	db	101	;'e'
  1349  006FE0  20                 	db	32
  1350  006FE1  6F                 	db	111	;'o'
  1351  006FE2  6E                 	db	110	;'n'
  1352  006FE3  20                 	db	32
  1353  006FE4  73                 	db	115	;'s'
  1354  006FE5  74                 	db	116	;'t'
  1355  006FE6  61                 	db	97	;'a'
  1356  006FE7  72                 	db	114	;'r'
  1357  006FE8  74                 	db	116	;'t'
  1358  006FE9  75                 	db	117	;'u'
  1359  006FEA  70                 	db	112	;'p'
  1360  006FEB  2E                 	db	46
  1361  006FEC  0D                 	db	13
  1362  006FED  0A                 	db	10
  1363  006FEE  00                 	db	0
  1364  006FEF                     STR_4:
  1365  006FEF  50                 	db	80	;'P'
  1366  006FF0  72                 	db	114	;'r'
  1367  006FF1  65                 	db	101	;'e'
  1368  006FF2  73                 	db	115	;'s'
  1369  006FF3  73                 	db	115	;'s'
  1370  006FF4  20                 	db	32
  1371  006FF5  27                 	db	39
  1372  006FF6  76                 	db	118	;'v'
  1373  006FF7  27                 	db	39
  1374  006FF8  20                 	db	32
  1375  006FF9  77                 	db	119	;'w'
  1376  006FFA  69                 	db	105	;'i'
  1377  006FFB  74                 	db	116	;'t'
  1378  006FFC  68                 	db	104	;'h'
  1379  006FFD  69                 	db	105	;'i'
  1380  006FFE  6E                 	db	110	;'n'
  1381  006FFF  20                 	db	32
  1382  007000  74                 	db	116	;'t'
  1383  007001  68                 	db	104	;'h'
  1384  007002  72                 	db	114	;'r'
  1385  007003  65                 	db	101	;'e'
  1386  007004  65                 	db	101	;'e'
  1387  007005  20                 	db	32
  1388  007006  73                 	db	115	;'s'
  1389  007007  65                 	db	101	;'e'
  1390  007008  63                 	db	99	;'c'
  1391  007009  6F                 	db	111	;'o'
  1392  00700A  6E                 	db	110	;'n'
  1393  00700B  64                 	db	100	;'d'
  1394  00700C  73                 	db	115	;'s'
  1395  00700D  20                 	db	32
  1396  00700E  74                 	db	116	;'t'
  1397  00700F  6F                 	db	111	;'o'
  1398  007010  20                 	db	32
  1399  007011  65                 	db	101	;'e'
  1400  007012  6E                 	db	110	;'n'
  1401  007013  74                 	db	116	;'t'
  1402  007014  65                 	db	101	;'e'
  1403  007015  72                 	db	114	;'r'
  1404  007016  20                 	db	32
  1405  007017  76                 	db	118	;'v'
  1406  007018  65                 	db	101	;'e'
  1407  007019  72                 	db	114	;'r'
  1408  00701A  62                 	db	98	;'b'
  1409  00701B  6F                 	db	111	;'o'
  1410  00701C  73                 	db	115	;'s'
  1411  00701D  65                 	db	101	;'e'
  1412  00701E  20                 	db	32
  1413  00701F  6D                 	db	109	;'m'
  1414  007020  6F                 	db	111	;'o'
  1415  007021  64                 	db	100	;'d'
  1416  007022  65                 	db	101	;'e'
  1417  007023  0D                 	db	13
  1418  007024  0A                 	db	10
  1419  007025  00                 	db	0
  1420  007026                     STR_235:
  1421  007026  52                 	db	82	;'R'
  1422  007027  65                 	db	101	;'e'
  1423  007028  63                 	db	99	;'c'
  1424  007029  65                 	db	101	;'e'
  1425  00702A  69                 	db	105	;'i'
  1426  00702B  76                 	db	118	;'v'
  1427  00702C  65                 	db	101	;'e'
  1428  00702D  72                 	db	114	;'r'
  1429  00702E  20                 	db	32
  1430  00702F  69                 	db	105	;'i'
  1431  007030  6E                 	db	110	;'n'
  1432  007031  20                 	db	32
  1433  007032  45                 	db	69	;'E'
  1434  007033  72                 	db	114	;'r'
  1435  007034  72                 	db	114	;'r'
  1436  007035  6F                 	db	111	;'o'
  1437  007036  72                 	db	114	;'r'
  1438  007037  20                 	db	32
  1439  007038  53                 	db	83	;'S'
  1440  007039  74                 	db	116	;'t'
  1441  00703A  61                 	db	97	;'a'
  1442  00703B  74                 	db	116	;'t'
  1443  00703C  65                 	db	101	;'e'
  1444  00703D  20                 	db	32
  1445  00703E  42                 	db	66	;'B'
  1446  00703F  75                 	db	117	;'u'
  1447  007040  73                 	db	115	;'s'
  1448  007041  20                 	db	32
  1449  007042  50                 	db	80	;'P'
  1450  007043  61                 	db	97	;'a'
  1451  007044  73                 	db	115	;'s'
  1452  007045  73                 	db	115	;'s'
  1453  007046  69                 	db	105	;'i'
  1454  007047  76                 	db	118	;'v'
  1455  007048  65                 	db	101	;'e'
  1456  007049  20                 	db	32
  1457  00704A  28                 	db	40
  1458  00704B  52                 	db	82	;'R'
  1459  00704C  45                 	db	69	;'E'
  1460  00704D  52                 	db	82	;'R'
  1461  00704E  52                 	db	82	;'R'
  1462  00704F  43                 	db	67	;'C'
  1463  007050  4E                 	db	78	;'N'
  1464  007051  54                 	db	84	;'T'
  1465  007052  20                 	db	32
  1466  007053  3F                 	db	63	;'?'
  1467  007054  20                 	db	32
  1468  007055  31                 	db	49	;'1'
  1469  007056  32                 	db	50	;'2'
  1470  007057  38                 	db	56	;'8'
  1471  007058  29                 	db	41
  1472  007059  0D                 	db	13
  1473  00705A  0A                 	db	10
  1474  00705B  00                 	db	0
  1475  00705C                     STR_80:
  1476  00705C  2D                 	db	45
  1477  00705D  45                 	db	69	;'E'
  1478  00705E  52                 	db	82	;'R'
  1479  00705F  52                 	db	82	;'R'
  1480  007060  4F                 	db	79	;'O'
  1481  007061  52                 	db	82	;'R'
  1482  007062  20                 	db	32
  1483  007063  2D                 	db	45
  1484  007064  20                 	db	32
  1485  007065  4F                 	db	79	;'O'
  1486  007066  6E                 	db	110	;'n'
  1487  007067  65                 	db	101	;'e'
  1488  007068  20                 	db	32
  1489  007069  6F                 	db	111	;'o'
  1490  00706A  72                 	db	114	;'r'
  1491  00706B  20                 	db	32
  1492  00706C  6D                 	db	109	;'m'
  1493  00706D  6F                 	db	111	;'o'
  1494  00706E  72                 	db	114	;'r'
  1495  00706F  65                 	db	101	;'e'
  1496  007070  20                 	db	32
  1497  007071  72                 	db	114	;'r'
  1498  007072  65                 	db	101	;'e'
  1499  007073  67                 	db	103	;'g'
  1500  007074  69                 	db	105	;'i'
  1501  007075  73                 	db	115	;'s'
  1502  007076  74                 	db	116	;'t'
  1503  007077  65                 	db	101	;'e'
  1504  007078  72                 	db	114	;'r'
  1505  007079  28                 	db	40
  1506  00707A  73                 	db	115	;'s'
  1507  00707B  29                 	db	41
  1508  00707C  20                 	db	32
  1509  00707D  63                 	db	99	;'c'
  1510  00707E  6F                 	db	111	;'o'
  1511  00707F  75                 	db	117	;'u'
  1512  007080  6C                 	db	108	;'l'
  1513  007081  64                 	db	100	;'d'
  1514  007082  20                 	db	32
  1515  007083  6E                 	db	110	;'n'
  1516  007084  6F                 	db	111	;'o'
  1517  007085  74                 	db	116	;'t'
  1518  007086  20                 	db	32
  1519  007087  62                 	db	98	;'b'
  1520  007088  65                 	db	101	;'e'
  1521  007089  20                 	db	32
  1522  00708A  72                 	db	114	;'r'
  1523  00708B  65                 	db	101	;'e'
  1524  00708C  61                 	db	97	;'a'
  1525  00708D  64                 	db	100	;'d'
  1526  00708E  2E                 	db	46
  1527  00708F  0D                 	db	13
  1528  007090  0A                 	db	10
  1529  007091  00                 	db	0
  1530  007092                     STR_228:
  1531  007092  54                 	db	84	;'T'
  1532  007093  72                 	db	114	;'r'
  1533  007094  61                 	db	97	;'a'
  1534  007095  6E                 	db	110	;'n'
  1535  007096  73                 	db	115	;'s'
  1536  007097  6D                 	db	109	;'m'
  1537  007098  69                 	db	105	;'i'
  1538  007099  74                 	db	116	;'t'
  1539  00709A  74                 	db	116	;'t'
  1540  00709B  65                 	db	101	;'e'
  1541  00709C  72                 	db	114	;'r'
  1542  00709D  20                 	db	32
  1543  00709E  69                 	db	105	;'i'
  1544  00709F  6E                 	db	110	;'n'
  1545  0070A0  20                 	db	32
  1546  0070A1  45                 	db	69	;'E'
  1547  0070A2  72                 	db	114	;'r'
  1548  0070A3  72                 	db	114	;'r'
  1549  0070A4  6F                 	db	111	;'o'
  1550  0070A5  72                 	db	114	;'r'
  1551  0070A6  20                 	db	32
  1552  0070A7  53                 	db	83	;'S'
  1553  0070A8  74                 	db	116	;'t'
  1554  0070A9  61                 	db	97	;'a'
  1555  0070AA  74                 	db	116	;'t'
  1556  0070AB  65                 	db	101	;'e'
  1557  0070AC  20                 	db	32
  1558  0070AD  42                 	db	66	;'B'
  1559  0070AE  75                 	db	117	;'u'
  1560  0070AF  73                 	db	115	;'s'
  1561  0070B0  20                 	db	32
  1562  0070B1  4F                 	db	79	;'O'
  1563  0070B2  46                 	db	70	;'F'
  1564  0070B3  46                 	db	70	;'F'
  1565  0070B4  20                 	db	32
  1566  0070B5  28                 	db	40
  1567  0070B6  54                 	db	84	;'T'
  1568  0070B7  45                 	db	69	;'E'
  1569  0070B8  52                 	db	82	;'R'
  1570  0070B9  52                 	db	82	;'R'
  1571  0070BA  43                 	db	67	;'C'
  1572  0070BB  4E                 	db	78	;'N'
  1573  0070BC  54                 	db	84	;'T'
  1574  0070BD  20                 	db	32
  1575  0070BE  3F                 	db	63	;'?'
  1576  0070BF  20                 	db	32
  1577  0070C0  32                 	db	50	;'2'
  1578  0070C1  35                 	db	53	;'5'
  1579  0070C2  36                 	db	54	;'6'
  1580  0070C3  29                 	db	41
  1581  0070C4  0D                 	db	13
  1582  0070C5  0A                 	db	10
  1583  0070C6  00                 	db	0
  1584  0070C7                     STR_50:
  1585  0070C7  2D                 	db	45
  1586  0070C8  45                 	db	69	;'E'
  1587  0070C9  52                 	db	82	;'R'
  1588  0070CA  52                 	db	82	;'R'
  1589  0070CB  4F                 	db	79	;'O'
  1590  0070CC  52                 	db	82	;'R'
  1591  0070CD  20                 	db	32
  1592  0070CE  2D                 	db	45
  1593  0070CF  20                 	db	32
  1594  0070D0  43                 	db	67	;'C'
  1595  0070D1  6F                 	db	111	;'o'
  1596  0070D2  6D                 	db	109	;'m'
  1597  0070D3  6D                 	db	109	;'m'
  1598  0070D4  61                 	db	97	;'a'
  1599  0070D5  6E                 	db	110	;'n'
  1600  0070D6  64                 	db	100	;'d'
  1601  0070D7  20                 	db	32
  1602  0070D8  6F                 	db	111	;'o'
  1603  0070D9  6E                 	db	110	;'n'
  1604  0070DA  6C                 	db	108	;'l'
  1605  0070DB  79                 	db	121	;'y'
  1606  0070DC  20                 	db	32
  1607  0070DD  77                 	db	119	;'w'
  1608  0070DE  6F                 	db	111	;'o'
  1609  0070DF  72                 	db	114	;'r'
  1610  0070E0  6B                 	db	107	;'k'
  1611  0070E1  73                 	db	115	;'s'
  1612  0070E2  20                 	db	32
  1613  0070E3  69                 	db	105	;'i'
  1614  0070E4  66                 	db	102	;'f'
  1615  0070E5  20                 	db	32
  1616  0070E6  69                 	db	105	;'i'
  1617  0070E7  6E                 	db	110	;'n'
  1618  0070E8  74                 	db	116	;'t'
  1619  0070E9  65                 	db	101	;'e'
  1620  0070EA  72                 	db	114	;'r'
  1621  0070EB  66                 	db	102	;'f'
  1622  0070EC  61                 	db	97	;'a'
  1623  0070ED  63                 	db	99	;'c'
  1624  0070EE  65                 	db	101	;'e'
  1625  0070EF  20                 	db	32
  1626  0070F0  69                 	db	105	;'i'
  1627  0070F1  73                 	db	115	;'s'
  1628  0070F2  20                 	db	32
  1629  0070F3  6F                 	db	111	;'o'
  1630  0070F4  70                 	db	112	;'p'
  1631  0070F5  65                 	db	101	;'e'
  1632  0070F6  6E                 	db	110	;'n'
  1633  0070F7  2E                 	db	46
  1634  0070F8  0D                 	db	13
  1635  0070F9  0A                 	db	10
  1636  0070FA  00                 	db	0
  1637  0070FB                     STR_236:
  1638  0070FB  54                 	db	84	;'T'
  1639  0070FC  72                 	db	114	;'r'
  1640  0070FD  61                 	db	97	;'a'
  1641  0070FE  6E                 	db	110	;'n'
  1642  0070FF  73                 	db	115	;'s'
  1643  007100  6D                 	db	109	;'m'
  1644  007101  69                 	db	105	;'i'
  1645  007102  74                 	db	116	;'t'
  1646  007103  74                 	db	116	;'t'
  1647  007104  65                 	db	101	;'e'
  1648  007105  72                 	db	114	;'r'
  1649  007106  20                 	db	32
  1650  007107  6F                 	db	111	;'o'
  1651  007108  72                 	db	114	;'r'
  1652  007109  20                 	db	32
  1653  00710A  52                 	db	82	;'R'
  1654  00710B  65                 	db	101	;'e'
  1655  00710C  63                 	db	99	;'c'
  1656  00710D  65                 	db	101	;'e'
  1657  00710E  69                 	db	105	;'i'
  1658  00710F  76                 	db	118	;'v'
  1659  007110  65                 	db	101	;'e'
  1660  007111  72                 	db	114	;'r'
  1661  007112  20                 	db	32
  1662  007113  69                 	db	105	;'i'
  1663  007114  73                 	db	115	;'s'
  1664  007115  20                 	db	32
  1665  007116  69                 	db	105	;'i'
  1666  007117  6E                 	db	110	;'n'
  1667  007118  20                 	db	32
  1668  007119  45                 	db	69	;'E'
  1669  00711A  72                 	db	114	;'r'
  1670  00711B  72                 	db	114	;'r'
  1671  00711C  6F                 	db	111	;'o'
  1672  00711D  72                 	db	114	;'r'
  1673  00711E  20                 	db	32
  1674  00711F  53                 	db	83	;'S'
  1675  007120  74                 	db	116	;'t'
  1676  007121  61                 	db	97	;'a'
  1677  007122  74                 	db	116	;'t'
  1678  007123  65                 	db	101	;'e'
  1679  007124  20                 	db	32
  1680  007125  57                 	db	87	;'W'
  1681  007126  61                 	db	97	;'a'
  1682  007127  72                 	db	114	;'r'
  1683  007128  6E                 	db	110	;'n'
  1684  007129  69                 	db	105	;'i'
  1685  00712A  6E                 	db	110	;'n'
  1686  00712B  67                 	db	103	;'g'
  1687  00712C  0D                 	db	13
  1688  00712D  0A                 	db	10
  1689  00712E  00                 	db	0
  1690  00712F                     STR_242:
  1691  00712F  4C                 	db	76	;'L'
  1692  007130  49                 	db	73	;'I'
  1693  007131  53                 	db	83	;'S'
  1694  007132  54                 	db	84	;'T'
  1695  007133  45                 	db	69	;'E'
  1696  007134  4E                 	db	78	;'N'
  1697  007135  20                 	db	32
  1698  007136  2D                 	db	45
  1699  007137  20                 	db	32
  1700  007138  4F                 	db	79	;'O'
  1701  007139  70                 	db	112	;'p'
  1702  00713A  65                 	db	101	;'e'
  1703  00713B  6E                 	db	110	;'n'
  1704  00713C  20                 	db	32
  1705  00713D  43                 	db	67	;'C'
  1706  00713E  41                 	db	65	;'A'
  1707  00713F  4E                 	db	78	;'N'
  1708  007140  20                 	db	32
  1709  007141  69                 	db	105	;'i'
  1710  007142  6E                 	db	110	;'n'
  1711  007143  74                 	db	116	;'t'
  1712  007144  65                 	db	101	;'e'
  1713  007145  72                 	db	114	;'r'
  1714  007146  66                 	db	102	;'f'
  1715  007147  61                 	db	97	;'a'
  1716  007148  63                 	db	99	;'c'
  1717  007149  65                 	db	101	;'e'
  1718  00714A  20                 	db	32
  1719  00714B  69                 	db	105	;'i'
  1720  00714C  6E                 	db	110	;'n'
  1721  00714D  20                 	db	32
  1722  00714E  6C                 	db	108	;'l'
  1723  00714F  69                 	db	105	;'i'
  1724  007150  73                 	db	115	;'s'
  1725  007151  74                 	db	116	;'t'
  1726  007152  65                 	db	101	;'e'
  1727  007153  6E                 	db	110	;'n'
  1728  007154  20                 	db	32
  1729  007155  6F                 	db	111	;'o'
  1730  007156  6E                 	db	110	;'n'
  1731  007157  6C                 	db	108	;'l'
  1732  007158  79                 	db	121	;'y'
  1733  007159  20                 	db	32
  1734  00715A  6D                 	db	109	;'m'
  1735  00715B  6F                 	db	111	;'o'
  1736  00715C  64                 	db	100	;'d'
  1737  00715D  65                 	db	101	;'e'
  1738  00715E  2E                 	db	46
  1739  00715F  0D                 	db	13
  1740  007160  0A                 	db	10
  1741  007161  00                 	db	0
  1742  007162                     STR_120:
  1743  007162  2D                 	db	45
  1744  007163  45                 	db	69	;'E'
  1745  007164  52                 	db	82	;'R'
  1746  007165  52                 	db	82	;'R'
  1747  007166  4F                 	db	79	;'O'
  1748  007167  52                 	db	82	;'R'
  1749  007168  20                 	db	32
  1750  007169  2D                 	db	45
  1751  00716A  20                 	db	32
  1752  00716B  4D                 	db	77	;'M'
  1753  00716C  61                 	db	97	;'a'
  1754  00716D  73                 	db	115	;'s'
  1755  00716E  6B                 	db	107	;'k'
  1756  00716F  20                 	db	32
  1757  007170  6E                 	db	110	;'n'
  1758  007171  75                 	db	117	;'u'
  1759  007172  6D                 	db	109	;'m'
  1760  007173  62                 	db	98	;'b'
  1761  007174  65                 	db	101	;'e'
  1762  007175  72                 	db	114	;'r'
  1763  007176  20                 	db	32
  1764  007177  63                 	db	99	;'c'
  1765  007178  61                 	db	97	;'a'
  1766  007179  6E                 	db	110	;'n'
  1767  00717A  20                 	db	32
  1768  00717B  6F                 	db	111	;'o'
  1769  00717C  6E                 	db	110	;'n'
  1770  00717D  6C                 	db	108	;'l'
  1771  00717E  79                 	db	121	;'y'
  1772  00717F  20                 	db	32
  1773  007180  62                 	db	98	;'b'
  1774  007181  65                 	db	101	;'e'
  1775  007182  20                 	db	32
  1776  007183  73                 	db	115	;'s'
  1777  007184  65                 	db	101	;'e'
  1778  007185  74                 	db	116	;'t'
  1779  007186  20                 	db	32
  1780  007187  61                 	db	97	;'a'
  1781  007188  73                 	db	115	;'s'
  1782  007189  20                 	db	32
  1783  00718A  30                 	db	48	;'0'
  1784  00718B  20                 	db	32
  1785  00718C  6F                 	db	111	;'o'
  1786  00718D  72                 	db	114	;'r'
  1787  00718E  20                 	db	32
  1788  00718F  31                 	db	49	;'1'
  1789  007190  2E                 	db	46
  1790  007191  0D                 	db	13
  1791  007192  0A                 	db	10
  1792  007193  00                 	db	0
  1793  007194                     STR_243:
  1794  007194  4C                 	db	76	;'L'
  1795  007195  4F                 	db	79	;'O'
  1796  007196  4F                 	db	79	;'O'
  1797  007197  50                 	db	80	;'P'
  1798  007198  42                 	db	66	;'B'
  1799  007199  41                 	db	65	;'A'
  1800  00719A  43                 	db	67	;'C'
  1801  00719B  4B                 	db	75	;'K'
  1802  00719C  20                 	db	32
  1803  00719D  2D                 	db	45
  1804  00719E  20                 	db	32
  1805  00719F  4F                 	db	79	;'O'
  1806  0071A0  70                 	db	112	;'p'
  1807  0071A1  65                 	db	101	;'e'
  1808  0071A2  6E                 	db	110	;'n'
  1809  0071A3  20                 	db	32
  1810  0071A4  43                 	db	67	;'C'
  1811  0071A5  41                 	db	65	;'A'
  1812  0071A6  4E                 	db	78	;'N'
  1813  0071A7  20                 	db	32
  1814  0071A8  69                 	db	105	;'i'
  1815  0071A9  6E                 	db	110	;'n'
  1816  0071AA  74                 	db	116	;'t'
  1817  0071AB  65                 	db	101	;'e'
  1818  0071AC  72                 	db	114	;'r'
  1819  0071AD  66                 	db	102	;'f'
  1820  0071AE  61                 	db	97	;'a'
  1821  0071AF  63                 	db	99	;'c'
  1822  0071B0  65                 	db	101	;'e'
  1823  0071B1  20                 	db	32
  1824  0071B2  69                 	db	105	;'i'
  1825  0071B3  6E                 	db	110	;'n'
  1826  0071B4  20                 	db	32
  1827  0071B5  6C                 	db	108	;'l'
  1828  0071B6  6F                 	db	111	;'o'
  1829  0071B7  6F                 	db	111	;'o'
  1830  0071B8  70                 	db	112	;'p'
  1831  0071B9  62                 	db	98	;'b'
  1832  0071BA  61                 	db	97	;'a'
  1833  0071BB  63                 	db	99	;'c'
  1834  0071BC  6B                 	db	107	;'k'
  1835  0071BD  20                 	db	32
  1836  0071BE  6D                 	db	109	;'m'
  1837  0071BF  6F                 	db	111	;'o'
  1838  0071C0  64                 	db	100	;'d'
  1839  0071C1  65                 	db	101	;'e'
  1840  0071C2  2E                 	db	46
  1841  0071C3  0D                 	db	13
  1842  0071C4  0A                 	db	10
  1843  0071C5  00                 	db	0
  1844  0071C6                     STR_245:
  1845  0071C6  56                 	db	86	;'V'
  1846  0071C7  45                 	db	69	;'E'
  1847  0071C8  52                 	db	82	;'R'
  1848  0071C9  53                 	db	83	;'S'
  1849  0071CA  49                 	db	73	;'I'
  1850  0071CB  4F                 	db	79	;'O'
  1851  0071CC  4E                 	db	78	;'N'
  1852  0071CD  20                 	db	32
  1853  0071CE  2D                 	db	45
  1854  0071CF  20                 	db	32
  1855  0071D0  44                 	db	68	;'D'
  1856  0071D1  69                 	db	105	;'i'
  1857  0071D2  73                 	db	115	;'s'
  1858  0071D3  70                 	db	112	;'p'
  1859  0071D4  6C                 	db	108	;'l'
  1860  0071D5  61                 	db	97	;'a'
  1861  0071D6  79                 	db	121	;'y'
  1862  0071D7  20                 	db	32
  1863  0071D8  66                 	db	102	;'f'
  1864  0071D9  69                 	db	105	;'i'
  1865  0071DA  72                 	db	114	;'r'
  1866  0071DB  6D                 	db	109	;'m'
  1867  0071DC  77                 	db	119	;'w'
  1868  0071DD  61                 	db	97	;'a'
  1869  0071DE  72                 	db	114	;'r'
  1870  0071DF  65                 	db	101	;'e'
  1871  0071E0  20                 	db	32
  1872  0071E1  76                 	db	118	;'v'
  1873  0071E2  65                 	db	101	;'e'
  1874  0071E3  72                 	db	114	;'r'
  1875  0071E4  73                 	db	115	;'s'
  1876  0071E5  69                 	db	105	;'i'
  1877  0071E6  6F                 	db	111	;'o'
  1878  0071E7  6E                 	db	110	;'n'
  1879  0071E8  20                 	db	32
  1880  0071E9  69                 	db	105	;'i'
  1881  0071EA  6E                 	db	110	;'n'
  1882  0071EB  66                 	db	102	;'f'
  1883  0071EC  6F                 	db	111	;'o'
  1884  0071ED  72                 	db	114	;'r'
  1885  0071EE  6D                 	db	109	;'m'
  1886  0071EF  61                 	db	97	;'a'
  1887  0071F0  74                 	db	116	;'t'
  1888  0071F1  69                 	db	105	;'i'
  1889  0071F2  6F                 	db	111	;'o'
  1890  0071F3  6E                 	db	110	;'n'
  1891  0071F4  2E                 	db	46
  1892  0071F5  0D                 	db	13
  1893  0071F6  0A                 	db	10
  1894  0071F7  00                 	db	0
  1895  0071F8                     STR_265:
  1896  0071F8  20                 	db	32
  1897  0071F9  20                 	db	32
  1898  0071FA  20                 	db	32
  1899  0071FB  20                 	db	32
  1900  0071FC  20                 	db	32
  1901  0071FD  20                 	db	32
  1902  0071FE  20                 	db	32
  1903  0071FF  20                 	db	32
  1904  007200  20                 	db	32
  1905  007201  20                 	db	32
  1906  007202  20                 	db	32
  1907  007203  20                 	db	32
  1908  007204  20                 	db	32
  1909  007205  20                 	db	32
  1910  007206  20                 	db	32
  1911  007207  20                 	db	32
  1912  007208  46                 	db	70	;'F'
  1913  007209  6F                 	db	111	;'o'
  1914  00720A  72                 	db	114	;'r'
  1915  00720B  6D                 	db	109	;'m'
  1916  00720C  61                 	db	97	;'a'
  1917  00720D  74                 	db	116	;'t'
  1918  00720E  3A                 	db	58	;':'
  1919  00720F  20                 	db	32
  1920  007210  73                 	db	115	;'s'
  1921  007211  65                 	db	101	;'e'
  1922  007212  74                 	db	116	;'t'
  1923  007213  20                 	db	32
  1924  007214  72                 	db	114	;'r'
  1925  007215  77                 	db	119	;'w'
  1926  007216  74                 	db	116	;'t'
  1927  007217  69                 	db	105	;'i'
  1928  007218  6D                 	db	109	;'m'
  1929  007219  65                 	db	101	;'e'
  1930  00721A  6F                 	db	111	;'o'
  1931  00721B  75                 	db	117	;'u'
  1932  00721C  74                 	db	116	;'t'
  1933  00721D  20                 	db	32
  1934  00721E  74                 	db	116	;'t'
  1935  00721F  69                 	db	105	;'i'
  1936  007220  6D                 	db	109	;'m'
  1937  007221  65                 	db	101	;'e'
  1938  007222  6F                 	db	111	;'o'
  1939  007223  75                 	db	117	;'u'
  1940  007224  74                 	db	116	;'t'
  1941  007225  2E                 	db	46
  1942  007226  0D                 	db	13
  1943  007227  0A                 	db	10
  1944  007228  00                 	db	0
  1945  007229                     STR_263:
  1946  007229  20                 	db	32
  1947  00722A  20                 	db	32
  1948  00722B  20                 	db	32
  1949  00722C  20                 	db	32
  1950  00722D  44                 	db	68	;'D'
  1951  00722E  45                 	db	69	;'E'
  1952  00722F  43                 	db	67	;'C'
  1953  007230  49                 	db	73	;'I'
  1954  007231  4D                 	db	77	;'M'
  1955  007232  41                 	db	65	;'A'
  1956  007233  4C                 	db	76	;'L'
  1957  007234  20                 	db	32
  1958  007235  2D                 	db	45
  1959  007236  20                 	db	32
  1960  007237  44                 	db	68	;'D'
  1961  007238  69                 	db	105	;'i'
  1962  007239  73                 	db	115	;'s'
  1963  00723A  70                 	db	112	;'p'
  1964  00723B  6C                 	db	108	;'l'
  1965  00723C  61                 	db	97	;'a'
  1966  00723D  79                 	db	121	;'y'
  1967  00723E  20                 	db	32
  1968  00723F  6E                 	db	110	;'n'
  1969  007240  75                 	db	117	;'u'
  1970  007241  6D                 	db	109	;'m'
  1971  007242  65                 	db	101	;'e'
  1972  007243  72                 	db	114	;'r'
  1973  007244  69                 	db	105	;'i'
  1974  007245  63                 	db	99	;'c'
  1975  007246  61                 	db	97	;'a'
  1976  007247  6C                 	db	108	;'l'
  1977  007248  73                 	db	115	;'s'
  1978  007249  20                 	db	32
  1979  00724A  69                 	db	105	;'i'
  1980  00724B  6E                 	db	110	;'n'
  1981  00724C  20                 	db	32
  1982  00724D  64                 	db	100	;'d'
  1983  00724E  65                 	db	101	;'e'
  1984  00724F  63                 	db	99	;'c'
  1985  007250  69                 	db	105	;'i'
  1986  007251  6D                 	db	109	;'m'
  1987  007252  61                 	db	97	;'a'
  1988  007253  6C                 	db	108	;'l'
  1989  007254  2E                 	db	46
  1990  007255  0D                 	db	13
  1991  007256  0A                 	db	10
  1992  007257  00                 	db	0
  1993  007258                     STR_262:
  1994  007258  20                 	db	32
  1995  007259  20                 	db	32
  1996  00725A  20                 	db	32
  1997  00725B  20                 	db	32
  1998  00725C  48                 	db	72	;'H'
  1999  00725D  45                 	db	69	;'E'
  2000  00725E  58                 	db	88	;'X'
  2001  00725F  20                 	db	32
  2002  007260  2D                 	db	45
  2003  007261  20                 	db	32
  2004  007262  44                 	db	68	;'D'
  2005  007263  69                 	db	105	;'i'
  2006  007264  73                 	db	115	;'s'
  2007  007265  70                 	db	112	;'p'
  2008  007266  6C                 	db	108	;'l'
  2009  007267  61                 	db	97	;'a'
  2010  007268  79                 	db	121	;'y'
  2011  007269  20                 	db	32
  2012  00726A  6E                 	db	110	;'n'
  2013  00726B  75                 	db	117	;'u'
  2014  00726C  6D                 	db	109	;'m'
  2015  00726D  65                 	db	101	;'e'
  2016  00726E  72                 	db	114	;'r'
  2017  00726F  69                 	db	105	;'i'
  2018  007270  63                 	db	99	;'c'
  2019  007271  61                 	db	97	;'a'
  2020  007272  6C                 	db	108	;'l'
  2021  007273  73                 	db	115	;'s'
  2022  007274  20                 	db	32
  2023  007275  69                 	db	105	;'i'
  2024  007276  6E                 	db	110	;'n'
  2025  007277  20                 	db	32
  2026  007278  68                 	db	104	;'h'
  2027  007279  65                 	db	101	;'e'
  2028  00727A  78                 	db	120	;'x'
  2029  00727B  61                 	db	97	;'a'
  2030  00727C  64                 	db	100	;'d'
  2031  00727D  65                 	db	101	;'e'
  2032  00727E  63                 	db	99	;'c'
  2033  00727F  69                 	db	105	;'i'
  2034  007280  6D                 	db	109	;'m'
  2035  007281  61                 	db	97	;'a'
  2036  007282  6C                 	db	108	;'l'
  2037  007283  2E                 	db	46
  2038  007284  0D                 	db	13
  2039  007285  0A                 	db	10
  2040  007286  00                 	db	0
  2041  007287                     STR_253:
  2042  007287  46                 	db	70	;'F'
  2043  007288  49                 	db	73	;'I'
  2044  007289  4E                 	db	78	;'N'
  2045  00728A  44                 	db	68	;'D'
  2046  00728B  20                 	db	32
  2047  00728C  2D                 	db	45
  2048  00728D  20                 	db	32
  2049  00728E  46                 	db	70	;'F'
  2050  00728F  69                 	db	105	;'i'
  2051  007290  6E                 	db	110	;'n'
  2052  007291  64                 	db	100	;'d'
  2053  007292  20                 	db	32
  2054  007293  61                 	db	97	;'a'
  2055  007294  76                 	db	118	;'v'
  2056  007295  61                 	db	97	;'a'
  2057  007296  69                 	db	105	;'i'
  2058  007297  6C                 	db	108	;'l'
  2059  007298  61                 	db	97	;'a'
  2060  007299  62                 	db	98	;'b'
  2061  00729A  6C                 	db	108	;'l'
  2062  00729B  65                 	db	101	;'e'
  2063  00729C  20                 	db	32
  2064  00729D  43                 	db	67	;'C'
  2065  00729E  41                 	db	65	;'A'
  2066  00729F  4E                 	db	78	;'N'
  2067  0072A0  34                 	db	52	;'4'
  2068  0072A1  56                 	db	86	;'V'
  2069  0072A2  53                 	db	83	;'S'
  2070  0072A3  43                 	db	67	;'C'
  2071  0072A4  50                 	db	80	;'P'
  2072  0072A5  20                 	db	32
  2073  0072A6  6E                 	db	110	;'n'
  2074  0072A7  6F                 	db	111	;'o'
  2075  0072A8  64                 	db	100	;'d'
  2076  0072A9  65                 	db	101	;'e'
  2077  0072AA  73                 	db	115	;'s'
  2078  0072AB  20                 	db	32
  2079  0072AC  6F                 	db	111	;'o'
  2080  0072AD  6E                 	db	110	;'n'
  2081  0072AE  20                 	db	32
  2082  0072AF  62                 	db	98	;'b'
  2083  0072B0  75                 	db	117	;'u'
  2084  0072B1  73                 	db	115	;'s'
  2085  0072B2  2E                 	db	46
  2086  0072B3  0D                 	db	13
  2087  0072B4  0A                 	db	10
  2088  0072B5  00                 	db	0
  2089  0072B6                     STR_241:
  2090  0072B6  53                 	db	83	;'S'
  2091  0072B7  49                 	db	73	;'I'
  2092  0072B8  4C                 	db	76	;'L'
  2093  0072B9  45                 	db	69	;'E'
  2094  0072BA  4E                 	db	78	;'N'
  2095  0072BB  54                 	db	84	;'T'
  2096  0072BC  20                 	db	32
  2097  0072BD  2D                 	db	45
  2098  0072BE  20                 	db	32
  2099  0072BF  4F                 	db	79	;'O'
  2100  0072C0  70                 	db	112	;'p'
  2101  0072C1  65                 	db	101	;'e'
  2102  0072C2  6E                 	db	110	;'n'
  2103  0072C3  20                 	db	32
  2104  0072C4  43                 	db	67	;'C'
  2105  0072C5  41                 	db	65	;'A'
  2106  0072C6  4E                 	db	78	;'N'
  2107  0072C7  20                 	db	32
  2108  0072C8  69                 	db	105	;'i'
  2109  0072C9  6E                 	db	110	;'n'
  2110  0072CA  74                 	db	116	;'t'
  2111  0072CB  65                 	db	101	;'e'
  2112  0072CC  72                 	db	114	;'r'
  2113  0072CD  66                 	db	102	;'f'
  2114  0072CE  61                 	db	97	;'a'
  2115  0072CF  63                 	db	99	;'c'
  2116  0072D0  65                 	db	101	;'e'
  2117  0072D1  20                 	db	32
  2118  0072D2  69                 	db	105	;'i'
  2119  0072D3  6E                 	db	110	;'n'
  2120  0072D4  20                 	db	32
  2121  0072D5  73                 	db	115	;'s'
  2122  0072D6  69                 	db	105	;'i'
  2123  0072D7  6C                 	db	108	;'l'
  2124  0072D8  65                 	db	101	;'e'
  2125  0072D9  6E                 	db	110	;'n'
  2126  0072DA  74                 	db	116	;'t'
  2127  0072DB  20                 	db	32
  2128  0072DC  6D                 	db	109	;'m'
  2129  0072DD  6F                 	db	111	;'o'
  2130  0072DE  64                 	db	100	;'d'
  2131  0072DF  65                 	db	101	;'e'
  2132  0072E0  2E                 	db	46
  2133  0072E1  0D                 	db	13
  2134  0072E2  0A                 	db	10
  2135  0072E3  00                 	db	0
  2136  0072E4                     STR_246:
  2137  0072E4  49                 	db	73	;'I'
  2138  0072E5  46                 	db	70	;'F'
  2139  0072E6  4D                 	db	77	;'M'
  2140  0072E7  4F                 	db	79	;'O'
  2141  0072E8  44                 	db	68	;'D'
  2142  0072E9  45                 	db	69	;'E'
  2143  0072EA  20                 	db	32
  2144  0072EB  2D                 	db	45
  2145  0072EC  20                 	db	32
  2146  0072ED  44                 	db	68	;'D'
  2147  0072EE  69                 	db	105	;'i'
  2148  0072EF  73                 	db	115	;'s'
  2149  0072F0  70                 	db	112	;'p'
  2150  0072F1  6C                 	db	108	;'l'
  2151  0072F2  61                 	db	97	;'a'
  2152  0072F3  79                 	db	121	;'y'
  2153  0072F4  20                 	db	32
  2154  0072F5  73                 	db	115	;'s'
  2155  0072F6  65                 	db	101	;'e'
  2156  0072F7  6C                 	db	108	;'l'
  2157  0072F8  65                 	db	101	;'e'
  2158  0072F9  63                 	db	99	;'c'
  2159  0072FA  74                 	db	116	;'t'
  2160  0072FB  65                 	db	101	;'e'
  2161  0072FC  64                 	db	100	;'d'
  2162  0072FD  20                 	db	32
  2163  0072FE  69                 	db	105	;'i'
  2164  0072FF  6E                 	db	110	;'n'
  2165  007300  74                 	db	116	;'t'
  2166  007301  65                 	db	101	;'e'
  2167  007302  72                 	db	114	;'r'
  2168  007303  66                 	db	102	;'f'
  2169  007304  61                 	db	97	;'a'
  2170  007305  63                 	db	99	;'c'
  2171  007306  65                 	db	101	;'e'
  2172  007307  20                 	db	32
  2173  007308  6D                 	db	109	;'m'
  2174  007309  6F                 	db	111	;'o'
  2175  00730A  64                 	db	100	;'d'
  2176  00730B  65                 	db	101	;'e'
  2177  00730C  2E                 	db	46
  2178  00730D  0D                 	db	13
  2179  00730E  0A                 	db	10
  2180  00730F  00                 	db	0
  2181  007310                     STR_240:
  2182  007310  4F                 	db	79	;'O'
  2183  007311  50                 	db	80	;'P'
  2184  007312  45                 	db	69	;'E'
  2185  007313  4E                 	db	78	;'N'
  2186  007314  20                 	db	32
  2187  007315  2D                 	db	45
  2188  007316  20                 	db	32
  2189  007317  4F                 	db	79	;'O'
  2190  007318  70                 	db	112	;'p'
  2191  007319  65                 	db	101	;'e'
  2192  00731A  6E                 	db	110	;'n'
  2193  00731B  20                 	db	32
  2194  00731C  43                 	db	67	;'C'
  2195  00731D  41                 	db	65	;'A'
  2196  00731E  4E                 	db	78	;'N'
  2197  00731F  20                 	db	32
  2198  007320  69                 	db	105	;'i'
  2199  007321  6E                 	db	110	;'n'
  2200  007322  74                 	db	116	;'t'
  2201  007323  65                 	db	101	;'e'
  2202  007324  72                 	db	114	;'r'
  2203  007325  66                 	db	102	;'f'
  2204  007326  61                 	db	97	;'a'
  2205  007327  63                 	db	99	;'c'
  2206  007328  65                 	db	101	;'e'
  2207  007329  20                 	db	32
  2208  00732A  69                 	db	105	;'i'
  2209  00732B  6E                 	db	110	;'n'
  2210  00732C  20                 	db	32
  2211  00732D  6E                 	db	110	;'n'
  2212  00732E  6F                 	db	111	;'o'
  2213  00732F  72                 	db	114	;'r'
  2214  007330  6D                 	db	109	;'m'
  2215  007331  61                 	db	97	;'a'
  2216  007332  6C                 	db	108	;'l'
  2217  007333  20                 	db	32
  2218  007334  6D                 	db	109	;'m'
  2219  007335  6F                 	db	111	;'o'
  2220  007336  64                 	db	100	;'d'
  2221  007337  65                 	db	101	;'e'
  2222  007338  2E                 	db	46
  2223  007339  0D                 	db	13
  2224  00733A  0A                 	db	10
  2225  00733B  00                 	db	0
  2226  00733C                     STR_133:
  2227  00733C  2B                 	db	43
  2228  00733D  4F                 	db	79	;'O'
  2229  00733E  4B                 	db	75	;'K'
  2230  00733F  20                 	db	32
  2231  007340  2D                 	db	45
  2232  007341  20                 	db	32
  2233  007342  4E                 	db	78	;'N'
  2234  007343  75                 	db	117	;'u'
  2235  007344  6D                 	db	109	;'m'
  2236  007345  65                 	db	101	;'e'
  2237  007346  72                 	db	114	;'r'
  2238  007347  69                 	db	105	;'i'
  2239  007348  63                 	db	99	;'c'
  2240  007349  61                 	db	97	;'a'
  2241  00734A  6C                 	db	108	;'l'
  2242  00734B  20                 	db	32
  2243  00734C  6F                 	db	111	;'o'
  2244  00734D  75                 	db	117	;'u'
  2245  00734E  74                 	db	116	;'t'
  2246  00734F  70                 	db	112	;'p'
  2247  007350  75                 	db	117	;'u'
  2248  007351  74                 	db	116	;'t'
  2249  007352  20                 	db	32
  2250  007353  6E                 	db	110	;'n'
  2251  007354  6F                 	db	111	;'o'
  2252  007355  77                 	db	119	;'w'
  2253  007356  20                 	db	32
  2254  007357  69                 	db	105	;'i'
  2255  007358  6E                 	db	110	;'n'
  2256  007359  20                 	db	32
  2257  00735A  68                 	db	104	;'h'
  2258  00735B  65                 	db	101	;'e'
  2259  00735C  78                 	db	120	;'x'
  2260  00735D  61                 	db	97	;'a'
  2261  00735E  64                 	db	100	;'d'
  2262  00735F  65                 	db	101	;'e'
  2263  007360  63                 	db	99	;'c'
  2264  007361  69                 	db	105	;'i'
  2265  007362  6D                 	db	109	;'m'
  2266  007363  61                 	db	97	;'a'
  2267  007364  6C                 	db	108	;'l'
  2268  007365  0D                 	db	13
  2269  007366  0A                 	db	10
  2270  007367  00                 	db	0
  2271  007368                     STR_110:
  2272  007368  2D                 	db	45
  2273  007369  45                 	db	69	;'E'
  2274  00736A  52                 	db	82	;'R'
  2275  00736B  52                 	db	82	;'R'
  2276  00736C  4F                 	db	79	;'O'
  2277  00736D  52                 	db	82	;'R'
  2278  00736E  20                 	db	32
  2279  00736F  2D                 	db	45
  2280  007370  20                 	db	32
  2281  007371  66                 	db	102	;'f'
  2282  007372  69                 	db	105	;'i'
  2283  007373  6C                 	db	108	;'l'
  2284  007374  74                 	db	116	;'t'
  2285  007375  65                 	db	101	;'e'
  2286  007376  72                 	db	114	;'r'
  2287  007377  20                 	db	32
  2288  007378  66                 	db	102	;'f'
  2289  007379  6F                 	db	111	;'o'
  2290  00737A  72                 	db	114	;'r'
  2291  00737B  20                 	db	32
  2292  00737C  70                 	db	112	;'p'
  2293  00737D  72                 	db	114	;'r'
  2294  00737E  69                 	db	105	;'i'
  2295  00737F  6F                 	db	111	;'o'
  2296  007380  72                 	db	114	;'r'
  2297  007381  69                 	db	105	;'i'
  2298  007382  74                 	db	116	;'t'
  2299  007383  79                 	db	121	;'y'
  2300  007384  20                 	db	32
  2301  007385  69                 	db	105	;'i'
  2302  007386  73                 	db	115	;'s'
  2303  007387  20                 	db	32
  2304  007388  6D                 	db	109	;'m'
  2305  007389  69                 	db	105	;'i'
  2306  00738A  73                 	db	115	;'s'
  2307  00738B  73                 	db	115	;'s'
  2308  00738C  69                 	db	105	;'i'
  2309  00738D  6E                 	db	110	;'n'
  2310  00738E  67                 	db	103	;'g'
  2311  00738F  0D                 	db	13
  2312  007390  0A                 	db	10
  2313  007391  00                 	db	0
  2314  007392                     STR_158:
  2315  007392  2B                 	db	43
  2316  007393  45                 	db	69	;'E'
  2317  007394  52                 	db	82	;'R'
  2318  007395  52                 	db	82	;'R'
  2319  007396  4F                 	db	79	;'O'
  2320  007397  52                 	db	82	;'R'
  2321  007398  20                 	db	32
  2322  007399  2D                 	db	45
  2323  00739A  20                 	db	32
  2324  00739B  57                 	db	87	;'W'
  2325  00739C  72                 	db	114	;'r'
  2326  00739D  6F                 	db	111	;'o'
  2327  00739E  6E                 	db	110	;'n'
  2328  00739F  67                 	db	103	;'g'
  2329  0073A0  20                 	db	32
  2330  0073A1  61                 	db	97	;'a'
  2331  0073A2  72                 	db	114	;'r'
  2332  0073A3  67                 	db	103	;'g'
  2333  0073A4  75                 	db	117	;'u'
  2334  0073A5  6D                 	db	109	;'m'
  2335  0073A6  65                 	db	101	;'e'
  2336  0073A7  6E                 	db	110	;'n'
  2337  0073A8  74                 	db	116	;'t'
  2338  0073A9  20                 	db	32
  2339  0073AA  74                 	db	116	;'t'
  2340  0073AB  6F                 	db	111	;'o'
  2341  0073AC  20                 	db	32
  2342  0073AD  27                 	db	39
  2343  0073AE  73                 	db	115	;'s'
  2344  0073AF  65                 	db	101	;'e'
  2345  0073B0  74                 	db	116	;'t'
  2346  0073B1  20                 	db	32
  2347  0073B2  65                 	db	101	;'e'
  2348  0073B3  63                 	db	99	;'c'
  2349  0073B4  68                 	db	104	;'h'
  2350  0073B5  6F                 	db	111	;'o'
  2351  0073B6  27                 	db	39
  2352  0073B7  2E                 	db	46
  2353  0073B8  0D                 	db	13
  2354  0073B9  0A                 	db	10
  2355  0073BA  00                 	db	0
  2356  0073BB                     STR_116:
  2357  0073BB  2D                 	db	45
  2358  0073BC  45                 	db	69	;'E'
  2359  0073BD  52                 	db	82	;'R'
  2360  0073BE  52                 	db	82	;'R'
  2361  0073BF  4F                 	db	79	;'O'
  2362  0073C0  52                 	db	82	;'R'
  2363  0073C1  20                 	db	32
  2364  0073C2  2D                 	db	45
  2365  0073C3  20                 	db	32
  2366  0073C4  66                 	db	102	;'f'
  2367  0073C5  69                 	db	105	;'i'
  2368  0073C6  6C                 	db	108	;'l'
  2369  0073C7  74                 	db	116	;'t'
  2370  0073C8  65                 	db	101	;'e'
  2371  0073C9  72                 	db	114	;'r'
  2372  0073CA  20                 	db	32
  2373  0073CB  66                 	db	102	;'f'
  2374  0073CC  6F                 	db	111	;'o'
  2375  0073CD  72                 	db	114	;'r'
  2376  0073CE  20                 	db	32
  2377  0073CF  6E                 	db	110	;'n'
  2378  0073D0  69                 	db	105	;'i'
  2379  0073D1  64                 	db	100	;'d'
  2380  0073D2  65                 	db	101	;'e'
  2381  0073D3  20                 	db	32
  2382  0073D4  69                 	db	105	;'i'
  2383  0073D5  64                 	db	100	;'d'
  2384  0073D6  20                 	db	32
  2385  0073D7  69                 	db	105	;'i'
  2386  0073D8  73                 	db	115	;'s'
  2387  0073D9  20                 	db	32
  2388  0073DA  6D                 	db	109	;'m'
  2389  0073DB  69                 	db	105	;'i'
  2390  0073DC  73                 	db	115	;'s'
  2391  0073DD  73                 	db	115	;'s'
  2392  0073DE  69                 	db	105	;'i'
  2393  0073DF  6E                 	db	110	;'n'
  2394  0073E0  67                 	db	103	;'g'
  2395  0073E1  0D                 	db	13
  2396  0073E2  0A                 	db	10
  2397  0073E3  00                 	db	0
  2398  0073E4                     STR_252:
  2399  0073E4  48                 	db	72	;'H'
  2400  0073E5  45                 	db	69	;'E'
  2401  0073E6  4C                 	db	76	;'L'
  2402  0073E7  50                 	db	80	;'P'
  2403  0073E8  20                 	db	32
  2404  0073E9  2D                 	db	45
  2405  0073EA  20                 	db	32
  2406  0073EB  44                 	db	68	;'D'
  2407  0073EC  69                 	db	105	;'i'
  2408  0073ED  73                 	db	115	;'s'
  2409  0073EE  70                 	db	112	;'p'
  2410  0073EF  6C                 	db	108	;'l'
  2411  0073F0  61                 	db	97	;'a'
  2412  0073F1  79                 	db	121	;'y'
  2413  0073F2  20                 	db	32
  2414  0073F3  74                 	db	116	;'t'
  2415  0073F4  68                 	db	104	;'h'
  2416  0073F5  69                 	db	105	;'i'
  2417  0073F6  73                 	db	115	;'s'
  2418  0073F7  20                 	db	32
  2419  0073F8  68                 	db	104	;'h'
  2420  0073F9  65                 	db	101	;'e'
  2421  0073FA  6C                 	db	108	;'l'
  2422  0073FB  70                 	db	112	;'p'
  2423  0073FC  20                 	db	32
  2424  0073FD  69                 	db	105	;'i'
  2425  0073FE  6E                 	db	110	;'n'
  2426  0073FF  66                 	db	102	;'f'
  2427  007400  6F                 	db	111	;'o'
  2428  007401  72                 	db	114	;'r'
  2429  007402  6D                 	db	109	;'m'
  2430  007403  61                 	db	97	;'a'
  2431  007404  74                 	db	116	;'t'
  2432  007405  69                 	db	105	;'i'
  2433  007406  6F                 	db	111	;'o'
  2434  007407  6E                 	db	110	;'n'
  2435  007408  2E                 	db	46
  2436  007409  0D                 	db	13
  2437  00740A  0A                 	db	10
  2438  00740B  00                 	db	0
  2439  00740C                     STR_123:
  2440  00740C  2D                 	db	45
  2441  00740D  45                 	db	69	;'E'
  2442  00740E  52                 	db	82	;'R'
  2443  00740F  52                 	db	82	;'R'
  2444  007410  4F                 	db	79	;'O'
  2445  007411  52                 	db	82	;'R'
  2446  007412  20                 	db	32
  2447  007413  2D                 	db	45
  2448  007414  20                 	db	32
  2449  007415  6D                 	db	109	;'m'
  2450  007416  61                 	db	97	;'a'
  2451  007417  73                 	db	115	;'s'
  2452  007418  6B                 	db	107	;'k'
  2453  007419  20                 	db	32
  2454  00741A  66                 	db	102	;'f'
  2455  00741B  6F                 	db	111	;'o'
  2456  00741C  72                 	db	114	;'r'
  2457  00741D  20                 	db	32
  2458  00741E  70                 	db	112	;'p'
  2459  00741F  72                 	db	114	;'r'
  2460  007420  69                 	db	105	;'i'
  2461  007421  6F                 	db	111	;'o'
  2462  007422  72                 	db	114	;'r'
  2463  007423  69                 	db	105	;'i'
  2464  007424  74                 	db	116	;'t'
  2465  007425  79                 	db	121	;'y'
  2466  007426  20                 	db	32
  2467  007427  69                 	db	105	;'i'
  2468  007428  73                 	db	115	;'s'
  2469  007429  20                 	db	32
  2470  00742A  6D                 	db	109	;'m'
  2471  00742B  69                 	db	105	;'i'
  2472  00742C  73                 	db	115	;'s'
  2473  00742D  73                 	db	115	;'s'
  2474  00742E  69                 	db	105	;'i'
  2475  00742F  6E                 	db	110	;'n'
  2476  007430  67                 	db	103	;'g'
  2477  007431  0D                 	db	13
  2478  007432  0A                 	db	10
  2479  007433  00                 	db	0
  2480  007434                     STR_135:
  2481  007434  2B                 	db	43
  2482  007435  4F                 	db	79	;'O'
  2483  007436  4B                 	db	75	;'K'
  2484  007437  20                 	db	32
  2485  007438  2D                 	db	45
  2486  007439  20                 	db	32
  2487  00743A  4E                 	db	78	;'N'
  2488  00743B  75                 	db	117	;'u'
  2489  00743C  6D                 	db	109	;'m'
  2490  00743D  65                 	db	101	;'e'
  2491  00743E  72                 	db	114	;'r'
  2492  00743F  69                 	db	105	;'i'
  2493  007440  63                 	db	99	;'c'
  2494  007441  61                 	db	97	;'a'
  2495  007442  6C                 	db	108	;'l'
  2496  007443  20                 	db	32
  2497  007444  6F                 	db	111	;'o'
  2498  007445  75                 	db	117	;'u'
  2499  007446  74                 	db	116	;'t'
  2500  007447  70                 	db	112	;'p'
  2501  007448  75                 	db	117	;'u'
  2502  007449  74                 	db	116	;'t'
  2503  00744A  20                 	db	32
  2504  00744B  6E                 	db	110	;'n'
  2505  00744C  6F                 	db	111	;'o'
  2506  00744D  77                 	db	119	;'w'
  2507  00744E  20                 	db	32
  2508  00744F  69                 	db	105	;'i'
  2509  007450  6E                 	db	110	;'n'
  2510  007451  20                 	db	32
  2511  007452  64                 	db	100	;'d'
  2512  007453  65                 	db	101	;'e'
  2513  007454  63                 	db	99	;'c'
  2514  007455  69                 	db	105	;'i'
  2515  007456  6D                 	db	109	;'m'
  2516  007457  61                 	db	97	;'a'
  2517  007458  6C                 	db	108	;'l'
  2518  007459  0D                 	db	13
  2519  00745A  0A                 	db	10
  2520  00745B  00                 	db	0
  2521  00745C                     STR_108:
  2522  00745C  2D                 	db	45
  2523  00745D  45                 	db	69	;'E'
  2524  00745E  52                 	db	82	;'R'
  2525  00745F  52                 	db	82	;'R'
  2526  007460  4F                 	db	79	;'O'
  2527  007461  52                 	db	82	;'R'
  2528  007462  20                 	db	32
  2529  007463  2D                 	db	45
  2530  007464  20                 	db	32
  2531  007465  4E                 	db	78	;'N'
  2532  007466  6F                 	db	111	;'o'
  2533  007467  20                 	db	32
  2534  007468  66                 	db	102	;'f'
  2535  007469  69                 	db	105	;'i'
  2536  00746A  6C                 	db	108	;'l'
  2537  00746B  74                 	db	116	;'t'
  2538  00746C  65                 	db	101	;'e'
  2539  00746D  72                 	db	114	;'r'
  2540  00746E  20                 	db	32
  2541  00746F  6E                 	db	110	;'n'
  2542  007470  75                 	db	117	;'u'
  2543  007471  6D                 	db	109	;'m'
  2544  007472  62                 	db	98	;'b'
  2545  007473  65                 	db	101	;'e'
  2546  007474  72                 	db	114	;'r'
  2547  007475  20                 	db	32
  2548  007476  73                 	db	115	;'s'
  2549  007477  70                 	db	112	;'p'
  2550  007478  65                 	db	101	;'e'
  2551  007479  63                 	db	99	;'c'
  2552  00747A  69                 	db	105	;'i'
  2553  00747B  66                 	db	102	;'f'
  2554  00747C  69                 	db	105	;'i'
  2555  00747D  65                 	db	101	;'e'
  2556  00747E  64                 	db	100	;'d'
  2557  00747F  2E                 	db	46
  2558  007480  0D                 	db	13
  2559  007481  0A                 	db	10
  2560  007482  00                 	db	0
  2561  007483                     STR_251:
  2562  007483  45                 	db	69	;'E'
  2563  007484  52                 	db	82	;'R'
  2564  007485  52                 	db	82	;'R'
  2565  007486  20                 	db	32
  2566  007487  2D                 	db	45
  2567  007488  20                 	db	32
  2568  007489  44                 	db	68	;'D'
  2569  00748A  69                 	db	105	;'i'
  2570  00748B  73                 	db	115	;'s'
  2571  00748C  70                 	db	112	;'p'
  2572  00748D  6C                 	db	108	;'l'
  2573  00748E  61                 	db	97	;'a'
  2574  00748F  79                 	db	121	;'y'
  2575  007490  20                 	db	32
  2576  007491  43                 	db	67	;'C'
  2577  007492  41                 	db	65	;'A'
  2578  007493  4E                 	db	78	;'N'
  2579  007494  20                 	db	32
  2580  007495  65                 	db	101	;'e'
  2581  007496  72                 	db	114	;'r'
  2582  007497  72                 	db	114	;'r'
  2583  007498  6F                 	db	111	;'o'
  2584  007499  72                 	db	114	;'r'
  2585  00749A  20                 	db	32
  2586  00749B  69                 	db	105	;'i'
  2587  00749C  6E                 	db	110	;'n'
  2588  00749D  66                 	db	102	;'f'
  2589  00749E  6F                 	db	111	;'o'
  2590  00749F  72                 	db	114	;'r'
  2591  0074A0  6D                 	db	109	;'m'
  2592  0074A1  61                 	db	97	;'a'
  2593  0074A2  74                 	db	116	;'t'
  2594  0074A3  69                 	db	105	;'i'
  2595  0074A4  6F                 	db	111	;'o'
  2596  0074A5  6E                 	db	110	;'n'
  2597  0074A6  2E                 	db	46
  2598  0074A7  0D                 	db	13
  2599  0074A8  0A                 	db	10
  2600  0074A9  00                 	db	0
  2601  0074AA                     STR_237:
  2602  0074AA  48                 	db	72	;'H'
  2603  0074AB  65                 	db	101	;'e'
  2604  0074AC  6C                 	db	108	;'l'
  2605  0074AD  70                 	db	112	;'p'
  2606  0074AE  20                 	db	32
  2607  0074AF  66                 	db	102	;'f'
  2608  0074B0  6F                 	db	111	;'o'
  2609  0074B1  72                 	db	114	;'r'
  2610  0074B2  20                 	db	32
  2611  0074B3  74                 	db	116	;'t'
  2612  0074B4  68                 	db	104	;'h'
  2613  0074B5  65                 	db	101	;'e'
  2614  0074B6  20                 	db	32
  2615  0074B7  46                 	db	70	;'F'
  2616  0074B8  72                 	db	114	;'r'
  2617  0074B9  61                 	db	97	;'a'
  2618  0074BA  6E                 	db	110	;'n'
  2619  0074BB  6B                 	db	107	;'k'
  2620  0074BC  66                 	db	102	;'f'
  2621  0074BD  75                 	db	117	;'u'
  2622  0074BE  72                 	db	114	;'r'
  2623  0074BF  74                 	db	116	;'t'
  2624  0074C0  20                 	db	32
  2625  0074C1  52                 	db	82	;'R'
  2626  0074C2  53                 	db	83	;'S'
  2627  0074C3  2D                 	db	45
  2628  0074C4  32                 	db	50	;'2'
  2629  0074C5  33                 	db	51	;'3'
  2630  0074C6  32                 	db	50	;'2'
  2631  0074C7  20                 	db	32
  2632  0074C8  6D                 	db	109	;'m'
  2633  0074C9  6F                 	db	111	;'o'
  2634  0074CA  64                 	db	100	;'d'
  2635  0074CB  75                 	db	117	;'u'
  2636  0074CC  6C                 	db	108	;'l'
  2637  0074CD  65                 	db	101	;'e'
  2638  0074CE  0D                 	db	13
  2639  0074CF  0A                 	db	10
  2640  0074D0  00                 	db	0
  2641  0074D1                     STR_129:
  2642  0074D1  2D                 	db	45
  2643  0074D2  45                 	db	69	;'E'
  2644  0074D3  52                 	db	82	;'R'
  2645  0074D4  52                 	db	82	;'R'
  2646  0074D5  4F                 	db	79	;'O'
  2647  0074D6  52                 	db	82	;'R'
  2648  0074D7  20                 	db	32
  2649  0074D8  2D                 	db	45
  2650  0074D9  20                 	db	32
  2651  0074DA  6D                 	db	109	;'m'
  2652  0074DB  61                 	db	97	;'a'
  2653  0074DC  73                 	db	115	;'s'
  2654  0074DD  6B                 	db	107	;'k'
  2655  0074DE  20                 	db	32
  2656  0074DF  66                 	db	102	;'f'
  2657  0074E0  6F                 	db	111	;'o'
  2658  0074E1  72                 	db	114	;'r'
  2659  0074E2  20                 	db	32
  2660  0074E3  6E                 	db	110	;'n'
  2661  0074E4  69                 	db	105	;'i'
  2662  0074E5  64                 	db	100	;'d'
  2663  0074E6  65                 	db	101	;'e'
  2664  0074E7  20                 	db	32
  2665  0074E8  69                 	db	105	;'i'
  2666  0074E9  64                 	db	100	;'d'
  2667  0074EA  20                 	db	32
  2668  0074EB  69                 	db	105	;'i'
  2669  0074EC  73                 	db	115	;'s'
  2670  0074ED  20                 	db	32
  2671  0074EE  6D                 	db	109	;'m'
  2672  0074EF  69                 	db	105	;'i'
  2673  0074F0  73                 	db	115	;'s'
  2674  0074F1  73                 	db	115	;'s'
  2675  0074F2  69                 	db	105	;'i'
  2676  0074F3  6E                 	db	110	;'n'
  2677  0074F4  67                 	db	103	;'g'
  2678  0074F5  0D                 	db	13
  2679  0074F6  0A                 	db	10
  2680  0074F7  00                 	db	0
  2681  0074F8                     STR_112:
  2682  0074F8  2D                 	db	45
  2683  0074F9  45                 	db	69	;'E'
  2684  0074FA  52                 	db	82	;'R'
  2685  0074FB  52                 	db	82	;'R'
  2686  0074FC  4F                 	db	79	;'O'
  2687  0074FD  52                 	db	82	;'R'
  2688  0074FE  20                 	db	32
  2689  0074FF  2D                 	db	45
  2690  007500  20                 	db	32
  2691  007501  66                 	db	102	;'f'
  2692  007502  69                 	db	105	;'i'
  2693  007503  6C                 	db	108	;'l'
  2694  007504  74                 	db	116	;'t'
  2695  007505  65                 	db	101	;'e'
  2696  007506  72                 	db	114	;'r'
  2697  007507  20                 	db	32
  2698  007508  66                 	db	102	;'f'
  2699  007509  6F                 	db	111	;'o'
  2700  00750A  72                 	db	114	;'r'
  2701  00750B  20                 	db	32
  2702  00750C  63                 	db	99	;'c'
  2703  00750D  6C                 	db	108	;'l'
  2704  00750E  61                 	db	97	;'a'
  2705  00750F  73                 	db	115	;'s'
  2706  007510  73                 	db	115	;'s'
  2707  007511  20                 	db	32
  2708  007512  69                 	db	105	;'i'
  2709  007513  73                 	db	115	;'s'
  2710  007514  20                 	db	32
  2711  007515  6D                 	db	109	;'m'
  2712  007516  69                 	db	105	;'i'
  2713  007517  73                 	db	115	;'s'
  2714  007518  73                 	db	115	;'s'
  2715  007519  69                 	db	105	;'i'
  2716  00751A  6E                 	db	110	;'n'
  2717  00751B  67                 	db	103	;'g'
  2718  00751C  0D                 	db	13
  2719  00751D  0A                 	db	10
  2720  00751E  00                 	db	0
  2721  00751F                     STR_268:
  2722  00751F  20                 	db	32
  2723  007520  20                 	db	32
  2724  007521  20                 	db	32
  2725  007522  20                 	db	32
  2726  007523  20                 	db	32
  2727  007524  20                 	db	32
  2728  007525  20                 	db	32
  2729  007526  20                 	db	32
  2730  007527  20                 	db	32
  2731  007528  20                 	db	32
  2732  007529  20                 	db	32
  2733  00752A  4D                 	db	77	;'M'
  2734  00752B  6F                 	db	111	;'o'
  2735  00752C  64                 	db	100	;'d'
  2736  00752D  65                 	db	101	;'e'
  2737  00752E  73                 	db	115	;'s'
  2738  00752F  3A                 	db	58	;':'
  2739  007530  20                 	db	32
  2740  007531  76                 	db	118	;'v'
  2741  007532  65                 	db	101	;'e'
  2742  007533  72                 	db	114	;'r'
  2743  007534  62                 	db	98	;'b'
  2744  007535  6F                 	db	111	;'o'
  2745  007536  73                 	db	115	;'s'
  2746  007537  65                 	db	101	;'e'
  2747  007538  7C                 	db	124
  2748  007539  76                 	db	118	;'v'
  2749  00753A  73                 	db	115	;'s'
  2750  00753B  63                 	db	99	;'c'
  2751  00753C  70                 	db	112	;'p'
  2752  00753D  7C                 	db	124
  2753  00753E  73                 	db	115	;'s'
  2754  00753F  6C                 	db	108	;'l'
  2755  007540  63                 	db	99	;'c'
  2756  007541  61                 	db	97	;'a'
  2757  007542  6E                 	db	110	;'n'
  2758  007543  0D                 	db	13
  2759  007544  0A                 	db	10
  2760  007545  00                 	db	0
  2761  007546                     STR_114:
  2762  007546  2D                 	db	45
  2763  007547  45                 	db	69	;'E'
  2764  007548  52                 	db	82	;'R'
  2765  007549  52                 	db	82	;'R'
  2766  00754A  4F                 	db	79	;'O'
  2767  00754B  52                 	db	82	;'R'
  2768  00754C  20                 	db	32
  2769  00754D  2D                 	db	45
  2770  00754E  20                 	db	32
  2771  00754F  66                 	db	102	;'f'
  2772  007550  69                 	db	105	;'i'
  2773  007551  6C                 	db	108	;'l'
  2774  007552  74                 	db	116	;'t'
  2775  007553  65                 	db	101	;'e'
  2776  007554  72                 	db	114	;'r'
  2777  007555  20                 	db	32
  2778  007556  66                 	db	102	;'f'
  2779  007557  6F                 	db	111	;'o'
  2780  007558  72                 	db	114	;'r'
  2781  007559  20                 	db	32
  2782  00755A  74                 	db	116	;'t'
  2783  00755B  79                 	db	121	;'y'
  2784  00755C  70                 	db	112	;'p'
  2785  00755D  65                 	db	101	;'e'
  2786  00755E  20                 	db	32
  2787  00755F  69                 	db	105	;'i'
  2788  007560  73                 	db	115	;'s'
  2789  007561  20                 	db	32
  2790  007562  6D                 	db	109	;'m'
  2791  007563  69                 	db	105	;'i'
  2792  007564  73                 	db	115	;'s'
  2793  007565  73                 	db	115	;'s'
  2794  007566  69                 	db	105	;'i'
  2795  007567  6E                 	db	110	;'n'
  2796  007568  67                 	db	103	;'g'
  2797  007569  0D                 	db	13
  2798  00756A  0A                 	db	10
  2799  00756B  00                 	db	0
  2800  00756C                     STR_89:
  2801  00756C  2B                 	db	43
  2802  00756D  4F                 	db	79	;'O'
  2803  00756E  4B                 	db	75	;'K'
  2804  00756F  20                 	db	32
  2805  007570  2D                 	db	45
  2806  007571  20                 	db	32
  2807  007572  56                 	db	86	;'V'
  2808  007573  61                 	db	97	;'a'
  2809  007574  6C                 	db	108	;'l'
  2810  007575  75                 	db	117	;'u'
  2811  007576  65                 	db	101	;'e'
  2812  007577  20                 	db	32
  2813  007578  77                 	db	119	;'w'
  2814  007579  72                 	db	114	;'r'
  2815  00757A  69                 	db	105	;'i'
  2816  00757B  74                 	db	116	;'t'
  2817  00757C  74                 	db	116	;'t'
  2818  00757D  65                 	db	101	;'e'
  2819  00757E  6E                 	db	110	;'n'
  2820  00757F  20                 	db	32
  2821  007580  73                 	db	115	;'s'
  2822  007581  75                 	db	117	;'u'
  2823  007582  63                 	db	99	;'c'
  2824  007583  63                 	db	99	;'c'
  2825  007584  65                 	db	101	;'e'
  2826  007585  73                 	db	115	;'s'
  2827  007586  73                 	db	115	;'s'
  2828  007587  66                 	db	102	;'f'
  2829  007588  75                 	db	117	;'u'
  2830  007589  6C                 	db	108	;'l'
  2831  00758A  6C                 	db	108	;'l'
  2832  00758B  79                 	db	121	;'y'
  2833  00758C  20                 	db	32
  2834  00758D  66                 	db	102	;'f'
  2835  00758E  6F                 	db	111	;'o'
  2836  00758F  72                 	db	114	;'r'
  2837  007590  20                 	db	32
  2838  007591  00                 	db	0
  2839  007592                     STR_121:
  2840  007592  2D                 	db	45
  2841  007593  45                 	db	69	;'E'
  2842  007594  52                 	db	82	;'R'
  2843  007595  52                 	db	82	;'R'
  2844  007596  4F                 	db	79	;'O'
  2845  007597  52                 	db	82	;'R'
  2846  007598  20                 	db	32
  2847  007599  2D                 	db	45
  2848  00759A  20                 	db	32
  2849  00759B  4E                 	db	78	;'N'
  2850  00759C  6F                 	db	111	;'o'
  2851  00759D  20                 	db	32
  2852  00759E  6D                 	db	109	;'m'
  2853  00759F  61                 	db	97	;'a'
  2854  0075A0  73                 	db	115	;'s'
  2855  0075A1  6B                 	db	107	;'k'
  2856  0075A2  20                 	db	32
  2857  0075A3  6E                 	db	110	;'n'
  2858  0075A4  75                 	db	117	;'u'
  2859  0075A5  6D                 	db	109	;'m'
  2860  0075A6  62                 	db	98	;'b'
  2861  0075A7  65                 	db	101	;'e'
  2862  0075A8  72                 	db	114	;'r'
  2863  0075A9  20                 	db	32
  2864  0075AA  73                 	db	115	;'s'
  2865  0075AB  70                 	db	112	;'p'
  2866  0075AC  65                 	db	101	;'e'
  2867  0075AD  63                 	db	99	;'c'
  2868  0075AE  69                 	db	105	;'i'
  2869  0075AF  66                 	db	102	;'f'
  2870  0075B0  69                 	db	105	;'i'
  2871  0075B1  65                 	db	101	;'e'
  2872  0075B2  64                 	db	100	;'d'
  2873  0075B3  2E                 	db	46
  2874  0075B4  0D                 	db	13
  2875  0075B5  0A                 	db	10
  2876  0075B6  00                 	db	0
  2877  0075B7                     STR_1:
  2878  0075B7  0D                 	db	13
  2879  0075B8  0A                 	db	10
  2880  0075B9  46                 	db	70	;'F'
  2881  0075BA  72                 	db	114	;'r'
  2882  0075BB  61                 	db	97	;'a'
  2883  0075BC  6E                 	db	110	;'n'
  2884  0075BD  6B                 	db	107	;'k'
  2885  0075BE  66                 	db	102	;'f'
  2886  0075BF  75                 	db	117	;'u'
  2887  0075C0  72                 	db	114	;'r'
  2888  0075C1  74                 	db	116	;'t'
  2889  0075C2  20                 	db	32
  2890  0075C3  52                 	db	82	;'R'
  2891  0075C4  53                 	db	83	;'S'
  2892  0075C5  2D                 	db	45
  2893  0075C6  32                 	db	50	;'2'
  2894  0075C7  33                 	db	51	;'3'
  2895  0075C8  32                 	db	50	;'2'
  2896  0075C9  20                 	db	32
  2897  0075CA  43                 	db	67	;'C'
  2898  0075CB  41                 	db	65	;'A'
  2899  0075CC  4E                 	db	78	;'N'
  2900  0075CD  34                 	db	52	;'4'
  2901  0075CE  56                 	db	86	;'V'
  2902  0075CF  53                 	db	83	;'S'
  2903  0075D0  43                 	db	67	;'C'
  2904  0075D1  50                 	db	80	;'P'
  2905  0075D2  20                 	db	32
  2906  0075D3  6D                 	db	109	;'m'
  2907  0075D4  6F                 	db	111	;'o'
  2908  0075D5  64                 	db	100	;'d'
  2909  0075D6  75                 	db	117	;'u'
  2910  0075D7  6C                 	db	108	;'l'
  2911  0075D8  65                 	db	101	;'e'
  2912  0075D9  0D                 	db	13
  2913  0075DA  0A                 	db	10
  2914  0075DB  00                 	db	0
  2915  0075DC                     STR_125:
  2916  0075DC  2D                 	db	45
  2917  0075DD  45                 	db	69	;'E'
  2918  0075DE  52                 	db	82	;'R'
  2919  0075DF  52                 	db	82	;'R'
  2920  0075E0  4F                 	db	79	;'O'
  2921  0075E1  52                 	db	82	;'R'
  2922  0075E2  20                 	db	32
  2923  0075E3  2D                 	db	45
  2924  0075E4  20                 	db	32
  2925  0075E5  6D                 	db	109	;'m'
  2926  0075E6  61                 	db	97	;'a'
  2927  0075E7  73                 	db	115	;'s'
  2928  0075E8  6B                 	db	107	;'k'
  2929  0075E9  20                 	db	32
  2930  0075EA  66                 	db	102	;'f'
  2931  0075EB  6F                 	db	111	;'o'
  2932  0075EC  72                 	db	114	;'r'
  2933  0075ED  20                 	db	32
  2934  0075EE  63                 	db	99	;'c'
  2935  0075EF  6C                 	db	108	;'l'
  2936  0075F0  61                 	db	97	;'a'
  2937  0075F1  73                 	db	115	;'s'
  2938  0075F2  73                 	db	115	;'s'
  2939  0075F3  20                 	db	32
  2940  0075F4  69                 	db	105	;'i'
  2941  0075F5  73                 	db	115	;'s'
  2942  0075F6  20                 	db	32
  2943  0075F7  6D                 	db	109	;'m'
  2944  0075F8  69                 	db	105	;'i'
  2945  0075F9  73                 	db	115	;'s'
  2946  0075FA  73                 	db	115	;'s'
  2947  0075FB  69                 	db	105	;'i'
  2948  0075FC  6E                 	db	110	;'n'
  2949  0075FD  67                 	db	103	;'g'
  2950  0075FE  0D                 	db	13
  2951  0075FF  0A                 	db	10
  2952  007600  00                 	db	0
  2953  007601                     STR_127:
  2954  007601  2D                 	db	45
  2955  007602  45                 	db	69	;'E'
  2956  007603  52                 	db	82	;'R'
  2957  007604  52                 	db	82	;'R'
  2958  007605  4F                 	db	79	;'O'
  2959  007606  52                 	db	82	;'R'
  2960  007607  20                 	db	32
  2961  007608  2D                 	db	45
  2962  007609  20                 	db	32
  2963  00760A  6D                 	db	109	;'m'
  2964  00760B  61                 	db	97	;'a'
  2965  00760C  73                 	db	115	;'s'
  2966  00760D  6B                 	db	107	;'k'
  2967  00760E  20                 	db	32
  2968  00760F  66                 	db	102	;'f'
  2969  007610  6F                 	db	111	;'o'
  2970  007611  72                 	db	114	;'r'
  2971  007612  20                 	db	32
  2972  007613  74                 	db	116	;'t'
  2973  007614  79                 	db	121	;'y'
  2974  007615  70                 	db	112	;'p'
  2975  007616  65                 	db	101	;'e'
  2976  007617  20                 	db	32
  2977  007618  69                 	db	105	;'i'
  2978  007619  73                 	db	115	;'s'
  2979  00761A  20                 	db	32
  2980  00761B  6D                 	db	109	;'m'
  2981  00761C  69                 	db	105	;'i'
  2982  00761D  73                 	db	115	;'s'
  2983  00761E  73                 	db	115	;'s'
  2984  00761F  69                 	db	105	;'i'
  2985  007620  6E                 	db	110	;'n'
  2986  007621  67                 	db	103	;'g'
  2987  007622  0D                 	db	13
  2988  007623  0A                 	db	10
  2989  007624  00                 	db	0
  2990  007625                     STR_93:
  2991  007625  2D                 	db	45
  2992  007626  45                 	db	69	;'E'
  2993  007627  52                 	db	82	;'R'
  2994  007628  52                 	db	82	;'R'
  2995  007629  4F                 	db	79	;'O'
  2996  00762A  52                 	db	82	;'R'
  2997  00762B  20                 	db	32
  2998  00762C  2D                 	db	45
  2999  00762D  20                 	db	32
  3000  00762E  46                 	db	70	;'F'
  3001  00762F  61                 	db	97	;'a'
  3002  007630  69                 	db	105	;'i'
  3003  007631  6C                 	db	108	;'l'
  3004  007632  65                 	db	101	;'e'
  3005  007633  64                 	db	100	;'d'
  3006  007634  20                 	db	32
  3007  007635  74                 	db	116	;'t'
  3008  007636  6F                 	db	111	;'o'
  3009  007637  20                 	db	32
  3010  007638  77                 	db	119	;'w'
  3011  007639  72                 	db	114	;'r'
  3012  00763A  69                 	db	105	;'i'
  3013  00763B  74                 	db	116	;'t'
  3014  00763C  65                 	db	101	;'e'
  3015  00763D  20                 	db	32
  3016  00763E  76                 	db	118	;'v'
  3017  00763F  61                 	db	97	;'a'
  3018  007640  6C                 	db	108	;'l'
  3019  007641  75                 	db	117	;'u'
  3020  007642  65                 	db	101	;'e'
  3021  007643  20                 	db	32
  3022  007644  66                 	db	102	;'f'
  3023  007645  6F                 	db	111	;'o'
  3024  007646  72                 	db	114	;'r'
  3025  007647  20                 	db	32
  3026  007648  00                 	db	0
  3027  007649                     STR_3:
  3028  007649  68                 	db	104	;'h'
  3029  00764A  74                 	db	116	;'t'
  3030  00764B  74                 	db	116	;'t'
  3031  00764C  70                 	db	112	;'p'
  3032  00764D  3A                 	db	58	;':'
  3033  00764E  2F                 	db	47
  3034  00764F  2F                 	db	47
  3035  007650  77                 	db	119	;'w'
  3036  007651  77                 	db	119	;'w'
  3037  007652  77                 	db	119	;'w'
  3038  007653  2E                 	db	46
  3039  007654  70                 	db	112	;'p'
  3040  007655  61                 	db	97	;'a'
  3041  007656  72                 	db	114	;'r'
  3042  007657  61                 	db	97	;'a'
  3043  007658  64                 	db	100	;'d'
  3044  007659  69                 	db	105	;'i'
  3045  00765A  73                 	db	115	;'s'
  3046  00765B  65                 	db	101	;'e'
  3047  00765C  6F                 	db	111	;'o'
  3048  00765D  66                 	db	102	;'f'
  3049  00765E  74                 	db	116	;'t'
  3050  00765F  68                 	db	104	;'h'
  3051  007660  65                 	db	101	;'e'
  3052  007661  66                 	db	102	;'f'
  3053  007662  72                 	db	114	;'r'
  3054  007663  6F                 	db	111	;'o'
  3055  007664  67                 	db	103	;'g'
  3056  007665  2E                 	db	46
  3057  007666  63                 	db	99	;'c'
  3058  007667  6F                 	db	111	;'o'
  3059  007668  6D                 	db	109	;'m'
  3060  007669  0D                 	db	13
  3061  00766A  0A                 	db	10
  3062  00766B  00                 	db	0
  3063  00766C                     STR_261:
  3064  00766C  53                 	db	83	;'S'
  3065  00766D  45                 	db	69	;'E'
  3066  00766E  54                 	db	84	;'T'
  3067  00766F  20                 	db	32
  3068  007670  2D                 	db	45
  3069  007671  20                 	db	32
  3070  007672  50                 	db	80	;'P'
  3071  007673  65                 	db	101	;'e'
  3072  007674  72                 	db	114	;'r'
  3073  007675  73                 	db	115	;'s'
  3074  007676  69                 	db	105	;'i'
  3075  007677  73                 	db	115	;'s'
  3076  007678  74                 	db	116	;'t'
  3077  007679  65                 	db	101	;'e'
  3078  00767A  6E                 	db	110	;'n'
  3079  00767B  74                 	db	116	;'t'
  3080  00767C  20                 	db	32
  3081  00767D  66                 	db	102	;'f'
  3082  00767E  75                 	db	117	;'u'
  3083  00767F  6E                 	db	110	;'n'
  3084  007680  63                 	db	99	;'c'
  3085  007681  74                 	db	116	;'t'
  3086  007682  69                 	db	105	;'i'
  3087  007683  6F                 	db	111	;'o'
  3088  007684  6E                 	db	110	;'n'
  3089  007685  61                 	db	97	;'a'
  3090  007686  6C                 	db	108	;'l'
  3091  007687  69                 	db	105	;'i'
  3092  007688  74                 	db	116	;'t'
  3093  007689  79                 	db	121	;'y'
  3094  00768A  2E                 	db	46
  3095  00768B  0D                 	db	13
  3096  00768C  0A                 	db	10
  3097  00768D  00                 	db	0
  3098  00768E                     STR_250:
  3099  00768E  53                 	db	83	;'S'
  3100  00768F  54                 	db	84	;'T'
  3101  007690  41                 	db	65	;'A'
  3102  007691  54                 	db	84	;'T'
  3103  007692  20                 	db	32
  3104  007693  2D                 	db	45
  3105  007694  20                 	db	32
  3106  007695  44                 	db	68	;'D'
  3107  007696  69                 	db	105	;'i'
  3108  007697  73                 	db	115	;'s'
  3109  007698  70                 	db	112	;'p'
  3110  007699  6C                 	db	108	;'l'
  3111  00769A  61                 	db	97	;'a'
  3112  00769B  79                 	db	121	;'y'
  3113  00769C  20                 	db	32
  3114  00769D  43                 	db	67	;'C'
  3115  00769E  41                 	db	65	;'A'
  3116  00769F  4E                 	db	78	;'N'
  3117  0076A0  20                 	db	32
  3118  0076A1  73                 	db	115	;'s'
  3119  0076A2  74                 	db	116	;'t'
  3120  0076A3  61                 	db	97	;'a'
  3121  0076A4  74                 	db	116	;'t'
  3122  0076A5  69                 	db	105	;'i'
  3123  0076A6  73                 	db	115	;'s'
  3124  0076A7  74                 	db	116	;'t'
  3125  0076A8  69                 	db	105	;'i'
  3126  0076A9  63                 	db	99	;'c'
  3127  0076AA  73                 	db	115	;'s'
  3128  0076AB  2E                 	db	46
  3129  0076AC  0D                 	db	13
  3130  0076AD  0A                 	db	10
  3131  0076AE  00                 	db	0
  3132  0076AF                     STR_37:
  3133  0076AF  2D                 	db	45
  3134  0076B0  45                 	db	69	;'E'
  3135  0076B1  52                 	db	82	;'R'
  3136  0076B2  52                 	db	82	;'R'
  3137  0076B3  4F                 	db	79	;'O'
  3138  0076B4  52                 	db	82	;'R'
  3139  0076B5  20                 	db	32
  3140  0076B6  2D                 	db	45
  3141  0076B7  20                 	db	32
  3142  0076B8  46                 	db	70	;'F'
  3143  0076B9  61                 	db	97	;'a'
  3144  0076BA  69                 	db	105	;'i'
  3145  0076BB  6C                 	db	108	;'l'
  3146  0076BC  65                 	db	101	;'e'
  3147  0076BD  64                 	db	100	;'d'
  3148  0076BE  20                 	db	32
  3149  0076BF  74                 	db	116	;'t'
  3150  0076C0  6F                 	db	111	;'o'
  3151  0076C1  20                 	db	32
  3152  0076C2  73                 	db	115	;'s'
  3153  0076C3  65                 	db	101	;'e'
  3154  0076C4  6E                 	db	110	;'n'
  3155  0076C5  64                 	db	100	;'d'
  3156  0076C6  20                 	db	32
  3157  0076C7  65                 	db	101	;'e'
  3158  0076C8  76                 	db	118	;'v'
  3159  0076C9  65                 	db	101	;'e'
  3160  0076CA  6E                 	db	110	;'n'
  3161  0076CB  74                 	db	116	;'t'
  3162  0076CC  2E                 	db	46
  3163  0076CD  0D                 	db	13
  3164  0076CE  0A                 	db	10
  3165  0076CF  00                 	db	0
  3166  0076D0                     STR_161:
  3167  0076D0  2D                 	db	45
  3168  0076D1  45                 	db	69	;'E'
  3169  0076D2  52                 	db	82	;'R'
  3170  0076D3  52                 	db	82	;'R'
  3171  0076D4  4F                 	db	79	;'O'
  3172  0076D5  52                 	db	82	;'R'
  3173  0076D6  20                 	db	32
  3174  0076D7  2D                 	db	45
  3175  0076D8  20                 	db	32
  3176  0076D9  55                 	db	85	;'U'
  3177  0076DA  6E                 	db	110	;'n'
  3178  0076DB  6B                 	db	107	;'k'
  3179  0076DC  6E                 	db	110	;'n'
  3180  0076DD  6F                 	db	111	;'o'
  3181  0076DE  77                 	db	119	;'w'
  3182  0076DF  6E                 	db	110	;'n'
  3183  0076E0  20                 	db	32
  3184  0076E1  27                 	db	39
  3185  0076E2  53                 	db	83	;'S'
  3186  0076E3  45                 	db	69	;'E'
  3187  0076E4  54                 	db	84	;'T'
  3188  0076E5  27                 	db	39
  3189  0076E6  20                 	db	32
  3190  0076E7  63                 	db	99	;'c'
  3191  0076E8  6F                 	db	111	;'o'
  3192  0076E9  6D                 	db	109	;'m'
  3193  0076EA  6D                 	db	109	;'m'
  3194  0076EB  61                 	db	97	;'a'
  3195  0076EC  6E                 	db	110	;'n'
  3196  0076ED  64                 	db	100	;'d'
  3197  0076EE  0D                 	db	13
  3198  0076EF  0A                 	db	10
  3199  0076F0  00                 	db	0
  3200  0076F1                     STR_54:
  3201  0076F1  2D                 	db	45
  3202  0076F2  45                 	db	69	;'E'
  3203  0076F3  52                 	db	82	;'R'
  3204  0076F4  52                 	db	82	;'R'
  3205  0076F5  4F                 	db	79	;'O'
  3206  0076F6  52                 	db	82	;'R'
  3207  0076F7  20                 	db	32
  3208  0076F8  2D                 	db	45
  3209  0076F9  20                 	db	32
  3210  0076FA  4E                 	db	78	;'N'
  3211  0076FB  65                 	db	101	;'e'
  3212  0076FC  65                 	db	101	;'e'
  3213  0076FD  64                 	db	100	;'d'
  3214  0076FE  73                 	db	115	;'s'
  3215  0076FF  20                 	db	32
  3216  007700  5B                 	db	91	;'['
  3217  007701  70                 	db	112	;'p'
  3218  007702  61                 	db	97	;'a'
  3219  007703  67                 	db	103	;'g'
  3220  007704  65                 	db	101	;'e'
  3221  007705  3A                 	db	58	;':'
  3222  007706  5D                 	db	93	;']'
  3223  007707  72                 	db	114	;'r'
  3224  007708  65                 	db	101	;'e'
  3225  007709  67                 	db	103	;'g'
  3226  00770A  69                 	db	105	;'i'
  3227  00770B  73                 	db	115	;'s'
  3228  00770C  74                 	db	116	;'t'
  3229  00770D  65                 	db	101	;'e'
  3230  00770E  72                 	db	114	;'r'
  3231  00770F  0D                 	db	13
  3232  007710  0A                 	db	10
  3233  007711  00                 	db	0
  3234  007712                     STR_148:
  3235  007712  2B                 	db	43
  3236  007713  4F                 	db	79	;'O'
  3237  007714  4B                 	db	75	;'K'
  3238  007715  20                 	db	32
  3239  007716  2D                 	db	45
  3240  007717  20                 	db	32
  3241  007718  4D                 	db	77	;'M'
  3242  007719  6F                 	db	111	;'o'
  3243  00771A  64                 	db	100	;'d'
  3244  00771B  65                 	db	101	;'e'
  3245  00771C  20                 	db	32
  3246  00771D  69                 	db	105	;'i'
  3247  00771E  73                 	db	115	;'s'
  3248  00771F  20                 	db	32
  3249  007720  6E                 	db	110	;'n'
  3250  007721  6F                 	db	111	;'o'
  3251  007722  77                 	db	119	;'w'
  3252  007723  20                 	db	32
  3253  007724  56                 	db	86	;'V'
  3254  007725  53                 	db	83	;'S'
  3255  007726  43                 	db	67	;'C'
  3256  007727  50                 	db	80	;'P'
  3257  007728  20                 	db	32
  3258  007729  44                 	db	68	;'D'
  3259  00772A  72                 	db	114	;'r'
  3260  00772B  69                 	db	105	;'i'
  3261  00772C  76                 	db	118	;'v'
  3262  00772D  65                 	db	101	;'e'
  3263  00772E  72                 	db	114	;'r'
  3264  00772F  0D                 	db	13
  3265  007730  0A                 	db	10
  3266  007731  00                 	db	0
  3267  007732                     STR_7:
  3268  007732  57                 	db	87	;'W'
  3269  007733  69                 	db	105	;'i'
  3270  007734  6C                 	db	108	;'l'
  3271  007735  6C                 	db	108	;'l'
  3272  007736  20                 	db	32
  3273  007737  65                 	db	101	;'e'
  3274  007738  6E                 	db	110	;'n'
  3275  007739  74                 	db	116	;'t'
  3276  00773A  65                 	db	101	;'e'
  3277  00773B  72                 	db	114	;'r'
  3278  00773C  20                 	db	32
  3279  00773D  62                 	db	98	;'b'
  3280  00773E  6F                 	db	111	;'o'
  3281  00773F  6F                 	db	111	;'o'
  3282  007740  74                 	db	116	;'t'
  3283  007741  6C                 	db	108	;'l'
  3284  007742  6F                 	db	111	;'o'
  3285  007743  61                 	db	97	;'a'
  3286  007744  64                 	db	100	;'d'
  3287  007745  65                 	db	101	;'e'
  3288  007746  72                 	db	114	;'r'
  3289  007747  20                 	db	32
  3290  007748  6E                 	db	110	;'n'
  3291  007749  6F                 	db	111	;'o'
  3292  00774A  77                 	db	119	;'w'
  3293  00774B  2E                 	db	46
  3294  00774C  2E                 	db	46
  3295  00774D  2E                 	db	46
  3296  00774E  0D                 	db	13
  3297  00774F  0A                 	db	10
  3298  007750  00                 	db	0
  3299  007751                     STR_244:
  3300  007751  43                 	db	67	;'C'
  3301  007752  4C                 	db	76	;'L'
  3302  007753  4F                 	db	79	;'O'
  3303  007754  53                 	db	83	;'S'
  3304  007755  45                 	db	69	;'E'
  3305  007756  20                 	db	32
  3306  007757  2D                 	db	45
  3307  007758  20                 	db	32
  3308  007759  43                 	db	67	;'C'
  3309  00775A  6C                 	db	108	;'l'
  3310  00775B  6F                 	db	111	;'o'
  3311  00775C  73                 	db	115	;'s'
  3312  00775D  65                 	db	101	;'e'
  3313  00775E  20                 	db	32
  3314  00775F  43                 	db	67	;'C'
  3315  007760  41                 	db	65	;'A'
  3316  007761  4E                 	db	78	;'N'
  3317  007762  20                 	db	32
  3318  007763  69                 	db	105	;'i'
  3319  007764  6E                 	db	110	;'n'
  3320  007765  74                 	db	116	;'t'
  3321  007766  65                 	db	101	;'e'
  3322  007767  72                 	db	114	;'r'
  3323  007768  66                 	db	102	;'f'
  3324  007769  61                 	db	97	;'a'
  3325  00776A  63                 	db	99	;'c'
  3326  00776B  65                 	db	101	;'e'
  3327  00776C  2E                 	db	46
  3328  00776D  0D                 	db	13
  3329  00776E  0A                 	db	10
  3330  00776F  00                 	db	0
  3331  007770                     STR_5:
  3332  007770  54                 	db	84	;'T'
  3333  007771  65                 	db	101	;'e'
  3334  007772  6D                 	db	109	;'m'
  3335  007773  70                 	db	112	;'p'
  3336  007774  6F                 	db	111	;'o'
  3337  007775  72                 	db	114	;'r'
  3338  007776  61                 	db	97	;'a'
  3339  007777  72                 	db	114	;'r'
  3340  007778  79                 	db	121	;'y'
  3341  007779  20                 	db	32
  3342  00777A  76                 	db	118	;'v'
  3343  00777B  65                 	db	101	;'e'
  3344  00777C  72                 	db	114	;'r'
  3345  00777D  62                 	db	98	;'b'
  3346  00777E  6F                 	db	111	;'o'
  3347  00777F  73                 	db	115	;'s'
  3348  007780  65                 	db	101	;'e'
  3349  007781  20                 	db	32
  3350  007782  6D                 	db	109	;'m'
  3351  007783  6F                 	db	111	;'o'
  3352  007784  64                 	db	100	;'d'
  3353  007785  65                 	db	101	;'e'
  3354  007786  20                 	db	32
  3355  007787  73                 	db	115	;'s'
  3356  007788  65                 	db	101	;'e'
  3357  007789  74                 	db	116	;'t'
  3358  00778A  0D                 	db	13
  3359  00778B  0A                 	db	10
  3360  00778C  00                 	db	0
  3361  00778D                     STR_271:
  3362  00778D  0D                 	db	13
  3363  00778E  0A                 	db	10
  3364  00778F  4E                 	db	78	;'N'
  3365  007790  6F                 	db	111	;'o'
  3366  007791  64                 	db	100	;'d'
  3367  007792  65                 	db	101	;'e'
  3368  007793  20                 	db	32
  3369  007794  66                 	db	102	;'f'
  3370  007795  6F                 	db	111	;'o'
  3371  007796  75                 	db	117	;'u'
  3372  007797  6E                 	db	110	;'n'
  3373  007798  64                 	db	100	;'d'
  3374  007799  20                 	db	32
  3375  00779A  77                 	db	119	;'w'
  3376  00779B  69                 	db	105	;'i'
  3377  00779C  74                 	db	116	;'t'
  3378  00779D  68                 	db	104	;'h'
  3379  00779E  20                 	db	32
  3380  00779F  6E                 	db	110	;'n'
  3381  0077A0  6F                 	db	111	;'o'
  3382  0077A1  64                 	db	100	;'d'
  3383  0077A2  65                 	db	101	;'e'
  3384  0077A3  20                 	db	32
  3385  0077A4  69                 	db	105	;'i'
  3386  0077A5  64                 	db	100	;'d'
  3387  0077A6  20                 	db	32
  3388  0077A7  3D                 	db	61	;'='
  3389  0077A8  20                 	db	32
  3390  0077A9  00                 	db	0
  3391  0077AA                     STR_146:
  3392  0077AA  2B                 	db	43
  3393  0077AB  4F                 	db	79	;'O'
  3394  0077AC  4B                 	db	75	;'K'
  3395  0077AD  20                 	db	32
  3396  0077AE  2D                 	db	45
  3397  0077AF  20                 	db	32
  3398  0077B0  4D                 	db	77	;'M'
  3399  0077B1  6F                 	db	111	;'o'
  3400  0077B2  64                 	db	100	;'d'
  3401  0077B3  65                 	db	101	;'e'
  3402  0077B4  20                 	db	32
  3403  0077B5  69                 	db	105	;'i'
  3404  0077B6  73                 	db	115	;'s'
  3405  0077B7  20                 	db	32
  3406  0077B8  6E                 	db	110	;'n'
  3407  0077B9  6F                 	db	111	;'o'
  3408  0077BA  77                 	db	119	;'w'
  3409  0077BB  20                 	db	32
  3410  0077BC  76                 	db	118	;'v'
  3411  0077BD  65                 	db	101	;'e'
  3412  0077BE  72                 	db	114	;'r'
  3413  0077BF  62                 	db	98	;'b'
  3414  0077C0  6F                 	db	111	;'o'
  3415  0077C1  73                 	db	115	;'s'
  3416  0077C2  65                 	db	101	;'e'
  3417  0077C3  0D                 	db	13
  3418  0077C4  0A                 	db	10
  3419  0077C5  00                 	db	0
  3420  0077C6                     STR_103:
  3421  0077C6  2D                 	db	45
  3422  0077C7  45                 	db	69	;'E'
  3423  0077C8  52                 	db	82	;'R'
  3424  0077C9  52                 	db	82	;'R'
  3425  0077CA  4F                 	db	79	;'O'
  3426  0077CB  52                 	db	82	;'R'
  3427  0077CC  20                 	db	32
  3428  0077CD  2D                 	db	45
  3429  0077CE  20                 	db	32
  3430  0077CF  4E                 	db	78	;'N'
  3431  0077D0  6F                 	db	111	;'o'
  3432  0077D1  64                 	db	100	;'d'
  3433  0077D2  65                 	db	101	;'e'
  3434  0077D3  20                 	db	32
  3435  0077D4  6E                 	db	110	;'n'
  3436  0077D5  6F                 	db	111	;'o'
  3437  0077D6  74                 	db	116	;'t'
  3438  0077D7  20                 	db	32
  3439  0077D8  66                 	db	102	;'f'
  3440  0077D9  6F                 	db	111	;'o'
  3441  0077DA  75                 	db	117	;'u'
  3442  0077DB  6E                 	db	110	;'n'
  3443  0077DC  64                 	db	100	;'d'
  3444  0077DD  2E                 	db	46
  3445  0077DE  0D                 	db	13
  3446  0077DF  0A                 	db	10
  3447  0077E0  00                 	db	0
  3448  0077E1                     STR_239:
  3449  0077E1  42                 	db	66	;'B'
  3450  0077E2  4F                 	db	79	;'O'
  3451  0077E3  4F                 	db	79	;'O'
  3452  0077E4  54                 	db	84	;'T'
  3453  0077E5  20                 	db	32
  3454  0077E6  2D                 	db	45
  3455  0077E7  20                 	db	32
  3456  0077E8  45                 	db	69	;'E'
  3457  0077E9  6E                 	db	110	;'n'
  3458  0077EA  74                 	db	116	;'t'
  3459  0077EB  65                 	db	101	;'e'
  3460  0077EC  72                 	db	114	;'r'
  3461  0077ED  20                 	db	32
  3462  0077EE  62                 	db	98	;'b'
  3463  0077EF  6F                 	db	111	;'o'
  3464  0077F0  6F                 	db	111	;'o'
  3465  0077F1  74                 	db	116	;'t'
  3466  0077F2  6C                 	db	108	;'l'
  3467  0077F3  6F                 	db	111	;'o'
  3468  0077F4  61                 	db	97	;'a'
  3469  0077F5  64                 	db	100	;'d'
  3470  0077F6  65                 	db	101	;'e'
  3471  0077F7  72                 	db	114	;'r'
  3472  0077F8  2E                 	db	46
  3473  0077F9  0D                 	db	13
  3474  0077FA  0A                 	db	10
  3475  0077FB  00                 	db	0
  3476  0077FC                     STR_163:
  3477  0077FC  2D                 	db	45
  3478  0077FD  45                 	db	69	;'E'
  3479  0077FE  52                 	db	82	;'R'
  3480  0077FF  52                 	db	82	;'R'
  3481  007800  4F                 	db	79	;'O'
  3482  007801  52                 	db	82	;'R'
  3483  007802  20                 	db	32
  3484  007803  2D                 	db	45
  3485  007804  20                 	db	32
  3486  007805  55                 	db	85	;'U'
  3487  007806  6E                 	db	110	;'n'
  3488  007807  6B                 	db	107	;'k'
  3489  007808  6E                 	db	110	;'n'
  3490  007809  6F                 	db	111	;'o'
  3491  00780A  77                 	db	119	;'w'
  3492  00780B  6E                 	db	110	;'n'
  3493  00780C  20                 	db	32
  3494  00780D  63                 	db	99	;'c'
  3495  00780E  6F                 	db	111	;'o'
  3496  00780F  6D                 	db	109	;'m'
  3497  007810  6D                 	db	109	;'m'
  3498  007811  61                 	db	97	;'a'
  3499  007812  6E                 	db	110	;'n'
  3500  007813  64                 	db	100	;'d'
  3501  007814  0D                 	db	13
  3502  007815  0A                 	db	10
  3503  007816  00                 	db	0
  3504  007817                     STR_150:
  3505  007817  2B                 	db	43
  3506  007818  4F                 	db	79	;'O'
  3507  007819  4B                 	db	75	;'K'
  3508  00781A  20                 	db	32
  3509  00781B  2D                 	db	45
  3510  00781C  20                 	db	32
  3511  00781D  4D                 	db	77	;'M'
  3512  00781E  6F                 	db	111	;'o'
  3513  00781F  64                 	db	100	;'d'
  3514  007820  65                 	db	101	;'e'
  3515  007821  20                 	db	32
  3516  007822  69                 	db	105	;'i'
  3517  007823  73                 	db	115	;'s'
  3518  007824  20                 	db	32
  3519  007825  6E                 	db	110	;'n'
  3520  007826  6F                 	db	111	;'o'
  3521  007827  77                 	db	119	;'w'
  3522  007828  20                 	db	32
  3523  007829  53                 	db	83	;'S'
  3524  00782A  4C                 	db	76	;'L'
  3525  00782B  43                 	db	67	;'C'
  3526  00782C  41                 	db	65	;'A'
  3527  00782D  4E                 	db	78	;'N'
  3528  00782E  0D                 	db	13
  3529  00782F  0A                 	db	10
  3530  007830  00                 	db	0
  3531  007831                     STR_25:
  3532  007831  2B                 	db	43
  3533  007832  4F                 	db	79	;'O'
  3534  007833  4B                 	db	75	;'K'
  3535  007834  20                 	db	32
  3536  007835  2D                 	db	45
  3537  007836  20                 	db	32
  3538  007837  4C                 	db	76	;'L'
  3539  007838  69                 	db	105	;'i'
  3540  007839  73                 	db	115	;'s'
  3541  00783A  74                 	db	116	;'t'
  3542  00783B  65                 	db	101	;'e'
  3543  00783C  6E                 	db	110	;'n'
  3544  00783D  20                 	db	32
  3545  00783E  6F                 	db	111	;'o'
  3546  00783F  6E                 	db	110	;'n'
  3547  007840  6C                 	db	108	;'l'
  3548  007841  79                 	db	121	;'y'
  3549  007842  20                 	db	32
  3550  007843  6D                 	db	109	;'m'
  3551  007844  6F                 	db	111	;'o'
  3552  007845  64                 	db	100	;'d'
  3553  007846  65                 	db	101	;'e'
  3554  007847  0D                 	db	13
  3555  007848  0A                 	db	10
  3556  007849  00                 	db	0
  3557  00784A                     STR_223:
  3558  00784A  54                 	db	84	;'T'
  3559  00784B  72                 	db	114	;'r'
  3560  00784C  61                 	db	97	;'a'
  3561  00784D  6E                 	db	110	;'n'
  3562  00784E  73                 	db	115	;'s'
  3563  00784F  6D                 	db	109	;'m'
  3564  007850  69                 	db	105	;'i'
  3565  007851  74                 	db	116	;'t'
  3566  007852  20                 	db	32
  3567  007853  45                 	db	69	;'E'
  3568  007854  72                 	db	114	;'r'
  3569  007855  72                 	db	114	;'r'
  3570  007856  6F                 	db	111	;'o'
  3571  007857  72                 	db	114	;'r'
  3572  007858  20                 	db	32
  3573  007859  43                 	db	67	;'C'
  3574  00785A  6F                 	db	111	;'o'
  3575  00785B  75                 	db	117	;'u'
  3576  00785C  6E                 	db	110	;'n'
  3577  00785D  74                 	db	116	;'t'
  3578  00785E  65                 	db	101	;'e'
  3579  00785F  72                 	db	114	;'r'
  3580  007860  3A                 	db	58	;':'
  3581  007861  20                 	db	32
  3582  007862  00                 	db	0
  3583  007863                     STR_73:
  3584  007863  55                 	db	85	;'U'
  3585  007864  6E                 	db	110	;'n'
  3586  007865  61                 	db	97	;'a'
  3587  007866  62                 	db	98	;'b'
  3588  007867  6C                 	db	108	;'l'
  3589  007868  65                 	db	101	;'e'
  3590  007869  20                 	db	32
  3591  00786A  74                 	db	116	;'t'
  3592  00786B  6F                 	db	111	;'o'
  3593  00786C  20                 	db	32
  3594  00786D  72                 	db	114	;'r'
  3595  00786E  65                 	db	101	;'e'
  3596  00786F  61                 	db	97	;'a'
  3597  007870  64                 	db	100	;'d'
  3598  007871  20                 	db	32
  3599  007872  72                 	db	114	;'r'
  3600  007873  65                 	db	101	;'e'
  3601  007874  67                 	db	103	;'g'
  3602  007875  69                 	db	105	;'i'
  3603  007876  73                 	db	115	;'s'
  3604  007877  74                 	db	116	;'t'
  3605  007878  65                 	db	101	;'e'
  3606  007879  72                 	db	114	;'r'
  3607  00787A  20                 	db	32
  3608  00787B  00                 	db	0
  3609  00787C                     STR_247:
  3610  00787C  54                 	db	84	;'T'
  3611  00787D  58                 	db	88	;'X'
  3612  00787E  20                 	db	32
  3613  00787F  2D                 	db	45
  3614  007880  20                 	db	32
  3615  007881  53                 	db	83	;'S'
  3616  007882  65                 	db	101	;'e'
  3617  007883  6E                 	db	110	;'n'
  3618  007884  64                 	db	100	;'d'
  3619  007885  20                 	db	32
  3620  007886  43                 	db	67	;'C'
  3621  007887  41                 	db	65	;'A'
  3622  007888  4E                 	db	78	;'N'
  3623  007889  20                 	db	32
  3624  00788A  66                 	db	102	;'f'
  3625  00788B  72                 	db	114	;'r'
  3626  00788C  61                 	db	97	;'a'
  3627  00788D  6D                 	db	109	;'m'
  3628  00788E  65                 	db	101	;'e'
  3629  00788F  20                 	db	32
  3630  007890  2E                 	db	46
  3631  007891  0D                 	db	13
  3632  007892  0A                 	db	10
  3633  007893  00                 	db	0
  3634  007894                     STR_257:
  3635  007894  46                 	db	70	;'F'
  3636  007895  49                 	db	73	;'I'
  3637  007896  4C                 	db	76	;'L'
  3638  007897  54                 	db	84	;'T'
  3639  007898  45                 	db	69	;'E'
  3640  007899  52                 	db	82	;'R'
  3641  00789A  20                 	db	32
  3642  00789B  2D                 	db	45
  3643  00789C  20                 	db	32
  3644  00789D  53                 	db	83	;'S'
  3645  00789E  65                 	db	101	;'e'
  3646  00789F  74                 	db	116	;'t'
  3647  0078A0  20                 	db	32
  3648  0078A1  66                 	db	102	;'f'
  3649  0078A2  69                 	db	105	;'i'
  3650  0078A3  6C                 	db	108	;'l'
  3651  0078A4  74                 	db	116	;'t'
  3652  0078A5  65                 	db	101	;'e'
  3653  0078A6  72                 	db	114	;'r'
  3654  0078A7  20                 	db	32
  3655  0078A8  2E                 	db	46
  3656  0078A9  0D                 	db	13
  3657  0078AA  0A                 	db	10
  3658  0078AB  00                 	db	0
  3659  0078AC                     STR_52:
  3660  0078AC  2D                 	db	45
  3661  0078AD  45                 	db	69	;'E'
  3662  0078AE  52                 	db	82	;'R'
  3663  0078AF  52                 	db	82	;'R'
  3664  0078B0  4F                 	db	79	;'O'
  3665  0078B1  52                 	db	82	;'R'
  3666  0078B2  20                 	db	32
  3667  0078B3  2D                 	db	45
  3668  0078B4  20                 	db	32
  3669  0078B5  4E                 	db	78	;'N'
  3670  0078B6  65                 	db	101	;'e'
  3671  0078B7  65                 	db	101	;'e'
  3672  0078B8  64                 	db	100	;'d'
  3673  0078B9  73                 	db	115	;'s'
  3674  0078BA  20                 	db	32
  3675  0078BB  6E                 	db	110	;'n'
  3676  0078BC  6F                 	db	111	;'o'
  3677  0078BD  64                 	db	100	;'d'
  3678  0078BE  65                 	db	101	;'e'
  3679  0078BF  69                 	db	105	;'i'
  3680  0078C0  64                 	db	100	;'d'
  3681  0078C1  0D                 	db	13
  3682  0078C2  0A                 	db	10
  3683  0078C3  00                 	db	0
  3684  0078C4                     STR_28:
  3685  0078C4  2D                 	db	45
  3686  0078C5  45                 	db	69	;'E'
  3687  0078C6  52                 	db	82	;'R'
  3688  0078C7  52                 	db	82	;'R'
  3689  0078C8  4F                 	db	79	;'O'
  3690  0078C9  52                 	db	82	;'R'
  3691  0078CA  20                 	db	32
  3692  0078CB  2D                 	db	45
  3693  0078CC  20                 	db	32
  3694  0078CD  55                 	db	85	;'U'
  3695  0078CE  6E                 	db	110	;'n'
  3696  0078CF  6B                 	db	107	;'k'
  3697  0078D0  6E                 	db	110	;'n'
  3698  0078D1  6F                 	db	111	;'o'
  3699  0078D2  77                 	db	119	;'w'
  3700  0078D3  6E                 	db	110	;'n'
  3701  0078D4  20                 	db	32
  3702  0078D5  6D                 	db	109	;'m'
  3703  0078D6  6F                 	db	111	;'o'
  3704  0078D7  64                 	db	100	;'d'
  3705  0078D8  65                 	db	101	;'e'
  3706  0078D9  0D                 	db	13
  3707  0078DA  0A                 	db	10
  3708  0078DB  00                 	db	0
  3709  0078DC                     STR_88:
  3710  0078DC  2D                 	db	45
  3711  0078DD  45                 	db	69	;'E'
  3712  0078DE  52                 	db	82	;'R'
  3713  0078DF  52                 	db	82	;'R'
  3714  0078E0  4F                 	db	79	;'O'
  3715  0078E1  52                 	db	82	;'R'
  3716  0078E2  20                 	db	32
  3717  0078E3  2D                 	db	45
  3718  0078E4  20                 	db	32
  3719  0078E5  4E                 	db	78	;'N'
  3720  0078E6  65                 	db	101	;'e'
  3721  0078E7  65                 	db	101	;'e'
  3722  0078E8  64                 	db	100	;'d'
  3723  0078E9  20                 	db	32
  3724  0078EA  61                 	db	97	;'a'
  3725  0078EB  20                 	db	32
  3726  0078EC  76                 	db	118	;'v'
  3727  0078ED  61                 	db	97	;'a'
  3728  0078EE  6C                 	db	108	;'l'
  3729  0078EF  75                 	db	117	;'u'
  3730  0078F0  65                 	db	101	;'e'
  3731  0078F1  0D                 	db	13
  3732  0078F2  0A                 	db	10
  3733  0078F3  00                 	db	0
  3734  0078F4                     STR_230:
  3735  0078F4  52                 	db	82	;'R'
  3736  0078F5  65                 	db	101	;'e'
  3737  0078F6  63                 	db	99	;'c'
  3738  0078F7  65                 	db	101	;'e'
  3739  0078F8  69                 	db	105	;'i'
  3740  0078F9  76                 	db	118	;'v'
  3741  0078FA  65                 	db	101	;'e'
  3742  0078FB  20                 	db	32
  3743  0078FC  45                 	db	69	;'E'
  3744  0078FD  72                 	db	114	;'r'
  3745  0078FE  72                 	db	114	;'r'
  3746  0078FF  6F                 	db	111	;'o'
  3747  007900  72                 	db	114	;'r'
  3748  007901  20                 	db	32
  3749  007902  43                 	db	67	;'C'
  3750  007903  6F                 	db	111	;'o'
  3751  007904  75                 	db	117	;'u'
  3752  007905  6E                 	db	110	;'n'
  3753  007906  74                 	db	116	;'t'
  3754  007907  65                 	db	101	;'e'
  3755  007908  72                 	db	114	;'r'
  3756  007909  3A                 	db	58	;':'
  3757  00790A  20                 	db	32
  3758  00790B  00                 	db	0
  3759  00790C                     STR_215:
  3760  00790C  55                 	db	85	;'U'
  3761  00790D  41                 	db	65	;'A'
  3762  00790E  52                 	db	82	;'R'
  3763  00790F  54                 	db	84	;'T'
  3764  007910  20                 	db	32
  3765  007911  52                 	db	82	;'R'
  3766  007912  65                 	db	101	;'e'
  3767  007913  63                 	db	99	;'c'
  3768  007914  65                 	db	101	;'e'
  3769  007915  69                 	db	105	;'i'
  3770  007916  76                 	db	118	;'v'
  3771  007917  65                 	db	101	;'e'
  3772  007918  20                 	db	32
  3773  007919  6F                 	db	111	;'o'
  3774  00791A  76                 	db	118	;'v'
  3775  00791B  65                 	db	101	;'e'
  3776  00791C  72                 	db	114	;'r'
  3777  00791D  72                 	db	114	;'r'
  3778  00791E  75                 	db	117	;'u'
  3779  00791F  6E                 	db	110	;'n'
  3780  007920  73                 	db	115	;'s'
  3781  007921  3A                 	db	58	;':'
  3782  007922  20                 	db	32
  3783  007923  00                 	db	0
  3784  007924                     STR_211:
  3785  007924  43                 	db	67	;'C'
  3786  007925  41                 	db	65	;'A'
  3787  007926  4E                 	db	78	;'N'
  3788  007927  20                 	db	32
  3789  007928  54                 	db	84	;'T'
  3790  007929  72                 	db	114	;'r'
  3791  00792A  61                 	db	97	;'a'
  3792  00792B  6E                 	db	110	;'n'
  3793  00792C  73                 	db	115	;'s'
  3794  00792D  6D                 	db	109	;'m'
  3795  00792E  69                 	db	105	;'i'
  3796  00792F  74                 	db	116	;'t'
  3797  007930  20                 	db	32
  3798  007931  6F                 	db	111	;'o'
  3799  007932  76                 	db	118	;'v'
  3800  007933  65                 	db	101	;'e'
  3801  007934  72                 	db	114	;'r'
  3802  007935  72                 	db	114	;'r'
  3803  007936  75                 	db	117	;'u'
  3804  007937  6E                 	db	110	;'n'
  3805  007938  73                 	db	115	;'s'
  3806  007939  3A                 	db	58	;':'
  3807  00793A  20                 	db	32
  3808  00793B  00                 	db	0
  3809  00793C                     STR_249:
  3810  00793C  52                 	db	82	;'R'
  3811  00793D  58                 	db	88	;'X'
  3812  00793E  20                 	db	32
  3813  00793F  2D                 	db	45
  3814  007940  20                 	db	32
  3815  007941  52                 	db	82	;'R'
  3816  007942  65                 	db	101	;'e'
  3817  007943  61                 	db	97	;'a'
  3818  007944  64                 	db	100	;'d'
  3819  007945  20                 	db	32
  3820  007946  43                 	db	67	;'C'
  3821  007947  41                 	db	65	;'A'
  3822  007948  4E                 	db	78	;'N'
  3823  007949  20                 	db	32
  3824  00794A  66                 	db	102	;'f'
  3825  00794B  72                 	db	114	;'r'
  3826  00794C  61                 	db	97	;'a'
  3827  00794D  6D                 	db	109	;'m'
  3828  00794E  65                 	db	101	;'e'
  3829  00794F  2E                 	db	46
  3830  007950  0D                 	db	13
  3831  007951  0A                 	db	10
  3832  007952  00                 	db	0
  3833  007953                     STR_157:
  3834  007953  2B                 	db	43
  3835  007954  4F                 	db	79	;'O'
  3836  007955  4B                 	db	75	;'K'
  3837  007956  20                 	db	32
  3838  007957  2D                 	db	45
  3839  007958  20                 	db	32
  3840  007959  4C                 	db	76	;'L'
  3841  00795A  6F                 	db	111	;'o'
  3842  00795B  63                 	db	99	;'c'
  3843  00795C  61                 	db	97	;'a'
  3844  00795D  6C                 	db	108	;'l'
  3845  00795E  20                 	db	32
  3846  00795F  65                 	db	101	;'e'
  3847  007960  63                 	db	99	;'c'
  3848  007961  68                 	db	104	;'h'
  3849  007962  6F                 	db	111	;'o'
  3850  007963  20                 	db	32
  3851  007964  6F                 	db	111	;'o'
  3852  007965  66                 	db	102	;'f'
  3853  007966  66                 	db	102	;'f'
  3854  007967  0D                 	db	13
  3855  007968  0A                 	db	10
  3856  007969  00                 	db	0
  3857  00796A                     STR_207:
  3858  00796A  43                 	db	67	;'C'
  3859  00796B  41                 	db	65	;'A'
  3860  00796C  4E                 	db	78	;'N'
  3861  00796D  20                 	db	32
  3862  00796E  52                 	db	82	;'R'
  3863  00796F  65                 	db	101	;'e'
  3864  007970  63                 	db	99	;'c'
  3865  007971  65                 	db	101	;'e'
  3866  007972  69                 	db	105	;'i'
  3867  007973  76                 	db	118	;'v'
  3868  007974  65                 	db	101	;'e'
  3869  007975  20                 	db	32
  3870  007976  6F                 	db	111	;'o'
  3871  007977  76                 	db	118	;'v'
  3872  007978  65                 	db	101	;'e'
  3873  007979  72                 	db	114	;'r'
  3874  00797A  72                 	db	114	;'r'
  3875  00797B  75                 	db	117	;'u'
  3876  00797C  6E                 	db	110	;'n'
  3877  00797D  73                 	db	115	;'s'
  3878  00797E  3A                 	db	58	;':'
  3879  00797F  20                 	db	32
  3880  007980  00                 	db	0
  3881  007981                     STR_294:
  3882  007981  55                 	db	85	;'U'
  3883  007982  6E                 	db	110	;'n'
  3884  007983  6B                 	db	107	;'k'
  3885  007984  6E                 	db	110	;'n'
  3886  007985  6F                 	db	111	;'o'
  3887  007986  77                 	db	119	;'w'
  3888  007987  6E                 	db	110	;'n'
  3889  007988  20                 	db	32
  3890  007989  28                 	db	40
  3891  00798A  56                 	db	86	;'V'
  3892  00798B  65                 	db	101	;'e'
  3893  00798C  72                 	db	114	;'r'
  3894  00798D  62                 	db	98	;'b'
  3895  00798E  6F                 	db	111	;'o'
  3896  00798F  73                 	db	115	;'s'
  3897  007990  65                 	db	101	;'e'
  3898  007991  20                 	db	32
  3899  007992  75                 	db	117	;'u'
  3900  007993  73                 	db	115	;'s'
  3901  007994  65                 	db	101	;'e'
  3902  007995  64                 	db	100	;'d'
  3903  007996  29                 	db	41
  3904  007997  00                 	db	0
  3905  007998                     STR_24:
  3906  007998  2B                 	db	43
  3907  007999  4F                 	db	79	;'O'
  3908  00799A  4B                 	db	75	;'K'
  3909  00799B  20                 	db	32
  3910  00799C  2D                 	db	45
  3911  00799D  20                 	db	32
  3912  00799E  4C                 	db	76	;'L'
  3913  00799F  6F                 	db	111	;'o'
  3914  0079A0  6F                 	db	111	;'o'
  3915  0079A1  70                 	db	112	;'p'
  3916  0079A2  62                 	db	98	;'b'
  3917  0079A3  61                 	db	97	;'a'
  3918  0079A4  63                 	db	99	;'c'
  3919  0079A5  6B                 	db	107	;'k'
  3920  0079A6  20                 	db	32
  3921  0079A7  6D                 	db	109	;'m'
  3922  0079A8  6F                 	db	111	;'o'
  3923  0079A9  64                 	db	100	;'d'
  3924  0079AA  65                 	db	101	;'e'
  3925  0079AB  0D                 	db	13
  3926  0079AC  0A                 	db	10
  3927  0079AD  00                 	db	0
  3928  0079AE                     STR_155:
  3929  0079AE  2B                 	db	43
  3930  0079AF  4F                 	db	79	;'O'
  3931  0079B0  4B                 	db	75	;'K'
  3932  0079B1  20                 	db	32
  3933  0079B2  2D                 	db	45
  3934  0079B3  20                 	db	32
  3935  0079B4  4C                 	db	76	;'L'
  3936  0079B5  6F                 	db	111	;'o'
  3937  0079B6  63                 	db	99	;'c'
  3938  0079B7  61                 	db	97	;'a'
  3939  0079B8  6C                 	db	108	;'l'
  3940  0079B9  20                 	db	32
  3941  0079BA  65                 	db	101	;'e'
  3942  0079BB  63                 	db	99	;'c'
  3943  0079BC  68                 	db	104	;'h'
  3944  0079BD  6F                 	db	111	;'o'
  3945  0079BE  20                 	db	32
  3946  0079BF  6F                 	db	111	;'o'
  3947  0079C0  6E                 	db	110	;'n'
  3948  0079C1  0D                 	db	13
  3949  0079C2  0A                 	db	10
  3950  0079C3  00                 	db	0
  3951  0079C4                     STR_199:
  3952  0079C4  52                 	db	82	;'R'
  3953  0079C5  65                 	db	101	;'e'
  3954  0079C6  63                 	db	99	;'c'
  3955  0079C7  65                 	db	101	;'e'
  3956  0079C8  69                 	db	105	;'i'
  3957  0079C9  76                 	db	118	;'v'
  3958  0079CA  65                 	db	101	;'e'
  3959  0079CB  64                 	db	100	;'d'
  3960  0079CC  20                 	db	32
  3961  0079CD  43                 	db	67	;'C'
  3962  0079CE  41                 	db	65	;'A'
  3963  0079CF  4E                 	db	78	;'N'
  3964  0079D0  20                 	db	32
  3965  0079D1  66                 	db	102	;'f'
  3966  0079D2  72                 	db	114	;'r'
  3967  0079D3  61                 	db	97	;'a'
  3968  0079D4  6D                 	db	109	;'m'
  3969  0079D5  65                 	db	101	;'e'
  3970  0079D6  73                 	db	115	;'s'
  3971  0079D7  3A                 	db	58	;':'
  3972  0079D8  20                 	db	32
  3973  0079D9  00                 	db	0
  3974  0079DA                     STR_203:
  3975  0079DA  52                 	db	82	;'R'
  3976  0079DB  65                 	db	101	;'e'
  3977  0079DC  63                 	db	99	;'c'
  3978  0079DD  65                 	db	101	;'e'
  3979  0079DE  69                 	db	105	;'i'
  3980  0079DF  76                 	db	118	;'v'
  3981  0079E0  65                 	db	101	;'e'
  3982  0079E1  64                 	db	100	;'d'
  3983  0079E2  20                 	db	32
  3984  0079E3  43                 	db	67	;'C'
  3985  0079E4  41                 	db	65	;'A'
  3986  0079E5  4E                 	db	78	;'N'
  3987  0079E6  20                 	db	32
  3988  0079E7  62                 	db	98	;'b'
  3989  0079E8  79                 	db	121	;'y'
  3990  0079E9  74                 	db	116	;'t'
  3991  0079EA  65                 	db	101	;'e'
  3992  0079EB  73                 	db	115	;'s'
  3993  0079EC  3A                 	db	58	;':'
  3994  0079ED  20                 	db	32
  3995  0079EE  00                 	db	0
  3996  0079EF                     STR_259:
  3997  0079EF  4D                 	db	77	;'M'
  3998  0079F0  41                 	db	65	;'A'
  3999  0079F1  53                 	db	83	;'S'
  4000  0079F2  4B                 	db	75	;'K'
  4001  0079F3  20                 	db	32
  4002  0079F4  2D                 	db	45
  4003  0079F5  20                 	db	32
  4004  0079F6  53                 	db	83	;'S'
  4005  0079F7  65                 	db	101	;'e'
  4006  0079F8  74                 	db	116	;'t'
  4007  0079F9  20                 	db	32
  4008  0079FA  6D                 	db	109	;'m'
  4009  0079FB  61                 	db	97	;'a'
  4010  0079FC  73                 	db	115	;'s'
  4011  0079FD  6B                 	db	107	;'k'
  4012  0079FE  20                 	db	32
  4013  0079FF  2E                 	db	46
  4014  007A00  0D                 	db	13
  4015  007A01  0A                 	db	10
  4016  007A02  00                 	db	0
  4017  007A03                     STR_164:
  4018  007A03  4A                 	db	74	;'J'
  4019  007A04  46                 	db	70	;'F'
  4020  007A05  72                 	db	114	;'r'
  4021  007A06  61                 	db	97	;'a'
  4022  007A07  6E                 	db	110	;'n'
  4023  007A08  6B                 	db	107	;'k'
  4024  007A09  66                 	db	102	;'f'
  4025  007A0A  75                 	db	117	;'u'
  4026  007A0B  72                 	db	114	;'r'
  4027  007A0C  74                 	db	116	;'t'
  4028  007A0D  20                 	db	32
  4029  007A0E  52                 	db	82	;'R'
  4030  007A0F  53                 	db	83	;'S'
  4031  007A10  2D                 	db	45
  4032  007A11  32                 	db	50	;'2'
  4033  007A12  33                 	db	51	;'3'
  4034  007A13  32                 	db	50	;'2'
  4035  007A14  0D                 	db	13
  4036  007A15  0A                 	db	10
  4037  007A16  00                 	db	0
  4038  007A17                     STR_26:
  4039  007A17  2B                 	db	43
  4040  007A18  4F                 	db	79	;'O'
  4041  007A19  4B                 	db	75	;'K'
  4042  007A1A  20                 	db	32
  4043  007A1B  2D                 	db	45
  4044  007A1C  20                 	db	32
  4045  007A1D  43                 	db	67	;'C'
  4046  007A1E  6C                 	db	108	;'l'
  4047  007A1F  6F                 	db	111	;'o'
  4048  007A20  73                 	db	115	;'s'
  4049  007A21  65                 	db	101	;'e'
  4050  007A22  64                 	db	100	;'d'
  4051  007A23  20                 	db	32
  4052  007A24  6D                 	db	109	;'m'
  4053  007A25  6F                 	db	111	;'o'
  4054  007A26  64                 	db	100	;'d'
  4055  007A27  65                 	db	101	;'e'
  4056  007A28  0D                 	db	13
  4057  007A29  0A                 	db	10
  4058  007A2A  00                 	db	0
  4059  007A2B                     STR_21:
  4060  007A2B  2B                 	db	43
  4061  007A2C  4F                 	db	79	;'O'
  4062  007A2D  4B                 	db	75	;'K'
  4063  007A2E  20                 	db	32
  4064  007A2F  2D                 	db	45
  4065  007A30  20                 	db	32
  4066  007A31  4E                 	db	78	;'N'
  4067  007A32  6F                 	db	111	;'o'
  4068  007A33  72                 	db	114	;'r'
  4069  007A34  6D                 	db	109	;'m'
  4070  007A35  61                 	db	97	;'a'
  4071  007A36  6C                 	db	108	;'l'
  4072  007A37  20                 	db	32
  4073  007A38  6D                 	db	109	;'m'
  4074  007A39  6F                 	db	111	;'o'
  4075  007A3A  64                 	db	100	;'d'
  4076  007A3B  65                 	db	101	;'e'
  4077  007A3C  0D                 	db	13
  4078  007A3D  0A                 	db	10
  4079  007A3E  00                 	db	0
  4080  007A3F                     STR_22:
  4081  007A3F  2B                 	db	43
  4082  007A40  4F                 	db	79	;'O'
  4083  007A41  4B                 	db	75	;'K'
  4084  007A42  20                 	db	32
  4085  007A43  2D                 	db	45
  4086  007A44  20                 	db	32
  4087  007A45  53                 	db	83	;'S'
  4088  007A46  69                 	db	105	;'i'
  4089  007A47  6C                 	db	108	;'l'
  4090  007A48  65                 	db	101	;'e'
  4091  007A49  6E                 	db	110	;'n'
  4092  007A4A  74                 	db	116	;'t'
  4093  007A4B  20                 	db	32
  4094  007A4C  6D                 	db	109	;'m'
  4095  007A4D  6F                 	db	111	;'o'
  4096  007A4E  64                 	db	100	;'d'
  4097  007A4F  65                 	db	101	;'e'
  4098  007A50  0D                 	db	13
  4099  007A51  0A                 	db	10
  4100  007A52  00                 	db	0
  4101  007A53                     STR_99:
  4102  007A53  49                 	db	73	;'I'
  4103  007A54  6E                 	db	110	;'n'
  4104  007A55  66                 	db	102	;'f'
  4105  007A56  6F                 	db	111	;'o'
  4106  007A57  20                 	db	32
  4107  007A58  66                 	db	102	;'f'
  4108  007A59  6F                 	db	111	;'o'
  4109  007A5A  72                 	db	114	;'r'
  4110  007A5B  20                 	db	32
  4111  007A5C  6E                 	db	110	;'n'
  4112  007A5D  6F                 	db	111	;'o'
  4113  007A5E  64                 	db	100	;'d'
  4114  007A5F  65                 	db	101	;'e'
  4115  007A60  20                 	db	32
  4116  007A61  69                 	db	105	;'i'
  4117  007A62  64                 	db	100	;'d'
  4118  007A63  20                 	db	32
  4119  007A64  3D                 	db	61	;'='
  4120  007A65  20                 	db	32
  4121  007A66  00                 	db	0
  4122  007A67                     STR_283:
  4123  007A67  46                 	db	70	;'F'
  4124  007A68  69                 	db	105	;'i'
  4125  007A69  72                 	db	114	;'r'
  4126  007A6A  6D                 	db	109	;'m'
  4127  007A6B  77                 	db	119	;'w'
  4128  007A6C  61                 	db	97	;'a'
  4129  007A6D  72                 	db	114	;'r'
  4130  007A6E  65                 	db	101	;'e'
  4131  007A6F  20                 	db	32
  4132  007A70  76                 	db	118	;'v'
  4133  007A71  65                 	db	101	;'e'
  4134  007A72  72                 	db	114	;'r'
  4135  007A73  73                 	db	115	;'s'
  4136  007A74  69                 	db	105	;'i'
  4137  007A75  6F                 	db	111	;'o'
  4138  007A76  6E                 	db	110	;'n'
  4139  007A77  20                 	db	32
  4140  007A78  3D                 	db	61	;'='
  4141  007A79  20                 	db	32
  4142  007A7A  00                 	db	0
  4143  007A7B                     STR_23:
  4144  007A7B  2B                 	db	43
  4145  007A7C  4F                 	db	79	;'O'
  4146  007A7D  4B                 	db	75	;'K'
  4147  007A7E  20                 	db	32
  4148  007A7F  2D                 	db	45
  4149  007A80  20                 	db	32
  4150  007A81  53                 	db	83	;'S'
  4151  007A82  6C                 	db	108	;'l'
  4152  007A83  65                 	db	101	;'e'
  4153  007A84  65                 	db	101	;'e'
  4154  007A85  70                 	db	112	;'p'
  4155  007A86  20                 	db	32
  4156  007A87  6D                 	db	109	;'m'
  4157  007A88  6F                 	db	111	;'o'
  4158  007A89  64                 	db	100	;'d'
  4159  007A8A  65                 	db	101	;'e'
  4160  007A8B  0D                 	db	13
  4161  007A8C  0A                 	db	10
  4162  007A8D  00                 	db	0
  4163  007A8E                     STR_27:
  4164  007A8E  2B                 	db	43
  4165  007A8F  4F                 	db	79	;'O'
  4166  007A90  4B                 	db	75	;'K'
  4167  007A91  20                 	db	32
  4168  007A92  2D                 	db	45
  4169  007A93  20                 	db	32
  4170  007A94  42                 	db	66	;'B'
  4171  007A95  69                 	db	105	;'i'
  4172  007A96  74                 	db	116	;'t'
  4173  007A97  73                 	db	115	;'s'
  4174  007A98  20                 	db	32
  4175  007A99  6D                 	db	109	;'m'
  4176  007A9A  6F                 	db	111	;'o'
  4177  007A9B  64                 	db	100	;'d'
  4178  007A9C  65                 	db	101	;'e'
  4179  007A9D  0D                 	db	13
  4180  007A9E  0A                 	db	10
  4181  007A9F  00                 	db	0
  4182  007AA0                     STR_40:
  4183  007AA0  2B                 	db	43
  4184  007AA1  4F                 	db	79	;'O'
  4185  007AA2  4B                 	db	75	;'K'
  4186  007AA3  20                 	db	32
  4187  007AA4  2D                 	db	45
  4188  007AA5  20                 	db	32
  4189  007AA6  6E                 	db	110	;'n'
  4190  007AA7  6F                 	db	111	;'o'
  4191  007AA8  20                 	db	32
  4192  007AA9  65                 	db	101	;'e'
  4193  007AAA  76                 	db	118	;'v'
  4194  007AAB  65                 	db	101	;'e'
  4195  007AAC  6E                 	db	110	;'n'
  4196  007AAD  74                 	db	116	;'t'
  4197  007AAE  73                 	db	115	;'s'
  4198  007AAF  0D                 	db	13
  4199  007AB0  0A                 	db	10
  4200  007AB1  00                 	db	0
  4201  007AB2                     STR_191:
  4202  007AB2  53                 	db	83	;'S'
  4203  007AB3  65                 	db	101	;'e'
  4204  007AB4  6E                 	db	110	;'n'
  4205  007AB5  74                 	db	116	;'t'
  4206  007AB6  20                 	db	32
  4207  007AB7  43                 	db	67	;'C'
  4208  007AB8  41                 	db	65	;'A'
  4209  007AB9  4E                 	db	78	;'N'
  4210  007ABA  20                 	db	32
  4211  007ABB  66                 	db	102	;'f'
  4212  007ABC  72                 	db	114	;'r'
  4213  007ABD  61                 	db	97	;'a'
  4214  007ABE  6D                 	db	109	;'m'
  4215  007ABF  65                 	db	101	;'e'
  4216  007AC0  73                 	db	115	;'s'
  4217  007AC1  3A                 	db	58	;':'
  4218  007AC2  20                 	db	32
  4219  007AC3  00                 	db	0
  4220  007AC4                     STR_296:
  4221  007AC4  30                 	db	48	;'0'
  4222  007AC5  31                 	db	49	;'1'
  4223  007AC6  32                 	db	50	;'2'
  4224  007AC7  33                 	db	51	;'3'
  4225  007AC8  34                 	db	52	;'4'
  4226  007AC9  35                 	db	53	;'5'
  4227  007ACA  36                 	db	54	;'6'
  4228  007ACB  37                 	db	55	;'7'
  4229  007ACC  38                 	db	56	;'8'
  4230  007ACD  39                 	db	57	;'9'
  4231  007ACE  41                 	db	65	;'A'
  4232  007ACF  42                 	db	66	;'B'
  4233  007AD0  43                 	db	67	;'C'
  4234  007AD1  44                 	db	68	;'D'
  4235  007AD2  45                 	db	69	;'E'
  4236  007AD3  46                 	db	70	;'F'
  4237  007AD4  00                 	db	0
  4238  007AD5                     STR_297:
  4239  007AD5  30                 	db	48	;'0'
  4240  007AD6  31                 	db	49	;'1'
  4241  007AD7  32                 	db	50	;'2'
  4242  007AD8  33                 	db	51	;'3'
  4243  007AD9  34                 	db	52	;'4'
  4244  007ADA  35                 	db	53	;'5'
  4245  007ADB  36                 	db	54	;'6'
  4246  007ADC  37                 	db	55	;'7'
  4247  007ADD  38                 	db	56	;'8'
  4248  007ADE  39                 	db	57	;'9'
  4249  007ADF  61                 	db	97	;'a'
  4250  007AE0  62                 	db	98	;'b'
  4251  007AE1  63                 	db	99	;'c'
  4252  007AE2  64                 	db	100	;'d'
  4253  007AE3  65                 	db	101	;'e'
  4254  007AE4  66                 	db	102	;'f'
  4255  007AE5  00                 	db	0
  4256  007AE6                     STR_275:
  4257  007AE6  20                 	db	32
  4258  007AE7  6E                 	db	110	;'n'
  4259  007AE8  6F                 	db	111	;'o'
  4260  007AE9  64                 	db	100	;'d'
  4261  007AEA  65                 	db	101	;'e'
  4262  007AEB  28                 	db	40
  4263  007AEC  73                 	db	115	;'s'
  4264  007AED  29                 	db	41
  4265  007AEE  20                 	db	32
  4266  007AEF  66                 	db	102	;'f'
  4267  007AF0  6F                 	db	111	;'o'
  4268  007AF1  75                 	db	117	;'u'
  4269  007AF2  6E                 	db	110	;'n'
  4270  007AF3  64                 	db	100	;'d'
  4271  007AF4  0D                 	db	13
  4272  007AF5  0A                 	db	10
  4273  007AF6  00                 	db	0
  4274  007AF7                     STR_195:
  4275  007AF7  53                 	db	83	;'S'
  4276  007AF8  65                 	db	101	;'e'
  4277  007AF9  6E                 	db	110	;'n'
  4278  007AFA  74                 	db	116	;'t'
  4279  007AFB  20                 	db	32
  4280  007AFC  43                 	db	67	;'C'
  4281  007AFD  41                 	db	65	;'A'
  4282  007AFE  4E                 	db	78	;'N'
  4283  007AFF  20                 	db	32
  4284  007B00  62                 	db	98	;'b'
  4285  007B01  79                 	db	121	;'y'
  4286  007B02  74                 	db	116	;'t'
  4287  007B03  65                 	db	101	;'e'
  4288  007B04  73                 	db	115	;'s'
  4289  007B05  3A                 	db	58	;':'
  4290  007B06  20                 	db	32
  4291  007B07  00                 	db	0
  4292  007B08                     STR_70:
  4293  007B08  2D                 	db	45
  4294  007B09  45                 	db	69	;'E'
  4295  007B0A  52                 	db	82	;'R'
  4296  007B0B  52                 	db	82	;'R'
  4297  007B0C  4F                 	db	79	;'O'
  4298  007B0D  52                 	db	82	;'R'
  4299  007B0E  20                 	db	32
  4300  007B0F  2D                 	db	45
  4301  007B10  20                 	db	32
  4302  007B11  6E                 	db	110	;'n'
  4303  007B12  6F                 	db	111	;'o'
  4304  007B13  64                 	db	100	;'d'
  4305  007B14  65                 	db	101	;'e'
  4306  007B15  69                 	db	105	;'i'
  4307  007B16  64                 	db	100	;'d'
  4308  007B17  3D                 	db	61	;'='
  4309  007B18  00                 	db	0
  4310  007B19                     STR_59:
  4311  007B19  56                 	db	86	;'V'
  4312  007B1A  61                 	db	97	;'a'
  4313  007B1B  6C                 	db	108	;'l'
  4314  007B1C  75                 	db	117	;'u'
  4315  007B1D  65                 	db	101	;'e'
  4316  007B1E  20                 	db	32
  4317  007B1F  66                 	db	102	;'f'
  4318  007B20  6F                 	db	111	;'o'
  4319  007B21  72                 	db	114	;'r'
  4320  007B22  20                 	db	32
  4321  007B23  72                 	db	114	;'r'
  4322  007B24  65                 	db	101	;'e'
  4323  007B25  67                 	db	103	;'g'
  4324  007B26  20                 	db	32
  4325  007B27  00                 	db	0
  4326  007B28                     STR_281:
  4327  007B28  4D                 	db	77	;'M'
  4328  007B29  44                 	db	68	;'D'
  4329  007B2A  46                 	db	70	;'F'
  4330  007B2B  20                 	db	32
  4331  007B2C  3D                 	db	61	;'='
  4332  007B2D  20                 	db	32
  4333  007B2E  68                 	db	104	;'h'
  4334  007B2F  74                 	db	116	;'t'
  4335  007B30  74                 	db	116	;'t'
  4336  007B31  70                 	db	112	;'p'
  4337  007B32  3A                 	db	58	;':'
  4338  007B33  2F                 	db	47
  4339  007B34  2F                 	db	47
  4340  007B35  00                 	db	0
  4341  007B36                     STR_56:
  4342  007B36  2B                 	db	43
  4343  007B37  4F                 	db	79	;'O'
  4344  007B38  4B                 	db	75	;'K'
  4345  007B39  20                 	db	32
  4346  007B3A  2D                 	db	45
  4347  007B3B  20                 	db	32
  4348  007B3C  6E                 	db	110	;'n'
  4349  007B3D  6F                 	db	111	;'o'
  4350  007B3E  64                 	db	100	;'d'
  4351  007B3F  65                 	db	101	;'e'
  4352  007B40  69                 	db	105	;'i'
  4353  007B41  64                 	db	100	;'d'
  4354  007B42  3D                 	db	61	;'='
  4355  007B43  00                 	db	0
  4356  007B44                     STR_291:
  4357  007B44  56                 	db	86	;'V'
  4358  007B45  53                 	db	83	;'S'
  4359  007B46  43                 	db	67	;'C'
  4360  007B47  50                 	db	80	;'P'
  4361  007B48  20                 	db	32
  4362  007B49  44                 	db	68	;'D'
  4363  007B4A  72                 	db	114	;'r'
  4364  007B4B  69                 	db	105	;'i'
  4365  007B4C  76                 	db	118	;'v'
  4366  007B4D  65                 	db	101	;'e'
  4367  007B4E  72                 	db	114	;'r'
  4368  007B4F  00                 	db	0
  4369  007B50                     STR_136:
  4370  007B50  52                 	db	82	;'R'
  4371  007B51  57                 	db	87	;'W'
  4372  007B52  54                 	db	84	;'T'
  4373  007B53  49                 	db	73	;'I'
  4374  007B54  4D                 	db	77	;'M'
  4375  007B55  45                 	db	69	;'E'
  4376  007B56  4F                 	db	79	;'O'
  4377  007B57  55                 	db	85	;'U'
  4378  007B58  54                 	db	84	;'T'
  4379  007B59  20                 	db	32
  4380  007B5A  00                 	db	0
  4381  007B5B                     STR_189:
  4382  007B5B  2C                 	db	44
  4383  007B5C  44                 	db	68	;'D'
  4384  007B5D  61                 	db	97	;'a'
  4385  007B5E  74                 	db	116	;'t'
  4386  007B5F  61                 	db	97	;'a'
  4387  007B60  3D                 	db	61	;'='
  4388  007B61  6E                 	db	110	;'n'
  4389  007B62  6F                 	db	111	;'o'
  4390  007B63  6E                 	db	110	;'n'
  4391  007B64  65                 	db	101	;'e'
  4392  007B65  00                 	db	0
  4393  007B66                     STR_57:
  4394  007B66  30                 	db	48	;'0'
  4395  007B67  78                 	db	120	;'x'
  4396  007B68  25                 	db	37
  4397  007B69  30                 	db	48	;'0'
  4398  007B6A  32                 	db	50	;'2'
  4399  007B6B  58                 	db	88	;'X'
  4400  007B6C  20                 	db	32
  4401  007B6D  2D                 	db	45
  4402  007B6E  20                 	db	32
  4403  007B6F  00                 	db	0
  4404  007B70                     STR_287:
  4405  007B70  56                 	db	86	;'V'
  4406  007B71  65                 	db	101	;'e'
  4407  007B72  72                 	db	114	;'r'
  4408  007B73  73                 	db	115	;'s'
  4409  007B74  69                 	db	105	;'i'
  4410  007B75  6F                 	db	111	;'o'
  4411  007B76  6E                 	db	110	;'n'
  4412  007B77  3A                 	db	58	;':'
  4413  007B78  20                 	db	32
  4414  007B79  00                 	db	0
  4415  007B7A                     STR_293:
  4416  007B7A  56                 	db	86	;'V'
  4417  007B7B  53                 	db	83	;'S'
  4418  007B7C  43                 	db	67	;'C'
  4419  007B7D  50                 	db	80	;'P'
  4420  007B7E  20                 	db	32
  4421  007B7F  4E                 	db	78	;'N'
  4422  007B80  6F                 	db	111	;'o'
  4423  007B81  64                 	db	100	;'d'
  4424  007B82  65                 	db	101	;'e'
  4425  007B83  00                 	db	0
  4426  007B84                     STR_292:
  4427  007B84  53                 	db	83	;'S'
  4428  007B85  4C                 	db	76	;'L'
  4429  007B86  20                 	db	32
  4430  007B87  44                 	db	68	;'D'
  4431  007B88  72                 	db	114	;'r'
  4432  007B89  69                 	db	105	;'i'
  4433  007B8A  76                 	db	118	;'v'
  4434  007B8B  65                 	db	101	;'e'
  4435  007B8C  72                 	db	114	;'r'
  4436  007B8D  00                 	db	0
  4437  007B8E                     STR_138:
  4438  007B8E  53                 	db	83	;'S'
  4439  007B8F  54                 	db	84	;'T'
  4440  007B90  41                 	db	65	;'A'
  4441  007B91  52                 	db	82	;'R'
  4442  007B92  54                 	db	84	;'T'
  4443  007B93  49                 	db	73	;'I'
  4444  007B94  46                 	db	70	;'F'
  4445  007B95  20                 	db	32
  4446  007B96  00                 	db	0
  4447  007B97                     STR_179:
  4448  007B97  2C                 	db	44
  4449  007B98  6E                 	db	110	;'n'
  4450  007B99  6F                 	db	111	;'o'
  4451  007B9A  64                 	db	100	;'d'
  4452  007B9B  65                 	db	101	;'e'
  4453  007B9C  69                 	db	105	;'i'
  4454  007B9D  64                 	db	100	;'d'
  4455  007B9E  3D                 	db	61	;'='
  4456  007B9F  00                 	db	0
  4457  007BA0                     STR_14:
  4458  007BA0  4C                 	db	76	;'L'
  4459  007BA1  4F                 	db	79	;'O'
  4460  007BA2  4F                 	db	79	;'O'
  4461  007BA3  50                 	db	80	;'P'
  4462  007BA4  42                 	db	66	;'B'
  4463  007BA5  41                 	db	65	;'A'
  4464  007BA6  43                 	db	67	;'C'
  4465  007BA7  4B                 	db	75	;'K'
  4466  007BA8  00                 	db	0
  4467  007BA9                     STR_159:
  4468  007BA9  44                 	db	68	;'D'
  4469  007BAA  45                 	db	69	;'E'
  4470  007BAB  46                 	db	70	;'F'
  4471  007BAC  41                 	db	65	;'A'
  4472  007BAD  55                 	db	85	;'U'
  4473  007BAE  4C                 	db	76	;'L'
  4474  007BAF  54                 	db	84	;'T'
  4475  007BB0  53                 	db	83	;'S'
  4476  007BB1  00                 	db	0
  4477  007BB2                     STR_165:
  4478  007BB2  56                 	db	86	;'V'
  4479  007BB3  31                 	db	49	;'1'
  4480  007BB4  30                 	db	48	;'0'
  4481  007BB5  31                 	db	49	;'1'
  4482  007BB6  31                 	db	49	;'1'
  4483  007BB7  0D                 	db	13
  4484  007BB8  0A                 	db	10
  4485  007BB9  00                 	db	0
  4486  007BBA                     STR_166:
  4487  007BBA  4E                 	db	78	;'N'
  4488  007BBB  31                 	db	49	;'1'
  4489  007BBC  39                 	db	57	;'9'
  4490  007BBD  37                 	db	55	;'7'
  4491  007BBE  37                 	db	55	;'7'
  4492  007BBF  0D                 	db	13
  4493  007BC0  0A                 	db	10
  4494  007BC1  00                 	db	0
  4495  007BC2                     STR_91:
  4496  007BC2  30                 	db	48	;'0'
  4497  007BC3  78                 	db	120	;'x'
  4498  007BC4  25                 	db	37
  4499  007BC5  30                 	db	48	;'0'
  4500  007BC6  32                 	db	50	;'2'
  4501  007BC7  58                 	db	88	;'X'
  4502  007BC8  0A                 	db	10
  4503  007BC9  00                 	db	0
  4504  007BCA                     STR_276:
  4505  007BCA  47                 	db	71	;'G'
  4506  007BCB  55                 	db	85	;'U'
  4507  007BCC  49                 	db	73	;'I'
  4508  007BCD  44                 	db	68	;'D'
  4509  007BCE  20                 	db	32
  4510  007BCF  3D                 	db	61	;'='
  4511  007BD0  20                 	db	32
  4512  007BD1  00                 	db	0
  4513  007BD2                     STR_151:
  4514  007BD2  46                 	db	70	;'F'
  4515  007BD3  49                 	db	73	;'I'
  4516  007BD4  4C                 	db	76	;'L'
  4517  007BD5  54                 	db	84	;'T'
  4518  007BD6  45                 	db	69	;'E'
  4519  007BD7  52                 	db	82	;'R'
  4520  007BD8  20                 	db	32
  4521  007BD9  00                 	db	0
  4522  007BDA                     STR_173:
  4523  007BDA  2C                 	db	44
  4524  007BDB  63                 	db	99	;'c'
  4525  007BDC  6C                 	db	108	;'l'
  4526  007BDD  61                 	db	97	;'a'
  4527  007BDE  73                 	db	115	;'s'
  4528  007BDF  73                 	db	115	;'s'
  4529  007BE0  3D                 	db	61	;'='
  4530  007BE1  00                 	db	0
  4531  007BE2                     STR_145:
  4532  007BE2  56                 	db	86	;'V'
  4533  007BE3  45                 	db	69	;'E'
  4534  007BE4  52                 	db	82	;'R'
  4535  007BE5  42                 	db	66	;'B'
  4536  007BE6  4F                 	db	79	;'O'
  4537  007BE7  53                 	db	83	;'S'
  4538  007BE8  45                 	db	69	;'E'
  4539  007BE9  00                 	db	0
  4540  007BEA                     STR_134:
  4541  007BEA  44                 	db	68	;'D'
  4542  007BEB  45                 	db	69	;'E'
  4543  007BEC  43                 	db	67	;'C'
  4544  007BED  49                 	db	73	;'I'
  4545  007BEE  4D                 	db	77	;'M'
  4546  007BEF  41                 	db	65	;'A'
  4547  007BF0  4C                 	db	76	;'L'
  4548  007BF1  00                 	db	0
  4549  007BF2                     STR_18:
  4550  007BF2  56                 	db	86	;'V'
  4551  007BF3  45                 	db	69	;'E'
  4552  007BF4  52                 	db	82	;'R'
  4553  007BF5  53                 	db	83	;'S'
  4554  007BF6  49                 	db	73	;'I'
  4555  007BF7  4F                 	db	79	;'O'
  4556  007BF8  4E                 	db	78	;'N'
  4557  007BF9  00                 	db	0
  4558  007BFA                     STR_208:
  4559  007BFA  30                 	db	48	;'0'
  4560  007BFB  78                 	db	120	;'x'
  4561  007BFC  25                 	db	37
  4562  007BFD  30                 	db	48	;'0'
  4563  007BFE  38                 	db	56	;'8'
  4564  007BFF  6C                 	db	108	;'l'
  4565  007C00  58                 	db	88	;'X'
  4566  007C01  00                 	db	0
  4567  007C02                     STR_290:
  4568  007C02  56                 	db	86	;'V'
  4569  007C03  65                 	db	101	;'e'
  4570  007C04  72                 	db	114	;'r'
  4571  007C05  62                 	db	98	;'b'
  4572  007C06  6F                 	db	111	;'o'
  4573  007C07  73                 	db	115	;'s'
  4574  007C08  65                 	db	101	;'e'
  4575  007C09  00                 	db	0
  4576  007C0A                     STR_289:
  4577  007C0A  4D                 	db	77	;'M'
  4578  007C0B  6F                 	db	111	;'o'
  4579  007C0C  64                 	db	100	;'d'
  4580  007C0D  65                 	db	101	;'e'
  4581  007C0E  3A                 	db	58	;':'
  4582  007C0F  20                 	db	32
  4583  007C10  00                 	db	0
  4584  007C11                     STR_185:
  4585  007C11  2C                 	db	44
  4586  007C12  44                 	db	68	;'D'
  4587  007C13  61                 	db	97	;'a'
  4588  007C14  74                 	db	116	;'t'
  4589  007C15  61                 	db	97	;'a'
  4590  007C16  3D                 	db	61	;'='
  4591  007C17  00                 	db	0
  4592  007C18                     STR_176:
  4593  007C18  2C                 	db	44
  4594  007C19  74                 	db	116	;'t'
  4595  007C1A  79                 	db	121	;'y'
  4596  007C1B  70                 	db	112	;'p'
  4597  007C1C  65                 	db	101	;'e'
  4598  007C1D  3D                 	db	61	;'='
  4599  007C1E  00                 	db	0
  4600  007C1F                     STR_182:
  4601  007C1F  2C                 	db	44
  4602  007C20  73                 	db	115	;'s'
  4603  007C21  69                 	db	105	;'i'
  4604  007C22  7A                 	db	122	;'z'
  4605  007C23  65                 	db	101	;'e'
  4606  007C24  3D                 	db	61	;'='
  4607  007C25  00                 	db	0
  4608  007C26                     STR_170:
  4609  007C26  3C                 	db	60	;'<'
  4610  007C27  50                 	db	80	;'P'
  4611  007C28  72                 	db	114	;'r'
  4612  007C29  69                 	db	105	;'i'
  4613  007C2A  6F                 	db	111	;'o'
  4614  007C2B  3D                 	db	61	;'='
  4615  007C2C  00                 	db	0
  4616  007C2D                     STR_20:
  4617  007C2D  49                 	db	73	;'I'
  4618  007C2E  46                 	db	70	;'F'
  4619  007C2F  4D                 	db	77	;'M'
  4620  007C30  4F                 	db	79	;'O'
  4621  007C31  44                 	db	68	;'D'
  4622  007C32  45                 	db	69	;'E'
  4623  007C33  00                 	db	0
  4624  007C34                     STR_16:
  4625  007C34  4C                 	db	76	;'L'
  4626  007C35  49                 	db	73	;'I'
  4627  007C36  53                 	db	83	;'S'
  4628  007C37  54                 	db	84	;'T'
  4629  007C38  45                 	db	69	;'E'
  4630  007C39  4E                 	db	78	;'N'
  4631  007C3A  00                 	db	0
  4632  007C3B                     STR_105:
  4633  007C3B  46                 	db	70	;'F'
  4634  007C3C  49                 	db	73	;'I'
  4635  007C3D  4C                 	db	76	;'L'
  4636  007C3E  54                 	db	84	;'T'
  4637  007C3F  45                 	db	69	;'E'
  4638  007C40  52                 	db	82	;'R'
  4639  007C41  00                 	db	0
  4640  007C42                     STR_10:
  4641  007C42  53                 	db	83	;'S'
  4642  007C43  49                 	db	73	;'I'
  4643  007C44  4C                 	db	76	;'L'
  4644  007C45  45                 	db	69	;'E'
  4645  007C46  4E                 	db	78	;'N'
  4646  007C47  54                 	db	84	;'T'
  4647  007C48  00                 	db	0
  4648  007C49                     STR_60:
  4649  007C49  30                 	db	48	;'0'
  4650  007C4A  78                 	db	120	;'x'
  4651  007C4B  25                 	db	37
  4652  007C4C  30                 	db	48	;'0'
  4653  007C4D  32                 	db	50	;'2'
  4654  007C4E  58                 	db	88	;'X'
  4655  007C4F  00                 	db	0
  4656  007C50                     STR_174:
  4657  007C50  30                 	db	48	;'0'
  4658  007C51  78                 	db	120	;'x'
  4659  007C52  25                 	db	37
  4660  007C53  30                 	db	48	;'0'
  4661  007C54  34                 	db	52	;'4'
  4662  007C55  58                 	db	88	;'X'
  4663  007C56  00                 	db	0
  4664  007C57                     STR_192:
  4665  007C57  30                 	db	48	;'0'
  4666  007C58  78                 	db	120	;'x'
  4667  007C59  25                 	db	37
  4668  007C5A  30                 	db	48	;'0'
  4669  007C5B  38                 	db	56	;'8'
  4670  007C5C  58                 	db	88	;'X'
  4671  007C5D  00                 	db	0
  4672  007C5E                     STR_167:
  4673  007C5E  46                 	db	70	;'F'
  4674  007C5F  30                 	db	48	;'0'
  4675  007C60  30                 	db	48	;'0'
  4676  007C61  0D                 	db	13
  4677  007C62  0A                 	db	10
  4678  007C63  00                 	db	0
  4679  007C64                     STR_9:
  4680  007C64  2B                 	db	43
  4681  007C65  4F                 	db	79	;'O'
  4682  007C66  4B                 	db	75	;'K'
  4683  007C67  0D                 	db	13
  4684  007C68  0A                 	db	10
  4685  007C69  00                 	db	0
  4686  007C6A                     STR_58:
  4687  007C6A  25                 	db	37
  4688  007C6B  64                 	db	100	;'d'
  4689  007C6C  20                 	db	32
  4690  007C6D  2D                 	db	45
  4691  007C6E  20                 	db	32
  4692  007C6F  00                 	db	0
  4693  007C70                     STR_144:
  4694  007C70  4D                 	db	77	;'M'
  4695  007C71  4F                 	db	79	;'O'
  4696  007C72  44                 	db	68	;'D'
  4697  007C73  45                 	db	69	;'E'
  4698  007C74  20                 	db	32
  4699  007C75  00                 	db	0
  4700  007C76                     STR_152:
  4701  007C76  4D                 	db	77	;'M'
  4702  007C77  41                 	db	65	;'A'
  4703  007C78  53                 	db	83	;'S'
  4704  007C79  4B                 	db	75	;'K'
  4705  007C7A  20                 	db	32
  4706  007C7B  00                 	db	0
  4707  007C7C                     STR_153:
  4708  007C7C  45                 	db	69	;'E'
  4709  007C7D  43                 	db	67	;'C'
  4710  007C7E  48                 	db	72	;'H'
  4711  007C7F  4F                 	db	79	;'O'
  4712  007C80  20                 	db	32
  4713  007C81  00                 	db	0
  4714  007C82                     STR_12:
  4715  007C82  43                 	db	67	;'C'
  4716  007C83  4C                 	db	76	;'L'
  4717  007C84  4F                 	db	79	;'O'
  4718  007C85  53                 	db	83	;'S'
  4719  007C86  45                 	db	69	;'E'
  4720  007C87  00                 	db	0
  4721  007C88                     STR_149:
  4722  007C88  53                 	db	83	;'S'
  4723  007C89  4C                 	db	76	;'L'
  4724  007C8A  43                 	db	67	;'C'
  4725  007C8B  41                 	db	65	;'A'
  4726  007C8C  4E                 	db	78	;'N'
  4727  007C8D  00                 	db	0
  4728  007C8E                     STR_131:
  4729  007C8E  53                 	db	83	;'S'
  4730  007C8F  45                 	db	69	;'E'
  4731  007C90  54                 	db	84	;'T'
  4732  007C91  20                 	db	32
  4733  007C92  00                 	db	0
  4734  007C93                     STR_47:
  4735  007C93  46                 	db	70	;'F'
  4736  007C94  49                 	db	73	;'I'
  4737  007C95  4E                 	db	78	;'N'
  4738  007C96  44                 	db	68	;'D'
  4739  007C97  00                 	db	0
  4740  007C98                     STR_49:
  4741  007C98  52                 	db	82	;'R'
  4742  007C99  52                 	db	82	;'R'
  4743  007C9A  45                 	db	69	;'E'
  4744  007C9B  47                 	db	71	;'G'
  4745  007C9C  00                 	db	0
  4746  007C9D                     STR_81:
  4747  007C9D  57                 	db	87	;'W'
  4748  007C9E  52                 	db	82	;'R'
  4749  007C9F  45                 	db	69	;'E'
  4750  007CA0  47                 	db	71	;'G'
  4751  007CA1  00                 	db	0
  4752  007CA2                     STR_118:
  4753  007CA2  4D                 	db	77	;'M'
  4754  007CA3  41                 	db	65	;'A'
  4755  007CA4  53                 	db	83	;'S'
  4756  007CA5  4B                 	db	75	;'K'
  4757  007CA6  00                 	db	0
  4758  007CA7                     STR_8:
  4759  007CA7  4F                 	db	79	;'O'
  4760  007CA8  50                 	db	80	;'P'
  4761  007CA9  45                 	db	69	;'E'
  4762  007CAA  4E                 	db	78	;'N'
  4763  007CAB  00                 	db	0
  4764  007CAC                     STR_97:
  4765  007CAC  49                 	db	73	;'I'
  4766  007CAD  4E                 	db	78	;'N'
  4767  007CAE  46                 	db	70	;'F'
  4768  007CAF  4F                 	db	79	;'O'
  4769  007CB0  00                 	db	0
  4770  007CB1                     STR_147:
  4771  007CB1  56                 	db	86	;'V'
  4772  007CB2  53                 	db	83	;'S'
  4773  007CB3  43                 	db	67	;'C'
  4774  007CB4  50                 	db	80	;'P'
  4775  007CB5  00                 	db	0
  4776  007CB6                     STR_45:
  4777  007CB6  48                 	db	72	;'H'
  4778  007CB7  45                 	db	69	;'E'
  4779  007CB8  4C                 	db	76	;'L'
  4780  007CB9  50                 	db	80	;'P'
  4781  007CBA  00                 	db	0
  4782  007CBB                     STR_41:
  4783  007CBB  53                 	db	83	;'S'
  4784  007CBC  54                 	db	84	;'T'
  4785  007CBD  41                 	db	65	;'A'
  4786  007CBE  54                 	db	84	;'T'
  4787  007CBF  00                 	db	0
  4788  007CC0                     STR_6:
  4789  007CC0  42                 	db	66	;'B'
  4790  007CC1  4F                 	db	79	;'O'
  4791  007CC2  4F                 	db	79	;'O'
  4792  007CC3  54                 	db	84	;'T'
  4793  007CC4  00                 	db	0
  4794  007CC5                     STR_68:
  4795  007CC5  27                 	db	39
  4796  007CC6  20                 	db	32
  4797  007CC7  09                 	db	9
  4798  007CC8  00                 	db	0
  4799  007CC9                     STR_190:
  4800  007CC9  3E                 	db	62	;'>'
  4801  007CCA  0D                 	db	13
  4802  007CCB  0A                 	db	10
  4803  007CCC  00                 	db	0
  4804  007CCD                     STR_92:
  4805  007CCD  25                 	db	37
  4806  007CCE  64                 	db	100	;'d'
  4807  007CCF  0A                 	db	10
  4808  007CD0  00                 	db	0
  4809  007CD1                     STR_156:
  4810  007CD1  4F                 	db	79	;'O'
  4811  007CD2  46                 	db	70	;'F'
  4812  007CD3  46                 	db	70	;'F'
  4813  007CD4  00                 	db	0
  4814  007CD5                     STR_43:
  4815  007CD5  45                 	db	69	;'E'
  4816  007CD6  52                 	db	82	;'R'
  4817  007CD7  52                 	db	82	;'R'
  4818  007CD8  00                 	db	0
  4819  007CD9                     STR_132:
  4820  007CD9  48                 	db	72	;'H'
  4821  007CDA  45                 	db	69	;'E'
  4822  007CDB  58                 	db	88	;'X'
  4823  007CDC  00                 	db	0
  4824  007CDD                     STR_193:
  4825  007CDD  25                 	db	37
  4826  007CDE  6C                 	db	108	;'l'
  4827  007CDF  75                 	db	117	;'u'
  4828  007CE0  00                 	db	0
  4829  007CE1                     STR_67:
  4830  007CE1  09                 	db	9
  4831  007CE2  27                 	db	39
  4832  007CE3  00                 	db	0
  4833  007CE4                     STR_278:
  4834  007CE4  2D                 	db	45
  4835  007CE5  2D                 	db	45
  4836  007CE6  00                 	db	0
  4837  007CE7                     STR_38:
  4838  007CE7  52                 	db	82	;'R'
  4839  007CE8  58                 	db	88	;'X'
  4840  007CE9  00                 	db	0
  4841  007CEA                     STR_29:
  4842  007CEA  54                 	db	84	;'T'
  4843  007CEB  58                 	db	88	;'X'
  4844  007CEC  00                 	db	0
  4845  007CED                     STR_61:
  4846  007CED  25                 	db	37
  4847  007CEE  64                 	db	100	;'d'
  4848  007CEF  00                 	db	0
  4849  007CF0                     STR_169:
  4850  007CF0  07                 	db	7
  4851  007CF1  00                 	db	0
  4852  007CF2                     STR_168:
  4853  007CF2  0D                 	db	13
  4854  007CF3  00                 	db	0
  4855  007CF4                     STR_30:
  4856  007CF4  2C                 	db	44
  4857  007CF5  00                 	db	0
  4858  007CF6                     STR_285:
  4859  007CF6  2E                 	db	46
  4860  007CF7  00                 	db	0
  4861  007CF8                     STR_277:
  4862  007CF8  30                 	db	48	;'0'
  4863  007CF9  00                 	db	0
  4864  007CFA                     STR_279:
  4865  007CFA  3A                 	db	58	;':'
  4866  007CFB  00                 	db	0
  4867  007CFC                     STR_160:
  4868  007CFC  3F                 	db	63	;'?'
  4869  007CFD  00                 	db	0
  4870  007CFE                     __end_of__stringdata:
  4871                           	opt stack 0
  4872                           
  4873                           ; #config settings
  4874  007CFE  00                 	db	0	; dummy byte at the end
  4875  0000                     tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           indf0	equ	0xFEF
  4883                           fsr0h	equ	0xFEA
  4884                           fsr0l	equ	0xFE9
  4885                           wreg	equ	0xFE8
  4886                           indf1	equ	0xFE7
  4887                           postinc1	equ	0xFE6
  4888                           postdec1	equ	0xFE5
  4889                           fsr1h	equ	0xFE2
  4890                           fsr1l	equ	0xFE1
  4891                           indf2	equ	0xFDF
  4892                           postinc2	equ	0xFDE
  4893                           postdec2	equ	0xFDD
  4894                           plusw2	equ	0xFDB
  4895                           fsr2h	equ	0xFDA
  4896                           fsr2l	equ	0xFD9
  4897                           status	equ	0xFD8
  4898                           
  4899                           	psect	nvBANK1
  4900  0001F1                     __pnvBANK1:
  4901                           	opt stack 0
  4902  0001F1                     _caps:
  4903                           	opt stack 0
  4904  0001F1                     	ds	2
  4905  0001F3                     ___DCDelay:
  4906                           	opt stack 0
  4907  0001F3                     	ds	1
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           prodh	equ	0xFF4
  4913                           prodl	equ	0xFF3
  4914                           intcon	equ	0xFF2
  4915                           indf0	equ	0xFEF
  4916                           fsr0h	equ	0xFEA
  4917                           fsr0l	equ	0xFE9
  4918                           wreg	equ	0xFE8
  4919                           indf1	equ	0xFE7
  4920                           postinc1	equ	0xFE6
  4921                           postdec1	equ	0xFE5
  4922                           fsr1h	equ	0xFE2
  4923                           fsr1l	equ	0xFE1
  4924                           indf2	equ	0xFDF
  4925                           postinc2	equ	0xFDE
  4926                           postdec2	equ	0xFDD
  4927                           plusw2	equ	0xFDB
  4928                           fsr2h	equ	0xFDA
  4929                           fsr2l	equ	0xFD9
  4930                           status	equ	0xFD8
  4931                           
  4932                           	psect	cinit
  4933  00147C                     __pcinit:
  4934                           	opt stack 0
  4935  00147C                     start_initialization:
  4936                           	opt stack 0
  4937  00147C                     __initialization:
  4938                           	opt stack 0
  4939                           
  4940                           ; Clear objects allocated to BIGRAM (494 bytes)
  4941  00147C  EE04  F000         	lfsr	0,__pbssBIGRAM
  4942  001480  EE11 F0EE          	lfsr	1,494
  4943  001484                     clear_0:
  4944  001484  6AEE               	clrf	postinc0,c
  4945  001486  50E5               	movf	postdec1,w,c
  4946  001488  50E1               	movf	fsr1l,w,c
  4947  00148A  E1FC               	bnz	clear_0
  4948  00148C  50E2               	movf	fsr1h,w,c
  4949  00148E  E1FA               	bnz	clear_0
  4950                           
  4951                           ; Clear objects allocated to BANK3 (256 bytes)
  4952  001490  EE03  F000         	lfsr	0,__pbssBANK3
  4953  001494  EE11 F000          	lfsr	1,256
  4954  001498                     clear_1:
  4955  001498  6AEE               	clrf	postinc0,c
  4956  00149A  50E5               	movf	postdec1,w,c
  4957  00149C  50E1               	movf	fsr1l,w,c
  4958  00149E  E1FC               	bnz	clear_1
  4959  0014A0  50E2               	movf	fsr1h,w,c
  4960  0014A2  E1FA               	bnz	clear_1
  4961                           
  4962                           ; Clear objects allocated to BANK2 (128 bytes)
  4963  0014A4  EE02  F000         	lfsr	0,__pbssBANK2
  4964  0014A8  0E80               	movlw	128
  4965  0014AA                     clear_2:
  4966  0014AA  6AEE               	clrf	postinc0,c
  4967  0014AC  06E8               	decf	wreg,f,c
  4968  0014AE  E1FD               	bnz	clear_2
  4969                           
  4970                           ; Clear objects allocated to BANK1 (241 bytes)
  4971  0014B0  EE01  F000         	lfsr	0,__pbssBANK1
  4972  0014B4  0EF1               	movlw	241
  4973  0014B6                     clear_3:
  4974  0014B6  6AEE               	clrf	postinc0,c
  4975  0014B8  06E8               	decf	wreg,f,c
  4976  0014BA  E1FD               	bnz	clear_3
  4977                           
  4978                           ; Clear objects allocated to COMRAM (30 bytes)
  4979  0014BC  EE00  F022         	lfsr	0,__pbssCOMRAM
  4980  0014C0  0E1E               	movlw	30
  4981  0014C2                     clear_4:
  4982  0014C2  6AEE               	clrf	postinc0,c
  4983  0014C4  06E8               	decf	wreg,f,c
  4984  0014C6  E1FD               	bnz	clear_4
  4985  0014C8                     end_of_initialization:
  4986                           	opt stack 0
  4987  0014C8                     __end_of__initialization:
  4988                           	opt stack 0
  4989  0014C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4990  0014CA  6EF8               	movwf	tblptru,c
  4991  0014CC  0100               	movlb	0
  4992  0014CE  EFAE  F01F         	goto	_main	;jump to C main() function
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           indf0	equ	0xFEF
  5001                           postinc0	equ	0xFEE
  5002                           fsr0h	equ	0xFEA
  5003                           fsr0l	equ	0xFE9
  5004                           wreg	equ	0xFE8
  5005                           indf1	equ	0xFE7
  5006                           postinc1	equ	0xFE6
  5007                           postdec1	equ	0xFE5
  5008                           fsr1h	equ	0xFE2
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           plusw2	equ	0xFDB
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018                           	psect	bssCOMRAM
  5019  000022                     __pbssCOMRAM:
  5020                           	opt stack 0
  5021  000022                     _status_led_cnt:
  5022                           	opt stack 0
  5023  000022                     	ds	2
  5024  000024                     strtok@sp:
  5025                           	opt stack 0
  5026  000024                     	ds	2
  5027  000026                     _USART_Status:
  5028                           	opt stack 0
  5029  000026                     	ds	1
  5030  000027                     __ECANRxFilterHitInfo:
  5031                           	opt stack 0
  5032  000027                     	ds	1
  5033  000028                     __IT_INT_MASK:
  5034                           	opt stack 0
  5035  000028                     	ds	1
  5036  000029                     __IT_SAVE_BSR:
  5037                           	opt stack 0
  5038  000029                     	ds	1
  5039  00002A                     ___DCByte:
  5040                           	opt stack 0
  5041  00002A                     	ds	1
  5042  00002B                     _bDLE:
  5043                           	opt stack 0
  5044  00002B                     	ds	1
  5045  00002C                     _bHex:
  5046                           	opt stack 0
  5047  00002C                     	ds	1
  5048  00002D                     _bInitiated:
  5049                           	opt stack 0
  5050  00002D                     	ds	1
  5051  00002E                     _bLocalEcho:
  5052                           	opt stack 0
  5053  00002E                     	ds	1
  5054  00002F                     _bOpen:
  5055                           	opt stack 0
  5056  00002F                     	ds	1
  5057  000030                     _bSilent:
  5058                           	opt stack 0
  5059  000030                     	ds	1
  5060  000031                     _fifo_canrxcount:
  5061                           	opt stack 0
  5062  000031                     	ds	1
  5063  000032                     _ledFunctionality:
  5064                           	opt stack 0
  5065  000032                     	ds	1
  5066  000033                     _nTimeStamp:
  5067                           	opt stack 0
  5068  000033                     	ds	1
  5069  000034                     _pos:
  5070                           	opt stack 0
  5071  000034                     	ds	1
  5072  000035                     _rwtimeout:
  5073                           	opt stack 0
  5074  000035                     	ds	1
  5075  000036                     _sequencyno:
  5076                           	opt stack 0
  5077  000036                     	ds	1
  5078  000037                     _stateVscpDriver:
  5079                           	opt stack 0
  5080  000037                     	ds	1
  5081  000038                     _vscpClass:
  5082                           	opt stack 0
  5083  000038                     	ds	2
  5084  00003A                     _dlc:
  5085                           	opt stack 0
  5086  00003A                     	ds	1
  5087  00003B                     _flags:
  5088                           	opt stack 0
  5089  00003B                     	ds	1
  5090  00003C                     _vscpNodeId:
  5091                           	opt stack 0
  5092  00003C                     	ds	1
  5093  00003D                     _vscpPriority:
  5094                           	opt stack 0
  5095  00003D                     	ds	1
  5096  00003E                     _vscpSize:
  5097                           	opt stack 0
  5098  00003E                     	ds	1
  5099  00003F                     _vscpType:
  5100                           	opt stack 0
  5101  00003F                     	ds	1
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           intcon	equ	0xFF2
  5109                           indf0	equ	0xFEF
  5110                           postinc0	equ	0xFEE
  5111                           fsr0h	equ	0xFEA
  5112                           fsr0l	equ	0xFE9
  5113                           wreg	equ	0xFE8
  5114                           indf1	equ	0xFE7
  5115                           postinc1	equ	0xFE6
  5116                           postdec1	equ	0xFE5
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           plusw2	equ	0xFDB
  5123                           fsr2h	equ	0xFDA
  5124                           fsr2l	equ	0xFD9
  5125                           status	equ	0xFD8
  5126                           
  5127                           	psect	bssBANK1
  5128  000100                     __pbssBANK1:
  5129                           	opt stack 0
  5130  000100                     _can_receiveOverruns:
  5131                           	opt stack 0
  5132  000100                     	ds	4
  5133  000104                     _can_transmitOverruns:
  5134                           	opt stack 0
  5135  000104                     	ds	4
  5136  000108                     _cntRxBytes:
  5137                           	opt stack 0
  5138  000108                     	ds	4
  5139  00010C                     _cntRxFrames:
  5140                           	opt stack 0
  5141  00010C                     	ds	4
  5142  000110                     _cntTxBytes:
  5143                           	opt stack 0
  5144  000110                     	ds	4
  5145  000114                     _cntTxFrames:
  5146                           	opt stack 0
  5147  000114                     	ds	4
  5148  000118                     _timekeeper:
  5149                           	opt stack 0
  5150  000118                     	ds	4
  5151  00011C                     _timer:
  5152                           	opt stack 0
  5153  00011C                     	ds	4
  5154  000120                     _uart_receiveOverruns:
  5155                           	opt stack 0
  5156  000120                     	ds	4
  5157  000124                     _uart_transmitOverruns:
  5158                           	opt stack 0
  5159  000124                     	ds	4
  5160  000128                     _made_table:
  5161                           	opt stack 0
  5162  000128                     	ds	2
  5163  00012A                     __IT_SAVE_STATUS:
  5164                           	opt stack 0
  5165  00012A                     	ds	1
  5166  00012B                     __IT_SAVE_WREG:
  5167                           	opt stack 0
  5168  00012B                     	ds	1
  5169  00012C                     _mode:
  5170                           	opt stack 0
  5171  00012C                     	ds	1
  5172  00012D                     _cmdbuf:
  5173                           	opt stack 0
  5174  00012D                     	ds	80
  5175  00017D                     _wrkbuf:
  5176                           	opt stack 0
  5177  00017D                     	ds	80
  5178  0001CD                     _canInputFifo:
  5179                           	opt stack 0
  5180  0001CD                     	ds	8
  5181  0001D5                     _data:
  5182                           	opt stack 0
  5183  0001D5                     	ds	8
  5184  0001DD                     _serialInputFifo:
  5185                           	opt stack 0
  5186  0001DD                     	ds	8
  5187  0001E5                     _vscpData:
  5188                           	opt stack 0
  5189  0001E5                     	ds	8
  5190  0001ED                     _id:
  5191                           	opt stack 0
  5192  0001ED                     	ds	4
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           indf0	equ	0xFEF
  5201                           postinc0	equ	0xFEE
  5202                           fsr0h	equ	0xFEA
  5203                           fsr0l	equ	0xFE9
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postinc1	equ	0xFE6
  5207                           postdec1	equ	0xFE5
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218                           	psect	bssBANK2
  5219  000200                     __pbssBANK2:
  5220                           	opt stack 0
  5221  000200                     _serial_inputBuffer:
  5222                           	opt stack 0
  5223  000200                     	ds	128
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           indf0	equ	0xFEF
  5232                           postinc0	equ	0xFEE
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           postinc1	equ	0xFE6
  5238                           postdec1	equ	0xFE5
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           plusw2	equ	0xFDB
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249                           	psect	bssBANK3
  5250  000300                     __pbssBANK3:
  5251                           	opt stack 0
  5252  000300                     _crc8_table:
  5253                           	opt stack 0
  5254  000300                     	ds	256
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           indf0	equ	0xFEF
  5263                           postinc0	equ	0xFEE
  5264                           fsr0h	equ	0xFEA
  5265                           fsr0l	equ	0xFE9
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           postinc1	equ	0xFE6
  5269                           postdec1	equ	0xFE5
  5270                           fsr1h	equ	0xFE2
  5271                           fsr1l	equ	0xFE1
  5272                           indf2	equ	0xFDF
  5273                           postinc2	equ	0xFDE
  5274                           postdec2	equ	0xFDD
  5275                           plusw2	equ	0xFDB
  5276                           fsr2h	equ	0xFDA
  5277                           fsr2l	equ	0xFD9
  5278                           status	equ	0xFD8
  5279                           
  5280                           	psect	bssBIGRAM
  5281  000400                     __pbssBIGRAM:
  5282                           	opt stack 0
  5283  000400                     _can_inputBuffer:
  5284                           	opt stack 0
  5285  000400                     	ds	494
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           indf0	equ	0xFEF
  5294                           postinc0	equ	0xFEE
  5295                           fsr0h	equ	0xFEA
  5296                           fsr0l	equ	0xFE9
  5297                           wreg	equ	0xFE8
  5298                           indf1	equ	0xFE7
  5299                           postinc1	equ	0xFE6
  5300                           postdec1	equ	0xFE5
  5301                           fsr1h	equ	0xFE2
  5302                           fsr1l	equ	0xFE1
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           plusw2	equ	0xFDB
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311                           	psect	cstackBANK2
  5312  000280                     __pcstackBANK2:
  5313                           	opt stack 0
  5314  000280                     doModeVerbose@id:
  5315                           	opt stack 0
  5316                           
  5317                           ; 4 bytes @ 0x0
  5318  000280                     	ds	4
  5319  000284                     doModeVerbose@preg:
  5320                           	opt stack 0
  5321                           
  5322                           ; 2 bytes @ 0x4
  5323  000284                     	ds	2
  5324  000286                     doModeVerbose@preg_1247:
  5325                           	opt stack 0
  5326                           
  5327                           ; 2 bytes @ 0x6
  5328  000286                     	ds	2
  5329  000288                     doModeVerbose@filter_class:
  5330                           	opt stack 0
  5331                           
  5332                           ; 2 bytes @ 0x8
  5333  000288                     	ds	2
  5334  00028A                     doModeVerbose@mask_class:
  5335                           	opt stack 0
  5336                           
  5337                           ; 2 bytes @ 0xA
  5338  00028A                     	ds	2
  5339  00028C                     doModeVerbose@filter_priority:
  5340                           	opt stack 0
  5341                           
  5342                           ; 1 bytes @ 0xC
  5343  00028C                     	ds	1
  5344  00028D                     doModeVerbose@filter_type:
  5345                           	opt stack 0
  5346                           
  5347                           ; 1 bytes @ 0xD
  5348  00028D                     	ds	1
  5349  00028E                     doModeVerbose@filter_nodeid:
  5350                           	opt stack 0
  5351                           
  5352                           ; 1 bytes @ 0xE
  5353  00028E                     	ds	1
  5354  00028F                     doModeVerbose@mask_priority:
  5355                           	opt stack 0
  5356                           
  5357                           ; 1 bytes @ 0xF
  5358  00028F                     	ds	1
  5359  000290                     doModeVerbose@mask_type:
  5360                           	opt stack 0
  5361                           
  5362                           ; 1 bytes @ 0x10
  5363  000290                     	ds	1
  5364  000291                     doModeVerbose@mask_nodeid:
  5365                           	opt stack 0
  5366                           
  5367                           ; 1 bytes @ 0x11
  5368  000291                     	ds	1
  5369  000292                     _doModeVerbose$1202:
  5370                           	opt stack 0
  5371                           
  5372                           ; 2 bytes @ 0x12
  5373  000292                     	ds	2
  5374  000294                     _doModeVerbose$1207:
  5375                           	opt stack 0
  5376                           
  5377                           ; 2 bytes @ 0x14
  5378  000294                     	ds	2
  5379  000296                     _doModeVerbose$1211:
  5380                           	opt stack 0
  5381                           
  5382                           ; 2 bytes @ 0x16
  5383  000296                     	ds	2
  5384  000298                     _doModeVerbose$1216:
  5385                           	opt stack 0
  5386                           
  5387                           ; 2 bytes @ 0x18
  5388  000298                     	ds	2
  5389  00029A                     _doModeVerbose$1224:
  5390                           	opt stack 0
  5391                           
  5392                           ; 2 bytes @ 0x1A
  5393  00029A                     	ds	2
  5394  00029C                     _doModeVerbose$1229:
  5395                           	opt stack 0
  5396                           
  5397                           ; 2 bytes @ 0x1C
  5398  00029C                     	ds	2
  5399  00029E                     _doModeVerbose$1233:
  5400                           	opt stack 0
  5401                           
  5402                           ; 2 bytes @ 0x1E
  5403  00029E                     	ds	2
  5404  0002A0                     _doModeVerbose$1256:
  5405                           	opt stack 0
  5406                           
  5407                           ; 2 bytes @ 0x20
  5408  0002A0                     	ds	2
  5409  0002A2                     _doModeVerbose$1262:
  5410                           	opt stack 0
  5411                           
  5412                           ; 2 bytes @ 0x22
  5413  0002A2                     	ds	2
  5414  0002A4                     _doModeVerbose$1271:
  5415                           	opt stack 0
  5416                           
  5417                           ; 2 bytes @ 0x24
  5418  0002A4                     	ds	2
  5419  0002A6                     doModeVerbose@rv:
  5420                           	opt stack 0
  5421                           
  5422                           ; 1 bytes @ 0x26
  5423  0002A6                     	ds	1
  5424  0002A7                     doModeVerbose@page_1239:
  5425                           	opt stack 0
  5426                           
  5427                           ; 1 bytes @ 0x27
  5428  0002A7                     	ds	1
  5429  0002A8                     doModeVerbose@reg_1240:
  5430                           	opt stack 0
  5431                           
  5432                           ; 1 bytes @ 0x28
  5433  0002A8                     	ds	1
  5434  0002A9                     doModeVerbose@value_1265:
  5435                           	opt stack 0
  5436                           
  5437                           ; 1 bytes @ 0x29
  5438  0002A9                     	ds	1
  5439  0002AA                     doModeVerbose@id_1313:
  5440                           	opt stack 0
  5441                           
  5442                           ; 4 bytes @ 0x2A
  5443  0002AA                     	ds	4
  5444  0002AE                     doModeVerbose@filterno:
  5445                           	opt stack 0
  5446                           
  5447                           ; 1 bytes @ 0x2E
  5448  0002AE                     	ds	1
  5449  0002AF                     doModeVerbose@maskno:
  5450                           	opt stack 0
  5451                           
  5452                           ; 1 bytes @ 0x2F
  5453  0002AF                     	ds	1
  5454  0002B0                     doModeVerbose@i:
  5455                           	opt stack 0
  5456                           
  5457                           ; 1 bytes @ 0x30
  5458  0002B0                     	ds	1
  5459  0002B1                     doModeVerbose@value_1241:
  5460                           	opt stack 0
  5461                           
  5462                           ; 1 bytes @ 0x31
  5463  0002B1                     	ds	1
  5464  0002B2                     doModeVerbose@count:
  5465                           	opt stack 0
  5466                           
  5467                           ; 1 bytes @ 0x32
  5468  0002B2                     	ds	1
  5469  0002B3                     doModeVerbose@nodeid:
  5470                           	opt stack 0
  5471                           
  5472                           ; 1 bytes @ 0x33
  5473  0002B3                     	ds	1
  5474  0002B4                     doModeVerbose@nodeid_1238:
  5475                           	opt stack 0
  5476                           
  5477                           ; 1 bytes @ 0x34
  5478  0002B4                     	ds	1
  5479  0002B5                     doModeVerbose@page:
  5480                           	opt stack 0
  5481                           
  5482                           ; 1 bytes @ 0x35
  5483  0002B5                     	ds	1
  5484  0002B6                     doModeVerbose@reg:
  5485                           	opt stack 0
  5486                           
  5487                           ; 1 bytes @ 0x36
  5488  0002B6                     	ds	1
  5489  0002B7                     doModeVerbose@i_1183:
  5490                           	opt stack 0
  5491                           
  5492                           ; 1 bytes @ 0x37
  5493  0002B7                     	ds	1
  5494  0002B8                     doModeVerbose@nodeid_1264:
  5495                           	opt stack 0
  5496                           
  5497                           ; 1 bytes @ 0x38
  5498  0002B8                     	ds	1
  5499  0002B9                     doModeVerbose@c:
  5500                           	opt stack 0
  5501                           
  5502                           ; 1 bytes @ 0x39
  5503  0002B9                     	ds	1
  5504  0002BA                     doModeVerbose@value:
  5505                           	opt stack 0
  5506                           
  5507                           ; 1 bytes @ 0x3A
  5508  0002BA                     	ds	1
  5509  0002BB                     doModeVerbose@p_1190:
  5510                           	opt stack 0
  5511                           
  5512                           ; 2 bytes @ 0x3B
  5513  0002BB                     	ds	2
  5514  0002BD                     doModeVerbose@p_1243:
  5515                           	opt stack 0
  5516                           
  5517                           ; 2 bytes @ 0x3D
  5518  0002BD                     	ds	2
  5519  0002BF                     doModeVerbose@ifmode:
  5520                           	opt stack 0
  5521                           
  5522                           ; 1 bytes @ 0x3F
  5523  0002BF                     	ds	1
  5524  0002C0                     doModeVerbose@p:
  5525                           	opt stack 0
  5526                           
  5527                           ; 2 bytes @ 0x40
  5528  0002C0                     	ds	2
  5529  0002C2                     doModeVerbose@p_1281:
  5530                           	opt stack 0
  5531                           
  5532                           ; 2 bytes @ 0x42
  5533  0002C2                     	ds	2
  5534  0002C4                     doModeVerbose@p_1301:
  5535                           	opt stack 0
  5536                           
  5537                           ; 2 bytes @ 0x44
  5538  0002C4                     	ds	2
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           intcon	equ	0xFF2
  5546                           indf0	equ	0xFEF
  5547                           postinc0	equ	0xFEE
  5548                           fsr0h	equ	0xFEA
  5549                           fsr0l	equ	0xFE9
  5550                           wreg	equ	0xFE8
  5551                           indf1	equ	0xFE7
  5552                           postinc1	equ	0xFE6
  5553                           postdec1	equ	0xFE5
  5554                           fsr1h	equ	0xFE2
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           plusw2	equ	0xFDB
  5560                           fsr2h	equ	0xFDA
  5561                           fsr2l	equ	0xFD9
  5562                           status	equ	0xFD8
  5563                           
  5564                           	psect	cstackBANK0
  5565  000060                     __pcstackBANK0:
  5566                           	opt stack 0
  5567  000060                     ?_WriteTimer0:
  5568                           	opt stack 0
  5569  000060                     ?_fifo_init:
  5570                           	opt stack 0
  5571  000060                     ?_OpenUSART:
  5572                           	opt stack 0
  5573  000060                     ?_Write_b_eep:
  5574                           	opt stack 0
  5575  000060                     ??_isdigit:
  5576  000060                     ?_Read_b_eep:
  5577                           	opt stack 0
  5578  000060                     ?_fifo_read:
  5579                           	opt stack 0
  5580  000060                     ?_memset:
  5581                           	opt stack 0
  5582  000060                     ?_strcpy:
  5583                           	opt stack 0
  5584  000060                     ?_strchr:
  5585                           	opt stack 0
  5586  000060                     ?_strlen:
  5587                           	opt stack 0
  5588  000060                     ?_memcpy:
  5589                           	opt stack 0
  5590  000060                     ?_strcat:
  5591                           	opt stack 0
  5592  000060                     ?___lwdiv:
  5593                           	opt stack 0
  5594  000060                     ?___lwmod:
  5595                           	opt stack 0
  5596  000060                     ?___wmul:
  5597                           	opt stack 0
  5598  000060                     ?___lldiv:
  5599                           	opt stack 0
  5600  000060                     ECANSetOperationMode@mode:
  5601                           	opt stack 0
  5602  000060                     nibbleFromChar@c:
  5603                           	opt stack 0
  5604  000060                     OpenTimer0@config:
  5605                           	opt stack 0
  5606  000060                     WriteUSART@data:
  5607                           	opt stack 0
  5608  000060                     toupper@c:
  5609                           	opt stack 0
  5610  000060                     fifo_init@f:
  5611                           	opt stack 0
  5612  000060                     fifo_read@f:
  5613                           	opt stack 0
  5614  000060                     _init_crc8$2068:
  5615                           	opt stack 0
  5616  000060                     Read_b_eep@badd:
  5617                           	opt stack 0
  5618  000060                     Write_b_eep@badd:
  5619                           	opt stack 0
  5620  000060                     WriteTimer0@timer0:
  5621                           	opt stack 0
  5622  000060                     OpenUSART@spbrg:
  5623                           	opt stack 0
  5624  000060                     ___lwdiv@dividend:
  5625                           	opt stack 0
  5626  000060                     ___lwmod@dividend:
  5627                           	opt stack 0
  5628  000060                     memcpy@d1:
  5629                           	opt stack 0
  5630  000060                     memset@p1:
  5631                           	opt stack 0
  5632  000060                     strcat@to:
  5633                           	opt stack 0
  5634  000060                     strchr@ptr:
  5635                           	opt stack 0
  5636  000060                     strcpy@to:
  5637                           	opt stack 0
  5638  000060                     strlen@s:
  5639                           	opt stack 0
  5640  000060                     ___wmul@multiplier:
  5641                           	opt stack 0
  5642  000060                     ___lldiv@dividend:
  5643                           	opt stack 0
  5644                           
  5645                           ; 4 bytes @ 0x0
  5646  000060                     	ds	1
  5647  000061                     ?_putsUSART:
  5648                           	opt stack 0
  5649  000061                     ??_printBinary:
  5650  000061                     ?_strichr:
  5651                           	opt stack 0
  5652  000061                     _isdigit$2985:
  5653                           	opt stack 0
  5654  000061                     putsUSART@data:
  5655                           	opt stack 0
  5656  000061                     strichr@ptr:
  5657                           	opt stack 0
  5658                           
  5659                           ; 2 bytes @ 0x1
  5660  000061                     	ds	1
  5661  000062                     ?_setFilter:
  5662                           	opt stack 0
  5663  000062                     ?__CANIDToRegs:
  5664                           	opt stack 0
  5665  000062                     Write_b_eep@bdat:
  5666                           	opt stack 0
  5667  000062                     OpenUSART@config:
  5668                           	opt stack 0
  5669  000062                     isdigit@c:
  5670                           	opt stack 0
  5671  000062                     __CANIDToRegs@ptr:
  5672                           	opt stack 0
  5673  000062                     fifo_init@buf:
  5674                           	opt stack 0
  5675  000062                     fifo_read@buf:
  5676                           	opt stack 0
  5677  000062                     init_crc8@j:
  5678                           	opt stack 0
  5679  000062                     WriteTimer0@timer:
  5680                           	opt stack 0
  5681  000062                     ___lwdiv@divisor:
  5682                           	opt stack 0
  5683  000062                     ___lwmod@divisor:
  5684                           	opt stack 0
  5685  000062                     memcpy@s1:
  5686                           	opt stack 0
  5687  000062                     memset@c:
  5688                           	opt stack 0
  5689  000062                     strcat@from:
  5690                           	opt stack 0
  5691  000062                     strchr@chr:
  5692                           	opt stack 0
  5693  000062                     strcpy@from:
  5694                           	opt stack 0
  5695  000062                     strlen@cp:
  5696                           	opt stack 0
  5697  000062                     ___wmul@multiplicand:
  5698                           	opt stack 0
  5699  000062                     setFilter@val:
  5700                           	opt stack 0
  5701                           
  5702                           ; 4 bytes @ 0x2
  5703  000062                     	ds	1
  5704  000063                     ??_putsUSART:
  5705  000063                     printBinary@value:
  5706                           	opt stack 0
  5707  000063                     Write_b_eep@GIE_BIT_VAL:
  5708                           	opt stack 0
  5709  000063                     strichr@chr:
  5710                           	opt stack 0
  5711                           
  5712                           ; 2 bytes @ 0x3
  5713  000063                     	ds	1
  5714  000064                     ??_strchr:
  5715  000064                     ?_hexStringToBytes:
  5716                           	opt stack 0
  5717  000064                     ?_strnicmp:
  5718                           	opt stack 0
  5719  000064                     init_app_eeprom@i:
  5720                           	opt stack 0
  5721  000064                     init_crc8@crc:
  5722                           	opt stack 0
  5723  000064                     ___lwdiv@counter:
  5724                           	opt stack 0
  5725  000064                     ___lwmod@counter:
  5726                           	opt stack 0
  5727  000064                     printBinary@i:
  5728                           	opt stack 0
  5729  000064                     fifo_init@size:
  5730                           	opt stack 0
  5731  000064                     fifo_read@nbytes:
  5732                           	opt stack 0
  5733  000064                     hexStringToBytes@buf:
  5734                           	opt stack 0
  5735  000064                     memcpy@n:
  5736                           	opt stack 0
  5737  000064                     memset@n:
  5738                           	opt stack 0
  5739  000064                     strcat@cp:
  5740                           	opt stack 0
  5741  000064                     strcpy@cp:
  5742                           	opt stack 0
  5743  000064                     strnicmp@s1:
  5744                           	opt stack 0
  5745  000064                     ___wmul@product:
  5746                           	opt stack 0
  5747  000064                     __CANIDToRegs@val:
  5748                           	opt stack 0
  5749  000064                     ___lldiv@divisor:
  5750                           	opt stack 0
  5751                           
  5752                           ; 4 bytes @ 0x4
  5753  000064                     	ds	1
  5754  000065                     init_crc8@i:
  5755                           	opt stack 0
  5756  000065                     ___lwdiv@quotient:
  5757                           	opt stack 0
  5758                           
  5759                           ; 2 bytes @ 0x5
  5760  000065                     	ds	1
  5761  000066                     ??_fifo_read:
  5762  000066                     ??_setFilter:
  5763  000066                     ?_atoi:
  5764                           	opt stack 0
  5765  000066                     ?_strspn:
  5766                           	opt stack 0
  5767  000066                     ?_strcspn:
  5768                           	opt stack 0
  5769  000066                     hexStringToBytes@size:
  5770                           	opt stack 0
  5771  000066                     atoi@s:
  5772                           	opt stack 0
  5773  000066                     memcpy@d:
  5774                           	opt stack 0
  5775  000066                     memset@p:
  5776                           	opt stack 0
  5777  000066                     strnicmp@s2:
  5778                           	opt stack 0
  5779  000066                     strcspn@s1:
  5780                           	opt stack 0
  5781  000066                     strspn@s1:
  5782                           	opt stack 0
  5783                           
  5784                           ; 2 bytes @ 0x6
  5785  000066                     	ds	1
  5786  000067                     ?_crc8:
  5787                           	opt stack 0
  5788  000067                     ?_utoa:
  5789                           	opt stack 0
  5790  000067                     crc8@crc:
  5791                           	opt stack 0
  5792  000067                     hexStringToBytes@inhex:
  5793                           	opt stack 0
  5794  000067                     utoa@buf:
  5795                           	opt stack 0
  5796                           
  5797                           ; 2 bytes @ 0x7
  5798  000067                     	ds	1
  5799  000068                     ??_atoi:
  5800  000068                     __CANIDToRegs@type:
  5801                           	opt stack 0
  5802  000068                     ___lldiv@counter:
  5803                           	opt stack 0
  5804  000068                     memcpy@s:
  5805                           	opt stack 0
  5806  000068                     strnicmp@len:
  5807                           	opt stack 0
  5808  000068                     strcspn@s2:
  5809                           	opt stack 0
  5810  000068                     strspn@s2:
  5811                           	opt stack 0
  5812                           
  5813                           ; 2 bytes @ 0x8
  5814  000068                     	ds	1
  5815  000069                     ??__CANIDToRegs:
  5816  000069                     ??_hexStringToBytes:
  5817  000069                     crc8@m:
  5818                           	opt stack 0
  5819  000069                     utoa@val:
  5820                           	opt stack 0
  5821  000069                     ___lldiv@quotient:
  5822                           	opt stack 0
  5823                           
  5824                           ; 4 bytes @ 0x9
  5825  000069                     	ds	1
  5826  00006A                     ??_crc8:
  5827  00006A                     ??_strnicmp:
  5828  00006A                     atoi@sign:
  5829                           	opt stack 0
  5830  00006A                     fifo_read@p:
  5831                           	opt stack 0
  5832  00006A                     strcspn@i:
  5833                           	opt stack 0
  5834  00006A                     strspn@i:
  5835                           	opt stack 0
  5836                           
  5837                           ; 2 bytes @ 0xA
  5838  00006A                     	ds	1
  5839  00006B                     __CANIDToRegs@Value:
  5840                           	opt stack 0
  5841  00006B                     atoi@a:
  5842                           	opt stack 0
  5843  00006B                     utoa@base:
  5844                           	opt stack 0
  5845                           
  5846                           ; 2 bytes @ 0xB
  5847  00006B                     	ds	1
  5848  00006C                     ?_sendEscapedUartData:
  5849                           	opt stack 0
  5850  00006C                     ?_calcCRC:
  5851                           	opt stack 0
  5852  00006C                     ?_ECANSendMessage:
  5853                           	opt stack 0
  5854  00006C                     ?_strtok:
  5855                           	opt stack 0
  5856  00006C                     setFilter@filter:
  5857                           	opt stack 0
  5858  00006C                     strnicmp@r:
  5859                           	opt stack 0
  5860  00006C                     sendEscapedUartData@pcrc:
  5861                           	opt stack 0
  5862  00006C                     calcCRC@p:
  5863                           	opt stack 0
  5864  00006C                     fifo_read@i:
  5865                           	opt stack 0
  5866  00006C                     hexStringToBytes@len:
  5867                           	opt stack 0
  5868  00006C                     strtok@s1:
  5869                           	opt stack 0
  5870  00006C                     ECANSendMessage@id:
  5871                           	opt stack 0
  5872                           
  5873                           ; 4 bytes @ 0xC
  5874  00006C                     	ds	1
  5875  00006D                     ?_stristr:
  5876                           	opt stack 0
  5877  00006D                     ?___llmod:
  5878                           	opt stack 0
  5879  00006D                     setFilter@sidh:
  5880                           	opt stack 0
  5881  00006D                     utoa@v:
  5882                           	opt stack 0
  5883  00006D                     stristr@s1:
  5884                           	opt stack 0
  5885  00006D                     ___llmod@dividend:
  5886                           	opt stack 0
  5887                           
  5888                           ; 4 bytes @ 0xD
  5889  00006D                     	ds	1
  5890  00006E                     ?_getCANFrame:
  5891                           	opt stack 0
  5892  00006E                     sendEscapedUartData@c:
  5893                           	opt stack 0
  5894  00006E                     calcCRC@len:
  5895                           	opt stack 0
  5896  00006E                     setFilter@sidl:
  5897                           	opt stack 0
  5898  00006E                     getCANFrame@pdlc:
  5899                           	opt stack 0
  5900  00006E                     hexStringToBytes@p:
  5901                           	opt stack 0
  5902  00006E                     strtok@s2:
  5903                           	opt stack 0
  5904                           
  5905                           ; 2 bytes @ 0xE
  5906  00006E                     	ds	1
  5907  00006F                     ?_sendVSCPDriverCommandReply:
  5908                           	opt stack 0
  5909  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5910                           	opt stack 0
  5911  00006F                     sendVSCPDriverAck@crc:
  5912                           	opt stack 0
  5913  00006F                     sendVSCPDriverNack@crc:
  5914                           	opt stack 0
  5915  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5916                           	opt stack 0
  5917  00006F                     sendVSCPModeCapabilities@crc:
  5918                           	opt stack 0
  5919  00006F                     calcCRC@j:
  5920                           	opt stack 0
  5921  00006F                     setFilter@eidh:
  5922                           	opt stack 0
  5923  00006F                     utoa@c:
  5924                           	opt stack 0
  5925  00006F                     stristr@s2:
  5926                           	opt stack 0
  5927                           
  5928                           ; 2 bytes @ 0xF
  5929  00006F                     	ds	1
  5930  000070                     ?_itoa:
  5931                           	opt stack 0
  5932  000070                     sendVSCPDriverErrorFrame@crc:
  5933                           	opt stack 0
  5934  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5935                           	opt stack 0
  5936  000070                     calcCRC@crc:
  5937                           	opt stack 0
  5938  000070                     setFilter@eidl:
  5939                           	opt stack 0
  5940  000070                     getCANFrame@pdata:
  5941                           	opt stack 0
  5942  000070                     ECANSendMessage@data:
  5943                           	opt stack 0
  5944  000070                     hexStringToBytes@i:
  5945                           	opt stack 0
  5946  000070                     itoa@buf:
  5947                           	opt stack 0
  5948                           
  5949                           ; 2 bytes @ 0x10
  5950  000070                     	ds	1
  5951  000071                     ??_init_app_ram:
  5952  000071                     sendVSCPDriverCommandReply@crc:
  5953                           	opt stack 0
  5954  000071                     ___llmod@divisor:
  5955                           	opt stack 0
  5956                           
  5957                           ; 4 bytes @ 0x11
  5958  000071                     	ds	1
  5959  000072                     getCANFrame@pid:
  5960                           	opt stack 0
  5961  000072                     ECANSendMessage@dataLen:
  5962                           	opt stack 0
  5963  000072                     itoa@val:
  5964                           	opt stack 0
  5965                           
  5966                           ; 2 bytes @ 0x12
  5967  000072                     	ds	1
  5968  000073                     ?_getVSCPFrame:
  5969                           	opt stack 0
  5970  000073                     getVSCPFrame@pvscptype:
  5971                           	opt stack 0
  5972  000073                     ECANSendMessage@msgFlags:
  5973                           	opt stack 0
  5974  000073                     receiveSendEventCANAL@data:
  5975                           	opt stack 0
  5976  000073                     receiveSendMultiEventCANAL@data:
  5977                           	opt stack 0
  5978                           
  5979                           ; 8 bytes @ 0x13
  5980  000073                     	ds	1
  5981  000074                     ??_ECANSendMessage:
  5982  000074                     getVSCPFrame@pNodeId:
  5983                           	opt stack 0
  5984  000074                     itoa@base:
  5985                           	opt stack 0
  5986                           
  5987                           ; 2 bytes @ 0x14
  5988  000074                     	ds	1
  5989  000075                     getVSCPFrame@pPriority:
  5990                           	opt stack 0
  5991  000075                     ___llmod@counter:
  5992                           	opt stack 0
  5993  000075                     ECANSendMessage@pb:
  5994                           	opt stack 0
  5995                           
  5996                           ; 18 bytes @ 0x15
  5997  000075                     	ds	1
  5998  000076                     ?_sprintf:
  5999                           	opt stack 0
  6000  000076                     ?_ultoa:
  6001                           	opt stack 0
  6002  000076                     getVSCPFrame@pSize:
  6003                           	opt stack 0
  6004  000076                     sprintf@sp:
  6005                           	opt stack 0
  6006  000076                     ultoa@buf:
  6007                           	opt stack 0
  6008                           
  6009                           ; 2 bytes @ 0x16
  6010  000076                     	ds	1
  6011  000077                     getVSCPFrame@pData:
  6012                           	opt stack 0
  6013                           
  6014                           ; 2 bytes @ 0x17
  6015  000077                     	ds	1
  6016  000078                     sprintf@f:
  6017                           	opt stack 0
  6018  000078                     ultoa@val:
  6019                           	opt stack 0
  6020  000078                     printFirmwareVersion@wrkbuf:
  6021                           	opt stack 0
  6022                           
  6023                           ; 20 bytes @ 0x18
  6024  000078                     	ds	1
  6025  000079                     ??_getVSCPFrame:
  6026  000079                     init_app_ram@i:
  6027                           	opt stack 0
  6028                           
  6029                           ; 1 bytes @ 0x19
  6030  000079                     	ds	1
  6031  00007A                     
  6032                           ; 0 bytes @ 0x1A
  6033  00007A                     	ds	1
  6034  00007B                     receiveSendEventCANAL@i:
  6035                           	opt stack 0
  6036  00007B                     receiveSendMultiEventCANAL@msgcount:
  6037                           	opt stack 0
  6038                           
  6039                           ; 1 bytes @ 0x1B
  6040  00007B                     	ds	1
  6041  00007C                     receiveSendMultiEventCANAL@i:
  6042                           	opt stack 0
  6043  00007C                     ultoa@base:
  6044                           	opt stack 0
  6045  00007C                     receiveSendEventCANAL@id:
  6046                           	opt stack 0
  6047                           
  6048                           ; 4 bytes @ 0x1C
  6049  00007C                     	ds	1
  6050  00007D                     getVSCPFrame@pvscpclass:
  6051                           	opt stack 0
  6052  00007D                     receiveSendMultiEventCANAL@id:
  6053                           	opt stack 0
  6054                           
  6055                           ; 4 bytes @ 0x1D
  6056  00007D                     	ds	1
  6057  00007E                     ??_sprintf:
  6058  00007E                     getVSCPFrame@id:
  6059                           	opt stack 0
  6060  00007E                     ultoa@v:
  6061                           	opt stack 0
  6062                           
  6063                           ; 4 bytes @ 0x1E
  6064  00007E                     	ds	2
  6065  000080                     receiveSendEventCANAL@dlc:
  6066                           	opt stack 0
  6067                           
  6068                           ; 1 bytes @ 0x20
  6069  000080                     	ds	1
  6070  000081                     receiveSendEventCANAL@crc:
  6071                           	opt stack 0
  6072  000081                     receiveSendMultiEventCANAL@dlc:
  6073                           	opt stack 0
  6074  000081                     sprintf@idx:
  6075                           	opt stack 0
  6076                           
  6077                           ; 1 bytes @ 0x21
  6078  000081                     	ds	1
  6079  000082                     receiveSendMultiEventCANAL@crc:
  6080                           	opt stack 0
  6081  000082                     ultoa@c:
  6082                           	opt stack 0
  6083  000082                     _sprintf$2130:
  6084                           	opt stack 0
  6085                           
  6086                           ; 2 bytes @ 0x22
  6087  000082                     	ds	1
  6088  000083                     ??_receiveSendEventSLCAN:
  6089  000083                     receiveSendMultiEventCANAL@pos:
  6090                           	opt stack 0
  6091                           
  6092                           ; 1 bytes @ 0x23
  6093  000083                     	ds	1
  6094  000084                     _sprintf$2131:
  6095                           	opt stack 0
  6096                           
  6097                           ; 2 bytes @ 0x24
  6098  000084                     	ds	2
  6099  000086                     _sprintf$2137:
  6100                           	opt stack 0
  6101  000086                     receiveSendEventSLCAN@id:
  6102                           	opt stack 0
  6103                           
  6104                           ; 4 bytes @ 0x26
  6105  000086                     	ds	1
  6106  000087                     ECANSendMessage@mode:
  6107                           	opt stack 0
  6108                           
  6109                           ; 1 bytes @ 0x27
  6110  000087                     	ds	1
  6111  000088                     ECANSendMessage@buffers:
  6112                           	opt stack 0
  6113  000088                     sprintf@ap:
  6114                           	opt stack 0
  6115                           
  6116                           ; 1 bytes @ 0x28
  6117  000088                     	ds	1
  6118  000089                     ECANSendMessage@j:
  6119                           	opt stack 0
  6120  000089                     sprintf@prec:
  6121                           	opt stack 0
  6122                           
  6123                           ; 2 bytes @ 0x29
  6124  000089                     	ds	1
  6125  00008A                     receiveSendEventSLCAN@dlc:
  6126                           	opt stack 0
  6127  00008A                     ECANSendMessage@tempBSEL0:
  6128                           	opt stack 0
  6129                           
  6130                           ; 1 bytes @ 0x2A
  6131  00008A                     	ds	1
  6132  00008B                     receiveSendEventSLCAN@i:
  6133                           	opt stack 0
  6134  00008B                     ECANSendMessage@tempPtr:
  6135                           	opt stack 0
  6136  00008B                     sprintf@width:
  6137                           	opt stack 0
  6138                           
  6139                           ; 2 bytes @ 0x2B
  6140  00008B                     	ds	2
  6141  00008D                     ECANSendMessage@temp:
  6142                           	opt stack 0
  6143  00008D                     sprintf@_val:
  6144                           	opt stack 0
  6145                           
  6146                           ; 4 bytes @ 0x2D
  6147  00008D                     	ds	1
  6148  00008E                     ECANSendMessage@i:
  6149                           	opt stack 0
  6150                           
  6151                           ; 1 bytes @ 0x2E
  6152  00008E                     	ds	1
  6153  00008F                     ECANSendMessage@ptr:
  6154                           	opt stack 0
  6155                           
  6156                           ; 2 bytes @ 0x2F
  6157  00008F                     	ds	2
  6158  000091                     ?_sendCANFrame:
  6159                           	opt stack 0
  6160  000091                     sprintf@c:
  6161                           	opt stack 0
  6162  000091                     sendCANFrame@id:
  6163                           	opt stack 0
  6164                           
  6165                           ; 4 bytes @ 0x31
  6166  000091                     	ds	1
  6167  000092                     sprintf@flag:
  6168                           	opt stack 0
  6169                           
  6170                           ; 2 bytes @ 0x32
  6171  000092                     	ds	2
  6172  000094                     ??_receivePrintEventVerbose:
  6173  000094                     _printStatistics$1475:
  6174                           	opt stack 0
  6175  000094                     _printErrors$1500:
  6176                           	opt stack 0
  6177                           
  6178                           ; 2 bytes @ 0x34
  6179  000094                     	ds	1
  6180  000095                     sendCANFrame@dlc:
  6181                           	opt stack 0
  6182                           
  6183                           ; 1 bytes @ 0x35
  6184  000095                     	ds	1
  6185  000096                     _printStatistics$1481:
  6186                           	opt stack 0
  6187  000096                     _printErrors$1506:
  6188                           	opt stack 0
  6189  000096                     sendCANFrame@pdata:
  6190                           	opt stack 0
  6191                           
  6192                           ; 2 bytes @ 0x36
  6193  000096                     	ds	2
  6194  000098                     ??_doModeSLCAN:
  6195  000098                     ??_receiveVSCPModeCanalMsg:
  6196  000098                     ?_sendVSCPFrame:
  6197                           	opt stack 0
  6198  000098                     _printStatistics$1487:
  6199                           	opt stack 0
  6200  000098                     _printErrors$1512:
  6201                           	opt stack 0
  6202  000098                     sendVSCPFrame@vscpclass:
  6203                           	opt stack 0
  6204                           
  6205                           ; 2 bytes @ 0x38
  6206  000098                     	ds	1
  6207  000099                     _receivePrintEventVerbose$1382:
  6208                           	opt stack 0
  6209                           
  6210                           ; 2 bytes @ 0x39
  6211  000099                     	ds	1
  6212  00009A                     sendVSCPFrame@vscptype:
  6213                           	opt stack 0
  6214  00009A                     _printStatistics$1493:
  6215                           	opt stack 0
  6216  00009A                     _printErrors$1518:
  6217                           	opt stack 0
  6218                           
  6219                           ; 2 bytes @ 0x3A
  6220  00009A                     	ds	1
  6221  00009B                     sendVSCPFrame@nodeid:
  6222                           	opt stack 0
  6223  00009B                     _receivePrintEventVerbose$1387:
  6224                           	opt stack 0
  6225                           
  6226                           ; 2 bytes @ 0x3B
  6227  00009B                     	ds	1
  6228  00009C                     sendVSCPFrame@priority:
  6229                           	opt stack 0
  6230  00009C                     _printErrors$1524:
  6231                           	opt stack 0
  6232                           
  6233                           ; 2 bytes @ 0x3C
  6234  00009C                     	ds	1
  6235  00009D                     sendVSCPFrame@size:
  6236                           	opt stack 0
  6237  00009D                     _receivePrintEventVerbose$1392:
  6238                           	opt stack 0
  6239                           
  6240                           ; 2 bytes @ 0x3D
  6241  00009D                     	ds	1
  6242  00009E                     _printErrors$1533:
  6243                           	opt stack 0
  6244  00009E                     sendVSCPFrame@pData:
  6245                           	opt stack 0
  6246                           
  6247                           ; 2 bytes @ 0x3E
  6248  00009E                     	ds	1
  6249  00009F                     _receivePrintEventVerbose$1397:
  6250                           	opt stack 0
  6251  00009F                     doModeSLCAN@id:
  6252                           	opt stack 0
  6253                           
  6254                           ; 4 bytes @ 0x3F
  6255  00009F                     	ds	1
  6256  0000A0                     ??_sendVSCPFrame:
  6257                           
  6258                           ; 0 bytes @ 0x40
  6259  0000A0                     	ds	1
  6260  0000A1                     _receivePrintEventVerbose$1402:
  6261                           	opt stack 0
  6262                           
  6263                           ; 2 bytes @ 0x41
  6264  0000A1                     	ds	2
  6265  0000A3                     doModeSLCAN@dlc:
  6266                           	opt stack 0
  6267  0000A3                     _receivePrintEventVerbose$1407:
  6268                           	opt stack 0
  6269                           
  6270                           ; 2 bytes @ 0x43
  6271  0000A3                     	ds	1
  6272  0000A4                     doModeSLCAN@c:
  6273                           	opt stack 0
  6274                           
  6275                           ; 1 bytes @ 0x44
  6276  0000A4                     	ds	1
  6277  0000A5                     doModeSLCAN@rv:
  6278                           	opt stack 0
  6279  0000A5                     receivePrintEventVerbose@i:
  6280                           	opt stack 0
  6281                           
  6282                           ; 1 bytes @ 0x45
  6283  0000A5                     	ds	7
  6284  0000AC                     receiveVSCPModeCanalMsg@data:
  6285                           	opt stack 0
  6286                           
  6287                           ; 8 bytes @ 0x4C
  6288  0000AC                     	ds	8
  6289  0000B4                     receiveVSCPModeCanalMsg@id:
  6290                           	opt stack 0
  6291  0000B4                     sendVSCPFrame@id:
  6292                           	opt stack 0
  6293                           
  6294                           ; 4 bytes @ 0x54
  6295  0000B4                     	ds	4
  6296  0000B8                     ?_readRegisterExtended:
  6297                           	opt stack 0
  6298  0000B8                     ?_writeRegisterExtended:
  6299                           	opt stack 0
  6300  0000B8                     ?_readRegister:
  6301                           	opt stack 0
  6302  0000B8                     receiveVSCPModeCanalMsg@dlc:
  6303                           	opt stack 0
  6304  0000B8                     readRegister@reg:
  6305                           	opt stack 0
  6306  0000B8                     readRegisterExtended@page:
  6307                           	opt stack 0
  6308  0000B8                     writeRegisterExtended@page:
  6309                           	opt stack 0
  6310                           
  6311                           ; 2 bytes @ 0x58
  6312  0000B8                     	ds	1
  6313  0000B9                     doModeVscp@c:
  6314                           	opt stack 0
  6315  0000B9                     readRegister@timeout:
  6316                           	opt stack 0
  6317                           
  6318                           ; 2 bytes @ 0x59
  6319  0000B9                     	ds	1
  6320  0000BA                     readRegisterExtended@reg:
  6321                           	opt stack 0
  6322  0000BA                     writeRegisterExtended@reg:
  6323                           	opt stack 0
  6324                           
  6325                           ; 1 bytes @ 0x5A
  6326  0000BA                     	ds	1
  6327  0000BB                     readRegister@value:
  6328                           	opt stack 0
  6329  0000BB                     readRegisterExtended@timeout:
  6330                           	opt stack 0
  6331  0000BB                     writeRegisterExtended@timeout:
  6332                           	opt stack 0
  6333                           
  6334                           ; 2 bytes @ 0x5B
  6335  0000BB                     	ds	1
  6336  0000BC                     ??_readRegister:
  6337                           
  6338                           ; 0 bytes @ 0x5C
  6339  0000BC                     	ds	1
  6340  0000BD                     readRegisterExtended@value:
  6341                           	opt stack 0
  6342  0000BD                     writeRegisterExtended@value:
  6343                           	opt stack 0
  6344                           
  6345                           ; 2 bytes @ 0x5D
  6346  0000BD                     	ds	2
  6347  0000BF                     ??_readRegisterExtended:
  6348  0000BF                     ??_writeRegisterExtended:
  6349                           
  6350                           ; 0 bytes @ 0x5F
  6351  0000BF                     	ds	1
  6352  0000C0                     readRegister@nodeid:
  6353                           	opt stack 0
  6354                           
  6355                           ; 1 bytes @ 0x60
  6356  0000C0                     	ds	1
  6357  0000C1                     printGUID@nodeid:
  6358                           	opt stack 0
  6359  0000C1                     printMDF@nodeid:
  6360                           	opt stack 0
  6361  0000C1                     printNodeFirmwareVersion@nodeid:
  6362                           	opt stack 0
  6363                           
  6364                           ; 1 bytes @ 0x61
  6365  0000C1                     	ds	1
  6366  0000C2                     printMDF@value:
  6367                           	opt stack 0
  6368  0000C2                     printGUID@buf:
  6369                           	opt stack 0
  6370  0000C2                     printNodeFirmwareVersion@buf:
  6371                           	opt stack 0
  6372                           
  6373                           ; 3 bytes @ 0x62
  6374  0000C2                     	ds	1
  6375  0000C3                     readRegisterExtended@nodeid:
  6376                           	opt stack 0
  6377  0000C3                     writeRegisterExtended@nodeid:
  6378                           	opt stack 0
  6379  0000C3                     printMDF@p:
  6380                           	opt stack 0
  6381                           
  6382                           ; 2 bytes @ 0x63
  6383  0000C3                     	ds	2
  6384  0000C5                     printGUID@value:
  6385                           	opt stack 0
  6386  0000C5                     printMDF@i:
  6387                           	opt stack 0
  6388  0000C5                     printNodeFirmwareVersion@value:
  6389                           	opt stack 0
  6390                           
  6391                           ; 1 bytes @ 0x65
  6392  0000C5                     	ds	1
  6393  0000C6                     printGUID@i:
  6394                           	opt stack 0
  6395  0000C6                     printNodeFirmwareVersion@i:
  6396                           	opt stack 0
  6397                           
  6398                           ; 1 bytes @ 0x66
  6399  0000C6                     	ds	1
  6400  0000C7                     _findNodes$1578:
  6401                           	opt stack 0
  6402                           
  6403                           ; 2 bytes @ 0x67
  6404  0000C7                     	ds	2
  6405  0000C9                     findNodes@nFound:
  6406                           	opt stack 0
  6407                           
  6408                           ; 1 bytes @ 0x69
  6409  0000C9                     	ds	1
  6410  0000CA                     findNodes@value:
  6411                           	opt stack 0
  6412                           
  6413                           ; 1 bytes @ 0x6A
  6414  0000CA                     	ds	1
  6415  0000CB                     findNodes@i:
  6416                           	opt stack 0
  6417                           
  6418                           ; 1 bytes @ 0x6B
  6419  0000CB                     	ds	1
  6420  0000CC                     ??_doModeVerbose:
  6421                           
  6422                           ; 0 bytes @ 0x6C
  6423  0000CC                     	ds	20
  6424  0000E0                     
  6425                           ; 2 bytes @ 0x80
  6426  0000E0                     	ds	2
  6427  0000E2                     
  6428                           ; 3 bytes @ 0x82
  6429  0000E2                     	ds	3
  6430  0000E5                     ??_main:
  6431                           
  6432                           ; 0 bytes @ 0x85
  6433  0000E5                     	ds	1
  6434  0000E6                     main@c:
  6435                           	opt stack 0
  6436                           
  6437                           ; 1 bytes @ 0x86
  6438  0000E6                     	ds	1
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           indf0	equ	0xFEF
  6447                           postinc0	equ	0xFEE
  6448                           fsr0h	equ	0xFEA
  6449                           fsr0l	equ	0xFE9
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postinc1	equ	0xFE6
  6453                           postdec1	equ	0xFE5
  6454                           fsr1h	equ	0xFE2
  6455                           fsr1l	equ	0xFE1
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           plusw2	equ	0xFDB
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464                           	psect	cstackCOMRAM
  6465  000001                     __pcstackCOMRAM:
  6466                           	opt stack 0
  6467  000001                     ?__RegsToCANID:
  6468                           	opt stack 0
  6469  000001                     ?i1_WriteTimer0:
  6470                           	opt stack 0
  6471  000001                     ?_fifo_write:
  6472                           	opt stack 0
  6473  000001                     ?_fifo_getFree:
  6474                           	opt stack 0
  6475  000001                     ?__ECANPointBuffer:
  6476                           	opt stack 0
  6477  000001                     ReadUSART@data:
  6478                           	opt stack 0
  6479  000001                     __RegsToCANID@ptr:
  6480                           	opt stack 0
  6481  000001                     fifo_write@f:
  6482                           	opt stack 0
  6483  000001                     fifo_getFree@f:
  6484                           	opt stack 0
  6485  000001                     i1WriteTimer0@timer0:
  6486                           	opt stack 0
  6487                           
  6488                           ; 2 bytes @ 0x0
  6489  000001                     	ds	2
  6490  000003                     ??_fifo_getFree:
  6491  000003                     __RegsToCANID@val:
  6492                           	opt stack 0
  6493  000003                     fifo_write@buf:
  6494                           	opt stack 0
  6495  000003                     i1WriteTimer0@timer:
  6496                           	opt stack 0
  6497                           
  6498                           ; 2 bytes @ 0x2
  6499  000003                     	ds	1
  6500  000004                     __ECANPointBuffer@b:
  6501                           	opt stack 0
  6502                           
  6503                           ; 1 bytes @ 0x3
  6504  000004                     	ds	1
  6505  000005                     __RegsToCANID@type:
  6506                           	opt stack 0
  6507  000005                     __ECANPointBuffer@pt:
  6508                           	opt stack 0
  6509  000005                     fifo_write@nbytes:
  6510                           	opt stack 0
  6511                           
  6512                           ; 4 bytes @ 0x4
  6513  000005                     	ds	1
  6514  000006                     ??__RegsToCANID:
  6515                           
  6516                           ; 0 bytes @ 0x5
  6517  000006                     	ds	2
  6518  000008                     __RegsToCANID@Value:
  6519                           	opt stack 0
  6520                           
  6521                           ; 2 bytes @ 0x7
  6522  000008                     	ds	1
  6523  000009                     ??_fifo_write:
  6524                           
  6525                           ; 0 bytes @ 0x8
  6526  000009                     	ds	1
  6527  00000A                     ?_ECANReceiveMessage:
  6528                           	opt stack 0
  6529  00000A                     ECANReceiveMessage@id:
  6530                           	opt stack 0
  6531                           
  6532                           ; 2 bytes @ 0x9
  6533  00000A                     	ds	2
  6534  00000C                     ECANReceiveMessage@data:
  6535                           	opt stack 0
  6536                           
  6537                           ; 2 bytes @ 0xB
  6538  00000C                     	ds	1
  6539  00000D                     fifo_write@p:
  6540                           	opt stack 0
  6541                           
  6542                           ; 2 bytes @ 0xC
  6543  00000D                     	ds	1
  6544  00000E                     ECANReceiveMessage@dataLen:
  6545                           	opt stack 0
  6546                           
  6547                           ; 1 bytes @ 0xD
  6548  00000E                     	ds	1
  6549  00000F                     ECANReceiveMessage@msgFlags:
  6550                           	opt stack 0
  6551  00000F                     fifo_write@i:
  6552                           	opt stack 0
  6553                           
  6554                           ; 4 bytes @ 0xE
  6555  00000F                     	ds	1
  6556  000010                     ECANReceiveMessage@savedPtr:
  6557                           	opt stack 0
  6558                           
  6559                           ; 2 bytes @ 0xF
  6560  000010                     	ds	2
  6561  000012                     ECANReceiveMessage@i:
  6562                           	opt stack 0
  6563                           
  6564                           ; 1 bytes @ 0x11
  6565  000012                     	ds	1
  6566  000013                     ECANReceiveMessage@mode:
  6567                           	opt stack 0
  6568                           
  6569                           ; 1 bytes @ 0x12
  6570  000013                     	ds	1
  6571  000014                     ECANReceiveMessage@temp:
  6572                           	opt stack 0
  6573                           
  6574                           ; 1 bytes @ 0x13
  6575  000014                     	ds	1
  6576  000015                     ECANReceiveMessage@ptr:
  6577                           	opt stack 0
  6578                           
  6579                           ; 2 bytes @ 0x14
  6580  000015                     	ds	2
  6581  000017                     ??_Interrupt:
  6582                           
  6583                           ; 0 bytes @ 0x16
  6584  000017                     	ds	9
  6585  000020                     Interrupt@c:
  6586                           	opt stack 0
  6587                           
  6588                           ; 1 bytes @ 0x1F
  6589  000020                     	ds	1
  6590  000021                     Interrupt@fail:
  6591                           	opt stack 0
  6592                           
  6593                           ; 1 bytes @ 0x20
  6594  000021                     	ds	1
  6595                           tblptru	equ	0xFF8
  6596                           tblptrh	equ	0xFF7
  6597                           tblptrl	equ	0xFF6
  6598                           tablat	equ	0xFF5
  6599                           prodh	equ	0xFF4
  6600                           prodl	equ	0xFF3
  6601                           intcon	equ	0xFF2
  6602                           indf0	equ	0xFEF
  6603                           postinc0	equ	0xFEE
  6604                           fsr0h	equ	0xFEA
  6605                           fsr0l	equ	0xFE9
  6606                           wreg	equ	0xFE8
  6607                           indf1	equ	0xFE7
  6608                           postinc1	equ	0xFE6
  6609                           postdec1	equ	0xFE5
  6610                           fsr1h	equ	0xFE2
  6611                           fsr1l	equ	0xFE1
  6612                           indf2	equ	0xFDF
  6613                           postinc2	equ	0xFDE
  6614                           postdec2	equ	0xFDD
  6615                           plusw2	equ	0xFDB
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;;
  6621 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6622 ;;
  6623 ;; *************** function _main *****************
  6624 ;; Defined at:
  6625 ;;		line 271 in file "main.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;  argc            2  128[BANK0 ] int 
  6628 ;;  argv            3  130[BANK0 ] PTR PTR unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;  c               1  134[BANK0 ] unsigned char 
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  2  128[BANK0 ] int 
  6633 ;; Registers used:
  6634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : F/1
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6640 ;;      Params:         0       5       0       0       0       0       0
  6641 ;;      Locals:         0       1       0       0       0       0       0
  6642 ;;      Temps:          0       1       0       0       0       0       0
  6643 ;;      Totals:         0       7       0       0       0       0       0
  6644 ;;Total ram usage:        7 bytes
  6645 ;; Hardware stack levels required when called:   11
  6646 ;; This function calls:
  6647 ;;		_fifo_init
  6648 ;;		_init_crc8
  6649 ;;		_Read_b_eep
  6650 ;;		_vscp_restoreDefaults
  6651 ;;		_init
  6652 ;;		_putsUSART
  6653 ;;		_printFirmwareVersion
  6654 ;;		_printMode
  6655 ;;		_fifo_read
  6656 ;;		_ECANSetOperationMode
  6657 ;;		_doModeVerbose
  6658 ;;		_doModeVscp
  6659 ;;		_doModeSLCAN
  6660 ;;		_doModeVscpNode
  6661 ;; This function is called by:
  6662 ;;		Startup code after reset
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text0
  6667  003F5C                     __ptext0:
  6668                           	opt stack 0
  6669  003F5C                     _main:
  6670                           	opt stack 19
  6671                           
  6672                           ;main.c: 273: caps.maxVscpFrames = 1;
  6673                           
  6674                           ;incstack = 0
  6675                           ;incstack = 0
  6676  003F5C  0E01               	movlw	1
  6677  003F5E  0101               	movlb	1	; () banked
  6678  003F60  6FF1               	movwf	_caps& (0+255),b
  6679                           
  6680                           ;main.c: 274: caps.maxCanalFrames = 1;
  6681  003F62  6FF2               	movwf	(_caps+1)& (0+255),b
  6682                           
  6683                           ; BSR set to: 1
  6684                           ;main.c: 279: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6685  003F64  0E01               	movlw	high _serialInputFifo
  6686  003F66  0100               	movlb	0	; () banked
  6687  003F68  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6688  003F6A  0EDD               	movlw	low _serialInputFifo
  6689  003F6C  6F60               	movwf	?_fifo_init& (0+255),b
  6690  003F6E  0E02               	movlw	high _serial_inputBuffer
  6691  003F70  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6692  003F72  0E00               	movlw	low _serial_inputBuffer
  6693  003F74  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6694  003F76  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6695  003F78  0E80               	movlw	128
  6696  003F7A  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6697  003F7C  EC2B  F009         	call	_fifo_init	;wreg free
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;main.c: 280: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6701  003F80  0E01               	movlw	high _canInputFifo
  6702  003F82  0100               	movlb	0	; () banked
  6703  003F84  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6704  003F86  0ECD               	movlw	low _canInputFifo
  6705  003F88  6F60               	movwf	?_fifo_init& (0+255),b
  6706  003F8A  0E04               	movlw	high _can_inputBuffer
  6707  003F8C  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6708  003F8E  0E00               	movlw	low _can_inputBuffer
  6709  003F90  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6710  003F92  0E01               	movlw	1
  6711  003F94  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6712  003F96  0EEE               	movlw	238
  6713  003F98  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6714  003F9A  EC2B  F009         	call	_fifo_init	;wreg free
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;main.c: 283: init_crc8();
  6718  003F9E  ECB4  F00B         	call	_init_crc8	;wreg free
  6719                           
  6720                           ; BSR set to: 1
  6721                           ;main.c: 287: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6722                           ;main.c: 288: ( 0xaa != Read_b_eep(0x02) ) ) {
  6723  003FA2  0100               	movlb	0	; () banked
  6724  003FA4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6725  003FA6  0E01               	movlw	1
  6726  003FA8  6F60               	movwf	?_Read_b_eep& (0+255),b
  6727  003FAA  ECA8  F007         	call	_Read_b_eep	;wreg free
  6728  003FAE  0A55               	xorlw	85
  6729  003FB0  E108               	bnz	l14171
  6730  003FB2  0100               	movlb	0	; () banked
  6731  003FB4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6732  003FB6  0E02               	movlw	2
  6733  003FB8  6F60               	movwf	?_Read_b_eep& (0+255),b
  6734  003FBA  ECA8  F007         	call	_Read_b_eep	;wreg free
  6735  003FBE  0AAA               	xorlw	170
  6736  003FC0  A4D8               	btfss	status,2,c
  6737  003FC2                     l14171:
  6738                           
  6739                           ;main.c: 289: vscp_restoreDefaults();
  6740  003FC2  EC92  F007         	call	_vscp_restoreDefaults	;wreg free
  6741                           
  6742                           ;main.c: 290: }
  6743                           ;main.c: 293: init();
  6744  003FC6  ECD0  F009         	call	_init	;wreg free
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;main.c: 297: _delay((unsigned long)((10)*(40000000/4000.0)));
  6748  003FCA  0E82               	movlw	130
  6749  003FCC  6FE5               	movwf	??_main& (0+255),b
  6750  003FCE  0EDD               	movlw	221
  6751  003FD0                     u23667:
  6752  003FD0  2EE8               	decfsz	wreg,f,c
  6753  003FD2  D7FE               	goto	u23667
  6754  003FD4  2FE5               	decfsz	??_main& (0+255),f,b
  6755  003FD6  D7FC               	goto	u23667
  6756  003FD8  D000               	nop2	
  6757                           
  6758                           ;main.c: 301: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6759  003FDA  0E75               	movlw	high STR_1
  6760  003FDC  0100               	movlb	0	; () banked
  6761  003FDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6762  003FE0  0EB7               	movlw	low STR_1
  6763  003FE2  6F61               	movwf	?_putsUSART& (0+255),b
  6764  003FE4  EC69  F00A         	call	_putsUSART	;wreg free
  6765                           
  6766                           ;main.c: 302: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6767  003FE8  0E6E               	movlw	high STR_2
  6768  003FEA  0100               	movlb	0	; () banked
  6769  003FEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6770  003FEE  0ED6               	movlw	low STR_2
  6771  003FF0  6F61               	movwf	?_putsUSART& (0+255),b
  6772  003FF2  EC69  F00A         	call	_putsUSART	;wreg free
  6773                           
  6774                           ;main.c: 303: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6775  003FF6  0E76               	movlw	high STR_3
  6776  003FF8  0100               	movlb	0	; () banked
  6777  003FFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6778  003FFC  0E49               	movlw	low STR_3
  6779  003FFE  6F61               	movwf	?_putsUSART& (0+255),b
  6780  004000  EC69  F00A         	call	_putsUSART	;wreg free
  6781                           
  6782                           ;main.c: 304: printFirmwareVersion();
  6783  004004  EC62  F00D         	call	_printFirmwareVersion	;wreg free
  6784                           
  6785                           ;main.c: 305: printMode();
  6786  004008  ECDE  F00C         	call	_printMode	;wreg free
  6787                           
  6788                           ;main.c: 309: if ( 0 != mode ) {
  6789  00400C  0101               	movlb	1	; () banked
  6790  00400E  512C               	movf	_mode& (0+255),w,b
  6791  004010  E03B               	bz	l14205
  6792                           
  6793                           ; BSR set to: 1
  6794                           ;main.c: 311: uint8_t c;
  6795                           ;main.c: 313: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6796  004012  0E6F               	movlw	high STR_4
  6797  004014  0100               	movlb	0	; () banked
  6798  004016  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6799  004018  0EEF               	movlw	low STR_4
  6800  00401A  6F61               	movwf	?_putsUSART& (0+255),b
  6801  00401C  EC69  F00A         	call	_putsUSART	;wreg free
  6802                           
  6803                           ;main.c: 315: timekeeper = 0;
  6804  004020  0101               	movlb	1	; () banked
  6805  004022  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  6806  004024  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6807  004026  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6808  004028  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6809                           
  6810                           ; BSR set to: 1
  6811                           ;main.c: 316: ledFunctionality = 6;
  6812  00402A  0E06               	movlw	6
  6813  00402C  6E32               	movwf	_ledFunctionality,c
  6814                           
  6815                           ;main.c: 317: while (timekeeper < 3000) {
  6816  00402E  D022               	goto	l14203
  6817  004030                     l439:
  6818                           
  6819                           ; BSR set to: 1
  6820  004030  0004               	clrwdt		;# 
  6821                           
  6822                           ;main.c: 319: (INTCONbits.GIE = 0);
  6823  004032  9EF2               	bcf	intcon,7,c	;volatile
  6824                           
  6825                           ;main.c: 320: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6826  004034  0E01               	movlw	high _serialInputFifo
  6827  004036  0100               	movlb	0	; () banked
  6828  004038  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6829  00403A  0EDD               	movlw	low _serialInputFifo
  6830  00403C  6F60               	movwf	?_fifo_read& (0+255),b
  6831  00403E  0E00               	movlw	high main@c
  6832  004040  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6833  004042  0EE6               	movlw	low main@c
  6834  004044  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6835  004046  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6836  004048  0E01               	movlw	1
  6837  00404A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6838  00404C  EC67  F012         	call	_fifo_read	;wreg free
  6839  004050  0560               	decf	?_fifo_read& (0+255),w,b
  6840  004052  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6841  004054  E10E               	bnz	l440
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;main.c: 321: (INTCONbits.GIE = 1);
  6845  004056  8EF2               	bsf	intcon,7,c	;volatile
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;main.c: 322: if ('v' == c) {
  6849  004058  51E6               	movf	main@c& (0+255),w,b
  6850  00405A  0A76               	xorlw	118
  6851  00405C  E10A               	bnz	l440
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;main.c: 323: mode = 0;
  6855  00405E  0101               	movlb	1	; () banked
  6856  004060  6B2C               	clrf	_mode& (0+255),b
  6857                           
  6858                           ; BSR set to: 1
  6859                           ;main.c: 324: putsUSART((char *) "Temporary verbose mode set\r\n");
  6860  004062  0E77               	movlw	high STR_5
  6861  004064  0100               	movlb	0	; () banked
  6862  004066  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6863  004068  0E70               	movlw	low STR_5
  6864  00406A  6F61               	movwf	?_putsUSART& (0+255),b
  6865  00406C  EC69  F00A         	call	_putsUSART	;wreg free
  6866                           
  6867                           ;main.c: 325: break;
  6868  004070  D00B               	goto	l14205
  6869  004072                     l440:
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 326: }
  6873                           ;main.c: 327: }
  6874                           ;main.c: 328: (INTCONbits.GIE = 1);
  6875  004072  8EF2               	bsf	intcon,7,c	;volatile
  6876  004074                     l14203:
  6877  004074  0EB8               	movlw	184
  6878  004076  0101               	movlb	1	; () banked
  6879  004078  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  6880  00407A  0E0B               	movlw	11
  6881  00407C  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6882  00407E  0E00               	movlw	0
  6883  004080  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6884  004082  0E00               	movlw	0
  6885  004084  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6886  004086  E3D4               	bnc	l439
  6887  004088                     l14205:
  6888                           
  6889                           ;main.c: 329: }
  6890                           ;main.c: 330: }
  6891                           ;main.c: 332: ledFunctionality = 1;
  6892  004088  0E01               	movlw	1
  6893  00408A  6E32               	movwf	_ledFunctionality,c
  6894                           
  6895                           ;main.c: 337: switch ( Read_b_eep(0x07) ) {
  6896  00408C  D019               	goto	l14221
  6897  00408E                     l444:
  6898                           
  6899                           ;main.c: 340: bSilent = 0;
  6900  00408E  6A30               	clrf	_bSilent,c
  6901                           
  6902                           ;main.c: 341: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6903  004090  0E00               	movlw	0
  6904  004092  ECC6  F007         	call	_ECANSetOperationMode
  6905                           
  6906                           ;main.c: 342: break;
  6907  004096  D023               	goto	l450
  6908  004098                     l14209:
  6909                           
  6910                           ;main.c: 345: bSilent = 1;
  6911  004098  0E01               	movlw	1
  6912  00409A  6E30               	movwf	_bSilent,c
  6913                           
  6914                           ;main.c: 346: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6915  00409C  0E00               	movlw	0
  6916  00409E  ECC6  F007         	call	_ECANSetOperationMode
  6917                           
  6918                           ;main.c: 347: break;
  6919  0040A2  D01D               	goto	l450
  6920  0040A4                     l447:
  6921                           
  6922                           ;main.c: 350: bSilent = 0;
  6923  0040A4  6A30               	clrf	_bSilent,c
  6924                           
  6925                           ;main.c: 351: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  6926  0040A6  0E60               	movlw	96
  6927  0040A8  ECC6  F007         	call	_ECANSetOperationMode
  6928                           
  6929                           ;main.c: 352: break;
  6930  0040AC  D018               	goto	l450
  6931  0040AE                     l448:
  6932                           
  6933                           ;main.c: 355: bSilent = 0;
  6934  0040AE  6A30               	clrf	_bSilent,c
  6935                           
  6936                           ;main.c: 356: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  6937  0040B0  0E40               	movlw	64
  6938  0040B2  ECC6  F007         	call	_ECANSetOperationMode
  6939                           
  6940                           ;main.c: 357: break;
  6941  0040B6  D013               	goto	l450
  6942  0040B8                     l14217:
  6943                           
  6944                           ;main.c: 360: ECANSetOperationMode( 0x20 );
  6945  0040B8  0E20               	movlw	32
  6946  0040BA  ECC6  F007         	call	_ECANSetOperationMode
  6947                           
  6948                           ;main.c: 361: break;
  6949  0040BE  D00F               	goto	l450
  6950  0040C0                     l14221:
  6951  0040C0  0100               	movlb	0	; () banked
  6952  0040C2  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6953  0040C4  0E07               	movlw	7
  6954  0040C6  6F60               	movwf	?_Read_b_eep& (0+255),b
  6955  0040C8  ECA8  F007         	call	_Read_b_eep	;wreg free
  6956                           
  6957                           ; Switch size 1, requested type "space"
  6958                           ; Number of cases is 4, Range of values is 1 to 4
  6959                           ; switch strategies available:
  6960                           ; Name         Instructions Cycles
  6961                           ; simple_byte           13     7 (average)
  6962                           ;	Chosen strategy is simple_byte
  6963  0040CC  0A01               	xorlw	1	; case 1
  6964  0040CE  E0DF               	bz	l444
  6965  0040D0  0A03               	xorlw	3	; case 2
  6966  0040D2  E0E2               	bz	l14209
  6967  0040D4  0A01               	xorlw	1	; case 3
  6968  0040D6  E0E6               	bz	l447
  6969  0040D8  0A07               	xorlw	7	; case 4
  6970  0040DA  E0E9               	bz	l448
  6971  0040DC  D7ED               	goto	l14217
  6972  0040DE                     l450:
  6973  0040DE  0004               	clrwdt		;# 
  6974                           
  6975                           ;main.c: 374: if (COMSTATbits.TXBO) {
  6976  0040E0  AA74               	btfss	3956,5,c	;volatile
  6977  0040E2  D002               	goto	l451
  6978                           
  6979                           ;main.c: 376: ledFunctionality = 6;
  6980  0040E4  0E06               	movlw	6
  6981  0040E6  D009               	goto	L1
  6982  0040E8                     l451:
  6983                           
  6984                           ;main.c: 378: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6985  0040E8  B874               	btfsc	3956,4,c	;volatile
  6986  0040EA  D002               	goto	l14227
  6987  0040EC  A674               	btfss	3956,3,c	;volatile
  6988  0040EE  D002               	goto	l453
  6989  0040F0                     l14227:
  6990                           
  6991                           ;main.c: 380: ledFunctionality = 5;
  6992  0040F0  0E05               	movlw	5
  6993  0040F2  D003               	goto	L1
  6994  0040F4                     l453:
  6995                           
  6996                           ;main.c: 384: ledFunctionality = 4;
  6997  0040F4  0E04               	movlw	4
  6998                           
  6999                           ;main.c: 382: else if (COMSTATbits.EWARN) {
  7000  0040F6  A074               	btfss	3956,0,c	;volatile
  7001                           
  7002                           ;main.c: 386: else {
  7003                           ;main.c: 388: ledFunctionality = 1;
  7004                           
  7005                           ;main.c: 385: }
  7006  0040F8  0E01               	movlw	1
  7007  0040FA                     L1:
  7008  0040FA  6E32               	movwf	_ledFunctionality,c
  7009                           
  7010                           ;main.c: 389: }
  7011                           ;main.c: 392: if (COMSTATbits.RXBnOVFL) {
  7012  0040FC  AC74               	btfss	3956,6,c	;volatile
  7013  0040FE  D007               	goto	l14239
  7014                           
  7015                           ;main.c: 393: can_receiveOverruns++;
  7016  004100  0101               	movlb	1	; () banked
  7017  004102  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  7018  004104  0E00               	movlw	0
  7019  004106  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  7020  004108  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  7021  00410A  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  7022                           
  7023                           ; BSR set to: 1
  7024                           ;main.c: 394: COMSTATbits.RXBnOVFL = 0;
  7025  00410C  9C74               	bcf	3956,6,c	;volatile
  7026  00410E                     l14239:
  7027                           
  7028                           ;main.c: 395: }
  7029                           ;main.c: 399: if ( RCSTAbits.OERR ) {
  7030  00410E  A2AB               	btfss	4011,1,c	;volatile
  7031  004110  D002               	goto	l460
  7032                           
  7033                           ;main.c: 400: RCSTAbits.CREN = 0;
  7034  004112  98AB               	bcf	4011,4,c	;volatile
  7035                           
  7036                           ;main.c: 401: RCSTAbits.CREN = 1;
  7037  004114  88AB               	bsf	4011,4,c	;volatile
  7038  004116                     l460:
  7039                           
  7040                           ;main.c: 402: }
  7041                           ;main.c: 404: if (0 == mode) {
  7042  004116  0101               	movlb	1	; () banked
  7043  004118  672C               	tstfsz	_mode& (0+255),b
  7044  00411A  D003               	goto	l14245
  7045                           
  7046                           ; BSR set to: 1
  7047                           ;main.c: 405: doModeVerbose();
  7048  00411C  ECDF  F029         	call	_doModeVerbose	;wreg free
  7049                           
  7050                           ;main.c: 406: }
  7051  004120  D7DE               	goto	l450
  7052  004122                     l14245:
  7053                           
  7054                           ; BSR set to: 1
  7055                           ;main.c: 407: else if (1 == mode) {
  7056  004122  052C               	decf	_mode& (0+255),w,b
  7057  004124  E103               	bnz	l14249
  7058  004126                     l14247:
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;main.c: 408: doModeVscp();
  7062  004126  ECF6  F01C         	call	_doModeVscp	;wreg free
  7063                           
  7064                           ;main.c: 409: }
  7065  00412A  D7D9               	goto	l450
  7066  00412C                     l14249:
  7067                           
  7068                           ; BSR set to: 1
  7069                           ;main.c: 410: else if (2 == mode) {
  7070  00412C  512C               	movf	_mode& (0+255),w,b
  7071  00412E  0A02               	xorlw	2
  7072  004130  E103               	bnz	l14253
  7073                           
  7074                           ; BSR set to: 1
  7075                           ;main.c: 411: doModeSLCAN();
  7076  004132  EC56  F024         	call	_doModeSLCAN	;wreg free
  7077                           
  7078                           ;main.c: 412: }
  7079  004136  D7D3               	goto	l450
  7080  004138                     l14253:
  7081                           
  7082                           ; BSR set to: 1
  7083                           ;main.c: 413: else if (3 == mode) {
  7084  004138  512C               	movf	_mode& (0+255),w,b
  7085  00413A  0A03               	xorlw	3
  7086  00413C  E1F4               	bnz	l14247
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;main.c: 414: doModeVscpNode();
  7090  00413E  EC8E  F007         	call	_doModeVscpNode	;wreg free
  7091                           
  7092                           ;main.c: 415: }
  7093  004142  D7CD               	goto	l450
  7094  004144                     __end_of_main:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           indf0	equ	0xFEF
  7104                           postinc0	equ	0xFEE
  7105                           fsr0h	equ	0xFEA
  7106                           fsr0l	equ	0xFE9
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           postinc1	equ	0xFE6
  7110                           postdec1	equ	0xFE5
  7111                           fsr1h	equ	0xFE2
  7112                           fsr1l	equ	0xFE1
  7113                           indf2	equ	0xFDF
  7114                           postinc2	equ	0xFDE
  7115                           postdec2	equ	0xFDD
  7116                           plusw2	equ	0xFDB
  7117                           fsr2h	equ	0xFDA
  7118                           fsr2l	equ	0xFD9
  7119                           status	equ	0xFD8
  7120                           
  7121 ;; *************** function _doModeVscpNode *****************
  7122 ;; Defined at:
  7123 ;;		line 1772 in file "main.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;		None               void
  7130 ;; Registers used:
  7131 ;;		None
  7132 ;; Tracked objects:
  7133 ;;		On entry : F/1
  7134 ;;		On exit  : F/1
  7135 ;;		Unchanged: F/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7137 ;;      Params:         0       0       0       0       0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0
  7140 ;;      Totals:         0       0       0       0       0       0       0
  7141 ;;Total ram usage:        0 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    3
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_main
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text1
  7152  000F1C                     __ptext1:
  7153                           	opt stack 0
  7154  000F1C                     _doModeVscpNode:
  7155                           	opt stack 26
  7156                           
  7157                           ; BSR set to: 1
  7158                           
  7159                           ; BSR set to: 1
  7160                           ;incstack = 0
  7161                           ;incstack = 0
  7162  000F1C  0012               	return	
  7163  000F1E                     __end_of_doModeVscpNode:
  7164                           	opt stack 0
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodh	equ	0xFF4
  7170                           prodl	equ	0xFF3
  7171                           intcon	equ	0xFF2
  7172                           indf0	equ	0xFEF
  7173                           postinc0	equ	0xFEE
  7174                           fsr0h	equ	0xFEA
  7175                           fsr0l	equ	0xFE9
  7176                           wreg	equ	0xFE8
  7177                           indf1	equ	0xFE7
  7178                           postinc1	equ	0xFE6
  7179                           postdec1	equ	0xFE5
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           plusw2	equ	0xFDB
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _doModeSLCAN *****************
  7191 ;; Defined at:
  7192 ;;		line 1554 in file "main.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;		None
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  id              4   63[BANK0 ] unsigned long 
  7197 ;;  dlc             1   67[BANK0 ] unsigned char 
  7198 ;;  rv              1   69[BANK0 ] enum E15660
  7199 ;;  c               1   68[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;		None               void
  7202 ;; Registers used:
  7203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : F/1
  7206 ;;		On exit  : F/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7209 ;;      Params:         0       0       0       0       0       0       0
  7210 ;;      Locals:         0       7       0       0       0       0       0
  7211 ;;      Temps:          0       7       0       0       0       0       0
  7212 ;;      Totals:         0      14       0       0       0       0       0
  7213 ;;Total ram usage:       14 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    7
  7216 ;; This function calls:
  7217 ;;		_putsUSART
  7218 ;;		_fifo_read
  7219 ;;		_ECANSetOperationMode
  7220 ;;		_Busy_eep
  7221 ;;		_Write_b_eep
  7222 ;;		_memset
  7223 ;;		_receiveSendEventSLCAN
  7224 ;;		_strlen
  7225 ;;		_hexStringToBytes
  7226 ;;		_memcpy
  7227 ;;		_sendCANFrame
  7228 ;; This function is called by:
  7229 ;;		_main
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text2
  7234  0048AC                     __ptext2:
  7235                           	opt stack 0
  7236  0048AC                     _doModeSLCAN:
  7237                           	opt stack 22
  7238                           
  7239                           ; BSR set to: 1
  7240                           ;main.c: 1555: uint8_t c;
  7241                           ;main.c: 1556: BOOL rv = 0;
  7242                           
  7243                           ; BSR set to: 1
  7244                           ;incstack = 0
  7245                           ;incstack = 0
  7246  0048AC  0100               	movlb	0	; () banked
  7247  0048AE  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;main.c: 1559: receiveSendEventSLCAN();
  7251  0048B0  EC81  F01A         	call	_receiveSendEventSLCAN	;wreg free
  7252                           
  7253                           ;main.c: 1562: (INTCONbits.GIE = 0);
  7254  0048B4  9EF2               	bcf	intcon,7,c	;volatile
  7255                           
  7256                           ;main.c: 1564: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7257  0048B6  0E01               	movlw	high _serialInputFifo
  7258  0048B8  0100               	movlb	0	; () banked
  7259  0048BA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7260  0048BC  0EDD               	movlw	low _serialInputFifo
  7261  0048BE  6F60               	movwf	?_fifo_read& (0+255),b
  7262  0048C0  0E00               	movlw	high doModeSLCAN@c
  7263  0048C2  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7264  0048C4  0EA4               	movlw	low doModeSLCAN@c
  7265  0048C6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7266  0048C8  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7267  0048CA  0E01               	movlw	1
  7268  0048CC  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7269  0048CE  EC67  F012         	call	_fifo_read	;wreg free
  7270  0048D2  0560               	decf	?_fifo_read& (0+255),w,b
  7271  0048D4  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7272  0048D6  E001 D1CA          	bnz	l15541
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;main.c: 1567: (INTCONbits.GIE = 1);
  7276  0048DA  8EF2               	bsf	intcon,7,c	;volatile
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;main.c: 1569: if (0x0d != c) {
  7280  0048DC  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7281  0048DE  0A0D               	xorlw	13
  7282  0048E0  E101 D17D          	bz	l15529
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;main.c: 1570: cmdbuf[ pos ] = c;
  7286  0048E4  0E2D               	movlw	low _cmdbuf
  7287  0048E6  2434               	addwf	_pos,w,c
  7288  0048E8  6ED9               	movwf	fsr2l,c
  7289  0048EA  6ADA               	clrf	fsr2h,c
  7290  0048EC  0E01               	movlw	high _cmdbuf
  7291  0048EE  22DA               	addwfc	fsr2h,f,c
  7292  0048F0  0100               	movlb	0	; () banked
  7293  0048F2  C0A4  FFDF         	movff	doModeSLCAN@c,indf2
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;main.c: 1571: pos++;
  7297  0048F6  2A34               	incf	_pos,f,c
  7298  0048F8  D1BB               	goto	l781
  7299  0048FA                     l15401:
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;main.c: 1579: if (1 == strlen(cmdbuf)) {
  7303  0048FA  0E01               	movlw	high _cmdbuf
  7304  0048FC  0100               	movlb	0	; () banked
  7305  0048FE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7306  004900  0E2D               	movlw	low _cmdbuf
  7307  004902  6F60               	movwf	?_strlen& (0+255),b
  7308  004904  EC4B  F009         	call	_strlen	;wreg free
  7309  004908  0560               	decf	?_strlen& (0+255),w,b
  7310  00490A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7311  00490C  E001 D196          	bnz	l15531
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;main.c: 1580: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7315  004910  0E7A               	movlw	high STR_164
  7316  004912  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7317  004914  0E03               	movlw	low STR_164
  7318  004916  6F61               	movwf	?_putsUSART& (0+255),b
  7319  004918  EC69  F00A         	call	_putsUSART	;wreg free
  7320  00491C                     l15405:
  7321                           
  7322                           ;main.c: 1581: rv = 1;
  7323  00491C  0E01               	movlw	1
  7324  00491E  D114               	goto	L4
  7325  004920                     l15407:
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;main.c: 1587: if (1 == strlen(cmdbuf)) {
  7329  004920  0E01               	movlw	high _cmdbuf
  7330  004922  0100               	movlb	0	; () banked
  7331  004924  6F61               	movwf	(?_strlen+1)& (0+255),b
  7332  004926  0E2D               	movlw	low _cmdbuf
  7333  004928  6F60               	movwf	?_strlen& (0+255),b
  7334  00492A  EC4B  F009         	call	_strlen	;wreg free
  7335  00492E  0560               	decf	?_strlen& (0+255),w,b
  7336  004930  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7337  004932  E001 D183          	bnz	l15531
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;main.c: 1588: putsUSART((char *) "V1011\r\n");
  7341  004936  0E7B               	movlw	high STR_165
  7342  004938  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7343  00493A  0EB2               	movlw	low STR_165
  7344  00493C  6F61               	movwf	?_putsUSART& (0+255),b
  7345  00493E  EC69  F00A         	call	_putsUSART	;wreg free
  7346  004942  D7EC               	goto	l15405
  7347  004944                     l15413:
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;main.c: 1595: if (1 == strlen(cmdbuf)) {
  7351  004944  0E01               	movlw	high _cmdbuf
  7352  004946  0100               	movlb	0	; () banked
  7353  004948  6F61               	movwf	(?_strlen+1)& (0+255),b
  7354  00494A  0E2D               	movlw	low _cmdbuf
  7355  00494C  6F60               	movwf	?_strlen& (0+255),b
  7356  00494E  EC4B  F009         	call	_strlen	;wreg free
  7357  004952  0560               	decf	?_strlen& (0+255),w,b
  7358  004954  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7359  004956  E001 D171          	bnz	l15531
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;main.c: 1596: putsUSART((char *) "N1977\r\n");
  7363  00495A  0E7B               	movlw	high STR_166
  7364  00495C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7365  00495E  0EBA               	movlw	low STR_166
  7366  004960  6F61               	movwf	?_putsUSART& (0+255),b
  7367  004962  EC69  F00A         	call	_putsUSART	;wreg free
  7368  004966  D7DA               	goto	l15405
  7369  004968                     l15419:
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;main.c: 1605: bInitiated = 1;
  7373  004968  0E01               	movlw	1
  7374  00496A  6E2D               	movwf	_bInitiated,c
  7375                           
  7376                           ;main.c: 1606: rv = 1;
  7377  00496C  D0B8               	goto	L3
  7378  00496E                     l791:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 1611: if (!bOpen) {
  7382  00496E  662F               	tstfsz	_bOpen,c
  7383  004970  D003               	goto	l15423
  7384                           
  7385                           ; BSR set to: 0
  7386                           ;main.c: 1612: bInitiated = 1;
  7387  004972  0E01               	movlw	1
  7388  004974  6E2D               	movwf	_bInitiated,c
  7389                           
  7390                           ;main.c: 1613: rv = 1;
  7391  004976  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7392  004978                     l15423:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;main.c: 1618: if (1 == strlen(cmdbuf)) {
  7396  004978  0E01               	movlw	high _cmdbuf
  7397  00497A  0100               	movlb	0	; () banked
  7398  00497C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7399  00497E  0E2D               	movlw	low _cmdbuf
  7400  004980  6F60               	movwf	?_strlen& (0+255),b
  7401  004982  EC4B  F009         	call	_strlen	;wreg free
  7402  004986  0560               	decf	?_strlen& (0+255),w,b
  7403  004988  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7404  00498A  E001 D157          	bnz	l15531
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;main.c: 1619: if (!bOpen && bInitiated) {
  7408  00498E  662F               	tstfsz	_bOpen,c
  7409  004990  D155               	goto	l15531
  7410                           
  7411                           ; BSR set to: 0
  7412  004992  502D               	movf	_bInitiated,w,c
  7413  004994  E101 D152          	bz	l15531
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;main.c: 1620: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7417  004998  0E00               	movlw	0
  7418  00499A  ECC6  F007         	call	_ECANSetOperationMode
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;main.c: 1621: bOpen = 1;
  7422  00499E  0E01               	movlw	1
  7423  0049A0  6E2F               	movwf	_bOpen,c
  7424  0049A2  D7BC               	goto	l15405
  7425  0049A4                     l15435:
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;main.c: 1629: if (1 == strlen(cmdbuf)) {
  7429  0049A4  0E01               	movlw	high _cmdbuf
  7430  0049A6  0100               	movlb	0	; () banked
  7431  0049A8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7432  0049AA  0E2D               	movlw	low _cmdbuf
  7433  0049AC  6F60               	movwf	?_strlen& (0+255),b
  7434  0049AE  EC4B  F009         	call	_strlen	;wreg free
  7435  0049B2  0560               	decf	?_strlen& (0+255),w,b
  7436  0049B4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7437  0049B6  E001 D141          	bnz	l15531
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;main.c: 1630: if (bOpen) {
  7441  0049BA  502F               	movf	_bOpen,w,c
  7442  0049BC  E0AF               	bz	l15405
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;main.c: 1631: ECANSetOperationMode(0x20);
  7446  0049BE  0E20               	movlw	32
  7447  0049C0  ECC6  F007         	call	_ECANSetOperationMode
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;main.c: 1632: bOpen = 0;
  7451  0049C4  6A2F               	clrf	_bOpen,c
  7452  0049C6  D7AA               	goto	l15405
  7453  0049C8                     l15445:
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;main.c: 1645: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7457  0049C8  502F               	movf	_bOpen,w,c
  7458  0049CA  E101 D137          	bz	l15531
  7459                           
  7460                           ; BSR set to: 0
  7461  0049CE  0E01               	movlw	high _cmdbuf
  7462  0049D0  0100               	movlb	0	; () banked
  7463  0049D2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7464  0049D4  0E2D               	movlw	low _cmdbuf
  7465  0049D6  6F60               	movwf	?_strlen& (0+255),b
  7466  0049D8  EC4B  F009         	call	_strlen	;wreg free
  7467  0049DC  0E0A               	movlw	10
  7468  0049DE  5D60               	subwf	?_strlen& (0+255),w,b
  7469  0049E0  0E00               	movlw	0
  7470  0049E2  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7471  0049E4  E201 D12A          	bnc	l15531
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;main.c: 1647: uint32_t id;
  7475                           ;main.c: 1648: uint8_t dlc;
  7476                           ;main.c: 1650: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7477  0049E8  0E01               	movlw	high _wrkbuf
  7478  0049EA  0100               	movlb	0	; () banked
  7479  0049EC  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7480  0049EE  0E7D               	movlw	low _wrkbuf
  7481  0049F0  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7482  0049F2  0E50               	movlw	80
  7483  0049F4  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7484  0049F6  0E01               	movlw	high _cmdbuf
  7485  0049F8  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7486  0049FA  0E2D               	movlw	low _cmdbuf
  7487  0049FC  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7488  0049FE  EC40  F00E         	call	_hexStringToBytes	;wreg free
  7489  004A02  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7490  004A04  0E05               	movlw	5
  7491  004A06  5D98               	subwf	??_doModeSLCAN& (0+255),w,b
  7492  004A08  E201 D118          	bnc	l15531
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;main.c: 1652: }
  7496                           ;main.c: 1654: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7497  004A0C  C180  F098         	movff	_wrkbuf+3,??_doModeSLCAN
  7498  004A10  0E08               	movlw	8
  7499  004A12  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7500  004A14  C17F  F099         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7501  004A18  0E10               	movlw	16
  7502  004A1A  2799               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7503  004A1C  C17E  F09A         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7504  004A20  0E18               	movlw	24
  7505  004A22  279A               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7506  004A24  C17D  F09B         	movff	_wrkbuf,??_doModeSLCAN+3
  7507  004A28  0100               	movlb	0	; () banked
  7508  004A2A  6B9C               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7509  004A2C  6B9D               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7510  004A2E  6B9E               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7511  004A30  2B9A               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7512  004A32  D001               	goto	u20350
  7513  004A34                     u20355:
  7514  004A34  D91E               	call	PL88	;call to abstracted procedure
  7515  004A36                     u20350:
  7516  004A36  2F9A               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7517  004A38  D7FD               	goto	u20355
  7518  004A3A  2B99               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7519  004A3C  D001               	goto	u20360
  7520  004A3E                     u20365:
  7521  004A3E  D919               	call	PL88	;call to abstracted procedure
  7522  004A40                     u20360:
  7523  004A40  2F99               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7524  004A42  D7FD               	goto	u20365
  7525  004A44  2B98               	incf	??_doModeSLCAN& (0+255),f,b
  7526  004A46  D001               	goto	u20370
  7527  004A48                     u20375:
  7528  004A48  D914               	call	PL88	;call to abstracted procedure
  7529  004A4A                     u20370:
  7530  004A4A  2F98               	decfsz	??_doModeSLCAN& (0+255),f,b
  7531  004A4C  D7FD               	goto	u20375
  7532  004A4E  C09E  F0A2         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7533  004A52  C09D  F0A1         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7534  004A56  C09C  F0A0         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7535  004A5A  C09B  F09F         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;main.c: 1655: dlc = vscpData[4];
  7539  004A5E  C1E9  F0A3         	movff	_vscpData+4,doModeSLCAN@dlc
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;main.c: 1658: if (dlc > 8) break;
  7543  004A62  0E08               	movlw	8
  7544  004A64  65A3               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7545  004A66  D001               	goto	l15461
  7546  004A68  D0E9               	goto	l15531
  7547  004A6A                     l15461:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;main.c: 1659: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7551  004A6A  90D8               	bcf	status,0,c
  7552  004A6C  35A3               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7553  004A6E  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7554  004A70  6B99               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7555  004A72  3799               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7556  004A74  0E0A               	movlw	10
  7557  004A76  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7558  004A78  0E00               	movlw	0
  7559  004A7A  2399               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7560  004A7C  0E01               	movlw	high _cmdbuf
  7561  004A7E  0100               	movlb	0	; () banked
  7562  004A80  6F61               	movwf	(?_strlen+1)& (0+255),b
  7563  004A82  0E2D               	movlw	low _cmdbuf
  7564  004A84  6F60               	movwf	?_strlen& (0+255),b
  7565  004A86  EC4B  F009         	call	_strlen	;wreg free
  7566  004A8A  5198               	movf	??_doModeSLCAN& (0+255),w,b
  7567  004A8C  5D60               	subwf	?_strlen& (0+255),w,b
  7568  004A8E  5199               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7569  004A90  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7570  004A92  E201 D0D3          	bnc	l15531
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;main.c: 1661: memcpy(vscpData, vscpData + 5, dlc);
  7574  004A96  0E01               	movlw	high _vscpData
  7575  004A98  0100               	movlb	0	; () banked
  7576  004A9A  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7577  004A9C  0EE5               	movlw	low _vscpData
  7578  004A9E  6F60               	movwf	?_memcpy& (0+255),b
  7579  004AA0  0EEA               	movlw	low (_vscpData+5)
  7580  004AA2  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7581  004AA4  0E01               	movlw	high (_vscpData+5)
  7582  004AA6  6F99               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7583  004AA8  C098  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7584  004AAC  C099  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7585  004AB0  C0A3  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7586  004AB4  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7587  004AB6  EC6B  F009         	call	_memcpy	;wreg free
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;main.c: 1663: rv = sendCANFrame(id, dlc, vscpData);
  7591  004ABA  C09F  F091         	movff	doModeSLCAN@id,?_sendCANFrame
  7592  004ABE  C0A0  F092         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7593  004AC2  C0A1  F093         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7594  004AC6  C0A2  F094         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7595  004ACA  C0A3  F095         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7596  004ACE  0E01               	movlw	high _vscpData
  7597  004AD0  0100               	movlb	0	; () banked
  7598  004AD2  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
  7599  004AD4  0EE5               	movlw	low _vscpData
  7600  004AD6  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
  7601  004AD8  ECB1  F008         	call	_sendCANFrame	;wreg free
  7602  004ADC  D035               	goto	L4
  7603  004ADE                     L3:
  7604  004ADE  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7605  004AE0  D0AD               	goto	l15531
  7606  004AE2                     l15469:
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;main.c: 1678: if (bOpen && (strlen(cmdbuf) == 1)) {
  7610  004AE2  502F               	movf	_bOpen,w,c
  7611  004AE4  E101 D0AA          	bz	l15531
  7612                           
  7613                           ; BSR set to: 0
  7614  004AE8  0E01               	movlw	high _cmdbuf
  7615  004AEA  0100               	movlb	0	; () banked
  7616  004AEC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7617  004AEE  0E2D               	movlw	low _cmdbuf
  7618  004AF0  6F60               	movwf	?_strlen& (0+255),b
  7619  004AF2  EC4B  F009         	call	_strlen	;wreg free
  7620  004AF6  0560               	decf	?_strlen& (0+255),w,b
  7621  004AF8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7622  004AFA  E001 D09F          	bnz	l15531
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;main.c: 1679: putsUSART((char *) "F00\r\n");
  7626  004AFE  0E7C               	movlw	high STR_167
  7627  004B00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7628  004B02  0E5E               	movlw	low STR_167
  7629  004B04  6F61               	movwf	?_putsUSART& (0+255),b
  7630  004B06  EC69  F00A         	call	_putsUSART	;wreg free
  7631  004B0A  D098               	goto	l15531
  7632  004B0C                     l15479:
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;main.c: 1695: if (2 == strlen(cmdbuf)) {
  7636  004B0C  0E01               	movlw	high _cmdbuf
  7637  004B0E  0100               	movlb	0	; () banked
  7638  004B10  6F61               	movwf	(?_strlen+1)& (0+255),b
  7639  004B12  0E2D               	movlw	low _cmdbuf
  7640  004B14  6F60               	movwf	?_strlen& (0+255),b
  7641  004B16  EC4B  F009         	call	_strlen	;wreg free
  7642  004B1A  5160               	movf	?_strlen& (0+255),w,b
  7643  004B1C  0A02               	xorlw	2
  7644  004B1E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7645  004B20  E001 D08C          	bnz	l15531
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;main.c: 1696: if (!bOpen) {
  7649  004B24  662F               	tstfsz	_bOpen,c
  7650  004B26  D08A               	goto	l15531
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;main.c: 1697: if ('0' == cmdbuf[1]) {
  7654  004B28  0101               	movlb	1	; () banked
  7655  004B2A  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7656  004B2C  0A30               	xorlw	48
  7657  004B2E  E10E               	bnz	l15491
  7658                           
  7659                           ; BSR set to: 1
  7660                           ;main.c: 1698: nTimeStamp = 0;
  7661  004B30  6A33               	clrf	_nTimeStamp,c
  7662                           
  7663                           ; BSR set to: 1
  7664                           ;main.c: 1700: (Busy_eep(), Write_b_eep(0x05,0));
  7665  004B32  EC8F  F007         	call	_Busy_eep	;wreg free
  7666  004B36  0100               	movlb	0	; () banked
  7667  004B38  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7668  004B3A  0E05               	movlw	5
  7669  004B3C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7670  004B3E  0E00               	movlw	0
  7671  004B40  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7672  004B42  EC5F  F008         	call	_Write_b_eep	;wreg free
  7673  004B46  D6EA               	goto	l15405
  7674  004B48                     L4:
  7675  004B48  0100               	movlb	0	; () banked
  7676  004B4A  D7C9               	goto	L3
  7677  004B4C                     l15491:
  7678                           
  7679                           ; BSR set to: 1
  7680  004B4C  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7681  004B4E  0A31               	xorlw	49
  7682  004B50  E10D               	bnz	l816
  7683                           
  7684                           ; BSR set to: 1
  7685                           ;main.c: 1703: nTimeStamp = 1;
  7686  004B52  0E01               	movlw	1
  7687  004B54  6E33               	movwf	_nTimeStamp,c
  7688                           
  7689                           ; BSR set to: 1
  7690                           ;main.c: 1705: (Busy_eep(), Write_b_eep(0x05,1));
  7691  004B56  EC8F  F007         	call	_Busy_eep	;wreg free
  7692  004B5A  0100               	movlb	0	; () banked
  7693  004B5C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7694  004B5E  0E05               	movlw	5
  7695  004B60  6F60               	movwf	?_Write_b_eep& (0+255),b
  7696  004B62  0E01               	movlw	1
  7697  004B64  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7698  004B66  EC5F  F008         	call	_Write_b_eep	;wreg free
  7699  004B6A  D6D8               	goto	l15405
  7700  004B6C                     l816:
  7701                           
  7702                           ; BSR set to: 1
  7703                           ;main.c: 1709: rv = 0;
  7704  004B6C  0100               	movlb	0	; () banked
  7705  004B6E  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7706  004B70  D065               	goto	l15531
  7707  004B72                     l15499:
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;main.c: 1717: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7711  004B72  EC8F  F007         	call	_Busy_eep	;wreg free
  7712  004B76  0100               	movlb	0	; () banked
  7713  004B78  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7714  004B7A  0E01               	movlw	1
  7715  004B7C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7716  004B7E  0EFF               	movlw	255
  7717  004B80  6962               	setf	(?_Write_b_eep+2)& (0+255),b
  7718  004B82  EC5F  F008         	call	_Write_b_eep	;wreg free
  7719  004B86  00FF               	reset		;# 
  7720                           
  7721                           ;main.c: 1719: break;
  7722  004B88  D059               	goto	l15531
  7723  004B8A                     l15503:
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;main.c: 1723: if ( 'v' == cmdbuf[1] &&
  7727                           ;main.c: 1724: 's' == cmdbuf[2] &&
  7728                           ;main.c: 1725: 'c' == cmdbuf[3] &&
  7729                           ;main.c: 1726: 'p' == cmdbuf[4] ) {
  7730  004B8A  0101               	movlb	1	; () banked
  7731  004B8C  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7732  004B8E  0A76               	xorlw	118
  7733  004B90  E10C               	bnz	l15513
  7734                           
  7735                           ; BSR set to: 1
  7736  004B92  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7737  004B94  0A73               	xorlw	115
  7738  004B96  E109               	bnz	l15513
  7739                           
  7740                           ; BSR set to: 1
  7741  004B98  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7742  004B9A  0A63               	xorlw	99
  7743  004B9C  E106               	bnz	l15513
  7744                           
  7745                           ; BSR set to: 1
  7746  004B9E  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7747  004BA0  0A70               	xorlw	112
  7748  004BA2  E103               	bnz	l15513
  7749                           
  7750                           ; BSR set to: 1
  7751                           ;main.c: 1727: mode = 1;
  7752  004BA4  0E01               	movlw	1
  7753  004BA6  6F2C               	movwf	_mode& (0+255),b
  7754                           
  7755                           ;main.c: 1728: }
  7756  004BA8  D049               	goto	l15531
  7757  004BAA                     l15513:
  7758                           
  7759                           ; BSR set to: 1
  7760                           ;main.c: 1729: else if ( 'v' == cmdbuf[1] &&
  7761                           ;main.c: 1730: 'e' == cmdbuf[2] &&
  7762                           ;main.c: 1731: 'r' == cmdbuf[3] &&
  7763                           ;main.c: 1732: 'b' == cmdbuf[4] ) {
  7764  004BAA  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7765  004BAC  0A76               	xorlw	118
  7766  004BAE  E146               	bnz	l15531
  7767                           
  7768                           ; BSR set to: 1
  7769  004BB0  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7770  004BB2  0A65               	xorlw	101
  7771  004BB4  E143               	bnz	l15531
  7772                           
  7773                           ; BSR set to: 1
  7774  004BB6  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7775  004BB8  0A72               	xorlw	114
  7776  004BBA  E140               	bnz	l15531
  7777                           
  7778                           ; BSR set to: 1
  7779  004BBC  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7780  004BBE  0A62               	xorlw	98
  7781  004BC0  E13D               	bnz	l15531
  7782                           
  7783                           ; BSR set to: 1
  7784                           ;main.c: 1733: mode = 0;
  7785  004BC2  6B2C               	clrf	_mode& (0+255),b
  7786  004BC4  D03B               	goto	l15531
  7787  004BC6                     l15523:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;main.c: 1738: {
  7791                           ;main.c: 1740: if (0 == strlen(cmdbuf)) {
  7792  004BC6  0E01               	movlw	high _cmdbuf
  7793  004BC8  0100               	movlb	0	; () banked
  7794  004BCA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7795  004BCC  0E2D               	movlw	low _cmdbuf
  7796  004BCE  6F60               	movwf	?_strlen& (0+255),b
  7797  004BD0  EC4B  F009         	call	_strlen	;wreg free
  7798  004BD4  5161               	movf	(?_strlen+1)& (0+255),w,b
  7799  004BD6  1160               	iorwf	?_strlen& (0+255),w,b
  7800  004BD8  E101 D6A0          	bz	l15405
  7801  004BDC  D02F               	goto	l15531
  7802  004BDE                     l15529:
  7803                           
  7804                           ; BSR set to: 0
  7805  004BDE  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7806                           
  7807                           ; Switch size 1, requested type "space"
  7808                           ; Number of cases is 17, Range of values is 64 to 116
  7809                           ; switch strategies available:
  7810                           ; Name         Instructions Cycles
  7811                           ; simple_byte           52    27 (average)
  7812                           ;	Chosen strategy is simple_byte
  7813  004BE0  0A40               	xorlw	64	; case 64
  7814  004BE2  E0D3               	bz	l15503
  7815  004BE4  0A02               	xorlw	2	; case 66
  7816  004BE6  E0C5               	bz	l15499
  7817  004BE8  0A01               	xorlw	1	; case 67
  7818  004BEA  E101 D6DB          	bz	l15435
  7819  004BEE  0A05               	xorlw	5	; case 70
  7820  004BF0  E101 D777          	bz	l15469
  7821  004BF4  0A0C               	xorlw	12	; case 74
  7822  004BF6  E101 D680          	bz	l15401
  7823  004BFA  0A07               	xorlw	7	; case 77
  7824  004BFC  E101 D68E          	bz	l15405
  7825  004C00  0A03               	xorlw	3	; case 78
  7826  004C02  E101 D69F          	bz	l15413
  7827  004C06  0A01               	xorlw	1	; case 79
  7828  004C08  E101 D6B6          	bz	l15423
  7829  004C0C  0A1D               	xorlw	29	; case 82
  7830  004C0E  E016               	bz	l15531
  7831  004C10  0A01               	xorlw	1	; case 83
  7832  004C12  E101 D6A9          	bz	l15419
  7833  004C16  0A07               	xorlw	7	; case 84
  7834  004C18  E101 D6D6          	bz	l15445
  7835  004C1C  0A02               	xorlw	2	; case 86
  7836  004C1E  E101 D67F          	bz	l15407
  7837  004C22  0A0C               	xorlw	12	; case 90
  7838  004C24  E101 D772          	bz	l15479
  7839  004C28  0A37               	xorlw	55	; case 109
  7840  004C2A  E101 D677          	bz	l15405
  7841  004C2E  0A1F               	xorlw	31	; case 114
  7842  004C30  E005               	bz	l15531
  7843  004C32  0A01               	xorlw	1	; case 115
  7844  004C34  E101 D69B          	bz	l791
  7845  004C38  0A07               	xorlw	7	; case 116
  7846  004C3A  E1C5               	bnz	l15523
  7847  004C3C                     l15531:
  7848                           
  7849                           ;main.c: 1748: if (rv) {
  7850  004C3C  0100               	movlb	0	; () banked
  7851  004C3E  51A5               	movf	doModeSLCAN@rv& (0+255),w,b
  7852  004C40  E007               	bz	l15535
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;main.c: 1750: putsUSART((char *) "\r");
  7856  004C42  0E7C               	movlw	high STR_168
  7857  004C44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7858  004C46  0EF2               	movlw	low STR_168
  7859  004C48  6F61               	movwf	?_putsUSART& (0+255),b
  7860  004C4A  EC69  F00A         	call	_putsUSART	;wreg free
  7861                           
  7862                           ;main.c: 1751: }
  7863  004C4E  D006               	goto	l15537
  7864  004C50                     l15535:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;main.c: 1752: else {
  7868                           ;main.c: 1754: putsUSART((char *) "\a");
  7869  004C50  0E7C               	movlw	high STR_169
  7870  004C52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7871  004C54  0EF0               	movlw	low STR_169
  7872  004C56  6F61               	movwf	?_putsUSART& (0+255),b
  7873  004C58  EC69  F00A         	call	_putsUSART	;wreg free
  7874  004C5C                     l15537:
  7875                           
  7876                           ;main.c: 1755: }
  7877                           ;main.c: 1758: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7878  004C5C  0E01               	movlw	high _cmdbuf
  7879  004C5E  0100               	movlb	0	; () banked
  7880  004C60  6F61               	movwf	(?_memset+1)& (0+255),b
  7881  004C62  0E2D               	movlw	low _cmdbuf
  7882  004C64  EC39  F00E         	call	PL18	;call to abstracted procedure
  7883  004C68  EC01  F008         	call	_memset	;wreg free
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;main.c: 1759: pos = 0;
  7887  004C6C  6A34               	clrf	_pos,c
  7888  004C6E                     l15541:
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;main.c: 1761: }
  7892                           ;main.c: 1764: (INTCONbits.GIE = 1);
  7893  004C6E  8EF2               	bsf	intcon,7,c	;volatile
  7894  004C70                     l781:
  7895                           
  7896                           ; BSR set to: 0
  7897  004C70  0012               	return	
  7898  004C72                     __end_of_doModeSLCAN:
  7899                           	opt stack 0
  7900  004C72                     PL88:
  7901                           	opt stack 22
  7902  004C72  90D8               	bcf	status,0,c
  7903  004C74  379B               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7904  004C76  379C               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7905  004C78  379D               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7906  004C7A  379E               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7907  004C7C  0012               	return	
  7908  004C7E                     __end_ofPL88:
  7909                           	opt stack 0
  7910                           tblptru	equ	0xFF8
  7911                           tblptrh	equ	0xFF7
  7912                           tblptrl	equ	0xFF6
  7913                           tablat	equ	0xFF5
  7914                           prodh	equ	0xFF4
  7915                           prodl	equ	0xFF3
  7916                           intcon	equ	0xFF2
  7917                           indf0	equ	0xFEF
  7918                           postinc0	equ	0xFEE
  7919                           fsr0h	equ	0xFEA
  7920                           fsr0l	equ	0xFE9
  7921                           wreg	equ	0xFE8
  7922                           indf1	equ	0xFE7
  7923                           postinc1	equ	0xFE6
  7924                           postdec1	equ	0xFE5
  7925                           fsr1h	equ	0xFE2
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           plusw2	equ	0xFDB
  7931                           fsr2h	equ	0xFDA
  7932                           fsr2l	equ	0xFD9
  7933                           status	equ	0xFD8
  7934                           
  7935 ;; *************** function _hexStringToBytes *****************
  7936 ;; Defined at:
  7937 ;;		line 35 in file "hexutils.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7940 ;;		 -> wrkbuf(80), 
  7941 ;;  size            1    6[BANK0 ] unsigned char 
  7942 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7943 ;;		 -> cmdbuf(80), 
  7944 ;; Auto vars:     Size  Location     Type
  7945 ;;  i               2   16[BANK0 ] int 
  7946 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7947 ;;		 -> cmdbuf(80), 
  7948 ;;  len             2   12[BANK0 ] int 
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      unsigned char 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : F/0
  7955 ;;		On exit  : F/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7958 ;;      Params:         0       5       0       0       0       0       0
  7959 ;;      Locals:         0       6       0       0       0       0       0
  7960 ;;      Temps:          0       3       0       0       0       0       0
  7961 ;;      Totals:         0      14       0       0       0       0       0
  7962 ;;Total ram usage:       14 bytes
  7963 ;; Hardware stack levels used:    1
  7964 ;; Hardware stack levels required when called:    4
  7965 ;; This function calls:
  7966 ;;		_strlen
  7967 ;;		_nibbleFromChar
  7968 ;; This function is called by:
  7969 ;;		_doModeSLCAN
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           	psect	text3
  7974  001C80                     __ptext3:
  7975                           	opt stack 0
  7976  001C80                     _hexStringToBytes:
  7977                           	opt stack 24
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;hexutils.c: 36: uint8_t *p;
  7981                           ;hexutils.c: 37: int len, i;
  7982                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;incstack = 0
  7986                           ;incstack = 0
  7987  001C80  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7988  001C84  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7989  001C88  EC4B  F009         	call	_strlen	;wreg free
  7990  001C8C  90D8               	bcf	status,0,c
  7991  001C8E  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7992  001C90  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7993  001C92  3160               	rrcf	?_strlen& (0+255),w,b
  7994  001C94  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;hexutils.c: 40: if (len > size) return 0;
  7998  001C96  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7999  001C98  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8000  001C9A  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  8001  001C9C  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  8002  001C9E  0A80               	xorlw	128
  8003  001CA0  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  8004  001CA2  516C               	movf	hexStringToBytes@len& (0+255),w,b
  8005  001CA4  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  8006  001CA6  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8007  001CA8  0A80               	xorlw	128
  8008  001CAA  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  8009  001CAC  E202               	bc	l1651
  8010                           
  8011                           ; BSR set to: 0
  8012  001CAE  0E00               	movlw	0
  8013  001CB0  D033               	goto	l1652
  8014  001CB2                     l1651:
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  8018  001CB2  6B70               	clrf	hexStringToBytes@i& (0+255),b
  8019  001CB4  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  8020  001CB6  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  8021  001CBA  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  8022  001CBE  D022               	goto	l17133
  8023  001CC0                     l17127:
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  8027  001CC0  5170               	movf	hexStringToBytes@i& (0+255),w,b
  8028  001CC2  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  8029  001CC4  6ED9               	movwf	fsr2l,c
  8030  001CC6  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8031  001CC8  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  8032  001CCA  6EDA               	movwf	fsr2h,c
  8033  001CCC  EE10 F001          	lfsr	1,1
  8034  001CD0  516E               	movf	hexStringToBytes@p& (0+255),w,b
  8035  001CD2  26E1               	addwf	fsr1l,f,c
  8036  001CD4  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  8037  001CD6  22E2               	addwfc	fsr1h,f,c
  8038  001CD8  50E7               	movf	indf1,w,c
  8039  001CDA  EC0C  F009         	call	_nibbleFromChar
  8040  001CDE  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8041  001CE0  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  8042  001CE4  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  8043  001CE8  50E7               	movf	indf1,w,c
  8044  001CEA  EC0C  F009         	call	_nibbleFromChar
  8045  001CEE  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  8046  001CF0  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  8047  001CF2  0BF0               	andlw	240
  8048  001CF4  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  8049  001CF6  6EDF               	movwf	indf2,c
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;hexutils.c: 43: p += 2;
  8053  001CF8  0E02               	movlw	2
  8054  001CFA  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  8055  001CFC  0E00               	movlw	0
  8056  001CFE  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8057                           
  8058                           ; BSR set to: 0
  8059  001D00  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  8060  001D02  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8061  001D04                     l17133:
  8062                           
  8063                           ; BSR set to: 0
  8064  001D04  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8065  001D06  0A80               	xorlw	128
  8066  001D08  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8067  001D0A  516C               	movf	hexStringToBytes@len& (0+255),w,b
  8068  001D0C  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  8069  001D0E  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8070  001D10  0A80               	xorlw	128
  8071  001D12  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  8072  001D14  E3D5               	bnc	l17127
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;hexutils.c: 44: }
  8076                           ;hexutils.c: 46: return i;
  8077  001D16  5170               	movf	hexStringToBytes@i& (0+255),w,b
  8078  001D18                     l1652:
  8079                           
  8080                           ; BSR set to: 0
  8081  001D18  0012               	return	
  8082  001D1A                     __end_of_hexStringToBytes:
  8083                           	opt stack 0
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           intcon	equ	0xFF2
  8091                           indf0	equ	0xFEF
  8092                           postinc0	equ	0xFEE
  8093                           fsr0h	equ	0xFEA
  8094                           fsr0l	equ	0xFE9
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           postinc1	equ	0xFE6
  8098                           postdec1	equ	0xFE5
  8099                           fsr1h	equ	0xFE2
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           postdec2	equ	0xFDD
  8104                           plusw2	equ	0xFDB
  8105                           fsr2h	equ	0xFDA
  8106                           fsr2l	equ	0xFD9
  8107                           status	equ	0xFD8
  8108                           
  8109 ;; *************** function _nibbleFromChar *****************
  8110 ;; Defined at:
  8111 ;;		line 20 in file "hexutils.c"
  8112 ;; Parameters:    Size  Location     Type
  8113 ;;  c               1    wreg     unsigned char 
  8114 ;; Auto vars:     Size  Location     Type
  8115 ;;  c               1    0[BANK0 ] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  1    wreg      unsigned char 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0
  8120 ;; Tracked objects:
  8121 ;;		On entry : F/0
  8122 ;;		On exit  : F/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8125 ;;      Params:         0       0       0       0       0       0       0
  8126 ;;      Locals:         0       1       0       0       0       0       0
  8127 ;;      Temps:          0       0       0       0       0       0       0
  8128 ;;      Totals:         0       1       0       0       0       0       0
  8129 ;;Total ram usage:        1 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    3
  8132 ;; This function calls:
  8133 ;;		Nothing
  8134 ;; This function is called by:
  8135 ;;		_hexStringToBytes
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text4
  8140  001218                     __ptext4:
  8141                           	opt stack 0
  8142  001218                     _nibbleFromChar:
  8143                           	opt stack 24
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;incstack = 0
  8147                           ;incstack = 0
  8148                           ;nibbleFromChar@c stored from wreg
  8149  001218  CFE8 F060          	movff	wreg,nibbleFromChar@c
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8153  00121C  0E2F               	movlw	47
  8154  00121E  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8155  001220  D006               	goto	l17333
  8156                           
  8157                           ; BSR set to: 0
  8158  001222  0E3A               	movlw	58
  8159  001224  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8160  001226  D003               	goto	l17333
  8161                           
  8162                           ; BSR set to: 0
  8163  001228  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8164  00122A  0FD0               	addlw	208
  8165  00122C  D013               	goto	l1646
  8166  00122E                     l17333:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8170  00122E  0E60               	movlw	96
  8171  001230  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8172  001232  D006               	goto	l17341
  8173                           
  8174                           ; BSR set to: 0
  8175  001234  0E67               	movlw	103
  8176  001236  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8177  001238  D003               	goto	l17341
  8178                           
  8179                           ; BSR set to: 0
  8180  00123A  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8181  00123C  0FA9               	addlw	169
  8182  00123E  D00A               	goto	l1646
  8183  001240                     l17341:
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8187  001240  0E40               	movlw	64
  8188  001242  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8189  001244  D006               	goto	l17349
  8190                           
  8191                           ; BSR set to: 0
  8192  001246  0E47               	movlw	71
  8193  001248  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8194  00124A  D003               	goto	l17349
  8195                           
  8196                           ; BSR set to: 0
  8197  00124C  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8198  00124E  0FC9               	addlw	201
  8199  001250  D001               	goto	l1646
  8200  001252                     l17349:
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;hexutils.c: 24: return 255;
  8204  001252  0EFF               	movlw	255
  8205  001254                     l1646:
  8206                           
  8207                           ; BSR set to: 0
  8208  001254  0012               	return	
  8209  001256                     __end_of_nibbleFromChar:
  8210                           	opt stack 0
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           intcon	equ	0xFF2
  8218                           indf0	equ	0xFEF
  8219                           postinc0	equ	0xFEE
  8220                           fsr0h	equ	0xFEA
  8221                           fsr0l	equ	0xFE9
  8222                           wreg	equ	0xFE8
  8223                           indf1	equ	0xFE7
  8224                           postinc1	equ	0xFE6
  8225                           postdec1	equ	0xFE5
  8226                           fsr1h	equ	0xFE2
  8227                           fsr1l	equ	0xFE1
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           postdec2	equ	0xFDD
  8231                           plusw2	equ	0xFDB
  8232                           fsr2h	equ	0xFDA
  8233                           fsr2l	equ	0xFD9
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function _receiveSendEventSLCAN *****************
  8237 ;; Defined at:
  8238 ;;		line 2361 in file "main.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;		None
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  id              4   38[BANK0 ] unsigned long 
  8243 ;;  i               2   43[BANK0 ] int 
  8244 ;;  dlc             1   42[BANK0 ] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      enum E15660
  8247 ;; Registers used:
  8248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8249 ;; Tracked objects:
  8250 ;;		On entry : F/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8254 ;;      Params:         0       0       0       0       0       0       0
  8255 ;;      Locals:         0       7       0       0       0       0       0
  8256 ;;      Temps:          0       3       0       0       0       0       0
  8257 ;;      Totals:         0      10       0       0       0       0       0
  8258 ;;Total ram usage:       10 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    6
  8261 ;; This function calls:
  8262 ;;		_putsUSART
  8263 ;;		_WriteUSART
  8264 ;;		_strlen
  8265 ;;		_getCANFrame
  8266 ;;		_ultoa
  8267 ;;		_itoa
  8268 ;; This function is called by:
  8269 ;;		_doModeSLCAN
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text5
  8274  003502                     __ptext5:
  8275                           	opt stack 0
  8276  003502                     _receiveSendEventSLCAN:
  8277                           	opt stack 22
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;main.c: 2362: int i;
  8281                           ;main.c: 2363: uint8_t dlc;
  8282                           ;main.c: 2364: uint32_t id;
  8283                           ;main.c: 2366: if (getCANFrame(&id, &dlc, vscpData)) {
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;incstack = 0
  8287                           ;incstack = 0
  8288  003502  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8289  003504  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  8290  003506  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  8291  003508  6F6E               	movwf	?_getCANFrame& (0+255),b
  8292  00350A  0E01               	movlw	high _vscpData
  8293  00350C  0100               	movlb	0	; () banked
  8294  00350E  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
  8295  003510  0EE5               	movlw	low _vscpData
  8296  003512  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  8297  003514  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  8298  003516  ECD1  F00F         	call	_getCANFrame
  8299  00351A  0900               	iorlw	0
  8300  00351C  E101 D0B0          	bz	l1127
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;main.c: 2369: cntRxFrames++;
  8304  003520  0101               	movlb	1	; () banked
  8305  003522  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8306  003524  0E00               	movlw	0
  8307  003526  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8308  003528  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8309  00352A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8310                           
  8311                           ;main.c: 2370: cntRxBytes += dlc;
  8312  00352C  0100               	movlb	0	; () banked
  8313  00352E  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8314  003530  0101               	movlb	1	; () banked
  8315  003532  2708               	addwf	_cntRxBytes& (0+255),f,b
  8316  003534  0E00               	movlw	0
  8317  003536  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8318  003538  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8319  00353A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8320  00353C                     l1100:
  8321  00353C  A2AC               	btfss	4012,1,c	;volatile
  8322  00353E  D7FE               	goto	l1100
  8323                           
  8324                           ;main.c: 2373: WriteUSART('T');
  8325  003540  0E54               	movlw	84
  8326  003542  ECB1  F007         	call	_WriteUSART
  8327                           
  8328                           ;main.c: 2375: ultoa(wrkbuf, id, 16);
  8329  003546  0E01               	movlw	high _wrkbuf
  8330  003548  0100               	movlb	0	; () banked
  8331  00354A  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8332  00354C  0E7D               	movlw	low _wrkbuf
  8333  00354E  6F76               	movwf	?_ultoa& (0+255),b
  8334  003550  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8335  003554  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8336  003558  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8337  00355C  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8338  003560  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8339  003562  0E10               	movlw	16
  8340  003564  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8341  003566  EC39  F013         	call	_ultoa	;wreg free
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 2377: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8345  00356A  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8346  00356C  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8347  00356E                     l1105:
  8348                           
  8349                           ; BSR set to: 0
  8350  00356E  A2AC               	btfss	4012,1,c	;volatile
  8351  003570  D7FE               	goto	l1105
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;main.c: 2379: WriteUSART('0');
  8355  003572  0E30               	movlw	48
  8356  003574  ECB1  F007         	call	_WriteUSART
  8357                           
  8358                           ; BSR set to: 0
  8359  003578  D884               	call	PL90	;call to abstracted procedure
  8360  00357A  B4D8               	btfsc	status,2,c
  8361  00357C  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8362  00357E  E3F7               	bnc	l1105
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;main.c: 2380: }
  8366                           ;main.c: 2381: putsUSART(wrkbuf);
  8367  003580  0E01               	movlw	high _wrkbuf
  8368  003582  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8369  003584  0E7D               	movlw	low _wrkbuf
  8370  003586  6F61               	movwf	?_putsUSART& (0+255),b
  8371  003588  EC69  F00A         	call	_putsUSART	;wreg free
  8372                           
  8373                           ;main.c: 2384: itoa(wrkbuf, dlc, 16);
  8374  00358C  0E01               	movlw	high _wrkbuf
  8375  00358E  0100               	movlb	0	; () banked
  8376  003590  6F71               	movwf	(?_itoa+1)& (0+255),b
  8377  003592  0E7D               	movlw	low _wrkbuf
  8378  003594  6F70               	movwf	?_itoa& (0+255),b
  8379  003596  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8380  00359A  6B73               	clrf	(?_itoa+3)& (0+255),b
  8381  00359C  6B75               	clrf	(?_itoa+5)& (0+255),b
  8382  00359E  0E10               	movlw	16
  8383  0035A0  6F74               	movwf	(?_itoa+4)& (0+255),b
  8384  0035A2  EC79  F008         	call	_itoa	;wreg free
  8385  0035A6                     l1108:
  8386                           
  8387                           ; BSR set to: 0
  8388  0035A6  A2AC               	btfss	4012,1,c	;volatile
  8389  0035A8  D7FE               	goto	l1108
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;main.c: 2386: WriteUSART(wrkbuf[0]);
  8393  0035AA  0101               	movlb	1	; () banked
  8394  0035AC  517D               	movf	_wrkbuf& (0+255),w,b
  8395  0035AE  ECB1  F007         	call	_WriteUSART
  8396                           
  8397                           ;main.c: 2389: for (i = 0; i < dlc; i++) {
  8398  0035B2  0100               	movlb	0	; () banked
  8399  0035B4  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8400  0035B6  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8401  0035B8  D02D               	goto	l17085
  8402  0035BA                     l17073:
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;main.c: 2390: itoa(wrkbuf, vscpData[i], 16);
  8406  0035BA  0E01               	movlw	high _wrkbuf
  8407  0035BC  0100               	movlb	0	; () banked
  8408  0035BE  6F71               	movwf	(?_itoa+1)& (0+255),b
  8409  0035C0  0E7D               	movlw	low _wrkbuf
  8410  0035C2  6F70               	movwf	?_itoa& (0+255),b
  8411  0035C4  0EE5               	movlw	low _vscpData
  8412  0035C6  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8413  0035C8  6ED9               	movwf	fsr2l,c
  8414  0035CA  0E01               	movlw	high _vscpData
  8415  0035CC  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8416  0035CE  6EDA               	movwf	fsr2h,c
  8417  0035D0  50DF               	movf	indf2,w,c
  8418  0035D2  6F72               	movwf	(?_itoa+2)& (0+255),b
  8419  0035D4  6B73               	clrf	(?_itoa+3)& (0+255),b
  8420  0035D6  6B75               	clrf	(?_itoa+5)& (0+255),b
  8421  0035D8  0E10               	movlw	16
  8422  0035DA  6F74               	movwf	(?_itoa+4)& (0+255),b
  8423  0035DC  EC79  F008         	call	_itoa	;wreg free
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;main.c: 2392: if (2 != strlen(wrkbuf)) {
  8427  0035E0  0E01               	movlw	high _wrkbuf
  8428  0035E2  0100               	movlb	0	; () banked
  8429  0035E4  6F61               	movwf	(?_strlen+1)& (0+255),b
  8430  0035E6  0E7D               	movlw	low _wrkbuf
  8431  0035E8  6F60               	movwf	?_strlen& (0+255),b
  8432  0035EA  EC4B  F009         	call	_strlen	;wreg free
  8433  0035EE  5160               	movf	?_strlen& (0+255),w,b
  8434  0035F0  0A02               	xorlw	2
  8435  0035F2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8436  0035F4  E005               	bz	l17081
  8437  0035F6                     l1114:
  8438                           
  8439                           ; BSR set to: 0
  8440  0035F6  A2AC               	btfss	4012,1,c	;volatile
  8441  0035F8  D7FE               	goto	l1114
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;main.c: 2394: WriteUSART('0');
  8445  0035FA  0E30               	movlw	48
  8446  0035FC  ECB1  F007         	call	_WriteUSART
  8447  003600                     l17081:
  8448                           
  8449                           ;main.c: 2395: }
  8450                           ;main.c: 2397: putsUSART(wrkbuf);
  8451  003600  0E01               	movlw	high _wrkbuf
  8452  003602  0100               	movlb	0	; () banked
  8453  003604  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8454  003606  0E7D               	movlw	low _wrkbuf
  8455  003608  6F61               	movwf	?_putsUSART& (0+255),b
  8456  00360A  EC69  F00A         	call	_putsUSART	;wreg free
  8457  00360E  0100               	movlb	0	; () banked
  8458  003610  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8459  003612  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8460  003614                     l17085:
  8461                           
  8462                           ; BSR set to: 0
  8463  003614  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8464  003616  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8465  003618  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8466  00361A  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8467  00361C  0A80               	xorlw	128
  8468  00361E  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8469  003620  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8470  003622  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8471  003624  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8472  003626  0A80               	xorlw	128
  8473  003628  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8474  00362A  E3C7               	bnc	l17073
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 2398: }
  8478                           ;main.c: 2401: if (nTimeStamp) {
  8479  00362C  5033               	movf	_nTimeStamp,w,c
  8480  00362E  E023               	bz	l1124
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;main.c: 2402: ultoa(wrkbuf, timer, 16);
  8484  003630  0E01               	movlw	high _wrkbuf
  8485  003632  0100               	movlb	0	; () banked
  8486  003634  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8487  003636  0E7D               	movlw	low _wrkbuf
  8488  003638  6F76               	movwf	?_ultoa& (0+255),b
  8489  00363A  C11C  F078         	movff	_timer,?_ultoa+2	;volatile
  8490  00363E  C11D  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8491  003642  C11E  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8492  003646  C11F  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8493  00364A  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8494  00364C  0E10               	movlw	16
  8495  00364E  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8496  003650  EC39  F013         	call	_ultoa	;wreg free
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;main.c: 2404: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8500  003654  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8501  003656  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8502  003658                     l1121:
  8503                           
  8504                           ; BSR set to: 0
  8505  003658  A2AC               	btfss	4012,1,c	;volatile
  8506  00365A  D7FE               	goto	l1121
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;main.c: 2406: WriteUSART('0');
  8510  00365C  0E30               	movlw	48
  8511  00365E  ECB1  F007         	call	_WriteUSART
  8512                           
  8513                           ; BSR set to: 0
  8514  003662  D80F               	call	PL90	;call to abstracted procedure
  8515  003664  B4D8               	btfsc	status,2,c
  8516  003666  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8517  003668  E3F7               	bnc	l1121
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 2407: }
  8521                           ;main.c: 2408: putsUSART(wrkbuf);
  8522  00366A  0E01               	movlw	high _wrkbuf
  8523  00366C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8524  00366E  0E7D               	movlw	low _wrkbuf
  8525  003670  6F61               	movwf	?_putsUSART& (0+255),b
  8526  003672  EC69  F00A         	call	_putsUSART	;wreg free
  8527  003676                     l1124:
  8528  003676  A2AC               	btfss	4012,1,c	;volatile
  8529  003678  D7FE               	goto	l1124
  8530                           
  8531                           ;main.c: 2412: WriteUSART(0x0d);
  8532  00367A  0E0D               	movlw	13
  8533  00367C  ECB1  F007         	call	_WriteUSART
  8534  003680                     l1127:
  8535  003680  0012               	return	
  8536  003682                     __end_of_receiveSendEventSLCAN:
  8537                           	opt stack 0
  8538  003682                     PL90:
  8539                           	opt stack 22
  8540  003682  0100               	movlb	0	; () banked
  8541  003684  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8542  003686  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8543  003688  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8544  00368A  0A80               	xorlw	128
  8545  00368C  0F80               	addlw	-128
  8546  00368E  0CB8               	retlw	184
  8547  003690                     __end_ofPL90:
  8548                           	opt stack 0
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           intcon	equ	0xFF2
  8556                           indf0	equ	0xFEF
  8557                           postinc0	equ	0xFEE
  8558                           fsr0h	equ	0xFEA
  8559                           fsr0l	equ	0xFE9
  8560                           wreg	equ	0xFE8
  8561                           indf1	equ	0xFE7
  8562                           postinc1	equ	0xFE6
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           plusw2	equ	0xFDB
  8570                           fsr2h	equ	0xFDA
  8571                           fsr2l	equ	0xFD9
  8572                           status	equ	0xFD8
  8573                           
  8574 ;; *************** function _ultoa *****************
  8575 ;; Defined at:
  8576 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8577 ;; Parameters:    Size  Location     Type
  8578 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8579 ;;		 -> wrkbuf(80), 
  8580 ;;  val             4   24[BANK0 ] unsigned long 
  8581 ;;  base            2   28[BANK0 ] int 
  8582 ;; Auto vars:     Size  Location     Type
  8583 ;;  v               4   30[BANK0 ] unsigned long 
  8584 ;;  c               1   34[BANK0 ] unsigned char 
  8585 ;; Return value:  Size  Location     Type
  8586 ;;                  2   22[BANK0 ] PTR unsigned char 
  8587 ;; Registers used:
  8588 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8589 ;; Tracked objects:
  8590 ;;		On entry : F/0
  8591 ;;		On exit  : F/0
  8592 ;;		Unchanged: 0/0
  8593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8594 ;;      Params:         0       8       0       0       0       0       0
  8595 ;;      Locals:         0       5       0       0       0       0       0
  8596 ;;      Temps:          0       0       0       0       0       0       0
  8597 ;;      Totals:         0      13       0       0       0       0       0
  8598 ;;Total ram usage:       13 bytes
  8599 ;; Hardware stack levels used:    1
  8600 ;; Hardware stack levels required when called:    4
  8601 ;; This function calls:
  8602 ;;		___lldiv
  8603 ;;		___llmod
  8604 ;; This function is called by:
  8605 ;;		_receiveSendEventSLCAN
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           	psect	text6
  8610  002672                     __ptext6:
  8611                           	opt stack 0
  8612  002672                     _ultoa:
  8613                           	opt stack 23
  8614                           
  8615                           ; BSR set to: 0
  8616                           
  8617                           ;incstack = 0
  8618                           ;incstack = 0
  8619  002672  C078  F07E         	movff	ultoa@val,ultoa@v
  8620  002676  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8621  00267A  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8622  00267E  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8623  002682                     l17247:
  8624                           
  8625                           ; BSR set to: 0
  8626  002682  C07E  F060         	movff	ultoa@v,?___lldiv
  8627  002686  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8628  00268A  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8629  00268E  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8630  002692  D858               	call	PL70	;call to abstracted procedure
  8631  002694  EC27  F00C         	call	___lldiv	;wreg free
  8632  002698  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8633  00269C  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8634  0026A0  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8635  0026A4  C060  F07E         	movff	?___lldiv,ultoa@v
  8636                           
  8637                           ; BSR set to: 0
  8638  0026A8  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8639  0026AA  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642  0026AC  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8643  0026AE  117E               	iorwf	ultoa@v& (0+255),w,b
  8644  0026B0  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8645  0026B2  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8646  0026B4  E1E6               	bnz	l17247
  8647                           
  8648                           ; BSR set to: 0
  8649  0026B6  C076  FFD9         	movff	ultoa@buf,fsr2l
  8650  0026BA  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8651  0026BE  6ADF               	clrf	indf2,c
  8652                           
  8653                           ; BSR set to: 0
  8654  0026C0  0776               	decf	ultoa@buf& (0+255),f,b
  8655  0026C2  A0D8               	btfss	status,0,c
  8656  0026C4  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8657  0026C6                     l17257:
  8658                           
  8659                           ; BSR set to: 0
  8660  0026C6  C078  F06D         	movff	ultoa@val,?___llmod
  8661  0026CA  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8662  0026CE  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8663  0026D2  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8664  0026D6  C07C  F071         	movff	ultoa@base,?___llmod+4
  8665  0026DA  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8666  0026DE  0E00               	movlw	0
  8667  0026E0  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8668  0026E2  0EFF               	movlw	-1
  8669  0026E4  6F73               	movwf	(?___llmod+6)& (0+255),b
  8670  0026E6  6F74               	movwf	(?___llmod+7)& (0+255),b
  8671  0026E8  EC1F  F00B         	call	___llmod	;wreg free
  8672  0026EC  516D               	movf	?___llmod& (0+255),w,b
  8673  0026EE  6F82               	movwf	ultoa@c& (0+255),b
  8674                           
  8675                           ; BSR set to: 0
  8676  0026F0  C078  F060         	movff	ultoa@val,?___lldiv
  8677  0026F4  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8678  0026F8  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8679  0026FC  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8680  002700  D821               	call	PL70	;call to abstracted procedure
  8681  002702  EC27  F00C         	call	___lldiv	;wreg free
  8682  002706  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8683  00270A  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8684  00270E  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8685  002712  C060  F078         	movff	?___lldiv,ultoa@val
  8686                           
  8687                           ; BSR set to: 0
  8688  002716  0E09               	movlw	9
  8689  002718  6582               	cpfsgt	ultoa@c& (0+255),b
  8690  00271A  D002               	goto	l2496
  8691                           
  8692                           ; BSR set to: 0
  8693  00271C  0E07               	movlw	7
  8694  00271E  2782               	addwf	ultoa@c& (0+255),f,b
  8695  002720                     l2496:
  8696                           
  8697                           ; BSR set to: 0
  8698  002720  0E30               	movlw	48
  8699  002722  2782               	addwf	ultoa@c& (0+255),f,b
  8700                           
  8701                           ; BSR set to: 0
  8702  002724  C076  FFD9         	movff	ultoa@buf,fsr2l
  8703  002728  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8704  00272C  C082  FFDF         	movff	ultoa@c,indf2
  8705                           
  8706                           ; BSR set to: 0
  8707  002730  0776               	decf	ultoa@buf& (0+255),f,b
  8708  002732  A0D8               	btfss	status,0,c
  8709  002734  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8710                           
  8711                           ; BSR set to: 0
  8712  002736  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8713  002738  1178               	iorwf	ultoa@val& (0+255),w,b
  8714  00273A  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8715  00273C  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8716  00273E  B4D8               	btfsc	status,2,c
  8717                           
  8718                           ; BSR set to: 0
  8719  002740  0012               	return	
  8720  002742  D7C1               	goto	l17257
  8721  002744                     __end_of_ultoa:
  8722                           	opt stack 0
  8723  002744                     PL70:
  8724                           	opt stack 23
  8725  002744  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8726  002748  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8727  00274C  0E00               	movlw	0
  8728  00274E  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8729  002750  0EFF               	movlw	-1
  8730  002752  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8731  002754  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8732  002756  0012               	return	
  8733  002758                     __end_ofPL70:
  8734                           	opt stack 0
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           indf0	equ	0xFEF
  8743                           postinc0	equ	0xFEE
  8744                           fsr0h	equ	0xFEA
  8745                           fsr0l	equ	0xFE9
  8746                           wreg	equ	0xFE8
  8747                           indf1	equ	0xFE7
  8748                           postinc1	equ	0xFE6
  8749                           postdec1	equ	0xFE5
  8750                           fsr1h	equ	0xFE2
  8751                           fsr1l	equ	0xFE1
  8752                           indf2	equ	0xFDF
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           plusw2	equ	0xFDB
  8756                           fsr2h	equ	0xFDA
  8757                           fsr2l	equ	0xFD9
  8758                           status	equ	0xFD8
  8759                           
  8760 ;; *************** function _doModeVscp *****************
  8761 ;; Defined at:
  8762 ;;		line 1325 in file "main.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  c               1   89[BANK0 ] unsigned char 
  8767 ;; Return value:  Size  Location     Type
  8768 ;;		None               void
  8769 ;; Registers used:
  8770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/1
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8776 ;;      Params:         0       0       0       0       0       0       0
  8777 ;;      Locals:         0       1       0       0       0       0       0
  8778 ;;      Temps:          0       0       0       0       0       0       0
  8779 ;;      Totals:         0       1       0       0       0       0       0
  8780 ;;Total ram usage:        1 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    7
  8783 ;; This function calls:
  8784 ;;		_fifo_read
  8785 ;;		_ECANSetOperationMode
  8786 ;;		_receiveSendMultiEventCANAL
  8787 ;;		_receiveSendEventCANAL
  8788 ;;		_calcCRC
  8789 ;;		_sendVSCPDriverNack
  8790 ;;		_sendVSCPDriverAck
  8791 ;;		_receiveVSCPModeCanalMsg
  8792 ;;		_receiveVSCPModeMultiCanalMsg
  8793 ;;		_sendVSCPModeCapabilities
  8794 ;;		_sendVSCPDriverCommandReply
  8795 ;;		_sendVSCPDriverErrorFrame
  8796 ;; This function is called by:
  8797 ;;		_main
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	text7
  8802  0039EC                     __ptext7:
  8803                           	opt stack 0
  8804  0039EC                     _doModeVscp:
  8805                           	opt stack 22
  8806                           
  8807                           ;main.c: 1326: uint8_t c;
  8808                           ;main.c: 1329: if ( caps.maxCanalFrames > 1 ) {
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;incstack = 0
  8812                           ;incstack = 0
  8813  0039EC  0101               	movlb	1	; () banked
  8814  0039EE  EE21  F0F2         	lfsr	2,_caps+1
  8815  0039F2  0E01               	movlw	1
  8816  0039F4  64DF               	cpfsgt	indf2,c
  8817  0039F6  D003               	goto	l15231
  8818                           
  8819                           ; BSR set to: 1
  8820                           ;main.c: 1332: receiveSendMultiEventCANAL();
  8821  0039F8  ECBD  F019         	call	_receiveSendMultiEventCANAL	;wreg free
  8822                           
  8823                           ;main.c: 1333: }
  8824  0039FC  D002               	goto	l15233
  8825  0039FE                     l15231:
  8826                           
  8827                           ; BSR set to: 1
  8828                           ;main.c: 1334: else {
  8829                           ;main.c: 1337: receiveSendEventCANAL();
  8830  0039FE  EC64  F018         	call	_receiveSendEventCANAL	;wreg free
  8831  003A02                     l15233:
  8832                           
  8833                           ;main.c: 1338: }
  8834                           ;main.c: 1341: (INTCONbits.GIE = 0);
  8835  003A02  9EF2               	bcf	intcon,7,c	;volatile
  8836                           
  8837                           ;main.c: 1343: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8838  003A04  0E01               	movlw	high _serialInputFifo
  8839  003A06  0100               	movlb	0	; () banked
  8840  003A08  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8841  003A0A  0EDD               	movlw	low _serialInputFifo
  8842  003A0C  6F60               	movwf	?_fifo_read& (0+255),b
  8843  003A0E  0E00               	movlw	high doModeVscp@c
  8844  003A10  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8845  003A12  0EB9               	movlw	low doModeVscp@c
  8846  003A14  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8847  003A16  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8848  003A18  0E01               	movlw	1
  8849  003A1A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8850  003A1C  EC67  F012         	call	_fifo_read	;wreg free
  8851  003A20  0560               	decf	?_fifo_read& (0+255),w,b
  8852  003A22  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8853  003A24  E001 D0BF          	bnz	l15381
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;main.c: 1346: (INTCONbits.GIE = 1);
  8857  003A28  8EF2               	bsf	intcon,7,c	;volatile
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 1349: if ( pos >= sizeof( cmdbuf ) ) {
  8861  003A2A  0E4F               	movlw	79
  8862  003A2C  6434               	cpfsgt	_pos,c
  8863  003A2E  D003               	goto	l725
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;main.c: 1351: pos = 0;
  8867  003A30  6A34               	clrf	_pos,c
  8868                           
  8869                           ;main.c: 1352: bDLE = 0;
  8870  003A32  6A2B               	clrf	_bDLE,c
  8871                           
  8872                           ;main.c: 1353: stateVscpDriver = 0;
  8873  003A34  6A37               	clrf	_stateVscpDriver,c
  8874  003A36                     l725:
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;main.c: 1354: }
  8878                           ;main.c: 1356: if ( 0 == stateVscpDriver ) {
  8879  003A36  6637               	tstfsz	_stateVscpDriver,c
  8880  003A38  D00D               	goto	l15255
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;main.c: 1358: if ( bDLE ) {
  8884  003A3A  502B               	movf	_bDLE,w,c
  8885  003A3C  E008               	bz	l15251
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1360: bDLE = 0;
  8889  003A3E  6A2B               	clrf	_bDLE,c
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;main.c: 1363: if ( 0x02 == c ) {
  8893  003A40  51B9               	movf	doModeVscp@c& (0+255),w,b
  8894  003A42  0A02               	xorlw	2
  8895  003A44  E12A               	bnz	l15291
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 1364: stateVscpDriver = 1;
  8899  003A46  0E01               	movlw	1
  8900  003A48  6E37               	movwf	_stateVscpDriver,c
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 1365: pos = 0;
  8904  003A4A  6A34               	clrf	_pos,c
  8905  003A4C  D026               	goto	l15291
  8906  003A4E                     l15251:
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;main.c: 1368: else {
  8910                           ;main.c: 1369: bDLE = 1;
  8911  003A4E  0E01               	movlw	1
  8912  003A50  6E2B               	movwf	_bDLE,c
  8913  003A52  D0AA               	goto	l730
  8914  003A54                     l15255:
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;main.c: 1373: else if ( 1 == stateVscpDriver ) {
  8918  003A54  0437               	decf	_stateVscpDriver,w,c
  8919  003A56  E121               	bnz	l15291
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;main.c: 1376: if ( bDLE ) {
  8923  003A58  502B               	movf	_bDLE,w,c
  8924  003A5A  E01B               	bz	l15275
  8925                           
  8926                           ; BSR set to: 0
  8927                           ;main.c: 1379: bDLE = 0;
  8928  003A5C  6A2B               	clrf	_bDLE,c
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;main.c: 1382: if ( 0x03 == c ) {
  8932  003A5E  51B9               	movf	doModeVscp@c& (0+255),w,b
  8933  003A60  0A03               	xorlw	3
  8934  003A62  E103               	bnz	l15265
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;main.c: 1383: stateVscpDriver = 2;
  8938  003A64  0E02               	movlw	2
  8939  003A66  6E37               	movwf	_stateVscpDriver,c
  8940                           
  8941                           ;main.c: 1384: }
  8942  003A68  D018               	goto	l15291
  8943  003A6A                     l15265:
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;main.c: 1386: else if (0x10 == c) {
  8947  003A6A  51B9               	movf	doModeVscp@c& (0+255),w,b
  8948  003A6C  0A10               	xorlw	16
  8949  003A6E  E115               	bnz	l15291
  8950  003A70                     u19980:
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;main.c: 1388: cmdbuf[ pos++ ] = c;
  8954  003A70  0E2D               	movlw	low _cmdbuf
  8955  003A72  2434               	addwf	_pos,w,c
  8956  003A74  6ED9               	movwf	fsr2l,c
  8957  003A76  6ADA               	clrf	fsr2h,c
  8958  003A78  0E01               	movlw	high _cmdbuf
  8959  003A7A  22DA               	addwfc	fsr2h,f,c
  8960  003A7C  0100               	movlb	0	; () banked
  8961  003A7E  C0B9  FFDF         	movff	doModeVscp@c,indf2
  8962                           
  8963                           ; BSR set to: 0
  8964  003A82  2A34               	incf	_pos,f,c
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;main.c: 1389: if ( pos >= sizeof( cmdbuf ) ) {
  8968  003A84  0E4F               	movlw	79
  8969  003A86  6434               	cpfsgt	_pos,c
  8970  003A88  D08F               	goto	l730
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;main.c: 1392: bDLE = 0;
  8974  003A8A  6A2B               	clrf	_bDLE,c
  8975                           
  8976                           ;main.c: 1393: pos = 0;
  8977  003A8C  6A34               	clrf	_pos,c
  8978                           
  8979                           ;main.c: 1394: stateVscpDriver = 0;
  8980  003A8E  6A37               	clrf	_stateVscpDriver,c
  8981  003A90  D08B               	goto	l730
  8982  003A92                     l15275:
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;main.c: 1399: else {
  8986                           ;main.c: 1400: if (0x10 == c) {
  8987  003A92  51B9               	movf	doModeVscp@c& (0+255),w,b
  8988  003A94  0A10               	xorlw	16
  8989  003A96  E0DB               	bz	l15251
  8990  003A98  D7EB               	goto	u19980
  8991  003A9A                     l15291:
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 1416: }
  8995                           ;main.c: 1417: }
  8996                           ;main.c: 1418: }
  8997                           ;main.c: 1420: if (2 == stateVscpDriver) {
  8998  003A9A  5037               	movf	_stateVscpDriver,w,c
  8999  003A9C  0A02               	xorlw	2
  9000  003A9E  E001 D082          	bnz	l15381
  9001                           
  9002                           ; BSR set to: 0
  9003                           ;main.c: 1423: stateVscpDriver = 0;
  9004  003AA2  6A37               	clrf	_stateVscpDriver,c
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;main.c: 1435: if (calcCRC(cmdbuf, pos)) {
  9008  003AA4  0E01               	movlw	high _cmdbuf
  9009  003AA6  0100               	movlb	0	; () banked
  9010  003AA8  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  9011  003AAA  0E2D               	movlw	low _cmdbuf
  9012  003AAC  6F6C               	movwf	?_calcCRC& (0+255),b
  9013  003AAE  C034  F06E         	movff	_pos,?_calcCRC+2
  9014  003AB2  EC2F  F008         	call	_calcCRC	;wreg free
  9015  003AB6  0900               	iorlw	0
  9016  003AB8  E003               	bz	l743
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;main.c: 1436: sendVSCPDriverNack();
  9020  003ABA  ECDD  F00E         	call	_sendVSCPDriverNack	;wreg free
  9021  003ABE  D074               	goto	l730
  9022  003AC0                     l743:
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;main.c: 1438: }
  9026                           ;main.c: 1441: if (0 ==
  9027                           ;main.c: 1442: cmdbuf[ 0 ]) {
  9028  003AC0  0101               	movlb	1	; () banked
  9029  003AC2  672D               	tstfsz	_cmdbuf& (0+255),b
  9030  003AC4  D003               	goto	l15303
  9031  003AC6                     l15301:
  9032                           
  9033                           ;main.c: 1443: sendVSCPDriverAck();
  9034  003AC6  EC2D  F00F         	call	_sendVSCPDriverAck	;wreg free
  9035                           
  9036                           ;main.c: 1444: }
  9037  003ACA  D06B               	goto	l15377
  9038  003ACC                     l15303:
  9039                           
  9040                           ; BSR set to: 1
  9041                           ;main.c: 1446: else if (1 ==
  9042                           ;main.c: 1447: cmdbuf[ 0 ]) {
  9043  003ACC  052D               	decf	_cmdbuf& (0+255),w,b
  9044  003ACE  E103               	bnz	l15307
  9045  003AD0                     l15305:
  9046                           
  9047                           ;main.c: 1448: sendVSCPDriverNack();
  9048  003AD0  ECDD  F00E         	call	_sendVSCPDriverNack	;wreg free
  9049                           
  9050                           ;main.c: 1449: }
  9051  003AD4  D066               	goto	l15377
  9052  003AD6                     l15307:
  9053                           
  9054                           ; BSR set to: 1
  9055                           ;main.c: 1451: else if (2 ==
  9056                           ;main.c: 1452: cmdbuf[ 0 ]) {
  9057  003AD6  512D               	movf	_cmdbuf& (0+255),w,b
  9058  003AD8  0A02               	xorlw	2
  9059  003ADA  E105               	bnz	l15315
  9060                           
  9061                           ; BSR set to: 1
  9062                           ;main.c: 1453: if ( receiveVSCPModeCanalMsg() ) {
  9063  003ADC  ECAC  F013         	call	_receiveVSCPModeCanalMsg	;wreg free
  9064  003AE0  0900               	iorlw	0
  9065  003AE2  E1F1               	bnz	l15301
  9066  003AE4  D7F5               	goto	l15305
  9067  003AE6                     l15315:
  9068                           
  9069                           ; BSR set to: 1
  9070                           ;main.c: 1461: else if (6 ==
  9071                           ;main.c: 1462: cmdbuf[ 0 ]) {
  9072  003AE6  512D               	movf	_cmdbuf& (0+255),w,b
  9073  003AE8  0A06               	xorlw	6
  9074  003AEA  E103               	bnz	l15323
  9075                           
  9076                           ; BSR set to: 1
  9077                           ;main.c: 1463: if (receiveVSCPModeMultiCanalMsg()) {
  9078  003AEC  EC8D  F007         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9079  003AF0  D7F7               	goto	L5
  9080  003AF2                     l15323:
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;main.c: 1471: else if (6 ==
  9084                           ;main.c: 1472: cmdbuf[ 0 ]) {
  9085  003AF2  512D               	movf	_cmdbuf& (0+255),w,b
  9086  003AF4  0A06               	xorlw	6
  9087  003AF6  E0EC               	bz	l15305
  9088                           
  9089                           ; BSR set to: 1
  9090                           ;main.c: 1476: else if (3 ==
  9091                           ;main.c: 1477: cmdbuf[ 0 ]) {
  9092  003AF8  512D               	movf	_cmdbuf& (0+255),w,b
  9093  003AFA  0A03               	xorlw	3
  9094  003AFC  E0E9               	bz	l15305
  9095                           
  9096                           ; BSR set to: 1
  9097                           ;main.c: 1481: else if (4 ==
  9098                           ;main.c: 1482: cmdbuf[ 0 ]) {
  9099  003AFE  512D               	movf	_cmdbuf& (0+255),w,b
  9100  003B00  0A04               	xorlw	4
  9101  003B02  E0E6               	bz	l15305
  9102                           
  9103                           ; BSR set to: 1
  9104                           ;main.c: 1486: else if (8 ==
  9105                           ;main.c: 1487: cmdbuf[ 0 ]) {
  9106  003B04  512D               	movf	_cmdbuf& (0+255),w,b
  9107  003B06  0A08               	xorlw	8
  9108  003B08  E107               	bnz	l15341
  9109                           
  9110                           ; BSR set to: 1
  9111                           ;main.c: 1488: caps.maxVscpFrames = cmdbuf[ 5 ];
  9112  003B0A  C132  F1F1         	movff	_cmdbuf+5,_caps
  9113                           
  9114                           ;main.c: 1489: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9115  003B0E  C133  F1F2         	movff	_cmdbuf+6,_caps+1
  9116                           
  9117                           ; BSR set to: 1
  9118                           ;main.c: 1490: sendVSCPModeCapabilities();
  9119  003B12  EC80  F010         	call	_sendVSCPModeCapabilities	;wreg free
  9120                           
  9121                           ;main.c: 1491: }
  9122  003B16  D045               	goto	l15377
  9123  003B18                     l15341:
  9124                           
  9125                           ; BSR set to: 1
  9126                           ;main.c: 1493: else if (255 ==
  9127                           ;main.c: 1494: cmdbuf[ 0 ]) {
  9128  003B18  292D               	incf	_cmdbuf& (0+255),w,b
  9129  003B1A  E140               	bnz	l15375
  9130                           
  9131                           ; BSR set to: 1
  9132                           ;main.c: 1496: if (cmdbuf[ 5 ] ==
  9133                           ;main.c: 1497: 0) {
  9134  003B1C  6732               	tstfsz	(_cmdbuf+5)& (0+255),b
  9135  003B1E  D006               	goto	l15347
  9136                           
  9137                           ; BSR set to: 1
  9138                           ;main.c: 1498: sendVSCPDriverCommandReply(0, 0);
  9139  003B20  0E00               	movlw	0
  9140  003B22  0100               	movlb	0	; () banked
  9141  003B24  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9142  003B26  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9143                           
  9144                           ;main.c: 1499: }
  9145  003B2A  D03B               	goto	l15377
  9146  003B2C                     l15347:
  9147                           
  9148                           ; BSR set to: 1
  9149                           ;main.c: 1501: else if (cmdbuf[ 5 ] ==
  9150                           ;main.c: 1502: 1) {
  9151  003B2C  0532               	decf	(_cmdbuf+5)& (0+255),w,b
  9152  003B2E  E109               	bnz	l15353
  9153                           
  9154                           ; BSR set to: 1
  9155                           ;main.c: 1503: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9156  003B30  0E00               	movlw	0
  9157  003B32  ECC6  F007         	call	_ECANSetOperationMode
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;main.c: 1504: sendVSCPDriverCommandReply(0, 1);
  9161  003B36  0E01               	movlw	1
  9162  003B38  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9163  003B3A  0E00               	movlw	0
  9164  003B3C  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9165                           
  9166                           ;main.c: 1505: }
  9167  003B40  D030               	goto	l15377
  9168  003B42                     l15353:
  9169                           
  9170                           ; BSR set to: 1
  9171                           ;main.c: 1507: else if (cmdbuf[ 5 ] ==
  9172                           ;main.c: 1508: 2) {
  9173  003B42  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9174  003B44  0A02               	xorlw	2
  9175  003B46  E109               	bnz	l15359
  9176                           
  9177                           ; BSR set to: 1
  9178                           ;main.c: 1509: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9179  003B48  0E40               	movlw	64
  9180  003B4A  ECC6  F007         	call	_ECANSetOperationMode
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 1510: sendVSCPDriverCommandReply(0, 2);
  9184  003B4E  0E02               	movlw	2
  9185  003B50  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9186  003B52  0E00               	movlw	0
  9187  003B54  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9188                           
  9189                           ;main.c: 1511: }
  9190  003B58  D024               	goto	l15377
  9191  003B5A                     l15359:
  9192                           
  9193                           ; BSR set to: 1
  9194                           ;main.c: 1513: else if (cmdbuf[ 5 ] ==
  9195                           ;main.c: 1514: 3) {
  9196  003B5A  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9197  003B5C  0A03               	xorlw	3
  9198  003B5E  E109               	bnz	l15365
  9199                           
  9200                           ; BSR set to: 1
  9201                           ;main.c: 1515: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9202  003B60  0E60               	movlw	96
  9203  003B62  ECC6  F007         	call	_ECANSetOperationMode
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;main.c: 1516: sendVSCPDriverCommandReply(0, 3);
  9207  003B66  0E03               	movlw	3
  9208  003B68  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9209  003B6A  0E00               	movlw	0
  9210  003B6C  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9211                           
  9212                           ;main.c: 1517: }
  9213  003B70  D018               	goto	l15377
  9214  003B72                     l15365:
  9215                           
  9216                           ; BSR set to: 1
  9217                           ;main.c: 1519: else if (cmdbuf[ 5 ] ==
  9218                           ;main.c: 1520: 4) {
  9219  003B72  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9220  003B74  0A04               	xorlw	4
  9221  003B76  E109               	bnz	l15371
  9222                           
  9223                           ; BSR set to: 1
  9224                           ;main.c: 1521: ECANSetOperationMode(0x20);
  9225  003B78  0E20               	movlw	32
  9226  003B7A  ECC6  F007         	call	_ECANSetOperationMode
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;main.c: 1522: sendVSCPDriverCommandReply(0, 4);
  9230  003B7E  0E04               	movlw	4
  9231  003B80  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9232  003B82  0E00               	movlw	0
  9233  003B84  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9234                           
  9235                           ;main.c: 1523: }
  9236  003B88  D00C               	goto	l15377
  9237  003B8A                     l15371:
  9238                           
  9239                           ; BSR set to: 1
  9240                           ;main.c: 1525: else if (cmdbuf[ 5 ] ==
  9241                           ;main.c: 1526: 5) {
  9242  003B8A  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9243  003B8C  0A05               	xorlw	5
  9244  003B8E  E109               	bnz	l15377
  9245                           
  9246                           ; BSR set to: 1
  9247                           ;main.c: 1527: sendVSCPDriverCommandReply(0, 0);
  9248  003B90  0E00               	movlw	0
  9249  003B92  0100               	movlb	0	; () banked
  9250  003B94  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9251  003B96  ECD0  F012         	call	_sendVSCPDriverCommandReply
  9252  003B9A  D003               	goto	l15377
  9253  003B9C                     l15375:
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;main.c: 1532: else {
  9257                           ;main.c: 1534: sendVSCPDriverErrorFrame(2);
  9258  003B9C  0E02               	movlw	2
  9259  003B9E  ECDB  F010         	call	_sendVSCPDriverErrorFrame
  9260  003BA2                     l15377:
  9261                           
  9262                           ;main.c: 1535: }
  9263                           ;main.c: 1538: pos = 0;
  9264  003BA2  6A34               	clrf	_pos,c
  9265                           
  9266                           ;main.c: 1539: stateVscpDriver = 0;
  9267  003BA4  6A37               	clrf	_stateVscpDriver,c
  9268  003BA6                     l15381:
  9269                           
  9270                           ;main.c: 1541: }
  9271                           ;main.c: 1543: }
  9272                           ;main.c: 1546: (INTCONbits.GIE = 1);
  9273  003BA6  8EF2               	bsf	intcon,7,c	;volatile
  9274  003BA8                     l730:
  9275  003BA8  0012               	return	
  9276  003BAA                     __end_of_doModeVscp:
  9277                           	opt stack 0
  9278                           tblptru	equ	0xFF8
  9279                           tblptrh	equ	0xFF7
  9280                           tblptrl	equ	0xFF6
  9281                           tablat	equ	0xFF5
  9282                           prodh	equ	0xFF4
  9283                           prodl	equ	0xFF3
  9284                           intcon	equ	0xFF2
  9285                           indf0	equ	0xFEF
  9286                           postinc0	equ	0xFEE
  9287                           fsr0h	equ	0xFEA
  9288                           fsr0l	equ	0xFE9
  9289                           wreg	equ	0xFE8
  9290                           indf1	equ	0xFE7
  9291                           postinc1	equ	0xFE6
  9292                           postdec1	equ	0xFE5
  9293                           fsr1h	equ	0xFE2
  9294                           fsr1l	equ	0xFE1
  9295                           indf2	equ	0xFDF
  9296                           postinc2	equ	0xFDE
  9297                           postdec2	equ	0xFDD
  9298                           plusw2	equ	0xFDB
  9299                           fsr2h	equ	0xFDA
  9300                           fsr2l	equ	0xFD9
  9301                           status	equ	0xFD8
  9302                           
  9303 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9304 ;; Defined at:
  9305 ;;		line 1807 in file "main.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;  errorcode       1    wreg     unsigned char 
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9310 ;;  crc             1   16[BANK0 ] unsigned char 
  9311 ;; Return value:  Size  Location     Type
  9312 ;;		None               void
  9313 ;; Registers used:
  9314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9315 ;; Tracked objects:
  9316 ;;		On entry : F/1
  9317 ;;		On exit  : 0/0
  9318 ;;		Unchanged: 0/0
  9319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9320 ;;      Params:         0       0       0       0       0       0       0
  9321 ;;      Locals:         0       2       0       0       0       0       0
  9322 ;;      Temps:          0       0       0       0       0       0       0
  9323 ;;      Totals:         0       2       0       0       0       0       0
  9324 ;;Total ram usage:        2 bytes
  9325 ;; Hardware stack levels used:    1
  9326 ;; Hardware stack levels required when called:    6
  9327 ;; This function calls:
  9328 ;;		_WriteUSART
  9329 ;;		_sendEscapedUartData
  9330 ;;		_crc8
  9331 ;; This function is called by:
  9332 ;;		_doModeVscp
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336                           	psect	text8
  9337  0021B6                     __ptext8:
  9338                           	opt stack 0
  9339  0021B6                     _sendVSCPDriverErrorFrame:
  9340                           	opt stack 22
  9341                           
  9342                           ;incstack = 0
  9343                           ;incstack = 0
  9344                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9345  0021B6  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9346                           
  9347                           ; BSR set to: 1
  9348                           ;main.c: 1808: uint8_t crc = 0;
  9349  0021BA  0100               	movlb	0	; () banked
  9350  0021BC  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9351  0021BE                     l848:
  9352  0021BE  A2AC               	btfss	4012,1,c	;volatile
  9353  0021C0  D7FE               	goto	l848
  9354                           
  9355                           ;main.c: 1812: WriteUSART(0x10);
  9356  0021C2  0E10               	movlw	16
  9357  0021C4  ECB1  F007         	call	_WriteUSART
  9358  0021C8                     l851:
  9359  0021C8  A2AC               	btfss	4012,1,c	;volatile
  9360  0021CA  D7FE               	goto	l851
  9361                           
  9362                           ;main.c: 1814: WriteUSART(0x02);
  9363  0021CC  0E02               	movlw	2
  9364  0021CE  ECB1  F007         	call	_WriteUSART
  9365  0021D2                     l854:
  9366  0021D2  A2AC               	btfss	4012,1,c	;volatile
  9367  0021D4  D7FE               	goto	l854
  9368                           
  9369                           ;main.c: 1818: WriteUSART(253);
  9370  0021D6  0EFD               	movlw	253
  9371  0021D8  ECB1  F007         	call	_WriteUSART
  9372                           
  9373                           ;main.c: 1819: crc8(&crc, 253);
  9374  0021DC  0100               	movlb	0	; () banked
  9375  0021DE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9376  0021E0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9377  0021E2  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9378  0021E4  6F67               	movwf	?_crc8& (0+255),b
  9379  0021E6  0EFD               	movlw	253
  9380  0021E8  6F69               	movwf	(?_crc8+2)& (0+255),b
  9381  0021EA  EC95  F008         	call	_crc8	;wreg free
  9382  0021EE                     l857:
  9383  0021EE  A2AC               	btfss	4012,1,c	;volatile
  9384  0021F0  D7FE               	goto	l857
  9385                           
  9386                           ;main.c: 1823: WriteUSART(0);
  9387  0021F2  0E00               	movlw	0
  9388  0021F4  ECB1  F007         	call	_WriteUSART
  9389                           
  9390                           ;main.c: 1824: crc8(&crc, 0);
  9391  0021F8  D836               	call	PL94	;call to abstracted procedure
  9392  0021FA  EC95  F008         	call	_crc8	;wreg free
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;main.c: 1827: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9396  0021FE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9397  002200  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9398  002202  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9399  002204  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9400  002206  0101               	movlb	1	; () banked
  9401  002208  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9402  00220A  ECEF  F00A         	call	_sendEscapedUartData
  9403  00220E                     l860:
  9404  00220E  A2AC               	btfss	4012,1,c	;volatile
  9405  002210  D7FE               	goto	l860
  9406                           
  9407                           ;main.c: 1831: WriteUSART(0);
  9408  002212  0E00               	movlw	0
  9409  002214  ECB1  F007         	call	_WriteUSART
  9410                           
  9411                           ;main.c: 1832: crc8(&crc, 0);
  9412  002218  D826               	call	PL94	;call to abstracted procedure
  9413  00221A  EC95  F008         	call	_crc8	;wreg free
  9414  00221E                     l863:
  9415  00221E  A2AC               	btfss	4012,1,c	;volatile
  9416  002220  D7FE               	goto	l863
  9417                           
  9418                           ;main.c: 1834: WriteUSART(1);
  9419  002222  0E01               	movlw	1
  9420  002224  ECB1  F007         	call	_WriteUSART
  9421                           
  9422                           ;main.c: 1835: crc8(&crc, 1);
  9423  002228  0100               	movlb	0	; () banked
  9424  00222A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9425  00222C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9426  00222E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9427  002230  6F67               	movwf	?_crc8& (0+255),b
  9428  002232  0E01               	movlw	1
  9429  002234  6F69               	movwf	(?_crc8+2)& (0+255),b
  9430  002236  EC95  F008         	call	_crc8	;wreg free
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;main.c: 1838: sendEscapedUartData(errorcode, &crc);
  9434  00223A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9435  00223C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9436  00223E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9437  002240  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9438  002242  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9439  002244  ECEF  F00A         	call	_sendEscapedUartData
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;main.c: 1841: sendEscapedUartData(crc, (0));
  9443  002248  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9444  00224A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9445  00224C  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9446  00224E  ECEF  F00A         	call	_sendEscapedUartData
  9447  002252                     l866:
  9448  002252  A2AC               	btfss	4012,1,c	;volatile
  9449  002254  D7FE               	goto	l866
  9450                           
  9451                           ;main.c: 1845: WriteUSART(0x10);
  9452  002256  0E10               	movlw	16
  9453  002258  ECB1  F007         	call	_WriteUSART
  9454  00225C                     l869:
  9455  00225C  A2AC               	btfss	4012,1,c	;volatile
  9456  00225E  D7FE               	goto	l869
  9457                           
  9458                           ;main.c: 1847: WriteUSART(0x03);
  9459  002260  0E03               	movlw	3
  9460  002262  EFB1  F007         	goto	_WriteUSART
  9461  002266                     __end_of_sendVSCPDriverErrorFrame:
  9462                           	opt stack 0
  9463  002266                     PL94:
  9464                           	opt stack 22
  9465  002266  0100               	movlb	0	; () banked
  9466  002268  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9467  00226A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9468  00226C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9469  00226E  6F67               	movwf	?_crc8& (0+255),b
  9470  002270  6B69               	clrf	(?_crc8+2)& (0+255),b
  9471  002272  0C00               	retlw	0
  9472  002274                     __end_ofPL94:
  9473                           	opt stack 0
  9474                           tblptru	equ	0xFF8
  9475                           tblptrh	equ	0xFF7
  9476                           tblptrl	equ	0xFF6
  9477                           tablat	equ	0xFF5
  9478                           prodh	equ	0xFF4
  9479                           prodl	equ	0xFF3
  9480                           intcon	equ	0xFF2
  9481                           indf0	equ	0xFEF
  9482                           postinc0	equ	0xFEE
  9483                           fsr0h	equ	0xFEA
  9484                           fsr0l	equ	0xFE9
  9485                           wreg	equ	0xFE8
  9486                           indf1	equ	0xFE7
  9487                           postinc1	equ	0xFE6
  9488                           postdec1	equ	0xFE5
  9489                           fsr1h	equ	0xFE2
  9490                           fsr1l	equ	0xFE1
  9491                           indf2	equ	0xFDF
  9492                           postinc2	equ	0xFDE
  9493                           postdec2	equ	0xFDD
  9494                           plusw2	equ	0xFDB
  9495                           fsr2h	equ	0xFDA
  9496                           fsr2l	equ	0xFD9
  9497                           status	equ	0xFD8
  9498                           
  9499 ;; *************** function _sendVSCPDriverCommandReply *****************
  9500 ;; Defined at:
  9501 ;;		line 1944 in file "main.c"
  9502 ;; Parameters:    Size  Location     Type
  9503 ;;  cmdReplyCode    1    wreg     unsigned char 
  9504 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9507 ;;  crc             1   17[BANK0 ] unsigned char 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;		None               void
  9510 ;; Registers used:
  9511 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9512 ;; Tracked objects:
  9513 ;;		On entry : F/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9517 ;;      Params:         0       1       0       0       0       0       0
  9518 ;;      Locals:         0       2       0       0       0       0       0
  9519 ;;      Temps:          0       0       0       0       0       0       0
  9520 ;;      Totals:         0       3       0       0       0       0       0
  9521 ;;Total ram usage:        3 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    6
  9524 ;; This function calls:
  9525 ;;		_WriteUSART
  9526 ;;		_sendEscapedUartData
  9527 ;;		_crc8
  9528 ;; This function is called by:
  9529 ;;		_doModeVscp
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text9
  9534  0025A0                     __ptext9:
  9535                           	opt stack 0
  9536  0025A0                     _sendVSCPDriverCommandReply:
  9537                           	opt stack 22
  9538                           
  9539                           ;incstack = 0
  9540                           ;incstack = 0
  9541                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9542  0025A0  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;main.c: 1945: uint8_t crc = 0;
  9546  0025A4  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9547  0025A6                     l929:
  9548                           
  9549                           ; BSR set to: 0
  9550  0025A6  A2AC               	btfss	4012,1,c	;volatile
  9551  0025A8  D7FE               	goto	l929
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;main.c: 1949: WriteUSART(0x10);
  9555  0025AA  0E10               	movlw	16
  9556  0025AC  ECB1  F007         	call	_WriteUSART
  9557  0025B0                     l932:
  9558  0025B0  A2AC               	btfss	4012,1,c	;volatile
  9559  0025B2  D7FE               	goto	l932
  9560                           
  9561                           ;main.c: 1951: WriteUSART(0x02);
  9562  0025B4  0E02               	movlw	2
  9563  0025B6  ECB1  F007         	call	_WriteUSART
  9564  0025BA                     l935:
  9565  0025BA  A2AC               	btfss	4012,1,c	;volatile
  9566  0025BC  D7FE               	goto	l935
  9567                           
  9568                           ;main.c: 1955: WriteUSART(254);
  9569  0025BE  0EFE               	movlw	254
  9570  0025C0  ECB1  F007         	call	_WriteUSART
  9571                           
  9572                           ;main.c: 1956: crc8(&crc, 254);
  9573  0025C4  0100               	movlb	0	; () banked
  9574  0025C6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9575  0025C8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9576  0025CA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9577  0025CC  6F67               	movwf	?_crc8& (0+255),b
  9578  0025CE  0EFE               	movlw	254
  9579  0025D0  6F69               	movwf	(?_crc8+2)& (0+255),b
  9580  0025D2  EC95  F008         	call	_crc8	;wreg free
  9581  0025D6                     l938:
  9582                           
  9583                           ; BSR set to: 0
  9584  0025D6  A2AC               	btfss	4012,1,c	;volatile
  9585  0025D8  D7FE               	goto	l938
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;main.c: 1960: WriteUSART(0);
  9589  0025DA  0E00               	movlw	0
  9590  0025DC  ECB1  F007         	call	_WriteUSART
  9591                           
  9592                           ;main.c: 1961: crc8(&crc, 0);
  9593  0025E0  D841               	call	PL98	;call to abstracted procedure
  9594  0025E2  EC95  F008         	call	_crc8	;wreg free
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;main.c: 1964: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9598  0025E6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9599  0025E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9600  0025EA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9601  0025EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9602  0025EE  0101               	movlb	1	; () banked
  9603  0025F0  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9604  0025F2  ECEF  F00A         	call	_sendEscapedUartData
  9605  0025F6                     l941:
  9606                           
  9607                           ; BSR set to: 0
  9608  0025F6  A2AC               	btfss	4012,1,c	;volatile
  9609  0025F8  D7FE               	goto	l941
  9610                           
  9611                           ; BSR set to: 0
  9612                           ;main.c: 1968: WriteUSART(0);
  9613  0025FA  0E00               	movlw	0
  9614  0025FC  ECB1  F007         	call	_WriteUSART
  9615                           
  9616                           ;main.c: 1969: crc8(&crc, 0);
  9617  002600  D831               	call	PL98	;call to abstracted procedure
  9618  002602  EC95  F008         	call	_crc8	;wreg free
  9619  002606                     l944:
  9620                           
  9621                           ; BSR set to: 0
  9622  002606  A2AC               	btfss	4012,1,c	;volatile
  9623  002608  D7FE               	goto	l944
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;main.c: 1971: WriteUSART(2);
  9627  00260A  0E02               	movlw	2
  9628  00260C  ECB1  F007         	call	_WriteUSART
  9629                           
  9630                           ;main.c: 1972: crc8(&crc, 2);
  9631  002610  0100               	movlb	0	; () banked
  9632  002612  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9633  002614  6F68               	movwf	(?_crc8+1)& (0+255),b
  9634  002616  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9635  002618  6F67               	movwf	?_crc8& (0+255),b
  9636  00261A  0E02               	movlw	2
  9637  00261C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9638  00261E  EC95  F008         	call	_crc8	;wreg free
  9639  002622                     l947:
  9640                           
  9641                           ; BSR set to: 0
  9642  002622  A2AC               	btfss	4012,1,c	;volatile
  9643  002624  D7FE               	goto	l947
  9644                           
  9645                           ; BSR set to: 0
  9646                           ;main.c: 1976: sendEscapedUartData(cmdReplyCode, &crc);
  9647  002626  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9648  002628  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9649  00262A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9650  00262C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9651  00262E  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9652  002630  ECEF  F00A         	call	_sendEscapedUartData
  9653  002634                     l950:
  9654                           
  9655                           ; BSR set to: 0
  9656  002634  A2AC               	btfss	4012,1,c	;volatile
  9657  002636  D7FE               	goto	l950
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;main.c: 1980: sendEscapedUartData(cmdCode, &crc);
  9661  002638  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9662  00263A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9663  00263C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9664  00263E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9665  002640  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9666  002642  ECEF  F00A         	call	_sendEscapedUartData
  9667                           
  9668                           ;main.c: 1983: sendEscapedUartData(crc, (0));
  9669  002646  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9670  002648  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9671  00264A  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9672  00264C  ECEF  F00A         	call	_sendEscapedUartData
  9673  002650                     l953:
  9674                           
  9675                           ; BSR set to: 0
  9676  002650  A2AC               	btfss	4012,1,c	;volatile
  9677  002652  D7FE               	goto	l953
  9678                           
  9679                           ; BSR set to: 0
  9680                           ;main.c: 1987: WriteUSART(0x10);
  9681  002654  0E10               	movlw	16
  9682  002656  ECB1  F007         	call	_WriteUSART
  9683  00265A                     l956:
  9684  00265A  A2AC               	btfss	4012,1,c	;volatile
  9685  00265C  D7FE               	goto	l956
  9686                           
  9687                           ;main.c: 1989: WriteUSART(0x03);
  9688  00265E  0E03               	movlw	3
  9689  002660  EFB1  F007         	goto	_WriteUSART
  9690  002664                     __end_of_sendVSCPDriverCommandReply:
  9691                           	opt stack 0
  9692  002664                     PL98:
  9693                           	opt stack 22
  9694  002664  0100               	movlb	0	; () banked
  9695  002666  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9696  002668  6F68               	movwf	(?_crc8+1)& (0+255),b
  9697  00266A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9698  00266C  6F67               	movwf	?_crc8& (0+255),b
  9699  00266E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9700  002670  0C00               	retlw	0
  9701  002672                     __end_ofPL98:
  9702                           	opt stack 0
  9703                           tblptru	equ	0xFF8
  9704                           tblptrh	equ	0xFF7
  9705                           tblptrl	equ	0xFF6
  9706                           tablat	equ	0xFF5
  9707                           prodh	equ	0xFF4
  9708                           prodl	equ	0xFF3
  9709                           intcon	equ	0xFF2
  9710                           indf0	equ	0xFEF
  9711                           postinc0	equ	0xFEE
  9712                           fsr0h	equ	0xFEA
  9713                           fsr0l	equ	0xFE9
  9714                           wreg	equ	0xFE8
  9715                           indf1	equ	0xFE7
  9716                           postinc1	equ	0xFE6
  9717                           postdec1	equ	0xFE5
  9718                           fsr1h	equ	0xFE2
  9719                           fsr1l	equ	0xFE1
  9720                           indf2	equ	0xFDF
  9721                           postinc2	equ	0xFDE
  9722                           postdec2	equ	0xFDD
  9723                           plusw2	equ	0xFDB
  9724                           fsr2h	equ	0xFDA
  9725                           fsr2l	equ	0xFD9
  9726                           status	equ	0xFD8
  9727                           
  9728 ;; *************** function _sendVSCPModeCapabilities *****************
  9729 ;; Defined at:
  9730 ;;		line 2313 in file "main.c"
  9731 ;; Parameters:    Size  Location     Type
  9732 ;;		None
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  crc             1   15[BANK0 ] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      enum E15660
  9737 ;; Registers used:
  9738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : F/1
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9744 ;;      Params:         0       0       0       0       0       0       0
  9745 ;;      Locals:         0       1       0       0       0       0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0
  9747 ;;      Totals:         0       1       0       0       0       0       0
  9748 ;;Total ram usage:        1 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:    6
  9751 ;; This function calls:
  9752 ;;		_WriteUSART
  9753 ;;		_sendEscapedUartData
  9754 ;;		_crc8
  9755 ;; This function is called by:
  9756 ;;		_doModeVscp
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text10
  9761  002100                     __ptext10:
  9762                           	opt stack 0
  9763  002100                     _sendVSCPModeCapabilities:
  9764                           	opt stack 22
  9765                           
  9766                           ; BSR set to: 1
  9767                           ;main.c: 2314: uint8_t crc = 0;
  9768                           
  9769                           ;incstack = 0
  9770                           ;incstack = 0
  9771  002100  0100               	movlb	0	; () banked
  9772  002102  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9773  002104                     l1078:
  9774  002104  A2AC               	btfss	4012,1,c	;volatile
  9775  002106  D7FE               	goto	l1078
  9776                           
  9777                           ;main.c: 2318: WriteUSART(0x10);
  9778  002108  0E10               	movlw	16
  9779  00210A  ECB1  F007         	call	_WriteUSART
  9780  00210E                     l1081:
  9781  00210E  A2AC               	btfss	4012,1,c	;volatile
  9782  002110  D7FE               	goto	l1081
  9783                           
  9784                           ;main.c: 2320: WriteUSART(0x02);
  9785  002112  0E02               	movlw	2
  9786  002114  ECB1  F007         	call	_WriteUSART
  9787  002118                     l1084:
  9788  002118  A2AC               	btfss	4012,1,c	;volatile
  9789  00211A  D7FE               	goto	l1084
  9790                           
  9791                           ;main.c: 2324: WriteUSART(9);
  9792  00211C  0E09               	movlw	9
  9793  00211E  ECB1  F007         	call	_WriteUSART
  9794                           
  9795                           ;main.c: 2325: crc8(&crc, 9);
  9796  002122  0100               	movlb	0	; () banked
  9797  002124  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9798  002126  6F68               	movwf	(?_crc8+1)& (0+255),b
  9799  002128  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9800  00212A  6F67               	movwf	?_crc8& (0+255),b
  9801  00212C  0E09               	movlw	9
  9802  00212E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9803  002130  EC95  F008         	call	_crc8	;wreg free
  9804  002134                     l1087:
  9805  002134  A2AC               	btfss	4012,1,c	;volatile
  9806  002136  D7FE               	goto	l1087
  9807                           
  9808                           ;main.c: 2329: WriteUSART(0);
  9809  002138  0E00               	movlw	0
  9810  00213A  ECB1  F007         	call	_WriteUSART
  9811                           
  9812                           ;main.c: 2330: crc8(&crc, 0);
  9813  00213E  0100               	movlb	0	; () banked
  9814  002140  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9815  002142  6F68               	movwf	(?_crc8+1)& (0+255),b
  9816  002144  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9817  002146  6F67               	movwf	?_crc8& (0+255),b
  9818  002148  0E00               	movlw	0
  9819  00214A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9820  00214C  EC95  F008         	call	_crc8	;wreg free
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;main.c: 2333: sendEscapedUartData(sequencyno, &crc );
  9824  002150  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9825  002152  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9826  002154  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9827  002156  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9828  002158  5036               	movf	_sequencyno,w,c
  9829  00215A  ECEF  F00A         	call	_sendEscapedUartData
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;main.c: 2334: sequencyno++;
  9833  00215E  2A36               	incf	_sequencyno,f,c
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;main.c: 2337: sendEscapedUartData( 0, &crc );
  9837  002160  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9838  002162  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9839  002164  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9840  002166  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9841  002168  0E00               	movlw	0
  9842  00216A  ECEF  F00A         	call	_sendEscapedUartData
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;main.c: 2338: sendEscapedUartData( 2, &crc );
  9846  00216E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9847  002170  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9848  002172  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9849  002174  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9850  002176  0E02               	movlw	2
  9851  002178  ECEF  F00A         	call	_sendEscapedUartData
  9852                           
  9853                           ; BSR set to: 0
  9854                           ;main.c: 2341: sendEscapedUartData( 1, &crc );
  9855  00217C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9856  00217E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9857  002180  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9858  002182  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9859  002184  0E01               	movlw	1
  9860  002186  ECEF  F00A         	call	_sendEscapedUartData
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;main.c: 2342: sendEscapedUartData( 0, &crc );
  9864  00218A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9865  00218C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9866  00218E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9867  002190  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9868  002192  0E00               	movlw	0
  9869  002194  ECEF  F00A         	call	_sendEscapedUartData
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;main.c: 2345: sendEscapedUartData(crc, (0));
  9873  002198  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9874  00219A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9875  00219C  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9876  00219E  ECEF  F00A         	call	_sendEscapedUartData
  9877  0021A2                     l1090:
  9878  0021A2  A2AC               	btfss	4012,1,c	;volatile
  9879  0021A4  D7FE               	goto	l1090
  9880                           
  9881                           ;main.c: 2349: WriteUSART(0x10);
  9882  0021A6  0E10               	movlw	16
  9883  0021A8  ECB1  F007         	call	_WriteUSART
  9884  0021AC                     l1093:
  9885  0021AC  A2AC               	btfss	4012,1,c	;volatile
  9886  0021AE  D7FE               	goto	l1093
  9887                           
  9888                           ;main.c: 2351: WriteUSART(0x03);
  9889  0021B0  0E03               	movlw	3
  9890  0021B2  EFB1  F007         	goto	_WriteUSART
  9891  0021B6                     __end_of_sendVSCPModeCapabilities:
  9892                           	opt stack 0
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           indf0	equ	0xFEF
  9901                           postinc0	equ	0xFEE
  9902                           fsr0h	equ	0xFEA
  9903                           fsr0l	equ	0xFE9
  9904                           wreg	equ	0xFE8
  9905                           indf1	equ	0xFE7
  9906                           postinc1	equ	0xFE6
  9907                           postdec1	equ	0xFE5
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           plusw2	equ	0xFDB
  9914                           fsr2h	equ	0xFDA
  9915                           fsr2l	equ	0xFD9
  9916                           status	equ	0xFD8
  9917                           
  9918 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9919 ;; Defined at:
  9920 ;;		line 2447 in file "main.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      enum E15660
  9927 ;; Registers used:
  9928 ;;		wreg
  9929 ;; Tracked objects:
  9930 ;;		On entry : F/1
  9931 ;;		On exit  : F/1
  9932 ;;		Unchanged: F/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9934 ;;      Params:         0       0       0       0       0       0       0
  9935 ;;      Locals:         0       0       0       0       0       0       0
  9936 ;;      Temps:          0       0       0       0       0       0       0
  9937 ;;      Totals:         0       0       0       0       0       0       0
  9938 ;;Total ram usage:        0 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    3
  9941 ;; This function calls:
  9942 ;;		Nothing
  9943 ;; This function is called by:
  9944 ;;		_doModeVscp
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text11
  9949  000F1A                     __ptext11:
  9950                           	opt stack 0
  9951  000F1A                     _receiveVSCPModeMultiCanalMsg:
  9952                           	opt stack 25
  9953                           
  9954                           ; BSR set to: 1
  9955                           
  9956                           ; BSR set to: 1
  9957                           ;main.c: 2449: return 0;
  9958                           
  9959                           ;incstack = 0
  9960                           ;incstack = 0
  9961  000F1A  0C00               	retlw	0
  9962  000F1C                     __end_of_receiveVSCPModeMultiCanalMsg:
  9963                           	opt stack 0
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           indf0	equ	0xFEF
  9972                           postinc0	equ	0xFEE
  9973                           fsr0h	equ	0xFEA
  9974                           fsr0l	equ	0xFE9
  9975                           wreg	equ	0xFE8
  9976                           indf1	equ	0xFE7
  9977                           postinc1	equ	0xFE6
  9978                           postdec1	equ	0xFE5
  9979                           fsr1h	equ	0xFE2
  9980                           fsr1l	equ	0xFE1
  9981                           indf2	equ	0xFDF
  9982                           postinc2	equ	0xFDE
  9983                           postdec2	equ	0xFDD
  9984                           plusw2	equ	0xFDB
  9985                           fsr2h	equ	0xFDA
  9986                           fsr2l	equ	0xFD9
  9987                           status	equ	0xFD8
  9988                           
  9989 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9990 ;; Defined at:
  9991 ;;		line 2423 in file "main.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  data            8   76[BANK0 ] unsigned char [8]
  9996 ;;  id              4   84[BANK0 ] unsigned long 
  9997 ;;  dlc             1   88[BANK0 ] unsigned char 
  9998 ;; Return value:  Size  Location     Type
  9999 ;;                  1    wreg      enum E15660
 10000 ;; Registers used:
 10001 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10002 ;; Tracked objects:
 10003 ;;		On entry : F/1
 10004 ;;		On exit  : E/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10007 ;;      Params:         0       0       0       0       0       0       0
 10008 ;;      Locals:         0      13       0       0       0       0       0
 10009 ;;      Temps:          0      20       0       0       0       0       0
 10010 ;;      Totals:         0      33       0       0       0       0       0
 10011 ;;Total ram usage:       33 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; Hardware stack levels required when called:    6
 10014 ;; This function calls:
 10015 ;;		_memcpy
 10016 ;;		_sendCANFrame
 10017 ;; This function is called by:
 10018 ;;		_doModeVscp
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text12
 10023  002758                     __ptext12:
 10024                           	opt stack 0
 10025  002758                     _receiveVSCPModeCanalMsg:
 10026                           	opt stack 22
 10027                           
 10028                           ; BSR set to: 1
 10029                           ;main.c: 2424: uint32_t id;
 10030                           ;main.c: 2425: uint8_t dlc;
 10031                           ;main.c: 2426: uint8_t data[8];
 10032                           ;main.c: 2428: id = ((uint32_t) cmdbuf[5] << 26) |
 10033                           ;main.c: 2429: ((uint32_t) cmdbuf[5 + 1] << 16) |
 10034                           ;main.c: 2430: ((uint32_t) cmdbuf[5 + 2] << 8) |
 10035                           ;main.c: 2431: cmdbuf[5 + 3];
 10036                           
 10037                           ; BSR set to: 1
 10038                           ;incstack = 0
 10039                           ;incstack = 0
 10040  002758  C134  F098         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
 10041  00275C  0100               	movlb	0	; () banked
 10042  00275E  6B99               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10043  002760  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
 10044  002762  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
 10045  002764  C09A  F09B         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
 10046  002768  C099  F09A         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
 10047  00276C  C098  F099         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
 10048  002770  6B98               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10049  002772  C133  F09C         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10050  002776  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10051  002778  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10052  00277A  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10053  00277C  C09D  F09F         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10054  002780  C09C  F09E         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10055  002784  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10056  002786  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10057  002788  C132  F0A0         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10058  00278C  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10059  00278E  6BA2               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10060  002790  6BA3               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10061  002792  0E1A               	movlw	26
 10062  002794                     u22605:
 10063  002794  90D8               	bcf	status,0,c
 10064  002796  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10065  002798  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10066  00279A  37A2               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10067  00279C  37A3               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10068  00279E  2EE8               	decfsz	wreg,f,c
 10069  0027A0  D7F9               	goto	u22605
 10070  0027A2  519C               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10071  0027A4  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10072  0027A6  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10073  0027A8  519D               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10074  0027AA  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10075  0027AC  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10076  0027AE  519E               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10077  0027B0  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10078  0027B2  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10079  0027B4  519F               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10080  0027B6  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10081  0027B8  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10082  0027BA  5198               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10083  0027BC  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10084  0027BE  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10085  0027C0  5199               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10086  0027C2  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10087  0027C4  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10088  0027C6  519A               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10089  0027C8  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10090  0027CA  6FAA               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10091  0027CC  519B               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10092  0027CE  11A7               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10093  0027D0  6FAB               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10094  0027D2  0101               	movlb	1	; () banked
 10095  0027D4  5135               	movf	(_cmdbuf+8)& (0+255),w,b
 10096  0027D6  0100               	movlb	0	; () banked
 10097  0027D8  11A8               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10098  0027DA  6FB4               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10099  0027DC  51A9               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10100  0027DE  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10101  0027E0  51AA               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10102  0027E2  6FB6               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10103  0027E4  51AB               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10104  0027E6  6FB7               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10105                           
 10106                           ;main.c: 2432: dlc = ( cmdbuf[4] - 4 ) & 0x07;
 10107  0027E8  0101               	movlb	1	; () banked
 10108  0027EA  5131               	movf	(_cmdbuf+4)& (0+255),w,b
 10109  0027EC  0FFC               	addlw	252
 10110  0027EE  0B07               	andlw	7
 10111  0027F0  0100               	movlb	0	; () banked
 10112  0027F2  6FB8               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;main.c: 2433: if ( dlc > 8 ) {
 10116  0027F4  0E08               	movlw	8
 10117  0027F6  65B8               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10118  0027F8  D002               	goto	l16937
 10119                           
 10120                           ; BSR set to: 0
 10121                           ;main.c: 2434: return 0;
 10122  0027FA  0E00               	movlw	0
 10123  0027FC  D021               	goto	l1131
 10124  0027FE                     l16937:
 10125                           
 10126                           ; BSR set to: 0
 10127                           ;main.c: 2435: }
 10128                           ;main.c: 2436: memcpy( data, cmdbuf + 5 + 4, dlc );
 10129  0027FE  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10130  002800  6F61               	movwf	(?_memcpy+1)& (0+255),b
 10131  002802  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10132  002804  6F60               	movwf	?_memcpy& (0+255),b
 10133  002806  0E36               	movlw	low (_cmdbuf+9)
 10134  002808  6F98               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10135  00280A  0E01               	movlw	high (_cmdbuf+9)
 10136  00280C  6F99               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10137  00280E  C098  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10138  002812  C099  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10139  002816  C0B8  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10140  00281A  6B65               	clrf	(?_memcpy+5)& (0+255),b
 10141  00281C  EC6B  F009         	call	_memcpy	;wreg free
 10142                           
 10143                           ; BSR set to: 0
 10144                           ;main.c: 2438: return sendCANFrame(id, dlc, data);
 10145  002820  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10146  002824  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10147  002828  C0B6  F093         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10148  00282C  C0B7  F094         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10149  002830  C0B8  F095         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10150  002834  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10151  002836  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
 10152  002838  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10153  00283A  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
 10154  00283C  ECB1  F008         	call	_sendCANFrame	;wreg free
 10155  002840                     l1131:
 10156  002840  0012               	return	
 10157  002842                     __end_of_receiveVSCPModeCanalMsg:
 10158                           	opt stack 0
 10159                           tblptru	equ	0xFF8
 10160                           tblptrh	equ	0xFF7
 10161                           tblptrl	equ	0xFF6
 10162                           tablat	equ	0xFF5
 10163                           prodh	equ	0xFF4
 10164                           prodl	equ	0xFF3
 10165                           intcon	equ	0xFF2
 10166                           indf0	equ	0xFEF
 10167                           postinc0	equ	0xFEE
 10168                           fsr0h	equ	0xFEA
 10169                           fsr0l	equ	0xFE9
 10170                           wreg	equ	0xFE8
 10171                           indf1	equ	0xFE7
 10172                           postinc1	equ	0xFE6
 10173                           postdec1	equ	0xFE5
 10174                           fsr1h	equ	0xFE2
 10175                           fsr1l	equ	0xFE1
 10176                           indf2	equ	0xFDF
 10177                           postinc2	equ	0xFDE
 10178                           postdec2	equ	0xFDD
 10179                           plusw2	equ	0xFDB
 10180                           fsr2h	equ	0xFDA
 10181                           fsr2l	equ	0xFD9
 10182                           status	equ	0xFD8
 10183                           
 10184 ;; *************** function _memcpy *****************
 10185 ;; Defined at:
 10186 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;  d1              2    0[BANK0 ] PTR void 
 10189 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10190 ;;  s1              2    2[BANK0 ] PTR const void 
 10191 ;;		 -> vscpData(8), cmdbuf(80), 
 10192 ;;  n               2    4[BANK0 ] unsigned int 
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 10195 ;;		 -> vscpData(8), cmdbuf(80), 
 10196 ;;  d               2    6[BANK0 ] PTR unsigned char 
 10197 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  2    0[BANK0 ] PTR void 
 10200 ;; Registers used:
 10201 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10202 ;; Tracked objects:
 10203 ;;		On entry : F/0
 10204 ;;		On exit  : F/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10207 ;;      Params:         0       6       0       0       0       0       0
 10208 ;;      Locals:         0       4       0       0       0       0       0
 10209 ;;      Temps:          0       0       0       0       0       0       0
 10210 ;;      Totals:         0      10       0       0       0       0       0
 10211 ;;Total ram usage:       10 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    3
 10214 ;; This function calls:
 10215 ;;		Nothing
 10216 ;; This function is called by:
 10217 ;;		_doModeSLCAN
 10218 ;;		_receiveVSCPModeCanalMsg
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           	psect	text13
 10223  0012D6                     __ptext13:
 10224                           	opt stack 0
 10225  0012D6                     _memcpy:
 10226                           	opt stack 25
 10227                           
 10228                           ; BSR set to: 0
 10229                           
 10230                           ;incstack = 0
 10231                           ;incstack = 0
 10232  0012D6  C062  F068         	movff	memcpy@s1,memcpy@s
 10233  0012DA  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 10234  0012DE  C060  F066         	movff	memcpy@d1,memcpy@d
 10235  0012E2  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 10236  0012E6  D00E               	goto	l17147
 10237  0012E8                     l17141:
 10238                           
 10239                           ; BSR set to: 0
 10240  0012E8  C068  FFD9         	movff	memcpy@s,fsr2l
 10241  0012EC  C069  FFDA         	movff	memcpy@s+1,fsr2h
 10242  0012F0  C066  FFE1         	movff	memcpy@d,fsr1l
 10243  0012F4  C067  FFE2         	movff	memcpy@d+1,fsr1h
 10244  0012F8  CFDF FFE7          	movff	indf2,indf1
 10245                           
 10246                           ; BSR set to: 0
 10247  0012FC  4B68               	infsnz	memcpy@s& (0+255),f,b
 10248  0012FE  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 10249                           
 10250                           ; BSR set to: 0
 10251  001300  4B66               	infsnz	memcpy@d& (0+255),f,b
 10252  001302  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 10253  001304                     l17147:
 10254                           
 10255                           ; BSR set to: 0
 10256  001304  0764               	decf	memcpy@n& (0+255),f,b
 10257  001306  A0D8               	btfss	status,0,c
 10258  001308  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10259  00130A  0100               	movlb	0	; () banked
 10260  00130C  2964               	incf	memcpy@n& (0+255),w,b
 10261  00130E  B4D8               	btfsc	status,2,c
 10262  001310  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10263  001312  B4D8               	btfsc	status,2,c
 10264                           
 10265                           ; BSR set to: 0
 10266  001314  0012               	return	
 10267  001316  D7E8               	goto	l17141
 10268  001318                     __end_of_memcpy:
 10269                           	opt stack 0
 10270                           tblptru	equ	0xFF8
 10271                           tblptrh	equ	0xFF7
 10272                           tblptrl	equ	0xFF6
 10273                           tablat	equ	0xFF5
 10274                           prodh	equ	0xFF4
 10275                           prodl	equ	0xFF3
 10276                           intcon	equ	0xFF2
 10277                           indf0	equ	0xFEF
 10278                           postinc0	equ	0xFEE
 10279                           fsr0h	equ	0xFEA
 10280                           fsr0l	equ	0xFE9
 10281                           wreg	equ	0xFE8
 10282                           indf1	equ	0xFE7
 10283                           postinc1	equ	0xFE6
 10284                           postdec1	equ	0xFE5
 10285                           fsr1h	equ	0xFE2
 10286                           fsr1l	equ	0xFE1
 10287                           indf2	equ	0xFDF
 10288                           postinc2	equ	0xFDE
 10289                           postdec2	equ	0xFDD
 10290                           plusw2	equ	0xFDB
 10291                           fsr2h	equ	0xFDA
 10292                           fsr2l	equ	0xFD9
 10293                           status	equ	0xFD8
 10294                           
 10295 ;; *************** function _sendVSCPDriverAck *****************
 10296 ;; Defined at:
 10297 ;;		line 1855 in file "main.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;  crc             1   15[BANK0 ] unsigned char 
 10302 ;; Return value:  Size  Location     Type
 10303 ;;		None               void
 10304 ;; Registers used:
 10305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10306 ;; Tracked objects:
 10307 ;;		On entry : E/1
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10311 ;;      Params:         0       0       0       0       0       0       0
 10312 ;;      Locals:         0       1       0       0       0       0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0
 10314 ;;      Totals:         0       1       0       0       0       0       0
 10315 ;;Total ram usage:        1 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    6
 10318 ;; This function calls:
 10319 ;;		_WriteUSART
 10320 ;;		_sendEscapedUartData
 10321 ;;		_crc8
 10322 ;; This function is called by:
 10323 ;;		_doModeVscp
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text14
 10328  001E5A                     __ptext14:
 10329                           	opt stack 0
 10330  001E5A                     _sendVSCPDriverAck:
 10331                           	opt stack 22
 10332                           
 10333                           ;main.c: 1856: uint8_t crc = 0;
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;incstack = 0
 10337                           ;incstack = 0
 10338  001E5A  0100               	movlb	0	; () banked
 10339  001E5C  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10340  001E5E                     l875:
 10341  001E5E  A2AC               	btfss	4012,1,c	;volatile
 10342  001E60  D7FE               	goto	l875
 10343                           
 10344                           ;main.c: 1860: WriteUSART(0x10);
 10345  001E62  0E10               	movlw	16
 10346  001E64  ECB1  F007         	call	_WriteUSART
 10347  001E68                     l878:
 10348  001E68  A2AC               	btfss	4012,1,c	;volatile
 10349  001E6A  D7FE               	goto	l878
 10350                           
 10351                           ;main.c: 1862: WriteUSART(0x02);
 10352  001E6C  0E02               	movlw	2
 10353  001E6E  ECB1  F007         	call	_WriteUSART
 10354  001E72                     l881:
 10355  001E72  A2AC               	btfss	4012,1,c	;volatile
 10356  001E74  D7FE               	goto	l881
 10357                           
 10358                           ;main.c: 1866: WriteUSART(251);
 10359  001E76  0EFB               	movlw	251
 10360  001E78  ECB1  F007         	call	_WriteUSART
 10361                           
 10362                           ;main.c: 1867: crc8(&crc, 251);
 10363  001E7C  0100               	movlb	0	; () banked
 10364  001E7E  0E00               	movlw	high sendVSCPDriverAck@crc
 10365  001E80  6F68               	movwf	(?_crc8+1)& (0+255),b
 10366  001E82  0E6F               	movlw	low sendVSCPDriverAck@crc
 10367  001E84  6F67               	movwf	?_crc8& (0+255),b
 10368  001E86  0EFB               	movlw	251
 10369  001E88  6F69               	movwf	(?_crc8+2)& (0+255),b
 10370  001E8A  EC95  F008         	call	_crc8	;wreg free
 10371  001E8E                     l884:
 10372  001E8E  A2AC               	btfss	4012,1,c	;volatile
 10373  001E90  D7FE               	goto	l884
 10374                           
 10375                           ;main.c: 1871: WriteUSART(0);
 10376  001E92  0E00               	movlw	0
 10377  001E94  ECB1  F007         	call	_WriteUSART
 10378                           
 10379                           ;main.c: 1872: crc8(&crc, 0);
 10380  001E98  D829               	call	PL48	;call to abstracted procedure
 10381  001E9A  EC95  F008         	call	_crc8	;wreg free
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;main.c: 1875: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10385  001E9E  0E00               	movlw	high sendVSCPDriverAck@crc
 10386  001EA0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10387  001EA2  0E6F               	movlw	low sendVSCPDriverAck@crc
 10388  001EA4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10389  001EA6  0101               	movlb	1	; () banked
 10390  001EA8  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10391  001EAA  ECEF  F00A         	call	_sendEscapedUartData
 10392  001EAE                     l887:
 10393  001EAE  A2AC               	btfss	4012,1,c	;volatile
 10394  001EB0  D7FE               	goto	l887
 10395                           
 10396                           ;main.c: 1879: WriteUSART(0);
 10397  001EB2  0E00               	movlw	0
 10398  001EB4  ECB1  F007         	call	_WriteUSART
 10399                           
 10400                           ;main.c: 1880: crc8(&crc, 0);
 10401  001EB8  D819               	call	PL48	;call to abstracted procedure
 10402  001EBA  EC95  F008         	call	_crc8	;wreg free
 10403  001EBE                     l890:
 10404  001EBE  A2AC               	btfss	4012,1,c	;volatile
 10405  001EC0  D7FE               	goto	l890
 10406                           
 10407                           ;main.c: 1882: WriteUSART(0);
 10408  001EC2  0E00               	movlw	0
 10409  001EC4  ECB1  F007         	call	_WriteUSART
 10410                           
 10411                           ;main.c: 1883: crc8(&crc, 0);
 10412  001EC8  D811               	call	PL48	;call to abstracted procedure
 10413  001ECA  EC95  F008         	call	_crc8	;wreg free
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;main.c: 1886: sendEscapedUartData(crc, (0));
 10417  001ECE  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10418  001ED0  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10419  001ED2  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10420  001ED4  ECEF  F00A         	call	_sendEscapedUartData
 10421  001ED8                     l893:
 10422  001ED8  A2AC               	btfss	4012,1,c	;volatile
 10423  001EDA  D7FE               	goto	l893
 10424                           
 10425                           ;main.c: 1890: WriteUSART(0x10);
 10426  001EDC  0E10               	movlw	16
 10427  001EDE  ECB1  F007         	call	_WriteUSART
 10428  001EE2                     l896:
 10429  001EE2  A2AC               	btfss	4012,1,c	;volatile
 10430  001EE4  D7FE               	goto	l896
 10431                           
 10432                           ;main.c: 1892: WriteUSART(0x03);
 10433  001EE6  0E03               	movlw	3
 10434  001EE8  EFB1  F007         	goto	_WriteUSART
 10435  001EEC                     __end_of_sendVSCPDriverAck:
 10436                           	opt stack 0
 10437  001EEC                     PL48:
 10438                           	opt stack 22
 10439  001EEC  0100               	movlb	0	; () banked
 10440  001EEE  0E00               	movlw	high sendVSCPDriverAck@crc
 10441  001EF0  6F68               	movwf	(?_crc8+1)& (0+255),b
 10442  001EF2  0E6F               	movlw	low sendVSCPDriverAck@crc
 10443  001EF4  6F67               	movwf	?_crc8& (0+255),b
 10444  001EF6  6B69               	clrf	(?_crc8+2)& (0+255),b
 10445  001EF8  0C00               	retlw	0
 10446  001EFA                     __end_ofPL48:
 10447                           	opt stack 0
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           indf0	equ	0xFEF
 10456                           postinc0	equ	0xFEE
 10457                           fsr0h	equ	0xFEA
 10458                           fsr0l	equ	0xFE9
 10459                           wreg	equ	0xFE8
 10460                           indf1	equ	0xFE7
 10461                           postinc1	equ	0xFE6
 10462                           postdec1	equ	0xFE5
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           plusw2	equ	0xFDB
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function _sendVSCPDriverNack *****************
 10474 ;; Defined at:
 10475 ;;		line 1899 in file "main.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;  crc             1   15[BANK0 ] unsigned char 
 10480 ;; Return value:  Size  Location     Type
 10481 ;;		None               void
 10482 ;; Registers used:
 10483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : E/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10489 ;;      Params:         0       0       0       0       0       0       0
 10490 ;;      Locals:         0       1       0       0       0       0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0
 10492 ;;      Totals:         0       1       0       0       0       0       0
 10493 ;;Total ram usage:        1 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    6
 10496 ;; This function calls:
 10497 ;;		_WriteUSART
 10498 ;;		_sendEscapedUartData
 10499 ;;		_crc8
 10500 ;; This function is called by:
 10501 ;;		_doModeVscp
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text15
 10506  001DBA                     __ptext15:
 10507                           	opt stack 0
 10508  001DBA                     _sendVSCPDriverNack:
 10509                           	opt stack 22
 10510                           
 10511                           ;main.c: 1900: uint8_t crc = 0;
 10512                           
 10513                           ;incstack = 0
 10514                           ;incstack = 0
 10515  001DBA  0100               	movlb	0	; () banked
 10516  001DBC  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10517  001DBE                     l902:
 10518  001DBE  A2AC               	btfss	4012,1,c	;volatile
 10519  001DC0  D7FE               	goto	l902
 10520                           
 10521                           ;main.c: 1904: WriteUSART(0x10);
 10522  001DC2  0E10               	movlw	16
 10523  001DC4  ECB1  F007         	call	_WriteUSART
 10524  001DC8                     l905:
 10525  001DC8  A2AC               	btfss	4012,1,c	;volatile
 10526  001DCA  D7FE               	goto	l905
 10527                           
 10528                           ;main.c: 1906: WriteUSART(0x02);
 10529  001DCC  0E02               	movlw	2
 10530  001DCE  ECB1  F007         	call	_WriteUSART
 10531  001DD2                     l908:
 10532  001DD2  A2AC               	btfss	4012,1,c	;volatile
 10533  001DD4  D7FE               	goto	l908
 10534                           
 10535                           ;main.c: 1910: WriteUSART(252);
 10536  001DD6  0EFC               	movlw	252
 10537  001DD8  ECB1  F007         	call	_WriteUSART
 10538                           
 10539                           ;main.c: 1911: crc8(&crc, 252);
 10540  001DDC  0100               	movlb	0	; () banked
 10541  001DDE  0E00               	movlw	high sendVSCPDriverNack@crc
 10542  001DE0  6F68               	movwf	(?_crc8+1)& (0+255),b
 10543  001DE2  0E6F               	movlw	low sendVSCPDriverNack@crc
 10544  001DE4  6F67               	movwf	?_crc8& (0+255),b
 10545  001DE6  0EFC               	movlw	252
 10546  001DE8  6F69               	movwf	(?_crc8+2)& (0+255),b
 10547  001DEA  EC95  F008         	call	_crc8	;wreg free
 10548  001DEE                     l911:
 10549  001DEE  A2AC               	btfss	4012,1,c	;volatile
 10550  001DF0  D7FE               	goto	l911
 10551                           
 10552                           ;main.c: 1915: WriteUSART(0);
 10553  001DF2  0E00               	movlw	0
 10554  001DF4  ECB1  F007         	call	_WriteUSART
 10555                           
 10556                           ;main.c: 1916: crc8(&crc, 0);
 10557  001DF8  D829               	call	PL46	;call to abstracted procedure
 10558  001DFA  EC95  F008         	call	_crc8	;wreg free
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;main.c: 1919: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10562  001DFE  0E00               	movlw	high sendVSCPDriverNack@crc
 10563  001E00  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10564  001E02  0E6F               	movlw	low sendVSCPDriverNack@crc
 10565  001E04  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10566  001E06  0101               	movlb	1	; () banked
 10567  001E08  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10568  001E0A  ECEF  F00A         	call	_sendEscapedUartData
 10569  001E0E                     l914:
 10570  001E0E  A2AC               	btfss	4012,1,c	;volatile
 10571  001E10  D7FE               	goto	l914
 10572                           
 10573                           ;main.c: 1923: WriteUSART(0);
 10574  001E12  0E00               	movlw	0
 10575  001E14  ECB1  F007         	call	_WriteUSART
 10576                           
 10577                           ;main.c: 1924: crc8(&crc, 0);
 10578  001E18  D819               	call	PL46	;call to abstracted procedure
 10579  001E1A  EC95  F008         	call	_crc8	;wreg free
 10580  001E1E                     l917:
 10581  001E1E  A2AC               	btfss	4012,1,c	;volatile
 10582  001E20  D7FE               	goto	l917
 10583                           
 10584                           ;main.c: 1926: WriteUSART(0);
 10585  001E22  0E00               	movlw	0
 10586  001E24  ECB1  F007         	call	_WriteUSART
 10587                           
 10588                           ;main.c: 1927: crc8(&crc, 0);
 10589  001E28  D811               	call	PL46	;call to abstracted procedure
 10590  001E2A  EC95  F008         	call	_crc8	;wreg free
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;main.c: 1930: sendEscapedUartData(crc, (0));
 10594  001E2E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10595  001E30  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10596  001E32  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10597  001E34  ECEF  F00A         	call	_sendEscapedUartData
 10598  001E38                     l920:
 10599  001E38  A2AC               	btfss	4012,1,c	;volatile
 10600  001E3A  D7FE               	goto	l920
 10601                           
 10602                           ;main.c: 1934: WriteUSART(0x10);
 10603  001E3C  0E10               	movlw	16
 10604  001E3E  ECB1  F007         	call	_WriteUSART
 10605  001E42                     l923:
 10606  001E42  A2AC               	btfss	4012,1,c	;volatile
 10607  001E44  D7FE               	goto	l923
 10608                           
 10609                           ;main.c: 1936: WriteUSART(0x03);
 10610  001E46  0E03               	movlw	3
 10611  001E48  EFB1  F007         	goto	_WriteUSART
 10612  001E4C                     __end_of_sendVSCPDriverNack:
 10613                           	opt stack 0
 10614  001E4C                     PL46:
 10615                           	opt stack 22
 10616  001E4C  0100               	movlb	0	; () banked
 10617  001E4E  0E00               	movlw	high sendVSCPDriverNack@crc
 10618  001E50  6F68               	movwf	(?_crc8+1)& (0+255),b
 10619  001E52  0E6F               	movlw	low sendVSCPDriverNack@crc
 10620  001E54  6F67               	movwf	?_crc8& (0+255),b
 10621  001E56  6B69               	clrf	(?_crc8+2)& (0+255),b
 10622  001E58  0C00               	retlw	0
 10623  001E5A                     __end_ofPL46:
 10624                           	opt stack 0
 10625                           tblptru	equ	0xFF8
 10626                           tblptrh	equ	0xFF7
 10627                           tblptrl	equ	0xFF6
 10628                           tablat	equ	0xFF5
 10629                           prodh	equ	0xFF4
 10630                           prodl	equ	0xFF3
 10631                           intcon	equ	0xFF2
 10632                           indf0	equ	0xFEF
 10633                           postinc0	equ	0xFEE
 10634                           fsr0h	equ	0xFEA
 10635                           fsr0l	equ	0xFE9
 10636                           wreg	equ	0xFE8
 10637                           indf1	equ	0xFE7
 10638                           postinc1	equ	0xFE6
 10639                           postdec1	equ	0xFE5
 10640                           fsr1h	equ	0xFE2
 10641                           fsr1l	equ	0xFE1
 10642                           indf2	equ	0xFDF
 10643                           postinc2	equ	0xFDE
 10644                           postdec2	equ	0xFDD
 10645                           plusw2	equ	0xFDB
 10646                           fsr2h	equ	0xFDA
 10647                           fsr2l	equ	0xFD9
 10648                           status	equ	0xFD8
 10649                           
 10650 ;; *************** function _calcCRC *****************
 10651 ;; Defined at:
 10652 ;;		line 2659 in file "main.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10655 ;;		 -> cmdbuf(80), 
 10656 ;;  len             1   14[BANK0 ] unsigned char 
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;  crc             1   16[BANK0 ] unsigned char 
 10659 ;;  j               1   15[BANK0 ] unsigned char 
 10660 ;; Return value:  Size  Location     Type
 10661 ;;                  1    wreg      unsigned char 
 10662 ;; Registers used:
 10663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10664 ;; Tracked objects:
 10665 ;;		On entry : F/0
 10666 ;;		On exit  : F/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10669 ;;      Params:         0       3       0       0       0       0       0
 10670 ;;      Locals:         0       2       0       0       0       0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0
 10672 ;;      Totals:         0       5       0       0       0       0       0
 10673 ;;Total ram usage:        5 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    5
 10676 ;; This function calls:
 10677 ;;		_crc8
 10678 ;; This function is called by:
 10679 ;;		_doModeVscp
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           	psect	text16
 10684  00105E                     __ptext16:
 10685                           	opt stack 0
 10686  00105E                     _calcCRC:
 10687                           	opt stack 23
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;main.c: 2660: uint8_t j;
 10691                           ;main.c: 2661: uint8_t crc = 0;
 10692                           
 10693                           ;incstack = 0
 10694                           ;incstack = 0
 10695  00105E  6B70               	clrf	calcCRC@crc& (0+255),b
 10696                           
 10697                           ;main.c: 2663: for (j = 0; j < len; j++) {
 10698  001060  6B6F               	clrf	calcCRC@j& (0+255),b
 10699  001062  D00F               	goto	l16863
 10700  001064                     l16859:
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;main.c: 2664: crc8(&crc, p[j]);
 10704  001064  0E00               	movlw	high calcCRC@crc
 10705  001066  6F68               	movwf	(?_crc8+1)& (0+255),b
 10706  001068  0E70               	movlw	low calcCRC@crc
 10707  00106A  6F67               	movwf	?_crc8& (0+255),b
 10708  00106C  516F               	movf	calcCRC@j& (0+255),w,b
 10709  00106E  256C               	addwf	calcCRC@p& (0+255),w,b
 10710  001070  6ED9               	movwf	fsr2l,c
 10711  001072  0E00               	movlw	0
 10712  001074  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10713  001076  6EDA               	movwf	fsr2h,c
 10714  001078  50DF               	movf	indf2,w,c
 10715  00107A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10716  00107C  EC95  F008         	call	_crc8	;wreg free
 10717                           
 10718                           ; BSR set to: 0
 10719  001080  2B6F               	incf	calcCRC@j& (0+255),f,b
 10720  001082                     l16863:
 10721                           
 10722                           ; BSR set to: 0
 10723  001082  516E               	movf	calcCRC@len& (0+255),w,b
 10724  001084  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10725  001086  E3EE               	bnc	l16859
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;main.c: 2665: }
 10729                           ;main.c: 2667: return crc;
 10730  001088  5170               	movf	calcCRC@crc& (0+255),w,b
 10731                           
 10732                           ; BSR set to: 0
 10733  00108A  0012               	return	
 10734  00108C                     __end_of_calcCRC:
 10735                           	opt stack 0
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           indf0	equ	0xFEF
 10744                           postinc0	equ	0xFEE
 10745                           fsr0h	equ	0xFEA
 10746                           fsr0l	equ	0xFE9
 10747                           wreg	equ	0xFE8
 10748                           indf1	equ	0xFE7
 10749                           postinc1	equ	0xFE6
 10750                           postdec1	equ	0xFE5
 10751                           fsr1h	equ	0xFE2
 10752                           fsr1l	equ	0xFE1
 10753                           indf2	equ	0xFDF
 10754                           postinc2	equ	0xFDE
 10755                           postdec2	equ	0xFDD
 10756                           plusw2	equ	0xFDB
 10757                           fsr2h	equ	0xFDA
 10758                           fsr2l	equ	0xFD9
 10759                           status	equ	0xFD8
 10760                           
 10761 ;; *************** function _receiveSendEventCANAL *****************
 10762 ;; Defined at:
 10763 ;;		line 2051 in file "main.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;		None
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;  crc             1   33[BANK0 ] unsigned char 
 10768 ;;  data            8   19[BANK0 ] unsigned char [8]
 10769 ;;  id              4   28[BANK0 ] unsigned long 
 10770 ;;  dlc             1   32[BANK0 ] unsigned char 
 10771 ;;  i               1   27[BANK0 ] unsigned char 
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      enum E15660
 10774 ;; Registers used:
 10775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : F/1
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10781 ;;      Params:         0       0       0       0       0       0       0
 10782 ;;      Locals:         0      15       0       0       0       0       0
 10783 ;;      Temps:          0       0       0       0       0       0       0
 10784 ;;      Totals:         0      15       0       0       0       0       0
 10785 ;;Total ram usage:       15 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    6
 10788 ;; This function calls:
 10789 ;;		_WriteUSART
 10790 ;;		_sendEscapedUartData
 10791 ;;		_crc8
 10792 ;;		_getCANFrame
 10793 ;; This function is called by:
 10794 ;;		_doModeVscp
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           	psect	text17
 10799  0030C8                     __ptext17:
 10800                           	opt stack 0
 10801  0030C8                     _receiveSendEventCANAL:
 10802                           	opt stack 22
 10803                           
 10804                           ; BSR set to: 1
 10805                           ;main.c: 2052: uint8_t i;
 10806                           ;main.c: 2053: uint32_t id;
 10807                           ;main.c: 2054: uint8_t dlc;
 10808                           ;main.c: 2055: uint8_t data[8];
 10809                           ;main.c: 2057: if ( getCANFrame( &id, &dlc, &data ) ) {
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;incstack = 0
 10813                           ;incstack = 0
 10814  0030C8  0100               	movlb	0	; () banked
 10815  0030CA  0E00               	movlw	high receiveSendEventCANAL@dlc
 10816  0030CC  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10817  0030CE  0E80               	movlw	low receiveSendEventCANAL@dlc
 10818  0030D0  6F6E               	movwf	?_getCANFrame& (0+255),b
 10819  0030D2  0E00               	movlw	high receiveSendEventCANAL@data
 10820  0030D4  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 10821  0030D6  0E73               	movlw	low receiveSendEventCANAL@data
 10822  0030D8  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10823  0030DA  0E7C               	movlw	receiveSendEventCANAL@id& (0+255)
 10824  0030DC  ECD1  F00F         	call	_getCANFrame
 10825  0030E0  0900               	iorlw	0
 10826  0030E2  E101 D092          	bz	l1018
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 2059: uint8_t crc = 0;
 10830  0030E6  6B81               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;main.c: 2062: cntRxFrames++;
 10834  0030E8  0101               	movlb	1	; () banked
 10835  0030EA  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10836  0030EC  0E00               	movlw	0
 10837  0030EE  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10838  0030F0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10839  0030F2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10840                           
 10841                           ;main.c: 2063: cntRxBytes += dlc;
 10842  0030F4  0100               	movlb	0	; () banked
 10843  0030F6  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10844  0030F8  0101               	movlb	1	; () banked
 10845  0030FA  2708               	addwf	_cntRxBytes& (0+255),f,b
 10846  0030FC  0E00               	movlw	0
 10847  0030FE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10848  003100  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10849  003102  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10850  003104                     l997:
 10851                           
 10852                           ; BSR set to: 1
 10853  003104  A2AC               	btfss	4012,1,c	;volatile
 10854  003106  D7FE               	goto	l997
 10855                           
 10856                           ; BSR set to: 1
 10857                           ;main.c: 2067: WriteUSART(0x10);
 10858  003108  0E10               	movlw	16
 10859  00310A  ECB1  F007         	call	_WriteUSART
 10860  00310E                     l1000:
 10861  00310E  A2AC               	btfss	4012,1,c	;volatile
 10862  003110  D7FE               	goto	l1000
 10863                           
 10864                           ;main.c: 2069: WriteUSART(0x02);
 10865  003112  0E02               	movlw	2
 10866  003114  ECB1  F007         	call	_WriteUSART
 10867  003118                     l1003:
 10868  003118  A2AC               	btfss	4012,1,c	;volatile
 10869  00311A  D7FE               	goto	l1003
 10870                           
 10871                           ;main.c: 2073: WriteUSART(2);
 10872  00311C  0E02               	movlw	2
 10873  00311E  ECB1  F007         	call	_WriteUSART
 10874                           
 10875                           ;main.c: 2074: crc8(&crc, 2);
 10876  003122  0100               	movlb	0	; () banked
 10877  003124  0E00               	movlw	high receiveSendEventCANAL@crc
 10878  003126  6F68               	movwf	(?_crc8+1)& (0+255),b
 10879  003128  0E81               	movlw	low receiveSendEventCANAL@crc
 10880  00312A  6F67               	movwf	?_crc8& (0+255),b
 10881  00312C  0E02               	movlw	2
 10882  00312E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10883  003130  EC95  F008         	call	_crc8	;wreg free
 10884  003134                     l1006:
 10885  003134  A2AC               	btfss	4012,1,c	;volatile
 10886  003136  D7FE               	goto	l1006
 10887                           
 10888                           ;main.c: 2078: WriteUSART(0);
 10889  003138  0E00               	movlw	0
 10890  00313A  ECB1  F007         	call	_WriteUSART
 10891                           
 10892                           ;main.c: 2079: crc8(&crc, 0);
 10893  00313E  0100               	movlb	0	; () banked
 10894  003140  0E00               	movlw	high receiveSendEventCANAL@crc
 10895  003142  6F68               	movwf	(?_crc8+1)& (0+255),b
 10896  003144  0E81               	movlw	low receiveSendEventCANAL@crc
 10897  003146  6F67               	movwf	?_crc8& (0+255),b
 10898  003148  0E00               	movlw	0
 10899  00314A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10900  00314C  EC95  F008         	call	_crc8	;wreg free
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;main.c: 2082: sendEscapedUartData(sequencyno, &crc);
 10904  003150  0E00               	movlw	high receiveSendEventCANAL@crc
 10905  003152  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10906  003154  0E81               	movlw	low receiveSendEventCANAL@crc
 10907  003156  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10908  003158  5036               	movf	_sequencyno,w,c
 10909  00315A  ECEF  F00A         	call	_sendEscapedUartData
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;main.c: 2083: sequencyno++;
 10913  00315E  2A36               	incf	_sequencyno,f,c
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;main.c: 2086: sendEscapedUartData(0, &crc);
 10917  003160  0E00               	movlw	high receiveSendEventCANAL@crc
 10918  003162  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10919  003164  0E81               	movlw	low receiveSendEventCANAL@crc
 10920  003166  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10921  003168  0E00               	movlw	0
 10922  00316A  ECEF  F00A         	call	_sendEscapedUartData
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 2087: sendEscapedUartData(5 + dlc, &crc);
 10926  00316E  0E00               	movlw	high receiveSendEventCANAL@crc
 10927  003170  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10928  003172  0E81               	movlw	low receiveSendEventCANAL@crc
 10929  003174  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10930  003176  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10931  003178  0F05               	addlw	5
 10932  00317A  ECEF  F00A         	call	_sendEscapedUartData
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;main.c: 2093: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10936  00317E  0E00               	movlw	high receiveSendEventCANAL@crc
 10937  003180  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10938  003182  0E81               	movlw	low receiveSendEventCANAL@crc
 10939  003184  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10940  003186  0100               	movlb	0	; () banked
 10941  003188  517F               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10942  00318A  ECEF  F00A         	call	_sendEscapedUartData
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;main.c: 2094: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10946  00318E  0E00               	movlw	high receiveSendEventCANAL@crc
 10947  003190  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10948  003192  0E81               	movlw	low receiveSendEventCANAL@crc
 10949  003194  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10950  003196  0100               	movlb	0	; () banked
 10951  003198  517E               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10952  00319A  ECEF  F00A         	call	_sendEscapedUartData
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;main.c: 2095: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10956  00319E  0E00               	movlw	high receiveSendEventCANAL@crc
 10957  0031A0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10958  0031A2  0E81               	movlw	low receiveSendEventCANAL@crc
 10959  0031A4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10960  0031A6  0100               	movlb	0	; () banked
 10961  0031A8  517D               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10962  0031AA  ECEF  F00A         	call	_sendEscapedUartData
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;main.c: 2096: sendEscapedUartData((id & 0xff), &crc);
 10966  0031AE  0E00               	movlw	high receiveSendEventCANAL@crc
 10967  0031B0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10968  0031B2  0E81               	movlw	low receiveSendEventCANAL@crc
 10969  0031B4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10970  0031B6  517C               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10971  0031B8  ECEF  F00A         	call	_sendEscapedUartData
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 2099: sendEscapedUartData(dlc, &crc);
 10975  0031BC  0E00               	movlw	high receiveSendEventCANAL@crc
 10976  0031BE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10977  0031C0  0E81               	movlw	low receiveSendEventCANAL@crc
 10978  0031C2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10979  0031C4  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10980  0031C6  ECEF  F00A         	call	_sendEscapedUartData
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;main.c: 2102: for (i = 0; i < dlc; i++) {
 10984  0031CA  6B7B               	clrf	receiveSendEventCANAL@i& (0+255),b
 10985  0031CC  D00C               	goto	l16847
 10986  0031CE                     l16843:
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;main.c: 2103: sendEscapedUartData( data[ i ], &crc );
 10990  0031CE  0E00               	movlw	high receiveSendEventCANAL@crc
 10991  0031D0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10992  0031D2  0E81               	movlw	low receiveSendEventCANAL@crc
 10993  0031D4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10994  0031D6  517B               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10995  0031D8  0F73               	addlw	low receiveSendEventCANAL@data
 10996  0031DA  6ED9               	movwf	fsr2l,c
 10997  0031DC  6ADA               	clrf	fsr2h,c
 10998  0031DE  50DF               	movf	indf2,w,c
 10999  0031E0  ECEF  F00A         	call	_sendEscapedUartData
 11000                           
 11001                           ; BSR set to: 0
 11002  0031E4  2B7B               	incf	receiveSendEventCANAL@i& (0+255),f,b
 11003  0031E6                     l16847:
 11004                           
 11005                           ; BSR set to: 0
 11006  0031E6  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11007  0031E8  5D7B               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 11008  0031EA  E3F1               	bnc	l16843
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;main.c: 2104: }
 11012                           ;main.c: 2109: sendEscapedUartData(crc, (0));
 11013  0031EC  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11014  0031EE  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11015  0031F0  5181               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 11016  0031F2  ECEF  F00A         	call	_sendEscapedUartData
 11017  0031F6                     l1012:
 11018  0031F6  A2AC               	btfss	4012,1,c	;volatile
 11019  0031F8  D7FE               	goto	l1012
 11020                           
 11021                           ;main.c: 2113: WriteUSART(0x10);
 11022  0031FA  0E10               	movlw	16
 11023  0031FC  ECB1  F007         	call	_WriteUSART
 11024  003200                     l1015:
 11025  003200  A2AC               	btfss	4012,1,c	;volatile
 11026  003202  D7FE               	goto	l1015
 11027                           
 11028                           ;main.c: 2115: WriteUSART(0x03);
 11029  003204  0E03               	movlw	3
 11030  003206  ECB1  F007         	call	_WriteUSART
 11031  00320A                     l1018:
 11032  00320A  0012               	return	
 11033  00320C                     __end_of_receiveSendEventCANAL:
 11034                           	opt stack 0
 11035                           tblptru	equ	0xFF8
 11036                           tblptrh	equ	0xFF7
 11037                           tblptrl	equ	0xFF6
 11038                           tablat	equ	0xFF5
 11039                           prodh	equ	0xFF4
 11040                           prodl	equ	0xFF3
 11041                           intcon	equ	0xFF2
 11042                           indf0	equ	0xFEF
 11043                           postinc0	equ	0xFEE
 11044                           fsr0h	equ	0xFEA
 11045                           fsr0l	equ	0xFE9
 11046                           wreg	equ	0xFE8
 11047                           indf1	equ	0xFE7
 11048                           postinc1	equ	0xFE6
 11049                           postdec1	equ	0xFE5
 11050                           fsr1h	equ	0xFE2
 11051                           fsr1l	equ	0xFE1
 11052                           indf2	equ	0xFDF
 11053                           postinc2	equ	0xFDE
 11054                           postdec2	equ	0xFDD
 11055                           plusw2	equ	0xFDB
 11056                           fsr2h	equ	0xFDA
 11057                           fsr2l	equ	0xFD9
 11058                           status	equ	0xFD8
 11059                           
 11060 ;; *************** function _receiveSendMultiEventCANAL *****************
 11061 ;; Defined at:
 11062 ;;		line 2128 in file "main.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  crc             1   34[BANK0 ] unsigned char 
 11067 ;;  data            8   19[BANK0 ] unsigned char [8]
 11068 ;;  id              4   29[BANK0 ] unsigned long 
 11069 ;;  pos             1   35[BANK0 ] unsigned char 
 11070 ;;  dlc             1   33[BANK0 ] unsigned char 
 11071 ;;  i               1   28[BANK0 ] unsigned char 
 11072 ;;  msgcount        1   27[BANK0 ] unsigned char 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  1    wreg      enum E15660
 11075 ;; Registers used:
 11076 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : F/1
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11082 ;;      Params:         0       0       0       0       0       0       0
 11083 ;;      Locals:         0      17       0       0       0       0       0
 11084 ;;      Temps:          0       0       0       0       0       0       0
 11085 ;;      Totals:         0      17       0       0       0       0       0
 11086 ;;Total ram usage:       17 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    6
 11089 ;; This function calls:
 11090 ;;		_WriteUSART
 11091 ;;		_sendEscapedUartData
 11092 ;;		_crc8
 11093 ;;		_getCANFrame
 11094 ;; This function is called by:
 11095 ;;		_doModeVscp
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           	psect	text18
 11100  00337A                     __ptext18:
 11101                           	opt stack 0
 11102  00337A                     _receiveSendMultiEventCANAL:
 11103                           	opt stack 22
 11104                           
 11105                           ; BSR set to: 1
 11106                           ;main.c: 2129: uint8_t i;
 11107                           ;main.c: 2130: uint8_t pos=0;
 11108                           
 11109                           ;incstack = 0
 11110                           ;incstack = 0
 11111  00337A  0100               	movlb	0	; () banked
 11112  00337C  6B83               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11113                           
 11114                           ;main.c: 2131: uint8_t msgcount=0;
 11115  00337E  6B7B               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;main.c: 2132: uint32_t id;
 11119                           ;main.c: 2133: uint8_t dlc;
 11120                           ;main.c: 2134: uint8_t data[8];
 11121                           ;main.c: 2136: if ( getCANFrame( &id, &dlc, &data ) ) {
 11122  003380  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11123  003382  D8B6               	call	PL80	;call to abstracted procedure
 11124  003384  ECD1  F00F         	call	_getCANFrame
 11125  003388  0900               	iorlw	0
 11126  00338A  E101 D0A8          	bz	l1050
 11127                           
 11128                           ; BSR set to: 0
 11129                           ;main.c: 2138: uint8_t crc = 0;
 11130  00338E  6B82               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11131                           
 11132                           ; BSR set to: 0
 11133                           ;main.c: 2141: cntRxFrames++;
 11134  003390  0101               	movlb	1	; () banked
 11135  003392  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11136  003394  0E00               	movlw	0
 11137  003396  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11138  003398  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11139  00339A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11140                           
 11141                           ;main.c: 2142: cntRxBytes += dlc;
 11142  00339C  0100               	movlb	0	; () banked
 11143  00339E  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11144  0033A0  0101               	movlb	1	; () banked
 11145  0033A2  2708               	addwf	_cntRxBytes& (0+255),f,b
 11146  0033A4  0E00               	movlw	0
 11147  0033A6  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11148  0033A8  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11149  0033AA  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11150  0033AC                     l1022:
 11151                           
 11152                           ; BSR set to: 1
 11153  0033AC  A2AC               	btfss	4012,1,c	;volatile
 11154  0033AE  D7FE               	goto	l1022
 11155                           
 11156                           ; BSR set to: 1
 11157                           ;main.c: 2146: WriteUSART(0x10);
 11158  0033B0  0E10               	movlw	16
 11159  0033B2  ECB1  F007         	call	_WriteUSART
 11160  0033B6                     l1025:
 11161  0033B6  A2AC               	btfss	4012,1,c	;volatile
 11162  0033B8  D7FE               	goto	l1025
 11163                           
 11164                           ;main.c: 2148: WriteUSART(0x02);
 11165  0033BA  0E02               	movlw	2
 11166  0033BC  ECB1  F007         	call	_WriteUSART
 11167  0033C0                     l1028:
 11168  0033C0  A2AC               	btfss	4012,1,c	;volatile
 11169  0033C2  D7FE               	goto	l1028
 11170                           
 11171                           ;main.c: 2152: WriteUSART(6);
 11172  0033C4  0E06               	movlw	6
 11173  0033C6  ECB1  F007         	call	_WriteUSART
 11174                           
 11175                           ;main.c: 2153: crc8(&crc, 6);
 11176  0033CA  0100               	movlb	0	; () banked
 11177  0033CC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11178  0033CE  6F68               	movwf	(?_crc8+1)& (0+255),b
 11179  0033D0  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11180  0033D2  6F67               	movwf	?_crc8& (0+255),b
 11181  0033D4  0E06               	movlw	6
 11182  0033D6  6F69               	movwf	(?_crc8+2)& (0+255),b
 11183  0033D8  EC95  F008         	call	_crc8	;wreg free
 11184  0033DC                     l1031:
 11185  0033DC  A2AC               	btfss	4012,1,c	;volatile
 11186  0033DE  D7FE               	goto	l1031
 11187                           
 11188                           ;main.c: 2157: WriteUSART(0);
 11189  0033E0  0E00               	movlw	0
 11190  0033E2  ECB1  F007         	call	_WriteUSART
 11191                           
 11192                           ;main.c: 2158: crc8(&crc, 0);
 11193  0033E6  0100               	movlb	0	; () banked
 11194  0033E8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11195  0033EA  6F68               	movwf	(?_crc8+1)& (0+255),b
 11196  0033EC  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11197  0033EE  6F67               	movwf	?_crc8& (0+255),b
 11198  0033F0  0E00               	movlw	0
 11199  0033F2  6B69               	clrf	(?_crc8+2)& (0+255),b
 11200  0033F4  EC95  F008         	call	_crc8	;wreg free
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;main.c: 2161: sendEscapedUartData(sequencyno, &crc);
 11204  0033F8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11205  0033FA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11206  0033FC  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11207  0033FE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11208  003400  5036               	movf	_sequencyno,w,c
 11209  003402  ECEF  F00A         	call	_sendEscapedUartData
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;main.c: 2162: sequencyno++;
 11213  003406  2A36               	incf	_sequencyno,f,c
 11214  003408                     l16749:
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;main.c: 2172: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11218  003408  0E7D               	movlw	low _wrkbuf
 11219  00340A  0100               	movlb	0	; () banked
 11220  00340C  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11221  00340E  6ED9               	movwf	fsr2l,c
 11222  003410  6ADA               	clrf	fsr2h,c
 11223  003412  0E01               	movlw	high _wrkbuf
 11224  003414  22DA               	addwfc	fsr2h,f,c
 11225  003416  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;main.c: 2173: pos++;
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;main.c: 2174: wrkbuf[ pos ] = (id >> 16) & 0xff;
 11232  00341A  D862               	call	PL26	;call to abstracted procedure
 11233  00341C  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;main.c: 2175: pos++;
 11237                           
 11238                           ; BSR set to: 0
 11239                           ;main.c: 2176: wrkbuf[ pos ] = (id >> 8) & 0xff;
 11240  003420  D85F               	call	PL26	;call to abstracted procedure
 11241  003422  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;main.c: 2177: pos++;
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;main.c: 2178: wrkbuf[ pos ] = id & 0xff;
 11248  003426  D85C               	call	PL26	;call to abstracted procedure
 11249  003428  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;main.c: 2179: pos++;
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;main.c: 2182: wrkbuf[ pos ] = dlc;
 11256  00342C  D859               	call	PL26	;call to abstracted procedure
 11257  00342E  C081  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 11258                           
 11259                           ; BSR set to: 0
 11260                           ;main.c: 2183: pos++;
 11261  003432  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;main.c: 2186: for (i = 0; i < dlc; i++) {
 11265  003434  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11266  003436  D00F               	goto	l16777
 11267  003438                     l16771:
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;main.c: 2187: wrkbuf[ pos ] = data[ i ];
 11271  003438  517C               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11272  00343A  0F73               	addlw	low receiveSendMultiEventCANAL@data
 11273  00343C  6ED9               	movwf	fsr2l,c
 11274  00343E  6ADA               	clrf	fsr2h,c
 11275  003440  0E7D               	movlw	low _wrkbuf
 11276  003442  0100               	movlb	0	; () banked
 11277  003444  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11278  003446  6EE1               	movwf	fsr1l,c
 11279  003448  6AE2               	clrf	fsr1h,c
 11280  00344A  0E01               	movlw	high _wrkbuf
 11281  00344C  22E2               	addwfc	fsr1h,f,c
 11282  00344E  CFDF FFE7          	movff	indf2,indf1
 11283                           
 11284                           ; BSR set to: 1
 11285                           ;main.c: 2188: pos++;
 11286  003452  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11287                           
 11288                           ; BSR set to: 0
 11289  003454  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11290  003456                     l16777:
 11291                           
 11292                           ; BSR set to: 0
 11293  003456  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11294  003458  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11295  00345A  E3EE               	bnc	l16771
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;main.c: 2189: }
 11299                           ;main.c: 2191: msgcount++;
 11300  00345C  2B7B               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;main.c: 2193: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11304                           ;main.c: 2194: ( msgcount < 5 ) &&
 11305                           ;main.c: 2195: getCANFrame( &id, &dlc, &data ) );
 11306  00345E  0101               	movlb	1	; () banked
 11307  003460  51F2               	movf	(_caps+1)& (0+255),w,b
 11308  003462  0100               	movlb	0	; () banked
 11309  003464  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11310  003466  D009               	goto	l16787
 11311                           
 11312                           ; BSR set to: 0
 11313  003468  0E05               	movlw	5
 11314  00346A  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11315  00346C  D006               	goto	l16787
 11316                           
 11317                           ; BSR set to: 0
 11318  00346E  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11319  003470  D83F               	call	PL80	;call to abstracted procedure
 11320  003472  ECD1  F00F         	call	_getCANFrame
 11321  003476  0900               	iorlw	0
 11322  003478  E1C7               	bnz	l16749
 11323  00347A                     l16787:
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;main.c: 2200: sendEscapedUartData(0, &crc);
 11327  00347A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11328  00347C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11329  00347E  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11330  003480  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11331  003482  0E00               	movlw	0
 11332  003484  ECEF  F00A         	call	_sendEscapedUartData
 11333                           
 11334                           ;main.c: 2201: sendEscapedUartData(pos, &crc);
 11335  003488  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11336  00348A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11337  00348C  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11338  00348E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11339  003490  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11340  003492  ECEF  F00A         	call	_sendEscapedUartData
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;main.c: 2204: for (i = 0; i < pos; i++) {
 11344  003496  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11345  003498  D010               	goto	l16795
 11346  00349A                     l16791:
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;main.c: 2205: sendEscapedUartData( wrkbuf[ i ], &crc);
 11350  00349A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11351  00349C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11352  00349E  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11353  0034A0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11354  0034A2  0E7D               	movlw	low _wrkbuf
 11355  0034A4  0100               	movlb	0	; () banked
 11356  0034A6  257C               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11357  0034A8  6ED9               	movwf	fsr2l,c
 11358  0034AA  6ADA               	clrf	fsr2h,c
 11359  0034AC  0101               	movlb	1	; () banked
 11360  0034AE  0E01               	movlw	high _wrkbuf
 11361  0034B0  22DA               	addwfc	fsr2h,f,c
 11362  0034B2  50DF               	movf	indf2,w,c
 11363  0034B4  ECEF  F00A         	call	_sendEscapedUartData
 11364                           
 11365                           ; BSR set to: 0
 11366  0034B8  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11367  0034BA                     l16795:
 11368                           
 11369                           ; BSR set to: 0
 11370  0034BA  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11371  0034BC  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11372  0034BE  E3ED               	bnc	l16791
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;main.c: 2206: }
 11376                           ;main.c: 2209: sendEscapedUartData(crc, (0));
 11377  0034C0  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11378  0034C2  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11379  0034C4  5182               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11380  0034C6  ECEF  F00A         	call	_sendEscapedUartData
 11381  0034CA                     l1044:
 11382  0034CA  A2AC               	btfss	4012,1,c	;volatile
 11383  0034CC  D7FE               	goto	l1044
 11384                           
 11385                           ;main.c: 2213: WriteUSART(0x10);
 11386  0034CE  0E10               	movlw	16
 11387  0034D0  ECB1  F007         	call	_WriteUSART
 11388  0034D4                     l1047:
 11389  0034D4  A2AC               	btfss	4012,1,c	;volatile
 11390  0034D6  D7FE               	goto	l1047
 11391                           
 11392                           ;main.c: 2215: WriteUSART(0x03);
 11393  0034D8  0E03               	movlw	3
 11394  0034DA  ECB1  F007         	call	_WriteUSART
 11395  0034DE                     l1050:
 11396  0034DE  0012               	return	
 11397  0034E0                     __end_of_receiveSendMultiEventCANAL:
 11398                           	opt stack 0
 11399  0034E0                     PL26:
 11400                           	opt stack 22
 11401  0034E0  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11402  0034E2  0E7D               	movlw	low _wrkbuf
 11403  0034E4  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11404  0034E6  6ED9               	movwf	fsr2l,c
 11405  0034E8  6ADA               	clrf	fsr2h,c
 11406  0034EA  0E01               	movlw	high _wrkbuf
 11407  0034EC  22DA               	addwfc	fsr2h,f,c
 11408  0034EE  0012               	return	
 11409  0034F0                     __end_ofPL26:
 11410                           	opt stack 0
 11411  0034F0                     PL80:
 11412                           	opt stack 22
 11413  0034F0  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11414  0034F2  0E81               	movlw	low receiveSendMultiEventCANAL@dlc
 11415  0034F4  6F6E               	movwf	?_getCANFrame& (0+255),b
 11416  0034F6  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11417  0034F8  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 11418  0034FA  0E73               	movlw	low receiveSendMultiEventCANAL@data
 11419  0034FC  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11420  0034FE  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11421  003500  0012               	return	
 11422  003502                     __end_ofPL80:
 11423                           	opt stack 0
 11424                           tblptru	equ	0xFF8
 11425                           tblptrh	equ	0xFF7
 11426                           tblptrl	equ	0xFF6
 11427                           tablat	equ	0xFF5
 11428                           prodh	equ	0xFF4
 11429                           prodl	equ	0xFF3
 11430                           intcon	equ	0xFF2
 11431                           indf0	equ	0xFEF
 11432                           postinc0	equ	0xFEE
 11433                           fsr0h	equ	0xFEA
 11434                           fsr0l	equ	0xFE9
 11435                           wreg	equ	0xFE8
 11436                           indf1	equ	0xFE7
 11437                           postinc1	equ	0xFE6
 11438                           postdec1	equ	0xFE5
 11439                           fsr1h	equ	0xFE2
 11440                           fsr1l	equ	0xFE1
 11441                           indf2	equ	0xFDF
 11442                           postinc2	equ	0xFDE
 11443                           postdec2	equ	0xFDD
 11444                           plusw2	equ	0xFDB
 11445                           fsr2h	equ	0xFDA
 11446                           fsr2l	equ	0xFD9
 11447                           status	equ	0xFD8
 11448                           
 11449 ;; *************** function _sendEscapedUartData *****************
 11450 ;; Defined at:
 11451 ;;		line 1781 in file "main.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;  c               1    wreg     unsigned char 
 11454 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11455 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11456 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11457 ;;		 -> NULL(0), 
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  c               1   14[BANK0 ] unsigned char 
 11460 ;; Return value:  Size  Location     Type
 11461 ;;		None               void
 11462 ;; Registers used:
 11463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : E/1
 11466 ;;		On exit  : F/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11469 ;;      Params:         0       2       0       0       0       0       0
 11470 ;;      Locals:         0       1       0       0       0       0       0
 11471 ;;      Temps:          0       0       0       0       0       0       0
 11472 ;;      Totals:         0       3       0       0       0       0       0
 11473 ;;Total ram usage:        3 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    5
 11476 ;; This function calls:
 11477 ;;		_WriteUSART
 11478 ;;		_crc8
 11479 ;; This function is called by:
 11480 ;;		_sendVSCPDriverErrorFrame
 11481 ;;		_sendVSCPDriverAck
 11482 ;;		_sendVSCPDriverNack
 11483 ;;		_sendVSCPDriverCommandReply
 11484 ;;		_receiveSendEventCANAL
 11485 ;;		_receiveSendMultiEventCANAL
 11486 ;;		_sendVSCPModeCapabilities
 11487 ;; This function uses a non-reentrant model
 11488 ;;
 11489                           
 11490                           	psect	text19
 11491  0015DE                     __ptext19:
 11492                           	opt stack 0
 11493  0015DE                     _sendEscapedUartData:
 11494                           	opt stack 22
 11495                           
 11496                           ;incstack = 0
 11497                           ;incstack = 0
 11498                           ;sendEscapedUartData@c stored from wreg
 11499  0015DE  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11500                           
 11501                           ;main.c: 1782: if (0x10 == c) {
 11502  0015E2  0100               	movlb	0	; () banked
 11503  0015E4  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11504  0015E6  0A10               	xorlw	16
 11505  0015E8  E117               	bnz	l841
 11506  0015EA                     l833:
 11507  0015EA  A2AC               	btfss	4012,1,c	;volatile
 11508  0015EC  D7FE               	goto	l833
 11509                           
 11510                           ;main.c: 1785: WriteUSART(0x10);
 11511  0015EE  0E10               	movlw	16
 11512  0015F0  ECB1  F007         	call	_WriteUSART
 11513  0015F4                     l836:
 11514  0015F4  A2AC               	btfss	4012,1,c	;volatile
 11515  0015F6  D7FE               	goto	l836
 11516                           
 11517                           ;main.c: 1789: WriteUSART(0x10);
 11518  0015F8  0E10               	movlw	16
 11519  0015FA  ECB1  F007         	call	_WriteUSART
 11520                           
 11521                           ;main.c: 1790: if ((0) != pcrc) crc8(pcrc, 0x10);
 11522  0015FE  0100               	movlb	0	; () banked
 11523  001600  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11524  001602  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11525  001604  E01B               	bz	l845
 11526                           
 11527                           ; BSR set to: 0
 11528  001606  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11529  00160A  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11530  00160E  0E10               	movlw	16
 11531  001610  6F69               	movwf	(?_crc8+2)& (0+255),b
 11532  001612  EC95  F008         	call	_crc8	;wreg free
 11533  001616  D012               	goto	l845
 11534  001618                     l841:
 11535  001618  A2AC               	btfss	4012,1,c	;volatile
 11536  00161A  D7FE               	goto	l841
 11537                           
 11538                           ;main.c: 1796: WriteUSART(c);
 11539  00161C  0100               	movlb	0	; () banked
 11540  00161E  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11541  001620  ECB1  F007         	call	_WriteUSART
 11542                           
 11543                           ;main.c: 1797: if ((0) != pcrc) crc8(pcrc, c);
 11544  001624  0100               	movlb	0	; () banked
 11545  001626  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11546  001628  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11547  00162A  E008               	bz	l845
 11548                           
 11549                           ; BSR set to: 0
 11550  00162C  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11551  001630  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11552  001634  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11553  001638  EC95  F008         	call	_crc8	;wreg free
 11554  00163C                     l845:
 11555                           
 11556                           ; BSR set to: 0
 11557  00163C  0012               	return	
 11558  00163E                     __end_of_sendEscapedUartData:
 11559                           	opt stack 0
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           indf0	equ	0xFEF
 11568                           postinc0	equ	0xFEE
 11569                           fsr0h	equ	0xFEA
 11570                           fsr0l	equ	0xFE9
 11571                           wreg	equ	0xFE8
 11572                           indf1	equ	0xFE7
 11573                           postinc1	equ	0xFE6
 11574                           postdec1	equ	0xFE5
 11575                           fsr1h	equ	0xFE2
 11576                           fsr1l	equ	0xFE1
 11577                           indf2	equ	0xFDF
 11578                           postinc2	equ	0xFDE
 11579                           postdec2	equ	0xFDD
 11580                           plusw2	equ	0xFDB
 11581                           fsr2h	equ	0xFDA
 11582                           fsr2l	equ	0xFD9
 11583                           status	equ	0xFD8
 11584                           
 11585 ;; *************** function _crc8 *****************
 11586 ;; Defined at:
 11587 ;;		line 47 in file "crc8.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11590 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11591 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11592 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11593 ;;  m               1    9[BANK0 ] unsigned char 
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;		None               void
 11598 ;; Registers used:
 11599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11600 ;; Tracked objects:
 11601 ;;		On entry : F/0
 11602 ;;		On exit  : F/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11605 ;;      Params:         0       3       0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0
 11607 ;;      Temps:          0       2       0       0       0       0       0
 11608 ;;      Totals:         0       5       0       0       0       0       0
 11609 ;;Total ram usage:        5 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; Hardware stack levels required when called:    4
 11612 ;; This function calls:
 11613 ;;		_init_crc8
 11614 ;; This function is called by:
 11615 ;;		_sendEscapedUartData
 11616 ;;		_sendVSCPDriverErrorFrame
 11617 ;;		_sendVSCPDriverAck
 11618 ;;		_sendVSCPDriverNack
 11619 ;;		_sendVSCPDriverCommandReply
 11620 ;;		_receiveSendEventCANAL
 11621 ;;		_receiveSendMultiEventCANAL
 11622 ;;		_sendVSCPModeCapabilities
 11623 ;;		_calcCRC
 11624 ;; This function uses a non-reentrant model
 11625 ;;
 11626                           
 11627                           	psect	text20
 11628  00112A                     __ptext20:
 11629                           	opt stack 0
 11630  00112A                     _crc8:
 11631                           	opt stack 23
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;crc8.c: 48: if ( !made_table ) {
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;incstack = 0
 11638                           ;incstack = 0
 11639  00112A  0101               	movlb	1	; () banked
 11640  00112C  5129               	movf	(_made_table+1)& (0+255),w,b
 11641  00112E  1128               	iorwf	_made_table& (0+255),w,b
 11642  001130  B4D8               	btfsc	status,2,c
 11643                           
 11644                           ; BSR set to: 1
 11645                           ;crc8.c: 49: init_crc8();
 11646  001132  ECB4  F00B         	call	_init_crc8	;wreg free
 11647                           
 11648                           ; BSR set to: 1
 11649                           ;crc8.c: 50: }
 11650                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11651  001136  C067  FFD9         	movff	crc8@crc,fsr2l
 11652  00113A  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11653  00113E  50DF               	movf	indf2,w,c
 11654  001140  0100               	movlb	0	; () banked
 11655  001142  1969               	xorwf	crc8@m& (0+255),w,b
 11656  001144  6F6A               	movwf	??_crc8& (0+255),b
 11657  001146  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11658  001148  0E00               	movlw	low _crc8_table
 11659  00114A  256A               	addwf	??_crc8& (0+255),w,b
 11660  00114C  6ED9               	movwf	fsr2l,c
 11661  00114E  0E03               	movlw	high _crc8_table
 11662  001150  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11663  001152  6EDA               	movwf	fsr2h,c
 11664  001154  C067  FFE1         	movff	crc8@crc,fsr1l
 11665  001158  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11666  00115C  CFDF FFE7          	movff	indf2,indf1
 11667                           
 11668                           ; BSR set to: 0
 11669  001160  0012               	return	
 11670  001162                     __end_of_crc8:
 11671                           	opt stack 0
 11672                           tblptru	equ	0xFF8
 11673                           tblptrh	equ	0xFF7
 11674                           tblptrl	equ	0xFF6
 11675                           tablat	equ	0xFF5
 11676                           prodh	equ	0xFF4
 11677                           prodl	equ	0xFF3
 11678                           intcon	equ	0xFF2
 11679                           indf0	equ	0xFEF
 11680                           postinc0	equ	0xFEE
 11681                           fsr0h	equ	0xFEA
 11682                           fsr0l	equ	0xFE9
 11683                           wreg	equ	0xFE8
 11684                           indf1	equ	0xFE7
 11685                           postinc1	equ	0xFE6
 11686                           postdec1	equ	0xFE5
 11687                           fsr1h	equ	0xFE2
 11688                           fsr1l	equ	0xFE1
 11689                           indf2	equ	0xFDF
 11690                           postinc2	equ	0xFDE
 11691                           postdec2	equ	0xFDD
 11692                           plusw2	equ	0xFDB
 11693                           fsr2h	equ	0xFDA
 11694                           fsr2l	equ	0xFD9
 11695                           status	equ	0xFD8
 11696                           
 11697 ;; *************** function _init_crc8 *****************
 11698 ;; Defined at:
 11699 ;;		line 25 in file "crc8.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;		None
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;  i               2    5[BANK0 ] int 
 11704 ;;  j               2    2[BANK0 ] int 
 11705 ;;  crc             1    4[BANK0 ] unsigned char 
 11706 ;; Return value:  Size  Location     Type
 11707 ;;		None               void
 11708 ;; Registers used:
 11709 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11710 ;; Tracked objects:
 11711 ;;		On entry : E/0
 11712 ;;		On exit  : F/1
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11715 ;;      Params:         0       0       0       0       0       0       0
 11716 ;;      Locals:         0       7       0       0       0       0       0
 11717 ;;      Temps:          0       0       0       0       0       0       0
 11718 ;;      Totals:         0       7       0       0       0       0       0
 11719 ;;Total ram usage:        7 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    3
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_main
 11726 ;;		_crc8
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text21
 11731  001768                     __ptext21:
 11732                           	opt stack 0
 11733  001768                     _init_crc8:
 11734                           	opt stack 23
 11735                           
 11736                           ;crc8.c: 26: int i,j;
 11737                           ;crc8.c: 27: unsigned char crc;
 11738                           ;crc8.c: 29: if (!made_table) {
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;incstack = 0
 11742                           ;incstack = 0
 11743  001768  0101               	movlb	1	; () banked
 11744  00176A  5129               	movf	(_made_table+1)& (0+255),w,b
 11745  00176C  1128               	iorwf	_made_table& (0+255),w,b
 11746  00176E  E133               	bnz	l1632
 11747                           
 11748                           ; BSR set to: 1
 11749                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11750  001770  0100               	movlb	0	; () banked
 11751  001772  6B65               	clrf	init_crc8@i& (0+255),b
 11752  001774  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11753  001776                     l1624:
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;crc8.c: 31: crc = i;
 11757  001776  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11758                           
 11759                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11760  00177A  6B62               	clrf	init_crc8@j& (0+255),b
 11761  00177C  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11762  00177E                     l1626:
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11766  00177E  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11767  001780  D003               	goto	l14277
 11768                           
 11769                           ; BSR set to: 0
 11770  001782  6B60               	clrf	_init_crc8$2068& (0+255),b
 11771  001784  6B61               	clrf	(_init_crc8$2068+1)& (0+255),b
 11772  001786  D003               	goto	l14279
 11773  001788                     l14277:
 11774                           
 11775                           ; BSR set to: 0
 11776  001788  6B61               	clrf	(_init_crc8$2068+1)& (0+255),b
 11777  00178A  0E07               	movlw	7
 11778  00178C  6F60               	movwf	_init_crc8$2068& (0+255),b
 11779  00178E                     l14279:
 11780                           
 11781                           ; BSR set to: 0
 11782  00178E  5164               	movf	init_crc8@crc& (0+255),w,b
 11783  001790  2564               	addwf	init_crc8@crc& (0+255),w,b
 11784  001792  1960               	xorwf	_init_crc8$2068& (0+255),w,b
 11785  001794  6F64               	movwf	init_crc8@crc& (0+255),b
 11786                           
 11787                           ; BSR set to: 0
 11788  001796  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11789  001798  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11790                           
 11791                           ; BSR set to: 0
 11792  00179A  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11793  00179C  0A80               	xorlw	128
 11794  00179E  0F80               	addlw	-128
 11795  0017A0  0E08               	movlw	8
 11796  0017A2  B4D8               	btfsc	status,2,c
 11797  0017A4  5D62               	subwf	init_crc8@j& (0+255),w,b
 11798  0017A6  E3EB               	bnc	l1626
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;crc8.c: 34: }
 11802                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11803  0017A8  0E00               	movlw	low _crc8_table
 11804  0017AA  0100               	movlb	0	; () banked
 11805  0017AC  2565               	addwf	init_crc8@i& (0+255),w,b
 11806  0017AE  6ED9               	movwf	fsr2l,c
 11807  0017B0  0E03               	movlw	high _crc8_table
 11808  0017B2  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11809  0017B4  6EDA               	movwf	fsr2h,c
 11810  0017B6  C064  FFDF         	movff	init_crc8@crc,indf2
 11811                           
 11812                           ; BSR set to: 0
 11813  0017BA  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11814  0017BC  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11815                           
 11816                           ; BSR set to: 0
 11817  0017BE  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11818  0017C0  0A80               	xorlw	128
 11819  0017C2  0F7F               	addlw	-129
 11820  0017C4  0E00               	movlw	0
 11821  0017C6  B4D8               	btfsc	status,2,c
 11822  0017C8  5D65               	subwf	init_crc8@i& (0+255),w,b
 11823  0017CA  E3D5               	bnc	l1624
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;crc8.c: 37: }
 11827                           ;crc8.c: 38: made_table=1;
 11828  0017CC  0E00               	movlw	0
 11829  0017CE  0101               	movlb	1	; () banked
 11830  0017D0  6F29               	movwf	(_made_table+1)& (0+255),b
 11831  0017D2  0E01               	movlw	1
 11832  0017D4  6F28               	movwf	_made_table& (0+255),b
 11833  0017D6                     l1632:
 11834                           
 11835                           ; BSR set to: 1
 11836  0017D6  0012               	return	
 11837  0017D8                     __end_of_init_crc8:
 11838                           	opt stack 0
 11839                           tblptru	equ	0xFF8
 11840                           tblptrh	equ	0xFF7
 11841                           tblptrl	equ	0xFF6
 11842                           tablat	equ	0xFF5
 11843                           prodh	equ	0xFF4
 11844                           prodl	equ	0xFF3
 11845                           intcon	equ	0xFF2
 11846                           indf0	equ	0xFEF
 11847                           postinc0	equ	0xFEE
 11848                           fsr0h	equ	0xFEA
 11849                           fsr0l	equ	0xFE9
 11850                           wreg	equ	0xFE8
 11851                           indf1	equ	0xFE7
 11852                           postinc1	equ	0xFE6
 11853                           postdec1	equ	0xFE5
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           plusw2	equ	0xFDB
 11860                           fsr2h	equ	0xFDA
 11861                           fsr2l	equ	0xFD9
 11862                           status	equ	0xFD8
 11863                           
 11864 ;; *************** function _doModeVerbose *****************
 11865 ;; Defined at:
 11866 ;;		line 584 in file "main.c"
 11867 ;; Parameters:    Size  Location     Type
 11868 ;;		None
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11871 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 11872 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 11873 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 11874 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11875 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11876 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11877 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11878 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 11879 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 11880 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 11881 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11882 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11883 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11884 ;;  id              4   42[BANK2 ] unsigned long 
 11885 ;;  p               2   68[BANK2 ] PTR unsigned char 
 11886 ;;		 -> NULL(0), cmdbuf(80), 
 11887 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11888 ;;  maskno          1   47[BANK2 ] unsigned char 
 11889 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 11890 ;;  mask_type       1   16[BANK2 ] unsigned char 
 11891 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 11892 ;;  id              4    0[BANK2 ] unsigned long 
 11893 ;;  p               2   66[BANK2 ] PTR unsigned char 
 11894 ;;		 -> NULL(0), cmdbuf(80), 
 11895 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11896 ;;  filterno        1   46[BANK2 ] unsigned char 
 11897 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 11898 ;;  filter_type     1   13[BANK2 ] unsigned char 
 11899 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 11900 ;;  nodeid          1   56[BANK2 ] unsigned char 
 11901 ;;  value           1   41[BANK2 ] unsigned char 
 11902 ;;  p               2   61[BANK2 ] PTR unsigned char 
 11903 ;;		 -> NULL(0), cmdbuf(80), 
 11904 ;;  nodeid          1   52[BANK2 ] unsigned char 
 11905 ;;  value           1   49[BANK2 ] unsigned char 
 11906 ;;  reg             1   40[BANK2 ] unsigned char 
 11907 ;;  page            1   39[BANK2 ] unsigned char 
 11908 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11909 ;;		 -> NULL(0), cmdbuf(80), 
 11910 ;;  value           1   58[BANK2 ] unsigned char 
 11911 ;;  i               1   55[BANK2 ] unsigned char 
 11912 ;;  reg             1   54[BANK2 ] unsigned char 
 11913 ;;  page            1   53[BANK2 ] unsigned char 
 11914 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11915 ;;  count           1   50[BANK2 ] unsigned char 
 11916 ;;  rv              1   38[BANK2 ] enum E15660
 11917 ;;  p               2   64[BANK2 ] PTR unsigned char 
 11918 ;;		 -> NULL(0), cmdbuf(80), 
 11919 ;;  ifmode          1   63[BANK2 ] enum E16371
 11920 ;;  c               1   57[BANK2 ] unsigned char 
 11921 ;;  i               1   48[BANK2 ] unsigned char 
 11922 ;; Return value:  Size  Location     Type
 11923 ;;		None               void
 11924 ;; Registers used:
 11925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11926 ;; Tracked objects:
 11927 ;;		On entry : F/1
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11931 ;;      Params:         0       0       0       0       0       0       0
 11932 ;;      Locals:         0       0       0      70       0       0       0
 11933 ;;      Temps:          0      20       0       0       0       0       0
 11934 ;;      Totals:         0      20       0      70       0       0       0
 11935 ;;Total ram usage:       90 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:   10
 11938 ;; This function calls:
 11939 ;;		_vscp_restoreDefaults
 11940 ;;		_putsUSART
 11941 ;;		_printFirmwareVersion
 11942 ;;		_fifo_read
 11943 ;;		_ECANSetOperationMode
 11944 ;;		_setFilter
 11945 ;;		__CANIDToRegs
 11946 ;;		_Busy_eep
 11947 ;;		_Write_b_eep
 11948 ;;		_receivePrintEventVerbose
 11949 ;;		_WriteUSART
 11950 ;;		_stristr
 11951 ;;		_strtok
 11952 ;;		_atoi
 11953 ;;		_memset
 11954 ;;		_sendVSCPFrame
 11955 ;;		_printStatistics
 11956 ;;		_printErrors
 11957 ;;		_printHelp
 11958 ;;		_findNodes
 11959 ;;		_strcpy
 11960 ;;		_strchr
 11961 ;;		_readRegisterExtended
 11962 ;;		_sprintf
 11963 ;;		_printBinary
 11964 ;;		_writeRegisterExtended
 11965 ;;		_printNodeFirmwareVersion
 11966 ;;		_printGUID
 11967 ;;		_printMDF
 11968 ;; This function is called by:
 11969 ;;		_main
 11970 ;; This function uses a non-reentrant model
 11971 ;;
 11972                           
 11973                           	psect	text22
 11974  0053BE                     __ptext22:
 11975                           	opt stack 0
 11976  0053BE                     _doModeVerbose:
 11977                           	opt stack 19
 11978                           
 11979                           ; BSR set to: 1
 11980                           ;main.c: 585: uint8_t c;
 11981                           ;main.c: 586: uint8_t i;
 11982                           ;main.c: 589: if (!bSilent) {
 11983                           
 11984                           ; BSR set to: 1
 11985                           ;incstack = 0
 11986                           ;incstack = 0
 11987  0053BE  6630               	tstfsz	_bSilent,c
 11988  0053C0  D002               	goto	l14397
 11989                           
 11990                           ; BSR set to: 1
 11991                           ;main.c: 590: receivePrintEventVerbose();
 11992  0053C2  ECA8  F021         	call	_receivePrintEventVerbose	;wreg free
 11993  0053C6                     l14397:
 11994                           
 11995                           ;main.c: 591: }
 11996                           ;main.c: 594: (INTCONbits.GIE = 0);
 11997  0053C6  9EF2               	bcf	intcon,7,c	;volatile
 11998                           
 11999                           ;main.c: 596: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 12000  0053C8  0E01               	movlw	high _serialInputFifo
 12001  0053CA  0100               	movlb	0	; () banked
 12002  0053CC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 12003  0053CE  0EDD               	movlw	low _serialInputFifo
 12004  0053D0  6F60               	movwf	?_fifo_read& (0+255),b
 12005  0053D2  0E02               	movlw	high doModeVerbose@c
 12006  0053D4  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 12007  0053D6  0EB9               	movlw	low doModeVerbose@c
 12008  0053D8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 12009  0053DA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 12010  0053DC  0E01               	movlw	1
 12011  0053DE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 12012  0053E0  EC67  F012         	call	_fifo_read	;wreg free
 12013  0053E4  0560               	decf	?_fifo_read& (0+255),w,b
 12014  0053E6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 12015  0053E8  E002 EF0B  F035    	bnz	l15225
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;main.c: 599: (INTCONbits.GIE = 1);
 12019  0053EE  8EF2               	bsf	intcon,7,c	;volatile
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 602: if ( bLocalEcho ) {
 12023  0053F0  502E               	movf	_bLocalEcho,w,c
 12024  0053F2  E00F               	bz	l14411
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 603: WriteUSART( c );
 12028  0053F4  0102               	movlb	2	; () banked
 12029  0053F6  51B9               	movf	doModeVerbose@c& (0+255),w,b
 12030  0053F8  ECB1  F007         	call	_WriteUSART
 12031  0053FC                     l492:
 12032  0053FC  A2AC               	btfss	4012,1,c	;volatile
 12033  0053FE  D7FE               	goto	l492
 12034                           
 12035                           ;main.c: 605: if ( 0x0d == c ) {
 12036  005400  0102               	movlb	2	; () banked
 12037  005402  51B9               	movf	doModeVerbose@c& (0+255),w,b
 12038  005404  0A0D               	xorlw	13
 12039  005406  E105               	bnz	l14411
 12040                           
 12041                           ; BSR set to: 2
 12042                           ;main.c: 606: WriteUSART( 0x0a );
 12043  005408  0E0A               	movlw	10
 12044  00540A  ECB1  F007         	call	_WriteUSART
 12045  00540E                     l496:
 12046  00540E  A2AC               	btfss	4012,1,c	;volatile
 12047  005410  D7FE               	goto	l496
 12048  005412                     l14411:
 12049                           
 12050                           ;main.c: 608: }
 12051                           ;main.c: 609: }
 12052                           ;main.c: 612: cmdbuf[ pos++ ] = c;
 12053  005412  0E2D               	movlw	low _cmdbuf
 12054  005414  2434               	addwf	_pos,w,c
 12055  005416  6ED9               	movwf	fsr2l,c
 12056  005418  6ADA               	clrf	fsr2h,c
 12057  00541A  0E01               	movlw	high _cmdbuf
 12058  00541C  22DA               	addwfc	fsr2h,f,c
 12059  00541E  0102               	movlb	2	; () banked
 12060  005420  C2B9  FFDF         	movff	doModeVerbose@c,indf2
 12061                           
 12062                           ; BSR set to: 2
 12063  005424  2A34               	incf	_pos,f,c
 12064                           
 12065                           ; BSR set to: 2
 12066                           ;main.c: 613: if (pos >= sizeof( cmdbuf ) ) {
 12067  005426  0E4F               	movlw	79
 12068  005428  6434               	cpfsgt	_pos,c
 12069  00542A  D001               	goto	l14419
 12070                           
 12071                           ; BSR set to: 2
 12072                           ;main.c: 616: pos = 0;
 12073  00542C  6A34               	clrf	_pos,c
 12074  00542E                     l14419:
 12075                           
 12076                           ; BSR set to: 2
 12077                           ;main.c: 617: }
 12078                           ;main.c: 620: if (0x0d == c) {
 12079  00542E  51B9               	movf	doModeVerbose@c& (0+255),w,b
 12080  005430  0A0D               	xorlw	13
 12081  005432  E002 EF0B  F035    	bnz	l15225
 12082                           
 12083                           ; BSR set to: 2
 12084                           ;main.c: 622: cmdbuf[ pos ] = 0;
 12085  005438  0E2D               	movlw	low _cmdbuf
 12086  00543A  2434               	addwf	_pos,w,c
 12087  00543C  6ED9               	movwf	fsr2l,c
 12088  00543E  6ADA               	clrf	fsr2h,c
 12089  005440  0E01               	movlw	high _cmdbuf
 12090  005442  22DA               	addwfc	fsr2h,f,c
 12091  005444  6ADF               	clrf	indf2,c
 12092                           
 12093                           ; BSR set to: 1
 12094                           ;main.c: 625: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12095  005446  0100               	movlb	0	; () banked
 12096  005448  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12097  00544A  0E2D               	movlw	low _cmdbuf
 12098  00544C  6F6D               	movwf	?_stristr& (0+255),b
 12099  00544E  0E7C               	movlw	high STR_6
 12100  005450  6F70               	movwf	(?_stristr+3)& (0+255),b
 12101  005452  0EC0               	movlw	low STR_6
 12102  005454  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12103  005456  EC62  F00C         	call	_stristr	;wreg free
 12104  00545A  0E2D               	movlw	low _cmdbuf
 12105  00545C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12106  00545E  0E01               	movlw	high _cmdbuf
 12107  005460  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12108  005462  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12109  005464  E102               	bnz	u18815
 12110  005466  516D               	movf	?_stristr& (0+255),w,b
 12111  005468  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12112  00546A                     u18815:
 12113  00546A  E112               	bnz	l14431
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;main.c: 626: putsUSART((char *) "Will enter bootloader now...\r\n");
 12117  00546C  0E77               	movlw	high STR_7
 12118  00546E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12119  005470  0E32               	movlw	low STR_7
 12120  005472  6F61               	movwf	?_putsUSART& (0+255),b
 12121  005474  EC69  F00A         	call	_putsUSART	;wreg free
 12122                           
 12123                           ;main.c: 627: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12124  005478  EC8F  F007         	call	_Busy_eep	;wreg free
 12125  00547C  0100               	movlb	0	; () banked
 12126  00547E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 12127  005480  6B60               	clrf	?_Write_b_eep& (0+255),b
 12128  005482  0EFF               	movlw	255
 12129  005484  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 12130  005486  EC5F  F008         	call	_Write_b_eep	;wreg free
 12131  00548A  00FF               	reset		;# 
 12132                           
 12133                           ;main.c: 629: }
 12134  00548C  EF02  F035         	goto	l15221
 12135  005490                     l14431:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;main.c: 631: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12139  005490  ECA8  F035         	call	PL78	;call to abstracted procedure
 12140  005494  EC62  F00C         	call	_stristr	;wreg free
 12141  005498  0E2D               	movlw	low _cmdbuf
 12142  00549A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12143  00549C  0E01               	movlw	high _cmdbuf
 12144  00549E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12145  0054A0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12146  0054A2  E102               	bnz	u18825
 12147  0054A4  516D               	movf	?_stristr& (0+255),w,b
 12148  0054A6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12149  0054A8                     u18825:
 12150  0054A8  E10C               	bnz	l14439
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;main.c: 632: bSilent = 0;
 12154  0054AA  6A30               	clrf	_bSilent,c
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;main.c: 633: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12158  0054AC  0E00               	movlw	0
 12159  0054AE  ECC6  F007         	call	_ECANSetOperationMode
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;main.c: 634: putsUSART((char *) "+OK\r\n");
 12163  0054B2  0E7C               	movlw	high STR_9
 12164  0054B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12165  0054B6  0E64               	movlw	low STR_9
 12166  0054B8  6F61               	movwf	?_putsUSART& (0+255),b
 12167  0054BA  EC69  F00A         	call	_putsUSART	;wreg free
 12168                           
 12169                           ;main.c: 635: }
 12170  0054BE  EF02  F035         	goto	l15221
 12171  0054C2                     l14439:
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 637: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 12175  0054C2  0E01               	movlw	high _cmdbuf
 12176  0054C4  ECB2  F035         	call	PL86	;call to abstracted procedure
 12177  0054C8  EC62  F00C         	call	_stristr	;wreg free
 12178  0054CC  0E2D               	movlw	low _cmdbuf
 12179  0054CE  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12180  0054D0  0E01               	movlw	high _cmdbuf
 12181  0054D2  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12182  0054D4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12183  0054D6  E102               	bnz	u18835
 12184  0054D8  516D               	movf	?_stristr& (0+255),w,b
 12185  0054DA  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12186  0054DC                     u18835:
 12187  0054DC  E10D               	bnz	l14447
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;main.c: 638: bSilent = 1;
 12191  0054DE  0E01               	movlw	1
 12192  0054E0  6E30               	movwf	_bSilent,c
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;main.c: 639: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12196  0054E2  0E00               	movlw	0
 12197  0054E4  ECC6  F007         	call	_ECANSetOperationMode
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;main.c: 640: putsUSART((char *) "+OK\r\n");
 12201  0054E8  0E7C               	movlw	high STR_9
 12202  0054EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12203  0054EC  0E64               	movlw	low STR_9
 12204  0054EE  6F61               	movwf	?_putsUSART& (0+255),b
 12205  0054F0  EC69  F00A         	call	_putsUSART	;wreg free
 12206                           
 12207                           ;main.c: 641: }
 12208  0054F4  EF02  F035         	goto	l15221
 12209  0054F8                     l14447:
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;main.c: 643: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 12213  0054F8  0E01               	movlw	high _cmdbuf
 12214  0054FA  0100               	movlb	0	; () banked
 12215  0054FC  ECCB  F035         	call	PL100	;call to abstracted procedure
 12216  005500  EC62  F00C         	call	_stristr	;wreg free
 12217  005504  0E2D               	movlw	low _cmdbuf
 12218  005506  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12219  005508  0E01               	movlw	high _cmdbuf
 12220  00550A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12221  00550C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12222  00550E  E102               	bnz	u18845
 12223  005510  516D               	movf	?_stristr& (0+255),w,b
 12224  005512  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12225  005514                     u18845:
 12226  005514  E10D               	bnz	l14455
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;main.c: 644: bSilent = 1;
 12230  005516  0E01               	movlw	1
 12231  005518  6E30               	movwf	_bSilent,c
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;main.c: 645: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12235  00551A  0E80               	movlw	128
 12236  00551C  ECC6  F007         	call	_ECANSetOperationMode
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;main.c: 646: putsUSART((char *) "+OK\r\n");
 12240  005520  0E7C               	movlw	high STR_9
 12241  005522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12242  005524  0E64               	movlw	low STR_9
 12243  005526  6F61               	movwf	?_putsUSART& (0+255),b
 12244  005528  EC69  F00A         	call	_putsUSART	;wreg free
 12245                           
 12246                           ;main.c: 647: }
 12247  00552C  EF02  F035         	goto	l15221
 12248  005530                     l14455:
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;main.c: 649: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 12252  005530  0E01               	movlw	high _cmdbuf
 12253  005532  0100               	movlb	0	; () banked
 12254  005534  ECC3  F035         	call	PL96	;call to abstracted procedure
 12255  005538  EC62  F00C         	call	_stristr	;wreg free
 12256  00553C  0E2D               	movlw	low _cmdbuf
 12257  00553E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12258  005540  0E01               	movlw	high _cmdbuf
 12259  005542  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12260  005544  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12261  005546  E102               	bnz	u18855
 12262  005548  516D               	movf	?_stristr& (0+255),w,b
 12263  00554A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12264  00554C                     u18855:
 12265  00554C  E10C               	bnz	l14463
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;main.c: 650: bSilent = 0;
 12269  00554E  6A30               	clrf	_bSilent,c
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;main.c: 651: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 12273  005550  0E40               	movlw	64
 12274  005552  ECC6  F007         	call	_ECANSetOperationMode
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;main.c: 652: putsUSART((char *) "+OK\r\n");
 12278  005556  0E7C               	movlw	high STR_9
 12279  005558  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12280  00555A  0E64               	movlw	low STR_9
 12281  00555C  6F61               	movwf	?_putsUSART& (0+255),b
 12282  00555E  EC69  F00A         	call	_putsUSART	;wreg free
 12283                           
 12284                           ;main.c: 653: }
 12285  005562  EF02  F035         	goto	l15221
 12286  005566                     l14463:
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12290  005566  0E01               	movlw	high _cmdbuf
 12291  005568  0100               	movlb	0	; () banked
 12292  00556A  ECBB  F035         	call	PL92	;call to abstracted procedure
 12293  00556E  EC62  F00C         	call	_stristr	;wreg free
 12294  005572  0E2D               	movlw	low _cmdbuf
 12295  005574  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12296  005576  0E01               	movlw	high _cmdbuf
 12297  005578  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12298  00557A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12299  00557C  E102               	bnz	u18865
 12300  00557E  516D               	movf	?_stristr& (0+255),w,b
 12301  005580  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12302  005582                     u18865:
 12303  005582  E10C               	bnz	l14471
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;main.c: 656: bSilent = 0;
 12307  005584  6A30               	clrf	_bSilent,c
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;main.c: 657: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12311  005586  0E60               	movlw	96
 12312  005588  ECC6  F007         	call	_ECANSetOperationMode
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;main.c: 658: putsUSART((char *) "+OK\r\n");
 12316  00558C  0E7C               	movlw	high STR_9
 12317  00558E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12318  005590  0E64               	movlw	low STR_9
 12319  005592  6F61               	movwf	?_putsUSART& (0+255),b
 12320  005594  EC69  F00A         	call	_putsUSART	;wreg free
 12321                           
 12322                           ;main.c: 659: }
 12323  005598  EF02  F035         	goto	l15221
 12324  00559C                     l14471:
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;main.c: 661: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12328  00559C  0E01               	movlw	high _cmdbuf
 12329  00559E  0100               	movlb	0	; () banked
 12330  0055A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12331  0055A2  0E2D               	movlw	low _cmdbuf
 12332  0055A4  6F6D               	movwf	?_stristr& (0+255),b
 12333  0055A6  0E7B               	movlw	high STR_18
 12334  0055A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12335  0055AA  0EF2               	movlw	low STR_18
 12336  0055AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12337  0055AE  EC62  F00C         	call	_stristr	;wreg free
 12338  0055B2  0E2D               	movlw	low _cmdbuf
 12339  0055B4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12340  0055B6  0E01               	movlw	high _cmdbuf
 12341  0055B8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12342  0055BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12343  0055BC  E102               	bnz	u18875
 12344  0055BE  516D               	movf	?_stristr& (0+255),w,b
 12345  0055C0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12346  0055C2                     u18875:
 12347  0055C2  E10B               	bnz	l14477
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;main.c: 662: printFirmwareVersion();
 12351  0055C4  EC62  F00D         	call	_printFirmwareVersion	;wreg free
 12352                           
 12353                           ;main.c: 663: putsUSART((char *) "+OK\r\n");
 12354  0055C8  0E7C               	movlw	high STR_9
 12355  0055CA  0100               	movlb	0	; () banked
 12356  0055CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12357  0055CE  0E64               	movlw	low STR_9
 12358  0055D0  6F61               	movwf	?_putsUSART& (0+255),b
 12359  0055D2  EC69  F00A         	call	_putsUSART	;wreg free
 12360                           
 12361                           ;main.c: 664: }
 12362  0055D6  EF02  F035         	goto	l15221
 12363  0055DA                     l14477:
 12364                           
 12365                           ; BSR set to: 0
 12366                           ;main.c: 666: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12367  0055DA  0E01               	movlw	high _cmdbuf
 12368  0055DC  0100               	movlb	0	; () banked
 12369  0055DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12370  0055E0  0E2D               	movlw	low _cmdbuf
 12371  0055E2  6F6D               	movwf	?_stristr& (0+255),b
 12372  0055E4  0E7C               	movlw	high STR_20
 12373  0055E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12374  0055E8  0E2D               	movlw	low STR_20
 12375  0055EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12376  0055EC  EC62  F00C         	call	_stristr	;wreg free
 12377  0055F0  0E2D               	movlw	low _cmdbuf
 12378  0055F2  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12379  0055F4  0E01               	movlw	high _cmdbuf
 12380  0055F6  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12381  0055F8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12382  0055FA  E102               	bnz	u18885
 12383  0055FC  516D               	movf	?_stristr& (0+255),w,b
 12384  0055FE  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12385  005600                     u18885:
 12386  005600  E165               	bnz	l14513
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;main.c: 667: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12390  005602  506F               	movf	3951,w,c	;volatile
 12391  005604  0BE0               	andlw	224
 12392  005606  0102               	movlb	2	; () banked
 12393  005608  6FBF               	movwf	doModeVerbose@ifmode& (0+255),b
 12394                           
 12395                           ; BSR set to: 2
 12396                           ;main.c: 668: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12397  00560A  67BF               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12398  00560C  D00B               	goto	l14487
 12399                           
 12400                           ; BSR set to: 2
 12401  00560E  6630               	tstfsz	_bSilent,c
 12402  005610  D009               	goto	l14487
 12403                           
 12404                           ; BSR set to: 2
 12405                           ;main.c: 669: putsUSART((char *) "+OK - Normal mode\r\n");
 12406  005612  0E7A               	movlw	high STR_21
 12407  005614  0100               	movlb	0	; () banked
 12408  005616  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12409  005618  0E2B               	movlw	low STR_21
 12410  00561A  6F61               	movwf	?_putsUSART& (0+255),b
 12411  00561C  EC69  F00A         	call	_putsUSART	;wreg free
 12412                           
 12413                           ;main.c: 670: }
 12414  005620  EF02  F035         	goto	l15221
 12415  005624                     l14487:
 12416                           
 12417                           ; BSR set to: 2
 12418                           ;main.c: 671: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12419  005624  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12420  005626  0E01               	movlw	1
 12421  005628  A4D8               	btfss	status,2,c
 12422  00562A  0E00               	movlw	0
 12423  00562C  1430               	andwf	_bSilent,w,c
 12424  00562E  E009               	bz	l14491
 12425                           
 12426                           ; BSR set to: 2
 12427                           ;main.c: 672: putsUSART((char *) "+OK - Silent mode\r\n");
 12428  005630  0E7A               	movlw	high STR_22
 12429  005632  0100               	movlb	0	; () banked
 12430  005634  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12431  005636  0E3F               	movlw	low STR_22
 12432  005638  6F61               	movwf	?_putsUSART& (0+255),b
 12433  00563A  EC69  F00A         	call	_putsUSART	;wreg free
 12434                           
 12435                           ;main.c: 673: }
 12436  00563E  EF02  F035         	goto	l15221
 12437  005642                     l14491:
 12438                           
 12439                           ; BSR set to: 2
 12440                           ;main.c: 674: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12441  005642  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12442  005644  0A20               	xorlw	32
 12443  005646  E109               	bnz	l14495
 12444                           
 12445                           ; BSR set to: 2
 12446                           ;main.c: 675: putsUSART((char *) "+OK - Sleep mode\r\n");
 12447  005648  0E7A               	movlw	high STR_23
 12448  00564A  0100               	movlb	0	; () banked
 12449  00564C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12450  00564E  0E7B               	movlw	low STR_23
 12451  005650  6F61               	movwf	?_putsUSART& (0+255),b
 12452  005652  EC69  F00A         	call	_putsUSART	;wreg free
 12453                           
 12454                           ;main.c: 676: }
 12455  005656  EF02  F035         	goto	l15221
 12456  00565A                     l14495:
 12457                           
 12458                           ; BSR set to: 2
 12459                           ;main.c: 677: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12460  00565A  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12461  00565C  0A40               	xorlw	64
 12462  00565E  E109               	bnz	l14499
 12463                           
 12464                           ; BSR set to: 2
 12465                           ;main.c: 678: putsUSART((char *) "+OK - Loopback mode\r\n");
 12466  005660  0E79               	movlw	high STR_24
 12467  005662  0100               	movlb	0	; () banked
 12468  005664  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12469  005666  0E98               	movlw	low STR_24
 12470  005668  6F61               	movwf	?_putsUSART& (0+255),b
 12471  00566A  EC69  F00A         	call	_putsUSART	;wreg free
 12472                           
 12473                           ;main.c: 679: }
 12474  00566E  EF02  F035         	goto	l15221
 12475  005672                     l14499:
 12476                           
 12477                           ; BSR set to: 2
 12478                           ;main.c: 680: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12479  005672  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12480  005674  0A60               	xorlw	96
 12481  005676  E109               	bnz	l14503
 12482                           
 12483                           ; BSR set to: 2
 12484                           ;main.c: 681: putsUSART((char *) "+OK - Listen only mode\r\n");
 12485  005678  0E78               	movlw	high STR_25
 12486  00567A  0100               	movlb	0	; () banked
 12487  00567C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12488  00567E  0E31               	movlw	low STR_25
 12489  005680  6F61               	movwf	?_putsUSART& (0+255),b
 12490  005682  EC69  F00A         	call	_putsUSART	;wreg free
 12491                           
 12492                           ;main.c: 682: }
 12493  005686  EF02  F035         	goto	l15221
 12494  00568A                     l14503:
 12495                           
 12496                           ; BSR set to: 2
 12497                           ;main.c: 683: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12498  00568A  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12499  00568C  0A80               	xorlw	128
 12500  00568E  E109               	bnz	l14507
 12501                           
 12502                           ; BSR set to: 2
 12503                           ;main.c: 684: putsUSART((char *) "+OK - Closed mode\r\n");
 12504  005690  0E7A               	movlw	high STR_26
 12505  005692  0100               	movlb	0	; () banked
 12506  005694  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12507  005696  0E17               	movlw	low STR_26
 12508  005698  6F61               	movwf	?_putsUSART& (0+255),b
 12509  00569A  EC69  F00A         	call	_putsUSART	;wreg free
 12510                           
 12511                           ;main.c: 685: }
 12512  00569E  EF02  F035         	goto	l15221
 12513  0056A2                     l14507:
 12514                           
 12515                           ; BSR set to: 2
 12516                           ;main.c: 686: else if (ECAN_OP_MODE_BITS == ifmode) {
 12517  0056A2  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12518  0056A4  0AE0               	xorlw	224
 12519  0056A6  E109               	bnz	l14511
 12520                           
 12521                           ; BSR set to: 2
 12522                           ;main.c: 687: putsUSART((char *) "+OK - Bits mode\r\n");
 12523  0056A8  0E7A               	movlw	high STR_27
 12524  0056AA  0100               	movlb	0	; () banked
 12525  0056AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12526  0056AE  0E8E               	movlw	low STR_27
 12527  0056B0  6F61               	movwf	?_putsUSART& (0+255),b
 12528  0056B2  EC69  F00A         	call	_putsUSART	;wreg free
 12529                           
 12530                           ;main.c: 688: }
 12531  0056B6  EF02  F035         	goto	l15221
 12532  0056BA                     l14511:
 12533                           
 12534                           ; BSR set to: 2
 12535                           ;main.c: 689: else {
 12536                           ;main.c: 690: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12537  0056BA  0E78               	movlw	high STR_28
 12538  0056BC  0100               	movlb	0	; () banked
 12539  0056BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12540  0056C0  0EC4               	movlw	low STR_28
 12541  0056C2  6F61               	movwf	?_putsUSART& (0+255),b
 12542  0056C4  EC69  F00A         	call	_putsUSART	;wreg free
 12543  0056C8  EF02  F035         	goto	l15221
 12544  0056CC                     l14513:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12548  0056CC  0E01               	movlw	high _cmdbuf
 12549  0056CE  0100               	movlb	0	; () banked
 12550  0056D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12551  0056D2  0E2D               	movlw	low _cmdbuf
 12552  0056D4  6F6D               	movwf	?_stristr& (0+255),b
 12553  0056D6  0E7C               	movlw	high STR_29
 12554  0056D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12555  0056DA  0EEA               	movlw	low STR_29
 12556  0056DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12557  0056DE  EC62  F00C         	call	_stristr	;wreg free
 12558  0056E2  0E2D               	movlw	low _cmdbuf
 12559  0056E4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12560  0056E6  0E01               	movlw	high _cmdbuf
 12561  0056E8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12562  0056EA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12563  0056EC  E102               	bnz	u18985
 12564  0056EE  516D               	movf	?_stristr& (0+255),w,b
 12565  0056F0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12566  0056F2                     u18985:
 12567  0056F2  E001 D0CF          	bnz	l14567
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;main.c: 697: char *p = strtok(cmdbuf, ",");
 12571  0056F6  EC64  F035         	call	PL30	;call to abstracted procedure
 12572  0056FA  ECAB  F00D         	call	_strtok	;wreg free
 12573  0056FE  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12574  005702  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;main.c: 700: vscpPriority = 3;
 12578  005706  0E03               	movlw	3
 12579  005708  6E3D               	movwf	_vscpPriority,c
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;main.c: 701: if ((0) != p) {
 12583  00570A  0102               	movlb	2	; () banked
 12584  00570C  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12585  00570E  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12586  005710  E008               	bz	l14523
 12587                           
 12588                           ; BSR set to: 2
 12589                           ;main.c: 702: vscpPriority = atoi(p);
 12590  005712  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12591  005716  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12592  00571A  EC95  F015         	call	_atoi	;wreg free
 12593  00571E  5166               	movf	?_atoi& (0+255),w,b
 12594  005720  6E3D               	movwf	_vscpPriority,c
 12595  005722                     l14523:
 12596                           
 12597                           ;main.c: 703: }
 12598                           ;main.c: 706: vscpClass = 0;
 12599  005722  6A38               	clrf	_vscpClass,c
 12600  005724  6A39               	clrf	_vscpClass+1,c
 12601                           
 12602                           ;main.c: 707: if ((0) != (p = strtok((0), ","))) {
 12603  005726  EC28  F035         	call	PL6	;call to abstracted procedure
 12604  00572A  ECAB  F00D         	call	_strtok	;wreg free
 12605  00572E  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12606  005732  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12607  005736  0102               	movlb	2	; () banked
 12608  005738  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12609  00573A  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12610  00573C  E00A               	bz	l14529
 12611                           
 12612                           ; BSR set to: 2
 12613                           ;main.c: 708: vscpClass = atoi(p);
 12614  00573E  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12615  005742  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12616  005746  EC95  F015         	call	_atoi	;wreg free
 12617  00574A  C066  F038         	movff	?_atoi,_vscpClass
 12618  00574E  C067  F039         	movff	?_atoi+1,_vscpClass+1
 12619  005752                     l14529:
 12620                           
 12621                           ;main.c: 709: }
 12622                           ;main.c: 712: vscpType = 0;
 12623  005752  6A3F               	clrf	_vscpType,c
 12624                           
 12625                           ;main.c: 713: if ((0) != (p = strtok((0), ","))) {
 12626  005754  EC28  F035         	call	PL6	;call to abstracted procedure
 12627  005758  ECAB  F00D         	call	_strtok	;wreg free
 12628  00575C  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12629  005760  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12630  005764  0102               	movlb	2	; () banked
 12631  005766  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12632  005768  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12633  00576A  E008               	bz	l14535
 12634                           
 12635                           ; BSR set to: 2
 12636                           ;main.c: 714: vscpType = atoi(p);
 12637  00576C  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12638  005770  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12639  005774  EC95  F015         	call	_atoi	;wreg free
 12640  005778  5166               	movf	?_atoi& (0+255),w,b
 12641  00577A  6E3F               	movwf	_vscpType,c
 12642  00577C                     l14535:
 12643                           
 12644                           ;main.c: 715: }
 12645                           ;main.c: 718: vscpNodeId = 0;
 12646  00577C  6A3C               	clrf	_vscpNodeId,c
 12647                           
 12648                           ;main.c: 719: if ((0) != (p = strtok((0), ","))) {
 12649  00577E  EC28  F035         	call	PL6	;call to abstracted procedure
 12650  005782  ECAB  F00D         	call	_strtok	;wreg free
 12651  005786  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12652  00578A  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12653  00578E  0102               	movlb	2	; () banked
 12654  005790  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12655  005792  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12656  005794  E008               	bz	l14541
 12657                           
 12658                           ; BSR set to: 2
 12659                           ;main.c: 720: vscpNodeId = atoi(p);
 12660  005796  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12661  00579A  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12662  00579E  EC95  F015         	call	_atoi	;wreg free
 12663  0057A2  5166               	movf	?_atoi& (0+255),w,b
 12664  0057A4  6E3C               	movwf	_vscpNodeId,c
 12665  0057A6                     l14541:
 12666                           
 12667                           ;main.c: 721: }
 12668                           ;main.c: 724: vscpSize = 0;
 12669  0057A6  6A3E               	clrf	_vscpSize,c
 12670                           
 12671                           ;main.c: 725: if ((0) != (p = strtok((0), ","))) {
 12672  0057A8  EC28  F035         	call	PL6	;call to abstracted procedure
 12673  0057AC  ECAB  F00D         	call	_strtok	;wreg free
 12674  0057B0  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12675  0057B4  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12676  0057B8  0102               	movlb	2	; () banked
 12677  0057BA  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12678  0057BC  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12679  0057BE  E008               	bz	l14547
 12680                           
 12681                           ; BSR set to: 2
 12682                           ;main.c: 726: vscpSize = atoi(p);
 12683  0057C0  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12684  0057C4  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12685  0057C8  EC95  F015         	call	_atoi	;wreg free
 12686  0057CC  5166               	movf	?_atoi& (0+255),w,b
 12687  0057CE  6E3E               	movwf	_vscpSize,c
 12688  0057D0                     l14547:
 12689                           
 12690                           ;main.c: 727: }
 12691                           ;main.c: 729: memset( vscpData, 0, 8 );
 12692  0057D0  0E01               	movlw	high _vscpData
 12693  0057D2  0100               	movlb	0	; () banked
 12694  0057D4  6F61               	movwf	(?_memset+1)& (0+255),b
 12695  0057D6  0EE5               	movlw	low _vscpData
 12696  0057D8  6F60               	movwf	?_memset& (0+255),b
 12697  0057DA  6B63               	clrf	(?_memset+3)& (0+255),b
 12698  0057DC  6B62               	clrf	(?_memset+2)& (0+255),b
 12699  0057DE  6B65               	clrf	(?_memset+5)& (0+255),b
 12700  0057E0  0E08               	movlw	8
 12701  0057E2  6F64               	movwf	(?_memset+4)& (0+255),b
 12702  0057E4  EC01  F008         	call	_memset	;wreg free
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;main.c: 730: for (i = 0; i < vscpSize; i++) {
 12706  0057E8  0102               	movlb	2	; () banked
 12707  0057EA  6BB0               	clrf	doModeVerbose@i& (0+255),b
 12708  0057EC  D01D               	goto	l14557
 12709  0057EE                     l14551:
 12710                           
 12711                           ; BSR set to: 2
 12712                           ;main.c: 731: if ((0) != (p = strtok((0), ","))) {
 12713  0057EE  EC28  F035         	call	PL6	;call to abstracted procedure
 12714  0057F2  ECAB  F00D         	call	_strtok	;wreg free
 12715  0057F6  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12716  0057FA  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12717  0057FE  0102               	movlb	2	; () banked
 12718  005800  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12719  005802  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12720  005804  E014               	bz	l14559
 12721                           
 12722                           ; BSR set to: 2
 12723                           ;main.c: 732: vscpData[ i ] = atoi(p);
 12724  005806  0EE5               	movlw	low _vscpData
 12725  005808  25B0               	addwf	doModeVerbose@i& (0+255),w,b
 12726  00580A  6ED9               	movwf	fsr2l,c
 12727  00580C  6ADA               	clrf	fsr2h,c
 12728  00580E  0101               	movlb	1	; () banked
 12729  005810  0E01               	movlw	high _vscpData
 12730  005812  22DA               	addwfc	fsr2h,f,c
 12731  005814  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12732  005818  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12733  00581C  EC95  F015         	call	_atoi	;wreg free
 12734  005820  5166               	movf	?_atoi& (0+255),w,b
 12735  005822  6EDF               	movwf	indf2,c
 12736                           
 12737                           ; BSR set to: 0
 12738                           
 12739                           ;main.c: 733: }
 12740  005824  0102               	movlb	2	; () banked
 12741  005826  2BB0               	incf	doModeVerbose@i& (0+255),f,b
 12742  005828                     l14557:
 12743                           
 12744                           ; BSR set to: 2
 12745  005828  503E               	movf	_vscpSize,w,c
 12746  00582A  5DB0               	subwf	doModeVerbose@i& (0+255),w,b
 12747  00582C  E3E0               	bnc	l14551
 12748  00582E                     l14559:
 12749                           
 12750                           ; BSR set to: 2
 12751                           ;main.c: 736: }
 12752                           ;main.c: 737: }
 12753                           ;main.c: 739: if ( sendVSCPFrame(vscpClass,
 12754                           ;main.c: 740: vscpType,
 12755                           ;main.c: 741: vscpNodeId,
 12756                           ;main.c: 742: vscpPriority,
 12757                           ;main.c: 743: vscpSize,
 12758                           ;main.c: 744: vscpData ) ) {
 12759  00582E  C038  F098         	movff	_vscpClass,?_sendVSCPFrame
 12760  005832  C039  F099         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12761  005836  C03F  F09A         	movff	_vscpType,?_sendVSCPFrame+2
 12762  00583A  C03C  F09B         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12763  00583E  C03D  F09C         	movff	_vscpPriority,?_sendVSCPFrame+4
 12764  005842  C03E  F09D         	movff	_vscpSize,?_sendVSCPFrame+5
 12765  005846  0E01               	movlw	high _vscpData
 12766  005848  0100               	movlb	0	; () banked
 12767  00584A  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12768  00584C  0EE5               	movlw	low _vscpData
 12769  00584E  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12770  005850  EC25  F010         	call	_sendVSCPFrame	;wreg free
 12771  005854  0900               	iorlw	0
 12772  005856  E015               	bz	l14565
 12773                           
 12774                           ;main.c: 746: cntTxFrames++;
 12775  005858  0101               	movlb	1	; () banked
 12776  00585A  2B14               	incf	_cntTxFrames& (0+255),f,b
 12777  00585C  0E00               	movlw	0
 12778  00585E  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12779  005860  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12780  005862  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12781                           
 12782                           ;main.c: 747: cntTxBytes += vscpSize;
 12783  005864  503E               	movf	_vscpSize,w,c
 12784  005866  2710               	addwf	_cntTxBytes& (0+255),f,b
 12785  005868  0E00               	movlw	0
 12786  00586A  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12787  00586C  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12788  00586E  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12789                           
 12790                           ; BSR set to: 1
 12791                           ;main.c: 748: putsUSART((char *) "+OK\r\n");
 12792  005870  0E7C               	movlw	high STR_9
 12793  005872  0100               	movlb	0	; () banked
 12794  005874  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12795  005876  0E64               	movlw	low STR_9
 12796  005878  6F61               	movwf	?_putsUSART& (0+255),b
 12797  00587A  EC69  F00A         	call	_putsUSART	;wreg free
 12798                           
 12799                           ;main.c: 749: }
 12800  00587E  EF02  F035         	goto	l15221
 12801  005882                     l14565:
 12802                           
 12803                           ;main.c: 750: else {
 12804                           ;main.c: 751: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12805  005882  0E76               	movlw	high STR_37
 12806  005884  0100               	movlb	0	; () banked
 12807  005886  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12808  005888  0EAF               	movlw	low STR_37
 12809  00588A  6F61               	movwf	?_putsUSART& (0+255),b
 12810  00588C  EC69  F00A         	call	_putsUSART	;wreg free
 12811  005890  EF02  F035         	goto	l15221
 12812  005894                     l14567:
 12813                           
 12814                           ; BSR set to: 0
 12815                           ;main.c: 755: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12816  005894  0E01               	movlw	high _cmdbuf
 12817  005896  0100               	movlb	0	; () banked
 12818  005898  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12819  00589A  0E2D               	movlw	low _cmdbuf
 12820  00589C  6F6D               	movwf	?_stristr& (0+255),b
 12821  00589E  0E7C               	movlw	high STR_38
 12822  0058A0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12823  0058A2  0EE7               	movlw	low STR_38
 12824  0058A4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12825  0058A6  EC62  F00C         	call	_stristr	;wreg free
 12826  0058AA  0E2D               	movlw	low _cmdbuf
 12827  0058AC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12828  0058AE  0E01               	movlw	high _cmdbuf
 12829  0058B0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12830  0058B2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12831  0058B4  E102               	bnz	u19075
 12832  0058B6  516D               	movf	?_stristr& (0+255),w,b
 12833  0058B8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12834  0058BA                     u19075:
 12835  0058BA  E116               	bnz	l14575
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;main.c: 756: if (receivePrintEventVerbose()) {
 12839  0058BC  ECA8  F021         	call	_receivePrintEventVerbose	;wreg free
 12840  0058C0  0900               	iorlw	0
 12841  0058C2  E009               	bz	l14573
 12842                           
 12843                           ;main.c: 757: putsUSART((char *) "+OK\r\n");
 12844  0058C4  0E7C               	movlw	high STR_9
 12845  0058C6  0100               	movlb	0	; () banked
 12846  0058C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12847  0058CA  0E64               	movlw	low STR_9
 12848  0058CC  6F61               	movwf	?_putsUSART& (0+255),b
 12849  0058CE  EC69  F00A         	call	_putsUSART	;wreg free
 12850                           
 12851                           ;main.c: 758: }
 12852  0058D2  EF02  F035         	goto	l15221
 12853  0058D6                     l14573:
 12854                           
 12855                           ;main.c: 759: else {
 12856                           ;main.c: 760: putsUSART((char *) "+OK - no events\r\n");
 12857  0058D6  0E7A               	movlw	high STR_40
 12858  0058D8  0100               	movlb	0	; () banked
 12859  0058DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12860  0058DC  0EA0               	movlw	low STR_40
 12861  0058DE  6F61               	movwf	?_putsUSART& (0+255),b
 12862  0058E0  EC69  F00A         	call	_putsUSART	;wreg free
 12863  0058E4  EF02  F035         	goto	l15221
 12864  0058E8                     l14575:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;main.c: 764: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12868  0058E8  0E01               	movlw	high _cmdbuf
 12869  0058EA  0100               	movlb	0	; () banked
 12870  0058EC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12871  0058EE  0E2D               	movlw	low _cmdbuf
 12872  0058F0  6F6D               	movwf	?_stristr& (0+255),b
 12873  0058F2  0E7C               	movlw	high STR_41
 12874  0058F4  6F70               	movwf	(?_stristr+3)& (0+255),b
 12875  0058F6  0EBB               	movlw	low STR_41
 12876  0058F8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12877  0058FA  EC62  F00C         	call	_stristr	;wreg free
 12878  0058FE  0E2D               	movlw	low _cmdbuf
 12879  005900  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12880  005902  0E01               	movlw	high _cmdbuf
 12881  005904  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12882  005906  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12883  005908  E102               	bnz	u19095
 12884  00590A  516D               	movf	?_stristr& (0+255),w,b
 12885  00590C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12886  00590E                     u19095:
 12887  00590E  E10B               	bnz	l14581
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;main.c: 765: printStatistics();
 12891  005910  EC48  F01B         	call	_printStatistics	;wreg free
 12892                           
 12893                           ;main.c: 766: putsUSART((char *) "+OK\r\n");
 12894  005914  0E7C               	movlw	high STR_9
 12895  005916  0100               	movlb	0	; () banked
 12896  005918  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12897  00591A  0E64               	movlw	low STR_9
 12898  00591C  6F61               	movwf	?_putsUSART& (0+255),b
 12899  00591E  EC69  F00A         	call	_putsUSART	;wreg free
 12900                           
 12901                           ;main.c: 767: }
 12902  005922  EF02  F035         	goto	l15221
 12903  005926                     l14581:
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;main.c: 769: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12907  005926  0E01               	movlw	high _cmdbuf
 12908  005928  0100               	movlb	0	; () banked
 12909  00592A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12910  00592C  0E2D               	movlw	low _cmdbuf
 12911  00592E  6F6D               	movwf	?_stristr& (0+255),b
 12912  005930  0E7C               	movlw	high STR_43
 12913  005932  6F70               	movwf	(?_stristr+3)& (0+255),b
 12914  005934  0ED5               	movlw	low STR_43
 12915  005936  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12916  005938  EC62  F00C         	call	_stristr	;wreg free
 12917  00593C  0E2D               	movlw	low _cmdbuf
 12918  00593E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12919  005940  0E01               	movlw	high _cmdbuf
 12920  005942  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12921  005944  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12922  005946  E102               	bnz	u19105
 12923  005948  516D               	movf	?_stristr& (0+255),w,b
 12924  00594A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12925  00594C                     u19105:
 12926  00594C  E10B               	bnz	l14587
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;main.c: 770: printErrors();
 12930  00594E  ECF2  F022         	call	_printErrors	;wreg free
 12931                           
 12932                           ;main.c: 771: putsUSART((char *) "+OK\r\n");
 12933  005952  0E7C               	movlw	high STR_9
 12934  005954  0100               	movlb	0	; () banked
 12935  005956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12936  005958  0E64               	movlw	low STR_9
 12937  00595A  6F61               	movwf	?_putsUSART& (0+255),b
 12938  00595C  EC69  F00A         	call	_putsUSART	;wreg free
 12939                           
 12940                           ;main.c: 772: }
 12941  005960  EF02  F035         	goto	l15221
 12942  005964                     l14587:
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;main.c: 774: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12946  005964  0E01               	movlw	high _cmdbuf
 12947  005966  0100               	movlb	0	; () banked
 12948  005968  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12949  00596A  0E2D               	movlw	low _cmdbuf
 12950  00596C  6F6D               	movwf	?_stristr& (0+255),b
 12951  00596E  0E7C               	movlw	high STR_45
 12952  005970  6F70               	movwf	(?_stristr+3)& (0+255),b
 12953  005972  0EB6               	movlw	low STR_45
 12954  005974  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12955  005976  EC62  F00C         	call	_stristr	;wreg free
 12956  00597A  0E2D               	movlw	low _cmdbuf
 12957  00597C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12958  00597E  0E01               	movlw	high _cmdbuf
 12959  005980  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12960  005982  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12961  005984  E102               	bnz	u19115
 12962  005986  516D               	movf	?_stristr& (0+255),w,b
 12963  005988  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12964  00598A                     u19115:
 12965  00598A  E10B               	bnz	l14591
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;main.c: 775: printHelp();
 12969  00598C  EC17  F01C         	call	_printHelp	;wreg free
 12970                           
 12971                           ;main.c: 776: putsUSART((char *) "+OK\r\n");
 12972  005990  0E7C               	movlw	high STR_9
 12973  005992  0100               	movlb	0	; () banked
 12974  005994  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12975  005996  0E64               	movlw	low STR_9
 12976  005998  6F61               	movwf	?_putsUSART& (0+255),b
 12977  00599A  EC69  F00A         	call	_putsUSART	;wreg free
 12978                           
 12979                           ;main.c: 777: }
 12980  00599E  EF02  F035         	goto	l15221
 12981  0059A2                     l14591:
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;main.c: 779: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12985  0059A2  0E01               	movlw	high _cmdbuf
 12986  0059A4  0100               	movlb	0	; () banked
 12987  0059A6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12988  0059A8  0E2D               	movlw	low _cmdbuf
 12989  0059AA  6F6D               	movwf	?_stristr& (0+255),b
 12990  0059AC  0E7C               	movlw	high STR_47
 12991  0059AE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12992  0059B0  0E93               	movlw	low STR_47
 12993  0059B2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12994  0059B4  EC62  F00C         	call	_stristr	;wreg free
 12995  0059B8  0E2D               	movlw	low _cmdbuf
 12996  0059BA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12997  0059BC  0E01               	movlw	high _cmdbuf
 12998  0059BE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12999  0059C0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13000  0059C2  E102               	bnz	u19125
 13001  0059C4  516D               	movf	?_stristr& (0+255),w,b
 13002  0059C6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13003  0059C8                     u19125:
 13004  0059C8  E10B               	bnz	l14597
 13005                           
 13006                           ; BSR set to: 0
 13007                           ;main.c: 780: findNodes();
 13008  0059CA  ECA2  F016         	call	_findNodes	;wreg free
 13009                           
 13010                           ;main.c: 781: putsUSART((char *) "+OK\r\n");
 13011  0059CE  0E7C               	movlw	high STR_9
 13012  0059D0  0100               	movlb	0	; () banked
 13013  0059D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13014  0059D4  0E64               	movlw	low STR_9
 13015  0059D6  6F61               	movwf	?_putsUSART& (0+255),b
 13016  0059D8  EC69  F00A         	call	_putsUSART	;wreg free
 13017                           
 13018                           ;main.c: 782: }
 13019  0059DC  EF02  F035         	goto	l15221
 13020  0059E0                     l14597:
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;main.c: 785: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 13024  0059E0  0E01               	movlw	high _cmdbuf
 13025  0059E2  0100               	movlb	0	; () banked
 13026  0059E4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13027  0059E6  0E2D               	movlw	low _cmdbuf
 13028  0059E8  6F6D               	movwf	?_stristr& (0+255),b
 13029  0059EA  0E7C               	movlw	high STR_49
 13030  0059EC  6F70               	movwf	(?_stristr+3)& (0+255),b
 13031  0059EE  0E98               	movlw	low STR_49
 13032  0059F0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13033  0059F2  EC62  F00C         	call	_stristr	;wreg free
 13034  0059F6  0E2D               	movlw	low _cmdbuf
 13035  0059F8  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13036  0059FA  0E01               	movlw	high _cmdbuf
 13037  0059FC  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13038  0059FE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13039  005A00  E102               	bnz	u19135
 13040  005A02  516D               	movf	?_stristr& (0+255),w,b
 13041  005A04  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13042  005A06                     u19135:
 13043  005A06  E001 D219          	bnz	l14761
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;main.c: 787: uint8_t i;
 13047                           ;main.c: 788: uint8_t nodeid;
 13048                           ;main.c: 789: uint8_t page = 0;
 13049  005A0A  0102               	movlb	2	; () banked
 13050  005A0C  6BB5               	clrf	doModeVerbose@page& (0+255),b
 13051                           
 13052                           ; BSR set to: 2
 13053                           ;main.c: 790: uint8_t reg;
 13054                           ;main.c: 791: uint8_t value;
 13055                           ;main.c: 792: uint8_t count = 1;
 13056  005A0E  0E01               	movlw	1
 13057  005A10  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13058                           
 13059                           ; BSR set to: 2
 13060                           ;main.c: 794: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13061  005A12  506F               	movf	3951,w,c	;volatile
 13062  005A14  0BE0               	andlw	224
 13063  005A16  E009               	bz	l14609
 13064                           
 13065                           ; BSR set to: 2
 13066                           ;main.c: 795: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13067  005A18  0E70               	movlw	high STR_50
 13068  005A1A  0100               	movlb	0	; () banked
 13069  005A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13070  005A1E  0EC7               	movlw	low STR_50
 13071  005A20  6F61               	movwf	?_putsUSART& (0+255),b
 13072  005A22  EC69  F00A         	call	_putsUSART	;wreg free
 13073  005A26  EF0C  F035         	goto	l559
 13074  005A2A                     l14609:
 13075                           
 13076                           ; BSR set to: 2
 13077                           ;main.c: 797: }
 13078                           ;main.c: 799: strcpy(cmdbuf, cmdbuf + 5);
 13079  005A2A  EC0D  F035         	call	PL2	;call to abstracted procedure
 13080  005A2E  EC18  F008         	call	_strcpy	;wreg free
 13081                           
 13082                           ; BSR set to: 0
 13083                           ;main.c: 800: char *p = strtok(cmdbuf, " ");
 13084  005A32  0E01               	movlw	high _cmdbuf
 13085  005A34  EC6E  F035         	call	PL36	;call to abstracted procedure
 13086  005A38  ECAB  F00D         	call	_strtok	;wreg free
 13087  005A3C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1190
 13088  005A40  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;main.c: 801: if ((0) != p) {
 13092  005A44  0102               	movlb	2	; () banked
 13093  005A46  51BC               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13094  005A48  11BB               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13095  005A4A  E00A               	bz	l14617
 13096                           
 13097                           ; BSR set to: 2
 13098                           ;main.c: 802: nodeid = atoi(p);
 13099  005A4C  C2BB  F066         	movff	doModeVerbose@p_1190,?_atoi
 13100  005A50  C2BC  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13101  005A54  EC95  F015         	call	_atoi	;wreg free
 13102  005A58  5166               	movf	?_atoi& (0+255),w,b
 13103  005A5A  0102               	movlb	2	; () banked
 13104  005A5C  6FB3               	movwf	doModeVerbose@nodeid& (0+255),b
 13105                           
 13106                           ;main.c: 803: }
 13107  005A5E  D012               	goto	l14625
 13108  005A60                     l14617:
 13109                           
 13110                           ; BSR set to: 2
 13111                           ;main.c: 804: else {
 13112                           ;main.c: 805: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13113  005A60  0E78               	movlw	high STR_52
 13114  005A62  0100               	movlb	0	; () banked
 13115  005A64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13116  005A66  0EAC               	movlw	low STR_52
 13117  005A68  6F61               	movwf	?_putsUSART& (0+255),b
 13118  005A6A  EC69  F00A         	call	_putsUSART	;wreg free
 13119  005A6E                     l14619:
 13120                           
 13121                           ;main.c: 806: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 13122  005A6E  0E01               	movlw	high _cmdbuf
 13123  005A70  0100               	movlb	0	; () banked
 13124  005A72  6F61               	movwf	(?_memset+1)& (0+255),b
 13125  005A74  0E2D               	movlw	low _cmdbuf
 13126  005A76  EC39  F00E         	call	PL18	;call to abstracted procedure
 13127  005A7A  EC01  F008         	call	_memset	;wreg free
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;main.c: 807: pos = 0;
 13131  005A7E  6A34               	clrf	_pos,c
 13132  005A80  EF0C  F035         	goto	l559
 13133  005A84                     l14625:
 13134                           
 13135                           ; BSR set to: 2
 13136                           ;main.c: 809: }
 13137                           ;main.c: 811: if ((0) != (p = strtok((0), " "))) {
 13138  005A84  EC5C  F035         	call	PL28	;call to abstracted procedure
 13139  005A88  ECAB  F00D         	call	_strtok	;wreg free
 13140  005A8C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1190
 13141  005A90  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13142  005A94  0102               	movlb	2	; () banked
 13143  005A96  51BC               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13144  005A98  11BB               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13145  005A9A  E034               	bz	l14633
 13146                           
 13147                           ; BSR set to: 2
 13148                           ;main.c: 813: char *preg;
 13149                           ;main.c: 814: if (preg = strchr(p, ':')) {
 13150  005A9C  C2BB  F060         	movff	doModeVerbose@p_1190,?_strchr
 13151  005AA0  C2BC  F061         	movff	doModeVerbose@p_1190+1,?_strchr+1
 13152  005AA4  0100               	movlb	0	; () banked
 13153  005AA6  6B63               	clrf	(?_strchr+3)& (0+255),b
 13154  005AA8  0E3A               	movlw	58
 13155  005AAA  6F62               	movwf	(?_strchr+2)& (0+255),b
 13156  005AAC  EC50  F00B         	call	_strchr	;wreg free
 13157  005AB0  C060  F284         	movff	?_strchr,doModeVerbose@preg
 13158  005AB4  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 13159  005AB8  0102               	movlb	2	; () banked
 13160  005ABA  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13161  005ABC  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 13162  005ABE  E018               	bz	l14631
 13163                           
 13164                           ; BSR set to: 2
 13165                           ;main.c: 815: page = atoi(p);
 13166  005AC0  C2BB  F066         	movff	doModeVerbose@p_1190,?_atoi
 13167  005AC4  C2BC  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13168  005AC8  EC95  F015         	call	_atoi	;wreg free
 13169  005ACC  5166               	movf	?_atoi& (0+255),w,b
 13170  005ACE  0102               	movlb	2	; () banked
 13171  005AD0  6FB5               	movwf	doModeVerbose@page& (0+255),b
 13172                           
 13173                           ;main.c: 816: reg = atoi(preg + 1);
 13174  005AD2  2984               	incf	doModeVerbose@preg& (0+255),w,b
 13175  005AD4  0100               	movlb	0	; () banked
 13176  005AD6  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13177  005AD8  0E00               	movlw	0
 13178  005ADA  0102               	movlb	2	; () banked
 13179  005ADC  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 13180  005ADE  0100               	movlb	0	; () banked
 13181  005AE0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13182  005AE2  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13183  005AE6  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13184  005AEA  EC95  F015         	call	_atoi	;wreg free
 13185  005AEE  D006               	goto	L6
 13186  005AF0                     l14631:
 13187                           
 13188                           ; BSR set to: 2
 13189                           ;main.c: 818: else {
 13190                           ;main.c: 819: reg = atoi(p);
 13191  005AF0  C2BB  F066         	movff	doModeVerbose@p_1190,?_atoi
 13192  005AF4  C2BC  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13193  005AF8  EC95  F015         	call	_atoi	;wreg free
 13194  005AFC                     L6:
 13195  005AFC  5166               	movf	?_atoi& (0+255),w,b
 13196  005AFE  0102               	movlb	2	; () banked
 13197  005B00  6FB6               	movwf	doModeVerbose@reg& (0+255),b
 13198  005B02  D008               	goto	l14641
 13199  005B04                     l14633:
 13200                           
 13201                           ; BSR set to: 2
 13202                           ;main.c: 823: else {
 13203                           ;main.c: 824: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13204  005B04  0E76               	movlw	high STR_54
 13205  005B06  0100               	movlb	0	; () banked
 13206  005B08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13207  005B0A  0EF1               	movlw	low STR_54
 13208  005B0C  6F61               	movwf	?_putsUSART& (0+255),b
 13209  005B0E  EC69  F00A         	call	_putsUSART	;wreg free
 13210  005B12  D7AD               	goto	l14619
 13211  005B14                     l14641:
 13212                           
 13213                           ; BSR set to: 2
 13214                           ;main.c: 828: }
 13215                           ;main.c: 831: if ((0) != (p = strtok((0), " "))) {
 13216  005B14  EC5C  F035         	call	PL28	;call to abstracted procedure
 13217  005B18  ECAB  F00D         	call	_strtok	;wreg free
 13218  005B1C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1190
 13219  005B20  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13220  005B24  0102               	movlb	2	; () banked
 13221  005B26  51BC               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13222  005B28  11BB               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13223  005B2A  E00D               	bz	l566
 13224                           
 13225                           ; BSR set to: 2
 13226                           ;main.c: 832: count = atoi(p);
 13227  005B2C  C2BB  F066         	movff	doModeVerbose@p_1190,?_atoi
 13228  005B30  C2BC  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13229  005B34  EC95  F015         	call	_atoi	;wreg free
 13230  005B38  5166               	movf	?_atoi& (0+255),w,b
 13231  005B3A  0102               	movlb	2	; () banked
 13232  005B3C  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13233                           
 13234                           ; BSR set to: 2
 13235                           ;main.c: 833: if (0 == count) count = 1;
 13236  005B3E  67B2               	tstfsz	doModeVerbose@count& (0+255),b
 13237  005B40  D002               	goto	l566
 13238                           
 13239                           ; BSR set to: 2
 13240  005B42  0E01               	movlw	1
 13241  005B44  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13242  005B46                     l566:
 13243                           
 13244                           ; BSR set to: 2
 13245                           ;main.c: 834: }
 13246                           ;main.c: 836: BOOL rv = 1;
 13247  005B46  0E01               	movlw	1
 13248  005B48  6FA6               	movwf	doModeVerbose@rv& (0+255),b
 13249                           
 13250                           ; BSR set to: 2
 13251                           ;main.c: 837: for (i = 0; i < count; i++) {
 13252  005B4A  6BB7               	clrf	doModeVerbose@i_1183& (0+255),b
 13253  005B4C  D15F               	goto	l14753
 13254  005B4E                     l14651:
 13255                           
 13256                           ; BSR set to: 2
 13257                           ;main.c: 839: if (readRegisterExtended(nodeid,
 13258                           ;main.c: 840: page,
 13259                           ;main.c: 841: (reg + i) & 0xff,
 13260                           ;main.c: 842: rwtimeout,
 13261                           ;main.c: 843: &value)) {
 13262  005B4E  0100               	movlb	0	; () banked
 13263  005B50  C2B5  F0B8         	movff	doModeVerbose@page,?_readRegisterExtended
 13264  005B54  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 13265  005B56  0102               	movlb	2	; () banked
 13266  005B58  51B6               	movf	doModeVerbose@reg& (0+255),w,b
 13267  005B5A  25B7               	addwf	doModeVerbose@i_1183& (0+255),w,b
 13268  005B5C  0100               	movlb	0	; () banked
 13269  005B5E  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 13270  005B60  C035  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 13271  005B64  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 13272  005B66  0E02               	movlw	high doModeVerbose@value
 13273  005B68  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 13274  005B6A  0EBA               	movlw	low doModeVerbose@value
 13275  005B6C  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 13276  005B6E  0102               	movlb	2	; () banked
 13277  005B70  51B3               	movf	doModeVerbose@nodeid& (0+255),w,b
 13278  005B72  EC21  F014         	call	_readRegisterExtended
 13279  005B76  0900               	iorlw	0
 13280  005B78  E101 D0C8          	bz	l570
 13281                           
 13282                           ;main.c: 844: putsUSART((char *) "+OK - nodeid=");
 13283  005B7C  0E7B               	movlw	high STR_56
 13284  005B7E  0100               	movlb	0	; () banked
 13285  005B80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13286  005B82  0E36               	movlw	low STR_56
 13287  005B84  6F61               	movwf	?_putsUSART& (0+255),b
 13288  005B86  EC69  F00A         	call	_putsUSART	;wreg free
 13289                           
 13290                           ;main.c: 845: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13291  005B8A  662C               	tstfsz	_bHex,c
 13292  005B8C  D005               	goto	l14659
 13293  005B8E  0E7C               	movlw	high STR_58
 13294  005B90  0102               	movlb	2	; () banked
 13295  005B92  6F93               	movwf	(_doModeVerbose$1202+1)& (0+255),b
 13296  005B94  0E6A               	movlw	low STR_58
 13297  005B96  D004               	goto	L7
 13298  005B98                     l14659:
 13299  005B98  0E7B               	movlw	high STR_57
 13300  005B9A  0102               	movlb	2	; () banked
 13301  005B9C  6F93               	movwf	(_doModeVerbose$1202+1)& (0+255),b
 13302  005B9E  0E66               	movlw	low STR_57
 13303  005BA0                     L7:
 13304  005BA0  6F92               	movwf	_doModeVerbose$1202& (0+255),b
 13305                           
 13306                           ; BSR set to: 2
 13307  005BA2  0E01               	movlw	high _wrkbuf
 13308  005BA4  0100               	movlb	0	; () banked
 13309  005BA6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13310  005BA8  0E7D               	movlw	low _wrkbuf
 13311  005BAA  6F76               	movwf	?_sprintf& (0+255),b
 13312  005BAC  C292  F078         	movff	_doModeVerbose$1202,?_sprintf+2
 13313  005BB0  C293  F079         	movff	_doModeVerbose$1202+1,?_sprintf+3
 13314  005BB4  C2B3  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13315  005BB8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13316  005BBA  EC3F  F026         	call	_sprintf	;wreg free
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;main.c: 846: putsUSART(wrkbuf);
 13320  005BBE  0E01               	movlw	high _wrkbuf
 13321  005BC0  0100               	movlb	0	; () banked
 13322  005BC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13323  005BC4  0E7D               	movlw	low _wrkbuf
 13324  005BC6  6F61               	movwf	?_putsUSART& (0+255),b
 13325  005BC8  EC69  F00A         	call	_putsUSART	;wreg free
 13326                           
 13327                           ;main.c: 847: putsUSART((char *) "Value for reg ");
 13328  005BCC  0E7B               	movlw	high STR_59
 13329  005BCE  0100               	movlb	0	; () banked
 13330  005BD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13331  005BD2  0E19               	movlw	low STR_59
 13332  005BD4  6F61               	movwf	?_putsUSART& (0+255),b
 13333  005BD6  EC69  F00A         	call	_putsUSART	;wreg free
 13334                           
 13335                           ;main.c: 848: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13336  005BDA  662C               	tstfsz	_bHex,c
 13337  005BDC  D005               	goto	l14671
 13338  005BDE  0E7C               	movlw	high STR_61
 13339  005BE0  0102               	movlb	2	; () banked
 13340  005BE2  6F95               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13341  005BE4  0EED               	movlw	low STR_61
 13342  005BE6  D004               	goto	L8
 13343  005BE8                     l14671:
 13344  005BE8  0E7C               	movlw	high STR_60
 13345  005BEA  0102               	movlb	2	; () banked
 13346  005BEC  6F95               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13347  005BEE  0E49               	movlw	low STR_60
 13348  005BF0                     L8:
 13349  005BF0  6F94               	movwf	_doModeVerbose$1207& (0+255),b
 13350                           
 13351                           ; BSR set to: 2
 13352  005BF2  0E01               	movlw	high _wrkbuf
 13353  005BF4  0100               	movlb	0	; () banked
 13354  005BF6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13355  005BF8  0E7D               	movlw	low _wrkbuf
 13356  005BFA  6F76               	movwf	?_sprintf& (0+255),b
 13357  005BFC  C294  F078         	movff	_doModeVerbose$1207,?_sprintf+2
 13358  005C00  C295  F079         	movff	_doModeVerbose$1207+1,?_sprintf+3
 13359  005C04  C2B5  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13360  005C08  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13361  005C0A  EC3F  F026         	call	_sprintf	;wreg free
 13362                           
 13363                           ; BSR set to: 0
 13364                           ;main.c: 849: putsUSART(wrkbuf);
 13365  005C0E  0E01               	movlw	high _wrkbuf
 13366  005C10  0100               	movlb	0	; () banked
 13367  005C12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13368  005C14  0E7D               	movlw	low _wrkbuf
 13369  005C16  6F61               	movwf	?_putsUSART& (0+255),b
 13370  005C18  EC69  F00A         	call	_putsUSART	;wreg free
 13371                           
 13372                           ;main.c: 850: WriteUSART(':');
 13373  005C1C  0E3A               	movlw	58
 13374  005C1E  ECB1  F007         	call	_WriteUSART
 13375  005C22                     l579:
 13376  005C22  A2AC               	btfss	4012,1,c	;volatile
 13377  005C24  D7FE               	goto	l579
 13378                           
 13379                           ;main.c: 852: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13380  005C26  662C               	tstfsz	_bHex,c
 13381  005C28  D005               	goto	l14681
 13382  005C2A  0E7C               	movlw	high STR_61
 13383  005C2C  0102               	movlb	2	; () banked
 13384  005C2E  6F97               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13385  005C30  0EED               	movlw	low STR_61
 13386  005C32  D004               	goto	L9
 13387  005C34                     l14681:
 13388  005C34  0E7C               	movlw	high STR_60
 13389  005C36  0102               	movlb	2	; () banked
 13390  005C38  6F97               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13391  005C3A  0E49               	movlw	low STR_60
 13392  005C3C                     L9:
 13393  005C3C  6F96               	movwf	_doModeVerbose$1211& (0+255),b
 13394                           
 13395                           ; BSR set to: 2
 13396  005C3E  0E01               	movlw	high _wrkbuf
 13397  005C40  0100               	movlb	0	; () banked
 13398  005C42  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13399  005C44  0E7D               	movlw	low _wrkbuf
 13400  005C46  6F76               	movwf	?_sprintf& (0+255),b
 13401  005C48  C296  F078         	movff	_doModeVerbose$1211,?_sprintf+2
 13402  005C4C  C297  F079         	movff	_doModeVerbose$1211+1,?_sprintf+3
 13403  005C50  EC84  F035         	call	PL42	;call to abstracted procedure
 13404  005C54  EC3F  F026         	call	_sprintf	;wreg free
 13405                           
 13406                           ; BSR set to: 0
 13407                           ;main.c: 853: putsUSART(wrkbuf);
 13408  005C58  0E01               	movlw	high _wrkbuf
 13409  005C5A  0100               	movlb	0	; () banked
 13410  005C5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13411  005C5E  0E7D               	movlw	low _wrkbuf
 13412  005C60  6F61               	movwf	?_putsUSART& (0+255),b
 13413  005C62  EC69  F00A         	call	_putsUSART	;wreg free
 13414                           
 13415                           ;main.c: 854: putsUSART((char *) " = ");
 13416  005C66  0E7B               	movlw	high (STR_276+4)
 13417  005C68  0100               	movlb	0	; () banked
 13418  005C6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13419  005C6C  0ECE               	movlw	low (STR_276+4)
 13420  005C6E  6F61               	movwf	?_putsUSART& (0+255),b
 13421  005C70  EC69  F00A         	call	_putsUSART	;wreg free
 13422                           
 13423                           ;main.c: 855: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13424  005C74  662C               	tstfsz	_bHex,c
 13425  005C76  D005               	goto	l14693
 13426  005C78  0E7C               	movlw	high STR_61
 13427  005C7A  0102               	movlb	2	; () banked
 13428  005C7C  6F99               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13429  005C7E  0EED               	movlw	low STR_61
 13430  005C80  D004               	goto	L10
 13431  005C82                     l14693:
 13432  005C82  0E7C               	movlw	high STR_60
 13433  005C84  0102               	movlb	2	; () banked
 13434  005C86  6F99               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13435  005C88  0E49               	movlw	low STR_60
 13436  005C8A                     L10:
 13437  005C8A  6F98               	movwf	_doModeVerbose$1216& (0+255),b
 13438                           
 13439                           ; BSR set to: 2
 13440  005C8C  0E01               	movlw	high _wrkbuf
 13441  005C8E  0100               	movlb	0	; () banked
 13442  005C90  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13443  005C92  0E7D               	movlw	low _wrkbuf
 13444  005C94  6F76               	movwf	?_sprintf& (0+255),b
 13445  005C96  C298  F078         	movff	_doModeVerbose$1216,?_sprintf+2
 13446  005C9A  C299  F079         	movff	_doModeVerbose$1216+1,?_sprintf+3
 13447  005C9E  C2BA  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13448  005CA2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13449  005CA4  EC3F  F026         	call	_sprintf	;wreg free
 13450                           
 13451                           ; BSR set to: 0
 13452                           ;main.c: 856: putsUSART(wrkbuf);
 13453  005CA8  0E01               	movlw	high _wrkbuf
 13454  005CAA  0100               	movlb	0	; () banked
 13455  005CAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13456  005CAE  0E7D               	movlw	low _wrkbuf
 13457  005CB0  6F61               	movwf	?_putsUSART& (0+255),b
 13458  005CB2  EC69  F00A         	call	_putsUSART	;wreg free
 13459  005CB6                     l590:
 13460  005CB6  A2AC               	btfss	4012,1,c	;volatile
 13461  005CB8  D7FE               	goto	l590
 13462                           
 13463                           ;main.c: 858: putsUSART("\t\'");
 13464  005CBA  0E7C               	movlw	high STR_67
 13465  005CBC  0100               	movlb	0	; () banked
 13466  005CBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13467  005CC0  0EE1               	movlw	low STR_67
 13468  005CC2  6F61               	movwf	?_putsUSART& (0+255),b
 13469  005CC4  EC69  F00A         	call	_putsUSART	;wreg free
 13470                           
 13471                           ;main.c: 859: if ((value > 32) && (value < 127)) {
 13472  005CC8  0E20               	movlw	32
 13473  005CCA  0102               	movlb	2	; () banked
 13474  005CCC  65BA               	cpfsgt	doModeVerbose@value& (0+255),b
 13475  005CCE  D007               	goto	l14707
 13476                           
 13477                           ; BSR set to: 2
 13478  005CD0  0E7F               	movlw	127
 13479  005CD2  61BA               	cpfslt	doModeVerbose@value& (0+255),b
 13480  005CD4  D004               	goto	l14707
 13481                           
 13482                           ; BSR set to: 2
 13483                           ;main.c: 860: WriteUSART(value);
 13484  005CD6  51BA               	movf	doModeVerbose@value& (0+255),w,b
 13485  005CD8  ECB1  F007         	call	_WriteUSART
 13486                           
 13487                           ;main.c: 861: }
 13488  005CDC  D003               	goto	l595
 13489  005CDE                     l14707:
 13490                           
 13491                           ; BSR set to: 2
 13492                           ;main.c: 862: else {
 13493                           ;main.c: 863: WriteUSART('.');
 13494  005CDE  0E2E               	movlw	46
 13495  005CE0  ECB1  F007         	call	_WriteUSART
 13496  005CE4                     l595:
 13497  005CE4  A2AC               	btfss	4012,1,c	;volatile
 13498  005CE6  D7FE               	goto	l595
 13499                           
 13500                           ;main.c: 866: putsUSART("\' \t");
 13501  005CE8  0E7C               	movlw	high STR_68
 13502  005CEA  0100               	movlb	0	; () banked
 13503  005CEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13504  005CEE  0EC5               	movlw	low STR_68
 13505  005CF0  6F61               	movwf	?_putsUSART& (0+255),b
 13506  005CF2  EC69  F00A         	call	_putsUSART	;wreg free
 13507                           
 13508                           ;main.c: 867: printBinary(value);
 13509  005CF6  0102               	movlb	2	; () banked
 13510  005CF8  51BA               	movf	doModeVerbose@value& (0+255),w,b
 13511  005CFA  EC19  F00A         	call	_printBinary
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;main.c: 868: putsUSART((char *) "\r\n");
 13515  005CFE  0E70               	movlw	high (STR_228+50)
 13516  005D00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13517  005D02  0EC4               	movlw	low (STR_228+50)
 13518  005D04  6F61               	movwf	?_putsUSART& (0+255),b
 13519  005D06  EC69  F00A         	call	_putsUSART	;wreg free
 13520                           
 13521                           ;main.c: 869: }
 13522  005D0A  D07E               	goto	l14751
 13523  005D0C                     l570:
 13524                           
 13525                           ;main.c: 870: else {
 13526                           ;main.c: 871: rv = 0;
 13527  005D0C  0102               	movlb	2	; () banked
 13528  005D0E  6BA6               	clrf	doModeVerbose@rv& (0+255),b
 13529                           
 13530                           ; BSR set to: 2
 13531                           ;main.c: 872: putsUSART((char *) "-ERROR - nodeid=");
 13532  005D10  0E7B               	movlw	high STR_70
 13533  005D12  0100               	movlb	0	; () banked
 13534  005D14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13535  005D16  0E08               	movlw	low STR_70
 13536  005D18  6F61               	movwf	?_putsUSART& (0+255),b
 13537  005D1A  EC69  F00A         	call	_putsUSART	;wreg free
 13538                           
 13539                           ;main.c: 873: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13540  005D1E  662C               	tstfsz	_bHex,c
 13541  005D20  D005               	goto	l14721
 13542  005D22  0E7C               	movlw	high STR_58
 13543  005D24  0102               	movlb	2	; () banked
 13544  005D26  6F9B               	movwf	(_doModeVerbose$1224+1)& (0+255),b
 13545  005D28  0E6A               	movlw	low STR_58
 13546  005D2A  D004               	goto	L11
 13547  005D2C                     l14721:
 13548  005D2C  0E7B               	movlw	high STR_57
 13549  005D2E  0102               	movlb	2	; () banked
 13550  005D30  6F9B               	movwf	(_doModeVerbose$1224+1)& (0+255),b
 13551  005D32  0E66               	movlw	low STR_57
 13552  005D34                     L11:
 13553  005D34  6F9A               	movwf	_doModeVerbose$1224& (0+255),b
 13554                           
 13555                           ; BSR set to: 2
 13556  005D36  0E01               	movlw	high _wrkbuf
 13557  005D38  0100               	movlb	0	; () banked
 13558  005D3A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13559  005D3C  0E7D               	movlw	low _wrkbuf
 13560  005D3E  6F76               	movwf	?_sprintf& (0+255),b
 13561  005D40  C29A  F078         	movff	_doModeVerbose$1224,?_sprintf+2
 13562  005D44  C29B  F079         	movff	_doModeVerbose$1224+1,?_sprintf+3
 13563  005D48  C2B3  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13564  005D4C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13565  005D4E  EC3F  F026         	call	_sprintf	;wreg free
 13566                           
 13567                           ; BSR set to: 0
 13568                           ;main.c: 874: putsUSART(wrkbuf);
 13569  005D52  0E01               	movlw	high _wrkbuf
 13570  005D54  0100               	movlb	0	; () banked
 13571  005D56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13572  005D58  0E7D               	movlw	low _wrkbuf
 13573  005D5A  6F61               	movwf	?_putsUSART& (0+255),b
 13574  005D5C  EC69  F00A         	call	_putsUSART	;wreg free
 13575                           
 13576                           ;main.c: 875: putsUSART((char *) "Unable to read register ");
 13577  005D60  0E78               	movlw	high STR_73
 13578  005D62  0100               	movlb	0	; () banked
 13579  005D64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13580  005D66  0E63               	movlw	low STR_73
 13581  005D68  6F61               	movwf	?_putsUSART& (0+255),b
 13582  005D6A  EC69  F00A         	call	_putsUSART	;wreg free
 13583  005D6E                     l603:
 13584  005D6E  A2AC               	btfss	4012,1,c	;volatile
 13585  005D70  D7FE               	goto	l603
 13586                           
 13587                           ;main.c: 877: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13588  005D72  662C               	tstfsz	_bHex,c
 13589  005D74  D005               	goto	l14731
 13590  005D76  0E7C               	movlw	high STR_61
 13591  005D78  0102               	movlb	2	; () banked
 13592  005D7A  6F9D               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13593  005D7C  0EED               	movlw	low STR_61
 13594  005D7E  D004               	goto	L12
 13595  005D80                     l14731:
 13596  005D80  0E7C               	movlw	high STR_60
 13597  005D82  0102               	movlb	2	; () banked
 13598  005D84  6F9D               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13599  005D86  0E49               	movlw	low STR_60
 13600  005D88                     L12:
 13601  005D88  6F9C               	movwf	_doModeVerbose$1229& (0+255),b
 13602                           
 13603                           ; BSR set to: 2
 13604  005D8A  0E01               	movlw	high _wrkbuf
 13605  005D8C  0100               	movlb	0	; () banked
 13606  005D8E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13607  005D90  0E7D               	movlw	low _wrkbuf
 13608  005D92  6F76               	movwf	?_sprintf& (0+255),b
 13609  005D94  C29C  F078         	movff	_doModeVerbose$1229,?_sprintf+2
 13610  005D98  C29D  F079         	movff	_doModeVerbose$1229+1,?_sprintf+3
 13611  005D9C  C2B5  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13612  005DA0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13613  005DA2  EC3F  F026         	call	_sprintf	;wreg free
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;main.c: 878: putsUSART(wrkbuf);
 13617  005DA6  0E01               	movlw	high _wrkbuf
 13618  005DA8  0100               	movlb	0	; () banked
 13619  005DAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13620  005DAC  0E7D               	movlw	low _wrkbuf
 13621  005DAE  6F61               	movwf	?_putsUSART& (0+255),b
 13622  005DB0  EC69  F00A         	call	_putsUSART	;wreg free
 13623                           
 13624                           ;main.c: 879: WriteUSART(':');
 13625  005DB4  0E3A               	movlw	58
 13626  005DB6  ECB1  F007         	call	_WriteUSART
 13627                           
 13628                           ;main.c: 880: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13629  005DBA  662C               	tstfsz	_bHex,c
 13630  005DBC  D005               	goto	l14743
 13631  005DBE  0E7C               	movlw	high STR_61
 13632  005DC0  0102               	movlb	2	; () banked
 13633  005DC2  6F9F               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13634  005DC4  0EED               	movlw	low STR_61
 13635  005DC6  D004               	goto	L13
 13636  005DC8                     l14743:
 13637  005DC8  0E7C               	movlw	high STR_60
 13638  005DCA  0102               	movlb	2	; () banked
 13639  005DCC  6F9F               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13640  005DCE  0E49               	movlw	low STR_60
 13641  005DD0                     L13:
 13642  005DD0  6F9E               	movwf	_doModeVerbose$1233& (0+255),b
 13643                           
 13644                           ; BSR set to: 2
 13645  005DD2  0E01               	movlw	high _wrkbuf
 13646  005DD4  0100               	movlb	0	; () banked
 13647  005DD6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13648  005DD8  0E7D               	movlw	low _wrkbuf
 13649  005DDA  6F76               	movwf	?_sprintf& (0+255),b
 13650  005DDC  C29E  F078         	movff	_doModeVerbose$1233,?_sprintf+2
 13651  005DE0  C29F  F079         	movff	_doModeVerbose$1233+1,?_sprintf+3
 13652  005DE4  EC84  F035         	call	PL42	;call to abstracted procedure
 13653  005DE8  EC3F  F026         	call	_sprintf	;wreg free
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;main.c: 881: putsUSART(wrkbuf);
 13657  005DEC  0E01               	movlw	high _wrkbuf
 13658  005DEE  0100               	movlb	0	; () banked
 13659  005DF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13660  005DF2  0E7D               	movlw	low _wrkbuf
 13661  005DF4  6F61               	movwf	?_putsUSART& (0+255),b
 13662  005DF6  EC69  F00A         	call	_putsUSART	;wreg free
 13663                           
 13664                           ;main.c: 883: putsUSART((char *) "\r\n");
 13665  005DFA  0E70               	movlw	high (STR_228+50)
 13666  005DFC  0100               	movlb	0	; () banked
 13667  005DFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13668  005E00  0EC4               	movlw	low (STR_228+50)
 13669  005E02  6F61               	movwf	?_putsUSART& (0+255),b
 13670  005E04  EC69  F00A         	call	_putsUSART	;wreg free
 13671  005E08                     l14751:
 13672  005E08  0102               	movlb	2	; () banked
 13673  005E0A  2BB7               	incf	doModeVerbose@i_1183& (0+255),f,b
 13674  005E0C                     l14753:
 13675                           
 13676                           ; BSR set to: 2
 13677  005E0C  51B2               	movf	doModeVerbose@count& (0+255),w,b
 13678  005E0E  5DB7               	subwf	doModeVerbose@i_1183& (0+255),w,b
 13679  005E10  E201 D69D          	bnc	l14651
 13680                           
 13681                           ; BSR set to: 2
 13682                           ;main.c: 884: }
 13683                           ;main.c: 885: }
 13684                           ;main.c: 887: if (rv) {
 13685  005E14  51A6               	movf	doModeVerbose@rv& (0+255),w,b
 13686  005E16  E009               	bz	l14759
 13687                           
 13688                           ; BSR set to: 2
 13689                           ;main.c: 888: putsUSART((char *) "+OK\r\n");
 13690  005E18  0E7C               	movlw	high STR_9
 13691  005E1A  0100               	movlb	0	; () banked
 13692  005E1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13693  005E1E  0E64               	movlw	low STR_9
 13694  005E20  6F61               	movwf	?_putsUSART& (0+255),b
 13695  005E22  EC69  F00A         	call	_putsUSART	;wreg free
 13696                           
 13697                           ;main.c: 889: }
 13698  005E26  EF02  F035         	goto	l15221
 13699  005E2A                     l14759:
 13700                           
 13701                           ; BSR set to: 2
 13702                           ;main.c: 890: else {
 13703                           ;main.c: 891: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13704  005E2A  0E70               	movlw	high STR_80
 13705  005E2C  0100               	movlb	0	; () banked
 13706  005E2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13707  005E30  0E5C               	movlw	low STR_80
 13708  005E32  6F61               	movwf	?_putsUSART& (0+255),b
 13709  005E34  EC69  F00A         	call	_putsUSART	;wreg free
 13710  005E38  EF02  F035         	goto	l15221
 13711  005E3C                     l14761:
 13712                           
 13713                           ; BSR set to: 0
 13714                           ;main.c: 897: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13715  005E3C  0E01               	movlw	high _cmdbuf
 13716  005E3E  0100               	movlb	0	; () banked
 13717  005E40  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13718  005E42  0E2D               	movlw	low _cmdbuf
 13719  005E44  6F6D               	movwf	?_stristr& (0+255),b
 13720  005E46  0E7C               	movlw	high STR_81
 13721  005E48  6F70               	movwf	(?_stristr+3)& (0+255),b
 13722  005E4A  0E9D               	movlw	low STR_81
 13723  005E4C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13724  005E4E  EC62  F00C         	call	_stristr	;wreg free
 13725  005E52  0E2D               	movlw	low _cmdbuf
 13726  005E54  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13727  005E56  0E01               	movlw	high _cmdbuf
 13728  005E58  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13729  005E5A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13730  005E5C  E102               	bnz	u19365
 13731  005E5E  516D               	movf	?_stristr& (0+255),w,b
 13732  005E60  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13733  005E62                     u19365:
 13734  005E62  E001 D104          	bnz	l14843
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;main.c: 899: uint8_t nodeid;
 13738                           ;main.c: 900: uint8_t page = 0;
 13739  005E66  0102               	movlb	2	; () banked
 13740  005E68  6BA7               	clrf	doModeVerbose@page_1239& (0+255),b
 13741                           
 13742                           ; BSR set to: 2
 13743                           ;main.c: 901: uint8_t reg;
 13744                           ;main.c: 902: uint8_t value;
 13745                           ;main.c: 904: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13746  005E6A  506F               	movf	3951,w,c	;volatile
 13747  005E6C  0BE0               	andlw	224
 13748  005E6E  E008               	bz	l14775
 13749                           
 13750                           ; BSR set to: 2
 13751                           ;main.c: 905: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13752  005E70  0E70               	movlw	high STR_50
 13753  005E72  0100               	movlb	0	; () banked
 13754  005E74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13755  005E76  0EC7               	movlw	low STR_50
 13756  005E78  6F61               	movwf	?_putsUSART& (0+255),b
 13757  005E7A  EC69  F00A         	call	_putsUSART	;wreg free
 13758  005E7E  D5F7               	goto	l14619
 13759  005E80                     l14775:
 13760                           
 13761                           ; BSR set to: 2
 13762                           ;main.c: 909: }
 13763                           ;main.c: 911: strcpy(cmdbuf, cmdbuf + 5);
 13764  005E80  EC0D  F035         	call	PL2	;call to abstracted procedure
 13765  005E84  EC18  F008         	call	_strcpy	;wreg free
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;main.c: 912: char *p = strtok(cmdbuf, " ");
 13769  005E88  0E01               	movlw	high _cmdbuf
 13770  005E8A  EC6E  F035         	call	PL36	;call to abstracted procedure
 13771  005E8E  ECAB  F00D         	call	_strtok	;wreg free
 13772  005E92  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1243
 13773  005E96  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;main.c: 913: if ((0) != p) {
 13777  005E9A  0102               	movlb	2	; () banked
 13778  005E9C  51BE               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13779  005E9E  11BD               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13780  005EA0  E00A               	bz	l14783
 13781                           
 13782                           ; BSR set to: 2
 13783                           ;main.c: 914: nodeid = atoi(p);
 13784  005EA2  C2BD  F066         	movff	doModeVerbose@p_1243,?_atoi
 13785  005EA6  C2BE  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13786  005EAA  EC95  F015         	call	_atoi	;wreg free
 13787  005EAE  5166               	movf	?_atoi& (0+255),w,b
 13788  005EB0  0102               	movlb	2	; () banked
 13789  005EB2  6FB4               	movwf	doModeVerbose@nodeid_1238& (0+255),b
 13790                           
 13791                           ;main.c: 915: }
 13792  005EB4  D008               	goto	l14791
 13793  005EB6                     l14783:
 13794                           
 13795                           ; BSR set to: 2
 13796                           ;main.c: 916: else {
 13797                           ;main.c: 917: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13798  005EB6  0E78               	movlw	high STR_52
 13799  005EB8  0100               	movlb	0	; () banked
 13800  005EBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13801  005EBC  0EAC               	movlw	low STR_52
 13802  005EBE  6F61               	movwf	?_putsUSART& (0+255),b
 13803  005EC0  EC69  F00A         	call	_putsUSART	;wreg free
 13804  005EC4  D5D4               	goto	l14619
 13805  005EC6                     l14791:
 13806                           
 13807                           ; BSR set to: 2
 13808                           ;main.c: 921: }
 13809                           ;main.c: 923: if ( (0) != ( p = strtok((0), " ") ) ) {
 13810  005EC6  EC5C  F035         	call	PL28	;call to abstracted procedure
 13811  005ECA  ECAB  F00D         	call	_strtok	;wreg free
 13812  005ECE  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1243
 13813  005ED2  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13814  005ED6  0102               	movlb	2	; () banked
 13815  005ED8  51BE               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13816  005EDA  11BD               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13817  005EDC  E034               	bz	l14799
 13818                           
 13819                           ; BSR set to: 2
 13820                           ;main.c: 925: char *preg;
 13821                           ;main.c: 926: if (preg = strchr(p, ':')) {
 13822  005EDE  C2BD  F060         	movff	doModeVerbose@p_1243,?_strchr
 13823  005EE2  C2BE  F061         	movff	doModeVerbose@p_1243+1,?_strchr+1
 13824  005EE6  0100               	movlb	0	; () banked
 13825  005EE8  6B63               	clrf	(?_strchr+3)& (0+255),b
 13826  005EEA  0E3A               	movlw	58
 13827  005EEC  6F62               	movwf	(?_strchr+2)& (0+255),b
 13828  005EEE  EC50  F00B         	call	_strchr	;wreg free
 13829  005EF2  C060  F286         	movff	?_strchr,doModeVerbose@preg_1247
 13830  005EF6  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1247+1
 13831  005EFA  0102               	movlb	2	; () banked
 13832  005EFC  5187               	movf	(doModeVerbose@preg_1247+1)& (0+255),w,b
 13833  005EFE  1186               	iorwf	doModeVerbose@preg_1247& (0+255),w,b
 13834  005F00  E018               	bz	l14797
 13835                           
 13836                           ; BSR set to: 2
 13837                           ;main.c: 927: page = atoi(p);
 13838  005F02  C2BD  F066         	movff	doModeVerbose@p_1243,?_atoi
 13839  005F06  C2BE  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13840  005F0A  EC95  F015         	call	_atoi	;wreg free
 13841  005F0E  5166               	movf	?_atoi& (0+255),w,b
 13842  005F10  0102               	movlb	2	; () banked
 13843  005F12  6FA7               	movwf	doModeVerbose@page_1239& (0+255),b
 13844                           
 13845                           ;main.c: 928: reg = atoi(preg + 1);
 13846  005F14  2986               	incf	doModeVerbose@preg_1247& (0+255),w,b
 13847  005F16  0100               	movlb	0	; () banked
 13848  005F18  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13849  005F1A  0E00               	movlw	0
 13850  005F1C  0102               	movlb	2	; () banked
 13851  005F1E  2187               	addwfc	(doModeVerbose@preg_1247+1)& (0+255),w,b
 13852  005F20  0100               	movlb	0	; () banked
 13853  005F22  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13854  005F24  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13855  005F28  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13856  005F2C  EC95  F015         	call	_atoi	;wreg free
 13857  005F30  D006               	goto	L14
 13858  005F32                     l14797:
 13859                           
 13860                           ; BSR set to: 2
 13861                           ;main.c: 930: else {
 13862                           ;main.c: 931: reg = atoi(p);
 13863  005F32  C2BD  F066         	movff	doModeVerbose@p_1243,?_atoi
 13864  005F36  C2BE  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13865  005F3A  EC95  F015         	call	_atoi	;wreg free
 13866  005F3E                     L14:
 13867  005F3E  5166               	movf	?_atoi& (0+255),w,b
 13868  005F40  0102               	movlb	2	; () banked
 13869  005F42  6FA8               	movwf	doModeVerbose@reg_1240& (0+255),b
 13870  005F44  D008               	goto	l14807
 13871  005F46                     l14799:
 13872                           
 13873                           ; BSR set to: 2
 13874                           ;main.c: 935: else {
 13875                           ;main.c: 936: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13876  005F46  0E76               	movlw	high STR_54
 13877  005F48  0100               	movlb	0	; () banked
 13878  005F4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13879  005F4C  0EF1               	movlw	low STR_54
 13880  005F4E  6F61               	movwf	?_putsUSART& (0+255),b
 13881  005F50  EC69  F00A         	call	_putsUSART	;wreg free
 13882  005F54  D58C               	goto	l14619
 13883  005F56                     l14807:
 13884                           
 13885                           ; BSR set to: 2
 13886                           ;main.c: 940: }
 13887                           ;main.c: 943: if ((0) != (p = strtok((0), " "))) {
 13888  005F56  EC5C  F035         	call	PL28	;call to abstracted procedure
 13889  005F5A  ECAB  F00D         	call	_strtok	;wreg free
 13890  005F5E  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1243
 13891  005F62  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13892  005F66  0102               	movlb	2	; () banked
 13893  005F68  51BE               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13894  005F6A  11BD               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13895  005F6C  E00A               	bz	l14811
 13896                           
 13897                           ; BSR set to: 2
 13898                           ;main.c: 944: value = atoi(p);
 13899  005F6E  C2BD  F066         	movff	doModeVerbose@p_1243,?_atoi
 13900  005F72  C2BE  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13901  005F76  EC95  F015         	call	_atoi	;wreg free
 13902  005F7A  5166               	movf	?_atoi& (0+255),w,b
 13903  005F7C  0102               	movlb	2	; () banked
 13904  005F7E  6FB1               	movwf	doModeVerbose@value_1241& (0+255),b
 13905                           
 13906                           ;main.c: 945: }
 13907  005F80  D008               	goto	l14819
 13908  005F82                     l14811:
 13909                           
 13910                           ; BSR set to: 2
 13911                           ;main.c: 946: else {
 13912                           ;main.c: 947: putsUSART((char *) "-ERROR - Need a value\r\n");
 13913  005F82  0E78               	movlw	high STR_88
 13914  005F84  0100               	movlb	0	; () banked
 13915  005F86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13916  005F88  0EDC               	movlw	low STR_88
 13917  005F8A  6F61               	movwf	?_putsUSART& (0+255),b
 13918  005F8C  EC69  F00A         	call	_putsUSART	;wreg free
 13919  005F90  D56E               	goto	l14619
 13920  005F92                     l14819:
 13921                           
 13922                           ; BSR set to: 2
 13923                           ;main.c: 951: }
 13924                           ;main.c: 953: if (writeRegisterExtended(nodeid,
 13925                           ;main.c: 954: page,
 13926                           ;main.c: 955: reg,
 13927                           ;main.c: 956: rwtimeout,
 13928                           ;main.c: 957: &value)) {
 13929  005F92  0100               	movlb	0	; () banked
 13930  005F94  C2A7  F0B8         	movff	doModeVerbose@page_1239,?_writeRegisterExtended
 13931  005F98  6BB9               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13932  005F9A  C2A8  F0BA         	movff	doModeVerbose@reg_1240,?_writeRegisterExtended+2
 13933  005F9E  C035  F0BB         	movff	_rwtimeout,?_writeRegisterExtended+3
 13934  005FA2  6BBC               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13935  005FA4  0E02               	movlw	high doModeVerbose@value_1241
 13936  005FA6  6FBE               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13937  005FA8  0EB1               	movlw	low doModeVerbose@value_1241
 13938  005FAA  6FBD               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13939  005FAC  0102               	movlb	2	; () banked
 13940  005FAE  51B4               	movf	doModeVerbose@nodeid_1238& (0+255),w,b
 13941  005FB0  EC17  F015         	call	_writeRegisterExtended
 13942  005FB4  0900               	iorlw	0
 13943  005FB6  E031               	bz	l14833
 13944                           
 13945                           ;main.c: 958: putsUSART((char *) "+OK - Value written successfully for ");
 13946  005FB8  0E75               	movlw	high STR_89
 13947  005FBA  0100               	movlb	0	; () banked
 13948  005FBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13949  005FBE  0E6C               	movlw	low STR_89
 13950  005FC0  6F61               	movwf	?_putsUSART& (0+255),b
 13951  005FC2  EC69  F00A         	call	_putsUSART	;wreg free
 13952                           
 13953                           ;main.c: 959: putsUSART((char *) "nodeid=");
 13954  005FC6  0E7B               	movlw	high (STR_56+6)
 13955  005FC8  0100               	movlb	0	; () banked
 13956  005FCA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13957  005FCC  0E3C               	movlw	low (STR_56+6)
 13958  005FCE  6F61               	movwf	?_putsUSART& (0+255),b
 13959  005FD0  EC69  F00A         	call	_putsUSART	;wreg free
 13960                           
 13961                           ;main.c: 960: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13962  005FD4  662C               	tstfsz	_bHex,c
 13963  005FD6  D005               	goto	l14827
 13964  005FD8  0E7C               	movlw	high STR_92
 13965  005FDA  0102               	movlb	2	; () banked
 13966  005FDC  6FA1               	movwf	(_doModeVerbose$1256+1)& (0+255),b
 13967  005FDE  0ECD               	movlw	low STR_92
 13968  005FE0  D004               	goto	L15
 13969  005FE2                     l14827:
 13970  005FE2  0E7B               	movlw	high STR_91
 13971  005FE4  0102               	movlb	2	; () banked
 13972  005FE6  6FA1               	movwf	(_doModeVerbose$1256+1)& (0+255),b
 13973  005FE8  0EC2               	movlw	low STR_91
 13974  005FEA                     L15:
 13975  005FEA  6FA0               	movwf	_doModeVerbose$1256& (0+255),b
 13976                           
 13977                           ; BSR set to: 2
 13978  005FEC  0E01               	movlw	high _wrkbuf
 13979  005FEE  0100               	movlb	0	; () banked
 13980  005FF0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13981  005FF2  0E7D               	movlw	low _wrkbuf
 13982  005FF4  6F76               	movwf	?_sprintf& (0+255),b
 13983  005FF6  C2A0  F078         	movff	_doModeVerbose$1256,?_sprintf+2
 13984  005FFA  C2A1  F079         	movff	_doModeVerbose$1256+1,?_sprintf+3
 13985  005FFE  C2B4  F07A         	movff	doModeVerbose@nodeid_1238,?_sprintf+4
 13986  006002  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13987  006004  EC3F  F026         	call	_sprintf	;wreg free
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;main.c: 961: putsUSART(wrkbuf);
 13991  006008  0E01               	movlw	high _wrkbuf
 13992  00600A  0100               	movlb	0	; () banked
 13993  00600C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13994  00600E  0E7D               	movlw	low _wrkbuf
 13995  006010  6F61               	movwf	?_putsUSART& (0+255),b
 13996  006012  EC69  F00A         	call	_putsUSART	;wreg free
 13997                           
 13998                           ;main.c: 962: }
 13999  006016  EF02  F035         	goto	l15221
 14000  00601A                     l14833:
 14001                           
 14002                           ;main.c: 963: else {
 14003                           ;main.c: 964: putsUSART((char *) "-ERROR - Failed to write value for ");
 14004  00601A  0E76               	movlw	high STR_93
 14005  00601C  0100               	movlb	0	; () banked
 14006  00601E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14007  006020  0E25               	movlw	low STR_93
 14008  006022  6F61               	movwf	?_putsUSART& (0+255),b
 14009  006024  EC69  F00A         	call	_putsUSART	;wreg free
 14010                           
 14011                           ;main.c: 965: putsUSART((char *) "nodeid=");
 14012  006028  0E7B               	movlw	high (STR_56+6)
 14013  00602A  0100               	movlb	0	; () banked
 14014  00602C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14015  00602E  0E3C               	movlw	low (STR_56+6)
 14016  006030  6F61               	movwf	?_putsUSART& (0+255),b
 14017  006032  EC69  F00A         	call	_putsUSART	;wreg free
 14018                           
 14019                           ;main.c: 966: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14020  006036  662C               	tstfsz	_bHex,c
 14021  006038  D005               	goto	l14839
 14022  00603A  0E7C               	movlw	high STR_92
 14023  00603C  0102               	movlb	2	; () banked
 14024  00603E  6FA3               	movwf	(_doModeVerbose$1262+1)& (0+255),b
 14025  006040  0ECD               	movlw	low STR_92
 14026  006042  D004               	goto	L16
 14027  006044                     l14839:
 14028  006044  0E7B               	movlw	high STR_91
 14029  006046  0102               	movlb	2	; () banked
 14030  006048  6FA3               	movwf	(_doModeVerbose$1262+1)& (0+255),b
 14031  00604A  0EC2               	movlw	low STR_91
 14032  00604C                     L16:
 14033  00604C  6FA2               	movwf	_doModeVerbose$1262& (0+255),b
 14034                           
 14035                           ; BSR set to: 2
 14036  00604E  0E01               	movlw	high _wrkbuf
 14037  006050  0100               	movlb	0	; () banked
 14038  006052  6F77               	movwf	(?_sprintf+1)& (0+255),b
 14039  006054  0E7D               	movlw	low _wrkbuf
 14040  006056  6F76               	movwf	?_sprintf& (0+255),b
 14041  006058  C2A2  F078         	movff	_doModeVerbose$1262,?_sprintf+2
 14042  00605C  C2A3  F079         	movff	_doModeVerbose$1262+1,?_sprintf+3
 14043  006060  C2B4  F07A         	movff	doModeVerbose@nodeid_1238,?_sprintf+4
 14044  006064  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14045  006066  EC3F  F026         	call	_sprintf	;wreg free
 14046  00606A  EF02  F035         	goto	l15221
 14047  00606E                     l14843:
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;main.c: 972: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14051  00606E  0E01               	movlw	high _cmdbuf
 14052  006070  0100               	movlb	0	; () banked
 14053  006072  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14054  006074  0E2D               	movlw	low _cmdbuf
 14055  006076  6F6D               	movwf	?_stristr& (0+255),b
 14056  006078  0E7C               	movlw	high STR_97
 14057  00607A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14058  00607C  0EAC               	movlw	low STR_97
 14059  00607E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14060  006080  EC62  F00C         	call	_stristr	;wreg free
 14061  006084  0E2D               	movlw	low _cmdbuf
 14062  006086  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14063  006088  0E01               	movlw	high _cmdbuf
 14064  00608A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14065  00608C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14066  00608E  E102               	bnz	u19455
 14067  006090  516D               	movf	?_stristr& (0+255),w,b
 14068  006092  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14069  006094                     u19455:
 14070  006094  E176               	bnz	l14887
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;main.c: 974: uint8_t nodeid;
 14074                           ;main.c: 975: uint8_t value;
 14075                           ;main.c: 977: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14076  006096  506F               	movf	3951,w,c	;volatile
 14077  006098  0BE0               	andlw	224
 14078  00609A  E007               	bz	l14855
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;main.c: 978: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 14082  00609C  0E70               	movlw	high STR_50
 14083  00609E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14084  0060A0  0EC7               	movlw	low STR_50
 14085  0060A2  6F61               	movwf	?_putsUSART& (0+255),b
 14086  0060A4  EC69  F00A         	call	_putsUSART	;wreg free
 14087  0060A8  D4E2               	goto	l14619
 14088  0060AA                     l14855:
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;main.c: 982: }
 14092                           ;main.c: 984: strcpy(cmdbuf, cmdbuf + 5);
 14093  0060AA  EC0D  F035         	call	PL2	;call to abstracted procedure
 14094  0060AE  EC18  F008         	call	_strcpy	;wreg free
 14095                           
 14096                           ; BSR set to: 0
 14097                           ;main.c: 985: nodeid = atoi(cmdbuf);
 14098  0060B2  0E01               	movlw	high _cmdbuf
 14099  0060B4  0100               	movlb	0	; () banked
 14100  0060B6  6F67               	movwf	(?_atoi+1)& (0+255),b
 14101  0060B8  0E2D               	movlw	low _cmdbuf
 14102  0060BA  6F66               	movwf	?_atoi& (0+255),b
 14103  0060BC  EC95  F015         	call	_atoi	;wreg free
 14104  0060C0  5166               	movf	?_atoi& (0+255),w,b
 14105  0060C2  0102               	movlb	2	; () banked
 14106  0060C4  6FB8               	movwf	doModeVerbose@nodeid_1264& (0+255),b
 14107                           
 14108                           ; BSR set to: 2
 14109                           ;main.c: 987: putsUSART((char *) "Info for node id = ");
 14110  0060C6  0E7A               	movlw	high STR_99
 14111  0060C8  0100               	movlb	0	; () banked
 14112  0060CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14113  0060CC  0E53               	movlw	low STR_99
 14114  0060CE  6F61               	movwf	?_putsUSART& (0+255),b
 14115  0060D0  EC69  F00A         	call	_putsUSART	;wreg free
 14116                           
 14117                           ;main.c: 988: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14118  0060D4  662C               	tstfsz	_bHex,c
 14119  0060D6  D005               	goto	l14865
 14120  0060D8  0E7C               	movlw	high STR_61
 14121  0060DA  0102               	movlb	2	; () banked
 14122  0060DC  6FA5               	movwf	(_doModeVerbose$1271+1)& (0+255),b
 14123  0060DE  0EED               	movlw	low STR_61
 14124  0060E0  D004               	goto	L17
 14125  0060E2                     l14865:
 14126  0060E2  0E7C               	movlw	high STR_60
 14127  0060E4  0102               	movlb	2	; () banked
 14128  0060E6  6FA5               	movwf	(_doModeVerbose$1271+1)& (0+255),b
 14129  0060E8  0E49               	movlw	low STR_60
 14130  0060EA                     L17:
 14131  0060EA  6FA4               	movwf	_doModeVerbose$1271& (0+255),b
 14132                           
 14133                           ; BSR set to: 2
 14134  0060EC  0E01               	movlw	high _wrkbuf
 14135  0060EE  0100               	movlb	0	; () banked
 14136  0060F0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 14137  0060F2  0E7D               	movlw	low _wrkbuf
 14138  0060F4  6F76               	movwf	?_sprintf& (0+255),b
 14139  0060F6  C2A4  F078         	movff	_doModeVerbose$1271,?_sprintf+2
 14140  0060FA  C2A5  F079         	movff	_doModeVerbose$1271+1,?_sprintf+3
 14141  0060FE  C2B8  F07A         	movff	doModeVerbose@nodeid_1264,?_sprintf+4
 14142  006102  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14143  006104  EC3F  F026         	call	_sprintf	;wreg free
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;main.c: 989: putsUSART(wrkbuf);
 14147  006108  0E01               	movlw	high _wrkbuf
 14148  00610A  0100               	movlb	0	; () banked
 14149  00610C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14150  00610E  0E7D               	movlw	low _wrkbuf
 14151  006110  6F61               	movwf	?_putsUSART& (0+255),b
 14152  006112  EC69  F00A         	call	_putsUSART	;wreg free
 14153                           
 14154                           ;main.c: 990: putsUSART((char *) "\r\n");
 14155  006116  0E70               	movlw	high (STR_228+50)
 14156  006118  0100               	movlb	0	; () banked
 14157  00611A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14158  00611C  0EC4               	movlw	low (STR_228+50)
 14159  00611E  6F61               	movwf	?_putsUSART& (0+255),b
 14160  006120  EC69  F00A         	call	_putsUSART	;wreg free
 14161                           
 14162                           ;main.c: 992: if (!readRegisterExtended(nodeid,
 14163                           ;main.c: 993: 0,
 14164                           ;main.c: 994: 0xd0,
 14165                           ;main.c: 995: rwtimeout,
 14166                           ;main.c: 996: &value)) {
 14167  006124  0100               	movlb	0	; () banked
 14168  006126  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14169  006128  6BB8               	clrf	?_readRegisterExtended& (0+255),b
 14170  00612A  0ED0               	movlw	208
 14171  00612C  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14172  00612E  C035  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 14173  006132  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14174  006134  0E02               	movlw	high doModeVerbose@value_1265
 14175  006136  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14176  006138  0EA9               	movlw	low doModeVerbose@value_1265
 14177  00613A  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14178  00613C  0102               	movlb	2	; () banked
 14179  00613E  51B8               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14180  006140  EC21  F014         	call	_readRegisterExtended
 14181  006144  0900               	iorlw	0
 14182  006146  E108               	bnz	l14883
 14183                           
 14184                           ;main.c: 997: putsUSART((char *) "-ERROR - Node not found.\r\n");
 14185  006148  0E77               	movlw	high STR_103
 14186  00614A  0100               	movlb	0	; () banked
 14187  00614C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14188  00614E  0EC6               	movlw	low STR_103
 14189  006150  6F61               	movwf	?_putsUSART& (0+255),b
 14190  006152  EC69  F00A         	call	_putsUSART	;wreg free
 14191  006156  D48B               	goto	l14619
 14192  006158                     l14883:
 14193                           
 14194                           ;main.c: 1001: }
 14195                           ;main.c: 1004: printNodeFirmwareVersion(nodeid);
 14196  006158  0102               	movlb	2	; () banked
 14197  00615A  51B8               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14198  00615C  EC9C  F011         	call	_printNodeFirmwareVersion
 14199                           
 14200                           ;main.c: 1005: printGUID(nodeid);
 14201  006160  0102               	movlb	2	; () banked
 14202  006162  51B8               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14203  006164  EC9A  F014         	call	_printGUID
 14204                           
 14205                           ;main.c: 1006: printMDF(nodeid);
 14206  006168  0102               	movlb	2	; () banked
 14207  00616A  51B8               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14208  00616C  ECF4  F00D         	call	_printMDF
 14209                           
 14210                           ;main.c: 1007: putsUSART((char *) "+OK\r\n");
 14211  006170  0E7C               	movlw	high STR_9
 14212  006172  0100               	movlb	0	; () banked
 14213  006174  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14214  006176  0E64               	movlw	low STR_9
 14215  006178  6F61               	movwf	?_putsUSART& (0+255),b
 14216  00617A  EC69  F00A         	call	_putsUSART	;wreg free
 14217                           
 14218                           ;main.c: 1008: }
 14219  00617E  EF02  F035         	goto	l15221
 14220  006182                     l14887:
 14221                           
 14222                           ; BSR set to: 0
 14223                           ;main.c: 1012: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 14224  006182  0E01               	movlw	high _cmdbuf
 14225  006184  0100               	movlb	0	; () banked
 14226  006186  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14227  006188  0E2D               	movlw	low _cmdbuf
 14228  00618A  6F6D               	movwf	?_stristr& (0+255),b
 14229  00618C  0E7C               	movlw	high STR_105
 14230  00618E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14231  006190  0E3B               	movlw	low STR_105
 14232  006192  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14233  006194  EC62  F00C         	call	_stristr	;wreg free
 14234  006198  0E2D               	movlw	low _cmdbuf
 14235  00619A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14236  00619C  0E01               	movlw	high _cmdbuf
 14237  00619E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14238  0061A0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14239  0061A2  E102               	bnz	u19495
 14240  0061A4  516D               	movf	?_stristr& (0+255),w,b
 14241  0061A6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14242  0061A8                     u19495:
 14243  0061A8  E001 D0DD          	bnz	l14981
 14244                           
 14245                           ; BSR set to: 0
 14246                           ;main.c: 1014: uint8_t filterno;
 14247                           ;main.c: 1015: uint8_t filter_priority;
 14248                           ;main.c: 1016: uint16_t filter_class;
 14249                           ;main.c: 1017: uint8_t filter_type;
 14250                           ;main.c: 1018: uint8_t filter_nodeid;
 14251                           ;main.c: 1020: strcpy(cmdbuf, cmdbuf + 8);
 14252  0061AC  0E01               	movlw	high _cmdbuf
 14253  0061AE  EC1B  F035         	call	PL4	;call to abstracted procedure
 14254  0061B2  EC18  F008         	call	_strcpy	;wreg free
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;main.c: 1021: char *p = strtok(cmdbuf, ",");
 14258  0061B6  EC64  F035         	call	PL30	;call to abstracted procedure
 14259  0061BA  ECAB  F00D         	call	_strtok	;wreg free
 14260  0061BE  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1281
 14261  0061C2  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1281+1
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;main.c: 1022: if ((0) != p) {
 14265  0061C6  0102               	movlb	2	; () banked
 14266  0061C8  51C3               	movf	(doModeVerbose@p_1281+1)& (0+255),w,b
 14267  0061CA  11C2               	iorwf	doModeVerbose@p_1281& (0+255),w,b
 14268  0061CC  E014               	bz	l14907
 14269                           
 14270                           ; BSR set to: 2
 14271                           ;main.c: 1023: filterno = atoi(p);
 14272  0061CE  C2C2  F066         	movff	doModeVerbose@p_1281,?_atoi
 14273  0061D2  C2C3  F067         	movff	doModeVerbose@p_1281+1,?_atoi+1
 14274  0061D6  EC95  F015         	call	_atoi	;wreg free
 14275  0061DA  5166               	movf	?_atoi& (0+255),w,b
 14276  0061DC  0102               	movlb	2	; () banked
 14277  0061DE  6FAE               	movwf	doModeVerbose@filterno& (0+255),b
 14278                           
 14279                           ; BSR set to: 2
 14280                           ;main.c: 1024: if (filterno > 15) {
 14281  0061E0  0E0F               	movlw	15
 14282  0061E2  65AE               	cpfsgt	doModeVerbose@filterno& (0+255),b
 14283  0061E4  D010               	goto	l14915
 14284                           
 14285                           ; BSR set to: 2
 14286                           ;main.c: 1025: putsUSART((char *) "-ERROR - Filter number can only be set to a value bet
      +                          ween 0-15.\r\n");
 14287  0061E6  0E6E               	movlw	high STR_107
 14288  0061E8  0100               	movlb	0	; () banked
 14289  0061EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14290  0061EC  0E1C               	movlw	low STR_107
 14291  0061EE  6F61               	movwf	?_putsUSART& (0+255),b
 14292  0061F0  EC69  F00A         	call	_putsUSART	;wreg free
 14293  0061F4  D43C               	goto	l14619
 14294  0061F6                     l14907:
 14295                           
 14296                           ; BSR set to: 2
 14297                           ;main.c: 1031: else {
 14298                           ;main.c: 1032: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 14299  0061F6  0E74               	movlw	high STR_108
 14300  0061F8  0100               	movlb	0	; () banked
 14301  0061FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14302  0061FC  0E5C               	movlw	low STR_108
 14303  0061FE  6F61               	movwf	?_putsUSART& (0+255),b
 14304  006200  EC69  F00A         	call	_putsUSART	;wreg free
 14305  006204  D434               	goto	l14619
 14306  006206                     l14915:
 14307                           
 14308                           ; BSR set to: 2
 14309                           ;main.c: 1036: }
 14310                           ;main.c: 1039: p = strtok((0), ",");
 14311  006206  EC28  F035         	call	PL6	;call to abstracted procedure
 14312  00620A  ECAB  F00D         	call	_strtok	;wreg free
 14313  00620E  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1281
 14314  006212  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1281+1
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;main.c: 1040: if ((0) != p) {
 14318  006216  0102               	movlb	2	; () banked
 14319  006218  51C3               	movf	(doModeVerbose@p_1281+1)& (0+255),w,b
 14320  00621A  11C2               	iorwf	doModeVerbose@p_1281& (0+255),w,b
 14321  00621C  E00A               	bz	l14921
 14322                           
 14323                           ; BSR set to: 2
 14324                           ;main.c: 1041: filter_priority = atoi(p);
 14325  00621E  C2C2  F066         	movff	doModeVerbose@p_1281,?_atoi
 14326  006222  C2C3  F067         	movff	doModeVerbose@p_1281+1,?_atoi+1
 14327  006226  EC95  F015         	call	_atoi	;wreg free
 14328  00622A  5166               	movf	?_atoi& (0+255),w,b
 14329  00622C  0102               	movlb	2	; () banked
 14330  00622E  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14331                           
 14332                           ;main.c: 1042: }
 14333  006230  D008               	goto	l14929
 14334  006232                     l14921:
 14335                           
 14336                           ; BSR set to: 2
 14337                           ;main.c: 1043: else {
 14338                           ;main.c: 1044: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14339  006232  0E73               	movlw	high STR_110
 14340  006234  0100               	movlb	0	; () banked
 14341  006236  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14342  006238  0E68               	movlw	low STR_110
 14343  00623A  6F61               	movwf	?_putsUSART& (0+255),b
 14344  00623C  EC69  F00A         	call	_putsUSART	;wreg free
 14345  006240  D416               	goto	l14619
 14346  006242                     l14929:
 14347                           
 14348                           ; BSR set to: 2
 14349                           ;main.c: 1048: }
 14350                           ;main.c: 1051: p = strtok((0), ",");
 14351  006242  EC28  F035         	call	PL6	;call to abstracted procedure
 14352  006246  ECAB  F00D         	call	_strtok	;wreg free
 14353  00624A  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1281
 14354  00624E  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1281+1
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;main.c: 1052: if ((0) != p) {
 14358  006252  0102               	movlb	2	; () banked
 14359  006254  51C3               	movf	(doModeVerbose@p_1281+1)& (0+255),w,b
 14360  006256  11C2               	iorwf	doModeVerbose@p_1281& (0+255),w,b
 14361  006258  E00B               	bz	l14935
 14362                           
 14363                           ; BSR set to: 2
 14364                           ;main.c: 1053: filter_class = atoi(p);
 14365  00625A  C2C2  F066         	movff	doModeVerbose@p_1281,?_atoi
 14366  00625E  C2C3  F067         	movff	doModeVerbose@p_1281+1,?_atoi+1
 14367  006262  EC95  F015         	call	_atoi	;wreg free
 14368  006266  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14369  00626A  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14370                           
 14371                           ;main.c: 1054: }
 14372  00626E  D009               	goto	l14943
 14373  006270                     l14935:
 14374                           
 14375                           ; BSR set to: 2
 14376                           ;main.c: 1055: else {
 14377                           ;main.c: 1056: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14378  006270  0E74               	movlw	high STR_112
 14379  006272  0100               	movlb	0	; () banked
 14380  006274  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14381  006276  0EF8               	movlw	low STR_112
 14382  006278  6F61               	movwf	?_putsUSART& (0+255),b
 14383  00627A  EC69  F00A         	call	_putsUSART	;wreg free
 14384  00627E  EF37  F02D         	goto	l14619
 14385  006282                     l14943:
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;main.c: 1060: }
 14389                           ;main.c: 1063: p = strtok((0), ",");
 14390  006282  DBEE               	call	PL8	;call to abstracted procedure
 14391  006284  ECAB  F00D         	call	_strtok	;wreg free
 14392  006288  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1281
 14393  00628C  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1281+1
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;main.c: 1064: if ((0) != p) {
 14397  006290  0102               	movlb	2	; () banked
 14398  006292  51C3               	movf	(doModeVerbose@p_1281+1)& (0+255),w,b
 14399  006294  11C2               	iorwf	doModeVerbose@p_1281& (0+255),w,b
 14400  006296  E00A               	bz	l14949
 14401                           
 14402                           ; BSR set to: 2
 14403                           ;main.c: 1065: filter_type = atoi(p);
 14404  006298  C2C2  F066         	movff	doModeVerbose@p_1281,?_atoi
 14405  00629C  C2C3  F067         	movff	doModeVerbose@p_1281+1,?_atoi+1
 14406  0062A0  EC95  F015         	call	_atoi	;wreg free
 14407  0062A4  5166               	movf	?_atoi& (0+255),w,b
 14408  0062A6  0102               	movlb	2	; () banked
 14409  0062A8  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14410                           
 14411                           ;main.c: 1066: }
 14412  0062AA  D009               	goto	l14957
 14413  0062AC                     l14949:
 14414                           
 14415                           ; BSR set to: 2
 14416                           ;main.c: 1067: else {
 14417                           ;main.c: 1068: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14418  0062AC  0E75               	movlw	high STR_114
 14419  0062AE  0100               	movlb	0	; () banked
 14420  0062B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14421  0062B2  0E46               	movlw	low STR_114
 14422  0062B4  6F61               	movwf	?_putsUSART& (0+255),b
 14423  0062B6  EC69  F00A         	call	_putsUSART	;wreg free
 14424  0062BA  EF37  F02D         	goto	l14619
 14425  0062BE                     l14957:
 14426                           
 14427                           ; BSR set to: 2
 14428                           ;main.c: 1072: }
 14429                           ;main.c: 1075: p = strtok((0), ",");
 14430  0062BE  DBC8               	call	PL6	;call to abstracted procedure
 14431  0062C0  ECAB  F00D         	call	_strtok	;wreg free
 14432  0062C4  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1281
 14433  0062C8  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1281+1
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;main.c: 1076: if ((0) != p) {
 14437  0062CC  0102               	movlb	2	; () banked
 14438  0062CE  51C3               	movf	(doModeVerbose@p_1281+1)& (0+255),w,b
 14439  0062D0  11C2               	iorwf	doModeVerbose@p_1281& (0+255),w,b
 14440  0062D2  E00A               	bz	l14963
 14441                           
 14442                           ; BSR set to: 2
 14443                           ;main.c: 1077: filter_nodeid = atoi(p);
 14444  0062D4  C2C2  F066         	movff	doModeVerbose@p_1281,?_atoi
 14445  0062D8  C2C3  F067         	movff	doModeVerbose@p_1281+1,?_atoi+1
 14446  0062DC  EC95  F015         	call	_atoi	;wreg free
 14447  0062E0  5166               	movf	?_atoi& (0+255),w,b
 14448  0062E2  0102               	movlb	2	; () banked
 14449  0062E4  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14450                           
 14451                           ;main.c: 1078: }
 14452  0062E6  D009               	goto	l14971
 14453  0062E8                     l14963:
 14454                           
 14455                           ; BSR set to: 2
 14456                           ;main.c: 1079: else {
 14457                           ;main.c: 1080: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14458  0062E8  0E73               	movlw	high STR_116
 14459  0062EA  0100               	movlb	0	; () banked
 14460  0062EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14461  0062EE  0EBB               	movlw	low STR_116
 14462  0062F0  6F61               	movwf	?_putsUSART& (0+255),b
 14463  0062F2  EC69  F00A         	call	_putsUSART	;wreg free
 14464  0062F6  EF37  F02D         	goto	l14619
 14465  0062FA                     l14971:
 14466                           
 14467                           ; BSR set to: 2
 14468                           ;main.c: 1084: }
 14469                           ;main.c: 1087: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14470  0062FA  0E80               	movlw	128
 14471  0062FC  ECC6  F007         	call	_ECANSetOperationMode
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;main.c: 1089: uint32_t id = ((uint32_t) filter_priority << 26) |
 14475                           ;main.c: 1090: ((uint32_t) filter_class << 16) |
 14476                           ;main.c: 1091: ((uint32_t) filter_type << 8) |
 14477                           ;main.c: 1092: filter_nodeid;
 14478  006300  C28D  F0CC         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14479  006304  DBF4               	call	PL40	;call to abstracted procedure
 14480  006306  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14481  006308  0100               	movlb	0	; () banked
 14482  00630A  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14483  00630C  0102               	movlb	2	; () banked
 14484  00630E  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14485  006310  EC9D  F035         	call	PL60	;call to abstracted procedure
 14486  006314  C28C  F0D4         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14487  006318  DBAA               	call	PL10	;call to abstracted procedure
 14488  00631A  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14489  00631C  0100               	movlb	0	; () banked
 14490  00631E  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14491  006320  0102               	movlb	2	; () banked
 14492  006322  6F80               	movwf	doModeVerbose@id& (0+255),b
 14493  006324  0100               	movlb	0	; () banked
 14494  006326  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14495  006328  0102               	movlb	2	; () banked
 14496  00632A  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14497  00632C  0100               	movlb	0	; () banked
 14498  00632E  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14499  006330  0102               	movlb	2	; () banked
 14500  006332  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14501  006334  0100               	movlb	0	; () banked
 14502  006336  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14503  006338  0102               	movlb	2	; () banked
 14504  00633A  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14505                           
 14506                           ; BSR set to: 2
 14507                           ;main.c: 1093: setFilter(filterno, id);
 14508  00633C  C280  F062         	movff	doModeVerbose@id,?_setFilter
 14509  006340  C281  F063         	movff	doModeVerbose@id+1,?_setFilter+1
 14510  006344  C282  F064         	movff	doModeVerbose@id+2,?_setFilter+2
 14511  006348  C283  F065         	movff	doModeVerbose@id+3,?_setFilter+3
 14512  00634C  51AE               	movf	doModeVerbose@filterno& (0+255),w,b
 14513  00634E  ECBF  F01E         	call	_setFilter
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;main.c: 1096: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14517  006352  0E00               	movlw	0
 14518  006354  ECC6  F007         	call	_ECANSetOperationMode
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;main.c: 1098: putsUSART((char *) "+OK\r\n");
 14522  006358  0E7C               	movlw	high STR_9
 14523  00635A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14524  00635C  0E64               	movlw	low STR_9
 14525  00635E  6F61               	movwf	?_putsUSART& (0+255),b
 14526  006360  EC69  F00A         	call	_putsUSART	;wreg free
 14527                           
 14528                           ;main.c: 1099: }
 14529  006364  D34F               	goto	l15221
 14530  006366                     l14981:
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;main.c: 1103: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14534  006366  0E01               	movlw	high _cmdbuf
 14535  006368  0100               	movlb	0	; () banked
 14536  00636A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14537  00636C  0E2D               	movlw	low _cmdbuf
 14538  00636E  6F6D               	movwf	?_stristr& (0+255),b
 14539  006370  0E7C               	movlw	high STR_118
 14540  006372  6F70               	movwf	(?_stristr+3)& (0+255),b
 14541  006374  0EA2               	movlw	low STR_118
 14542  006376  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14543  006378  EC62  F00C         	call	_stristr	;wreg free
 14544  00637C  0E2D               	movlw	low _cmdbuf
 14545  00637E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14546  006380  0E01               	movlw	high _cmdbuf
 14547  006382  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14548  006384  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14549  006386  E102               	bnz	u19575
 14550  006388  516D               	movf	?_stristr& (0+255),w,b
 14551  00638A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14552  00638C                     u19575:
 14553  00638C  E001 D0E2          	bnz	l15079
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;main.c: 1105: uint8_t maskno;
 14557                           ;main.c: 1106: uint8_t mask_priority;
 14558                           ;main.c: 1107: uint16_t mask_class;
 14559                           ;main.c: 1108: uint8_t mask_type;
 14560                           ;main.c: 1109: uint8_t mask_nodeid;
 14561                           ;main.c: 1111: strcpy(cmdbuf, cmdbuf + 8);
 14562  006390  0E01               	movlw	high _cmdbuf
 14563  006392  DB51               	call	PL4	;call to abstracted procedure
 14564  006394  EC18  F008         	call	_strcpy	;wreg free
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;main.c: 1112: char *p = strtok(cmdbuf, ",");
 14568  006398  DB97               	call	PL30	;call to abstracted procedure
 14569  00639A  ECAB  F00D         	call	_strtok	;wreg free
 14570  00639E  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1301
 14571  0063A2  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1301+1
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;main.c: 1113: if ((0) != p) {
 14575  0063A6  0102               	movlb	2	; () banked
 14576  0063A8  51C5               	movf	(doModeVerbose@p_1301+1)& (0+255),w,b
 14577  0063AA  11C4               	iorwf	doModeVerbose@p_1301& (0+255),w,b
 14578  0063AC  E015               	bz	l15001
 14579                           
 14580                           ; BSR set to: 2
 14581                           ;main.c: 1114: maskno = atoi(p);
 14582  0063AE  C2C4  F066         	movff	doModeVerbose@p_1301,?_atoi
 14583  0063B2  C2C5  F067         	movff	doModeVerbose@p_1301+1,?_atoi+1
 14584  0063B6  EC95  F015         	call	_atoi	;wreg free
 14585  0063BA  5166               	movf	?_atoi& (0+255),w,b
 14586  0063BC  0102               	movlb	2	; () banked
 14587  0063BE  6FAF               	movwf	doModeVerbose@maskno& (0+255),b
 14588                           
 14589                           ; BSR set to: 2
 14590                           ;main.c: 1115: if (maskno > 1) {
 14591  0063C0  0E01               	movlw	1
 14592  0063C2  65AF               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14593  0063C4  D012               	goto	l15009
 14594                           
 14595                           ; BSR set to: 2
 14596                           ;main.c: 1116: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14597  0063C6  0E71               	movlw	high STR_120
 14598  0063C8  0100               	movlb	0	; () banked
 14599  0063CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14600  0063CC  0E62               	movlw	low STR_120
 14601  0063CE  6F61               	movwf	?_putsUSART& (0+255),b
 14602  0063D0  EC69  F00A         	call	_putsUSART	;wreg free
 14603  0063D4  EF37  F02D         	goto	l14619
 14604  0063D8                     l15001:
 14605                           
 14606                           ; BSR set to: 2
 14607                           ;main.c: 1122: else {
 14608                           ;main.c: 1123: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14609  0063D8  0E75               	movlw	high STR_121
 14610  0063DA  0100               	movlb	0	; () banked
 14611  0063DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14612  0063DE  0E92               	movlw	low STR_121
 14613  0063E0  6F61               	movwf	?_putsUSART& (0+255),b
 14614  0063E2  EC69  F00A         	call	_putsUSART	;wreg free
 14615  0063E6  EF37  F02D         	goto	l14619
 14616  0063EA                     l15009:
 14617                           
 14618                           ; BSR set to: 2
 14619                           ;main.c: 1127: }
 14620                           ;main.c: 1130: p = strtok((0), ",");
 14621  0063EA  DB32               	call	PL6	;call to abstracted procedure
 14622  0063EC  ECAB  F00D         	call	_strtok	;wreg free
 14623  0063F0  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1301
 14624  0063F4  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1301+1
 14625                           
 14626                           ; BSR set to: 0
 14627                           ;main.c: 1131: if ((0) != p) {
 14628  0063F8  0102               	movlb	2	; () banked
 14629  0063FA  51C5               	movf	(doModeVerbose@p_1301+1)& (0+255),w,b
 14630  0063FC  11C4               	iorwf	doModeVerbose@p_1301& (0+255),w,b
 14631  0063FE  E00A               	bz	l15015
 14632                           
 14633                           ; BSR set to: 2
 14634                           ;main.c: 1132: mask_priority = atoi(p);
 14635  006400  C2C4  F066         	movff	doModeVerbose@p_1301,?_atoi
 14636  006404  C2C5  F067         	movff	doModeVerbose@p_1301+1,?_atoi+1
 14637  006408  EC95  F015         	call	_atoi	;wreg free
 14638  00640C  5166               	movf	?_atoi& (0+255),w,b
 14639  00640E  0102               	movlb	2	; () banked
 14640  006410  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 14641                           
 14642                           ;main.c: 1133: }
 14643  006412  D009               	goto	l15023
 14644  006414                     l15015:
 14645                           
 14646                           ; BSR set to: 2
 14647                           ;main.c: 1134: else {
 14648                           ;main.c: 1135: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14649  006414  0E74               	movlw	high STR_123
 14650  006416  0100               	movlb	0	; () banked
 14651  006418  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14652  00641A  0E0C               	movlw	low STR_123
 14653  00641C  6F61               	movwf	?_putsUSART& (0+255),b
 14654  00641E  EC69  F00A         	call	_putsUSART	;wreg free
 14655  006422  EF37  F02D         	goto	l14619
 14656  006426                     l15023:
 14657                           
 14658                           ; BSR set to: 2
 14659                           ;main.c: 1139: }
 14660                           ;main.c: 1142: p = strtok((0), ",");
 14661  006426  DB14               	call	PL6	;call to abstracted procedure
 14662  006428  ECAB  F00D         	call	_strtok	;wreg free
 14663  00642C  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1301
 14664  006430  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1301+1
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;main.c: 1143: if ((0) != p) {
 14668  006434  0102               	movlb	2	; () banked
 14669  006436  51C5               	movf	(doModeVerbose@p_1301+1)& (0+255),w,b
 14670  006438  11C4               	iorwf	doModeVerbose@p_1301& (0+255),w,b
 14671  00643A  E00B               	bz	l15029
 14672                           
 14673                           ; BSR set to: 2
 14674                           ;main.c: 1144: mask_class = atoi(p);
 14675  00643C  C2C4  F066         	movff	doModeVerbose@p_1301,?_atoi
 14676  006440  C2C5  F067         	movff	doModeVerbose@p_1301+1,?_atoi+1
 14677  006444  EC95  F015         	call	_atoi	;wreg free
 14678  006448  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14679  00644C  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14680                           
 14681                           ;main.c: 1145: }
 14682  006450  D009               	goto	l15037
 14683  006452                     l15029:
 14684                           
 14685                           ; BSR set to: 2
 14686                           ;main.c: 1146: else {
 14687                           ;main.c: 1147: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14688  006452  0E75               	movlw	high STR_125
 14689  006454  0100               	movlb	0	; () banked
 14690  006456  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14691  006458  0EDC               	movlw	low STR_125
 14692  00645A  6F61               	movwf	?_putsUSART& (0+255),b
 14693  00645C  EC69  F00A         	call	_putsUSART	;wreg free
 14694  006460  EF37  F02D         	goto	l14619
 14695  006464                     l15037:
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;main.c: 1151: }
 14699                           ;main.c: 1154: p = strtok((0), ",");
 14700  006464  DAFD               	call	PL8	;call to abstracted procedure
 14701  006466  ECAB  F00D         	call	_strtok	;wreg free
 14702  00646A  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1301
 14703  00646E  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1301+1
 14704                           
 14705                           ; BSR set to: 0
 14706                           ;main.c: 1155: if ((0) != p) {
 14707  006472  0102               	movlb	2	; () banked
 14708  006474  51C5               	movf	(doModeVerbose@p_1301+1)& (0+255),w,b
 14709  006476  11C4               	iorwf	doModeVerbose@p_1301& (0+255),w,b
 14710  006478  E00A               	bz	l15043
 14711                           
 14712                           ; BSR set to: 2
 14713                           ;main.c: 1156: mask_type = atoi(p);
 14714  00647A  C2C4  F066         	movff	doModeVerbose@p_1301,?_atoi
 14715  00647E  C2C5  F067         	movff	doModeVerbose@p_1301+1,?_atoi+1
 14716  006482  EC95  F015         	call	_atoi	;wreg free
 14717  006486  5166               	movf	?_atoi& (0+255),w,b
 14718  006488  0102               	movlb	2	; () banked
 14719  00648A  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 14720                           
 14721                           ;main.c: 1157: }
 14722  00648C  D009               	goto	l15051
 14723  00648E                     l15043:
 14724                           
 14725                           ; BSR set to: 2
 14726                           ;main.c: 1158: else {
 14727                           ;main.c: 1159: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14728  00648E  0E76               	movlw	high STR_127
 14729  006490  0100               	movlb	0	; () banked
 14730  006492  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14731  006494  0E01               	movlw	low STR_127
 14732  006496  6F61               	movwf	?_putsUSART& (0+255),b
 14733  006498  EC69  F00A         	call	_putsUSART	;wreg free
 14734  00649C  EF37  F02D         	goto	l14619
 14735  0064A0                     l15051:
 14736                           
 14737                           ; BSR set to: 2
 14738                           ;main.c: 1163: }
 14739                           ;main.c: 1166: p = strtok((0), ",");
 14740  0064A0  DAD7               	call	PL6	;call to abstracted procedure
 14741  0064A2  ECAB  F00D         	call	_strtok	;wreg free
 14742  0064A6  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1301
 14743  0064AA  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1301+1
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;main.c: 1167: if ((0) != p) {
 14747  0064AE  0102               	movlb	2	; () banked
 14748  0064B0  51C5               	movf	(doModeVerbose@p_1301+1)& (0+255),w,b
 14749  0064B2  11C4               	iorwf	doModeVerbose@p_1301& (0+255),w,b
 14750  0064B4  E00A               	bz	l15057
 14751                           
 14752                           ; BSR set to: 2
 14753                           ;main.c: 1168: mask_nodeid = atoi(p);
 14754  0064B6  C2C4  F066         	movff	doModeVerbose@p_1301,?_atoi
 14755  0064BA  C2C5  F067         	movff	doModeVerbose@p_1301+1,?_atoi+1
 14756  0064BE  EC95  F015         	call	_atoi	;wreg free
 14757  0064C2  5166               	movf	?_atoi& (0+255),w,b
 14758  0064C4  0102               	movlb	2	; () banked
 14759  0064C6  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14760                           
 14761                           ;main.c: 1169: }
 14762  0064C8  D009               	goto	l15065
 14763  0064CA                     l15057:
 14764                           
 14765                           ; BSR set to: 2
 14766                           ;main.c: 1170: else {
 14767                           ;main.c: 1171: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14768  0064CA  0E74               	movlw	high STR_129
 14769  0064CC  0100               	movlb	0	; () banked
 14770  0064CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14771  0064D0  0ED1               	movlw	low STR_129
 14772  0064D2  6F61               	movwf	?_putsUSART& (0+255),b
 14773  0064D4  EC69  F00A         	call	_putsUSART	;wreg free
 14774  0064D8  EF37  F02D         	goto	l14619
 14775  0064DC                     l15065:
 14776                           
 14777                           ; BSR set to: 2
 14778                           ;main.c: 1175: }
 14779                           ;main.c: 1176: uint32_t id = ((uint32_t) mask_priority << 26) |
 14780                           ;main.c: 1177: ((uint32_t) mask_class << 16) |
 14781                           ;main.c: 1178: ((uint32_t) mask_type << 8) |
 14782                           ;main.c: 1179: mask_nodeid;
 14783  0064DC  C290  F0CC         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14784  0064E0  DB06               	call	PL40	;call to abstracted procedure
 14785  0064E2  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14786  0064E4  0100               	movlb	0	; () banked
 14787  0064E6  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14788  0064E8  0102               	movlb	2	; () banked
 14789  0064EA  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14790  0064EC  DB26               	call	PL60	;call to abstracted procedure
 14791  0064EE  C28F  F0D4         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14792  0064F2  DABD               	call	PL10	;call to abstracted procedure
 14793  0064F4  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14794  0064F6  0100               	movlb	0	; () banked
 14795  0064F8  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14796  0064FA  0102               	movlb	2	; () banked
 14797  0064FC  6FAA               	movwf	doModeVerbose@id_1313& (0+255),b
 14798  0064FE  0100               	movlb	0	; () banked
 14799  006500  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14800  006502  0102               	movlb	2	; () banked
 14801  006504  6FAB               	movwf	(doModeVerbose@id_1313+1)& (0+255),b
 14802  006506  0100               	movlb	0	; () banked
 14803  006508  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14804  00650A  0102               	movlb	2	; () banked
 14805  00650C  6FAC               	movwf	(doModeVerbose@id_1313+2)& (0+255),b
 14806  00650E  0100               	movlb	0	; () banked
 14807  006510  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14808  006512  0102               	movlb	2	; () banked
 14809  006514  6FAD               	movwf	(doModeVerbose@id_1313+3)& (0+255),b
 14810                           
 14811                           ; BSR set to: 2
 14812                           ;main.c: 1182: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14813  006516  0E80               	movlw	128
 14814  006518  ECC6  F007         	call	_ECANSetOperationMode
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;main.c: 1184: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14818                           ;main.c: 1185: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14819  00651C  0102               	movlb	2	; () banked
 14820  00651E  51AF               	movf	doModeVerbose@maskno& (0+255),w,b
 14821  006520  E008               	bz	l15073
 14822                           
 14823                           ; BSR set to: 2
 14824  006522  0E0F               	movlw	15	;volatile
 14825  006524  0100               	movlb	0	; () banked
 14826  006526  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14827  006528  0E18               	movlw	24	;volatile
 14828  00652A  DAFB               	call	PL54	;call to abstracted procedure
 14829  00652C  EC18  F016         	call	__CANIDToRegs	;wreg free
 14830  006530  D007               	goto	l15075
 14831  006532                     l15073:
 14832                           
 14833                           ; BSR set to: 2
 14834  006532  0E0F               	movlw	15	;volatile
 14835  006534  0100               	movlb	0	; () banked
 14836  006536  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14837  006538  0E1C               	movlw	28	;volatile
 14838  00653A  DAF3               	call	PL54	;call to abstracted procedure
 14839  00653C  EC18  F016         	call	__CANIDToRegs	;wreg free
 14840  006540                     l15075:
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;main.c: 1188: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14844  006540  0E00               	movlw	0
 14845  006542  ECC6  F007         	call	_ECANSetOperationMode
 14846                           
 14847                           ; BSR set to: 0
 14848                           ;main.c: 1190: putsUSART((char *) "+OK\r\n");
 14849  006546  0E7C               	movlw	high STR_9
 14850  006548  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14851  00654A  0E64               	movlw	low STR_9
 14852  00654C  6F61               	movwf	?_putsUSART& (0+255),b
 14853  00654E  EC69  F00A         	call	_putsUSART	;wreg free
 14854                           
 14855                           ;main.c: 1192: }
 14856  006552  D258               	goto	l15221
 14857  006554                     l15079:
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;main.c: 1202: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14861  006554  0E01               	movlw	high _cmdbuf
 14862  006556  0100               	movlb	0	; () banked
 14863  006558  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14864  00655A  0E2D               	movlw	low _cmdbuf
 14865  00655C  6F6D               	movwf	?_stristr& (0+255),b
 14866  00655E  0E7C               	movlw	high STR_131
 14867  006560  6F70               	movwf	(?_stristr+3)& (0+255),b
 14868  006562  0E8E               	movlw	low STR_131
 14869  006564  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14870  006566  EC62  F00C         	call	_stristr	;wreg free
 14871  00656A  0E2D               	movlw	low _cmdbuf
 14872  00656C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14873  00656E  0E01               	movlw	high _cmdbuf
 14874  006570  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14875  006572  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14876  006574  E102               	bnz	u19665
 14877  006576  516D               	movf	?_stristr& (0+255),w,b
 14878  006578  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14879  00657A                     u19665:
 14880  00657A  E001 D230          	bnz	l15215
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;main.c: 1205: strcpy(cmdbuf, cmdbuf + 4);
 14884  00657E  0E01               	movlw	high _cmdbuf
 14885  006580  0100               	movlb	0	; () banked
 14886  006582  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14887  006584  0E2D               	movlw	low _cmdbuf
 14888  006586  6F60               	movwf	?_strcpy& (0+255),b
 14889  006588  0E31               	movlw	low (_cmdbuf+4)
 14890  00658A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14891  00658C  0E01               	movlw	high (_cmdbuf+4)
 14892  00658E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14893  006590  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14894  006594  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14895  006598  EC18  F008         	call	_strcpy	;wreg free
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;main.c: 1208: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14899  00659C  0E01               	movlw	high _cmdbuf
 14900  00659E  0100               	movlb	0	; () banked
 14901  0065A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14902  0065A2  0E2D               	movlw	low _cmdbuf
 14903  0065A4  6F6D               	movwf	?_stristr& (0+255),b
 14904  0065A6  0E7C               	movlw	high STR_132
 14905  0065A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14906  0065AA  0ED9               	movlw	low STR_132
 14907  0065AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14908  0065AE  EC62  F00C         	call	_stristr	;wreg free
 14909  0065B2  0E2D               	movlw	low _cmdbuf
 14910  0065B4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14911  0065B6  0E01               	movlw	high _cmdbuf
 14912  0065B8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14913  0065BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14914  0065BC  E102               	bnz	u19675
 14915  0065BE  516D               	movf	?_stristr& (0+255),w,b
 14916  0065C0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14917  0065C2                     u19675:
 14918  0065C2  E114               	bnz	l15091
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;main.c: 1209: bHex = 1;
 14922  0065C4  0E01               	movlw	1
 14923  0065C6  6E2C               	movwf	_bHex,c
 14924                           
 14925                           ; BSR set to: 0
 14926                           ;main.c: 1210: (Busy_eep(), Write_b_eep(0x06,1));
 14927  0065C8  EC8F  F007         	call	_Busy_eep	;wreg free
 14928  0065CC  0100               	movlb	0	; () banked
 14929  0065CE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14930  0065D0  0E06               	movlw	6
 14931  0065D2  6F60               	movwf	?_Write_b_eep& (0+255),b
 14932  0065D4  0E01               	movlw	1
 14933  0065D6  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14934  0065D8  EC5F  F008         	call	_Write_b_eep	;wreg free
 14935                           
 14936                           ;main.c: 1211: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14937  0065DC  0E73               	movlw	high STR_133
 14938  0065DE  0100               	movlb	0	; () banked
 14939  0065E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14940  0065E2  0E3C               	movlw	low STR_133
 14941  0065E4  6F61               	movwf	?_putsUSART& (0+255),b
 14942  0065E6  EC69  F00A         	call	_putsUSART	;wreg free
 14943                           
 14944                           ;main.c: 1212: }
 14945  0065EA  D20C               	goto	l15221
 14946  0065EC                     l15091:
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;main.c: 1214: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14950  0065EC  0E01               	movlw	high _cmdbuf
 14951  0065EE  0100               	movlb	0	; () banked
 14952  0065F0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14953  0065F2  0E2D               	movlw	low _cmdbuf
 14954  0065F4  6F6D               	movwf	?_stristr& (0+255),b
 14955  0065F6  0E7B               	movlw	high STR_134
 14956  0065F8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14957  0065FA  0EEA               	movlw	low STR_134
 14958  0065FC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14959  0065FE  EC62  F00C         	call	_stristr	;wreg free
 14960  006602  0E2D               	movlw	low _cmdbuf
 14961  006604  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14962  006606  0E01               	movlw	high _cmdbuf
 14963  006608  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14964  00660A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14965  00660C  E102               	bnz	u19685
 14966  00660E  516D               	movf	?_stristr& (0+255),w,b
 14967  006610  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14968  006612                     u19685:
 14969  006612  E113               	bnz	l15101
 14970                           
 14971                           ; BSR set to: 0
 14972                           ;main.c: 1215: bHex = 0;
 14973  006614  6A2C               	clrf	_bHex,c
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;main.c: 1216: (Busy_eep(), Write_b_eep(0x06,0));
 14977  006616  EC8F  F007         	call	_Busy_eep	;wreg free
 14978  00661A  0100               	movlb	0	; () banked
 14979  00661C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14980  00661E  0E06               	movlw	6
 14981  006620  6F60               	movwf	?_Write_b_eep& (0+255),b
 14982  006622  0E00               	movlw	0
 14983  006624  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14984  006626  EC5F  F008         	call	_Write_b_eep	;wreg free
 14985                           
 14986                           ;main.c: 1217: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14987  00662A  0E74               	movlw	high STR_135
 14988  00662C  0100               	movlb	0	; () banked
 14989  00662E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14990  006630  0E34               	movlw	low STR_135
 14991  006632  6F61               	movwf	?_putsUSART& (0+255),b
 14992  006634  EC69  F00A         	call	_putsUSART	;wreg free
 14993                           
 14994                           ;main.c: 1218: }
 14995  006638  D1E5               	goto	l15221
 14996  00663A                     l15101:
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;main.c: 1219: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 15000  00663A  0E01               	movlw	high _cmdbuf
 15001  00663C  0100               	movlb	0	; () banked
 15002  00663E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15003  006640  0E2D               	movlw	low _cmdbuf
 15004  006642  6F6D               	movwf	?_stristr& (0+255),b
 15005  006644  0E7B               	movlw	high STR_136
 15006  006646  6F70               	movwf	(?_stristr+3)& (0+255),b
 15007  006648  0E50               	movlw	low STR_136
 15008  00664A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15009  00664C  EC62  F00C         	call	_stristr	;wreg free
 15010  006650  516E               	movf	(?_stristr+1)& (0+255),w,b
 15011  006652  116D               	iorwf	?_stristr& (0+255),w,b
 15012  006654  E02E               	bz	l15115
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;main.c: 1220: strcpy(cmdbuf, cmdbuf + 10);
 15016  006656  0E01               	movlw	high _cmdbuf
 15017  006658  0100               	movlb	0	; () banked
 15018  00665A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15019  00665C  0E2D               	movlw	low _cmdbuf
 15020  00665E  6F60               	movwf	?_strcpy& (0+255),b
 15021  006660  0E37               	movlw	low (_cmdbuf+10)
 15022  006662  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15023  006664  0E01               	movlw	high (_cmdbuf+10)
 15024  006666  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15025  006668  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15026  00666C  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15027  006670  EC18  F008         	call	_strcpy	;wreg free
 15028                           
 15029                           ; BSR set to: 0
 15030                           ;main.c: 1221: rwtimeout = atoi(cmdbuf);
 15031  006674  0E01               	movlw	high _cmdbuf
 15032  006676  0100               	movlb	0	; () banked
 15033  006678  6F67               	movwf	(?_atoi+1)& (0+255),b
 15034  00667A  0E2D               	movlw	low _cmdbuf
 15035  00667C  6F66               	movwf	?_atoi& (0+255),b
 15036  00667E  EC95  F015         	call	_atoi	;wreg free
 15037  006682  5166               	movf	?_atoi& (0+255),w,b
 15038  006684  6E35               	movwf	_rwtimeout,c
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;main.c: 1222: if (rwtimeout < 20u) {
 15042  006686  0E14               	movlw	20
 15043  006688  6035               	cpfslt	_rwtimeout,c
 15044  00668A  D001               	goto	l15111
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;main.c: 1223: rwtimeout = 20u;
 15048  00668C  6E35               	movwf	_rwtimeout,c
 15049  00668E                     l15111:
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;main.c: 1224: }
 15053                           ;main.c: 1225: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 15054  00668E  EC8F  F007         	call	_Busy_eep	;wreg free
 15055  006692  0100               	movlb	0	; () banked
 15056  006694  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15057  006696  0E09               	movlw	9
 15058  006698  6F60               	movwf	?_Write_b_eep& (0+255),b
 15059  00669A  C035  F062         	movff	_rwtimeout,?_Write_b_eep+2
 15060  00669E  EC5F  F008         	call	_Write_b_eep	;wreg free
 15061                           
 15062                           ;main.c: 1226: putsUSART((char *) "+OK\r\n");
 15063  0066A2  0E7C               	movlw	high STR_9
 15064  0066A4  0100               	movlb	0	; () banked
 15065  0066A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15066  0066A8  0E64               	movlw	low STR_9
 15067  0066AA  6F61               	movwf	?_putsUSART& (0+255),b
 15068  0066AC  EC69  F00A         	call	_putsUSART	;wreg free
 15069                           
 15070                           ;main.c: 1227: }
 15071  0066B0  D1A9               	goto	l15221
 15072  0066B2                     l15115:
 15073                           
 15074                           ; BSR set to: 0
 15075                           ;main.c: 1229: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15076  0066B2  0E01               	movlw	high _cmdbuf
 15077  0066B4  0100               	movlb	0	; () banked
 15078  0066B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15079  0066B8  0E2D               	movlw	low _cmdbuf
 15080  0066BA  6F6D               	movwf	?_stristr& (0+255),b
 15081  0066BC  0E7B               	movlw	high STR_138
 15082  0066BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 15083  0066C0  0E8E               	movlw	low STR_138
 15084  0066C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15085  0066C4  EC62  F00C         	call	_stristr	;wreg free
 15086  0066C8  516E               	movf	(?_stristr+1)& (0+255),w,b
 15087  0066CA  116D               	iorwf	?_stristr& (0+255),w,b
 15088  0066CC  E061               	bz	l15149
 15089                           
 15090                           ; BSR set to: 0
 15091                           ;main.c: 1230: strcpy(cmdbuf, cmdbuf + 8);
 15092  0066CE  0E01               	movlw	high _cmdbuf
 15093  0066D0  D9B2               	call	PL4	;call to abstracted procedure
 15094  0066D2  EC18  F008         	call	_strcpy	;wreg free
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;main.c: 1231: if (0 != stristr(cmdbuf, "CLOSE")) {
 15098  0066D6  0E01               	movlw	high _cmdbuf
 15099  0066D8  0100               	movlb	0	; () banked
 15100  0066DA  DA5D               	call	PL100	;call to abstracted procedure
 15101  0066DC  EC62  F00C         	call	_stristr	;wreg free
 15102  0066E0  516E               	movf	(?_stristr+1)& (0+255),w,b
 15103  0066E2  116D               	iorwf	?_stristr& (0+255),w,b
 15104  0066E4  E00B               	bz	l15125
 15105                           
 15106                           ; BSR set to: 0
 15107                           ;main.c: 1232: (Busy_eep(), Write_b_eep(0x07,0));
 15108  0066E6  EC8F  F007         	call	_Busy_eep	;wreg free
 15109  0066EA  0100               	movlb	0	; () banked
 15110  0066EC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15111  0066EE  0E07               	movlw	7
 15112  0066F0  6F60               	movwf	?_Write_b_eep& (0+255),b
 15113  0066F2  0E00               	movlw	0
 15114  0066F4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15115  0066F6  EC5F  F008         	call	_Write_b_eep	;wreg free
 15116                           
 15117                           ;main.c: 1233: }
 15118  0066FA  D184               	goto	l15221
 15119  0066FC                     l15125:
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;main.c: 1234: else if (0 != stristr(cmdbuf, "OPEN")) {
 15123  0066FC  DA29               	call	PL78	;call to abstracted procedure
 15124  0066FE  EC62  F00C         	call	_stristr	;wreg free
 15125  006702  516E               	movf	(?_stristr+1)& (0+255),w,b
 15126  006704  116D               	iorwf	?_stristr& (0+255),w,b
 15127  006706  E00B               	bz	l15131
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;main.c: 1235: (Busy_eep(), Write_b_eep(0x07,1));
 15131  006708  EC8F  F007         	call	_Busy_eep	;wreg free
 15132  00670C  0100               	movlb	0	; () banked
 15133  00670E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15134  006710  0E07               	movlw	7
 15135  006712  6F60               	movwf	?_Write_b_eep& (0+255),b
 15136  006714  0E01               	movlw	1
 15137  006716  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15138  006718  EC5F  F008         	call	_Write_b_eep	;wreg free
 15139                           
 15140                           ;main.c: 1236: }
 15141  00671C  D173               	goto	l15221
 15142  00671E                     l15131:
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;main.c: 1237: else if (0 != stristr(cmdbuf, "SILENT")) {
 15146  00671E  0E01               	movlw	high _cmdbuf
 15147  006720  DA21               	call	PL86	;call to abstracted procedure
 15148  006722  EC62  F00C         	call	_stristr	;wreg free
 15149  006726  516E               	movf	(?_stristr+1)& (0+255),w,b
 15150  006728  116D               	iorwf	?_stristr& (0+255),w,b
 15151  00672A  E00B               	bz	l15137
 15152                           
 15153                           ; BSR set to: 0
 15154                           ;main.c: 1238: (Busy_eep(), Write_b_eep(0x07,2));
 15155  00672C  EC8F  F007         	call	_Busy_eep	;wreg free
 15156  006730  0100               	movlb	0	; () banked
 15157  006732  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15158  006734  0E07               	movlw	7
 15159  006736  6F60               	movwf	?_Write_b_eep& (0+255),b
 15160  006738  0E02               	movlw	2
 15161  00673A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15162  00673C  EC5F  F008         	call	_Write_b_eep	;wreg free
 15163                           
 15164                           ;main.c: 1239: }
 15165  006740  D161               	goto	l15221
 15166  006742                     l15137:
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;main.c: 1240: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15170  006742  0E01               	movlw	high _cmdbuf
 15171  006744  0100               	movlb	0	; () banked
 15172  006746  DA17               	call	PL92	;call to abstracted procedure
 15173  006748  EC62  F00C         	call	_stristr	;wreg free
 15174  00674C  516E               	movf	(?_stristr+1)& (0+255),w,b
 15175  00674E  116D               	iorwf	?_stristr& (0+255),w,b
 15176  006750  E00B               	bz	l15143
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;main.c: 1241: (Busy_eep(), Write_b_eep(0x07,3));
 15180  006752  EC8F  F007         	call	_Busy_eep	;wreg free
 15181  006756  0100               	movlb	0	; () banked
 15182  006758  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15183  00675A  0E07               	movlw	7
 15184  00675C  6F60               	movwf	?_Write_b_eep& (0+255),b
 15185  00675E  0E03               	movlw	3
 15186  006760  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15187  006762  EC5F  F008         	call	_Write_b_eep	;wreg free
 15188                           
 15189                           ;main.c: 1242: }
 15190  006766  D14E               	goto	l15221
 15191  006768                     l15143:
 15192                           
 15193                           ; BSR set to: 0
 15194                           ;main.c: 1243: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 15195  006768  0E01               	movlw	high _cmdbuf
 15196  00676A  0100               	movlb	0	; () banked
 15197  00676C  DA0C               	call	PL96	;call to abstracted procedure
 15198  00676E  EC62  F00C         	call	_stristr	;wreg free
 15199  006772  516E               	movf	(?_stristr+1)& (0+255),w,b
 15200  006774  116D               	iorwf	?_stristr& (0+255),w,b
 15201  006776  E101 D145          	bz	l15221
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;main.c: 1244: (Busy_eep(), Write_b_eep(0x07,4));
 15205  00677A  EC8F  F007         	call	_Busy_eep	;wreg free
 15206  00677E  0100               	movlb	0	; () banked
 15207  006780  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15208  006782  0E07               	movlw	7
 15209  006784  6F60               	movwf	?_Write_b_eep& (0+255),b
 15210  006786  0E04               	movlw	4
 15211  006788  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15212  00678A  EC5F  F008         	call	_Write_b_eep	;wreg free
 15213                           
 15214                           ; BSR set to: 0
 15215  00678E  D13A               	goto	l15221
 15216  006790                     l15149:
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;main.c: 1247: else if (0 != stristr(cmdbuf, "MODE ")) {
 15220  006790  0E01               	movlw	high _cmdbuf
 15221  006792  0100               	movlb	0	; () banked
 15222  006794  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15223  006796  0E2D               	movlw	low _cmdbuf
 15224  006798  6F6D               	movwf	?_stristr& (0+255),b
 15225  00679A  0E7C               	movlw	high STR_144
 15226  00679C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15227  00679E  0E70               	movlw	low STR_144
 15228  0067A0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15229  0067A2  EC62  F00C         	call	_stristr	;wreg free
 15230  0067A6  516E               	movf	(?_stristr+1)& (0+255),w,b
 15231  0067A8  116D               	iorwf	?_stristr& (0+255),w,b
 15232  0067AA  E06C               	bz	l15179
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;main.c: 1248: strcpy(cmdbuf, cmdbuf + 5);
 15236  0067AC  D936               	call	PL2	;call to abstracted procedure
 15237  0067AE  EC18  F008         	call	_strcpy	;wreg free
 15238                           
 15239                           ; BSR set to: 0
 15240                           ;main.c: 1249: if (0 != stristr(cmdbuf, "VERBOSE")) {
 15241  0067B2  0E01               	movlw	high _cmdbuf
 15242  0067B4  0100               	movlb	0	; () banked
 15243  0067B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15244  0067B8  0E2D               	movlw	low _cmdbuf
 15245  0067BA  6F6D               	movwf	?_stristr& (0+255),b
 15246  0067BC  0E7B               	movlw	high STR_145
 15247  0067BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 15248  0067C0  0EE2               	movlw	low STR_145
 15249  0067C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15250  0067C4  EC62  F00C         	call	_stristr	;wreg free
 15251  0067C8  516E               	movf	(?_stristr+1)& (0+255),w,b
 15252  0067CA  116D               	iorwf	?_stristr& (0+255),w,b
 15253  0067CC  E014               	bz	l15163
 15254                           
 15255                           ; BSR set to: 0
 15256                           ;main.c: 1250: mode = 0;
 15257  0067CE  0101               	movlb	1	; () banked
 15258  0067D0  6B2C               	clrf	_mode& (0+255),b
 15259                           
 15260                           ; BSR set to: 1
 15261                           ;main.c: 1251: (Busy_eep(), Write_b_eep(0x03,0));
 15262  0067D2  EC8F  F007         	call	_Busy_eep	;wreg free
 15263  0067D6  0100               	movlb	0	; () banked
 15264  0067D8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15265  0067DA  0E03               	movlw	3
 15266  0067DC  6F60               	movwf	?_Write_b_eep& (0+255),b
 15267  0067DE  0E00               	movlw	0
 15268  0067E0  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15269  0067E2  EC5F  F008         	call	_Write_b_eep	;wreg free
 15270                           
 15271                           ;main.c: 1252: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 15272  0067E6  0E77               	movlw	high STR_146
 15273  0067E8  0100               	movlb	0	; () banked
 15274  0067EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15275  0067EC  0EAA               	movlw	low STR_146
 15276  0067EE  6F61               	movwf	?_putsUSART& (0+255),b
 15277  0067F0  EC69  F00A         	call	_putsUSART	;wreg free
 15278                           
 15279                           ;main.c: 1253: }
 15280  0067F4  D107               	goto	l15221
 15281  0067F6                     l15163:
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;main.c: 1254: else if (0 != stristr(cmdbuf, "VSCP")) {
 15285  0067F6  0E01               	movlw	high _cmdbuf
 15286  0067F8  0100               	movlb	0	; () banked
 15287  0067FA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15288  0067FC  0E2D               	movlw	low _cmdbuf
 15289  0067FE  6F6D               	movwf	?_stristr& (0+255),b
 15290  006800  0E7C               	movlw	high STR_147
 15291  006802  6F70               	movwf	(?_stristr+3)& (0+255),b
 15292  006804  0EB1               	movlw	low STR_147
 15293  006806  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15294  006808  EC62  F00C         	call	_stristr	;wreg free
 15295  00680C  516E               	movf	(?_stristr+1)& (0+255),w,b
 15296  00680E  116D               	iorwf	?_stristr& (0+255),w,b
 15297  006810  E015               	bz	l15171
 15298                           
 15299                           ; BSR set to: 0
 15300                           ;main.c: 1255: mode = 1;
 15301  006812  0E01               	movlw	1
 15302  006814  0101               	movlb	1	; () banked
 15303  006816  6F2C               	movwf	_mode& (0+255),b
 15304                           
 15305                           ; BSR set to: 1
 15306                           ;main.c: 1256: (Busy_eep(), Write_b_eep(0x03,1));
 15307  006818  EC8F  F007         	call	_Busy_eep	;wreg free
 15308  00681C  0100               	movlb	0	; () banked
 15309  00681E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15310  006820  0E03               	movlw	3
 15311  006822  6F60               	movwf	?_Write_b_eep& (0+255),b
 15312  006824  0E01               	movlw	1
 15313  006826  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15314  006828  EC5F  F008         	call	_Write_b_eep	;wreg free
 15315                           
 15316                           ;main.c: 1257: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 15317  00682C  0E77               	movlw	high STR_148
 15318  00682E  0100               	movlb	0	; () banked
 15319  006830  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15320  006832  0E12               	movlw	low STR_148
 15321  006834  6F61               	movwf	?_putsUSART& (0+255),b
 15322  006836  EC69  F00A         	call	_putsUSART	;wreg free
 15323                           
 15324                           ;main.c: 1258: }
 15325  00683A  D0E4               	goto	l15221
 15326  00683C                     l15171:
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;main.c: 1259: else if (0 != stristr(cmdbuf, "SLCAN")) {
 15330  00683C  0E01               	movlw	high _cmdbuf
 15331  00683E  0100               	movlb	0	; () banked
 15332  006840  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15333  006842  0E2D               	movlw	low _cmdbuf
 15334  006844  6F6D               	movwf	?_stristr& (0+255),b
 15335  006846  0E7C               	movlw	high STR_149
 15336  006848  6F70               	movwf	(?_stristr+3)& (0+255),b
 15337  00684A  0E88               	movlw	low STR_149
 15338  00684C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15339  00684E  EC62  F00C         	call	_stristr	;wreg free
 15340  006852  516E               	movf	(?_stristr+1)& (0+255),w,b
 15341  006854  116D               	iorwf	?_stristr& (0+255),w,b
 15342  006856  E101 D0D5          	bz	l15221
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;main.c: 1260: mode = 2;
 15346  00685A  0E02               	movlw	2
 15347  00685C  0101               	movlb	1	; () banked
 15348  00685E  6F2C               	movwf	_mode& (0+255),b
 15349                           
 15350                           ; BSR set to: 1
 15351                           ;main.c: 1261: (Busy_eep(), Write_b_eep(0x03,2));
 15352  006860  EC8F  F007         	call	_Busy_eep	;wreg free
 15353  006864  0100               	movlb	0	; () banked
 15354  006866  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15355  006868  0E03               	movlw	3
 15356  00686A  6F60               	movwf	?_Write_b_eep& (0+255),b
 15357  00686C  0E02               	movlw	2
 15358  00686E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15359  006870  EC5F  F008         	call	_Write_b_eep	;wreg free
 15360                           
 15361                           ;main.c: 1262: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 15362  006874  0E78               	movlw	high STR_150
 15363  006876  0100               	movlb	0	; () banked
 15364  006878  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15365  00687A  0E17               	movlw	low STR_150
 15366  00687C  6F61               	movwf	?_putsUSART& (0+255),b
 15367  00687E  EC69  F00A         	call	_putsUSART	;wreg free
 15368  006882  D0C0               	goto	l15221
 15369  006884                     l15179:
 15370                           
 15371                           ; BSR set to: 0
 15372                           ;main.c: 1266: else if (0 != stristr(cmdbuf, "FILTER ")) {
 15373  006884  0E01               	movlw	high _cmdbuf
 15374  006886  0100               	movlb	0	; () banked
 15375  006888  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15376  00688A  0E2D               	movlw	low _cmdbuf
 15377  00688C  6F6D               	movwf	?_stristr& (0+255),b
 15378  00688E  0E7B               	movlw	high STR_151
 15379  006890  6F70               	movwf	(?_stristr+3)& (0+255),b
 15380  006892  0ED2               	movlw	low STR_151
 15381  006894  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15382  006896  EC62  F00C         	call	_stristr	;wreg free
 15383  00689A  516E               	movf	(?_stristr+1)& (0+255),w,b
 15384  00689C  116D               	iorwf	?_stristr& (0+255),w,b
 15385  00689E  E010               	bz	l15183
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;main.c: 1267: strcpy(cmdbuf, cmdbuf + 7);
 15389  0068A0  0E01               	movlw	high _cmdbuf
 15390  0068A2  0100               	movlb	0	; () banked
 15391  0068A4  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15392  0068A6  0E2D               	movlw	low _cmdbuf
 15393  0068A8  6F60               	movwf	?_strcpy& (0+255),b
 15394  0068AA  0E34               	movlw	low (_cmdbuf+7)
 15395  0068AC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15396  0068AE  0E01               	movlw	high (_cmdbuf+7)
 15397  0068B0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15398  0068B2  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15399  0068B6  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15400  0068BA  EC18  F008         	call	_strcpy	;wreg free
 15401                           
 15402                           ;main.c: 1269: }
 15403  0068BE  D0A2               	goto	l15221
 15404  0068C0                     l15183:
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;main.c: 1271: else if (0 != stristr(cmdbuf, "MASK ")) {
 15408  0068C0  0E01               	movlw	high _cmdbuf
 15409  0068C2  0100               	movlb	0	; () banked
 15410  0068C4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15411  0068C6  0E2D               	movlw	low _cmdbuf
 15412  0068C8  6F6D               	movwf	?_stristr& (0+255),b
 15413  0068CA  0E7C               	movlw	high STR_152
 15414  0068CC  6F70               	movwf	(?_stristr+3)& (0+255),b
 15415  0068CE  0E76               	movlw	low STR_152
 15416  0068D0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15417  0068D2  EC62  F00C         	call	_stristr	;wreg free
 15418  0068D6  516E               	movf	(?_stristr+1)& (0+255),w,b
 15419  0068D8  116D               	iorwf	?_stristr& (0+255),w,b
 15420  0068DA  E004               	bz	l15187
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;main.c: 1272: strcpy(cmdbuf, cmdbuf + 5);
 15424  0068DC  D89E               	call	PL2	;call to abstracted procedure
 15425  0068DE  EC18  F008         	call	_strcpy	;wreg free
 15426                           
 15427                           ;main.c: 1273: }
 15428  0068E2  D090               	goto	l15221
 15429  0068E4                     l15187:
 15430                           
 15431                           ; BSR set to: 0
 15432                           ;main.c: 1275: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 15433  0068E4  0E01               	movlw	high _cmdbuf
 15434  0068E6  0100               	movlb	0	; () banked
 15435  0068E8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15436  0068EA  0E2D               	movlw	low _cmdbuf
 15437  0068EC  6F6D               	movwf	?_stristr& (0+255),b
 15438  0068EE  0E7C               	movlw	high STR_153
 15439  0068F0  6F70               	movwf	(?_stristr+3)& (0+255),b
 15440  0068F2  0E7C               	movlw	low STR_153
 15441  0068F4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15442  0068F6  EC62  F00C         	call	_stristr	;wreg free
 15443  0068FA  0E2D               	movlw	low _cmdbuf
 15444  0068FC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15445  0068FE  0E01               	movlw	high _cmdbuf
 15446  006900  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15447  006902  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15448  006904  E102               	bnz	u19835
 15449  006906  516D               	movf	?_stristr& (0+255),w,b
 15450  006908  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15451  00690A                     u19835:
 15452  00690A  E137               	bnz	l15205
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;main.c: 1276: strcpy(cmdbuf, cmdbuf + 5);
 15456  00690C  D886               	call	PL2	;call to abstracted procedure
 15457  00690E  EC18  F008         	call	_strcpy	;wreg free
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;main.c: 1277: if (0 != stristr(cmdbuf, "ON")) {
 15461  006912  0E01               	movlw	high _cmdbuf
 15462  006914  0100               	movlb	0	; () banked
 15463  006916  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15464  006918  0E2D               	movlw	low _cmdbuf
 15465  00691A  6F6D               	movwf	?_stristr& (0+255),b
 15466  00691C  0E7B               	movlw	high (STR_18+5)
 15467  00691E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15468  006920  0EF7               	movlw	low (STR_18+5)
 15469  006922  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15470  006924  EC62  F00C         	call	_stristr	;wreg free
 15471  006928  516E               	movf	(?_stristr+1)& (0+255),w,b
 15472  00692A  116D               	iorwf	?_stristr& (0+255),w,b
 15473  00692C  E009               	bz	l15197
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;main.c: 1278: bLocalEcho = 1;
 15477  00692E  0E01               	movlw	1
 15478  006930  6E2E               	movwf	_bLocalEcho,c
 15479                           
 15480                           ; BSR set to: 0
 15481                           ;main.c: 1279: putsUSART((char *) "+OK - Local echo on\r\n");
 15482  006932  0E79               	movlw	high STR_155
 15483  006934  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15484  006936  0EAE               	movlw	low STR_155
 15485  006938  6F61               	movwf	?_putsUSART& (0+255),b
 15486  00693A  EC69  F00A         	call	_putsUSART	;wreg free
 15487                           
 15488                           ;main.c: 1280: }
 15489  00693E  D062               	goto	l15221
 15490  006940                     l15197:
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;main.c: 1281: else if (0 != stristr(cmdbuf, "OFF")) {
 15494  006940  0E01               	movlw	high _cmdbuf
 15495  006942  0100               	movlb	0	; () banked
 15496  006944  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15497  006946  0E2D               	movlw	low _cmdbuf
 15498  006948  6F6D               	movwf	?_stristr& (0+255),b
 15499  00694A  0E7C               	movlw	high STR_156
 15500  00694C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15501  00694E  0ED1               	movlw	low STR_156
 15502  006950  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15503  006952  EC62  F00C         	call	_stristr	;wreg free
 15504  006956  516E               	movf	(?_stristr+1)& (0+255),w,b
 15505  006958  116D               	iorwf	?_stristr& (0+255),w,b
 15506  00695A  E008               	bz	l15203
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;main.c: 1282: bLocalEcho = 0;
 15510  00695C  6A2E               	clrf	_bLocalEcho,c
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;main.c: 1283: putsUSART((char *) "+OK - Local echo off\r\n");
 15514  00695E  0E79               	movlw	high STR_157
 15515  006960  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15516  006962  0E53               	movlw	low STR_157
 15517  006964  6F61               	movwf	?_putsUSART& (0+255),b
 15518  006966  EC69  F00A         	call	_putsUSART	;wreg free
 15519                           
 15520                           ;main.c: 1284: }
 15521  00696A  D04C               	goto	l15221
 15522  00696C                     l15203:
 15523                           
 15524                           ; BSR set to: 0
 15525                           ;main.c: 1285: else {
 15526                           ;main.c: 1286: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 15527  00696C  0E73               	movlw	high STR_158
 15528  00696E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15529  006970  0E92               	movlw	low STR_158
 15530  006972  6F61               	movwf	?_putsUSART& (0+255),b
 15531  006974  EC69  F00A         	call	_putsUSART	;wreg free
 15532  006978  D045               	goto	l15221
 15533  00697A                     l15205:
 15534                           
 15535                           ; BSR set to: 0
 15536                           ;main.c: 1290: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 15537  00697A  0E01               	movlw	high _cmdbuf
 15538  00697C  0100               	movlb	0	; () banked
 15539  00697E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15540  006980  0E2D               	movlw	low _cmdbuf
 15541  006982  6F6D               	movwf	?_stristr& (0+255),b
 15542  006984  0E7B               	movlw	high STR_159
 15543  006986  6F70               	movwf	(?_stristr+3)& (0+255),b
 15544  006988  0EA9               	movlw	low STR_159
 15545  00698A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15546  00698C  EC62  F00C         	call	_stristr	;wreg free
 15547  006990  0E2D               	movlw	low _cmdbuf
 15548  006992  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15549  006994  0E01               	movlw	high _cmdbuf
 15550  006996  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15551  006998  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15552  00699A  E102               	bnz	u19865
 15553  00699C  516D               	movf	?_stristr& (0+255),w,b
 15554  00699E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15555  0069A0                     u19865:
 15556  0069A0  E103               	bnz	l15209
 15557                           
 15558                           ; BSR set to: 0
 15559                           ;main.c: 1291: vscp_restoreDefaults();
 15560  0069A2  EC92  F007         	call	_vscp_restoreDefaults	;wreg free
 15561                           
 15562                           ;main.c: 1292: }
 15563  0069A6  D02E               	goto	l15221
 15564  0069A8                     l15209:
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;main.c: 1294: else if (cmdbuf == stristr(cmdbuf, "?")) {
 15568  0069A8  0E01               	movlw	high _cmdbuf
 15569  0069AA  0100               	movlb	0	; () banked
 15570  0069AC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15571  0069AE  0E2D               	movlw	low _cmdbuf
 15572  0069B0  6F6D               	movwf	?_stristr& (0+255),b
 15573  0069B2  0E7C               	movlw	high STR_160
 15574  0069B4  6F70               	movwf	(?_stristr+3)& (0+255),b
 15575  0069B6  0EFC               	movlw	low STR_160
 15576  0069B8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15577  0069BA  EC62  F00C         	call	_stristr	;wreg free
 15578  0069BE  0E2D               	movlw	low _cmdbuf
 15579  0069C0  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15580  0069C2  0E01               	movlw	high _cmdbuf
 15581  0069C4  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15582  0069C6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15583  0069C8  E102               	bnz	u19875
 15584  0069CA  516D               	movf	?_stristr& (0+255),w,b
 15585  0069CC  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15586  0069CE                     u19875:
 15587  0069CE  E01A               	bz	l15221
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;main.c: 1297: else {
 15591                           ;main.c: 1298: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 15592  0069D0  0E76               	movlw	high STR_161
 15593  0069D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15594  0069D4  0ED0               	movlw	low STR_161
 15595  0069D6  6F61               	movwf	?_putsUSART& (0+255),b
 15596  0069D8  EC69  F00A         	call	_putsUSART	;wreg free
 15597  0069DC  D013               	goto	l15221
 15598  0069DE                     l15215:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;main.c: 1302: else {
 15602                           ;main.c: 1303: if ( 0x0d == cmdbuf[ 0 ] ) {
 15603  0069DE  0101               	movlb	1	; () banked
 15604  0069E0  512D               	movf	_cmdbuf& (0+255),w,b
 15605  0069E2  0A0D               	xorlw	13
 15606  0069E4  E108               	bnz	l15219
 15607                           
 15608                           ; BSR set to: 1
 15609                           ;main.c: 1304: putsUSART((char *) "+OK\r\n");
 15610  0069E6  0E7C               	movlw	high STR_9
 15611  0069E8  0100               	movlb	0	; () banked
 15612  0069EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15613  0069EC  0E64               	movlw	low STR_9
 15614  0069EE  6F61               	movwf	?_putsUSART& (0+255),b
 15615  0069F0  EC69  F00A         	call	_putsUSART	;wreg free
 15616                           
 15617                           ;main.c: 1305: }
 15618  0069F4  D007               	goto	l15221
 15619  0069F6                     l15219:
 15620                           
 15621                           ; BSR set to: 1
 15622                           ;main.c: 1306: else {
 15623                           ;main.c: 1307: putsUSART((char *) "-ERROR - Unknown command\r\n");
 15624  0069F6  0E77               	movlw	high STR_163
 15625  0069F8  0100               	movlb	0	; () banked
 15626  0069FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15627  0069FC  0EFC               	movlw	low STR_163
 15628  0069FE  6F61               	movwf	?_putsUSART& (0+255),b
 15629  006A00  EC69  F00A         	call	_putsUSART	;wreg free
 15630  006A04                     l15221:
 15631                           
 15632                           ;main.c: 1308: }
 15633                           ;main.c: 1309: }
 15634                           ;main.c: 1311: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 15635  006A04  0E01               	movlw	high _cmdbuf
 15636  006A06  0100               	movlb	0	; () banked
 15637  006A08  6F61               	movwf	(?_memset+1)& (0+255),b
 15638  006A0A  0E2D               	movlw	low _cmdbuf
 15639  006A0C  EC39  F00E         	call	PL18	;call to abstracted procedure
 15640  006A10  EC01  F008         	call	_memset	;wreg free
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;main.c: 1312: pos = 0;
 15644  006A14  6A34               	clrf	_pos,c
 15645  006A16                     l15225:
 15646                           
 15647                           ;main.c: 1313: }
 15648                           ;main.c: 1314: }
 15649                           ;main.c: 1317: (INTCONbits.GIE = 1);
 15650  006A16  8EF2               	bsf	intcon,7,c	;volatile
 15651  006A18                     l559:
 15652  006A18  0012               	return	
 15653  006A1A                     __end_of_doModeVerbose:
 15654                           	opt stack 0
 15655  006A1A                     PL2:
 15656                           	opt stack 19
 15657  006A1A  0E01               	movlw	high _cmdbuf
 15658  006A1C  0100               	movlb	0	; () banked
 15659  006A1E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15660  006A20  0E2D               	movlw	low _cmdbuf
 15661  006A22  6F60               	movwf	?_strcpy& (0+255),b
 15662  006A24  0E32               	movlw	low (_cmdbuf+5)
 15663  006A26  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15664  006A28  0E01               	movlw	high (_cmdbuf+5)
 15665  006A2A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15666  006A2C  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15667  006A30  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15668  006A34  0012               	return	
 15669  006A36                     __end_ofPL2:
 15670                           	opt stack 0
 15671  006A36                     PL4:
 15672                           	opt stack 19
 15673  006A36  0100               	movlb	0	; () banked
 15674  006A38  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15675  006A3A  0E2D               	movlw	low _cmdbuf
 15676  006A3C  6F60               	movwf	?_strcpy& (0+255),b
 15677  006A3E  0E35               	movlw	low (_cmdbuf+8)
 15678  006A40  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15679  006A42  0E01               	movlw	high (_cmdbuf+8)
 15680  006A44  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15681  006A46  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15682  006A4A  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15683  006A4E  0012               	return	
 15684  006A50                     __end_ofPL4:
 15685                           	opt stack 0
 15686  006A50                     PL6:
 15687                           	opt stack 19
 15688  006A50  0100               	movlb	0	; () banked
 15689  006A52  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15690  006A54  6B6C               	clrf	?_strtok& (0+255),b
 15691  006A56  0E7C               	movlw	high STR_30
 15692  006A58  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15693  006A5A  0EF4               	movlw	low STR_30
 15694  006A5C  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15695  006A5E  0012               	return	
 15696  006A60                     __end_ofPL6:
 15697                           	opt stack 0
 15698  006A60                     PL8:
 15699                           	opt stack 19
 15700  006A60  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15701  006A62  6B6C               	clrf	?_strtok& (0+255),b
 15702  006A64  0E7C               	movlw	high STR_30
 15703  006A66  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15704  006A68  0EF4               	movlw	low STR_30
 15705  006A6A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15706  006A6C  0012               	return	
 15707  006A6E                     __end_ofPL8:
 15708                           	opt stack 0
 15709  006A6E                     PL10:
 15710                           	opt stack 19
 15711  006A6E  6BD5               	clrf	(??_doModeVerbose+9)& (0+255),b
 15712  006A70  6BD6               	clrf	(??_doModeVerbose+10)& (0+255),b
 15713  006A72  6BD7               	clrf	(??_doModeVerbose+11)& (0+255),b
 15714  006A74  0E1A               	movlw	26
 15715  006A76                     u19565:
 15716  006A76  90D8               	bcf	status,0,c
 15717  006A78  37D4               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 15718  006A7A  37D5               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 15719  006A7C  37D6               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 15720  006A7E  37D7               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 15721  006A80  2EE8               	decfsz	wreg,f,c
 15722  006A82  D7F9               	goto	u19565
 15723  006A84  51D0               	movf	(??_doModeVerbose+4)& (0+255),w,b
 15724  006A86  11D4               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 15725  006A88  6FD8               	movwf	(??_doModeVerbose+12)& (0+255),b
 15726  006A8A  51D1               	movf	(??_doModeVerbose+5)& (0+255),w,b
 15727  006A8C  11D5               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 15728  006A8E  6FD9               	movwf	(??_doModeVerbose+13)& (0+255),b
 15729  006A90  51D2               	movf	(??_doModeVerbose+6)& (0+255),w,b
 15730  006A92  11D6               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 15731  006A94  6FDA               	movwf	(??_doModeVerbose+14)& (0+255),b
 15732  006A96  51D3               	movf	(??_doModeVerbose+7)& (0+255),w,b
 15733  006A98  11D7               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 15734  006A9A  6FDB               	movwf	(??_doModeVerbose+15)& (0+255),b
 15735  006A9C  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15736  006A9E  11D8               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 15737  006AA0  6FDC               	movwf	(??_doModeVerbose+16)& (0+255),b
 15738  006AA2  51CD               	movf	(??_doModeVerbose+1)& (0+255),w,b
 15739  006AA4  11D9               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 15740  006AA6  6FDD               	movwf	(??_doModeVerbose+17)& (0+255),b
 15741  006AA8  51CE               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15742  006AAA  11DA               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15743  006AAC  6FDE               	movwf	(??_doModeVerbose+18)& (0+255),b
 15744  006AAE  51CF               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15745  006AB0  11DB               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15746  006AB2  6FDF               	movwf	(??_doModeVerbose+19)& (0+255),b
 15747  006AB4  0102               	movlb	2	; () banked
 15748  006AB6  0012               	return	
 15749  006AB8                     __end_ofPL10:
 15750                           	opt stack 0
 15751  006AB8                     PL28:
 15752                           	opt stack 19
 15753  006AB8  0100               	movlb	0	; () banked
 15754  006ABA  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15755  006ABC  6B6C               	clrf	?_strtok& (0+255),b
 15756  006ABE  0E7B               	movlw	high (STR_57+8)
 15757  006AC0  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15758  006AC2  0E6E               	movlw	low (STR_57+8)
 15759  006AC4  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15760  006AC6  0012               	return	
 15761  006AC8                     __end_ofPL28:
 15762                           	opt stack 0
 15763  006AC8                     PL30:
 15764                           	opt stack 19
 15765  006AC8  0E01               	movlw	high _cmdbuf
 15766  006ACA  0100               	movlb	0	; () banked
 15767  006ACC  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15768  006ACE  0E2D               	movlw	low _cmdbuf
 15769  006AD0  6F6C               	movwf	?_strtok& (0+255),b
 15770  006AD2  0E7C               	movlw	high STR_30
 15771  006AD4  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15772  006AD6  0EF4               	movlw	low STR_30
 15773  006AD8  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15774  006ADA  0012               	return	
 15775  006ADC                     __end_ofPL30:
 15776                           	opt stack 0
 15777  006ADC                     PL36:
 15778                           	opt stack 19
 15779  006ADC  0100               	movlb	0	; () banked
 15780  006ADE  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15781  006AE0  0E2D               	movlw	low _cmdbuf
 15782  006AE2  6F6C               	movwf	?_strtok& (0+255),b
 15783  006AE4  0E7B               	movlw	high (STR_57+8)
 15784  006AE6  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15785  006AE8  0E6E               	movlw	low (STR_57+8)
 15786  006AEA  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15787  006AEC  0012               	return	
 15788  006AEE                     __end_ofPL36:
 15789                           	opt stack 0
 15790  006AEE                     PL40:
 15791                           	opt stack 19
 15792  006AEE  0100               	movlb	0	; () banked
 15793  006AF0  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15794  006AF2  6BCE               	clrf	(??_doModeVerbose+2)& (0+255),b
 15795  006AF4  6BCF               	clrf	(??_doModeVerbose+3)& (0+255),b
 15796  006AF6  C0CE  F0CF         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15797  006AFA  C0CD  F0CE         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15798  006AFE  C0CC  F0CD         	movff	??_doModeVerbose,??_doModeVerbose+1
 15799  006B02  6BCC               	clrf	??_doModeVerbose& (0+255),b
 15800  006B04  0102               	movlb	2	; () banked
 15801  006B06  0012               	return	
 15802  006B08                     __end_ofPL40:
 15803                           	opt stack 0
 15804  006B08                     PL42:
 15805                           	opt stack 19
 15806  006B08  0102               	movlb	2	; () banked
 15807  006B0A  51B7               	movf	doModeVerbose@i_1183& (0+255),w,b
 15808  006B0C  C2B6  F0CC         	movff	doModeVerbose@reg,??_doModeVerbose
 15809  006B10  0100               	movlb	0	; () banked
 15810  006B12  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15811  006B14  27CC               	addwf	??_doModeVerbose& (0+255),f,b
 15812  006B16  0E00               	movlw	0
 15813  006B18  23CD               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15814  006B1A  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15815  006B1C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15816  006B1E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15817  006B20  0012               	return	
 15818  006B22                     __end_ofPL42:
 15819                           	opt stack 0
 15820  006B22                     PL54:
 15821                           	opt stack 19
 15822  006B22  6F62               	movwf	?__CANIDToRegs& (0+255),b
 15823  006B24  C2AA  F064         	movff	doModeVerbose@id_1313,?__CANIDToRegs+2
 15824  006B28  C2AB  F065         	movff	doModeVerbose@id_1313+1,?__CANIDToRegs+3
 15825  006B2C  C2AC  F066         	movff	doModeVerbose@id_1313+2,?__CANIDToRegs+4
 15826  006B30  C2AD  F067         	movff	doModeVerbose@id_1313+3,?__CANIDToRegs+5
 15827  006B34  0E01               	movlw	1
 15828  006B36  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15829  006B38  0C01               	retlw	1
 15830  006B3A                     __end_ofPL54:
 15831                           	opt stack 0
 15832  006B3A                     PL60:
 15833                           	opt stack 19
 15834  006B3A  0100               	movlb	0	; () banked
 15835  006B3C  6FD1               	movwf	(??_doModeVerbose+5)& (0+255),b
 15836  006B3E  6BD2               	clrf	(??_doModeVerbose+6)& (0+255),b
 15837  006B40  6BD3               	clrf	(??_doModeVerbose+7)& (0+255),b
 15838  006B42  C0D1  F0D3         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15839  006B46  C0D0  F0D2         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15840  006B4A  6BD1               	clrf	(??_doModeVerbose+5)& (0+255),b
 15841  006B4C  6BD0               	clrf	(??_doModeVerbose+4)& (0+255),b
 15842  006B4E  0012               	return	
 15843  006B50                     __end_ofPL60:
 15844                           	opt stack 0
 15845  006B50                     PL78:
 15846                           	opt stack 19
 15847  006B50  0E01               	movlw	high _cmdbuf
 15848  006B52  0100               	movlb	0	; () banked
 15849  006B54  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15850  006B56  0E2D               	movlw	low _cmdbuf
 15851  006B58  6F6D               	movwf	?_stristr& (0+255),b
 15852  006B5A  0E7C               	movlw	high STR_8
 15853  006B5C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15854  006B5E  0EA7               	movlw	low STR_8
 15855  006B60  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15856  006B62  0012               	return	
 15857  006B64                     __end_ofPL78:
 15858                           	opt stack 0
 15859  006B64                     PL86:
 15860                           	opt stack 19
 15861  006B64  0100               	movlb	0	; () banked
 15862  006B66  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15863  006B68  0E2D               	movlw	low _cmdbuf
 15864  006B6A  6F6D               	movwf	?_stristr& (0+255),b
 15865  006B6C  0E7C               	movlw	high STR_10
 15866  006B6E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15867  006B70  0E42               	movlw	low STR_10
 15868  006B72  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15869  006B74  0012               	return	
 15870  006B76                     __end_ofPL86:
 15871                           	opt stack 0
 15872  006B76                     PL92:
 15873                           	opt stack 19
 15874  006B76  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15875  006B78  0E2D               	movlw	low _cmdbuf
 15876  006B7A  6F6D               	movwf	?_stristr& (0+255),b
 15877  006B7C  0E7C               	movlw	high STR_16
 15878  006B7E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15879  006B80  0E34               	movlw	low STR_16
 15880  006B82  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15881  006B84  0012               	return	
 15882  006B86                     __end_ofPL92:
 15883                           	opt stack 0
 15884  006B86                     PL96:
 15885                           	opt stack 19
 15886  006B86  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15887  006B88  0E2D               	movlw	low _cmdbuf
 15888  006B8A  6F6D               	movwf	?_stristr& (0+255),b
 15889  006B8C  0E7B               	movlw	high STR_14
 15890  006B8E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15891  006B90  0EA0               	movlw	low STR_14
 15892  006B92  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15893  006B94  0012               	return	
 15894  006B96                     __end_ofPL96:
 15895                           	opt stack 0
 15896  006B96                     PL100:
 15897                           	opt stack 19
 15898  006B96  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15899  006B98  0E2D               	movlw	low _cmdbuf
 15900  006B9A  6F6D               	movwf	?_stristr& (0+255),b
 15901  006B9C  0E7C               	movlw	high STR_12
 15902  006B9E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15903  006BA0  0E82               	movlw	low STR_12
 15904  006BA2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15905  006BA4  0012               	return	
 15906  006BA6                     __end_ofPL100:
 15907                           	opt stack 0
 15908                           tblptru	equ	0xFF8
 15909                           tblptrh	equ	0xFF7
 15910                           tblptrl	equ	0xFF6
 15911                           tablat	equ	0xFF5
 15912                           prodh	equ	0xFF4
 15913                           prodl	equ	0xFF3
 15914                           intcon	equ	0xFF2
 15915                           indf0	equ	0xFEF
 15916                           postinc0	equ	0xFEE
 15917                           fsr0h	equ	0xFEA
 15918                           fsr0l	equ	0xFE9
 15919                           wreg	equ	0xFE8
 15920                           indf1	equ	0xFE7
 15921                           postinc1	equ	0xFE6
 15922                           postdec1	equ	0xFE5
 15923                           fsr1h	equ	0xFE2
 15924                           fsr1l	equ	0xFE1
 15925                           indf2	equ	0xFDF
 15926                           postinc2	equ	0xFDE
 15927                           postdec2	equ	0xFDD
 15928                           plusw2	equ	0xFDB
 15929                           fsr2h	equ	0xFDA
 15930                           fsr2l	equ	0xFD9
 15931                           status	equ	0xFD8
 15932                           
 15933 ;; *************** function _writeRegisterExtended *****************
 15934 ;; Defined at:
 15935 ;;		line 2608 in file "main.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;  nodeid          1    wreg     unsigned char 
 15938 ;;  page            2   88[BANK0 ] unsigned short 
 15939 ;;  reg             1   90[BANK0 ] unsigned char 
 15940 ;;  timeout         2   91[BANK0 ] unsigned short 
 15941 ;;  value           2   93[BANK0 ] PTR unsigned char 
 15942 ;;		 -> doModeVerbose@value_1241(1), 
 15943 ;; Auto vars:     Size  Location     Type
 15944 ;;  nodeid          1   99[BANK0 ] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;                  1    wreg      enum E15660
 15947 ;; Registers used:
 15948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15949 ;; Tracked objects:
 15950 ;;		On entry : F/2
 15951 ;;		On exit  : E/0
 15952 ;;		Unchanged: 0/0
 15953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15954 ;;      Params:         0       7       0       0       0       0       0
 15955 ;;      Locals:         0       1       0       0       0       0       0
 15956 ;;      Temps:          0       4       0       0       0       0       0
 15957 ;;      Totals:         0      12       0       0       0       0       0
 15958 ;;Total ram usage:       12 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; Hardware stack levels required when called:    7
 15961 ;; This function calls:
 15962 ;;		_sendVSCPFrame
 15963 ;;		_getVSCPFrame
 15964 ;; This function is called by:
 15965 ;;		_doModeVerbose
 15966 ;; This function uses a non-reentrant model
 15967 ;;
 15968                           
 15969                           	psect	text23
 15970  002A2E                     __ptext23:
 15971                           	opt stack 0
 15972  002A2E                     _writeRegisterExtended:
 15973                           	opt stack 21
 15974                           
 15975                           ;incstack = 0
 15976                           ;incstack = 0
 15977                           ;writeRegisterExtended@nodeid stored from wreg
 15978  002A2E  CFE8 F0C3          	movff	wreg,writeRegisterExtended@nodeid
 15979                           
 15980                           ; BSR set to: 2
 15981                           ;main.c: 2609: vscpData[ 0 ] = nodeid;
 15982  002A32  C0C3  F1E5         	movff	writeRegisterExtended@nodeid,_vscpData
 15983                           
 15984                           ; BSR set to: 2
 15985                           ;main.c: 2610: vscpData[ 1 ] = page >> 8;
 15986  002A36  0100               	movlb	0	; () banked
 15987  002A38  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15988  002A3A  0101               	movlb	1	; () banked
 15989  002A3C  6FE6               	movwf	(_vscpData+1)& (0+255),b
 15990                           
 15991                           ; BSR set to: 1
 15992                           ;main.c: 2611: vscpData[ 2 ] = page & 0xff;
 15993  002A3E  C0B8  F1E7         	movff	writeRegisterExtended@page,_vscpData+2
 15994                           
 15995                           ; BSR set to: 1
 15996                           ;main.c: 2612: vscpData[ 3 ] = reg;
 15997  002A42  C0BA  F1E8         	movff	writeRegisterExtended@reg,_vscpData+3
 15998                           
 15999                           ; BSR set to: 1
 16000                           ;main.c: 2613: vscpData[ 4 ] = *value;
 16001  002A46  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16002  002A4A  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16003  002A4E  50DF               	movf	indf2,w,c
 16004  002A50  6FE9               	movwf	(_vscpData+4)& (0+255),b
 16005                           
 16006                           ; BSR set to: 1
 16007                           ;main.c: 2615: if (sendVSCPFrame(0,
 16008                           ;main.c: 2616: 38,
 16009                           ;main.c: 2617: 0,
 16010                           ;main.c: 2618: 0,
 16011                           ;main.c: 2619: 5,
 16012                           ;main.c: 2620: vscpData)) {
 16013  002A52  0100               	movlb	0	; () banked
 16014  002A54  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16015  002A56  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 16016  002A58  0E26               	movlw	38
 16017  002A5A  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16018  002A5C  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16019  002A5E  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16020  002A60  0E05               	movlw	5
 16021  002A62  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16022  002A64  0E01               	movlw	high _vscpData
 16023  002A66  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16024  002A68  0EE5               	movlw	low _vscpData
 16025  002A6A  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16026  002A6C  EC25  F010         	call	_sendVSCPFrame	;wreg free
 16027  002A70  0900               	iorlw	0
 16028  002A72  E059               	bz	l16633
 16029                           
 16030                           ;main.c: 2622: timekeeper = 0;
 16031  002A74  0101               	movlb	1	; () banked
 16032  002A76  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16033  002A78  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16034  002A7A  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16035  002A7C  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16036                           
 16037                           ;main.c: 2623: while (timekeeper < timeout) {
 16038  002A7E  D03C               	goto	l16631
 16039  002A80                     l1166:
 16040                           
 16041                           ; BSR set to: 1
 16042  002A80  0004               	clrwdt		;# 
 16043                           
 16044                           ;main.c: 2627: if (getVSCPFrame(&vscpClass,
 16045                           ;main.c: 2628: &vscpType,
 16046                           ;main.c: 2629: &vscpNodeId,
 16047                           ;main.c: 2630: &vscpPriority,
 16048                           ;main.c: 2631: &vscpSize,
 16049                           ;main.c: 2632: vscpData)) {
 16050  002A82  0E3F               	movlw	low _vscpType
 16051  002A84  0100               	movlb	0	; () banked
 16052  002A86  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16053  002A88  0E3C               	movlw	low _vscpNodeId
 16054  002A8A  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16055  002A8C  0E3D               	movlw	low _vscpPriority
 16056  002A8E  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16057  002A90  0E3E               	movlw	low _vscpSize
 16058  002A92  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16059  002A94  0E01               	movlw	high _vscpData
 16060  002A96  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16061  002A98  0EE5               	movlw	low _vscpData
 16062  002A9A  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16063  002A9C  0E38               	movlw	_vscpClass& (0+255)
 16064  002A9E  EC1E  F00D         	call	_getVSCPFrame
 16065  002AA2  0900               	iorlw	0
 16066  002AA4  E029               	bz	l16631
 16067                           
 16068                           ; BSR set to: 0
 16069                           ;main.c: 2634: if ((nodeid == vscpNodeId) &&
 16070                           ;main.c: 2635: (5 == vscpSize) &&
 16071                           ;main.c: 2636: (0 == vscpData[ 0 ]) &&
 16072                           ;main.c: 2637: ((page >> 8) == vscpData[ 1 ]) &&
 16073                           ;main.c: 2638: ((page & 0xff) == vscpData[ 2 ]) &&
 16074                           ;main.c: 2639: (reg == vscpData[ 3 ]) &&
 16075                           ;main.c: 2640: (*value == vscpData[ 4 ])) {
 16076  002AA6  503C               	movf	_vscpNodeId,w,c
 16077  002AA8  63C3               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 16078  002AAA  D026               	goto	l16631
 16079                           
 16080                           ; BSR set to: 0
 16081  002AAC  503E               	movf	_vscpSize,w,c
 16082  002AAE  0A05               	xorlw	5
 16083  002AB0  E123               	bnz	l16631
 16084                           
 16085                           ; BSR set to: 0
 16086  002AB2  0101               	movlb	1	; () banked
 16087  002AB4  67E5               	tstfsz	_vscpData& (0+255),b
 16088  002AB6  D020               	goto	l16631
 16089                           
 16090                           ; BSR set to: 1
 16091  002AB8  0100               	movlb	0	; () banked
 16092  002ABA  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 16093  002ABC  0101               	movlb	1	; () banked
 16094  002ABE  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16095  002AC0  E11B               	bnz	l16631
 16096                           
 16097                           ; BSR set to: 1
 16098  002AC2  0100               	movlb	0	; () banked
 16099  002AC4  51B8               	movf	writeRegisterExtended@page& (0+255),w,b
 16100  002AC6  EE21  F0E7         	lfsr	2,_vscpData+2
 16101  002ACA  62DF               	cpfseq	indf2,c
 16102  002ACC  D015               	goto	l16631
 16103                           
 16104                           ; BSR set to: 1
 16105  002ACE  51BA               	movf	writeRegisterExtended@reg& (0+255),w,b
 16106  002AD0  0101               	movlb	1	; () banked
 16107  002AD2  EE21  F0E8         	lfsr	2,_vscpData+3
 16108  002AD6  62DF               	cpfseq	indf2,c
 16109  002AD8  D00F               	goto	l16631
 16110                           
 16111                           ; BSR set to: 1
 16112  002ADA  51E9               	movf	(_vscpData+4)& (0+255),w,b
 16113  002ADC  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16114  002AE0  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16115  002AE4  62DF               	cpfseq	indf2,c
 16116  002AE6  D008               	goto	l16631
 16117                           
 16118                           ; BSR set to: 1
 16119                           ;main.c: 2641: *value = vscpData[ 1 ];
 16120  002AE8  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16121  002AEC  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16122  002AF0  C1E6  FFDF         	movff	_vscpData+1,indf2
 16123                           
 16124                           ; BSR set to: 1
 16125                           ;main.c: 2642: return 1;
 16126  002AF4  0E01               	movlw	1
 16127  002AF6  D018               	goto	l1169
 16128  002AF8                     l16631:
 16129  002AF8  0100               	movlb	0	; () banked
 16130  002AFA  51BB               	movf	writeRegisterExtended@timeout& (0+255),w,b
 16131  002AFC  6FBF               	movwf	??_writeRegisterExtended& (0+255),b
 16132  002AFE  51BC               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 16133  002B00  6FC0               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 16134  002B02  6BC1               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 16135  002B04  6BC2               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 16136  002B06  51BF               	movf	??_writeRegisterExtended& (0+255),w,b
 16137  002B08  0101               	movlb	1	; () banked
 16138  002B0A  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16139  002B0C  0100               	movlb	0	; () banked
 16140  002B0E  51C0               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 16141  002B10  0101               	movlb	1	; () banked
 16142  002B12  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16143  002B14  0100               	movlb	0	; () banked
 16144  002B16  51C1               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 16145  002B18  0101               	movlb	1	; () banked
 16146  002B1A  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16147  002B1C  0100               	movlb	0	; () banked
 16148  002B1E  51C2               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 16149  002B20  0101               	movlb	1	; () banked
 16150  002B22  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16151  002B24  E3AD               	bnc	l1166
 16152  002B26                     l16633:
 16153                           
 16154                           ;main.c: 2643: }
 16155                           ;main.c: 2645: }
 16156                           ;main.c: 2647: }
 16157                           ;main.c: 2649: }
 16158                           ;main.c: 2651: return 0;
 16159  002B26  0E00               	movlw	0
 16160  002B28                     l1169:
 16161  002B28  0012               	return	
 16162  002B2A                     __end_of_writeRegisterExtended:
 16163                           	opt stack 0
 16164                           tblptru	equ	0xFF8
 16165                           tblptrh	equ	0xFF7
 16166                           tblptrl	equ	0xFF6
 16167                           tablat	equ	0xFF5
 16168                           prodh	equ	0xFF4
 16169                           prodl	equ	0xFF3
 16170                           intcon	equ	0xFF2
 16171                           indf0	equ	0xFEF
 16172                           postinc0	equ	0xFEE
 16173                           fsr0h	equ	0xFEA
 16174                           fsr0l	equ	0xFE9
 16175                           wreg	equ	0xFE8
 16176                           indf1	equ	0xFE7
 16177                           postinc1	equ	0xFE6
 16178                           postdec1	equ	0xFE5
 16179                           fsr1h	equ	0xFE2
 16180                           fsr1l	equ	0xFE1
 16181                           indf2	equ	0xFDF
 16182                           postinc2	equ	0xFDE
 16183                           postdec2	equ	0xFDD
 16184                           plusw2	equ	0xFDB
 16185                           fsr2h	equ	0xFDA
 16186                           fsr2l	equ	0xFD9
 16187                           status	equ	0xFD8
 16188                           
 16189 ;; *************** function _printBinary *****************
 16190 ;; Defined at:
 16191 ;;		line 2695 in file "main.c"
 16192 ;; Parameters:    Size  Location     Type
 16193 ;;  value           1    wreg     unsigned char 
 16194 ;; Auto vars:     Size  Location     Type
 16195 ;;  value           1    3[BANK0 ] unsigned char 
 16196 ;;  i               2    4[BANK0 ] int 
 16197 ;; Return value:  Size  Location     Type
 16198 ;;		None               void
 16199 ;; Registers used:
 16200 ;;		wreg, status,2, status,0, cstack
 16201 ;; Tracked objects:
 16202 ;;		On entry : F/2
 16203 ;;		On exit  : F/0
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16206 ;;      Params:         0       0       0       0       0       0       0
 16207 ;;      Locals:         0       3       0       0       0       0       0
 16208 ;;      Temps:          0       2       0       0       0       0       0
 16209 ;;      Totals:         0       5       0       0       0       0       0
 16210 ;;Total ram usage:        5 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    4
 16213 ;; This function calls:
 16214 ;;		_WriteUSART
 16215 ;; This function is called by:
 16216 ;;		_doModeVerbose
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           	psect	text24
 16221  001432                     __ptext24:
 16222                           	opt stack 0
 16223  001432                     _printBinary:
 16224                           	opt stack 24
 16225                           
 16226                           ;incstack = 0
 16227                           ;incstack = 0
 16228                           ;printBinary@value stored from wreg
 16229  001432  CFE8 F063          	movff	wreg,printBinary@value
 16230                           
 16231                           ; BSR set to: 2
 16232                           ;main.c: 2696: int i;
 16233                           ;main.c: 2698: for (i = 7; i >= 0; i--) {
 16234  001436  0100               	movlb	0	; () banked
 16235  001438  6B65               	clrf	(printBinary@i+1)& (0+255),b
 16236  00143A  0E07               	movlw	7
 16237  00143C  6F64               	movwf	printBinary@i& (0+255),b
 16238  00143E                     l16583:
 16239                           
 16240                           ; BSR set to: 0
 16241                           ;main.c: 2699: if (value & (1 << i)) {
 16242  00143E  C064  F061         	movff	printBinary@i,??_printBinary
 16243  001442  0E01               	movlw	1
 16244  001444  6F62               	movwf	(??_printBinary+1)& (0+255),b
 16245  001446  2B61               	incf	??_printBinary& (0+255),f,b
 16246  001448  D002               	goto	u21994
 16247  00144A                     u21995:
 16248  00144A  90D8               	bcf	status,0,c
 16249  00144C  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 16250  00144E                     u21994:
 16251  00144E  2F61               	decfsz	??_printBinary& (0+255),f,b
 16252  001450  D7FC               	goto	u21995
 16253  001452  5162               	movf	(??_printBinary+1)& (0+255),w,b
 16254  001454  1563               	andwf	printBinary@value& (0+255),w,b
 16255  001456  E006               	bz	l1189
 16256  001458                     l1185:
 16257  001458  A2AC               	btfss	4012,1,c	;volatile
 16258  00145A  D7FE               	goto	l1185
 16259                           
 16260                           ;main.c: 2701: WriteUSART('1');
 16261  00145C  0E31               	movlw	49
 16262  00145E  ECB1  F007         	call	_WriteUSART
 16263                           
 16264                           ;main.c: 2702: } else {
 16265  001462  D005               	goto	l16591
 16266  001464                     l1189:
 16267  001464  A2AC               	btfss	4012,1,c	;volatile
 16268  001466  D7FE               	goto	l1189
 16269                           
 16270                           ;main.c: 2704: WriteUSART('0');
 16271  001468  0E30               	movlw	48
 16272  00146A  ECB1  F007         	call	_WriteUSART
 16273  00146E                     l16591:
 16274  00146E  0100               	movlb	0	; () banked
 16275  001470  0764               	decf	printBinary@i& (0+255),f,b
 16276  001472  A0D8               	btfss	status,0,c
 16277  001474  0765               	decf	(printBinary@i+1)& (0+255),f,b
 16278                           
 16279                           ; BSR set to: 0
 16280  001476  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 16281                           
 16282                           ; BSR set to: 0
 16283  001478  0012               	return	
 16284  00147A  D7E1               	goto	l16583
 16285  00147C                     __end_of_printBinary:
 16286                           	opt stack 0
 16287                           tblptru	equ	0xFF8
 16288                           tblptrh	equ	0xFF7
 16289                           tblptrl	equ	0xFF6
 16290                           tablat	equ	0xFF5
 16291                           prodh	equ	0xFF4
 16292                           prodl	equ	0xFF3
 16293                           intcon	equ	0xFF2
 16294                           indf0	equ	0xFEF
 16295                           postinc0	equ	0xFEE
 16296                           fsr0h	equ	0xFEA
 16297                           fsr0l	equ	0xFE9
 16298                           wreg	equ	0xFE8
 16299                           indf1	equ	0xFE7
 16300                           postinc1	equ	0xFE6
 16301                           postdec1	equ	0xFE5
 16302                           fsr1h	equ	0xFE2
 16303                           fsr1l	equ	0xFE1
 16304                           indf2	equ	0xFDF
 16305                           postinc2	equ	0xFDE
 16306                           postdec2	equ	0xFDD
 16307                           plusw2	equ	0xFDB
 16308                           fsr2h	equ	0xFDA
 16309                           fsr2l	equ	0xFD9
 16310                           status	equ	0xFD8
 16311                           
 16312 ;; *************** function _readRegisterExtended *****************
 16313 ;; Defined at:
 16314 ;;		line 2507 in file "main.c"
 16315 ;; Parameters:    Size  Location     Type
 16316 ;;  nodeid          1    wreg     unsigned char 
 16317 ;;  page            2   88[BANK0 ] unsigned short 
 16318 ;;  reg             1   90[BANK0 ] unsigned char 
 16319 ;;  timeout         2   91[BANK0 ] unsigned short 
 16320 ;;  value           2   93[BANK0 ] PTR unsigned char 
 16321 ;;		 -> doModeVerbose@value_1265(1), doModeVerbose@value(1), 
 16322 ;; Auto vars:     Size  Location     Type
 16323 ;;  nodeid          1   99[BANK0 ] unsigned char 
 16324 ;; Return value:  Size  Location     Type
 16325 ;;                  1    wreg      enum E15660
 16326 ;; Registers used:
 16327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16328 ;; Tracked objects:
 16329 ;;		On entry : F/2
 16330 ;;		On exit  : E/0
 16331 ;;		Unchanged: 0/0
 16332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16333 ;;      Params:         0       7       0       0       0       0       0
 16334 ;;      Locals:         0       1       0       0       0       0       0
 16335 ;;      Temps:          0       4       0       0       0       0       0
 16336 ;;      Totals:         0      12       0       0       0       0       0
 16337 ;;Total ram usage:       12 bytes
 16338 ;; Hardware stack levels used:    1
 16339 ;; Hardware stack levels required when called:    7
 16340 ;; This function calls:
 16341 ;;		_sendVSCPFrame
 16342 ;;		_getVSCPFrame
 16343 ;; This function is called by:
 16344 ;;		_doModeVerbose
 16345 ;; This function uses a non-reentrant model
 16346 ;;
 16347                           
 16348                           	psect	text25
 16349  002842                     __ptext25:
 16350                           	opt stack 0
 16351  002842                     _readRegisterExtended:
 16352                           	opt stack 21
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;incstack = 0
 16356                           ;incstack = 0
 16357                           ;readRegisterExtended@nodeid stored from wreg
 16358  002842  CFE8 F0C3          	movff	wreg,readRegisterExtended@nodeid
 16359                           
 16360                           ; BSR set to: 2
 16361                           ;main.c: 2508: vscpData[ 0 ] = nodeid;
 16362  002846  C0C3  F1E5         	movff	readRegisterExtended@nodeid,_vscpData
 16363                           
 16364                           ; BSR set to: 2
 16365                           ;main.c: 2509: vscpData[ 1 ] = page >> 8;
 16366  00284A  0100               	movlb	0	; () banked
 16367  00284C  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16368  00284E  0101               	movlb	1	; () banked
 16369  002850  6FE6               	movwf	(_vscpData+1)& (0+255),b
 16370                           
 16371                           ; BSR set to: 1
 16372                           ;main.c: 2510: vscpData[ 2 ] = page & 0xff;
 16373  002852  C0B8  F1E7         	movff	readRegisterExtended@page,_vscpData+2
 16374                           
 16375                           ; BSR set to: 1
 16376                           ;main.c: 2511: vscpData[ 3 ] = reg;
 16377  002856  C0BA  F1E8         	movff	readRegisterExtended@reg,_vscpData+3
 16378                           
 16379                           ; BSR set to: 1
 16380                           ;main.c: 2512: vscpData[ 4 ] = 1;
 16381  00285A  0E01               	movlw	1
 16382  00285C  6FE9               	movwf	(_vscpData+4)& (0+255),b
 16383                           
 16384                           ; BSR set to: 1
 16385                           ;main.c: 2514: if (sendVSCPFrame(0,
 16386                           ;main.c: 2515: 37,
 16387                           ;main.c: 2516: 0,
 16388                           ;main.c: 2517: 0,
 16389                           ;main.c: 2518: 5,
 16390                           ;main.c: 2519: vscpData)) {
 16391  00285E  0100               	movlb	0	; () banked
 16392  002860  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16393  002862  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 16394  002864  0E25               	movlw	37
 16395  002866  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16396  002868  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16397  00286A  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16398  00286C  0E05               	movlw	5
 16399  00286E  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16400  002870  0E01               	movlw	high _vscpData
 16401  002872  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16402  002874  0EE5               	movlw	low _vscpData
 16403  002876  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16404  002878  EC25  F010         	call	_sendVSCPFrame	;wreg free
 16405  00287C  0900               	iorlw	0
 16406  00287E  E058               	bz	l16231
 16407                           
 16408                           ;main.c: 2521: timekeeper = 0;
 16409  002880  0101               	movlb	1	; () banked
 16410  002882  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16411  002884  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16412  002886  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16413  002888  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16414                           
 16415                           ;main.c: 2522: while (timekeeper < timeout) {
 16416  00288A  D03B               	goto	l16229
 16417  00288C                     l1148:
 16418                           
 16419                           ; BSR set to: 1
 16420  00288C  0004               	clrwdt		;# 
 16421                           
 16422                           ;main.c: 2526: if (getVSCPFrame(&vscpClass,
 16423                           ;main.c: 2527: &vscpType,
 16424                           ;main.c: 2528: &vscpNodeId,
 16425                           ;main.c: 2529: &vscpPriority,
 16426                           ;main.c: 2530: &vscpSize,
 16427                           ;main.c: 2531: vscpData)) {
 16428  00288E  0E3F               	movlw	low _vscpType
 16429  002890  0100               	movlb	0	; () banked
 16430  002892  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16431  002894  0E3C               	movlw	low _vscpNodeId
 16432  002896  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16433  002898  0E3D               	movlw	low _vscpPriority
 16434  00289A  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16435  00289C  0E3E               	movlw	low _vscpSize
 16436  00289E  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16437  0028A0  0E01               	movlw	high _vscpData
 16438  0028A2  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16439  0028A4  0EE5               	movlw	low _vscpData
 16440  0028A6  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16441  0028A8  0E38               	movlw	_vscpClass& (0+255)
 16442  0028AA  EC1E  F00D         	call	_getVSCPFrame
 16443  0028AE  0900               	iorlw	0
 16444  0028B0  E028               	bz	l16229
 16445                           
 16446                           ; BSR set to: 0
 16447                           ;main.c: 2532: if ((nodeid == vscpNodeId) &&
 16448                           ;main.c: 2533: (0 == vscpClass) &&
 16449                           ;main.c: 2534: (39 == vscpType) &&
 16450                           ;main.c: 2535: (5 == vscpSize) &&
 16451                           ;main.c: 2536: (0 == vscpData[ 0 ]) &&
 16452                           ;main.c: 2537: ((page >> 8) == vscpData[ 1 ]) &&
 16453                           ;main.c: 2538: ((page & 0xff) == vscpData[ 2 ]) &&
 16454                           ;main.c: 2539: (reg == vscpData[ 3 ])) {
 16455  0028B2  503C               	movf	_vscpNodeId,w,c
 16456  0028B4  63C3               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16457  0028B6  D025               	goto	l16229
 16458                           
 16459                           ; BSR set to: 0
 16460  0028B8  5039               	movf	_vscpClass+1,w,c
 16461  0028BA  1038               	iorwf	_vscpClass,w,c
 16462  0028BC  E122               	bnz	l16229
 16463                           
 16464                           ; BSR set to: 0
 16465  0028BE  503F               	movf	_vscpType,w,c
 16466  0028C0  0A27               	xorlw	39
 16467  0028C2  E11F               	bnz	l16229
 16468                           
 16469                           ; BSR set to: 0
 16470  0028C4  503E               	movf	_vscpSize,w,c
 16471  0028C6  0A05               	xorlw	5
 16472  0028C8  E11C               	bnz	l16229
 16473                           
 16474                           ; BSR set to: 0
 16475  0028CA  0101               	movlb	1	; () banked
 16476  0028CC  67E5               	tstfsz	_vscpData& (0+255),b
 16477  0028CE  D019               	goto	l16229
 16478                           
 16479                           ; BSR set to: 1
 16480  0028D0  0100               	movlb	0	; () banked
 16481  0028D2  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16482  0028D4  0101               	movlb	1	; () banked
 16483  0028D6  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16484  0028D8  E114               	bnz	l16229
 16485                           
 16486                           ; BSR set to: 1
 16487  0028DA  0100               	movlb	0	; () banked
 16488  0028DC  51B8               	movf	readRegisterExtended@page& (0+255),w,b
 16489  0028DE  EE21  F0E7         	lfsr	2,_vscpData+2
 16490  0028E2  62DF               	cpfseq	indf2,c
 16491  0028E4  D00E               	goto	l16229
 16492                           
 16493                           ; BSR set to: 1
 16494  0028E6  51BA               	movf	readRegisterExtended@reg& (0+255),w,b
 16495  0028E8  0101               	movlb	1	; () banked
 16496  0028EA  EE21  F0E8         	lfsr	2,_vscpData+3
 16497  0028EE  62DF               	cpfseq	indf2,c
 16498  0028F0  D008               	goto	l16229
 16499                           
 16500                           ; BSR set to: 1
 16501                           ;main.c: 2540: *value = vscpData[ 4 ];
 16502  0028F2  C0BD  FFD9         	movff	readRegisterExtended@value,fsr2l
 16503  0028F6  C0BE  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16504  0028FA  C1E9  FFDF         	movff	_vscpData+4,indf2
 16505                           
 16506                           ; BSR set to: 1
 16507                           ;main.c: 2541: return 1;
 16508  0028FE  0E01               	movlw	1
 16509  002900  D018               	goto	l1151
 16510  002902                     l16229:
 16511  002902  0100               	movlb	0	; () banked
 16512  002904  51BB               	movf	readRegisterExtended@timeout& (0+255),w,b
 16513  002906  6FBF               	movwf	??_readRegisterExtended& (0+255),b
 16514  002908  51BC               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16515  00290A  6FC0               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16516  00290C  6BC1               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16517  00290E  6BC2               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16518  002910  51BF               	movf	??_readRegisterExtended& (0+255),w,b
 16519  002912  0101               	movlb	1	; () banked
 16520  002914  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16521  002916  0100               	movlb	0	; () banked
 16522  002918  51C0               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16523  00291A  0101               	movlb	1	; () banked
 16524  00291C  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16525  00291E  0100               	movlb	0	; () banked
 16526  002920  51C1               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16527  002922  0101               	movlb	1	; () banked
 16528  002924  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16529  002926  0100               	movlb	0	; () banked
 16530  002928  51C2               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16531  00292A  0101               	movlb	1	; () banked
 16532  00292C  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16533  00292E  E3AE               	bnc	l1148
 16534  002930                     l16231:
 16535                           
 16536                           ;main.c: 2542: }
 16537                           ;main.c: 2543: }
 16538                           ;main.c: 2544: }
 16539                           ;main.c: 2545: }
 16540                           ;main.c: 2547: return 0;
 16541  002930  0E00               	movlw	0
 16542  002932                     l1151:
 16543  002932  0012               	return	
 16544  002934                     __end_of_readRegisterExtended:
 16545                           	opt stack 0
 16546                           tblptru	equ	0xFF8
 16547                           tblptrh	equ	0xFF7
 16548                           tblptrl	equ	0xFF6
 16549                           tablat	equ	0xFF5
 16550                           prodh	equ	0xFF4
 16551                           prodl	equ	0xFF3
 16552                           intcon	equ	0xFF2
 16553                           indf0	equ	0xFEF
 16554                           postinc0	equ	0xFEE
 16555                           fsr0h	equ	0xFEA
 16556                           fsr0l	equ	0xFE9
 16557                           wreg	equ	0xFE8
 16558                           indf1	equ	0xFE7
 16559                           postinc1	equ	0xFE6
 16560                           postdec1	equ	0xFE5
 16561                           fsr1h	equ	0xFE2
 16562                           fsr1l	equ	0xFE1
 16563                           indf2	equ	0xFDF
 16564                           postinc2	equ	0xFDE
 16565                           postdec2	equ	0xFDD
 16566                           plusw2	equ	0xFDB
 16567                           fsr2h	equ	0xFDA
 16568                           fsr2l	equ	0xFD9
 16569                           status	equ	0xFD8
 16570                           
 16571 ;; *************** function _strcpy *****************
 16572 ;; Defined at:
 16573 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16576 ;;		 -> cmdbuf(80), 
 16577 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16578 ;;		 -> cmdbuf(80), 
 16579 ;; Auto vars:     Size  Location     Type
 16580 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16581 ;;		 -> cmdbuf(80), 
 16582 ;; Return value:  Size  Location     Type
 16583 ;;                  2    0[BANK0 ] PTR unsigned char 
 16584 ;; Registers used:
 16585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16586 ;; Tracked objects:
 16587 ;;		On entry : F/0
 16588 ;;		On exit  : F/0
 16589 ;;		Unchanged: 0/0
 16590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16591 ;;      Params:         0       4       0       0       0       0       0
 16592 ;;      Locals:         0       2       0       0       0       0       0
 16593 ;;      Temps:          0       0       0       0       0       0       0
 16594 ;;      Totals:         0       6       0       0       0       0       0
 16595 ;;Total ram usage:        6 bytes
 16596 ;; Hardware stack levels used:    1
 16597 ;; Hardware stack levels required when called:    3
 16598 ;; This function calls:
 16599 ;;		Nothing
 16600 ;; This function is called by:
 16601 ;;		_doModeVerbose
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           	psect	text26
 16606  001030                     __ptext26:
 16607                           	opt stack 0
 16608  001030                     _strcpy:
 16609                           	opt stack 25
 16610                           
 16611                           ; BSR set to: 0
 16612                           
 16613                           ;incstack = 0
 16614                           ;incstack = 0
 16615  001030  C060  F064         	movff	strcpy@to,strcpy@cp
 16616  001034  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16617  001038  D004               	goto	l16189
 16618  00103A                     l16187:
 16619                           
 16620                           ; BSR set to: 0
 16621  00103A  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16622  00103C  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16623  00103E  4B62               	infsnz	strcpy@from& (0+255),f,b
 16624  001040  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16625  001042                     l16189:
 16626                           
 16627                           ; BSR set to: 0
 16628  001042  C062  FFD9         	movff	strcpy@from,fsr2l
 16629  001046  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16630  00104A  C064  FFE1         	movff	strcpy@cp,fsr1l
 16631  00104E  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16632  001052  CFDF FFE7          	movff	indf2,indf1
 16633  001056  50E7               	movf	indf1,w,c
 16634  001058  B4D8               	btfsc	status,2,c
 16635                           
 16636                           ; BSR set to: 0
 16637  00105A  0012               	return	
 16638  00105C  D7EE               	goto	l16187
 16639  00105E                     __end_of_strcpy:
 16640                           	opt stack 0
 16641                           tblptru	equ	0xFF8
 16642                           tblptrh	equ	0xFF7
 16643                           tblptrl	equ	0xFF6
 16644                           tablat	equ	0xFF5
 16645                           prodh	equ	0xFF4
 16646                           prodl	equ	0xFF3
 16647                           intcon	equ	0xFF2
 16648                           indf0	equ	0xFEF
 16649                           postinc0	equ	0xFEE
 16650                           fsr0h	equ	0xFEA
 16651                           fsr0l	equ	0xFE9
 16652                           wreg	equ	0xFE8
 16653                           indf1	equ	0xFE7
 16654                           postinc1	equ	0xFE6
 16655                           postdec1	equ	0xFE5
 16656                           fsr1h	equ	0xFE2
 16657                           fsr1l	equ	0xFE1
 16658                           indf2	equ	0xFDF
 16659                           postinc2	equ	0xFDE
 16660                           postdec2	equ	0xFDD
 16661                           plusw2	equ	0xFDB
 16662                           fsr2h	equ	0xFDA
 16663                           fsr2l	equ	0xFD9
 16664                           status	equ	0xFD8
 16665                           
 16666 ;; *************** function _findNodes *****************
 16667 ;; Defined at:
 16668 ;;		line 2846 in file "main.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;		None
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;  i               1  107[BANK0 ] unsigned char 
 16673 ;;  value           1  106[BANK0 ] unsigned char 
 16674 ;;  nFound          1  105[BANK0 ] unsigned char 
 16675 ;; Return value:  Size  Location     Type
 16676 ;;		None               void
 16677 ;; Registers used:
 16678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16679 ;; Tracked objects:
 16680 ;;		On entry : F/0
 16681 ;;		On exit  : 0/0
 16682 ;;		Unchanged: 0/0
 16683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16684 ;;      Params:         0       0       0       0       0       0       0
 16685 ;;      Locals:         0       5       0       0       0       0       0
 16686 ;;      Temps:          0       0       0       0       0       0       0
 16687 ;;      Totals:         0       5       0       0       0       0       0
 16688 ;;Total ram usage:        5 bytes
 16689 ;; Hardware stack levels used:    1
 16690 ;; Hardware stack levels required when called:    9
 16691 ;; This function calls:
 16692 ;;		_putsUSART
 16693 ;;		_WriteUSART
 16694 ;;		_printNodeFirmwareVersion
 16695 ;;		_printGUID
 16696 ;;		_printMDF
 16697 ;;		_itoa
 16698 ;;		_readRegister
 16699 ;; This function is called by:
 16700 ;;		_doModeVerbose
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           	psect	text27
 16705  002D44                     __ptext27:
 16706                           	opt stack 0
 16707  002D44                     _findNodes:
 16708                           	opt stack 19
 16709                           
 16710                           ; BSR set to: 0
 16711                           ;main.c: 2847: uint8_t nFound = 0;
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;incstack = 0
 16715                           ;incstack = 0
 16716  002D44  6BC9               	clrf	findNodes@nFound& (0+255),b
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;main.c: 2848: uint8_t i;
 16720                           ;main.c: 2849: uint8_t value;
 16721                           ;main.c: 2851: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 16722  002D46  506F               	movf	3951,w,c	;volatile
 16723  002D48  0BE0               	andlw	224
 16724  002D4A  E007               	bz	l16135
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;main.c: 2852: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 16728  002D4C  0E70               	movlw	high STR_50
 16729  002D4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16730  002D50  0EC7               	movlw	low STR_50
 16731  002D52  6F61               	movwf	?_putsUSART& (0+255),b
 16732  002D54  EC69  F00A         	call	_putsUSART	;wreg free
 16733  002D58  D083               	goto	l1251
 16734  002D5A                     l16135:
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;main.c: 2854: }
 16738                           ;main.c: 2856: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16739  002D5A  0E6D               	movlw	high STR_270
 16740  002D5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16741  002D5E  0E96               	movlw	low STR_270
 16742  002D60  6F61               	movwf	?_putsUSART& (0+255),b
 16743  002D62  EC69  F00A         	call	_putsUSART	;wreg free
 16744                           
 16745                           ;main.c: 2858: for (i = 1; i != 0; i++) {
 16746  002D66  0E01               	movlw	1
 16747  002D68  0100               	movlb	0	; () banked
 16748  002D6A  6FCB               	movwf	findNodes@i& (0+255),b
 16749  002D6C                     l1252:
 16750                           
 16751                           ; BSR set to: 0
 16752  002D6C  0004               	clrwdt		;# 
 16753                           
 16754                           ;main.c: 2862: if (readRegister(i,
 16755                           ;main.c: 2863: 0xE0,
 16756                           ;main.c: 2864: rwtimeout,
 16757                           ;main.c: 2865: &value)) {
 16758  002D6E  0EE0               	movlw	224
 16759  002D70  0100               	movlb	0	; () banked
 16760  002D72  6FB8               	movwf	?_readRegister& (0+255),b
 16761  002D74  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 16762  002D78  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16763  002D7A  0ECA               	movlw	low findNodes@value
 16764  002D7C  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16765  002D7E  51CB               	movf	findNodes@i& (0+255),w,b
 16766  002D80  EC3A  F011         	call	_readRegister
 16767  002D84  0900               	iorlw	0
 16768  002D86  E043               	bz	l16169
 16769                           
 16770                           ;main.c: 2866: putsUSART((char *) "\r\nNode found with node id = ");
 16771  002D88  0E77               	movlw	high STR_271
 16772  002D8A  0100               	movlb	0	; () banked
 16773  002D8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16774  002D8E  0E8D               	movlw	low STR_271
 16775  002D90  6F61               	movwf	?_putsUSART& (0+255),b
 16776  002D92  EC69  F00A         	call	_putsUSART	;wreg free
 16777                           
 16778                           ;main.c: 2867: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16779  002D96  662C               	tstfsz	_bHex,c
 16780  002D98  D004               	goto	l16151
 16781  002D9A  0100               	movlb	0	; () banked
 16782  002D9C  6BC8               	clrf	(_findNodes$1578+1)& (0+255),b
 16783  002D9E  0E0A               	movlw	10
 16784  002DA0  D003               	goto	L18
 16785  002DA2                     l16151:
 16786  002DA2  0100               	movlb	0	; () banked
 16787  002DA4  6BC8               	clrf	(_findNodes$1578+1)& (0+255),b
 16788  002DA6  0E10               	movlw	16
 16789  002DA8                     L18:
 16790  002DA8  6FC7               	movwf	_findNodes$1578& (0+255),b
 16791                           
 16792                           ; BSR set to: 0
 16793  002DAA  0E01               	movlw	high _wrkbuf
 16794  002DAC  0100               	movlb	0	; () banked
 16795  002DAE  6F71               	movwf	(?_itoa+1)& (0+255),b
 16796  002DB0  0E7D               	movlw	low _wrkbuf
 16797  002DB2  6F70               	movwf	?_itoa& (0+255),b
 16798  002DB4  C03C  F072         	movff	_vscpNodeId,?_itoa+2
 16799  002DB8  6B73               	clrf	(?_itoa+3)& (0+255),b
 16800  002DBA  C0C7  F074         	movff	_findNodes$1578,?_itoa+4
 16801  002DBE  C0C8  F075         	movff	_findNodes$1578+1,?_itoa+5
 16802  002DC2  EC79  F008         	call	_itoa	;wreg free
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;main.c: 2868: putsUSART(wrkbuf);
 16806  002DC6  0E01               	movlw	high _wrkbuf
 16807  002DC8  0100               	movlb	0	; () banked
 16808  002DCA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16809  002DCC  0E7D               	movlw	low _wrkbuf
 16810  002DCE  6F61               	movwf	?_putsUSART& (0+255),b
 16811  002DD0  EC69  F00A         	call	_putsUSART	;wreg free
 16812                           
 16813                           ;main.c: 2869: putsUSART((char *) "\r\n");
 16814  002DD4  0E70               	movlw	high (STR_228+50)
 16815  002DD6  0100               	movlb	0	; () banked
 16816  002DD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16817  002DDA  0EC4               	movlw	low (STR_228+50)
 16818  002DDC  6F61               	movwf	?_putsUSART& (0+255),b
 16819  002DDE  EC69  F00A         	call	_putsUSART	;wreg free
 16820                           
 16821                           ;main.c: 2870: printNodeFirmwareVersion(i);
 16822  002DE2  0100               	movlb	0	; () banked
 16823  002DE4  51CB               	movf	findNodes@i& (0+255),w,b
 16824  002DE6  EC9C  F011         	call	_printNodeFirmwareVersion
 16825                           
 16826                           ;main.c: 2871: printGUID(i);
 16827  002DEA  0100               	movlb	0	; () banked
 16828  002DEC  51CB               	movf	findNodes@i& (0+255),w,b
 16829  002DEE  EC9A  F014         	call	_printGUID
 16830                           
 16831                           ;main.c: 2872: printMDF(i);
 16832  002DF2  0100               	movlb	0	; () banked
 16833  002DF4  51CB               	movf	findNodes@i& (0+255),w,b
 16834  002DF6  ECF4  F00D         	call	_printMDF
 16835                           
 16836                           ;main.c: 2873: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16837  002DFA  0E6D               	movlw	high STR_270
 16838  002DFC  0100               	movlb	0	; () banked
 16839  002DFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16840  002E00  0E96               	movlw	low STR_270
 16841  002E02  6F61               	movwf	?_putsUSART& (0+255),b
 16842  002E04  EC69  F00A         	call	_putsUSART	;wreg free
 16843                           
 16844                           ;main.c: 2874: nFound++;
 16845  002E08  0100               	movlb	0	; () banked
 16846  002E0A  2BC9               	incf	findNodes@nFound& (0+255),f,b
 16847                           
 16848                           ;main.c: 2875: }
 16849  002E0C  D004               	goto	l16173
 16850  002E0E                     l16169:
 16851                           
 16852                           ;main.c: 2876: else {
 16853                           ;main.c: 2877: WriteUSART('.');
 16854  002E0E  0E2E               	movlw	46
 16855  002E10  ECB1  F007         	call	_WriteUSART
 16856                           
 16857                           ;main.c: 2878: (!TXSTAbits.TRMT);
 16858  002E14  50AC               	movf	4012,w,c	;volatile
 16859  002E16                     l16173:
 16860  002E16  0100               	movlb	0	; () banked
 16861  002E18  2BCB               	incf	findNodes@i& (0+255),f,b
 16862                           
 16863                           ; BSR set to: 0
 16864  002E1A  67CB               	tstfsz	findNodes@i& (0+255),b
 16865  002E1C  D7A7               	goto	l1252
 16866                           
 16867                           ; BSR set to: 0
 16868                           ;main.c: 2879: }
 16869                           ;main.c: 2881: }
 16870                           ;main.c: 2883: putsUSART((char *) "\r\n");
 16871  002E1E  0E70               	movlw	high (STR_228+50)
 16872  002E20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16873  002E22  0EC4               	movlw	low (STR_228+50)
 16874  002E24  6F61               	movwf	?_putsUSART& (0+255),b
 16875  002E26  EC69  F00A         	call	_putsUSART	;wreg free
 16876                           
 16877                           ;main.c: 2884: itoa(wrkbuf, nFound, 10);
 16878  002E2A  0E01               	movlw	high _wrkbuf
 16879  002E2C  0100               	movlb	0	; () banked
 16880  002E2E  6F71               	movwf	(?_itoa+1)& (0+255),b
 16881  002E30  0E7D               	movlw	low _wrkbuf
 16882  002E32  6F70               	movwf	?_itoa& (0+255),b
 16883  002E34  C0C9  F072         	movff	findNodes@nFound,?_itoa+2
 16884  002E38  6B73               	clrf	(?_itoa+3)& (0+255),b
 16885  002E3A  6B75               	clrf	(?_itoa+5)& (0+255),b
 16886  002E3C  0E0A               	movlw	10
 16887  002E3E  6F74               	movwf	(?_itoa+4)& (0+255),b
 16888  002E40  EC79  F008         	call	_itoa	;wreg free
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;main.c: 2885: putsUSART(wrkbuf);
 16892  002E44  0E01               	movlw	high _wrkbuf
 16893  002E46  0100               	movlb	0	; () banked
 16894  002E48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16895  002E4A  0E7D               	movlw	low _wrkbuf
 16896  002E4C  6F61               	movwf	?_putsUSART& (0+255),b
 16897  002E4E  EC69  F00A         	call	_putsUSART	;wreg free
 16898                           
 16899                           ;main.c: 2886: putsUSART((char *) " node(s) found\r\n");
 16900  002E52  0E7A               	movlw	high STR_275
 16901  002E54  0100               	movlb	0	; () banked
 16902  002E56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16903  002E58  0EE6               	movlw	low STR_275
 16904  002E5A  6F61               	movwf	?_putsUSART& (0+255),b
 16905  002E5C  EC69  F00A         	call	_putsUSART	;wreg free
 16906  002E60                     l1251:
 16907  002E60  0012               	return	
 16908  002E62                     __end_of_findNodes:
 16909                           	opt stack 0
 16910                           tblptru	equ	0xFF8
 16911                           tblptrh	equ	0xFF7
 16912                           tblptrl	equ	0xFF6
 16913                           tablat	equ	0xFF5
 16914                           prodh	equ	0xFF4
 16915                           prodl	equ	0xFF3
 16916                           intcon	equ	0xFF2
 16917                           indf0	equ	0xFEF
 16918                           postinc0	equ	0xFEE
 16919                           fsr0h	equ	0xFEA
 16920                           fsr0l	equ	0xFE9
 16921                           wreg	equ	0xFE8
 16922                           indf1	equ	0xFE7
 16923                           postinc1	equ	0xFE6
 16924                           postdec1	equ	0xFE5
 16925                           fsr1h	equ	0xFE2
 16926                           fsr1l	equ	0xFE1
 16927                           indf2	equ	0xFDF
 16928                           postinc2	equ	0xFDE
 16929                           postdec2	equ	0xFDD
 16930                           plusw2	equ	0xFDB
 16931                           fsr2h	equ	0xFDA
 16932                           fsr2l	equ	0xFD9
 16933                           status	equ	0xFD8
 16934                           
 16935 ;; *************** function _printMDF *****************
 16936 ;; Defined at:
 16937 ;;		line 2937 in file "main.c"
 16938 ;; Parameters:    Size  Location     Type
 16939 ;;  nodeid          1    wreg     unsigned char 
 16940 ;; Auto vars:     Size  Location     Type
 16941 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16942 ;;  p               2   99[BANK0 ] PTR unsigned char 
 16943 ;;		 -> wrkbuf(80), 
 16944 ;;  i               1  101[BANK0 ] unsigned char 
 16945 ;;  value           1   98[BANK0 ] unsigned char 
 16946 ;; Return value:  Size  Location     Type
 16947 ;;		None               void
 16948 ;; Registers used:
 16949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16950 ;; Tracked objects:
 16951 ;;		On entry : D/2
 16952 ;;		On exit  : 0/0
 16953 ;;		Unchanged: 0/0
 16954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16955 ;;      Params:         0       0       0       0       0       0       0
 16956 ;;      Locals:         0       5       0       0       0       0       0
 16957 ;;      Temps:          0       0       0       0       0       0       0
 16958 ;;      Totals:         0       5       0       0       0       0       0
 16959 ;;Total ram usage:        5 bytes
 16960 ;; Hardware stack levels used:    1
 16961 ;; Hardware stack levels required when called:    8
 16962 ;; This function calls:
 16963 ;;		_putsUSART
 16964 ;;		_memset
 16965 ;;		_readRegister
 16966 ;; This function is called by:
 16967 ;;		_doModeVerbose
 16968 ;;		_findNodes
 16969 ;; This function uses a non-reentrant model
 16970 ;;
 16971                           
 16972                           	psect	text28
 16973  001BE8                     __ptext28:
 16974                           	opt stack 0
 16975  001BE8                     _printMDF:
 16976                           	opt stack 20
 16977                           
 16978                           ;incstack = 0
 16979                           ;incstack = 0
 16980                           ;printMDF@nodeid stored from wreg
 16981  001BE8  CFE8 F0C1          	movff	wreg,printMDF@nodeid
 16982                           
 16983                           ;main.c: 2938: uint8_t i;
 16984                           ;main.c: 2939: uint8_t value;
 16985                           ;main.c: 2940: char *p = wrkbuf;
 16986  001BEC  0E01               	movlw	high _wrkbuf
 16987  001BEE  0100               	movlb	0	; () banked
 16988  001BF0  6FC4               	movwf	(printMDF@p+1)& (0+255),b
 16989  001BF2  0E7D               	movlw	low _wrkbuf
 16990  001BF4  6FC3               	movwf	printMDF@p& (0+255),b
 16991                           
 16992                           ; BSR set to: 0
 16993                           ;main.c: 2941: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16994  001BF6  0E01               	movlw	high _wrkbuf
 16995  001BF8  6F61               	movwf	(?_memset+1)& (0+255),b
 16996  001BFA  0E7D               	movlw	low _wrkbuf
 16997  001BFC  D83A               	call	PL18	;call to abstracted procedure
 16998  001BFE  EC01  F008         	call	_memset	;wreg free
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;main.c: 2942: putsUSART((char *) "MDF = http://");
 17002  001C02  0E7B               	movlw	high STR_281
 17003  001C04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17004  001C06  0E28               	movlw	low STR_281
 17005  001C08  6F61               	movwf	?_putsUSART& (0+255),b
 17006  001C0A  EC69  F00A         	call	_putsUSART	;wreg free
 17007                           
 17008                           ;main.c: 2944: for (i = 0; i < 32; i++) {
 17009  001C0E  0100               	movlb	0	; () banked
 17010  001C10  6BC5               	clrf	printMDF@i& (0+255),b
 17011  001C12                     l16709:
 17012                           
 17013                           ; BSR set to: 0
 17014                           ;main.c: 2945: if (readRegister(nodeid,
 17015                           ;main.c: 2946: 0xE0 + i,
 17016                           ;main.c: 2947: rwtimeout,
 17017                           ;main.c: 2948: &value)) {
 17018  001C12  51C5               	movf	printMDF@i& (0+255),w,b
 17019  001C14  0FE0               	addlw	224
 17020  001C16  6FB8               	movwf	?_readRegister& (0+255),b
 17021  001C18  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17022  001C1C  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17023  001C1E  0EC2               	movlw	low printMDF@value
 17024  001C20  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17025  001C22  51C1               	movf	printMDF@nodeid& (0+255),w,b
 17026  001C24  EC3A  F011         	call	_readRegister
 17027  001C28  0900               	iorlw	0
 17028  001C2A  E00A               	bz	l16715
 17029                           
 17030                           ;main.c: 2949: *p = value;
 17031  001C2C  C0C3  FFD9         	movff	printMDF@p,fsr2l
 17032  001C30  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 17033  001C34  C0C2  FFDF         	movff	printMDF@value,indf2
 17034  001C38                     l16713:
 17035                           
 17036                           ;main.c: 2950: p++;
 17037  001C38  0100               	movlb	0	; () banked
 17038  001C3A  4BC3               	infsnz	printMDF@p& (0+255),f,b
 17039  001C3C  2BC4               	incf	(printMDF@p+1)& (0+255),f,b
 17040                           
 17041                           ;main.c: 2952: }
 17042  001C3E  D007               	goto	l16719
 17043  001C40                     l16715:
 17044                           
 17045                           ;main.c: 2953: else {
 17046                           ;main.c: 2954: *p = '?';
 17047  001C40  C0C3  FFD9         	movff	printMDF@p,fsr2l
 17048  001C44  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 17049  001C48  0E3F               	movlw	63
 17050  001C4A  6EDF               	movwf	indf2,c
 17051  001C4C  D7F5               	goto	l16713
 17052  001C4E                     l16719:
 17053                           
 17054                           ; BSR set to: 0
 17055  001C4E  2BC5               	incf	printMDF@i& (0+255),f,b
 17056                           
 17057                           ; BSR set to: 0
 17058  001C50  0E1F               	movlw	31
 17059  001C52  65C5               	cpfsgt	printMDF@i& (0+255),b
 17060  001C54  D7DE               	goto	l16709
 17061                           
 17062                           ; BSR set to: 0
 17063                           ;main.c: 2956: }
 17064                           ;main.c: 2957: }
 17065                           ;main.c: 2959: putsUSART(wrkbuf);
 17066  001C56  0E01               	movlw	high _wrkbuf
 17067  001C58  0100               	movlb	0	; () banked
 17068  001C5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17069  001C5C  0E7D               	movlw	low _wrkbuf
 17070  001C5E  6F61               	movwf	?_putsUSART& (0+255),b
 17071  001C60  EC69  F00A         	call	_putsUSART	;wreg free
 17072                           
 17073                           ;main.c: 2960: putsUSART((char *) "\r\n");
 17074  001C64  0E70               	movlw	high (STR_228+50)
 17075  001C66  0100               	movlb	0	; () banked
 17076  001C68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17077  001C6A  0EC4               	movlw	low (STR_228+50)
 17078  001C6C  6F61               	movwf	?_putsUSART& (0+255),b
 17079  001C6E  EF69  F00A         	goto	_putsUSART	;wreg free
 17080  001C72                     __end_of_printMDF:
 17081                           	opt stack 0
 17082  001C72                     PL18:
 17083                           	opt stack 19
 17084  001C72  6F60               	movwf	?_memset& (0+255),b
 17085  001C74  6B63               	clrf	(?_memset+3)& (0+255),b
 17086  001C76  6B62               	clrf	(?_memset+2)& (0+255),b
 17087  001C78  6B65               	clrf	(?_memset+5)& (0+255),b
 17088  001C7A  0E50               	movlw	80
 17089  001C7C  6F64               	movwf	(?_memset+4)& (0+255),b
 17090  001C7E  0C50               	retlw	80
 17091  001C80                     __end_ofPL18:
 17092                           	opt stack 0
 17093                           tblptru	equ	0xFF8
 17094                           tblptrh	equ	0xFF7
 17095                           tblptrl	equ	0xFF6
 17096                           tablat	equ	0xFF5
 17097                           prodh	equ	0xFF4
 17098                           prodl	equ	0xFF3
 17099                           intcon	equ	0xFF2
 17100                           indf0	equ	0xFEF
 17101                           postinc0	equ	0xFEE
 17102                           fsr0h	equ	0xFEA
 17103                           fsr0l	equ	0xFE9
 17104                           wreg	equ	0xFE8
 17105                           indf1	equ	0xFE7
 17106                           postinc1	equ	0xFE6
 17107                           postdec1	equ	0xFE5
 17108                           fsr1h	equ	0xFE2
 17109                           fsr1l	equ	0xFE1
 17110                           indf2	equ	0xFDF
 17111                           postinc2	equ	0xFDE
 17112                           postdec2	equ	0xFDD
 17113                           plusw2	equ	0xFDB
 17114                           fsr2h	equ	0xFDA
 17115                           fsr2l	equ	0xFD9
 17116                           status	equ	0xFD8
 17117                           
 17118 ;; *************** function _printGUID *****************
 17119 ;; Defined at:
 17120 ;;		line 2896 in file "main.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;  nodeid          1    wreg     unsigned char 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17125 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17126 ;;  i               1  102[BANK0 ] unsigned char 
 17127 ;;  value           1  101[BANK0 ] unsigned char 
 17128 ;; Return value:  Size  Location     Type
 17129 ;;		None               void
 17130 ;; Registers used:
 17131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17132 ;; Tracked objects:
 17133 ;;		On entry : D/2
 17134 ;;		On exit  : 0/0
 17135 ;;		Unchanged: 0/0
 17136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17137 ;;      Params:         0       0       0       0       0       0       0
 17138 ;;      Locals:         0       6       0       0       0       0       0
 17139 ;;      Temps:          0       0       0       0       0       0       0
 17140 ;;      Totals:         0       6       0       0       0       0       0
 17141 ;;Total ram usage:        6 bytes
 17142 ;; Hardware stack levels used:    1
 17143 ;; Hardware stack levels required when called:    8
 17144 ;; This function calls:
 17145 ;;		_putsUSART
 17146 ;;		_memset
 17147 ;;		_strlen
 17148 ;;		_itoa
 17149 ;;		_readRegister
 17150 ;;		_strcat
 17151 ;; This function is called by:
 17152 ;;		_doModeVerbose
 17153 ;;		_findNodes
 17154 ;; This function uses a non-reentrant model
 17155 ;;
 17156                           
 17157                           	psect	text29
 17158  002934                     __ptext29:
 17159                           	opt stack 0
 17160  002934                     _printGUID:
 17161                           	opt stack 20
 17162                           
 17163                           ;incstack = 0
 17164                           ;incstack = 0
 17165                           ;printGUID@nodeid stored from wreg
 17166  002934  CFE8 F0C1          	movff	wreg,printGUID@nodeid
 17167                           
 17168                           ;main.c: 2897: uint8_t i;
 17169                           ;main.c: 2898: uint8_t value;
 17170                           ;main.c: 2899: char buf[3];
 17171                           ;main.c: 2901: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 17172  002938  0E01               	movlw	high _wrkbuf
 17173  00293A  0100               	movlb	0	; () banked
 17174  00293C  6F61               	movwf	(?_memset+1)& (0+255),b
 17175  00293E  0E7D               	movlw	low _wrkbuf
 17176  002940  EC39  F00E         	call	PL18	;call to abstracted procedure
 17177  002944  EC01  F008         	call	_memset	;wreg free
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;main.c: 2902: putsUSART((char *) "GUID = ");
 17181  002948  0E7B               	movlw	high STR_276
 17182  00294A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17183  00294C  0ECA               	movlw	low STR_276
 17184  00294E  6F61               	movwf	?_putsUSART& (0+255),b
 17185  002950  EC69  F00A         	call	_putsUSART	;wreg free
 17186                           
 17187                           ;main.c: 2904: for (i = 0; i < 16; i++) {
 17188  002954  0100               	movlb	0	; () banked
 17189  002956  6BC6               	clrf	printGUID@i& (0+255),b
 17190  002958                     l16675:
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;main.c: 2905: if (readRegister(nodeid,
 17194                           ;main.c: 2906: 0xD0 + i,
 17195                           ;main.c: 2907: rwtimeout,
 17196                           ;main.c: 2908: &value)) {
 17197  002958  51C6               	movf	printGUID@i& (0+255),w,b
 17198  00295A  0FD0               	addlw	208
 17199  00295C  6FB8               	movwf	?_readRegister& (0+255),b
 17200  00295E  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17201  002962  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17202  002964  0EC5               	movlw	low printGUID@value
 17203  002966  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17204  002968  51C1               	movf	printGUID@nodeid& (0+255),w,b
 17205  00296A  EC3A  F011         	call	_readRegister
 17206  00296E  0900               	iorlw	0
 17207  002970  E029               	bz	l16685
 17208                           
 17209                           ;main.c: 2909: itoa(buf, value, 16);
 17210  002972  0100               	movlb	0	; () banked
 17211  002974  0E00               	movlw	high printGUID@buf
 17212  002976  6F71               	movwf	(?_itoa+1)& (0+255),b
 17213  002978  0EC2               	movlw	low printGUID@buf
 17214  00297A  6F70               	movwf	?_itoa& (0+255),b
 17215  00297C  C0C5  F072         	movff	printGUID@value,?_itoa+2
 17216  002980  6B73               	clrf	(?_itoa+3)& (0+255),b
 17217  002982  6B75               	clrf	(?_itoa+5)& (0+255),b
 17218  002984  0E10               	movlw	16
 17219  002986  6F74               	movwf	(?_itoa+4)& (0+255),b
 17220  002988  EC79  F008         	call	_itoa	;wreg free
 17221                           
 17222                           ; BSR set to: 0
 17223                           ;main.c: 2910: if (1 == strlen(buf)) {
 17224  00298C  0E00               	movlw	high printGUID@buf
 17225  00298E  6F61               	movwf	(?_strlen+1)& (0+255),b
 17226  002990  0EC2               	movlw	low printGUID@buf
 17227  002992  6F60               	movwf	?_strlen& (0+255),b
 17228  002994  EC4B  F009         	call	_strlen	;wreg free
 17229  002998  0560               	decf	?_strlen& (0+255),w,b
 17230  00299A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 17231  00299C  E10F               	bnz	l16683
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;main.c: 2911: strcat(wrkbuf, "0");
 17235  00299E  0E01               	movlw	high _wrkbuf
 17236  0029A0  0100               	movlb	0	; () banked
 17237  0029A2  6F61               	movwf	(?_strcat+1)& (0+255),b
 17238  0029A4  0E7D               	movlw	low _wrkbuf
 17239  0029A6  6F60               	movwf	?_strcat& (0+255),b
 17240  0029A8  0E7C               	movlw	high STR_277
 17241  0029AA  6F63               	movwf	(?_strcat+3)& (0+255),b
 17242  0029AC  0EF8               	movlw	low STR_277
 17243  0029AE  6F62               	movwf	(?_strcat+2)& (0+255),b
 17244  0029B0  EC95  F00A         	call	_strcat	;wreg free
 17245                           
 17246                           ;main.c: 2912: strcat(wrkbuf, buf);
 17247  0029B4  D832               	call	PL72	;call to abstracted procedure
 17248  0029B6  EC95  F00A         	call	_strcat	;wreg free
 17249                           
 17250                           ;main.c: 2913: } else {
 17251  0029BA  D00F               	goto	l16687
 17252  0029BC                     l16683:
 17253                           
 17254                           ; BSR set to: 0
 17255                           ;main.c: 2914: strcat(wrkbuf, buf);
 17256  0029BC  D82E               	call	PL72	;call to abstracted procedure
 17257  0029BE  EC95  F00A         	call	_strcat	;wreg free
 17258  0029C2  D00B               	goto	l16687
 17259  0029C4                     l16685:
 17260                           
 17261                           ;main.c: 2918: strcat(wrkbuf, "--");
 17262  0029C4  0E01               	movlw	high _wrkbuf
 17263  0029C6  0100               	movlb	0	; () banked
 17264  0029C8  6F61               	movwf	(?_strcat+1)& (0+255),b
 17265  0029CA  0E7D               	movlw	low _wrkbuf
 17266  0029CC  6F60               	movwf	?_strcat& (0+255),b
 17267  0029CE  0E7C               	movlw	high STR_278
 17268  0029D0  6F63               	movwf	(?_strcat+3)& (0+255),b
 17269  0029D2  0EE4               	movlw	low STR_278
 17270  0029D4  6F62               	movwf	(?_strcat+2)& (0+255),b
 17271  0029D6  EC95  F00A         	call	_strcat	;wreg free
 17272  0029DA                     l16687:
 17273                           
 17274                           ;main.c: 2919: }
 17275                           ;main.c: 2921: if (i < 15) {
 17276  0029DA  0E0F               	movlw	15
 17277  0029DC  0100               	movlb	0	; () banked
 17278  0029DE  61C6               	cpfslt	printGUID@i& (0+255),b
 17279  0029E0  D00A               	goto	l16691
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;main.c: 2922: strcat(wrkbuf, ":");
 17283  0029E2  0E01               	movlw	high _wrkbuf
 17284  0029E4  6F61               	movwf	(?_strcat+1)& (0+255),b
 17285  0029E6  0E7D               	movlw	low _wrkbuf
 17286  0029E8  6F60               	movwf	?_strcat& (0+255),b
 17287  0029EA  0E7C               	movlw	high STR_279
 17288  0029EC  6F63               	movwf	(?_strcat+3)& (0+255),b
 17289  0029EE  0EFA               	movlw	low STR_279
 17290  0029F0  6F62               	movwf	(?_strcat+2)& (0+255),b
 17291  0029F2  EC95  F00A         	call	_strcat	;wreg free
 17292  0029F6                     l16691:
 17293  0029F6  0100               	movlb	0	; () banked
 17294  0029F8  2BC6               	incf	printGUID@i& (0+255),f,b
 17295                           
 17296                           ; BSR set to: 0
 17297  0029FA  0E0F               	movlw	15
 17298  0029FC  65C6               	cpfsgt	printGUID@i& (0+255),b
 17299  0029FE  D7AC               	goto	l16675
 17300                           
 17301                           ; BSR set to: 0
 17302                           ;main.c: 2923: }
 17303                           ;main.c: 2925: }
 17304                           ;main.c: 2927: putsUSART(wrkbuf);
 17305  002A00  0E01               	movlw	high _wrkbuf
 17306  002A02  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17307  002A04  0E7D               	movlw	low _wrkbuf
 17308  002A06  6F61               	movwf	?_putsUSART& (0+255),b
 17309  002A08  EC69  F00A         	call	_putsUSART	;wreg free
 17310                           
 17311                           ;main.c: 2928: putsUSART((char *) "\r\n");
 17312  002A0C  0E70               	movlw	high (STR_228+50)
 17313  002A0E  0100               	movlb	0	; () banked
 17314  002A10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17315  002A12  0EC4               	movlw	low (STR_228+50)
 17316  002A14  6F61               	movwf	?_putsUSART& (0+255),b
 17317  002A16  EF69  F00A         	goto	_putsUSART	;wreg free
 17318  002A1A                     __end_of_printGUID:
 17319                           	opt stack 0
 17320  002A1A                     PL72:
 17321                           	opt stack 20
 17322  002A1A  0E01               	movlw	high _wrkbuf
 17323  002A1C  0100               	movlb	0	; () banked
 17324  002A1E  6F61               	movwf	(?_strcat+1)& (0+255),b
 17325  002A20  0E7D               	movlw	low _wrkbuf
 17326  002A22  6F60               	movwf	?_strcat& (0+255),b
 17327  002A24  0E00               	movlw	high printGUID@buf
 17328  002A26  6F63               	movwf	(?_strcat+3)& (0+255),b
 17329  002A28  0EC2               	movlw	low printGUID@buf
 17330  002A2A  6F62               	movwf	(?_strcat+2)& (0+255),b
 17331  002A2C  0012               	return	
 17332  002A2E                     __end_ofPL72:
 17333                           	opt stack 0
 17334                           tblptru	equ	0xFF8
 17335                           tblptrh	equ	0xFF7
 17336                           tblptrl	equ	0xFF6
 17337                           tablat	equ	0xFF5
 17338                           prodh	equ	0xFF4
 17339                           prodl	equ	0xFF3
 17340                           intcon	equ	0xFF2
 17341                           indf0	equ	0xFEF
 17342                           postinc0	equ	0xFEE
 17343                           fsr0h	equ	0xFEA
 17344                           fsr0l	equ	0xFE9
 17345                           wreg	equ	0xFE8
 17346                           indf1	equ	0xFE7
 17347                           postinc1	equ	0xFE6
 17348                           postdec1	equ	0xFE5
 17349                           fsr1h	equ	0xFE2
 17350                           fsr1l	equ	0xFE1
 17351                           indf2	equ	0xFDF
 17352                           postinc2	equ	0xFDE
 17353                           postdec2	equ	0xFDD
 17354                           plusw2	equ	0xFDB
 17355                           fsr2h	equ	0xFDA
 17356                           fsr2l	equ	0xFD9
 17357                           status	equ	0xFD8
 17358                           
 17359 ;; *************** function _printNodeFirmwareVersion *****************
 17360 ;; Defined at:
 17361 ;;		line 2968 in file "main.c"
 17362 ;; Parameters:    Size  Location     Type
 17363 ;;  nodeid          1    wreg     unsigned char 
 17364 ;; Auto vars:     Size  Location     Type
 17365 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17366 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17367 ;;  i               1  102[BANK0 ] unsigned char 
 17368 ;;  value           1  101[BANK0 ] unsigned char 
 17369 ;; Return value:  Size  Location     Type
 17370 ;;		None               void
 17371 ;; Registers used:
 17372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17373 ;; Tracked objects:
 17374 ;;		On entry : D/2
 17375 ;;		On exit  : 0/0
 17376 ;;		Unchanged: 0/0
 17377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17378 ;;      Params:         0       0       0       0       0       0       0
 17379 ;;      Locals:         0       6       0       0       0       0       0
 17380 ;;      Temps:          0       0       0       0       0       0       0
 17381 ;;      Totals:         0       6       0       0       0       0       0
 17382 ;;Total ram usage:        6 bytes
 17383 ;; Hardware stack levels used:    1
 17384 ;; Hardware stack levels required when called:    8
 17385 ;; This function calls:
 17386 ;;		_putsUSART
 17387 ;;		_memset
 17388 ;;		_itoa
 17389 ;;		_readRegister
 17390 ;;		_strcat
 17391 ;; This function is called by:
 17392 ;;		_doModeVerbose
 17393 ;;		_findNodes
 17394 ;; This function uses a non-reentrant model
 17395 ;;
 17396                           
 17397                           	psect	text30
 17398  002338                     __ptext30:
 17399                           	opt stack 0
 17400  002338                     _printNodeFirmwareVersion:
 17401                           	opt stack 20
 17402                           
 17403                           ;incstack = 0
 17404                           ;incstack = 0
 17405                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17406  002338  CFE8 F0C1          	movff	wreg,printNodeFirmwareVersion@nodeid
 17407                           
 17408                           ;main.c: 2969: uint8_t i;
 17409                           ;main.c: 2970: uint8_t value;
 17410                           ;main.c: 2971: char buf[3];
 17411                           ;main.c: 2973: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17412  00233C  0E01               	movlw	high _wrkbuf
 17413  00233E  0100               	movlb	0	; () banked
 17414  002340  6F61               	movwf	(?_memset+1)& (0+255),b
 17415  002342  0E7D               	movlw	low _wrkbuf
 17416  002344  EC39  F00E         	call	PL18	;call to abstracted procedure
 17417  002348  EC01  F008         	call	_memset	;wreg free
 17418                           
 17419                           ; BSR set to: 0
 17420                           ;main.c: 2974: putsUSART((char *) "Firmware version = ");
 17421  00234C  0E7A               	movlw	high STR_283
 17422  00234E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17423  002350  0E67               	movlw	low STR_283
 17424  002352  6F61               	movwf	?_putsUSART& (0+255),b
 17425  002354  EC69  F00A         	call	_putsUSART	;wreg free
 17426                           
 17427                           ;main.c: 2976: for (i = 0; i < 3; i++) {
 17428  002358  0100               	movlb	0	; () banked
 17429  00235A  6BC6               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17430  00235C                     l16647:
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;main.c: 2977: if (readRegister(nodeid,
 17434                           ;main.c: 2978: 0x94 + i,
 17435                           ;main.c: 2979: rwtimeout,
 17436                           ;main.c: 2980: &value)) {
 17437  00235C  51C6               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17438  00235E  0F94               	addlw	148
 17439  002360  6FB8               	movwf	?_readRegister& (0+255),b
 17440  002362  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17441  002366  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17442  002368  0EC5               	movlw	low printNodeFirmwareVersion@value
 17443  00236A  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17444  00236C  51C1               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17445  00236E  EC3A  F011         	call	_readRegister
 17446  002372  0900               	iorlw	0
 17447  002374  E019               	bz	l16653
 17448                           
 17449                           ;main.c: 2981: itoa(buf, value, 16);
 17450  002376  0100               	movlb	0	; () banked
 17451  002378  0E00               	movlw	high printNodeFirmwareVersion@buf
 17452  00237A  6F71               	movwf	(?_itoa+1)& (0+255),b
 17453  00237C  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17454  00237E  6F70               	movwf	?_itoa& (0+255),b
 17455  002380  C0C5  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17456  002384  6B73               	clrf	(?_itoa+3)& (0+255),b
 17457  002386  6B75               	clrf	(?_itoa+5)& (0+255),b
 17458  002388  0E10               	movlw	16
 17459  00238A  6F74               	movwf	(?_itoa+4)& (0+255),b
 17460  00238C  EC79  F008         	call	_itoa	;wreg free
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;main.c: 2982: strcat(wrkbuf, buf);
 17464  002390  0E01               	movlw	high _wrkbuf
 17465  002392  0100               	movlb	0	; () banked
 17466  002394  6F61               	movwf	(?_strcat+1)& (0+255),b
 17467  002396  0E7D               	movlw	low _wrkbuf
 17468  002398  6F60               	movwf	?_strcat& (0+255),b
 17469  00239A  0E00               	movlw	high printNodeFirmwareVersion@buf
 17470  00239C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17471  00239E  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17472  0023A0  6F62               	movwf	(?_strcat+2)& (0+255),b
 17473  0023A2  EC95  F00A         	call	_strcat	;wreg free
 17474                           
 17475                           ;main.c: 2983: }
 17476  0023A6  D00B               	goto	l16655
 17477  0023A8                     l16653:
 17478                           
 17479                           ;main.c: 2984: else {
 17480                           ;main.c: 2985: strcat(wrkbuf, "?");
 17481  0023A8  0E01               	movlw	high _wrkbuf
 17482  0023AA  0100               	movlb	0	; () banked
 17483  0023AC  6F61               	movwf	(?_strcat+1)& (0+255),b
 17484  0023AE  0E7D               	movlw	low _wrkbuf
 17485  0023B0  6F60               	movwf	?_strcat& (0+255),b
 17486  0023B2  0E7C               	movlw	high STR_160
 17487  0023B4  6F63               	movwf	(?_strcat+3)& (0+255),b
 17488  0023B6  0EFC               	movlw	low STR_160
 17489  0023B8  6F62               	movwf	(?_strcat+2)& (0+255),b
 17490  0023BA  EC95  F00A         	call	_strcat	;wreg free
 17491  0023BE                     l16655:
 17492                           
 17493                           ;main.c: 2986: }
 17494                           ;main.c: 2988: if (i < 2) {
 17495  0023BE  0E02               	movlw	2
 17496  0023C0  0100               	movlb	0	; () banked
 17497  0023C2  61C6               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17498  0023C4  D00A               	goto	l16659
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;main.c: 2989: strcat(wrkbuf, ".");
 17502  0023C6  0E01               	movlw	high _wrkbuf
 17503  0023C8  6F61               	movwf	(?_strcat+1)& (0+255),b
 17504  0023CA  0E7D               	movlw	low _wrkbuf
 17505  0023CC  6F60               	movwf	?_strcat& (0+255),b
 17506  0023CE  0E7C               	movlw	high STR_285
 17507  0023D0  6F63               	movwf	(?_strcat+3)& (0+255),b
 17508  0023D2  0EF6               	movlw	low STR_285
 17509  0023D4  6F62               	movwf	(?_strcat+2)& (0+255),b
 17510  0023D6  EC95  F00A         	call	_strcat	;wreg free
 17511  0023DA                     l16659:
 17512  0023DA  0100               	movlb	0	; () banked
 17513  0023DC  2BC6               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17514                           
 17515                           ; BSR set to: 0
 17516  0023DE  0E02               	movlw	2
 17517  0023E0  65C6               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17518  0023E2  D7BC               	goto	l16647
 17519                           
 17520                           ; BSR set to: 0
 17521                           ;main.c: 2990: }
 17522                           ;main.c: 2992: }
 17523                           ;main.c: 2994: putsUSART(wrkbuf);
 17524  0023E4  0E01               	movlw	high _wrkbuf
 17525  0023E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17526  0023E8  0E7D               	movlw	low _wrkbuf
 17527  0023EA  6F61               	movwf	?_putsUSART& (0+255),b
 17528  0023EC  EC69  F00A         	call	_putsUSART	;wreg free
 17529                           
 17530                           ;main.c: 2995: putsUSART((char *) "\r\n");
 17531  0023F0  0E70               	movlw	high (STR_228+50)
 17532  0023F2  0100               	movlb	0	; () banked
 17533  0023F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17534  0023F6  0EC4               	movlw	low (STR_228+50)
 17535  0023F8  6F61               	movwf	?_putsUSART& (0+255),b
 17536  0023FA  EF69  F00A         	goto	_putsUSART	;wreg free
 17537  0023FE                     __end_of_printNodeFirmwareVersion:
 17538                           	opt stack 0
 17539                           tblptru	equ	0xFF8
 17540                           tblptrh	equ	0xFF7
 17541                           tblptrl	equ	0xFF6
 17542                           tablat	equ	0xFF5
 17543                           prodh	equ	0xFF4
 17544                           prodl	equ	0xFF3
 17545                           intcon	equ	0xFF2
 17546                           indf0	equ	0xFEF
 17547                           postinc0	equ	0xFEE
 17548                           fsr0h	equ	0xFEA
 17549                           fsr0l	equ	0xFE9
 17550                           wreg	equ	0xFE8
 17551                           indf1	equ	0xFE7
 17552                           postinc1	equ	0xFE6
 17553                           postdec1	equ	0xFE5
 17554                           fsr1h	equ	0xFE2
 17555                           fsr1l	equ	0xFE1
 17556                           indf2	equ	0xFDF
 17557                           postinc2	equ	0xFDE
 17558                           postdec2	equ	0xFDD
 17559                           plusw2	equ	0xFDB
 17560                           fsr2h	equ	0xFDA
 17561                           fsr2l	equ	0xFD9
 17562                           status	equ	0xFD8
 17563                           
 17564 ;; *************** function _strcat *****************
 17565 ;; Defined at:
 17566 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17567 ;; Parameters:    Size  Location     Type
 17568 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17569 ;;		 -> wrkbuf(80), 
 17570 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17571 ;;		 -> STR_285(2), STR_284(2), printNodeFirmwareVersion@buf(3), STR_279(2), 
 17572 ;;		 -> STR_278(3), STR_277(2), printGUID@buf(3), 
 17573 ;; Auto vars:     Size  Location     Type
 17574 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17575 ;;		 -> wrkbuf(80), 
 17576 ;; Return value:  Size  Location     Type
 17577 ;;                  2    0[BANK0 ] PTR unsigned char 
 17578 ;; Registers used:
 17579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17580 ;; Tracked objects:
 17581 ;;		On entry : F/0
 17582 ;;		On exit  : 0/0
 17583 ;;		Unchanged: 0/0
 17584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17585 ;;      Params:         0       4       0       0       0       0       0
 17586 ;;      Locals:         0       2       0       0       0       0       0
 17587 ;;      Temps:          0       0       0       0       0       0       0
 17588 ;;      Totals:         0       6       0       0       0       0       0
 17589 ;;Total ram usage:        6 bytes
 17590 ;; Hardware stack levels used:    1
 17591 ;; Hardware stack levels required when called:    3
 17592 ;; This function calls:
 17593 ;;		Nothing
 17594 ;; This function is called by:
 17595 ;;		_printGUID
 17596 ;;		_printNodeFirmwareVersion
 17597 ;; This function uses a non-reentrant model
 17598 ;;
 17599                           
 17600                           	psect	text31
 17601  00152A                     __ptext31:
 17602                           	opt stack 0
 17603  00152A                     _strcat:
 17604                           	opt stack 24
 17605                           
 17606                           ; BSR set to: 0
 17607                           
 17608                           ;incstack = 0
 17609                           ;incstack = 0
 17610  00152A  C060  F064         	movff	strcat@to,strcat@cp
 17611  00152E  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17612  001532  D002               	goto	l17319
 17613  001534                     l17317:
 17614                           
 17615                           ; BSR set to: 0
 17616  001534  4B64               	infsnz	strcat@cp& (0+255),f,b
 17617  001536  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17618  001538                     l17319:
 17619                           
 17620                           ; BSR set to: 0
 17621  001538  C064  FFD9         	movff	strcat@cp,fsr2l
 17622  00153C  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17623  001540  50DF               	movf	indf2,w,c
 17624  001542  E006               	bz	l17323
 17625  001544  D7F7               	goto	l17317
 17626  001546                     l17321:
 17627  001546  0100               	movlb	0	; () banked
 17628  001548  4B64               	infsnz	strcat@cp& (0+255),f,b
 17629  00154A  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17630  00154C  4B62               	infsnz	strcat@from& (0+255),f,b
 17631  00154E  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17632  001550                     l17323:
 17633                           
 17634                           ; BSR set to: 0
 17635  001550  C062  FFF6         	movff	strcat@from,tblptrl
 17636  001554  C063  FFF7         	movff	strcat@from+1,tblptrh
 17637  001558  6AF8               	clrf	tblptru,c
 17638  00155A  C064  FFD9         	movff	strcat@cp,fsr2l
 17639  00155E  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17640  001562  0E05               	movlw	(high __ramtop+-1)
 17641  001564  64F7               	cpfsgt	tblptrh,c
 17642  001566  D003               	bra	u23327
 17643  001568  0008               	tblrd		*
 17644  00156A  50F5               	movf	tablat,w,c
 17645  00156C  D005               	bra	u23320
 17646  00156E                     u23327:
 17647  00156E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17648  001572  CFF7 FFEA          	movff	tblptrh,fsr0h
 17649  001576  50EF               	movf	indf0,w,c
 17650  001578                     u23320:
 17651  001578  6EDF               	movwf	indf2,c
 17652  00157A  50DF               	movf	indf2,w,c
 17653  00157C  B4D8               	btfsc	status,2,c
 17654  00157E  0012               	return	
 17655  001580  D7E2               	goto	l17321
 17656  001582                     __end_of_strcat:
 17657                           	opt stack 0
 17658                           tblptru	equ	0xFF8
 17659                           tblptrh	equ	0xFF7
 17660                           tblptrl	equ	0xFF6
 17661                           tablat	equ	0xFF5
 17662                           prodh	equ	0xFF4
 17663                           prodl	equ	0xFF3
 17664                           intcon	equ	0xFF2
 17665                           indf0	equ	0xFEF
 17666                           postinc0	equ	0xFEE
 17667                           fsr0h	equ	0xFEA
 17668                           fsr0l	equ	0xFE9
 17669                           wreg	equ	0xFE8
 17670                           indf1	equ	0xFE7
 17671                           postinc1	equ	0xFE6
 17672                           postdec1	equ	0xFE5
 17673                           fsr1h	equ	0xFE2
 17674                           fsr1l	equ	0xFE1
 17675                           indf2	equ	0xFDF
 17676                           postinc2	equ	0xFDE
 17677                           postdec2	equ	0xFDD
 17678                           plusw2	equ	0xFDB
 17679                           fsr2h	equ	0xFDA
 17680                           fsr2l	equ	0xFD9
 17681                           status	equ	0xFD8
 17682                           
 17683 ;; *************** function _readRegister *****************
 17684 ;; Defined at:
 17685 ;;		line 2461 in file "main.c"
 17686 ;; Parameters:    Size  Location     Type
 17687 ;;  nodeid          1    wreg     unsigned char 
 17688 ;;  reg             1   88[BANK0 ] unsigned char 
 17689 ;;  timeout         2   89[BANK0 ] unsigned short 
 17690 ;;  value           1   91[BANK0 ] PTR unsigned char 
 17691 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17692 ;; Auto vars:     Size  Location     Type
 17693 ;;  nodeid          1   96[BANK0 ] unsigned char 
 17694 ;; Return value:  Size  Location     Type
 17695 ;;                  1    wreg      enum E15660
 17696 ;; Registers used:
 17697 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17698 ;; Tracked objects:
 17699 ;;		On entry : F/0
 17700 ;;		On exit  : E/0
 17701 ;;		Unchanged: 0/0
 17702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17703 ;;      Params:         0       4       0       0       0       0       0
 17704 ;;      Locals:         0       1       0       0       0       0       0
 17705 ;;      Temps:          0       4       0       0       0       0       0
 17706 ;;      Totals:         0       9       0       0       0       0       0
 17707 ;;Total ram usage:        9 bytes
 17708 ;; Hardware stack levels used:    1
 17709 ;; Hardware stack levels required when called:    7
 17710 ;; This function calls:
 17711 ;;		_sendVSCPFrame
 17712 ;;		_getVSCPFrame
 17713 ;; This function is called by:
 17714 ;;		_findNodes
 17715 ;;		_printGUID
 17716 ;;		_printMDF
 17717 ;;		_printNodeFirmwareVersion
 17718 ;; This function uses a non-reentrant model
 17719 ;;
 17720                           
 17721                           	psect	text32
 17722  002274                     __ptext32:
 17723                           	opt stack 0
 17724  002274                     _readRegister:
 17725                           	opt stack 20
 17726                           
 17727                           ;incstack = 0
 17728                           ;incstack = 0
 17729                           ;readRegister@nodeid stored from wreg
 17730  002274  CFE8 F0C0          	movff	wreg,readRegister@nodeid
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;main.c: 2462: vscpData[ 0 ] = nodeid;
 17734  002278  C0C0  F1E5         	movff	readRegister@nodeid,_vscpData
 17735                           
 17736                           ; BSR set to: 0
 17737                           ;main.c: 2463: vscpData[ 1 ] = reg;
 17738  00227C  C0B8  F1E6         	movff	readRegister@reg,_vscpData+1
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;main.c: 2465: if (sendVSCPFrame(0,
 17742                           ;main.c: 2466: 9,
 17743                           ;main.c: 2467: 0,
 17744                           ;main.c: 2468: 0,
 17745                           ;main.c: 2469: 2,
 17746                           ;main.c: 2470: vscpData)) {
 17747  002280  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17748  002282  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 17749  002284  0E09               	movlw	9
 17750  002286  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17751  002288  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17752  00228A  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17753  00228C  0E02               	movlw	2
 17754  00228E  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17755  002290  0E01               	movlw	high _vscpData
 17756  002292  0100               	movlb	0	; () banked
 17757  002294  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17758  002296  0EE5               	movlw	low _vscpData
 17759  002298  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17760  00229A  EC25  F010         	call	_sendVSCPFrame	;wreg free
 17761  00229E  0900               	iorlw	0
 17762  0022A0  E049               	bz	l17311
 17763                           
 17764                           ;main.c: 2472: timekeeper = 0;
 17765  0022A2  0101               	movlb	1	; () banked
 17766  0022A4  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17767  0022A6  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17768  0022A8  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17769  0022AA  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17770                           
 17771                           ;main.c: 2473: while (timekeeper < timeout) {
 17772  0022AC  D02C               	goto	l17309
 17773  0022AE                     l1139:
 17774                           
 17775                           ; BSR set to: 1
 17776  0022AE  0004               	clrwdt		;# 
 17777                           
 17778                           ;main.c: 2477: if (getVSCPFrame(&vscpClass,
 17779                           ;main.c: 2478: &vscpType,
 17780                           ;main.c: 2479: &vscpNodeId,
 17781                           ;main.c: 2480: &vscpPriority,
 17782                           ;main.c: 2481: &vscpSize,
 17783                           ;main.c: 2482: vscpData)) {
 17784  0022B0  0E3F               	movlw	low _vscpType
 17785  0022B2  0100               	movlb	0	; () banked
 17786  0022B4  6F73               	movwf	?_getVSCPFrame& (0+255),b
 17787  0022B6  0E3C               	movlw	low _vscpNodeId
 17788  0022B8  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17789  0022BA  0E3D               	movlw	low _vscpPriority
 17790  0022BC  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17791  0022BE  0E3E               	movlw	low _vscpSize
 17792  0022C0  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17793  0022C2  0E01               	movlw	high _vscpData
 17794  0022C4  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17795  0022C6  0EE5               	movlw	low _vscpData
 17796  0022C8  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17797  0022CA  0E38               	movlw	_vscpClass& (0+255)
 17798  0022CC  EC1E  F00D         	call	_getVSCPFrame
 17799  0022D0  0900               	iorlw	0
 17800  0022D2  E019               	bz	l17309
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;main.c: 2483: if ((nodeid == vscpNodeId) &&
 17804                           ;main.c: 2484: (0 == vscpClass) &&
 17805                           ;main.c: 2485: (10 == vscpType) &&
 17806                           ;main.c: 2486: (2 == vscpSize) &&
 17807                           ;main.c: 2487: (reg == vscpData[ 0 ])) {
 17808  0022D4  503C               	movf	_vscpNodeId,w,c
 17809  0022D6  63C0               	cpfseq	readRegister@nodeid& (0+255),b
 17810  0022D8  D016               	goto	l17309
 17811                           
 17812                           ; BSR set to: 0
 17813  0022DA  5039               	movf	_vscpClass+1,w,c
 17814  0022DC  1038               	iorwf	_vscpClass,w,c
 17815  0022DE  E113               	bnz	l17309
 17816                           
 17817                           ; BSR set to: 0
 17818  0022E0  503F               	movf	_vscpType,w,c
 17819  0022E2  0A0A               	xorlw	10
 17820  0022E4  E110               	bnz	l17309
 17821                           
 17822                           ; BSR set to: 0
 17823  0022E6  503E               	movf	_vscpSize,w,c
 17824  0022E8  0A02               	xorlw	2
 17825  0022EA  E10D               	bnz	l17309
 17826                           
 17827                           ; BSR set to: 0
 17828  0022EC  0101               	movlb	1	; () banked
 17829  0022EE  51E5               	movf	_vscpData& (0+255),w,b
 17830  0022F0  0100               	movlb	0	; () banked
 17831  0022F2  63B8               	cpfseq	readRegister@reg& (0+255),b
 17832  0022F4  D008               	goto	l17309
 17833                           
 17834                           ; BSR set to: 0
 17835                           ;main.c: 2488: *value = vscpData[ 1 ];
 17836  0022F6  51BB               	movf	readRegister@value& (0+255),w,b
 17837  0022F8  6ED9               	movwf	fsr2l,c
 17838  0022FA  6ADA               	clrf	fsr2h,c
 17839  0022FC  0101               	movlb	1	; () banked
 17840  0022FE  C1E6  FFDF         	movff	_vscpData+1,indf2
 17841                           
 17842                           ; BSR set to: 1
 17843                           ;main.c: 2489: return 1;
 17844  002302  0E01               	movlw	1
 17845  002304  D018               	goto	l1142
 17846  002306                     l17309:
 17847  002306  0100               	movlb	0	; () banked
 17848  002308  51B9               	movf	readRegister@timeout& (0+255),w,b
 17849  00230A  6FBC               	movwf	??_readRegister& (0+255),b
 17850  00230C  51BA               	movf	(readRegister@timeout+1)& (0+255),w,b
 17851  00230E  6FBD               	movwf	(??_readRegister+1)& (0+255),b
 17852  002310  6BBE               	clrf	(??_readRegister+2)& (0+255),b
 17853  002312  6BBF               	clrf	(??_readRegister+3)& (0+255),b
 17854  002314  51BC               	movf	??_readRegister& (0+255),w,b
 17855  002316  0101               	movlb	1	; () banked
 17856  002318  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17857  00231A  0100               	movlb	0	; () banked
 17858  00231C  51BD               	movf	(??_readRegister+1)& (0+255),w,b
 17859  00231E  0101               	movlb	1	; () banked
 17860  002320  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17861  002322  0100               	movlb	0	; () banked
 17862  002324  51BE               	movf	(??_readRegister+2)& (0+255),w,b
 17863  002326  0101               	movlb	1	; () banked
 17864  002328  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17865  00232A  0100               	movlb	0	; () banked
 17866  00232C  51BF               	movf	(??_readRegister+3)& (0+255),w,b
 17867  00232E  0101               	movlb	1	; () banked
 17868  002330  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17869  002332  E3BD               	bnc	l1139
 17870  002334                     l17311:
 17871                           
 17872                           ;main.c: 2490: }
 17873                           ;main.c: 2491: }
 17874                           ;main.c: 2492: }
 17875                           ;main.c: 2493: }
 17876                           ;main.c: 2495: return 0;
 17877  002334  0E00               	movlw	0
 17878  002336                     l1142:
 17879  002336  0012               	return	
 17880  002338                     __end_of_readRegister:
 17881                           	opt stack 0
 17882                           tblptru	equ	0xFF8
 17883                           tblptrh	equ	0xFF7
 17884                           tblptrl	equ	0xFF6
 17885                           tablat	equ	0xFF5
 17886                           prodh	equ	0xFF4
 17887                           prodl	equ	0xFF3
 17888                           intcon	equ	0xFF2
 17889                           indf0	equ	0xFEF
 17890                           postinc0	equ	0xFEE
 17891                           fsr0h	equ	0xFEA
 17892                           fsr0l	equ	0xFE9
 17893                           wreg	equ	0xFE8
 17894                           indf1	equ	0xFE7
 17895                           postinc1	equ	0xFE6
 17896                           postdec1	equ	0xFE5
 17897                           fsr1h	equ	0xFE2
 17898                           fsr1l	equ	0xFE1
 17899                           indf2	equ	0xFDF
 17900                           postinc2	equ	0xFDE
 17901                           postdec2	equ	0xFDD
 17902                           plusw2	equ	0xFDB
 17903                           fsr2h	equ	0xFDA
 17904                           fsr2l	equ	0xFD9
 17905                           status	equ	0xFD8
 17906                           
 17907 ;; *************** function _sendVSCPFrame *****************
 17908 ;; Defined at:
 17909 ;;		line 3192 in file "main.c"
 17910 ;; Parameters:    Size  Location     Type
 17911 ;;  vscpclass       2   56[BANK0 ] unsigned short 
 17912 ;;  vscptype        1   58[BANK0 ] unsigned char 
 17913 ;;  nodeid          1   59[BANK0 ] unsigned char 
 17914 ;;  priority        1   60[BANK0 ] unsigned char 
 17915 ;;  size            1   61[BANK0 ] unsigned char 
 17916 ;;  pData           2   62[BANK0 ] PTR unsigned char 
 17917 ;;		 -> vscpData(8), 
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;  id              4   84[BANK0 ] unsigned long 
 17920 ;; Return value:  Size  Location     Type
 17921 ;;                  1    wreg      unsigned char 
 17922 ;; Registers used:
 17923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : F/0
 17926 ;;		On exit  : E/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17929 ;;      Params:         0       8       0       0       0       0       0
 17930 ;;      Locals:         0       4       0       0       0       0       0
 17931 ;;      Temps:          0      20       0       0       0       0       0
 17932 ;;      Totals:         0      32       0       0       0       0       0
 17933 ;;Total ram usage:       32 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:    6
 17936 ;; This function calls:
 17937 ;;		_sendCANFrame
 17938 ;; This function is called by:
 17939 ;;		_doModeVerbose
 17940 ;;		_readRegister
 17941 ;;		_readRegisterExtended
 17942 ;;		_writeRegisterExtended
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           	psect	text33
 17947  00204A                     __ptext33:
 17948                           	opt stack 0
 17949  00204A                     _sendVSCPFrame:
 17950                           	opt stack 20
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;main.c: 3193: uint32_t id = ((uint32_t) priority << 26) |
 17954                           ;main.c: 3194: ((uint32_t) vscpclass << 16) |
 17955                           ;main.c: 3195: ((uint32_t) vscptype << 8) |
 17956                           ;main.c: 3196: nodeid;
 17957                           
 17958                           ;incstack = 0
 17959                           ;incstack = 0
 17960  00204A  C09A  F0A0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17961  00204E  6BA1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17962  002050  6BA2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17963  002052  6BA3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17964  002054  C0A2  F0A3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17965  002058  C0A1  F0A2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17966  00205C  C0A0  F0A1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17967  002060  6BA0               	clrf	??_sendVSCPFrame& (0+255),b
 17968  002062  5198               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17969  002064  6FA4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17970  002066  5199               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17971  002068  6FA5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17972  00206A  6BA6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17973  00206C  6BA7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17974  00206E  C0A5  F0A7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17975  002072  C0A4  F0A6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17976  002076  6BA5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17977  002078  6BA4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17978  00207A  C09C  F0A8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17979  00207E  6BA9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17980  002080  6BAA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17981  002082  6BAB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17982  002084  0E1A               	movlw	26
 17983  002086                     u21055:
 17984  002086  90D8               	bcf	status,0,c
 17985  002088  37A8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17986  00208A  37A9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17987  00208C  37AA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17988  00208E  37AB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17989  002090  2EE8               	decfsz	wreg,f,c
 17990  002092  D7F9               	goto	u21055
 17991  002094  51A4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17992  002096  11A8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17993  002098  6FAC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17994  00209A  51A5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17995  00209C  11A9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17996  00209E  6FAD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17997  0020A0  51A6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17998  0020A2  11AA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17999  0020A4  6FAE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 18000  0020A6  51A7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 18001  0020A8  11AB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 18002  0020AA  6FAF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 18003  0020AC  51A0               	movf	??_sendVSCPFrame& (0+255),w,b
 18004  0020AE  11AC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 18005  0020B0  6FB0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 18006  0020B2  51A1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 18007  0020B4  11AD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 18008  0020B6  6FB1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 18009  0020B8  51A2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 18010  0020BA  11AE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 18011  0020BC  6FB2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 18012  0020BE  51A3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 18013  0020C0  11AF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 18014  0020C2  6FB3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 18015  0020C4  519B               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 18016  0020C6  11B0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 18017  0020C8  6FB4               	movwf	sendVSCPFrame@id& (0+255),b
 18018  0020CA  51B1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 18019  0020CC  6FB5               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 18020  0020CE  51B2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 18021  0020D0  6FB6               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 18022  0020D2  51B3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 18023  0020D4  6FB7               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;main.c: 3198: if (!sendCANFrame(id, size, pData)) {
 18027  0020D6  C0B4  F091         	movff	sendVSCPFrame@id,?_sendCANFrame
 18028  0020DA  C0B5  F092         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 18029  0020DE  C0B6  F093         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 18030  0020E2  C0B7  F094         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 18031  0020E6  C09D  F095         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 18032  0020EA  C09E  F096         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 18033  0020EE  C09F  F097         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 18034  0020F2  ECB1  F008         	call	_sendCANFrame	;wreg free
 18035  0020F6  0900               	iorlw	0
 18036                           
 18037                           ;main.c: 3200: return 0;
 18038  0020F8  0E00               	movlw	0
 18039  0020FA  A4D8               	btfss	status,2,c
 18040                           
 18041                           ;main.c: 3201: }
 18042                           ;main.c: 3203: return 1;
 18043  0020FC  0E01               	movlw	1
 18044  0020FE  0012               	return	
 18045  002100                     __end_of_sendVSCPFrame:
 18046                           	opt stack 0
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           indf0	equ	0xFEF
 18055                           postinc0	equ	0xFEE
 18056                           fsr0h	equ	0xFEA
 18057                           fsr0l	equ	0xFE9
 18058                           wreg	equ	0xFE8
 18059                           indf1	equ	0xFE7
 18060                           postinc1	equ	0xFE6
 18061                           postdec1	equ	0xFE5
 18062                           fsr1h	equ	0xFE2
 18063                           fsr1l	equ	0xFE1
 18064                           indf2	equ	0xFDF
 18065                           postinc2	equ	0xFDE
 18066                           postdec2	equ	0xFDD
 18067                           plusw2	equ	0xFDB
 18068                           fsr2h	equ	0xFDA
 18069                           fsr2l	equ	0xFD9
 18070                           status	equ	0xFD8
 18071                           
 18072 ;; *************** function _sendCANFrame *****************
 18073 ;; Defined at:
 18074 ;;		line 3238 in file "main.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;  id              4   49[BANK0 ] unsigned long 
 18077 ;;  dlc             1   53[BANK0 ] unsigned char 
 18078 ;;  pdata           2   54[BANK0 ] PTR unsigned char 
 18079 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;		None
 18082 ;; Return value:  Size  Location     Type
 18083 ;;                  1    wreg      unsigned char 
 18084 ;; Registers used:
 18085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18086 ;; Tracked objects:
 18087 ;;		On entry : F/0
 18088 ;;		On exit  : E/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18091 ;;      Params:         0       7       0       0       0       0       0
 18092 ;;      Locals:         0       0       0       0       0       0       0
 18093 ;;      Temps:          0       0       0       0       0       0       0
 18094 ;;      Totals:         0       7       0       0       0       0       0
 18095 ;;Total ram usage:        7 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    5
 18098 ;; This function calls:
 18099 ;;		_ECANSendMessage
 18100 ;; This function is called by:
 18101 ;;		_doModeSLCAN
 18102 ;;		_receiveVSCPModeCanalMsg
 18103 ;;		_sendVSCPFrame
 18104 ;; This function uses a non-reentrant model
 18105 ;;
 18106                           
 18107                           	psect	text34
 18108  001162                     __ptext34:
 18109                           	opt stack 0
 18110  001162                     _sendCANFrame:
 18111                           	opt stack 23
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;main.c: 3239: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 18115                           
 18116                           ;incstack = 0
 18117                           ;incstack = 0
 18118  001162  C091  F06C         	movff	sendCANFrame@id,?_ECANSendMessage
 18119  001166  C092  F06D         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 18120  00116A  C093  F06E         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 18121  00116E  C094  F06F         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 18122  001172  C096  F070         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 18123  001176  C097  F071         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 18124  00117A  C095  F072         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 18125  00117E  0E20               	movlw	32
 18126  001180  6F73               	movwf	(?_ECANSendMessage+7)& (0+255),b
 18127  001182  EC06  F019         	call	_ECANSendMessage	;wreg free
 18128  001186  0900               	iorlw	0
 18129  001188  E107               	bnz	l17157
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;main.c: 3241: can_transmitOverruns++;
 18133  00118A  0101               	movlb	1	; () banked
 18134  00118C  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 18135  00118E  0E00               	movlw	0
 18136  001190  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 18137  001192  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 18138  001194  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 18139                           
 18140                           ; BSR set to: 1
 18141                           ;main.c: 3242: return 0;
 18142  001196  D001               	goto	l1340
 18143  001198                     l17157:
 18144                           
 18145                           ; BSR set to: 0
 18146                           ;main.c: 3243: }
 18147                           ;main.c: 3245: return 1;
 18148  001198  0E01               	movlw	1
 18149  00119A                     l1340:
 18150  00119A  0012               	return	
 18151  00119C                     __end_of_sendCANFrame:
 18152                           	opt stack 0
 18153                           tblptru	equ	0xFF8
 18154                           tblptrh	equ	0xFF7
 18155                           tblptrl	equ	0xFF6
 18156                           tablat	equ	0xFF5
 18157                           prodh	equ	0xFF4
 18158                           prodl	equ	0xFF3
 18159                           intcon	equ	0xFF2
 18160                           indf0	equ	0xFEF
 18161                           postinc0	equ	0xFEE
 18162                           fsr0h	equ	0xFEA
 18163                           fsr0l	equ	0xFE9
 18164                           wreg	equ	0xFE8
 18165                           indf1	equ	0xFE7
 18166                           postinc1	equ	0xFE6
 18167                           postdec1	equ	0xFE5
 18168                           fsr1h	equ	0xFE2
 18169                           fsr1l	equ	0xFE1
 18170                           indf2	equ	0xFDF
 18171                           postinc2	equ	0xFDE
 18172                           postdec2	equ	0xFDD
 18173                           plusw2	equ	0xFDB
 18174                           fsr2h	equ	0xFDA
 18175                           fsr2l	equ	0xFD9
 18176                           status	equ	0xFD8
 18177                           
 18178 ;; *************** function _ECANSendMessage *****************
 18179 ;; Defined at:
 18180 ;;		line 617 in file "ECAN.c"
 18181 ;; Parameters:    Size  Location     Type
 18182 ;;  id              4   12[BANK0 ] unsigned long 
 18183 ;;  data            2   16[BANK0 ] PTR unsigned char 
 18184 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18185 ;;  dataLen         1   18[BANK0 ] unsigned char 
 18186 ;;  msgFlags        1   19[BANK0 ] enum E16315
 18187 ;; Auto vars:     Size  Location     Type
 18188 ;;  pb             18   21[BANK0 ] PTR unsigned char [9]
 18189 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18190 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18191 ;;		 -> B0CON(1), 
 18192 ;;  ptr             2   47[BANK0 ] PTR unsigned char 
 18193 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18194 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18195 ;;		 -> B0CON(1), 
 18196 ;;  tempPtr         2   43[BANK0 ] PTR unsigned char 
 18197 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18198 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18199 ;;		 -> B0CON(1), 
 18200 ;;  i               1   46[BANK0 ] unsigned char 
 18201 ;;  temp            1   45[BANK0 ] unsigned char 
 18202 ;;  tempBSEL0       1   42[BANK0 ] struct .
 18203 ;;  j               1   41[BANK0 ] unsigned char 
 18204 ;;  buffers         1   40[BANK0 ] unsigned char 
 18205 ;;  mode            1   39[BANK0 ] unsigned char 
 18206 ;; Return value:  Size  Location     Type
 18207 ;;                  1    wreg      enum E15660
 18208 ;; Registers used:
 18209 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18210 ;; Tracked objects:
 18211 ;;		On entry : F/0
 18212 ;;		On exit  : F/0
 18213 ;;		Unchanged: 0/0
 18214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18215 ;;      Params:         0       8       0       0       0       0       0
 18216 ;;      Locals:         0      28       0       0       0       0       0
 18217 ;;      Temps:          0       1       0       0       0       0       0
 18218 ;;      Totals:         0      37       0       0       0       0       0
 18219 ;;Total ram usage:       37 bytes
 18220 ;; Hardware stack levels used:    1
 18221 ;; Hardware stack levels required when called:    4
 18222 ;; This function calls:
 18223 ;;		__CANIDToRegs
 18224 ;; This function is called by:
 18225 ;;		_sendCANFrame
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text35
 18230  00320C                     __ptext35:
 18231                           	opt stack 0
 18232  00320C                     _ECANSendMessage:
 18233                           	opt stack 23
 18234                           
 18235                           ; BSR set to: 0
 18236                           ;ECAN.c: 619: BYTE mode;
 18237                           ;ECAN.c: 620: BYTE buffers;
 18238                           ;ECAN.c: 628: BYTE i,j;
 18239                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 18240                           ;ECAN.c: 630: BYTE* pb[9];
 18241                           ;ECAN.c: 631: BYTE temp;
 18242                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 18243                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 18244                           
 18245                           ;incstack = 0
 18246                           ;incstack = 0
 18247  00320C  0E0F               	movlw	15	;volatile
 18248  00320E  0100               	movlb	0	; () banked
 18249  003210  6F76               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 18250  003212  0E40               	movlw	64	;volatile
 18251  003214  6F75               	movwf	ECANSendMessage@pb& (0+255),b
 18252                           
 18253                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 18254  003216  0E0F               	movlw	15	;volatile
 18255  003218  6F78               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 18256  00321A  0E30               	movlw	48	;volatile
 18257  00321C  6F77               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 18258                           
 18259                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 18260  00321E  0E0F               	movlw	15	;volatile
 18261  003220  6F7A               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 18262  003222  0E20               	movlw	32	;volatile
 18263  003224  6F79               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 18264                           
 18265                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 18266  003226  0E0E               	movlw	14	;volatile
 18267  003228  6F7C               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 18268  00322A  0E20               	movlw	32	;volatile
 18269  00322C  6F7B               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 18270                           
 18271                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 18272  00322E  0E0E               	movlw	14	;volatile
 18273  003230  6F7E               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 18274  003232  0E30               	movlw	48	;volatile
 18275  003234  6F7D               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 18276                           
 18277                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 18278  003236  0E0E               	movlw	14	;volatile
 18279  003238  6F80               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 18280  00323A  0E40               	movlw	64	;volatile
 18281  00323C  6F7F               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 18282                           
 18283                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 18284  00323E  0E0E               	movlw	14	;volatile
 18285  003240  6F82               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 18286  003242  0E50               	movlw	80	;volatile
 18287  003244  6F81               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 18288                           
 18289                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 18290  003246  0E0E               	movlw	14	;volatile
 18291  003248  6F84               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 18292  00324A  0E60               	movlw	96	;volatile
 18293  00324C  6F83               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 18294                           
 18295                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 18296  00324E  0E0E               	movlw	14	;volatile
 18297  003250  6F86               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 18298  003252  0E70               	movlw	112	;volatile
 18299  003254  6F85               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 18300                           
 18301                           ; BSR set to: 0
 18302                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 18303  003256  5077               	movf	3959,w,c	;volatile
 18304  003258  0BC0               	andlw	192
 18305  00325A  6F87               	movwf	ECANSendMessage@mode& (0+255),b
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;ECAN.c: 660: if ( mode == 0x00 )
 18309  00325C  6787               	tstfsz	ECANSendMessage@mode& (0+255),b
 18310  00325E  D002               	goto	l13769
 18311                           
 18312                           ; BSR set to: 0
 18313                           ;ECAN.c: 661: buffers = 2;
 18314  003260  0E02               	movlw	2
 18315  003262  D001               	goto	L19
 18316  003264                     l13769:
 18317                           
 18318                           ; BSR set to: 0
 18319                           ;ECAN.c: 662: else
 18320                           ;ECAN.c: 663: buffers = 8;
 18321  003264  0E08               	movlw	8
 18322  003266                     L19:
 18323  003266  6F88               	movwf	ECANSendMessage@buffers& (0+255),b
 18324                           
 18325                           ; BSR set to: 0
 18326                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 18327  003268  010D               	movlb	13	; () banked
 18328  00326A  90D8               	bcf	status,0,c
 18329  00326C  31F8               	rrcf	248,w,b	;volatile
 18330  00326E  0100               	movlb	0	; () banked
 18331  003270  6F8A               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 18332                           
 18333                           ; BSR set to: 0
 18334                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 18335  003272  6B8E               	clrf	ECANSendMessage@i& (0+255),b
 18336  003274  D07D               	goto	l13829
 18337  003276                     l13775:
 18338                           
 18339                           ; BSR set to: 0
 18340                           ;ECAN.c: 688: {
 18341                           ;ECAN.c: 693: ptr = pb[i];
 18342  003276  518E               	movf	ECANSendMessage@i& (0+255),w,b
 18343  003278  0D02               	mullw	2
 18344  00327A  50F3               	movf	prodl,w,c
 18345  00327C  0F75               	addlw	low ECANSendMessage@pb
 18346  00327E  6ED9               	movwf	fsr2l,c
 18347  003280  6ADA               	clrf	fsr2h,c
 18348  003282  CFDE F08F          	movff	postinc2,ECANSendMessage@ptr
 18349  003286  CFDD F090          	movff	postdec2,ECANSendMessage@ptr+1
 18350                           
 18351                           ; BSR set to: 0
 18352                           ;ECAN.c: 694: tempPtr = ptr;
 18353  00328A  C08F  F08B         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 18354  00328E  C090  F08C         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;ECAN.c: 702: if ( i > 2 )
 18358  003292  0E02               	movlw	2
 18359  003294  658E               	cpfsgt	ECANSendMessage@i& (0+255),b
 18360  003296  D004               	goto	l13787
 18361                           
 18362                           ; BSR set to: 0
 18363                           ;ECAN.c: 703: {
 18364                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 18365  003298  90D8               	bcf	status,0,c
 18366  00329A  338A               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 18367                           
 18368                           ; BSR set to: 0
 18369                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 18370  00329C  A18A               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 18371  00329E  D067               	goto	l13827
 18372  0032A0                     l13787:
 18373                           
 18374                           ; BSR set to: 0
 18375                           ;ECAN.c: 714: }
 18376                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18377  0032A0  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18378  0032A4  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18379  0032A8  50DF               	movf	indf2,w,c
 18380  0032AA  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18381  0032AC  B774               	btfsc	??_ECANSendMessage& (0+255),3,b
 18382  0032AE  D05F               	goto	l13827
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;ECAN.c: 721: {
 18386                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18387  0032B0  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18388  0032B4  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18389  0032B8  0EFC               	movlw	252
 18390  0032BA  16DF               	andwf	indf2,f,c
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18394  0032BC  C073  F074         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18395  0032C0  0E03               	movlw	3
 18396  0032C2  1774               	andwf	??_ECANSendMessage& (0+255),f,b
 18397  0032C4  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18398  0032C8  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18399  0032CC  5174               	movf	??_ECANSendMessage& (0+255),w,b
 18400  0032CE  12DF               	iorwf	indf2,f,c
 18401                           
 18402                           ; BSR set to: 0
 18403                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18404  0032D0  AD73               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18405  0032D2  D004               	goto	l1508
 18406                           
 18407                           ; BSR set to: 0
 18408                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18409  0032D4  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18410  0032D6  0940               	iorlw	64
 18411  0032D8  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18412  0032DA  D002               	goto	l13797
 18413  0032DC                     l1508:
 18414                           
 18415                           ; BSR set to: 0
 18416                           ;ECAN.c: 729: else
 18417                           ;ECAN.c: 730: temp = dataLen;
 18418  0032DC  C072  F08D         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18419  0032E0                     l13797:
 18420                           
 18421                           ; BSR set to: 0
 18422                           ;ECAN.c: 732: *(ptr+5) = temp;
 18423  0032E0  EE20 F005          	lfsr	2,5
 18424  0032E4  518F               	movf	ECANSendMessage@ptr& (0+255),w,b
 18425  0032E6  26D9               	addwf	fsr2l,f,c
 18426  0032E8  5190               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18427  0032EA  22DA               	addwfc	fsr2h,f,c
 18428  0032EC  C08D  FFDF         	movff	ECANSendMessage@temp,indf2
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18432  0032F0  AB73               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18433  0032F2  D003               	goto	l1510
 18434                           
 18435                           ; BSR set to: 0
 18436                           ;ECAN.c: 736: temp = 1;
 18437  0032F4  0E01               	movlw	1
 18438  0032F6  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18439  0032F8  D001               	goto	l13803
 18440  0032FA                     l1510:
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;ECAN.c: 738: else
 18444                           ;ECAN.c: 739: temp = 0;
 18445  0032FA  6B8D               	clrf	ECANSendMessage@temp& (0+255),b
 18446  0032FC                     l13803:
 18447                           
 18448                           ; BSR set to: 0
 18449                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18450  0032FC  298F               	incf	ECANSendMessage@ptr& (0+255),w,b
 18451  0032FE  6F62               	movwf	?__CANIDToRegs& (0+255),b
 18452  003300  0E00               	movlw	0
 18453  003302  2190               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18454  003304  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18455  003306  C06C  F064         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18456  00330A  C06D  F065         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18457  00330E  C06E  F066         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18458  003312  C06F  F067         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18459  003316  C08D  F068         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18460  00331A  EC18  F016         	call	__CANIDToRegs	;wreg free
 18461                           
 18462                           ; BSR set to: 0
 18463                           ;ECAN.c: 745: ptr += 6;
 18464  00331E  0E06               	movlw	6
 18465  003320  278F               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18466  003322  0E00               	movlw	0
 18467  003324  2390               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18468                           
 18469                           ; BSR set to: 0
 18470                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18471  003326  6B89               	clrf	ECANSendMessage@j& (0+255),b
 18472  003328  D00F               	goto	l13817
 18473  00332A                     l13809:
 18474                           
 18475                           ; BSR set to: 0
 18476                           ;ECAN.c: 748: *ptr++ = *data++;
 18477  00332A  C070  FFD9         	movff	ECANSendMessage@data,fsr2l
 18478  00332E  C071  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18479  003332  C08F  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18480  003336  C090  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18481  00333A  CFDF FFE7          	movff	indf2,indf1
 18482                           
 18483                           ; BSR set to: 0
 18484  00333E  4B70               	infsnz	ECANSendMessage@data& (0+255),f,b
 18485  003340  2B71               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18486                           
 18487                           ; BSR set to: 0
 18488  003342  4B8F               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18489  003344  2B90               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18490                           
 18491                           ; BSR set to: 0
 18492  003346  2B89               	incf	ECANSendMessage@j& (0+255),f,b
 18493  003348                     l13817:
 18494                           
 18495                           ; BSR set to: 0
 18496  003348  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18497  00334A  5D89               	subwf	ECANSendMessage@j& (0+255),w,b
 18498  00334C  E3EE               	bnc	l13809
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18502  00334E  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18503  003352  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18504  003356  50DF               	movf	indf2,w,c
 18505  003358  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18506  00335A  B574               	btfsc	??_ECANSendMessage& (0+255),2,b
 18507  00335C  D006               	goto	l13823
 18508                           
 18509                           ; BSR set to: 0
 18510                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18511  00335E  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18512  003362  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18513  003366  0E00               	movlw	0
 18514  003368  86DB               	bsf	plusw2,3,c
 18515  00336A                     l13823:
 18516                           
 18517                           ; BSR set to: 0
 18518                           ;ECAN.c: 755: return TRUE;
 18519  00336A  0E01               	movlw	1
 18520  00336C  D005               	goto	l1516
 18521  00336E                     l13827:
 18522                           
 18523                           ; BSR set to: 0
 18524  00336E  2B8E               	incf	ECANSendMessage@i& (0+255),f,b
 18525  003370                     l13829:
 18526                           
 18527                           ; BSR set to: 0
 18528  003370  5188               	movf	ECANSendMessage@buffers& (0+255),w,b
 18529  003372  5D8E               	subwf	ECANSendMessage@i& (0+255),w,b
 18530  003374  E380               	bnc	l13775
 18531                           
 18532                           ; BSR set to: 0
 18533                           ;ECAN.c: 756: }
 18534                           ;ECAN.c: 757: }
 18535                           ;ECAN.c: 760: return FALSE;
 18536  003376  0E00               	movlw	0
 18537  003378                     l1516:
 18538                           
 18539                           ; BSR set to: 0
 18540  003378  0012               	return	
 18541  00337A                     __end_of_ECANSendMessage:
 18542                           	opt stack 0
 18543                           tblptru	equ	0xFF8
 18544                           tblptrh	equ	0xFF7
 18545                           tblptrl	equ	0xFF6
 18546                           tablat	equ	0xFF5
 18547                           prodh	equ	0xFF4
 18548                           prodl	equ	0xFF3
 18549                           intcon	equ	0xFF2
 18550                           indf0	equ	0xFEF
 18551                           postinc0	equ	0xFEE
 18552                           fsr0h	equ	0xFEA
 18553                           fsr0l	equ	0xFE9
 18554                           wreg	equ	0xFE8
 18555                           indf1	equ	0xFE7
 18556                           postinc1	equ	0xFE6
 18557                           postdec1	equ	0xFE5
 18558                           fsr1h	equ	0xFE2
 18559                           fsr1l	equ	0xFE1
 18560                           indf2	equ	0xFDF
 18561                           postinc2	equ	0xFDE
 18562                           postdec2	equ	0xFDD
 18563                           plusw2	equ	0xFDB
 18564                           fsr2h	equ	0xFDA
 18565                           fsr2l	equ	0xFD9
 18566                           status	equ	0xFD8
 18567                           
 18568 ;; *************** function _memset *****************
 18569 ;; Defined at:
 18570 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18571 ;; Parameters:    Size  Location     Type
 18572 ;;  p1              2    0[BANK0 ] PTR void 
 18573 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18574 ;;  c               2    2[BANK0 ] int 
 18575 ;;  n               2    4[BANK0 ] unsigned int 
 18576 ;; Auto vars:     Size  Location     Type
 18577 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18578 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18579 ;; Return value:  Size  Location     Type
 18580 ;;                  2    0[BANK0 ] PTR void 
 18581 ;; Registers used:
 18582 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18583 ;; Tracked objects:
 18584 ;;		On entry : F/0
 18585 ;;		On exit  : F/0
 18586 ;;		Unchanged: 0/0
 18587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18588 ;;      Params:         0       6       0       0       0       0       0
 18589 ;;      Locals:         0       2       0       0       0       0       0
 18590 ;;      Temps:          0       0       0       0       0       0       0
 18591 ;;      Totals:         0       8       0       0       0       0       0
 18592 ;;Total ram usage:        8 bytes
 18593 ;; Hardware stack levels used:    1
 18594 ;; Hardware stack levels required when called:    3
 18595 ;; This function calls:
 18596 ;;		Nothing
 18597 ;; This function is called by:
 18598 ;;		_doModeVerbose
 18599 ;;		_doModeSLCAN
 18600 ;;		_printGUID
 18601 ;;		_printMDF
 18602 ;;		_printNodeFirmwareVersion
 18603 ;; This function uses a non-reentrant model
 18604 ;;
 18605                           
 18606                           	psect	text36
 18607  001002                     __ptext36:
 18608                           	opt stack 0
 18609  001002                     _memset:
 18610                           	opt stack 25
 18611                           
 18612                           ; BSR set to: 0
 18613                           
 18614                           ; BSR set to: 0
 18615                           ;incstack = 0
 18616                           ;incstack = 0
 18617  001002  C060  F066         	movff	memset@p1,memset@p
 18618  001006  C061  F067         	movff	memset@p1+1,memset@p+1
 18619  00100A  D008               	goto	l15949
 18620  00100C                     l15945:
 18621                           
 18622                           ; BSR set to: 0
 18623  00100C  C066  FFD9         	movff	memset@p,fsr2l
 18624  001010  C067  FFDA         	movff	memset@p+1,fsr2h
 18625  001014  C062  FFDF         	movff	memset@c,indf2
 18626                           
 18627                           ; BSR set to: 0
 18628  001018  4B66               	infsnz	memset@p& (0+255),f,b
 18629  00101A  2B67               	incf	(memset@p+1)& (0+255),f,b
 18630  00101C                     l15949:
 18631                           
 18632                           ; BSR set to: 0
 18633  00101C  0764               	decf	memset@n& (0+255),f,b
 18634  00101E  A0D8               	btfss	status,0,c
 18635  001020  0765               	decf	(memset@n+1)& (0+255),f,b
 18636  001022  0100               	movlb	0	; () banked
 18637  001024  2964               	incf	memset@n& (0+255),w,b
 18638  001026  B4D8               	btfsc	status,2,c
 18639  001028  2965               	incf	(memset@n+1)& (0+255),w,b
 18640  00102A  B4D8               	btfsc	status,2,c
 18641                           
 18642                           ; BSR set to: 0
 18643  00102C  0012               	return	
 18644  00102E  D7EE               	goto	l15945
 18645  001030                     __end_of_memset:
 18646                           	opt stack 0
 18647                           tblptru	equ	0xFF8
 18648                           tblptrh	equ	0xFF7
 18649                           tblptrl	equ	0xFF6
 18650                           tablat	equ	0xFF5
 18651                           prodh	equ	0xFF4
 18652                           prodl	equ	0xFF3
 18653                           intcon	equ	0xFF2
 18654                           indf0	equ	0xFEF
 18655                           postinc0	equ	0xFEE
 18656                           fsr0h	equ	0xFEA
 18657                           fsr0l	equ	0xFE9
 18658                           wreg	equ	0xFE8
 18659                           indf1	equ	0xFE7
 18660                           postinc1	equ	0xFE6
 18661                           postdec1	equ	0xFE5
 18662                           fsr1h	equ	0xFE2
 18663                           fsr1l	equ	0xFE1
 18664                           indf2	equ	0xFDF
 18665                           postinc2	equ	0xFDE
 18666                           postdec2	equ	0xFDD
 18667                           plusw2	equ	0xFDB
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function _printHelp *****************
 18673 ;; Defined at:
 18674 ;;		line 2805 in file "main.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;		None               void
 18681 ;; Registers used:
 18682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : F/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18688 ;;      Params:         0       0       0       0       0       0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    5
 18695 ;; This function calls:
 18696 ;;		_putsUSART
 18697 ;; This function is called by:
 18698 ;;		_doModeVerbose
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           	psect	text37
 18703  00382E                     __ptext37:
 18704                           	opt stack 0
 18705  00382E                     _printHelp:
 18706                           	opt stack 23
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;main.c: 2806: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;incstack = 0
 18713                           ;incstack = 0
 18714  00382E  0E74               	movlw	high STR_237
 18715  003830  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18716  003832  0EAA               	movlw	low STR_237
 18717  003834  6F61               	movwf	?_putsUSART& (0+255),b
 18718  003836  EC69  F00A         	call	_putsUSART	;wreg free
 18719                           
 18720                           ;main.c: 2807: putsUSART((char *) "------------------------------------\r\n");
 18721  00383A  0E6D               	movlw	high (STR_270+28)
 18722  00383C  0100               	movlb	0	; () banked
 18723  00383E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18724  003840  0EB2               	movlw	low (STR_270+28)
 18725  003842  6F61               	movwf	?_putsUSART& (0+255),b
 18726  003844  EC69  F00A         	call	_putsUSART	;wreg free
 18727                           
 18728                           ;main.c: 2808: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18729  003848  0E77               	movlw	high STR_239
 18730  00384A  0100               	movlb	0	; () banked
 18731  00384C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18732  00384E  0EE1               	movlw	low STR_239
 18733  003850  6F61               	movwf	?_putsUSART& (0+255),b
 18734  003852  EC69  F00A         	call	_putsUSART	;wreg free
 18735                           
 18736                           ;main.c: 2809: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18737  003856  0E73               	movlw	high STR_240
 18738  003858  0100               	movlb	0	; () banked
 18739  00385A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18740  00385C  0E10               	movlw	low STR_240
 18741  00385E  6F61               	movwf	?_putsUSART& (0+255),b
 18742  003860  EC69  F00A         	call	_putsUSART	;wreg free
 18743                           
 18744                           ;main.c: 2810: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18745  003864  0E72               	movlw	high STR_241
 18746  003866  0100               	movlb	0	; () banked
 18747  003868  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18748  00386A  0EB6               	movlw	low STR_241
 18749  00386C  6F61               	movwf	?_putsUSART& (0+255),b
 18750  00386E  EC69  F00A         	call	_putsUSART	;wreg free
 18751                           
 18752                           ;main.c: 2811: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18753  003872  0E71               	movlw	high STR_242
 18754  003874  0100               	movlb	0	; () banked
 18755  003876  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18756  003878  0E2F               	movlw	low STR_242
 18757  00387A  6F61               	movwf	?_putsUSART& (0+255),b
 18758  00387C  EC69  F00A         	call	_putsUSART	;wreg free
 18759                           
 18760                           ;main.c: 2812: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18761  003880  0E71               	movlw	high STR_243
 18762  003882  0100               	movlb	0	; () banked
 18763  003884  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18764  003886  0E94               	movlw	low STR_243
 18765  003888  6F61               	movwf	?_putsUSART& (0+255),b
 18766  00388A  EC69  F00A         	call	_putsUSART	;wreg free
 18767                           
 18768                           ;main.c: 2813: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18769  00388E  0E77               	movlw	high STR_244
 18770  003890  0100               	movlb	0	; () banked
 18771  003892  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18772  003894  0E51               	movlw	low STR_244
 18773  003896  6F61               	movwf	?_putsUSART& (0+255),b
 18774  003898  EC69  F00A         	call	_putsUSART	;wreg free
 18775                           
 18776                           ;main.c: 2814: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18777  00389C  0E71               	movlw	high STR_245
 18778  00389E  0100               	movlb	0	; () banked
 18779  0038A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18780  0038A2  0EC6               	movlw	low STR_245
 18781  0038A4  6F61               	movwf	?_putsUSART& (0+255),b
 18782  0038A6  EC69  F00A         	call	_putsUSART	;wreg free
 18783                           
 18784                           ;main.c: 2815: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18785  0038AA  0E72               	movlw	high STR_246
 18786  0038AC  0100               	movlb	0	; () banked
 18787  0038AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18788  0038B0  0EE4               	movlw	low STR_246
 18789  0038B2  6F61               	movwf	?_putsUSART& (0+255),b
 18790  0038B4  EC69  F00A         	call	_putsUSART	;wreg free
 18791                           
 18792                           ;main.c: 2816: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18793  0038B8  0E78               	movlw	high STR_247
 18794  0038BA  0100               	movlb	0	; () banked
 18795  0038BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18796  0038BE  0E7C               	movlw	low STR_247
 18797  0038C0  6F61               	movwf	?_putsUSART& (0+255),b
 18798  0038C2  EC69  F00A         	call	_putsUSART	;wreg free
 18799                           
 18800                           ;main.c: 2817: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18801  0038C6  0E6F               	movlw	high STR_248
 18802  0038C8  0100               	movlb	0	; () banked
 18803  0038CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18804  0038CC  0E49               	movlw	low STR_248
 18805  0038CE  6F61               	movwf	?_putsUSART& (0+255),b
 18806  0038D0  EC69  F00A         	call	_putsUSART	;wreg free
 18807                           
 18808                           ;main.c: 2818: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18809  0038D4  0E79               	movlw	high STR_249
 18810  0038D6  0100               	movlb	0	; () banked
 18811  0038D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18812  0038DA  0E3C               	movlw	low STR_249
 18813  0038DC  6F61               	movwf	?_putsUSART& (0+255),b
 18814  0038DE  EC69  F00A         	call	_putsUSART	;wreg free
 18815                           
 18816                           ;main.c: 2819: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18817  0038E2  0E76               	movlw	high STR_250
 18818  0038E4  0100               	movlb	0	; () banked
 18819  0038E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18820  0038E8  0E8E               	movlw	low STR_250
 18821  0038EA  6F61               	movwf	?_putsUSART& (0+255),b
 18822  0038EC  EC69  F00A         	call	_putsUSART	;wreg free
 18823                           
 18824                           ;main.c: 2820: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18825  0038F0  0E74               	movlw	high STR_251
 18826  0038F2  0100               	movlb	0	; () banked
 18827  0038F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18828  0038F6  0E83               	movlw	low STR_251
 18829  0038F8  6F61               	movwf	?_putsUSART& (0+255),b
 18830  0038FA  EC69  F00A         	call	_putsUSART	;wreg free
 18831                           
 18832                           ;main.c: 2821: putsUSART((char *) "HELP - Display this help information.\r\n");
 18833  0038FE  0E73               	movlw	high STR_252
 18834  003900  0100               	movlb	0	; () banked
 18835  003902  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18836  003904  0EE4               	movlw	low STR_252
 18837  003906  6F61               	movwf	?_putsUSART& (0+255),b
 18838  003908  EC69  F00A         	call	_putsUSART	;wreg free
 18839                           
 18840                           ;main.c: 2822: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18841  00390C  0E72               	movlw	high STR_253
 18842  00390E  0100               	movlb	0	; () banked
 18843  003910  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18844  003912  0E87               	movlw	low STR_253
 18845  003914  6F61               	movwf	?_putsUSART& (0+255),b
 18846  003916  EC69  F00A         	call	_putsUSART	;wreg free
 18847                           
 18848                           ;main.c: 2823: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18849  00391A  0E6C               	movlw	high STR_254
 18850  00391C  0100               	movlb	0	; () banked
 18851  00391E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18852  003920  0EB9               	movlw	low STR_254
 18853  003922  6F61               	movwf	?_putsUSART& (0+255),b
 18854  003924  EC69  F00A         	call	_putsUSART	;wreg free
 18855                           
 18856                           ;main.c: 2824: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18857  003928  0E6D               	movlw	high STR_255
 18858  00392A  0100               	movlb	0	; () banked
 18859  00392C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18860  00392E  0E05               	movlw	low STR_255
 18861  003930  6F61               	movwf	?_putsUSART& (0+255),b
 18862  003932  EC69  F00A         	call	_putsUSART	;wreg free
 18863                           
 18864                           ;main.c: 2825: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18865  003936  0E6C               	movlw	high STR_256
 18866  003938  0100               	movlb	0	; () banked
 18867  00393A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18868  00393C  0E6C               	movlw	low STR_256
 18869  00393E  6F61               	movwf	?_putsUSART& (0+255),b
 18870  003940  EC69  F00A         	call	_putsUSART	;wreg free
 18871                           
 18872                           ;main.c: 2826: putsUSART((char *) "FILTER - Set filter .\r\n");
 18873  003944  0E78               	movlw	high STR_257
 18874  003946  0100               	movlb	0	; () banked
 18875  003948  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18876  00394A  0E94               	movlw	low STR_257
 18877  00394C  6F61               	movwf	?_putsUSART& (0+255),b
 18878  00394E  EC69  F00A         	call	_putsUSART	;wreg free
 18879                           
 18880                           ;main.c: 2827: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18881  003952  0E6C               	movlw	high STR_258
 18882  003954  0100               	movlb	0	; () banked
 18883  003956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18884  003958  0E1E               	movlw	low STR_258
 18885  00395A  6F61               	movwf	?_putsUSART& (0+255),b
 18886  00395C  EC69  F00A         	call	_putsUSART	;wreg free
 18887                           
 18888                           ;main.c: 2828: putsUSART((char *) "MASK - Set mask .\r\n");
 18889  003960  0E79               	movlw	high STR_259
 18890  003962  0100               	movlb	0	; () banked
 18891  003964  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18892  003966  0EEF               	movlw	low STR_259
 18893  003968  6F61               	movwf	?_putsUSART& (0+255),b
 18894  00396A  EC69  F00A         	call	_putsUSART	;wreg free
 18895                           
 18896                           ;main.c: 2829: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18897  00396E  0E6D               	movlw	high STR_260
 18898  003970  0100               	movlb	0	; () banked
 18899  003972  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18900  003974  0E4F               	movlw	low STR_260
 18901  003976  6F61               	movwf	?_putsUSART& (0+255),b
 18902  003978  EC69  F00A         	call	_putsUSART	;wreg free
 18903                           
 18904                           ;main.c: 2830: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18905  00397C  0E76               	movlw	high STR_261
 18906  00397E  0100               	movlb	0	; () banked
 18907  003980  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18908  003982  0E6C               	movlw	low STR_261
 18909  003984  6F61               	movwf	?_putsUSART& (0+255),b
 18910  003986  EC69  F00A         	call	_putsUSART	;wreg free
 18911                           
 18912                           ;main.c: 2831: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18913  00398A  0E72               	movlw	high STR_262
 18914  00398C  0100               	movlb	0	; () banked
 18915  00398E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18916  003990  0E58               	movlw	low STR_262
 18917  003992  6F61               	movwf	?_putsUSART& (0+255),b
 18918  003994  EC69  F00A         	call	_putsUSART	;wreg free
 18919                           
 18920                           ;main.c: 2832: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18921  003998  0E72               	movlw	high STR_263
 18922  00399A  0100               	movlb	0	; () banked
 18923  00399C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18924  00399E  0E29               	movlw	low STR_263
 18925  0039A0  6F61               	movwf	?_putsUSART& (0+255),b
 18926  0039A2  EC69  F00A         	call	_putsUSART	;wreg free
 18927                           
 18928                           ;main.c: 2833: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 18929  0039A6  0E6D               	movlw	high STR_264
 18930  0039A8  0100               	movlb	0	; () banked
 18931  0039AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18932  0039AC  0ED9               	movlw	low STR_264
 18933  0039AE  6F61               	movwf	?_putsUSART& (0+255),b
 18934  0039B0  EC69  F00A         	call	_putsUSART	;wreg free
 18935                           
 18936                           ;main.c: 2834: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18937  0039B4  0E71               	movlw	high STR_265
 18938  0039B6  0100               	movlb	0	; () banked
 18939  0039B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18940  0039BA  0EF8               	movlw	low STR_265
 18941  0039BC  6F61               	movwf	?_putsUSART& (0+255),b
 18942  0039BE  EC69  F00A         	call	_putsUSART	;wreg free
 18943                           
 18944                           ;main.c: 2835: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18945  0039C2  0E6F               	movlw	high STR_266
 18946  0039C4  0100               	movlb	0	; () banked
 18947  0039C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18948  0039C8  0EB8               	movlw	low STR_266
 18949  0039CA  6F61               	movwf	?_putsUSART& (0+255),b
 18950  0039CC  EC69  F00A         	call	_putsUSART	;wreg free
 18951                           
 18952                           ;main.c: 2836: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18953  0039D0  0E6E               	movlw	high STR_267
 18954  0039D2  0100               	movlb	0	; () banked
 18955  0039D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18956  0039D6  0E5E               	movlw	low STR_267
 18957  0039D8  6F61               	movwf	?_putsUSART& (0+255),b
 18958  0039DA  EC69  F00A         	call	_putsUSART	;wreg free
 18959                           
 18960                           ;main.c: 2837: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18961  0039DE  0E75               	movlw	high STR_268
 18962  0039E0  0100               	movlb	0	; () banked
 18963  0039E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18964  0039E4  0E1F               	movlw	low STR_268
 18965  0039E6  6F61               	movwf	?_putsUSART& (0+255),b
 18966  0039E8  EF69  F00A         	goto	_putsUSART	;wreg free
 18967  0039EC                     __end_of_printHelp:
 18968                           	opt stack 0
 18969                           tblptru	equ	0xFF8
 18970                           tblptrh	equ	0xFF7
 18971                           tblptrl	equ	0xFF6
 18972                           tablat	equ	0xFF5
 18973                           prodh	equ	0xFF4
 18974                           prodl	equ	0xFF3
 18975                           intcon	equ	0xFF2
 18976                           indf0	equ	0xFEF
 18977                           postinc0	equ	0xFEE
 18978                           fsr0h	equ	0xFEA
 18979                           fsr0l	equ	0xFE9
 18980                           wreg	equ	0xFE8
 18981                           indf1	equ	0xFE7
 18982                           postinc1	equ	0xFE6
 18983                           postdec1	equ	0xFE5
 18984                           fsr1h	equ	0xFE2
 18985                           fsr1l	equ	0xFE1
 18986                           indf2	equ	0xFDF
 18987                           postinc2	equ	0xFDE
 18988                           postdec2	equ	0xFDD
 18989                           plusw2	equ	0xFDB
 18990                           fsr2h	equ	0xFDA
 18991                           fsr2l	equ	0xFD9
 18992                           status	equ	0xFD8
 18993                           
 18994 ;; *************** function _printErrors *****************
 18995 ;; Defined at:
 18996 ;;		line 2741 in file "main.c"
 18997 ;; Parameters:    Size  Location     Type
 18998 ;;		None
 18999 ;; Auto vars:     Size  Location     Type
 19000 ;;		None
 19001 ;; Return value:  Size  Location     Type
 19002 ;;		None               void
 19003 ;; Registers used:
 19004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : F/0
 19007 ;;		On exit  : 0/0
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19010 ;;      Params:         0       0       0       0       0       0       0
 19011 ;;      Locals:         0      12       0       0       0       0       0
 19012 ;;      Temps:          0       0       0       0       0       0       0
 19013 ;;      Totals:         0      12       0       0       0       0       0
 19014 ;;Total ram usage:       12 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    5
 19017 ;; This function calls:
 19018 ;;		_putsUSART
 19019 ;;		_sprintf
 19020 ;; This function is called by:
 19021 ;;		_doModeVerbose
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           	psect	text38
 19026  0045E4                     __ptext38:
 19027                           	opt stack 0
 19028  0045E4                     _printErrors:
 19029                           	opt stack 23
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;main.c: 2742: putsUSART((char *) "CAN Receive overruns: ");
 19033                           
 19034                           ;incstack = 0
 19035                           ;incstack = 0
 19036  0045E4  0E79               	movlw	high STR_207
 19037  0045E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19038  0045E8  0E6A               	movlw	low STR_207
 19039  0045EA  6F61               	movwf	?_putsUSART& (0+255),b
 19040  0045EC  EC69  F00A         	call	_putsUSART	;wreg free
 19041                           
 19042                           ;main.c: 2743: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 19043  0045F0  662C               	tstfsz	_bHex,c
 19044  0045F2  D005               	goto	l16025
 19045  0045F4  0E7C               	movlw	high STR_193
 19046  0045F6  0100               	movlb	0	; () banked
 19047  0045F8  6F95               	movwf	(_printErrors$1500+1)& (0+255),b
 19048  0045FA  0EDD               	movlw	low STR_193
 19049  0045FC  D004               	goto	L20
 19050  0045FE                     l16025:
 19051  0045FE  0E7B               	movlw	high STR_208
 19052  004600  0100               	movlb	0	; () banked
 19053  004602  6F95               	movwf	(_printErrors$1500+1)& (0+255),b
 19054  004604  0EFA               	movlw	low STR_208
 19055  004606                     L20:
 19056  004606  6F94               	movwf	_printErrors$1500& (0+255),b
 19057                           
 19058                           ; BSR set to: 0
 19059  004608  0E01               	movlw	high _wrkbuf
 19060  00460A  0100               	movlb	0	; () banked
 19061  00460C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19062  00460E  0E7D               	movlw	low _wrkbuf
 19063  004610  6F76               	movwf	?_sprintf& (0+255),b
 19064  004612  C094  F078         	movff	_printErrors$1500,?_sprintf+2
 19065  004616  C095  F079         	movff	_printErrors$1500+1,?_sprintf+3
 19066  00461A  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 19067  00461E  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 19068  004622  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 19069  004626  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 19070  00462A  EC3F  F026         	call	_sprintf	;wreg free
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;main.c: 2744: putsUSART(wrkbuf);
 19074  00462E  0E01               	movlw	high _wrkbuf
 19075  004630  0100               	movlb	0	; () banked
 19076  004632  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19077  004634  0E7D               	movlw	low _wrkbuf
 19078  004636  6F61               	movwf	?_putsUSART& (0+255),b
 19079  004638  EC69  F00A         	call	_putsUSART	;wreg free
 19080                           
 19081                           ;main.c: 2745: putsUSART((char *) "\r\n");
 19082  00463C  0E70               	movlw	high (STR_228+50)
 19083  00463E  0100               	movlb	0	; () banked
 19084  004640  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19085  004642  0EC4               	movlw	low (STR_228+50)
 19086  004644  6F61               	movwf	?_putsUSART& (0+255),b
 19087  004646  EC69  F00A         	call	_putsUSART	;wreg free
 19088                           
 19089                           ;main.c: 2747: putsUSART((char *) "CAN Transmit overruns: ");
 19090  00464A  0E79               	movlw	high STR_211
 19091  00464C  0100               	movlb	0	; () banked
 19092  00464E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19093  004650  0E24               	movlw	low STR_211
 19094  004652  6F61               	movwf	?_putsUSART& (0+255),b
 19095  004654  EC69  F00A         	call	_putsUSART	;wreg free
 19096                           
 19097                           ;main.c: 2748: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 19098  004658  662C               	tstfsz	_bHex,c
 19099  00465A  D005               	goto	l16039
 19100  00465C  0E7C               	movlw	high STR_193
 19101  00465E  0100               	movlb	0	; () banked
 19102  004660  6F97               	movwf	(_printErrors$1506+1)& (0+255),b
 19103  004662  0EDD               	movlw	low STR_193
 19104  004664  D004               	goto	L21
 19105  004666                     l16039:
 19106  004666  0E7B               	movlw	high STR_208
 19107  004668  0100               	movlb	0	; () banked
 19108  00466A  6F97               	movwf	(_printErrors$1506+1)& (0+255),b
 19109  00466C  0EFA               	movlw	low STR_208
 19110  00466E                     L21:
 19111  00466E  6F96               	movwf	_printErrors$1506& (0+255),b
 19112                           
 19113                           ; BSR set to: 0
 19114  004670  0E01               	movlw	high _wrkbuf
 19115  004672  0100               	movlb	0	; () banked
 19116  004674  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19117  004676  0E7D               	movlw	low _wrkbuf
 19118  004678  6F76               	movwf	?_sprintf& (0+255),b
 19119  00467A  C096  F078         	movff	_printErrors$1506,?_sprintf+2
 19120  00467E  C097  F079         	movff	_printErrors$1506+1,?_sprintf+3
 19121  004682  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 19122  004686  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 19123  00468A  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 19124  00468E  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 19125  004692  EC3F  F026         	call	_sprintf	;wreg free
 19126                           
 19127                           ; BSR set to: 0
 19128                           ;main.c: 2749: putsUSART(wrkbuf);
 19129  004696  0E01               	movlw	high _wrkbuf
 19130  004698  0100               	movlb	0	; () banked
 19131  00469A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19132  00469C  0E7D               	movlw	low _wrkbuf
 19133  00469E  6F61               	movwf	?_putsUSART& (0+255),b
 19134  0046A0  EC69  F00A         	call	_putsUSART	;wreg free
 19135                           
 19136                           ;main.c: 2750: putsUSART((char *) "\r\n");
 19137  0046A4  0E70               	movlw	high (STR_228+50)
 19138  0046A6  0100               	movlb	0	; () banked
 19139  0046A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19140  0046AA  0EC4               	movlw	low (STR_228+50)
 19141  0046AC  6F61               	movwf	?_putsUSART& (0+255),b
 19142  0046AE  EC69  F00A         	call	_putsUSART	;wreg free
 19143                           
 19144                           ;main.c: 2752: putsUSART((char *) "UART Receive overruns: ");
 19145  0046B2  0E79               	movlw	high STR_215
 19146  0046B4  0100               	movlb	0	; () banked
 19147  0046B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19148  0046B8  0E0C               	movlw	low STR_215
 19149  0046BA  6F61               	movwf	?_putsUSART& (0+255),b
 19150  0046BC  EC69  F00A         	call	_putsUSART	;wreg free
 19151                           
 19152                           ;main.c: 2753: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19153  0046C0  662C               	tstfsz	_bHex,c
 19154  0046C2  D005               	goto	l16053
 19155  0046C4  0E7C               	movlw	high STR_193
 19156  0046C6  0100               	movlb	0	; () banked
 19157  0046C8  6F99               	movwf	(_printErrors$1512+1)& (0+255),b
 19158  0046CA  0EDD               	movlw	low STR_193
 19159  0046CC  D004               	goto	L22
 19160  0046CE                     l16053:
 19161  0046CE  0E7B               	movlw	high STR_208
 19162  0046D0  0100               	movlb	0	; () banked
 19163  0046D2  6F99               	movwf	(_printErrors$1512+1)& (0+255),b
 19164  0046D4  0EFA               	movlw	low STR_208
 19165  0046D6                     L22:
 19166  0046D6  6F98               	movwf	_printErrors$1512& (0+255),b
 19167                           
 19168                           ; BSR set to: 0
 19169  0046D8  0E01               	movlw	high _wrkbuf
 19170  0046DA  0100               	movlb	0	; () banked
 19171  0046DC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19172  0046DE  0E7D               	movlw	low _wrkbuf
 19173  0046E0  6F76               	movwf	?_sprintf& (0+255),b
 19174  0046E2  C098  F078         	movff	_printErrors$1512,?_sprintf+2
 19175  0046E6  C099  F079         	movff	_printErrors$1512+1,?_sprintf+3
 19176  0046EA  C120  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 19177  0046EE  C121  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19178  0046F2  C122  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19179  0046F6  C123  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19180  0046FA  EC3F  F026         	call	_sprintf	;wreg free
 19181                           
 19182                           ; BSR set to: 0
 19183                           ;main.c: 2754: putsUSART(wrkbuf);
 19184  0046FE  0E01               	movlw	high _wrkbuf
 19185  004700  0100               	movlb	0	; () banked
 19186  004702  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19187  004704  0E7D               	movlw	low _wrkbuf
 19188  004706  6F61               	movwf	?_putsUSART& (0+255),b
 19189  004708  EC69  F00A         	call	_putsUSART	;wreg free
 19190                           
 19191                           ;main.c: 2755: putsUSART((char *) "\r\n");
 19192  00470C  0E70               	movlw	high (STR_228+50)
 19193  00470E  0100               	movlb	0	; () banked
 19194  004710  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19195  004712  0EC4               	movlw	low (STR_228+50)
 19196  004714  6F61               	movwf	?_putsUSART& (0+255),b
 19197  004716  EC69  F00A         	call	_putsUSART	;wreg free
 19198                           
 19199                           ;main.c: 2757: putsUSART((char *) "UART Receive overruns: ");
 19200  00471A  0E79               	movlw	high STR_215
 19201  00471C  0100               	movlb	0	; () banked
 19202  00471E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19203  004720  0E0C               	movlw	low STR_215
 19204  004722  6F61               	movwf	?_putsUSART& (0+255),b
 19205  004724  EC69  F00A         	call	_putsUSART	;wreg free
 19206                           
 19207                           ;main.c: 2758: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19208  004728  662C               	tstfsz	_bHex,c
 19209  00472A  D005               	goto	l16067
 19210  00472C  0E7C               	movlw	high STR_193
 19211  00472E  0100               	movlb	0	; () banked
 19212  004730  6F9B               	movwf	(_printErrors$1518+1)& (0+255),b
 19213  004732  0EDD               	movlw	low STR_193
 19214  004734  D004               	goto	L23
 19215  004736                     l16067:
 19216  004736  0E7B               	movlw	high STR_208
 19217  004738  0100               	movlb	0	; () banked
 19218  00473A  6F9B               	movwf	(_printErrors$1518+1)& (0+255),b
 19219  00473C  0EFA               	movlw	low STR_208
 19220  00473E                     L23:
 19221  00473E  6F9A               	movwf	_printErrors$1518& (0+255),b
 19222                           
 19223                           ; BSR set to: 0
 19224  004740  0E01               	movlw	high _wrkbuf
 19225  004742  0100               	movlb	0	; () banked
 19226  004744  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19227  004746  0E7D               	movlw	low _wrkbuf
 19228  004748  6F76               	movwf	?_sprintf& (0+255),b
 19229  00474A  C09A  F078         	movff	_printErrors$1518,?_sprintf+2
 19230  00474E  C09B  F079         	movff	_printErrors$1518+1,?_sprintf+3
 19231  004752  C124  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 19232  004756  C125  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19233  00475A  C126  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19234  00475E  C127  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19235  004762  EC3F  F026         	call	_sprintf	;wreg free
 19236                           
 19237                           ; BSR set to: 0
 19238                           ;main.c: 2759: putsUSART(wrkbuf);
 19239  004766  0E01               	movlw	high _wrkbuf
 19240  004768  0100               	movlb	0	; () banked
 19241  00476A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19242  00476C  0E7D               	movlw	low _wrkbuf
 19243  00476E  6F61               	movwf	?_putsUSART& (0+255),b
 19244  004770  EC69  F00A         	call	_putsUSART	;wreg free
 19245                           
 19246                           ;main.c: 2760: putsUSART((char *) "\r\n");
 19247  004774  0E70               	movlw	high (STR_228+50)
 19248  004776  0100               	movlb	0	; () banked
 19249  004778  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19250  00477A  0EC4               	movlw	low (STR_228+50)
 19251  00477C  6F61               	movwf	?_putsUSART& (0+255),b
 19252  00477E  EC69  F00A         	call	_putsUSART	;wreg free
 19253                           
 19254                           ;main.c: 2762: putsUSART((char *) "Transmit Error Counter: ");
 19255  004782  0E78               	movlw	high STR_223
 19256  004784  0100               	movlb	0	; () banked
 19257  004786  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19258  004788  0E4A               	movlw	low STR_223
 19259  00478A  6F61               	movwf	?_putsUSART& (0+255),b
 19260  00478C  EC69  F00A         	call	_putsUSART	;wreg free
 19261                           
 19262                           ;main.c: 2763: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19263  004790  662C               	tstfsz	_bHex,c
 19264  004792  D005               	goto	l16081
 19265  004794  0E7C               	movlw	high STR_61
 19266  004796  0100               	movlb	0	; () banked
 19267  004798  6F9D               	movwf	(_printErrors$1524+1)& (0+255),b
 19268  00479A  0EED               	movlw	low STR_61
 19269  00479C  D004               	goto	L24
 19270  00479E                     l16081:
 19271  00479E  0E7C               	movlw	high STR_60
 19272  0047A0  0100               	movlb	0	; () banked
 19273  0047A2  6F9D               	movwf	(_printErrors$1524+1)& (0+255),b
 19274  0047A4  0E49               	movlw	low STR_60
 19275  0047A6                     L24:
 19276  0047A6  6F9C               	movwf	_printErrors$1524& (0+255),b
 19277                           
 19278                           ; BSR set to: 0
 19279  0047A8  0E01               	movlw	high _wrkbuf
 19280  0047AA  0100               	movlb	0	; () banked
 19281  0047AC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19282  0047AE  0E7D               	movlw	low _wrkbuf
 19283  0047B0  6F76               	movwf	?_sprintf& (0+255),b
 19284  0047B2  C09C  F078         	movff	_printErrors$1524,?_sprintf+2
 19285  0047B6  C09D  F079         	movff	_printErrors$1524+1,?_sprintf+3
 19286  0047BA  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19287  0047BE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19288  0047C0  EC3F  F026         	call	_sprintf	;wreg free
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;main.c: 2764: putsUSART(wrkbuf);
 19292  0047C4  0E01               	movlw	high _wrkbuf
 19293  0047C6  0100               	movlb	0	; () banked
 19294  0047C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19295  0047CA  0E7D               	movlw	low _wrkbuf
 19296  0047CC  6F61               	movwf	?_putsUSART& (0+255),b
 19297  0047CE  EC69  F00A         	call	_putsUSART	;wreg free
 19298                           
 19299                           ;main.c: 2765: putsUSART((char *) "\r\n");
 19300  0047D2  0E70               	movlw	high (STR_228+50)
 19301  0047D4  0100               	movlb	0	; () banked
 19302  0047D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19303  0047D8  0EC4               	movlw	low (STR_228+50)
 19304  0047DA  6F61               	movwf	?_putsUSART& (0+255),b
 19305  0047DC  EC69  F00A         	call	_putsUSART	;wreg free
 19306                           
 19307                           ;main.c: 2767: if (COMSTATbits.TXWARN) {
 19308  0047E0  A474               	btfss	3956,2,c	;volatile
 19309  0047E2  D007               	goto	l16093
 19310                           
 19311                           ;main.c: 2768: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19312  0047E4  0E6E               	movlw	high STR_227
 19313  0047E6  0100               	movlb	0	; () banked
 19314  0047E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19315  0047EA  0E9C               	movlw	low STR_227
 19316  0047EC  6F61               	movwf	?_putsUSART& (0+255),b
 19317  0047EE  EC69  F00A         	call	_putsUSART	;wreg free
 19318  0047F2                     l16093:
 19319                           
 19320                           ;main.c: 2769: }
 19321                           ;main.c: 2771: if (COMSTATbits.TXBO) {
 19322  0047F2  AA74               	btfss	3956,5,c	;volatile
 19323  0047F4  D007               	goto	l16097
 19324                           
 19325                           ;main.c: 2772: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19326  0047F6  0E70               	movlw	high STR_228
 19327  0047F8  0100               	movlb	0	; () banked
 19328  0047FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19329  0047FC  0E92               	movlw	low STR_228
 19330  0047FE  6F61               	movwf	?_putsUSART& (0+255),b
 19331  004800  EC69  F00A         	call	_putsUSART	;wreg free
 19332  004804                     l16097:
 19333                           
 19334                           ;main.c: 2773: }
 19335                           ;main.c: 2775: if (COMSTATbits.TXBP) {
 19336  004804  A874               	btfss	3956,4,c	;volatile
 19337  004806  D007               	goto	l1236
 19338                           
 19339                           ;main.c: 2776: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19340  004808  0E6F               	movlw	high STR_229
 19341  00480A  0100               	movlb	0	; () banked
 19342  00480C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19343  00480E  0E10               	movlw	low STR_229
 19344  004810  6F61               	movwf	?_putsUSART& (0+255),b
 19345  004812  EC69  F00A         	call	_putsUSART	;wreg free
 19346  004816                     l1236:
 19347                           
 19348                           ;main.c: 2777: }
 19349                           ;main.c: 2780: putsUSART((char *) "Receive Error Counter: ");
 19350  004816  0E78               	movlw	high STR_230
 19351  004818  0100               	movlb	0	; () banked
 19352  00481A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19353  00481C  0EF4               	movlw	low STR_230
 19354  00481E  6F61               	movwf	?_putsUSART& (0+255),b
 19355  004820  EC69  F00A         	call	_putsUSART	;wreg free
 19356                           
 19357                           ;main.c: 2781: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19358  004824  662C               	tstfsz	_bHex,c
 19359  004826  D005               	goto	l16105
 19360  004828  0E7C               	movlw	high STR_61
 19361  00482A  0100               	movlb	0	; () banked
 19362  00482C  6F9F               	movwf	(_printErrors$1533+1)& (0+255),b
 19363  00482E  0EED               	movlw	low STR_61
 19364  004830  D004               	goto	L25
 19365  004832                     l16105:
 19366  004832  0E7C               	movlw	high STR_60
 19367  004834  0100               	movlb	0	; () banked
 19368  004836  6F9F               	movwf	(_printErrors$1533+1)& (0+255),b
 19369  004838  0E49               	movlw	low STR_60
 19370  00483A                     L25:
 19371  00483A  6F9E               	movwf	_printErrors$1533& (0+255),b
 19372                           
 19373                           ; BSR set to: 0
 19374  00483C  0E01               	movlw	high _wrkbuf
 19375  00483E  0100               	movlb	0	; () banked
 19376  004840  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19377  004842  0E7D               	movlw	low _wrkbuf
 19378  004844  6F76               	movwf	?_sprintf& (0+255),b
 19379  004846  C09E  F078         	movff	_printErrors$1533,?_sprintf+2
 19380  00484A  C09F  F079         	movff	_printErrors$1533+1,?_sprintf+3
 19381  00484E  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19382  004852  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19383  004854  EC3F  F026         	call	_sprintf	;wreg free
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;main.c: 2782: putsUSART(wrkbuf);
 19387  004858  0E01               	movlw	high _wrkbuf
 19388  00485A  0100               	movlb	0	; () banked
 19389  00485C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19390  00485E  0E7D               	movlw	low _wrkbuf
 19391  004860  6F61               	movwf	?_putsUSART& (0+255),b
 19392  004862  EC69  F00A         	call	_putsUSART	;wreg free
 19393                           
 19394                           ;main.c: 2783: putsUSART((char *) "\r\n");
 19395  004866  0E70               	movlw	high (STR_228+50)
 19396  004868  0100               	movlb	0	; () banked
 19397  00486A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19398  00486C  0EC4               	movlw	low (STR_228+50)
 19399  00486E  6F61               	movwf	?_putsUSART& (0+255),b
 19400  004870  EC69  F00A         	call	_putsUSART	;wreg free
 19401                           
 19402                           ;main.c: 2785: if (COMSTATbits.RXWARN) {
 19403  004874  A274               	btfss	3956,1,c	;volatile
 19404  004876  D007               	goto	l16117
 19405                           
 19406                           ;main.c: 2786: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19407  004878  0E6F               	movlw	high STR_234
 19408  00487A  0100               	movlb	0	; () banked
 19409  00487C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19410  00487E  0E81               	movlw	low STR_234
 19411  004880  6F61               	movwf	?_putsUSART& (0+255),b
 19412  004882  EC69  F00A         	call	_putsUSART	;wreg free
 19413  004886                     l16117:
 19414                           
 19415                           ;main.c: 2787: }
 19416                           ;main.c: 2789: if (COMSTATbits.RXBP) {
 19417  004886  A674               	btfss	3956,3,c	;volatile
 19418  004888  D007               	goto	l16121
 19419                           
 19420                           ;main.c: 2790: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19421  00488A  0E70               	movlw	high STR_235
 19422  00488C  0100               	movlb	0	; () banked
 19423  00488E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19424  004890  0E26               	movlw	low STR_235
 19425  004892  6F61               	movwf	?_putsUSART& (0+255),b
 19426  004894  EC69  F00A         	call	_putsUSART	;wreg free
 19427  004898                     l16121:
 19428                           
 19429                           ;main.c: 2791: }
 19430                           ;main.c: 2793: if (COMSTATbits.EWARN) {
 19431  004898  A074               	btfss	3956,0,c	;volatile
 19432  00489A  D007               	goto	l1244
 19433                           
 19434                           ;main.c: 2794: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19435  00489C  0E70               	movlw	high STR_236
 19436  00489E  0100               	movlb	0	; () banked
 19437  0048A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19438  0048A2  0EFB               	movlw	low STR_236
 19439  0048A4  6F61               	movwf	?_putsUSART& (0+255),b
 19440  0048A6  EC69  F00A         	call	_putsUSART	;wreg free
 19441  0048AA                     l1244:
 19442  0048AA  0012               	return	
 19443  0048AC                     __end_of_printErrors:
 19444                           	opt stack 0
 19445                           tblptru	equ	0xFF8
 19446                           tblptrh	equ	0xFF7
 19447                           tblptrl	equ	0xFF6
 19448                           tablat	equ	0xFF5
 19449                           prodh	equ	0xFF4
 19450                           prodl	equ	0xFF3
 19451                           intcon	equ	0xFF2
 19452                           indf0	equ	0xFEF
 19453                           postinc0	equ	0xFEE
 19454                           fsr0h	equ	0xFEA
 19455                           fsr0l	equ	0xFE9
 19456                           wreg	equ	0xFE8
 19457                           indf1	equ	0xFE7
 19458                           postinc1	equ	0xFE6
 19459                           postdec1	equ	0xFE5
 19460                           fsr1h	equ	0xFE2
 19461                           fsr1l	equ	0xFE1
 19462                           indf2	equ	0xFDF
 19463                           postinc2	equ	0xFDE
 19464                           postdec2	equ	0xFDD
 19465                           plusw2	equ	0xFDB
 19466                           fsr2h	equ	0xFDA
 19467                           fsr2l	equ	0xFD9
 19468                           status	equ	0xFD8
 19469                           
 19470 ;; *************** function _printStatistics *****************
 19471 ;; Defined at:
 19472 ;;		line 2714 in file "main.c"
 19473 ;; Parameters:    Size  Location     Type
 19474 ;;		None
 19475 ;; Auto vars:     Size  Location     Type
 19476 ;;		None
 19477 ;; Return value:  Size  Location     Type
 19478 ;;		None               void
 19479 ;; Registers used:
 19480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19481 ;; Tracked objects:
 19482 ;;		On entry : F/0
 19483 ;;		On exit  : 0/0
 19484 ;;		Unchanged: 0/0
 19485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19486 ;;      Params:         0       0       0       0       0       0       0
 19487 ;;      Locals:         0       8       0       0       0       0       0
 19488 ;;      Temps:          0       0       0       0       0       0       0
 19489 ;;      Totals:         0       8       0       0       0       0       0
 19490 ;;Total ram usage:        8 bytes
 19491 ;; Hardware stack levels used:    1
 19492 ;; Hardware stack levels required when called:    5
 19493 ;; This function calls:
 19494 ;;		_putsUSART
 19495 ;;		_sprintf
 19496 ;; This function is called by:
 19497 ;;		_doModeVerbose
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501                           	psect	text39
 19502  003690                     __ptext39:
 19503                           	opt stack 0
 19504  003690                     _printStatistics:
 19505                           	opt stack 23
 19506                           
 19507                           ; BSR set to: 0
 19508                           ;main.c: 2715: putsUSART((char *) "Sent CAN frames: ");
 19509                           
 19510                           ;incstack = 0
 19511                           ;incstack = 0
 19512  003690  0E7A               	movlw	high STR_191
 19513  003692  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19514  003694  0EB2               	movlw	low STR_191
 19515  003696  6F61               	movwf	?_putsUSART& (0+255),b
 19516  003698  EC69  F00A         	call	_putsUSART	;wreg free
 19517                           
 19518                           ;main.c: 2716: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19519  00369C  662C               	tstfsz	_bHex,c
 19520  00369E  D005               	goto	l15969
 19521  0036A0  0E7C               	movlw	high STR_193
 19522  0036A2  0100               	movlb	0	; () banked
 19523  0036A4  6F95               	movwf	(_printStatistics$1475+1)& (0+255),b
 19524  0036A6  0EDD               	movlw	low STR_193
 19525  0036A8  D004               	goto	L26
 19526  0036AA                     l15969:
 19527  0036AA  0E7C               	movlw	high STR_192
 19528  0036AC  0100               	movlb	0	; () banked
 19529  0036AE  6F95               	movwf	(_printStatistics$1475+1)& (0+255),b
 19530  0036B0  0E57               	movlw	low STR_192
 19531  0036B2                     L26:
 19532  0036B2  6F94               	movwf	_printStatistics$1475& (0+255),b
 19533                           
 19534                           ; BSR set to: 0
 19535  0036B4  0E01               	movlw	high _wrkbuf
 19536  0036B6  0100               	movlb	0	; () banked
 19537  0036B8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19538  0036BA  0E7D               	movlw	low _wrkbuf
 19539  0036BC  6F76               	movwf	?_sprintf& (0+255),b
 19540  0036BE  C094  F078         	movff	_printStatistics$1475,?_sprintf+2
 19541  0036C2  C095  F079         	movff	_printStatistics$1475+1,?_sprintf+3
 19542  0036C6  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19543  0036CA  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19544  0036CE  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19545  0036D2  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19546  0036D6  EC3F  F026         	call	_sprintf	;wreg free
 19547                           
 19548                           ; BSR set to: 0
 19549                           ;main.c: 2717: putsUSART(wrkbuf);
 19550  0036DA  0E01               	movlw	high _wrkbuf
 19551  0036DC  0100               	movlb	0	; () banked
 19552  0036DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19553  0036E0  0E7D               	movlw	low _wrkbuf
 19554  0036E2  6F61               	movwf	?_putsUSART& (0+255),b
 19555  0036E4  EC69  F00A         	call	_putsUSART	;wreg free
 19556                           
 19557                           ;main.c: 2718: putsUSART((char *) "\r\n");
 19558  0036E8  0E70               	movlw	high (STR_228+50)
 19559  0036EA  0100               	movlb	0	; () banked
 19560  0036EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19561  0036EE  0EC4               	movlw	low (STR_228+50)
 19562  0036F0  6F61               	movwf	?_putsUSART& (0+255),b
 19563  0036F2  EC69  F00A         	call	_putsUSART	;wreg free
 19564                           
 19565                           ;main.c: 2720: putsUSART((char *) "Sent CAN bytes: ");
 19566  0036F6  0E7A               	movlw	high STR_195
 19567  0036F8  0100               	movlb	0	; () banked
 19568  0036FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19569  0036FC  0EF7               	movlw	low STR_195
 19570  0036FE  6F61               	movwf	?_putsUSART& (0+255),b
 19571  003700  EC69  F00A         	call	_putsUSART	;wreg free
 19572                           
 19573                           ;main.c: 2721: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19574  003704  662C               	tstfsz	_bHex,c
 19575  003706  D005               	goto	l15983
 19576  003708  0E7C               	movlw	high STR_193
 19577  00370A  0100               	movlb	0	; () banked
 19578  00370C  6F97               	movwf	(_printStatistics$1481+1)& (0+255),b
 19579  00370E  0EDD               	movlw	low STR_193
 19580  003710  D004               	goto	L27
 19581  003712                     l15983:
 19582  003712  0E7C               	movlw	high STR_192
 19583  003714  0100               	movlb	0	; () banked
 19584  003716  6F97               	movwf	(_printStatistics$1481+1)& (0+255),b
 19585  003718  0E57               	movlw	low STR_192
 19586  00371A                     L27:
 19587  00371A  6F96               	movwf	_printStatistics$1481& (0+255),b
 19588                           
 19589                           ; BSR set to: 0
 19590  00371C  0E01               	movlw	high _wrkbuf
 19591  00371E  0100               	movlb	0	; () banked
 19592  003720  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19593  003722  0E7D               	movlw	low _wrkbuf
 19594  003724  6F76               	movwf	?_sprintf& (0+255),b
 19595  003726  C096  F078         	movff	_printStatistics$1481,?_sprintf+2
 19596  00372A  C097  F079         	movff	_printStatistics$1481+1,?_sprintf+3
 19597  00372E  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19598  003732  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19599  003736  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19600  00373A  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19601  00373E  EC3F  F026         	call	_sprintf	;wreg free
 19602                           
 19603                           ; BSR set to: 0
 19604                           ;main.c: 2722: putsUSART(wrkbuf);
 19605  003742  0E01               	movlw	high _wrkbuf
 19606  003744  0100               	movlb	0	; () banked
 19607  003746  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19608  003748  0E7D               	movlw	low _wrkbuf
 19609  00374A  6F61               	movwf	?_putsUSART& (0+255),b
 19610  00374C  EC69  F00A         	call	_putsUSART	;wreg free
 19611                           
 19612                           ;main.c: 2723: putsUSART((char *) "\r\n");
 19613  003750  0E70               	movlw	high (STR_228+50)
 19614  003752  0100               	movlb	0	; () banked
 19615  003754  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19616  003756  0EC4               	movlw	low (STR_228+50)
 19617  003758  6F61               	movwf	?_putsUSART& (0+255),b
 19618  00375A  EC69  F00A         	call	_putsUSART	;wreg free
 19619                           
 19620                           ;main.c: 2725: putsUSART((char *) "Received CAN frames: ");
 19621  00375E  0E79               	movlw	high STR_199
 19622  003760  0100               	movlb	0	; () banked
 19623  003762  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19624  003764  0EC4               	movlw	low STR_199
 19625  003766  6F61               	movwf	?_putsUSART& (0+255),b
 19626  003768  EC69  F00A         	call	_putsUSART	;wreg free
 19627                           
 19628                           ;main.c: 2726: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19629  00376C  662C               	tstfsz	_bHex,c
 19630  00376E  D005               	goto	l15997
 19631  003770  0E7C               	movlw	high STR_193
 19632  003772  0100               	movlb	0	; () banked
 19633  003774  6F99               	movwf	(_printStatistics$1487+1)& (0+255),b
 19634  003776  0EDD               	movlw	low STR_193
 19635  003778  D004               	goto	L28
 19636  00377A                     l15997:
 19637  00377A  0E7C               	movlw	high STR_192
 19638  00377C  0100               	movlb	0	; () banked
 19639  00377E  6F99               	movwf	(_printStatistics$1487+1)& (0+255),b
 19640  003780  0E57               	movlw	low STR_192
 19641  003782                     L28:
 19642  003782  6F98               	movwf	_printStatistics$1487& (0+255),b
 19643                           
 19644                           ; BSR set to: 0
 19645  003784  0E01               	movlw	high _wrkbuf
 19646  003786  0100               	movlb	0	; () banked
 19647  003788  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19648  00378A  0E7D               	movlw	low _wrkbuf
 19649  00378C  6F76               	movwf	?_sprintf& (0+255),b
 19650  00378E  C098  F078         	movff	_printStatistics$1487,?_sprintf+2
 19651  003792  C099  F079         	movff	_printStatistics$1487+1,?_sprintf+3
 19652  003796  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19653  00379A  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19654  00379E  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19655  0037A2  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19656  0037A6  EC3F  F026         	call	_sprintf	;wreg free
 19657                           
 19658                           ; BSR set to: 0
 19659                           ;main.c: 2727: putsUSART(wrkbuf);
 19660  0037AA  0E01               	movlw	high _wrkbuf
 19661  0037AC  0100               	movlb	0	; () banked
 19662  0037AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19663  0037B0  0E7D               	movlw	low _wrkbuf
 19664  0037B2  6F61               	movwf	?_putsUSART& (0+255),b
 19665  0037B4  EC69  F00A         	call	_putsUSART	;wreg free
 19666                           
 19667                           ;main.c: 2728: putsUSART((char *) "\r\n");
 19668  0037B8  0E70               	movlw	high (STR_228+50)
 19669  0037BA  0100               	movlb	0	; () banked
 19670  0037BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19671  0037BE  0EC4               	movlw	low (STR_228+50)
 19672  0037C0  6F61               	movwf	?_putsUSART& (0+255),b
 19673  0037C2  EC69  F00A         	call	_putsUSART	;wreg free
 19674                           
 19675                           ;main.c: 2730: putsUSART((char *) "Received CAN bytes: ");
 19676  0037C6  0E79               	movlw	high STR_203
 19677  0037C8  0100               	movlb	0	; () banked
 19678  0037CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19679  0037CC  0EDA               	movlw	low STR_203
 19680  0037CE  6F61               	movwf	?_putsUSART& (0+255),b
 19681  0037D0  EC69  F00A         	call	_putsUSART	;wreg free
 19682                           
 19683                           ;main.c: 2731: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19684  0037D4  662C               	tstfsz	_bHex,c
 19685  0037D6  D005               	goto	l16011
 19686  0037D8  0E7C               	movlw	high STR_193
 19687  0037DA  0100               	movlb	0	; () banked
 19688  0037DC  6F9B               	movwf	(_printStatistics$1493+1)& (0+255),b
 19689  0037DE  0EDD               	movlw	low STR_193
 19690  0037E0  D004               	goto	L29
 19691  0037E2                     l16011:
 19692  0037E2  0E7C               	movlw	high STR_192
 19693  0037E4  0100               	movlb	0	; () banked
 19694  0037E6  6F9B               	movwf	(_printStatistics$1493+1)& (0+255),b
 19695  0037E8  0E57               	movlw	low STR_192
 19696  0037EA                     L29:
 19697  0037EA  6F9A               	movwf	_printStatistics$1493& (0+255),b
 19698                           
 19699                           ; BSR set to: 0
 19700  0037EC  0E01               	movlw	high _wrkbuf
 19701  0037EE  0100               	movlb	0	; () banked
 19702  0037F0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19703  0037F2  0E7D               	movlw	low _wrkbuf
 19704  0037F4  6F76               	movwf	?_sprintf& (0+255),b
 19705  0037F6  C09A  F078         	movff	_printStatistics$1493,?_sprintf+2
 19706  0037FA  C09B  F079         	movff	_printStatistics$1493+1,?_sprintf+3
 19707  0037FE  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19708  003802  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19709  003806  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19710  00380A  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19711  00380E  EC3F  F026         	call	_sprintf	;wreg free
 19712                           
 19713                           ; BSR set to: 0
 19714                           ;main.c: 2732: putsUSART(wrkbuf);
 19715  003812  0E01               	movlw	high _wrkbuf
 19716  003814  0100               	movlb	0	; () banked
 19717  003816  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19718  003818  0E7D               	movlw	low _wrkbuf
 19719  00381A  6F61               	movwf	?_putsUSART& (0+255),b
 19720  00381C  EC69  F00A         	call	_putsUSART	;wreg free
 19721                           
 19722                           ;main.c: 2733: putsUSART((char *) "\r\n");
 19723  003820  0E70               	movlw	high (STR_228+50)
 19724  003822  0100               	movlb	0	; () banked
 19725  003824  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19726  003826  0EC4               	movlw	low (STR_228+50)
 19727  003828  6F61               	movwf	?_putsUSART& (0+255),b
 19728  00382A  EF69  F00A         	goto	_putsUSART	;wreg free
 19729  00382E                     __end_of_printStatistics:
 19730                           	opt stack 0
 19731                           tblptru	equ	0xFF8
 19732                           tblptrh	equ	0xFF7
 19733                           tblptrl	equ	0xFF6
 19734                           tablat	equ	0xFF5
 19735                           prodh	equ	0xFF4
 19736                           prodl	equ	0xFF3
 19737                           intcon	equ	0xFF2
 19738                           indf0	equ	0xFEF
 19739                           postinc0	equ	0xFEE
 19740                           fsr0h	equ	0xFEA
 19741                           fsr0l	equ	0xFE9
 19742                           wreg	equ	0xFE8
 19743                           indf1	equ	0xFE7
 19744                           postinc1	equ	0xFE6
 19745                           postdec1	equ	0xFE5
 19746                           fsr1h	equ	0xFE2
 19747                           fsr1l	equ	0xFE1
 19748                           indf2	equ	0xFDF
 19749                           postinc2	equ	0xFDE
 19750                           postdec2	equ	0xFDD
 19751                           plusw2	equ	0xFDB
 19752                           fsr2h	equ	0xFDA
 19753                           fsr2l	equ	0xFD9
 19754                           status	equ	0xFD8
 19755                           
 19756 ;; *************** function _atoi *****************
 19757 ;; Defined at:
 19758 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19759 ;; Parameters:    Size  Location     Type
 19760 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19761 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 19762 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 19763 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 19764 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 19765 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19766 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19767 ;; Auto vars:     Size  Location     Type
 19768 ;;  a               2   11[BANK0 ] int 
 19769 ;;  sign            1   10[BANK0 ] unsigned char 
 19770 ;; Return value:  Size  Location     Type
 19771 ;;                  2    6[BANK0 ] int 
 19772 ;; Registers used:
 19773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19774 ;; Tracked objects:
 19775 ;;		On entry : C/2
 19776 ;;		On exit  : F/0
 19777 ;;		Unchanged: 0/0
 19778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19779 ;;      Params:         0       2       0       0       0       0       0
 19780 ;;      Locals:         0       3       0       0       0       0       0
 19781 ;;      Temps:          0       2       0       0       0       0       0
 19782 ;;      Totals:         0       7       0       0       0       0       0
 19783 ;;Total ram usage:        7 bytes
 19784 ;; Hardware stack levels used:    1
 19785 ;; Hardware stack levels required when called:    4
 19786 ;; This function calls:
 19787 ;;		_isdigit
 19788 ;;		___wmul
 19789 ;; This function is called by:
 19790 ;;		_doModeVerbose
 19791 ;; This function uses a non-reentrant model
 19792 ;;
 19793                           
 19794                           	psect	text40
 19795  002B2A                     __ptext40:
 19796                           	opt stack 0
 19797  002B2A                     _atoi:
 19798                           	opt stack 24
 19799                           
 19800                           ;incstack = 0
 19801                           ;incstack = 0
 19802  002B2A  D003               	goto	l15921
 19803  002B2C                     l15919:
 19804  002B2C  0100               	movlb	0	; () banked
 19805  002B2E  4B66               	infsnz	atoi@s& (0+255),f,b
 19806  002B30  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19807  002B32                     l15921:
 19808  002B32  0100               	movlb	0	; () banked
 19809  002B34  D876               	call	PL20	;call to abstracted procedure
 19810  002B36  64EA               	cpfsgt	fsr0h,c
 19811  002B38  D003               	bra	u20927
 19812  002B3A  6EEA               	movwf	fsr0h,c
 19813  002B3C  50EF               	movf	indf0,w,c
 19814  002B3E  D003               	bra	u20920
 19815  002B40                     u20927:
 19816  002B40  6EF7               	movwf	tblptrh,c
 19817  002B42  0008               	tblrd		*
 19818  002B44  50F5               	movf	tablat,w,c
 19819  002B46                     u20920:
 19820  002B46  0A20               	xorlw	32
 19821  002B48  E0F1               	bz	l15919
 19822  002B4A  0100               	movlb	0	; () banked
 19823  002B4C  D86A               	call	PL20	;call to abstracted procedure
 19824  002B4E  64EA               	cpfsgt	fsr0h,c
 19825  002B50  D003               	bra	u20947
 19826  002B52  6EEA               	movwf	fsr0h,c
 19827  002B54  50EF               	movf	indf0,w,c
 19828  002B56  D003               	bra	u20940
 19829  002B58                     u20947:
 19830  002B58  6EF7               	movwf	tblptrh,c
 19831  002B5A  0008               	tblrd		*
 19832  002B5C  50F5               	movf	tablat,w,c
 19833  002B5E                     u20940:
 19834  002B5E  0A09               	xorlw	9
 19835  002B60  E0E5               	bz	l15919
 19836  002B62  0100               	movlb	0	; () banked
 19837  002B64  6B6B               	clrf	atoi@a& (0+255),b
 19838  002B66  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19839  002B68  6B6A               	clrf	atoi@sign& (0+255),b
 19840                           
 19841                           ; BSR set to: 0
 19842  002B6A  D85B               	call	PL20	;call to abstracted procedure
 19843  002B6C  64EA               	cpfsgt	fsr0h,c
 19844  002B6E  D003               	bra	u20967
 19845  002B70  6EEA               	movwf	fsr0h,c
 19846  002B72  50EF               	movf	indf0,w,c
 19847  002B74  D003               	bra	u20960
 19848  002B76                     u20967:
 19849  002B76  6EF7               	movwf	tblptrh,c
 19850  002B78  0008               	tblrd		*
 19851  002B7A  50F5               	movf	tablat,w,c
 19852  002B7C                     u20960:
 19853  002B7C  0A2D               	xorlw	45
 19854  002B7E  E103               	bnz	l15929
 19855  002B80  0100               	movlb	0	; () banked
 19856  002B82  2B6A               	incf	atoi@sign& (0+255),f,b
 19857  002B84  D00D               	goto	L30
 19858  002B86                     l15929:
 19859  002B86  0100               	movlb	0	; () banked
 19860  002B88  D84C               	call	PL20	;call to abstracted procedure
 19861  002B8A  64EA               	cpfsgt	fsr0h,c
 19862  002B8C  D003               	bra	u20987
 19863  002B8E  6EEA               	movwf	fsr0h,c
 19864  002B90  50EF               	movf	indf0,w,c
 19865  002B92  D003               	bra	u20980
 19866  002B94                     u20987:
 19867  002B94  6EF7               	movwf	tblptrh,c
 19868  002B96  0008               	tblrd		*
 19869  002B98  50F5               	movf	tablat,w,c
 19870  002B9A                     u20980:
 19871  002B9A  0A2B               	xorlw	43
 19872  002B9C  E121               	bnz	l15937
 19873  002B9E                     l15931:
 19874  002B9E  0100               	movlb	0	; () banked
 19875  002BA0                     L30:
 19876  002BA0  4B66               	infsnz	atoi@s& (0+255),f,b
 19877  002BA2  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19878  002BA4  D01D               	goto	l15937
 19879  002BA6                     l15933:
 19880                           
 19881                           ; BSR set to: 0
 19882  002BA6  C06B  F060         	movff	atoi@a,?___wmul
 19883  002BAA  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19884  002BAE  6B63               	clrf	(?___wmul+3)& (0+255),b
 19885  002BB0  0E0A               	movlw	10
 19886  002BB2  6F62               	movwf	(?___wmul+2)& (0+255),b
 19887  002BB4  EC46  F008         	call	___wmul	;wreg free
 19888  002BB8  D834               	call	PL20	;call to abstracted procedure
 19889  002BBA  64EA               	cpfsgt	fsr0h,c
 19890  002BBC  D003               	bra	u21007
 19891  002BBE  6EEA               	movwf	fsr0h,c
 19892  002BC0  50EF               	movf	indf0,w,c
 19893  002BC2  D003               	bra	u21000
 19894  002BC4                     u21007:
 19895  002BC4  6EF7               	movwf	tblptrh,c
 19896  002BC6  0008               	tblrd		*
 19897  002BC8  50F5               	movf	tablat,w,c
 19898  002BCA                     u21000:
 19899  002BCA  0100               	movlb	0	; () banked
 19900  002BCC  2760               	addwf	?___wmul& (0+255),f,b
 19901  002BCE  0E00               	movlw	0
 19902  002BD0  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19903  002BD2  0ED0               	movlw	208
 19904  002BD4  2560               	addwf	?___wmul& (0+255),w,b
 19905  002BD6  6F6B               	movwf	atoi@a& (0+255),b
 19906  002BD8  0EFF               	movlw	255
 19907  002BDA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19908  002BDC  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19909  002BDE  D7DF               	goto	l15931
 19910  002BE0                     l15937:
 19911  002BE0  0100               	movlb	0	; () banked
 19912  002BE2  D81F               	call	PL20	;call to abstracted procedure
 19913  002BE4  64EA               	cpfsgt	fsr0h,c
 19914  002BE6  D003               	bra	u21017
 19915  002BE8  6EEA               	movwf	fsr0h,c
 19916  002BEA  50EF               	movf	indf0,w,c
 19917  002BEC  D003               	bra	u21010
 19918  002BEE                     u21017:
 19919  002BEE  6EF7               	movwf	tblptrh,c
 19920  002BF0  0008               	tblrd		*
 19921  002BF2  50F5               	movf	tablat,w,c
 19922  002BF4                     u21010:
 19923  002BF4  ECF1  F007         	call	_isdigit
 19924  002BF8  E2D6               	bc	l15933
 19925                           
 19926                           ; BSR set to: 0
 19927  002BFA  516A               	movf	atoi@sign& (0+255),w,b
 19928  002BFC  E00D               	bz	l2121
 19929                           
 19930                           ; BSR set to: 0
 19931  002BFE  C06B  F068         	movff	atoi@a,??_atoi
 19932  002C02  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19933  002C06  1F68               	comf	??_atoi& (0+255),f,b
 19934  002C08  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19935  002C0A  4B68               	infsnz	??_atoi& (0+255),f,b
 19936  002C0C  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19937  002C0E  C068  F066         	movff	??_atoi,?_atoi
 19938  002C12  C069  F067         	movff	??_atoi+1,?_atoi+1
 19939  002C16  D004               	goto	l2122
 19940  002C18                     l2121:
 19941                           
 19942                           ; BSR set to: 0
 19943  002C18  C06B  F066         	movff	atoi@a,?_atoi
 19944  002C1C  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19945  002C20                     l2122:
 19946                           
 19947                           ; BSR set to: 0
 19948  002C20  0012               	return	
 19949  002C22                     __end_of_atoi:
 19950                           	opt stack 0
 19951  002C22                     PL20:
 19952                           	opt stack 24
 19953  002C22  5166               	movf	atoi@s& (0+255),w,b
 19954  002C24  6EF6               	movwf	tblptrl,c
 19955  002C26  6EE9               	movwf	fsr0l,c
 19956  002C28  0E05               	movlw	(high __ramtop+-1)
 19957  002C2A  6EEA               	movwf	fsr0h,c
 19958  002C2C  5167               	movf	(atoi@s+1)& (0+255),w,b
 19959  002C2E  0012               	return	
 19960  002C30                     __end_ofPL20:
 19961                           	opt stack 0
 19962                           tblptru	equ	0xFF8
 19963                           tblptrh	equ	0xFF7
 19964                           tblptrl	equ	0xFF6
 19965                           tablat	equ	0xFF5
 19966                           prodh	equ	0xFF4
 19967                           prodl	equ	0xFF3
 19968                           intcon	equ	0xFF2
 19969                           indf0	equ	0xFEF
 19970                           postinc0	equ	0xFEE
 19971                           fsr0h	equ	0xFEA
 19972                           fsr0l	equ	0xFE9
 19973                           wreg	equ	0xFE8
 19974                           indf1	equ	0xFE7
 19975                           postinc1	equ	0xFE6
 19976                           postdec1	equ	0xFE5
 19977                           fsr1h	equ	0xFE2
 19978                           fsr1l	equ	0xFE1
 19979                           indf2	equ	0xFDF
 19980                           postinc2	equ	0xFDE
 19981                           postdec2	equ	0xFDD
 19982                           plusw2	equ	0xFDB
 19983                           fsr2h	equ	0xFDA
 19984                           fsr2l	equ	0xFD9
 19985                           status	equ	0xFD8
 19986                           
 19987 ;; *************** function _strtok *****************
 19988 ;; Defined at:
 19989 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19990 ;; Parameters:    Size  Location     Type
 19991 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19992 ;;		 -> NULL(0), cmdbuf(80), 
 19993 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19994 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 19995 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 19996 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 19997 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 19998 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19999 ;;		 -> STR_31(2), STR_30(2), 
 20000 ;; Auto vars:     Size  Location     Type
 20001 ;;		None
 20002 ;; Return value:  Size  Location     Type
 20003 ;;                  2   12[BANK0 ] PTR unsigned char 
 20004 ;; Registers used:
 20005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20006 ;; Tracked objects:
 20007 ;;		On entry : F/0
 20008 ;;		On exit  : F/0
 20009 ;;		Unchanged: 0/0
 20010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20011 ;;      Params:         0       4       0       0       0       0       0
 20012 ;;      Locals:         0       0       0       0       0       0       0
 20013 ;;      Temps:          0       0       0       0       0       0       0
 20014 ;;      Totals:         0       4       0       0       0       0       0
 20015 ;;Total ram usage:        4 bytes
 20016 ;; Hardware stack levels used:    1
 20017 ;; Hardware stack levels required when called:    5
 20018 ;; This function calls:
 20019 ;;		_strspn
 20020 ;;		_strcspn
 20021 ;; This function is called by:
 20022 ;;		_doModeVerbose
 20023 ;; This function uses a non-reentrant model
 20024 ;;
 20025                           
 20026                           	psect	text41
 20027  001B56                     __ptext41:
 20028                           	opt stack 0
 20029  001B56                     _strtok:
 20030                           	opt stack 23
 20031                           
 20032                           ; BSR set to: 0
 20033                           
 20034                           ; BSR set to: 0
 20035                           ;incstack = 0
 20036                           ;incstack = 0
 20037  001B56  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20038  001B58  116C               	iorwf	strtok@s1& (0+255),w,b
 20039  001B5A  E104               	bnz	l15899
 20040                           
 20041                           ; BSR set to: 0
 20042  001B5C  C024  F06C         	movff	strtok@sp,strtok@s1
 20043  001B60  C025  F06D         	movff	strtok@sp+1,strtok@s1+1
 20044  001B64                     l15899:
 20045                           
 20046                           ; BSR set to: 0
 20047  001B64  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20048  001B66  116C               	iorwf	strtok@s1& (0+255),w,b
 20049  001B68  E016               	bz	L31
 20050                           
 20051                           ; BSR set to: 0
 20052                           
 20053                           ; BSR set to: 0
 20054  001B6A  C06C  F066         	movff	strtok@s1,?_strspn
 20055  001B6E  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 20056  001B72  C06E  F068         	movff	strtok@s2,?_strspn+2
 20057  001B76  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 20058  001B7A  EC8C  F009         	call	_strspn	;wreg free
 20059  001B7E  5166               	movf	?_strspn& (0+255),w,b
 20060  001B80  276C               	addwf	strtok@s1& (0+255),f,b
 20061  001B82  5167               	movf	(?_strspn+1)& (0+255),w,b
 20062  001B84  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 20063                           
 20064                           ; BSR set to: 0
 20065  001B86  C06C  FFD9         	movff	strtok@s1,fsr2l
 20066  001B8A  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 20067  001B8E  50DF               	movf	indf2,w,c
 20068  001B90  E105               	bnz	l15909
 20069                           
 20070                           ; BSR set to: 0
 20071  001B92  6A24               	clrf	strtok@sp,c
 20072  001B94  6A25               	clrf	strtok@sp+1,c
 20073  001B96                     L31:
 20074  001B96  6B6C               	clrf	?_strtok& (0+255),b
 20075  001B98  6B6D               	clrf	(?_strtok+1)& (0+255),b
 20076  001B9A  D025               	goto	l2614
 20077  001B9C                     l15909:
 20078                           
 20079                           ; BSR set to: 0
 20080  001B9C  C06C  F066         	movff	strtok@s1,?_strcspn
 20081  001BA0  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 20082  001BA4  C06E  F068         	movff	strtok@s2,?_strcspn+2
 20083  001BA8  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 20084  001BAC  ECAE  F009         	call	_strcspn	;wreg free
 20085  001BB0  5166               	movf	?_strcspn& (0+255),w,b
 20086  001BB2  256C               	addwf	strtok@s1& (0+255),w,b
 20087  001BB4  6E24               	movwf	strtok@sp,c
 20088  001BB6  5167               	movf	(?_strcspn+1)& (0+255),w,b
 20089  001BB8  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 20090  001BBA  6E25               	movwf	strtok@sp+1,c
 20091                           
 20092                           ; BSR set to: 0
 20093  001BBC  C024  FFD9         	movff	strtok@sp,fsr2l
 20094  001BC0  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20095  001BC4  50DF               	movf	indf2,w,c
 20096  001BC6  E009               	bz	l2616
 20097                           
 20098                           ; BSR set to: 0
 20099  001BC8  C024  FFD9         	movff	strtok@sp,fsr2l
 20100  001BCC  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20101  001BD0  0E00               	movlw	0
 20102  001BD2  6EDF               	movwf	indf2,c
 20103                           
 20104                           ; BSR set to: 0
 20105  001BD4  4A24               	infsnz	strtok@sp,f,c
 20106  001BD6  2A25               	incf	strtok@sp+1,f,c
 20107  001BD8  D002               	goto	l2617
 20108  001BDA                     l2616:
 20109                           
 20110                           ; BSR set to: 0
 20111  001BDA  6A24               	clrf	strtok@sp,c
 20112  001BDC  6A25               	clrf	strtok@sp+1,c
 20113  001BDE                     l2617:
 20114                           
 20115                           ; BSR set to: 0
 20116  001BDE  C06C  F06C         	movff	strtok@s1,?_strtok
 20117  001BE2  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 20118  001BE6                     l2614:
 20119                           
 20120                           ; BSR set to: 0
 20121  001BE6  0012               	return	
 20122  001BE8                     __end_of_strtok:
 20123                           	opt stack 0
 20124                           tblptru	equ	0xFF8
 20125                           tblptrh	equ	0xFF7
 20126                           tblptrl	equ	0xFF6
 20127                           tablat	equ	0xFF5
 20128                           prodh	equ	0xFF4
 20129                           prodl	equ	0xFF3
 20130                           intcon	equ	0xFF2
 20131                           indf0	equ	0xFEF
 20132                           postinc0	equ	0xFEE
 20133                           fsr0h	equ	0xFEA
 20134                           fsr0l	equ	0xFE9
 20135                           wreg	equ	0xFE8
 20136                           indf1	equ	0xFE7
 20137                           postinc1	equ	0xFE6
 20138                           postdec1	equ	0xFE5
 20139                           fsr1h	equ	0xFE2
 20140                           fsr1l	equ	0xFE1
 20141                           indf2	equ	0xFDF
 20142                           postinc2	equ	0xFDE
 20143                           postdec2	equ	0xFDD
 20144                           plusw2	equ	0xFDB
 20145                           fsr2h	equ	0xFDA
 20146                           fsr2l	equ	0xFD9
 20147                           status	equ	0xFD8
 20148                           
 20149 ;; *************** function _strcspn *****************
 20150 ;; Defined at:
 20151 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20152 ;; Parameters:    Size  Location     Type
 20153 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20154 ;;		 -> NULL(0), cmdbuf(80), 
 20155 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20156 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20157 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20158 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20159 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20160 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20161 ;;		 -> STR_31(2), STR_30(2), 
 20162 ;; Auto vars:     Size  Location     Type
 20163 ;;  i               2   10[BANK0 ] unsigned int 
 20164 ;; Return value:  Size  Location     Type
 20165 ;;                  2    6[BANK0 ] unsigned int 
 20166 ;; Registers used:
 20167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20168 ;; Tracked objects:
 20169 ;;		On entry : F/0
 20170 ;;		On exit  : F/0
 20171 ;;		Unchanged: 0/0
 20172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20173 ;;      Params:         0       4       0       0       0       0       0
 20174 ;;      Locals:         0       2       0       0       0       0       0
 20175 ;;      Temps:          0       0       0       0       0       0       0
 20176 ;;      Totals:         0       6       0       0       0       0       0
 20177 ;;Total ram usage:        6 bytes
 20178 ;; Hardware stack levels used:    1
 20179 ;; Hardware stack levels required when called:    4
 20180 ;; This function calls:
 20181 ;;		_strchr
 20182 ;; This function is called by:
 20183 ;;		_strtok
 20184 ;; This function uses a non-reentrant model
 20185 ;;
 20186                           
 20187                           	psect	text42
 20188  00135C                     __ptext42:
 20189                           	opt stack 0
 20190  00135C                     _strcspn:
 20191                           	opt stack 23
 20192                           
 20193                           ; BSR set to: 0
 20194                           
 20195                           ; BSR set to: 0
 20196                           ;incstack = 0
 20197                           ;incstack = 0
 20198  00135C  6B6A               	clrf	strcspn@i& (0+255),b
 20199  00135E  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 20200  001360  D004               	goto	l17505
 20201  001362                     l17503:
 20202                           
 20203                           ; BSR set to: 0
 20204  001362  4B66               	infsnz	strcspn@s1& (0+255),f,b
 20205  001364  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 20206  001366  4B6A               	infsnz	strcspn@i& (0+255),f,b
 20207  001368  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 20208  00136A                     l17505:
 20209                           
 20210                           ; BSR set to: 0
 20211  00136A  C066  FFD9         	movff	strcspn@s1,fsr2l
 20212  00136E  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20213  001372  50DF               	movf	indf2,w,c
 20214  001374  E010               	bz	l2641
 20215                           
 20216                           ; BSR set to: 0
 20217  001376  C068  F060         	movff	strcspn@s2,?_strchr
 20218  00137A  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 20219  00137E  C066  FFD9         	movff	strcspn@s1,fsr2l
 20220  001382  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20221  001386  50DF               	movf	indf2,w,c
 20222  001388  6F62               	movwf	(?_strchr+2)& (0+255),b
 20223  00138A  6B63               	clrf	(?_strchr+3)& (0+255),b
 20224  00138C  EC50  F00B         	call	_strchr	;wreg free
 20225  001390  5161               	movf	(?_strchr+1)& (0+255),w,b
 20226  001392  1160               	iorwf	?_strchr& (0+255),w,b
 20227  001394  E0E6               	bz	l17503
 20228  001396                     l2641:
 20229                           
 20230                           ; BSR set to: 0
 20231  001396  C06A  F066         	movff	strcspn@i,?_strcspn
 20232  00139A  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 20233                           
 20234                           ; BSR set to: 0
 20235  00139E  0012               	return	
 20236  0013A0                     __end_of_strcspn:
 20237                           	opt stack 0
 20238                           tblptru	equ	0xFF8
 20239                           tblptrh	equ	0xFF7
 20240                           tblptrl	equ	0xFF6
 20241                           tablat	equ	0xFF5
 20242                           prodh	equ	0xFF4
 20243                           prodl	equ	0xFF3
 20244                           intcon	equ	0xFF2
 20245                           indf0	equ	0xFEF
 20246                           postinc0	equ	0xFEE
 20247                           fsr0h	equ	0xFEA
 20248                           fsr0l	equ	0xFE9
 20249                           wreg	equ	0xFE8
 20250                           indf1	equ	0xFE7
 20251                           postinc1	equ	0xFE6
 20252                           postdec1	equ	0xFE5
 20253                           fsr1h	equ	0xFE2
 20254                           fsr1l	equ	0xFE1
 20255                           indf2	equ	0xFDF
 20256                           postinc2	equ	0xFDE
 20257                           postdec2	equ	0xFDD
 20258                           plusw2	equ	0xFDB
 20259                           fsr2h	equ	0xFDA
 20260                           fsr2l	equ	0xFD9
 20261                           status	equ	0xFD8
 20262                           
 20263 ;; *************** function _strspn *****************
 20264 ;; Defined at:
 20265 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20266 ;; Parameters:    Size  Location     Type
 20267 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20268 ;;		 -> NULL(0), cmdbuf(80), 
 20269 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20270 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20271 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20272 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20273 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20274 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20275 ;;		 -> STR_31(2), STR_30(2), 
 20276 ;; Auto vars:     Size  Location     Type
 20277 ;;  i               2   10[BANK0 ] unsigned int 
 20278 ;; Return value:  Size  Location     Type
 20279 ;;                  2    6[BANK0 ] unsigned int 
 20280 ;; Registers used:
 20281 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20282 ;; Tracked objects:
 20283 ;;		On entry : F/0
 20284 ;;		On exit  : F/0
 20285 ;;		Unchanged: 0/0
 20286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20287 ;;      Params:         0       4       0       0       0       0       0
 20288 ;;      Locals:         0       2       0       0       0       0       0
 20289 ;;      Temps:          0       0       0       0       0       0       0
 20290 ;;      Totals:         0       6       0       0       0       0       0
 20291 ;;Total ram usage:        6 bytes
 20292 ;; Hardware stack levels used:    1
 20293 ;; Hardware stack levels required when called:    4
 20294 ;; This function calls:
 20295 ;;		_strchr
 20296 ;; This function is called by:
 20297 ;;		_strtok
 20298 ;; This function uses a non-reentrant model
 20299 ;;
 20300                           
 20301                           	psect	text43
 20302  001318                     __ptext43:
 20303                           	opt stack 0
 20304  001318                     _strspn:
 20305                           	opt stack 23
 20306                           
 20307                           ; BSR set to: 0
 20308                           
 20309                           ; BSR set to: 0
 20310                           ;incstack = 0
 20311                           ;incstack = 0
 20312  001318  6B6A               	clrf	strspn@i& (0+255),b
 20313  00131A  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20314  00131C  D004               	goto	l17497
 20315  00131E                     l17495:
 20316                           
 20317                           ; BSR set to: 0
 20318  00131E  4B66               	infsnz	strspn@s1& (0+255),f,b
 20319  001320  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20320  001322  4B6A               	infsnz	strspn@i& (0+255),f,b
 20321  001324  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20322  001326                     l17497:
 20323                           
 20324                           ; BSR set to: 0
 20325  001326  C066  FFD9         	movff	strspn@s1,fsr2l
 20326  00132A  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20327  00132E  50DF               	movf	indf2,w,c
 20328  001330  E010               	bz	l2660
 20329                           
 20330                           ; BSR set to: 0
 20331  001332  C068  F060         	movff	strspn@s2,?_strchr
 20332  001336  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20333  00133A  C066  FFD9         	movff	strspn@s1,fsr2l
 20334  00133E  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20335  001342  50DF               	movf	indf2,w,c
 20336  001344  6F62               	movwf	(?_strchr+2)& (0+255),b
 20337  001346  6B63               	clrf	(?_strchr+3)& (0+255),b
 20338  001348  EC50  F00B         	call	_strchr	;wreg free
 20339  00134C  5161               	movf	(?_strchr+1)& (0+255),w,b
 20340  00134E  1160               	iorwf	?_strchr& (0+255),w,b
 20341  001350  E1E6               	bnz	l17495
 20342  001352                     l2660:
 20343                           
 20344                           ; BSR set to: 0
 20345  001352  C06A  F066         	movff	strspn@i,?_strspn
 20346  001356  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20347                           
 20348                           ; BSR set to: 0
 20349  00135A  0012               	return	
 20350  00135C                     __end_of_strspn:
 20351                           	opt stack 0
 20352                           tblptru	equ	0xFF8
 20353                           tblptrh	equ	0xFF7
 20354                           tblptrl	equ	0xFF6
 20355                           tablat	equ	0xFF5
 20356                           prodh	equ	0xFF4
 20357                           prodl	equ	0xFF3
 20358                           intcon	equ	0xFF2
 20359                           indf0	equ	0xFEF
 20360                           postinc0	equ	0xFEE
 20361                           fsr0h	equ	0xFEA
 20362                           fsr0l	equ	0xFE9
 20363                           wreg	equ	0xFE8
 20364                           indf1	equ	0xFE7
 20365                           postinc1	equ	0xFE6
 20366                           postdec1	equ	0xFE5
 20367                           fsr1h	equ	0xFE2
 20368                           fsr1l	equ	0xFE1
 20369                           indf2	equ	0xFDF
 20370                           postinc2	equ	0xFDE
 20371                           postdec2	equ	0xFDD
 20372                           plusw2	equ	0xFDB
 20373                           fsr2h	equ	0xFDA
 20374                           fsr2l	equ	0xFD9
 20375                           status	equ	0xFD8
 20376                           
 20377 ;; *************** function _strchr *****************
 20378 ;; Defined at:
 20379 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20380 ;; Parameters:    Size  Location     Type
 20381 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20382 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20383 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20384 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20385 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20386 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20387 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20388 ;;  chr             2    2[BANK0 ] int 
 20389 ;; Auto vars:     Size  Location     Type
 20390 ;;		None
 20391 ;; Return value:  Size  Location     Type
 20392 ;;                  2    0[BANK0 ] PTR unsigned char 
 20393 ;; Registers used:
 20394 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20395 ;; Tracked objects:
 20396 ;;		On entry : F/0
 20397 ;;		On exit  : F/0
 20398 ;;		Unchanged: 0/0
 20399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20400 ;;      Params:         0       4       0       0       0       0       0
 20401 ;;      Locals:         0       0       0       0       0       0       0
 20402 ;;      Temps:          0       2       0       0       0       0       0
 20403 ;;      Totals:         0       6       0       0       0       0       0
 20404 ;;Total ram usage:        6 bytes
 20405 ;; Hardware stack levels used:    1
 20406 ;; Hardware stack levels required when called:    3
 20407 ;; This function calls:
 20408 ;;		Nothing
 20409 ;; This function is called by:
 20410 ;;		_doModeVerbose
 20411 ;;		_strcspn
 20412 ;;		_strspn
 20413 ;; This function uses a non-reentrant model
 20414 ;;
 20415                           
 20416                           	psect	text44
 20417  0016A0                     __ptext44:
 20418                           	opt stack 0
 20419  0016A0                     _strchr:
 20420                           	opt stack 25
 20421  0016A0                     l2562:
 20422                           
 20423                           ; BSR set to: 0
 20424  0016A0  0100               	movlb	0	; () banked
 20425  0016A2  5160               	movf	strchr@ptr& (0+255),w,b
 20426  0016A4  6EF6               	movwf	tblptrl,c
 20427  0016A6  6EE9               	movwf	fsr0l,c
 20428  0016A8  0E05               	movlw	(high __ramtop+-1)
 20429  0016AA  6EEA               	movwf	fsr0h,c
 20430  0016AC  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20431  0016AE  64EA               	cpfsgt	fsr0h,c
 20432  0016B0  D003               	bra	u15627
 20433  0016B2  6EEA               	movwf	fsr0h,c
 20434  0016B4  50EF               	movf	indf0,w,c
 20435  0016B6  D003               	bra	u15620
 20436  0016B8                     u15627:
 20437  0016B8  6EF7               	movwf	tblptrh,c
 20438  0016BA  0008               	tblrd		*
 20439  0016BC  50F5               	movf	tablat,w,c
 20440  0016BE                     u15620:
 20441  0016BE  0100               	movlb	0	; () banked
 20442  0016C0  1962               	xorwf	strchr@chr& (0+255),w,b
 20443  0016C2  E105               	bnz	l12625
 20444                           
 20445                           ; BSR set to: 0
 20446  0016C4  C060  F060         	movff	strchr@ptr,?_strchr
 20447  0016C8  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20448  0016CC  D019               	goto	l2564
 20449  0016CE                     l12625:
 20450                           
 20451                           ; BSR set to: 0
 20452  0016CE  5160               	movf	strchr@ptr& (0+255),w,b
 20453  0016D0  6F64               	movwf	??_strchr& (0+255),b
 20454  0016D2  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20455  0016D4  6F65               	movwf	(??_strchr+1)& (0+255),b
 20456  0016D6  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20457  0016D8  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20458  0016DA  5164               	movf	??_strchr& (0+255),w,b
 20459  0016DC  6EF6               	movwf	tblptrl,c
 20460  0016DE  6EE9               	movwf	fsr0l,c
 20461  0016E0  0E05               	movlw	(high __ramtop+-1)
 20462  0016E2  6EEA               	movwf	fsr0h,c
 20463  0016E4  5165               	movf	(??_strchr+1)& (0+255),w,b
 20464  0016E6  64EA               	cpfsgt	fsr0h,c
 20465  0016E8  D003               	bra	u15647
 20466  0016EA  6EEA               	movwf	fsr0h,c
 20467  0016EC  50EF               	movf	indf0,w,c
 20468  0016EE  D003               	bra	u15640
 20469  0016F0                     u15647:
 20470  0016F0  6EF7               	movwf	tblptrh,c
 20471  0016F2  0008               	tblrd		*
 20472  0016F4  50F5               	movf	tablat,w,c
 20473  0016F6                     u15640:
 20474  0016F6  0900               	iorlw	0
 20475  0016F8  E1D3               	bnz	l2562
 20476  0016FA  0100               	movlb	0	; () banked
 20477  0016FC  6B60               	clrf	?_strchr& (0+255),b
 20478  0016FE  6B61               	clrf	(?_strchr+1)& (0+255),b
 20479  001700                     l2564:
 20480                           
 20481                           ; BSR set to: 0
 20482  001700  0012               	return	
 20483  001702                     __end_of_strchr:
 20484                           	opt stack 0
 20485                           tblptru	equ	0xFF8
 20486                           tblptrh	equ	0xFF7
 20487                           tblptrl	equ	0xFF6
 20488                           tablat	equ	0xFF5
 20489                           prodh	equ	0xFF4
 20490                           prodl	equ	0xFF3
 20491                           intcon	equ	0xFF2
 20492                           indf0	equ	0xFEF
 20493                           postinc0	equ	0xFEE
 20494                           fsr0h	equ	0xFEA
 20495                           fsr0l	equ	0xFE9
 20496                           wreg	equ	0xFE8
 20497                           indf1	equ	0xFE7
 20498                           postinc1	equ	0xFE6
 20499                           postdec1	equ	0xFE5
 20500                           fsr1h	equ	0xFE2
 20501                           fsr1l	equ	0xFE1
 20502                           indf2	equ	0xFDF
 20503                           postinc2	equ	0xFDE
 20504                           postdec2	equ	0xFDD
 20505                           plusw2	equ	0xFDB
 20506                           fsr2h	equ	0xFDA
 20507                           fsr2l	equ	0xFD9
 20508                           status	equ	0xFD8
 20509                           
 20510 ;; *************** function _stristr *****************
 20511 ;; Defined at:
 20512 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20513 ;; Parameters:    Size  Location     Type
 20514 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20515 ;;		 -> NULL(0), cmdbuf(80), 
 20516 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20517 ;;		 -> STR_160(2), STR_159(9), STR_156(4), STR_154(3), 
 20518 ;;		 -> STR_153(6), STR_152(6), STR_151(8), STR_149(6), 
 20519 ;;		 -> STR_147(5), STR_145(8), STR_144(6), STR_143(9), 
 20520 ;;		 -> STR_142(7), STR_141(7), STR_140(5), STR_139(6), 
 20521 ;;		 -> STR_138(9), STR_136(11), STR_134(8), STR_132(4), 
 20522 ;;		 -> STR_131(5), STR_118(5), STR_105(7), STR_97(5), 
 20523 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20524 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20525 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20526 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20527 ;; Auto vars:     Size  Location     Type
 20528 ;;		None
 20529 ;; Return value:  Size  Location     Type
 20530 ;;                  2   13[BANK0 ] PTR unsigned char 
 20531 ;; Registers used:
 20532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20533 ;; Tracked objects:
 20534 ;;		On entry : F/0
 20535 ;;		On exit  : F/0
 20536 ;;		Unchanged: 0/0
 20537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20538 ;;      Params:         0       4       0       0       0       0       0
 20539 ;;      Locals:         0       0       0       0       0       0       0
 20540 ;;      Temps:          0       0       0       0       0       0       0
 20541 ;;      Totals:         0       4       0       0       0       0       0
 20542 ;;Total ram usage:        4 bytes
 20543 ;; Hardware stack levels used:    1
 20544 ;; Hardware stack levels required when called:    5
 20545 ;; This function calls:
 20546 ;;		_strlen
 20547 ;;		_strnicmp
 20548 ;;		_strichr
 20549 ;; This function is called by:
 20550 ;;		_doModeVerbose
 20551 ;; This function uses a non-reentrant model
 20552 ;;
 20553                           
 20554                           	psect	text45
 20555  0018C4                     __ptext45:
 20556                           	opt stack 0
 20557  0018C4                     _stristr:
 20558                           	opt stack 23
 20559                           
 20560                           ; BSR set to: 0
 20561                           
 20562                           ; BSR set to: 0
 20563                           ;incstack = 0
 20564                           ;incstack = 0
 20565  0018C4  D02F               	goto	l15891
 20566  0018C6                     l15885:
 20567                           
 20568                           ; BSR set to: 0
 20569  0018C6  C06D  F064         	movff	stristr@s1,?_strnicmp
 20570  0018CA  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20571  0018CE  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20572  0018D2  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20573  0018D6  C06F  F060         	movff	stristr@s2,?_strlen
 20574  0018DA  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20575  0018DE  EC4B  F009         	call	_strlen	;wreg free
 20576  0018E2  C060  F068         	movff	?_strlen,?_strnicmp+4
 20577  0018E6  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20578  0018EA  EC81  F00B         	call	_strnicmp	;wreg free
 20579  0018EE  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20580  0018F0  1164               	iorwf	?_strnicmp& (0+255),w,b
 20581  0018F2  E105               	bnz	l15889
 20582                           
 20583                           ; BSR set to: 0
 20584  0018F4  C06D  F06D         	movff	stristr@s1,?_stristr
 20585  0018F8  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20586  0018FC  D01E               	goto	l2583
 20587  0018FE                     l15889:
 20588                           
 20589                           ; BSR set to: 0
 20590  0018FE  296D               	incf	stristr@s1& (0+255),w,b
 20591  001900  6F61               	movwf	?_strichr& (0+255),b
 20592  001902  0E00               	movlw	0
 20593  001904  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20594  001906  6F62               	movwf	(?_strichr+1)& (0+255),b
 20595  001908  C06F  FFF6         	movff	stristr@s2,tblptrl
 20596  00190C  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20597  001910  0008               	tblrd		*
 20598  001912  50F5               	movf	tablat,w,c
 20599  001914  6F63               	movwf	(?_strichr+2)& (0+255),b
 20600  001916  6B64               	clrf	(?_strichr+3)& (0+255),b
 20601  001918  ECED  F008         	call	_strichr	;wreg free
 20602  00191C  C061  F06D         	movff	?_strichr,stristr@s1
 20603  001920  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20604  001924                     l15891:
 20605                           
 20606                           ; BSR set to: 0
 20607  001924  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20608  001926  116D               	iorwf	stristr@s1& (0+255),w,b
 20609  001928  E006               	bz	l2586
 20610                           
 20611                           ; BSR set to: 0
 20612  00192A  C06D  FFD9         	movff	stristr@s1,fsr2l
 20613  00192E  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20614  001932  50DF               	movf	indf2,w,c
 20615  001934  E1C8               	bnz	l15885
 20616  001936                     l2586:
 20617                           
 20618                           ; BSR set to: 0
 20619  001936  6B6D               	clrf	?_stristr& (0+255),b
 20620  001938  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20621  00193A                     l2583:
 20622                           
 20623                           ; BSR set to: 0
 20624  00193A  0012               	return	
 20625  00193C                     __end_of_stristr:
 20626                           	opt stack 0
 20627                           tblptru	equ	0xFF8
 20628                           tblptrh	equ	0xFF7
 20629                           tblptrl	equ	0xFF6
 20630                           tablat	equ	0xFF5
 20631                           prodh	equ	0xFF4
 20632                           prodl	equ	0xFF3
 20633                           intcon	equ	0xFF2
 20634                           indf0	equ	0xFEF
 20635                           postinc0	equ	0xFEE
 20636                           fsr0h	equ	0xFEA
 20637                           fsr0l	equ	0xFE9
 20638                           wreg	equ	0xFE8
 20639                           indf1	equ	0xFE7
 20640                           postinc1	equ	0xFE6
 20641                           postdec1	equ	0xFE5
 20642                           fsr1h	equ	0xFE2
 20643                           fsr1l	equ	0xFE1
 20644                           indf2	equ	0xFDF
 20645                           postinc2	equ	0xFDE
 20646                           postdec2	equ	0xFDD
 20647                           plusw2	equ	0xFDB
 20648                           fsr2h	equ	0xFDA
 20649                           fsr2l	equ	0xFD9
 20650                           status	equ	0xFD8
 20651                           
 20652 ;; *************** function _strichr *****************
 20653 ;; Defined at:
 20654 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20655 ;; Parameters:    Size  Location     Type
 20656 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20657 ;;		 -> NULL(0), cmdbuf(80), 
 20658 ;;  chr             2    3[BANK0 ] int 
 20659 ;; Auto vars:     Size  Location     Type
 20660 ;;		None
 20661 ;; Return value:  Size  Location     Type
 20662 ;;                  2    1[BANK0 ] PTR unsigned char 
 20663 ;; Registers used:
 20664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20665 ;; Tracked objects:
 20666 ;;		On entry : F/0
 20667 ;;		On exit  : F/0
 20668 ;;		Unchanged: 0/0
 20669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20670 ;;      Params:         0       4       0       0       0       0       0
 20671 ;;      Locals:         0       0       0       0       0       0       0
 20672 ;;      Temps:          0       0       0       0       0       0       0
 20673 ;;      Totals:         0       4       0       0       0       0       0
 20674 ;;Total ram usage:        4 bytes
 20675 ;; Hardware stack levels used:    1
 20676 ;; Hardware stack levels required when called:    4
 20677 ;; This function calls:
 20678 ;;		_toupper
 20679 ;; This function is called by:
 20680 ;;		_stristr
 20681 ;; This function uses a non-reentrant model
 20682 ;;
 20683                           
 20684                           	psect	text46
 20685  0011DA                     __ptext46:
 20686                           	opt stack 0
 20687  0011DA                     _strichr:
 20688                           	opt stack 23
 20689                           
 20690                           ; BSR set to: 0
 20691                           
 20692                           ; BSR set to: 0
 20693                           ;incstack = 0
 20694                           ;incstack = 0
 20695  0011DA  5163               	movf	strichr@chr& (0+255),w,b
 20696  0011DC  ECBB  F007         	call	_toupper
 20697  0011E0  6F63               	movwf	strichr@chr& (0+255),b
 20698  0011E2  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20699  0011E4  D010               	goto	l17481
 20700  0011E6                     l17475:
 20701                           
 20702                           ; BSR set to: 0
 20703  0011E6  C061  FFD9         	movff	strichr@ptr,fsr2l
 20704  0011EA  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20705  0011EE  50DF               	movf	indf2,w,c
 20706  0011F0  ECBB  F007         	call	_toupper
 20707  0011F4  1963               	xorwf	strichr@chr& (0+255),w,b
 20708  0011F6  E105               	bnz	l17479
 20709                           
 20710                           ; BSR set to: 0
 20711  0011F8  C061  F061         	movff	strichr@ptr,?_strichr
 20712  0011FC  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20713  001200  D00A               	goto	l2650
 20714  001202                     l17479:
 20715                           
 20716                           ; BSR set to: 0
 20717  001202  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20718  001204  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20719  001206                     l17481:
 20720                           
 20721                           ; BSR set to: 0
 20722  001206  C061  FFD9         	movff	strichr@ptr,fsr2l
 20723  00120A  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20724  00120E  50DF               	movf	indf2,w,c
 20725  001210  E1EA               	bnz	l17475
 20726                           
 20727                           ; BSR set to: 0
 20728  001212  6B61               	clrf	?_strichr& (0+255),b
 20729  001214  6B62               	clrf	(?_strichr+1)& (0+255),b
 20730  001216                     l2650:
 20731                           
 20732                           ; BSR set to: 0
 20733  001216  0012               	return	
 20734  001218                     __end_of_strichr:
 20735                           	opt stack 0
 20736                           tblptru	equ	0xFF8
 20737                           tblptrh	equ	0xFF7
 20738                           tblptrl	equ	0xFF6
 20739                           tablat	equ	0xFF5
 20740                           prodh	equ	0xFF4
 20741                           prodl	equ	0xFF3
 20742                           intcon	equ	0xFF2
 20743                           indf0	equ	0xFEF
 20744                           postinc0	equ	0xFEE
 20745                           fsr0h	equ	0xFEA
 20746                           fsr0l	equ	0xFE9
 20747                           wreg	equ	0xFE8
 20748                           indf1	equ	0xFE7
 20749                           postinc1	equ	0xFE6
 20750                           postdec1	equ	0xFE5
 20751                           fsr1h	equ	0xFE2
 20752                           fsr1l	equ	0xFE1
 20753                           indf2	equ	0xFDF
 20754                           postinc2	equ	0xFDE
 20755                           postdec2	equ	0xFDD
 20756                           plusw2	equ	0xFDB
 20757                           fsr2h	equ	0xFDA
 20758                           fsr2l	equ	0xFD9
 20759                           status	equ	0xFD8
 20760                           
 20761 ;; *************** function _strnicmp *****************
 20762 ;; Defined at:
 20763 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20764 ;; Parameters:    Size  Location     Type
 20765 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20766 ;;		 -> NULL(0), cmdbuf(80), 
 20767 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20768 ;;		 -> STR_160(2), STR_159(9), STR_156(4), STR_154(3), 
 20769 ;;		 -> STR_153(6), STR_152(6), STR_151(8), STR_149(6), 
 20770 ;;		 -> STR_147(5), STR_145(8), STR_144(6), STR_143(9), 
 20771 ;;		 -> STR_142(7), STR_141(7), STR_140(5), STR_139(6), 
 20772 ;;		 -> STR_138(9), STR_136(11), STR_134(8), STR_132(4), 
 20773 ;;		 -> STR_131(5), STR_118(5), STR_105(7), STR_97(5), 
 20774 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20775 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20776 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20777 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20778 ;;  len             2    8[BANK0 ] unsigned int 
 20779 ;; Auto vars:     Size  Location     Type
 20780 ;;  r               1   12[BANK0 ] char 
 20781 ;; Return value:  Size  Location     Type
 20782 ;;                  2    4[BANK0 ] int 
 20783 ;; Registers used:
 20784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20785 ;; Tracked objects:
 20786 ;;		On entry : F/0
 20787 ;;		On exit  : F/0
 20788 ;;		Unchanged: 0/0
 20789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20790 ;;      Params:         0       6       0       0       0       0       0
 20791 ;;      Locals:         0       1       0       0       0       0       0
 20792 ;;      Temps:          0       2       0       0       0       0       0
 20793 ;;      Totals:         0       9       0       0       0       0       0
 20794 ;;Total ram usage:        9 bytes
 20795 ;; Hardware stack levels used:    1
 20796 ;; Hardware stack levels required when called:    4
 20797 ;; This function calls:
 20798 ;;		_toupper
 20799 ;; This function is called by:
 20800 ;;		_stristr
 20801 ;; This function uses a non-reentrant model
 20802 ;;
 20803                           
 20804                           	psect	text47
 20805  001702                     __ptext47:
 20806                           	opt stack 0
 20807  001702                     _strnicmp:
 20808                           	opt stack 23
 20809                           
 20810                           ; BSR set to: 0
 20811                           
 20812                           ; BSR set to: 0
 20813                           ;incstack = 0
 20814                           ;incstack = 0
 20815  001702  D027               	goto	l17471
 20816  001704                     l17461:
 20817                           
 20818                           ; BSR set to: 0
 20819  001704  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20820  001708  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20821  00170C  0008               	tblrd		*
 20822  00170E  50F5               	movf	tablat,w,c
 20823  001710  ECBB  F007         	call	_toupper
 20824  001714  6F6A               	movwf	??_strnicmp& (0+255),b
 20825  001716  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20826  00171A  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20827  00171E  50DF               	movf	indf2,w,c
 20828  001720  ECBB  F007         	call	_toupper
 20829  001724  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20830  001726  516A               	movf	??_strnicmp& (0+255),w,b
 20831  001728  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20832  00172A  6F6C               	movwf	strnicmp@r& (0+255),b
 20833  00172C  0100               	movlb	0	; () banked
 20834  00172E  676C               	tstfsz	strnicmp@r& (0+255),b
 20835  001730  D006               	goto	l17465
 20836                           
 20837                           ; BSR set to: 0
 20838  001732  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20839  001736  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20840  00173A  50DF               	movf	indf2,w,c
 20841  00173C  E106               	bnz	l17469
 20842  00173E                     l17465:
 20843                           
 20844                           ; BSR set to: 0
 20845  00173E  516C               	movf	strnicmp@r& (0+255),w,b
 20846  001740  6F64               	movwf	?_strnicmp& (0+255),b
 20847  001742  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20848  001744  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20849  001746  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20850  001748  D00E               	goto	l2602
 20851  00174A                     l17469:
 20852                           
 20853                           ; BSR set to: 0
 20854  00174A  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20855  00174C  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20856  00174E  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20857  001750  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20858  001752                     l17471:
 20859                           
 20860                           ; BSR set to: 0
 20861  001752  0768               	decf	strnicmp@len& (0+255),f,b
 20862  001754  A0D8               	btfss	status,0,c
 20863  001756  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20864  001758  0100               	movlb	0	; () banked
 20865  00175A  2968               	incf	strnicmp@len& (0+255),w,b
 20866  00175C  B4D8               	btfsc	status,2,c
 20867  00175E  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20868  001760  E1D1               	bnz	l17461
 20869                           
 20870                           ; BSR set to: 0
 20871  001762  6B64               	clrf	?_strnicmp& (0+255),b
 20872  001764  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20873  001766                     l2602:
 20874                           
 20875                           ; BSR set to: 0
 20876  001766  0012               	return	
 20877  001768                     __end_of_strnicmp:
 20878                           	opt stack 0
 20879                           tblptru	equ	0xFF8
 20880                           tblptrh	equ	0xFF7
 20881                           tblptrl	equ	0xFF6
 20882                           tablat	equ	0xFF5
 20883                           prodh	equ	0xFF4
 20884                           prodl	equ	0xFF3
 20885                           intcon	equ	0xFF2
 20886                           indf0	equ	0xFEF
 20887                           postinc0	equ	0xFEE
 20888                           fsr0h	equ	0xFEA
 20889                           fsr0l	equ	0xFE9
 20890                           wreg	equ	0xFE8
 20891                           indf1	equ	0xFE7
 20892                           postinc1	equ	0xFE6
 20893                           postdec1	equ	0xFE5
 20894                           fsr1h	equ	0xFE2
 20895                           fsr1l	equ	0xFE1
 20896                           indf2	equ	0xFDF
 20897                           postinc2	equ	0xFDE
 20898                           postdec2	equ	0xFDD
 20899                           plusw2	equ	0xFDB
 20900                           fsr2h	equ	0xFDA
 20901                           fsr2l	equ	0xFD9
 20902                           status	equ	0xFD8
 20903                           
 20904 ;; *************** function _toupper *****************
 20905 ;; Defined at:
 20906 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20907 ;; Parameters:    Size  Location     Type
 20908 ;;  c               1    wreg     unsigned char 
 20909 ;; Auto vars:     Size  Location     Type
 20910 ;;  c               1    0[BANK0 ] unsigned char 
 20911 ;; Return value:  Size  Location     Type
 20912 ;;                  1    wreg      unsigned char 
 20913 ;; Registers used:
 20914 ;;		wreg, status,2, status,0
 20915 ;; Tracked objects:
 20916 ;;		On entry : F/0
 20917 ;;		On exit  : F/0
 20918 ;;		Unchanged: 0/0
 20919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20920 ;;      Params:         0       0       0       0       0       0       0
 20921 ;;      Locals:         0       1       0       0       0       0       0
 20922 ;;      Temps:          0       0       0       0       0       0       0
 20923 ;;      Totals:         0       1       0       0       0       0       0
 20924 ;;Total ram usage:        1 bytes
 20925 ;; Hardware stack levels used:    1
 20926 ;; Hardware stack levels required when called:    3
 20927 ;; This function calls:
 20928 ;;		Nothing
 20929 ;; This function is called by:
 20930 ;;		_strnicmp
 20931 ;;		_strichr
 20932 ;; This function uses a non-reentrant model
 20933 ;;
 20934                           
 20935                           	psect	text48
 20936  000F76                     __ptext48:
 20937                           	opt stack 0
 20938  000F76                     _toupper:
 20939                           	opt stack 23
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;incstack = 0
 20943                           ;incstack = 0
 20944                           ;toupper@c stored from wreg
 20945  000F76  CFE8 F060          	movff	wreg,toupper@c
 20946                           
 20947                           ; BSR set to: 0
 20948  000F7A  0E7B               	movlw	123
 20949  000F7C  6160               	cpfslt	toupper@c& (0+255),b
 20950  000F7E  D004               	goto	l17489
 20951                           
 20952                           ; BSR set to: 0
 20953  000F80  0E60               	movlw	96
 20954  000F82  6560               	cpfsgt	toupper@c& (0+255),b
 20955  000F84  D001               	goto	l17489
 20956                           
 20957                           ; BSR set to: 0
 20958  000F86  9B60               	bcf	toupper@c& (0+255),5,b
 20959  000F88                     l17489:
 20960                           
 20961                           ; BSR set to: 0
 20962  000F88  5160               	movf	toupper@c& (0+255),w,b
 20963                           
 20964                           ; BSR set to: 0
 20965  000F8A  0012               	return	
 20966  000F8C                     __end_of_toupper:
 20967                           	opt stack 0
 20968                           tblptru	equ	0xFF8
 20969                           tblptrh	equ	0xFF7
 20970                           tblptrl	equ	0xFF6
 20971                           tablat	equ	0xFF5
 20972                           prodh	equ	0xFF4
 20973                           prodl	equ	0xFF3
 20974                           intcon	equ	0xFF2
 20975                           indf0	equ	0xFEF
 20976                           postinc0	equ	0xFEE
 20977                           fsr0h	equ	0xFEA
 20978                           fsr0l	equ	0xFE9
 20979                           wreg	equ	0xFE8
 20980                           indf1	equ	0xFE7
 20981                           postinc1	equ	0xFE6
 20982                           postdec1	equ	0xFE5
 20983                           fsr1h	equ	0xFE2
 20984                           fsr1l	equ	0xFE1
 20985                           indf2	equ	0xFDF
 20986                           postinc2	equ	0xFDE
 20987                           postdec2	equ	0xFDD
 20988                           plusw2	equ	0xFDB
 20989                           fsr2h	equ	0xFDA
 20990                           fsr2l	equ	0xFD9
 20991                           status	equ	0xFD8
 20992                           
 20993 ;; *************** function _strlen *****************
 20994 ;; Defined at:
 20995 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20996 ;; Parameters:    Size  Location     Type
 20997 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20998 ;;		 -> printGUID@buf(3), STR_160(2), STR_159(9), STR_156(4), 
 20999 ;;		 -> STR_154(3), STR_153(6), STR_152(6), STR_151(8), 
 21000 ;;		 -> STR_149(6), STR_147(5), STR_145(8), STR_144(6), 
 21001 ;;		 -> STR_143(9), STR_142(7), STR_141(7), STR_140(5), 
 21002 ;;		 -> STR_139(6), STR_138(9), STR_136(11), STR_134(8), 
 21003 ;;		 -> STR_132(4), STR_131(5), STR_118(5), STR_105(7), 
 21004 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 21005 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21006 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21007 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21008 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 21009 ;; Auto vars:     Size  Location     Type
 21010 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 21011 ;;		 -> printGUID@buf(3), STR_160(2), STR_159(9), STR_156(4), 
 21012 ;;		 -> STR_154(3), STR_153(6), STR_152(6), STR_151(8), 
 21013 ;;		 -> STR_149(6), STR_147(5), STR_145(8), STR_144(6), 
 21014 ;;		 -> STR_143(9), STR_142(7), STR_141(7), STR_140(5), 
 21015 ;;		 -> STR_139(6), STR_138(9), STR_136(11), STR_134(8), 
 21016 ;;		 -> STR_132(4), STR_131(5), STR_118(5), STR_105(7), 
 21017 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 21018 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21019 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21020 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21021 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 21022 ;; Return value:  Size  Location     Type
 21023 ;;                  2    0[BANK0 ] unsigned int 
 21024 ;; Registers used:
 21025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21026 ;; Tracked objects:
 21027 ;;		On entry : F/0
 21028 ;;		On exit  : F/0
 21029 ;;		Unchanged: 0/0
 21030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21031 ;;      Params:         0       2       0       0       0       0       0
 21032 ;;      Locals:         0       2       0       0       0       0       0
 21033 ;;      Temps:          0       0       0       0       0       0       0
 21034 ;;      Totals:         0       4       0       0       0       0       0
 21035 ;;Total ram usage:        4 bytes
 21036 ;; Hardware stack levels used:    1
 21037 ;; Hardware stack levels required when called:    3
 21038 ;; This function calls:
 21039 ;;		Nothing
 21040 ;; This function is called by:
 21041 ;;		_doModeSLCAN
 21042 ;;		_receiveSendEventSLCAN
 21043 ;;		_printGUID
 21044 ;;		_hexStringToBytes
 21045 ;;		_stristr
 21046 ;; This function uses a non-reentrant model
 21047 ;;
 21048                           
 21049                           	psect	text49
 21050  001296                     __ptext49:
 21051                           	opt stack 0
 21052  001296                     _strlen:
 21053                           	opt stack 24
 21054                           
 21055                           ; BSR set to: 0
 21056                           
 21057                           ; BSR set to: 0
 21058                           ;incstack = 0
 21059                           ;incstack = 0
 21060  001296  C060  F062         	movff	strlen@s,strlen@cp
 21061  00129A  C061  F063         	movff	strlen@s+1,strlen@cp+1
 21062  00129E  D003               	goto	l17113
 21063  0012A0                     l17111:
 21064  0012A0  0100               	movlb	0	; () banked
 21065  0012A2  4B62               	infsnz	strlen@cp& (0+255),f,b
 21066  0012A4  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21067  0012A6                     l17113:
 21068                           
 21069                           ; BSR set to: 0
 21070  0012A6  5162               	movf	strlen@cp& (0+255),w,b
 21071  0012A8  6EF6               	movwf	tblptrl,c
 21072  0012AA  6EE9               	movwf	fsr0l,c
 21073  0012AC  0E05               	movlw	(high __ramtop+-1)
 21074  0012AE  6EEA               	movwf	fsr0h,c
 21075  0012B0  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21076  0012B2  64EA               	cpfsgt	fsr0h,c
 21077  0012B4  D003               	bra	u22987
 21078  0012B6  6EEA               	movwf	fsr0h,c
 21079  0012B8  50EF               	movf	indf0,w,c
 21080  0012BA  D003               	bra	u22980
 21081  0012BC                     u22987:
 21082  0012BC  6EF7               	movwf	tblptrh,c
 21083  0012BE  0008               	tblrd		*
 21084  0012C0  50F5               	movf	tablat,w,c
 21085  0012C2                     u22980:
 21086  0012C2  0900               	iorlw	0
 21087  0012C4  E1ED               	bnz	l17111
 21088  0012C6  0100               	movlb	0	; () banked
 21089  0012C8  5160               	movf	strlen@s& (0+255),w,b
 21090  0012CA  5D62               	subwf	strlen@cp& (0+255),w,b
 21091  0012CC  6F60               	movwf	?_strlen& (0+255),b
 21092  0012CE  5161               	movf	(strlen@s+1)& (0+255),w,b
 21093  0012D0  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 21094  0012D2  6F61               	movwf	(?_strlen+1)& (0+255),b
 21095                           
 21096                           ; BSR set to: 0
 21097  0012D4  0012               	return	
 21098  0012D6                     __end_of_strlen:
 21099                           	opt stack 0
 21100                           tblptru	equ	0xFF8
 21101                           tblptrh	equ	0xFF7
 21102                           tblptrl	equ	0xFF6
 21103                           tablat	equ	0xFF5
 21104                           prodh	equ	0xFF4
 21105                           prodl	equ	0xFF3
 21106                           intcon	equ	0xFF2
 21107                           indf0	equ	0xFEF
 21108                           postinc0	equ	0xFEE
 21109                           fsr0h	equ	0xFEA
 21110                           fsr0l	equ	0xFE9
 21111                           wreg	equ	0xFE8
 21112                           indf1	equ	0xFE7
 21113                           postinc1	equ	0xFE6
 21114                           postdec1	equ	0xFE5
 21115                           fsr1h	equ	0xFE2
 21116                           fsr1l	equ	0xFE1
 21117                           indf2	equ	0xFDF
 21118                           postinc2	equ	0xFDE
 21119                           postdec2	equ	0xFDD
 21120                           plusw2	equ	0xFDB
 21121                           fsr2h	equ	0xFDA
 21122                           fsr2l	equ	0xFD9
 21123                           status	equ	0xFD8
 21124                           
 21125 ;; *************** function _receivePrintEventVerbose *****************
 21126 ;; Defined at:
 21127 ;;		line 1997 in file "main.c"
 21128 ;; Parameters:    Size  Location     Type
 21129 ;;		None
 21130 ;; Auto vars:     Size  Location     Type
 21131 ;;  i               1   69[BANK0 ] unsigned char 
 21132 ;; Return value:  Size  Location     Type
 21133 ;;                  1    wreg      enum E15660
 21134 ;; Registers used:
 21135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21136 ;; Tracked objects:
 21137 ;;		On entry : E/1
 21138 ;;		On exit  : 0/0
 21139 ;;		Unchanged: 0/0
 21140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21141 ;;      Params:         0       0       0       0       0       0       0
 21142 ;;      Locals:         0      13       0       0       0       0       0
 21143 ;;      Temps:          0       5       0       0       0       0       0
 21144 ;;      Totals:         0      18       0       0       0       0       0
 21145 ;;Total ram usage:       18 bytes
 21146 ;; Hardware stack levels used:    1
 21147 ;; Hardware stack levels required when called:    6
 21148 ;; This function calls:
 21149 ;;		_putsUSART
 21150 ;;		_sprintf
 21151 ;;		_getVSCPFrame
 21152 ;; This function is called by:
 21153 ;;		_doModeVerbose
 21154 ;; This function uses a non-reentrant model
 21155 ;;
 21156                           
 21157                           	psect	text50
 21158  004350                     __ptext50:
 21159                           	opt stack 0
 21160  004350                     _receivePrintEventVerbose:
 21161                           	opt stack 22
 21162                           
 21163                           ;main.c: 1998: uint8_t i;
 21164                           ;main.c: 2000: if (getVSCPFrame(&vscpClass,
 21165                           ;main.c: 2001: &vscpType,
 21166                           ;main.c: 2002: &vscpNodeId,
 21167                           ;main.c: 2003: &vscpPriority,
 21168                           ;main.c: 2004: &vscpSize,
 21169                           ;main.c: 2005: vscpData)) {
 21170                           
 21171                           ; BSR set to: 0
 21172                           ;incstack = 0
 21173                           ;incstack = 0
 21174  004350  0E3F               	movlw	low _vscpType
 21175  004352  0100               	movlb	0	; () banked
 21176  004354  6F73               	movwf	?_getVSCPFrame& (0+255),b
 21177  004356  0E3C               	movlw	low _vscpNodeId
 21178  004358  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21179  00435A  0E3D               	movlw	low _vscpPriority
 21180  00435C  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21181  00435E  0E3E               	movlw	low _vscpSize
 21182  004360  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21183  004362  0E01               	movlw	high _vscpData
 21184  004364  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21185  004366  0EE5               	movlw	low _vscpData
 21186  004368  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21187  00436A  0E38               	movlw	_vscpClass& (0+255)
 21188  00436C  EC1E  F00D         	call	_getVSCPFrame
 21189  004370  0900               	iorlw	0
 21190  004372  E101 D135          	bz	l15871
 21191                           
 21192                           ; BSR set to: 0
 21193                           ;main.c: 2008: cntRxFrames++;
 21194  004376  0101               	movlb	1	; () banked
 21195  004378  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21196  00437A  0E00               	movlw	0
 21197  00437C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21198  00437E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21199  004380  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21200                           
 21201                           ;main.c: 2009: cntRxBytes += vscpSize;
 21202  004382  503E               	movf	_vscpSize,w,c
 21203  004384  2708               	addwf	_cntRxBytes& (0+255),f,b
 21204  004386  0E00               	movlw	0
 21205  004388  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21206  00438A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21207  00438C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21208                           
 21209                           ; BSR set to: 1
 21210                           ;main.c: 2011: putsUSART((char *) "<Prio=");
 21211  00438E  0E7C               	movlw	high STR_170
 21212  004390  0100               	movlb	0	; () banked
 21213  004392  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21214  004394  0E26               	movlw	low STR_170
 21215  004396  6F61               	movwf	?_putsUSART& (0+255),b
 21216  004398  EC69  F00A         	call	_putsUSART	;wreg free
 21217                           
 21218                           ;main.c: 2012: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21219  00439C  662C               	tstfsz	_bHex,c
 21220  00439E  D005               	goto	l15789
 21221  0043A0  0E7C               	movlw	high STR_61
 21222  0043A2  0100               	movlb	0	; () banked
 21223  0043A4  6F9A               	movwf	(_receivePrintEventVerbose$1382+1)& (0+255),b
 21224  0043A6  0EED               	movlw	low STR_61
 21225  0043A8  D004               	goto	L32
 21226  0043AA                     l15789:
 21227  0043AA  0E7C               	movlw	high STR_60
 21228  0043AC  0100               	movlb	0	; () banked
 21229  0043AE  6F9A               	movwf	(_receivePrintEventVerbose$1382+1)& (0+255),b
 21230  0043B0  0E49               	movlw	low STR_60
 21231  0043B2                     L32:
 21232  0043B2  6F99               	movwf	_receivePrintEventVerbose$1382& (0+255),b
 21233                           
 21234                           ; BSR set to: 0
 21235  0043B4  0E01               	movlw	high _wrkbuf
 21236  0043B6  0100               	movlb	0	; () banked
 21237  0043B8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21238  0043BA  0E7D               	movlw	low _wrkbuf
 21239  0043BC  6F76               	movwf	?_sprintf& (0+255),b
 21240  0043BE  C099  F078         	movff	_receivePrintEventVerbose$1382,?_sprintf+2
 21241  0043C2  C09A  F079         	movff	_receivePrintEventVerbose$1382+1,?_sprintf+3
 21242  0043C6  C03D  F07A         	movff	_vscpPriority,?_sprintf+4
 21243  0043CA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21244  0043CC  EC3F  F026         	call	_sprintf	;wreg free
 21245                           
 21246                           ; BSR set to: 0
 21247                           ;main.c: 2013: putsUSART(wrkbuf);
 21248  0043D0  0E01               	movlw	high _wrkbuf
 21249  0043D2  0100               	movlb	0	; () banked
 21250  0043D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21251  0043D6  0E7D               	movlw	low _wrkbuf
 21252  0043D8  6F61               	movwf	?_putsUSART& (0+255),b
 21253  0043DA  EC69  F00A         	call	_putsUSART	;wreg free
 21254                           
 21255                           ;main.c: 2014: putsUSART((char *) ",class=");
 21256  0043DE  0E7B               	movlw	high STR_173
 21257  0043E0  0100               	movlb	0	; () banked
 21258  0043E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21259  0043E4  0EDA               	movlw	low STR_173
 21260  0043E6  6F61               	movwf	?_putsUSART& (0+255),b
 21261  0043E8  EC69  F00A         	call	_putsUSART	;wreg free
 21262                           
 21263                           ;main.c: 2015: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21264  0043EC  662C               	tstfsz	_bHex,c
 21265  0043EE  D005               	goto	l15801
 21266  0043F0  0E7C               	movlw	high STR_61
 21267  0043F2  0100               	movlb	0	; () banked
 21268  0043F4  6F9C               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21269  0043F6  0EED               	movlw	low STR_61
 21270  0043F8  D004               	goto	L33
 21271  0043FA                     l15801:
 21272  0043FA  0E7C               	movlw	high STR_174
 21273  0043FC  0100               	movlb	0	; () banked
 21274  0043FE  6F9C               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21275  004400  0E50               	movlw	low STR_174
 21276  004402                     L33:
 21277  004402  6F9B               	movwf	_receivePrintEventVerbose$1387& (0+255),b
 21278                           
 21279                           ; BSR set to: 0
 21280  004404  0E01               	movlw	high _wrkbuf
 21281  004406  0100               	movlb	0	; () banked
 21282  004408  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21283  00440A  0E7D               	movlw	low _wrkbuf
 21284  00440C  6F76               	movwf	?_sprintf& (0+255),b
 21285  00440E  C09B  F078         	movff	_receivePrintEventVerbose$1387,?_sprintf+2
 21286  004412  C09C  F079         	movff	_receivePrintEventVerbose$1387+1,?_sprintf+3
 21287  004416  C038  F07A         	movff	_vscpClass,?_sprintf+4
 21288  00441A  C039  F07B         	movff	_vscpClass+1,?_sprintf+5
 21289  00441E  EC3F  F026         	call	_sprintf	;wreg free
 21290                           
 21291                           ; BSR set to: 0
 21292                           ;main.c: 2016: putsUSART(wrkbuf);
 21293  004422  0E01               	movlw	high _wrkbuf
 21294  004424  0100               	movlb	0	; () banked
 21295  004426  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21296  004428  0E7D               	movlw	low _wrkbuf
 21297  00442A  6F61               	movwf	?_putsUSART& (0+255),b
 21298  00442C  EC69  F00A         	call	_putsUSART	;wreg free
 21299                           
 21300                           ;main.c: 2017: putsUSART((char *) ",type=");
 21301  004430  0E7C               	movlw	high STR_176
 21302  004432  0100               	movlb	0	; () banked
 21303  004434  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21304  004436  0E18               	movlw	low STR_176
 21305  004438  6F61               	movwf	?_putsUSART& (0+255),b
 21306  00443A  EC69  F00A         	call	_putsUSART	;wreg free
 21307                           
 21308                           ;main.c: 2018: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21309  00443E  662C               	tstfsz	_bHex,c
 21310  004440  D005               	goto	l15813
 21311  004442  0E7C               	movlw	high STR_61
 21312  004444  0100               	movlb	0	; () banked
 21313  004446  6F9E               	movwf	(_receivePrintEventVerbose$1392+1)& (0+255),b
 21314  004448  0EED               	movlw	low STR_61
 21315  00444A  D004               	goto	L34
 21316  00444C                     l15813:
 21317  00444C  0E7C               	movlw	high STR_60
 21318  00444E  0100               	movlb	0	; () banked
 21319  004450  6F9E               	movwf	(_receivePrintEventVerbose$1392+1)& (0+255),b
 21320  004452  0E49               	movlw	low STR_60
 21321  004454                     L34:
 21322  004454  6F9D               	movwf	_receivePrintEventVerbose$1392& (0+255),b
 21323                           
 21324                           ; BSR set to: 0
 21325  004456  0E01               	movlw	high _wrkbuf
 21326  004458  0100               	movlb	0	; () banked
 21327  00445A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21328  00445C  0E7D               	movlw	low _wrkbuf
 21329  00445E  6F76               	movwf	?_sprintf& (0+255),b
 21330  004460  C09D  F078         	movff	_receivePrintEventVerbose$1392,?_sprintf+2
 21331  004464  C09E  F079         	movff	_receivePrintEventVerbose$1392+1,?_sprintf+3
 21332  004468  C03F  F07A         	movff	_vscpType,?_sprintf+4
 21333  00446C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21334  00446E  EC3F  F026         	call	_sprintf	;wreg free
 21335                           
 21336                           ; BSR set to: 0
 21337                           ;main.c: 2019: putsUSART(wrkbuf);
 21338  004472  0E01               	movlw	high _wrkbuf
 21339  004474  0100               	movlb	0	; () banked
 21340  004476  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21341  004478  0E7D               	movlw	low _wrkbuf
 21342  00447A  6F61               	movwf	?_putsUSART& (0+255),b
 21343  00447C  EC69  F00A         	call	_putsUSART	;wreg free
 21344                           
 21345                           ;main.c: 2020: putsUSART((char *) ",nodeid=");
 21346  004480  0E7B               	movlw	high STR_179
 21347  004482  0100               	movlb	0	; () banked
 21348  004484  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21349  004486  0E97               	movlw	low STR_179
 21350  004488  6F61               	movwf	?_putsUSART& (0+255),b
 21351  00448A  EC69  F00A         	call	_putsUSART	;wreg free
 21352                           
 21353                           ;main.c: 2021: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21354  00448E  662C               	tstfsz	_bHex,c
 21355  004490  D005               	goto	l15825
 21356  004492  0E7C               	movlw	high STR_61
 21357  004494  0100               	movlb	0	; () banked
 21358  004496  6FA0               	movwf	(_receivePrintEventVerbose$1397+1)& (0+255),b
 21359  004498  0EED               	movlw	low STR_61
 21360  00449A  D004               	goto	L35
 21361  00449C                     l15825:
 21362  00449C  0E7C               	movlw	high STR_60
 21363  00449E  0100               	movlb	0	; () banked
 21364  0044A0  6FA0               	movwf	(_receivePrintEventVerbose$1397+1)& (0+255),b
 21365  0044A2  0E49               	movlw	low STR_60
 21366  0044A4                     L35:
 21367  0044A4  6F9F               	movwf	_receivePrintEventVerbose$1397& (0+255),b
 21368                           
 21369                           ; BSR set to: 0
 21370  0044A6  0E01               	movlw	high _wrkbuf
 21371  0044A8  0100               	movlb	0	; () banked
 21372  0044AA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21373  0044AC  0E7D               	movlw	low _wrkbuf
 21374  0044AE  6F76               	movwf	?_sprintf& (0+255),b
 21375  0044B0  C09F  F078         	movff	_receivePrintEventVerbose$1397,?_sprintf+2
 21376  0044B4  C0A0  F079         	movff	_receivePrintEventVerbose$1397+1,?_sprintf+3
 21377  0044B8  C03C  F07A         	movff	_vscpNodeId,?_sprintf+4
 21378  0044BC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21379  0044BE  EC3F  F026         	call	_sprintf	;wreg free
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;main.c: 2022: putsUSART(wrkbuf);
 21383  0044C2  0E01               	movlw	high _wrkbuf
 21384  0044C4  0100               	movlb	0	; () banked
 21385  0044C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21386  0044C8  0E7D               	movlw	low _wrkbuf
 21387  0044CA  6F61               	movwf	?_putsUSART& (0+255),b
 21388  0044CC  EC69  F00A         	call	_putsUSART	;wreg free
 21389                           
 21390                           ;main.c: 2023: putsUSART((char *) ",size=");
 21391  0044D0  0E7C               	movlw	high STR_182
 21392  0044D2  0100               	movlb	0	; () banked
 21393  0044D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21394  0044D6  0E1F               	movlw	low STR_182
 21395  0044D8  6F61               	movwf	?_putsUSART& (0+255),b
 21396  0044DA  EC69  F00A         	call	_putsUSART	;wreg free
 21397                           
 21398                           ;main.c: 2024: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21399  0044DE  662C               	tstfsz	_bHex,c
 21400  0044E0  D005               	goto	l15837
 21401  0044E2  0E7C               	movlw	high STR_61
 21402  0044E4  0100               	movlb	0	; () banked
 21403  0044E6  6FA2               	movwf	(_receivePrintEventVerbose$1402+1)& (0+255),b
 21404  0044E8  0EED               	movlw	low STR_61
 21405  0044EA  D004               	goto	L36
 21406  0044EC                     l15837:
 21407  0044EC  0E7C               	movlw	high STR_60
 21408  0044EE  0100               	movlb	0	; () banked
 21409  0044F0  6FA2               	movwf	(_receivePrintEventVerbose$1402+1)& (0+255),b
 21410  0044F2  0E49               	movlw	low STR_60
 21411  0044F4                     L36:
 21412  0044F4  6FA1               	movwf	_receivePrintEventVerbose$1402& (0+255),b
 21413                           
 21414                           ; BSR set to: 0
 21415  0044F6  0E01               	movlw	high _wrkbuf
 21416  0044F8  0100               	movlb	0	; () banked
 21417  0044FA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21418  0044FC  0E7D               	movlw	low _wrkbuf
 21419  0044FE  6F76               	movwf	?_sprintf& (0+255),b
 21420  004500  C0A1  F078         	movff	_receivePrintEventVerbose$1402,?_sprintf+2
 21421  004504  C0A2  F079         	movff	_receivePrintEventVerbose$1402+1,?_sprintf+3
 21422  004508  C03E  F07A         	movff	_vscpSize,?_sprintf+4
 21423  00450C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21424  00450E  EC3F  F026         	call	_sprintf	;wreg free
 21425                           
 21426                           ; BSR set to: 0
 21427                           ;main.c: 2025: putsUSART(wrkbuf);
 21428  004512  0E01               	movlw	high _wrkbuf
 21429  004514  0100               	movlb	0	; () banked
 21430  004516  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21431  004518  0E7D               	movlw	low _wrkbuf
 21432  00451A  6F61               	movwf	?_putsUSART& (0+255),b
 21433  00451C  EC69  F00A         	call	_putsUSART	;wreg free
 21434                           
 21435                           ;main.c: 2026: if (vscpSize > 0) {
 21436  004520  503E               	movf	_vscpSize,w,c
 21437  004522  E04E               	bz	l15865
 21438                           
 21439                           ;main.c: 2027: putsUSART((char *) ",Data=");
 21440  004524  0E7C               	movlw	high STR_185
 21441  004526  0100               	movlb	0	; () banked
 21442  004528  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21443  00452A  0E11               	movlw	low STR_185
 21444  00452C  6F61               	movwf	?_putsUSART& (0+255),b
 21445  00452E  EC69  F00A         	call	_putsUSART	;wreg free
 21446                           
 21447                           ;main.c: 2028: for (i = 0; i < vscpSize; i++) {
 21448  004532  0100               	movlb	0	; () banked
 21449  004534  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21450  004536  D040               	goto	l15863
 21451  004538                     l985:
 21452                           
 21453                           ; BSR set to: 0
 21454                           ;main.c: 2030: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21455  004538  662C               	tstfsz	_bHex,c
 21456  00453A  D004               	goto	l15851
 21457                           
 21458                           ; BSR set to: 0
 21459  00453C  0E7C               	movlw	high STR_61
 21460  00453E  6FA4               	movwf	(_receivePrintEventVerbose$1407+1)& (0+255),b
 21461  004540  0EED               	movlw	low STR_61
 21462  004542  D003               	goto	L37
 21463  004544                     l15851:
 21464                           
 21465                           ; BSR set to: 0
 21466  004544  0E7C               	movlw	high STR_60
 21467  004546  6FA4               	movwf	(_receivePrintEventVerbose$1407+1)& (0+255),b
 21468  004548  0E49               	movlw	low STR_60
 21469  00454A                     L37:
 21470  00454A  6FA3               	movwf	_receivePrintEventVerbose$1407& (0+255),b
 21471                           
 21472                           ; BSR set to: 0
 21473  00454C  0E01               	movlw	high _wrkbuf
 21474  00454E  0100               	movlb	0	; () banked
 21475  004550  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21476  004552  0E7D               	movlw	low _wrkbuf
 21477  004554  6F76               	movwf	?_sprintf& (0+255),b
 21478  004556  C0A3  F078         	movff	_receivePrintEventVerbose$1407,?_sprintf+2
 21479  00455A  C0A4  F079         	movff	_receivePrintEventVerbose$1407+1,?_sprintf+3
 21480  00455E  0EE5               	movlw	low _vscpData
 21481  004560  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21482  004562  6ED9               	movwf	fsr2l,c
 21483  004564  6ADA               	clrf	fsr2h,c
 21484  004566  0E01               	movlw	high _vscpData
 21485  004568  22DA               	addwfc	fsr2h,f,c
 21486  00456A  50DF               	movf	indf2,w,c
 21487  00456C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21488  00456E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21489  004570  EC3F  F026         	call	_sprintf	;wreg free
 21490                           
 21491                           ; BSR set to: 0
 21492                           ;main.c: 2031: putsUSART(wrkbuf);
 21493  004574  0E01               	movlw	high _wrkbuf
 21494  004576  0100               	movlb	0	; () banked
 21495  004578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21496  00457A  0E7D               	movlw	low _wrkbuf
 21497  00457C  6F61               	movwf	?_putsUSART& (0+255),b
 21498  00457E  EC69  F00A         	call	_putsUSART	;wreg free
 21499                           
 21500                           ;main.c: 2032: if (i < (vscpSize - 1)) {
 21501  004582  0EFF               	movlw	255
 21502  004584  243E               	addwf	_vscpSize,w,c
 21503  004586  0100               	movlb	0	; () banked
 21504  004588  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21505  00458A  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21506  00458C  0EFF               	movlw	255
 21507  00458E  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21508  004590  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21509  004592  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21510  004594  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21511  004596  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21512  004598  0A80               	xorlw	128
 21513  00459A  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21514  00459C  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21515  00459E  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21516  0045A0  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21517  0045A2  0A80               	xorlw	128
 21518  0045A4  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21519  0045A6  E206               	bc	l15861
 21520                           
 21521                           ; BSR set to: 0
 21522                           ;main.c: 2033: putsUSART((char *) ",");
 21523  0045A8  0E7C               	movlw	high STR_30
 21524  0045AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21525  0045AC  0EF4               	movlw	low STR_30
 21526  0045AE  6F61               	movwf	?_putsUSART& (0+255),b
 21527  0045B0  EC69  F00A         	call	_putsUSART	;wreg free
 21528  0045B4                     l15861:
 21529  0045B4  0100               	movlb	0	; () banked
 21530  0045B6  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21531  0045B8                     l15863:
 21532                           
 21533                           ; BSR set to: 0
 21534  0045B8  503E               	movf	_vscpSize,w,c
 21535  0045BA  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21536  0045BC  E208               	bc	l992
 21537  0045BE  D7BC               	goto	l985
 21538  0045C0                     l15865:
 21539                           
 21540                           ;main.c: 2037: putsUSART((char *) ",Data=none");
 21541  0045C0  0E7B               	movlw	high STR_189
 21542  0045C2  0100               	movlb	0	; () banked
 21543  0045C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21544  0045C6  0E5B               	movlw	low STR_189
 21545  0045C8  6F61               	movwf	?_putsUSART& (0+255),b
 21546  0045CA  EC69  F00A         	call	_putsUSART	;wreg free
 21547  0045CE                     l992:
 21548                           
 21549                           ;main.c: 2038: }
 21550                           ;main.c: 2039: putsUSART((char *) ">\r\n");
 21551  0045CE  0E7C               	movlw	high STR_190
 21552  0045D0  0100               	movlb	0	; () banked
 21553  0045D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21554  0045D4  0EC9               	movlw	low STR_190
 21555  0045D6  6F61               	movwf	?_putsUSART& (0+255),b
 21556  0045D8  EC69  F00A         	call	_putsUSART	;wreg free
 21557                           
 21558                           ;main.c: 2040: return 1;
 21559  0045DC  0E01               	movlw	1
 21560  0045DE  D001               	goto	l993
 21561  0045E0                     l15871:
 21562                           
 21563                           ; BSR set to: 0
 21564                           ;main.c: 2041: }
 21565                           ;main.c: 2043: return 0;
 21566  0045E0  0E00               	movlw	0
 21567  0045E2                     l993:
 21568  0045E2  0012               	return	
 21569  0045E4                     __end_of_receivePrintEventVerbose:
 21570                           	opt stack 0
 21571                           tblptru	equ	0xFF8
 21572                           tblptrh	equ	0xFF7
 21573                           tblptrl	equ	0xFF6
 21574                           tablat	equ	0xFF5
 21575                           prodh	equ	0xFF4
 21576                           prodl	equ	0xFF3
 21577                           intcon	equ	0xFF2
 21578                           indf0	equ	0xFEF
 21579                           postinc0	equ	0xFEE
 21580                           fsr0h	equ	0xFEA
 21581                           fsr0l	equ	0xFE9
 21582                           wreg	equ	0xFE8
 21583                           indf1	equ	0xFE7
 21584                           postinc1	equ	0xFE6
 21585                           postdec1	equ	0xFE5
 21586                           fsr1h	equ	0xFE2
 21587                           fsr1l	equ	0xFE1
 21588                           indf2	equ	0xFDF
 21589                           postinc2	equ	0xFDE
 21590                           postdec2	equ	0xFDD
 21591                           plusw2	equ	0xFDB
 21592                           fsr2h	equ	0xFDA
 21593                           fsr2l	equ	0xFD9
 21594                           status	equ	0xFD8
 21595                           
 21596 ;; *************** function _getVSCPFrame *****************
 21597 ;; Defined at:
 21598 ;;		line 3217 in file "main.c"
 21599 ;; Parameters:    Size  Location     Type
 21600 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21601 ;;		 -> vscpClass(2), 
 21602 ;;  pvscptype       1   19[BANK0 ] PTR unsigned char 
 21603 ;;		 -> vscpType(1), 
 21604 ;;  pNodeId         1   20[BANK0 ] PTR unsigned char 
 21605 ;;		 -> vscpNodeId(1), 
 21606 ;;  pPriority       1   21[BANK0 ] PTR unsigned char 
 21607 ;;		 -> vscpPriority(1), 
 21608 ;;  pSize           1   22[BANK0 ] PTR unsigned char 
 21609 ;;		 -> vscpSize(1), 
 21610 ;;  pData           2   23[BANK0 ] PTR unsigned char 
 21611 ;;		 -> vscpData(8), 
 21612 ;; Auto vars:     Size  Location     Type
 21613 ;;  pvscpclass      1   29[BANK0 ] PTR unsigned short 
 21614 ;;		 -> vscpClass(2), 
 21615 ;;  id              4   30[BANK0 ] unsigned long 
 21616 ;; Return value:  Size  Location     Type
 21617 ;;                  1    wreg      unsigned char 
 21618 ;; Registers used:
 21619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21620 ;; Tracked objects:
 21621 ;;		On entry : F/0
 21622 ;;		On exit  : F/0
 21623 ;;		Unchanged: 0/0
 21624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21625 ;;      Params:         0       6       0       0       0       0       0
 21626 ;;      Locals:         0       5       0       0       0       0       0
 21627 ;;      Temps:          0       4       0       0       0       0       0
 21628 ;;      Totals:         0      15       0       0       0       0       0
 21629 ;;Total ram usage:       15 bytes
 21630 ;; Hardware stack levels used:    1
 21631 ;; Hardware stack levels required when called:    5
 21632 ;; This function calls:
 21633 ;;		_getCANFrame
 21634 ;; This function is called by:
 21635 ;;		_receivePrintEventVerbose
 21636 ;;		_readRegister
 21637 ;;		_readRegisterExtended
 21638 ;;		_writeRegisterExtended
 21639 ;; This function uses a non-reentrant model
 21640 ;;
 21641                           
 21642                           	psect	text51
 21643  001A3C                     __ptext51:
 21644                           	opt stack 0
 21645  001A3C                     _getVSCPFrame:
 21646                           	opt stack 21
 21647                           
 21648                           ;incstack = 0
 21649                           ;incstack = 0
 21650                           ;getVSCPFrame@pvscpclass stored from wreg
 21651  001A3C  CFE8 F07D          	movff	wreg,getVSCPFrame@pvscpclass
 21652                           
 21653                           ; BSR set to: 0
 21654                           ;main.c: 3218: uint32_t id;
 21655                           ;main.c: 3220: if (!getCANFrame(&id, pSize, pData)) {
 21656  001A40  C076  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21657  001A44  0E0F               	movlw	15
 21658  001A46  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 21659  001A48  0E5F               	movlw	__accesstop+-1
 21660  001A4A  656E               	cpfsgt	?_getCANFrame& (0+255),b
 21661  001A4C  6B6F               	clrf	(?_getCANFrame+1)& (0+255),b
 21662  001A4E  C077  F070         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21663  001A52  C078  F071         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21664  001A56  0E7E               	movlw	getVSCPFrame@id& (0+255)
 21665  001A58  ECD1  F00F         	call	_getCANFrame
 21666  001A5C  0900               	iorlw	0
 21667  001A5E  E102               	bnz	l17191
 21668                           
 21669                           ; BSR set to: 0
 21670                           ;main.c: 3221: return 0;
 21671  001A60  0E00               	movlw	0
 21672  001A62  D02F               	goto	l1336
 21673  001A64                     l17191:
 21674                           
 21675                           ; BSR set to: 0
 21676                           ;main.c: 3222: }
 21677                           ;main.c: 3224: *pNodeId = id & 0x0ff;
 21678  001A64  5174               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21679  001A66  6ED9               	movwf	fsr2l,c
 21680  001A68  6ADA               	clrf	fsr2h,c
 21681  001A6A  C07E  FFDF         	movff	getVSCPFrame@id,indf2
 21682                           
 21683                           ;main.c: 3225: *pvscptype = (id >> 8) & 0xff;
 21684  001A6E  5173               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21685  001A70  6ED9               	movwf	fsr2l,c
 21686  001A72  6ADA               	clrf	fsr2h,c
 21687  001A74  C07F  FFDF         	movff	getVSCPFrame@id+1,indf2
 21688                           
 21689                           ; BSR set to: 0
 21690                           ;main.c: 3226: *pvscpclass = (id >> 16) & 0x1ff;
 21691  001A78  0100               	movlb	0	; () banked
 21692  001A7A  5180               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21693  001A7C  6F79               	movwf	??_getVSCPFrame& (0+255),b
 21694  001A7E  0E01               	movlw	1
 21695  001A80  1581               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21696  001A82  6F7A               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21697  001A84  517D               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21698  001A86  6ED9               	movwf	fsr2l,c
 21699  001A88  6ADA               	clrf	fsr2h,c
 21700  001A8A  C079  FFDE         	movff	??_getVSCPFrame,postinc2
 21701  001A8E  C07A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21702                           
 21703                           ; BSR set to: 0
 21704                           ;main.c: 3227: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21705  001A92  5175               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21706  001A94  6ED9               	movwf	fsr2l,c
 21707  001A96  6ADA               	clrf	fsr2h,c
 21708  001A98  C07E  F079         	movff	getVSCPFrame@id,??_getVSCPFrame
 21709  001A9C  C07F  F07A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21710  001AA0  C080  F07B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21711  001AA4  C081  F07C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21712  001AA8  0E1B               	movlw	27
 21713  001AAA  D005               	goto	u23130
 21714  001AAC                     u23135:
 21715  001AAC  90D8               	bcf	status,0,c
 21716  001AAE  337C               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21717  001AB0  337B               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21718  001AB2  337A               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21719  001AB4  3379               	rrcf	??_getVSCPFrame& (0+255),f,b
 21720  001AB6                     u23130:
 21721  001AB6  2EE8               	decfsz	wreg,f,c
 21722  001AB8  D7F9               	goto	u23135
 21723  001ABA  5179               	movf	??_getVSCPFrame& (0+255),w,b
 21724  001ABC  0B07               	andlw	7
 21725  001ABE  6EDF               	movwf	indf2,c
 21726                           
 21727                           ; BSR set to: 0
 21728                           ;main.c: 3229: return 1;
 21729  001AC0  0E01               	movlw	1
 21730  001AC2                     l1336:
 21731                           
 21732                           ; BSR set to: 0
 21733  001AC2  0012               	return	
 21734  001AC4                     __end_of_getVSCPFrame:
 21735                           	opt stack 0
 21736                           tblptru	equ	0xFF8
 21737                           tblptrh	equ	0xFF7
 21738                           tblptrl	equ	0xFF6
 21739                           tablat	equ	0xFF5
 21740                           prodh	equ	0xFF4
 21741                           prodl	equ	0xFF3
 21742                           intcon	equ	0xFF2
 21743                           indf0	equ	0xFEF
 21744                           postinc0	equ	0xFEE
 21745                           fsr0h	equ	0xFEA
 21746                           fsr0l	equ	0xFE9
 21747                           wreg	equ	0xFE8
 21748                           indf1	equ	0xFE7
 21749                           postinc1	equ	0xFE6
 21750                           postdec1	equ	0xFE5
 21751                           fsr1h	equ	0xFE2
 21752                           fsr1l	equ	0xFE1
 21753                           indf2	equ	0xFDF
 21754                           postinc2	equ	0xFDE
 21755                           postdec2	equ	0xFDD
 21756                           plusw2	equ	0xFDB
 21757                           fsr2h	equ	0xFDA
 21758                           fsr2l	equ	0xFD9
 21759                           status	equ	0xFD8
 21760                           
 21761 ;; *************** function _getCANFrame *****************
 21762 ;; Defined at:
 21763 ;;		line 3253 in file "main.c"
 21764 ;; Parameters:    Size  Location     Type
 21765 ;;  pid             1    wreg     PTR unsigned long 
 21766 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21767 ;;  pdlc            2   14[BANK0 ] PTR unsigned char 
 21768 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21769 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
 21770 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21771 ;; Auto vars:     Size  Location     Type
 21772 ;;  pid             1   18[BANK0 ] PTR unsigned long 
 21773 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21774 ;; Return value:  Size  Location     Type
 21775 ;;                  1    wreg      unsigned char 
 21776 ;; Registers used:
 21777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21778 ;; Tracked objects:
 21779 ;;		On entry : F/0
 21780 ;;		On exit  : F/0
 21781 ;;		Unchanged: 0/0
 21782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21783 ;;      Params:         0       4       0       0       0       0       0
 21784 ;;      Locals:         0       1       0       0       0       0       0
 21785 ;;      Temps:          0       0       0       0       0       0       0
 21786 ;;      Totals:         0       5       0       0       0       0       0
 21787 ;;Total ram usage:        5 bytes
 21788 ;; Hardware stack levels used:    1
 21789 ;; Hardware stack levels required when called:    4
 21790 ;; This function calls:
 21791 ;;		_fifo_read
 21792 ;; This function is called by:
 21793 ;;		_receiveSendEventCANAL
 21794 ;;		_receiveSendMultiEventCANAL
 21795 ;;		_receiveSendEventSLCAN
 21796 ;;		_getVSCPFrame
 21797 ;; This function uses a non-reentrant model
 21798 ;;
 21799                           
 21800                           	psect	text52
 21801  001FA2                     __ptext52:
 21802                           	opt stack 0
 21803  001FA2                     _getCANFrame:
 21804                           	opt stack 23
 21805                           
 21806                           ; BSR set to: 0
 21807                           ;incstack = 0
 21808                           ;incstack = 0
 21809                           ;getCANFrame@pid stored from wreg
 21810  001FA2  CFE8 F072          	movff	wreg,getCANFrame@pid
 21811                           
 21812                           ; BSR set to: 0
 21813                           ;main.c: 3274: if ( fifo_canrxcount ) {
 21814  001FA6  5031               	movf	_fifo_canrxcount,w,c	;volatile
 21815  001FA8  E013               	bz	l17209
 21816                           
 21817                           ; BSR set to: 0
 21818                           ;main.c: 3277: (INTCONbits.GIE = 0);
 21819  001FAA  9EF2               	bcf	intcon,7,c	;volatile
 21820                           
 21821                           ; BSR set to: 0
 21822                           ;main.c: 3278: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21823  001FAC  0E01               	movlw	high _canInputFifo
 21824  001FAE  0100               	movlb	0	; () banked
 21825  001FB0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21826  001FB2  0ECD               	movlw	low _canInputFifo
 21827  001FB4  6F60               	movwf	?_fifo_read& (0+255),b
 21828  001FB6  C072  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21829  001FBA  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21830  001FBC  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21831  001FBE  0E04               	movlw	4
 21832  001FC0  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21833  001FC2  EC67  F012         	call	_fifo_read	;wreg free
 21834  001FC6  5160               	movf	?_fifo_read& (0+255),w,b
 21835  001FC8  0A04               	xorlw	4
 21836  001FCA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21837  001FCC  E003               	bz	l17213
 21838  001FCE                     l17207:
 21839                           
 21840                           ; BSR set to: 0
 21841                           ;main.c: 3279: (INTCONbits.GIE = 1);
 21842  001FCE  8EF2               	bsf	intcon,7,c	;volatile
 21843  001FD0                     l17209:
 21844                           
 21845                           ; BSR set to: 0
 21846                           ;main.c: 3280: return 0;
 21847  001FD0  0E00               	movlw	0
 21848  001FD2  D03A               	goto	l1345
 21849  001FD4                     l17213:
 21850                           
 21851                           ; BSR set to: 0
 21852                           ;main.c: 3281: }
 21853                           ;main.c: 3284: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21854  001FD4  0E01               	movlw	high _canInputFifo
 21855  001FD6  0100               	movlb	0	; () banked
 21856  001FD8  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21857  001FDA  0ECD               	movlw	low _canInputFifo
 21858  001FDC  6F60               	movwf	?_fifo_read& (0+255),b
 21859  001FDE  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21860  001FE2  C06F  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 21861  001FE6  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21862  001FE8  0E01               	movlw	1
 21863  001FEA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21864  001FEC  EC67  F012         	call	_fifo_read	;wreg free
 21865  001FF0  0560               	decf	?_fifo_read& (0+255),w,b
 21866  001FF2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21867  001FF4  E1EC               	bnz	l17207
 21868                           
 21869                           ; BSR set to: 0
 21870                           ;main.c: 3287: }
 21871                           ;main.c: 3290: if ( *pdlc > 8 ) {
 21872  001FF6  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21873  001FFA  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21874  001FFE  0E08               	movlw	8
 21875  002000  64DF               	cpfsgt	indf2,c
 21876  002002  D005               	goto	l17225
 21877                           
 21878                           ; BSR set to: 0
 21879                           ;main.c: 3291: *pdlc = 0;
 21880  002004  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21881  002008  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21882  00200C  6ADF               	clrf	indf2,c
 21883  00200E                     l17225:
 21884                           
 21885                           ; BSR set to: 0
 21886                           ;main.c: 3292: }
 21887                           ;main.c: 3295: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21888  00200E  0E01               	movlw	high _canInputFifo
 21889  002010  0100               	movlb	0	; () banked
 21890  002012  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21891  002014  0ECD               	movlw	low _canInputFifo
 21892  002016  6F60               	movwf	?_fifo_read& (0+255),b
 21893  002018  C070  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21894  00201C  C071  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21895  002020  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21896  002024  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21897  002028  50DF               	movf	indf2,w,c
 21898  00202A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21899  00202C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21900  00202E  EC67  F012         	call	_fifo_read	;wreg free
 21901  002032  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21902  002036  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21903  00203A  50DF               	movf	indf2,w,c
 21904  00203C  1960               	xorwf	?_fifo_read& (0+255),w,b
 21905  00203E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21906  002040  E1C6               	bnz	l17207
 21907                           
 21908                           ; BSR set to: 0
 21909                           ;main.c: 3298: }
 21910                           ;main.c: 3300: fifo_canrxcount--;
 21911  002042  0631               	decf	_fifo_canrxcount,f,c	;volatile
 21912                           
 21913                           ; BSR set to: 0
 21914                           ;main.c: 3302: (INTCONbits.GIE = 1);
 21915  002044  8EF2               	bsf	intcon,7,c	;volatile
 21916                           
 21917                           ; BSR set to: 0
 21918                           ;main.c: 3304: return 1;
 21919  002046  0E01               	movlw	1
 21920  002048                     l1345:
 21921                           
 21922                           ; BSR set to: 0
 21923  002048  0012               	return	
 21924  00204A                     __end_of_getCANFrame:
 21925                           	opt stack 0
 21926                           tblptru	equ	0xFF8
 21927                           tblptrh	equ	0xFF7
 21928                           tblptrl	equ	0xFF6
 21929                           tablat	equ	0xFF5
 21930                           prodh	equ	0xFF4
 21931                           prodl	equ	0xFF3
 21932                           intcon	equ	0xFF2
 21933                           indf0	equ	0xFEF
 21934                           postinc0	equ	0xFEE
 21935                           fsr0h	equ	0xFEA
 21936                           fsr0l	equ	0xFE9
 21937                           wreg	equ	0xFE8
 21938                           indf1	equ	0xFE7
 21939                           postinc1	equ	0xFE6
 21940                           postdec1	equ	0xFE5
 21941                           fsr1h	equ	0xFE2
 21942                           fsr1l	equ	0xFE1
 21943                           indf2	equ	0xFDF
 21944                           postinc2	equ	0xFDE
 21945                           postdec2	equ	0xFDD
 21946                           plusw2	equ	0xFDB
 21947                           fsr2h	equ	0xFDA
 21948                           fsr2l	equ	0xFD9
 21949                           status	equ	0xFD8
 21950                           
 21951 ;; *************** function _fifo_read *****************
 21952 ;; Defined at:
 21953 ;;		line 29 in file "fifo.c"
 21954 ;; Parameters:    Size  Location     Type
 21955 ;;  f               2    0[BANK0 ] PTR struct .
 21956 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21957 ;;  buf             2    2[BANK0 ] PTR const void 
 21958 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21959 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21960 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21961 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21962 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21963 ;; Auto vars:     Size  Location     Type
 21964 ;;  i               2   12[BANK0 ] unsigned short 
 21965 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21966 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21967 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21968 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21969 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21970 ;; Return value:  Size  Location     Type
 21971 ;;                  2    0[BANK0 ] unsigned short 
 21972 ;; Registers used:
 21973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21974 ;; Tracked objects:
 21975 ;;		On entry : F/0
 21976 ;;		On exit  : F/0
 21977 ;;		Unchanged: 0/0
 21978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21979 ;;      Params:         0       6       0       0       0       0       0
 21980 ;;      Locals:         0       4       0       0       0       0       0
 21981 ;;      Temps:          0       4       0       0       0       0       0
 21982 ;;      Totals:         0      14       0       0       0       0       0
 21983 ;;Total ram usage:       14 bytes
 21984 ;; Hardware stack levels used:    1
 21985 ;; Hardware stack levels required when called:    3
 21986 ;; This function calls:
 21987 ;;		Nothing
 21988 ;; This function is called by:
 21989 ;;		_main
 21990 ;;		_doModeVerbose
 21991 ;;		_doModeVscp
 21992 ;;		_doModeSLCAN
 21993 ;;		_getCANFrame
 21994 ;; This function uses a non-reentrant model
 21995 ;;
 21996                           
 21997                           	psect	text53
 21998  0024CE                     __ptext53:
 21999                           	opt stack 0
 22000  0024CE                     _fifo_read:
 22001                           	opt stack 23
 22002                           
 22003                           ; BSR set to: 0
 22004                           ;fifo.c: 30: uint16_t i;
 22005                           ;fifo.c: 31: uint8_t *p;
 22006                           ;fifo.c: 32: p = buf;
 22007                           
 22008                           ; BSR set to: 0
 22009                           ;incstack = 0
 22010                           ;incstack = 0
 22011  0024CE  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 22012  0024D2  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 22013                           
 22014                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22015  0024D6  6B6C               	clrf	fifo_read@i& (0+255),b
 22016  0024D8  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 22017  0024DA  D04A               	goto	l10779
 22018  0024DC                     l10765:
 22019                           
 22020                           ; BSR set to: 0
 22021                           ;fifo.c: 36: if ( f->tail != f->head ) {
 22022  0024DC  EE20 F002          	lfsr	2,2
 22023  0024E0  D851               	call	PL38	;call to abstracted procedure
 22024  0024E2  18E5               	xorwf	postdec1,w,c
 22025  0024E4  CFDF FFE8          	movff	indf2,wreg
 22026  0024E8  B4D8               	btfsc	status,2,c
 22027  0024EA  18E7               	xorwf	indf1,w,c
 22028  0024EC  E03A               	bz	l1596
 22029                           
 22030                           ; BSR set to: 0
 22031                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22032  0024EE  EE20 F004          	lfsr	2,4
 22033  0024F2  5160               	movf	fifo_read@f& (0+255),w,b
 22034  0024F4  26D9               	addwf	fsr2l,f,c
 22035  0024F6  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22036  0024F8  22DA               	addwfc	fsr2h,f,c
 22037  0024FA  CFDE F066          	movff	postinc2,??_fifo_read
 22038  0024FE  CFDD F067          	movff	postdec2,??_fifo_read+1
 22039  002502  C060  FFD9         	movff	fifo_read@f,fsr2l
 22040  002506  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 22041  00250A  CFDE F068          	movff	postinc2,??_fifo_read+2
 22042  00250E  CFDD F069          	movff	postdec2,??_fifo_read+3
 22043  002512  5166               	movf	??_fifo_read& (0+255),w,b
 22044  002514  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 22045  002516  6ED9               	movwf	fsr2l,c
 22046  002518  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 22047  00251A  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 22048  00251C  6EDA               	movwf	fsr2h,c
 22049  00251E  C06A  FFE1         	movff	fifo_read@p,fsr1l
 22050  002522  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 22051  002526  CFDF FFE7          	movff	indf2,indf1
 22052                           
 22053                           ; BSR set to: 0
 22054  00252A  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 22055  00252C  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;fifo.c: 38: f->tail++;
 22059  00252E  EE20 F004          	lfsr	2,4
 22060  002532  5160               	movf	fifo_read@f& (0+255),w,b
 22061  002534  26D9               	addwf	fsr2l,f,c
 22062  002536  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22063  002538  22DA               	addwfc	fsr2h,f,c
 22064  00253A  2ADE               	incf	postinc2,f,c
 22065  00253C  0E00               	movlw	0
 22066  00253E  22DD               	addwfc	postdec2,f,c
 22067                           
 22068                           ; BSR set to: 0
 22069                           ;fifo.c: 39: if (f->tail >= f->size) {
 22070  002540  EE20 F006          	lfsr	2,6
 22071  002544  D81F               	call	PL38	;call to abstracted procedure
 22072  002546  5CE5               	subwf	postdec1,w,c
 22073  002548  E102               	bnz	u12985
 22074  00254A  50DF               	movf	indf2,w,c
 22075  00254C  5CE7               	subwf	indf1,w,c
 22076  00254E                     u12985:
 22077  00254E  E30E               	bnc	l10777
 22078                           
 22079                           ; BSR set to: 0
 22080                           ;fifo.c: 40: f->tail = 0;
 22081  002550  EE20 F004          	lfsr	2,4
 22082  002554  5160               	movf	fifo_read@f& (0+255),w,b
 22083  002556  26D9               	addwf	fsr2l,f,c
 22084  002558  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22085  00255A  22DA               	addwfc	fsr2h,f,c
 22086  00255C  6ADE               	clrf	postinc2,c
 22087  00255E  6ADD               	clrf	postdec2,c
 22088  002560  D005               	goto	l10777
 22089  002562                     l1596:
 22090                           
 22091                           ; BSR set to: 0
 22092                           ;fifo.c: 43: else {
 22093                           ;fifo.c: 44: return i;
 22094  002562  C06C  F060         	movff	fifo_read@i,?_fifo_read
 22095  002566  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22096  00256A  D00B               	goto	l1599
 22097  00256C                     l10777:
 22098                           
 22099                           ; BSR set to: 0
 22100  00256C  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 22101  00256E  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 22102  002570                     l10779:
 22103                           
 22104                           ; BSR set to: 0
 22105  002570  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22106  002572  5D6C               	subwf	fifo_read@i& (0+255),w,b
 22107  002574  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22108  002576  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22109  002578  E3B1               	bnc	l10765
 22110                           
 22111                           ; BSR set to: 0
 22112                           ;fifo.c: 45: }
 22113                           ;fifo.c: 47: }
 22114                           ;fifo.c: 49: return nbytes;
 22115  00257A  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22116  00257E  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22117  002582                     l1599:
 22118                           
 22119                           ; BSR set to: 0
 22120  002582  0012               	return	
 22121  002584                     __end_of_fifo_read:
 22122                           	opt stack 0
 22123  002584                     PL38:
 22124                           	opt stack 23
 22125  002584  5160               	movf	fifo_read@f& (0+255),w,b
 22126  002586  26D9               	addwf	fsr2l,f,c
 22127  002588  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22128  00258A  22DA               	addwfc	fsr2h,f,c
 22129  00258C  EE10 F004          	lfsr	1,4
 22130  002590  5160               	movf	fifo_read@f& (0+255),w,b
 22131  002592  26E1               	addwf	fsr1l,f,c
 22132  002594  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22133  002596  22E2               	addwfc	fsr1h,f,c
 22134  002598  52E6               	movf	postinc1,f,c
 22135  00259A  52DE               	movf	postinc2,f,c
 22136  00259C  50DD               	movf	postdec2,w,c
 22137  00259E  0012               	return	
 22138  0025A0                     __end_ofPL38:
 22139                           	opt stack 0
 22140                           tblptru	equ	0xFF8
 22141                           tblptrh	equ	0xFF7
 22142                           tblptrl	equ	0xFF6
 22143                           tablat	equ	0xFF5
 22144                           prodh	equ	0xFF4
 22145                           prodl	equ	0xFF3
 22146                           intcon	equ	0xFF2
 22147                           indf0	equ	0xFEF
 22148                           postinc0	equ	0xFEE
 22149                           fsr0h	equ	0xFEA
 22150                           fsr0l	equ	0xFE9
 22151                           wreg	equ	0xFE8
 22152                           indf1	equ	0xFE7
 22153                           postinc1	equ	0xFE6
 22154                           postdec1	equ	0xFE5
 22155                           fsr1h	equ	0xFE2
 22156                           fsr1l	equ	0xFE1
 22157                           indf2	equ	0xFDF
 22158                           postinc2	equ	0xFDE
 22159                           postdec2	equ	0xFDD
 22160                           plusw2	equ	0xFDB
 22161                           fsr2h	equ	0xFDA
 22162                           fsr2l	equ	0xFD9
 22163                           status	equ	0xFD8
 22164                           
 22165 ;; *************** function _sprintf *****************
 22166 ;; Defined at:
 22167 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22168 ;; Parameters:    Size  Location     Type
 22169 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 22170 ;;		 -> wrkbuf(80), 
 22171 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 22172 ;;		 -> STR_232(3), STR_231(7), STR_225(3), STR_224(7), 
 22173 ;;		 -> STR_221(4), STR_220(8), STR_217(4), STR_216(8), 
 22174 ;;		 -> STR_213(4), STR_212(8), STR_209(4), STR_208(8), 
 22175 ;;		 -> STR_205(4), STR_204(7), STR_201(4), STR_200(7), 
 22176 ;;		 -> STR_197(4), STR_196(7), STR_193(4), STR_192(7), 
 22177 ;;		 -> STR_187(3), STR_186(7), STR_184(3), STR_183(7), 
 22178 ;;		 -> STR_181(3), STR_180(7), STR_178(3), STR_177(7), 
 22179 ;;		 -> STR_175(3), STR_174(7), STR_172(3), STR_171(7), 
 22180 ;;		 -> STR_101(3), STR_100(7), STR_96(4), STR_95(8), 
 22181 ;;		 -> STR_92(4), STR_91(8), STR_77(3), STR_76(7), 
 22182 ;;		 -> STR_75(3), STR_74(7), STR_72(6), STR_71(10), 
 22183 ;;		 -> STR_66(3), STR_65(7), STR_63(3), STR_62(7), 
 22184 ;;		 -> STR_61(3), STR_60(7), STR_58(6), STR_57(10), 
 22185 ;; Auto vars:     Size  Location     Type
 22186 ;;  idx             1   33[BANK0 ] unsigned char 
 22187 ;;  _val            4   45[BANK0 ] struct .
 22188 ;;  flag            2   50[BANK0 ] unsigned short 
 22189 ;;  width           2   43[BANK0 ] int 
 22190 ;;  prec            2   41[BANK0 ] int 
 22191 ;;  c               1   49[BANK0 ] char 
 22192 ;;  ap              1   40[BANK0 ] PTR void [1]
 22193 ;;		 -> ?_sprintf(2), 
 22194 ;; Return value:  Size  Location     Type
 22195 ;;                  2   22[BANK0 ] int 
 22196 ;; Registers used:
 22197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22198 ;; Tracked objects:
 22199 ;;		On entry : F/0
 22200 ;;		On exit  : F/0
 22201 ;;		Unchanged: 0/0
 22202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22203 ;;      Params:         0       8       0       0       0       0       0
 22204 ;;      Locals:         0      19       0       0       0       0       0
 22205 ;;      Temps:          0       3       0       0       0       0       0
 22206 ;;      Totals:         0      30       0       0       0       0       0
 22207 ;;Total ram usage:       30 bytes
 22208 ;; Hardware stack levels used:    1
 22209 ;; Hardware stack levels required when called:    4
 22210 ;; This function calls:
 22211 ;;		_isdigit
 22212 ;;		___lldiv
 22213 ;;		___llmod
 22214 ;;		___wmul
 22215 ;; This function is called by:
 22216 ;;		_doModeVerbose
 22217 ;;		_receivePrintEventVerbose
 22218 ;;		_printStatistics
 22219 ;;		_printErrors
 22220 ;; This function uses a non-reentrant model
 22221 ;;
 22222                           
 22223                           	psect	text54
 22224  004C7E                     __ptext54:
 22225                           	opt stack 0
 22226  004C7E                     _sprintf:
 22227                           	opt stack 24
 22228                           
 22229                           ; BSR set to: 0
 22230                           ;doprnt.c: 494: va_list ap;
 22231                           ;doprnt.c: 499: signed char c;
 22232                           ;doprnt.c: 501: int width;
 22233                           ;doprnt.c: 504: int prec;
 22234                           ;doprnt.c: 508: unsigned short flag;
 22235                           ;doprnt.c: 527: union {
 22236                           ;doprnt.c: 528: unsigned long _val;
 22237                           ;doprnt.c: 529: struct {
 22238                           ;doprnt.c: 530: const char * _cp;
 22239                           ;doprnt.c: 531: unsigned _len;
 22240                           ;doprnt.c: 532: } _str;
 22241                           ;doprnt.c: 533: } _val;
 22242                           ;doprnt.c: 542: *ap = __va_start();
 22243                           
 22244                           ; BSR set to: 0
 22245                           ;incstack = 0
 22246                           ;incstack = 0
 22247  004C7E  0E7A               	movlw	low (?_sprintf+4)
 22248  004C80  6F88               	movwf	sprintf@ap& (0+255),b
 22249                           
 22250                           ;doprnt.c: 545: while(c = *f++) {
 22251  004C82  D32C               	goto	l16571
 22252  004C84                     l16237:
 22253                           
 22254                           ; BSR set to: 0
 22255                           ;doprnt.c: 547: if(c != '%')
 22256  004C84  5191               	movf	sprintf@c& (0+255),w,b
 22257  004C86  0A25               	xorlw	37
 22258  004C88  E009               	bz	l1683
 22259                           
 22260                           ; BSR set to: 0
 22261                           ;doprnt.c: 549: {
 22262                           ;doprnt.c: 550: ((*sp++ = (c)));
 22263  004C8A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22264  004C8E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22265  004C92  C091  FFDF         	movff	sprintf@c,indf2
 22266                           
 22267                           ; BSR set to: 0
 22268  004C96  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22269  004C98  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22270                           
 22271                           ;doprnt.c: 551: continue;
 22272  004C9A  D320               	goto	l16571
 22273  004C9C                     l1683:
 22274                           
 22275                           ; BSR set to: 0
 22276                           ;doprnt.c: 552: }
 22277                           ;doprnt.c: 555: width = 0;
 22278  004C9C  6B8B               	clrf	sprintf@width& (0+255),b
 22279  004C9E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22280                           
 22281                           ;doprnt.c: 557: flag = 0;
 22282  004CA0  6B92               	clrf	sprintf@flag& (0+255),b
 22283  004CA2  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22284  004CA4  D009               	goto	l16253
 22285  004CA6                     l16243:
 22286                           
 22287                           ; BSR set to: 0
 22288                           ;doprnt.c: 563: flag |= 0x08;
 22289  004CA6  8792               	bsf	sprintf@flag& (0+255),3,b
 22290  004CA8  D005               	goto	L38
 22291  004CAA                     l16245:
 22292                           
 22293                           ; BSR set to: 0
 22294                           ;doprnt.c: 570: flag |= 0x01;
 22295  004CAA  8192               	bsf	sprintf@flag& (0+255),0,b
 22296  004CAC  D003               	goto	L38
 22297  004CAE                     l16247:
 22298                           
 22299                           ; BSR set to: 0
 22300                           ;doprnt.c: 583: flag |= 0x800;
 22301  004CAE  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22302  004CB0  D001               	goto	L38
 22303  004CB2                     l16249:
 22304                           
 22305                           ; BSR set to: 0
 22306                           ;doprnt.c: 589: flag |= 0x04;
 22307  004CB2  8592               	bsf	sprintf@flag& (0+255),2,b
 22308  004CB4                     L38:
 22309                           
 22310                           ;doprnt.c: 590: f++;
 22311  004CB4  4B78               	infsnz	sprintf@f& (0+255),f,b
 22312  004CB6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22313  004CB8                     l16253:
 22314                           
 22315                           ; BSR set to: 0
 22316  004CB8  C078  FFF6         	movff	sprintf@f,tblptrl
 22317  004CBC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22318  004CC0  0008               	tblrd		*
 22319  004CC2  50F5               	movf	tablat,w,c
 22320                           
 22321                           ; Switch size 1, requested type "space"
 22322                           ; Number of cases is 4, Range of values is 32 to 48
 22323                           ; switch strategies available:
 22324                           ; Name         Instructions Cycles
 22325                           ; simple_byte           13     7 (average)
 22326                           ;	Chosen strategy is simple_byte
 22327  004CC4  0A20               	xorlw	32	; case 32
 22328  004CC6  E0F1               	bz	l16245
 22329  004CC8  0A03               	xorlw	3	; case 35
 22330  004CCA  E0F1               	bz	l16247
 22331  004CCC  0A0E               	xorlw	14	; case 45
 22332  004CCE  E0EB               	bz	l16243
 22333  004CD0  0A1D               	xorlw	29	; case 48
 22334  004CD2  E0EF               	bz	l16249
 22335                           
 22336                           ; BSR set to: 0
 22337                           ;doprnt.c: 602: if(flag & 0x08)
 22338  004CD4  B792               	btfsc	sprintf@flag& (0+255),3,b
 22339                           
 22340                           ; BSR set to: 0
 22341                           ;doprnt.c: 603: flag &= ~0x04;
 22342  004CD6  9592               	bcf	sprintf@flag& (0+255),2,b
 22343                           
 22344                           ; BSR set to: 0
 22345                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22346  004CD8  C078  FFF6         	movff	sprintf@f,tblptrl
 22347  004CDC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22348  004CE0  0008               	tblrd		*
 22349  004CE2  50F5               	movf	tablat,w,c
 22350  004CE4  ECF1  F007         	call	_isdigit
 22351  004CE8  E325               	bnc	l16269
 22352                           
 22353                           ; BSR set to: 0
 22354                           ;doprnt.c: 607: width = 0;
 22355  004CEA  6B8B               	clrf	sprintf@width& (0+255),b
 22356  004CEC  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22357  004CEE                     l16261:
 22358                           
 22359                           ; BSR set to: 0
 22360                           ;doprnt.c: 609: width *= 10;
 22361  004CEE  C08B  F060         	movff	sprintf@width,?___wmul
 22362  004CF2  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22363  004CF6  6B63               	clrf	(?___wmul+3)& (0+255),b
 22364  004CF8  0E0A               	movlw	10
 22365  004CFA  6F62               	movwf	(?___wmul+2)& (0+255),b
 22366  004CFC  EC46  F008         	call	___wmul	;wreg free
 22367  004D00  C060  F08B         	movff	?___wmul,sprintf@width
 22368  004D04  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22369                           
 22370                           ; BSR set to: 0
 22371                           ;doprnt.c: 610: width += *f++ - '0';
 22372  004D08  C078  FFF6         	movff	sprintf@f,tblptrl
 22373  004D0C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22374  004D10  0008               	tblrd		*
 22375  004D12  CFF5 F07E          	movff	tablat,??_sprintf
 22376  004D16  0ED0               	movlw	208
 22377  004D18  257E               	addwf	??_sprintf& (0+255),w,b
 22378  004D1A  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22379  004D1C  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22380  004D1E  0EFF               	movlw	255
 22381  004D20  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22382  004D22  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22383  004D24  278B               	addwf	sprintf@width& (0+255),f,b
 22384  004D26  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22385  004D28  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22386                           
 22387                           ; BSR set to: 0
 22388                           
 22389                           ; BSR set to: 0
 22390                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22391  004D2A  DB36               	call	PL84	;call to abstracted procedure
 22392  004D2C  ECF1  F007         	call	_isdigit
 22393  004D30  E314               	bnc	l16277
 22394  004D32  D7DD               	goto	l16261
 22395  004D34                     l16269:
 22396                           
 22397                           ; BSR set to: 0
 22398  004D34  C078  FFF6         	movff	sprintf@f,tblptrl
 22399  004D38  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22400  004D3C  0008               	tblrd		*
 22401  004D3E  50F5               	movf	tablat,w,c
 22402  004D40  0A2A               	xorlw	42
 22403  004D42  E10B               	bnz	l16277
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22407  004D44  5188               	movf	sprintf@ap& (0+255),w,b
 22408  004D46  6ED9               	movwf	fsr2l,c
 22409  004D48  6ADA               	clrf	fsr2h,c
 22410  004D4A  CFDE F08B          	movff	postinc2,sprintf@width
 22411  004D4E  CFDD F08C          	movff	postdec2,sprintf@width+1
 22412                           
 22413                           ; BSR set to: 0
 22414  004D52  0E02               	movlw	2
 22415  004D54  2788               	addwf	sprintf@ap& (0+255),f,b
 22416                           
 22417                           ; BSR set to: 0
 22418                           ;doprnt.c: 615: f++;
 22419  004D56  4B78               	infsnz	sprintf@f& (0+255),f,b
 22420  004D58  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22421  004D5A                     l16277:
 22422                           
 22423                           ; BSR set to: 0
 22424                           ;doprnt.c: 617: }
 22425                           ;doprnt.c: 620: if(*f == '.') {
 22426  004D5A  C078  FFF6         	movff	sprintf@f,tblptrl
 22427  004D5E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22428  004D62  0008               	tblrd		*
 22429  004D64  50F5               	movf	tablat,w,c
 22430  004D66  0A2E               	xorlw	46
 22431  004D68  E137               	bnz	l1699
 22432                           
 22433                           ; BSR set to: 0
 22434                           ;doprnt.c: 621: flag |= 0x4000;
 22435  004D6A  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22436                           
 22437                           ;doprnt.c: 622: f++;
 22438                           
 22439                           ; BSR set to: 0
 22440                           ;doprnt.c: 624: if(*f == '*') {
 22441  004D6C  DB15               	call	PL84	;call to abstracted procedure
 22442  004D6E  0A2A               	xorlw	42
 22443  004D70  E10C               	bnz	l1700
 22444                           
 22445                           ; BSR set to: 0
 22446                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22447  004D72  5188               	movf	sprintf@ap& (0+255),w,b
 22448  004D74  6ED9               	movwf	fsr2l,c
 22449  004D76  6ADA               	clrf	fsr2h,c
 22450  004D78  CFDE F089          	movff	postinc2,sprintf@prec
 22451  004D7C  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22452                           
 22453                           ; BSR set to: 0
 22454  004D80  0E02               	movlw	2
 22455  004D82  2788               	addwf	sprintf@ap& (0+255),f,b
 22456                           
 22457                           ; BSR set to: 0
 22458                           ;doprnt.c: 626: f++;
 22459  004D84  4B78               	infsnz	sprintf@f& (0+255),f,b
 22460  004D86  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22461                           
 22462                           ;doprnt.c: 627: } else
 22463  004D88  D088               	goto	l16347
 22464  004D8A                     l1700:
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;doprnt.c: 629: {
 22468                           ;doprnt.c: 630: prec = 0;
 22469  004D8A  6B89               	clrf	sprintf@prec& (0+255),b
 22470  004D8C  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22471                           
 22472                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22473  004D8E  D01A               	goto	l16293
 22474  004D90                     l16289:
 22475                           
 22476                           ; BSR set to: 0
 22477                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22478  004D90  C089  F060         	movff	sprintf@prec,?___wmul
 22479  004D94  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22480  004D98  6B63               	clrf	(?___wmul+3)& (0+255),b
 22481  004D9A  0E0A               	movlw	10
 22482  004D9C  6F62               	movwf	(?___wmul+2)& (0+255),b
 22483  004D9E  EC46  F008         	call	___wmul	;wreg free
 22484  004DA2  C078  FFF6         	movff	sprintf@f,tblptrl
 22485  004DA6  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22486  004DAA  0008               	tblrd		*
 22487  004DAC  50F5               	movf	tablat,w,c
 22488  004DAE  2760               	addwf	?___wmul& (0+255),f,b
 22489  004DB0  0E00               	movlw	0
 22490  004DB2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22491  004DB4  0ED0               	movlw	208
 22492  004DB6  2560               	addwf	?___wmul& (0+255),w,b
 22493  004DB8  6F89               	movwf	sprintf@prec& (0+255),b
 22494  004DBA  0EFF               	movlw	255
 22495  004DBC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22496  004DBE  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22497                           
 22498                           ; BSR set to: 0
 22499  004DC0  4B78               	infsnz	sprintf@f& (0+255),f,b
 22500  004DC2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22501  004DC4                     l16293:
 22502                           
 22503                           ; BSR set to: 0
 22504  004DC4  C078  FFF6         	movff	sprintf@f,tblptrl
 22505  004DC8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22506  004DCC  0008               	tblrd		*
 22507  004DCE  50F5               	movf	tablat,w,c
 22508  004DD0  ECF1  F007         	call	_isdigit
 22509  004DD4  E362               	bnc	l16347
 22510  004DD6  D7DC               	goto	l16289
 22511  004DD8                     l1699:
 22512                           
 22513                           ; BSR set to: 0
 22514                           ;doprnt.c: 635: prec = 0;
 22515  004DD8  6B89               	clrf	sprintf@prec& (0+255),b
 22516  004DDA  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22517  004DDC  D05E               	goto	l16347
 22518  004DDE                     l16295:
 22519                           
 22520                           ; BSR set to: 0
 22521                           ;doprnt.c: 652: flag |= 0x10;
 22522  004DDE  8992               	bsf	sprintf@flag& (0+255),4,b
 22523                           
 22524                           ;doprnt.c: 653: goto loop;
 22525  004DE0  D05C               	goto	l16347
 22526  004DE2                     l16297:
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;doprnt.c: 700: flag |= 0x40;
 22530  004DE2  8D92               	bsf	sprintf@flag& (0+255),6,b
 22531                           
 22532                           ;doprnt.c: 702: break;
 22533  004DE4  D06F               	goto	l16349
 22534  004DE6                     l16299:
 22535                           
 22536                           ; BSR set to: 0
 22537                           ;doprnt.c: 723: flag |= 0x20;
 22538  004DE6  8B92               	bsf	sprintf@flag& (0+255),5,b
 22539  004DE8                     l1716:
 22540                           
 22541                           ; BSR set to: 0
 22542                           ;doprnt.c: 730: flag |= 0x80;
 22543  004DE8  8F92               	bsf	sprintf@flag& (0+255),7,b
 22544                           
 22545                           ;doprnt.c: 732: break;
 22546  004DEA  D06C               	goto	l16349
 22547  004DEC                     l16301:
 22548                           
 22549                           ; BSR set to: 0
 22550                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22551  004DEC  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22552  004DEE  1189               	iorwf	sprintf@prec& (0+255),w,b
 22553  004DF0  E009               	bz	l16307
 22554                           
 22555                           ; BSR set to: 0
 22556  004DF2  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22557  004DF4  5D89               	subwf	sprintf@prec& (0+255),w,b
 22558  004DF6  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22559  004DF8  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22560  004DFA  E204               	bc	l16307
 22561                           
 22562                           ; BSR set to: 0
 22563                           ;doprnt.c: 763: _val._str._len = prec;
 22564  004DFC  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22565  004E00  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22566  004E04                     l16307:
 22567                           
 22568                           ; BSR set to: 0
 22569                           ;doprnt.c: 766: if(width > _val._str._len)
 22570  004E04  518B               	movf	sprintf@width& (0+255),w,b
 22571  004E06  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22572  004E08  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22573  004E0A  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22574  004E0C  E207               	bc	l1719
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;doprnt.c: 767: width -= _val._str._len;
 22578  004E0E  EE20  F08E         	lfsr	2,sprintf@_val+1
 22579  004E12  50DE               	movf	postinc2,w,c
 22580  004E14  5F8B               	subwf	sprintf@width& (0+255),f,b
 22581  004E16  50DD               	movf	postdec2,w,c
 22582  004E18  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22583  004E1A  D002               	goto	l1720
 22584  004E1C                     l1719:
 22585                           
 22586                           ; BSR set to: 0
 22587                           ;doprnt.c: 768: else
 22588                           ;doprnt.c: 769: width = 0;
 22589  004E1C  6B8B               	clrf	sprintf@width& (0+255),b
 22590  004E1E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22591  004E20                     l1720:
 22592                           
 22593                           ; BSR set to: 0
 22594                           ;doprnt.c: 771: if(!(flag & 0x08))
 22595  004E20  A792               	btfss	sprintf@flag& (0+255),3,b
 22596  004E22  D004               	goto	l16317
 22597  004E24  D015               	goto	l16325
 22598  004E26                     l16313:
 22599                           
 22600                           ; BSR set to: 0
 22601                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22602  004E26  DAB1               	call	PL66	;call to abstracted procedure
 22603                           
 22604                           ; BSR set to: 0
 22605  004E28  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22606  004E2A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22607  004E2C                     l16317:
 22608                           
 22609                           ; BSR set to: 0
 22610  004E2C  078B               	decf	sprintf@width& (0+255),f,b
 22611  004E2E  DAC2               	call	PL112	;call to abstracted procedure
 22612  004E30  B4D8               	btfsc	status,2,c
 22613  004E32  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22614  004E34  E00D               	bz	l16325
 22615  004E36  D7F7               	goto	l16313
 22616  004E38                     l16319:
 22617                           
 22618                           ; BSR set to: 0
 22619                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22620  004E38  518D               	movf	sprintf@_val& (0+255),w,b
 22621  004E3A  6ED9               	movwf	fsr2l,c
 22622  004E3C  6ADA               	clrf	fsr2h,c
 22623  004E3E  C076  FFE1         	movff	sprintf@sp,fsr1l
 22624  004E42  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22625  004E46  CFDF FFE7          	movff	indf2,indf1
 22626                           
 22627                           ; BSR set to: 0
 22628  004E4A  2B8D               	incf	sprintf@_val& (0+255),f,b
 22629                           
 22630                           ; BSR set to: 0
 22631  004E4C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22632  004E4E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22633  004E50                     l16325:
 22634                           
 22635                           ; BSR set to: 0
 22636  004E50  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22637  004E52  A0D8               	btfss	status,0,c
 22638  004E54  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22639  004E56  0100               	movlb	0	; () banked
 22640  004E58  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22641  004E5A  B4D8               	btfsc	status,2,c
 22642  004E5C  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22643  004E5E  E1EC               	bnz	l16319
 22644                           
 22645                           ; BSR set to: 0
 22646                           ;doprnt.c: 779: if(flag & 0x08)
 22647  004E60  B792               	btfsc	sprintf@flag& (0+255),3,b
 22648  004E62  D004               	goto	l16333
 22649  004E64  D23B               	goto	l16571
 22650  004E66                     l16329:
 22651                           
 22652                           ; BSR set to: 0
 22653                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22654  004E66  DA91               	call	PL66	;call to abstracted procedure
 22655                           
 22656                           ; BSR set to: 0
 22657  004E68  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22658  004E6A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22659  004E6C                     l16333:
 22660                           
 22661                           ; BSR set to: 0
 22662  004E6C  078B               	decf	sprintf@width& (0+255),f,b
 22663  004E6E  DAA2               	call	PL112	;call to abstracted procedure
 22664  004E70  B4D8               	btfsc	status,2,c
 22665  004E72  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22666  004E74  E101 D232          	bz	l16571
 22667  004E78  D7F6               	goto	l16329
 22668  004E7A                     l16335:
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22672  004E7A  5188               	movf	sprintf@ap& (0+255),w,b
 22673  004E7C  6ED9               	movwf	fsr2l,c
 22674  004E7E  6ADA               	clrf	fsr2h,c
 22675  004E80  50DF               	movf	indf2,w,c
 22676  004E82  6F91               	movwf	sprintf@c& (0+255),b
 22677                           
 22678                           ; BSR set to: 0
 22679  004E84  0E02               	movlw	2
 22680  004E86  2788               	addwf	sprintf@ap& (0+255),f,b
 22681  004E88                     l16339:
 22682                           
 22683                           ; BSR set to: 0
 22684                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22685  004E88  0E91               	movlw	low sprintf@c
 22686  004E8A  6F8D               	movwf	sprintf@_val& (0+255),b
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 815: _val._str._len = 1;
 22690  004E8C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22691  004E8E  0E01               	movlw	1
 22692  004E90  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22693                           
 22694                           ;doprnt.c: 816: goto dostring;
 22695  004E92  D7AC               	goto	l16301
 22696  004E94                     l16343:
 22697                           
 22698                           ; BSR set to: 0
 22699                           ;doprnt.c: 827: flag |= 0xC0;
 22700  004E94  0EC0               	movlw	192
 22701  004E96  1392               	iorwf	sprintf@flag& (0+255),f,b
 22702                           
 22703                           ;doprnt.c: 828: break;
 22704  004E98  D015               	goto	l16349
 22705  004E9A                     l16347:
 22706                           
 22707                           ; BSR set to: 0
 22708  004E9A  DA6C               	call	PL64	;call to abstracted procedure
 22709  004E9C  5191               	movf	sprintf@c& (0+255),w,b
 22710                           
 22711                           ; Switch size 1, requested type "space"
 22712                           ; Number of cases is 9, Range of values is 0 to 120
 22713                           ; switch strategies available:
 22714                           ; Name         Instructions Cycles
 22715                           ; simple_byte           28    15 (average)
 22716                           ;	Chosen strategy is simple_byte
 22717  004E9E  E101 D220          	bz	l16573
 22718  004EA2  0A58               	xorlw	88	; case 88
 22719  004EA4  E0A0               	bz	l16299
 22720  004EA6  0A3B               	xorlw	59	; case 99
 22721  004EA8  E0E8               	bz	l16335
 22722  004EAA  0A07               	xorlw	7	; case 100
 22723  004EAC  E00B               	bz	l16349
 22724  004EAE  0A0D               	xorlw	13	; case 105
 22725  004EB0  E009               	bz	l16349
 22726  004EB2  0A05               	xorlw	5	; case 108
 22727  004EB4  E094               	bz	l16295
 22728  004EB6  0A03               	xorlw	3	; case 111
 22729  004EB8  E094               	bz	l16297
 22730  004EBA  0A1A               	xorlw	26	; case 117
 22731  004EBC  E0EB               	bz	l16343
 22732  004EBE  0A0D               	xorlw	13	; case 120
 22733  004EC0  E093               	bz	l1716
 22734  004EC2  D7E2               	goto	l16339
 22735  004EC4                     l16349:
 22736                           
 22737                           ; BSR set to: 0
 22738                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22739  004EC4  5192               	movf	sprintf@flag& (0+255),w,b
 22740  004EC6  0BC0               	andlw	192
 22741  004EC8  E120               	bnz	l1735
 22742                           
 22743                           ; BSR set to: 0
 22744                           ;doprnt.c: 1260: {
 22745                           ;doprnt.c: 1262: if(flag & 0x10)
 22746  004ECA  A992               	btfss	sprintf@flag& (0+255),4,b
 22747  004ECC  D003               	goto	l16357
 22748                           
 22749                           ; BSR set to: 0
 22750                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22751  004ECE  5188               	movf	sprintf@ap& (0+255),w,b
 22752                           
 22753                           ; BSR set to: 0
 22754  004ED0  DA46               	call	PL58	;call to abstracted procedure
 22755  004ED2  D00D               	goto	L39
 22756  004ED4                     l16357:
 22757                           
 22758                           ; BSR set to: 0
 22759                           ;doprnt.c: 1264: else
 22760                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22761  004ED4  5188               	movf	sprintf@ap& (0+255),w,b
 22762  004ED6  6ED9               	movwf	fsr2l,c
 22763  004ED8  6ADA               	clrf	fsr2h,c
 22764  004EDA  CFDE F08D          	movff	postinc2,sprintf@_val
 22765  004EDE  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22766  004EE2  0E00               	movlw	0
 22767  004EE4  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22768  004EE6  0EFF               	movlw	-1
 22769  004EE8  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22770  004EEA  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22771                           
 22772                           ; BSR set to: 0
 22773  004EEC  0E02               	movlw	2
 22774  004EEE                     L39:
 22775  004EEE  2788               	addwf	sprintf@ap& (0+255),f,b
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22779  004EF0  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22780  004EF2  D01F               	goto	l16375
 22781                           
 22782                           ; BSR set to: 0
 22783                           ;doprnt.c: 1269: flag |= 0x03;
 22784  004EF4  0E03               	movlw	3
 22785  004EF6  1392               	iorwf	sprintf@flag& (0+255),f,b
 22786                           
 22787                           ; BSR set to: 0
 22788                           ;doprnt.c: 1270: _val._val = -_val._val;
 22789  004EF8  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22790  004EFA  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22791  004EFC  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22792  004EFE  6D8D               	negf	sprintf@_val& (0+255),b
 22793  004F00  0E00               	movlw	0
 22794  004F02  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22795  004F04  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22796  004F06  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22797  004F08  D014               	goto	l16375
 22798  004F0A                     l1735:
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;doprnt.c: 1275: else
 22802                           ;doprnt.c: 1280: {
 22803                           ;doprnt.c: 1288: if(flag & 0x10)
 22804  004F0A  A992               	btfss	sprintf@flag& (0+255),4,b
 22805  004F0C  D003               	goto	l16371
 22806                           
 22807                           ; BSR set to: 0
 22808                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22809  004F0E  5188               	movf	sprintf@ap& (0+255),w,b
 22810                           
 22811                           ; BSR set to: 0
 22812  004F10  DA26               	call	PL58	;call to abstracted procedure
 22813  004F12  D00E               	goto	L40
 22814  004F14                     l16371:
 22815                           
 22816                           ; BSR set to: 0
 22817                           ;doprnt.c: 1290: else
 22818                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22819  004F14  5188               	movf	sprintf@ap& (0+255),w,b
 22820  004F16  6ED9               	movwf	fsr2l,c
 22821  004F18  6ADA               	clrf	fsr2h,c
 22822  004F1A  CFDE F07E          	movff	postinc2,??_sprintf
 22823  004F1E  CFDD F07F          	movff	postdec2,??_sprintf+1
 22824  004F22  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22825  004F26  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22826  004F2A  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22827  004F2C  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22828                           
 22829                           ; BSR set to: 0
 22830  004F2E  0E02               	movlw	2
 22831  004F30                     L40:
 22832  004F30  2788               	addwf	sprintf@ap& (0+255),f,b
 22833  004F32                     l16375:
 22834                           
 22835                           ; BSR set to: 0
 22836                           ;doprnt.c: 1294: }
 22837                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22838  004F32  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22839  004F34  1189               	iorwf	sprintf@prec& (0+255),w,b
 22840  004F36  E15C               	bnz	l16425
 22841                           
 22842                           ; BSR set to: 0
 22843  004F38  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22844  004F3A  118D               	iorwf	sprintf@_val& (0+255),w,b
 22845  004F3C  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22846  004F3E  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22847  004F40  E157               	bnz	l16425
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;doprnt.c: 1298: prec++;
 22851  004F42  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22852  004F44  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22853  004F46  D054               	goto	l16425
 22854  004F48                     l16381:
 22855                           
 22856                           ; BSR set to: 0
 22857                           ;doprnt.c: 1309: case 0xC0:
 22858                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22859  004F48  0E01               	movlw	1
 22860  004F4A  6F91               	movwf	sprintf@c& (0+255),b
 22861  004F4C                     l16383:
 22862                           
 22863                           ; BSR set to: 0
 22864  004F4C  5191               	movf	sprintf@c& (0+255),w,b
 22865  004F4E  0A0A               	xorlw	10
 22866  004F50  E058               	bz	l16427
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22870  004F52  5191               	movf	sprintf@c& (0+255),w,b
 22871  004F54  0D04               	mullw	4
 22872  004F56  0ED6               	movlw	low _dpowers
 22873  004F58  24F3               	addwf	prodl,w,c
 22874  004F5A  6EF6               	movwf	tblptrl,c
 22875  004F5C  0E6B               	movlw	high _dpowers
 22876  004F5E  20F4               	addwfc	prodh,w,c
 22877  004F60  6EF7               	movwf	tblptrh,c
 22878  004F62  0009               	tblrd		*+
 22879  004F64  50F5               	movf	tablat,w,c
 22880  004F66  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22881  004F68  0009               	tblrd		*+
 22882  004F6A  50F5               	movf	tablat,w,c
 22883  004F6C  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22884  004F6E  0009               	tblrd		*+
 22885  004F70  50F5               	movf	tablat,w,c
 22886  004F72  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22887  004F74  0009               	tblrd		*+
 22888  004F76  50F5               	movf	tablat,w,c
 22889  004F78  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22890  004F7A  E343               	bnc	l16427
 22891                           
 22892                           ; BSR set to: 0
 22893  004F7C  2B91               	incf	sprintf@c& (0+255),f,b
 22894  004F7E  D7E6               	goto	l16383
 22895  004F80                     l16395:
 22896                           
 22897                           ; BSR set to: 0
 22898                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22899  004F80  0E01               	movlw	1
 22900  004F82  6F91               	movwf	sprintf@c& (0+255),b
 22901  004F84                     l16397:
 22902                           
 22903                           ; BSR set to: 0
 22904  004F84  5191               	movf	sprintf@c& (0+255),w,b
 22905  004F86  0A08               	xorlw	8
 22906  004F88  E03C               	bz	l16427
 22907                           
 22908                           ; BSR set to: 0
 22909                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22910  004F8A  5191               	movf	sprintf@c& (0+255),w,b
 22911  004F8C  0D04               	mullw	4
 22912  004F8E  0EFE               	movlw	low _hexpowers
 22913  004F90  24F3               	addwf	prodl,w,c
 22914  004F92  6EF6               	movwf	tblptrl,c
 22915  004F94  0E6B               	movlw	high _hexpowers
 22916  004F96  20F4               	addwfc	prodh,w,c
 22917  004F98  6EF7               	movwf	tblptrh,c
 22918  004F9A  0009               	tblrd		*+
 22919  004F9C  50F5               	movf	tablat,w,c
 22920  004F9E  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22921  004FA0  0009               	tblrd		*+
 22922  004FA2  50F5               	movf	tablat,w,c
 22923  004FA4  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22924  004FA6  0009               	tblrd		*+
 22925  004FA8  50F5               	movf	tablat,w,c
 22926  004FAA  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22927  004FAC  0009               	tblrd		*+
 22928  004FAE  50F5               	movf	tablat,w,c
 22929  004FB0  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22930  004FB2  E327               	bnc	l16427
 22931                           
 22932                           ; BSR set to: 0
 22933  004FB4  2B91               	incf	sprintf@c& (0+255),f,b
 22934  004FB6  D7E6               	goto	l16397
 22935  004FB8                     l16409:
 22936                           
 22937                           ; BSR set to: 0
 22938                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22939  004FB8  0E01               	movlw	1
 22940  004FBA  6F91               	movwf	sprintf@c& (0+255),b
 22941  004FBC                     l16411:
 22942                           
 22943                           ; BSR set to: 0
 22944  004FBC  5191               	movf	sprintf@c& (0+255),w,b
 22945  004FBE  0A0C               	xorlw	12
 22946  004FC0  E020               	bz	l16427
 22947                           
 22948                           ; BSR set to: 0
 22949                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22950  004FC2  5191               	movf	sprintf@c& (0+255),w,b
 22951  004FC4  0D04               	mullw	4
 22952  004FC6  0EA6               	movlw	low _octpowers
 22953  004FC8  24F3               	addwf	prodl,w,c
 22954  004FCA  6EF6               	movwf	tblptrl,c
 22955  004FCC  0E6B               	movlw	high _octpowers
 22956  004FCE  20F4               	addwfc	prodh,w,c
 22957  004FD0  6EF7               	movwf	tblptrh,c
 22958  004FD2  0009               	tblrd		*+
 22959  004FD4  50F5               	movf	tablat,w,c
 22960  004FD6  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22961  004FD8  0009               	tblrd		*+
 22962  004FDA  50F5               	movf	tablat,w,c
 22963  004FDC  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22964  004FDE  0009               	tblrd		*+
 22965  004FE0  50F5               	movf	tablat,w,c
 22966  004FE2  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22967  004FE4  0009               	tblrd		*+
 22968  004FE6  50F5               	movf	tablat,w,c
 22969  004FE8  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22970  004FEA  E30B               	bnc	l16427
 22971                           
 22972                           ; BSR set to: 0
 22973  004FEC  2B91               	incf	sprintf@c& (0+255),f,b
 22974  004FEE  D7E6               	goto	l16411
 22975  004FF0                     l16425:
 22976                           
 22977                           ; BSR set to: 0
 22978  004FF0  5192               	movf	sprintf@flag& (0+255),w,b
 22979  004FF2  0BC0               	andlw	192
 22980                           
 22981                           ; Switch size 1, requested type "space"
 22982                           ; Number of cases is 4, Range of values is 0 to 192
 22983                           ; switch strategies available:
 22984                           ; Name         Instructions Cycles
 22985                           ; simple_byte           13     7 (average)
 22986                           ;	Chosen strategy is simple_byte
 22987  004FF4  E0A9               	bz	l16381
 22988  004FF6  0A40               	xorlw	64	; case 64
 22989  004FF8  E0DF               	bz	l16409
 22990  004FFA  0AC0               	xorlw	192	; case 128
 22991  004FFC  E0C1               	bz	l16395
 22992  004FFE  0A40               	xorlw	64	; case 192
 22993  005000  E0A3               	bz	l16381
 22994  005002                     l16427:
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;doprnt.c: 1346: if(c < prec)
 22998  005002  0E80               	movlw	128
 22999  005004  BF91               	btfsc	sprintf@c& (0+255),7,b
 23000  005006  0E7F               	movlw	127
 23001  005008  6F7E               	movwf	??_sprintf& (0+255),b
 23002  00500A  5189               	movf	sprintf@prec& (0+255),w,b
 23003  00500C  5D91               	subwf	sprintf@c& (0+255),w,b
 23004  00500E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23005  005010  0A80               	xorlw	128
 23006  005012  597E               	subwfb	??_sprintf& (0+255),w,b
 23007  005014  E203               	bc	l16431
 23008                           
 23009                           ; BSR set to: 0
 23010                           ;doprnt.c: 1347: c = prec;
 23011  005016  C089  F091         	movff	sprintf@prec,sprintf@c
 23012  00501A  D00F               	goto	l16435
 23013  00501C                     l16431:
 23014                           
 23015                           ; BSR set to: 0
 23016                           ;doprnt.c: 1348: else if(prec < c)
 23017  00501C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23018  00501E  0A80               	xorlw	128
 23019  005020  6F7E               	movwf	??_sprintf& (0+255),b
 23020  005022  5191               	movf	sprintf@c& (0+255),w,b
 23021  005024  5D89               	subwf	sprintf@prec& (0+255),w,b
 23022  005026  0E80               	movlw	128
 23023  005028  BF91               	btfsc	sprintf@c& (0+255),7,b
 23024  00502A  0E7F               	movlw	127
 23025  00502C  597E               	subwfb	??_sprintf& (0+255),w,b
 23026  00502E  E205               	bc	l16435
 23027                           
 23028                           ; BSR set to: 0
 23029                           ;doprnt.c: 1349: prec = c;
 23030  005030  5191               	movf	sprintf@c& (0+255),w,b
 23031  005032  6F89               	movwf	sprintf@prec& (0+255),b
 23032  005034  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 23033  005036  BF89               	btfsc	sprintf@prec& (0+255),7,b
 23034  005038  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23035  00503A                     l16435:
 23036                           
 23037                           ; BSR set to: 0
 23038                           ;doprnt.c: 1352: if(width && flag & 0x03)
 23039  00503A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23040  00503C  118B               	iorwf	sprintf@width& (0+255),w,b
 23041  00503E  E006               	bz	l16441
 23042                           
 23043                           ; BSR set to: 0
 23044  005040  5192               	movf	sprintf@flag& (0+255),w,b
 23045  005042  0B03               	andlw	3
 23046  005044  E003               	bz	l16441
 23047                           
 23048                           ; BSR set to: 0
 23049                           ;doprnt.c: 1353: width--;
 23050  005046  078B               	decf	sprintf@width& (0+255),f,b
 23051  005048  A0D8               	btfss	status,0,c
 23052  00504A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23053  00504C                     l16441:
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;doprnt.c: 1355: if(flag & 0x4000) {
 23057  00504C  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 23058  00504E  D010               	goto	l16447
 23059                           
 23060                           ; BSR set to: 0
 23061                           ;doprnt.c: 1356: if(width > prec)
 23062  005050  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23063  005052  0A80               	xorlw	128
 23064  005054  6F7E               	movwf	??_sprintf& (0+255),b
 23065  005056  518B               	movf	sprintf@width& (0+255),w,b
 23066  005058  5D89               	subwf	sprintf@prec& (0+255),w,b
 23067  00505A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23068  00505C  0A80               	xorlw	128
 23069  00505E  597E               	subwfb	??_sprintf& (0+255),w,b
 23070  005060  E205               	bc	l1763
 23071                           
 23072                           ; BSR set to: 0
 23073                           ;doprnt.c: 1357: width -= prec;
 23074  005062  5189               	movf	sprintf@prec& (0+255),w,b
 23075  005064  5F8B               	subwf	sprintf@width& (0+255),f,b
 23076  005066  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23077  005068  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23078  00506A  D002               	goto	l16447
 23079  00506C                     l1763:
 23080                           
 23081                           ; BSR set to: 0
 23082                           ;doprnt.c: 1358: else
 23083                           ;doprnt.c: 1359: width = 0;
 23084  00506C  6B8B               	clrf	sprintf@width& (0+255),b
 23085  00506E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23086  005070                     l16447:
 23087                           
 23088                           ; BSR set to: 0
 23089                           ;doprnt.c: 1360: }
 23090                           ;doprnt.c: 1364: if((flag & (
 23091                           ;doprnt.c: 1366: 0x04|
 23092                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 23093  005070  0EC4               	movlw	196
 23094  005072  D94D               	call	PL16	;call to abstracted procedure
 23095  005074  0E40               	movlw	64
 23096  005076  B4D8               	btfsc	status,2,c
 23097  005078  197E               	xorwf	??_sprintf& (0+255),w,b
 23098  00507A  E107               	bnz	l16453
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;doprnt.c: 1369: if(width)
 23102  00507C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23103  00507E  118B               	iorwf	sprintf@width& (0+255),w,b
 23104  005080  E018               	bz	l16459
 23105                           
 23106                           ; BSR set to: 0
 23107                           ;doprnt.c: 1370: width--;
 23108  005082  078B               	decf	sprintf@width& (0+255),f,b
 23109  005084  A0D8               	btfss	status,0,c
 23110  005086  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23111  005088  D014               	goto	l16459
 23112  00508A                     l16453:
 23113                           
 23114                           ; BSR set to: 0
 23115                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23116  00508A  0EC0               	movlw	192
 23117  00508C  D940               	call	PL16	;call to abstracted procedure
 23118  00508E  0E80               	movlw	128
 23119  005090  B4D8               	btfsc	status,2,c
 23120  005092  197E               	xorwf	??_sprintf& (0+255),w,b
 23121  005094  E10E               	bnz	l16459
 23122                           
 23123                           ; BSR set to: 0
 23124                           ;doprnt.c: 1379: if(width > 2)
 23125  005096  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23126  005098  0A80               	xorlw	128
 23127  00509A  0F80               	addlw	-128
 23128  00509C  0E03               	movlw	3
 23129  00509E  B4D8               	btfsc	status,2,c
 23130  0050A0  5D8B               	subwf	sprintf@width& (0+255),w,b
 23131  0050A2  E305               	bnc	l1769
 23132                           
 23133                           ; BSR set to: 0
 23134                           ;doprnt.c: 1380: width -= 2;
 23135  0050A4  0EFE               	movlw	254
 23136  0050A6  278B               	addwf	sprintf@width& (0+255),f,b
 23137  0050A8  0EFF               	movlw	255
 23138  0050AA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 23139  0050AC  D002               	goto	l16459
 23140  0050AE                     l1769:
 23141                           
 23142                           ; BSR set to: 0
 23143                           ;doprnt.c: 1381: else
 23144                           ;doprnt.c: 1382: width = 0;
 23145  0050AE  6B8B               	clrf	sprintf@width& (0+255),b
 23146  0050B0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23147  0050B2                     l16459:
 23148                           
 23149                           ; BSR set to: 0
 23150                           ;doprnt.c: 1383: }
 23151                           ;doprnt.c: 1388: if(width > c)
 23152  0050B2  0E80               	movlw	128
 23153  0050B4  BF91               	btfsc	sprintf@c& (0+255),7,b
 23154  0050B6  0E7F               	movlw	127
 23155  0050B8  6F7E               	movwf	??_sprintf& (0+255),b
 23156  0050BA  518B               	movf	sprintf@width& (0+255),w,b
 23157  0050BC  5D91               	subwf	sprintf@c& (0+255),w,b
 23158  0050BE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23159  0050C0  0A80               	xorlw	128
 23160  0050C2  597E               	subwfb	??_sprintf& (0+255),w,b
 23161  0050C4  E207               	bc	l1771
 23162                           
 23163                           ; BSR set to: 0
 23164                           ;doprnt.c: 1389: width -= c;
 23165  0050C6  5191               	movf	sprintf@c& (0+255),w,b
 23166  0050C8  5F8B               	subwf	sprintf@width& (0+255),f,b
 23167  0050CA  0E00               	movlw	0
 23168  0050CC  BF91               	btfsc	sprintf@c& (0+255),7,b
 23169  0050CE  0EFF               	movlw	255
 23170  0050D0  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23171  0050D2  D002               	goto	l1772
 23172  0050D4                     l1771:
 23173                           
 23174                           ; BSR set to: 0
 23175                           ;doprnt.c: 1390: else
 23176                           ;doprnt.c: 1391: width = 0;
 23177  0050D4  6B8B               	clrf	sprintf@width& (0+255),b
 23178  0050D6  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23179  0050D8                     l1772:
 23180                           
 23181                           ; BSR set to: 0
 23182                           ;doprnt.c: 1394: if(flag & 0x04) {
 23183  0050D8  A592               	btfss	sprintf@flag& (0+255),2,b
 23184  0050DA  D03C               	goto	l16497
 23185                           
 23186                           ; BSR set to: 0
 23187                           ;doprnt.c: 1399: if(flag & 0x03)
 23188  0050DC  5192               	movf	sprintf@flag& (0+255),w,b
 23189  0050DE  0B03               	andlw	3
 23190  0050E0  E009               	bz	l1774
 23191                           
 23192                           ; BSR set to: 0
 23193                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23194  0050E2  C076  FFD9         	movff	sprintf@sp,fsr2l
 23195  0050E6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23196  0050EA  0E2D               	movlw	45
 23197  0050EC  6EDF               	movwf	indf2,c
 23198  0050EE                     l16467:
 23199                           
 23200                           ; BSR set to: 0
 23201  0050EE  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23202  0050F0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23203  0050F2  D022               	goto	l16489
 23204  0050F4                     l1774:
 23205                           
 23206                           ; BSR set to: 0
 23207                           ;doprnt.c: 1403: else
 23208                           ;doprnt.c: 1406: if(flag & 0x01)
 23209  0050F4  A192               	btfss	sprintf@flag& (0+255),0,b
 23210  0050F6  D006               	goto	l16473
 23211                           
 23212                           ; BSR set to: 0
 23213                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23214  0050F8  C076  FFD9         	movff	sprintf@sp,fsr2l
 23215  0050FC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23216  005100  0E20               	movlw	32
 23217  005102  D7F4               	goto	L41
 23218  005104                     l16473:
 23219                           
 23220                           ; BSR set to: 0
 23221                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23222  005104  0EC0               	movlw	192
 23223  005106  D903               	call	PL16	;call to abstracted procedure
 23224  005108  0E80               	movlw	128
 23225  00510A  B4D8               	btfsc	status,2,c
 23226  00510C  197E               	xorwf	??_sprintf& (0+255),w,b
 23227  00510E  E114               	bnz	l16489
 23228                           
 23229                           ; BSR set to: 0
 23230                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23231  005110  C076  FFD9         	movff	sprintf@sp,fsr2l
 23232  005114  D94A               	call	PL102	;call to abstracted procedure
 23233                           
 23234                           ; BSR set to: 0
 23235  005116  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23236  005118  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23237                           
 23238                           ; BSR set to: 0
 23239                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23240  00511A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23241  00511C  D003               	goto	l16483
 23242                           
 23243                           ; BSR set to: 0
 23244  00511E  6B83               	clrf	(_sprintf$2130+1)& (0+255),b
 23245  005120  0E78               	movlw	120
 23246  005122  D002               	goto	L42
 23247  005124                     l16483:
 23248                           
 23249                           ; BSR set to: 0
 23250  005124  6B83               	clrf	(_sprintf$2130+1)& (0+255),b
 23251  005126  0E58               	movlw	88
 23252  005128                     L42:
 23253  005128  6F82               	movwf	_sprintf$2130& (0+255),b
 23254                           
 23255                           ; BSR set to: 0
 23256  00512A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23257  00512E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23258  005132  C082  FFDF         	movff	_sprintf$2130,indf2
 23259  005136  D7DB               	goto	l16467
 23260  005138                     l16489:
 23261                           
 23262                           ; BSR set to: 0
 23263                           ;doprnt.c: 1419: }
 23264                           ;doprnt.c: 1422: if(width)
 23265  005138  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23266  00513A  118B               	iorwf	sprintf@width& (0+255),w,b
 23267  00513C  E101 D0B9          	bz	l16561
 23268                           
 23269                           ; BSR set to: 0
 23270                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23271  005140  C076  FFD9         	movff	sprintf@sp,fsr2l
 23272  005144  D932               	call	PL102	;call to abstracted procedure
 23273                           
 23274                           ; BSR set to: 0
 23275  005146  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23276  005148  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23277                           
 23278                           ; BSR set to: 0
 23279                           ;doprnt.c: 1425: while(--width);
 23280  00514A  078B               	decf	sprintf@width& (0+255),f,b
 23281  00514C  A0D8               	btfss	status,0,c
 23282  00514E  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23283  005150  0100               	movlb	0	; () banked
 23284  005152  D7F2               	goto	l16489
 23285  005154                     l16497:
 23286                           
 23287                           ; BSR set to: 0
 23288                           ;doprnt.c: 1429: {
 23289                           ;doprnt.c: 1431: if(width
 23290                           ;doprnt.c: 1433: && !(flag & 0x08)
 23291                           ;doprnt.c: 1435: )
 23292  005154  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23293  005156  118B               	iorwf	sprintf@width& (0+255),w,b
 23294  005158  A4D8               	btfss	status,2,c
 23295                           
 23296                           ; BSR set to: 0
 23297  00515A  B792               	btfsc	sprintf@flag& (0+255),3,b
 23298  00515C  D004               	goto	l16507
 23299  00515E                     l16501:
 23300                           
 23301                           ; BSR set to: 0
 23302                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23303  00515E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23304                           
 23305                           ; BSR set to: 0
 23306                           
 23307                           ; BSR set to: 0
 23308                           ;doprnt.c: 1438: while(--width);
 23309  005162  D8F0               	call	PL44	;call to abstracted procedure
 23310  005164  E1FC               	bnz	l16501
 23311  005166                     l16507:
 23312                           
 23313                           ; BSR set to: 0
 23314                           ;doprnt.c: 1445: if(flag & 0x03)
 23315  005166  5192               	movf	sprintf@flag& (0+255),w,b
 23316  005168  0B03               	andlw	3
 23317  00516A  E009               	bz	l1790
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23321  00516C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23322  005170  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23323  005174  0E2D               	movlw	45
 23324  005176  6EDF               	movwf	indf2,c
 23325                           
 23326                           ; BSR set to: 0
 23327  005178  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23328  00517A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23329  00517C  D008               	goto	l16517
 23330  00517E                     l1790:
 23331                           
 23332                           ; BSR set to: 0
 23333                           ;doprnt.c: 1450: else if(flag & 0x01)
 23334  00517E  A192               	btfss	sprintf@flag& (0+255),0,b
 23335  005180  D006               	goto	l16517
 23336                           
 23337                           ; BSR set to: 0
 23338                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23339  005182  C076  FFD9         	movff	sprintf@sp,fsr2l
 23340  005186  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23341  00518A  0E20               	movlw	32
 23342  00518C  D7F4               	goto	L43
 23343  00518E                     l16517:
 23344                           
 23345                           ; BSR set to: 0
 23346                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23347  00518E  0EC0               	movlw	192
 23348  005190  D8BE               	call	PL16	;call to abstracted procedure
 23349  005192  0E40               	movlw	64
 23350  005194  B4D8               	btfsc	status,2,c
 23351  005196  197E               	xorwf	??_sprintf& (0+255),w,b
 23352  005198  E106               	bnz	l16523
 23353                           
 23354                           ; BSR set to: 0
 23355                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23356  00519A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23357  00519E  D905               	call	PL102	;call to abstracted procedure
 23358  0051A0                     l16521:
 23359                           
 23360                           ; BSR set to: 0
 23361  0051A0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23362  0051A2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23363  0051A4  D086               	goto	l16561
 23364  0051A6                     l16523:
 23365                           
 23366                           ; BSR set to: 0
 23367                           ;doprnt.c: 1457: else
 23368                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23369  0051A6  0EC0               	movlw	192
 23370  0051A8  D8B2               	call	PL16	;call to abstracted procedure
 23371  0051AA  0E80               	movlw	128
 23372  0051AC  B4D8               	btfsc	status,2,c
 23373  0051AE  197E               	xorwf	??_sprintf& (0+255),w,b
 23374  0051B0  E001 D07F          	bnz	l16561
 23375                           
 23376                           ; BSR set to: 0
 23377                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23378  0051B4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23379  0051B8  D8F8               	call	PL102	;call to abstracted procedure
 23380                           
 23381                           ; BSR set to: 0
 23382  0051BA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23383  0051BC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23384                           
 23385                           ; BSR set to: 0
 23386                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23387  0051BE  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23388  0051C0  D003               	goto	l16533
 23389                           
 23390                           ; BSR set to: 0
 23391  0051C2  6B85               	clrf	(_sprintf$2131+1)& (0+255),b
 23392  0051C4  0E78               	movlw	120
 23393  0051C6  D002               	goto	L44
 23394  0051C8                     l16533:
 23395                           
 23396                           ; BSR set to: 0
 23397  0051C8  6B85               	clrf	(_sprintf$2131+1)& (0+255),b
 23398  0051CA  0E58               	movlw	88
 23399  0051CC                     L44:
 23400  0051CC  6F84               	movwf	_sprintf$2131& (0+255),b
 23401                           
 23402                           ; BSR set to: 0
 23403  0051CE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23404  0051D2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23405  0051D6  C084  FFDF         	movff	_sprintf$2131,indf2
 23406  0051DA  D7E2               	goto	l16521
 23407  0051DC                     l16539:
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;doprnt.c: 1493: case 0xC0:
 23411                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23412  0051DC  C089  F07E         	movff	sprintf@prec,??_sprintf
 23413  0051E0  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23414  0051E4  90D8               	bcf	status,0,c
 23415  0051E6  377E               	rlcf	??_sprintf& (0+255),f,b
 23416  0051E8  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23417  0051EA  90D8               	bcf	status,0,c
 23418  0051EC  377E               	rlcf	??_sprintf& (0+255),f,b
 23419  0051EE  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23420  0051F0  0ED6               	movlw	low _dpowers
 23421  0051F2  257E               	addwf	??_sprintf& (0+255),w,b
 23422  0051F4  6EF6               	movwf	tblptrl,c
 23423  0051F6  0E6B               	movlw	high _dpowers
 23424  0051F8  D87B               	call	PL12	;call to abstracted procedure
 23425  0051FA  C08D  F060         	movff	sprintf@_val,?___lldiv
 23426  0051FE  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23427  005202  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23428  005206  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23429  00520A  EC27  F00C         	call	___lldiv	;wreg free
 23430  00520E  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23431  005212  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23432  005216  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23433  00521A  C060  F06D         	movff	?___lldiv,?___llmod
 23434  00521E  0E0A               	movlw	10
 23435  005220  6F71               	movwf	(?___llmod+4)& (0+255),b
 23436  005222  0E00               	movlw	0
 23437  005224  6B72               	clrf	(?___llmod+5)& (0+255),b
 23438  005226  6B73               	clrf	(?___llmod+6)& (0+255),b
 23439  005228  6B74               	clrf	(?___llmod+7)& (0+255),b
 23440  00522A  EC1F  F00B         	call	___llmod	;wreg free
 23441  00522E  516D               	movf	?___llmod& (0+255),w,b
 23442  005230  D02D               	goto	L45
 23443  005232                     l16541:
 23444                           
 23445                           ; BSR set to: 0
 23446                           ;doprnt.c: 1506: {
 23447                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23448  005232  D875               	call	PL22	;call to abstracted procedure
 23449  005234  0EFE               	movlw	low _hexpowers
 23450  005236  257E               	addwf	??_sprintf& (0+255),w,b
 23451  005238  6EF6               	movwf	tblptrl,c
 23452  00523A  0E6B               	movlw	high _hexpowers
 23453  00523C  D859               	call	PL12	;call to abstracted procedure
 23454  00523E  EC27  F00C         	call	___lldiv	;wreg free
 23455  005242  5160               	movf	?___lldiv& (0+255),w,b
 23456  005244  0B0F               	andlw	15
 23457  005246  6F81               	movwf	sprintf@idx& (0+255),b
 23458                           
 23459                           ; BSR set to: 0
 23460                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23461  005248  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23462  00524A  D004               	goto	l16547
 23463                           
 23464                           ; BSR set to: 0
 23465  00524C  0E7A               	movlw	high STR_297
 23466  00524E  6F87               	movwf	(_sprintf$2137+1)& (0+255),b
 23467  005250  0ED5               	movlw	low STR_297
 23468  005252  D003               	goto	L46
 23469  005254                     l16547:
 23470                           
 23471                           ; BSR set to: 0
 23472  005254  0E7A               	movlw	high STR_296
 23473  005256  6F87               	movwf	(_sprintf$2137+1)& (0+255),b
 23474  005258  0EC4               	movlw	low STR_296
 23475  00525A                     L46:
 23476  00525A  6F86               	movwf	_sprintf$2137& (0+255),b
 23477                           
 23478                           ; BSR set to: 0
 23479  00525C  5181               	movf	sprintf@idx& (0+255),w,b
 23480  00525E  2586               	addwf	_sprintf$2137& (0+255),w,b
 23481  005260  6F7E               	movwf	??_sprintf& (0+255),b
 23482  005262  0E00               	movlw	0
 23483  005264  2187               	addwfc	(_sprintf$2137+1)& (0+255),w,b
 23484  005266  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23485  005268  C07E  FFF6         	movff	??_sprintf,tblptrl
 23486  00526C  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23487  005270  0008               	tblrd		*
 23488  005272  CFF5 F091          	movff	tablat,sprintf@c
 23489                           
 23490                           ;doprnt.c: 1515: }
 23491                           ;doprnt.c: 1517: break;
 23492  005276  D016               	goto	l16557
 23493  005278                     l16551:
 23494                           
 23495                           ; BSR set to: 0
 23496                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23497  005278  D852               	call	PL22	;call to abstracted procedure
 23498  00527A  0EA6               	movlw	low _octpowers
 23499  00527C  257E               	addwf	??_sprintf& (0+255),w,b
 23500  00527E  6EF6               	movwf	tblptrl,c
 23501  005280  0E6B               	movlw	high _octpowers
 23502  005282  D836               	call	PL12	;call to abstracted procedure
 23503  005284  EC27  F00C         	call	___lldiv	;wreg free
 23504  005288  5160               	movf	?___lldiv& (0+255),w,b
 23505  00528A  0B07               	andlw	7
 23506  00528C                     L45:
 23507  00528C  0F30               	addlw	48
 23508  00528E  6F91               	movwf	sprintf@c& (0+255),b
 23509                           
 23510                           ;doprnt.c: 1527: break;
 23511  005290  D009               	goto	l16557
 23512  005292                     l16555:
 23513                           
 23514                           ; BSR set to: 0
 23515  005292  5192               	movf	sprintf@flag& (0+255),w,b
 23516  005294  0BC0               	andlw	192
 23517                           
 23518                           ; Switch size 1, requested type "space"
 23519                           ; Number of cases is 4, Range of values is 0 to 192
 23520                           ; switch strategies available:
 23521                           ; Name         Instructions Cycles
 23522                           ; simple_byte           13     7 (average)
 23523                           ;	Chosen strategy is simple_byte
 23524  005296  E0A2               	bz	l16539
 23525  005298  0A40               	xorlw	64	; case 64
 23526  00529A  E0EE               	bz	l16551
 23527  00529C  0AC0               	xorlw	192	; case 128
 23528  00529E  E0C9               	bz	l16541
 23529  0052A0  0A40               	xorlw	64	; case 192
 23530  0052A2  E09C               	bz	l16539
 23531  0052A4                     l16557:
 23532                           
 23533                           ; BSR set to: 0
 23534                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23535  0052A4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23536  0052A8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23537  0052AC  C091  FFDF         	movff	sprintf@c,indf2
 23538  0052B0  D777               	goto	l16521
 23539  0052B2                     l16561:
 23540                           
 23541                           ; BSR set to: 0
 23542  0052B2  0789               	decf	sprintf@prec& (0+255),f,b
 23543  0052B4  A0D8               	btfss	status,0,c
 23544  0052B6  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23545  0052B8  0100               	movlb	0	; () banked
 23546  0052BA  2989               	incf	sprintf@prec& (0+255),w,b
 23547  0052BC  B4D8               	btfsc	status,2,c
 23548  0052BE  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23549  0052C0  E1E8               	bnz	l16555
 23550                           
 23551                           ; BSR set to: 0
 23552                           ;doprnt.c: 1532: }
 23553                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23554  0052C2  A792               	btfss	sprintf@flag& (0+255),3,b
 23555  0052C4  D00B               	goto	l16571
 23556                           
 23557                           ; BSR set to: 0
 23558  0052C6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23559  0052C8  0A80               	xorlw	128
 23560  0052CA  0F80               	addlw	-128
 23561  0052CC  0E01               	movlw	1
 23562  0052CE  B4D8               	btfsc	status,2,c
 23563  0052D0  5D8B               	subwf	sprintf@width& (0+255),w,b
 23564  0052D2  E304               	bnc	l16571
 23565  0052D4                     l16565:
 23566                           
 23567                           ; BSR set to: 0
 23568                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23569  0052D4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23570                           
 23571                           ; BSR set to: 0
 23572                           
 23573                           ; BSR set to: 0
 23574                           ;doprnt.c: 1538: while(--width);
 23575  0052D8  D835               	call	PL44	;call to abstracted procedure
 23576  0052DA  E1FC               	bnz	l16565
 23577  0052DC                     l16571:
 23578                           
 23579                           ; BSR set to: 0
 23580  0052DC  D84B               	call	PL64	;call to abstracted procedure
 23581  0052DE  6791               	tstfsz	sprintf@c& (0+255),b
 23582  0052E0  D4D1               	goto	l16237
 23583  0052E2                     l16573:
 23584                           
 23585                           ; BSR set to: 0
 23586                           ;doprnt.c: 1545: *sp = 0;
 23587  0052E2  C076  FFD9         	movff	sprintf@sp,fsr2l
 23588  0052E6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23589  0052EA  0E00               	movlw	0
 23590  0052EC  6EDF               	movwf	indf2,c
 23591                           
 23592                           ; BSR set to: 0
 23593  0052EE  0C00               	retlw	0
 23594  0052F0                     __end_of_sprintf:
 23595                           	opt stack 0
 23596  0052F0                     PL12:
 23597                           	opt stack 24
 23598  0052F0  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23599  0052F2  6EF7               	movwf	tblptrh,c
 23600  0052F4  0009               	tblrd		*+
 23601  0052F6  CFF5 F064          	movff	tablat,?___lldiv+4
 23602  0052FA  0009               	tblrd		*+
 23603  0052FC  CFF5 F065          	movff	tablat,?___lldiv+5
 23604  005300  0009               	tblrd		*+
 23605  005302  CFF5 F066          	movff	tablat,?___lldiv+6
 23606  005306  000A               	tblrd		*-
 23607  005308  CFF5 F067          	movff	tablat,?___lldiv+7
 23608  00530C  0012               	return	
 23609  00530E                     __end_ofPL12:
 23610                           	opt stack 0
 23611  00530E                     PL16:
 23612                           	opt stack 24
 23613  00530E  1592               	andwf	sprintf@flag& (0+255),w,b
 23614  005310  6F7E               	movwf	??_sprintf& (0+255),b
 23615  005312  0E08               	movlw	8
 23616  005314  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23617  005316  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23618  005318  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23619  00531A  0A08               	xorlw	8
 23620  00531C  0012               	return	
 23621  00531E                     __end_ofPL16:
 23622                           	opt stack 0
 23623  00531E                     PL22:
 23624                           	opt stack 24
 23625  00531E  C08D  F060         	movff	sprintf@_val,?___lldiv
 23626  005322  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23627  005326  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23628  00532A  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23629  00532E  C089  F07E         	movff	sprintf@prec,??_sprintf
 23630  005332  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23631  005336  90D8               	bcf	status,0,c
 23632  005338  377E               	rlcf	??_sprintf& (0+255),f,b
 23633  00533A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23634  00533C  90D8               	bcf	status,0,c
 23635  00533E  377E               	rlcf	??_sprintf& (0+255),f,b
 23636  005340  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23637  005342  0012               	return	
 23638  005344                     __end_ofPL22:
 23639                           	opt stack 0
 23640  005344                     PL44:
 23641                           	opt stack 24
 23642  005344  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23643  005348  0E20               	movlw	32
 23644  00534A  6EDF               	movwf	indf2,c
 23645  00534C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23646  00534E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23647  005350  078B               	decf	sprintf@width& (0+255),f,b
 23648  005352  A0D8               	btfss	status,0,c
 23649  005354  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23650  005356  0100               	movlb	0	; () banked
 23651  005358  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23652  00535A  118B               	iorwf	sprintf@width& (0+255),w,b
 23653  00535C  0012               	return	
 23654  00535E                     __end_ofPL44:
 23655                           	opt stack 0
 23656  00535E                     PL58:
 23657                           	opt stack 24
 23658  00535E  6ED9               	movwf	fsr2l,c
 23659  005360  6ADA               	clrf	fsr2h,c
 23660  005362  CFDE F08D          	movff	postinc2,sprintf@_val
 23661  005366  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23662  00536A  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23663  00536E  CFDE F090          	movff	postinc2,sprintf@_val+3
 23664  005372  0C04               	retlw	4
 23665  005374                     __end_ofPL58:
 23666                           	opt stack 0
 23667  005374                     PL64:
 23668                           	opt stack 24
 23669  005374  C078  FFF6         	movff	sprintf@f,tblptrl
 23670  005378  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23671  00537C  4B78               	infsnz	sprintf@f& (0+255),f,b
 23672  00537E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23673  005380  0008               	tblrd		*
 23674  005382  CFF5 F091          	movff	tablat,sprintf@c
 23675  005386  0100               	movlb	0	; () banked
 23676  005388  0012               	return	
 23677  00538A                     __end_ofPL64:
 23678                           	opt stack 0
 23679  00538A                     PL66:
 23680                           	opt stack 24
 23681  00538A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23682  00538E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23683  005392  0E20               	movlw	32
 23684  005394  6EDF               	movwf	indf2,c
 23685  005396  0C20               	retlw	32
 23686  005398                     __end_ofPL66:
 23687                           	opt stack 0
 23688  005398                     PL84:
 23689                           	opt stack 24
 23690  005398  4B78               	infsnz	sprintf@f& (0+255),f,b
 23691  00539A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23692  00539C  C078  FFF6         	movff	sprintf@f,tblptrl
 23693  0053A0  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23694  0053A4  0008               	tblrd		*
 23695  0053A6  50F5               	movf	tablat,w,c
 23696  0053A8  0012               	return	
 23697  0053AA                     __end_ofPL84:
 23698                           	opt stack 0
 23699  0053AA                     PL102:
 23700                           	opt stack 24
 23701  0053AA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23702  0053AE  0E30               	movlw	48
 23703  0053B0  6EDF               	movwf	indf2,c
 23704  0053B2  0C30               	retlw	48
 23705  0053B4                     __end_ofPL102:
 23706                           	opt stack 0
 23707  0053B4                     PL112:
 23708                           	opt stack 24
 23709  0053B4  A0D8               	btfss	status,0,c
 23710  0053B6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23711  0053B8  0100               	movlb	0	; () banked
 23712  0053BA  298B               	incf	sprintf@width& (0+255),w,b
 23713  0053BC  0012               	return	
 23714  0053BE                     __end_ofPL112:
 23715                           	opt stack 0
 23716                           tblptru	equ	0xFF8
 23717                           tblptrh	equ	0xFF7
 23718                           tblptrl	equ	0xFF6
 23719                           tablat	equ	0xFF5
 23720                           prodh	equ	0xFF4
 23721                           prodl	equ	0xFF3
 23722                           intcon	equ	0xFF2
 23723                           indf0	equ	0xFEF
 23724                           postinc0	equ	0xFEE
 23725                           fsr0h	equ	0xFEA
 23726                           fsr0l	equ	0xFE9
 23727                           wreg	equ	0xFE8
 23728                           indf1	equ	0xFE7
 23729                           postinc1	equ	0xFE6
 23730                           postdec1	equ	0xFE5
 23731                           fsr1h	equ	0xFE2
 23732                           fsr1l	equ	0xFE1
 23733                           indf2	equ	0xFDF
 23734                           postinc2	equ	0xFDE
 23735                           postdec2	equ	0xFDD
 23736                           plusw2	equ	0xFDB
 23737                           fsr2h	equ	0xFDA
 23738                           fsr2l	equ	0xFD9
 23739                           status	equ	0xFD8
 23740                           
 23741 ;; *************** function ___wmul *****************
 23742 ;; Defined at:
 23743 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23744 ;; Parameters:    Size  Location     Type
 23745 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23746 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23747 ;; Auto vars:     Size  Location     Type
 23748 ;;  product         2    4[BANK0 ] unsigned int 
 23749 ;; Return value:  Size  Location     Type
 23750 ;;                  2    0[BANK0 ] unsigned int 
 23751 ;; Registers used:
 23752 ;;		wreg, status,2, status,0, prodl, prodh
 23753 ;; Tracked objects:
 23754 ;;		On entry : F/0
 23755 ;;		On exit  : F/0
 23756 ;;		Unchanged: 0/0
 23757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23758 ;;      Params:         0       4       0       0       0       0       0
 23759 ;;      Locals:         0       2       0       0       0       0       0
 23760 ;;      Temps:          0       0       0       0       0       0       0
 23761 ;;      Totals:         0       6       0       0       0       0       0
 23762 ;;Total ram usage:        6 bytes
 23763 ;; Hardware stack levels used:    1
 23764 ;; Hardware stack levels required when called:    3
 23765 ;; This function calls:
 23766 ;;		Nothing
 23767 ;; This function is called by:
 23768 ;;		_sprintf
 23769 ;;		_atoi
 23770 ;; This function uses a non-reentrant model
 23771 ;;
 23772                           
 23773                           	psect	text55
 23774  00108C                     __ptext55:
 23775                           	opt stack 0
 23776  00108C                     ___wmul:
 23777                           	opt stack 24
 23778                           
 23779                           ; BSR set to: 0
 23780                           
 23781                           ; BSR set to: 0
 23782                           ;incstack = 0
 23783                           ;incstack = 0
 23784  00108C  5160               	movf	___wmul@multiplier& (0+255),w,b
 23785  00108E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23786  001090  CFF3 F064          	movff	prodl,___wmul@product
 23787  001094  CFF4 F065          	movff	prodh,___wmul@product+1
 23788  001098  5160               	movf	___wmul@multiplier& (0+255),w,b
 23789  00109A  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23790  00109C  D808               	call	PL104	;call to abstracted procedure
 23791  00109E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23792  0010A0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23793  0010A2  D805               	call	PL104	;call to abstracted procedure
 23794                           
 23795                           ; BSR set to: 0
 23796  0010A4  C064  F060         	movff	___wmul@product,?___wmul
 23797  0010A8  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23798                           
 23799                           ; BSR set to: 0
 23800  0010AC  0012               	return	
 23801  0010AE                     __end_of___wmul:
 23802                           	opt stack 0
 23803  0010AE                     PL104:
 23804                           	opt stack 24
 23805  0010AE  CFF3 FFF4          	movff	prodl,prodh
 23806  0010B2  6AF3               	clrf	prodl,c
 23807  0010B4  50F3               	movf	prodl,w,c
 23808  0010B6  2764               	addwf	___wmul@product& (0+255),f,b
 23809  0010B8  50F4               	movf	prodh,w,c
 23810  0010BA  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23811  0010BC  0012               	return	
 23812  0010BE                     __end_ofPL104:
 23813                           	opt stack 0
 23814                           tblptru	equ	0xFF8
 23815                           tblptrh	equ	0xFF7
 23816                           tblptrl	equ	0xFF6
 23817                           tablat	equ	0xFF5
 23818                           prodh	equ	0xFF4
 23819                           prodl	equ	0xFF3
 23820                           intcon	equ	0xFF2
 23821                           indf0	equ	0xFEF
 23822                           postinc0	equ	0xFEE
 23823                           fsr0h	equ	0xFEA
 23824                           fsr0l	equ	0xFE9
 23825                           wreg	equ	0xFE8
 23826                           indf1	equ	0xFE7
 23827                           postinc1	equ	0xFE6
 23828                           postdec1	equ	0xFE5
 23829                           fsr1h	equ	0xFE2
 23830                           fsr1l	equ	0xFE1
 23831                           indf2	equ	0xFDF
 23832                           postinc2	equ	0xFDE
 23833                           postdec2	equ	0xFDD
 23834                           plusw2	equ	0xFDB
 23835                           fsr2h	equ	0xFDA
 23836                           fsr2l	equ	0xFD9
 23837                           status	equ	0xFD8
 23838                           
 23839 ;; *************** function ___llmod *****************
 23840 ;; Defined at:
 23841 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23842 ;; Parameters:    Size  Location     Type
 23843 ;;  dividend        4   13[BANK0 ] unsigned long 
 23844 ;;  divisor         4   17[BANK0 ] unsigned long 
 23845 ;; Auto vars:     Size  Location     Type
 23846 ;;  counter         1   21[BANK0 ] unsigned char 
 23847 ;; Return value:  Size  Location     Type
 23848 ;;                  4   13[BANK0 ] unsigned long 
 23849 ;; Registers used:
 23850 ;;		wreg, status,2, status,0
 23851 ;; Tracked objects:
 23852 ;;		On entry : F/0
 23853 ;;		On exit  : F/0
 23854 ;;		Unchanged: 0/0
 23855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23856 ;;      Params:         0       8       0       0       0       0       0
 23857 ;;      Locals:         0       1       0       0       0       0       0
 23858 ;;      Temps:          0       0       0       0       0       0       0
 23859 ;;      Totals:         0       9       0       0       0       0       0
 23860 ;;Total ram usage:        9 bytes
 23861 ;; Hardware stack levels used:    1
 23862 ;; Hardware stack levels required when called:    3
 23863 ;; This function calls:
 23864 ;;		Nothing
 23865 ;; This function is called by:
 23866 ;;		_sprintf
 23867 ;;		_ultoa
 23868 ;; This function uses a non-reentrant model
 23869 ;;
 23870                           
 23871                           	psect	text56
 23872  00163E                     __ptext56:
 23873                           	opt stack 0
 23874  00163E                     ___llmod:
 23875                           	opt stack 23
 23876                           
 23877                           ; BSR set to: 0
 23878                           
 23879                           ; BSR set to: 0
 23880                           ;incstack = 0
 23881                           ;incstack = 0
 23882  00163E  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23883  001640  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23884  001642  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23885  001644  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23886  001646  E023               	bz	l2438
 23887                           
 23888                           ; BSR set to: 0
 23889  001648  0E01               	movlw	1
 23890  00164A  6F75               	movwf	___llmod@counter& (0+255),b
 23891  00164C  D006               	goto	l17411
 23892  00164E                     l17409:
 23893                           
 23894                           ; BSR set to: 0
 23895  00164E  90D8               	bcf	status,0,c
 23896  001650  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23897  001652  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23898  001654  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23899  001656  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23900  001658  2B75               	incf	___llmod@counter& (0+255),f,b
 23901  00165A                     l17411:
 23902                           
 23903                           ; BSR set to: 0
 23904  00165A  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23905  00165C  D7F8               	goto	l17409
 23906  00165E                     l17413:
 23907                           
 23908                           ; BSR set to: 0
 23909  00165E  5171               	movf	___llmod@divisor& (0+255),w,b
 23910  001660  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23911  001662  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23912  001664  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23913  001666  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23914  001668  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23915  00166A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23916  00166C  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23917  00166E  E308               	bnc	l17417
 23918                           
 23919                           ; BSR set to: 0
 23920  001670  5171               	movf	___llmod@divisor& (0+255),w,b
 23921  001672  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23922  001674  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23923  001676  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23924  001678  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23925  00167A  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23926  00167C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23927  00167E  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23928  001680                     l17417:
 23929                           
 23930                           ; BSR set to: 0
 23931  001680  90D8               	bcf	status,0,c
 23932  001682  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23933  001684  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23934  001686  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23935  001688  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23936                           
 23937                           ; BSR set to: 0
 23938  00168A  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23939  00168C  D7E8               	goto	l17413
 23940  00168E                     l2438:
 23941                           
 23942                           ; BSR set to: 0
 23943  00168E  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23944  001692  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23945  001696  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23946  00169A  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23947                           
 23948                           ; BSR set to: 0
 23949  00169E  0012               	return	
 23950  0016A0                     __end_of___llmod:
 23951                           	opt stack 0
 23952                           tblptru	equ	0xFF8
 23953                           tblptrh	equ	0xFF7
 23954                           tblptrl	equ	0xFF6
 23955                           tablat	equ	0xFF5
 23956                           prodh	equ	0xFF4
 23957                           prodl	equ	0xFF3
 23958                           intcon	equ	0xFF2
 23959                           indf0	equ	0xFEF
 23960                           postinc0	equ	0xFEE
 23961                           fsr0h	equ	0xFEA
 23962                           fsr0l	equ	0xFE9
 23963                           wreg	equ	0xFE8
 23964                           indf1	equ	0xFE7
 23965                           postinc1	equ	0xFE6
 23966                           postdec1	equ	0xFE5
 23967                           fsr1h	equ	0xFE2
 23968                           fsr1l	equ	0xFE1
 23969                           indf2	equ	0xFDF
 23970                           postinc2	equ	0xFDE
 23971                           postdec2	equ	0xFDD
 23972                           plusw2	equ	0xFDB
 23973                           fsr2h	equ	0xFDA
 23974                           fsr2l	equ	0xFD9
 23975                           status	equ	0xFD8
 23976                           
 23977 ;; *************** function ___lldiv *****************
 23978 ;; Defined at:
 23979 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23980 ;; Parameters:    Size  Location     Type
 23981 ;;  dividend        4    0[BANK0 ] unsigned long 
 23982 ;;  divisor         4    4[BANK0 ] unsigned long 
 23983 ;; Auto vars:     Size  Location     Type
 23984 ;;  quotient        4    9[BANK0 ] unsigned long 
 23985 ;;  counter         1    8[BANK0 ] unsigned char 
 23986 ;; Return value:  Size  Location     Type
 23987 ;;                  4    0[BANK0 ] unsigned long 
 23988 ;; Registers used:
 23989 ;;		wreg, status,2, status,0
 23990 ;; Tracked objects:
 23991 ;;		On entry : F/0
 23992 ;;		On exit  : F/0
 23993 ;;		Unchanged: 0/0
 23994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23995 ;;      Params:         0       8       0       0       0       0       0
 23996 ;;      Locals:         0       5       0       0       0       0       0
 23997 ;;      Temps:          0       0       0       0       0       0       0
 23998 ;;      Totals:         0      13       0       0       0       0       0
 23999 ;;Total ram usage:       13 bytes
 24000 ;; Hardware stack levels used:    1
 24001 ;; Hardware stack levels required when called:    3
 24002 ;; This function calls:
 24003 ;;		Nothing
 24004 ;; This function is called by:
 24005 ;;		_sprintf
 24006 ;;		_ultoa
 24007 ;; This function uses a non-reentrant model
 24008 ;;
 24009                           
 24010                           	psect	text57
 24011  00184E                     __ptext57:
 24012                           	opt stack 0
 24013  00184E                     ___lldiv:
 24014                           	opt stack 23
 24015                           
 24016                           ; BSR set to: 0
 24017                           
 24018                           ; BSR set to: 0
 24019                           ;incstack = 0
 24020                           ;incstack = 0
 24021  00184E  6B69               	clrf	___lldiv@quotient& (0+255),b
 24022  001850  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 24023  001852  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 24024  001854  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 24025                           
 24026                           ; BSR set to: 0
 24027  001856  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24028  001858  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 24029  00185A  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 24030  00185C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 24031  00185E  E029               	bz	l2428
 24032                           
 24033                           ; BSR set to: 0
 24034  001860  0E01               	movlw	1
 24035  001862  6F68               	movwf	___lldiv@counter& (0+255),b
 24036  001864  D006               	goto	l17391
 24037  001866                     l17389:
 24038                           
 24039                           ; BSR set to: 0
 24040  001866  90D8               	bcf	status,0,c
 24041  001868  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 24042  00186A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 24043  00186C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 24044  00186E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 24045  001870  2B68               	incf	___lldiv@counter& (0+255),f,b
 24046  001872                     l17391:
 24047                           
 24048                           ; BSR set to: 0
 24049  001872  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 24050  001874  D7F8               	goto	l17389
 24051  001876                     l17393:
 24052                           
 24053                           ; BSR set to: 0
 24054  001876  90D8               	bcf	status,0,c
 24055  001878  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 24056  00187A  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 24057  00187C  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 24058  00187E  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 24059                           
 24060                           ; BSR set to: 0
 24061  001880  5164               	movf	___lldiv@divisor& (0+255),w,b
 24062  001882  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 24063  001884  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24064  001886  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 24065  001888  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24066  00188A  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 24067  00188C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24068  00188E  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 24069  001890  E309               	bnc	l17401
 24070                           
 24071                           ; BSR set to: 0
 24072  001892  5164               	movf	___lldiv@divisor& (0+255),w,b
 24073  001894  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 24074  001896  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24075  001898  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 24076  00189A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24077  00189C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 24078  00189E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24079  0018A0  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 24080                           
 24081                           ; BSR set to: 0
 24082  0018A2  8169               	bsf	___lldiv@quotient& (0+255),0,b
 24083  0018A4                     l17401:
 24084                           
 24085                           ; BSR set to: 0
 24086  0018A4  90D8               	bcf	status,0,c
 24087  0018A6  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 24088  0018A8  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 24089  0018AA  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 24090  0018AC  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 24091                           
 24092                           ; BSR set to: 0
 24093  0018AE  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 24094  0018B0  D7E2               	goto	l17393
 24095  0018B2                     l2428:
 24096                           
 24097                           ; BSR set to: 0
 24098  0018B2  C069  F060         	movff	___lldiv@quotient,?___lldiv
 24099  0018B6  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24100  0018BA  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24101  0018BE  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24102                           
 24103                           ; BSR set to: 0
 24104  0018C2  0012               	return	
 24105  0018C4                     __end_of___lldiv:
 24106                           	opt stack 0
 24107                           tblptru	equ	0xFF8
 24108                           tblptrh	equ	0xFF7
 24109                           tblptrl	equ	0xFF6
 24110                           tablat	equ	0xFF5
 24111                           prodh	equ	0xFF4
 24112                           prodl	equ	0xFF3
 24113                           intcon	equ	0xFF2
 24114                           indf0	equ	0xFEF
 24115                           postinc0	equ	0xFEE
 24116                           fsr0h	equ	0xFEA
 24117                           fsr0l	equ	0xFE9
 24118                           wreg	equ	0xFE8
 24119                           indf1	equ	0xFE7
 24120                           postinc1	equ	0xFE6
 24121                           postdec1	equ	0xFE5
 24122                           fsr1h	equ	0xFE2
 24123                           fsr1l	equ	0xFE1
 24124                           indf2	equ	0xFDF
 24125                           postinc2	equ	0xFDE
 24126                           postdec2	equ	0xFDD
 24127                           plusw2	equ	0xFDB
 24128                           fsr2h	equ	0xFDA
 24129                           fsr2l	equ	0xFD9
 24130                           status	equ	0xFD8
 24131                           
 24132 ;; *************** function _isdigit *****************
 24133 ;; Defined at:
 24134 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24135 ;; Parameters:    Size  Location     Type
 24136 ;;  c               1    wreg     unsigned char 
 24137 ;; Auto vars:     Size  Location     Type
 24138 ;;  c               1    2[BANK0 ] unsigned char 
 24139 ;; Return value:  Size  Location     Type
 24140 ;;		None               void
 24141 ;; Registers used:
 24142 ;;		wreg, status,2, status,0
 24143 ;; Tracked objects:
 24144 ;;		On entry : 0/0
 24145 ;;		On exit  : F/0
 24146 ;;		Unchanged: 0/0
 24147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24148 ;;      Params:         0       0       0       0       0       0       0
 24149 ;;      Locals:         0       2       0       0       0       0       0
 24150 ;;      Temps:          0       1       0       0       0       0       0
 24151 ;;      Totals:         0       3       0       0       0       0       0
 24152 ;;Total ram usage:        3 bytes
 24153 ;; Hardware stack levels used:    1
 24154 ;; Hardware stack levels required when called:    3
 24155 ;; This function calls:
 24156 ;;		Nothing
 24157 ;; This function is called by:
 24158 ;;		_sprintf
 24159 ;;		_atoi
 24160 ;; This function uses a non-reentrant model
 24161 ;;
 24162                           
 24163                           	psect	text58
 24164  000FE2                     __ptext58:
 24165                           	opt stack 0
 24166  000FE2                     _isdigit:
 24167                           	opt stack 24
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;incstack = 0
 24171                           ;incstack = 0
 24172                           ;isdigit@c stored from wreg
 24173  000FE2  CFE8 F062          	movff	wreg,isdigit@c
 24174  000FE6  0100               	movlb	0	; () banked
 24175  000FE8  6B61               	clrf	_isdigit$2985& (0+255),b
 24176                           
 24177                           ; BSR set to: 0
 24178  000FEA  0E3A               	movlw	58
 24179  000FEC  6162               	cpfslt	isdigit@c& (0+255),b
 24180  000FEE  D005               	goto	l13871
 24181                           
 24182                           ; BSR set to: 0
 24183  000FF0  0E2F               	movlw	47
 24184  000FF2  6562               	cpfsgt	isdigit@c& (0+255),b
 24185  000FF4  D002               	goto	l13871
 24186                           
 24187                           ; BSR set to: 0
 24188  000FF6  0E01               	movlw	1
 24189  000FF8  6F61               	movwf	_isdigit$2985& (0+255),b
 24190  000FFA                     l13871:
 24191                           
 24192                           ; BSR set to: 0
 24193  000FFA  C061  F060         	movff	_isdigit$2985,??_isdigit
 24194  000FFE  3160               	rrcf	??_isdigit& (0+255),w,b
 24195                           
 24196                           ; BSR set to: 0
 24197  001000  0012               	return	
 24198  001002                     __end_of_isdigit:
 24199                           	opt stack 0
 24200                           tblptru	equ	0xFF8
 24201                           tblptrh	equ	0xFF7
 24202                           tblptrl	equ	0xFF6
 24203                           tablat	equ	0xFF5
 24204                           prodh	equ	0xFF4
 24205                           prodl	equ	0xFF3
 24206                           intcon	equ	0xFF2
 24207                           indf0	equ	0xFEF
 24208                           postinc0	equ	0xFEE
 24209                           fsr0h	equ	0xFEA
 24210                           fsr0l	equ	0xFE9
 24211                           wreg	equ	0xFE8
 24212                           indf1	equ	0xFE7
 24213                           postinc1	equ	0xFE6
 24214                           postdec1	equ	0xFE5
 24215                           fsr1h	equ	0xFE2
 24216                           fsr1l	equ	0xFE1
 24217                           indf2	equ	0xFDF
 24218                           postinc2	equ	0xFDE
 24219                           postdec2	equ	0xFDD
 24220                           plusw2	equ	0xFDB
 24221                           fsr2h	equ	0xFDA
 24222                           fsr2l	equ	0xFD9
 24223                           status	equ	0xFD8
 24224                           
 24225 ;; *************** function _printFirmwareVersion *****************
 24226 ;; Defined at:
 24227 ;;		line 3013 in file "main.c"
 24228 ;; Parameters:    Size  Location     Type
 24229 ;;		None
 24230 ;; Auto vars:     Size  Location     Type
 24231 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 24232 ;; Return value:  Size  Location     Type
 24233 ;;		None               void
 24234 ;; Registers used:
 24235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24236 ;; Tracked objects:
 24237 ;;		On entry : 0/0
 24238 ;;		On exit  : 0/0
 24239 ;;		Unchanged: 0/0
 24240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24241 ;;      Params:         0       0       0       0       0       0       0
 24242 ;;      Locals:         0      20       0       0       0       0       0
 24243 ;;      Temps:          0       0       0       0       0       0       0
 24244 ;;      Totals:         0      20       0       0       0       0       0
 24245 ;;Total ram usage:       20 bytes
 24246 ;; Hardware stack levels used:    1
 24247 ;; Hardware stack levels required when called:    6
 24248 ;; This function calls:
 24249 ;;		_putsUSART
 24250 ;;		_WriteUSART
 24251 ;;		_itoa
 24252 ;; This function is called by:
 24253 ;;		_main
 24254 ;;		_doModeVerbose
 24255 ;; This function uses a non-reentrant model
 24256 ;;
 24257                           
 24258                           	psect	text59
 24259  001AC4                     __ptext59:
 24260                           	opt stack 0
 24261  001AC4                     _printFirmwareVersion:
 24262                           	opt stack 22
 24263                           
 24264                           ;main.c: 3014: char wrkbuf[20];
 24265                           ;main.c: 3015: putsUSART((char *) "Version: ");
 24266                           
 24267                           ; BSR set to: 0
 24268                           ;incstack = 0
 24269                           ;incstack = 0
 24270  001AC4  0E7B               	movlw	high STR_287
 24271  001AC6  0100               	movlb	0	; () banked
 24272  001AC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24273  001ACA  0E70               	movlw	low STR_287
 24274  001ACC  6F61               	movwf	?_putsUSART& (0+255),b
 24275  001ACE  EC69  F00A         	call	_putsUSART	;wreg free
 24276                           
 24277                           ;main.c: 3016: itoa(wrkbuf, 1, 10);
 24278  001AD2  0100               	movlb	0	; () banked
 24279  001AD4  D835               	call	PL62	;call to abstracted procedure
 24280  001AD6  EC79  F008         	call	_itoa	;wreg free
 24281                           
 24282                           ; BSR set to: 0
 24283                           ;main.c: 3017: putsUSART(wrkbuf);
 24284  001ADA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24285  001ADC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24286  001ADE  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24287  001AE0  6F61               	movwf	?_putsUSART& (0+255),b
 24288  001AE2  EC69  F00A         	call	_putsUSART	;wreg free
 24289  001AE6                     l1290:
 24290  001AE6  A2AC               	btfss	4012,1,c	;volatile
 24291  001AE8  D7FE               	goto	l1290
 24292                           
 24293                           ;main.c: 3019: WriteUSART('.');
 24294  001AEA  0E2E               	movlw	46
 24295  001AEC  ECB1  F007         	call	_WriteUSART
 24296                           
 24297                           ;main.c: 3020: itoa(wrkbuf, 1, 10);
 24298  001AF0  0100               	movlb	0	; () banked
 24299  001AF2  D826               	call	PL62	;call to abstracted procedure
 24300  001AF4  EC79  F008         	call	_itoa	;wreg free
 24301                           
 24302                           ; BSR set to: 0
 24303                           ;main.c: 3021: putsUSART(wrkbuf);
 24304  001AF8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24305  001AFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24306  001AFC  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24307  001AFE  6F61               	movwf	?_putsUSART& (0+255),b
 24308  001B00  EC69  F00A         	call	_putsUSART	;wreg free
 24309  001B04                     l1293:
 24310  001B04  A2AC               	btfss	4012,1,c	;volatile
 24311  001B06  D7FE               	goto	l1293
 24312                           
 24313                           ;main.c: 3023: WriteUSART('.');
 24314  001B08  0E2E               	movlw	46
 24315  001B0A  ECB1  F007         	call	_WriteUSART
 24316                           
 24317                           ;main.c: 3024: itoa(wrkbuf, 0, 10);
 24318  001B0E  0100               	movlb	0	; () banked
 24319  001B10  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24320  001B12  6F71               	movwf	(?_itoa+1)& (0+255),b
 24321  001B14  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24322  001B16  6F70               	movwf	?_itoa& (0+255),b
 24323  001B18  6B73               	clrf	(?_itoa+3)& (0+255),b
 24324  001B1A  6B72               	clrf	(?_itoa+2)& (0+255),b
 24325  001B1C  6B75               	clrf	(?_itoa+5)& (0+255),b
 24326  001B1E  0E0A               	movlw	10
 24327  001B20  6F74               	movwf	(?_itoa+4)& (0+255),b
 24328  001B22  EC79  F008         	call	_itoa	;wreg free
 24329                           
 24330                           ; BSR set to: 0
 24331                           ;main.c: 3025: putsUSART(wrkbuf);
 24332  001B26  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24333  001B28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24334  001B2A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24335  001B2C  6F61               	movwf	?_putsUSART& (0+255),b
 24336  001B2E  EC69  F00A         	call	_putsUSART	;wreg free
 24337                           
 24338                           ;main.c: 3026: putsUSART((char *) "\r\n");
 24339  001B32  0E70               	movlw	high (STR_228+50)
 24340  001B34  0100               	movlb	0	; () banked
 24341  001B36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24342  001B38  0EC4               	movlw	low (STR_228+50)
 24343  001B3A  6F61               	movwf	?_putsUSART& (0+255),b
 24344  001B3C  EF69  F00A         	goto	_putsUSART	;wreg free
 24345  001B40                     __end_of_printFirmwareVersion:
 24346                           	opt stack 0
 24347  001B40                     PL62:
 24348                           	opt stack 22
 24349  001B40  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24350  001B42  6F71               	movwf	(?_itoa+1)& (0+255),b
 24351  001B44  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24352  001B46  6F70               	movwf	?_itoa& (0+255),b
 24353  001B48  6B73               	clrf	(?_itoa+3)& (0+255),b
 24354  001B4A  0E01               	movlw	1
 24355  001B4C  6F72               	movwf	(?_itoa+2)& (0+255),b
 24356  001B4E  6B75               	clrf	(?_itoa+5)& (0+255),b
 24357  001B50  0E0A               	movlw	10
 24358  001B52  6F74               	movwf	(?_itoa+4)& (0+255),b
 24359  001B54  0C0A               	retlw	10
 24360  001B56                     __end_ofPL62:
 24361                           	opt stack 0
 24362                           tblptru	equ	0xFF8
 24363                           tblptrh	equ	0xFF7
 24364                           tblptrl	equ	0xFF6
 24365                           tablat	equ	0xFF5
 24366                           prodh	equ	0xFF4
 24367                           prodl	equ	0xFF3
 24368                           intcon	equ	0xFF2
 24369                           indf0	equ	0xFEF
 24370                           postinc0	equ	0xFEE
 24371                           fsr0h	equ	0xFEA
 24372                           fsr0l	equ	0xFE9
 24373                           wreg	equ	0xFE8
 24374                           indf1	equ	0xFE7
 24375                           postinc1	equ	0xFE6
 24376                           postdec1	equ	0xFE5
 24377                           fsr1h	equ	0xFE2
 24378                           fsr1l	equ	0xFE1
 24379                           indf2	equ	0xFDF
 24380                           postinc2	equ	0xFDE
 24381                           postdec2	equ	0xFDD
 24382                           plusw2	equ	0xFDB
 24383                           fsr2h	equ	0xFDA
 24384                           fsr2l	equ	0xFD9
 24385                           status	equ	0xFD8
 24386                           
 24387 ;; *************** function _itoa *****************
 24388 ;; Defined at:
 24389 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24390 ;; Parameters:    Size  Location     Type
 24391 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24392 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24393 ;;  val             2   18[BANK0 ] int 
 24394 ;;  base            2   20[BANK0 ] int 
 24395 ;; Auto vars:     Size  Location     Type
 24396 ;;  cp              2    0        PTR unsigned char 
 24397 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24398 ;; Return value:  Size  Location     Type
 24399 ;;                  2   16[BANK0 ] PTR unsigned char 
 24400 ;; Registers used:
 24401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24402 ;; Tracked objects:
 24403 ;;		On entry : F/0
 24404 ;;		On exit  : F/0
 24405 ;;		Unchanged: 0/0
 24406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24407 ;;      Params:         0       6       0       0       0       0       0
 24408 ;;      Locals:         0       2       0       0       0       0       0
 24409 ;;      Temps:          0       0       0       0       0       0       0
 24410 ;;      Totals:         0       8       0       0       0       0       0
 24411 ;;Total ram usage:        8 bytes
 24412 ;; Hardware stack levels used:    1
 24413 ;; Hardware stack levels required when called:    5
 24414 ;; This function calls:
 24415 ;;		_utoa
 24416 ;; This function is called by:
 24417 ;;		_receiveSendEventSLCAN
 24418 ;;		_findNodes
 24419 ;;		_printGUID
 24420 ;;		_printNodeFirmwareVersion
 24421 ;;		_printFirmwareVersion
 24422 ;; This function uses a non-reentrant model
 24423 ;;
 24424                           
 24425                           	psect	text60
 24426  0010F2                     __ptext60:
 24427                           	opt stack 0
 24428  0010F2                     _itoa:
 24429                           	opt stack 22
 24430                           
 24431                           ; BSR set to: 0
 24432                           
 24433                           ;incstack = 0
 24434                           ;incstack = 0
 24435  0010F2  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24436  0010F4  D00C               	goto	l17279
 24437                           
 24438                           ; BSR set to: 0
 24439  0010F6  C070  FFD9         	movff	itoa@buf,fsr2l
 24440  0010FA  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24441  0010FE  0E2D               	movlw	45
 24442  001100  6EDF               	movwf	indf2,c
 24443                           
 24444                           ; BSR set to: 0
 24445  001102  4B70               	infsnz	itoa@buf& (0+255),f,b
 24446  001104  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24447                           
 24448                           ; BSR set to: 0
 24449  001106  6D72               	negf	itoa@val& (0+255),b
 24450  001108  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24451  00110A  B0D8               	btfsc	status,0,c
 24452  00110C  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24453  00110E                     l17279:
 24454                           
 24455                           ; BSR set to: 0
 24456  00110E  C070  F067         	movff	itoa@buf,?_utoa
 24457  001112  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24458  001116  C072  F069         	movff	itoa@val,?_utoa+2
 24459  00111A  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24460  00111E  C074  F06B         	movff	itoa@base,?_utoa+4
 24461  001122  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24462  001126  EF8D  F00E         	goto	_utoa	;wreg free
 24463  00112A                     __end_of_itoa:
 24464                           	opt stack 0
 24465                           tblptru	equ	0xFF8
 24466                           tblptrh	equ	0xFF7
 24467                           tblptrl	equ	0xFF6
 24468                           tablat	equ	0xFF5
 24469                           prodh	equ	0xFF4
 24470                           prodl	equ	0xFF3
 24471                           intcon	equ	0xFF2
 24472                           indf0	equ	0xFEF
 24473                           postinc0	equ	0xFEE
 24474                           fsr0h	equ	0xFEA
 24475                           fsr0l	equ	0xFE9
 24476                           wreg	equ	0xFE8
 24477                           indf1	equ	0xFE7
 24478                           postinc1	equ	0xFE6
 24479                           postdec1	equ	0xFE5
 24480                           fsr1h	equ	0xFE2
 24481                           fsr1l	equ	0xFE1
 24482                           indf2	equ	0xFDF
 24483                           postinc2	equ	0xFDE
 24484                           postdec2	equ	0xFDD
 24485                           plusw2	equ	0xFDB
 24486                           fsr2h	equ	0xFDA
 24487                           fsr2l	equ	0xFD9
 24488                           status	equ	0xFD8
 24489                           
 24490 ;; *************** function _utoa *****************
 24491 ;; Defined at:
 24492 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24493 ;; Parameters:    Size  Location     Type
 24494 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24495 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24496 ;;  val             2    9[BANK0 ] unsigned int 
 24497 ;;  base            2   11[BANK0 ] int 
 24498 ;; Auto vars:     Size  Location     Type
 24499 ;;  v               2   13[BANK0 ] unsigned int 
 24500 ;;  c               1   15[BANK0 ] unsigned char 
 24501 ;; Return value:  Size  Location     Type
 24502 ;;                  2    7[BANK0 ] PTR unsigned char 
 24503 ;; Registers used:
 24504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24505 ;; Tracked objects:
 24506 ;;		On entry : F/0
 24507 ;;		On exit  : F/0
 24508 ;;		Unchanged: 0/0
 24509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24510 ;;      Params:         0       6       0       0       0       0       0
 24511 ;;      Locals:         0       3       0       0       0       0       0
 24512 ;;      Temps:          0       0       0       0       0       0       0
 24513 ;;      Totals:         0       9       0       0       0       0       0
 24514 ;;Total ram usage:        9 bytes
 24515 ;; Hardware stack levels used:    1
 24516 ;; Hardware stack levels required when called:    4
 24517 ;; This function calls:
 24518 ;;		___lwdiv
 24519 ;;		___lwmod
 24520 ;; This function is called by:
 24521 ;;		_itoa
 24522 ;; This function uses a non-reentrant model
 24523 ;;
 24524                           
 24525                           	psect	text61
 24526  001D1A                     __ptext61:
 24527                           	opt stack 0
 24528  001D1A                     _utoa:
 24529                           	opt stack 22
 24530                           
 24531                           ; BSR set to: 0
 24532                           
 24533                           ; BSR set to: 0
 24534                           ;incstack = 0
 24535                           ;incstack = 0
 24536  001D1A  C069  F06D         	movff	utoa@val,utoa@v
 24537  001D1E  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24538  001D22                     l17355:
 24539                           
 24540                           ; BSR set to: 0
 24541  001D22  C06D  F060         	movff	utoa@v,?___lwdiv
 24542  001D26  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24543  001D2A  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24544  001D2E  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24545  001D32  ECF4  F009         	call	___lwdiv	;wreg free
 24546  001D36  C060  F06D         	movff	?___lwdiv,utoa@v
 24547  001D3A  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24548                           
 24549                           ; BSR set to: 0
 24550  001D3E  4B67               	infsnz	utoa@buf& (0+255),f,b
 24551  001D40  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24552                           
 24553                           ; BSR set to: 0
 24554  001D42  516E               	movf	(utoa@v+1)& (0+255),w,b
 24555  001D44  116D               	iorwf	utoa@v& (0+255),w,b
 24556  001D46  E1ED               	bnz	l17355
 24557                           
 24558                           ; BSR set to: 0
 24559  001D48  C067  FFD9         	movff	utoa@buf,fsr2l
 24560  001D4C  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24561  001D50  0E00               	movlw	0
 24562  001D52  6ADF               	clrf	indf2,c
 24563                           
 24564                           ; BSR set to: 0
 24565  001D54  0767               	decf	utoa@buf& (0+255),f,b
 24566  001D56  A0D8               	btfss	status,0,c
 24567  001D58  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24568  001D5A                     l17365:
 24569                           
 24570                           ; BSR set to: 0
 24571  001D5A  C069  F060         	movff	utoa@val,?___lwmod
 24572  001D5E  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24573  001D62  C06B  F062         	movff	utoa@base,?___lwmod+2
 24574  001D66  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24575  001D6A  ECCE  F008         	call	___lwmod	;wreg free
 24576  001D6E  5160               	movf	?___lwmod& (0+255),w,b
 24577  001D70  6F6F               	movwf	utoa@c& (0+255),b
 24578                           
 24579                           ; BSR set to: 0
 24580  001D72  C069  F060         	movff	utoa@val,?___lwdiv
 24581  001D76  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24582  001D7A  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24583  001D7E  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24584  001D82  ECF4  F009         	call	___lwdiv	;wreg free
 24585  001D86  C060  F069         	movff	?___lwdiv,utoa@val
 24586  001D8A  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24587                           
 24588                           ; BSR set to: 0
 24589  001D8E  0E09               	movlw	9
 24590  001D90  656F               	cpfsgt	utoa@c& (0+255),b
 24591  001D92  D002               	goto	l2397
 24592                           
 24593                           ; BSR set to: 0
 24594  001D94  0E07               	movlw	7
 24595  001D96  276F               	addwf	utoa@c& (0+255),f,b
 24596  001D98                     l2397:
 24597                           
 24598                           ; BSR set to: 0
 24599  001D98  0E30               	movlw	48
 24600  001D9A  276F               	addwf	utoa@c& (0+255),f,b
 24601                           
 24602                           ; BSR set to: 0
 24603  001D9C  C067  FFD9         	movff	utoa@buf,fsr2l
 24604  001DA0  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24605  001DA4  C06F  FFDF         	movff	utoa@c,indf2
 24606                           
 24607                           ; BSR set to: 0
 24608  001DA8  0767               	decf	utoa@buf& (0+255),f,b
 24609  001DAA  A0D8               	btfss	status,0,c
 24610  001DAC  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24611                           
 24612                           ; BSR set to: 0
 24613  001DAE  516A               	movf	(utoa@val+1)& (0+255),w,b
 24614  001DB0  1169               	iorwf	utoa@val& (0+255),w,b
 24615  001DB2  E1D3               	bnz	l17365
 24616                           
 24617                           ; BSR set to: 0
 24618                           ;	Return value of _utoa is never used
 24619  001DB4  4B67               	infsnz	utoa@buf& (0+255),f,b
 24620  001DB6  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24621                           
 24622                           ; BSR set to: 0
 24623  001DB8  0012               	return	
 24624  001DBA                     __end_of_utoa:
 24625                           	opt stack 0
 24626                           tblptru	equ	0xFF8
 24627                           tblptrh	equ	0xFF7
 24628                           tblptrl	equ	0xFF6
 24629                           tablat	equ	0xFF5
 24630                           prodh	equ	0xFF4
 24631                           prodl	equ	0xFF3
 24632                           intcon	equ	0xFF2
 24633                           indf0	equ	0xFEF
 24634                           postinc0	equ	0xFEE
 24635                           fsr0h	equ	0xFEA
 24636                           fsr0l	equ	0xFE9
 24637                           wreg	equ	0xFE8
 24638                           indf1	equ	0xFE7
 24639                           postinc1	equ	0xFE6
 24640                           postdec1	equ	0xFE5
 24641                           fsr1h	equ	0xFE2
 24642                           fsr1l	equ	0xFE1
 24643                           indf2	equ	0xFDF
 24644                           postinc2	equ	0xFDE
 24645                           postdec2	equ	0xFDD
 24646                           plusw2	equ	0xFDB
 24647                           fsr2h	equ	0xFDA
 24648                           fsr2l	equ	0xFD9
 24649                           status	equ	0xFD8
 24650                           
 24651 ;; *************** function ___lwmod *****************
 24652 ;; Defined at:
 24653 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24654 ;; Parameters:    Size  Location     Type
 24655 ;;  dividend        2    0[BANK0 ] unsigned int 
 24656 ;;  divisor         2    2[BANK0 ] unsigned int 
 24657 ;; Auto vars:     Size  Location     Type
 24658 ;;  counter         1    4[BANK0 ] unsigned char 
 24659 ;; Return value:  Size  Location     Type
 24660 ;;                  2    0[BANK0 ] unsigned int 
 24661 ;; Registers used:
 24662 ;;		wreg, status,2, status,0
 24663 ;; Tracked objects:
 24664 ;;		On entry : F/0
 24665 ;;		On exit  : F/0
 24666 ;;		Unchanged: 0/0
 24667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24668 ;;      Params:         0       4       0       0       0       0       0
 24669 ;;      Locals:         0       1       0       0       0       0       0
 24670 ;;      Temps:          0       0       0       0       0       0       0
 24671 ;;      Totals:         0       5       0       0       0       0       0
 24672 ;;Total ram usage:        5 bytes
 24673 ;; Hardware stack levels used:    1
 24674 ;; Hardware stack levels required when called:    3
 24675 ;; This function calls:
 24676 ;;		Nothing
 24677 ;; This function is called by:
 24678 ;;		_utoa
 24679 ;; This function uses a non-reentrant model
 24680 ;;
 24681                           
 24682                           	psect	text62
 24683  00119C                     __ptext62:
 24684                           	opt stack 0
 24685  00119C                     ___lwmod:
 24686                           	opt stack 22
 24687                           
 24688                           ; BSR set to: 0
 24689                           
 24690                           ; BSR set to: 0
 24691                           ;incstack = 0
 24692                           ;incstack = 0
 24693  00119C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24694  00119E  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24695  0011A0  E017               	bz	l2521
 24696                           
 24697                           ; BSR set to: 0
 24698  0011A2  0E01               	movlw	1
 24699  0011A4  6F64               	movwf	___lwmod@counter& (0+255),b
 24700  0011A6  D004               	goto	l17449
 24701  0011A8                     l17447:
 24702                           
 24703                           ; BSR set to: 0
 24704  0011A8  90D8               	bcf	status,0,c
 24705  0011AA  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24706  0011AC  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24707  0011AE  2B64               	incf	___lwmod@counter& (0+255),f,b
 24708  0011B0                     l17449:
 24709                           
 24710                           ; BSR set to: 0
 24711  0011B0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24712  0011B2  D7FA               	goto	l17447
 24713  0011B4                     l17451:
 24714                           
 24715                           ; BSR set to: 0
 24716  0011B4  5162               	movf	___lwmod@divisor& (0+255),w,b
 24717  0011B6  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24718  0011B8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24719  0011BA  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24720  0011BC  E304               	bnc	l17455
 24721                           
 24722                           ; BSR set to: 0
 24723  0011BE  5162               	movf	___lwmod@divisor& (0+255),w,b
 24724  0011C0  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24725  0011C2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24726  0011C4  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24727  0011C6                     l17455:
 24728                           
 24729                           ; BSR set to: 0
 24730  0011C6  90D8               	bcf	status,0,c
 24731  0011C8  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24732  0011CA  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24733                           
 24734                           ; BSR set to: 0
 24735  0011CC  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24736  0011CE  D7F2               	goto	l17451
 24737  0011D0                     l2521:
 24738                           
 24739                           ; BSR set to: 0
 24740  0011D0  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24741  0011D4  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24742                           
 24743                           ; BSR set to: 0
 24744  0011D8  0012               	return	
 24745  0011DA                     __end_of___lwmod:
 24746                           	opt stack 0
 24747                           tblptru	equ	0xFF8
 24748                           tblptrh	equ	0xFF7
 24749                           tblptrl	equ	0xFF6
 24750                           tablat	equ	0xFF5
 24751                           prodh	equ	0xFF4
 24752                           prodl	equ	0xFF3
 24753                           intcon	equ	0xFF2
 24754                           indf0	equ	0xFEF
 24755                           postinc0	equ	0xFEE
 24756                           fsr0h	equ	0xFEA
 24757                           fsr0l	equ	0xFE9
 24758                           wreg	equ	0xFE8
 24759                           indf1	equ	0xFE7
 24760                           postinc1	equ	0xFE6
 24761                           postdec1	equ	0xFE5
 24762                           fsr1h	equ	0xFE2
 24763                           fsr1l	equ	0xFE1
 24764                           indf2	equ	0xFDF
 24765                           postinc2	equ	0xFDE
 24766                           postdec2	equ	0xFDD
 24767                           plusw2	equ	0xFDB
 24768                           fsr2h	equ	0xFDA
 24769                           fsr2l	equ	0xFD9
 24770                           status	equ	0xFD8
 24771                           
 24772 ;; *************** function ___lwdiv *****************
 24773 ;; Defined at:
 24774 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24775 ;; Parameters:    Size  Location     Type
 24776 ;;  dividend        2    0[BANK0 ] unsigned int 
 24777 ;;  divisor         2    2[BANK0 ] unsigned int 
 24778 ;; Auto vars:     Size  Location     Type
 24779 ;;  quotient        2    5[BANK0 ] unsigned int 
 24780 ;;  counter         1    4[BANK0 ] unsigned char 
 24781 ;; Return value:  Size  Location     Type
 24782 ;;                  2    0[BANK0 ] unsigned int 
 24783 ;; Registers used:
 24784 ;;		wreg, status,2, status,0
 24785 ;; Tracked objects:
 24786 ;;		On entry : F/0
 24787 ;;		On exit  : F/0
 24788 ;;		Unchanged: 0/0
 24789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24790 ;;      Params:         0       4       0       0       0       0       0
 24791 ;;      Locals:         0       3       0       0       0       0       0
 24792 ;;      Temps:          0       0       0       0       0       0       0
 24793 ;;      Totals:         0       7       0       0       0       0       0
 24794 ;;Total ram usage:        7 bytes
 24795 ;; Hardware stack levels used:    1
 24796 ;; Hardware stack levels required when called:    3
 24797 ;; This function calls:
 24798 ;;		Nothing
 24799 ;; This function is called by:
 24800 ;;		_utoa
 24801 ;; This function uses a non-reentrant model
 24802 ;;
 24803                           
 24804                           	psect	text63
 24805  0013E8                     __ptext63:
 24806                           	opt stack 0
 24807  0013E8                     ___lwdiv:
 24808                           	opt stack 22
 24809                           
 24810                           ; BSR set to: 0
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;incstack = 0
 24814                           ;incstack = 0
 24815  0013E8  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24816  0013EA  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24817                           
 24818                           ; BSR set to: 0
 24819  0013EC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24820  0013EE  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24821  0013F0  E01B               	bz	l2511
 24822                           
 24823                           ; BSR set to: 0
 24824  0013F2  0E01               	movlw	1
 24825  0013F4  6F64               	movwf	___lwdiv@counter& (0+255),b
 24826  0013F6  D004               	goto	l17429
 24827  0013F8                     l17427:
 24828                           
 24829                           ; BSR set to: 0
 24830  0013F8  90D8               	bcf	status,0,c
 24831  0013FA  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24832  0013FC  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24833  0013FE  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24834  001400                     l17429:
 24835                           
 24836                           ; BSR set to: 0
 24837  001400  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24838  001402  D7FA               	goto	l17427
 24839  001404                     l17431:
 24840                           
 24841                           ; BSR set to: 0
 24842  001404  90D8               	bcf	status,0,c
 24843  001406  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24844  001408  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24845                           
 24846                           ; BSR set to: 0
 24847  00140A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24848  00140C  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24849  00140E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24850  001410  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24851  001412  E305               	bnc	l17439
 24852                           
 24853                           ; BSR set to: 0
 24854  001414  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24855  001416  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24856  001418  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24857  00141A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24858                           
 24859                           ; BSR set to: 0
 24860  00141C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24861  00141E                     l17439:
 24862                           
 24863                           ; BSR set to: 0
 24864  00141E  90D8               	bcf	status,0,c
 24865  001420  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24866  001422  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24867                           
 24868                           ; BSR set to: 0
 24869  001424  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24870  001426  D7EE               	goto	l17431
 24871  001428                     l2511:
 24872                           
 24873                           ; BSR set to: 0
 24874  001428  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24875  00142C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24876                           
 24877                           ; BSR set to: 0
 24878  001430  0012               	return	
 24879  001432                     __end_of___lwdiv:
 24880                           	opt stack 0
 24881                           tblptru	equ	0xFF8
 24882                           tblptrh	equ	0xFF7
 24883                           tblptrl	equ	0xFF6
 24884                           tablat	equ	0xFF5
 24885                           prodh	equ	0xFF4
 24886                           prodl	equ	0xFF3
 24887                           intcon	equ	0xFF2
 24888                           indf0	equ	0xFEF
 24889                           postinc0	equ	0xFEE
 24890                           fsr0h	equ	0xFEA
 24891                           fsr0l	equ	0xFE9
 24892                           wreg	equ	0xFE8
 24893                           indf1	equ	0xFE7
 24894                           postinc1	equ	0xFE6
 24895                           postdec1	equ	0xFE5
 24896                           fsr1h	equ	0xFE2
 24897                           fsr1l	equ	0xFE1
 24898                           indf2	equ	0xFDF
 24899                           postinc2	equ	0xFDE
 24900                           postdec2	equ	0xFDD
 24901                           plusw2	equ	0xFDB
 24902                           fsr2h	equ	0xFDA
 24903                           fsr2l	equ	0xFD9
 24904                           status	equ	0xFD8
 24905                           
 24906 ;; *************** function _vscp_restoreDefaults *****************
 24907 ;; Defined at:
 24908 ;;		line 3003 in file "main.c"
 24909 ;; Parameters:    Size  Location     Type
 24910 ;;		None
 24911 ;; Auto vars:     Size  Location     Type
 24912 ;;		None
 24913 ;; Return value:  Size  Location     Type
 24914 ;;		None               void
 24915 ;; Registers used:
 24916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24917 ;; Tracked objects:
 24918 ;;		On entry : 0/1
 24919 ;;		On exit  : F/0
 24920 ;;		Unchanged: 0/0
 24921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24922 ;;      Params:         0       0       0       0       0       0       0
 24923 ;;      Locals:         0       0       0       0       0       0       0
 24924 ;;      Temps:          0       0       0       0       0       0       0
 24925 ;;      Totals:         0       0       0       0       0       0       0
 24926 ;;Total ram usage:        0 bytes
 24927 ;; Hardware stack levels used:    1
 24928 ;; Hardware stack levels required when called:    5
 24929 ;; This function calls:
 24930 ;;		_init_app_ram
 24931 ;;		_init_app_eeprom
 24932 ;; This function is called by:
 24933 ;;		_main
 24934 ;;		_doModeVerbose
 24935 ;; This function uses a non-reentrant model
 24936 ;;
 24937                           
 24938                           	psect	text64
 24939  000F24                     __ptext64:
 24940                           	opt stack 0
 24941  000F24                     _vscp_restoreDefaults:
 24942                           	opt stack 23
 24943                           
 24944                           ;main.c: 3004: init_app_eeprom();
 24945                           
 24946                           ; BSR set to: 0
 24947                           ;incstack = 0
 24948                           ;incstack = 0
 24949  000F24  ECFF  F011         	call	_init_app_eeprom	;wreg free
 24950                           
 24951                           ;main.c: 3005: init_app_ram();
 24952  000F28  EFD5  F01D         	goto	_init_app_ram	;wreg free
 24953  000F2C                     __end_of_vscp_restoreDefaults:
 24954                           	opt stack 0
 24955                           tblptru	equ	0xFF8
 24956                           tblptrh	equ	0xFF7
 24957                           tblptrl	equ	0xFF6
 24958                           tablat	equ	0xFF5
 24959                           prodh	equ	0xFF4
 24960                           prodl	equ	0xFF3
 24961                           intcon	equ	0xFF2
 24962                           indf0	equ	0xFEF
 24963                           postinc0	equ	0xFEE
 24964                           fsr0h	equ	0xFEA
 24965                           fsr0l	equ	0xFE9
 24966                           wreg	equ	0xFE8
 24967                           indf1	equ	0xFE7
 24968                           postinc1	equ	0xFE6
 24969                           postdec1	equ	0xFE5
 24970                           fsr1h	equ	0xFE2
 24971                           fsr1l	equ	0xFE1
 24972                           indf2	equ	0xFDF
 24973                           postinc2	equ	0xFDE
 24974                           postdec2	equ	0xFDD
 24975                           plusw2	equ	0xFDB
 24976                           fsr2h	equ	0xFDA
 24977                           fsr2l	equ	0xFD9
 24978                           status	equ	0xFD8
 24979                           
 24980 ;; *************** function _init_app_eeprom *****************
 24981 ;; Defined at:
 24982 ;;		line 555 in file "main.c"
 24983 ;; Parameters:    Size  Location     Type
 24984 ;;		None
 24985 ;; Auto vars:     Size  Location     Type
 24986 ;;  i               1    4[BANK0 ] unsigned char 
 24987 ;; Return value:  Size  Location     Type
 24988 ;;		None               void
 24989 ;; Registers used:
 24990 ;;		wreg, status,2, status,0, cstack
 24991 ;; Tracked objects:
 24992 ;;		On entry : 0/1
 24993 ;;		On exit  : 0/0
 24994 ;;		Unchanged: 0/0
 24995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24996 ;;      Params:         0       0       0       0       0       0       0
 24997 ;;      Locals:         0       1       0       0       0       0       0
 24998 ;;      Temps:          0       0       0       0       0       0       0
 24999 ;;      Totals:         0       1       0       0       0       0       0
 25000 ;;Total ram usage:        1 bytes
 25001 ;; Hardware stack levels used:    1
 25002 ;; Hardware stack levels required when called:    4
 25003 ;; This function calls:
 25004 ;;		_Busy_eep
 25005 ;;		_Write_b_eep
 25006 ;; This function is called by:
 25007 ;;		_vscp_restoreDefaults
 25008 ;; This function uses a non-reentrant model
 25009 ;;
 25010                           
 25011                           	psect	text65
 25012  0023FE                     __ptext65:
 25013                           	opt stack 0
 25014  0023FE                     _init_app_eeprom:
 25015                           	opt stack 23
 25016                           
 25017                           ;main.c: 556: uint8_t i;
 25018                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x01,0x55));
 25019                           
 25020                           ; BSR set to: 0
 25021                           ;incstack = 0
 25022                           ;incstack = 0
 25023  0023FE  EC8F  F007         	call	_Busy_eep	;wreg free
 25024  002402  0100               	movlb	0	; () banked
 25025  002404  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25026  002406  0E01               	movlw	1
 25027  002408  6F60               	movwf	?_Write_b_eep& (0+255),b
 25028  00240A  0E55               	movlw	85
 25029  00240C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25030  00240E  EC5F  F008         	call	_Write_b_eep	;wreg free
 25031                           
 25032                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x02,0xAA));
 25033  002412  EC8F  F007         	call	_Busy_eep	;wreg free
 25034  002416  0100               	movlb	0	; () banked
 25035  002418  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25036  00241A  0E02               	movlw	2
 25037  00241C  6F60               	movwf	?_Write_b_eep& (0+255),b
 25038  00241E  0EAA               	movlw	170
 25039  002420  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25040  002422  EC5F  F008         	call	_Write_b_eep	;wreg free
 25041                           
 25042                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x03,0));
 25043  002426  EC8F  F007         	call	_Busy_eep	;wreg free
 25044  00242A  0100               	movlb	0	; () banked
 25045  00242C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25046  00242E  0E03               	movlw	3
 25047  002430  6F60               	movwf	?_Write_b_eep& (0+255),b
 25048  002432  0E00               	movlw	0
 25049  002434  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25050  002436  EC5F  F008         	call	_Write_b_eep	;wreg free
 25051                           
 25052                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x05,0));
 25053  00243A  EC8F  F007         	call	_Busy_eep	;wreg free
 25054  00243E  0100               	movlb	0	; () banked
 25055  002440  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25056  002442  0E05               	movlw	5
 25057  002444  6F60               	movwf	?_Write_b_eep& (0+255),b
 25058  002446  0E00               	movlw	0
 25059  002448  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25060  00244A  EC5F  F008         	call	_Write_b_eep	;wreg free
 25061                           
 25062                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x06,0));
 25063  00244E  EC8F  F007         	call	_Busy_eep	;wreg free
 25064  002452  0100               	movlb	0	; () banked
 25065  002454  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25066  002456  0E06               	movlw	6
 25067  002458  6F60               	movwf	?_Write_b_eep& (0+255),b
 25068  00245A  0E00               	movlw	0
 25069  00245C  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25070  00245E  EC5F  F008         	call	_Write_b_eep	;wreg free
 25071                           
 25072                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x09,20u));
 25073  002462  EC8F  F007         	call	_Busy_eep	;wreg free
 25074  002466  0100               	movlb	0	; () banked
 25075  002468  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25076  00246A  0E09               	movlw	9
 25077  00246C  6F60               	movwf	?_Write_b_eep& (0+255),b
 25078  00246E  0E14               	movlw	20
 25079  002470  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25080  002472  EC5F  F008         	call	_Write_b_eep	;wreg free
 25081                           
 25082                           ;main.c: 566: for (i = 0x20; i < (0x5C + 4); i++) {
 25083  002476  0E20               	movlw	32
 25084  002478  0100               	movlb	0	; () banked
 25085  00247A  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25086  00247C                     l15739:
 25087                           
 25088                           ; BSR set to: 0
 25089                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x20,0xFF));
 25090  00247C  EC8F  F007         	call	_Busy_eep	;wreg free
 25091  002480  0100               	movlb	0	; () banked
 25092  002482  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25093  002484  0E20               	movlw	32
 25094  002486  6F60               	movwf	?_Write_b_eep& (0+255),b
 25095  002488  0EFF               	movlw	255
 25096  00248A  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 25097  00248C  EC5F  F008         	call	_Write_b_eep	;wreg free
 25098  002490  0100               	movlb	0	; () banked
 25099  002492  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25100                           
 25101                           ; BSR set to: 0
 25102  002494  0E5F               	movlw	95
 25103  002496  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25104  002498  D7F1               	goto	l15739
 25105                           
 25106                           ; BSR set to: 0
 25107                           ;main.c: 568: }
 25108                           ;main.c: 571: for (i = 0x60; i < (0x64 + 4); i++) {
 25109  00249A  0E60               	movlw	96
 25110  00249C  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25111  00249E                     l15753:
 25112                           
 25113                           ; BSR set to: 0
 25114                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x60,0x00));
 25115  00249E  EC8F  F007         	call	_Busy_eep	;wreg free
 25116  0024A2  0100               	movlb	0	; () banked
 25117  0024A4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25118  0024A6  0E60               	movlw	96
 25119  0024A8  6F60               	movwf	?_Write_b_eep& (0+255),b
 25120  0024AA  0E00               	movlw	0
 25121  0024AC  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25122  0024AE  EC5F  F008         	call	_Write_b_eep	;wreg free
 25123  0024B2  0100               	movlb	0	; () banked
 25124  0024B4  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25125                           
 25126                           ; BSR set to: 0
 25127  0024B6  0E67               	movlw	103
 25128  0024B8  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25129  0024BA  D7F1               	goto	l15753
 25130                           
 25131                           ; BSR set to: 0
 25132                           ;main.c: 573: }
 25133                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x65,0));
 25134  0024BC  EC8F  F007         	call	_Busy_eep	;wreg free
 25135  0024C0  0100               	movlb	0	; () banked
 25136  0024C2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25137  0024C4  0E65               	movlw	101
 25138  0024C6  6F60               	movwf	?_Write_b_eep& (0+255),b
 25139  0024C8  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25140  0024CA  EF5F  F008         	goto	_Write_b_eep	;wreg free
 25141  0024CE                     __end_of_init_app_eeprom:
 25142                           	opt stack 0
 25143                           tblptru	equ	0xFF8
 25144                           tblptrh	equ	0xFF7
 25145                           tblptrl	equ	0xFF6
 25146                           tablat	equ	0xFF5
 25147                           prodh	equ	0xFF4
 25148                           prodl	equ	0xFF3
 25149                           intcon	equ	0xFF2
 25150                           indf0	equ	0xFEF
 25151                           postinc0	equ	0xFEE
 25152                           fsr0h	equ	0xFEA
 25153                           fsr0l	equ	0xFE9
 25154                           wreg	equ	0xFE8
 25155                           indf1	equ	0xFE7
 25156                           postinc1	equ	0xFE6
 25157                           postdec1	equ	0xFE5
 25158                           fsr1h	equ	0xFE2
 25159                           fsr1l	equ	0xFE1
 25160                           indf2	equ	0xFDF
 25161                           postinc2	equ	0xFDE
 25162                           postdec2	equ	0xFDD
 25163                           plusw2	equ	0xFDB
 25164                           fsr2h	equ	0xFDA
 25165                           fsr2l	equ	0xFD9
 25166                           status	equ	0xFD8
 25167                           
 25168 ;; *************** function _Write_b_eep *****************
 25169 ;; Defined at:
 25170 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 25171 ;; Parameters:    Size  Location     Type
 25172 ;;  badd            2    0[BANK0 ] unsigned int 
 25173 ;;  bdat            1    2[BANK0 ] unsigned char 
 25174 ;; Auto vars:     Size  Location     Type
 25175 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 25176 ;; Return value:  Size  Location     Type
 25177 ;;		None               void
 25178 ;; Registers used:
 25179 ;;		wreg, status,2
 25180 ;; Tracked objects:
 25181 ;;		On entry : F/0
 25182 ;;		On exit  : 0/0
 25183 ;;		Unchanged: 0/0
 25184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25185 ;;      Params:         0       3       0       0       0       0       0
 25186 ;;      Locals:         0       1       0       0       0       0       0
 25187 ;;      Temps:          0       0       0       0       0       0       0
 25188 ;;      Totals:         0       4       0       0       0       0       0
 25189 ;;Total ram usage:        4 bytes
 25190 ;; Hardware stack levels used:    1
 25191 ;; Hardware stack levels required when called:    3
 25192 ;; This function calls:
 25193 ;;		Nothing
 25194 ;; This function is called by:
 25195 ;;		_init_app_eeprom
 25196 ;;		_doModeVerbose
 25197 ;;		_doModeSLCAN
 25198 ;; This function uses a non-reentrant model
 25199 ;;
 25200                           
 25201                           	psect	text66
 25202  0010BE                     __ptext66:
 25203                           	opt stack 0
 25204  0010BE                     _Write_b_eep:
 25205                           	opt stack 25
 25206                           
 25207                           ; BSR set to: 0
 25208                           
 25209                           ;incstack = 0
 25210                           ;incstack = 0
 25211  0010BE  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 25212  0010C2  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 25213  0010C6  9EA6               	bcf	4006,7,c	;volatile
 25214  0010C8  9CA6               	bcf	4006,6,c	;volatile
 25215  0010CA  84A6               	bsf	4006,2,c	;volatile
 25216                           
 25217                           ; BSR set to: 0
 25218  0010CC  0E00               	movlw	0
 25219  0010CE  BEF2               	btfsc	intcon,7,c	;volatile
 25220  0010D0  0E01               	movlw	1
 25221  0010D2  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 25222                           
 25223                           ; BSR set to: 0
 25224  0010D4  9EF2               	bcf	intcon,7,c	;volatile
 25225                           
 25226                           ; BSR set to: 0
 25227  0010D6  0E55               	movlw	85
 25228  0010D8  6EA7               	movwf	4007,c	;volatile
 25229                           
 25230                           ; BSR set to: 0
 25231  0010DA  0EAA               	movlw	170
 25232  0010DC  6EA7               	movwf	4007,c	;volatile
 25233                           
 25234                           ; BSR set to: 0
 25235  0010DE  82A6               	bsf	4006,1,c	;volatile
 25236  0010E0                     l1847:
 25237                           
 25238                           ; BSR set to: 0
 25239  0010E0  B2A6               	btfsc	4006,1,c	;volatile
 25240  0010E2  D7FE               	goto	l1847
 25241                           
 25242                           ; BSR set to: 0
 25243  0010E4  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 25244  0010E6  D002               	bra	u20725
 25245  0010E8  9EF2               	bcf	intcon,7,c	;volatile
 25246  0010EA  D001               	bra	u20726
 25247  0010EC                     u20725:
 25248  0010EC  8EF2               	bsf	intcon,7,c	;volatile
 25249  0010EE                     u20726:
 25250  0010EE  94A6               	bcf	4006,2,c	;volatile
 25251  0010F0  0012               	return	
 25252  0010F2                     __end_of_Write_b_eep:
 25253                           	opt stack 0
 25254                           tblptru	equ	0xFF8
 25255                           tblptrh	equ	0xFF7
 25256                           tblptrl	equ	0xFF6
 25257                           tablat	equ	0xFF5
 25258                           prodh	equ	0xFF4
 25259                           prodl	equ	0xFF3
 25260                           intcon	equ	0xFF2
 25261                           indf0	equ	0xFEF
 25262                           postinc0	equ	0xFEE
 25263                           fsr0h	equ	0xFEA
 25264                           fsr0l	equ	0xFE9
 25265                           wreg	equ	0xFE8
 25266                           indf1	equ	0xFE7
 25267                           postinc1	equ	0xFE6
 25268                           postdec1	equ	0xFE5
 25269                           fsr1h	equ	0xFE2
 25270                           fsr1l	equ	0xFE1
 25271                           indf2	equ	0xFDF
 25272                           postinc2	equ	0xFDE
 25273                           postdec2	equ	0xFDD
 25274                           plusw2	equ	0xFDB
 25275                           fsr2h	equ	0xFDA
 25276                           fsr2l	equ	0xFD9
 25277                           status	equ	0xFD8
 25278                           
 25279 ;; *************** function _Busy_eep *****************
 25280 ;; Defined at:
 25281 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 25282 ;; Parameters:    Size  Location     Type
 25283 ;;		None
 25284 ;; Auto vars:     Size  Location     Type
 25285 ;;		None
 25286 ;; Return value:  Size  Location     Type
 25287 ;;		None               void
 25288 ;; Registers used:
 25289 ;;		None
 25290 ;; Tracked objects:
 25291 ;;		On entry : 0/1
 25292 ;;		On exit  : 0/0
 25293 ;;		Unchanged: 0/0
 25294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25295 ;;      Params:         0       0       0       0       0       0       0
 25296 ;;      Locals:         0       0       0       0       0       0       0
 25297 ;;      Temps:          0       0       0       0       0       0       0
 25298 ;;      Totals:         0       0       0       0       0       0       0
 25299 ;;Total ram usage:        0 bytes
 25300 ;; Hardware stack levels used:    1
 25301 ;; Hardware stack levels required when called:    3
 25302 ;; This function calls:
 25303 ;;		Nothing
 25304 ;; This function is called by:
 25305 ;;		_init_app_eeprom
 25306 ;;		_doModeVerbose
 25307 ;;		_doModeSLCAN
 25308 ;; This function uses a non-reentrant model
 25309 ;;
 25310                           
 25311                           	psect	text67
 25312  000F1E                     __ptext67:
 25313                           	opt stack 0
 25314  000F1E                     _Busy_eep:
 25315                           	opt stack 25
 25316  000F1E                     l1822:
 25317  000F1E  A2A6               	btfss	4006,1,c	;volatile
 25318  000F20  0012               	return	
 25319  000F22  D7FD               	goto	l1822
 25320  000F24                     __end_of_Busy_eep:
 25321                           	opt stack 0
 25322                           tblptru	equ	0xFF8
 25323                           tblptrh	equ	0xFF7
 25324                           tblptrl	equ	0xFF6
 25325                           tablat	equ	0xFF5
 25326                           prodh	equ	0xFF4
 25327                           prodl	equ	0xFF3
 25328                           intcon	equ	0xFF2
 25329                           indf0	equ	0xFEF
 25330                           postinc0	equ	0xFEE
 25331                           fsr0h	equ	0xFEA
 25332                           fsr0l	equ	0xFE9
 25333                           wreg	equ	0xFE8
 25334                           indf1	equ	0xFE7
 25335                           postinc1	equ	0xFE6
 25336                           postdec1	equ	0xFE5
 25337                           fsr1h	equ	0xFE2
 25338                           fsr1l	equ	0xFE1
 25339                           indf2	equ	0xFDF
 25340                           postinc2	equ	0xFDE
 25341                           postdec2	equ	0xFDD
 25342                           plusw2	equ	0xFDB
 25343                           fsr2h	equ	0xFDA
 25344                           fsr2l	equ	0xFD9
 25345                           status	equ	0xFD8
 25346                           
 25347 ;; *************** function _printMode *****************
 25348 ;; Defined at:
 25349 ;;		line 3034 in file "main.c"
 25350 ;; Parameters:    Size  Location     Type
 25351 ;;		None
 25352 ;; Auto vars:     Size  Location     Type
 25353 ;;		None
 25354 ;; Return value:  Size  Location     Type
 25355 ;;		None               void
 25356 ;; Registers used:
 25357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25358 ;; Tracked objects:
 25359 ;;		On entry : 0/0
 25360 ;;		On exit  : 0/0
 25361 ;;		Unchanged: 0/0
 25362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25363 ;;      Params:         0       0       0       0       0       0       0
 25364 ;;      Locals:         0       0       0       0       0       0       0
 25365 ;;      Temps:          0       0       0       0       0       0       0
 25366 ;;      Totals:         0       0       0       0       0       0       0
 25367 ;;Total ram usage:        0 bytes
 25368 ;; Hardware stack levels used:    1
 25369 ;; Hardware stack levels required when called:    5
 25370 ;; This function calls:
 25371 ;;		_putsUSART
 25372 ;; This function is called by:
 25373 ;;		_main
 25374 ;; This function uses a non-reentrant model
 25375 ;;
 25376                           
 25377                           	psect	text68
 25378  0019BC                     __ptext68:
 25379                           	opt stack 0
 25380  0019BC                     _printMode:
 25381                           	opt stack 24
 25382                           
 25383                           ;main.c: 3035: putsUSART((char *) "Mode: ");
 25384                           
 25385                           ;incstack = 0
 25386                           ;incstack = 0
 25387  0019BC  0E7C               	movlw	high STR_289
 25388  0019BE  0100               	movlb	0	; () banked
 25389  0019C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25390  0019C2  0E0A               	movlw	low STR_289
 25391  0019C4  6F61               	movwf	?_putsUSART& (0+255),b
 25392  0019C6  EC69  F00A         	call	_putsUSART	;wreg free
 25393                           
 25394                           ;main.c: 3036: if (0 == mode) {
 25395  0019CA  0101               	movlb	1	; () banked
 25396  0019CC  672C               	tstfsz	_mode& (0+255),b
 25397  0019CE  D008               	goto	l14375
 25398                           
 25399                           ; BSR set to: 1
 25400                           ;main.c: 3037: putsUSART((char *) "Verbose");
 25401  0019D0  0E7C               	movlw	high STR_290
 25402  0019D2  0100               	movlb	0	; () banked
 25403  0019D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25404  0019D6  0E02               	movlw	low STR_290
 25405  0019D8  6F61               	movwf	?_putsUSART& (0+255),b
 25406  0019DA  EC69  F00A         	call	_putsUSART	;wreg free
 25407                           
 25408                           ;main.c: 3038: } else if (1 == mode) {
 25409  0019DE  D027               	goto	l1300
 25410  0019E0                     l14375:
 25411                           
 25412                           ; BSR set to: 1
 25413  0019E0  052C               	decf	_mode& (0+255),w,b
 25414  0019E2  E108               	bnz	l14379
 25415                           
 25416                           ; BSR set to: 1
 25417                           ;main.c: 3039: putsUSART((char *) "VSCP Driver");
 25418  0019E4  0E7B               	movlw	high STR_291
 25419  0019E6  0100               	movlb	0	; () banked
 25420  0019E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25421  0019EA  0E44               	movlw	low STR_291
 25422  0019EC  6F61               	movwf	?_putsUSART& (0+255),b
 25423  0019EE  EC69  F00A         	call	_putsUSART	;wreg free
 25424                           
 25425                           ;main.c: 3040: } else if (2 == mode) {
 25426  0019F2  D01D               	goto	l1300
 25427  0019F4                     l14379:
 25428                           
 25429                           ; BSR set to: 1
 25430  0019F4  512C               	movf	_mode& (0+255),w,b
 25431  0019F6  0A02               	xorlw	2
 25432  0019F8  E108               	bnz	l14383
 25433                           
 25434                           ; BSR set to: 1
 25435                           ;main.c: 3041: putsUSART((char *) "SL Driver");
 25436  0019FA  0E7B               	movlw	high STR_292
 25437  0019FC  0100               	movlb	0	; () banked
 25438  0019FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25439  001A00  0E84               	movlw	low STR_292
 25440  001A02  6F61               	movwf	?_putsUSART& (0+255),b
 25441  001A04  EC69  F00A         	call	_putsUSART	;wreg free
 25442                           
 25443                           ;main.c: 3042: } else if (3 == mode) {
 25444  001A08  D012               	goto	l1300
 25445  001A0A                     l14383:
 25446                           
 25447                           ; BSR set to: 1
 25448  001A0A  512C               	movf	_mode& (0+255),w,b
 25449  001A0C  0A03               	xorlw	3
 25450  001A0E  E108               	bnz	l14387
 25451                           
 25452                           ; BSR set to: 1
 25453                           ;main.c: 3043: putsUSART((char *) "VSCP Node");
 25454  001A10  0E7B               	movlw	high STR_293
 25455  001A12  0100               	movlb	0	; () banked
 25456  001A14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25457  001A16  0E7A               	movlw	low STR_293
 25458  001A18  6F61               	movwf	?_putsUSART& (0+255),b
 25459  001A1A  EC69  F00A         	call	_putsUSART	;wreg free
 25460                           
 25461                           ;main.c: 3044: } else {
 25462  001A1E  D007               	goto	l1300
 25463  001A20                     l14387:
 25464                           
 25465                           ; BSR set to: 1
 25466                           ;main.c: 3045: putsUSART((char *) "Unknown (Verbose used)");
 25467  001A20  0E79               	movlw	high STR_294
 25468  001A22  0100               	movlb	0	; () banked
 25469  001A24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25470  001A26  0E81               	movlw	low STR_294
 25471  001A28  6F61               	movwf	?_putsUSART& (0+255),b
 25472  001A2A  EC69  F00A         	call	_putsUSART	;wreg free
 25473  001A2E                     l1300:
 25474                           
 25475                           ;main.c: 3046: }
 25476                           ;main.c: 3047: putsUSART((char *) "\r\n");
 25477  001A2E  0E70               	movlw	high (STR_228+50)
 25478  001A30  0100               	movlb	0	; () banked
 25479  001A32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25480  001A34  0EC4               	movlw	low (STR_228+50)
 25481  001A36  6F61               	movwf	?_putsUSART& (0+255),b
 25482  001A38  EF69  F00A         	goto	_putsUSART	;wreg free
 25483  001A3C                     __end_of_printMode:
 25484                           	opt stack 0
 25485                           tblptru	equ	0xFF8
 25486                           tblptrh	equ	0xFF7
 25487                           tblptrl	equ	0xFF6
 25488                           tablat	equ	0xFF5
 25489                           prodh	equ	0xFF4
 25490                           prodl	equ	0xFF3
 25491                           intcon	equ	0xFF2
 25492                           indf0	equ	0xFEF
 25493                           postinc0	equ	0xFEE
 25494                           fsr0h	equ	0xFEA
 25495                           fsr0l	equ	0xFE9
 25496                           wreg	equ	0xFE8
 25497                           indf1	equ	0xFE7
 25498                           postinc1	equ	0xFE6
 25499                           postdec1	equ	0xFE5
 25500                           fsr1h	equ	0xFE2
 25501                           fsr1l	equ	0xFE1
 25502                           indf2	equ	0xFDF
 25503                           postinc2	equ	0xFDE
 25504                           postdec2	equ	0xFDD
 25505                           plusw2	equ	0xFDB
 25506                           fsr2h	equ	0xFDA
 25507                           fsr2l	equ	0xFD9
 25508                           status	equ	0xFD8
 25509                           
 25510 ;; *************** function _putsUSART *****************
 25511 ;; Defined at:
 25512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25513 ;; Parameters:    Size  Location     Type
 25514 ;;  data            2    1[BANK0 ] PTR unsigned char 
 25515 ;;		 -> STR_295(3), STR_294(23), STR_293(10), STR_292(10), 
 25516 ;;		 -> STR_291(12), STR_290(8), STR_289(7), STR_288(3), 
 25517 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_287(10), STR_286(3), STR_283(20), 
 25518 ;;		 -> STR_282(3), STR_281(14), STR_280(3), STR_276(8), 
 25519 ;;		 -> STR_275(17), STR_274(3), STR_273(67), STR_272(3), 
 25520 ;;		 -> STR_271(29), STR_270(67), STR_269(52), STR_268(39), 
 25521 ;;		 -> STR_267(62), STR_266(55), STR_265(49), STR_264(67), 
 25522 ;;		 -> STR_263(47), STR_262(47), STR_261(34), STR_260(71), 
 25523 ;;		 -> STR_259(20), STR_258(78), STR_257(24), STR_256(77), 
 25524 ;;		 -> STR_255(74), STR_254(76), STR_253(47), STR_252(40), 
 25525 ;;		 -> STR_251(39), STR_250(33), STR_249(23), STR_248(56), 
 25526 ;;		 -> STR_247(24), STR_246(44), STR_245(50), STR_244(31), 
 25527 ;;		 -> STR_243(50), STR_242(51), STR_241(46), STR_240(44), 
 25528 ;;		 -> STR_239(27), STR_238(39), STR_237(39), STR_236(52), 
 25529 ;;		 -> STR_235(54), STR_234(55), STR_233(3), STR_230(24), 
 25530 ;;		 -> STR_229(57), STR_228(53), STR_227(58), STR_226(3), 
 25531 ;;		 -> STR_223(25), STR_222(3), STR_219(24), STR_218(3), 
 25532 ;;		 -> STR_215(24), STR_214(3), STR_211(24), STR_210(3), 
 25533 ;;		 -> STR_207(23), STR_206(3), STR_203(21), STR_202(3), 
 25534 ;;		 -> STR_199(22), STR_198(3), STR_195(17), STR_194(3), 
 25535 ;;		 -> STR_191(18), STR_190(4), STR_189(11), STR_188(2), 
 25536 ;;		 -> STR_185(7), STR_182(7), STR_179(9), STR_176(7), 
 25537 ;;		 -> STR_173(8), STR_170(7), STR_169(2), STR_168(2), 
 25538 ;;		 -> STR_167(6), STR_166(8), STR_165(8), STR_164(20), 
 25539 ;;		 -> STR_163(27), STR_162(6), STR_161(33), STR_158(41), 
 25540 ;;		 -> STR_157(23), STR_155(22), STR_150(26), STR_148(32), 
 25541 ;;		 -> STR_146(28), STR_137(6), STR_135(40), STR_133(44), 
 25542 ;;		 -> STR_130(6), STR_129(39), STR_127(36), STR_125(37), 
 25543 ;;		 -> STR_123(40), STR_121(37), STR_120(50), STR_117(6), 
 25544 ;;		 -> STR_116(41), STR_114(38), STR_112(39), STR_110(42), 
 25545 ;;		 -> STR_108(39), STR_107(66), STR_104(6), STR_103(27), 
 25546 ;;		 -> STR_102(3), STR_99(20), STR_98(52), STR_94(8), 
 25547 ;;		 -> STR_93(36), STR_90(8), STR_89(38), STR_88(24), 
 25548 ;;		 -> STR_86(33), STR_84(24), STR_82(52), STR_80(54), 
 25549 ;;		 -> STR_79(6), STR_78(3), STR_73(25), STR_70(17), 
 25550 ;;		 -> STR_69(3), STR_68(4), STR_67(3), STR_64(4), 
 25551 ;;		 -> STR_59(15), wrkbuf(80), STR_56(14), STR_54(33), 
 25552 ;;		 -> STR_52(24), STR_50(52), STR_48(6), STR_46(6), 
 25553 ;;		 -> STR_44(6), STR_42(6), STR_40(18), STR_39(6), 
 25554 ;;		 -> STR_37(33), STR_36(6), STR_28(24), STR_27(18), 
 25555 ;;		 -> STR_26(20), STR_25(25), STR_24(22), STR_23(19), 
 25556 ;;		 -> STR_22(20), STR_21(20), STR_19(6), STR_17(6), 
 25557 ;;		 -> STR_15(6), STR_13(6), STR_11(6), STR_9(6), 
 25558 ;;		 -> STR_7(31), STR_5(29), STR_4(55), STR_3(35), 
 25559 ;;		 -> STR_2(58), STR_1(37), 
 25560 ;; Auto vars:     Size  Location     Type
 25561 ;;		None
 25562 ;; Return value:  Size  Location     Type
 25563 ;;		None               void
 25564 ;; Registers used:
 25565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25566 ;; Tracked objects:
 25567 ;;		On entry : F/0
 25568 ;;		On exit  : 0/0
 25569 ;;		Unchanged: 0/0
 25570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25571 ;;      Params:         0       2       0       0       0       0       0
 25572 ;;      Locals:         0       0       0       0       0       0       0
 25573 ;;      Temps:          0       2       0       0       0       0       0
 25574 ;;      Totals:         0       4       0       0       0       0       0
 25575 ;;Total ram usage:        4 bytes
 25576 ;; Hardware stack levels used:    1
 25577 ;; Hardware stack levels required when called:    4
 25578 ;; This function calls:
 25579 ;;		_WriteUSART
 25580 ;; This function is called by:
 25581 ;;		_main
 25582 ;;		_doModeVerbose
 25583 ;;		_doModeSLCAN
 25584 ;;		_receivePrintEventVerbose
 25585 ;;		_receiveSendEventSLCAN
 25586 ;;		_printStatistics
 25587 ;;		_printErrors
 25588 ;;		_printHelp
 25589 ;;		_findNodes
 25590 ;;		_printGUID
 25591 ;;		_printMDF
 25592 ;;		_printNodeFirmwareVersion
 25593 ;;		_printFirmwareVersion
 25594 ;;		_printMode
 25595 ;; This function uses a non-reentrant model
 25596 ;;
 25597                           
 25598                           	psect	text69
 25599  0014D2                     __ptext69:
 25600                           	opt stack 0
 25601  0014D2                     _putsUSART:
 25602                           	opt stack 23
 25603  0014D2                     l1913:
 25604  0014D2  A2AC               	btfss	4012,1,c	;volatile
 25605  0014D4  D7FE               	goto	l1913
 25606  0014D6  0100               	movlb	0	; () banked
 25607  0014D8  5161               	movf	putsUSART@data& (0+255),w,b
 25608  0014DA  6EF6               	movwf	tblptrl,c
 25609  0014DC  6EE9               	movwf	fsr0l,c
 25610  0014DE  0E05               	movlw	(high __ramtop+-1)
 25611  0014E0  6EEA               	movwf	fsr0h,c
 25612  0014E2  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25613  0014E4  64EA               	cpfsgt	fsr0h,c
 25614  0014E6  D003               	bra	u18637
 25615  0014E8  6EEA               	movwf	fsr0h,c
 25616  0014EA  50EF               	movf	indf0,w,c
 25617  0014EC  D003               	bra	u18630
 25618  0014EE                     u18637:
 25619  0014EE  6EF7               	movwf	tblptrh,c
 25620  0014F0  0008               	tblrd		*
 25621  0014F2  50F5               	movf	tablat,w,c
 25622  0014F4                     u18630:
 25623  0014F4  ECB1  F007         	call	_WriteUSART
 25624  0014F8  0100               	movlb	0	; () banked
 25625  0014FA  5161               	movf	putsUSART@data& (0+255),w,b
 25626  0014FC  6F63               	movwf	??_putsUSART& (0+255),b
 25627  0014FE  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25628  001500  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25629  001502  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25630  001504  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25631  001506  5163               	movf	??_putsUSART& (0+255),w,b
 25632  001508  6EF6               	movwf	tblptrl,c
 25633  00150A  6EE9               	movwf	fsr0l,c
 25634  00150C  0E05               	movlw	(high __ramtop+-1)
 25635  00150E  6EEA               	movwf	fsr0h,c
 25636  001510  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25637  001512  64EA               	cpfsgt	fsr0h,c
 25638  001514  D003               	bra	u18647
 25639  001516  6EEA               	movwf	fsr0h,c
 25640  001518  50EF               	movf	indf0,w,c
 25641  00151A  D003               	bra	u18640
 25642  00151C                     u18647:
 25643  00151C  6EF7               	movwf	tblptrh,c
 25644  00151E  0008               	tblrd		*
 25645  001520  50F5               	movf	tablat,w,c
 25646  001522                     u18640:
 25647  001522  0900               	iorlw	0
 25648  001524  B4D8               	btfsc	status,2,c
 25649  001526  0012               	return	
 25650  001528  D7D4               	goto	l1913
 25651  00152A                     __end_of_putsUSART:
 25652                           	opt stack 0
 25653                           tblptru	equ	0xFF8
 25654                           tblptrh	equ	0xFF7
 25655                           tblptrl	equ	0xFF6
 25656                           tablat	equ	0xFF5
 25657                           prodh	equ	0xFF4
 25658                           prodl	equ	0xFF3
 25659                           intcon	equ	0xFF2
 25660                           indf0	equ	0xFEF
 25661                           postinc0	equ	0xFEE
 25662                           fsr0h	equ	0xFEA
 25663                           fsr0l	equ	0xFE9
 25664                           wreg	equ	0xFE8
 25665                           indf1	equ	0xFE7
 25666                           postinc1	equ	0xFE6
 25667                           postdec1	equ	0xFE5
 25668                           fsr1h	equ	0xFE2
 25669                           fsr1l	equ	0xFE1
 25670                           indf2	equ	0xFDF
 25671                           postinc2	equ	0xFDE
 25672                           postdec2	equ	0xFDD
 25673                           plusw2	equ	0xFDB
 25674                           fsr2h	equ	0xFDA
 25675                           fsr2l	equ	0xFD9
 25676                           status	equ	0xFD8
 25677                           
 25678 ;; *************** function _WriteUSART *****************
 25679 ;; Defined at:
 25680 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25681 ;; Parameters:    Size  Location     Type
 25682 ;;  data            1    wreg     unsigned char 
 25683 ;; Auto vars:     Size  Location     Type
 25684 ;;  data            1    0[BANK0 ] unsigned char 
 25685 ;; Return value:  Size  Location     Type
 25686 ;;		None               void
 25687 ;; Registers used:
 25688 ;;		wreg
 25689 ;; Tracked objects:
 25690 ;;		On entry : 0/1
 25691 ;;		On exit  : 0/0
 25692 ;;		Unchanged: 0/0
 25693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25694 ;;      Params:         0       0       0       0       0       0       0
 25695 ;;      Locals:         0       1       0       0       0       0       0
 25696 ;;      Temps:          0       0       0       0       0       0       0
 25697 ;;      Totals:         0       1       0       0       0       0       0
 25698 ;;Total ram usage:        1 bytes
 25699 ;; Hardware stack levels used:    1
 25700 ;; Hardware stack levels required when called:    3
 25701 ;; This function calls:
 25702 ;;		Nothing
 25703 ;; This function is called by:
 25704 ;;		_doModeVerbose
 25705 ;;		_sendEscapedUartData
 25706 ;;		_sendVSCPDriverErrorFrame
 25707 ;;		_sendVSCPDriverAck
 25708 ;;		_sendVSCPDriverNack
 25709 ;;		_sendVSCPDriverCommandReply
 25710 ;;		_receiveSendEventCANAL
 25711 ;;		_receiveSendMultiEventCANAL
 25712 ;;		_sendVSCPModeCapabilities
 25713 ;;		_receiveSendEventSLCAN
 25714 ;;		_printBinary
 25715 ;;		_findNodes
 25716 ;;		_printFirmwareVersion
 25717 ;;		_putsUSART
 25718 ;; This function uses a non-reentrant model
 25719 ;;
 25720                           
 25721                           	psect	text70
 25722  000F62                     __ptext70:
 25723                           	opt stack 0
 25724  000F62                     _WriteUSART:
 25725                           	opt stack 24
 25726                           
 25727                           ;incstack = 0
 25728                           ;incstack = 0
 25729                           ;WriteUSART@data stored from wreg
 25730  000F62  CFE8 F060          	movff	wreg,WriteUSART@data
 25731  000F66  ACAC               	btfss	4012,6,c	;volatile
 25732  000F68  D003               	goto	l15881
 25733  000F6A  90AC               	bcf	4012,0,c	;volatile
 25734  000F6C  B226               	btfsc	_USART_Status,1,c
 25735  000F6E  80AC               	bsf	4012,0,c	;volatile
 25736  000F70                     l15881:
 25737  000F70  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25738  000F74  0012               	return	
 25739  000F76                     __end_of_WriteUSART:
 25740                           	opt stack 0
 25741                           tblptru	equ	0xFF8
 25742                           tblptrh	equ	0xFF7
 25743                           tblptrl	equ	0xFF6
 25744                           tablat	equ	0xFF5
 25745                           prodh	equ	0xFF4
 25746                           prodl	equ	0xFF3
 25747                           intcon	equ	0xFF2
 25748                           indf0	equ	0xFEF
 25749                           postinc0	equ	0xFEE
 25750                           fsr0h	equ	0xFEA
 25751                           fsr0l	equ	0xFE9
 25752                           wreg	equ	0xFE8
 25753                           indf1	equ	0xFE7
 25754                           postinc1	equ	0xFE6
 25755                           postdec1	equ	0xFE5
 25756                           fsr1h	equ	0xFE2
 25757                           fsr1l	equ	0xFE1
 25758                           indf2	equ	0xFDF
 25759                           postinc2	equ	0xFDE
 25760                           postdec2	equ	0xFDD
 25761                           plusw2	equ	0xFDB
 25762                           fsr2h	equ	0xFDA
 25763                           fsr2l	equ	0xFD9
 25764                           status	equ	0xFD8
 25765                           
 25766 ;; *************** function _init *****************
 25767 ;; Defined at:
 25768 ;;		line 432 in file "main.c"
 25769 ;; Parameters:    Size  Location     Type
 25770 ;;		None
 25771 ;; Auto vars:     Size  Location     Type
 25772 ;;		None
 25773 ;; Return value:  Size  Location     Type
 25774 ;;		None               void
 25775 ;; Registers used:
 25776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25777 ;; Tracked objects:
 25778 ;;		On entry : 0/1
 25779 ;;		On exit  : F/0
 25780 ;;		Unchanged: 0/0
 25781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25782 ;;      Params:         0       0       0       0       0       0       0
 25783 ;;      Locals:         0       0       0       0       0       0       0
 25784 ;;      Temps:          0       0       0       0       0       0       0
 25785 ;;      Totals:         0       0       0       0       0       0       0
 25786 ;;Total ram usage:        0 bytes
 25787 ;; Hardware stack levels used:    1
 25788 ;; Hardware stack levels required when called:    5
 25789 ;; This function calls:
 25790 ;;		_WriteTimer0
 25791 ;;		_init_app_ram
 25792 ;;		_OpenUSART
 25793 ;;		_OpenTimer0
 25794 ;;		_ECANInitialize
 25795 ;; This function is called by:
 25796 ;;		_main
 25797 ;; This function uses a non-reentrant model
 25798 ;;
 25799                           
 25800                           	psect	text71
 25801  0013A0                     __ptext71:
 25802                           	opt stack 0
 25803  0013A0                     _init:
 25804                           	opt stack 24
 25805                           
 25806                           ;main.c: 434: init_app_ram();
 25807                           
 25808                           ;incstack = 0
 25809                           ;incstack = 0
 25810  0013A0  ECD5  F01D         	call	_init_app_ram	;wreg free
 25811                           
 25812                           ; BSR set to: 0
 25813                           ;main.c: 437: OSCCONbits.IRCF0 = 1;
 25814  0013A4  88D3               	bsf	4051,4,c	;volatile
 25815                           
 25816                           ; BSR set to: 0
 25817                           ;main.c: 438: OSCCONbits.IRCF1 = 1;
 25818  0013A6  8AD3               	bsf	4051,5,c	;volatile
 25819                           
 25820                           ; BSR set to: 0
 25821                           ;main.c: 439: OSCCONbits.IRCF2 = 1;
 25822  0013A8  8CD3               	bsf	4051,6,c	;volatile
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;main.c: 440: OSCTUNEbits.PLLEN = 1;
 25826  0013AA  8C9B               	bsf	3995,6,c	;volatile
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;main.c: 442: TRISBbits.RB2 = 0;
 25830  0013AC  9493               	bcf	3987,2,c	;volatile
 25831                           
 25832                           ; BSR set to: 0
 25833                           ;main.c: 443: TRISBbits.RB3 = 1;
 25834  0013AE  8693               	bsf	3987,3,c	;volatile
 25835                           
 25836                           ; BSR set to: 0
 25837                           ;main.c: 445: TRISCbits.RC1 = 0;
 25838  0013B0  9294               	bcf	3988,1,c	;volatile
 25839                           
 25840                           ; BSR set to: 0
 25841                           ;main.c: 446: TRISCbits.RC6 = 0;
 25842  0013B2  9C94               	bcf	3988,6,c	;volatile
 25843                           
 25844                           ; BSR set to: 0
 25845                           ;main.c: 447: TRISCbits.RC7 = 1;
 25846  0013B4  8E94               	bsf	3988,7,c	;volatile
 25847                           
 25848                           ; BSR set to: 0
 25849                           ;main.c: 451: OpenUSART( 0b01111111 &
 25850                           ;main.c: 452: 0b11111111 &
 25851                           ;main.c: 453: 0b11111110 &
 25852                           ;main.c: 454: 0b11111101 &
 25853                           ;main.c: 455: 0b11111111,
 25854                           ;main.c: 456: 21 );
 25855  0013B6  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25856  0013B8  0E15               	movlw	21
 25857  0013BA  6F60               	movwf	?_OpenUSART& (0+255),b
 25858  0013BC  0E7C               	movlw	124
 25859  0013BE  ECC1  F00A         	call	_OpenUSART
 25860                           
 25861                           ; BSR set to: 0
 25862                           ;main.c: 458: RCIF = 0;
 25863  0013C2  9A9E               	bcf	3998,5,c	;volatile
 25864                           
 25865                           ; BSR set to: 0
 25866                           ;main.c: 459: RCIP = 0;
 25867  0013C4  9A9F               	bcf	3999,5,c	;volatile
 25868                           
 25869                           ; BSR set to: 0
 25870                           ;main.c: 460: RCIE = 1;
 25871  0013C6  8A9D               	bsf	3997,5,c	;volatile
 25872                           
 25873                           ; BSR set to: 0
 25874                           ;main.c: 461: PEIE = 1;
 25875  0013C8  8CF2               	bsf	intcon,6,c	;volatile
 25876                           
 25877                           ; BSR set to: 0
 25878                           ;main.c: 464: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25879  0013CA  0E92               	movlw	146
 25880  0013CC  ECE2  F007         	call	_OpenTimer0
 25881                           
 25882                           ; BSR set to: 0
 25883                           ;main.c: 465: WriteTimer0(0xfb1d);
 25884  0013D0  0EFB               	movlw	251
 25885  0013D2  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25886  0013D4  0E1D               	movlw	29
 25887  0013D6  6F60               	movwf	?_WriteTimer0& (0+255),b
 25888  0013D8  EC9F  F007         	call	_WriteTimer0	;wreg free
 25889                           
 25890                           ; BSR set to: 0
 25891                           ;main.c: 472: ECANInitialize();
 25892  0013DC  EC9E  F00C         	call	_ECANInitialize	;wreg free
 25893                           
 25894                           ; BSR set to: 0
 25895                           ;main.c: 496: RXBnIE = 1;
 25896  0013E0  82A3               	bsf	4003,1,c	;volatile
 25897                           
 25898                           ; BSR set to: 0
 25899                           ;main.c: 497: ERRIE = 1;
 25900  0013E2  8AA3               	bsf	4003,5,c	;volatile
 25901                           
 25902                           ; BSR set to: 0
 25903                           ;main.c: 499: (INTCONbits.GIE = 1);
 25904  0013E4  8EF2               	bsf	intcon,7,c	;volatile
 25905                           
 25906                           ; BSR set to: 0
 25907  0013E6  0012               	return	
 25908  0013E8                     __end_of_init:
 25909                           	opt stack 0
 25910                           tblptru	equ	0xFF8
 25911                           tblptrh	equ	0xFF7
 25912                           tblptrl	equ	0xFF6
 25913                           tablat	equ	0xFF5
 25914                           prodh	equ	0xFF4
 25915                           prodl	equ	0xFF3
 25916                           intcon	equ	0xFF2
 25917                           indf0	equ	0xFEF
 25918                           postinc0	equ	0xFEE
 25919                           fsr0h	equ	0xFEA
 25920                           fsr0l	equ	0xFE9
 25921                           wreg	equ	0xFE8
 25922                           indf1	equ	0xFE7
 25923                           postinc1	equ	0xFE6
 25924                           postdec1	equ	0xFE5
 25925                           fsr1h	equ	0xFE2
 25926                           fsr1l	equ	0xFE1
 25927                           indf2	equ	0xFDF
 25928                           postinc2	equ	0xFDE
 25929                           postdec2	equ	0xFDD
 25930                           plusw2	equ	0xFDB
 25931                           fsr2h	equ	0xFDA
 25932                           fsr2l	equ	0xFD9
 25933                           status	equ	0xFD8
 25934                           
 25935 ;; *************** function _ECANInitialize *****************
 25936 ;; Defined at:
 25937 ;;		line 168 in file "ECAN.c"
 25938 ;; Parameters:    Size  Location     Type
 25939 ;;		None
 25940 ;; Auto vars:     Size  Location     Type
 25941 ;;		None
 25942 ;; Return value:  Size  Location     Type
 25943 ;;		None               void
 25944 ;; Registers used:
 25945 ;;		wreg, status,2, status,0, cstack
 25946 ;; Tracked objects:
 25947 ;;		On entry : F/0
 25948 ;;		On exit  : F/0
 25949 ;;		Unchanged: 0/0
 25950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25951 ;;      Params:         0       0       0       0       0       0       0
 25952 ;;      Locals:         0       0       0       0       0       0       0
 25953 ;;      Temps:          0       0       0       0       0       0       0
 25954 ;;      Totals:         0       0       0       0       0       0       0
 25955 ;;Total ram usage:        0 bytes
 25956 ;; Hardware stack levels used:    1
 25957 ;; Hardware stack levels required when called:    4
 25958 ;; This function calls:
 25959 ;;		_ECANSetOperationMode
 25960 ;; This function is called by:
 25961 ;;		_init
 25962 ;; This function uses a non-reentrant model
 25963 ;;
 25964                           
 25965                           	psect	text72
 25966  00193C                     __ptext72:
 25967                           	opt stack 0
 25968  00193C                     _ECANInitialize:
 25969                           	opt stack 24
 25970                           
 25971                           ; BSR set to: 0
 25972                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25973                           
 25974                           ; BSR set to: 0
 25975                           ;incstack = 0
 25976                           ;incstack = 0
 25977  00193C  0E80               	movlw	128
 25978  00193E  ECC6  F007         	call	_ECANSetOperationMode
 25979                           
 25980                           ; BSR set to: 0
 25981                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25982  001942  0E09               	movlw	9
 25983  001944  6E70               	movwf	3952,c	;volatile
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25987  001946  0EFC               	movlw	252
 25988  001948  6E71               	movwf	3953,c	;volatile
 25989                           
 25990                           ; BSR set to: 0
 25991                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25992                           ;ECAN.c: 181: (0 << 6) |
 25993                           ;ECAN.c: 182: (2-1);
 25994  00194A  0E01               	movlw	1
 25995  00194C  6E72               	movwf	3954,c	;volatile
 25996                           
 25997                           ; BSR set to: 0
 25998                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25999  00194E  0E20               	movlw	32
 26000  001950  6E73               	movwf	3955,c	;volatile
 26001                           
 26002                           ; BSR set to: 0
 26003                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 26004  001952  8E77               	bsf	3959,7,c	;volatile
 26005                           
 26006                           ; BSR set to: 0
 26007                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 26008  001954  9C77               	bcf	3959,6,c	;volatile
 26009                           
 26010                           ; BSR set to: 0
 26011                           ;ECAN.c: 205: RXB0CON = 0;
 26012  001956  6A60               	clrf	3936,c	;volatile
 26013                           
 26014                           ; BSR set to: 0
 26015                           ;ECAN.c: 211: RXB1CON = 0;
 26016  001958  010F               	movlb	15	; () banked
 26017  00195A  6B50               	clrf	80,b	;volatile
 26018                           
 26019                           ; BSR set to: 15
 26020                           ;ECAN.c: 221: B0CON = 0;
 26021  00195C  010E               	movlb	14	; () banked
 26022  00195E  6B20               	clrf	32,b	;volatile
 26023                           
 26024                           ; BSR set to: 14
 26025                           ;ECAN.c: 231: B1CON = 0;
 26026  001960  6B30               	clrf	48,b	;volatile
 26027                           
 26028                           ; BSR set to: 14
 26029                           ;ECAN.c: 241: B2CON = 0;
 26030  001962  6B40               	clrf	64,b	;volatile
 26031                           
 26032                           ; BSR set to: 14
 26033                           ;ECAN.c: 251: B3CON = 0;
 26034  001964  6B50               	clrf	80,b	;volatile
 26035                           
 26036                           ; BSR set to: 14
 26037                           ;ECAN.c: 261: B4CON = 0;
 26038  001966  6B60               	clrf	96,b	;volatile
 26039                           
 26040                           ; BSR set to: 14
 26041                           ;ECAN.c: 271: B5CON = 0;
 26042  001968  6B70               	clrf	112,b	;volatile
 26043                           
 26044                           ; BSR set to: 14
 26045                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 26046  00196A  010D               	movlb	13	; () banked
 26047  00196C  6BF8               	clrf	248,b	;volatile
 26048                           
 26049                           ; BSR set to: 13
 26050                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 26051  00196E  010F               	movlb	15	; () banked
 26052  001970  6B00               	clrf	0,b	;volatile
 26053                           
 26054                           ; BSR set to: 15
 26055  001972  0E08               	movlw	8
 26056  001974  6F01               	movwf	1,b	;volatile
 26057                           
 26058                           ; BSR set to: 15
 26059  001976  6B02               	clrf	2,b	;volatile
 26060                           
 26061                           ; BSR set to: 15
 26062  001978  6B03               	clrf	3,b	;volatile
 26063                           
 26064                           ; BSR set to: 15
 26065                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 26066  00197A  0E01               	movlw	1
 26067  00197C  010D               	movlb	13	; () banked
 26068  00197E  6FD4               	movwf	212,b	;volatile
 26069                           
 26070                           ; BSR set to: 13
 26071                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 26072  001980  6BD5               	clrf	213,b	;volatile
 26073                           
 26074                           ; BSR set to: 13
 26075                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 26076  001982  6BE0               	clrf	224,b	;volatile
 26077                           
 26078                           ; BSR set to: 13
 26079                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 26080  001984  0E11               	movlw	17
 26081  001986  6FE1               	movwf	225,b	;volatile
 26082                           
 26083                           ; BSR set to: 13
 26084                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 26085  001988  6FE2               	movwf	226,b	;volatile
 26086                           
 26087                           ; BSR set to: 13
 26088                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 26089  00198A  6BE3               	clrf	227,b	;volatile
 26090                           
 26091                           ; BSR set to: 13
 26092                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 26093  00198C  6BE4               	clrf	228,b	;volatile
 26094                           
 26095                           ; BSR set to: 13
 26096                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 26097  00198E  6BE5               	clrf	229,b	;volatile
 26098                           
 26099                           ; BSR set to: 13
 26100                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 26101  001990  6BE6               	clrf	230,b	;volatile
 26102                           
 26103                           ; BSR set to: 13
 26104                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 26105  001992  6BE7               	clrf	231,b	;volatile
 26106                           
 26107                           ; BSR set to: 13
 26108                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 26109  001994  0E54               	movlw	84
 26110  001996  6FF0               	movwf	240,b	;volatile
 26111                           
 26112                           ; BSR set to: 13
 26113                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 26114  001998  0E05               	movlw	5
 26115  00199A  6FF1               	movwf	241,b	;volatile
 26116                           
 26117                           ; BSR set to: 13
 26118                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26119  00199C  6BF2               	clrf	242,b	;volatile
 26120                           
 26121                           ; BSR set to: 13
 26122                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26123  00199E  6BF2               	clrf	242,b	;volatile
 26124                           
 26125                           ; BSR set to: 13
 26126                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 26127  0019A0  010F               	movlb	15	; () banked
 26128  0019A2  6B18               	clrf	24,b	;volatile
 26129                           
 26130                           ; BSR set to: 15
 26131  0019A4  6B19               	clrf	25,b	;volatile
 26132                           
 26133                           ; BSR set to: 15
 26134  0019A6  6B1A               	clrf	26,b	;volatile
 26135                           
 26136                           ; BSR set to: 15
 26137  0019A8  6B1B               	clrf	27,b	;volatile
 26138                           
 26139                           ; BSR set to: 15
 26140                           ;ECAN.c: 482: RXM0EXIDM = 1;
 26141  0019AA  8719               	bsf	25,3,b	;volatile
 26142                           
 26143                           ; BSR set to: 15
 26144                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 26145  0019AC  6B1C               	clrf	28,b	;volatile
 26146                           
 26147                           ; BSR set to: 15
 26148  0019AE  6B1D               	clrf	29,b	;volatile
 26149                           
 26150                           ; BSR set to: 15
 26151  0019B0  6B1E               	clrf	30,b	;volatile
 26152                           
 26153                           ; BSR set to: 15
 26154  0019B2  6B1F               	clrf	31,b	;volatile
 26155                           
 26156                           ; BSR set to: 15
 26157                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 26158  0019B4  871D               	bsf	29,3,b	;volatile
 26159                           
 26160                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 26161  0019B6  0E20               	movlw	32
 26162  0019B8  EFC6  F007         	goto	_ECANSetOperationMode
 26163  0019BC                     __end_of_ECANInitialize:
 26164                           	opt stack 0
 26165                           tblptru	equ	0xFF8
 26166                           tblptrh	equ	0xFF7
 26167                           tblptrl	equ	0xFF6
 26168                           tablat	equ	0xFF5
 26169                           prodh	equ	0xFF4
 26170                           prodl	equ	0xFF3
 26171                           intcon	equ	0xFF2
 26172                           indf0	equ	0xFEF
 26173                           postinc0	equ	0xFEE
 26174                           fsr0h	equ	0xFEA
 26175                           fsr0l	equ	0xFE9
 26176                           wreg	equ	0xFE8
 26177                           indf1	equ	0xFE7
 26178                           postinc1	equ	0xFE6
 26179                           postdec1	equ	0xFE5
 26180                           fsr1h	equ	0xFE2
 26181                           fsr1l	equ	0xFE1
 26182                           indf2	equ	0xFDF
 26183                           postinc2	equ	0xFDE
 26184                           postdec2	equ	0xFDD
 26185                           plusw2	equ	0xFDB
 26186                           fsr2h	equ	0xFDA
 26187                           fsr2l	equ	0xFD9
 26188                           status	equ	0xFD8
 26189                           
 26190 ;; *************** function _OpenTimer0 *****************
 26191 ;; Defined at:
 26192 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 26193 ;; Parameters:    Size  Location     Type
 26194 ;;  config          1    wreg     unsigned char 
 26195 ;; Auto vars:     Size  Location     Type
 26196 ;;  config          1    0[BANK0 ] unsigned char 
 26197 ;; Return value:  Size  Location     Type
 26198 ;;		None               void
 26199 ;; Registers used:
 26200 ;;		wreg, status,2, status,0
 26201 ;; Tracked objects:
 26202 ;;		On entry : F/0
 26203 ;;		On exit  : F/0
 26204 ;;		Unchanged: 0/0
 26205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26206 ;;      Params:         0       0       0       0       0       0       0
 26207 ;;      Locals:         0       1       0       0       0       0       0
 26208 ;;      Temps:          0       0       0       0       0       0       0
 26209 ;;      Totals:         0       1       0       0       0       0       0
 26210 ;;Total ram usage:        1 bytes
 26211 ;; Hardware stack levels used:    1
 26212 ;; Hardware stack levels required when called:    3
 26213 ;; This function calls:
 26214 ;;		Nothing
 26215 ;; This function is called by:
 26216 ;;		_init
 26217 ;; This function uses a non-reentrant model
 26218 ;;
 26219                           
 26220                           	psect	text73
 26221  000FC4                     __ptext73:
 26222                           	opt stack 0
 26223  000FC4                     _OpenTimer0:
 26224                           	opt stack 25
 26225                           
 26226                           ; BSR set to: 0
 26227                           ;incstack = 0
 26228                           ;incstack = 0
 26229                           ;OpenTimer0@config stored from wreg
 26230  000FC4  CFE8 F060          	movff	wreg,OpenTimer0@config
 26231                           
 26232                           ; BSR set to: 0
 26233  000FC8  5160               	movf	OpenTimer0@config& (0+255),w,b
 26234  000FCA  0B7F               	andlw	127
 26235  000FCC  6ED5               	movwf	4053,c	;volatile
 26236                           
 26237                           ; BSR set to: 0
 26238  000FCE  6AD7               	clrf	4055,c	;volatile
 26239                           
 26240                           ; BSR set to: 0
 26241  000FD0  6AD6               	clrf	4054,c	;volatile
 26242                           
 26243                           ; BSR set to: 0
 26244  000FD2  94F2               	bcf	intcon,2,c	;volatile
 26245                           
 26246                           ; BSR set to: 0
 26247  000FD4  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 26248  000FD6  D002               	goto	l1863
 26249                           
 26250                           ; BSR set to: 0
 26251  000FD8  8AF2               	bsf	intcon,5,c	;volatile
 26252  000FDA  D001               	goto	l1864
 26253  000FDC                     l1863:
 26254                           
 26255                           ; BSR set to: 0
 26256  000FDC  9AF2               	bcf	intcon,5,c	;volatile
 26257  000FDE                     l1864:
 26258                           
 26259                           ; BSR set to: 0
 26260  000FDE  8ED5               	bsf	4053,7,c	;volatile
 26261                           
 26262                           ; BSR set to: 0
 26263  000FE0  0012               	return	
 26264  000FE2                     __end_of_OpenTimer0:
 26265                           	opt stack 0
 26266                           tblptru	equ	0xFF8
 26267                           tblptrh	equ	0xFF7
 26268                           tblptrl	equ	0xFF6
 26269                           tablat	equ	0xFF5
 26270                           prodh	equ	0xFF4
 26271                           prodl	equ	0xFF3
 26272                           intcon	equ	0xFF2
 26273                           indf0	equ	0xFEF
 26274                           postinc0	equ	0xFEE
 26275                           fsr0h	equ	0xFEA
 26276                           fsr0l	equ	0xFE9
 26277                           wreg	equ	0xFE8
 26278                           indf1	equ	0xFE7
 26279                           postinc1	equ	0xFE6
 26280                           postdec1	equ	0xFE5
 26281                           fsr1h	equ	0xFE2
 26282                           fsr1l	equ	0xFE1
 26283                           indf2	equ	0xFDF
 26284                           postinc2	equ	0xFDE
 26285                           postdec2	equ	0xFDD
 26286                           plusw2	equ	0xFDB
 26287                           fsr2h	equ	0xFDA
 26288                           fsr2l	equ	0xFD9
 26289                           status	equ	0xFD8
 26290                           
 26291 ;; *************** function _OpenUSART *****************
 26292 ;; Defined at:
 26293 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 26294 ;; Parameters:    Size  Location     Type
 26295 ;;  config          1    wreg     unsigned char 
 26296 ;;  spbrg           2    0[BANK0 ] unsigned int 
 26297 ;; Auto vars:     Size  Location     Type
 26298 ;;  config          1    2[BANK0 ] unsigned char 
 26299 ;; Return value:  Size  Location     Type
 26300 ;;		None               void
 26301 ;; Registers used:
 26302 ;;		wreg, status,2
 26303 ;; Tracked objects:
 26304 ;;		On entry : F/0
 26305 ;;		On exit  : F/0
 26306 ;;		Unchanged: 0/0
 26307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26308 ;;      Params:         0       2       0       0       0       0       0
 26309 ;;      Locals:         0       1       0       0       0       0       0
 26310 ;;      Temps:          0       0       0       0       0       0       0
 26311 ;;      Totals:         0       3       0       0       0       0       0
 26312 ;;Total ram usage:        3 bytes
 26313 ;; Hardware stack levels used:    1
 26314 ;; Hardware stack levels required when called:    3
 26315 ;; This function calls:
 26316 ;;		Nothing
 26317 ;; This function is called by:
 26318 ;;		_init
 26319 ;; This function uses a non-reentrant model
 26320 ;;
 26321                           
 26322                           	psect	text74
 26323  001582                     __ptext74:
 26324                           	opt stack 0
 26325  001582                     _OpenUSART:
 26326                           	opt stack 25
 26327                           
 26328                           ; BSR set to: 0
 26329                           ;incstack = 0
 26330                           ;incstack = 0
 26331                           ;OpenUSART@config stored from wreg
 26332  001582  CFE8 F062          	movff	wreg,OpenUSART@config
 26333                           
 26334                           ; BSR set to: 0
 26335  001586  6AAC               	clrf	4012,c	;volatile
 26336  001588  6AAB               	clrf	4011,c	;volatile
 26337                           
 26338                           ; BSR set to: 0
 26339  00158A  B162               	btfsc	OpenUSART@config& (0+255),0,b
 26340                           
 26341                           ; BSR set to: 0
 26342  00158C  88AC               	bsf	4012,4,c	;volatile
 26343                           
 26344                           ; BSR set to: 0
 26345  00158E  A362               	btfss	OpenUSART@config& (0+255),1,b
 26346  001590  D002               	goto	l15575
 26347                           
 26348                           ; BSR set to: 0
 26349  001592  8CAC               	bsf	4012,6,c	;volatile
 26350  001594  8CAB               	bsf	4011,6,c	;volatile
 26351  001596                     l15575:
 26352                           
 26353                           ; BSR set to: 0
 26354  001596  B562               	btfsc	OpenUSART@config& (0+255),2,b
 26355                           
 26356                           ; BSR set to: 0
 26357  001598  8EAC               	bsf	4012,7,c	;volatile
 26358                           
 26359                           ; BSR set to: 0
 26360  00159A  A762               	btfss	OpenUSART@config& (0+255),3,b
 26361  00159C  D002               	goto	l1896
 26362                           
 26363                           ; BSR set to: 0
 26364  00159E  88AB               	bsf	4011,4,c	;volatile
 26365  0015A0  D001               	goto	l15583
 26366  0015A2                     l1896:
 26367                           
 26368                           ; BSR set to: 0
 26369  0015A2  8AAB               	bsf	4011,5,c	;volatile
 26370  0015A4                     l15583:
 26371                           
 26372                           ; BSR set to: 0
 26373  0015A4  B962               	btfsc	OpenUSART@config& (0+255),4,b
 26374                           
 26375                           ; BSR set to: 0
 26376  0015A6  84AC               	bsf	4012,2,c	;volatile
 26377                           
 26378                           ; BSR set to: 0
 26379  0015A8  989E               	bcf	3998,4,c	;volatile
 26380                           
 26381                           ; BSR set to: 0
 26382  0015AA  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 26383                           
 26384                           ; BSR set to: 0
 26385  0015AC  86AB               	bsf	4011,3,c	;volatile
 26386                           
 26387                           ; BSR set to: 0
 26388  0015AE  AD62               	btfss	OpenUSART@config& (0+255),6,b
 26389  0015B0  D002               	goto	l1900
 26390                           
 26391                           ; BSR set to: 0
 26392  0015B2  8A9D               	bsf	3997,5,c	;volatile
 26393  0015B4  D001               	goto	l1901
 26394  0015B6                     l1900:
 26395                           
 26396                           ; BSR set to: 0
 26397  0015B6  9A9D               	bcf	3997,5,c	;volatile
 26398  0015B8                     l1901:
 26399                           
 26400                           ; BSR set to: 0
 26401  0015B8  9A9E               	bcf	3998,5,c	;volatile
 26402                           
 26403                           ; BSR set to: 0
 26404  0015BA  AF62               	btfss	OpenUSART@config& (0+255),7,b
 26405  0015BC  D002               	goto	l1902
 26406                           
 26407                           ; BSR set to: 0
 26408  0015BE  889D               	bsf	3997,4,c	;volatile
 26409  0015C0  D001               	goto	l1903
 26410  0015C2                     l1902:
 26411                           
 26412                           ; BSR set to: 0
 26413  0015C2  989D               	bcf	3997,4,c	;volatile
 26414  0015C4                     l1903:
 26415                           
 26416                           ; BSR set to: 0
 26417  0015C4  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26418                           
 26419                           ; BSR set to: 0
 26420  0015C8  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 26421  0015CA  6EB0               	movwf	4016,c	;volatile
 26422                           
 26423                           ; BSR set to: 0
 26424  0015CC  8AAC               	bsf	4012,5,c	;volatile
 26425                           
 26426                           ; BSR set to: 0
 26427  0015CE  8EAB               	bsf	4011,7,c	;volatile
 26428                           
 26429                           ; BSR set to: 0
 26430  0015D0  9C94               	bcf	3988,6,c	;volatile
 26431                           
 26432                           ; BSR set to: 0
 26433  0015D2  8E94               	bsf	3988,7,c	;volatile
 26434                           
 26435                           ; BSR set to: 0
 26436  0015D4  B8AC               	btfsc	4012,4,c	;volatile
 26437                           
 26438                           ; BSR set to: 0
 26439  0015D6  BEAC               	btfsc	4012,7,c	;volatile
 26440  0015D8  D001               	goto	l1905
 26441                           
 26442                           ; BSR set to: 0
 26443  0015DA  8C94               	bsf	3988,6,c	;volatile
 26444  0015DC                     l1905:
 26445                           
 26446                           ; BSR set to: 0
 26447  0015DC  0012               	return	
 26448  0015DE                     __end_of_OpenUSART:
 26449                           	opt stack 0
 26450                           tblptru	equ	0xFF8
 26451                           tblptrh	equ	0xFF7
 26452                           tblptrl	equ	0xFF6
 26453                           tablat	equ	0xFF5
 26454                           prodh	equ	0xFF4
 26455                           prodl	equ	0xFF3
 26456                           intcon	equ	0xFF2
 26457                           indf0	equ	0xFEF
 26458                           postinc0	equ	0xFEE
 26459                           fsr0h	equ	0xFEA
 26460                           fsr0l	equ	0xFE9
 26461                           wreg	equ	0xFE8
 26462                           indf1	equ	0xFE7
 26463                           postinc1	equ	0xFE6
 26464                           postdec1	equ	0xFE5
 26465                           fsr1h	equ	0xFE2
 26466                           fsr1l	equ	0xFE1
 26467                           indf2	equ	0xFDF
 26468                           postinc2	equ	0xFDE
 26469                           postdec2	equ	0xFDD
 26470                           plusw2	equ	0xFDB
 26471                           fsr2h	equ	0xFDA
 26472                           fsr2l	equ	0xFD9
 26473                           status	equ	0xFD8
 26474                           
 26475 ;; *************** function _init_app_ram *****************
 26476 ;; Defined at:
 26477 ;;		line 508 in file "main.c"
 26478 ;; Parameters:    Size  Location     Type
 26479 ;;		None
 26480 ;; Auto vars:     Size  Location     Type
 26481 ;;  i               1   25[BANK0 ] unsigned char 
 26482 ;; Return value:  Size  Location     Type
 26483 ;;		None               void
 26484 ;; Registers used:
 26485 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26486 ;; Tracked objects:
 26487 ;;		On entry : 0/1
 26488 ;;		On exit  : F/0
 26489 ;;		Unchanged: 0/0
 26490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26491 ;;      Params:         0       0       0       0       0       0       0
 26492 ;;      Locals:         0       1       0       0       0       0       0
 26493 ;;      Temps:          0       8       0       0       0       0       0
 26494 ;;      Totals:         0       9       0       0       0       0       0
 26495 ;;Total ram usage:        9 bytes
 26496 ;; Hardware stack levels used:    1
 26497 ;; Hardware stack levels required when called:    4
 26498 ;; This function calls:
 26499 ;;		_Read_b_eep
 26500 ;;		_ECANSetOperationMode
 26501 ;;		_setFilter
 26502 ;;		__CANIDToRegs
 26503 ;; This function is called by:
 26504 ;;		_init
 26505 ;;		_vscp_restoreDefaults
 26506 ;; This function uses a non-reentrant model
 26507 ;;
 26508                           
 26509                           	psect	text75
 26510  003BAA                     __ptext75:
 26511                           	opt stack 0
 26512  003BAA                     _init_app_ram:
 26513                           	opt stack 23
 26514                           
 26515                           ;main.c: 510: can_receiveOverruns = 0;
 26516                           
 26517                           ; BSR set to: 0
 26518                           ;incstack = 0
 26519                           ;incstack = 0
 26520  003BAA  0101               	movlb	1	; () banked
 26521  003BAC  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26522  003BAE  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26523  003BB0  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26524  003BB2  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26525                           
 26526                           ;main.c: 511: can_transmitOverruns = 0;
 26527  003BB4  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26528  003BB6  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26529  003BB8  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26530  003BBA  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26531                           
 26532                           ;main.c: 512: uart_receiveOverruns = 0;
 26533  003BBC  6B20               	clrf	_uart_receiveOverruns& (0+255),b
 26534  003BBE  6B21               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26535  003BC0  6B22               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26536  003BC2  6B23               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26537                           
 26538                           ;main.c: 513: uart_transmitOverruns = 0;
 26539  003BC4  6B24               	clrf	_uart_transmitOverruns& (0+255),b
 26540  003BC6  6B25               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26541  003BC8  6B26               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26542  003BCA  6B27               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26543                           
 26544                           ;main.c: 514: timer = 0;
 26545  003BCC  6B1C               	clrf	_timer& (0+255),b	;volatile
 26546  003BCE  6B1D               	clrf	(_timer+1)& (0+255),b	;volatile
 26547  003BD0  6B1E               	clrf	(_timer+2)& (0+255),b	;volatile
 26548  003BD2  6B1F               	clrf	(_timer+3)& (0+255),b	;volatile
 26549                           
 26550                           ; BSR set to: 1
 26551                           ;main.c: 516: bHex = Read_b_eep(0x06);
 26552  003BD4  0100               	movlb	0	; () banked
 26553  003BD6  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26554  003BD8  0E06               	movlw	6
 26555  003BDA  6F60               	movwf	?_Read_b_eep& (0+255),b
 26556  003BDC  ECA8  F007         	call	_Read_b_eep	;wreg free
 26557  003BE0  6E2C               	movwf	_bHex,c
 26558                           
 26559                           ;main.c: 517: mode = Read_b_eep(0x03);
 26560  003BE2  0100               	movlb	0	; () banked
 26561  003BE4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26562  003BE6  0E03               	movlw	3
 26563  003BE8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26564  003BEA  ECA8  F007         	call	_Read_b_eep	;wreg free
 26565  003BEE  0101               	movlb	1	; () banked
 26566  003BF0  6F2C               	movwf	_mode& (0+255),b
 26567                           
 26568                           ;main.c: 518: bLocalEcho = Read_b_eep(0x65);
 26569  003BF2  0100               	movlb	0	; () banked
 26570  003BF4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26571  003BF6  0E65               	movlw	101
 26572  003BF8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26573  003BFA  ECA8  F007         	call	_Read_b_eep	;wreg free
 26574  003BFE  6E2E               	movwf	_bLocalEcho,c
 26575                           
 26576                           ;main.c: 520: rwtimeout = Read_b_eep(0x09);
 26577  003C00  0100               	movlb	0	; () banked
 26578  003C02  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26579  003C04  0E09               	movlw	9
 26580  003C06  6F60               	movwf	?_Read_b_eep& (0+255),b
 26581  003C08  ECA8  F007         	call	_Read_b_eep	;wreg free
 26582  003C0C  6E35               	movwf	_rwtimeout,c
 26583                           
 26584                           ;main.c: 525: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26585  003C0E  0E80               	movlw	128
 26586  003C10  ECC6  F007         	call	_ECANSetOperationMode
 26587                           
 26588                           ; BSR set to: 0
 26589                           ;main.c: 527: for (uint8_t i=0; i<15; i++ ) {
 26590  003C14  6B79               	clrf	init_app_ram@i& (0+255),b
 26591  003C16                     l15555:
 26592                           
 26593                           ; BSR set to: 0
 26594                           ;main.c: 528: setFilter( i,
 26595                           ;main.c: 529: ( Read_b_eep(0x20 + i*4) << 24 ) +
 26596                           ;main.c: 530: ( Read_b_eep(0x20 + 1 + i*4) << 16 ) +
 26597                           ;main.c: 531: ( Read_b_eep(0x20 + 2 + i*4) << 8 ) +
 26598                           ;main.c: 532: ( Read_b_eep(0x20 + 3 + i*4) ) );
 26599  003C16  5179               	movf	init_app_ram@i& (0+255),w,b
 26600  003C18  6F71               	movwf	??_init_app_ram& (0+255),b
 26601  003C1A  6B72               	clrf	(??_init_app_ram+1)& (0+255),b
 26602  003C1C  90D8               	bcf	status,0,c
 26603  003C1E  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26604  003C20  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26605  003C22  90D8               	bcf	status,0,c
 26606  003C24  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26607  003C26  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26608  003C28  0E22               	movlw	34
 26609  003C2A  2571               	addwf	??_init_app_ram& (0+255),w,b
 26610  003C2C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26611  003C2E  0E00               	movlw	0
 26612  003C30  2172               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 26613  003C32  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26614  003C34  ECA8  F007         	call	_Read_b_eep	;wreg free
 26615  003C38  0100               	movlb	0	; () banked
 26616  003C3A  6F74               	movwf	(??_init_app_ram+3)& (0+255),b
 26617  003C3C  6B73               	clrf	(??_init_app_ram+2)& (0+255),b
 26618  003C3E  5179               	movf	init_app_ram@i& (0+255),w,b
 26619  003C40  0D04               	mullw	4
 26620  003C42  0E20               	movlw	32
 26621  003C44  24F3               	addwf	prodl,w,c
 26622  003C46  6F60               	movwf	?_Read_b_eep& (0+255),b
 26623  003C48  0E00               	movlw	0
 26624  003C4A  20F4               	addwfc	prodh,w,c
 26625  003C4C  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26626  003C4E  ECA8  F007         	call	_Read_b_eep	;wreg free
 26627  003C52  0100               	movlb	0	; () banked
 26628  003C54  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26629  003C56  6B76               	clrf	(??_init_app_ram+5)& (0+255),b
 26630  003C58  5179               	movf	init_app_ram@i& (0+255),w,b
 26631  003C5A  0D04               	mullw	4
 26632  003C5C  0E21               	movlw	33
 26633  003C5E  24F3               	addwf	prodl,w,c
 26634  003C60  6F60               	movwf	?_Read_b_eep& (0+255),b
 26635  003C62  0E00               	movlw	0
 26636  003C64  20F4               	addwfc	prodh,w,c
 26637  003C66  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26638  003C68  ECA8  F007         	call	_Read_b_eep	;wreg free
 26639  003C6C  0100               	movlb	0	; () banked
 26640  003C6E  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26641  003C70  0E00               	movlw	0
 26642  003C72  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26643  003C74  5173               	movf	(??_init_app_ram+2)& (0+255),w,b
 26644  003C76  2575               	addwf	(??_init_app_ram+4)& (0+255),w,b
 26645  003C78  6F77               	movwf	(??_init_app_ram+6)& (0+255),b
 26646  003C7A  5174               	movf	(??_init_app_ram+3)& (0+255),w,b
 26647  003C7C  2176               	addwfc	(??_init_app_ram+5)& (0+255),w,b
 26648  003C7E  6F78               	movwf	(??_init_app_ram+7)& (0+255),b
 26649  003C80  5179               	movf	init_app_ram@i& (0+255),w,b
 26650  003C82  0D04               	mullw	4
 26651  003C84  0E23               	movlw	35
 26652  003C86  24F3               	addwf	prodl,w,c
 26653  003C88  6F60               	movwf	?_Read_b_eep& (0+255),b
 26654  003C8A  0E00               	movlw	0
 26655  003C8C  20F4               	addwfc	prodh,w,c
 26656  003C8E  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26657  003C90  ECA8  F007         	call	_Read_b_eep	;wreg free
 26658  003C94  0100               	movlb	0	; () banked
 26659  003C96  2777               	addwf	(??_init_app_ram+6)& (0+255),f,b
 26660  003C98  0E00               	movlw	0
 26661  003C9A  2378               	addwfc	(??_init_app_ram+7)& (0+255),f,b
 26662  003C9C  C077  F062         	movff	??_init_app_ram+6,?_setFilter
 26663  003CA0  C078  F063         	movff	??_init_app_ram+7,?_setFilter+1
 26664  003CA4  BF63               	btfsc	(?_setFilter+1)& (0+255),7,b
 26665  003CA6  0EFF               	movlw	-1
 26666  003CA8  6F64               	movwf	(?_setFilter+2)& (0+255),b
 26667  003CAA  6F65               	movwf	(?_setFilter+3)& (0+255),b
 26668  003CAC  5179               	movf	init_app_ram@i& (0+255),w,b
 26669  003CAE  ECBF  F01E         	call	_setFilter
 26670                           
 26671                           ; BSR set to: 0
 26672  003CB2  2B79               	incf	init_app_ram@i& (0+255),f,b
 26673                           
 26674                           ; BSR set to: 0
 26675  003CB4  0E0E               	movlw	14
 26676  003CB6  6579               	cpfsgt	init_app_ram@i& (0+255),b
 26677  003CB8  D7AE               	goto	l15555
 26678                           
 26679                           ; BSR set to: 0
 26680                           ;main.c: 533: }
 26681                           ;main.c: 535: _CANIDToRegs((BYTE*)&RXM0SIDH, ( Read_b_eep(0x60) << 24 ) + ( Read_b_eep(0
      +                          x60 + 1) << 16 ) + ( Read_b_eep(0x60 + 2) << 8 ) + ( Read_b_eep(0x60 + 3) ), 1);
 26682  003CBA  0E0F               	movlw	15	;volatile
 26683  003CBC  0100               	movlb	0	; () banked
 26684  003CBE  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26685  003CC0  0E18               	movlw	24	;volatile
 26686  003CC2  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26687  003CC4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26688  003CC6  0E62               	movlw	98
 26689  003CC8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26690  003CCA  ECA8  F007         	call	_Read_b_eep	;wreg free
 26691  003CCE  0100               	movlb	0	; () banked
 26692  003CD0  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26693  003CD2  6B71               	clrf	??_init_app_ram& (0+255),b
 26694  003CD4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26695  003CD6  0E60               	movlw	96
 26696  003CD8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26697  003CDA  ECA8  F007         	call	_Read_b_eep	;wreg free
 26698  003CDE  0100               	movlb	0	; () banked
 26699  003CE0  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26700  003CE2  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26701  003CE4  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26702  003CE6  0E61               	movlw	97
 26703  003CE8  6F60               	movwf	?_Read_b_eep& (0+255),b
 26704  003CEA  ECA8  F007         	call	_Read_b_eep	;wreg free
 26705  003CEE  D83B               	call	PL56	;call to abstracted procedure
 26706  003CF0  0E63               	movlw	99
 26707  003CF2  6F60               	movwf	?_Read_b_eep& (0+255),b
 26708  003CF4  ECA8  F007         	call	_Read_b_eep	;wreg free
 26709  003CF8  D827               	call	PL34	;call to abstracted procedure
 26710  003CFA  EC18  F016         	call	__CANIDToRegs	;wreg free
 26711                           
 26712                           ;main.c: 541: _CANIDToRegs((BYTE*)&RXM1SIDH, ( Read_b_eep(0x64) << 24 ) + ( Read_b_eep(0
      +                          x64 + 1) << 16 ) + ( Read_b_eep(0x64 + 2) << 8 ) + ( Read_b_eep(0x64 + 3) ), 1);
 26713  003CFE  0E0F               	movlw	15	;volatile
 26714  003D00  0100               	movlb	0	; () banked
 26715  003D02  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26716  003D04  0E1C               	movlw	28	;volatile
 26717  003D06  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26718  003D08  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26719  003D0A  0E66               	movlw	102
 26720  003D0C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26721  003D0E  ECA8  F007         	call	_Read_b_eep	;wreg free
 26722  003D12  0100               	movlb	0	; () banked
 26723  003D14  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26724  003D16  6B71               	clrf	??_init_app_ram& (0+255),b
 26725  003D18  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26726  003D1A  0E64               	movlw	100
 26727  003D1C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26728  003D1E  ECA8  F007         	call	_Read_b_eep	;wreg free
 26729  003D22  0100               	movlb	0	; () banked
 26730  003D24  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26731  003D26  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26732  003D28  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26733  003D2A  0E65               	movlw	101
 26734  003D2C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26735  003D2E  ECA8  F007         	call	_Read_b_eep	;wreg free
 26736  003D32  D819               	call	PL56	;call to abstracted procedure
 26737  003D34  0E67               	movlw	103
 26738  003D36  6F60               	movwf	?_Read_b_eep& (0+255),b
 26739  003D38  ECA8  F007         	call	_Read_b_eep	;wreg free
 26740  003D3C  D805               	call	PL34	;call to abstracted procedure
 26741  003D3E  EC18  F016         	call	__CANIDToRegs	;wreg free
 26742                           
 26743                           ; BSR set to: 0
 26744                           ;main.c: 547: ECANSetOperationMode(0x20);
 26745  003D42  0E20               	movlw	32
 26746  003D44  EFC6  F007         	goto	_ECANSetOperationMode
 26747  003D48                     __end_of_init_app_ram:
 26748                           	opt stack 0
 26749  003D48                     PL34:
 26750                           	opt stack 23
 26751  003D48  0100               	movlb	0	; () banked
 26752  003D4A  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26753  003D4C  0E00               	movlw	0
 26754  003D4E  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26755  003D50  C075  F064         	movff	??_init_app_ram+4,?__CANIDToRegs+2
 26756  003D54  C076  F065         	movff	??_init_app_ram+5,?__CANIDToRegs+3
 26757  003D58  BF65               	btfsc	(?__CANIDToRegs+3)& (0+255),7,b
 26758  003D5A  0EFF               	movlw	-1
 26759  003D5C  6F66               	movwf	(?__CANIDToRegs+4)& (0+255),b
 26760  003D5E  6F67               	movwf	(?__CANIDToRegs+5)& (0+255),b
 26761  003D60  0E01               	movlw	1
 26762  003D62  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 26763  003D64  0C01               	retlw	1
 26764  003D66                     __end_ofPL34:
 26765                           	opt stack 0
 26766  003D66                     PL56:
 26767                           	opt stack 23
 26768  003D66  0100               	movlb	0	; () banked
 26769  003D68  2773               	addwf	(??_init_app_ram+2)& (0+255),f,b
 26770  003D6A  0E00               	movlw	0
 26771  003D6C  2374               	addwfc	(??_init_app_ram+3)& (0+255),f,b
 26772  003D6E  5171               	movf	??_init_app_ram& (0+255),w,b
 26773  003D70  2573               	addwf	(??_init_app_ram+2)& (0+255),w,b
 26774  003D72  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26775  003D74  5172               	movf	(??_init_app_ram+1)& (0+255),w,b
 26776  003D76  2174               	addwfc	(??_init_app_ram+3)& (0+255),w,b
 26777  003D78  6F76               	movwf	(??_init_app_ram+5)& (0+255),b
 26778  003D7A  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26779  003D7C  0012               	return	
 26780  003D7E                     __end_ofPL56:
 26781                           	opt stack 0
 26782                           tblptru	equ	0xFF8
 26783                           tblptrh	equ	0xFF7
 26784                           tblptrl	equ	0xFF6
 26785                           tablat	equ	0xFF5
 26786                           prodh	equ	0xFF4
 26787                           prodl	equ	0xFF3
 26788                           intcon	equ	0xFF2
 26789                           indf0	equ	0xFEF
 26790                           postinc0	equ	0xFEE
 26791                           fsr0h	equ	0xFEA
 26792                           fsr0l	equ	0xFE9
 26793                           wreg	equ	0xFE8
 26794                           indf1	equ	0xFE7
 26795                           postinc1	equ	0xFE6
 26796                           postdec1	equ	0xFE5
 26797                           fsr1h	equ	0xFE2
 26798                           fsr1l	equ	0xFE1
 26799                           indf2	equ	0xFDF
 26800                           postinc2	equ	0xFDE
 26801                           postdec2	equ	0xFDD
 26802                           plusw2	equ	0xFDB
 26803                           fsr2h	equ	0xFDA
 26804                           fsr2l	equ	0xFD9
 26805                           status	equ	0xFD8
 26806                           
 26807 ;; *************** function __CANIDToRegs *****************
 26808 ;; Defined at:
 26809 ;;		line 1101 in file "ECAN.c"
 26810 ;; Parameters:    Size  Location     Type
 26811 ;;  ptr             2    2[BANK0 ] PTR unsigned char 
 26812 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 26813 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 26814 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 26815 ;;  val             4    4[BANK0 ] unsigned long 
 26816 ;;  type            1    8[BANK0 ] unsigned char 
 26817 ;; Auto vars:     Size  Location     Type
 26818 ;;  Value           1   11[BANK0 ] PTR struct _CAN_MESSAGE_
 26819 ;;		 -> _CANIDToRegs@val(4), 
 26820 ;; Return value:  Size  Location     Type
 26821 ;;		None               void
 26822 ;; Registers used:
 26823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26824 ;; Tracked objects:
 26825 ;;		On entry : F/0
 26826 ;;		On exit  : F/0
 26827 ;;		Unchanged: 0/0
 26828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26829 ;;      Params:         0       7       0       0       0       0       0
 26830 ;;      Locals:         0       1       0       0       0       0       0
 26831 ;;      Temps:          0       2       0       0       0       0       0
 26832 ;;      Totals:         0      10       0       0       0       0       0
 26833 ;;Total ram usage:       10 bytes
 26834 ;; Hardware stack levels used:    1
 26835 ;; Hardware stack levels required when called:    3
 26836 ;; This function calls:
 26837 ;;		Nothing
 26838 ;; This function is called by:
 26839 ;;		_init_app_ram
 26840 ;;		_doModeVerbose
 26841 ;;		_ECANSendMessage
 26842 ;; This function uses a non-reentrant model
 26843 ;;
 26844                           
 26845                           	psect	text76
 26846  002C30                     __ptext76:
 26847                           	opt stack 0
 26848  002C30                     __CANIDToRegs:
 26849                           	opt stack 23
 26850                           
 26851                           ; BSR set to: 0
 26852                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 26853                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;incstack = 0
 26857                           ;incstack = 0
 26858  002C30  0E64               	movlw	low __CANIDToRegs@val
 26859  002C32  6F6B               	movwf	__CANIDToRegs@Value& (0+255),b
 26860                           
 26861                           ; BSR set to: 0
 26862                           ;ECAN.c: 1106: if ( type == 0 )
 26863  002C34  6768               	tstfsz	__CANIDToRegs@type& (0+255),b
 26864  002C36  D022               	goto	l12129
 26865                           
 26866                           ; BSR set to: 0
 26867                           ;ECAN.c: 1107: {
 26868                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 26869  002C38  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26870  002C3A  6ED9               	movwf	fsr2l,c
 26871  002C3C  6ADA               	clrf	fsr2h,c
 26872  002C3E  50DF               	movf	indf2,w,c
 26873  002C40  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26874  002C42  90D8               	bcf	status,0,c
 26875  002C44  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26876  002C46  90D8               	bcf	status,0,c
 26877  002C48  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26878  002C4A  90D8               	bcf	status,0,c
 26879  002C4C  3169               	rrcf	??__CANIDToRegs& (0+255),w,b
 26880                           
 26881                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 26882  002C4E  D862               	call	PL52	;call to abstracted procedure
 26883  002C50  2AD9               	incf	fsr2l,f,c
 26884  002C52  6ADA               	clrf	fsr2h,c
 26885  002C54  D872               	call	PL110	;call to abstracted procedure
 26886  002C56                     u14995:
 26887  002C56  90D8               	bcf	status,0,c
 26888  002C58  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26889  002C5A  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26890  002C5C  D7FC               	goto	u14995
 26891  002C5E  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26892                           
 26893                           ; BSR set to: 0
 26894                           ;ECAN.c: 1111: ptr++;
 26895                           
 26896                           ; BSR set to: 0
 26897                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 26898  002C62  D846               	call	PL32	;call to abstracted procedure
 26899  002C64  D86A               	call	PL110	;call to abstracted procedure
 26900  002C66                     u15005:
 26901  002C66  90D8               	bcf	status,0,c
 26902  002C68  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26903  002C6A  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26904  002C6C  D7FC               	goto	u15005
 26905  002C6E  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26906  002C70  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26907  002C74  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26908  002C78  6EDF               	movwf	indf2,c
 26909                           
 26910                           ;ECAN.c: 1113: }
 26911  002C7A  D039               	goto	l1570
 26912  002C7C                     l12129:
 26913                           
 26914                           ; BSR set to: 0
 26915                           ;ECAN.c: 1114: else
 26916                           ;ECAN.c: 1115: {
 26917                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 26918  002C7C  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26919  002C7E  D842               	call	PL50	;call to abstracted procedure
 26920  002C80  0E05               	movlw	5
 26921  002C82  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26922  002C84                     u15015:
 26923  002C84  90D8               	bcf	status,0,c
 26924  002C86  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26925  002C88  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26926  002C8A  D7FC               	goto	u15015
 26927  002C8C  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26928                           
 26929                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 26930  002C8E  D842               	call	PL52	;call to abstracted procedure
 26931  002C90  0E03               	movlw	3
 26932  002C92  D849               	call	PL74	;call to abstracted procedure
 26933  002C94  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26934  002C96  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26935                           
 26936                           ; BSR set to: 0
 26937                           ;ECAN.c: 1119: ptr++;
 26938                           
 26939                           ; BSR set to: 0
 26940                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 26941  002C9A  D82A               	call	PL32	;call to abstracted procedure
 26942  002C9C  0E02               	movlw	2
 26943  002C9E  D843               	call	PL74	;call to abstracted procedure
 26944  002CA0  3569               	rlcf	??__CANIDToRegs& (0+255),w,b
 26945  002CA2  0BE0               	andlw	224
 26946  002CA4  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26947  002CA8  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26948  002CAC  6EDF               	movwf	indf2,c
 26949                           
 26950                           ; BSR set to: 0
 26951                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 26952  002CAE  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26953  002CB2  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26954  002CB6  0E00               	movlw	0
 26955  002CB8  86DB               	bsf	plusw2,3,c
 26956                           
 26957                           ; BSR set to: 0
 26958                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 26959  002CBA  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26960  002CBC  D823               	call	PL50	;call to abstracted procedure
 26961  002CBE  0E03               	movlw	3
 26962  002CC0  1769               	andwf	??__CANIDToRegs& (0+255),f,b
 26963  002CC2  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26964                           
 26965                           ;ECAN.c: 1124: ptr++;
 26966                           
 26967                           ; BSR set to: 0
 26968                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 26969  002CC6  D814               	call	PL32	;call to abstracted procedure
 26970  002CC8  2AD9               	incf	fsr2l,f,c
 26971  002CCA  6ADA               	clrf	fsr2h,c
 26972  002CCC  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26973  002CD0  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26974  002CD4  CFDF FFE7          	movff	indf2,indf1
 26975                           
 26976                           ; BSR set to: 0
 26977                           ;ECAN.c: 1126: ptr++;
 26978  002CD8  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26979  002CDA  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26980                           
 26981                           ; BSR set to: 0
 26982                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 26983  002CDC  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26984  002CDE  6ED9               	movwf	fsr2l,c
 26985  002CE0  6ADA               	clrf	fsr2h,c
 26986  002CE2  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26987  002CE6  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26988  002CEA  CFDF FFE7          	movff	indf2,indf1
 26989  002CEE                     l1570:
 26990                           
 26991                           ; BSR set to: 0
 26992  002CEE  0012               	return	
 26993  002CF0                     __end_of__CANIDToRegs:
 26994                           	opt stack 0
 26995  002CF0                     PL32:
 26996                           	opt stack 23
 26997  002CF0  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26998  002CF4  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26999  002CF6  12DF               	iorwf	indf2,f,c
 27000  002CF8  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 27001  002CFA  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 27002  002CFC  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 27003  002CFE  6ED9               	movwf	fsr2l,c
 27004  002D00  6ADA               	clrf	fsr2h,c
 27005  002D02  0012               	return	
 27006  002D04                     __end_ofPL32:
 27007                           	opt stack 0
 27008  002D04                     PL50:
 27009                           	opt stack 23
 27010  002D04  6ED9               	movwf	fsr2l,c
 27011  002D06  6ADA               	clrf	fsr2h,c
 27012  002D08  0E02               	movlw	2
 27013  002D0A  26D9               	addwf	fsr2l,f,c
 27014  002D0C  6ADA               	clrf	fsr2h,c
 27015  002D0E  50DF               	movf	indf2,w,c
 27016  002D10  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27017  002D12  0012               	return	
 27018  002D14                     __end_ofPL50:
 27019                           	opt stack 0
 27020  002D14                     PL52:
 27021                           	opt stack 23
 27022  002D14  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27023  002D18  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27024  002D1C  6EDF               	movwf	indf2,c
 27025  002D1E  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 27026  002D20  6ED9               	movwf	fsr2l,c
 27027  002D22  6ADA               	clrf	fsr2h,c
 27028  002D24  0012               	return	
 27029  002D26                     __end_ofPL52:
 27030                           	opt stack 0
 27031  002D26                     PL74:
 27032                           	opt stack 23
 27033  002D26  26D9               	addwf	fsr2l,f,c
 27034  002D28  6ADA               	clrf	fsr2h,c
 27035  002D2A  50DF               	movf	indf2,w,c
 27036  002D2C  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27037  002D2E  90D8               	bcf	status,0,c
 27038  002D30  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 27039  002D32  90D8               	bcf	status,0,c
 27040  002D34  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 27041  002D36  90D8               	bcf	status,0,c
 27042  002D38  0012               	return	
 27043  002D3A                     __end_ofPL74:
 27044                           	opt stack 0
 27045  002D3A                     PL110:
 27046                           	opt stack 23
 27047  002D3A  50DF               	movf	indf2,w,c
 27048  002D3C  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27049  002D3E  0E05               	movlw	5
 27050  002D40  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 27051  002D42  0C05               	retlw	5
 27052  002D44                     __end_ofPL110:
 27053                           	opt stack 0
 27054                           tblptru	equ	0xFF8
 27055                           tblptrh	equ	0xFF7
 27056                           tblptrl	equ	0xFF6
 27057                           tablat	equ	0xFF5
 27058                           prodh	equ	0xFF4
 27059                           prodl	equ	0xFF3
 27060                           intcon	equ	0xFF2
 27061                           indf0	equ	0xFEF
 27062                           postinc0	equ	0xFEE
 27063                           fsr0h	equ	0xFEA
 27064                           fsr0l	equ	0xFE9
 27065                           wreg	equ	0xFE8
 27066                           indf1	equ	0xFE7
 27067                           postinc1	equ	0xFE6
 27068                           postdec1	equ	0xFE5
 27069                           fsr1h	equ	0xFE2
 27070                           fsr1l	equ	0xFE1
 27071                           indf2	equ	0xFDF
 27072                           postinc2	equ	0xFDE
 27073                           postdec2	equ	0xFDD
 27074                           plusw2	equ	0xFDB
 27075                           fsr2h	equ	0xFDA
 27076                           fsr2l	equ	0xFD9
 27077                           status	equ	0xFD8
 27078                           
 27079 ;; *************** function _setFilter *****************
 27080 ;; Defined at:
 27081 ;;		line 3055 in file "main.c"
 27082 ;; Parameters:    Size  Location     Type
 27083 ;;  filter          1    wreg     unsigned char 
 27084 ;;  val             4    2[BANK0 ] unsigned long 
 27085 ;; Auto vars:     Size  Location     Type
 27086 ;;  filter          1   12[BANK0 ] unsigned char 
 27087 ;;  eidl            1   16[BANK0 ] unsigned char 
 27088 ;;  eidh            1   15[BANK0 ] unsigned char 
 27089 ;;  sidl            1   14[BANK0 ] unsigned char 
 27090 ;;  sidh            1   13[BANK0 ] unsigned char 
 27091 ;; Return value:  Size  Location     Type
 27092 ;;		None               void
 27093 ;; Registers used:
 27094 ;;		wreg, status,2, status,0
 27095 ;; Tracked objects:
 27096 ;;		On entry : D/2
 27097 ;;		On exit  : F/0
 27098 ;;		Unchanged: 0/0
 27099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27100 ;;      Params:         0       4       0       0       0       0       0
 27101 ;;      Locals:         0       5       0       0       0       0       0
 27102 ;;      Temps:          0       6       0       0       0       0       0
 27103 ;;      Totals:         0      15       0       0       0       0       0
 27104 ;;Total ram usage:       15 bytes
 27105 ;; Hardware stack levels used:    1
 27106 ;; Hardware stack levels required when called:    3
 27107 ;; This function calls:
 27108 ;;		Nothing
 27109 ;; This function is called by:
 27110 ;;		_init_app_ram
 27111 ;;		_doModeVerbose
 27112 ;; This function uses a non-reentrant model
 27113 ;;
 27114                           
 27115                           	psect	text77
 27116  003D7E                     __ptext77:
 27117                           	opt stack 0
 27118  003D7E                     _setFilter:
 27119                           	opt stack 25
 27120                           
 27121                           ; BSR set to: 0
 27122                           ;incstack = 0
 27123                           ;incstack = 0
 27124                           ;setFilter@filter stored from wreg
 27125  003D7E  CFE8 F06C          	movff	wreg,setFilter@filter
 27126                           
 27127                           ;main.c: 3056: uint8_t sidh = (long) val >> 21L;
 27128  003D82  0E15               	movlw	21
 27129  003D84  0100               	movlb	0	; () banked
 27130  003D86  6F66               	movwf	??_setFilter& (0+255),b
 27131  003D88  C062  F067         	movff	setFilter@val,??_setFilter+1
 27132  003D8C  C063  F068         	movff	setFilter@val+1,??_setFilter+2
 27133  003D90  C064  F069         	movff	setFilter@val+2,??_setFilter+3
 27134  003D94  C065  F06A         	movff	setFilter@val+3,??_setFilter+4
 27135  003D98                     u14965:
 27136  003D98  6766               	tstfsz	??_setFilter& (0+255),b
 27137  003D9A  D001               	goto	u14966
 27138  003D9C  D007               	goto	u14967
 27139  003D9E                     u14966:
 27140  003D9E  356A               	rlcf	(??_setFilter+4)& (0+255),w,b
 27141  003DA0  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27142  003DA2  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27143  003DA4  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27144  003DA6  3367               	rrcf	(??_setFilter+1)& (0+255),f,b
 27145  003DA8  2F66               	decfsz	??_setFilter& (0+255),f,b
 27146  003DAA  D7F6               	goto	u14965
 27147  003DAC                     u14967:
 27148  003DAC  5167               	movf	(??_setFilter+1)& (0+255),w,b
 27149  003DAE  6F6D               	movwf	setFilter@sidh& (0+255),b
 27150                           
 27151                           ;main.c: 3057: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 27152                           ;main.c: 3058: ((long) (val) & 0x03L) |
 27153                           ;main.c: 3059: 0x08;
 27154  003DB0  C062  F066         	movff	setFilter@val,??_setFilter
 27155  003DB4  0E03               	movlw	3
 27156  003DB6  1766               	andwf	??_setFilter& (0+255),f,b
 27157  003DB8  0E0D               	movlw	13
 27158  003DBA  6F67               	movwf	(??_setFilter+1)& (0+255),b
 27159  003DBC  C062  F068         	movff	setFilter@val,??_setFilter+2
 27160  003DC0  C063  F069         	movff	setFilter@val+1,??_setFilter+3
 27161  003DC4  C064  F06A         	movff	setFilter@val+2,??_setFilter+4
 27162  003DC8  C065  F06B         	movff	setFilter@val+3,??_setFilter+5
 27163  003DCC                     u14975:
 27164  003DCC  6767               	tstfsz	(??_setFilter+1)& (0+255),b
 27165  003DCE  D001               	goto	u14976
 27166  003DD0  D007               	goto	u14977
 27167  003DD2                     u14976:
 27168  003DD2  356B               	rlcf	(??_setFilter+5)& (0+255),w,b
 27169  003DD4  336B               	rrcf	(??_setFilter+5)& (0+255),f,b
 27170  003DD6  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27171  003DD8  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27172  003DDA  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27173  003DDC  2F67               	decfsz	(??_setFilter+1)& (0+255),f,b
 27174  003DDE  D7F6               	goto	u14975
 27175  003DE0                     u14977:
 27176  003DE0  5168               	movf	(??_setFilter+2)& (0+255),w,b
 27177  003DE2  0BE0               	andlw	224
 27178  003DE4  1166               	iorwf	??_setFilter& (0+255),w,b
 27179  003DE6  0908               	iorlw	8
 27180  003DE8  6F6E               	movwf	setFilter@sidl& (0+255),b
 27181                           
 27182                           ; BSR set to: 0
 27183                           ;main.c: 3060: uint8_t eidh = (long) val >> 8L;
 27184  003DEA  C063  F06F         	movff	setFilter@val+1,setFilter@eidh
 27185                           
 27186                           ; BSR set to: 0
 27187                           ;main.c: 3061: uint8_t eidl = val;
 27188  003DEE  C062  F070         	movff	setFilter@val,setFilter@eidl
 27189                           
 27190                           ;main.c: 3063: switch (filter) {
 27191  003DF2  D090               	goto	l12117
 27192  003DF4                     l1311:
 27193                           
 27194                           ; BSR set to: 0
 27195                           ;main.c: 3066: RXF0SIDH = sidh;
 27196  003DF4  C06D  FF00         	movff	setFilter@sidh,3840	;volatile
 27197                           
 27198                           ;main.c: 3067: RXF0SIDL = sidl;
 27199  003DF8  C06E  FF01         	movff	setFilter@sidl,3841	;volatile
 27200                           
 27201                           ;main.c: 3068: RXF0EIDH = eidh;
 27202  003DFC  C06F  FF02         	movff	setFilter@eidh,3842	;volatile
 27203                           
 27204                           ;main.c: 3069: RXF0EIDL = eidl;
 27205  003E00  C070  FF03         	movff	setFilter@eidl,3843	;volatile
 27206                           
 27207                           ;main.c: 3070: break;
 27208  003E04  D0AA               	goto	l1328
 27209  003E06                     l1313:
 27210                           
 27211                           ; BSR set to: 0
 27212                           ;main.c: 3073: RXF1SIDH = sidh;
 27213  003E06  C06D  FF04         	movff	setFilter@sidh,3844	;volatile
 27214                           
 27215                           ;main.c: 3074: RXF1SIDL = sidl;
 27216  003E0A  C06E  FF05         	movff	setFilter@sidl,3845	;volatile
 27217                           
 27218                           ;main.c: 3075: RXF1EIDH = eidh;
 27219  003E0E  C06F  FF06         	movff	setFilter@eidh,3846	;volatile
 27220                           
 27221                           ;main.c: 3076: RXF1EIDL = eidl;
 27222  003E12  C070  FF07         	movff	setFilter@eidl,3847	;volatile
 27223                           
 27224                           ;main.c: 3077: break;
 27225  003E16  D0A1               	goto	l1328
 27226  003E18                     l1314:
 27227                           
 27228                           ; BSR set to: 0
 27229                           ;main.c: 3080: RXF2SIDH = sidh;
 27230  003E18  C06D  FF08         	movff	setFilter@sidh,3848	;volatile
 27231                           
 27232                           ;main.c: 3081: RXF2SIDL = sidl;
 27233  003E1C  C06E  FF09         	movff	setFilter@sidl,3849	;volatile
 27234                           
 27235                           ;main.c: 3082: RXF2EIDH = eidh;
 27236  003E20  C06F  FF0A         	movff	setFilter@eidh,3850	;volatile
 27237                           
 27238                           ;main.c: 3083: RXF2EIDL = eidl;
 27239  003E24  C070  FF0B         	movff	setFilter@eidl,3851	;volatile
 27240                           
 27241                           ;main.c: 3084: break;
 27242  003E28  D098               	goto	l1328
 27243  003E2A                     l1315:
 27244                           
 27245                           ; BSR set to: 0
 27246                           ;main.c: 3087: RXF3SIDH = sidh;
 27247  003E2A  C06D  FF0C         	movff	setFilter@sidh,3852	;volatile
 27248                           
 27249                           ;main.c: 3088: RXF3SIDL = sidl;
 27250  003E2E  C06E  FF0D         	movff	setFilter@sidl,3853	;volatile
 27251                           
 27252                           ;main.c: 3089: RXF3EIDH = eidh;
 27253  003E32  C06F  FF0E         	movff	setFilter@eidh,3854	;volatile
 27254                           
 27255                           ;main.c: 3090: RXF3EIDL = eidl;
 27256  003E36  C070  FF0F         	movff	setFilter@eidl,3855	;volatile
 27257                           
 27258                           ;main.c: 3091: break;
 27259  003E3A  D08F               	goto	l1328
 27260  003E3C                     l1316:
 27261                           
 27262                           ; BSR set to: 0
 27263                           ;main.c: 3094: RXF4SIDH = sidh;
 27264  003E3C  C06D  FF10         	movff	setFilter@sidh,3856	;volatile
 27265                           
 27266                           ;main.c: 3095: RXF4SIDL = sidl;
 27267  003E40  C06E  FF11         	movff	setFilter@sidl,3857	;volatile
 27268                           
 27269                           ;main.c: 3096: RXF4EIDH = eidh;
 27270  003E44  C06F  FF12         	movff	setFilter@eidh,3858	;volatile
 27271                           
 27272                           ;main.c: 3097: RXF4EIDL = eidl;
 27273  003E48  C070  FF13         	movff	setFilter@eidl,3859	;volatile
 27274                           
 27275                           ;main.c: 3098: break;
 27276  003E4C  D086               	goto	l1328
 27277  003E4E                     l1317:
 27278                           
 27279                           ; BSR set to: 0
 27280                           ;main.c: 3101: RXF5SIDH = sidh;
 27281  003E4E  C06D  FF14         	movff	setFilter@sidh,3860	;volatile
 27282                           
 27283                           ;main.c: 3102: RXF5SIDL = sidl;
 27284  003E52  C06E  FF15         	movff	setFilter@sidl,3861	;volatile
 27285                           
 27286                           ;main.c: 3103: RXF5EIDH = eidh;
 27287  003E56  C06F  FF16         	movff	setFilter@eidh,3862	;volatile
 27288                           
 27289                           ;main.c: 3104: RXF5EIDL = eidl;
 27290  003E5A  C070  FF17         	movff	setFilter@eidl,3863	;volatile
 27291                           
 27292                           ;main.c: 3105: break;
 27293  003E5E  D07D               	goto	l1328
 27294  003E60                     l1318:
 27295                           
 27296                           ; BSR set to: 0
 27297                           ;main.c: 3108: RXF6SIDH = sidh;
 27298  003E60  C06D  FD60         	movff	setFilter@sidh,3424	;volatile
 27299                           
 27300                           ;main.c: 3109: RXF6SIDL = sidl;
 27301  003E64  C06E  FD61         	movff	setFilter@sidl,3425	;volatile
 27302                           
 27303                           ;main.c: 3110: RXF6EIDH = eidh;
 27304  003E68  C06F  FD62         	movff	setFilter@eidh,3426	;volatile
 27305                           
 27306                           ;main.c: 3111: RXF6EIDL = eidl;
 27307  003E6C  C070  FD63         	movff	setFilter@eidl,3427	;volatile
 27308                           
 27309                           ;main.c: 3112: break;
 27310  003E70  D074               	goto	l1328
 27311  003E72                     l1319:
 27312                           
 27313                           ; BSR set to: 0
 27314                           ;main.c: 3115: RXF7SIDH = sidh;
 27315  003E72  C06D  FD64         	movff	setFilter@sidh,3428	;volatile
 27316                           
 27317                           ;main.c: 3116: RXF7SIDL = sidl;
 27318  003E76  C06E  FD65         	movff	setFilter@sidl,3429	;volatile
 27319                           
 27320                           ;main.c: 3117: RXF7EIDH = eidh;
 27321  003E7A  C06F  FD66         	movff	setFilter@eidh,3430	;volatile
 27322                           
 27323                           ;main.c: 3118: RXF7EIDL = eidl;
 27324  003E7E  C070  FD67         	movff	setFilter@eidl,3431	;volatile
 27325                           
 27326                           ;main.c: 3119: break;
 27327  003E82  D06B               	goto	l1328
 27328  003E84                     l1320:
 27329                           
 27330                           ; BSR set to: 0
 27331                           ;main.c: 3122: RXF8SIDH = sidh;
 27332  003E84  C06D  FD68         	movff	setFilter@sidh,3432	;volatile
 27333                           
 27334                           ;main.c: 3123: RXF8SIDL = sidl;
 27335  003E88  C06E  FD69         	movff	setFilter@sidl,3433	;volatile
 27336                           
 27337                           ;main.c: 3124: RXF8EIDH = eidh;
 27338  003E8C  C06F  FD6A         	movff	setFilter@eidh,3434	;volatile
 27339                           
 27340                           ;main.c: 3125: RXF8EIDL = eidl;
 27341  003E90  C070  FD6B         	movff	setFilter@eidl,3435	;volatile
 27342                           
 27343                           ;main.c: 3126: break;
 27344  003E94  D062               	goto	l1328
 27345  003E96                     l1321:
 27346                           
 27347                           ; BSR set to: 0
 27348                           ;main.c: 3129: RXF9SIDH = sidh;
 27349  003E96  C06D  FD70         	movff	setFilter@sidh,3440	;volatile
 27350                           
 27351                           ;main.c: 3130: RXF9SIDL = sidl;
 27352  003E9A  C06E  FD71         	movff	setFilter@sidl,3441	;volatile
 27353                           
 27354                           ;main.c: 3131: RXF9EIDH = eidh;
 27355  003E9E  C06F  FD72         	movff	setFilter@eidh,3442	;volatile
 27356                           
 27357                           ;main.c: 3132: RXF9EIDL = eidl;
 27358  003EA2  C070  FD73         	movff	setFilter@eidl,3443	;volatile
 27359                           
 27360                           ;main.c: 3133: break;
 27361  003EA6  D059               	goto	l1328
 27362  003EA8                     l1322:
 27363                           
 27364                           ; BSR set to: 0
 27365                           ;main.c: 3136: RXF10SIDH = sidh;
 27366  003EA8  C06D  FD74         	movff	setFilter@sidh,3444	;volatile
 27367                           
 27368                           ;main.c: 3137: RXF10SIDL = sidl;
 27369  003EAC  C06E  FD75         	movff	setFilter@sidl,3445	;volatile
 27370                           
 27371                           ;main.c: 3138: RXF10EIDH = eidh;
 27372  003EB0  C06F  FD76         	movff	setFilter@eidh,3446	;volatile
 27373                           
 27374                           ;main.c: 3139: RXF10EIDL = eidl;
 27375  003EB4  C070  FD77         	movff	setFilter@eidl,3447	;volatile
 27376                           
 27377                           ;main.c: 3140: break;
 27378  003EB8  D050               	goto	l1328
 27379  003EBA                     l1323:
 27380                           
 27381                           ; BSR set to: 0
 27382                           ;main.c: 3143: RXF11SIDH = sidh;
 27383  003EBA  C06D  FD78         	movff	setFilter@sidh,3448	;volatile
 27384                           
 27385                           ;main.c: 3144: RXF11SIDL = sidl;
 27386  003EBE  C06E  FD79         	movff	setFilter@sidl,3449	;volatile
 27387                           
 27388                           ;main.c: 3145: RXF11EIDH = eidh;
 27389  003EC2  C06F  FD7A         	movff	setFilter@eidh,3450	;volatile
 27390                           
 27391                           ;main.c: 3146: RXF11EIDL = eidl;
 27392  003EC6  C070  FD7B         	movff	setFilter@eidl,3451	;volatile
 27393                           
 27394                           ;main.c: 3147: break;
 27395  003ECA  D047               	goto	l1328
 27396  003ECC                     l1324:
 27397                           
 27398                           ; BSR set to: 0
 27399                           ;main.c: 3150: RXF12SIDH = sidh;
 27400  003ECC  C06D  FD80         	movff	setFilter@sidh,3456	;volatile
 27401                           
 27402                           ;main.c: 3151: RXF12SIDL = sidl;
 27403  003ED0  C06E  FD81         	movff	setFilter@sidl,3457	;volatile
 27404                           
 27405                           ;main.c: 3152: RXF12EIDH = eidh;
 27406  003ED4  C06F  FD82         	movff	setFilter@eidh,3458	;volatile
 27407                           
 27408                           ;main.c: 3153: RXF12EIDL = eidl;
 27409  003ED8  C070  FD83         	movff	setFilter@eidl,3459	;volatile
 27410                           
 27411                           ;main.c: 3154: break;
 27412  003EDC  D03E               	goto	l1328
 27413  003EDE                     l1325:
 27414                           
 27415                           ; BSR set to: 0
 27416                           ;main.c: 3157: RXF13SIDH = sidh;
 27417  003EDE  C06D  FD84         	movff	setFilter@sidh,3460	;volatile
 27418                           
 27419                           ;main.c: 3158: RXF13SIDL = sidl;
 27420  003EE2  C06E  FD85         	movff	setFilter@sidl,3461	;volatile
 27421                           
 27422                           ;main.c: 3159: RXF13EIDH = eidh;
 27423  003EE6  C06F  FD86         	movff	setFilter@eidh,3462	;volatile
 27424                           
 27425                           ;main.c: 3160: RXF13EIDL = eidl;
 27426  003EEA  C070  FD87         	movff	setFilter@eidl,3463	;volatile
 27427                           
 27428                           ;main.c: 3161: break;
 27429  003EEE  D035               	goto	l1328
 27430  003EF0                     l1326:
 27431                           
 27432                           ; BSR set to: 0
 27433                           ;main.c: 3164: RXF14SIDH = sidh;
 27434  003EF0  C06D  FD88         	movff	setFilter@sidh,3464	;volatile
 27435                           
 27436                           ;main.c: 3165: RXF14SIDL = sidl;
 27437  003EF4  C06E  FD89         	movff	setFilter@sidl,3465	;volatile
 27438                           
 27439                           ;main.c: 3166: RXF14EIDH = eidh;
 27440  003EF8  C06F  FD8A         	movff	setFilter@eidh,3466	;volatile
 27441                           
 27442                           ;main.c: 3167: RXF14EIDL = eidl;
 27443  003EFC  C070  FD8B         	movff	setFilter@eidl,3467	;volatile
 27444                           
 27445                           ;main.c: 3168: break;
 27446  003F00  D02C               	goto	l1328
 27447  003F02                     l1327:
 27448                           
 27449                           ; BSR set to: 0
 27450                           ;main.c: 3171: RXF15SIDH = sidh;
 27451  003F02  C06D  FD90         	movff	setFilter@sidh,3472	;volatile
 27452                           
 27453                           ;main.c: 3172: RXF15SIDL = sidl;
 27454  003F06  C06E  FD91         	movff	setFilter@sidl,3473	;volatile
 27455                           
 27456                           ;main.c: 3173: RXF15EIDH = eidh;
 27457  003F0A  C06F  FD92         	movff	setFilter@eidh,3474	;volatile
 27458                           
 27459                           ;main.c: 3174: RXF15EIDL = eidl;
 27460  003F0E  C070  FD93         	movff	setFilter@eidl,3475	;volatile
 27461                           
 27462                           ;main.c: 3175: break;
 27463  003F12  D023               	goto	l1328
 27464  003F14                     l12117:
 27465                           
 27466                           ; BSR set to: 0
 27467  003F14  516C               	movf	setFilter@filter& (0+255),w,b
 27468                           
 27469                           ; Switch size 1, requested type "space"
 27470                           ; Number of cases is 16, Range of values is 0 to 15
 27471                           ; switch strategies available:
 27472                           ; Name         Instructions Cycles
 27473                           ; simple_byte           49    25 (average)
 27474                           ;	Chosen strategy is simple_byte
 27475  003F16  E101 D76D          	bz	l1311
 27476  003F1A  0A01               	xorlw	1	; case 1
 27477  003F1C  E101 D773          	bz	l1313
 27478  003F20  0A03               	xorlw	3	; case 2
 27479  003F22  E101 D779          	bz	l1314
 27480  003F26  0A01               	xorlw	1	; case 3
 27481  003F28  E080               	bz	l1315
 27482  003F2A  0A07               	xorlw	7	; case 4
 27483  003F2C  E087               	bz	l1316
 27484  003F2E  0A01               	xorlw	1	; case 5
 27485  003F30  E08E               	bz	l1317
 27486  003F32  0A03               	xorlw	3	; case 6
 27487  003F34  E095               	bz	l1318
 27488  003F36  0A01               	xorlw	1	; case 7
 27489  003F38  E09C               	bz	l1319
 27490  003F3A  0A0F               	xorlw	15	; case 8
 27491  003F3C  E0A3               	bz	l1320
 27492  003F3E  0A01               	xorlw	1	; case 9
 27493  003F40  E0AA               	bz	l1321
 27494  003F42  0A03               	xorlw	3	; case 10
 27495  003F44  E0B1               	bz	l1322
 27496  003F46  0A01               	xorlw	1	; case 11
 27497  003F48  E0B8               	bz	l1323
 27498  003F4A  0A07               	xorlw	7	; case 12
 27499  003F4C  E0BF               	bz	l1324
 27500  003F4E  0A01               	xorlw	1	; case 13
 27501  003F50  E0C6               	bz	l1325
 27502  003F52  0A03               	xorlw	3	; case 14
 27503  003F54  E0CD               	bz	l1326
 27504  003F56  0A01               	xorlw	1	; case 15
 27505  003F58  E0D4               	bz	l1327
 27506  003F5A                     l1328:
 27507                           
 27508                           ; BSR set to: 0
 27509  003F5A  0012               	return	
 27510  003F5C                     __end_of_setFilter:
 27511                           	opt stack 0
 27512                           tblptru	equ	0xFF8
 27513                           tblptrh	equ	0xFF7
 27514                           tblptrl	equ	0xFF6
 27515                           tablat	equ	0xFF5
 27516                           prodh	equ	0xFF4
 27517                           prodl	equ	0xFF3
 27518                           intcon	equ	0xFF2
 27519                           indf0	equ	0xFEF
 27520                           postinc0	equ	0xFEE
 27521                           fsr0h	equ	0xFEA
 27522                           fsr0l	equ	0xFE9
 27523                           wreg	equ	0xFE8
 27524                           indf1	equ	0xFE7
 27525                           postinc1	equ	0xFE6
 27526                           postdec1	equ	0xFE5
 27527                           fsr1h	equ	0xFE2
 27528                           fsr1l	equ	0xFE1
 27529                           indf2	equ	0xFDF
 27530                           postinc2	equ	0xFDE
 27531                           postdec2	equ	0xFDD
 27532                           plusw2	equ	0xFDB
 27533                           fsr2h	equ	0xFDA
 27534                           fsr2l	equ	0xFD9
 27535                           status	equ	0xFD8
 27536                           
 27537 ;; *************** function _ECANSetOperationMode *****************
 27538 ;; Defined at:
 27539 ;;		line 1014 in file "ECAN.c"
 27540 ;; Parameters:    Size  Location     Type
 27541 ;;  mode            1    wreg     enum E16346
 27542 ;; Auto vars:     Size  Location     Type
 27543 ;;  mode            1    0[BANK0 ] enum E16346
 27544 ;; Return value:  Size  Location     Type
 27545 ;;		None               void
 27546 ;; Registers used:
 27547 ;;		wreg, status,2, status,0
 27548 ;; Tracked objects:
 27549 ;;		On entry : 0/1
 27550 ;;		On exit  : F/0
 27551 ;;		Unchanged: 0/0
 27552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27553 ;;      Params:         0       0       0       0       0       0       0
 27554 ;;      Locals:         0       1       0       0       0       0       0
 27555 ;;      Temps:          0       0       0       0       0       0       0
 27556 ;;      Totals:         0       1       0       0       0       0       0
 27557 ;;Total ram usage:        1 bytes
 27558 ;; Hardware stack levels used:    1
 27559 ;; Hardware stack levels required when called:    3
 27560 ;; This function calls:
 27561 ;;		Nothing
 27562 ;; This function is called by:
 27563 ;;		_main
 27564 ;;		_init_app_ram
 27565 ;;		_doModeVerbose
 27566 ;;		_doModeVscp
 27567 ;;		_doModeSLCAN
 27568 ;;		_ECANInitialize
 27569 ;; This function uses a non-reentrant model
 27570 ;;
 27571                           
 27572                           	psect	text78
 27573  000F8C                     __ptext78:
 27574                           	opt stack 0
 27575  000F8C                     _ECANSetOperationMode:
 27576                           	opt stack 25
 27577                           
 27578                           ; BSR set to: 0
 27579                           ;incstack = 0
 27580                           ;incstack = 0
 27581                           ;ECANSetOperationMode@mode stored from wreg
 27582  000F8C  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 27583                           
 27584                           ;ECAN.c: 1015: CANCON &= 0x1F;
 27585  000F90  0E1F               	movlw	31
 27586  000F92  166F               	andwf	3951,f,c	;volatile
 27587                           
 27588                           ;ECAN.c: 1016: CANCON |= mode;
 27589  000F94  0100               	movlb	0	; () banked
 27590  000F96  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 27591  000F98  126F               	iorwf	3951,f,c	;volatile
 27592  000F9A                     l14391:
 27593                           
 27594                           ; BSR set to: 0
 27595  000F9A  506F               	movf	3951,w,c	;volatile
 27596  000F9C  0BE0               	andlw	224
 27597  000F9E  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 27598  000FA0  B4D8               	btfsc	status,2,c
 27599                           
 27600                           ; BSR set to: 0
 27601  000FA2  0012               	return	
 27602  000FA4  D7FA               	goto	l14391
 27603  000FA6                     __end_of_ECANSetOperationMode:
 27604                           	opt stack 0
 27605                           tblptru	equ	0xFF8
 27606                           tblptrh	equ	0xFF7
 27607                           tblptrl	equ	0xFF6
 27608                           tablat	equ	0xFF5
 27609                           prodh	equ	0xFF4
 27610                           prodl	equ	0xFF3
 27611                           intcon	equ	0xFF2
 27612                           indf0	equ	0xFEF
 27613                           postinc0	equ	0xFEE
 27614                           fsr0h	equ	0xFEA
 27615                           fsr0l	equ	0xFE9
 27616                           wreg	equ	0xFE8
 27617                           indf1	equ	0xFE7
 27618                           postinc1	equ	0xFE6
 27619                           postdec1	equ	0xFE5
 27620                           fsr1h	equ	0xFE2
 27621                           fsr1l	equ	0xFE1
 27622                           indf2	equ	0xFDF
 27623                           postinc2	equ	0xFDE
 27624                           postdec2	equ	0xFDD
 27625                           plusw2	equ	0xFDB
 27626                           fsr2h	equ	0xFDA
 27627                           fsr2l	equ	0xFD9
 27628                           status	equ	0xFD8
 27629                           
 27630 ;; *************** function _Read_b_eep *****************
 27631 ;; Defined at:
 27632 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 27633 ;; Parameters:    Size  Location     Type
 27634 ;;  badd            2    0[BANK0 ] unsigned int 
 27635 ;; Auto vars:     Size  Location     Type
 27636 ;;		None
 27637 ;; Return value:  Size  Location     Type
 27638 ;;                  1    wreg      unsigned char 
 27639 ;; Registers used:
 27640 ;;		wreg, status,2
 27641 ;; Tracked objects:
 27642 ;;		On entry : F/0
 27643 ;;		On exit  : 0/0
 27644 ;;		Unchanged: 0/0
 27645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27646 ;;      Params:         0       2       0       0       0       0       0
 27647 ;;      Locals:         0       0       0       0       0       0       0
 27648 ;;      Temps:          0       0       0       0       0       0       0
 27649 ;;      Totals:         0       2       0       0       0       0       0
 27650 ;;Total ram usage:        2 bytes
 27651 ;; Hardware stack levels used:    1
 27652 ;; Hardware stack levels required when called:    3
 27653 ;; This function calls:
 27654 ;;		Nothing
 27655 ;; This function is called by:
 27656 ;;		_main
 27657 ;;		_init_app_ram
 27658 ;; This function uses a non-reentrant model
 27659 ;;
 27660                           
 27661                           	psect	text79
 27662  000F50                     __ptext79:
 27663                           	opt stack 0
 27664  000F50                     _Read_b_eep:
 27665                           	opt stack 23
 27666                           
 27667                           ; BSR set to: 0
 27668                           
 27669                           ; BSR set to: 0
 27670                           ;incstack = 0
 27671                           ;incstack = 0
 27672  000F50  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 27673  000F54  9CA6               	bcf	4006,6,c	;volatile
 27674  000F56  9EA6               	bcf	4006,7,c	;volatile
 27675  000F58  80A6               	bsf	4006,0,c	;volatile
 27676  000F5A  F000               	nop		;# 
 27677  000F5C  F000               	nop		;# 
 27678  000F5E  50A8               	movf	4008,w,c	;volatile
 27679  000F60  0012               	return	
 27680  000F62                     __end_of_Read_b_eep:
 27681                           	opt stack 0
 27682                           tblptru	equ	0xFF8
 27683                           tblptrh	equ	0xFF7
 27684                           tblptrl	equ	0xFF6
 27685                           tablat	equ	0xFF5
 27686                           prodh	equ	0xFF4
 27687                           prodl	equ	0xFF3
 27688                           intcon	equ	0xFF2
 27689                           indf0	equ	0xFEF
 27690                           postinc0	equ	0xFEE
 27691                           fsr0h	equ	0xFEA
 27692                           fsr0l	equ	0xFE9
 27693                           wreg	equ	0xFE8
 27694                           indf1	equ	0xFE7
 27695                           postinc1	equ	0xFE6
 27696                           postdec1	equ	0xFE5
 27697                           fsr1h	equ	0xFE2
 27698                           fsr1l	equ	0xFE1
 27699                           indf2	equ	0xFDF
 27700                           postinc2	equ	0xFDE
 27701                           postdec2	equ	0xFDD
 27702                           plusw2	equ	0xFDB
 27703                           fsr2h	equ	0xFDA
 27704                           fsr2l	equ	0xFD9
 27705                           status	equ	0xFD8
 27706                           
 27707 ;; *************** function _WriteTimer0 *****************
 27708 ;; Defined at:
 27709 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27710 ;; Parameters:    Size  Location     Type
 27711 ;;  timer0          2    0[BANK0 ] unsigned int 
 27712 ;; Auto vars:     Size  Location     Type
 27713 ;;  timer           2    2[BANK0 ] struct Timers
 27714 ;; Return value:  Size  Location     Type
 27715 ;;		None               void
 27716 ;; Registers used:
 27717 ;;		None
 27718 ;; Tracked objects:
 27719 ;;		On entry : F/0
 27720 ;;		On exit  : F/0
 27721 ;;		Unchanged: F/0
 27722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27723 ;;      Params:         0       2       0       0       0       0       0
 27724 ;;      Locals:         0       2       0       0       0       0       0
 27725 ;;      Temps:          0       0       0       0       0       0       0
 27726 ;;      Totals:         0       4       0       0       0       0       0
 27727 ;;Total ram usage:        4 bytes
 27728 ;; Hardware stack levels used:    1
 27729 ;; Hardware stack levels required when called:    3
 27730 ;; This function calls:
 27731 ;;		Nothing
 27732 ;; This function is called by:
 27733 ;;		_init
 27734 ;; This function uses a non-reentrant model
 27735 ;;
 27736                           
 27737                           	psect	text80
 27738  000F3E                     __ptext80:
 27739                           	opt stack 0
 27740  000F3E                     _WriteTimer0:
 27741                           	opt stack 25
 27742                           
 27743                           ; BSR set to: 0
 27744                           
 27745                           ;incstack = 0
 27746                           ;incstack = 0
 27747  000F3E  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 27748  000F42  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 27749  000F46  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 27750  000F4A  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 27751                           
 27752                           ; BSR set to: 0
 27753  000F4E  0012               	return	
 27754  000F50                     __end_of_WriteTimer0:
 27755                           	opt stack 0
 27756                           tblptru	equ	0xFF8
 27757                           tblptrh	equ	0xFF7
 27758                           tblptrl	equ	0xFF6
 27759                           tablat	equ	0xFF5
 27760                           prodh	equ	0xFF4
 27761                           prodl	equ	0xFF3
 27762                           intcon	equ	0xFF2
 27763                           indf0	equ	0xFEF
 27764                           postinc0	equ	0xFEE
 27765                           fsr0h	equ	0xFEA
 27766                           fsr0l	equ	0xFE9
 27767                           wreg	equ	0xFE8
 27768                           indf1	equ	0xFE7
 27769                           postinc1	equ	0xFE6
 27770                           postdec1	equ	0xFE5
 27771                           fsr1h	equ	0xFE2
 27772                           fsr1l	equ	0xFE1
 27773                           indf2	equ	0xFDF
 27774                           postinc2	equ	0xFDE
 27775                           postdec2	equ	0xFDD
 27776                           plusw2	equ	0xFDB
 27777                           fsr2h	equ	0xFDA
 27778                           fsr2l	equ	0xFD9
 27779                           status	equ	0xFD8
 27780                           
 27781 ;; *************** function _fifo_init *****************
 27782 ;; Defined at:
 27783 ;;		line 14 in file "fifo.c"
 27784 ;; Parameters:    Size  Location     Type
 27785 ;;  f               2    0[BANK0 ] PTR struct .
 27786 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27787 ;;  buf             2    2[BANK0 ] PTR const void 
 27788 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 27789 ;;  size            2    4[BANK0 ] unsigned short 
 27790 ;; Auto vars:     Size  Location     Type
 27791 ;;		None
 27792 ;; Return value:  Size  Location     Type
 27793 ;;		None               void
 27794 ;; Registers used:
 27795 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27796 ;; Tracked objects:
 27797 ;;		On entry : F/0
 27798 ;;		On exit  : F/0
 27799 ;;		Unchanged: 0/0
 27800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27801 ;;      Params:         0       6       0       0       0       0       0
 27802 ;;      Locals:         0       0       0       0       0       0       0
 27803 ;;      Temps:          0       0       0       0       0       0       0
 27804 ;;      Totals:         0       6       0       0       0       0       0
 27805 ;;Total ram usage:        6 bytes
 27806 ;; Hardware stack levels used:    1
 27807 ;; Hardware stack levels required when called:    3
 27808 ;; This function calls:
 27809 ;;		Nothing
 27810 ;; This function is called by:
 27811 ;;		_main
 27812 ;; This function uses a non-reentrant model
 27813 ;;
 27814                           
 27815                           	psect	text81
 27816  001256                     __ptext81:
 27817                           	opt stack 0
 27818  001256                     _fifo_init:
 27819                           	opt stack 26
 27820                           
 27821                           ; BSR set to: 0
 27822                           ;fifo.c: 15: f->head = 0;
 27823                           
 27824                           ; BSR set to: 0
 27825                           ;incstack = 0
 27826                           ;incstack = 0
 27827  001256  EE20 F002          	lfsr	2,2
 27828  00125A  D816               	call	PL106	;call to abstracted procedure
 27829                           
 27830                           ;fifo.c: 16: f->tail = 0;
 27831  00125C  EE20 F004          	lfsr	2,4
 27832  001260  D813               	call	PL106	;call to abstracted procedure
 27833                           
 27834                           ;fifo.c: 17: f->size = size;
 27835  001262  EE20 F006          	lfsr	2,6
 27836  001266  5160               	movf	fifo_init@f& (0+255),w,b
 27837  001268  26D9               	addwf	fsr2l,f,c
 27838  00126A  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27839  00126C  22DA               	addwfc	fsr2h,f,c
 27840  00126E  C064  FFDE         	movff	fifo_init@size,postinc2
 27841  001272  C065  FFDD         	movff	fifo_init@size+1,postdec2
 27842                           
 27843                           ; BSR set to: 0
 27844                           ;fifo.c: 18: f->buf = buf;
 27845  001276  C060  FFD9         	movff	fifo_init@f,fsr2l
 27846  00127A  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 27847  00127E  C062  FFDE         	movff	fifo_init@buf,postinc2
 27848  001282  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 27849                           
 27850                           ; BSR set to: 0
 27851  001286  0012               	return	
 27852  001288                     __end_of_fifo_init:
 27853                           	opt stack 0
 27854  001288                     PL106:
 27855                           	opt stack 26
 27856  001288  5160               	movf	fifo_init@f& (0+255),w,b
 27857  00128A  26D9               	addwf	fsr2l,f,c
 27858  00128C  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27859  00128E  22DA               	addwfc	fsr2h,f,c
 27860  001290  6ADE               	clrf	postinc2,c
 27861  001292  6ADD               	clrf	postdec2,c
 27862  001294  0012               	return	
 27863  001296                     __end_ofPL106:
 27864                           	opt stack 0
 27865                           tblptru	equ	0xFF8
 27866                           tblptrh	equ	0xFF7
 27867                           tblptrl	equ	0xFF6
 27868                           tablat	equ	0xFF5
 27869                           prodh	equ	0xFF4
 27870                           prodl	equ	0xFF3
 27871                           intcon	equ	0xFF2
 27872                           indf0	equ	0xFEF
 27873                           postinc0	equ	0xFEE
 27874                           fsr0h	equ	0xFEA
 27875                           fsr0l	equ	0xFE9
 27876                           wreg	equ	0xFE8
 27877                           indf1	equ	0xFE7
 27878                           postinc1	equ	0xFE6
 27879                           postdec1	equ	0xFE5
 27880                           fsr1h	equ	0xFE2
 27881                           fsr1l	equ	0xFE1
 27882                           indf2	equ	0xFDF
 27883                           postinc2	equ	0xFDE
 27884                           postdec2	equ	0xFDD
 27885                           plusw2	equ	0xFDB
 27886                           fsr2h	equ	0xFDA
 27887                           fsr2l	equ	0xFD9
 27888                           status	equ	0xFD8
 27889                           
 27890 ;; *************** function _Interrupt *****************
 27891 ;; Defined at:
 27892 ;;		line 145 in file "main.c"
 27893 ;; Parameters:    Size  Location     Type
 27894 ;;		None
 27895 ;; Auto vars:     Size  Location     Type
 27896 ;;  fail            1   32[COMRAM] unsigned char 
 27897 ;;  c               1   31[COMRAM] unsigned char 
 27898 ;; Return value:  Size  Location     Type
 27899 ;;		None               void
 27900 ;; Registers used:
 27901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27902 ;; Tracked objects:
 27903 ;;		On entry : 0/0
 27904 ;;		On exit  : 0/0
 27905 ;;		Unchanged: 0/0
 27906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27907 ;;      Params:         0       0       0       0       0       0       0
 27908 ;;      Locals:         2       0       0       0       0       0       0
 27909 ;;      Temps:          9       0       0       0       0       0       0
 27910 ;;      Totals:        11       0       0       0       0       0       0
 27911 ;;Total ram usage:       11 bytes
 27912 ;; Hardware stack levels used:    1
 27913 ;; Hardware stack levels required when called:    2
 27914 ;; This function calls:
 27915 ;;		_ReadUSART
 27916 ;;		_fifo_write
 27917 ;;		_ECANReceiveMessage
 27918 ;;		_fifo_getFree
 27919 ;;		i1_WriteTimer0
 27920 ;; This function is called by:
 27921 ;;		Interrupt level 1
 27922 ;; This function uses a non-reentrant model
 27923 ;;
 27924                           
 27925                           	psect	intcodelo
 27926  000018                     __pintcodelo:
 27927                           	opt stack 0
 27928  000018                     _Interrupt:
 27929                           	opt stack 19
 27930                           
 27931                           ; BSR set to: 0
 27932                           ;incstack = 0
 27933  000018  CFD8 F019          	movff	status,??_Interrupt+2
 27934  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 27935  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 27936  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 27937  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 27938  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 27939  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 27940  000034                     
 27941                           ;main.c: 146: uint8_t c;
 27942                           ;main.c: 149: if ( 1 == PIR1bits.RCIF ) {
 27943  000034  AA9E               	btfss	3998,5,c	;volatile
 27944  000036  D001               	goto	i1u1815_21
 27945  000038  D001               	goto	i1u1815_20
 27946  00003A                     i1u1815_21:
 27947  00003A  D02B               	goto	i1l401
 27948  00003C                     i1u1815_20:
 27949  00003C                     
 27950                           ;main.c: 151: c = ReadUSART();
 27951  00003C  ECD3  F007         	call	_ReadUSART	;wreg free
 27952  000040  6E20               	movwf	Interrupt@c,c
 27953  000042                     
 27954                           ;main.c: 153: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 27955  000042  0101               	movlb	1	; () banked
 27956  000044  0E01               	movlw	high _serialInputFifo
 27957  000046  6E02               	movwf	?_fifo_write+1,c
 27958  000048  0EDD               	movlw	low _serialInputFifo
 27959  00004A  6E01               	movwf	?_fifo_write,c
 27960  00004C  0E20               	movlw	low Interrupt@c
 27961  00004E  6E03               	movwf	?_fifo_write+2,c
 27962  000050  0E00               	movlw	high Interrupt@c
 27963  000052  6E04               	movwf	?_fifo_write+3,c
 27964  000054  0E0F               	movlw	15
 27965  000056  6E04               	movwf	?_fifo_write+3,c
 27966  000058  0E5F               	movlw	__accesstop+-1
 27967  00005A  6403               	cpfsgt	?_fifo_write+2,c
 27968  00005C  6A04               	clrf	?_fifo_write+3,c
 27969  00005E  0E01               	movlw	1
 27970  000060  6E05               	movwf	?_fifo_write+4,c
 27971  000062  0E00               	movlw	0
 27972  000064  6E06               	movwf	?_fifo_write+5,c
 27973  000066  0E00               	movlw	0
 27974  000068  6E07               	movwf	?_fifo_write+6,c
 27975  00006A  0E00               	movlw	0
 27976  00006C  6E08               	movwf	?_fifo_write+7,c
 27977  00006E  EC31  F017         	call	_fifo_write	;wreg free
 27978  000072  0401               	decf	?_fifo_write,w,c
 27979  000074  1002               	iorwf	?_fifo_write+1,w,c
 27980  000076  B4D8               	btfsc	status,2,c
 27981  000078  D001               	goto	i1u1816_21
 27982  00007A  D001               	goto	i1u1816_20
 27983  00007C                     i1u1816_21:
 27984  00007C  D008               	goto	i1l14047
 27985  00007E                     i1u1816_20:
 27986  00007E                     
 27987                           ; BSR set to: 1
 27988                           ;main.c: 155: uart_receiveOverruns++;
 27989  00007E  0E01               	movlw	1
 27990  000080  2720               	addwf	_uart_receiveOverruns& (0+255),f,b
 27991  000082  0E00               	movlw	0
 27992  000084  2321               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 27993  000086  0E00               	movlw	0
 27994  000088  2322               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 27995  00008A  0E00               	movlw	0
 27996  00008C  2323               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 27997  00008E                     i1l14047:
 27998                           
 27999                           ; BSR set to: 1
 28000                           ;main.c: 156: }
 28001                           ;main.c: 159: PIR1bits.RCIF = 0;
 28002  00008E  9A9E               	bcf	3998,5,c	;volatile
 28003                           
 28004                           ;main.c: 161: }
 28005  000090  D07D               	goto	i1l403
 28006  000092                     i1l401:
 28007                           
 28008                           ;main.c: 163: else if (1 == INTCONbits.TMR0IF) {
 28009  000092  A4F2               	btfss	intcon,2,c	;volatile
 28010  000094  D001               	goto	i1u1817_21
 28011  000096  D001               	goto	i1u1817_20
 28012  000098                     i1u1817_21:
 28013  000098  D079               	goto	i1l403
 28014  00009A                     i1u1817_20:
 28015  00009A                     
 28016                           ;main.c: 165: WriteTimer0(0xfb1d);
 28017  00009A  0EFB               	movlw	251
 28018  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 28019  00009E  0E1D               	movlw	29
 28020  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 28021  0000A2  EC96  F007         	call	i1_WriteTimer0	;wreg free
 28022  0000A6                     
 28023                           ;main.c: 167: timer++;
 28024  0000A6  0E01               	movlw	1
 28025  0000A8  0101               	movlb	1	; () banked
 28026  0000AA  271C               	addwf	_timer& (0+255),f,b	;volatile
 28027  0000AC  0E00               	movlw	0
 28028  0000AE  231D               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 28029  0000B0  0E00               	movlw	0
 28030  0000B2  231E               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 28031  0000B4  0E00               	movlw	0
 28032  0000B6  231F               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 28033  0000B8                     
 28034                           ; BSR set to: 1
 28035                           ;main.c: 168: timekeeper++;
 28036  0000B8  0E01               	movlw	1
 28037  0000BA  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 28038  0000BC  0E00               	movlw	0
 28039  0000BE  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 28040  0000C0  0E00               	movlw	0
 28041  0000C2  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 28042  0000C4  0E00               	movlw	0
 28043  0000C6  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 28044  0000C8                     
 28045                           ; BSR set to: 1
 28046                           ;main.c: 171: status_led_cnt++;
 28047  0000C8  4A22               	infsnz	_status_led_cnt,f,c	;volatile
 28048  0000CA  2A23               	incf	_status_led_cnt+1,f,c	;volatile
 28049  0000CC                     
 28050                           ; BSR set to: 1
 28051                           ;main.c: 172: if ((2 == ledFunctionality) &&
 28052                           ;main.c: 173: (status_led_cnt > 1000)) {
 28053  0000CC  5032               	movf	_ledFunctionality,w,c
 28054  0000CE  0A02               	xorlw	2
 28055  0000D0  A4D8               	btfss	status,2,c
 28056  0000D2  D001               	goto	i1u1818_21
 28057  0000D4  D001               	goto	i1u1818_20
 28058  0000D6                     i1u1818_21:
 28059  0000D6  D00C               	goto	i1l14063
 28060  0000D8                     i1u1818_20:
 28061  0000D8                     
 28062                           ; BSR set to: 1
 28063  0000D8  0EE9               	movlw	233
 28064  0000DA  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28065  0000DC  0E03               	movlw	3
 28066  0000DE  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28067  0000E0  A0D8               	btfss	status,0,c
 28068  0000E2  D001               	goto	i1u1819_21
 28069  0000E4  D001               	goto	i1u1819_20
 28070  0000E6                     i1u1819_21:
 28071  0000E6  D004               	goto	i1l14063
 28072  0000E8                     i1u1819_20:
 28073  0000E8                     i1l14061:
 28074                           
 28075                           ; BSR set to: 1
 28076                           ;main.c: 174: LATC1 = ~LATC1;
 28077  0000E8  728B               	btg	3979,1,c	;volatile
 28078                           
 28079                           ;main.c: 175: status_led_cnt = 0;
 28080  0000EA  6A22               	clrf	_status_led_cnt,c	;volatile
 28081  0000EC  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28082                           
 28083                           ;main.c: 176: }
 28084  0000EE  D04D               	goto	i1l406
 28085  0000F0                     i1l14063:
 28086                           
 28087                           ; BSR set to: 1
 28088                           ;main.c: 177: else if ((3 == ledFunctionality) &&
 28089                           ;main.c: 178: (status_led_cnt > 400)) {
 28090  0000F0  5032               	movf	_ledFunctionality,w,c
 28091  0000F2  0A03               	xorlw	3
 28092  0000F4  A4D8               	btfss	status,2,c
 28093  0000F6  D001               	goto	i1u1820_21
 28094  0000F8  D001               	goto	i1u1820_20
 28095  0000FA                     i1u1820_21:
 28096  0000FA  D009               	goto	i1l14069
 28097  0000FC                     i1u1820_20:
 28098  0000FC                     
 28099                           ; BSR set to: 1
 28100  0000FC  0E91               	movlw	145
 28101  0000FE  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28102  000100  0E01               	movlw	1
 28103  000102  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28104  000104  A0D8               	btfss	status,0,c
 28105  000106  D001               	goto	i1u1821_21
 28106  000108  D001               	goto	i1u1821_20
 28107  00010A                     i1u1821_21:
 28108  00010A  D001               	goto	i1l14069
 28109  00010C                     i1u1821_20:
 28110  00010C  D7ED               	goto	i1l14061
 28111  00010E                     i1l14069:
 28112                           
 28113                           ; BSR set to: 1
 28114                           ;main.c: 182: else if ((4 == ledFunctionality) &&
 28115                           ;main.c: 183: (status_led_cnt > 100)) {
 28116  00010E  5032               	movf	_ledFunctionality,w,c
 28117  000110  0A04               	xorlw	4
 28118  000112  A4D8               	btfss	status,2,c
 28119  000114  D001               	goto	i1u1822_21
 28120  000116  D001               	goto	i1u1822_20
 28121  000118                     i1u1822_21:
 28122  000118  D009               	goto	i1l14075
 28123  00011A                     i1u1822_20:
 28124  00011A                     
 28125                           ; BSR set to: 1
 28126  00011A  0E65               	movlw	101
 28127  00011C  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28128  00011E  0E00               	movlw	0
 28129  000120  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28130  000122  A0D8               	btfss	status,0,c
 28131  000124  D001               	goto	i1u1823_21
 28132  000126  D001               	goto	i1u1823_20
 28133  000128                     i1u1823_21:
 28134  000128  D001               	goto	i1l14075
 28135  00012A                     i1u1823_20:
 28136  00012A  D7DE               	goto	i1l14061
 28137  00012C                     i1l14075:
 28138                           
 28139                           ; BSR set to: 1
 28140                           ;main.c: 187: else if ((5 == ledFunctionality) &&
 28141                           ;main.c: 188: (status_led_cnt > 70)) {
 28142  00012C  5032               	movf	_ledFunctionality,w,c
 28143  00012E  0A05               	xorlw	5
 28144  000130  A4D8               	btfss	status,2,c
 28145  000132  D001               	goto	i1u1824_21
 28146  000134  D001               	goto	i1u1824_20
 28147  000136                     i1u1824_21:
 28148  000136  D009               	goto	i1l14081
 28149  000138                     i1u1824_20:
 28150  000138                     
 28151                           ; BSR set to: 1
 28152  000138  0E47               	movlw	71
 28153  00013A  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28154  00013C  0E00               	movlw	0
 28155  00013E  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28156  000140  A0D8               	btfss	status,0,c
 28157  000142  D001               	goto	i1u1825_21
 28158  000144  D001               	goto	i1u1825_20
 28159  000146                     i1u1825_21:
 28160  000146  D001               	goto	i1l14081
 28161  000148                     i1u1825_20:
 28162  000148  D7CF               	goto	i1l14061
 28163  00014A                     i1l14081:
 28164                           
 28165                           ; BSR set to: 1
 28166                           ;main.c: 192: else if ((6 == ledFunctionality) &&
 28167                           ;main.c: 193: (status_led_cnt > 40)) {
 28168  00014A  5032               	movf	_ledFunctionality,w,c
 28169  00014C  0A06               	xorlw	6
 28170  00014E  A4D8               	btfss	status,2,c
 28171  000150  D001               	goto	i1u1826_21
 28172  000152  D001               	goto	i1u1826_20
 28173  000154                     i1u1826_21:
 28174  000154  D009               	goto	i1l14087
 28175  000156                     i1u1826_20:
 28176  000156                     
 28177                           ; BSR set to: 1
 28178  000156  0E29               	movlw	41
 28179  000158  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28180  00015A  0E00               	movlw	0
 28181  00015C  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28182  00015E  A0D8               	btfss	status,0,c
 28183  000160  D001               	goto	i1u1827_21
 28184  000162  D001               	goto	i1u1827_20
 28185  000164                     i1u1827_21:
 28186  000164  D001               	goto	i1l14087
 28187  000166                     i1u1827_20:
 28188  000166  D7C0               	goto	i1l14061
 28189  000168                     i1l14087:
 28190                           
 28191                           ; BSR set to: 1
 28192                           ;main.c: 197: else if (1 == ledFunctionality) {
 28193  000168  0432               	decf	_ledFunctionality,w,c
 28194  00016A  A4D8               	btfss	status,2,c
 28195  00016C  D001               	goto	i1u1828_21
 28196  00016E  D001               	goto	i1u1828_20
 28197  000170                     i1u1828_21:
 28198  000170  D004               	goto	i1l415
 28199  000172                     i1u1828_20:
 28200  000172                     
 28201                           ; BSR set to: 1
 28202                           ;main.c: 198: LATC1 = 1;
 28203  000172  828B               	bsf	3979,1,c	;volatile
 28204                           
 28205                           ;main.c: 199: status_led_cnt = 0;
 28206  000174  6A22               	clrf	_status_led_cnt,c	;volatile
 28207  000176  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28208                           
 28209                           ;main.c: 200: }
 28210  000178  D008               	goto	i1l406
 28211  00017A                     i1l415:
 28212                           
 28213                           ; BSR set to: 1
 28214                           ;main.c: 201: else if (0 == ledFunctionality) {
 28215  00017A  6632               	tstfsz	_ledFunctionality,c
 28216  00017C  D001               	goto	i1u1829_21
 28217  00017E  D001               	goto	i1u1829_20
 28218  000180                     i1u1829_21:
 28219  000180  D004               	goto	i1l412
 28220  000182                     i1u1829_20:
 28221  000182                     
 28222                           ; BSR set to: 1
 28223                           ;main.c: 202: LATC1 = 0;
 28224  000182  928B               	bcf	3979,1,c	;volatile
 28225                           
 28226                           ;main.c: 203: status_led_cnt = 0;
 28227  000184  6A22               	clrf	_status_led_cnt,c	;volatile
 28228  000186  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28229  000188  D000               	goto	i1l406
 28230  00018A                     i1l412:
 28231  00018A                     i1l406:
 28232                           
 28233                           ; BSR set to: 1
 28234                           ;main.c: 204: }
 28235                           ;main.c: 206: INTCONbits.TMR0IF = 0;
 28236  00018A  94F2               	bcf	intcon,2,c	;volatile
 28237  00018C                     i1l403:
 28238                           
 28239                           ;main.c: 207: }
 28240                           ;main.c: 210: if ( 1 == IRXIF ) {
 28241  00018C  AEA4               	btfss	4004,7,c	;volatile
 28242  00018E  D001               	goto	i1u1830_21
 28243  000190  D001               	goto	i1u1830_20
 28244  000192                     i1u1830_21:
 28245  000192  D001               	goto	i1l418
 28246  000194                     i1u1830_20:
 28247  000194                     
 28248                           ;main.c: 212: IRXIF = 0;
 28249  000194  9EA4               	bcf	4004,7,c	;volatile
 28250  000196                     i1l418:
 28251                           
 28252                           ;main.c: 213: }
 28253                           ;main.c: 216: if ( RXBnIF ) {
 28254  000196  A2A4               	btfss	4004,1,c	;volatile
 28255  000198  D001               	goto	i1u1831_21
 28256  00019A  D001               	goto	i1u1831_20
 28257  00019C                     i1u1831_21:
 28258  00019C  D09F               	goto	i1l431
 28259  00019E                     i1u1831_20:
 28260  00019E                     
 28261                           ;main.c: 218: if ( ECANReceiveMessage((unsigned long *)&id,
 28262                           ;main.c: 219: (BYTE*)&data,
 28263                           ;main.c: 220: (BYTE*)&dlc,
 28264                           ;main.c: 221: &flags) ) {
 28265  00019E  0101               	movlb	1	; () banked
 28266  0001A0  0E01               	movlw	high _id
 28267  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 28268  0001A4  0EED               	movlw	low _id
 28269  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 28270  0001A8  0E01               	movlw	high _data
 28271  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 28272  0001AC  0ED5               	movlw	low _data
 28273  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 28274  0001B0  0E3A               	movlw	low _dlc
 28275  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 28276  0001B4  0E3B               	movlw	low _flags
 28277  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 28278  0001B8  ECA2  F020         	call	_ECANReceiveMessage	;wreg free
 28279  0001BC  0900               	iorlw	0
 28280  0001BE  B4D8               	btfsc	status,2,c
 28281  0001C0  D001               	goto	i1u1832_21
 28282  0001C2  D001               	goto	i1u1832_20
 28283  0001C4                     i1u1832_21:
 28284  0001C4  D08A               	goto	i1l14129
 28285  0001C6                     i1u1832_20:
 28286  0001C6                     
 28287                           ;main.c: 224: if ( flags & ECAN_RX_OVERFLOW ) {
 28288  0001C6  A63B               	btfss	_flags,3,c
 28289  0001C8  D001               	goto	i1u1833_21
 28290  0001CA  D001               	goto	i1u1833_20
 28291  0001CC                     i1u1833_21:
 28292  0001CC  D00E               	goto	i1l421
 28293  0001CE                     i1u1833_20:
 28294  0001CE                     
 28295                           ;main.c: 225: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 28296  0001CE  AA3B               	btfss	_flags,5,c
 28297  0001D0  D001               	goto	i1u1834_21
 28298  0001D2  D001               	goto	i1u1834_20
 28299  0001D4                     i1u1834_21:
 28300  0001D4  D082               	goto	i1l14129
 28301  0001D6                     i1u1834_20:
 28302  0001D6                     i1l14101:
 28303  0001D6  0E01               	movlw	1
 28304  0001D8  0101               	movlb	1	; () banked
 28305  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 28306  0001DC  0E00               	movlw	0
 28307  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 28308  0001E0  0E00               	movlw	0
 28309  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 28310  0001E4  0E00               	movlw	0
 28311  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 28312  0001E8  D078               	goto	i1l14129
 28313  0001EA                     i1l421:
 28314                           
 28315                           ;main.c: 227: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 28316                           ;main.c: 228: ( flags & ECAN_RX_XTD_FRAME ) ) {
 28317  0001EA  BC3B               	btfsc	_flags,6,c
 28318  0001EC  D001               	goto	i1u1835_21
 28319  0001EE  D001               	goto	i1u1835_20
 28320  0001F0                     i1u1835_21:
 28321  0001F0  D074               	goto	i1l14129
 28322  0001F2                     i1u1835_20:
 28323  0001F2  AA3B               	btfss	_flags,5,c
 28324  0001F4  D001               	goto	i1u1836_21
 28325  0001F6  D001               	goto	i1u1836_20
 28326  0001F8                     i1u1836_21:
 28327  0001F8  D070               	goto	i1l14129
 28328  0001FA                     i1u1836_20:
 28329  0001FA                     
 28330                           ;main.c: 230: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 28331  0001FA  503A               	movf	_dlc,w,c
 28332  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 28333  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 28334  000200  0E05               	movlw	5
 28335  000202  2617               	addwf	??_Interrupt,f,c
 28336  000204  0E00               	movlw	0
 28337  000206  2218               	addwfc	??_Interrupt+1,f,c
 28338  000208  0101               	movlb	1	; () banked
 28339  00020A  0E01               	movlw	high _canInputFifo
 28340  00020C  6E02               	movwf	?_fifo_getFree+1,c
 28341  00020E  0ECD               	movlw	low _canInputFifo
 28342  000210  6E01               	movwf	?_fifo_getFree,c
 28343  000212  EC7D  F00F         	call	_fifo_getFree	;wreg free
 28344  000216  5017               	movf	??_Interrupt,w,c
 28345  000218  5C01               	subwf	?_fifo_getFree,w,c
 28346  00021A  5018               	movf	??_Interrupt+1,w,c
 28347  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 28348  00021E  A0D8               	btfss	status,0,c
 28349  000220  D001               	goto	i1u1837_21
 28350  000222  D001               	goto	i1u1837_20
 28351  000224                     i1u1837_21:
 28352  000224  D7D8               	goto	i1l14101
 28353  000226                     i1u1837_20:
 28354  000226                     
 28355                           ; BSR set to: 1
 28356                           ;main.c: 231: uint8_t fail = 0;
 28357  000226  6A21               	clrf	Interrupt@fail,c
 28358  000228                     
 28359                           ; BSR set to: 1
 28360                           ;main.c: 232: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 28361  000228  0E01               	movlw	high _canInputFifo
 28362  00022A  6E02               	movwf	?_fifo_write+1,c
 28363  00022C  0ECD               	movlw	low _canInputFifo
 28364  00022E  6E01               	movwf	?_fifo_write,c
 28365  000230  0E01               	movlw	high _id
 28366  000232  6E04               	movwf	?_fifo_write+3,c
 28367  000234  0EED               	movlw	low _id
 28368  000236  6E03               	movwf	?_fifo_write+2,c
 28369  000238  0E04               	movlw	4
 28370  00023A  6E05               	movwf	?_fifo_write+4,c
 28371  00023C  0E00               	movlw	0
 28372  00023E  6E06               	movwf	?_fifo_write+5,c
 28373  000240  0E00               	movlw	0
 28374  000242  6E07               	movwf	?_fifo_write+6,c
 28375  000244  0E00               	movlw	0
 28376  000246  6E08               	movwf	?_fifo_write+7,c
 28377  000248  EC31  F017         	call	_fifo_write	;wreg free
 28378  00024C  5001               	movf	?_fifo_write,w,c
 28379  00024E  0A04               	xorlw	4
 28380  000250  1002               	iorwf	?_fifo_write+1,w,c
 28381  000252  B4D8               	btfsc	status,2,c
 28382  000254  D001               	goto	i1u1838_21
 28383  000256  D001               	goto	i1u1838_20
 28384  000258                     i1u1838_21:
 28385  000258  D002               	goto	i1l14113
 28386  00025A                     i1u1838_20:
 28387  00025A                     
 28388                           ; BSR set to: 1
 28389                           ;main.c: 233: fail = 1;
 28390  00025A  0E01               	movlw	1
 28391  00025C  6E21               	movwf	Interrupt@fail,c
 28392  00025E                     i1l14113:
 28393                           
 28394                           ; BSR set to: 1
 28395                           ;main.c: 234: }
 28396                           ;main.c: 235: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 28397  00025E  0E01               	movlw	high _canInputFifo
 28398  000260  6E02               	movwf	?_fifo_write+1,c
 28399  000262  0ECD               	movlw	low _canInputFifo
 28400  000264  6E01               	movwf	?_fifo_write,c
 28401  000266  0E3A               	movlw	low _dlc
 28402  000268  6E03               	movwf	?_fifo_write+2,c
 28403  00026A  0E00               	movlw	high _dlc
 28404  00026C  6E04               	movwf	?_fifo_write+3,c
 28405  00026E  0E0F               	movlw	15
 28406  000270  6E04               	movwf	?_fifo_write+3,c
 28407  000272  0E5F               	movlw	__accesstop+-1
 28408  000274  6403               	cpfsgt	?_fifo_write+2,c
 28409  000276  6A04               	clrf	?_fifo_write+3,c
 28410  000278  0E01               	movlw	1
 28411  00027A  6E05               	movwf	?_fifo_write+4,c
 28412  00027C  0E00               	movlw	0
 28413  00027E  6E06               	movwf	?_fifo_write+5,c
 28414  000280  0E00               	movlw	0
 28415  000282  6E07               	movwf	?_fifo_write+6,c
 28416  000284  0E00               	movlw	0
 28417  000286  6E08               	movwf	?_fifo_write+7,c
 28418  000288  EC31  F017         	call	_fifo_write	;wreg free
 28419  00028C  0401               	decf	?_fifo_write,w,c
 28420  00028E  1002               	iorwf	?_fifo_write+1,w,c
 28421  000290  B4D8               	btfsc	status,2,c
 28422  000292  D001               	goto	i1u1839_21
 28423  000294  D001               	goto	i1u1839_20
 28424  000296                     i1u1839_21:
 28425  000296  D002               	goto	i1l14117
 28426  000298                     i1u1839_20:
 28427  000298                     
 28428                           ; BSR set to: 1
 28429                           ;main.c: 236: fail = 1;
 28430  000298  0E01               	movlw	1
 28431  00029A  6E21               	movwf	Interrupt@fail,c
 28432  00029C                     i1l14117:
 28433                           
 28434                           ; BSR set to: 1
 28435                           ;main.c: 237: }
 28436                           ;main.c: 238: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 28437  00029C  0E01               	movlw	high _canInputFifo
 28438  00029E  6E02               	movwf	?_fifo_write+1,c
 28439  0002A0  0ECD               	movlw	low _canInputFifo
 28440  0002A2  6E01               	movwf	?_fifo_write,c
 28441  0002A4  0E01               	movlw	high _data
 28442  0002A6  6E04               	movwf	?_fifo_write+3,c
 28443  0002A8  0ED5               	movlw	low _data
 28444  0002AA  6E03               	movwf	?_fifo_write+2,c
 28445  0002AC  503A               	movf	_dlc,w,c
 28446  0002AE  6E05               	movwf	?_fifo_write+4,c
 28447  0002B0  6A06               	clrf	?_fifo_write+5,c
 28448  0002B2  6A07               	clrf	?_fifo_write+6,c
 28449  0002B4  6A08               	clrf	?_fifo_write+7,c
 28450  0002B6  EC31  F017         	call	_fifo_write	;wreg free
 28451  0002BA  503A               	movf	_dlc,w,c
 28452  0002BC  1801               	xorwf	?_fifo_write,w,c
 28453  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 28454  0002C0  B4D8               	btfsc	status,2,c
 28455  0002C2  D001               	goto	i1u1840_21
 28456  0002C4  D001               	goto	i1u1840_20
 28457  0002C6                     i1u1840_21:
 28458  0002C6  D002               	goto	i1l14121
 28459  0002C8                     i1u1840_20:
 28460  0002C8                     
 28461                           ; BSR set to: 1
 28462                           ;main.c: 239: fail = 1;
 28463  0002C8  0E01               	movlw	1
 28464  0002CA  6E21               	movwf	Interrupt@fail,c
 28465  0002CC                     i1l14121:
 28466                           
 28467                           ; BSR set to: 1
 28468                           ;main.c: 240: }
 28469                           ;main.c: 242: fifo_canrxcount++;
 28470  0002CC  2A31               	incf	_fifo_canrxcount,f,c	;volatile
 28471  0002CE                     
 28472                           ; BSR set to: 1
 28473                           ;main.c: 244: if ( fail ) {
 28474  0002CE  5021               	movf	Interrupt@fail,w,c
 28475  0002D0  B4D8               	btfsc	status,2,c
 28476  0002D2  D001               	goto	i1u1841_21
 28477  0002D4  D001               	goto	i1u1841_20
 28478  0002D6                     i1u1841_21:
 28479  0002D6  D001               	goto	i1l14129
 28480  0002D8                     i1u1841_20:
 28481  0002D8  D77E               	goto	i1l14101
 28482  0002DA                     i1l14129:
 28483                           
 28484                           ;main.c: 251: }
 28485                           ;main.c: 253: }
 28486                           ;main.c: 255: }
 28487                           ;main.c: 258: RXBnIF = 0;
 28488  0002DA  92A4               	bcf	4004,1,c	;volatile
 28489  0002DC                     i1l431:
 28490  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 28491  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 28492  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 28493  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 28494  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 28495  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 28496  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 28497  0002F8  0010               	retfie	
 28498  0002FA                     __end_of_Interrupt:
 28499                           	opt stack 0
 28500                           tblptru	equ	0xFF8
 28501                           tblptrh	equ	0xFF7
 28502                           tblptrl	equ	0xFF6
 28503                           tablat	equ	0xFF5
 28504                           prodh	equ	0xFF4
 28505                           prodl	equ	0xFF3
 28506                           intcon	equ	0xFF2
 28507                           indf0	equ	0xFEF
 28508                           postinc0	equ	0xFEE
 28509                           fsr0h	equ	0xFEA
 28510                           fsr0l	equ	0xFE9
 28511                           wreg	equ	0xFE8
 28512                           indf1	equ	0xFE7
 28513                           postinc1	equ	0xFE6
 28514                           postdec1	equ	0xFE5
 28515                           fsr1h	equ	0xFE2
 28516                           fsr1l	equ	0xFE1
 28517                           bsr	equ	0xFE0
 28518                           indf2	equ	0xFDF
 28519                           postinc2	equ	0xFDE
 28520                           postdec2	equ	0xFDD
 28521                           plusw2	equ	0xFDB
 28522                           fsr2h	equ	0xFDA
 28523                           fsr2l	equ	0xFD9
 28524                           status	equ	0xFD8
 28525                           
 28526 ;; *************** function i1_WriteTimer0 *****************
 28527 ;; Defined at:
 28528 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 28529 ;; Parameters:    Size  Location     Type
 28530 ;;  timer0          2    0[COMRAM] unsigned int 
 28531 ;; Auto vars:     Size  Location     Type
 28532 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 28533 ;; Return value:  Size  Location     Type
 28534 ;;		None               void
 28535 ;; Registers used:
 28536 ;;		None
 28537 ;; Tracked objects:
 28538 ;;		On entry : 0/0
 28539 ;;		On exit  : 0/0
 28540 ;;		Unchanged: 0/0
 28541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28542 ;;      Params:         2       0       0       0       0       0       0
 28543 ;;      Locals:         2       0       0       0       0       0       0
 28544 ;;      Temps:          0       0       0       0       0       0       0
 28545 ;;      Totals:         4       0       0       0       0       0       0
 28546 ;;Total ram usage:        4 bytes
 28547 ;; Hardware stack levels used:    1
 28548 ;; This function calls:
 28549 ;;		Nothing
 28550 ;; This function is called by:
 28551 ;;		_Interrupt
 28552 ;; This function uses a non-reentrant model
 28553 ;;
 28554                           
 28555                           	psect	text83
 28556  000F2C                     __ptext83:
 28557                           	opt stack 0
 28558  000F2C                     i1_WriteTimer0:
 28559                           	opt stack 20
 28560                           
 28561                           ;incstack = 0
 28562                           ;incstack = 0
 28563  000F2C  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 28564  000F30  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 28565  000F34  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 28566  000F38  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 28567  000F3C  0012               	return	
 28568  000F3E                     __end_ofi1_WriteTimer0:
 28569                           	opt stack 0
 28570                           tblptru	equ	0xFF8
 28571                           tblptrh	equ	0xFF7
 28572                           tblptrl	equ	0xFF6
 28573                           tablat	equ	0xFF5
 28574                           prodh	equ	0xFF4
 28575                           prodl	equ	0xFF3
 28576                           intcon	equ	0xFF2
 28577                           indf0	equ	0xFEF
 28578                           postinc0	equ	0xFEE
 28579                           fsr0h	equ	0xFEA
 28580                           fsr0l	equ	0xFE9
 28581                           wreg	equ	0xFE8
 28582                           indf1	equ	0xFE7
 28583                           postinc1	equ	0xFE6
 28584                           postdec1	equ	0xFE5
 28585                           fsr1h	equ	0xFE2
 28586                           fsr1l	equ	0xFE1
 28587                           bsr	equ	0xFE0
 28588                           indf2	equ	0xFDF
 28589                           postinc2	equ	0xFDE
 28590                           postdec2	equ	0xFDD
 28591                           plusw2	equ	0xFDB
 28592                           fsr2h	equ	0xFDA
 28593                           fsr2l	equ	0xFD9
 28594                           status	equ	0xFD8
 28595                           
 28596 ;; *************** function _fifo_getFree *****************
 28597 ;; Defined at:
 28598 ;;		line 97 in file "fifo.c"
 28599 ;; Parameters:    Size  Location     Type
 28600 ;;  f               2    0[COMRAM] PTR struct .
 28601 ;;		 -> canInputFifo(8), 
 28602 ;; Auto vars:     Size  Location     Type
 28603 ;;		None
 28604 ;; Return value:  Size  Location     Type
 28605 ;;                  2    0[COMRAM] unsigned short 
 28606 ;; Registers used:
 28607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28608 ;; Tracked objects:
 28609 ;;		On entry : F/1
 28610 ;;		On exit  : F/1
 28611 ;;		Unchanged: F/0
 28612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28613 ;;      Params:         2       0       0       0       0       0       0
 28614 ;;      Locals:         0       0       0       0       0       0       0
 28615 ;;      Temps:          8       0       0       0       0       0       0
 28616 ;;      Totals:        10       0       0       0       0       0       0
 28617 ;;Total ram usage:       10 bytes
 28618 ;; Hardware stack levels used:    1
 28619 ;; This function calls:
 28620 ;;		Nothing
 28621 ;; This function is called by:
 28622 ;;		_Interrupt
 28623 ;; This function uses a non-reentrant model
 28624 ;;
 28625                           
 28626                           	psect	text84
 28627  001EFA                     __ptext84:
 28628                           	opt stack 0
 28629  001EFA                     _fifo_getFree:
 28630                           	opt stack 20
 28631                           
 28632                           ; BSR set to: 1
 28633                           ;fifo.c: 98: if (f->head < f->tail) {
 28634                           
 28635                           ;incstack = 0
 28636                           ;incstack = 0
 28637  001EFA  EE20 F004          	lfsr	2,4
 28638  001EFE  5001               	movf	fifo_getFree@f,w,c
 28639  001F00  26D9               	addwf	fsr2l,f,c
 28640  001F02  5002               	movf	fifo_getFree@f+1,w,c
 28641  001F04  22DA               	addwfc	fsr2h,f,c
 28642  001F06  EE10 F002          	lfsr	1,2
 28643  001F0A  5001               	movf	fifo_getFree@f,w,c
 28644  001F0C  26E1               	addwf	fsr1l,f,c
 28645  001F0E  5002               	movf	fifo_getFree@f+1,w,c
 28646  001F10  22E2               	addwfc	fsr1h,f,c
 28647  001F12  52E6               	movf	postinc1,f,c
 28648  001F14  52DE               	movf	postinc2,f,c
 28649  001F16  50DD               	movf	postdec2,w,c
 28650  001F18  5CE5               	subwf	postdec1,w,c
 28651  001F1A  E102               	bnz	i1u658_25
 28652  001F1C  50DF               	movf	indf2,w,c
 28653  001F1E  5CE7               	subwf	indf1,w,c
 28654  001F20                     i1u658_25:
 28655  001F20  E213               	bc	i1l6719
 28656                           
 28657                           ; BSR set to: 1
 28658                           ;fifo.c: 99: return (f->tail - f->head);
 28659  001F22  EE20 F002          	lfsr	2,2
 28660  001F26  D834               	call	PL82	;call to abstracted procedure
 28661  001F28  EE20 F004          	lfsr	2,4
 28662  001F2C  5001               	movf	fifo_getFree@f,w,c
 28663  001F2E  26D9               	addwf	fsr2l,f,c
 28664  001F30  5002               	movf	fifo_getFree@f+1,w,c
 28665  001F32  22DA               	addwfc	fsr2h,f,c
 28666  001F34  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28667  001F38  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28668  001F3C  5003               	movf	??_fifo_getFree,w,c
 28669  001F3E  5C05               	subwf	??_fifo_getFree+2,w,c
 28670  001F40  6E01               	movwf	?_fifo_getFree,c
 28671  001F42  5004               	movf	??_fifo_getFree+1,w,c
 28672  001F44  5806               	subwfb	??_fifo_getFree+3,w,c
 28673  001F46  D022               	goto	L47
 28674  001F48                     i1l6719:
 28675                           
 28676                           ; BSR set to: 1
 28677                           ;fifo.c: 101: else {
 28678                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 28679  001F48  EE20 F004          	lfsr	2,4
 28680  001F4C  D821               	call	PL82	;call to abstracted procedure
 28681  001F4E  EE20 F002          	lfsr	2,2
 28682  001F52  5001               	movf	fifo_getFree@f,w,c
 28683  001F54  26D9               	addwf	fsr2l,f,c
 28684  001F56  5002               	movf	fifo_getFree@f+1,w,c
 28685  001F58  22DA               	addwfc	fsr2h,f,c
 28686  001F5A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28687  001F5E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28688  001F62  EE20 F006          	lfsr	2,6
 28689  001F66  5001               	movf	fifo_getFree@f,w,c
 28690  001F68  26D9               	addwf	fsr2l,f,c
 28691  001F6A  5002               	movf	fifo_getFree@f+1,w,c
 28692  001F6C  22DA               	addwfc	fsr2h,f,c
 28693  001F6E  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 28694  001F72  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 28695  001F76  5005               	movf	??_fifo_getFree+2,w,c
 28696  001F78  5C07               	subwf	??_fifo_getFree+4,w,c
 28697  001F7A  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 28698  001F7C  5006               	movf	??_fifo_getFree+3,w,c
 28699  001F7E  5808               	subwfb	??_fifo_getFree+5,w,c
 28700  001F80  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 28701  001F82  5003               	movf	??_fifo_getFree,w,c
 28702  001F84  2409               	addwf	??_fifo_getFree+6,w,c
 28703  001F86  6E01               	movwf	?_fifo_getFree,c
 28704  001F88  5004               	movf	??_fifo_getFree+1,w,c
 28705  001F8A  200A               	addwfc	??_fifo_getFree+7,w,c
 28706  001F8C                     L47:
 28707  001F8C  6E02               	movwf	?_fifo_getFree+1,c
 28708                           
 28709                           ; BSR set to: 1
 28710  001F8E  0012               	return	
 28711  001F90                     __end_of_fifo_getFree:
 28712                           	opt stack 0
 28713  001F90                     PL82:
 28714                           	opt stack 20
 28715  001F90  5001               	movf	fifo_getFree@f,w,c
 28716  001F92  26D9               	addwf	fsr2l,f,c
 28717  001F94  5002               	movf	fifo_getFree@f+1,w,c
 28718  001F96  22DA               	addwfc	fsr2h,f,c
 28719  001F98  CFDE F003          	movff	postinc2,??_fifo_getFree
 28720  001F9C  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 28721  001FA0  0012               	return	
 28722  001FA2                     __end_ofPL82:
 28723                           	opt stack 0
 28724                           tblptru	equ	0xFF8
 28725                           tblptrh	equ	0xFF7
 28726                           tblptrl	equ	0xFF6
 28727                           tablat	equ	0xFF5
 28728                           prodh	equ	0xFF4
 28729                           prodl	equ	0xFF3
 28730                           intcon	equ	0xFF2
 28731                           indf0	equ	0xFEF
 28732                           postinc0	equ	0xFEE
 28733                           fsr0h	equ	0xFEA
 28734                           fsr0l	equ	0xFE9
 28735                           wreg	equ	0xFE8
 28736                           indf1	equ	0xFE7
 28737                           postinc1	equ	0xFE6
 28738                           postdec1	equ	0xFE5
 28739                           fsr1h	equ	0xFE2
 28740                           fsr1l	equ	0xFE1
 28741                           bsr	equ	0xFE0
 28742                           indf2	equ	0xFDF
 28743                           postinc2	equ	0xFDE
 28744                           postdec2	equ	0xFDD
 28745                           plusw2	equ	0xFDB
 28746                           fsr2h	equ	0xFDA
 28747                           fsr2l	equ	0xFD9
 28748                           status	equ	0xFD8
 28749                           
 28750 ;; *************** function _ECANReceiveMessage *****************
 28751 ;; Defined at:
 28752 ;;		line 803 in file "ECAN.c"
 28753 ;; Parameters:    Size  Location     Type
 28754 ;;  id              2    9[COMRAM] PTR unsigned long 
 28755 ;;		 -> id(4), 
 28756 ;;  data            2   11[COMRAM] PTR unsigned char 
 28757 ;;		 -> data(8), 
 28758 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 28759 ;;		 -> dlc(1), 
 28760 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 28761 ;;		 -> flags(1), 
 28762 ;; Auto vars:     Size  Location     Type
 28763 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 28764 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28765 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28766 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 28767 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28768 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28769 ;;  temp            1   19[COMRAM] struct .
 28770 ;;  mode            1   18[COMRAM] unsigned char 
 28771 ;;  i               1   17[COMRAM] unsigned char 
 28772 ;; Return value:  Size  Location     Type
 28773 ;;                  1    wreg      enum E15660
 28774 ;; Registers used:
 28775 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28776 ;; Tracked objects:
 28777 ;;		On entry : F/1
 28778 ;;		On exit  : 0/0
 28779 ;;		Unchanged: 0/0
 28780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28781 ;;      Params:         6       0       0       0       0       0       0
 28782 ;;      Locals:         7       0       0       0       0       0       0
 28783 ;;      Temps:          0       0       0       0       0       0       0
 28784 ;;      Totals:        13       0       0       0       0       0       0
 28785 ;;Total ram usage:       13 bytes
 28786 ;; Hardware stack levels used:    1
 28787 ;; Hardware stack levels required when called:    1
 28788 ;; This function calls:
 28789 ;;		__ECANPointBuffer
 28790 ;;		__RegsToCANID
 28791 ;; This function is called by:
 28792 ;;		_Interrupt
 28793 ;; This function uses a non-reentrant model
 28794 ;;
 28795                           
 28796                           	psect	text85
 28797  004144                     __ptext85:
 28798                           	opt stack 0
 28799  004144                     _ECANReceiveMessage:
 28800                           	opt stack 19
 28801                           
 28802                           ; BSR set to: 1
 28803                           ;ECAN.c: 805: BYTE mode;
 28804                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 28805                           ;ECAN.c: 809: char i;
 28806                           ;ECAN.c: 810: BYTE_VAL temp;
 28807                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 28808                           
 28809                           ; BSR set to: 1
 28810                           ;incstack = 0
 28811                           ;incstack = 0
 28812  004144  6A27               	clrf	__ECANRxFilterHitInfo,c
 28813                           
 28814                           ; BSR set to: 1
 28815                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 28816  004146  5077               	movf	3959,w,c	;volatile
 28817  004148  0BC0               	andlw	192
 28818  00414A  6E13               	movwf	ECANReceiveMessage@mode,c
 28819                           
 28820                           ; BSR set to: 1
 28821                           ;ECAN.c: 816: if ( mode == 0x00 )
 28822  00414C  6613               	tstfsz	ECANReceiveMessage@mode,c
 28823  00414E  D032               	goto	i1l10309
 28824                           
 28825                           ; BSR set to: 1
 28826                           ;ECAN.c: 822: {
 28827                           ;ECAN.c: 824: if ( RXB0FUL )
 28828  004150  AE60               	btfss	3936,7,c	;volatile
 28829  004152  D012               	goto	i1l1521
 28830                           
 28831                           ; BSR set to: 1
 28832                           ;ECAN.c: 825: {
 28833                           ;ECAN.c: 827: RXB0IF = 0;
 28834  004154  90A4               	bcf	4004,0,c	;volatile
 28835                           
 28836                           ;ECAN.c: 830: if ( RXB0OVFL )
 28837  004156  AE74               	btfss	3956,7,c	;volatile
 28838  004158  D006               	goto	i1l10285
 28839                           
 28840                           ; BSR set to: 1
 28841                           ;ECAN.c: 831: {
 28842                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 28843  00415A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28844  00415C  6ED9               	movwf	fsr2l,c
 28845  00415E  6ADA               	clrf	fsr2h,c
 28846  004160  0E00               	movlw	0
 28847  004162  86DB               	bsf	plusw2,3,c
 28848                           
 28849                           ; BSR set to: 1
 28850                           ;ECAN.c: 833: RXB0OVFL = 0;
 28851  004164  9E74               	bcf	3956,7,c	;volatile
 28852  004166                     i1l10285:
 28853                           
 28854                           ; BSR set to: 1
 28855                           ;ECAN.c: 834: }
 28856                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 28857  004166  A060               	btfss	3936,0,c	;volatile
 28858  004168  D002               	bra	i1u1214_25
 28859  00416A  8027               	bsf	__ECANRxFilterHitInfo,0,c
 28860  00416C  D001               	bra	i1u1214_27
 28861  00416E                     i1u1214_25:
 28862  00416E  9027               	bcf	__ECANRxFilterHitInfo,0,c
 28863  004170                     i1u1214_27:
 28864                           
 28865                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 28866  004170  0E0F               	movlw	15	;volatile
 28867  004172  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28868  004174  0E60               	movlw	96	;volatile
 28869  004176  D01A               	goto	L48
 28870  004178                     i1l1521:
 28871                           
 28872                           ; BSR set to: 1
 28873                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 28874  004178  010F               	movlb	15	; () banked
 28875  00417A  AF50               	btfss	80,7,b	;volatile
 28876  00417C  D019               	goto	i1l10303
 28877                           
 28878                           ; BSR set to: 15
 28879                           ;ECAN.c: 842: {
 28880                           ;ECAN.c: 844: RXB1IF = 0;
 28881  00417E  92A4               	bcf	4004,1,c	;volatile
 28882                           
 28883                           ;ECAN.c: 847: if ( RXB1OVFL )
 28884  004180  AC74               	btfss	3956,6,c	;volatile
 28885  004182  D006               	goto	i1l10295
 28886                           
 28887                           ; BSR set to: 15
 28888                           ;ECAN.c: 848: {
 28889                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 28890  004184  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28891  004186  6ED9               	movwf	fsr2l,c
 28892  004188  6ADA               	clrf	fsr2h,c
 28893  00418A  0E00               	movlw	0
 28894  00418C  86DB               	bsf	plusw2,3,c
 28895                           
 28896                           ; BSR set to: 15
 28897                           ;ECAN.c: 850: RXB1OVFL = 0;
 28898  00418E  9C74               	bcf	3956,6,c	;volatile
 28899  004190                     i1l10295:
 28900                           
 28901                           ; BSR set to: 15
 28902                           ;ECAN.c: 851: }
 28903                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 28904  004190  5150               	movf	80,w,b	;volatile
 28905  004192  0B07               	andlw	7
 28906  004194  6E27               	movwf	__ECANRxFilterHitInfo,c
 28907                           
 28908                           ; BSR set to: 15
 28909                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 28910  004196  0E02               	movlw	2
 28911  004198  6027               	cpfslt	__ECANRxFilterHitInfo,c
 28912  00419A  D005               	goto	i1l10301
 28913                           
 28914                           ; BSR set to: 15
 28915                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 28916  00419C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28917  00419E  6ED9               	movwf	fsr2l,c
 28918  0041A0  6ADA               	clrf	fsr2h,c
 28919  0041A2  0E00               	movlw	0
 28920  0041A4  8EDB               	bsf	plusw2,7,c
 28921  0041A6                     i1l10301:
 28922                           
 28923                           ; BSR set to: 15
 28924                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 28925  0041A6  0E0F               	movlw	15	;volatile
 28926  0041A8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28927  0041AA  0E50               	movlw	80	;volatile
 28928  0041AC                     L48:
 28929  0041AC  6E15               	movwf	ECANReceiveMessage@ptr,c
 28930                           
 28931                           ;ECAN.c: 860: }
 28932  0041AE  D065               	goto	i1l10363
 28933  0041B0                     i1l10303:
 28934                           
 28935                           ;ECAN.c: 861: else
 28936                           ;ECAN.c: 862: return FALSE;
 28937  0041B0  0E00               	movlw	0
 28938  0041B2  D0C6               	goto	i1l1528
 28939  0041B4                     i1l10309:
 28940                           
 28941                           ; BSR set to: 1
 28942                           ;ECAN.c: 869: else if ( mode == 0x40 )
 28943  0041B4  5013               	movf	ECANReceiveMessage@mode,w,c
 28944  0041B6  0A40               	xorlw	64
 28945  0041B8  E146               	bnz	i1l1531
 28946                           
 28947                           ; BSR set to: 1
 28948                           ;ECAN.c: 875: {
 28949                           ;ECAN.c: 876: if ( RXB0FUL )
 28950  0041BA  AE60               	btfss	3936,7,c	;volatile
 28951  0041BC  D004               	goto	i1l1532
 28952                           
 28953                           ; BSR set to: 1
 28954                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 28955  0041BE  0E0F               	movlw	15	;volatile
 28956  0041C0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28957  0041C2  0E60               	movlw	96	;volatile
 28958  0041C4  D03E               	goto	L55
 28959  0041C6                     i1l1532:
 28960                           
 28961                           ; BSR set to: 1
 28962                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 28963  0041C6  010F               	movlb	15	; () banked
 28964  0041C8  AF50               	btfss	80,7,b	;volatile
 28965  0041CA  D004               	goto	i1l1534
 28966                           
 28967                           ; BSR set to: 15
 28968                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 28969  0041CC  0E0F               	movlw	15	;volatile
 28970  0041CE  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28971  0041D0  0E50               	movlw	80	;volatile
 28972  0041D2  D037               	goto	L55
 28973  0041D4                     i1l1534:
 28974                           
 28975                           ; BSR set to: 15
 28976                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 28977  0041D4  010D               	movlb	13
 28978  0041D6  B5F8               	btfsc	248,2,b	;volatile
 28979  0041D8  D007               	goto	i1l1536
 28980  0041DA  010E               	movlb	14
 28981  0041DC  AF20               	btfss	32,7,b	;volatile
 28982  0041DE  D004               	goto	i1l1536
 28983                           
 28984                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 28985  0041E0  0E0E               	movlw	14	;volatile
 28986  0041E2  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28987  0041E4  0E20               	movlw	32	;volatile
 28988  0041E6  D02D               	goto	L55
 28989  0041E8                     i1l1536:
 28990                           
 28991                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 28992  0041E8  010D               	movlb	13
 28993  0041EA  B7F8               	btfsc	248,3,b	;volatile
 28994  0041EC  D007               	goto	i1l1538
 28995  0041EE  010E               	movlb	14
 28996  0041F0  AF30               	btfss	48,7,b	;volatile
 28997  0041F2  D004               	goto	i1l1538
 28998                           
 28999                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 29000  0041F4  0E0E               	movlw	14	;volatile
 29001  0041F6  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29002  0041F8  0E30               	movlw	48	;volatile
 29003  0041FA  D023               	goto	L55
 29004  0041FC                     i1l1538:
 29005                           
 29006                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 29007  0041FC  010D               	movlb	13
 29008  0041FE  B9F8               	btfsc	248,4,b	;volatile
 29009  004200  D007               	goto	i1l1540
 29010  004202  010E               	movlb	14
 29011  004204  AF40               	btfss	64,7,b	;volatile
 29012  004206  D004               	goto	i1l1540
 29013                           
 29014                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 29015  004208  0E0E               	movlw	14	;volatile
 29016  00420A  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29017  00420C  0E40               	movlw	64	;volatile
 29018  00420E  D019               	goto	L55
 29019  004210                     i1l1540:
 29020                           
 29021                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 29022  004210  010D               	movlb	13
 29023  004212  BBF8               	btfsc	248,5,b	;volatile
 29024  004214  D005               	goto	i1l1542
 29025  004216  010E               	movlb	14
 29026  004218  AF50               	btfss	80,7,b	;volatile
 29027  00421A  D002               	goto	i1l1542
 29028                           
 29029                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 29030  00421C  0E0E               	movlw	14	;volatile
 29031  00421E  D7D7               	goto	L56
 29032  004220                     i1l1542:
 29033                           
 29034                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 29035  004220  010D               	movlb	13
 29036  004222  BDF8               	btfsc	248,6,b	;volatile
 29037  004224  D005               	goto	i1l1544
 29038  004226  010E               	movlb	14
 29039  004228  AF60               	btfss	96,7,b	;volatile
 29040  00422A  D002               	goto	i1l1544
 29041                           
 29042                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 29043  00422C  0E0E               	movlw	14	;volatile
 29044  00422E  D7C8               	goto	L57
 29045  004230                     i1l1544:
 29046                           
 29047                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 29048  004230  010D               	movlb	13
 29049  004232  BFF8               	btfsc	248,7,b	;volatile
 29050  004234  D7BD               	goto	i1l10303
 29051  004236  010E               	movlb	14
 29052  004238  AF70               	btfss	112,7,b	;volatile
 29053  00423A  D7BA               	goto	i1l10303
 29054                           
 29055                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 29056  00423C  0E0E               	movlw	14	;volatile
 29057  00423E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29058  004240  0E70               	movlw	112	;volatile
 29059  004242                     L55:
 29060  004242  6E15               	movwf	ECANReceiveMessage@ptr,c
 29061  004244  D00A               	goto	i1l10353
 29062  004246                     i1l1531:
 29063                           
 29064                           ; BSR set to: 1
 29065                           ;ECAN.c: 910: else
 29066                           ;ECAN.c: 915: {
 29067                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 29068  004246  AE74               	btfss	3956,7,c	;volatile
 29069  004248  D7B3               	goto	i1l10303
 29070                           
 29071                           ; BSR set to: 1
 29072                           ;ECAN.c: 919: {
 29073                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 29074  00424A  506F               	movf	3951,w,c	;volatile
 29075  00424C  0B07               	andlw	7
 29076  00424E  ECEC  F00B         	call	__ECANPointBuffer
 29077  004252  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 29078  004256  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 29079  00425A                     i1l10353:
 29080                           
 29081                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 29082  00425A  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29083  00425E  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29084  004262  50DF               	movf	indf2,w,c
 29085  004264  0B1F               	andlw	31
 29086  004266  6E27               	movwf	__ECANRxFilterHitInfo,c
 29087                           
 29088                           ;ECAN.c: 934: RXB1IF = 0;
 29089  004268  92A4               	bcf	4004,1,c	;volatile
 29090                           
 29091                           ;ECAN.c: 936: if ( RXB1OVFL )
 29092  00426A  AC74               	btfss	3956,6,c	;volatile
 29093  00426C  D006               	goto	i1l10363
 29094                           
 29095                           ;ECAN.c: 937: {
 29096                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 29097  00426E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29098  004270  6ED9               	movwf	fsr2l,c
 29099  004272  6ADA               	clrf	fsr2h,c
 29100  004274  0E00               	movlw	0
 29101  004276  86DB               	bsf	plusw2,3,c
 29102                           
 29103                           ;ECAN.c: 939: RXB1OVFL = 0;
 29104  004278  9C74               	bcf	3956,6,c	;volatile
 29105  00427A                     i1l10363:
 29106                           
 29107                           ;ECAN.c: 944: savedPtr = ptr;
 29108  00427A  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 29109  00427E  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 29110                           
 29111                           ;ECAN.c: 945: *msgFlags = 0;
 29112  004282  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29113  004284  6ED9               	movwf	fsr2l,c
 29114  004286  6ADA               	clrf	fsr2h,c
 29115  004288  6ADF               	clrf	indf2,c
 29116                           
 29117                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 29118  00428A  EE20 F005          	lfsr	2,5
 29119  00428E  D859               	call	PL108	;call to abstracted procedure
 29120                           
 29121                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 29122  004290  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29123  004292  6ED9               	movwf	fsr2l,c
 29124  004294  6ADA               	clrf	fsr2h,c
 29125  004296  5014               	movf	ECANReceiveMessage@temp,w,c
 29126  004298  0B0F               	andlw	15
 29127  00429A  6EDF               	movwf	indf2,c
 29128                           
 29129                           ;ECAN.c: 952: if ( temp.bits.b6 )
 29130  00429C  AC14               	btfss	ECANReceiveMessage@temp,6,c
 29131  00429E  D005               	goto	i1l1552
 29132                           
 29133                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 29134  0042A0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29135  0042A2  6ED9               	movwf	fsr2l,c
 29136  0042A4  6ADA               	clrf	fsr2h,c
 29137  0042A6  0E00               	movlw	0
 29138  0042A8  8CDB               	bsf	plusw2,6,c
 29139  0042AA                     i1l1552:
 29140                           
 29141                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 29142  0042AA  EE20 F002          	lfsr	2,2
 29143  0042AE  D849               	call	PL108	;call to abstracted procedure
 29144                           
 29145                           ;ECAN.c: 957: if ( temp.bits.b3 )
 29146  0042B0  A614               	btfss	ECANReceiveMessage@temp,3,c
 29147  0042B2  D008               	goto	i1l1553
 29148                           
 29149                           ;ECAN.c: 958: {
 29150                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 29151  0042B4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29152  0042B6  6ED9               	movwf	fsr2l,c
 29153  0042B8  6ADA               	clrf	fsr2h,c
 29154  0042BA  0E00               	movlw	0
 29155  0042BC  8ADB               	bsf	plusw2,5,c
 29156                           
 29157                           ;ECAN.c: 960: temp.Val = 1;
 29158  0042BE  0E01               	movlw	1
 29159  0042C0  6E14               	movwf	ECANReceiveMessage@temp,c
 29160                           
 29161                           ;ECAN.c: 961: }
 29162  0042C2  D001               	goto	i1l10381
 29163  0042C4                     i1l1553:
 29164                           
 29165                           ;ECAN.c: 962: else
 29166                           ;ECAN.c: 963: temp.Val = 0;
 29167  0042C4  6A14               	clrf	ECANReceiveMessage@temp,c
 29168  0042C6                     i1l10381:
 29169                           
 29170                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 29171  0042C6  2815               	incf	ECANReceiveMessage@ptr,w,c
 29172  0042C8  6E01               	movwf	?__RegsToCANID,c
 29173  0042CA  0E00               	movlw	0
 29174  0042CC  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 29175  0042CE  6E02               	movwf	?__RegsToCANID+1,c
 29176  0042D0  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 29177  0042D4  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 29178  0042D8  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 29179  0042DC  ECC7  F017         	call	__RegsToCANID	;wreg free
 29180                           
 29181                           ;ECAN.c: 968: ptr += 6;
 29182  0042E0  0E06               	movlw	6
 29183  0042E2  2615               	addwf	ECANReceiveMessage@ptr,f,c
 29184  0042E4  0E00               	movlw	0
 29185  0042E6  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 29186                           
 29187                           ;ECAN.c: 969: temp.Val = *dataLen;
 29188  0042E8  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29189  0042EA  6ED9               	movwf	fsr2l,c
 29190  0042EC  6ADA               	clrf	fsr2h,c
 29191  0042EE  50DF               	movf	indf2,w,c
 29192  0042F0  6E14               	movwf	ECANReceiveMessage@temp,c
 29193                           
 29194                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 29195  0042F2  6A12               	clrf	ECANReceiveMessage@i,c
 29196  0042F4  D00F               	goto	i1l10397
 29197  0042F6                     i1l10389:
 29198                           
 29199                           ;ECAN.c: 971: *data++ = *ptr++;
 29200  0042F6  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29201  0042FA  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29202  0042FE  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 29203  004302  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 29204  004306  CFDF FFE7          	movff	indf2,indf1
 29205  00430A  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 29206  00430C  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 29207  00430E  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 29208  004310  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 29209  004312  2A12               	incf	ECANReceiveMessage@i,f,c
 29210  004314                     i1l10397:
 29211  004314  5014               	movf	ECANReceiveMessage@temp,w,c
 29212  004316  5C12               	subwf	ECANReceiveMessage@i,w,c
 29213  004318  E3EE               	bnc	i1l10389
 29214                           
 29215                           ;ECAN.c: 974: if ( IRXIF )
 29216  00431A  AEA4               	btfss	4004,7,c	;volatile
 29217  00431C  D006               	goto	i1l10403
 29218                           
 29219                           ;ECAN.c: 975: {
 29220                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 29221  00431E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29222  004320  6ED9               	movwf	fsr2l,c
 29223  004322  6ADA               	clrf	fsr2h,c
 29224  004324  0E00               	movlw	0
 29225  004326  88DB               	bsf	plusw2,4,c
 29226                           
 29227                           ;ECAN.c: 977: IRXIF = 0;
 29228  004328  9EA4               	bcf	4004,7,c	;volatile
 29229  00432A                     i1l10403:
 29230                           
 29231                           ;ECAN.c: 978: }
 29232                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 29233  00432A  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 29234  00432E  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 29235  004332  0E7F               	movlw	127
 29236  004334  16DF               	andwf	indf2,f,c
 29237                           
 29238                           ;ECAN.c: 985: if ( mode == 0x80 )
 29239  004336  5013               	movf	ECANReceiveMessage@mode,w,c
 29240  004338  0A80               	xorlw	128
 29241  00433A  B4D8               	btfsc	status,2,c
 29242                           
 29243                           ;ECAN.c: 986: FIFOEMPTY = 0;
 29244  00433C  9E74               	bcf	3956,7,c	;volatile
 29245                           
 29246                           ;ECAN.c: 992: return TRUE;
 29247  00433E  0E01               	movlw	1
 29248  004340                     i1l1528:
 29249  004340  0012               	return	
 29250  004342                     __end_of_ECANReceiveMessage:
 29251                           	opt stack 0
 29252  004342                     PL108:
 29253                           	opt stack 19
 29254  004342  5015               	movf	ECANReceiveMessage@ptr,w,c
 29255  004344  26D9               	addwf	fsr2l,f,c
 29256  004346  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 29257  004348  22DA               	addwfc	fsr2h,f,c
 29258  00434A  50DF               	movf	indf2,w,c
 29259  00434C  6E14               	movwf	ECANReceiveMessage@temp,c
 29260  00434E  0012               	return	
 29261  004350                     __end_ofPL108:
 29262                           	opt stack 0
 29263                           tblptru	equ	0xFF8
 29264                           tblptrh	equ	0xFF7
 29265                           tblptrl	equ	0xFF6
 29266                           tablat	equ	0xFF5
 29267                           prodh	equ	0xFF4
 29268                           prodl	equ	0xFF3
 29269                           intcon	equ	0xFF2
 29270                           indf0	equ	0xFEF
 29271                           postinc0	equ	0xFEE
 29272                           fsr0h	equ	0xFEA
 29273                           fsr0l	equ	0xFE9
 29274                           wreg	equ	0xFE8
 29275                           indf1	equ	0xFE7
 29276                           postinc1	equ	0xFE6
 29277                           postdec1	equ	0xFE5
 29278                           fsr1h	equ	0xFE2
 29279                           fsr1l	equ	0xFE1
 29280                           bsr	equ	0xFE0
 29281                           indf2	equ	0xFDF
 29282                           postinc2	equ	0xFDE
 29283                           postdec2	equ	0xFDD
 29284                           plusw2	equ	0xFDB
 29285                           fsr2h	equ	0xFDA
 29286                           fsr2l	equ	0xFD9
 29287                           status	equ	0xFD8
 29288                           
 29289 ;; *************** function __RegsToCANID *****************
 29290 ;; Defined at:
 29291 ;;		line 1158 in file "ECAN.c"
 29292 ;; Parameters:    Size  Location     Type
 29293 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 29294 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29295 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29296 ;;  val             2    2[COMRAM] PTR unsigned long 
 29297 ;;		 -> id(4), 
 29298 ;;  type            1    4[COMRAM] unsigned char 
 29299 ;; Auto vars:     Size  Location     Type
 29300 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 29301 ;;		 -> id(4), 
 29302 ;; Return value:  Size  Location     Type
 29303 ;;		None               void
 29304 ;; Registers used:
 29305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29306 ;; Tracked objects:
 29307 ;;		On entry : 0/1
 29308 ;;		On exit  : 0/0
 29309 ;;		Unchanged: 0/0
 29310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29311 ;;      Params:         5       0       0       0       0       0       0
 29312 ;;      Locals:         2       0       0       0       0       0       0
 29313 ;;      Temps:          2       0       0       0       0       0       0
 29314 ;;      Totals:         9       0       0       0       0       0       0
 29315 ;;Total ram usage:        9 bytes
 29316 ;; Hardware stack levels used:    1
 29317 ;; This function calls:
 29318 ;;		Nothing
 29319 ;; This function is called by:
 29320 ;;		_ECANReceiveMessage
 29321 ;; This function uses a non-reentrant model
 29322 ;;
 29323                           
 29324                           	psect	text86
 29325  002F8E                     __ptext86:
 29326                           	opt stack 0
 29327  002F8E                     __RegsToCANID:
 29328                           	opt stack 19
 29329                           
 29330                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 29331                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 29332                           
 29333                           ;incstack = 0
 29334                           ;incstack = 0
 29335  002F8E  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 29336  002F92  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 29337                           
 29338                           ;ECAN.c: 1163: if ( type == 0 )
 29339  002F96  6605               	tstfsz	__RegsToCANID@type,c
 29340  002F98  D038               	goto	i1l10053
 29341                           
 29342                           ;ECAN.c: 1164: {
 29343                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 29344  002F9A  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29345  002F9E  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29346  002FA2  50DF               	movf	indf2,w,c
 29347  002FA4  6E06               	movwf	??__RegsToCANID& (0+255),c
 29348  002FA6  90D8               	bcf	status,0,c
 29349  002FA8  3606               	rlcf	??__RegsToCANID,f,c
 29350  002FAA  90D8               	bcf	status,0,c
 29351  002FAC  3606               	rlcf	??__RegsToCANID,f,c
 29352  002FAE  90D8               	bcf	status,0,c
 29353  002FB0  3406               	rlcf	??__RegsToCANID,w,c
 29354  002FB2  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29355  002FB6  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29356  002FBA  6EDF               	movwf	indf2,c
 29357                           
 29358                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 29359  002FBC  EE20 F001          	lfsr	2,1
 29360  002FC0  D864               	call	PL24	;call to abstracted procedure
 29361  002FC2  0E05               	movlw	5
 29362  002FC4  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29363  002FC6                     i1u1174_25:
 29364  002FC6  90D8               	bcf	status,0,c
 29365  002FC8  3206               	rrcf	??__RegsToCANID,f,c
 29366  002FCA  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29367  002FCC  D7FC               	goto	i1u1174_25
 29368  002FCE  5006               	movf	??__RegsToCANID,w,c
 29369                           
 29370                           ;ECAN.c: 1168: ptr++;
 29371                           
 29372                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 29373  002FD0  D867               	call	PL68	;call to abstracted procedure
 29374  002FD2  0E05               	movlw	5
 29375  002FD4  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29376  002FD6                     i1u1175_25:
 29377  002FD6  90D8               	bcf	status,0,c
 29378  002FD8  3206               	rrcf	??__RegsToCANID,f,c
 29379  002FDA  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29380  002FDC  D7FC               	goto	i1u1175_25
 29381  002FDE  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29382  002FE2  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29383  002FE6  5006               	movf	??__RegsToCANID,w,c
 29384  002FE8  12DF               	iorwf	indf2,f,c
 29385                           
 29386                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 29387  002FEA  EE20 F002          	lfsr	2,2
 29388  002FEE  5008               	movf	__RegsToCANID@Value,w,c
 29389  002FF0  26D9               	addwf	fsr2l,f,c
 29390  002FF2  5009               	movf	__RegsToCANID@Value+1,w,c
 29391  002FF4  22DA               	addwfc	fsr2h,f,c
 29392  002FF6  6ADF               	clrf	indf2,c
 29393                           
 29394                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 29395  002FF8  EE20 F003          	lfsr	2,3
 29396  002FFC  5008               	movf	__RegsToCANID@Value,w,c
 29397  002FFE  26D9               	addwf	fsr2l,f,c
 29398  003000  5009               	movf	__RegsToCANID@Value+1,w,c
 29399  003002  22DA               	addwfc	fsr2h,f,c
 29400  003004  0E00               	movlw	0
 29401  003006  6EDF               	movwf	indf2,c
 29402                           
 29403                           ;ECAN.c: 1172: }
 29404  003008  D03F               	goto	i1l1575
 29405  00300A                     i1l10053:
 29406                           
 29407                           ;ECAN.c: 1173: else
 29408                           ;ECAN.c: 1174: {
 29409                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 29410  00300A  EE20 F002          	lfsr	2,2
 29411  00300E  D83D               	call	PL24	;call to abstracted procedure
 29412  003010  0E05               	movlw	5
 29413  003012  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29414  003014                     i1u1176_25:
 29415  003014  90D8               	bcf	status,0,c
 29416  003016  3606               	rlcf	??__RegsToCANID,f,c
 29417  003018  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29418  00301A  D7FC               	goto	i1u1176_25
 29419  00301C  5006               	movf	??__RegsToCANID,w,c
 29420  00301E  6EDF               	movwf	indf2,c
 29421                           
 29422                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 29423  003020  EE20 F003          	lfsr	2,3
 29424  003024  D832               	call	PL24	;call to abstracted procedure
 29425  003026  90D8               	bcf	status,0,c
 29426  003028  3206               	rrcf	??__RegsToCANID,f,c
 29427  00302A  90D8               	bcf	status,0,c
 29428  00302C  3206               	rrcf	??__RegsToCANID,f,c
 29429  00302E  90D8               	bcf	status,0,c
 29430  003030  3006               	rrcf	??__RegsToCANID,w,c
 29431                           
 29432                           ;ECAN.c: 1178: ptr++;
 29433                           
 29434                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 29435  003032  D836               	call	PL68	;call to abstracted procedure
 29436  003034  0E03               	movlw	3
 29437  003036  D83E               	call	PL76	;call to abstracted procedure
 29438                           
 29439                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 29440  003038  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29441  00303C  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29442  003040  50DF               	movf	indf2,w,c
 29443  003042  6E06               	movwf	??__RegsToCANID& (0+255),c
 29444  003044  90D8               	bcf	status,0,c
 29445  003046  3206               	rrcf	??__RegsToCANID,f,c
 29446  003048  90D8               	bcf	status,0,c
 29447  00304A  3206               	rrcf	??__RegsToCANID,f,c
 29448  00304C  90D8               	bcf	status,0,c
 29449  00304E  3206               	rrcf	??__RegsToCANID,f,c
 29450  003050  0E1C               	movlw	28
 29451  003052  D830               	call	PL76	;call to abstracted procedure
 29452                           
 29453                           ;ECAN.c: 1182: ptr++;
 29454  003054  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29455  003056  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29456                           
 29457                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 29458  003058  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29459  00305C  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29460  003060  EE10 F001          	lfsr	1,1
 29461  003064  5008               	movf	__RegsToCANID@Value,w,c
 29462  003066  26E1               	addwf	fsr1l,f,c
 29463  003068  5009               	movf	__RegsToCANID@Value+1,w,c
 29464  00306A  22E2               	addwfc	fsr1h,f,c
 29465  00306C  CFDF FFE7          	movff	indf2,indf1
 29466                           
 29467                           ;ECAN.c: 1184: ptr++;
 29468  003070  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29469  003072  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29470                           
 29471                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 29472  003074  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29473  003078  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29474  00307C  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 29475  003080  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 29476  003084  CFDF FFE7          	movff	indf2,indf1
 29477  003088                     i1l1575:
 29478  003088  0012               	return	
 29479  00308A                     __end_of__RegsToCANID:
 29480                           	opt stack 0
 29481  00308A                     PL24:
 29482                           	opt stack 19
 29483  00308A  5008               	movf	__RegsToCANID@Value,w,c
 29484  00308C  26D9               	addwf	fsr2l,f,c
 29485  00308E  5009               	movf	__RegsToCANID@Value+1,w,c
 29486  003090  22DA               	addwfc	fsr2h,f,c
 29487  003092  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 29488  003096  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 29489  00309A  50E7               	movf	indf1,w,c
 29490  00309C  6E06               	movwf	??__RegsToCANID& (0+255),c
 29491  00309E  0012               	return	
 29492  0030A0                     __end_ofPL24:
 29493                           	opt stack 0
 29494  0030A0                     PL68:
 29495                           	opt stack 19
 29496  0030A0  6EDF               	movwf	indf2,c
 29497  0030A2  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29498  0030A4  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29499  0030A6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29500  0030AA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29501  0030AE  50DF               	movf	indf2,w,c
 29502  0030B0  6E06               	movwf	??__RegsToCANID& (0+255),c
 29503  0030B2  0012               	return	
 29504  0030B4                     __end_ofPL68:
 29505                           	opt stack 0
 29506  0030B4                     PL76:
 29507                           	opt stack 19
 29508  0030B4  1606               	andwf	??__RegsToCANID,f,c
 29509  0030B6  EE20 F002          	lfsr	2,2
 29510  0030BA  5008               	movf	__RegsToCANID@Value,w,c
 29511  0030BC  26D9               	addwf	fsr2l,f,c
 29512  0030BE  5009               	movf	__RegsToCANID@Value+1,w,c
 29513  0030C0  22DA               	addwfc	fsr2h,f,c
 29514  0030C2  5006               	movf	??__RegsToCANID,w,c
 29515  0030C4  12DF               	iorwf	indf2,f,c
 29516  0030C6  0012               	return	
 29517  0030C8                     __end_ofPL76:
 29518                           	opt stack 0
 29519                           tblptru	equ	0xFF8
 29520                           tblptrh	equ	0xFF7
 29521                           tblptrl	equ	0xFF6
 29522                           tablat	equ	0xFF5
 29523                           prodh	equ	0xFF4
 29524                           prodl	equ	0xFF3
 29525                           intcon	equ	0xFF2
 29526                           indf0	equ	0xFEF
 29527                           postinc0	equ	0xFEE
 29528                           fsr0h	equ	0xFEA
 29529                           fsr0l	equ	0xFE9
 29530                           wreg	equ	0xFE8
 29531                           indf1	equ	0xFE7
 29532                           postinc1	equ	0xFE6
 29533                           postdec1	equ	0xFE5
 29534                           fsr1h	equ	0xFE2
 29535                           fsr1l	equ	0xFE1
 29536                           bsr	equ	0xFE0
 29537                           indf2	equ	0xFDF
 29538                           postinc2	equ	0xFDE
 29539                           postdec2	equ	0xFDD
 29540                           plusw2	equ	0xFDB
 29541                           fsr2h	equ	0xFDA
 29542                           fsr2l	equ	0xFD9
 29543                           status	equ	0xFD8
 29544                           
 29545 ;; *************** function __ECANPointBuffer *****************
 29546 ;; Defined at:
 29547 ;;		line 1209 in file "ECAN.c"
 29548 ;; Parameters:    Size  Location     Type
 29549 ;;  b               1    wreg     unsigned char 
 29550 ;; Auto vars:     Size  Location     Type
 29551 ;;  b               1    3[COMRAM] unsigned char 
 29552 ;;  pt              2    4[COMRAM] PTR unsigned char 
 29553 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29554 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29555 ;; Return value:  Size  Location     Type
 29556 ;;                  2    0[COMRAM] PTR unsigned char 
 29557 ;; Registers used:
 29558 ;;		wreg, status,2, status,0
 29559 ;; Tracked objects:
 29560 ;;		On entry : F/1
 29561 ;;		On exit  : 0/0
 29562 ;;		Unchanged: 0/0
 29563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29564 ;;      Params:         3       0       0       0       0       0       0
 29565 ;;      Locals:         3       0       0       0       0       0       0
 29566 ;;      Temps:          0       0       0       0       0       0       0
 29567 ;;      Totals:         6       0       0       0       0       0       0
 29568 ;;Total ram usage:        6 bytes
 29569 ;; Hardware stack levels used:    1
 29570 ;; This function calls:
 29571 ;;		Nothing
 29572 ;; This function is called by:
 29573 ;;		_ECANReceiveMessage
 29574 ;; This function uses a non-reentrant model
 29575 ;;
 29576                           
 29577                           	psect	text87
 29578  0017D8                     __ptext87:
 29579                           	opt stack 0
 29580  0017D8                     __ECANPointBuffer:
 29581                           	opt stack 19
 29582                           
 29583                           ;incstack = 0
 29584                           ;incstack = 0
 29585                           ;__ECANPointBuffer@b stored from wreg
 29586  0017D8  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 29587                           
 29588                           ; BSR set to: 1
 29589                           ;ECAN.c: 1210: BYTE* pt;
 29590                           ;ECAN.c: 1212: switch(b)
 29591  0017DC  D024               	goto	i1l10037
 29592  0017DE                     i1l10019:
 29593                           
 29594                           ; BSR set to: 1
 29595                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 29596  0017DE  0E0F               	movlw	15	;volatile
 29597  0017E0  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29598  0017E2  0E60               	movlw	96	;volatile
 29599  0017E4  D01E               	goto	L64
 29600  0017E6                     i1l10021:
 29601                           
 29602                           ; BSR set to: 1
 29603                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 29604  0017E6  010F               	movlb	15	; () banked
 29605  0017E8  0E0F               	movlw	15	;volatile
 29606  0017EA  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29607  0017EC  0E50               	movlw	80	;volatile
 29608  0017EE  D019               	goto	L64
 29609  0017F0                     i1l10023:
 29610                           
 29611                           ; BSR set to: 1
 29612                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 29613  0017F0  010E               	movlb	14	; () banked
 29614  0017F2  0E0E               	movlw	14	;volatile
 29615  0017F4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29616  0017F6  0E20               	movlw	32	;volatile
 29617  0017F8  D014               	goto	L64
 29618  0017FA                     i1l10025:
 29619                           
 29620                           ; BSR set to: 1
 29621                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 29622  0017FA  010E               	movlb	14	; () banked
 29623  0017FC  0E0E               	movlw	14	;volatile
 29624  0017FE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29625  001800  0E30               	movlw	48	;volatile
 29626  001802  D00F               	goto	L64
 29627  001804                     i1l10027:
 29628                           
 29629                           ; BSR set to: 1
 29630                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 29631  001804  010E               	movlb	14	; () banked
 29632  001806  0E0E               	movlw	14	;volatile
 29633  001808  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29634  00180A  0E40               	movlw	64	;volatile
 29635  00180C  D00A               	goto	L64
 29636  00180E                     i1l10029:
 29637                           
 29638                           ; BSR set to: 1
 29639                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 29640  00180E  010E               	movlb	14	; () banked
 29641  001810  0E0E               	movlw	14	;volatile
 29642  001812  D7EB               	goto	L65
 29643  001814                     i1l10031:
 29644                           
 29645                           ; BSR set to: 1
 29646                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 29647  001814  010E               	movlb	14	; () banked
 29648  001816  0E0E               	movlw	14	;volatile
 29649  001818  D7E3               	goto	L66
 29650  00181A                     i1l10033:
 29651                           
 29652                           ; BSR set to: 1
 29653                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 29654  00181A  010E               	movlb	14	; () banked
 29655  00181C  0E0E               	movlw	14	;volatile
 29656  00181E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29657  001820  0E70               	movlw	112	;volatile
 29658  001822                     L64:
 29659  001822  6E05               	movwf	__ECANPointBuffer@pt,c
 29660                           
 29661                           ;ECAN.c: 1237: break;
 29662  001824  D00F               	goto	i1l1580
 29663  001826                     i1l10037:
 29664                           
 29665                           ; BSR set to: 1
 29666  001826  5004               	movf	__ECANPointBuffer@b,w,c
 29667                           
 29668                           ; Switch size 1, requested type "space"
 29669                           ; Number of cases is 7, Range of values is 0 to 6
 29670                           ; switch strategies available:
 29671                           ; Name         Instructions Cycles
 29672                           ; simple_byte           22    12 (average)
 29673                           ;	Chosen strategy is simple_byte
 29674  001828  E0DA               	bz	i1l10019
 29675  00182A  0A01               	xorlw	1	; case 1
 29676  00182C  E0DC               	bz	i1l10021
 29677  00182E  0A03               	xorlw	3	; case 2
 29678  001830  E0DF               	bz	i1l10023
 29679  001832  0A01               	xorlw	1	; case 3
 29680  001834  E0E2               	bz	i1l10025
 29681  001836  0A07               	xorlw	7	; case 4
 29682  001838  E0E5               	bz	i1l10027
 29683  00183A  0A01               	xorlw	1	; case 5
 29684  00183C  E0E8               	bz	i1l10029
 29685  00183E  0A03               	xorlw	3	; case 6
 29686  001840  E0E9               	bz	i1l10031
 29687  001842  D7EB               	goto	i1l10033
 29688  001844                     i1l1580:
 29689                           
 29690                           ;ECAN.c: 1239: return (pt);
 29691  001844  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 29692  001848  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 29693  00184C  0012               	return	
 29694  00184E                     __end_of__ECANPointBuffer:
 29695                           	opt stack 0
 29696                           tblptru	equ	0xFF8
 29697                           tblptrh	equ	0xFF7
 29698                           tblptrl	equ	0xFF6
 29699                           tablat	equ	0xFF5
 29700                           prodh	equ	0xFF4
 29701                           prodl	equ	0xFF3
 29702                           intcon	equ	0xFF2
 29703                           indf0	equ	0xFEF
 29704                           postinc0	equ	0xFEE
 29705                           fsr0h	equ	0xFEA
 29706                           fsr0l	equ	0xFE9
 29707                           wreg	equ	0xFE8
 29708                           indf1	equ	0xFE7
 29709                           postinc1	equ	0xFE6
 29710                           postdec1	equ	0xFE5
 29711                           fsr1h	equ	0xFE2
 29712                           fsr1l	equ	0xFE1
 29713                           bsr	equ	0xFE0
 29714                           indf2	equ	0xFDF
 29715                           postinc2	equ	0xFDE
 29716                           postdec2	equ	0xFDD
 29717                           plusw2	equ	0xFDB
 29718                           fsr2h	equ	0xFDA
 29719                           fsr2l	equ	0xFD9
 29720                           status	equ	0xFD8
 29721                           
 29722 ;; *************** function _fifo_write *****************
 29723 ;; Defined at:
 29724 ;;		line 61 in file "fifo.c"
 29725 ;; Parameters:    Size  Location     Type
 29726 ;;  f               2    0[COMRAM] PTR struct .
 29727 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29728 ;;  buf             2    2[COMRAM] PTR const void 
 29729 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29730 ;;  nbytes          4    4[COMRAM] unsigned long 
 29731 ;; Auto vars:     Size  Location     Type
 29732 ;;  i               4   14[COMRAM] unsigned long 
 29733 ;;  p               2   12[COMRAM] PTR const unsigned char 
 29734 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29735 ;; Return value:  Size  Location     Type
 29736 ;;                  2    0[COMRAM] unsigned short 
 29737 ;; Registers used:
 29738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29739 ;; Tracked objects:
 29740 ;;		On entry : F/1
 29741 ;;		On exit  : F/1
 29742 ;;		Unchanged: F/0
 29743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29744 ;;      Params:         8       0       0       0       0       0       0
 29745 ;;      Locals:         6       0       0       0       0       0       0
 29746 ;;      Temps:          4       0       0       0       0       0       0
 29747 ;;      Totals:        18       0       0       0       0       0       0
 29748 ;;Total ram usage:       18 bytes
 29749 ;; Hardware stack levels used:    1
 29750 ;; This function calls:
 29751 ;;		Nothing
 29752 ;; This function is called by:
 29753 ;;		_Interrupt
 29754 ;; This function uses a non-reentrant model
 29755 ;;
 29756                           
 29757                           	psect	text88
 29758  002E62                     __ptext88:
 29759                           	opt stack 0
 29760  002E62                     _fifo_write:
 29761                           	opt stack 20
 29762                           
 29763                           ; BSR set to: 1
 29764                           ;fifo.c: 62: uint32_t i;
 29765                           ;fifo.c: 63: const uint8_t *p;
 29766                           ;fifo.c: 64: p = buf;
 29767                           
 29768                           ;incstack = 0
 29769                           ;incstack = 0
 29770  002E62  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 29771  002E66  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 29772                           
 29773                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 29774  002E6A  6A0F               	clrf	fifo_write@i,c
 29775  002E6C  6A10               	clrf	fifo_write@i+1,c
 29776  002E6E  6A11               	clrf	fifo_write@i+2,c
 29777  002E70  6A12               	clrf	fifo_write@i+3,c
 29778  002E72  D068               	goto	i1l6707
 29779  002E74                     i1l6687:
 29780                           
 29781                           ; BSR set to: 1
 29782                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 29783                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 29784  002E74  EE20 F004          	lfsr	2,4
 29785  002E78  5001               	movf	fifo_write@f,w,c
 29786  002E7A  D872               	call	PL14	;call to abstracted procedure
 29787  002E7C  E102               	bnz	i1u653_25
 29788  002E7E  5009               	movf	??_fifo_write,w,c
 29789  002E80  180B               	xorwf	??_fifo_write+2,w,c
 29790  002E82                     i1u653_25:
 29791  002E82  E011               	bz	i1l1607
 29792                           
 29793                           ; BSR set to: 1
 29794  002E84  EE20 F006          	lfsr	2,6
 29795  002E88  5001               	movf	fifo_write@f,w,c
 29796  002E8A  D86A               	call	PL14	;call to abstracted procedure
 29797  002E8C  E102               	bnz	i1u654_25
 29798  002E8E  5009               	movf	??_fifo_write,w,c
 29799  002E90  180B               	xorwf	??_fifo_write+2,w,c
 29800  002E92                     i1u654_25:
 29801  002E92  E10E               	bnz	i1l6695
 29802                           
 29803                           ; BSR set to: 1
 29804  002E94  EE20 F004          	lfsr	2,4
 29805  002E98  5001               	movf	fifo_write@f,w,c
 29806  002E9A  26D9               	addwf	fsr2l,f,c
 29807  002E9C  5002               	movf	fifo_write@f+1,w,c
 29808  002E9E  22DA               	addwfc	fsr2h,f,c
 29809  002EA0  50DE               	movf	postinc2,w,c
 29810  002EA2  10DD               	iorwf	postdec2,w,c
 29811  002EA4  E105               	bnz	i1l6695
 29812  002EA6                     i1l1607:
 29813                           
 29814                           ; BSR set to: 1
 29815                           ;fifo.c: 71: return i;
 29816  002EA6  C00F  F001         	movff	fifo_write@i,?_fifo_write
 29817  002EAA  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 29818  002EAE  D057               	goto	i1l1608
 29819  002EB0                     i1l6695:
 29820                           
 29821                           ; BSR set to: 1
 29822                           ;fifo.c: 73: else {
 29823                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 29824  002EB0  C00D  FFD9         	movff	fifo_write@p,fsr2l
 29825  002EB4  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 29826  002EB8  EE10 F002          	lfsr	1,2
 29827  002EBC  5001               	movf	fifo_write@f,w,c
 29828  002EBE  26E1               	addwf	fsr1l,f,c
 29829  002EC0  5002               	movf	fifo_write@f+1,w,c
 29830  002EC2  22E2               	addwfc	fsr1h,f,c
 29831  002EC4  CFE6 F009          	movff	postinc1,??_fifo_write
 29832  002EC8  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 29833  002ECC  C001  FFE1         	movff	fifo_write@f,fsr1l
 29834  002ED0  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 29835  002ED4  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 29836  002ED8  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 29837  002EDC  5009               	movf	??_fifo_write,w,c
 29838  002EDE  240B               	addwf	??_fifo_write+2,w,c
 29839  002EE0  6EE1               	movwf	fsr1l,c
 29840  002EE2  500A               	movf	??_fifo_write+1,w,c
 29841  002EE4  200C               	addwfc	??_fifo_write+3,w,c
 29842  002EE6  6EE2               	movwf	fsr1h,c
 29843  002EE8  CFDF FFE7          	movff	indf2,indf1
 29844                           
 29845                           ; BSR set to: 1
 29846  002EEC  4A0D               	infsnz	fifo_write@p,f,c
 29847  002EEE  2A0E               	incf	fifo_write@p+1,f,c
 29848                           
 29849                           ; BSR set to: 1
 29850                           ;fifo.c: 75: f->head++;
 29851  002EF0  EE20 F002          	lfsr	2,2
 29852  002EF4  5001               	movf	fifo_write@f,w,c
 29853  002EF6  26D9               	addwf	fsr2l,f,c
 29854  002EF8  5002               	movf	fifo_write@f+1,w,c
 29855  002EFA  22DA               	addwfc	fsr2h,f,c
 29856  002EFC  2ADE               	incf	postinc2,f,c
 29857  002EFE  0E00               	movlw	0
 29858  002F00  22DD               	addwfc	postdec2,f,c
 29859                           
 29860                           ; BSR set to: 1
 29861                           ;fifo.c: 77: if (f->head >= f->size) {
 29862  002F02  EE20 F006          	lfsr	2,6
 29863  002F06  5001               	movf	fifo_write@f,w,c
 29864  002F08  26D9               	addwf	fsr2l,f,c
 29865  002F0A  5002               	movf	fifo_write@f+1,w,c
 29866  002F0C  22DA               	addwfc	fsr2h,f,c
 29867  002F0E  EE10 F002          	lfsr	1,2
 29868  002F12  5001               	movf	fifo_write@f,w,c
 29869  002F14  26E1               	addwf	fsr1l,f,c
 29870  002F16  5002               	movf	fifo_write@f+1,w,c
 29871  002F18  22E2               	addwfc	fsr1h,f,c
 29872  002F1A  52E6               	movf	postinc1,f,c
 29873  002F1C  52DE               	movf	postinc2,f,c
 29874  002F1E  50DD               	movf	postdec2,w,c
 29875  002F20  5CE5               	subwf	postdec1,w,c
 29876  002F22  E102               	bnz	i1u656_25
 29877  002F24  50DF               	movf	indf2,w,c
 29878  002F26  5CE7               	subwf	indf1,w,c
 29879  002F28                     i1u656_25:
 29880  002F28  E308               	bnc	i1l6705
 29881                           
 29882                           ; BSR set to: 1
 29883                           ;fifo.c: 78: f->head = 0;
 29884  002F2A  EE20 F002          	lfsr	2,2
 29885  002F2E  5001               	movf	fifo_write@f,w,c
 29886  002F30  26D9               	addwf	fsr2l,f,c
 29887  002F32  5002               	movf	fifo_write@f+1,w,c
 29888  002F34  22DA               	addwfc	fsr2h,f,c
 29889  002F36  6ADE               	clrf	postinc2,c
 29890  002F38  6ADD               	clrf	postdec2,c
 29891  002F3A                     i1l6705:
 29892                           
 29893                           ; BSR set to: 1
 29894  002F3A  2A0F               	incf	fifo_write@i,f,c
 29895  002F3C  0E00               	movlw	0
 29896  002F3E  2210               	addwfc	fifo_write@i+1,f,c
 29897  002F40  2211               	addwfc	fifo_write@i+2,f,c
 29898  002F42  2212               	addwfc	fifo_write@i+3,f,c
 29899  002F44                     i1l6707:
 29900                           
 29901                           ; BSR set to: 1
 29902  002F44  5005               	movf	fifo_write@nbytes,w,c
 29903  002F46  5C0F               	subwf	fifo_write@i,w,c
 29904  002F48  5006               	movf	fifo_write@nbytes+1,w,c
 29905  002F4A  5810               	subwfb	fifo_write@i+1,w,c
 29906  002F4C  5007               	movf	fifo_write@nbytes+2,w,c
 29907  002F4E  5811               	subwfb	fifo_write@i+2,w,c
 29908  002F50  5008               	movf	fifo_write@nbytes+3,w,c
 29909  002F52  5812               	subwfb	fifo_write@i+3,w,c
 29910  002F54  E38F               	bnc	i1l6687
 29911                           
 29912                           ; BSR set to: 1
 29913                           ;fifo.c: 79: }
 29914                           ;fifo.c: 80: }
 29915                           ;fifo.c: 82: }
 29916                           ;fifo.c: 84: return nbytes;
 29917  002F56  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 29918  002F5A  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 29919  002F5E                     i1l1608:
 29920                           
 29921                           ; BSR set to: 1
 29922  002F5E  0012               	return	
 29923  002F60                     __end_of_fifo_write:
 29924                           	opt stack 0
 29925  002F60                     PL14:
 29926                           	opt stack 20
 29927  002F60  26D9               	addwf	fsr2l,f,c
 29928  002F62  5002               	movf	fifo_write@f+1,w,c
 29929  002F64  22DA               	addwfc	fsr2h,f,c
 29930  002F66  CFDE F009          	movff	postinc2,??_fifo_write
 29931  002F6A  CFDD F00A          	movff	postdec2,??_fifo_write+1
 29932  002F6E  EE20 F002          	lfsr	2,2
 29933  002F72  5001               	movf	fifo_write@f,w,c
 29934  002F74  26D9               	addwf	fsr2l,f,c
 29935  002F76  5002               	movf	fifo_write@f+1,w,c
 29936  002F78  22DA               	addwfc	fsr2h,f,c
 29937  002F7A  CFDE F00B          	movff	postinc2,??_fifo_write+2
 29938  002F7E  CFDD F00C          	movff	postdec2,??_fifo_write+3
 29939  002F82  2A0B               	incf	??_fifo_write+2,f,c
 29940  002F84  0E00               	movlw	0
 29941  002F86  220C               	addwfc	??_fifo_write+3,f,c
 29942  002F88  500A               	movf	??_fifo_write+1,w,c
 29943  002F8A  180C               	xorwf	??_fifo_write+3,w,c
 29944  002F8C  0012               	return	
 29945  002F8E                     __end_ofPL14:
 29946                           	opt stack 0
 29947                           tblptru	equ	0xFF8
 29948                           tblptrh	equ	0xFF7
 29949                           tblptrl	equ	0xFF6
 29950                           tablat	equ	0xFF5
 29951                           prodh	equ	0xFF4
 29952                           prodl	equ	0xFF3
 29953                           intcon	equ	0xFF2
 29954                           indf0	equ	0xFEF
 29955                           postinc0	equ	0xFEE
 29956                           fsr0h	equ	0xFEA
 29957                           fsr0l	equ	0xFE9
 29958                           wreg	equ	0xFE8
 29959                           indf1	equ	0xFE7
 29960                           postinc1	equ	0xFE6
 29961                           postdec1	equ	0xFE5
 29962                           fsr1h	equ	0xFE2
 29963                           fsr1l	equ	0xFE1
 29964                           bsr	equ	0xFE0
 29965                           indf2	equ	0xFDF
 29966                           postinc2	equ	0xFDE
 29967                           postdec2	equ	0xFDD
 29968                           plusw2	equ	0xFDB
 29969                           fsr2h	equ	0xFDA
 29970                           fsr2l	equ	0xFD9
 29971                           status	equ	0xFD8
 29972                           
 29973 ;; *************** function _ReadUSART *****************
 29974 ;; Defined at:
 29975 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 29976 ;; Parameters:    Size  Location     Type
 29977 ;;		None
 29978 ;; Auto vars:     Size  Location     Type
 29979 ;;  data            1    0[COMRAM] unsigned char 
 29980 ;; Return value:  Size  Location     Type
 29981 ;;                  1    wreg      unsigned char 
 29982 ;; Registers used:
 29983 ;;		wreg, status,2, status,0
 29984 ;; Tracked objects:
 29985 ;;		On entry : 0/0
 29986 ;;		On exit  : 0/0
 29987 ;;		Unchanged: 0/0
 29988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29989 ;;      Params:         0       0       0       0       0       0       0
 29990 ;;      Locals:         1       0       0       0       0       0       0
 29991 ;;      Temps:          0       0       0       0       0       0       0
 29992 ;;      Totals:         1       0       0       0       0       0       0
 29993 ;;Total ram usage:        1 bytes
 29994 ;; Hardware stack levels used:    1
 29995 ;; This function calls:
 29996 ;;		Nothing
 29997 ;; This function is called by:
 29998 ;;		_Interrupt
 29999 ;; This function uses a non-reentrant model
 30000 ;;
 30001                           
 30002                           	psect	text89
 30003  000FA6                     __ptext89:
 30004                           	opt stack 0
 30005  000FA6                     _ReadUSART:
 30006                           	opt stack 20
 30007                           
 30008                           ; BSR set to: 1
 30009                           ;incstack = 0
 30010                           ;incstack = 0
 30011  000FA6  0EF2               	movlw	242
 30012  000FA8  1626               	andwf	_USART_Status,f,c
 30013  000FAA  ACAB               	btfss	4011,6,c	;volatile
 30014  000FAC  D003               	goto	i1l1926
 30015  000FAE  9026               	bcf	_USART_Status,0,c
 30016  000FB0  B0AB               	btfsc	4011,0,c	;volatile
 30017  000FB2  8026               	bsf	_USART_Status,0,c
 30018  000FB4                     i1l1926:
 30019  000FB4  B4AB               	btfsc	4011,2,c	;volatile
 30020  000FB6  8426               	bsf	_USART_Status,2,c
 30021  000FB8  B2AB               	btfsc	4011,1,c	;volatile
 30022  000FBA  8626               	bsf	_USART_Status,3,c
 30023  000FBC  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 30024  000FC0  5001               	movf	ReadUSART@data,w,c
 30025  000FC2  0012               	return	
 30026  000FC4                     __end_of_ReadUSART:
 30027                           	opt stack 0
 30028                           tblptru	equ	0xFF8
 30029                           tblptrh	equ	0xFF7
 30030                           tblptrl	equ	0xFF6
 30031                           tablat	equ	0xFF5
 30032                           prodh	equ	0xFF4
 30033                           prodl	equ	0xFF3
 30034                           intcon	equ	0xFF2
 30035                           indf0	equ	0xFEF
 30036                           postinc0	equ	0xFEE
 30037                           fsr0h	equ	0xFEA
 30038                           fsr0l	equ	0xFE9
 30039                           wreg	equ	0xFE8
 30040                           indf1	equ	0xFE7
 30041                           postinc1	equ	0xFE6
 30042                           postdec1	equ	0xFE5
 30043                           fsr1h	equ	0xFE2
 30044                           fsr1l	equ	0xFE1
 30045                           bsr	equ	0xFE0
 30046                           indf2	equ	0xFDF
 30047                           postinc2	equ	0xFDE
 30048                           postdec2	equ	0xFDD
 30049                           plusw2	equ	0xFDB
 30050                           fsr2h	equ	0xFDA
 30051                           fsr2l	equ	0xFD9
 30052                           status	equ	0xFD8
 30053                           tblptru	equ	0xFF8
 30054                           tblptrh	equ	0xFF7
 30055                           tblptrl	equ	0xFF6
 30056                           tablat	equ	0xFF5
 30057                           prodh	equ	0xFF4
 30058                           prodl	equ	0xFF3
 30059                           intcon	equ	0xFF2
 30060                           indf0	equ	0xFEF
 30061                           postinc0	equ	0xFEE
 30062                           fsr0h	equ	0xFEA
 30063                           fsr0l	equ	0xFE9
 30064                           wreg	equ	0xFE8
 30065                           indf1	equ	0xFE7
 30066                           postinc1	equ	0xFE6
 30067                           postdec1	equ	0xFE5
 30068                           fsr1h	equ	0xFE2
 30069                           fsr1l	equ	0xFE1
 30070                           bsr	equ	0xFE0
 30071                           indf2	equ	0xFDF
 30072                           postinc2	equ	0xFDE
 30073                           postdec2	equ	0xFDD
 30074                           plusw2	equ	0xFDB
 30075                           fsr2h	equ	0xFDA
 30076                           fsr2l	equ	0xFD9
 30077                           status	equ	0xFD8
 30078                           
 30079                           	psect	rparam
 30080  0000                     tblptru	equ	0xFF8
 30081                           tblptrh	equ	0xFF7
 30082                           tblptrl	equ	0xFF6
 30083                           tablat	equ	0xFF5
 30084                           prodh	equ	0xFF4
 30085                           prodl	equ	0xFF3
 30086                           intcon	equ	0xFF2
 30087                           indf0	equ	0xFEF
 30088                           postinc0	equ	0xFEE
 30089                           fsr0h	equ	0xFEA
 30090                           fsr0l	equ	0xFE9
 30091                           wreg	equ	0xFE8
 30092                           indf1	equ	0xFE7
 30093                           postinc1	equ	0xFE6
 30094                           postdec1	equ	0xFE5
 30095                           fsr1h	equ	0xFE2
 30096                           fsr1l	equ	0xFE1
 30097                           bsr	equ	0xFE0
 30098                           indf2	equ	0xFDF
 30099                           postinc2	equ	0xFDE
 30100                           postdec2	equ	0xFDD
 30101                           plusw2	equ	0xFDB
 30102                           fsr2h	equ	0xFDA
 30103                           fsr2l	equ	0xFD9
 30104                           status	equ	0xFD8
 30105                           tblptru	equ	0xFF8
 30106                           tblptrh	equ	0xFF7
 30107                           tblptrl	equ	0xFF6
 30108                           tablat	equ	0xFF5
 30109                           prodh	equ	0xFF4
 30110                           prodl	equ	0xFF3
 30111                           intcon	equ	0xFF2
 30112                           indf0	equ	0xFEF
 30113                           postinc0	equ	0xFEE
 30114                           fsr0h	equ	0xFEA
 30115                           fsr0l	equ	0xFE9
 30116                           wreg	equ	0xFE8
 30117                           indf1	equ	0xFE7
 30118                           postinc1	equ	0xFE6
 30119                           postdec1	equ	0xFE5
 30120                           fsr1h	equ	0xFE2
 30121                           fsr1l	equ	0xFE1
 30122                           bsr	equ	0xFE0
 30123                           indf2	equ	0xFDF
 30124                           postinc2	equ	0xFDE
 30125                           postdec2	equ	0xFDD
 30126                           plusw2	equ	0xFDB
 30127                           fsr2h	equ	0xFDA
 30128                           fsr2l	equ	0xFD9
 30129                           status	equ	0xFD8


Data Sizes:
    Strings     4320
    Constant    120
    Data        0
    BSS         1149
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    135     135
    BANK1           256      0     244
    BANK2           256     70     198
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), STR_149(CODE[6]), 
		 -> STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), STR_143(CODE[9]), 
		 -> STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), STR_139(CODE[6]), 
		 -> STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), STR_132(CODE[4]), 
		 -> STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), STR_149(CODE[6]), 
		 -> STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), STR_143(CODE[9]), 
		 -> STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), STR_139(CODE[6]), 
		 -> STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), STR_132(CODE[4]), 
		 -> STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_285(CODE[2]), STR_284(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_279(CODE[2]), 
		 -> STR_278(CODE[3]), STR_277(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_295(CODE[3]), STR_294(CODE[23]), STR_293(CODE[10]), STR_292(CODE[10]), 
		 -> STR_291(CODE[12]), STR_290(CODE[8]), STR_289(CODE[7]), STR_288(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_287(CODE[10]), STR_286(CODE[3]), STR_283(CODE[20]), 
		 -> STR_282(CODE[3]), STR_281(CODE[14]), STR_280(CODE[3]), STR_276(CODE[8]), 
		 -> STR_275(CODE[17]), STR_274(CODE[3]), STR_273(CODE[67]), STR_272(CODE[3]), 
		 -> STR_271(CODE[29]), STR_270(CODE[67]), STR_269(CODE[52]), STR_268(CODE[39]), 
		 -> STR_267(CODE[62]), STR_266(CODE[55]), STR_265(CODE[49]), STR_264(CODE[67]), 
		 -> STR_263(CODE[47]), STR_262(CODE[47]), STR_261(CODE[34]), STR_260(CODE[71]), 
		 -> STR_259(CODE[20]), STR_258(CODE[78]), STR_257(CODE[24]), STR_256(CODE[77]), 
		 -> STR_255(CODE[74]), STR_254(CODE[76]), STR_253(CODE[47]), STR_252(CODE[40]), 
		 -> STR_251(CODE[39]), STR_250(CODE[33]), STR_249(CODE[23]), STR_248(CODE[56]), 
		 -> STR_247(CODE[24]), STR_246(CODE[44]), STR_245(CODE[50]), STR_244(CODE[31]), 
		 -> STR_243(CODE[50]), STR_242(CODE[51]), STR_241(CODE[46]), STR_240(CODE[44]), 
		 -> STR_239(CODE[27]), STR_238(CODE[39]), STR_237(CODE[39]), STR_236(CODE[52]), 
		 -> STR_235(CODE[54]), STR_234(CODE[55]), STR_233(CODE[3]), STR_230(CODE[24]), 
		 -> STR_229(CODE[57]), STR_228(CODE[53]), STR_227(CODE[58]), STR_226(CODE[3]), 
		 -> STR_223(CODE[25]), STR_222(CODE[3]), STR_219(CODE[24]), STR_218(CODE[3]), 
		 -> STR_215(CODE[24]), STR_214(CODE[3]), STR_211(CODE[24]), STR_210(CODE[3]), 
		 -> STR_207(CODE[23]), STR_206(CODE[3]), STR_203(CODE[21]), STR_202(CODE[3]), 
		 -> STR_199(CODE[22]), STR_198(CODE[3]), STR_195(CODE[17]), STR_194(CODE[3]), 
		 -> STR_191(CODE[18]), STR_190(CODE[4]), STR_189(CODE[11]), STR_188(CODE[2]), 
		 -> STR_185(CODE[7]), STR_182(CODE[7]), STR_179(CODE[9]), STR_176(CODE[7]), 
		 -> STR_173(CODE[8]), STR_170(CODE[7]), STR_169(CODE[2]), STR_168(CODE[2]), 
		 -> STR_167(CODE[6]), STR_166(CODE[8]), STR_165(CODE[8]), STR_164(CODE[20]), 
		 -> STR_163(CODE[27]), STR_162(CODE[6]), STR_161(CODE[33]), STR_158(CODE[41]), 
		 -> STR_157(CODE[23]), STR_155(CODE[22]), STR_150(CODE[26]), STR_148(CODE[32]), 
		 -> STR_146(CODE[28]), STR_137(CODE[6]), STR_135(CODE[40]), STR_133(CODE[44]), 
		 -> STR_130(CODE[6]), STR_129(CODE[39]), STR_127(CODE[36]), STR_125(CODE[37]), 
		 -> STR_123(CODE[40]), STR_121(CODE[37]), STR_120(CODE[50]), STR_117(CODE[6]), 
		 -> STR_116(CODE[41]), STR_114(CODE[38]), STR_112(CODE[39]), STR_110(CODE[42]), 
		 -> STR_108(CODE[39]), STR_107(CODE[66]), STR_104(CODE[6]), STR_103(CODE[27]), 
		 -> STR_102(CODE[3]), STR_99(CODE[20]), STR_98(CODE[52]), STR_94(CODE[8]), 
		 -> STR_93(CODE[36]), STR_90(CODE[8]), STR_89(CODE[38]), STR_88(CODE[24]), 
		 -> STR_86(CODE[33]), STR_84(CODE[24]), STR_82(CODE[52]), STR_80(CODE[54]), 
		 -> STR_79(CODE[6]), STR_78(CODE[3]), STR_73(CODE[25]), STR_70(CODE[17]), 
		 -> STR_69(CODE[3]), STR_68(CODE[4]), STR_67(CODE[3]), STR_64(CODE[4]), 
		 -> STR_59(CODE[15]), wrkbuf(BANK1[80]), STR_56(CODE[14]), STR_54(CODE[33]), 
		 -> STR_52(CODE[24]), STR_50(CODE[52]), STR_48(CODE[6]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), 
		 -> STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), 
		 -> STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), 
		 -> STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), 
		 -> STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), 
		 -> STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), 
		 -> STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2137	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_297(CODE[17]), STR_296(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_232(CODE[3]), STR_231(CODE[7]), STR_225(CODE[3]), STR_224(CODE[7]), 
		 -> STR_221(CODE[4]), STR_220(CODE[8]), STR_217(CODE[4]), STR_216(CODE[8]), 
		 -> STR_213(CODE[4]), STR_212(CODE[8]), STR_209(CODE[4]), STR_208(CODE[8]), 
		 -> STR_205(CODE[4]), STR_204(CODE[7]), STR_201(CODE[4]), STR_200(CODE[7]), 
		 -> STR_197(CODE[4]), STR_196(CODE[7]), STR_193(CODE[4]), STR_192(CODE[7]), 
		 -> STR_187(CODE[3]), STR_186(CODE[7]), STR_184(CODE[3]), STR_183(CODE[7]), 
		 -> STR_181(CODE[3]), STR_180(CODE[7]), STR_178(CODE[3]), STR_177(CODE[7]), 
		 -> STR_175(CODE[3]), STR_174(CODE[7]), STR_172(CODE[3]), STR_171(CODE[7]), 
		 -> STR_101(CODE[3]), STR_100(CODE[7]), STR_96(CODE[4]), STR_95(CODE[8]), 
		 -> STR_92(CODE[4]), STR_91(CODE[8]), STR_77(CODE[3]), STR_76(CODE[7]), 
		 -> STR_75(CODE[3]), STR_74(CODE[7]), STR_72(CODE[6]), STR_71(CODE[10]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_63(CODE[3]), STR_62(CODE[7]), 
		 -> STR_61(CODE[3]), STR_60(CODE[7]), STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2117$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1533	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_232(CODE[3]), STR_231(CODE[7]), 

    printErrors$1524	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_225(CODE[3]), STR_224(CODE[7]), 

    printErrors$1518	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_221(CODE[4]), STR_220(CODE[8]), 

    printErrors$1512	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_217(CODE[4]), STR_216(CODE[8]), 

    printErrors$1506	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_213(CODE[4]), STR_212(CODE[8]), 

    printErrors$1500	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_209(CODE[4]), STR_208(CODE[8]), 

    printStatistics$1493	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_205(CODE[4]), STR_204(CODE[7]), 

    printStatistics$1487	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[4]), STR_200(CODE[7]), 

    printStatistics$1481	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_197(CODE[4]), STR_196(CODE[7]), 

    printStatistics$1475	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[4]), STR_192(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1241(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1265(BANK2[1]), doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1407	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    receivePrintEventVerbose$1402	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_184(CODE[3]), STR_183(CODE[7]), 

    receivePrintEventVerbose$1397	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_181(CODE[3]), STR_180(CODE[7]), 

    receivePrintEventVerbose$1392	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_178(CODE[3]), STR_177(CODE[7]), 

    receivePrintEventVerbose$1387	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_175(CODE[3]), STR_174(CODE[7]), 

    receivePrintEventVerbose$1382	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_172(CODE[3]), STR_171(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1301	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1281	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1271	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1262	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1256	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1247	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1243	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1233	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1229	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1224	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1216	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1211	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1207	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1202	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1190	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_setFilter
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  142938
                                            128 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             56 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             89 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             56 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             19 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             19 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       90    90      0  100739
                                            108 BANK0     20    20      0
                                              0 BANK2     70    70      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23384
                                            103 BANK0      5     5      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             97 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             88 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2312
                                             56 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             49 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             12 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1214
                                             19 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     740
                                             14 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    3637
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    4042
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                         9     9      0    3307
                                             17 BANK0      9     9      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              2 BANK0     10     3      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              2 BANK0     15    11      4
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     46      C6       8       77.3%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F4       6       95.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     87      87       4       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     380      15        0.0%
DATA                 0      0     57C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Oct 06 23:07:48 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6A1A  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 2100  
            doModeVerbose@filter_nodeid 028E                                      PL2 6A1A  
                                    PL4 6A36                                      PL6 6A50  
                                    PL8 6A60                                      _id 01ED  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 0F1E  
                                   PL10 6A6E                                     PL20 2C22  
                                   PL12 52F0                                     PL30 6AC8  
                                   PL22 531E                                     PL14 2F60  
                                   PL40 6AEE                                     PL32 2CF0  
                                   PL24 308A                                     PL16 530E  
                                   PL50 2D04                                     PL42 6B08  
                                   PL34 3D48                                     PL26 34E0  
                                   PL18 1C72                                     PL60 6B3A  
                                   PL52 2D14                                     PL44 5344  
                                   PL36 6ADC                                     PL28 6AB8  
                                   PL70 2744                                     PL62 1B40  
                                   PL54 6B22                                     PL46 1E4C  
                                   PL38 2584                                     PL80 34F0  
                                   PL72 2A1A                                     PL64 5374  
                                   PL56 3D66                                     PL48 1EEC  
                                   PL90 3682                                     PL82 1F90  
                                   PL74 2D26                                     PL66 538A  
                                   PL58 535E                                     PL92 6B76  
                                   PL84 5398                                     PL76 30B4  
                                   PL68 30A0                                     PL94 2266  
                                   PL86 6B64                                     PL78 6B50  
                                   PL96 6B86                                     PL88 4C72  
                                   PL98 2664                 sendEscapedUartData@pcrc 006C  
                                   l440 4072                                     l450 40DE  
                                   l603 5D6E                                     l451 40E8  
                                   l460 4116                                     l444 408E  
                                   l453 40F4                                     l447 40A4  
                                   l439 4030                                     l448 40AE  
                                   l570 5D0C                                     l730 3BA8  
                                   l492 53FC                                     l725 3A36  
                                   l590 5CB6                                     l566 5B46  
                                   l902 1DBE                                     l559 6A18  
                                   l911 1DEE                                     l743 3AC0  
                                   l496 540E                                     l920 1E38  
                                   l816 4B6C                                     l833 15EA  
                                   l841 1618                                     l905 1DC8  
                                   l914 1E0E                                     l595 5CE4  
                                   l579 5C22                                     l923 1E42  
                                   l851 21C8                                     l836 15F4  
                                   l908 1DD2                                     l932 25B0  
                                   l860 220E                                     l845 163C  
                                   l917 1E1E                                     l941 25F6  
                                   l781 4C70                                     l950 2634  
                                   l854 21D2                                     l935 25BA  
                                   l863 221E                                     l791 496E  
                                   l944 2606                                     l848 21BE  
                                   l881 1E72                                     l953 2650  
                                   l929 25A6                                     l857 21EE  
                                   l890 1EBE                                     l938 25D6  
                                   l866 2252                                     l875 1E5E  
                                   l947 2622                                     l884 1E8E  
                                   l956 265A                                     l893 1ED8  
                                   l869 225C                                     l878 1E68  
                                   l887 1EAE                                     l992 45CE  
                                   l896 1EE2                                     l993 45E2  
                                   l985 4538                                     l997 3104  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 007E  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _dlc 003A  
                                   _pos 0034                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00FC                                     wreg 000FE8  
         __end_of_writeRegisterExtended 2B2A                                    PL100 6B96  
                                  PL110 2D3A                                    PL102 53AA  
                                  PL112 53B4                                    PL104 10AE  
                                  PL106 1288                                    PL108 4342  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1000 310E                                    l1003 3118  
                                  l1012 31F6                                    l1100 353C  
                                  l1022 33AC                                    l1006 3134  
                                  l1031 33DC                                    l1015 3200  
                                  l1025 33B6                                    l1121 3658  
                                  l1105 356E                                    l1050 34DE  
                                  l1018 320A                                    l1114 35F6  
                                  l1131 2840                                    l1300 1A2E  
                                  l1044 34CA                                    l1028 33C0  
                                  l1124 3676                                    l1108 35A6  
                                  l1142 2336                                    l1311 3DF4  
                                  l1151 2932                                    l1047 34D4  
                                  l1127 3680                                    l1320 3E84  
                                  l1321 3E96                                    l1313 3E06  
                                  l2121 2C18                                    l1081 210E  
                                  l1322 3EA8                                    l1314 3E18  
                                  l2122 2C20                                    l1090 21A2  
                                  l1323 3EBA                                    l1315 3E2A  
                                  l1139 22AE                                    l1251 2E60  
                                  l1324 3ECC                                    l1316 3E3C  
                                  l1244 48AA                                    l1236 4816  
                                  l1340 119A                                    l1252 2D6C  
                                  l1148 288C                                    l1084 2118  
                                  l1325 3EDE                                    l1317 3E4E  
                                  l1093 21AC                                    l1326 3EF0  
                                  l1318 3E60                                    l1510 32FA  
                                  l1166 2A80                                    l1078 2104  
                                  l1327 3F02                                    l1319 3E72  
                                  l1087 2134                                    l1328 3F5A  
                                  l1336 1AC2                                    l1345 2048  
                                  l1185 1458                                    l1169 2B28  
                                  l1290 1AE6                                    l1700 4D8A  
                                  l1516 3378                                    l1508 32DC  
                                  l1293 1B04                                    l1189 1464  
                                  l2511 1428                                    l1720 4E20  
                                  l1624 1776                                    l1632 17D6  
                                  l2521 11D0                                    l1570 2CEE  
                                  l2602 1766                                    l1626 177E  
                                  l1651 1CB2                                    l1900 15B6  
                                  l2428 18B2                                    l1716 4DE8  
                                  l1652 1D18                                    l1901 15B8  
                                  l1902 15C2                                    l1822 0F1E  
                                  l2438 168E                                    l2614 1BE6  
                                  l1646 1254                                    l1903 15C4  
                                  l1735 4F0A                                    l1719 4E1C  
                                  l2616 1BDA                                    l1905 15DC  
                                  l1913 14D2                                    l2641 1396  
                                  l2617 1BDE                                    l2650 1216  
                                  l2562 16A0                                    l1771 50D4  
                                  l1763 506C                                    l1683 4C9C  
                                  l1772 50D8                                    l1596 2562  
                                  l2564 1700                                    l2660 1352  
                                  l2397 1D98                                    l1790 517E  
                                  l1774 50F4                                    l1863 0FDC  
                                  l1847 10E0                                    l1599 2582  
                                  l2583 193A                                    l1864 0FDE  
                                  l2496 2720                                    l1769 50AE  
                                  l2586 1936                                    l1699 4DD8  
                                  l1896 15A2                                    STR_1 75B7  
                                  STR_2 6ED6                                    STR_3 7649  
                                  STR_4 6FEF                                    STR_5 7770  
                                  STR_6 7CC0                                    STR_7 7732  
                                  STR_8 7CA7                                    STR_9 7C64  
                                  _PEIE 007F96                          sendCANFrame@id 0091  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 002B                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 1E4C  
                                  _bHex 002C            doModeVerbose@filter_priority 028C  
                                  _crc8 112A                                    _data 01D5  
                                  _caps 01F1                                    _atoi 2B2A  
                                  _main 3F5C                                    _init 13A0  
                                  _mode 012C                                    _itoa 10F2  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 1D1A  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 02FA  
                          _sprintf$2130 0082                            _sprintf$2131 0084  
                          _sprintf$2137 0086            receiveSendMultiEventCANAL@id 007D  
             ECANReceiveMessage@dataLen 000E      __end_of_receiveSendMultiEventCANAL 34E0  
            _receiveSendMultiEventCANAL 337A                      doModeVerbose@count 02B2  
                 getVSCPFrame@pPriority 0075                      doModeVerbose@value 02BA  
                  __end_of_getVSCPFrame 1AC4                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 00A8  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 _B0CON 000E20                                   l12117 3F14  
                                 _B1CON 000E30                                   l12129 2C7C  
                                 _B2CON 000E40                                   l15001 63D8  
                                 l14203 4074                                   l10765 24DC  
                                 l15101 663A                                   l14221 40C0  
                                 l14205 4088                                   l15111 668E  
                                 l15023 6426                                   l15015 6414  
                                 _B3CON 000E50                                   l10777 256C  
                                 l12625 16CE                                   l15009 63EA  
                                 l14217 40B8                                   l14209 4098  
                                 l10779 2570                                   l16011 37E2  
                                 l15203 696C                                   l15131 671E  
                                 l15115 66B2                                   l15051 64A0  
                                 l15043 648E                                   l14411 5412  
                                 l14227 40F0                                   l14171 3FC2  
                                 l15205 697A                                   l15125 66FC  
                                 l15037 6464                                   l15029 6452  
                                 l15221 6A04                                   l15301 3AC6  
                                 l14253 4138                                   l14245 4122  
                                 l15143 6768                                   l15215 69DE  
                                 l14511 56BA                                   l14503 568A  
                                 l14431 5490                                   l15303 3ACC  
                                 l15231 39FE                                   l14247 4126  
                                 l14239 410E                                   _B4CON 000E60  
                                 l16121 4898                                   l16105 4832  
                                 l16025 45FE                                   l15209 69A8  
                                 l15137 6742                                   l15073 6532  
                                 l15065 64DC                                   l15057 64CA  
                                 l14513 56CC                                   l15225 6A16  
                                 l15305 3AD0                                   l15233 3A02  
                                 l15401 48FA                                   l14249 412C  
                                 l13803 32FC                                   l15219 69F6  
                                 l15171 683C                                   l15163 67F6  
                                 l15091 65EC                                   l15075 6540  
                                 l14523 5722                                   l14507 56A2  
                                 l14419 542E                                   l15323 3AF2  
                                 l15315 3AE6                                   l15307 3AD6  
                                 l15251 3A4E                                   l16301 4DEC  
                                 l16117 4886                                   l16053 46CE  
                                 l15149 6790                                   l14541 57A6  
                                 l14277 1788                                   l15341 3B18  
                                 l15413 4944                                   l15405 491C  
                                 l14391 0F9A                                   l14383 1A0A  
                                 l14375 19E0                                   l17111 12A0  
                                 l16039 4666                                   l13823 336A  
                                 l16151 2DA2                                   l16135 2D5A  
                                 l16231 2930                                   l15183 68C0  
                                 l15079 6554                                   l14631 5AF0  
                                 l14551 57EE                                   l14535 577C  
                                 l14471 559C                                   l14463 5566  
                                 l14455 5530                                   l14447 54F8  
                                 l14439 54C2                                   l14279 178E  
                                 l15255 3A54                                   l15503 4B8A  
                                 l15423 4978                                   l15407 4920  
                                 _B5CON 000E70                                   l16313 4E26  
                                 l17113 12A6                                   l16081 479E  
                                 l13809 332A                                   l13817 3348  
                                 l14721 5D2C                                   l14641 5B14  
                                 l14633 5B04                                   l14625 5A84  
                                 l14617 5A60                                   l14609 5A2A  
                                 l14529 5752                                   l15353 3B42  
                                 l15265 3A6A                                   l15513 4BAA  
                                 l14387 1A20                                   l14379 19F4  
                                 l16411 4FBC                                   l16307 4E04  
                                 l16243 4CA6                                   l16067 4736  
                                 l13827 336E                                   l15187 68E4  
                                 l15179 6884                                   l14811 5F82  
                                 l14731 5D80                                   l14707 5CDE  
                                 l14651 5B4E                                   l14619 5A6E  
                                 l14547 57D0                                   l14491 5642  
                                 l15371 3B8A                                   l15347 3B2C  
                                 l15275 3A92                                   l15291 3A9A  
                                 l15523 4BC6                                   l15435 49A4  
                                 l15419 4968                                   l15531 4C3C  
                                 l16501 515E                                   l16333 4E6C  
                                 l16317 4E2C                                   l16325 4E50  
                                 l16261 4CEE                                   l16245 4CAA  
                                 l16253 4CB8                                   l16237 4C84  
                                 l17213 1FD4                                   l16093 47F2  
                                 l13829 3370                                   l16173 2E16  
                                 l16229 2902                                   l15197 6940  
                                 l14581 5926                                   l14573 58D6  
                                 l14565 5882                                   l14557 5828  
                                 l14477 55DA                                   l14397 53C6  
                                 l17141 12E8                                   l15365 3B72  
                                 l15381 3BA6                                   l17133 1D04  
                                 l15461 4A6A                                   l15445 49C8  
                                 l15541 4C6E                                   l13871 0FFA  
                                 l16431 501C                                   l16343 4E94  
                                 l16335 4E7A                                   l16319 4E38  
                                 l16247 4CAE                                   l17207 1FCE  
                                 l13775 3276                                   l17311 2334  
                                 l14807 5F56                                   l14743 5DC8  
                                 l14751 5E08                                   l14671 5BE8  
                                 l14591 59A2                                   l14575 58E8  
                                 l14559 582E                                   l14567 5894  
                                 l14495 565A                                   l14487 5624  
                                 l15359 3B5A                                   l15375 3B9C  
                                 l17127 1CC0                                   l15535 4C50  
                                 l17401 18A4                                   l16521 51A0  
                                 l16441 504C                                   l16409 4FB8  
                                 l16425 4FF0                                   l16329 4E66  
                                 l16249 4CB2                                   l17225 200E  
                                 l17209 1FD0                                   l15801 43FA  
                                 l16097 4804                                   l13769 3264  
                                 l17321 1546                                   l16169 2E0E  
                                 l14921 6232                                   l14833 601A  
                                 l14681 5C34                                   l14753 5E0C  
                                 l14761 5E3C                                   l15377 3BA2  
                                 l17081 3600                                   l17073 35BA  
                                 l15537 4C5C                                   l15529 4BDE  
                                 l15555 3C16                                   l17411 165A  
                                 l16523 51A6                                   l16507 5166  
                                 l16435 503A                                   l16427 5002  
                                 l16371 4F14                                   l16339 4E88  
                                 l16347 4E9A                                   l13787 32A0  
                                 l17323 1550                                   l16187 103A  
                                 l14915 6206                                   l14907 61F6  
                                 l14827 5FE2                                   l14819 5F92  
                                 l14843 606E                                   l14659 5B98  
                                 l14587 5964                                   l14499 5672  
                                 l17147 1304                                   l15491 4B4C  
                                 l17413 165E                                   l16541 5232  
                                 l16533 51C8                                   l16517 518E  
                                 l16453 508A                                   l16381 4F48  
                                 l16357 4ED4                                   l16349 4EC4  
                                 l16293 4DC4                                   l16277 4D5A  
                                 l16269 4D34                                   l15813 444C  
                                 l13797 32E0                                   l17157 1198  
                                 l17309 2306                                   l17317 1534  
                                 l16189 1042                                   l14693 5C82  
                                 l14597 59E0                                   l17085 3614  
                                 l17341 1240                                   l17333 122E  
                                 l15469 4AE2                                   ?_crc8 0067  
                                 l15583 15A4                                   l15575 1596  
                                 l17431 1404                                   l16551 5278  
                                 l16447 5070                                   l16383 4F4C  
                                 l16375 4F32                                   l16295 4DDE  
                                 l17191 1A64                                   l17503 1362  
                                 l17319 1538                                   l16631 2AF8  
                                 l14943 6282                                   l14935 6270  
                                 l14855 60AA                                   l14839 6044  
                                 l14791 5EC6                                   l14783 5EB6  
                                 l14775 5E80                                   l14759 5E2A  
                                 l17247 2682                                   l15479 4B0C  
                                 l15753 249E                                   l17417 1680  
                                 l17409 164E                                   l16561 52B2  
                                 l16473 5104                                   l16297 4DE2  
                                 l16289 4D90                                   l15825 449C  
                                 l17505 136A                                   l15921 2B32  
                                 l16713 1C38                                   l16633 2B26  
                                 l14929 6242                                   l14865 60E2  
                                 l17257 26C6                                   l15739 247C  
                                 l17427 13F8                                   l17451 11B4  
                                 l17355 1D22                                   l16555 5292  
                                 l16547 5254                                   l16539 51DC  
                                 l16483 5124                                   l16467 50EE  
                                 l16459 50B2                                   l16395 4F80  
                                 l16299 4DE6                                   l16571 52DC  
                                 l15851 4544                                   l15931 2B9E  
                                 l16715 1C40                                   l14971 62FA  
                                 l14963 62E8                                   l14883 6158  
                                 l15499 4B72                                   l17429 1400  
                                 l17365 1D5A                                   l16565 52D4  
                                 l16557 52A4                                   l16397 4F84  
                                 l16573 52E2                                   l15861 45B4  
                                 l15837 44EC                                   l17461 1704  
                                 l15909 1B9C                                   l15933 2BA6  
                                 l16653 23A8                                   l16709 1C12  
                                 l14957 62BE                                   l14949 62AC  
                                 l14981 6366                                   l14797 5F32  
                                 l17349 1252                                   l17439 141E  
                                 l17455 11C6                                   l17447 11A8  
                                 l17279 110E                                   l17391 1872  
                                 l15863 45B8                                   l15871 45E0  
                                 l17471 1752                                   l15919 2B2C  
                                 l16655 23BE                                   l16647 235C  
                                 l16719 1C4E                                   l16591 146E  
                                 l16583 143E                                   l14887 6182  
                                 l14799 5F46                                   l15881 0F70  
                                 l17449 11B0                                   l17393 1876  
                                 l16489 5138                                   l16497 5154  
                                 l15865 45C0                                   l17465 173E  
                                 l17481 1206                                   l15937 2BE0  
                                 l15929 2B86                                   l15945 100C  
                                 l17475 11E6                                   l15891 1924  
                                 l16659 23DA                                   l16691 29F6  
                                 l16683 29BC                                   l16675 2958  
                                 l16771 3438                                   l16843 31CE  
                                 l17389 1866                                   l15789 43AA  
                                 l17469 174A                                   l15885 18C6  
                                 l15949 101C                                   l16685 29C4  
                                 l16749 3408                                   l17479 1202  
                                 l17495 131E                                   l15983 3712  
                                 l16687 29DA                                   l16791 349A  
                                 l16847 31E6                                   l16863 1082  
                                 l17489 0F88                                   l15889 18FE  
                                 l17497 1326                                   l15969 36AA  
                                 l16777 3456                                   l16937 27FE  
                                 l15899 1B64                                   l16795 34BA  
                                 l16787 347A                                   l16859 1064  
                  __size_of_doModeSLCAN 03C6                                   l15997 377A  
                                 ?_atoi 0066                                   ?_main 00E0  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 0F2C                                   _EEADR 000FA9  
                                 STR_10 7C42                                   STR_11 7C64  
                                 STR_12 7C82                                   STR_20 7C2D  
                                 STR_13 7C64                                   STR_21 7A2B  
                                 STR_30 7CF4                                   STR_14 7BA0  
                                 STR_22 7A3F                                   STR_15 7C64  
                                 STR_31 7CF4                                   STR_23 7A7B  
                                 STR_32 7CF4                                   STR_16 7C34  
                                 STR_40 7AA0                                   STR_24 7998  
                                 STR_17 7C64                                   STR_33 7CF4  
                                 STR_41 7CBB                                   STR_25 7831  
                                 STR_42 7C64                                   STR_34 7CF4  
                                 STR_18 7BF2                                   STR_26 7A17  
                                 STR_50 70C7                                   STR_19 7C64  
                                 STR_51 7B6E                                   STR_35 7CF4  
                                 STR_43 7CD5                                   STR_27 7A8E  
                                 STR_44 7C64                                   STR_36 7C64  
                                 STR_60 7C49                                   STR_28 78C4  
                                 STR_52 78AC                                   STR_53 7B6E  
                                 STR_61 7CED                                   STR_29 7CEA  
                                 STR_45 7CB6                                   STR_37 76AF  
                                 STR_46 7C64                                   STR_62 7C49  
                                 STR_38 7CE7                                   STR_70 7B08  
                                 STR_54 76F1                                   STR_39 7C64  
                                 STR_55 7B6E                                   STR_71 7B66  
                                 STR_63 7CED                                   STR_47 7C93  
                                 STR_48 7C64                                   STR_72 7C6A  
                                 STR_64 7BCE                                   STR_56 7B36  
                                 STR_80 705C                                   STR_65 7C49  
                                 STR_81 7C9D                                   STR_49 7C98  
                                 STR_57 7B66                                   STR_73 7863  
                                 STR_82 70C7                                   STR_90 7B3C  
                                 STR_74 7C49                                   STR_66 7CED  
                                 STR_58 7C6A                                   STR_83 7B6E  
                                 STR_75 7CED                                   STR_67 7CE1  
                                 STR_91 7BC2                                   STR_59 7B19  
                                 STR_84 78AC                                   STR_76 7C49  
                                 STR_92 7CCD                                   STR_68 7CC5  
                                 STR_69 70C4                                   STR_85 7B6E  
                                 STR_77 7CED                                   STR_93 7625  
                                 STR_78 70C4                                   STR_86 76F1  
                                 STR_94 7B3C                                   STR_79 7C64  
                                 STR_95 7BC2                                   STR_87 7B6E  
                                 STR_96 7CCD                                   STR_88 78DC  
                                 STR_97 7CAC                                   STR_89 756C  
                                 STR_98 70C7                                   STR_99 7A53  
          __end_of_printFirmwareVersion 1B40                                   _BSEL0 000DF8  
                       __end_of___lldiv 18C4                                   ?_utoa 0067  
                       __end_of_calcCRC 108C                                   u21000 2BCA  
                                 _T0CON 000FD5                                   u21010 2BF4  
                                 u21007 2BC4                         __end_of___llmod 16A0  
                                 u21017 2BEE                                   u20350 4A36  
                                 u21055 2086                                   u20360 4A40  
                                 u20370 4A4A                                   u20355 4A34  
                                 u15005 2C66                                   u20365 4A3E  
                                 u15015 2C84                                   u20375 4A48  
                                 _LATC1 007C59                                   u23130 1AB6  
                                 u20725 10EC                                   u20726 10EE  
                                 u23135 1AAC                                   u20920 2B46  
                                 u23320 1578                                   u20940 2B5E  
                                 u22605 2794                                   u20927 2B40  
                                 u23327 156E                                   u20960 2B7C  
                                 u20947 2B58                                   u15620 16BE  
                                 u20980 2B9A                                   u20967 2B76  
                                 u15640 16F6                                   u12985 254E  
                                 u15627 16B8                                   u20987 2B94  
                                 u15647 16F0                                   u19105 594C  
                                 u21994 144E                                   u21995 144A  
                                 u19115 598A                                   u23667 3FD0  
                                 u22980 12C2                                   u14965 3D98  
                                 u19125 59C8                                   u14966 3D9E  
                                 u14975 3DCC                                   u14967 3DAC  
                                 u19135 5A06                                   u14976 3DD2  
                                 u14977 3DE0                                   u14995 2C56  
                       __end_of___lwdiv 1432                                   u22987 12BC  
                                 u19075 58BA                                   u18630 14F4  
                                 u19095 590E                                   _ERRIE 007D1D  
                                 u18640 1522                                   u18637 14EE  
                                 u19365 5E62                                   u18647 151C  
                                 u19455 6094                                   u18815 546A  
                                 u18825 54A8                                   u18835 54DC  
                                 u19565 6A76                                   u18845 5514  
                                 u19575 638C                                   u19495 61A8  
                                 u18855 554C                            _vscpPriority 003D  
                                 i1l401 0092                                   u19665 657A  
                                 u18865 5582                                   i1l403 018C  
                                 u19835 690A                                   u19675 65C2  
                                 u18875 55C2                                   i1l412 018A  
                                 i1l421 01EA                                   u19685 6612  
                                 u18885 5600                                   i1l406 018A  
                                 i1l431 02DC                                   i1l415 017A  
                       __end_of___lwmod 11DA                                   u19865 69A0  
                                 u18985 56F2                                   i1l418 0196  
                                 u19875 69CE                                   u19980 3A70  
                       sendCANFrame@dlc 0095                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00BA  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 002F                 readRegisterExtended@reg 00BA  
                         __CFG_WRTD$OFF 000000                          Read_b_eep@badd 0060  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 1C80  
                                 crc8@m 0069                                   _flags 003B  
                       __end_of_dpowers 6BFE                  Write_b_eep@GIE_BIT_VAL 0063  
                       __end_of_isdigit 1002                                   _timer 011C  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00E6                                   _ultoa 2672  
                            Interrupt@c 0020              ??_printNodeFirmwareVersion 00C1  
                      _printErrors$1500 0094                        _printErrors$1512 0098  
                      _printErrors$1506 0096                        _printErrors$1524 009C  
                      _printErrors$1533 009E                        _printErrors$1518 009A  
                                 tablat 000FF5                 ??_receiveSendEventCANAL 0073  
           __end_of_sendEscapedUartData 163E                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 52F0  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 1218  
                       __end_of_strcspn 13A0                         __end_of_toupper 0F8C  
                       __end_of_stristr 193C                            __end_ofPL100 6BA6  
                          __end_ofPL110 2D44                            __end_ofPL102 53B4  
                          __end_ofPL112 53BE                            __end_ofPL104 10BE  
                          __end_ofPL106 1296                            __end_ofPL108 4350  
     __size_of_receivePrintEventVerbose 0294                     doModeVerbose@i_1183 02B7  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1301 02C4  
                   doModeVerbose@p_1243 02BD                     doModeVerbose@p_1190 02BB  
                   doModeVerbose@p_1281 02C2                          WriteUSART@data 0060  
                  _ECANSetOperationMode 0F8C                            _canInputFifo 01CD  
                       __initialization 147C                  doModeVerbose@page_1239 02A7  
         receiveSendMultiEventCANAL@dlc 0081                            __end_of_crc8 1162  
         receiveSendMultiEventCANAL@crc 0082                            __end_of_atoi 2C22  
         receiveSendMultiEventCANAL@pos 0083                            __end_of_main 4144  
                          __end_of_init 13E8                            __end_of_itoa 112A  
                          __end_of_utoa 1DBA                     doModeVerbose@ifmode 02BF  
                            _Read_b_eep 0F50                     doModeVerbose@maskno 02AF  
                      __end_of_Busy_eep 0F24                     doModeVerbose@nodeid 02B3  
                         doModeSLCAN@id 009F                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A5                       ??_ECANSendMessage 0074  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BD  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0073  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 007A  
                                ??_main 00E5                       readRegister@value 00BB  
                                ??_init 007A                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0290  
                         __activetblptr 000002                         _stateVscpDriver 0037  
                     __RegsToCANID@type 0005                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000F                           ?_readRegister 00B8  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1247 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00BB              ECANReceiveMessage@savedPtr 0010  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7C49                                  STR_101 7CED  
                                STR_102 70C4                                  STR_110 7368  
                                STR_111 7CF4                                  STR_103 77C6  
                                STR_104 7C64                                  STR_200 7C57  
                                STR_112 74F8                                  STR_120 7162  
                                STR_113 7CF4                                  STR_201 7CDD  
                                STR_105 7C3B                                  STR_121 7592  
                                STR_210 70C4                                  STR_202 70C4  
                                STR_130 7C64                                  STR_122 7CF4  
                                STR_106 7CF4                                  STR_114 7546  
                                STR_115 7CF4                                  STR_131 7C8E  
                                STR_203 79DA                                  STR_211 7924  
                                STR_123 740C                                  STR_107 6E1C  
                                STR_124 7CF4                                  STR_140 7CA7  
                                STR_204 7C57                                  STR_220 7BFA  
                                STR_212 7BFA                                  STR_132 7CD9  
                                STR_108 745C                                  STR_116 73BB  
                                STR_117 7C64                                  STR_109 7CF4  
                                STR_141 7C42                                  STR_221 7CDD  
                                STR_213 7CDD                                  STR_205 7CDD  
                                STR_125 75DC                                  STR_133 733C  
                                STR_222 70C4                                  STR_214 70C4  
                                STR_206 70C4                                  STR_126 7CF4  
                                STR_142 7C34                                  STR_118 7CA2  
                                STR_134 7BEA                                  STR_230 78F4  
                                STR_150 7817                                  STR_119 7CF4  
                                STR_143 7BA0                                  STR_231 7C49  
                                STR_151 7BD2                                  STR_207 796A  
                                STR_215 790C                                  STR_223 784A  
                                STR_127 7601                                  STR_135 7434  
                                STR_128 7CF4                                  STR_224 7C49  
                                STR_216 7BFA                                  STR_232 7CED  
                                STR_160 7CFC                                  STR_152 7C76  
                                STR_144 7C70                                  STR_208 7BFA  
                                STR_136 7B50                                  STR_240 7310  
                                STR_233 70C4                                  STR_137 7C64  
                                STR_225 7CED                                  STR_217 7CDD  
                                STR_209 7CDD                                  STR_153 7C7C  
                                STR_145 7BE2                                  STR_161 76D0  
                                STR_129 74D1                                  STR_241 72B6  
                                STR_226 70C4                                  STR_218 70C4  
                                STR_162 7C64                                  STR_154 7BF7  
                                STR_170 7C26                                  STR_138 7B8E  
                                STR_146 77AA                                  STR_250 768E  
                                STR_242 712F                                  STR_234 6F81  
                                STR_219 790C                                  STR_139 7C82  
                                STR_171 7C49                                  STR_147 7CB1  
                                STR_155 79AE                                  STR_163 77FC  
                                STR_251 7483                                  STR_243 7194  
                                STR_235 7026                                  STR_227 6E9C  
                                STR_180 7C49                                  STR_172 7CED  
                                STR_156 7CD1                                  STR_164 7A03  
                                STR_244 7751                                  STR_148 7712  
                                STR_252 73E4                                  STR_236 70FB  
                                STR_228 7092                                  STR_260 6D4F  
                                STR_181 7CED                                  STR_149 7C88  
                                STR_173 7BDA                                  STR_165 7BB2  
                                STR_157 7953                                  STR_261 766C  
                                STR_237 74AA                                  STR_253 7287  
                                STR_245 71C6                                  STR_229 6F10  
                                _EEDATA 000FA8                                  STR_238 6DB2  
                                STR_190 7CC9                                  STR_174 7C50  
                                STR_182 7C1F                                  STR_166 7BBA  
                                STR_158 7392                                  STR_246 72E4  
                                STR_262 7258                                  STR_270 6D96  
                                STR_254 6CB9                                  STR_183 7C49  
                                STR_175 7CED                                  STR_167 7C5E  
                                STR_159 7BA9                                  STR_191 7AB2  
                                STR_247 787C                                  STR_239 77E1  
                                STR_271 778D                                  STR_263 7229  
                                STR_255 6D05                                  STR_280 70C4  
                                STR_272 70C4                                  STR_184 7CED  
                                STR_168 7CF2                                  STR_192 7C57  
                                STR_176 7C18                                  STR_248 6F49  
                                STR_264 6DD9                                  STR_256 6C6C  
                                STR_273 6D96                                  STR_177 7C49  
                                STR_169 7CF0                                  STR_193 7CDD  
                                STR_185 7C11                                  STR_281 7B28  
                                STR_249 793C                                  STR_257 7894  
                                STR_265 71F8                                  STR_282 70C4  
                                STR_274 70C4                                  STR_194 70C4  
                                STR_186 7C49                                  STR_178 7CED  
                                STR_290 7C02                                  STR_266 6FB8  
                                STR_258 6C1E                                  STR_187 7CED  
                                STR_179 7B97                                  STR_291 7B44  
                                STR_195 7AF7                                  STR_275 7AE6  
                                STR_283 7A67                                  STR_259 79EF  
                                STR_267 6E5E                                  STR_188 7CF4  
                                STR_284 7CFC                                  STR_196 7C57  
                                STR_276 7BCA                                  STR_292 7B84  
                                STR_268 751F                                  STR_269 70C7  
                                STR_197 7CDD                                  STR_277 7CF8  
                                STR_285 7CF6                                  STR_293 7B7A  
                                STR_189 7B5B                                  STR_286 70C4  
                                STR_198 70C4                                  STR_278 7CE4  
                                STR_294 7981                                  STR_295 70C4  
                                STR_279 7CFA                                  STR_287 7B70  
                                STR_199 79C4                                  STR_288 70C4  
                                STR_296 7AC4                                  STR_289 7C0A  
                                STR_297 7AD5                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 2934                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 1F90                                  i1l1521 4178  
                         ?_init_app_ram 0001                                  i1l1531 4246  
                                i1l1540 4210                                  i1l1532 41C6  
                                _MDSEL0 007BBE                                  _MDSEL1 007BBF  
                                i1l1542 4220                                  i1l1534 41D4  
                                i1l1607 2EA6                                  i1l1608 2F5E  
                                i1l1552 42AA                                  i1l1544 4230  
                                i1l1536 41E8                                  i1l1528 4340  
                                i1l1553 42C4                                  i1l1538 41FC  
                                i1l1580 1844                                  i1l1575 3088  
                                i1l1926 0FB4                              _OpenTimer0 0FC4  
                                i1l6705 2F3A                                  i1l6707 2F44  
                                i1l6719 1F48                                  i1l6695 2EB0  
                                i1l6687 2E74                         _init_app_eeprom 23FE  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 000C                  ECANReceiveMessage@mode 0013  
                ECANReceiveMessage@temp 0014                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0077  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 0076  
                    _doModeVerbose$1202 0292                      _doModeVerbose$1211 0296  
                    _doModeVerbose$1207 0294                      _doModeVerbose$1224 029A  
                    _doModeVerbose$1216 0298                      _doModeVerbose$1233 029E  
                    _doModeVerbose$1229 029C                      _doModeVerbose$1262 02A2  
                    _doModeVerbose$1271 02A4                      _doModeVerbose$1256 02A0  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 006B  
                    __size_of_Interrupt 02E2                              _bLocalEcho 002E  
              readRegisterExtended@page 00B8                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0072  
                                ___wmul 108C                              _bInitiated 002D  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 012D  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007B                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1402 00A1  
         _receivePrintEventVerbose$1407 00A3           _receivePrintEventVerbose$1382 0099  
         _receivePrintEventVerbose$1392 009D           _receivePrintEventVerbose$1387 009B  
         _receivePrintEventVerbose$1397 009F                                  _memcpy 12D6  
                                _memset 1002                                  clear_0 1484  
                                clear_1 1498                                  clear_2 14AA  
                                clear_3 14B6                                  clear_4 14C2  
                         ?_sendCANFrame 0091                                  _strcat 152A  
                                _strchr 16A0                                  _strcpy 1030  
                                _strlen 1296                                  _wrkbuf 017D  
                                _strtok 1B56                                  _strspn 1318  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 1C72  
                          __mediumconst 6BA6                          ??_readRegister 00BC  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 0001  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0071                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 028F  
                      __end_of_strnicmp 1768                              __accesstop 0060  
               __end_of__initialization 14C8                    _printFirmwareVersion 1AC4  
                 __size_of_getVSCPFrame 0088               receiveSendEventCANAL@data 0073  
                  doModeVerbose@id_1313 02AA                              _WriteUSART 0F62  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 019E  
                  _printStatistics$1481 0096                    _printStatistics$1475 0094  
                  _printStatistics$1493 009A                    _printStatistics$1487 0098  
                 _uart_transmitOverruns 0124                             ?_Read_b_eep 0060  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 2744  
                            __end_ofPL2 6A36                              __end_ofPL4 6A50  
                            __end_ofPL6 6A60                              __end_ofPL8 6A6E  
                        ??_sendCANFrame 0098                       __end_of_ReadUSART 0FC4  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FE  
                    sendVSCPFrame@pData 009E                         readRegister@reg 00B8  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 011E  
                        doModeSLCAN@dlc 00A3                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00B6                  getVSCPFrame@pvscpclass 007D  
                       _fifo_canrxcount 0031                 __end_of_init_app_eeprom 24CE  
                     __end_of_Interrupt 02FA                           ReadUSART@data 0001  
                    readRegister@nodeid 00C0                          _status_led_cnt 0022  
                    __RegsToCANID@Value 0008                              _crc8_table 0300  
                     __end_of_OpenUSART 15DE                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C6                         setFilter@filter 006C  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 23FE  
                            _doModeVscp 39EC                                 ??_ultoa 007E  
                          _getVSCPFrame 1A3C                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                            __IT_INT_MASK 0028  
                         setFilter@eidh 006F                           setFilter@eidl 0070  
                          __IT_SAVE_BSR 0029                           setFilter@sidh 006D  
                         setFilter@sidl 006E                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0033             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 1D1A                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0027                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 1DBA                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 2842                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0063                   sendVSCPFrame@priority 009C  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                                 i1l10021 17E6  
                               i1l10031 1814                                 i1l10023 17F0  
                               i1l10033 181A                                 i1l10025 17FA  
                               i1l10027 1804                                 i1l10019 17DE  
                               i1l10029 180E                                 i1l10037 1826  
                               i1l10053 300A                                 i1l10301 41A6  
                               i1l10303 41B0                                 i1l10403 432A  
                               i1l10309 41B4                                 i1l10353 425A  
                               i1l10363 427A                                 i1l10381 42C6  
                               i1l10285 4166                                 i1l10295 4190  
                    __size_of_printGUID 00E6                                 i1l10389 42F6  
                               i1l10397 4314                                 i1l14101 01D6  
                               i1l14111 025A                                 i1l14103 01F2  
                   ?_sendVSCPDriverNack 0001                                 i1l14121 02CC  
                               i1l14113 025E                                 i1l14105 01FA  
                               i1l14041 003C                                 i1l14123 02CE  
                               i1l14115 0298                                 i1l14107 0226  
                               i1l14051 00A6                                 i1l14043 0042  
                               i1l14117 029C                                 i1l14109 0228  
                               i1l14061 00E8                                 i1l14053 00B8  
                               i1l14045 007E                                 i1l14119 02C8  
                               i1l14071 011A                                 i1l14063 00F0  
                               i1l14055 00C8                                 i1l14047 008E  
                               i1l14039 0034                                 i1l14129 02DA  
                               i1l14081 014A                                 i1l14065 00FC  
                               i1l14057 00CC                                 i1l14049 009A  
                               i1l14091 0182                                 i1l14083 0156  
                               i1l14075 012C                                 i1l14059 00D8  
                               i1l14093 0194                                 i1l14077 0138  
                               i1l14069 010E                                 i1l14095 019E  
                               i1l14087 0168                                 i1l14097 01C6  
                               i1l14089 0172                                 i1l14099 01CE  
                            _fifo_write 2E62                      __size_of_printHelp 01BE  
                    __size_of_printMode 0080                   sendVSCPFrame@vscptype 009A  
                 __size_of_fifo_getFree 0096                 doModeVerbose@value_1241 02B1  
               doModeVerbose@value_1265 02A9                       sendCANFrame@pdata 0096  
                            _made_table 0128                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 17D8                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2664  
            _sendVSCPDriverCommandReply 25A0                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2A2E  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 165C  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 2266          __size_of_receiveSendEventCANAL 0144  
         __end_of_receiveSendEventCANAL 320C                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 0180  
                       _ECANSendMessage 320C           __end_of_receiveSendEventSLCAN 3682  
                               __Hparam 0000                       __end_of_findNodes 2E62  
                               __Lparam 0000                       __end_of_fifo_init 1288  
                     __end_of_fifo_read 2584                           ??_getCANFrame 0072  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B8  
                  __end_of_readRegister 2338                               ?_printMDF 0001  
                               _bSilent 0030               receiveVSCPModeCanalMsg@id 00B4  
                         ??_doModeSLCAN 0098                                 ___lldiv 184E  
                       __size_of___wmul 0022                                 _calcCRC 105E  
                       getCANFrame@pdlc 006E                                 ___llmod 163E  
                               ___lwdiv 13E8                               _FIFOEMPTY 007BA7  
                               ___lwmod 119C                   ?_readRegisterExtended 00B8  
           printNodeFirmwareVersion@buf 00C2                    __end_of_init_app_ram 3D48  
                          _fifo_getFree 1EFA                            init_crc8@crc 0064  
                               __pcinit 147C                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3F5C                                 __ptext1 0F1C  
                               __ptext2 48AC                                 __ptext3 1C80  
                               __ptext4 1218                 receiveSendEventCANAL@id 007C  
                               __ptext5 3502                                 __ptext6 2672  
                               __ptext7 39EC                                 __ptext8 21B6  
                               __ptext9 25A0                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C5                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6C1E  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6BD6                       __end_of_init_crc8 17D8  
                               _isdigit 0FE2          printNodeFirmwareVersion@nodeid 00C1  
                   __end_of_WriteTimer0 0F50                          _nibbleFromChar 1218  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 10F2  
                               _sprintf 4C7E        __end_of_sendVSCPModeCapabilities 21B6  
                     __end_of_setFilter 3F5C                                 _strichr 11DA  
                        doModeVerbose@c 02B9                          doModeVerbose@i 02B0  
                        doModeVerbose@p 02C0                                 _strcspn 135C  
                               _toupper 0F76                             ?_doModeVscp 0001  
                               _stristr 18C4                    __size_of_printBinary 004A  
                  end_of_initialization 14C8                       __end_of_octpowers 6BD6  
                  __size_of_printErrors 02C8                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                               i1u1214_25 416E  
                               memset@p 0066                               i1u1214_27 4170  
                         __Lmediumconst 6BA6                    __end_of_sendCANFrame 119C  
                             i1u1174_25 2FC6                               i1u1175_25 2FD6  
                             i1u1176_25 3014                               i1u1820_20 00FC  
                             i1u1820_21 00FA                               i1u1821_20 010C  
                             i1u1821_21 010A                               i1u1830_20 0194  
                             i1u1822_20 011A                               i1u1830_21 0192  
                             i1u1822_21 0118                               i1u1831_20 019E  
                             i1u1823_20 012A                               i1u1815_20 003C  
                             i1u1831_21 019C                               i1u1823_21 0128  
                             i1u1815_21 003A                               i1u1840_20 02C8  
                             i1u1832_20 01C6                               i1u1824_20 0138  
                             i1u1816_20 007E                               i1u1840_21 02C6  
                             i1u1832_21 01C4                               i1u1824_21 0136  
                             i1u1816_21 007C                               i1u1841_20 02D8  
                             i1u1833_20 01CE                               i1u1825_20 0148  
                             i1u1817_20 009A                               i1u1841_21 02D6  
                             i1u1833_21 01CC                               i1u1825_21 0146  
                             i1u1817_21 0098                               i1u1834_20 01D6  
                             i1u1826_20 0156                               i1u1818_20 00D8  
                             i1u1834_21 01D4                               i1u1826_21 0154  
                             i1u1818_21 00D6                               i1u1835_20 01F2  
                             i1u1827_20 0166                               i1u1819_20 00E8  
                             i1u1835_21 01F0                               i1u1827_21 0164  
                             i1u1819_21 00E6                               i1u1836_20 01FA  
                             i1u1828_20 0172                               i1u1836_21 01F8  
                             i1u1828_21 0170                               i1u1837_20 0226  
                             i1u1829_20 0182                               i1u1837_21 0224  
                             i1u1829_21 0180                               i1u1838_20 025A  
                             i1u1838_21 0258                               i1u1839_20 0298  
                             i1u1839_21 0296                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 2A1A  
                       ___lldiv@divisor 0064                       __end_of_printHelp 39EC  
                       ___lldiv@counter 0068                       __end_of_printMode 1A3C  
                     ECANSendMessage@id 006C                       ECANSendMessage@pb 0075  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00C1  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 152A  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 53BE  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00C6  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 204A                                 strlen@s 0060  
                            _sequencyno 0036                              _timekeeper 0118  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 204A  
                            findNodes@i 00CB                  __end_of_nibbleFromChar 1256  
                   __end_of_doModeSLCAN 4C72                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B8  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 337A  
                  _uart_receiveOverruns 0120                _receivePrintEventVerbose 4350  
                            _vscpNodeId 003C                           ?__CANIDToRegs 0062  
                  __end_of__RegsToCANID 308A                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B5  
                     doModeVerbose@preg 0284                          _init_crc8$2068 0060  
                ??_readRegisterExtended 00BF                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0098  
                        __end_of___wmul 10AE                     __size_of_doModeVscp 01BE  
                           _WriteTimer0 0F3E                             _Write_b_eep 10BE  
                        __end_of_memcpy 1318                          __end_of_memset 1030  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01F3  
                        __end_of_strcat 1582                          __end_of_strchr 1702  
                        __end_of_strcpy 105E                          __end_of_strlen 12D6  
              doModeVerbose@filter_type 028D                          __end_of_strtok 1BE8  
                        __end_of_strspn 135C                             __end_ofPL10 6AB8  
                           __end_ofPL20 2C30                             __end_ofPL12 530E  
                           __end_ofPL30 6ADC                             __end_ofPL22 5344  
                           __end_ofPL14 2F8E                             __end_ofPL40 6B08  
                           __end_ofPL32 2D04                             __end_ofPL24 30A0  
                           __end_ofPL16 531E                             __end_ofPL50 2D14  
                           __end_ofPL42 6B22                             __end_ofPL34 3D66  
                           __end_ofPL26 34F0                             __end_ofPL18 1C80  
                           __end_ofPL60 6B50                             __end_ofPL52 2D26  
                           __end_ofPL44 535E                             __end_ofPL36 6AEE  
                           __end_ofPL28 6AC8                             __end_ofPL70 2758  
                           __end_ofPL62 1B56                             __end_ofPL54 6B3A  
                           __end_ofPL46 1E5A                             __end_ofPL38 25A0  
                           __end_ofPL80 3502                             __end_ofPL72 2A2E  
                           __end_ofPL64 538A                             __end_ofPL56 3D7E  
                           __end_ofPL48 1EFA                             __end_ofPL90 3690  
                           __end_ofPL82 1FA2                             __end_ofPL74 2D3A  
                           __end_ofPL66 5398                             __end_ofPL58 5374  
                           __end_ofPL92 6B86                             __end_ofPL84 53AA  
                           __end_ofPL76 30C8                             __end_ofPL68 30B4  
                           __end_ofPL94 2274                             __end_ofPL86 6B76  
                           __end_ofPL78 6B64                             __end_ofPL96 6B96  
                           __end_ofPL88 4C7E                             __end_ofPL98 2672  
                   start_initialization 147C                               _ReadUSART 0FA6  
                       findNodes@nFound 00C9                   doModeVerbose@reg_1240 02A8  
                 doModeVerbose@filterno 02AE                 _receiveVSCPModeCanalMsg 2758  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A4  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0069  
            readRegisterExtended@nodeid 00C3                               _OpenUSART 1582  
                    __end_of_Read_b_eep 0F62                     sendVSCPFrame@nodeid 009B  
                       ___llmod@divisor 0071                   __size_of_readRegister 00C4  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 019E                          _findNodes$1578 00C7  
              __end_of__ECANPointBuffer 184E                       __CANIDToRegs@type 0068  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 1FA2                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 48AC               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 4342                                ??_memcpy 0066  
                   readRegister@timeout 00B9                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0291  
                 __end_ofi1_WriteTimer0 0F3E                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 0FE2                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 012A                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFE  
                          _readRegister 2274                   __size_of_sendCANFrame 003A  
                          _isdigit$2985 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006C  
                     sendVSCPFrame@size 009D                            _init_app_ram 3BAA  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01F1  
                         __IT_SAVE_WREG 012B                        _ledFunctionality 0032  
              doModeVerbose@nodeid_1238 02B4                doModeVerbose@nodeid_1264 02B8  
                          setFilter@val 0062                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00CC           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 3690                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 00A0                          _ECANInitialize 193C  
                     _sendVSCPDriverAck 1E5A                           __pmediumconst 6BA6  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 2D44  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 1256                               _fifo_read 24CE  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 008A  
                           __pintcodelo 0018                            _sendCANFrame 1162  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0098  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00C1                     _sendEscapedUartData 15DE  
                             _hexpowers 6BFE                        ___lwdiv@quotient 0065  
                             _init_crc8 1768                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 010C  
                          ??_doModeVscp 00B9                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 0F76                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0098  
                             _setFilter 3D7E                             strnicmp@len 0068  
                             _octpowers 6BA6                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 19BC  
             __end_of_sendVSCPDriverAck 1EEC                                i1u653_25 2E82  
                              i1u654_25 2E92                                i1u656_25 2F28  
                              _PIR1bits 000F9E                                i1u658_25 1F20  
                 _receiveSendEventCANAL 30C8                        ECANSendMessage@i 008E  
                      ECANSendMessage@j 0089                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3502                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007C                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 2934                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C6  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 382E  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 19BC                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 3BAA                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 2CF0                               _putsUSART 14D2  
                           __stringdata 6C1E                       ___wmul@multiplier 0060  
                          __RegsToCANID 2F8E                               _vscpClass 0038  
               ??_writeRegisterExtended 00BF                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0074  
                         ??_printBinary 0061                        doModeVerbose@reg 02B6  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0035  
             writeRegisterExtended@page 00B8                                ___DCByte 002A  
  __end_of_receiveVSCPModeMultiCanalMsg 0F1C   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 0F1A                             ??_Interrupt 0017  
               __end_of_printStatistics 382E                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00BB                                _Busy_eep 0F1E  
              __size_of_init_app_eeprom 00D0                              ?_setFilter 0062  
                       OpenUSART@config 0062                          findNodes@value 00CA  
          __end_of_vscp_restoreDefaults 0F2C                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 2842  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0064  
                    __end_of_fifo_write 2F60                        __CANIDToRegs@ptr 0062  
           receiveVSCPModeCanalMsg@data 00AC                              ?_printGUID 0001  
                           doModeVscp@c 00B9                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 0070  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 2100  
                              __ptext11 0F1A                                __ptext20 112A  
                              __ptext12 2758                                __ptext21 1768  
                              __ptext13 12D6                                __ptext30 2338  
                              __ptext22 53BE                                __ptext14 1E5A  
                              __ptext31 152A                                __ptext23 2A2E  
                              __ptext15 1DBA                                __ptext40 2B2A  
                              __ptext32 2274                                __ptext24 1432  
                              __ptext16 105E                                __ptext41 1B56  
                              __ptext33 204A                                __ptext25 2842  
                              __ptext17 30C8                                __ptext50 4350  
                              __ptext42 135C                                __ptext34 1162  
                              __ptext26 1030                                __ptext18 337A  
                              __ptext51 1A3C                                __ptext43 1318  
                              __ptext35 320C                                __ptext27 2D44  
                              __ptext19 15DE                                __ptext60 10F2  
                              __ptext52 1FA2                                __ptext44 16A0  
                              __ptext36 1002                                __ptext28 1BE8  
                              __ptext61 1D1A                                __ptext53 24CE  
                              __ptext45 18C4                                __ptext37 382E  
                              __ptext29 2934                                __ptext70 0F62  
                              __ptext62 119C                                __ptext54 4C7E  
                              __ptext46 11DA                                __ptext38 45E4  
                              __ptext71 13A0                                __ptext63 13E8  
                              __ptext55 108C                                __ptext47 1702  
                              __ptext39 3690                                __ptext80 0F3E  
                              __ptext72 193C                                __ptext64 0F24  
                              __ptext56 163E                                __ptext48 0F76  
                              __ptext81 1256                                __ptext73 0FC4  
                              __ptext65 23FE                                __ptext57 184E  
                              __ptext49 1296                                __ptext74 1582  
                              __ptext66 10BE                                __ptext58 0FE2  
                              __ptext83 0F2C                                __ptext75 3BAA  
                              __ptext67 0F1E                                __ptext59 1AC4  
                              __ptext84 1EFA                                __ptext76 2C30  
                              __ptext68 19BC                                __ptext85 4144  
                              __ptext77 3D7E                                __ptext69 14D2  
                              __ptext86 2F8E                                __ptext78 0F8C  
                              __ptext87 17D8                                __ptext79 0F50  
                              __ptext88 2E62                                __ptext89 0FA6  
              receiveSendEventCANAL@dlc 0080                receiveSendEventCANAL@crc 0081  
                        printMDF@nodeid 00C1                           ?_getVSCPFrame 0073  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C5                     __end_of_printBinary 147C  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 01E8                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 48AC                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066                           init_app_ram@i 0079  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0073  
                ?_receiveSendEventSLCAN 0001                _printNodeFirmwareVersion 2338  
                   ECANSendMessage@data 0070                ECANSendMessage@tempBSEL0 008A  
                              _printMDF 1BE8                               printMDF@i 00C5  
                             printMDF@p 00C3                            ?_getCANFrame 006E  
                   ECANSendMessage@mode 0087                     ECANSendMessage@temp 008D  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0073  
                              atoi@sign 006A                             ??_findNodes 00C7  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0066  
                           ??_fifo_read 0066                                _vscpData 01E5  
         __size_of_readRegisterExtended 00F2                                main@argc 00E0  
                              main@argv 00E2                                _vscpSize 003E  
                    ??__ECANPointBuffer 0004                                _vscpType 003F  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A6  
                              _strnicmp 1702                        init_app_eeprom@i 0064  
           writeRegisterExtended@nodeid 00C3                           Interrupt@fail 0021  
                       _serialInputFifo 01DD                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 0012  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 4144  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 0079  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B4  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 000A  
                      ___lldiv@dividend 0060                             ??_setFilter 0066  
                         printMDF@value 00C2     __size_of_receiveSendMultiEventCANAL 0166  
                         fifo_getFree@f 0001                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007B  
               ECANSendMessage@msgFlags 0073                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008F  
                     ??_init_app_eeprom 0064                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00C1                             ??_printHelp 0065  
                           ??_printMode 0065                _sendVSCPDriverErrorFrame 21B6  
                         ?_fifo_getFree 0001                  ECANSendMessage@dataLen 0072  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 0010  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0064                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 0F1C                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 45E4                  ECANSendMessage@buffers 0088  
                      ___lldiv@quotient 0069                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 0FA6                    _vscp_restoreDefaults 0F24  
                          printGUID@buf 00C2                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 1432  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0024  
                ECANSendMessage@tempPtr 008B                             _printErrors 45E4  
                          fifo_init@buf 0062                            fifo_read@buf 0062  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 2C30  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0026  
             readRegisterExtended@value 00BD                _sendVSCPModeCapabilities 2100  
              __size_of_ECANSendMessage 016E  
