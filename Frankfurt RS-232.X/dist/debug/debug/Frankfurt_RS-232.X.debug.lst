

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 05 15:06:37 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006CB0                     __pmediumconst:
   136                           	opt stack 0
   137  006CB0                     _octpowers:
   138                           	opt stack 0
   139  006CB0  0001               	dw	1
   140  006CB2  0000               	dw	0
   141  006CB4  0008               	dw	8
   142  006CB6  0000               	dw	0
   143  006CB8  0040               	dw	64
   144  006CBA  0000               	dw	0
   145  006CBC  0200               	dw	512
   146  006CBE  0000               	dw	0
   147  006CC0  1000               	dw	4096
   148  006CC2  0000               	dw	0
   149  006CC4  8000               	dw	32768
   150  006CC6  0000               	dw	0
   151  006CC8  0000               	dw	0
   152  006CCA  0004               	dw	4
   153  006CCC  0000               	dw	0
   154  006CCE  0020               	dw	32
   155  006CD0  0000               	dw	0
   156  006CD2  0100               	dw	256
   157  006CD4  0000               	dw	0
   158  006CD6  0800               	dw	2048
   159  006CD8  0000               	dw	0
   160  006CDA  4000               	dw	16384
   161  006CDC  0000               	dw	0
   162  006CDE  0000               	dw	0
   163  006CE0                     __end_of_octpowers:
   164                           	opt stack 0
   165  006CE0                     _dpowers:
   166                           	opt stack 0
   167  006CE0  0001               	dw	1
   168  006CE2  0000               	dw	0
   169  006CE4  000A               	dw	10
   170  006CE6  0000               	dw	0
   171  006CE8  0064               	dw	100
   172  006CEA  0000               	dw	0
   173  006CEC  03E8               	dw	1000
   174  006CEE  0000               	dw	0
   175  006CF0  2710               	dw	10000
   176  006CF2  0000               	dw	0
   177  006CF4  86A0               	dw	34464
   178  006CF6  0001               	dw	1
   179  006CF8  4240               	dw	16960
   180  006CFA  000F               	dw	15
   181  006CFC  9680               	dw	38528
   182  006CFE  0098               	dw	152
   183  006D00  E100               	dw	57600
   184  006D02  05F5               	dw	1525
   185  006D04  CA00               	dw	51712
   186  006D06  3B9A               	dw	15258
   187  006D08                     __end_of_dpowers:
   188                           	opt stack 0
   189  006D08                     _hexpowers:
   190                           	opt stack 0
   191  006D08  0001               	dw	1
   192  006D0A  0000               	dw	0
   193  006D0C  0010               	dw	16
   194  006D0E  0000               	dw	0
   195  006D10  0100               	dw	256
   196  006D12  0000               	dw	0
   197  006D14  1000               	dw	4096
   198  006D16  0000               	dw	0
   199  006D18  0000               	dw	0
   200  006D1A  0001               	dw	1
   201  006D1C  0000               	dw	0
   202  006D1E  0010               	dw	16
   203  006D20  0000               	dw	0
   204  006D22  0100               	dw	256
   205  006D24  0000               	dw	0
   206  006D26  1000               	dw	4096
   207  006D28                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  006D28                     __stringdata:
   372                           	opt stack 0
   373  006D28                     STR_227:
   374  006D28  20                 	db	32
   375  006D29  20                 	db	32
   376  006D2A  20                 	db	32
   377  006D2B  20                 	db	32
   378  006D2C  20                 	db	32
   379  006D2D  20                 	db	32
   380  006D2E  20                 	db	32
   381  006D2F  20                 	db	32
   382  006D30  20                 	db	32
   383  006D31  46                 	db	70	;'F'
   384  006D32  6F                 	db	111	;'o'
   385  006D33  72                 	db	114	;'r'
   386  006D34  6D                 	db	109	;'m'
   387  006D35  61                 	db	97	;'a'
   388  006D36  74                 	db	116	;'t'
   389  006D37  3A                 	db	58	;':'
   390  006D38  20                 	db	32
   391  006D39  66                 	db	102	;'f'
   392  006D3A  69                 	db	105	;'i'
   393  006D3B  6C                 	db	108	;'l'
   394  006D3C  74                 	db	116	;'t'
   395  006D3D  65                 	db	101	;'e'
   396  006D3E  72                 	db	114	;'r'
   397  006D3F  20                 	db	32
   398  006D40  66                 	db	102	;'f'
   399  006D41  69                 	db	105	;'i'
   400  006D42  6C                 	db	108	;'l'
   401  006D43  74                 	db	116	;'t'
   402  006D44  65                 	db	101	;'e'
   403  006D45  72                 	db	114	;'r'
   404  006D46  6E                 	db	110	;'n'
   405  006D47  6F                 	db	111	;'o'
   406  006D48  2C                 	db	44
   407  006D49  70                 	db	112	;'p'
   408  006D4A  72                 	db	114	;'r'
   409  006D4B  69                 	db	105	;'i'
   410  006D4C  6F                 	db	111	;'o'
   411  006D4D  2C                 	db	44
   412  006D4E  63                 	db	99	;'c'
   413  006D4F  6C                 	db	108	;'l'
   414  006D50  61                 	db	97	;'a'
   415  006D51  73                 	db	115	;'s'
   416  006D52  73                 	db	115	;'s'
   417  006D53  2C                 	db	44
   418  006D54  74                 	db	116	;'t'
   419  006D55  79                 	db	121	;'y'
   420  006D56  70                 	db	112	;'p'
   421  006D57  65                 	db	101	;'e'
   422  006D58  2C                 	db	44
   423  006D59  6E                 	db	110	;'n'
   424  006D5A  6F                 	db	111	;'o'
   425  006D5B  64                 	db	100	;'d'
   426  006D5C  65                 	db	101	;'e'
   427  006D5D  69                 	db	105	;'i'
   428  006D5E  64                 	db	100	;'d'
   429  006D5F  20                 	db	32
   430  006D60  20                 	db	32
   431  006D61  28                 	db	40
   432  006D62  66                 	db	102	;'f'
   433  006D63  69                 	db	105	;'i'
   434  006D64  6C                 	db	108	;'l'
   435  006D65  74                 	db	116	;'t'
   436  006D66  65                 	db	101	;'e'
   437  006D67  72                 	db	114	;'r'
   438  006D68  6E                 	db	110	;'n'
   439  006D69  6F                 	db	111	;'o'
   440  006D6A  20                 	db	32
   441  006D6B  3D                 	db	61	;'='
   442  006D6C  20                 	db	32
   443  006D6D  30                 	db	48	;'0'
   444  006D6E  2D                 	db	45
   445  006D6F  31                 	db	49	;'1'
   446  006D70  35                 	db	53	;'5'
   447  006D71  29                 	db	41
   448  006D72  2E                 	db	46
   449  006D73  0D                 	db	13
   450  006D74  0A                 	db	10
   451  006D75  00                 	db	0
   452  006D76                     STR_225:
   453  006D76  49                 	db	73	;'I'
   454  006D77  4E                 	db	78	;'N'
   455  006D78  46                 	db	70	;'F'
   456  006D79  4F                 	db	79	;'O'
   457  006D7A  20                 	db	32
   458  006D7B  2D                 	db	45
   459  006D7C  20                 	db	32
   460  006D7D  47                 	db	71	;'G'
   461  006D7E  65                 	db	101	;'e'
   462  006D7F  74                 	db	116	;'t'
   463  006D80  20                 	db	32
   464  006D81  69                 	db	105	;'i'
   465  006D82  6E                 	db	110	;'n'
   466  006D83  66                 	db	102	;'f'
   467  006D84  6F                 	db	111	;'o'
   468  006D85  20                 	db	32
   469  006D86  61                 	db	97	;'a'
   470  006D87  62                 	db	98	;'b'
   471  006D88  6F                 	db	111	;'o'
   472  006D89  75                 	db	117	;'u'
   473  006D8A  74                 	db	116	;'t'
   474  006D8B  20                 	db	32
   475  006D8C  61                 	db	97	;'a'
   476  006D8D  6E                 	db	110	;'n'
   477  006D8E  20                 	db	32
   478  006D8F  65                 	db	101	;'e'
   479  006D90  78                 	db	120	;'x'
   480  006D91  69                 	db	105	;'i'
   481  006D92  73                 	db	115	;'s'
   482  006D93  74                 	db	116	;'t'
   483  006D94  65                 	db	101	;'e'
   484  006D95  6E                 	db	110	;'n'
   485  006D96  74                 	db	116	;'t'
   486  006D97  20                 	db	32
   487  006D98  6E                 	db	110	;'n'
   488  006D99  6F                 	db	111	;'o'
   489  006D9A  64                 	db	100	;'d'
   490  006D9B  65                 	db	101	;'e'
   491  006D9C  20                 	db	32
   492  006D9D  6F                 	db	111	;'o'
   493  006D9E  6E                 	db	110	;'n'
   494  006D9F  20                 	db	32
   495  006DA0  74                 	db	116	;'t'
   496  006DA1  68                 	db	104	;'h'
   497  006DA2  65                 	db	101	;'e'
   498  006DA3  20                 	db	32
   499  006DA4  62                 	db	98	;'b'
   500  006DA5  75                 	db	117	;'u'
   501  006DA6  73                 	db	115	;'s'
   502  006DA7  20                 	db	32
   503  006DA8  28                 	db	40
   504  006DA9  46                 	db	70	;'F'
   505  006DAA  6F                 	db	111	;'o'
   506  006DAB  72                 	db	114	;'r'
   507  006DAC  6D                 	db	109	;'m'
   508  006DAD  61                 	db	97	;'a'
   509  006DAE  74                 	db	116	;'t'
   510  006DAF  3A                 	db	58	;':'
   511  006DB0  20                 	db	32
   512  006DB1  69                 	db	105	;'i'
   513  006DB2  6E                 	db	110	;'n'
   514  006DB3  66                 	db	102	;'f'
   515  006DB4  6F                 	db	111	;'o'
   516  006DB5  20                 	db	32
   517  006DB6  6E                 	db	110	;'n'
   518  006DB7  69                 	db	105	;'i'
   519  006DB8  63                 	db	99	;'c'
   520  006DB9  6B                 	db	107	;'k'
   521  006DBA  6E                 	db	110	;'n'
   522  006DBB  61                 	db	97	;'a'
   523  006DBC  6D                 	db	109	;'m'
   524  006DBD  65                 	db	101	;'e'
   525  006DBE  29                 	db	41
   526  006DBF  2E                 	db	46
   527  006DC0  0D                 	db	13
   528  006DC1  0A                 	db	10
   529  006DC2  00                 	db	0
   530  006DC3                     STR_229:
   531  006DC3  20                 	db	32
   532  006DC4  20                 	db	32
   533  006DC5  20                 	db	32
   534  006DC6  20                 	db	32
   535  006DC7  20                 	db	32
   536  006DC8  20                 	db	32
   537  006DC9  20                 	db	32
   538  006DCA  46                 	db	70	;'F'
   539  006DCB  6F                 	db	111	;'o'
   540  006DCC  72                 	db	114	;'r'
   541  006DCD  6D                 	db	109	;'m'
   542  006DCE  61                 	db	97	;'a'
   543  006DCF  74                 	db	116	;'t'
   544  006DD0  3A                 	db	58	;':'
   545  006DD1  20                 	db	32
   546  006DD2  6D                 	db	109	;'m'
   547  006DD3  61                 	db	97	;'a'
   548  006DD4  73                 	db	115	;'s'
   549  006DD5  6B                 	db	107	;'k'
   550  006DD6  20                 	db	32
   551  006DD7  6D                 	db	109	;'m'
   552  006DD8  61                 	db	97	;'a'
   553  006DD9  73                 	db	115	;'s'
   554  006DDA  6B                 	db	107	;'k'
   555  006DDB  6E                 	db	110	;'n'
   556  006DDC  6F                 	db	111	;'o'
   557  006DDD  2C                 	db	44
   558  006DDE  70                 	db	112	;'p'
   559  006DDF  72                 	db	114	;'r'
   560  006DE0  69                 	db	105	;'i'
   561  006DE1  6F                 	db	111	;'o'
   562  006DE2  2C                 	db	44
   563  006DE3  63                 	db	99	;'c'
   564  006DE4  6C                 	db	108	;'l'
   565  006DE5  61                 	db	97	;'a'
   566  006DE6  73                 	db	115	;'s'
   567  006DE7  73                 	db	115	;'s'
   568  006DE8  2C                 	db	44
   569  006DE9  74                 	db	116	;'t'
   570  006DEA  79                 	db	121	;'y'
   571  006DEB  70                 	db	112	;'p'
   572  006DEC  65                 	db	101	;'e'
   573  006DED  2C                 	db	44
   574  006DEE  6E                 	db	110	;'n'
   575  006DEF  6F                 	db	111	;'o'
   576  006DF0  64                 	db	100	;'d'
   577  006DF1  65                 	db	101	;'e'
   578  006DF2  69                 	db	105	;'i'
   579  006DF3  64                 	db	100	;'d'
   580  006DF4  20                 	db	32
   581  006DF5  28                 	db	40
   582  006DF6  6D                 	db	109	;'m'
   583  006DF7  61                 	db	97	;'a'
   584  006DF8  73                 	db	115	;'s'
   585  006DF9  6B                 	db	107	;'k'
   586  006DFA  6E                 	db	110	;'n'
   587  006DFB  6F                 	db	111	;'o'
   588  006DFC  20                 	db	32
   589  006DFD  3D                 	db	61	;'='
   590  006DFE  20                 	db	32
   591  006DFF  30                 	db	48	;'0'
   592  006E00  20                 	db	32
   593  006E01  6F                 	db	111	;'o'
   594  006E02  72                 	db	114	;'r'
   595  006E03  20                 	db	32
   596  006E04  31                 	db	49	;'1'
   597  006E05  29                 	db	41
   598  006E06  2E                 	db	46
   599  006E07  0D                 	db	13
   600  006E08  0A                 	db	10
   601  006E09  00                 	db	0
   602  006E0A                     STR_223:
   603  006E0A  52                 	db	82	;'R'
   604  006E0B  52                 	db	82	;'R'
   605  006E0C  45                 	db	69	;'E'
   606  006E0D  47                 	db	71	;'G'
   607  006E0E  20                 	db	32
   608  006E0F  2D                 	db	45
   609  006E10  20                 	db	32
   610  006E11  52                 	db	82	;'R'
   611  006E12  65                 	db	101	;'e'
   612  006E13  61                 	db	97	;'a'
   613  006E14  64                 	db	100	;'d'
   614  006E15  20                 	db	32
   615  006E16  72                 	db	114	;'r'
   616  006E17  65                 	db	101	;'e'
   617  006E18  67                 	db	103	;'g'
   618  006E19  69                 	db	105	;'i'
   619  006E1A  73                 	db	115	;'s'
   620  006E1B  74                 	db	116	;'t'
   621  006E1C  65                 	db	101	;'e'
   622  006E1D  72                 	db	114	;'r'
   623  006E1E  28                 	db	40
   624  006E1F  73                 	db	115	;'s'
   625  006E20  29                 	db	41
   626  006E21  20                 	db	32
   627  006E22  6F                 	db	111	;'o'
   628  006E23  66                 	db	102	;'f'
   629  006E24  20                 	db	32
   630  006E25  6E                 	db	110	;'n'
   631  006E26  6F                 	db	111	;'o'
   632  006E27  64                 	db	100	;'d'
   633  006E28  65                 	db	101	;'e'
   634  006E29  20                 	db	32
   635  006E2A  28                 	db	40
   636  006E2B  46                 	db	70	;'F'
   637  006E2C  6F                 	db	111	;'o'
   638  006E2D  72                 	db	114	;'r'
   639  006E2E  6D                 	db	109	;'m'
   640  006E2F  61                 	db	97	;'a'
   641  006E30  74                 	db	116	;'t'
   642  006E31  3A                 	db	58	;':'
   643  006E32  20                 	db	32
   644  006E33  72                 	db	114	;'r'
   645  006E34  72                 	db	114	;'r'
   646  006E35  65                 	db	101	;'e'
   647  006E36  67                 	db	103	;'g'
   648  006E37  20                 	db	32
   649  006E38  5B                 	db	91	;'['
   650  006E39  70                 	db	112	;'p'
   651  006E3A  61                 	db	97	;'a'
   652  006E3B  67                 	db	103	;'g'
   653  006E3C  65                 	db	101	;'e'
   654  006E3D  3A                 	db	58	;':'
   655  006E3E  5D                 	db	93	;']'
   656  006E3F  72                 	db	114	;'r'
   657  006E40  65                 	db	101	;'e'
   658  006E41  67                 	db	103	;'g'
   659  006E42  20                 	db	32
   660  006E43  5B                 	db	91	;'['
   661  006E44  63                 	db	99	;'c'
   662  006E45  6F                 	db	111	;'o'
   663  006E46  75                 	db	117	;'u'
   664  006E47  6E                 	db	110	;'n'
   665  006E48  74                 	db	116	;'t'
   666  006E49  5D                 	db	93	;']'
   667  006E4A  29                 	db	41
   668  006E4B  2E                 	db	46
   669  006E4C  0D                 	db	13
   670  006E4D  0A                 	db	10
   671  006E4E  00                 	db	0
   672  006E4F                     STR_238:
   673  006E4F  2D                 	db	45
   674  006E50  2D                 	db	45
   675  006E51  2D                 	db	45
   676  006E52  2D                 	db	45
   677  006E53  2D                 	db	45
   678  006E54  2D                 	db	45
   679  006E55  2D                 	db	45
   680  006E56  2D                 	db	45
   681  006E57  2D                 	db	45
   682  006E58  2D                 	db	45
   683  006E59  2D                 	db	45
   684  006E5A  2D                 	db	45
   685  006E5B  2D                 	db	45
   686  006E5C  2D                 	db	45
   687  006E5D  2D                 	db	45
   688  006E5E  2D                 	db	45
   689  006E5F  2D                 	db	45
   690  006E60  2D                 	db	45
   691  006E61  2D                 	db	45
   692  006E62  2D                 	db	45
   693  006E63  2D                 	db	45
   694  006E64  2D                 	db	45
   695  006E65  2D                 	db	45
   696  006E66  2D                 	db	45
   697  006E67  2D                 	db	45
   698  006E68  2D                 	db	45
   699  006E69  2D                 	db	45
   700  006E6A  2D                 	db	45
   701  006E6B  2D                 	db	45
   702  006E6C  2D                 	db	45
   703  006E6D  2D                 	db	45
   704  006E6E  2D                 	db	45
   705  006E6F  2D                 	db	45
   706  006E70  2D                 	db	45
   707  006E71  2D                 	db	45
   708  006E72  2D                 	db	45
   709  006E73  2D                 	db	45
   710  006E74  2D                 	db	45
   711  006E75  2D                 	db	45
   712  006E76  2D                 	db	45
   713  006E77  2D                 	db	45
   714  006E78  2D                 	db	45
   715  006E79  2D                 	db	45
   716  006E7A  2D                 	db	45
   717  006E7B  2D                 	db	45
   718  006E7C  2D                 	db	45
   719  006E7D  2D                 	db	45
   720  006E7E  2D                 	db	45
   721  006E7F  2D                 	db	45
   722  006E80  2D                 	db	45
   723  006E81  2D                 	db	45
   724  006E82  2D                 	db	45
   725  006E83  2D                 	db	45
   726  006E84  2D                 	db	45
   727  006E85  2D                 	db	45
   728  006E86  2D                 	db	45
   729  006E87  2D                 	db	45
   730  006E88  2D                 	db	45
   731  006E89  2D                 	db	45
   732  006E8A  2D                 	db	45
   733  006E8B  2D                 	db	45
   734  006E8C  2D                 	db	45
   735  006E8D  2D                 	db	45
   736  006E8E  2D                 	db	45
   737  006E8F  0D                 	db	13
   738  006E90  0A                 	db	10
   739  006E91  00                 	db	0
   740  006E92                     STR_233:
   741  006E92  20                 	db	32
   742  006E93  20                 	db	32
   743  006E94  20                 	db	32
   744  006E95  20                 	db	32
   745  006E96  52                 	db	82	;'R'
   746  006E97  57                 	db	87	;'W'
   747  006E98  54                 	db	84	;'T'
   748  006E99  49                 	db	73	;'I'
   749  006E9A  4D                 	db	77	;'M'
   750  006E9B  45                 	db	69	;'E'
   751  006E9C  4F                 	db	79	;'O'
   752  006E9D  55                 	db	85	;'U'
   753  006E9E  54                 	db	84	;'T'
   754  006E9F  20                 	db	32
   755  006EA0  2D                 	db	45
   756  006EA1  20                 	db	32
   757  006EA2  53                 	db	83	;'S'
   758  006EA3  65                 	db	101	;'e'
   759  006EA4  74                 	db	116	;'t'
   760  006EA5  20                 	db	32
   761  006EA6  72                 	db	114	;'r'
   762  006EA7  65                 	db	101	;'e'
   763  006EA8  67                 	db	103	;'g'
   764  006EA9  69                 	db	105	;'i'
   765  006EAA  73                 	db	115	;'s'
   766  006EAB  74                 	db	116	;'t'
   767  006EAC  65                 	db	101	;'e'
   768  006EAD  72                 	db	114	;'r'
   769  006EAE  20                 	db	32
   770  006EAF  72                 	db	114	;'r'
   771  006EB0  65                 	db	101	;'e'
   772  006EB1  61                 	db	97	;'a'
   773  006EB2  64                 	db	100	;'d'
   774  006EB3  2F                 	db	47
   775  006EB4  77                 	db	119	;'w'
   776  006EB5  72                 	db	114	;'r'
   777  006EB6  69                 	db	105	;'i'
   778  006EB7  74                 	db	116	;'t'
   779  006EB8  65                 	db	101	;'e'
   780  006EB9  20                 	db	32
   781  006EBA  74                 	db	116	;'t'
   782  006EBB  69                 	db	105	;'i'
   783  006EBC  6D                 	db	109	;'m'
   784  006EBD  65                 	db	101	;'e'
   785  006EBE  6F                 	db	111	;'o'
   786  006EBF  75                 	db	117	;'u'
   787  006EC0  74                 	db	116	;'t'
   788  006EC1  2E                 	db	46
   789  006EC2  20                 	db	32
   790  006EC3  44                 	db	68	;'D'
   791  006EC4  65                 	db	101	;'e'
   792  006EC5  66                 	db	102	;'f'
   793  006EC6  61                 	db	97	;'a'
   794  006EC7  75                 	db	117	;'u'
   795  006EC8  6C                 	db	108	;'l'
   796  006EC9  74                 	db	116	;'t'
   797  006ECA  3D                 	db	61	;'='
   798  006ECB  31                 	db	49	;'1'
   799  006ECC  30                 	db	48	;'0'
   800  006ECD  20                 	db	32
   801  006ECE  6D                 	db	109	;'m'
   802  006ECF  73                 	db	115	;'s'
   803  006ED0  20                 	db	32
   804  006ED1  2E                 	db	46
   805  006ED2  0D                 	db	13
   806  006ED3  0A                 	db	10
   807  006ED4  00                 	db	0
   808  006ED5                     STR_224:
   809  006ED5  57                 	db	87	;'W'
   810  006ED6  52                 	db	82	;'R'
   811  006ED7  45                 	db	69	;'E'
   812  006ED8  47                 	db	71	;'G'
   813  006ED9  20                 	db	32
   814  006EDA  2D                 	db	45
   815  006EDB  20                 	db	32
   816  006EDC  57                 	db	87	;'W'
   817  006EDD  72                 	db	114	;'r'
   818  006EDE  69                 	db	105	;'i'
   819  006EDF  74                 	db	116	;'t'
   820  006EE0  65                 	db	101	;'e'
   821  006EE1  20                 	db	32
   822  006EE2  72                 	db	114	;'r'
   823  006EE3  65                 	db	101	;'e'
   824  006EE4  67                 	db	103	;'g'
   825  006EE5  69                 	db	105	;'i'
   826  006EE6  73                 	db	115	;'s'
   827  006EE7  74                 	db	116	;'t'
   828  006EE8  65                 	db	101	;'e'
   829  006EE9  72                 	db	114	;'r'
   830  006EEA  20                 	db	32
   831  006EEB  6F                 	db	111	;'o'
   832  006EEC  66                 	db	102	;'f'
   833  006EED  20                 	db	32
   834  006EEE  6E                 	db	110	;'n'
   835  006EEF  6F                 	db	111	;'o'
   836  006EF0  64                 	db	100	;'d'
   837  006EF1  65                 	db	101	;'e'
   838  006EF2  20                 	db	32
   839  006EF3  28                 	db	40
   840  006EF4  46                 	db	70	;'F'
   841  006EF5  6F                 	db	111	;'o'
   842  006EF6  72                 	db	114	;'r'
   843  006EF7  6D                 	db	109	;'m'
   844  006EF8  61                 	db	97	;'a'
   845  006EF9  74                 	db	116	;'t'
   846  006EFA  3A                 	db	58	;':'
   847  006EFB  20                 	db	32
   848  006EFC  77                 	db	119	;'w'
   849  006EFD  72                 	db	114	;'r'
   850  006EFE  65                 	db	101	;'e'
   851  006EFF  67                 	db	103	;'g'
   852  006F00  20                 	db	32
   853  006F01  5B                 	db	91	;'['
   854  006F02  70                 	db	112	;'p'
   855  006F03  61                 	db	97	;'a'
   856  006F04  67                 	db	103	;'g'
   857  006F05  65                 	db	101	;'e'
   858  006F06  3A                 	db	58	;':'
   859  006F07  5D                 	db	93	;']'
   860  006F08  72                 	db	114	;'r'
   861  006F09  65                 	db	101	;'e'
   862  006F0A  67                 	db	103	;'g'
   863  006F0B  20                 	db	32
   864  006F0C  63                 	db	99	;'c'
   865  006F0D  6F                 	db	111	;'o'
   866  006F0E  6E                 	db	110	;'n'
   867  006F0F  74                 	db	116	;'t'
   868  006F10  65                 	db	101	;'e'
   869  006F11  6E                 	db	110	;'n'
   870  006F12  74                 	db	116	;'t'
   871  006F13  29                 	db	41
   872  006F14  2E                 	db	46
   873  006F15  0D                 	db	13
   874  006F16  0A                 	db	10
   875  006F17  00                 	db	0
   876  006F18                     STR_89:
   877  006F18  2D                 	db	45
   878  006F19  45                 	db	69	;'E'
   879  006F1A  52                 	db	82	;'R'
   880  006F1B  52                 	db	82	;'R'
   881  006F1C  4F                 	db	79	;'O'
   882  006F1D  52                 	db	82	;'R'
   883  006F1E  20                 	db	32
   884  006F1F  2D                 	db	45
   885  006F20  20                 	db	32
   886  006F21  46                 	db	70	;'F'
   887  006F22  69                 	db	105	;'i'
   888  006F23  6C                 	db	108	;'l'
   889  006F24  74                 	db	116	;'t'
   890  006F25  65                 	db	101	;'e'
   891  006F26  72                 	db	114	;'r'
   892  006F27  20                 	db	32
   893  006F28  6E                 	db	110	;'n'
   894  006F29  75                 	db	117	;'u'
   895  006F2A  6D                 	db	109	;'m'
   896  006F2B  62                 	db	98	;'b'
   897  006F2C  65                 	db	101	;'e'
   898  006F2D  72                 	db	114	;'r'
   899  006F2E  20                 	db	32
   900  006F2F  63                 	db	99	;'c'
   901  006F30  61                 	db	97	;'a'
   902  006F31  6E                 	db	110	;'n'
   903  006F32  20                 	db	32
   904  006F33  6F                 	db	111	;'o'
   905  006F34  6E                 	db	110	;'n'
   906  006F35  6C                 	db	108	;'l'
   907  006F36  79                 	db	121	;'y'
   908  006F37  20                 	db	32
   909  006F38  62                 	db	98	;'b'
   910  006F39  65                 	db	101	;'e'
   911  006F3A  20                 	db	32
   912  006F3B  73                 	db	115	;'s'
   913  006F3C  65                 	db	101	;'e'
   914  006F3D  74                 	db	116	;'t'
   915  006F3E  20                 	db	32
   916  006F3F  74                 	db	116	;'t'
   917  006F40  6F                 	db	111	;'o'
   918  006F41  20                 	db	32
   919  006F42  61                 	db	97	;'a'
   920  006F43  20                 	db	32
   921  006F44  76                 	db	118	;'v'
   922  006F45  61                 	db	97	;'a'
   923  006F46  6C                 	db	108	;'l'
   924  006F47  75                 	db	117	;'u'
   925  006F48  65                 	db	101	;'e'
   926  006F49  20                 	db	32
   927  006F4A  62                 	db	98	;'b'
   928  006F4B  65                 	db	101	;'e'
   929  006F4C  74                 	db	116	;'t'
   930  006F4D  77                 	db	119	;'w'
   931  006F4E  65                 	db	101	;'e'
   932  006F4F  65                 	db	101	;'e'
   933  006F50  6E                 	db	110	;'n'
   934  006F51  20                 	db	32
   935  006F52  30                 	db	48	;'0'
   936  006F53  2D                 	db	45
   937  006F54  31                 	db	49	;'1'
   938  006F55  35                 	db	53	;'5'
   939  006F56  2E                 	db	46
   940  006F57  0D                 	db	13
   941  006F58  0A                 	db	10
   942  006F59  00                 	db	0
   943  006F5A                     STR_236:
   944  006F5A  20                 	db	32
   945  006F5B  20                 	db	32
   946  006F5C  20                 	db	32
   947  006F5D  20                 	db	32
   948  006F5E  4D                 	db	77	;'M'
   949  006F5F  4F                 	db	79	;'O'
   950  006F60  44                 	db	68	;'D'
   951  006F61  45                 	db	69	;'E'
   952  006F62  20                 	db	32
   953  006F63  2D                 	db	45
   954  006F64  20                 	db	32
   955  006F65  53                 	db	83	;'S'
   956  006F66  65                 	db	101	;'e'
   957  006F67  74                 	db	116	;'t'
   958  006F68  20                 	db	32
   959  006F69  61                 	db	97	;'a'
   960  006F6A  64                 	db	100	;'d'
   961  006F6B  61                 	db	97	;'a'
   962  006F6C  70                 	db	112	;'p'
   963  006F6D  74                 	db	116	;'t'
   964  006F6E  65                 	db	101	;'e'
   965  006F6F  72                 	db	114	;'r'
   966  006F70  20                 	db	32
   967  006F71  6D                 	db	109	;'m'
   968  006F72  6F                 	db	111	;'o'
   969  006F73  64                 	db	100	;'d'
   970  006F74  65                 	db	101	;'e'
   971  006F75  20                 	db	32
   972  006F76  74                 	db	116	;'t'
   973  006F77  68                 	db	104	;'h'
   974  006F78  61                 	db	97	;'a'
   975  006F79  74                 	db	116	;'t'
   976  006F7A  20                 	db	32
   977  006F7B  73                 	db	115	;'s'
   978  006F7C  68                 	db	104	;'h'
   979  006F7D  6F                 	db	111	;'o'
   980  006F7E  75                 	db	117	;'u'
   981  006F7F  6C                 	db	108	;'l'
   982  006F80  64                 	db	100	;'d'
   983  006F81  20                 	db	32
   984  006F82  62                 	db	98	;'b'
   985  006F83  65                 	db	101	;'e'
   986  006F84  20                 	db	32
   987  006F85  75                 	db	117	;'u'
   988  006F86  73                 	db	115	;'s'
   989  006F87  65                 	db	101	;'e'
   990  006F88  64                 	db	100	;'d'
   991  006F89  20                 	db	32
   992  006F8A  6F                 	db	111	;'o'
   993  006F8B  6E                 	db	110	;'n'
   994  006F8C  20                 	db	32
   995  006F8D  73                 	db	115	;'s'
   996  006F8E  74                 	db	116	;'t'
   997  006F8F  61                 	db	97	;'a'
   998  006F90  72                 	db	114	;'r'
   999  006F91  74                 	db	116	;'t'
  1000  006F92  75                 	db	117	;'u'
  1001  006F93  70                 	db	112	;'p'
  1002  006F94  2E                 	db	46
  1003  006F95  0D                 	db	13
  1004  006F96  0A                 	db	10
  1005  006F97  00                 	db	0
  1006  006F98                     STR_196:
  1007  006F98  54                 	db	84	;'T'
  1008  006F99  72                 	db	114	;'r'
  1009  006F9A  61                 	db	97	;'a'
  1010  006F9B  6E                 	db	110	;'n'
  1011  006F9C  73                 	db	115	;'s'
  1012  006F9D  6D                 	db	109	;'m'
  1013  006F9E  69                 	db	105	;'i'
  1014  006F9F  74                 	db	116	;'t'
  1015  006FA0  74                 	db	116	;'t'
  1016  006FA1  65                 	db	101	;'e'
  1017  006FA2  72                 	db	114	;'r'
  1018  006FA3  20                 	db	32
  1019  006FA4  69                 	db	105	;'i'
  1020  006FA5  6E                 	db	110	;'n'
  1021  006FA6  20                 	db	32
  1022  006FA7  45                 	db	69	;'E'
  1023  006FA8  72                 	db	114	;'r'
  1024  006FA9  72                 	db	114	;'r'
  1025  006FAA  6F                 	db	111	;'o'
  1026  006FAB  72                 	db	114	;'r'
  1027  006FAC  20                 	db	32
  1028  006FAD  53                 	db	83	;'S'
  1029  006FAE  74                 	db	116	;'t'
  1030  006FAF  61                 	db	97	;'a'
  1031  006FB0  74                 	db	116	;'t'
  1032  006FB1  65                 	db	101	;'e'
  1033  006FB2  20                 	db	32
  1034  006FB3  57                 	db	87	;'W'
  1035  006FB4  61                 	db	97	;'a'
  1036  006FB5  72                 	db	114	;'r'
  1037  006FB6  6E                 	db	110	;'n'
  1038  006FB7  69                 	db	105	;'i'
  1039  006FB8  6E                 	db	110	;'n'
  1040  006FB9  67                 	db	103	;'g'
  1041  006FBA  20                 	db	32
  1042  006FBB  28                 	db	40
  1043  006FBC  31                 	db	49	;'1'
  1044  006FBD  32                 	db	50	;'2'
  1045  006FBE  38                 	db	56	;'8'
  1046  006FBF  20                 	db	32
  1047  006FC0  3E                 	db	62	;'>'
  1048  006FC1  20                 	db	32
  1049  006FC2  54                 	db	84	;'T'
  1050  006FC3  45                 	db	69	;'E'
  1051  006FC4  52                 	db	82	;'R'
  1052  006FC5  52                 	db	82	;'R'
  1053  006FC6  43                 	db	67	;'C'
  1054  006FC7  4E                 	db	78	;'N'
  1055  006FC8  54                 	db	84	;'T'
  1056  006FC9  20                 	db	32
  1057  006FCA  3F                 	db	63	;'?'
  1058  006FCB  20                 	db	32
  1059  006FCC  39                 	db	57	;'9'
  1060  006FCD  36                 	db	54	;'6'
  1061  006FCE  29                 	db	41
  1062  006FCF  0D                 	db	13
  1063  006FD0  0A                 	db	10
  1064  006FD1  00                 	db	0
  1065  006FD2                     STR_2:
  1066  006FD2  43                 	db	67	;'C'
  1067  006FD3  6F                 	db	111	;'o'
  1068  006FD4  70                 	db	112	;'p'
  1069  006FD5  79                 	db	121	;'y'
  1070  006FD6  72                 	db	114	;'r'
  1071  006FD7  69                 	db	105	;'i'
  1072  006FD8  67                 	db	103	;'g'
  1073  006FD9  68                 	db	104	;'h'
  1074  006FDA  74                 	db	116	;'t'
  1075  006FDB  20                 	db	32
  1076  006FDC  28                 	db	40
  1077  006FDD  43                 	db	67	;'C'
  1078  006FDE  29                 	db	41
  1079  006FDF  20                 	db	32
  1080  006FE0  32                 	db	50	;'2'
  1081  006FE1  30                 	db	48	;'0'
  1082  006FE2  31                 	db	49	;'1'
  1083  006FE3  34                 	db	52	;'4'
  1084  006FE4  2D                 	db	45
  1085  006FE5  32                 	db	50	;'2'
  1086  006FE6  30                 	db	48	;'0'
  1087  006FE7  31                 	db	49	;'1'
  1088  006FE8  35                 	db	53	;'5'
  1089  006FE9  20                 	db	32
  1090  006FEA  50                 	db	80	;'P'
  1091  006FEB  61                 	db	97	;'a'
  1092  006FEC  72                 	db	114	;'r'
  1093  006FED  61                 	db	97	;'a'
  1094  006FEE  64                 	db	100	;'d'
  1095  006FEF  69                 	db	105	;'i'
  1096  006FF0  73                 	db	115	;'s'
  1097  006FF1  65                 	db	101	;'e'
  1098  006FF2  20                 	db	32
  1099  006FF3  6F                 	db	111	;'o'
  1100  006FF4  66                 	db	102	;'f'
  1101  006FF5  20                 	db	32
  1102  006FF6  74                 	db	116	;'t'
  1103  006FF7  68                 	db	104	;'h'
  1104  006FF8  65                 	db	101	;'e'
  1105  006FF9  20                 	db	32
  1106  006FFA  46                 	db	70	;'F'
  1107  006FFB  72                 	db	114	;'r'
  1108  006FFC  6F                 	db	111	;'o'
  1109  006FFD  67                 	db	103	;'g'
  1110  006FFE  20                 	db	32
  1111  006FFF  41                 	db	65	;'A'
  1112  007000  42                 	db	66	;'B'
  1113  007001  2C                 	db	44
  1114  007002  20                 	db	32
  1115  007003  53                 	db	83	;'S'
  1116  007004  77                 	db	119	;'w'
  1117  007005  65                 	db	101	;'e'
  1118  007006  64                 	db	100	;'d'
  1119  007007  65                 	db	101	;'e'
  1120  007008  6E                 	db	110	;'n'
  1121  007009  0D                 	db	13
  1122  00700A  0A                 	db	10
  1123  00700B  00                 	db	0
  1124  00700C                     STR_198:
  1125  00700C  54                 	db	84	;'T'
  1126  00700D  72                 	db	114	;'r'
  1127  00700E  61                 	db	97	;'a'
  1128  00700F  6E                 	db	110	;'n'
  1129  007010  73                 	db	115	;'s'
  1130  007011  6D                 	db	109	;'m'
  1131  007012  69                 	db	105	;'i'
  1132  007013  74                 	db	116	;'t'
  1133  007014  74                 	db	116	;'t'
  1134  007015  65                 	db	101	;'e'
  1135  007016  72                 	db	114	;'r'
  1136  007017  20                 	db	32
  1137  007018  69                 	db	105	;'i'
  1138  007019  6E                 	db	110	;'n'
  1139  00701A  20                 	db	32
  1140  00701B  45                 	db	69	;'E'
  1141  00701C  72                 	db	114	;'r'
  1142  00701D  72                 	db	114	;'r'
  1143  00701E  6F                 	db	111	;'o'
  1144  00701F  72                 	db	114	;'r'
  1145  007020  20                 	db	32
  1146  007021  53                 	db	83	;'S'
  1147  007022  74                 	db	116	;'t'
  1148  007023  61                 	db	97	;'a'
  1149  007024  74                 	db	116	;'t'
  1150  007025  65                 	db	101	;'e'
  1151  007026  20                 	db	32
  1152  007027  42                 	db	66	;'B'
  1153  007028  75                 	db	117	;'u'
  1154  007029  73                 	db	115	;'s'
  1155  00702A  20                 	db	32
  1156  00702B  50                 	db	80	;'P'
  1157  00702C  61                 	db	97	;'a'
  1158  00702D  73                 	db	115	;'s'
  1159  00702E  73                 	db	115	;'s'
  1160  00702F  69                 	db	105	;'i'
  1161  007030  76                 	db	118	;'v'
  1162  007031  65                 	db	101	;'e'
  1163  007032  20                 	db	32
  1164  007033  28                 	db	40
  1165  007034  54                 	db	84	;'T'
  1166  007035  45                 	db	69	;'E'
  1167  007036  52                 	db	82	;'R'
  1168  007037  52                 	db	82	;'R'
  1169  007038  43                 	db	67	;'C'
  1170  007039  4E                 	db	78	;'N'
  1171  00703A  54                 	db	84	;'T'
  1172  00703B  20                 	db	32
  1173  00703C  3F                 	db	63	;'?'
  1174  00703D  20                 	db	32
  1175  00703E  31                 	db	49	;'1'
  1176  00703F  32                 	db	50	;'2'
  1177  007040  38                 	db	56	;'8'
  1178  007041  29                 	db	41
  1179  007042  0D                 	db	13
  1180  007043  0A                 	db	10
  1181  007044  00                 	db	0
  1182  007045                     STR_217:
  1183  007045  20                 	db	32
  1184  007046  20                 	db	32
  1185  007047  20                 	db	32
  1186  007048  20                 	db	32
  1187  007049  20                 	db	32
  1188  00704A  46                 	db	70	;'F'
  1189  00704B  6F                 	db	111	;'o'
  1190  00704C  72                 	db	114	;'r'
  1191  00704D  6D                 	db	109	;'m'
  1192  00704E  61                 	db	97	;'a'
  1193  00704F  74                 	db	116	;'t'
  1194  007050  3A                 	db	58	;':'
  1195  007051  20                 	db	32
  1196  007052  70                 	db	112	;'p'
  1197  007053  72                 	db	114	;'r'
  1198  007054  69                 	db	105	;'i'
  1199  007055  6F                 	db	111	;'o'
  1200  007056  72                 	db	114	;'r'
  1201  007057  69                 	db	105	;'i'
  1202  007058  74                 	db	116	;'t'
  1203  007059  79                 	db	121	;'y'
  1204  00705A  2C                 	db	44
  1205  00705B  63                 	db	99	;'c'
  1206  00705C  6C                 	db	108	;'l'
  1207  00705D  61                 	db	97	;'a'
  1208  00705E  73                 	db	115	;'s'
  1209  00705F  73                 	db	115	;'s'
  1210  007060  2C                 	db	44
  1211  007061  74                 	db	116	;'t'
  1212  007062  79                 	db	121	;'y'
  1213  007063  70                 	db	112	;'p'
  1214  007064  65                 	db	101	;'e'
  1215  007065  2C                 	db	44
  1216  007066  6E                 	db	110	;'n'
  1217  007067  6F                 	db	111	;'o'
  1218  007068  64                 	db	100	;'d'
  1219  007069  65                 	db	101	;'e'
  1220  00706A  69                 	db	105	;'i'
  1221  00706B  64                 	db	100	;'d'
  1222  00706C  2C                 	db	44
  1223  00706D  63                 	db	99	;'c'
  1224  00706E  6F                 	db	111	;'o'
  1225  00706F  75                 	db	117	;'u'
  1226  007070  6E                 	db	110	;'n'
  1227  007071  74                 	db	116	;'t'
  1228  007072  2C                 	db	44
  1229  007073  64                 	db	100	;'d'
  1230  007074  61                 	db	97	;'a'
  1231  007075  74                 	db	116	;'t'
  1232  007076  61                 	db	97	;'a'
  1233  007077  2C                 	db	44
  1234  007078  2C                 	db	44
  1235  007079  2C                 	db	44
  1236  00707A  0D                 	db	13
  1237  00707B  0A                 	db	10
  1238  00707C  00                 	db	0
  1239  00707D                     STR_203:
  1240  00707D  52                 	db	82	;'R'
  1241  00707E  65                 	db	101	;'e'
  1242  00707F  63                 	db	99	;'c'
  1243  007080  65                 	db	101	;'e'
  1244  007081  69                 	db	105	;'i'
  1245  007082  76                 	db	118	;'v'
  1246  007083  65                 	db	101	;'e'
  1247  007084  72                 	db	114	;'r'
  1248  007085  20                 	db	32
  1249  007086  69                 	db	105	;'i'
  1250  007087  6E                 	db	110	;'n'
  1251  007088  20                 	db	32
  1252  007089  45                 	db	69	;'E'
  1253  00708A  72                 	db	114	;'r'
  1254  00708B  72                 	db	114	;'r'
  1255  00708C  6F                 	db	111	;'o'
  1256  00708D  72                 	db	114	;'r'
  1257  00708E  20                 	db	32
  1258  00708F  53                 	db	83	;'S'
  1259  007090  74                 	db	116	;'t'
  1260  007091  61                 	db	97	;'a'
  1261  007092  74                 	db	116	;'t'
  1262  007093  65                 	db	101	;'e'
  1263  007094  20                 	db	32
  1264  007095  57                 	db	87	;'W'
  1265  007096  61                 	db	97	;'a'
  1266  007097  72                 	db	114	;'r'
  1267  007098  6E                 	db	110	;'n'
  1268  007099  69                 	db	105	;'i'
  1269  00709A  6E                 	db	110	;'n'
  1270  00709B  67                 	db	103	;'g'
  1271  00709C  20                 	db	32
  1272  00709D  28                 	db	40
  1273  00709E  31                 	db	49	;'1'
  1274  00709F  32                 	db	50	;'2'
  1275  0070A0  38                 	db	56	;'8'
  1276  0070A1  20                 	db	32
  1277  0070A2  3E                 	db	62	;'>'
  1278  0070A3  20                 	db	32
  1279  0070A4  52                 	db	82	;'R'
  1280  0070A5  45                 	db	69	;'E'
  1281  0070A6  52                 	db	82	;'R'
  1282  0070A7  52                 	db	82	;'R'
  1283  0070A8  43                 	db	67	;'C'
  1284  0070A9  4E                 	db	78	;'N'
  1285  0070AA  54                 	db	84	;'T'
  1286  0070AB  20                 	db	32
  1287  0070AC  3F                 	db	63	;'?'
  1288  0070AD  20                 	db	32
  1289  0070AE  39                 	db	57	;'9'
  1290  0070AF  36                 	db	54	;'6'
  1291  0070B0  29                 	db	41
  1292  0070B1  0D                 	db	13
  1293  0070B2  0A                 	db	10
  1294  0070B3  00                 	db	0
  1295  0070B4                     STR_235:
  1296  0070B4  20                 	db	32
  1297  0070B5  20                 	db	32
  1298  0070B6  20                 	db	32
  1299  0070B7  20                 	db	32
  1300  0070B8  53                 	db	83	;'S'
  1301  0070B9  54                 	db	84	;'T'
  1302  0070BA  41                 	db	65	;'A'
  1303  0070BB  52                 	db	82	;'R'
  1304  0070BC  54                 	db	84	;'T'
  1305  0070BD  49                 	db	73	;'I'
  1306  0070BE  46                 	db	70	;'F'
  1307  0070BF  20                 	db	32
  1308  0070C0  2D                 	db	45
  1309  0070C1  20                 	db	32
  1310  0070C2  53                 	db	83	;'S'
  1311  0070C3  65                 	db	101	;'e'
  1312  0070C4  74                 	db	116	;'t'
  1313  0070C5  20                 	db	32
  1314  0070C6  69                 	db	105	;'i'
  1315  0070C7  6E                 	db	110	;'n'
  1316  0070C8  74                 	db	116	;'t'
  1317  0070C9  65                 	db	101	;'e'
  1318  0070CA  72                 	db	114	;'r'
  1319  0070CB  66                 	db	102	;'f'
  1320  0070CC  61                 	db	97	;'a'
  1321  0070CD  63                 	db	99	;'c'
  1322  0070CE  65                 	db	101	;'e'
  1323  0070CF  20                 	db	32
  1324  0070D0  73                 	db	115	;'s'
  1325  0070D1  74                 	db	116	;'t'
  1326  0070D2  61                 	db	97	;'a'
  1327  0070D3  74                 	db	116	;'t'
  1328  0070D4  65                 	db	101	;'e'
  1329  0070D5  20                 	db	32
  1330  0070D6  74                 	db	116	;'t'
  1331  0070D7  6F                 	db	111	;'o'
  1332  0070D8  20                 	db	32
  1333  0070D9  75                 	db	117	;'u'
  1334  0070DA  73                 	db	115	;'s'
  1335  0070DB  65                 	db	101	;'e'
  1336  0070DC  20                 	db	32
  1337  0070DD  6F                 	db	111	;'o'
  1338  0070DE  6E                 	db	110	;'n'
  1339  0070DF  20                 	db	32
  1340  0070E0  73                 	db	115	;'s'
  1341  0070E1  74                 	db	116	;'t'
  1342  0070E2  61                 	db	97	;'a'
  1343  0070E3  72                 	db	114	;'r'
  1344  0070E4  74                 	db	116	;'t'
  1345  0070E5  75                 	db	117	;'u'
  1346  0070E6  70                 	db	112	;'p'
  1347  0070E7  2E                 	db	46
  1348  0070E8  0D                 	db	13
  1349  0070E9  0A                 	db	10
  1350  0070EA  00                 	db	0
  1351  0070EB                     STR_4:
  1352  0070EB  50                 	db	80	;'P'
  1353  0070EC  72                 	db	114	;'r'
  1354  0070ED  65                 	db	101	;'e'
  1355  0070EE  73                 	db	115	;'s'
  1356  0070EF  73                 	db	115	;'s'
  1357  0070F0  20                 	db	32
  1358  0070F1  27                 	db	39
  1359  0070F2  76                 	db	118	;'v'
  1360  0070F3  27                 	db	39
  1361  0070F4  20                 	db	32
  1362  0070F5  77                 	db	119	;'w'
  1363  0070F6  69                 	db	105	;'i'
  1364  0070F7  74                 	db	116	;'t'
  1365  0070F8  68                 	db	104	;'h'
  1366  0070F9  69                 	db	105	;'i'
  1367  0070FA  6E                 	db	110	;'n'
  1368  0070FB  20                 	db	32
  1369  0070FC  74                 	db	116	;'t'
  1370  0070FD  68                 	db	104	;'h'
  1371  0070FE  72                 	db	114	;'r'
  1372  0070FF  65                 	db	101	;'e'
  1373  007100  65                 	db	101	;'e'
  1374  007101  20                 	db	32
  1375  007102  73                 	db	115	;'s'
  1376  007103  65                 	db	101	;'e'
  1377  007104  63                 	db	99	;'c'
  1378  007105  6F                 	db	111	;'o'
  1379  007106  6E                 	db	110	;'n'
  1380  007107  64                 	db	100	;'d'
  1381  007108  73                 	db	115	;'s'
  1382  007109  20                 	db	32
  1383  00710A  74                 	db	116	;'t'
  1384  00710B  6F                 	db	111	;'o'
  1385  00710C  20                 	db	32
  1386  00710D  65                 	db	101	;'e'
  1387  00710E  6E                 	db	110	;'n'
  1388  00710F  74                 	db	116	;'t'
  1389  007110  65                 	db	101	;'e'
  1390  007111  72                 	db	114	;'r'
  1391  007112  20                 	db	32
  1392  007113  76                 	db	118	;'v'
  1393  007114  65                 	db	101	;'e'
  1394  007115  72                 	db	114	;'r'
  1395  007116  62                 	db	98	;'b'
  1396  007117  6F                 	db	111	;'o'
  1397  007118  73                 	db	115	;'s'
  1398  007119  65                 	db	101	;'e'
  1399  00711A  20                 	db	32
  1400  00711B  6D                 	db	109	;'m'
  1401  00711C  6F                 	db	111	;'o'
  1402  00711D  64                 	db	100	;'d'
  1403  00711E  65                 	db	101	;'e'
  1404  00711F  0D                 	db	13
  1405  007120  0A                 	db	10
  1406  007121  00                 	db	0
  1407  007122                     STR_204:
  1408  007122  52                 	db	82	;'R'
  1409  007123  65                 	db	101	;'e'
  1410  007124  63                 	db	99	;'c'
  1411  007125  65                 	db	101	;'e'
  1412  007126  69                 	db	105	;'i'
  1413  007127  76                 	db	118	;'v'
  1414  007128  65                 	db	101	;'e'
  1415  007129  72                 	db	114	;'r'
  1416  00712A  20                 	db	32
  1417  00712B  69                 	db	105	;'i'
  1418  00712C  6E                 	db	110	;'n'
  1419  00712D  20                 	db	32
  1420  00712E  45                 	db	69	;'E'
  1421  00712F  72                 	db	114	;'r'
  1422  007130  72                 	db	114	;'r'
  1423  007131  6F                 	db	111	;'o'
  1424  007132  72                 	db	114	;'r'
  1425  007133  20                 	db	32
  1426  007134  53                 	db	83	;'S'
  1427  007135  74                 	db	116	;'t'
  1428  007136  61                 	db	97	;'a'
  1429  007137  74                 	db	116	;'t'
  1430  007138  65                 	db	101	;'e'
  1431  007139  20                 	db	32
  1432  00713A  42                 	db	66	;'B'
  1433  00713B  75                 	db	117	;'u'
  1434  00713C  73                 	db	115	;'s'
  1435  00713D  20                 	db	32
  1436  00713E  50                 	db	80	;'P'
  1437  00713F  61                 	db	97	;'a'
  1438  007140  73                 	db	115	;'s'
  1439  007141  73                 	db	115	;'s'
  1440  007142  69                 	db	105	;'i'
  1441  007143  76                 	db	118	;'v'
  1442  007144  65                 	db	101	;'e'
  1443  007145  20                 	db	32
  1444  007146  28                 	db	40
  1445  007147  52                 	db	82	;'R'
  1446  007148  45                 	db	69	;'E'
  1447  007149  52                 	db	82	;'R'
  1448  00714A  52                 	db	82	;'R'
  1449  00714B  43                 	db	67	;'C'
  1450  00714C  4E                 	db	78	;'N'
  1451  00714D  54                 	db	84	;'T'
  1452  00714E  20                 	db	32
  1453  00714F  3F                 	db	63	;'?'
  1454  007150  20                 	db	32
  1455  007151  31                 	db	49	;'1'
  1456  007152  32                 	db	50	;'2'
  1457  007153  38                 	db	56	;'8'
  1458  007154  29                 	db	41
  1459  007155  0D                 	db	13
  1460  007156  0A                 	db	10
  1461  007157  00                 	db	0
  1462  007158                     STR_71:
  1463  007158  2D                 	db	45
  1464  007159  45                 	db	69	;'E'
  1465  00715A  52                 	db	82	;'R'
  1466  00715B  52                 	db	82	;'R'
  1467  00715C  4F                 	db	79	;'O'
  1468  00715D  52                 	db	82	;'R'
  1469  00715E  20                 	db	32
  1470  00715F  2D                 	db	45
  1471  007160  20                 	db	32
  1472  007161  4F                 	db	79	;'O'
  1473  007162  6E                 	db	110	;'n'
  1474  007163  65                 	db	101	;'e'
  1475  007164  20                 	db	32
  1476  007165  6F                 	db	111	;'o'
  1477  007166  72                 	db	114	;'r'
  1478  007167  20                 	db	32
  1479  007168  6D                 	db	109	;'m'
  1480  007169  6F                 	db	111	;'o'
  1481  00716A  72                 	db	114	;'r'
  1482  00716B  65                 	db	101	;'e'
  1483  00716C  20                 	db	32
  1484  00716D  72                 	db	114	;'r'
  1485  00716E  65                 	db	101	;'e'
  1486  00716F  67                 	db	103	;'g'
  1487  007170  69                 	db	105	;'i'
  1488  007171  73                 	db	115	;'s'
  1489  007172  74                 	db	116	;'t'
  1490  007173  65                 	db	101	;'e'
  1491  007174  72                 	db	114	;'r'
  1492  007175  28                 	db	40
  1493  007176  73                 	db	115	;'s'
  1494  007177  29                 	db	41
  1495  007178  20                 	db	32
  1496  007179  63                 	db	99	;'c'
  1497  00717A  6F                 	db	111	;'o'
  1498  00717B  75                 	db	117	;'u'
  1499  00717C  6C                 	db	108	;'l'
  1500  00717D  64                 	db	100	;'d'
  1501  00717E  20                 	db	32
  1502  00717F  6E                 	db	110	;'n'
  1503  007180  6F                 	db	111	;'o'
  1504  007181  74                 	db	116	;'t'
  1505  007182  20                 	db	32
  1506  007183  62                 	db	98	;'b'
  1507  007184  65                 	db	101	;'e'
  1508  007185  20                 	db	32
  1509  007186  72                 	db	114	;'r'
  1510  007187  65                 	db	101	;'e'
  1511  007188  61                 	db	97	;'a'
  1512  007189  64                 	db	100	;'d'
  1513  00718A  2E                 	db	46
  1514  00718B  0D                 	db	13
  1515  00718C  0A                 	db	10
  1516  00718D  00                 	db	0
  1517  00718E                     STR_197:
  1518  00718E  54                 	db	84	;'T'
  1519  00718F  72                 	db	114	;'r'
  1520  007190  61                 	db	97	;'a'
  1521  007191  6E                 	db	110	;'n'
  1522  007192  73                 	db	115	;'s'
  1523  007193  6D                 	db	109	;'m'
  1524  007194  69                 	db	105	;'i'
  1525  007195  74                 	db	116	;'t'
  1526  007196  74                 	db	116	;'t'
  1527  007197  65                 	db	101	;'e'
  1528  007198  72                 	db	114	;'r'
  1529  007199  20                 	db	32
  1530  00719A  69                 	db	105	;'i'
  1531  00719B  6E                 	db	110	;'n'
  1532  00719C  20                 	db	32
  1533  00719D  45                 	db	69	;'E'
  1534  00719E  72                 	db	114	;'r'
  1535  00719F  72                 	db	114	;'r'
  1536  0071A0  6F                 	db	111	;'o'
  1537  0071A1  72                 	db	114	;'r'
  1538  0071A2  20                 	db	32
  1539  0071A3  53                 	db	83	;'S'
  1540  0071A4  74                 	db	116	;'t'
  1541  0071A5  61                 	db	97	;'a'
  1542  0071A6  74                 	db	116	;'t'
  1543  0071A7  65                 	db	101	;'e'
  1544  0071A8  20                 	db	32
  1545  0071A9  42                 	db	66	;'B'
  1546  0071AA  75                 	db	117	;'u'
  1547  0071AB  73                 	db	115	;'s'
  1548  0071AC  20                 	db	32
  1549  0071AD  4F                 	db	79	;'O'
  1550  0071AE  46                 	db	70	;'F'
  1551  0071AF  46                 	db	70	;'F'
  1552  0071B0  20                 	db	32
  1553  0071B1  28                 	db	40
  1554  0071B2  54                 	db	84	;'T'
  1555  0071B3  45                 	db	69	;'E'
  1556  0071B4  52                 	db	82	;'R'
  1557  0071B5  52                 	db	82	;'R'
  1558  0071B6  43                 	db	67	;'C'
  1559  0071B7  4E                 	db	78	;'N'
  1560  0071B8  54                 	db	84	;'T'
  1561  0071B9  20                 	db	32
  1562  0071BA  3F                 	db	63	;'?'
  1563  0071BB  20                 	db	32
  1564  0071BC  32                 	db	50	;'2'
  1565  0071BD  35                 	db	53	;'5'
  1566  0071BE  36                 	db	54	;'6'
  1567  0071BF  29                 	db	41
  1568  0071C0  0D                 	db	13
  1569  0071C1  0A                 	db	10
  1570  0071C2  00                 	db	0
  1571  0071C3                     STR_205:
  1572  0071C3  54                 	db	84	;'T'
  1573  0071C4  72                 	db	114	;'r'
  1574  0071C5  61                 	db	97	;'a'
  1575  0071C6  6E                 	db	110	;'n'
  1576  0071C7  73                 	db	115	;'s'
  1577  0071C8  6D                 	db	109	;'m'
  1578  0071C9  69                 	db	105	;'i'
  1579  0071CA  74                 	db	116	;'t'
  1580  0071CB  74                 	db	116	;'t'
  1581  0071CC  65                 	db	101	;'e'
  1582  0071CD  72                 	db	114	;'r'
  1583  0071CE  20                 	db	32
  1584  0071CF  6F                 	db	111	;'o'
  1585  0071D0  72                 	db	114	;'r'
  1586  0071D1  20                 	db	32
  1587  0071D2  52                 	db	82	;'R'
  1588  0071D3  65                 	db	101	;'e'
  1589  0071D4  63                 	db	99	;'c'
  1590  0071D5  65                 	db	101	;'e'
  1591  0071D6  69                 	db	105	;'i'
  1592  0071D7  76                 	db	118	;'v'
  1593  0071D8  65                 	db	101	;'e'
  1594  0071D9  72                 	db	114	;'r'
  1595  0071DA  20                 	db	32
  1596  0071DB  69                 	db	105	;'i'
  1597  0071DC  73                 	db	115	;'s'
  1598  0071DD  20                 	db	32
  1599  0071DE  69                 	db	105	;'i'
  1600  0071DF  6E                 	db	110	;'n'
  1601  0071E0  20                 	db	32
  1602  0071E1  45                 	db	69	;'E'
  1603  0071E2  72                 	db	114	;'r'
  1604  0071E3  72                 	db	114	;'r'
  1605  0071E4  6F                 	db	111	;'o'
  1606  0071E5  72                 	db	114	;'r'
  1607  0071E6  20                 	db	32
  1608  0071E7  53                 	db	83	;'S'
  1609  0071E8  74                 	db	116	;'t'
  1610  0071E9  61                 	db	97	;'a'
  1611  0071EA  74                 	db	116	;'t'
  1612  0071EB  65                 	db	101	;'e'
  1613  0071EC  20                 	db	32
  1614  0071ED  57                 	db	87	;'W'
  1615  0071EE  61                 	db	97	;'a'
  1616  0071EF  72                 	db	114	;'r'
  1617  0071F0  6E                 	db	110	;'n'
  1618  0071F1  69                 	db	105	;'i'
  1619  0071F2  6E                 	db	110	;'n'
  1620  0071F3  67                 	db	103	;'g'
  1621  0071F4  0D                 	db	13
  1622  0071F5  0A                 	db	10
  1623  0071F6  00                 	db	0
  1624  0071F7                     STR_211:
  1625  0071F7  4C                 	db	76	;'L'
  1626  0071F8  49                 	db	73	;'I'
  1627  0071F9  53                 	db	83	;'S'
  1628  0071FA  54                 	db	84	;'T'
  1629  0071FB  45                 	db	69	;'E'
  1630  0071FC  4E                 	db	78	;'N'
  1631  0071FD  20                 	db	32
  1632  0071FE  2D                 	db	45
  1633  0071FF  20                 	db	32
  1634  007200  4F                 	db	79	;'O'
  1635  007201  70                 	db	112	;'p'
  1636  007202  65                 	db	101	;'e'
  1637  007203  6E                 	db	110	;'n'
  1638  007204  20                 	db	32
  1639  007205  43                 	db	67	;'C'
  1640  007206  41                 	db	65	;'A'
  1641  007207  4E                 	db	78	;'N'
  1642  007208  20                 	db	32
  1643  007209  69                 	db	105	;'i'
  1644  00720A  6E                 	db	110	;'n'
  1645  00720B  74                 	db	116	;'t'
  1646  00720C  65                 	db	101	;'e'
  1647  00720D  72                 	db	114	;'r'
  1648  00720E  66                 	db	102	;'f'
  1649  00720F  61                 	db	97	;'a'
  1650  007210  63                 	db	99	;'c'
  1651  007211  65                 	db	101	;'e'
  1652  007212  20                 	db	32
  1653  007213  69                 	db	105	;'i'
  1654  007214  6E                 	db	110	;'n'
  1655  007215  20                 	db	32
  1656  007216  6C                 	db	108	;'l'
  1657  007217  69                 	db	105	;'i'
  1658  007218  73                 	db	115	;'s'
  1659  007219  74                 	db	116	;'t'
  1660  00721A  65                 	db	101	;'e'
  1661  00721B  6E                 	db	110	;'n'
  1662  00721C  20                 	db	32
  1663  00721D  6F                 	db	111	;'o'
  1664  00721E  6E                 	db	110	;'n'
  1665  00721F  6C                 	db	108	;'l'
  1666  007220  79                 	db	121	;'y'
  1667  007221  20                 	db	32
  1668  007222  6D                 	db	109	;'m'
  1669  007223  6F                 	db	111	;'o'
  1670  007224  64                 	db	100	;'d'
  1671  007225  65                 	db	101	;'e'
  1672  007226  2E                 	db	46
  1673  007227  0D                 	db	13
  1674  007228  0A                 	db	10
  1675  007229  00                 	db	0
  1676  00722A                     STR_102:
  1677  00722A  2D                 	db	45
  1678  00722B  45                 	db	69	;'E'
  1679  00722C  52                 	db	82	;'R'
  1680  00722D  52                 	db	82	;'R'
  1681  00722E  4F                 	db	79	;'O'
  1682  00722F  52                 	db	82	;'R'
  1683  007230  20                 	db	32
  1684  007231  2D                 	db	45
  1685  007232  20                 	db	32
  1686  007233  4D                 	db	77	;'M'
  1687  007234  61                 	db	97	;'a'
  1688  007235  73                 	db	115	;'s'
  1689  007236  6B                 	db	107	;'k'
  1690  007237  20                 	db	32
  1691  007238  6E                 	db	110	;'n'
  1692  007239  75                 	db	117	;'u'
  1693  00723A  6D                 	db	109	;'m'
  1694  00723B  62                 	db	98	;'b'
  1695  00723C  65                 	db	101	;'e'
  1696  00723D  72                 	db	114	;'r'
  1697  00723E  20                 	db	32
  1698  00723F  63                 	db	99	;'c'
  1699  007240  61                 	db	97	;'a'
  1700  007241  6E                 	db	110	;'n'
  1701  007242  20                 	db	32
  1702  007243  6F                 	db	111	;'o'
  1703  007244  6E                 	db	110	;'n'
  1704  007245  6C                 	db	108	;'l'
  1705  007246  79                 	db	121	;'y'
  1706  007247  20                 	db	32
  1707  007248  62                 	db	98	;'b'
  1708  007249  65                 	db	101	;'e'
  1709  00724A  20                 	db	32
  1710  00724B  73                 	db	115	;'s'
  1711  00724C  65                 	db	101	;'e'
  1712  00724D  74                 	db	116	;'t'
  1713  00724E  20                 	db	32
  1714  00724F  61                 	db	97	;'a'
  1715  007250  73                 	db	115	;'s'
  1716  007251  20                 	db	32
  1717  007252  30                 	db	48	;'0'
  1718  007253  20                 	db	32
  1719  007254  6F                 	db	111	;'o'
  1720  007255  72                 	db	114	;'r'
  1721  007256  20                 	db	32
  1722  007257  31                 	db	49	;'1'
  1723  007258  2E                 	db	46
  1724  007259  0D                 	db	13
  1725  00725A  0A                 	db	10
  1726  00725B  00                 	db	0
  1727  00725C                     STR_212:
  1728  00725C  4C                 	db	76	;'L'
  1729  00725D  4F                 	db	79	;'O'
  1730  00725E  4F                 	db	79	;'O'
  1731  00725F  50                 	db	80	;'P'
  1732  007260  42                 	db	66	;'B'
  1733  007261  41                 	db	65	;'A'
  1734  007262  43                 	db	67	;'C'
  1735  007263  4B                 	db	75	;'K'
  1736  007264  20                 	db	32
  1737  007265  2D                 	db	45
  1738  007266  20                 	db	32
  1739  007267  4F                 	db	79	;'O'
  1740  007268  70                 	db	112	;'p'
  1741  007269  65                 	db	101	;'e'
  1742  00726A  6E                 	db	110	;'n'
  1743  00726B  20                 	db	32
  1744  00726C  43                 	db	67	;'C'
  1745  00726D  41                 	db	65	;'A'
  1746  00726E  4E                 	db	78	;'N'
  1747  00726F  20                 	db	32
  1748  007270  69                 	db	105	;'i'
  1749  007271  6E                 	db	110	;'n'
  1750  007272  74                 	db	116	;'t'
  1751  007273  65                 	db	101	;'e'
  1752  007274  72                 	db	114	;'r'
  1753  007275  66                 	db	102	;'f'
  1754  007276  61                 	db	97	;'a'
  1755  007277  63                 	db	99	;'c'
  1756  007278  65                 	db	101	;'e'
  1757  007279  20                 	db	32
  1758  00727A  69                 	db	105	;'i'
  1759  00727B  6E                 	db	110	;'n'
  1760  00727C  20                 	db	32
  1761  00727D  6C                 	db	108	;'l'
  1762  00727E  6F                 	db	111	;'o'
  1763  00727F  6F                 	db	111	;'o'
  1764  007280  70                 	db	112	;'p'
  1765  007281  62                 	db	98	;'b'
  1766  007282  61                 	db	97	;'a'
  1767  007283  63                 	db	99	;'c'
  1768  007284  6B                 	db	107	;'k'
  1769  007285  20                 	db	32
  1770  007286  6D                 	db	109	;'m'
  1771  007287  6F                 	db	111	;'o'
  1772  007288  64                 	db	100	;'d'
  1773  007289  65                 	db	101	;'e'
  1774  00728A  2E                 	db	46
  1775  00728B  0D                 	db	13
  1776  00728C  0A                 	db	10
  1777  00728D  00                 	db	0
  1778  00728E                     STR_214:
  1779  00728E  56                 	db	86	;'V'
  1780  00728F  45                 	db	69	;'E'
  1781  007290  52                 	db	82	;'R'
  1782  007291  53                 	db	83	;'S'
  1783  007292  49                 	db	73	;'I'
  1784  007293  4F                 	db	79	;'O'
  1785  007294  4E                 	db	78	;'N'
  1786  007295  20                 	db	32
  1787  007296  2D                 	db	45
  1788  007297  20                 	db	32
  1789  007298  44                 	db	68	;'D'
  1790  007299  69                 	db	105	;'i'
  1791  00729A  73                 	db	115	;'s'
  1792  00729B  70                 	db	112	;'p'
  1793  00729C  6C                 	db	108	;'l'
  1794  00729D  61                 	db	97	;'a'
  1795  00729E  79                 	db	121	;'y'
  1796  00729F  20                 	db	32
  1797  0072A0  66                 	db	102	;'f'
  1798  0072A1  69                 	db	105	;'i'
  1799  0072A2  72                 	db	114	;'r'
  1800  0072A3  6D                 	db	109	;'m'
  1801  0072A4  77                 	db	119	;'w'
  1802  0072A5  61                 	db	97	;'a'
  1803  0072A6  72                 	db	114	;'r'
  1804  0072A7  65                 	db	101	;'e'
  1805  0072A8  20                 	db	32
  1806  0072A9  76                 	db	118	;'v'
  1807  0072AA  65                 	db	101	;'e'
  1808  0072AB  72                 	db	114	;'r'
  1809  0072AC  73                 	db	115	;'s'
  1810  0072AD  69                 	db	105	;'i'
  1811  0072AE  6F                 	db	111	;'o'
  1812  0072AF  6E                 	db	110	;'n'
  1813  0072B0  20                 	db	32
  1814  0072B1  69                 	db	105	;'i'
  1815  0072B2  6E                 	db	110	;'n'
  1816  0072B3  66                 	db	102	;'f'
  1817  0072B4  6F                 	db	111	;'o'
  1818  0072B5  72                 	db	114	;'r'
  1819  0072B6  6D                 	db	109	;'m'
  1820  0072B7  61                 	db	97	;'a'
  1821  0072B8  74                 	db	116	;'t'
  1822  0072B9  69                 	db	105	;'i'
  1823  0072BA  6F                 	db	111	;'o'
  1824  0072BB  6E                 	db	110	;'n'
  1825  0072BC  2E                 	db	46
  1826  0072BD  0D                 	db	13
  1827  0072BE  0A                 	db	10
  1828  0072BF  00                 	db	0
  1829  0072C0                     STR_234:
  1830  0072C0  20                 	db	32
  1831  0072C1  20                 	db	32
  1832  0072C2  20                 	db	32
  1833  0072C3  20                 	db	32
  1834  0072C4  20                 	db	32
  1835  0072C5  20                 	db	32
  1836  0072C6  20                 	db	32
  1837  0072C7  20                 	db	32
  1838  0072C8  20                 	db	32
  1839  0072C9  20                 	db	32
  1840  0072CA  20                 	db	32
  1841  0072CB  20                 	db	32
  1842  0072CC  20                 	db	32
  1843  0072CD  20                 	db	32
  1844  0072CE  20                 	db	32
  1845  0072CF  20                 	db	32
  1846  0072D0  46                 	db	70	;'F'
  1847  0072D1  6F                 	db	111	;'o'
  1848  0072D2  72                 	db	114	;'r'
  1849  0072D3  6D                 	db	109	;'m'
  1850  0072D4  61                 	db	97	;'a'
  1851  0072D5  74                 	db	116	;'t'
  1852  0072D6  3A                 	db	58	;':'
  1853  0072D7  20                 	db	32
  1854  0072D8  73                 	db	115	;'s'
  1855  0072D9  65                 	db	101	;'e'
  1856  0072DA  74                 	db	116	;'t'
  1857  0072DB  20                 	db	32
  1858  0072DC  72                 	db	114	;'r'
  1859  0072DD  77                 	db	119	;'w'
  1860  0072DE  74                 	db	116	;'t'
  1861  0072DF  69                 	db	105	;'i'
  1862  0072E0  6D                 	db	109	;'m'
  1863  0072E1  65                 	db	101	;'e'
  1864  0072E2  6F                 	db	111	;'o'
  1865  0072E3  75                 	db	117	;'u'
  1866  0072E4  74                 	db	116	;'t'
  1867  0072E5  20                 	db	32
  1868  0072E6  74                 	db	116	;'t'
  1869  0072E7  69                 	db	105	;'i'
  1870  0072E8  6D                 	db	109	;'m'
  1871  0072E9  65                 	db	101	;'e'
  1872  0072EA  6F                 	db	111	;'o'
  1873  0072EB  75                 	db	117	;'u'
  1874  0072EC  74                 	db	116	;'t'
  1875  0072ED  2E                 	db	46
  1876  0072EE  0D                 	db	13
  1877  0072EF  0A                 	db	10
  1878  0072F0  00                 	db	0
  1879  0072F1                     STR_232:
  1880  0072F1  20                 	db	32
  1881  0072F2  20                 	db	32
  1882  0072F3  20                 	db	32
  1883  0072F4  20                 	db	32
  1884  0072F5  44                 	db	68	;'D'
  1885  0072F6  45                 	db	69	;'E'
  1886  0072F7  43                 	db	67	;'C'
  1887  0072F8  49                 	db	73	;'I'
  1888  0072F9  4D                 	db	77	;'M'
  1889  0072FA  41                 	db	65	;'A'
  1890  0072FB  4C                 	db	76	;'L'
  1891  0072FC  20                 	db	32
  1892  0072FD  2D                 	db	45
  1893  0072FE  20                 	db	32
  1894  0072FF  44                 	db	68	;'D'
  1895  007300  69                 	db	105	;'i'
  1896  007301  73                 	db	115	;'s'
  1897  007302  70                 	db	112	;'p'
  1898  007303  6C                 	db	108	;'l'
  1899  007304  61                 	db	97	;'a'
  1900  007305  79                 	db	121	;'y'
  1901  007306  20                 	db	32
  1902  007307  6E                 	db	110	;'n'
  1903  007308  75                 	db	117	;'u'
  1904  007309  6D                 	db	109	;'m'
  1905  00730A  65                 	db	101	;'e'
  1906  00730B  72                 	db	114	;'r'
  1907  00730C  69                 	db	105	;'i'
  1908  00730D  63                 	db	99	;'c'
  1909  00730E  61                 	db	97	;'a'
  1910  00730F  6C                 	db	108	;'l'
  1911  007310  73                 	db	115	;'s'
  1912  007311  20                 	db	32
  1913  007312  69                 	db	105	;'i'
  1914  007313  6E                 	db	110	;'n'
  1915  007314  20                 	db	32
  1916  007315  64                 	db	100	;'d'
  1917  007316  65                 	db	101	;'e'
  1918  007317  63                 	db	99	;'c'
  1919  007318  69                 	db	105	;'i'
  1920  007319  6D                 	db	109	;'m'
  1921  00731A  61                 	db	97	;'a'
  1922  00731B  6C                 	db	108	;'l'
  1923  00731C  2E                 	db	46
  1924  00731D  0D                 	db	13
  1925  00731E  0A                 	db	10
  1926  00731F  00                 	db	0
  1927  007320                     STR_231:
  1928  007320  20                 	db	32
  1929  007321  20                 	db	32
  1930  007322  20                 	db	32
  1931  007323  20                 	db	32
  1932  007324  48                 	db	72	;'H'
  1933  007325  45                 	db	69	;'E'
  1934  007326  58                 	db	88	;'X'
  1935  007327  20                 	db	32
  1936  007328  2D                 	db	45
  1937  007329  20                 	db	32
  1938  00732A  44                 	db	68	;'D'
  1939  00732B  69                 	db	105	;'i'
  1940  00732C  73                 	db	115	;'s'
  1941  00732D  70                 	db	112	;'p'
  1942  00732E  6C                 	db	108	;'l'
  1943  00732F  61                 	db	97	;'a'
  1944  007330  79                 	db	121	;'y'
  1945  007331  20                 	db	32
  1946  007332  6E                 	db	110	;'n'
  1947  007333  75                 	db	117	;'u'
  1948  007334  6D                 	db	109	;'m'
  1949  007335  65                 	db	101	;'e'
  1950  007336  72                 	db	114	;'r'
  1951  007337  69                 	db	105	;'i'
  1952  007338  63                 	db	99	;'c'
  1953  007339  61                 	db	97	;'a'
  1954  00733A  6C                 	db	108	;'l'
  1955  00733B  73                 	db	115	;'s'
  1956  00733C  20                 	db	32
  1957  00733D  69                 	db	105	;'i'
  1958  00733E  6E                 	db	110	;'n'
  1959  00733F  20                 	db	32
  1960  007340  68                 	db	104	;'h'
  1961  007341  65                 	db	101	;'e'
  1962  007342  78                 	db	120	;'x'
  1963  007343  61                 	db	97	;'a'
  1964  007344  64                 	db	100	;'d'
  1965  007345  65                 	db	101	;'e'
  1966  007346  63                 	db	99	;'c'
  1967  007347  69                 	db	105	;'i'
  1968  007348  6D                 	db	109	;'m'
  1969  007349  61                 	db	97	;'a'
  1970  00734A  6C                 	db	108	;'l'
  1971  00734B  2E                 	db	46
  1972  00734C  0D                 	db	13
  1973  00734D  0A                 	db	10
  1974  00734E  00                 	db	0
  1975  00734F                     STR_222:
  1976  00734F  46                 	db	70	;'F'
  1977  007350  49                 	db	73	;'I'
  1978  007351  4E                 	db	78	;'N'
  1979  007352  44                 	db	68	;'D'
  1980  007353  20                 	db	32
  1981  007354  2D                 	db	45
  1982  007355  20                 	db	32
  1983  007356  46                 	db	70	;'F'
  1984  007357  69                 	db	105	;'i'
  1985  007358  6E                 	db	110	;'n'
  1986  007359  64                 	db	100	;'d'
  1987  00735A  20                 	db	32
  1988  00735B  61                 	db	97	;'a'
  1989  00735C  76                 	db	118	;'v'
  1990  00735D  61                 	db	97	;'a'
  1991  00735E  69                 	db	105	;'i'
  1992  00735F  6C                 	db	108	;'l'
  1993  007360  61                 	db	97	;'a'
  1994  007361  62                 	db	98	;'b'
  1995  007362  6C                 	db	108	;'l'
  1996  007363  65                 	db	101	;'e'
  1997  007364  20                 	db	32
  1998  007365  43                 	db	67	;'C'
  1999  007366  41                 	db	65	;'A'
  2000  007367  4E                 	db	78	;'N'
  2001  007368  34                 	db	52	;'4'
  2002  007369  56                 	db	86	;'V'
  2003  00736A  53                 	db	83	;'S'
  2004  00736B  43                 	db	67	;'C'
  2005  00736C  50                 	db	80	;'P'
  2006  00736D  20                 	db	32
  2007  00736E  6E                 	db	110	;'n'
  2008  00736F  6F                 	db	111	;'o'
  2009  007370  64                 	db	100	;'d'
  2010  007371  65                 	db	101	;'e'
  2011  007372  73                 	db	115	;'s'
  2012  007373  20                 	db	32
  2013  007374  6F                 	db	111	;'o'
  2014  007375  6E                 	db	110	;'n'
  2015  007376  20                 	db	32
  2016  007377  62                 	db	98	;'b'
  2017  007378  75                 	db	117	;'u'
  2018  007379  73                 	db	115	;'s'
  2019  00737A  2E                 	db	46
  2020  00737B  0D                 	db	13
  2021  00737C  0A                 	db	10
  2022  00737D  00                 	db	0
  2023  00737E                     STR_210:
  2024  00737E  53                 	db	83	;'S'
  2025  00737F  49                 	db	73	;'I'
  2026  007380  4C                 	db	76	;'L'
  2027  007381  45                 	db	69	;'E'
  2028  007382  4E                 	db	78	;'N'
  2029  007383  54                 	db	84	;'T'
  2030  007384  20                 	db	32
  2031  007385  2D                 	db	45
  2032  007386  20                 	db	32
  2033  007387  4F                 	db	79	;'O'
  2034  007388  70                 	db	112	;'p'
  2035  007389  65                 	db	101	;'e'
  2036  00738A  6E                 	db	110	;'n'
  2037  00738B  20                 	db	32
  2038  00738C  43                 	db	67	;'C'
  2039  00738D  41                 	db	65	;'A'
  2040  00738E  4E                 	db	78	;'N'
  2041  00738F  20                 	db	32
  2042  007390  69                 	db	105	;'i'
  2043  007391  6E                 	db	110	;'n'
  2044  007392  74                 	db	116	;'t'
  2045  007393  65                 	db	101	;'e'
  2046  007394  72                 	db	114	;'r'
  2047  007395  66                 	db	102	;'f'
  2048  007396  61                 	db	97	;'a'
  2049  007397  63                 	db	99	;'c'
  2050  007398  65                 	db	101	;'e'
  2051  007399  20                 	db	32
  2052  00739A  69                 	db	105	;'i'
  2053  00739B  6E                 	db	110	;'n'
  2054  00739C  20                 	db	32
  2055  00739D  73                 	db	115	;'s'
  2056  00739E  69                 	db	105	;'i'
  2057  00739F  6C                 	db	108	;'l'
  2058  0073A0  65                 	db	101	;'e'
  2059  0073A1  6E                 	db	110	;'n'
  2060  0073A2  74                 	db	116	;'t'
  2061  0073A3  20                 	db	32
  2062  0073A4  6D                 	db	109	;'m'
  2063  0073A5  6F                 	db	111	;'o'
  2064  0073A6  64                 	db	100	;'d'
  2065  0073A7  65                 	db	101	;'e'
  2066  0073A8  2E                 	db	46
  2067  0073A9  0D                 	db	13
  2068  0073AA  0A                 	db	10
  2069  0073AB  00                 	db	0
  2070  0073AC                     STR_215:
  2071  0073AC  49                 	db	73	;'I'
  2072  0073AD  46                 	db	70	;'F'
  2073  0073AE  4D                 	db	77	;'M'
  2074  0073AF  4F                 	db	79	;'O'
  2075  0073B0  44                 	db	68	;'D'
  2076  0073B1  45                 	db	69	;'E'
  2077  0073B2  20                 	db	32
  2078  0073B3  2D                 	db	45
  2079  0073B4  20                 	db	32
  2080  0073B5  44                 	db	68	;'D'
  2081  0073B6  69                 	db	105	;'i'
  2082  0073B7  73                 	db	115	;'s'
  2083  0073B8  70                 	db	112	;'p'
  2084  0073B9  6C                 	db	108	;'l'
  2085  0073BA  61                 	db	97	;'a'
  2086  0073BB  79                 	db	121	;'y'
  2087  0073BC  20                 	db	32
  2088  0073BD  73                 	db	115	;'s'
  2089  0073BE  65                 	db	101	;'e'
  2090  0073BF  6C                 	db	108	;'l'
  2091  0073C0  65                 	db	101	;'e'
  2092  0073C1  63                 	db	99	;'c'
  2093  0073C2  74                 	db	116	;'t'
  2094  0073C3  65                 	db	101	;'e'
  2095  0073C4  64                 	db	100	;'d'
  2096  0073C5  20                 	db	32
  2097  0073C6  69                 	db	105	;'i'
  2098  0073C7  6E                 	db	110	;'n'
  2099  0073C8  74                 	db	116	;'t'
  2100  0073C9  65                 	db	101	;'e'
  2101  0073CA  72                 	db	114	;'r'
  2102  0073CB  66                 	db	102	;'f'
  2103  0073CC  61                 	db	97	;'a'
  2104  0073CD  63                 	db	99	;'c'
  2105  0073CE  65                 	db	101	;'e'
  2106  0073CF  20                 	db	32
  2107  0073D0  6D                 	db	109	;'m'
  2108  0073D1  6F                 	db	111	;'o'
  2109  0073D2  64                 	db	100	;'d'
  2110  0073D3  65                 	db	101	;'e'
  2111  0073D4  2E                 	db	46
  2112  0073D5  0D                 	db	13
  2113  0073D6  0A                 	db	10
  2114  0073D7  00                 	db	0
  2115  0073D8                     STR_209:
  2116  0073D8  4F                 	db	79	;'O'
  2117  0073D9  50                 	db	80	;'P'
  2118  0073DA  45                 	db	69	;'E'
  2119  0073DB  4E                 	db	78	;'N'
  2120  0073DC  20                 	db	32
  2121  0073DD  2D                 	db	45
  2122  0073DE  20                 	db	32
  2123  0073DF  4F                 	db	79	;'O'
  2124  0073E0  70                 	db	112	;'p'
  2125  0073E1  65                 	db	101	;'e'
  2126  0073E2  6E                 	db	110	;'n'
  2127  0073E3  20                 	db	32
  2128  0073E4  43                 	db	67	;'C'
  2129  0073E5  41                 	db	65	;'A'
  2130  0073E6  4E                 	db	78	;'N'
  2131  0073E7  20                 	db	32
  2132  0073E8  69                 	db	105	;'i'
  2133  0073E9  6E                 	db	110	;'n'
  2134  0073EA  74                 	db	116	;'t'
  2135  0073EB  65                 	db	101	;'e'
  2136  0073EC  72                 	db	114	;'r'
  2137  0073ED  66                 	db	102	;'f'
  2138  0073EE  61                 	db	97	;'a'
  2139  0073EF  63                 	db	99	;'c'
  2140  0073F0  65                 	db	101	;'e'
  2141  0073F1  20                 	db	32
  2142  0073F2  69                 	db	105	;'i'
  2143  0073F3  6E                 	db	110	;'n'
  2144  0073F4  20                 	db	32
  2145  0073F5  6E                 	db	110	;'n'
  2146  0073F6  6F                 	db	111	;'o'
  2147  0073F7  72                 	db	114	;'r'
  2148  0073F8  6D                 	db	109	;'m'
  2149  0073F9  61                 	db	97	;'a'
  2150  0073FA  6C                 	db	108	;'l'
  2151  0073FB  20                 	db	32
  2152  0073FC  6D                 	db	109	;'m'
  2153  0073FD  6F                 	db	111	;'o'
  2154  0073FE  64                 	db	100	;'d'
  2155  0073FF  65                 	db	101	;'e'
  2156  007400  2E                 	db	46
  2157  007401  0D                 	db	13
  2158  007402  0A                 	db	10
  2159  007403  00                 	db	0
  2160  007404                     STR_115:
  2161  007404  2B                 	db	43
  2162  007405  4F                 	db	79	;'O'
  2163  007406  4B                 	db	75	;'K'
  2164  007407  20                 	db	32
  2165  007408  2D                 	db	45
  2166  007409  20                 	db	32
  2167  00740A  4E                 	db	78	;'N'
  2168  00740B  75                 	db	117	;'u'
  2169  00740C  6D                 	db	109	;'m'
  2170  00740D  65                 	db	101	;'e'
  2171  00740E  72                 	db	114	;'r'
  2172  00740F  69                 	db	105	;'i'
  2173  007410  63                 	db	99	;'c'
  2174  007411  61                 	db	97	;'a'
  2175  007412  6C                 	db	108	;'l'
  2176  007413  20                 	db	32
  2177  007414  6F                 	db	111	;'o'
  2178  007415  75                 	db	117	;'u'
  2179  007416  74                 	db	116	;'t'
  2180  007417  70                 	db	112	;'p'
  2181  007418  75                 	db	117	;'u'
  2182  007419  74                 	db	116	;'t'
  2183  00741A  20                 	db	32
  2184  00741B  6E                 	db	110	;'n'
  2185  00741C  6F                 	db	111	;'o'
  2186  00741D  77                 	db	119	;'w'
  2187  00741E  20                 	db	32
  2188  00741F  69                 	db	105	;'i'
  2189  007420  6E                 	db	110	;'n'
  2190  007421  20                 	db	32
  2191  007422  68                 	db	104	;'h'
  2192  007423  65                 	db	101	;'e'
  2193  007424  78                 	db	120	;'x'
  2194  007425  61                 	db	97	;'a'
  2195  007426  64                 	db	100	;'d'
  2196  007427  65                 	db	101	;'e'
  2197  007428  63                 	db	99	;'c'
  2198  007429  69                 	db	105	;'i'
  2199  00742A  6D                 	db	109	;'m'
  2200  00742B  61                 	db	97	;'a'
  2201  00742C  6C                 	db	108	;'l'
  2202  00742D  0D                 	db	13
  2203  00742E  0A                 	db	10
  2204  00742F  00                 	db	0
  2205  007430                     STR_92:
  2206  007430  2D                 	db	45
  2207  007431  45                 	db	69	;'E'
  2208  007432  52                 	db	82	;'R'
  2209  007433  52                 	db	82	;'R'
  2210  007434  4F                 	db	79	;'O'
  2211  007435  52                 	db	82	;'R'
  2212  007436  20                 	db	32
  2213  007437  2D                 	db	45
  2214  007438  20                 	db	32
  2215  007439  66                 	db	102	;'f'
  2216  00743A  69                 	db	105	;'i'
  2217  00743B  6C                 	db	108	;'l'
  2218  00743C  74                 	db	116	;'t'
  2219  00743D  65                 	db	101	;'e'
  2220  00743E  72                 	db	114	;'r'
  2221  00743F  20                 	db	32
  2222  007440  66                 	db	102	;'f'
  2223  007441  6F                 	db	111	;'o'
  2224  007442  72                 	db	114	;'r'
  2225  007443  20                 	db	32
  2226  007444  70                 	db	112	;'p'
  2227  007445  72                 	db	114	;'r'
  2228  007446  69                 	db	105	;'i'
  2229  007447  6F                 	db	111	;'o'
  2230  007448  72                 	db	114	;'r'
  2231  007449  69                 	db	105	;'i'
  2232  00744A  74                 	db	116	;'t'
  2233  00744B  79                 	db	121	;'y'
  2234  00744C  20                 	db	32
  2235  00744D  69                 	db	105	;'i'
  2236  00744E  73                 	db	115	;'s'
  2237  00744F  20                 	db	32
  2238  007450  6D                 	db	109	;'m'
  2239  007451  69                 	db	105	;'i'
  2240  007452  73                 	db	115	;'s'
  2241  007453  73                 	db	115	;'s'
  2242  007454  69                 	db	105	;'i'
  2243  007455  6E                 	db	110	;'n'
  2244  007456  67                 	db	103	;'g'
  2245  007457  0D                 	db	13
  2246  007458  0A                 	db	10
  2247  007459  00                 	db	0
  2248  00745A                     STR_98:
  2249  00745A  2D                 	db	45
  2250  00745B  45                 	db	69	;'E'
  2251  00745C  52                 	db	82	;'R'
  2252  00745D  52                 	db	82	;'R'
  2253  00745E  4F                 	db	79	;'O'
  2254  00745F  52                 	db	82	;'R'
  2255  007460  20                 	db	32
  2256  007461  2D                 	db	45
  2257  007462  20                 	db	32
  2258  007463  66                 	db	102	;'f'
  2259  007464  69                 	db	105	;'i'
  2260  007465  6C                 	db	108	;'l'
  2261  007466  74                 	db	116	;'t'
  2262  007467  65                 	db	101	;'e'
  2263  007468  72                 	db	114	;'r'
  2264  007469  20                 	db	32
  2265  00746A  66                 	db	102	;'f'
  2266  00746B  6F                 	db	111	;'o'
  2267  00746C  72                 	db	114	;'r'
  2268  00746D  20                 	db	32
  2269  00746E  6E                 	db	110	;'n'
  2270  00746F  69                 	db	105	;'i'
  2271  007470  64                 	db	100	;'d'
  2272  007471  65                 	db	101	;'e'
  2273  007472  20                 	db	32
  2274  007473  69                 	db	105	;'i'
  2275  007474  64                 	db	100	;'d'
  2276  007475  20                 	db	32
  2277  007476  69                 	db	105	;'i'
  2278  007477  73                 	db	115	;'s'
  2279  007478  20                 	db	32
  2280  007479  6D                 	db	109	;'m'
  2281  00747A  69                 	db	105	;'i'
  2282  00747B  73                 	db	115	;'s'
  2283  00747C  73                 	db	115	;'s'
  2284  00747D  69                 	db	105	;'i'
  2285  00747E  6E                 	db	110	;'n'
  2286  00747F  67                 	db	103	;'g'
  2287  007480  0D                 	db	13
  2288  007481  0A                 	db	10
  2289  007482  00                 	db	0
  2290  007483                     STR_221:
  2291  007483  48                 	db	72	;'H'
  2292  007484  45                 	db	69	;'E'
  2293  007485  4C                 	db	76	;'L'
  2294  007486  50                 	db	80	;'P'
  2295  007487  20                 	db	32
  2296  007488  2D                 	db	45
  2297  007489  20                 	db	32
  2298  00748A  44                 	db	68	;'D'
  2299  00748B  69                 	db	105	;'i'
  2300  00748C  73                 	db	115	;'s'
  2301  00748D  70                 	db	112	;'p'
  2302  00748E  6C                 	db	108	;'l'
  2303  00748F  61                 	db	97	;'a'
  2304  007490  79                 	db	121	;'y'
  2305  007491  20                 	db	32
  2306  007492  74                 	db	116	;'t'
  2307  007493  68                 	db	104	;'h'
  2308  007494  69                 	db	105	;'i'
  2309  007495  73                 	db	115	;'s'
  2310  007496  20                 	db	32
  2311  007497  68                 	db	104	;'h'
  2312  007498  65                 	db	101	;'e'
  2313  007499  6C                 	db	108	;'l'
  2314  00749A  70                 	db	112	;'p'
  2315  00749B  20                 	db	32
  2316  00749C  69                 	db	105	;'i'
  2317  00749D  6E                 	db	110	;'n'
  2318  00749E  66                 	db	102	;'f'
  2319  00749F  6F                 	db	111	;'o'
  2320  0074A0  72                 	db	114	;'r'
  2321  0074A1  6D                 	db	109	;'m'
  2322  0074A2  61                 	db	97	;'a'
  2323  0074A3  74                 	db	116	;'t'
  2324  0074A4  69                 	db	105	;'i'
  2325  0074A5  6F                 	db	111	;'o'
  2326  0074A6  6E                 	db	110	;'n'
  2327  0074A7  2E                 	db	46
  2328  0074A8  0D                 	db	13
  2329  0074A9  0A                 	db	10
  2330  0074AA  00                 	db	0
  2331  0074AB                     STR_105:
  2332  0074AB  2D                 	db	45
  2333  0074AC  45                 	db	69	;'E'
  2334  0074AD  52                 	db	82	;'R'
  2335  0074AE  52                 	db	82	;'R'
  2336  0074AF  4F                 	db	79	;'O'
  2337  0074B0  52                 	db	82	;'R'
  2338  0074B1  20                 	db	32
  2339  0074B2  2D                 	db	45
  2340  0074B3  20                 	db	32
  2341  0074B4  6D                 	db	109	;'m'
  2342  0074B5  61                 	db	97	;'a'
  2343  0074B6  73                 	db	115	;'s'
  2344  0074B7  6B                 	db	107	;'k'
  2345  0074B8  20                 	db	32
  2346  0074B9  66                 	db	102	;'f'
  2347  0074BA  6F                 	db	111	;'o'
  2348  0074BB  72                 	db	114	;'r'
  2349  0074BC  20                 	db	32
  2350  0074BD  70                 	db	112	;'p'
  2351  0074BE  72                 	db	114	;'r'
  2352  0074BF  69                 	db	105	;'i'
  2353  0074C0  6F                 	db	111	;'o'
  2354  0074C1  72                 	db	114	;'r'
  2355  0074C2  69                 	db	105	;'i'
  2356  0074C3  74                 	db	116	;'t'
  2357  0074C4  79                 	db	121	;'y'
  2358  0074C5  20                 	db	32
  2359  0074C6  69                 	db	105	;'i'
  2360  0074C7  73                 	db	115	;'s'
  2361  0074C8  20                 	db	32
  2362  0074C9  6D                 	db	109	;'m'
  2363  0074CA  69                 	db	105	;'i'
  2364  0074CB  73                 	db	115	;'s'
  2365  0074CC  73                 	db	115	;'s'
  2366  0074CD  69                 	db	105	;'i'
  2367  0074CE  6E                 	db	110	;'n'
  2368  0074CF  67                 	db	103	;'g'
  2369  0074D0  0D                 	db	13
  2370  0074D1  0A                 	db	10
  2371  0074D2  00                 	db	0
  2372  0074D3                     STR_117:
  2373  0074D3  2B                 	db	43
  2374  0074D4  4F                 	db	79	;'O'
  2375  0074D5  4B                 	db	75	;'K'
  2376  0074D6  20                 	db	32
  2377  0074D7  2D                 	db	45
  2378  0074D8  20                 	db	32
  2379  0074D9  4E                 	db	78	;'N'
  2380  0074DA  75                 	db	117	;'u'
  2381  0074DB  6D                 	db	109	;'m'
  2382  0074DC  65                 	db	101	;'e'
  2383  0074DD  72                 	db	114	;'r'
  2384  0074DE  69                 	db	105	;'i'
  2385  0074DF  63                 	db	99	;'c'
  2386  0074E0  61                 	db	97	;'a'
  2387  0074E1  6C                 	db	108	;'l'
  2388  0074E2  20                 	db	32
  2389  0074E3  6F                 	db	111	;'o'
  2390  0074E4  75                 	db	117	;'u'
  2391  0074E5  74                 	db	116	;'t'
  2392  0074E6  70                 	db	112	;'p'
  2393  0074E7  75                 	db	117	;'u'
  2394  0074E8  74                 	db	116	;'t'
  2395  0074E9  20                 	db	32
  2396  0074EA  6E                 	db	110	;'n'
  2397  0074EB  6F                 	db	111	;'o'
  2398  0074EC  77                 	db	119	;'w'
  2399  0074ED  20                 	db	32
  2400  0074EE  69                 	db	105	;'i'
  2401  0074EF  6E                 	db	110	;'n'
  2402  0074F0  20                 	db	32
  2403  0074F1  64                 	db	100	;'d'
  2404  0074F2  65                 	db	101	;'e'
  2405  0074F3  63                 	db	99	;'c'
  2406  0074F4  69                 	db	105	;'i'
  2407  0074F5  6D                 	db	109	;'m'
  2408  0074F6  61                 	db	97	;'a'
  2409  0074F7  6C                 	db	108	;'l'
  2410  0074F8  0D                 	db	13
  2411  0074F9  0A                 	db	10
  2412  0074FA  00                 	db	0
  2413  0074FB                     STR_90:
  2414  0074FB  2D                 	db	45
  2415  0074FC  45                 	db	69	;'E'
  2416  0074FD  52                 	db	82	;'R'
  2417  0074FE  52                 	db	82	;'R'
  2418  0074FF  4F                 	db	79	;'O'
  2419  007500  52                 	db	82	;'R'
  2420  007501  20                 	db	32
  2421  007502  2D                 	db	45
  2422  007503  20                 	db	32
  2423  007504  4E                 	db	78	;'N'
  2424  007505  6F                 	db	111	;'o'
  2425  007506  20                 	db	32
  2426  007507  66                 	db	102	;'f'
  2427  007508  69                 	db	105	;'i'
  2428  007509  6C                 	db	108	;'l'
  2429  00750A  74                 	db	116	;'t'
  2430  00750B  65                 	db	101	;'e'
  2431  00750C  72                 	db	114	;'r'
  2432  00750D  20                 	db	32
  2433  00750E  6E                 	db	110	;'n'
  2434  00750F  75                 	db	117	;'u'
  2435  007510  6D                 	db	109	;'m'
  2436  007511  62                 	db	98	;'b'
  2437  007512  65                 	db	101	;'e'
  2438  007513  72                 	db	114	;'r'
  2439  007514  20                 	db	32
  2440  007515  73                 	db	115	;'s'
  2441  007516  70                 	db	112	;'p'
  2442  007517  65                 	db	101	;'e'
  2443  007518  63                 	db	99	;'c'
  2444  007519  69                 	db	105	;'i'
  2445  00751A  66                 	db	102	;'f'
  2446  00751B  69                 	db	105	;'i'
  2447  00751C  65                 	db	101	;'e'
  2448  00751D  64                 	db	100	;'d'
  2449  00751E  2E                 	db	46
  2450  00751F  0D                 	db	13
  2451  007520  0A                 	db	10
  2452  007521  00                 	db	0
  2453  007522                     STR_220:
  2454  007522  45                 	db	69	;'E'
  2455  007523  52                 	db	82	;'R'
  2456  007524  52                 	db	82	;'R'
  2457  007525  20                 	db	32
  2458  007526  2D                 	db	45
  2459  007527  20                 	db	32
  2460  007528  44                 	db	68	;'D'
  2461  007529  69                 	db	105	;'i'
  2462  00752A  73                 	db	115	;'s'
  2463  00752B  70                 	db	112	;'p'
  2464  00752C  6C                 	db	108	;'l'
  2465  00752D  61                 	db	97	;'a'
  2466  00752E  79                 	db	121	;'y'
  2467  00752F  20                 	db	32
  2468  007530  43                 	db	67	;'C'
  2469  007531  41                 	db	65	;'A'
  2470  007532  4E                 	db	78	;'N'
  2471  007533  20                 	db	32
  2472  007534  65                 	db	101	;'e'
  2473  007535  72                 	db	114	;'r'
  2474  007536  72                 	db	114	;'r'
  2475  007537  6F                 	db	111	;'o'
  2476  007538  72                 	db	114	;'r'
  2477  007539  20                 	db	32
  2478  00753A  69                 	db	105	;'i'
  2479  00753B  6E                 	db	110	;'n'
  2480  00753C  66                 	db	102	;'f'
  2481  00753D  6F                 	db	111	;'o'
  2482  00753E  72                 	db	114	;'r'
  2483  00753F  6D                 	db	109	;'m'
  2484  007540  61                 	db	97	;'a'
  2485  007541  74                 	db	116	;'t'
  2486  007542  69                 	db	105	;'i'
  2487  007543  6F                 	db	111	;'o'
  2488  007544  6E                 	db	110	;'n'
  2489  007545  2E                 	db	46
  2490  007546  0D                 	db	13
  2491  007547  0A                 	db	10
  2492  007548  00                 	db	0
  2493  007549                     STR_206:
  2494  007549  48                 	db	72	;'H'
  2495  00754A  65                 	db	101	;'e'
  2496  00754B  6C                 	db	108	;'l'
  2497  00754C  70                 	db	112	;'p'
  2498  00754D  20                 	db	32
  2499  00754E  66                 	db	102	;'f'
  2500  00754F  6F                 	db	111	;'o'
  2501  007550  72                 	db	114	;'r'
  2502  007551  20                 	db	32
  2503  007552  74                 	db	116	;'t'
  2504  007553  68                 	db	104	;'h'
  2505  007554  65                 	db	101	;'e'
  2506  007555  20                 	db	32
  2507  007556  46                 	db	70	;'F'
  2508  007557  72                 	db	114	;'r'
  2509  007558  61                 	db	97	;'a'
  2510  007559  6E                 	db	110	;'n'
  2511  00755A  6B                 	db	107	;'k'
  2512  00755B  66                 	db	102	;'f'
  2513  00755C  75                 	db	117	;'u'
  2514  00755D  72                 	db	114	;'r'
  2515  00755E  74                 	db	116	;'t'
  2516  00755F  20                 	db	32
  2517  007560  52                 	db	82	;'R'
  2518  007561  53                 	db	83	;'S'
  2519  007562  2D                 	db	45
  2520  007563  32                 	db	50	;'2'
  2521  007564  33                 	db	51	;'3'
  2522  007565  32                 	db	50	;'2'
  2523  007566  20                 	db	32
  2524  007567  6D                 	db	109	;'m'
  2525  007568  6F                 	db	111	;'o'
  2526  007569  64                 	db	100	;'d'
  2527  00756A  75                 	db	117	;'u'
  2528  00756B  6C                 	db	108	;'l'
  2529  00756C  65                 	db	101	;'e'
  2530  00756D  0D                 	db	13
  2531  00756E  0A                 	db	10
  2532  00756F  00                 	db	0
  2533  007570                     STR_111:
  2534  007570  2D                 	db	45
  2535  007571  45                 	db	69	;'E'
  2536  007572  52                 	db	82	;'R'
  2537  007573  52                 	db	82	;'R'
  2538  007574  4F                 	db	79	;'O'
  2539  007575  52                 	db	82	;'R'
  2540  007576  20                 	db	32
  2541  007577  2D                 	db	45
  2542  007578  20                 	db	32
  2543  007579  6D                 	db	109	;'m'
  2544  00757A  61                 	db	97	;'a'
  2545  00757B  73                 	db	115	;'s'
  2546  00757C  6B                 	db	107	;'k'
  2547  00757D  20                 	db	32
  2548  00757E  66                 	db	102	;'f'
  2549  00757F  6F                 	db	111	;'o'
  2550  007580  72                 	db	114	;'r'
  2551  007581  20                 	db	32
  2552  007582  6E                 	db	110	;'n'
  2553  007583  69                 	db	105	;'i'
  2554  007584  64                 	db	100	;'d'
  2555  007585  65                 	db	101	;'e'
  2556  007586  20                 	db	32
  2557  007587  69                 	db	105	;'i'
  2558  007588  64                 	db	100	;'d'
  2559  007589  20                 	db	32
  2560  00758A  69                 	db	105	;'i'
  2561  00758B  73                 	db	115	;'s'
  2562  00758C  20                 	db	32
  2563  00758D  6D                 	db	109	;'m'
  2564  00758E  69                 	db	105	;'i'
  2565  00758F  73                 	db	115	;'s'
  2566  007590  73                 	db	115	;'s'
  2567  007591  69                 	db	105	;'i'
  2568  007592  6E                 	db	110	;'n'
  2569  007593  67                 	db	103	;'g'
  2570  007594  0D                 	db	13
  2571  007595  0A                 	db	10
  2572  007596  00                 	db	0
  2573  007597                     STR_94:
  2574  007597  2D                 	db	45
  2575  007598  45                 	db	69	;'E'
  2576  007599  52                 	db	82	;'R'
  2577  00759A  52                 	db	82	;'R'
  2578  00759B  4F                 	db	79	;'O'
  2579  00759C  52                 	db	82	;'R'
  2580  00759D  20                 	db	32
  2581  00759E  2D                 	db	45
  2582  00759F  20                 	db	32
  2583  0075A0  66                 	db	102	;'f'
  2584  0075A1  69                 	db	105	;'i'
  2585  0075A2  6C                 	db	108	;'l'
  2586  0075A3  74                 	db	116	;'t'
  2587  0075A4  65                 	db	101	;'e'
  2588  0075A5  72                 	db	114	;'r'
  2589  0075A6  20                 	db	32
  2590  0075A7  66                 	db	102	;'f'
  2591  0075A8  6F                 	db	111	;'o'
  2592  0075A9  72                 	db	114	;'r'
  2593  0075AA  20                 	db	32
  2594  0075AB  63                 	db	99	;'c'
  2595  0075AC  6C                 	db	108	;'l'
  2596  0075AD  61                 	db	97	;'a'
  2597  0075AE  73                 	db	115	;'s'
  2598  0075AF  73                 	db	115	;'s'
  2599  0075B0  20                 	db	32
  2600  0075B1  69                 	db	105	;'i'
  2601  0075B2  73                 	db	115	;'s'
  2602  0075B3  20                 	db	32
  2603  0075B4  6D                 	db	109	;'m'
  2604  0075B5  69                 	db	105	;'i'
  2605  0075B6  73                 	db	115	;'s'
  2606  0075B7  73                 	db	115	;'s'
  2607  0075B8  69                 	db	105	;'i'
  2608  0075B9  6E                 	db	110	;'n'
  2609  0075BA  67                 	db	103	;'g'
  2610  0075BB  0D                 	db	13
  2611  0075BC  0A                 	db	10
  2612  0075BD  00                 	db	0
  2613  0075BE                     STR_237:
  2614  0075BE  20                 	db	32
  2615  0075BF  20                 	db	32
  2616  0075C0  20                 	db	32
  2617  0075C1  20                 	db	32
  2618  0075C2  20                 	db	32
  2619  0075C3  20                 	db	32
  2620  0075C4  20                 	db	32
  2621  0075C5  20                 	db	32
  2622  0075C6  20                 	db	32
  2623  0075C7  20                 	db	32
  2624  0075C8  20                 	db	32
  2625  0075C9  4D                 	db	77	;'M'
  2626  0075CA  6F                 	db	111	;'o'
  2627  0075CB  64                 	db	100	;'d'
  2628  0075CC  65                 	db	101	;'e'
  2629  0075CD  73                 	db	115	;'s'
  2630  0075CE  3A                 	db	58	;':'
  2631  0075CF  20                 	db	32
  2632  0075D0  76                 	db	118	;'v'
  2633  0075D1  65                 	db	101	;'e'
  2634  0075D2  72                 	db	114	;'r'
  2635  0075D3  62                 	db	98	;'b'
  2636  0075D4  6F                 	db	111	;'o'
  2637  0075D5  73                 	db	115	;'s'
  2638  0075D6  65                 	db	101	;'e'
  2639  0075D7  7C                 	db	124
  2640  0075D8  76                 	db	118	;'v'
  2641  0075D9  73                 	db	115	;'s'
  2642  0075DA  63                 	db	99	;'c'
  2643  0075DB  70                 	db	112	;'p'
  2644  0075DC  7C                 	db	124
  2645  0075DD  73                 	db	115	;'s'
  2646  0075DE  6C                 	db	108	;'l'
  2647  0075DF  63                 	db	99	;'c'
  2648  0075E0  61                 	db	97	;'a'
  2649  0075E1  6E                 	db	110	;'n'
  2650  0075E2  0D                 	db	13
  2651  0075E3  0A                 	db	10
  2652  0075E4  00                 	db	0
  2653  0075E5                     STR_96:
  2654  0075E5  2D                 	db	45
  2655  0075E6  45                 	db	69	;'E'
  2656  0075E7  52                 	db	82	;'R'
  2657  0075E8  52                 	db	82	;'R'
  2658  0075E9  4F                 	db	79	;'O'
  2659  0075EA  52                 	db	82	;'R'
  2660  0075EB  20                 	db	32
  2661  0075EC  2D                 	db	45
  2662  0075ED  20                 	db	32
  2663  0075EE  66                 	db	102	;'f'
  2664  0075EF  69                 	db	105	;'i'
  2665  0075F0  6C                 	db	108	;'l'
  2666  0075F1  74                 	db	116	;'t'
  2667  0075F2  65                 	db	101	;'e'
  2668  0075F3  72                 	db	114	;'r'
  2669  0075F4  20                 	db	32
  2670  0075F5  66                 	db	102	;'f'
  2671  0075F6  6F                 	db	111	;'o'
  2672  0075F7  72                 	db	114	;'r'
  2673  0075F8  20                 	db	32
  2674  0075F9  74                 	db	116	;'t'
  2675  0075FA  79                 	db	121	;'y'
  2676  0075FB  70                 	db	112	;'p'
  2677  0075FC  65                 	db	101	;'e'
  2678  0075FD  20                 	db	32
  2679  0075FE  69                 	db	105	;'i'
  2680  0075FF  73                 	db	115	;'s'
  2681  007600  20                 	db	32
  2682  007601  6D                 	db	109	;'m'
  2683  007602  69                 	db	105	;'i'
  2684  007603  73                 	db	115	;'s'
  2685  007604  73                 	db	115	;'s'
  2686  007605  69                 	db	105	;'i'
  2687  007606  6E                 	db	110	;'n'
  2688  007607  67                 	db	103	;'g'
  2689  007608  0D                 	db	13
  2690  007609  0A                 	db	10
  2691  00760A  00                 	db	0
  2692  00760B                     STR_103:
  2693  00760B  2D                 	db	45
  2694  00760C  45                 	db	69	;'E'
  2695  00760D  52                 	db	82	;'R'
  2696  00760E  52                 	db	82	;'R'
  2697  00760F  4F                 	db	79	;'O'
  2698  007610  52                 	db	82	;'R'
  2699  007611  20                 	db	32
  2700  007612  2D                 	db	45
  2701  007613  20                 	db	32
  2702  007614  4E                 	db	78	;'N'
  2703  007615  6F                 	db	111	;'o'
  2704  007616  20                 	db	32
  2705  007617  6D                 	db	109	;'m'
  2706  007618  61                 	db	97	;'a'
  2707  007619  73                 	db	115	;'s'
  2708  00761A  6B                 	db	107	;'k'
  2709  00761B  20                 	db	32
  2710  00761C  6E                 	db	110	;'n'
  2711  00761D  75                 	db	117	;'u'
  2712  00761E  6D                 	db	109	;'m'
  2713  00761F  62                 	db	98	;'b'
  2714  007620  65                 	db	101	;'e'
  2715  007621  72                 	db	114	;'r'
  2716  007622  20                 	db	32
  2717  007623  73                 	db	115	;'s'
  2718  007624  70                 	db	112	;'p'
  2719  007625  65                 	db	101	;'e'
  2720  007626  63                 	db	99	;'c'
  2721  007627  69                 	db	105	;'i'
  2722  007628  66                 	db	102	;'f'
  2723  007629  69                 	db	105	;'i'
  2724  00762A  65                 	db	101	;'e'
  2725  00762B  64                 	db	100	;'d'
  2726  00762C  2E                 	db	46
  2727  00762D  0D                 	db	13
  2728  00762E  0A                 	db	10
  2729  00762F  00                 	db	0
  2730  007630                     STR_1:
  2731  007630  0D                 	db	13
  2732  007631  0A                 	db	10
  2733  007632  46                 	db	70	;'F'
  2734  007633  72                 	db	114	;'r'
  2735  007634  61                 	db	97	;'a'
  2736  007635  6E                 	db	110	;'n'
  2737  007636  6B                 	db	107	;'k'
  2738  007637  66                 	db	102	;'f'
  2739  007638  75                 	db	117	;'u'
  2740  007639  72                 	db	114	;'r'
  2741  00763A  74                 	db	116	;'t'
  2742  00763B  20                 	db	32
  2743  00763C  52                 	db	82	;'R'
  2744  00763D  53                 	db	83	;'S'
  2745  00763E  2D                 	db	45
  2746  00763F  32                 	db	50	;'2'
  2747  007640  33                 	db	51	;'3'
  2748  007641  32                 	db	50	;'2'
  2749  007642  20                 	db	32
  2750  007643  43                 	db	67	;'C'
  2751  007644  41                 	db	65	;'A'
  2752  007645  4E                 	db	78	;'N'
  2753  007646  34                 	db	52	;'4'
  2754  007647  56                 	db	86	;'V'
  2755  007648  53                 	db	83	;'S'
  2756  007649  43                 	db	67	;'C'
  2757  00764A  50                 	db	80	;'P'
  2758  00764B  20                 	db	32
  2759  00764C  6D                 	db	109	;'m'
  2760  00764D  6F                 	db	111	;'o'
  2761  00764E  64                 	db	100	;'d'
  2762  00764F  75                 	db	117	;'u'
  2763  007650  6C                 	db	108	;'l'
  2764  007651  65                 	db	101	;'e'
  2765  007652  0D                 	db	13
  2766  007653  0A                 	db	10
  2767  007654  00                 	db	0
  2768  007655                     STR_107:
  2769  007655  2D                 	db	45
  2770  007656  45                 	db	69	;'E'
  2771  007657  52                 	db	82	;'R'
  2772  007658  52                 	db	82	;'R'
  2773  007659  4F                 	db	79	;'O'
  2774  00765A  52                 	db	82	;'R'
  2775  00765B  20                 	db	32
  2776  00765C  2D                 	db	45
  2777  00765D  20                 	db	32
  2778  00765E  6D                 	db	109	;'m'
  2779  00765F  61                 	db	97	;'a'
  2780  007660  73                 	db	115	;'s'
  2781  007661  6B                 	db	107	;'k'
  2782  007662  20                 	db	32
  2783  007663  66                 	db	102	;'f'
  2784  007664  6F                 	db	111	;'o'
  2785  007665  72                 	db	114	;'r'
  2786  007666  20                 	db	32
  2787  007667  63                 	db	99	;'c'
  2788  007668  6C                 	db	108	;'l'
  2789  007669  61                 	db	97	;'a'
  2790  00766A  73                 	db	115	;'s'
  2791  00766B  73                 	db	115	;'s'
  2792  00766C  20                 	db	32
  2793  00766D  69                 	db	105	;'i'
  2794  00766E  73                 	db	115	;'s'
  2795  00766F  20                 	db	32
  2796  007670  6D                 	db	109	;'m'
  2797  007671  69                 	db	105	;'i'
  2798  007672  73                 	db	115	;'s'
  2799  007673  73                 	db	115	;'s'
  2800  007674  69                 	db	105	;'i'
  2801  007675  6E                 	db	110	;'n'
  2802  007676  67                 	db	103	;'g'
  2803  007677  0D                 	db	13
  2804  007678  0A                 	db	10
  2805  007679  00                 	db	0
  2806  00767A                     STR_109:
  2807  00767A  2D                 	db	45
  2808  00767B  45                 	db	69	;'E'
  2809  00767C  52                 	db	82	;'R'
  2810  00767D  52                 	db	82	;'R'
  2811  00767E  4F                 	db	79	;'O'
  2812  00767F  52                 	db	82	;'R'
  2813  007680  20                 	db	32
  2814  007681  2D                 	db	45
  2815  007682  20                 	db	32
  2816  007683  6D                 	db	109	;'m'
  2817  007684  61                 	db	97	;'a'
  2818  007685  73                 	db	115	;'s'
  2819  007686  6B                 	db	107	;'k'
  2820  007687  20                 	db	32
  2821  007688  66                 	db	102	;'f'
  2822  007689  6F                 	db	111	;'o'
  2823  00768A  72                 	db	114	;'r'
  2824  00768B  20                 	db	32
  2825  00768C  74                 	db	116	;'t'
  2826  00768D  79                 	db	121	;'y'
  2827  00768E  70                 	db	112	;'p'
  2828  00768F  65                 	db	101	;'e'
  2829  007690  20                 	db	32
  2830  007691  69                 	db	105	;'i'
  2831  007692  73                 	db	115	;'s'
  2832  007693  20                 	db	32
  2833  007694  6D                 	db	109	;'m'
  2834  007695  69                 	db	105	;'i'
  2835  007696  73                 	db	115	;'s'
  2836  007697  73                 	db	115	;'s'
  2837  007698  69                 	db	105	;'i'
  2838  007699  6E                 	db	110	;'n'
  2839  00769A  67                 	db	103	;'g'
  2840  00769B  0D                 	db	13
  2841  00769C  0A                 	db	10
  2842  00769D  00                 	db	0
  2843  00769E                     STR_3:
  2844  00769E  68                 	db	104	;'h'
  2845  00769F  74                 	db	116	;'t'
  2846  0076A0  74                 	db	116	;'t'
  2847  0076A1  70                 	db	112	;'p'
  2848  0076A2  3A                 	db	58	;':'
  2849  0076A3  2F                 	db	47
  2850  0076A4  2F                 	db	47
  2851  0076A5  77                 	db	119	;'w'
  2852  0076A6  77                 	db	119	;'w'
  2853  0076A7  77                 	db	119	;'w'
  2854  0076A8  2E                 	db	46
  2855  0076A9  70                 	db	112	;'p'
  2856  0076AA  61                 	db	97	;'a'
  2857  0076AB  72                 	db	114	;'r'
  2858  0076AC  61                 	db	97	;'a'
  2859  0076AD  64                 	db	100	;'d'
  2860  0076AE  69                 	db	105	;'i'
  2861  0076AF  73                 	db	115	;'s'
  2862  0076B0  65                 	db	101	;'e'
  2863  0076B1  6F                 	db	111	;'o'
  2864  0076B2  66                 	db	102	;'f'
  2865  0076B3  74                 	db	116	;'t'
  2866  0076B4  68                 	db	104	;'h'
  2867  0076B5  65                 	db	101	;'e'
  2868  0076B6  66                 	db	102	;'f'
  2869  0076B7  72                 	db	114	;'r'
  2870  0076B8  6F                 	db	111	;'o'
  2871  0076B9  67                 	db	103	;'g'
  2872  0076BA  2E                 	db	46
  2873  0076BB  63                 	db	99	;'c'
  2874  0076BC  6F                 	db	111	;'o'
  2875  0076BD  6D                 	db	109	;'m'
  2876  0076BE  0D                 	db	13
  2877  0076BF  0A                 	db	10
  2878  0076C0  00                 	db	0
  2879  0076C1                     STR_79:
  2880  0076C1  2B                 	db	43
  2881  0076C2  4F                 	db	79	;'O'
  2882  0076C3  4B                 	db	75	;'K'
  2883  0076C4  20                 	db	32
  2884  0076C5  2D                 	db	45
  2885  0076C6  20                 	db	32
  2886  0076C7  56                 	db	86	;'V'
  2887  0076C8  61                 	db	97	;'a'
  2888  0076C9  6C                 	db	108	;'l'
  2889  0076CA  75                 	db	117	;'u'
  2890  0076CB  65                 	db	101	;'e'
  2891  0076CC  20                 	db	32
  2892  0076CD  77                 	db	119	;'w'
  2893  0076CE  72                 	db	114	;'r'
  2894  0076CF  69                 	db	105	;'i'
  2895  0076D0  74                 	db	116	;'t'
  2896  0076D1  74                 	db	116	;'t'
  2897  0076D2  65                 	db	101	;'e'
  2898  0076D3  6E                 	db	110	;'n'
  2899  0076D4  20                 	db	32
  2900  0076D5  73                 	db	115	;'s'
  2901  0076D6  75                 	db	117	;'u'
  2902  0076D7  63                 	db	99	;'c'
  2903  0076D8  63                 	db	99	;'c'
  2904  0076D9  65                 	db	101	;'e'
  2905  0076DA  73                 	db	115	;'s'
  2906  0076DB  73                 	db	115	;'s'
  2907  0076DC  66                 	db	102	;'f'
  2908  0076DD  75                 	db	117	;'u'
  2909  0076DE  6C                 	db	108	;'l'
  2910  0076DF  6C                 	db	108	;'l'
  2911  0076E0  79                 	db	121	;'y'
  2912  0076E1  0D                 	db	13
  2913  0076E2  0A                 	db	10
  2914  0076E3  00                 	db	0
  2915  0076E4                     STR_230:
  2916  0076E4  53                 	db	83	;'S'
  2917  0076E5  45                 	db	69	;'E'
  2918  0076E6  54                 	db	84	;'T'
  2919  0076E7  20                 	db	32
  2920  0076E8  2D                 	db	45
  2921  0076E9  20                 	db	32
  2922  0076EA  50                 	db	80	;'P'
  2923  0076EB  65                 	db	101	;'e'
  2924  0076EC  72                 	db	114	;'r'
  2925  0076ED  73                 	db	115	;'s'
  2926  0076EE  69                 	db	105	;'i'
  2927  0076EF  73                 	db	115	;'s'
  2928  0076F0  74                 	db	116	;'t'
  2929  0076F1  65                 	db	101	;'e'
  2930  0076F2  6E                 	db	110	;'n'
  2931  0076F3  74                 	db	116	;'t'
  2932  0076F4  20                 	db	32
  2933  0076F5  66                 	db	102	;'f'
  2934  0076F6  75                 	db	117	;'u'
  2935  0076F7  6E                 	db	110	;'n'
  2936  0076F8  63                 	db	99	;'c'
  2937  0076F9  74                 	db	116	;'t'
  2938  0076FA  69                 	db	105	;'i'
  2939  0076FB  6F                 	db	111	;'o'
  2940  0076FC  6E                 	db	110	;'n'
  2941  0076FD  61                 	db	97	;'a'
  2942  0076FE  6C                 	db	108	;'l'
  2943  0076FF  69                 	db	105	;'i'
  2944  007700  74                 	db	116	;'t'
  2945  007701  79                 	db	121	;'y'
  2946  007702  2E                 	db	46
  2947  007703  0D                 	db	13
  2948  007704  0A                 	db	10
  2949  007705  00                 	db	0
  2950  007706                     STR_64:
  2951  007706  2D                 	db	45
  2952  007707  45                 	db	69	;'E'
  2953  007708  52                 	db	82	;'R'
  2954  007709  52                 	db	82	;'R'
  2955  00770A  4F                 	db	79	;'O'
  2956  00770B  52                 	db	82	;'R'
  2957  00770C  20                 	db	32
  2958  00770D  2D                 	db	45
  2959  00770E  20                 	db	32
  2960  00770F  55                 	db	85	;'U'
  2961  007710  6E                 	db	110	;'n'
  2962  007711  61                 	db	97	;'a'
  2963  007712  62                 	db	98	;'b'
  2964  007713  6C                 	db	108	;'l'
  2965  007714  65                 	db	101	;'e'
  2966  007715  20                 	db	32
  2967  007716  74                 	db	116	;'t'
  2968  007717  6F                 	db	111	;'o'
  2969  007718  20                 	db	32
  2970  007719  72                 	db	114	;'r'
  2971  00771A  65                 	db	101	;'e'
  2972  00771B  61                 	db	97	;'a'
  2973  00771C  64                 	db	100	;'d'
  2974  00771D  20                 	db	32
  2975  00771E  72                 	db	114	;'r'
  2976  00771F  65                 	db	101	;'e'
  2977  007720  67                 	db	103	;'g'
  2978  007721  69                 	db	105	;'i'
  2979  007722  73                 	db	115	;'s'
  2980  007723  74                 	db	116	;'t'
  2981  007724  65                 	db	101	;'e'
  2982  007725  72                 	db	114	;'r'
  2983  007726  20                 	db	32
  2984  007727  00                 	db	0
  2985  007728                     STR_219:
  2986  007728  53                 	db	83	;'S'
  2987  007729  54                 	db	84	;'T'
  2988  00772A  41                 	db	65	;'A'
  2989  00772B  54                 	db	84	;'T'
  2990  00772C  20                 	db	32
  2991  00772D  2D                 	db	45
  2992  00772E  20                 	db	32
  2993  00772F  44                 	db	68	;'D'
  2994  007730  69                 	db	105	;'i'
  2995  007731  73                 	db	115	;'s'
  2996  007732  70                 	db	112	;'p'
  2997  007733  6C                 	db	108	;'l'
  2998  007734  61                 	db	97	;'a'
  2999  007735  79                 	db	121	;'y'
  3000  007736  20                 	db	32
  3001  007737  43                 	db	67	;'C'
  3002  007738  41                 	db	65	;'A'
  3003  007739  4E                 	db	78	;'N'
  3004  00773A  20                 	db	32
  3005  00773B  73                 	db	115	;'s'
  3006  00773C  74                 	db	116	;'t'
  3007  00773D  61                 	db	97	;'a'
  3008  00773E  74                 	db	116	;'t'
  3009  00773F  69                 	db	105	;'i'
  3010  007740  73                 	db	115	;'s'
  3011  007741  74                 	db	116	;'t'
  3012  007742  69                 	db	105	;'i'
  3013  007743  63                 	db	99	;'c'
  3014  007744  73                 	db	115	;'s'
  3015  007745  2E                 	db	46
  3016  007746  0D                 	db	13
  3017  007747  0A                 	db	10
  3018  007748  00                 	db	0
  3019  007749                     STR_37:
  3020  007749  2D                 	db	45
  3021  00774A  45                 	db	69	;'E'
  3022  00774B  52                 	db	82	;'R'
  3023  00774C  52                 	db	82	;'R'
  3024  00774D  4F                 	db	79	;'O'
  3025  00774E  52                 	db	82	;'R'
  3026  00774F  20                 	db	32
  3027  007750  2D                 	db	45
  3028  007751  20                 	db	32
  3029  007752  46                 	db	70	;'F'
  3030  007753  61                 	db	97	;'a'
  3031  007754  69                 	db	105	;'i'
  3032  007755  6C                 	db	108	;'l'
  3033  007756  65                 	db	101	;'e'
  3034  007757  64                 	db	100	;'d'
  3035  007758  20                 	db	32
  3036  007759  74                 	db	116	;'t'
  3037  00775A  6F                 	db	111	;'o'
  3038  00775B  20                 	db	32
  3039  00775C  73                 	db	115	;'s'
  3040  00775D  65                 	db	101	;'e'
  3041  00775E  6E                 	db	110	;'n'
  3042  00775F  64                 	db	100	;'d'
  3043  007760  20                 	db	32
  3044  007761  65                 	db	101	;'e'
  3045  007762  76                 	db	118	;'v'
  3046  007763  65                 	db	101	;'e'
  3047  007764  6E                 	db	110	;'n'
  3048  007765  74                 	db	116	;'t'
  3049  007766  2E                 	db	46
  3050  007767  0D                 	db	13
  3051  007768  0A                 	db	10
  3052  007769  00                 	db	0
  3053  00776A                     STR_130:
  3054  00776A  2D                 	db	45
  3055  00776B  45                 	db	69	;'E'
  3056  00776C  52                 	db	82	;'R'
  3057  00776D  52                 	db	82	;'R'
  3058  00776E  4F                 	db	79	;'O'
  3059  00776F  52                 	db	82	;'R'
  3060  007770  20                 	db	32
  3061  007771  2D                 	db	45
  3062  007772  20                 	db	32
  3063  007773  55                 	db	85	;'U'
  3064  007774  6E                 	db	110	;'n'
  3065  007775  6B                 	db	107	;'k'
  3066  007776  6E                 	db	110	;'n'
  3067  007777  6F                 	db	111	;'o'
  3068  007778  77                 	db	119	;'w'
  3069  007779  6E                 	db	110	;'n'
  3070  00777A  20                 	db	32
  3071  00777B  27                 	db	39
  3072  00777C  53                 	db	83	;'S'
  3073  00777D  45                 	db	69	;'E'
  3074  00777E  54                 	db	84	;'T'
  3075  00777F  27                 	db	39
  3076  007780  20                 	db	32
  3077  007781  63                 	db	99	;'c'
  3078  007782  6F                 	db	111	;'o'
  3079  007783  6D                 	db	109	;'m'
  3080  007784  6D                 	db	109	;'m'
  3081  007785  61                 	db	97	;'a'
  3082  007786  6E                 	db	110	;'n'
  3083  007787  64                 	db	100	;'d'
  3084  007788  0D                 	db	13
  3085  007789  0A                 	db	10
  3086  00778A  00                 	db	0
  3087  00778B                     STR_80:
  3088  00778B  2D                 	db	45
  3089  00778C  45                 	db	69	;'E'
  3090  00778D  52                 	db	82	;'R'
  3091  00778E  52                 	db	82	;'R'
  3092  00778F  4F                 	db	79	;'O'
  3093  007790  52                 	db	82	;'R'
  3094  007791  20                 	db	32
  3095  007792  2D                 	db	45
  3096  007793  20                 	db	32
  3097  007794  46                 	db	70	;'F'
  3098  007795  61                 	db	97	;'a'
  3099  007796  69                 	db	105	;'i'
  3100  007797  6C                 	db	108	;'l'
  3101  007798  65                 	db	101	;'e'
  3102  007799  64                 	db	100	;'d'
  3103  00779A  20                 	db	32
  3104  00779B  74                 	db	116	;'t'
  3105  00779C  6F                 	db	111	;'o'
  3106  00779D  20                 	db	32
  3107  00779E  77                 	db	119	;'w'
  3108  00779F  72                 	db	114	;'r'
  3109  0077A0  69                 	db	105	;'i'
  3110  0077A1  74                 	db	116	;'t'
  3111  0077A2  65                 	db	101	;'e'
  3112  0077A3  20                 	db	32
  3113  0077A4  76                 	db	118	;'v'
  3114  0077A5  61                 	db	97	;'a'
  3115  0077A6  6C                 	db	108	;'l'
  3116  0077A7  75                 	db	117	;'u'
  3117  0077A8  65                 	db	101	;'e'
  3118  0077A9  0D                 	db	13
  3119  0077AA  0A                 	db	10
  3120  0077AB  00                 	db	0
  3121  0077AC                     STR_53:
  3122  0077AC  2D                 	db	45
  3123  0077AD  45                 	db	69	;'E'
  3124  0077AE  52                 	db	82	;'R'
  3125  0077AF  52                 	db	82	;'R'
  3126  0077B0  4F                 	db	79	;'O'
  3127  0077B1  52                 	db	82	;'R'
  3128  0077B2  20                 	db	32
  3129  0077B3  2D                 	db	45
  3130  0077B4  20                 	db	32
  3131  0077B5  4E                 	db	78	;'N'
  3132  0077B6  65                 	db	101	;'e'
  3133  0077B7  65                 	db	101	;'e'
  3134  0077B8  64                 	db	100	;'d'
  3135  0077B9  73                 	db	115	;'s'
  3136  0077BA  20                 	db	32
  3137  0077BB  5B                 	db	91	;'['
  3138  0077BC  70                 	db	112	;'p'
  3139  0077BD  61                 	db	97	;'a'
  3140  0077BE  67                 	db	103	;'g'
  3141  0077BF  65                 	db	101	;'e'
  3142  0077C0  3A                 	db	58	;':'
  3143  0077C1  5D                 	db	93	;']'
  3144  0077C2  72                 	db	114	;'r'
  3145  0077C3  65                 	db	101	;'e'
  3146  0077C4  67                 	db	103	;'g'
  3147  0077C5  69                 	db	105	;'i'
  3148  0077C6  73                 	db	115	;'s'
  3149  0077C7  74                 	db	116	;'t'
  3150  0077C8  65                 	db	101	;'e'
  3151  0077C9  72                 	db	114	;'r'
  3152  0077CA  0D                 	db	13
  3153  0077CB  0A                 	db	10
  3154  0077CC  00                 	db	0
  3155  0077CD                     STR_125:
  3156  0077CD  2B                 	db	43
  3157  0077CE  4F                 	db	79	;'O'
  3158  0077CF  4B                 	db	75	;'K'
  3159  0077D0  20                 	db	32
  3160  0077D1  2D                 	db	45
  3161  0077D2  20                 	db	32
  3162  0077D3  4D                 	db	77	;'M'
  3163  0077D4  6F                 	db	111	;'o'
  3164  0077D5  64                 	db	100	;'d'
  3165  0077D6  65                 	db	101	;'e'
  3166  0077D7  20                 	db	32
  3167  0077D8  69                 	db	105	;'i'
  3168  0077D9  73                 	db	115	;'s'
  3169  0077DA  20                 	db	32
  3170  0077DB  6E                 	db	110	;'n'
  3171  0077DC  6F                 	db	111	;'o'
  3172  0077DD  77                 	db	119	;'w'
  3173  0077DE  20                 	db	32
  3174  0077DF  56                 	db	86	;'V'
  3175  0077E0  53                 	db	83	;'S'
  3176  0077E1  43                 	db	67	;'C'
  3177  0077E2  50                 	db	80	;'P'
  3178  0077E3  20                 	db	32
  3179  0077E4  44                 	db	68	;'D'
  3180  0077E5  72                 	db	114	;'r'
  3181  0077E6  69                 	db	105	;'i'
  3182  0077E7  76                 	db	118	;'v'
  3183  0077E8  65                 	db	101	;'e'
  3184  0077E9  72                 	db	114	;'r'
  3185  0077EA  0D                 	db	13
  3186  0077EB  0A                 	db	10
  3187  0077EC  00                 	db	0
  3188  0077ED                     STR_7:
  3189  0077ED  57                 	db	87	;'W'
  3190  0077EE  69                 	db	105	;'i'
  3191  0077EF  6C                 	db	108	;'l'
  3192  0077F0  6C                 	db	108	;'l'
  3193  0077F1  20                 	db	32
  3194  0077F2  65                 	db	101	;'e'
  3195  0077F3  6E                 	db	110	;'n'
  3196  0077F4  74                 	db	116	;'t'
  3197  0077F5  65                 	db	101	;'e'
  3198  0077F6  72                 	db	114	;'r'
  3199  0077F7  20                 	db	32
  3200  0077F8  62                 	db	98	;'b'
  3201  0077F9  6F                 	db	111	;'o'
  3202  0077FA  6F                 	db	111	;'o'
  3203  0077FB  74                 	db	116	;'t'
  3204  0077FC  6C                 	db	108	;'l'
  3205  0077FD  6F                 	db	111	;'o'
  3206  0077FE  61                 	db	97	;'a'
  3207  0077FF  64                 	db	100	;'d'
  3208  007800  65                 	db	101	;'e'
  3209  007801  72                 	db	114	;'r'
  3210  007802  20                 	db	32
  3211  007803  6E                 	db	110	;'n'
  3212  007804  6F                 	db	111	;'o'
  3213  007805  77                 	db	119	;'w'
  3214  007806  2E                 	db	46
  3215  007807  2E                 	db	46
  3216  007808  2E                 	db	46
  3217  007809  0D                 	db	13
  3218  00780A  0A                 	db	10
  3219  00780B  00                 	db	0
  3220  00780C                     STR_213:
  3221  00780C  43                 	db	67	;'C'
  3222  00780D  4C                 	db	76	;'L'
  3223  00780E  4F                 	db	79	;'O'
  3224  00780F  53                 	db	83	;'S'
  3225  007810  45                 	db	69	;'E'
  3226  007811  20                 	db	32
  3227  007812  2D                 	db	45
  3228  007813  20                 	db	32
  3229  007814  43                 	db	67	;'C'
  3230  007815  6C                 	db	108	;'l'
  3231  007816  6F                 	db	111	;'o'
  3232  007817  73                 	db	115	;'s'
  3233  007818  65                 	db	101	;'e'
  3234  007819  20                 	db	32
  3235  00781A  43                 	db	67	;'C'
  3236  00781B  41                 	db	65	;'A'
  3237  00781C  4E                 	db	78	;'N'
  3238  00781D  20                 	db	32
  3239  00781E  69                 	db	105	;'i'
  3240  00781F  6E                 	db	110	;'n'
  3241  007820  74                 	db	116	;'t'
  3242  007821  65                 	db	101	;'e'
  3243  007822  72                 	db	114	;'r'
  3244  007823  66                 	db	102	;'f'
  3245  007824  61                 	db	97	;'a'
  3246  007825  63                 	db	99	;'c'
  3247  007826  65                 	db	101	;'e'
  3248  007827  2E                 	db	46
  3249  007828  0D                 	db	13
  3250  007829  0A                 	db	10
  3251  00782A  00                 	db	0
  3252  00782B                     STR_5:
  3253  00782B  54                 	db	84	;'T'
  3254  00782C  65                 	db	101	;'e'
  3255  00782D  6D                 	db	109	;'m'
  3256  00782E  70                 	db	112	;'p'
  3257  00782F  6F                 	db	111	;'o'
  3258  007830  72                 	db	114	;'r'
  3259  007831  61                 	db	97	;'a'
  3260  007832  72                 	db	114	;'r'
  3261  007833  79                 	db	121	;'y'
  3262  007834  20                 	db	32
  3263  007835  76                 	db	118	;'v'
  3264  007836  65                 	db	101	;'e'
  3265  007837  72                 	db	114	;'r'
  3266  007838  62                 	db	98	;'b'
  3267  007839  6F                 	db	111	;'o'
  3268  00783A  73                 	db	115	;'s'
  3269  00783B  65                 	db	101	;'e'
  3270  00783C  20                 	db	32
  3271  00783D  6D                 	db	109	;'m'
  3272  00783E  6F                 	db	111	;'o'
  3273  00783F  64                 	db	100	;'d'
  3274  007840  65                 	db	101	;'e'
  3275  007841  20                 	db	32
  3276  007842  73                 	db	115	;'s'
  3277  007843  65                 	db	101	;'e'
  3278  007844  74                 	db	116	;'t'
  3279  007845  0D                 	db	13
  3280  007846  0A                 	db	10
  3281  007847  00                 	db	0
  3282  007848                     STR_123:
  3283  007848  2B                 	db	43
  3284  007849  4F                 	db	79	;'O'
  3285  00784A  4B                 	db	75	;'K'
  3286  00784B  20                 	db	32
  3287  00784C  2D                 	db	45
  3288  00784D  20                 	db	32
  3289  00784E  4D                 	db	77	;'M'
  3290  00784F  6F                 	db	111	;'o'
  3291  007850  64                 	db	100	;'d'
  3292  007851  65                 	db	101	;'e'
  3293  007852  20                 	db	32
  3294  007853  69                 	db	105	;'i'
  3295  007854  73                 	db	115	;'s'
  3296  007855  20                 	db	32
  3297  007856  6E                 	db	110	;'n'
  3298  007857  6F                 	db	111	;'o'
  3299  007858  77                 	db	119	;'w'
  3300  007859  20                 	db	32
  3301  00785A  76                 	db	118	;'v'
  3302  00785B  65                 	db	101	;'e'
  3303  00785C  72                 	db	114	;'r'
  3304  00785D  62                 	db	98	;'b'
  3305  00785E  6F                 	db	111	;'o'
  3306  00785F  73                 	db	115	;'s'
  3307  007860  65                 	db	101	;'e'
  3308  007861  0D                 	db	13
  3309  007862  0A                 	db	10
  3310  007863  00                 	db	0
  3311  007864                     STR_208:
  3312  007864  42                 	db	66	;'B'
  3313  007865  4F                 	db	79	;'O'
  3314  007866  4F                 	db	79	;'O'
  3315  007867  54                 	db	84	;'T'
  3316  007868  20                 	db	32
  3317  007869  2D                 	db	45
  3318  00786A  20                 	db	32
  3319  00786B  45                 	db	69	;'E'
  3320  00786C  6E                 	db	110	;'n'
  3321  00786D  74                 	db	116	;'t'
  3322  00786E  65                 	db	101	;'e'
  3323  00786F  72                 	db	114	;'r'
  3324  007870  20                 	db	32
  3325  007871  62                 	db	98	;'b'
  3326  007872  6F                 	db	111	;'o'
  3327  007873  6F                 	db	111	;'o'
  3328  007874  74                 	db	116	;'t'
  3329  007875  6C                 	db	108	;'l'
  3330  007876  6F                 	db	111	;'o'
  3331  007877  61                 	db	97	;'a'
  3332  007878  64                 	db	100	;'d'
  3333  007879  65                 	db	101	;'e'
  3334  00787A  72                 	db	114	;'r'
  3335  00787B  2E                 	db	46
  3336  00787C  0D                 	db	13
  3337  00787D  0A                 	db	10
  3338  00787E  00                 	db	0
  3339  00787F                     STR_132:
  3340  00787F  2D                 	db	45
  3341  007880  45                 	db	69	;'E'
  3342  007881  52                 	db	82	;'R'
  3343  007882  52                 	db	82	;'R'
  3344  007883  4F                 	db	79	;'O'
  3345  007884  52                 	db	82	;'R'
  3346  007885  20                 	db	32
  3347  007886  2D                 	db	45
  3348  007887  20                 	db	32
  3349  007888  55                 	db	85	;'U'
  3350  007889  6E                 	db	110	;'n'
  3351  00788A  6B                 	db	107	;'k'
  3352  00788B  6E                 	db	110	;'n'
  3353  00788C  6F                 	db	111	;'o'
  3354  00788D  77                 	db	119	;'w'
  3355  00788E  6E                 	db	110	;'n'
  3356  00788F  20                 	db	32
  3357  007890  63                 	db	99	;'c'
  3358  007891  6F                 	db	111	;'o'
  3359  007892  6D                 	db	109	;'m'
  3360  007893  6D                 	db	109	;'m'
  3361  007894  61                 	db	97	;'a'
  3362  007895  6E                 	db	110	;'n'
  3363  007896  64                 	db	100	;'d'
  3364  007897  0D                 	db	13
  3365  007898  0A                 	db	10
  3366  007899  00                 	db	0
  3367  00789A                     STR_239:
  3368  00789A  4E                 	db	78	;'N'
  3369  00789B  6F                 	db	111	;'o'
  3370  00789C  64                 	db	100	;'d'
  3371  00789D  65                 	db	101	;'e'
  3372  00789E  20                 	db	32
  3373  00789F  66                 	db	102	;'f'
  3374  0078A0  6F                 	db	111	;'o'
  3375  0078A1  75                 	db	117	;'u'
  3376  0078A2  6E                 	db	110	;'n'
  3377  0078A3  64                 	db	100	;'d'
  3378  0078A4  20                 	db	32
  3379  0078A5  77                 	db	119	;'w'
  3380  0078A6  69                 	db	105	;'i'
  3381  0078A7  74                 	db	116	;'t'
  3382  0078A8  68                 	db	104	;'h'
  3383  0078A9  20                 	db	32
  3384  0078AA  6E                 	db	110	;'n'
  3385  0078AB  6F                 	db	111	;'o'
  3386  0078AC  64                 	db	100	;'d'
  3387  0078AD  65                 	db	101	;'e'
  3388  0078AE  20                 	db	32
  3389  0078AF  69                 	db	105	;'i'
  3390  0078B0  64                 	db	100	;'d'
  3391  0078B1  20                 	db	32
  3392  0078B2  3D                 	db	61	;'='
  3393  0078B3  20                 	db	32
  3394  0078B4  00                 	db	0
  3395  0078B5                     STR_127:
  3396  0078B5  2B                 	db	43
  3397  0078B6  4F                 	db	79	;'O'
  3398  0078B7  4B                 	db	75	;'K'
  3399  0078B8  20                 	db	32
  3400  0078B9  2D                 	db	45
  3401  0078BA  20                 	db	32
  3402  0078BB  4D                 	db	77	;'M'
  3403  0078BC  6F                 	db	111	;'o'
  3404  0078BD  64                 	db	100	;'d'
  3405  0078BE  65                 	db	101	;'e'
  3406  0078BF  20                 	db	32
  3407  0078C0  69                 	db	105	;'i'
  3408  0078C1  73                 	db	115	;'s'
  3409  0078C2  20                 	db	32
  3410  0078C3  6E                 	db	110	;'n'
  3411  0078C4  6F                 	db	111	;'o'
  3412  0078C5  77                 	db	119	;'w'
  3413  0078C6  20                 	db	32
  3414  0078C7  53                 	db	83	;'S'
  3415  0078C8  4C                 	db	76	;'L'
  3416  0078C9  43                 	db	67	;'C'
  3417  0078CA  41                 	db	65	;'A'
  3418  0078CB  4E                 	db	78	;'N'
  3419  0078CC  0D                 	db	13
  3420  0078CD  0A                 	db	10
  3421  0078CE  00                 	db	0
  3422  0078CF                     STR_25:
  3423  0078CF  2B                 	db	43
  3424  0078D0  4F                 	db	79	;'O'
  3425  0078D1  4B                 	db	75	;'K'
  3426  0078D2  20                 	db	32
  3427  0078D3  2D                 	db	45
  3428  0078D4  20                 	db	32
  3429  0078D5  4C                 	db	76	;'L'
  3430  0078D6  69                 	db	105	;'i'
  3431  0078D7  73                 	db	115	;'s'
  3432  0078D8  74                 	db	116	;'t'
  3433  0078D9  65                 	db	101	;'e'
  3434  0078DA  6E                 	db	110	;'n'
  3435  0078DB  20                 	db	32
  3436  0078DC  6F                 	db	111	;'o'
  3437  0078DD  6E                 	db	110	;'n'
  3438  0078DE  6C                 	db	108	;'l'
  3439  0078DF  79                 	db	121	;'y'
  3440  0078E0  20                 	db	32
  3441  0078E1  6D                 	db	109	;'m'
  3442  0078E2  6F                 	db	111	;'o'
  3443  0078E3  64                 	db	100	;'d'
  3444  0078E4  65                 	db	101	;'e'
  3445  0078E5  0D                 	db	13
  3446  0078E6  0A                 	db	10
  3447  0078E7  00                 	db	0
  3448  0078E8                     STR_192:
  3449  0078E8  54                 	db	84	;'T'
  3450  0078E9  72                 	db	114	;'r'
  3451  0078EA  61                 	db	97	;'a'
  3452  0078EB  6E                 	db	110	;'n'
  3453  0078EC  73                 	db	115	;'s'
  3454  0078ED  6D                 	db	109	;'m'
  3455  0078EE  69                 	db	105	;'i'
  3456  0078EF  74                 	db	116	;'t'
  3457  0078F0  20                 	db	32
  3458  0078F1  45                 	db	69	;'E'
  3459  0078F2  72                 	db	114	;'r'
  3460  0078F3  72                 	db	114	;'r'
  3461  0078F4  6F                 	db	111	;'o'
  3462  0078F5  72                 	db	114	;'r'
  3463  0078F6  20                 	db	32
  3464  0078F7  43                 	db	67	;'C'
  3465  0078F8  6F                 	db	111	;'o'
  3466  0078F9  75                 	db	117	;'u'
  3467  0078FA  6E                 	db	110	;'n'
  3468  0078FB  74                 	db	116	;'t'
  3469  0078FC  65                 	db	101	;'e'
  3470  0078FD  72                 	db	114	;'r'
  3471  0078FE  3A                 	db	58	;':'
  3472  0078FF  20                 	db	32
  3473  007900  00                 	db	0
  3474  007901                     STR_216:
  3475  007901  54                 	db	84	;'T'
  3476  007902  58                 	db	88	;'X'
  3477  007903  20                 	db	32
  3478  007904  2D                 	db	45
  3479  007905  20                 	db	32
  3480  007906  53                 	db	83	;'S'
  3481  007907  65                 	db	101	;'e'
  3482  007908  6E                 	db	110	;'n'
  3483  007909  64                 	db	100	;'d'
  3484  00790A  20                 	db	32
  3485  00790B  43                 	db	67	;'C'
  3486  00790C  41                 	db	65	;'A'
  3487  00790D  4E                 	db	78	;'N'
  3488  00790E  20                 	db	32
  3489  00790F  66                 	db	102	;'f'
  3490  007910  72                 	db	114	;'r'
  3491  007911  61                 	db	97	;'a'
  3492  007912  6D                 	db	109	;'m'
  3493  007913  65                 	db	101	;'e'
  3494  007914  20                 	db	32
  3495  007915  2E                 	db	46
  3496  007916  0D                 	db	13
  3497  007917  0A                 	db	10
  3498  007918  00                 	db	0
  3499  007919                     STR_226:
  3500  007919  46                 	db	70	;'F'
  3501  00791A  49                 	db	73	;'I'
  3502  00791B  4C                 	db	76	;'L'
  3503  00791C  54                 	db	84	;'T'
  3504  00791D  45                 	db	69	;'E'
  3505  00791E  52                 	db	82	;'R'
  3506  00791F  20                 	db	32
  3507  007920  2D                 	db	45
  3508  007921  20                 	db	32
  3509  007922  53                 	db	83	;'S'
  3510  007923  65                 	db	101	;'e'
  3511  007924  74                 	db	116	;'t'
  3512  007925  20                 	db	32
  3513  007926  66                 	db	102	;'f'
  3514  007927  69                 	db	105	;'i'
  3515  007928  6C                 	db	108	;'l'
  3516  007929  74                 	db	116	;'t'
  3517  00792A  65                 	db	101	;'e'
  3518  00792B  72                 	db	114	;'r'
  3519  00792C  20                 	db	32
  3520  00792D  2E                 	db	46
  3521  00792E  0D                 	db	13
  3522  00792F  0A                 	db	10
  3523  007930  00                 	db	0
  3524  007931                     STR_51:
  3525  007931  2D                 	db	45
  3526  007932  45                 	db	69	;'E'
  3527  007933  52                 	db	82	;'R'
  3528  007934  52                 	db	82	;'R'
  3529  007935  4F                 	db	79	;'O'
  3530  007936  52                 	db	82	;'R'
  3531  007937  20                 	db	32
  3532  007938  2D                 	db	45
  3533  007939  20                 	db	32
  3534  00793A  4E                 	db	78	;'N'
  3535  00793B  65                 	db	101	;'e'
  3536  00793C  65                 	db	101	;'e'
  3537  00793D  64                 	db	100	;'d'
  3538  00793E  73                 	db	115	;'s'
  3539  00793F  20                 	db	32
  3540  007940  6E                 	db	110	;'n'
  3541  007941  6F                 	db	111	;'o'
  3542  007942  64                 	db	100	;'d'
  3543  007943  65                 	db	101	;'e'
  3544  007944  69                 	db	105	;'i'
  3545  007945  64                 	db	100	;'d'
  3546  007946  0D                 	db	13
  3547  007947  0A                 	db	10
  3548  007948  00                 	db	0
  3549  007949                     STR_28:
  3550  007949  2D                 	db	45
  3551  00794A  45                 	db	69	;'E'
  3552  00794B  52                 	db	82	;'R'
  3553  00794C  52                 	db	82	;'R'
  3554  00794D  4F                 	db	79	;'O'
  3555  00794E  52                 	db	82	;'R'
  3556  00794F  20                 	db	32
  3557  007950  2D                 	db	45
  3558  007951  20                 	db	32
  3559  007952  55                 	db	85	;'U'
  3560  007953  6E                 	db	110	;'n'
  3561  007954  6B                 	db	107	;'k'
  3562  007955  6E                 	db	110	;'n'
  3563  007956  6F                 	db	111	;'o'
  3564  007957  77                 	db	119	;'w'
  3565  007958  6E                 	db	110	;'n'
  3566  007959  20                 	db	32
  3567  00795A  6D                 	db	109	;'m'
  3568  00795B  6F                 	db	111	;'o'
  3569  00795C  64                 	db	100	;'d'
  3570  00795D  65                 	db	101	;'e'
  3571  00795E  0D                 	db	13
  3572  00795F  0A                 	db	10
  3573  007960  00                 	db	0
  3574  007961                     STR_78:
  3575  007961  2D                 	db	45
  3576  007962  45                 	db	69	;'E'
  3577  007963  52                 	db	82	;'R'
  3578  007964  52                 	db	82	;'R'
  3579  007965  4F                 	db	79	;'O'
  3580  007966  52                 	db	82	;'R'
  3581  007967  20                 	db	32
  3582  007968  2D                 	db	45
  3583  007969  20                 	db	32
  3584  00796A  4E                 	db	78	;'N'
  3585  00796B  65                 	db	101	;'e'
  3586  00796C  65                 	db	101	;'e'
  3587  00796D  64                 	db	100	;'d'
  3588  00796E  20                 	db	32
  3589  00796F  61                 	db	97	;'a'
  3590  007970  20                 	db	32
  3591  007971  76                 	db	118	;'v'
  3592  007972  61                 	db	97	;'a'
  3593  007973  6C                 	db	108	;'l'
  3594  007974  75                 	db	117	;'u'
  3595  007975  65                 	db	101	;'e'
  3596  007976  0D                 	db	13
  3597  007977  0A                 	db	10
  3598  007978  00                 	db	0
  3599  007979                     STR_199:
  3600  007979  52                 	db	82	;'R'
  3601  00797A  65                 	db	101	;'e'
  3602  00797B  63                 	db	99	;'c'
  3603  00797C  65                 	db	101	;'e'
  3604  00797D  69                 	db	105	;'i'
  3605  00797E  76                 	db	118	;'v'
  3606  00797F  65                 	db	101	;'e'
  3607  007980  20                 	db	32
  3608  007981  45                 	db	69	;'E'
  3609  007982  72                 	db	114	;'r'
  3610  007983  72                 	db	114	;'r'
  3611  007984  6F                 	db	111	;'o'
  3612  007985  72                 	db	114	;'r'
  3613  007986  20                 	db	32
  3614  007987  43                 	db	67	;'C'
  3615  007988  6F                 	db	111	;'o'
  3616  007989  75                 	db	117	;'u'
  3617  00798A  6E                 	db	110	;'n'
  3618  00798B  74                 	db	116	;'t'
  3619  00798C  65                 	db	101	;'e'
  3620  00798D  72                 	db	114	;'r'
  3621  00798E  3A                 	db	58	;':'
  3622  00798F  20                 	db	32
  3623  007990  00                 	db	0
  3624  007991                     STR_184:
  3625  007991  55                 	db	85	;'U'
  3626  007992  41                 	db	65	;'A'
  3627  007993  52                 	db	82	;'R'
  3628  007994  54                 	db	84	;'T'
  3629  007995  20                 	db	32
  3630  007996  52                 	db	82	;'R'
  3631  007997  65                 	db	101	;'e'
  3632  007998  63                 	db	99	;'c'
  3633  007999  65                 	db	101	;'e'
  3634  00799A  69                 	db	105	;'i'
  3635  00799B  76                 	db	118	;'v'
  3636  00799C  65                 	db	101	;'e'
  3637  00799D  20                 	db	32
  3638  00799E  6F                 	db	111	;'o'
  3639  00799F  76                 	db	118	;'v'
  3640  0079A0  65                 	db	101	;'e'
  3641  0079A1  72                 	db	114	;'r'
  3642  0079A2  72                 	db	114	;'r'
  3643  0079A3  75                 	db	117	;'u'
  3644  0079A4  6E                 	db	110	;'n'
  3645  0079A5  73                 	db	115	;'s'
  3646  0079A6  3A                 	db	58	;':'
  3647  0079A7  20                 	db	32
  3648  0079A8  00                 	db	0
  3649  0079A9                     STR_180:
  3650  0079A9  43                 	db	67	;'C'
  3651  0079AA  41                 	db	65	;'A'
  3652  0079AB  4E                 	db	78	;'N'
  3653  0079AC  20                 	db	32
  3654  0079AD  54                 	db	84	;'T'
  3655  0079AE  72                 	db	114	;'r'
  3656  0079AF  61                 	db	97	;'a'
  3657  0079B0  6E                 	db	110	;'n'
  3658  0079B1  73                 	db	115	;'s'
  3659  0079B2  6D                 	db	109	;'m'
  3660  0079B3  69                 	db	105	;'i'
  3661  0079B4  74                 	db	116	;'t'
  3662  0079B5  20                 	db	32
  3663  0079B6  6F                 	db	111	;'o'
  3664  0079B7  76                 	db	118	;'v'
  3665  0079B8  65                 	db	101	;'e'
  3666  0079B9  72                 	db	114	;'r'
  3667  0079BA  72                 	db	114	;'r'
  3668  0079BB  75                 	db	117	;'u'
  3669  0079BC  6E                 	db	110	;'n'
  3670  0079BD  73                 	db	115	;'s'
  3671  0079BE  3A                 	db	58	;':'
  3672  0079BF  20                 	db	32
  3673  0079C0  00                 	db	0
  3674  0079C1                     STR_218:
  3675  0079C1  52                 	db	82	;'R'
  3676  0079C2  58                 	db	88	;'X'
  3677  0079C3  20                 	db	32
  3678  0079C4  2D                 	db	45
  3679  0079C5  20                 	db	32
  3680  0079C6  52                 	db	82	;'R'
  3681  0079C7  65                 	db	101	;'e'
  3682  0079C8  61                 	db	97	;'a'
  3683  0079C9  64                 	db	100	;'d'
  3684  0079CA  20                 	db	32
  3685  0079CB  43                 	db	67	;'C'
  3686  0079CC  41                 	db	65	;'A'
  3687  0079CD  4E                 	db	78	;'N'
  3688  0079CE  20                 	db	32
  3689  0079CF  66                 	db	102	;'f'
  3690  0079D0  72                 	db	114	;'r'
  3691  0079D1  61                 	db	97	;'a'
  3692  0079D2  6D                 	db	109	;'m'
  3693  0079D3  65                 	db	101	;'e'
  3694  0079D4  2E                 	db	46
  3695  0079D5  0D                 	db	13
  3696  0079D6  0A                 	db	10
  3697  0079D7  00                 	db	0
  3698  0079D8                     STR_176:
  3699  0079D8  43                 	db	67	;'C'
  3700  0079D9  41                 	db	65	;'A'
  3701  0079DA  4E                 	db	78	;'N'
  3702  0079DB  20                 	db	32
  3703  0079DC  52                 	db	82	;'R'
  3704  0079DD  65                 	db	101	;'e'
  3705  0079DE  63                 	db	99	;'c'
  3706  0079DF  65                 	db	101	;'e'
  3707  0079E0  69                 	db	105	;'i'
  3708  0079E1  76                 	db	118	;'v'
  3709  0079E2  65                 	db	101	;'e'
  3710  0079E3  20                 	db	32
  3711  0079E4  6F                 	db	111	;'o'
  3712  0079E5  76                 	db	118	;'v'
  3713  0079E6  65                 	db	101	;'e'
  3714  0079E7  72                 	db	114	;'r'
  3715  0079E8  72                 	db	114	;'r'
  3716  0079E9  75                 	db	117	;'u'
  3717  0079EA  6E                 	db	110	;'n'
  3718  0079EB  73                 	db	115	;'s'
  3719  0079EC  3A                 	db	58	;':'
  3720  0079ED  20                 	db	32
  3721  0079EE  00                 	db	0
  3722  0079EF                     STR_261:
  3723  0079EF  55                 	db	85	;'U'
  3724  0079F0  6E                 	db	110	;'n'
  3725  0079F1  6B                 	db	107	;'k'
  3726  0079F2  6E                 	db	110	;'n'
  3727  0079F3  6F                 	db	111	;'o'
  3728  0079F4  77                 	db	119	;'w'
  3729  0079F5  6E                 	db	110	;'n'
  3730  0079F6  20                 	db	32
  3731  0079F7  28                 	db	40
  3732  0079F8  56                 	db	86	;'V'
  3733  0079F9  65                 	db	101	;'e'
  3734  0079FA  72                 	db	114	;'r'
  3735  0079FB  62                 	db	98	;'b'
  3736  0079FC  6F                 	db	111	;'o'
  3737  0079FD  73                 	db	115	;'s'
  3738  0079FE  65                 	db	101	;'e'
  3739  0079FF  20                 	db	32
  3740  007A00  75                 	db	117	;'u'
  3741  007A01  73                 	db	115	;'s'
  3742  007A02  65                 	db	101	;'e'
  3743  007A03  64                 	db	100	;'d'
  3744  007A04  29                 	db	41
  3745  007A05  00                 	db	0
  3746  007A06                     STR_24:
  3747  007A06  2B                 	db	43
  3748  007A07  4F                 	db	79	;'O'
  3749  007A08  4B                 	db	75	;'K'
  3750  007A09  20                 	db	32
  3751  007A0A  2D                 	db	45
  3752  007A0B  20                 	db	32
  3753  007A0C  4C                 	db	76	;'L'
  3754  007A0D  6F                 	db	111	;'o'
  3755  007A0E  6F                 	db	111	;'o'
  3756  007A0F  70                 	db	112	;'p'
  3757  007A10  62                 	db	98	;'b'
  3758  007A11  61                 	db	97	;'a'
  3759  007A12  63                 	db	99	;'c'
  3760  007A13  6B                 	db	107	;'k'
  3761  007A14  20                 	db	32
  3762  007A15  6D                 	db	109	;'m'
  3763  007A16  6F                 	db	111	;'o'
  3764  007A17  64                 	db	100	;'d'
  3765  007A18  65                 	db	101	;'e'
  3766  007A19  0D                 	db	13
  3767  007A1A  0A                 	db	10
  3768  007A1B  00                 	db	0
  3769  007A1C                     STR_168:
  3770  007A1C  52                 	db	82	;'R'
  3771  007A1D  65                 	db	101	;'e'
  3772  007A1E  63                 	db	99	;'c'
  3773  007A1F  65                 	db	101	;'e'
  3774  007A20  69                 	db	105	;'i'
  3775  007A21  76                 	db	118	;'v'
  3776  007A22  65                 	db	101	;'e'
  3777  007A23  64                 	db	100	;'d'
  3778  007A24  20                 	db	32
  3779  007A25  43                 	db	67	;'C'
  3780  007A26  41                 	db	65	;'A'
  3781  007A27  4E                 	db	78	;'N'
  3782  007A28  20                 	db	32
  3783  007A29  66                 	db	102	;'f'
  3784  007A2A  72                 	db	114	;'r'
  3785  007A2B  61                 	db	97	;'a'
  3786  007A2C  6D                 	db	109	;'m'
  3787  007A2D  65                 	db	101	;'e'
  3788  007A2E  73                 	db	115	;'s'
  3789  007A2F  3A                 	db	58	;':'
  3790  007A30  20                 	db	32
  3791  007A31  00                 	db	0
  3792  007A32                     STR_172:
  3793  007A32  52                 	db	82	;'R'
  3794  007A33  65                 	db	101	;'e'
  3795  007A34  63                 	db	99	;'c'
  3796  007A35  65                 	db	101	;'e'
  3797  007A36  69                 	db	105	;'i'
  3798  007A37  76                 	db	118	;'v'
  3799  007A38  65                 	db	101	;'e'
  3800  007A39  64                 	db	100	;'d'
  3801  007A3A  20                 	db	32
  3802  007A3B  43                 	db	67	;'C'
  3803  007A3C  41                 	db	65	;'A'
  3804  007A3D  4E                 	db	78	;'N'
  3805  007A3E  20                 	db	32
  3806  007A3F  62                 	db	98	;'b'
  3807  007A40  79                 	db	121	;'y'
  3808  007A41  74                 	db	116	;'t'
  3809  007A42  65                 	db	101	;'e'
  3810  007A43  73                 	db	115	;'s'
  3811  007A44  3A                 	db	58	;':'
  3812  007A45  20                 	db	32
  3813  007A46  00                 	db	0
  3814  007A47                     STR_228:
  3815  007A47  4D                 	db	77	;'M'
  3816  007A48  41                 	db	65	;'A'
  3817  007A49  53                 	db	83	;'S'
  3818  007A4A  4B                 	db	75	;'K'
  3819  007A4B  20                 	db	32
  3820  007A4C  2D                 	db	45
  3821  007A4D  20                 	db	32
  3822  007A4E  53                 	db	83	;'S'
  3823  007A4F  65                 	db	101	;'e'
  3824  007A50  74                 	db	116	;'t'
  3825  007A51  20                 	db	32
  3826  007A52  6D                 	db	109	;'m'
  3827  007A53  61                 	db	97	;'a'
  3828  007A54  73                 	db	115	;'s'
  3829  007A55  6B                 	db	107	;'k'
  3830  007A56  20                 	db	32
  3831  007A57  2E                 	db	46
  3832  007A58  0D                 	db	13
  3833  007A59  0A                 	db	10
  3834  007A5A  00                 	db	0
  3835  007A5B                     STR_133:
  3836  007A5B  4A                 	db	74	;'J'
  3837  007A5C  46                 	db	70	;'F'
  3838  007A5D  72                 	db	114	;'r'
  3839  007A5E  61                 	db	97	;'a'
  3840  007A5F  6E                 	db	110	;'n'
  3841  007A60  6B                 	db	107	;'k'
  3842  007A61  66                 	db	102	;'f'
  3843  007A62  75                 	db	117	;'u'
  3844  007A63  72                 	db	114	;'r'
  3845  007A64  74                 	db	116	;'t'
  3846  007A65  20                 	db	32
  3847  007A66  52                 	db	82	;'R'
  3848  007A67  53                 	db	83	;'S'
  3849  007A68  2D                 	db	45
  3850  007A69  32                 	db	50	;'2'
  3851  007A6A  33                 	db	51	;'3'
  3852  007A6B  32                 	db	50	;'2'
  3853  007A6C  0D                 	db	13
  3854  007A6D  0A                 	db	10
  3855  007A6E  00                 	db	0
  3856  007A6F                     STR_26:
  3857  007A6F  2B                 	db	43
  3858  007A70  4F                 	db	79	;'O'
  3859  007A71  4B                 	db	75	;'K'
  3860  007A72  20                 	db	32
  3861  007A73  2D                 	db	45
  3862  007A74  20                 	db	32
  3863  007A75  43                 	db	67	;'C'
  3864  007A76  6C                 	db	108	;'l'
  3865  007A77  6F                 	db	111	;'o'
  3866  007A78  73                 	db	115	;'s'
  3867  007A79  65                 	db	101	;'e'
  3868  007A7A  64                 	db	100	;'d'
  3869  007A7B  20                 	db	32
  3870  007A7C  6D                 	db	109	;'m'
  3871  007A7D  6F                 	db	111	;'o'
  3872  007A7E  64                 	db	100	;'d'
  3873  007A7F  65                 	db	101	;'e'
  3874  007A80  0D                 	db	13
  3875  007A81  0A                 	db	10
  3876  007A82  00                 	db	0
  3877  007A83                     STR_21:
  3878  007A83  2B                 	db	43
  3879  007A84  4F                 	db	79	;'O'
  3880  007A85  4B                 	db	75	;'K'
  3881  007A86  20                 	db	32
  3882  007A87  2D                 	db	45
  3883  007A88  20                 	db	32
  3884  007A89  4E                 	db	78	;'N'
  3885  007A8A  6F                 	db	111	;'o'
  3886  007A8B  72                 	db	114	;'r'
  3887  007A8C  6D                 	db	109	;'m'
  3888  007A8D  61                 	db	97	;'a'
  3889  007A8E  6C                 	db	108	;'l'
  3890  007A8F  20                 	db	32
  3891  007A90  6D                 	db	109	;'m'
  3892  007A91  6F                 	db	111	;'o'
  3893  007A92  64                 	db	100	;'d'
  3894  007A93  65                 	db	101	;'e'
  3895  007A94  0D                 	db	13
  3896  007A95  0A                 	db	10
  3897  007A96  00                 	db	0
  3898  007A97                     STR_22:
  3899  007A97  2B                 	db	43
  3900  007A98  4F                 	db	79	;'O'
  3901  007A99  4B                 	db	75	;'K'
  3902  007A9A  20                 	db	32
  3903  007A9B  2D                 	db	45
  3904  007A9C  20                 	db	32
  3905  007A9D  53                 	db	83	;'S'
  3906  007A9E  69                 	db	105	;'i'
  3907  007A9F  6C                 	db	108	;'l'
  3908  007AA0  65                 	db	101	;'e'
  3909  007AA1  6E                 	db	110	;'n'
  3910  007AA2  74                 	db	116	;'t'
  3911  007AA3  20                 	db	32
  3912  007AA4  6D                 	db	109	;'m'
  3913  007AA5  6F                 	db	111	;'o'
  3914  007AA6  64                 	db	100	;'d'
  3915  007AA7  65                 	db	101	;'e'
  3916  007AA8  0D                 	db	13
  3917  007AA9  0A                 	db	10
  3918  007AAA  00                 	db	0
  3919  007AAB                     STR_82:
  3920  007AAB  49                 	db	73	;'I'
  3921  007AAC  6E                 	db	110	;'n'
  3922  007AAD  66                 	db	102	;'f'
  3923  007AAE  6F                 	db	111	;'o'
  3924  007AAF  20                 	db	32
  3925  007AB0  66                 	db	102	;'f'
  3926  007AB1  6F                 	db	111	;'o'
  3927  007AB2  72                 	db	114	;'r'
  3928  007AB3  20                 	db	32
  3929  007AB4  6E                 	db	110	;'n'
  3930  007AB5  6F                 	db	111	;'o'
  3931  007AB6  64                 	db	100	;'d'
  3932  007AB7  65                 	db	101	;'e'
  3933  007AB8  20                 	db	32
  3934  007AB9  69                 	db	105	;'i'
  3935  007ABA  64                 	db	100	;'d'
  3936  007ABB  20                 	db	32
  3937  007ABC  3D                 	db	61	;'='
  3938  007ABD  20                 	db	32
  3939  007ABE  00                 	db	0
  3940  007ABF                     STR_250:
  3941  007ABF  46                 	db	70	;'F'
  3942  007AC0  69                 	db	105	;'i'
  3943  007AC1  72                 	db	114	;'r'
  3944  007AC2  6D                 	db	109	;'m'
  3945  007AC3  77                 	db	119	;'w'
  3946  007AC4  61                 	db	97	;'a'
  3947  007AC5  72                 	db	114	;'r'
  3948  007AC6  65                 	db	101	;'e'
  3949  007AC7  20                 	db	32
  3950  007AC8  76                 	db	118	;'v'
  3951  007AC9  65                 	db	101	;'e'
  3952  007ACA  72                 	db	114	;'r'
  3953  007ACB  73                 	db	115	;'s'
  3954  007ACC  69                 	db	105	;'i'
  3955  007ACD  6F                 	db	111	;'o'
  3956  007ACE  6E                 	db	110	;'n'
  3957  007ACF  20                 	db	32
  3958  007AD0  3D                 	db	61	;'='
  3959  007AD1  20                 	db	32
  3960  007AD2  00                 	db	0
  3961  007AD3                     STR_23:
  3962  007AD3  2B                 	db	43
  3963  007AD4  4F                 	db	79	;'O'
  3964  007AD5  4B                 	db	75	;'K'
  3965  007AD6  20                 	db	32
  3966  007AD7  2D                 	db	45
  3967  007AD8  20                 	db	32
  3968  007AD9  53                 	db	83	;'S'
  3969  007ADA  6C                 	db	108	;'l'
  3970  007ADB  65                 	db	101	;'e'
  3971  007ADC  65                 	db	101	;'e'
  3972  007ADD  70                 	db	112	;'p'
  3973  007ADE  20                 	db	32
  3974  007ADF  6D                 	db	109	;'m'
  3975  007AE0  6F                 	db	111	;'o'
  3976  007AE1  64                 	db	100	;'d'
  3977  007AE2  65                 	db	101	;'e'
  3978  007AE3  0D                 	db	13
  3979  007AE4  0A                 	db	10
  3980  007AE5  00                 	db	0
  3981  007AE6                     STR_27:
  3982  007AE6  2B                 	db	43
  3983  007AE7  4F                 	db	79	;'O'
  3984  007AE8  4B                 	db	75	;'K'
  3985  007AE9  20                 	db	32
  3986  007AEA  2D                 	db	45
  3987  007AEB  20                 	db	32
  3988  007AEC  42                 	db	66	;'B'
  3989  007AED  69                 	db	105	;'i'
  3990  007AEE  74                 	db	116	;'t'
  3991  007AEF  73                 	db	115	;'s'
  3992  007AF0  20                 	db	32
  3993  007AF1  6D                 	db	109	;'m'
  3994  007AF2  6F                 	db	111	;'o'
  3995  007AF3  64                 	db	100	;'d'
  3996  007AF4  65                 	db	101	;'e'
  3997  007AF5  0D                 	db	13
  3998  007AF6  0A                 	db	10
  3999  007AF7  00                 	db	0
  4000  007AF8                     STR_40:
  4001  007AF8  2B                 	db	43
  4002  007AF9  4F                 	db	79	;'O'
  4003  007AFA  4B                 	db	75	;'K'
  4004  007AFB  20                 	db	32
  4005  007AFC  2D                 	db	45
  4006  007AFD  20                 	db	32
  4007  007AFE  6E                 	db	110	;'n'
  4008  007AFF  6F                 	db	111	;'o'
  4009  007B00  20                 	db	32
  4010  007B01  65                 	db	101	;'e'
  4011  007B02  76                 	db	118	;'v'
  4012  007B03  65                 	db	101	;'e'
  4013  007B04  6E                 	db	110	;'n'
  4014  007B05  74                 	db	116	;'t'
  4015  007B06  73                 	db	115	;'s'
  4016  007B07  0D                 	db	13
  4017  007B08  0A                 	db	10
  4018  007B09  00                 	db	0
  4019  007B0A                     STR_160:
  4020  007B0A  53                 	db	83	;'S'
  4021  007B0B  65                 	db	101	;'e'
  4022  007B0C  6E                 	db	110	;'n'
  4023  007B0D  74                 	db	116	;'t'
  4024  007B0E  20                 	db	32
  4025  007B0F  43                 	db	67	;'C'
  4026  007B10  41                 	db	65	;'A'
  4027  007B11  4E                 	db	78	;'N'
  4028  007B12  20                 	db	32
  4029  007B13  66                 	db	102	;'f'
  4030  007B14  72                 	db	114	;'r'
  4031  007B15  61                 	db	97	;'a'
  4032  007B16  6D                 	db	109	;'m'
  4033  007B17  65                 	db	101	;'e'
  4034  007B18  73                 	db	115	;'s'
  4035  007B19  3A                 	db	58	;':'
  4036  007B1A  20                 	db	32
  4037  007B1B  00                 	db	0
  4038  007B1C                     STR_263:
  4039  007B1C  30                 	db	48	;'0'
  4040  007B1D  31                 	db	49	;'1'
  4041  007B1E  32                 	db	50	;'2'
  4042  007B1F  33                 	db	51	;'3'
  4043  007B20  34                 	db	52	;'4'
  4044  007B21  35                 	db	53	;'5'
  4045  007B22  36                 	db	54	;'6'
  4046  007B23  37                 	db	55	;'7'
  4047  007B24  38                 	db	56	;'8'
  4048  007B25  39                 	db	57	;'9'
  4049  007B26  41                 	db	65	;'A'
  4050  007B27  42                 	db	66	;'B'
  4051  007B28  43                 	db	67	;'C'
  4052  007B29  44                 	db	68	;'D'
  4053  007B2A  45                 	db	69	;'E'
  4054  007B2B  46                 	db	70	;'F'
  4055  007B2C  00                 	db	0
  4056  007B2D                     STR_264:
  4057  007B2D  30                 	db	48	;'0'
  4058  007B2E  31                 	db	49	;'1'
  4059  007B2F  32                 	db	50	;'2'
  4060  007B30  33                 	db	51	;'3'
  4061  007B31  34                 	db	52	;'4'
  4062  007B32  35                 	db	53	;'5'
  4063  007B33  36                 	db	54	;'6'
  4064  007B34  37                 	db	55	;'7'
  4065  007B35  38                 	db	56	;'8'
  4066  007B36  39                 	db	57	;'9'
  4067  007B37  61                 	db	97	;'a'
  4068  007B38  62                 	db	98	;'b'
  4069  007B39  63                 	db	99	;'c'
  4070  007B3A  64                 	db	100	;'d'
  4071  007B3B  65                 	db	101	;'e'
  4072  007B3C  66                 	db	102	;'f'
  4073  007B3D  00                 	db	0
  4074  007B3E                     STR_164:
  4075  007B3E  53                 	db	83	;'S'
  4076  007B3F  65                 	db	101	;'e'
  4077  007B40  6E                 	db	110	;'n'
  4078  007B41  74                 	db	116	;'t'
  4079  007B42  20                 	db	32
  4080  007B43  43                 	db	67	;'C'
  4081  007B44  41                 	db	65	;'A'
  4082  007B45  4E                 	db	78	;'N'
  4083  007B46  20                 	db	32
  4084  007B47  62                 	db	98	;'b'
  4085  007B48  79                 	db	121	;'y'
  4086  007B49  74                 	db	116	;'t'
  4087  007B4A  65                 	db	101	;'e'
  4088  007B4B  73                 	db	115	;'s'
  4089  007B4C  3A                 	db	58	;':'
  4090  007B4D  20                 	db	32
  4091  007B4E  00                 	db	0
  4092  007B4F                     STR_242:
  4093  007B4F  20                 	db	32
  4094  007B50  6E                 	db	110	;'n'
  4095  007B51  6F                 	db	111	;'o'
  4096  007B52  64                 	db	100	;'d'
  4097  007B53  65                 	db	101	;'e'
  4098  007B54  73                 	db	115	;'s'
  4099  007B55  20                 	db	32
  4100  007B56  66                 	db	102	;'f'
  4101  007B57  6F                 	db	111	;'o'
  4102  007B58  75                 	db	117	;'u'
  4103  007B59  6E                 	db	110	;'n'
  4104  007B5A  64                 	db	100	;'d'
  4105  007B5B  0D                 	db	13
  4106  007B5C  0A                 	db	10
  4107  007B5D  00                 	db	0
  4108  007B5E                     STR_55:
  4109  007B5E  56                 	db	86	;'V'
  4110  007B5F  61                 	db	97	;'a'
  4111  007B60  6C                 	db	108	;'l'
  4112  007B61  75                 	db	117	;'u'
  4113  007B62  65                 	db	101	;'e'
  4114  007B63  20                 	db	32
  4115  007B64  66                 	db	102	;'f'
  4116  007B65  6F                 	db	111	;'o'
  4117  007B66  72                 	db	114	;'r'
  4118  007B67  20                 	db	32
  4119  007B68  72                 	db	114	;'r'
  4120  007B69  65                 	db	101	;'e'
  4121  007B6A  67                 	db	103	;'g'
  4122  007B6B  20                 	db	32
  4123  007B6C  00                 	db	0
  4124  007B6D                     STR_248:
  4125  007B6D  4D                 	db	77	;'M'
  4126  007B6E  44                 	db	68	;'D'
  4127  007B6F  46                 	db	70	;'F'
  4128  007B70  20                 	db	32
  4129  007B71  3D                 	db	61	;'='
  4130  007B72  20                 	db	32
  4131  007B73  68                 	db	104	;'h'
  4132  007B74  74                 	db	116	;'t'
  4133  007B75  74                 	db	116	;'t'
  4134  007B76  70                 	db	112	;'p'
  4135  007B77  3A                 	db	58	;':'
  4136  007B78  2F                 	db	47
  4137  007B79  2F                 	db	47
  4138  007B7A  00                 	db	0
  4139  007B7B                     STR_258:
  4140  007B7B  56                 	db	86	;'V'
  4141  007B7C  53                 	db	83	;'S'
  4142  007B7D  43                 	db	67	;'C'
  4143  007B7E  50                 	db	80	;'P'
  4144  007B7F  20                 	db	32
  4145  007B80  44                 	db	68	;'D'
  4146  007B81  72                 	db	114	;'r'
  4147  007B82  69                 	db	105	;'i'
  4148  007B83  76                 	db	118	;'v'
  4149  007B84  65                 	db	101	;'e'
  4150  007B85  72                 	db	114	;'r'
  4151  007B86  00                 	db	0
  4152  007B87                     STR_118:
  4153  007B87  52                 	db	82	;'R'
  4154  007B88  57                 	db	87	;'W'
  4155  007B89  54                 	db	84	;'T'
  4156  007B8A  49                 	db	73	;'I'
  4157  007B8B  4D                 	db	77	;'M'
  4158  007B8C  45                 	db	69	;'E'
  4159  007B8D  4F                 	db	79	;'O'
  4160  007B8E  55                 	db	85	;'U'
  4161  007B8F  54                 	db	84	;'T'
  4162  007B90  20                 	db	32
  4163  007B91  00                 	db	0
  4164  007B92                     STR_158:
  4165  007B92  2C                 	db	44
  4166  007B93  44                 	db	68	;'D'
  4167  007B94  61                 	db	97	;'a'
  4168  007B95  74                 	db	116	;'t'
  4169  007B96  61                 	db	97	;'a'
  4170  007B97  3D                 	db	61	;'='
  4171  007B98  6E                 	db	110	;'n'
  4172  007B99  6F                 	db	111	;'o'
  4173  007B9A  6E                 	db	110	;'n'
  4174  007B9B  65                 	db	101	;'e'
  4175  007B9C  00                 	db	0
  4176  007B9D                     STR_254:
  4177  007B9D  56                 	db	86	;'V'
  4178  007B9E  65                 	db	101	;'e'
  4179  007B9F  72                 	db	114	;'r'
  4180  007BA0  73                 	db	115	;'s'
  4181  007BA1  69                 	db	105	;'i'
  4182  007BA2  6F                 	db	111	;'o'
  4183  007BA3  6E                 	db	110	;'n'
  4184  007BA4  3A                 	db	58	;':'
  4185  007BA5  20                 	db	32
  4186  007BA6  00                 	db	0
  4187  007BA7                     STR_260:
  4188  007BA7  56                 	db	86	;'V'
  4189  007BA8  53                 	db	83	;'S'
  4190  007BA9  43                 	db	67	;'C'
  4191  007BAA  50                 	db	80	;'P'
  4192  007BAB  20                 	db	32
  4193  007BAC  4E                 	db	78	;'N'
  4194  007BAD  6F                 	db	111	;'o'
  4195  007BAE  64                 	db	100	;'d'
  4196  007BAF  65                 	db	101	;'e'
  4197  007BB0  00                 	db	0
  4198  007BB1                     STR_259:
  4199  007BB1  53                 	db	83	;'S'
  4200  007BB2  4C                 	db	76	;'L'
  4201  007BB3  20                 	db	32
  4202  007BB4  44                 	db	68	;'D'
  4203  007BB5  72                 	db	114	;'r'
  4204  007BB6  69                 	db	105	;'i'
  4205  007BB7  76                 	db	118	;'v'
  4206  007BB8  65                 	db	101	;'e'
  4207  007BB9  72                 	db	114	;'r'
  4208  007BBA  00                 	db	0
  4209  007BBB                     STR_120:
  4210  007BBB  53                 	db	83	;'S'
  4211  007BBC  54                 	db	84	;'T'
  4212  007BBD  41                 	db	65	;'A'
  4213  007BBE  52                 	db	82	;'R'
  4214  007BBF  54                 	db	84	;'T'
  4215  007BC0  49                 	db	73	;'I'
  4216  007BC1  46                 	db	70	;'F'
  4217  007BC2  20                 	db	32
  4218  007BC3  00                 	db	0
  4219  007BC4                     STR_148:
  4220  007BC4  2C                 	db	44
  4221  007BC5  6E                 	db	110	;'n'
  4222  007BC6  6F                 	db	111	;'o'
  4223  007BC7  64                 	db	100	;'d'
  4224  007BC8  65                 	db	101	;'e'
  4225  007BC9  69                 	db	105	;'i'
  4226  007BCA  64                 	db	100	;'d'
  4227  007BCB  3D                 	db	61	;'='
  4228  007BCC  00                 	db	0
  4229  007BCD                     STR_14:
  4230  007BCD  4C                 	db	76	;'L'
  4231  007BCE  4F                 	db	79	;'O'
  4232  007BCF  4F                 	db	79	;'O'
  4233  007BD0  50                 	db	80	;'P'
  4234  007BD1  42                 	db	66	;'B'
  4235  007BD2  41                 	db	65	;'A'
  4236  007BD3  43                 	db	67	;'C'
  4237  007BD4  4B                 	db	75	;'K'
  4238  007BD5  00                 	db	0
  4239  007BD6                     STR_134:
  4240  007BD6  56                 	db	86	;'V'
  4241  007BD7  31                 	db	49	;'1'
  4242  007BD8  30                 	db	48	;'0'
  4243  007BD9  31                 	db	49	;'1'
  4244  007BDA  31                 	db	49	;'1'
  4245  007BDB  0D                 	db	13
  4246  007BDC  0A                 	db	10
  4247  007BDD  00                 	db	0
  4248  007BDE                     STR_135:
  4249  007BDE  4E                 	db	78	;'N'
  4250  007BDF  31                 	db	49	;'1'
  4251  007BE0  39                 	db	57	;'9'
  4252  007BE1  37                 	db	55	;'7'
  4253  007BE2  37                 	db	55	;'7'
  4254  007BE3  0D                 	db	13
  4255  007BE4  0A                 	db	10
  4256  007BE5  00                 	db	0
  4257  007BE6                     STR_243:
  4258  007BE6  47                 	db	71	;'G'
  4259  007BE7  55                 	db	85	;'U'
  4260  007BE8  49                 	db	73	;'I'
  4261  007BE9  44                 	db	68	;'D'
  4262  007BEA  20                 	db	32
  4263  007BEB  3D                 	db	61	;'='
  4264  007BEC  20                 	db	32
  4265  007BED  00                 	db	0
  4266  007BEE                     STR_128:
  4267  007BEE  46                 	db	70	;'F'
  4268  007BEF  49                 	db	73	;'I'
  4269  007BF0  4C                 	db	76	;'L'
  4270  007BF1  54                 	db	84	;'T'
  4271  007BF2  45                 	db	69	;'E'
  4272  007BF3  52                 	db	82	;'R'
  4273  007BF4  20                 	db	32
  4274  007BF5  00                 	db	0
  4275  007BF6                     STR_142:
  4276  007BF6  2C                 	db	44
  4277  007BF7  63                 	db	99	;'c'
  4278  007BF8  6C                 	db	108	;'l'
  4279  007BF9  61                 	db	97	;'a'
  4280  007BFA  73                 	db	115	;'s'
  4281  007BFB  73                 	db	115	;'s'
  4282  007BFC  3D                 	db	61	;'='
  4283  007BFD  00                 	db	0
  4284  007BFE                     STR_122:
  4285  007BFE  56                 	db	86	;'V'
  4286  007BFF  45                 	db	69	;'E'
  4287  007C00  52                 	db	82	;'R'
  4288  007C01  42                 	db	66	;'B'
  4289  007C02  4F                 	db	79	;'O'
  4290  007C03  53                 	db	83	;'S'
  4291  007C04  45                 	db	69	;'E'
  4292  007C05  00                 	db	0
  4293  007C06                     STR_116:
  4294  007C06  44                 	db	68	;'D'
  4295  007C07  45                 	db	69	;'E'
  4296  007C08  43                 	db	67	;'C'
  4297  007C09  49                 	db	73	;'I'
  4298  007C0A  4D                 	db	77	;'M'
  4299  007C0B  41                 	db	65	;'A'
  4300  007C0C  4C                 	db	76	;'L'
  4301  007C0D  00                 	db	0
  4302  007C0E                     STR_18:
  4303  007C0E  56                 	db	86	;'V'
  4304  007C0F  45                 	db	69	;'E'
  4305  007C10  52                 	db	82	;'R'
  4306  007C11  53                 	db	83	;'S'
  4307  007C12  49                 	db	73	;'I'
  4308  007C13  4F                 	db	79	;'O'
  4309  007C14  4E                 	db	78	;'N'
  4310  007C15  00                 	db	0
  4311  007C16                     STR_177:
  4312  007C16  30                 	db	48	;'0'
  4313  007C17  78                 	db	120	;'x'
  4314  007C18  25                 	db	37
  4315  007C19  30                 	db	48	;'0'
  4316  007C1A  38                 	db	56	;'8'
  4317  007C1B  6C                 	db	108	;'l'
  4318  007C1C  58                 	db	88	;'X'
  4319  007C1D  00                 	db	0
  4320  007C1E                     STR_257:
  4321  007C1E  56                 	db	86	;'V'
  4322  007C1F  65                 	db	101	;'e'
  4323  007C20  72                 	db	114	;'r'
  4324  007C21  62                 	db	98	;'b'
  4325  007C22  6F                 	db	111	;'o'
  4326  007C23  73                 	db	115	;'s'
  4327  007C24  65                 	db	101	;'e'
  4328  007C25  00                 	db	0
  4329  007C26                     STR_256:
  4330  007C26  4D                 	db	77	;'M'
  4331  007C27  6F                 	db	111	;'o'
  4332  007C28  64                 	db	100	;'d'
  4333  007C29  65                 	db	101	;'e'
  4334  007C2A  3A                 	db	58	;':'
  4335  007C2B  20                 	db	32
  4336  007C2C  00                 	db	0
  4337  007C2D                     STR_154:
  4338  007C2D  2C                 	db	44
  4339  007C2E  44                 	db	68	;'D'
  4340  007C2F  61                 	db	97	;'a'
  4341  007C30  74                 	db	116	;'t'
  4342  007C31  61                 	db	97	;'a'
  4343  007C32  3D                 	db	61	;'='
  4344  007C33  00                 	db	0
  4345  007C34                     STR_145:
  4346  007C34  2C                 	db	44
  4347  007C35  74                 	db	116	;'t'
  4348  007C36  79                 	db	121	;'y'
  4349  007C37  70                 	db	112	;'p'
  4350  007C38  65                 	db	101	;'e'
  4351  007C39  3D                 	db	61	;'='
  4352  007C3A  00                 	db	0
  4353  007C3B                     STR_151:
  4354  007C3B  2C                 	db	44
  4355  007C3C  73                 	db	115	;'s'
  4356  007C3D  69                 	db	105	;'i'
  4357  007C3E  7A                 	db	122	;'z'
  4358  007C3F  65                 	db	101	;'e'
  4359  007C40  3D                 	db	61	;'='
  4360  007C41  00                 	db	0
  4361  007C42                     STR_139:
  4362  007C42  3C                 	db	60	;'<'
  4363  007C43  50                 	db	80	;'P'
  4364  007C44  72                 	db	114	;'r'
  4365  007C45  69                 	db	105	;'i'
  4366  007C46  6F                 	db	111	;'o'
  4367  007C47  3D                 	db	61	;'='
  4368  007C48  00                 	db	0
  4369  007C49                     STR_20:
  4370  007C49  49                 	db	73	;'I'
  4371  007C4A  46                 	db	70	;'F'
  4372  007C4B  4D                 	db	77	;'M'
  4373  007C4C  4F                 	db	79	;'O'
  4374  007C4D  44                 	db	68	;'D'
  4375  007C4E  45                 	db	69	;'E'
  4376  007C4F  00                 	db	0
  4377  007C50                     STR_16:
  4378  007C50  4C                 	db	76	;'L'
  4379  007C51  49                 	db	73	;'I'
  4380  007C52  53                 	db	83	;'S'
  4381  007C53  54                 	db	84	;'T'
  4382  007C54  45                 	db	69	;'E'
  4383  007C55  4E                 	db	78	;'N'
  4384  007C56  00                 	db	0
  4385  007C57                     STR_87:
  4386  007C57  46                 	db	70	;'F'
  4387  007C58  49                 	db	73	;'I'
  4388  007C59  4C                 	db	76	;'L'
  4389  007C5A  54                 	db	84	;'T'
  4390  007C5B  45                 	db	69	;'E'
  4391  007C5C  52                 	db	82	;'R'
  4392  007C5D  00                 	db	0
  4393  007C5E                     STR_10:
  4394  007C5E  53                 	db	83	;'S'
  4395  007C5F  49                 	db	73	;'I'
  4396  007C60  4C                 	db	76	;'L'
  4397  007C61  45                 	db	69	;'E'
  4398  007C62  4E                 	db	78	;'N'
  4399  007C63  54                 	db	84	;'T'
  4400  007C64  00                 	db	0
  4401  007C65                     STR_56:
  4402  007C65  30                 	db	48	;'0'
  4403  007C66  78                 	db	120	;'x'
  4404  007C67  25                 	db	37
  4405  007C68  30                 	db	48	;'0'
  4406  007C69  32                 	db	50	;'2'
  4407  007C6A  58                 	db	88	;'X'
  4408  007C6B  00                 	db	0
  4409  007C6C                     STR_143:
  4410  007C6C  30                 	db	48	;'0'
  4411  007C6D  78                 	db	120	;'x'
  4412  007C6E  25                 	db	37
  4413  007C6F  30                 	db	48	;'0'
  4414  007C70  34                 	db	52	;'4'
  4415  007C71  58                 	db	88	;'X'
  4416  007C72  00                 	db	0
  4417  007C73                     STR_161:
  4418  007C73  30                 	db	48	;'0'
  4419  007C74  78                 	db	120	;'x'
  4420  007C75  25                 	db	37
  4421  007C76  30                 	db	48	;'0'
  4422  007C77  38                 	db	56	;'8'
  4423  007C78  58                 	db	88	;'X'
  4424  007C79  00                 	db	0
  4425  007C7A                     STR_136:
  4426  007C7A  46                 	db	70	;'F'
  4427  007C7B  30                 	db	48	;'0'
  4428  007C7C  30                 	db	48	;'0'
  4429  007C7D  0D                 	db	13
  4430  007C7E  0A                 	db	10
  4431  007C7F  00                 	db	0
  4432  007C80                     STR_9:
  4433  007C80  2B                 	db	43
  4434  007C81  4F                 	db	79	;'O'
  4435  007C82  4B                 	db	75	;'K'
  4436  007C83  0D                 	db	13
  4437  007C84  0A                 	db	10
  4438  007C85  00                 	db	0
  4439  007C86                     STR_121:
  4440  007C86  4D                 	db	77	;'M'
  4441  007C87  4F                 	db	79	;'O'
  4442  007C88  44                 	db	68	;'D'
  4443  007C89  45                 	db	69	;'E'
  4444  007C8A  20                 	db	32
  4445  007C8B  00                 	db	0
  4446  007C8C                     STR_129:
  4447  007C8C  4D                 	db	77	;'M'
  4448  007C8D  41                 	db	65	;'A'
  4449  007C8E  53                 	db	83	;'S'
  4450  007C8F  4B                 	db	75	;'K'
  4451  007C90  20                 	db	32
  4452  007C91  00                 	db	0
  4453  007C92                     STR_12:
  4454  007C92  43                 	db	67	;'C'
  4455  007C93  4C                 	db	76	;'L'
  4456  007C94  4F                 	db	79	;'O'
  4457  007C95  53                 	db	83	;'S'
  4458  007C96  45                 	db	69	;'E'
  4459  007C97  00                 	db	0
  4460  007C98                     STR_126:
  4461  007C98  53                 	db	83	;'S'
  4462  007C99  4C                 	db	76	;'L'
  4463  007C9A  43                 	db	67	;'C'
  4464  007C9B  41                 	db	65	;'A'
  4465  007C9C  4E                 	db	78	;'N'
  4466  007C9D  00                 	db	0
  4467  007C9E                     STR_113:
  4468  007C9E  53                 	db	83	;'S'
  4469  007C9F  45                 	db	69	;'E'
  4470  007CA0  54                 	db	84	;'T'
  4471  007CA1  20                 	db	32
  4472  007CA2  00                 	db	0
  4473  007CA3                     STR_47:
  4474  007CA3  46                 	db	70	;'F'
  4475  007CA4  49                 	db	73	;'I'
  4476  007CA5  4E                 	db	78	;'N'
  4477  007CA6  44                 	db	68	;'D'
  4478  007CA7  00                 	db	0
  4479  007CA8                     STR_49:
  4480  007CA8  52                 	db	82	;'R'
  4481  007CA9  52                 	db	82	;'R'
  4482  007CAA  45                 	db	69	;'E'
  4483  007CAB  47                 	db	71	;'G'
  4484  007CAC  00                 	db	0
  4485  007CAD                     STR_72:
  4486  007CAD  57                 	db	87	;'W'
  4487  007CAE  52                 	db	82	;'R'
  4488  007CAF  45                 	db	69	;'E'
  4489  007CB0  47                 	db	71	;'G'
  4490  007CB1  00                 	db	0
  4491  007CB2                     STR_100:
  4492  007CB2  4D                 	db	77	;'M'
  4493  007CB3  41                 	db	65	;'A'
  4494  007CB4  53                 	db	83	;'S'
  4495  007CB5  4B                 	db	75	;'K'
  4496  007CB6  00                 	db	0
  4497  007CB7                     STR_8:
  4498  007CB7  4F                 	db	79	;'O'
  4499  007CB8  50                 	db	80	;'P'
  4500  007CB9  45                 	db	69	;'E'
  4501  007CBA  4E                 	db	78	;'N'
  4502  007CBB  00                 	db	0
  4503  007CBC                     STR_81:
  4504  007CBC  49                 	db	73	;'I'
  4505  007CBD  4E                 	db	78	;'N'
  4506  007CBE  46                 	db	70	;'F'
  4507  007CBF  4F                 	db	79	;'O'
  4508  007CC0  00                 	db	0
  4509  007CC1                     STR_124:
  4510  007CC1  56                 	db	86	;'V'
  4511  007CC2  53                 	db	83	;'S'
  4512  007CC3  43                 	db	67	;'C'
  4513  007CC4  50                 	db	80	;'P'
  4514  007CC5  00                 	db	0
  4515  007CC6                     STR_45:
  4516  007CC6  48                 	db	72	;'H'
  4517  007CC7  45                 	db	69	;'E'
  4518  007CC8  4C                 	db	76	;'L'
  4519  007CC9  50                 	db	80	;'P'
  4520  007CCA  00                 	db	0
  4521  007CCB                     STR_41:
  4522  007CCB  53                 	db	83	;'S'
  4523  007CCC  54                 	db	84	;'T'
  4524  007CCD  41                 	db	65	;'A'
  4525  007CCE  54                 	db	84	;'T'
  4526  007CCF  00                 	db	0
  4527  007CD0                     STR_6:
  4528  007CD0  42                 	db	66	;'B'
  4529  007CD1  4F                 	db	79	;'O'
  4530  007CD2  4F                 	db	79	;'O'
  4531  007CD3  54                 	db	84	;'T'
  4532  007CD4  00                 	db	0
  4533  007CD5                     STR_159:
  4534  007CD5  3E                 	db	62	;'>'
  4535  007CD6  0D                 	db	13
  4536  007CD7  0A                 	db	10
  4537  007CD8  00                 	db	0
  4538  007CD9                     STR_43:
  4539  007CD9  45                 	db	69	;'E'
  4540  007CDA  52                 	db	82	;'R'
  4541  007CDB  52                 	db	82	;'R'
  4542  007CDC  00                 	db	0
  4543  007CDD                     STR_114:
  4544  007CDD  48                 	db	72	;'H'
  4545  007CDE  45                 	db	69	;'E'
  4546  007CDF  58                 	db	88	;'X'
  4547  007CE0  00                 	db	0
  4548  007CE1                     STR_162:
  4549  007CE1  25                 	db	37
  4550  007CE2  6C                 	db	108	;'l'
  4551  007CE3  75                 	db	117	;'u'
  4552  007CE4  00                 	db	0
  4553  007CE5                     STR_245:
  4554  007CE5  2D                 	db	45
  4555  007CE6  2D                 	db	45
  4556  007CE7  00                 	db	0
  4557  007CE8                     STR_38:
  4558  007CE8  52                 	db	82	;'R'
  4559  007CE9  58                 	db	88	;'X'
  4560  007CEA  00                 	db	0
  4561  007CEB                     STR_29:
  4562  007CEB  54                 	db	84	;'T'
  4563  007CEC  58                 	db	88	;'X'
  4564  007CED  00                 	db	0
  4565  007CEE                     STR_57:
  4566  007CEE  25                 	db	37
  4567  007CEF  64                 	db	100	;'d'
  4568  007CF0  00                 	db	0
  4569  007CF1                     STR_138:
  4570  007CF1  07                 	db	7
  4571  007CF2  00                 	db	0
  4572  007CF3                     STR_137:
  4573  007CF3  0D                 	db	13
  4574  007CF4  00                 	db	0
  4575  007CF5                     STR_30:
  4576  007CF5  2C                 	db	44
  4577  007CF6  00                 	db	0
  4578  007CF7                     STR_252:
  4579  007CF7  2E                 	db	46
  4580  007CF8  00                 	db	0
  4581  007CF9                     STR_244:
  4582  007CF9  30                 	db	48	;'0'
  4583  007CFA  00                 	db	0
  4584  007CFB                     STR_246:
  4585  007CFB  3A                 	db	58	;':'
  4586  007CFC  00                 	db	0
  4587  007CFD                     STR_251:
  4588  007CFD  3F                 	db	63	;'?'
  4589  007CFE  00                 	db	0
  4590  007CFF                     __end_of__stringdata:
  4591                           	opt stack 0
  4592                           
  4593                           ; #config settings
  4594  007CFF  00                 	db	0	; dummy byte at the end
  4595  0000                     tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           indf0	equ	0xFEF
  4603                           fsr0h	equ	0xFEA
  4604                           fsr0l	equ	0xFE9
  4605                           wreg	equ	0xFE8
  4606                           indf1	equ	0xFE7
  4607                           postinc1	equ	0xFE6
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619                           	psect	nvBANK1
  4620  0001E7                     __pnvBANK1:
  4621                           	opt stack 0
  4622  0001E7                     _caps:
  4623                           	opt stack 0
  4624  0001E7                     	ds	2
  4625  0001E9                     ___DCDelay:
  4626                           	opt stack 0
  4627  0001E9                     	ds	1
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           indf0	equ	0xFEF
  4636                           fsr0h	equ	0xFEA
  4637                           fsr0l	equ	0xFE9
  4638                           wreg	equ	0xFE8
  4639                           indf1	equ	0xFE7
  4640                           postinc1	equ	0xFE6
  4641                           postdec1	equ	0xFE5
  4642                           fsr1h	equ	0xFE2
  4643                           fsr1l	equ	0xFE1
  4644                           indf2	equ	0xFDF
  4645                           postinc2	equ	0xFDE
  4646                           postdec2	equ	0xFDD
  4647                           plusw2	equ	0xFDB
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652                           	psect	cinit
  4653  001E8A                     __pcinit:
  4654                           	opt stack 0
  4655  001E8A                     start_initialization:
  4656                           	opt stack 0
  4657  001E8A                     __initialization:
  4658                           	opt stack 0
  4659                           
  4660                           ; Clear objects allocated to BIGRAM (494 bytes)
  4661  001E8A  EE04  F000         	lfsr	0,__pbssBIGRAM
  4662  001E8E  EE11 F0EE          	lfsr	1,494
  4663  001E92                     clear_0:
  4664  001E92  6AEE               	clrf	postinc0,c
  4665  001E94  50E5               	movf	postdec1,w,c
  4666  001E96  50E1               	movf	fsr1l,w,c
  4667  001E98  E1FC               	bnz	clear_0
  4668  001E9A  50E2               	movf	fsr1h,w,c
  4669  001E9C  E1FA               	bnz	clear_0
  4670                           
  4671                           ; Clear objects allocated to BANK3 (256 bytes)
  4672  001E9E  EE03  F000         	lfsr	0,__pbssBANK3
  4673  001EA2  EE11 F000          	lfsr	1,256
  4674  001EA6                     clear_1:
  4675  001EA6  6AEE               	clrf	postinc0,c
  4676  001EA8  50E5               	movf	postdec1,w,c
  4677  001EAA  50E1               	movf	fsr1l,w,c
  4678  001EAC  E1FC               	bnz	clear_1
  4679  001EAE  50E2               	movf	fsr1h,w,c
  4680  001EB0  E1FA               	bnz	clear_1
  4681                           
  4682                           ; Clear objects allocated to BANK2 (128 bytes)
  4683  001EB2  EE02  F000         	lfsr	0,__pbssBANK2
  4684  001EB6  0E80               	movlw	128
  4685  001EB8                     clear_2:
  4686  001EB8  6AEE               	clrf	postinc0,c
  4687  001EBA  06E8               	decf	wreg,f,c
  4688  001EBC  E1FD               	bnz	clear_2
  4689                           
  4690                           ; Clear objects allocated to BANK1 (231 bytes)
  4691  001EBE  EE01  F000         	lfsr	0,__pbssBANK1
  4692  001EC2  0EE7               	movlw	231
  4693  001EC4                     clear_3:
  4694  001EC4  6AEE               	clrf	postinc0,c
  4695  001EC6  06E8               	decf	wreg,f,c
  4696  001EC8  E1FD               	bnz	clear_3
  4697                           
  4698                           ; Clear objects allocated to BANK0 (9 bytes)
  4699  001ECA  EE00  F0E4         	lfsr	0,__pbssBANK0
  4700  001ECE  0E09               	movlw	9
  4701  001ED0                     clear_4:
  4702  001ED0  6AEE               	clrf	postinc0,c
  4703  001ED2  06E8               	decf	wreg,f,c
  4704  001ED4  E1FD               	bnz	clear_4
  4705                           
  4706                           ; Clear objects allocated to COMRAM (30 bytes)
  4707  001ED6  EE00  F022         	lfsr	0,__pbssCOMRAM
  4708  001EDA  0E1E               	movlw	30
  4709  001EDC                     clear_5:
  4710  001EDC  6AEE               	clrf	postinc0,c
  4711  001EDE  06E8               	decf	wreg,f,c
  4712  001EE0  E1FD               	bnz	clear_5
  4713  001EE2                     end_of_initialization:
  4714                           	opt stack 0
  4715  001EE2                     __end_of__initialization:
  4716                           	opt stack 0
  4717  001EE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4718  001EE4  6EF8               	movwf	tblptru,c
  4719  001EE6  0100               	movlb	0
  4720  001EE8  EF13  F01E         	goto	_main	;jump to C main() function
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           indf0	equ	0xFEF
  4729                           postinc0	equ	0xFEE
  4730                           fsr0h	equ	0xFEA
  4731                           fsr0l	equ	0xFE9
  4732                           wreg	equ	0xFE8
  4733                           indf1	equ	0xFE7
  4734                           postinc1	equ	0xFE6
  4735                           postdec1	equ	0xFE5
  4736                           fsr1h	equ	0xFE2
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           plusw2	equ	0xFDB
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746                           	psect	bssCOMRAM
  4747  000022                     __pbssCOMRAM:
  4748                           	opt stack 0
  4749  000022                     _timekeeper:
  4750                           	opt stack 0
  4751  000022                     	ds	4
  4752  000026                     _status_led_cnt:
  4753                           	opt stack 0
  4754  000026                     	ds	2
  4755  000028                     strtok@sp:
  4756                           	opt stack 0
  4757  000028                     	ds	2
  4758  00002A                     _USART_Status:
  4759                           	opt stack 0
  4760  00002A                     	ds	1
  4761  00002B                     __ECANRxFilterHitInfo:
  4762                           	opt stack 0
  4763  00002B                     	ds	1
  4764  00002C                     _bDLE:
  4765                           	opt stack 0
  4766  00002C                     	ds	1
  4767  00002D                     _bInitiated:
  4768                           	opt stack 0
  4769  00002D                     	ds	1
  4770  00002E                     _bSilent:
  4771                           	opt stack 0
  4772  00002E                     	ds	1
  4773  00002F                     _fifo_canrxcount:
  4774                           	opt stack 0
  4775  00002F                     	ds	1
  4776  000030                     _ledFunctionality:
  4777                           	opt stack 0
  4778  000030                     	ds	1
  4779  000031                     _nTimeStamp:
  4780                           	opt stack 0
  4781  000031                     	ds	1
  4782  000032                     _sequencyno:
  4783                           	opt stack 0
  4784  000032                     	ds	1
  4785  000033                     _stateVscpDriver:
  4786                           	opt stack 0
  4787  000033                     	ds	1
  4788  000034                     _vscpData:
  4789                           	opt stack 0
  4790  000034                     	ds	8
  4791  00003C                     _vscpClass:
  4792                           	opt stack 0
  4793  00003C                     	ds	2
  4794  00003E                     _dlc:
  4795                           	opt stack 0
  4796  00003E                     	ds	1
  4797  00003F                     _flags:
  4798                           	opt stack 0
  4799  00003F                     	ds	1
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           indf0	equ	0xFEF
  4808                           postinc0	equ	0xFEE
  4809                           fsr0h	equ	0xFEA
  4810                           fsr0l	equ	0xFE9
  4811                           wreg	equ	0xFE8
  4812                           indf1	equ	0xFE7
  4813                           postinc1	equ	0xFE6
  4814                           postdec1	equ	0xFE5
  4815                           fsr1h	equ	0xFE2
  4816                           fsr1l	equ	0xFE1
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           plusw2	equ	0xFDB
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825                           	psect	bssBANK0
  4826  0000E4                     __pbssBANK0:
  4827                           	opt stack 0
  4828  0000E4                     _bHex:
  4829                           	opt stack 0
  4830  0000E4                     	ds	1
  4831  0000E5                     _bOpen:
  4832                           	opt stack 0
  4833  0000E5                     	ds	1
  4834  0000E6                     _mode:
  4835                           	opt stack 0
  4836  0000E6                     	ds	1
  4837  0000E7                     _pos:
  4838                           	opt stack 0
  4839  0000E7                     	ds	1
  4840  0000E8                     _rwtimeout:
  4841                           	opt stack 0
  4842  0000E8                     	ds	1
  4843  0000E9                     _vscpNodeId:
  4844                           	opt stack 0
  4845  0000E9                     	ds	1
  4846  0000EA                     _vscpPriority:
  4847                           	opt stack 0
  4848  0000EA                     	ds	1
  4849  0000EB                     _vscpSize:
  4850                           	opt stack 0
  4851  0000EB                     	ds	1
  4852  0000EC                     _vscpType:
  4853                           	opt stack 0
  4854  0000EC                     	ds	1
  4855                           tblptru	equ	0xFF8
  4856                           tblptrh	equ	0xFF7
  4857                           tblptrl	equ	0xFF6
  4858                           tablat	equ	0xFF5
  4859                           prodh	equ	0xFF4
  4860                           prodl	equ	0xFF3
  4861                           intcon	equ	0xFF2
  4862                           indf0	equ	0xFEF
  4863                           postinc0	equ	0xFEE
  4864                           fsr0h	equ	0xFEA
  4865                           fsr0l	equ	0xFE9
  4866                           wreg	equ	0xFE8
  4867                           indf1	equ	0xFE7
  4868                           postinc1	equ	0xFE6
  4869                           postdec1	equ	0xFE5
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           plusw2	equ	0xFDB
  4876                           fsr2h	equ	0xFDA
  4877                           fsr2l	equ	0xFD9
  4878                           status	equ	0xFD8
  4879                           
  4880                           	psect	bssBANK1
  4881  000100                     __pbssBANK1:
  4882                           	opt stack 0
  4883  000100                     _can_receiveOverruns:
  4884                           	opt stack 0
  4885  000100                     	ds	4
  4886  000104                     _can_transmitOverruns:
  4887                           	opt stack 0
  4888  000104                     	ds	4
  4889  000108                     _cntRxBytes:
  4890                           	opt stack 0
  4891  000108                     	ds	4
  4892  00010C                     _cntRxFrames:
  4893                           	opt stack 0
  4894  00010C                     	ds	4
  4895  000110                     _cntTxBytes:
  4896                           	opt stack 0
  4897  000110                     	ds	4
  4898  000114                     _cntTxFrames:
  4899                           	opt stack 0
  4900  000114                     	ds	4
  4901  000118                     _timer:
  4902                           	opt stack 0
  4903  000118                     	ds	4
  4904  00011C                     _uart_receiveOverruns:
  4905                           	opt stack 0
  4906  00011C                     	ds	4
  4907  000120                     _uart_transmitOverruns:
  4908                           	opt stack 0
  4909  000120                     	ds	4
  4910  000124                     _made_table:
  4911                           	opt stack 0
  4912  000124                     	ds	2
  4913  000126                     __IT_INT_MASK:
  4914                           	opt stack 0
  4915  000126                     	ds	1
  4916  000127                     __IT_SAVE_BSR:
  4917                           	opt stack 0
  4918  000127                     	ds	1
  4919  000128                     __IT_SAVE_STATUS:
  4920                           	opt stack 0
  4921  000128                     	ds	1
  4922  000129                     __IT_SAVE_WREG:
  4923                           	opt stack 0
  4924  000129                     	ds	1
  4925  00012A                     ___DCByte:
  4926                           	opt stack 0
  4927  00012A                     	ds	1
  4928  00012B                     _cmdbuf:
  4929                           	opt stack 0
  4930  00012B                     	ds	80
  4931  00017B                     _wrkbuf:
  4932                           	opt stack 0
  4933  00017B                     	ds	80
  4934  0001CB                     _canInputFifo:
  4935                           	opt stack 0
  4936  0001CB                     	ds	8
  4937  0001D3                     _data:
  4938                           	opt stack 0
  4939  0001D3                     	ds	8
  4940  0001DB                     _serialInputFifo:
  4941                           	opt stack 0
  4942  0001DB                     	ds	8
  4943  0001E3                     _id:
  4944                           	opt stack 0
  4945  0001E3                     	ds	4
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           indf0	equ	0xFEF
  4954                           postinc0	equ	0xFEE
  4955                           fsr0h	equ	0xFEA
  4956                           fsr0l	equ	0xFE9
  4957                           wreg	equ	0xFE8
  4958                           indf1	equ	0xFE7
  4959                           postinc1	equ	0xFE6
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           plusw2	equ	0xFDB
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971                           	psect	bssBANK2
  4972  000200                     __pbssBANK2:
  4973                           	opt stack 0
  4974  000200                     _serial_inputBuffer:
  4975                           	opt stack 0
  4976  000200                     	ds	128
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           indf0	equ	0xFEF
  4985                           postinc0	equ	0xFEE
  4986                           fsr0h	equ	0xFEA
  4987                           fsr0l	equ	0xFE9
  4988                           wreg	equ	0xFE8
  4989                           indf1	equ	0xFE7
  4990                           postinc1	equ	0xFE6
  4991                           postdec1	equ	0xFE5
  4992                           fsr1h	equ	0xFE2
  4993                           fsr1l	equ	0xFE1
  4994                           indf2	equ	0xFDF
  4995                           postinc2	equ	0xFDE
  4996                           postdec2	equ	0xFDD
  4997                           plusw2	equ	0xFDB
  4998                           fsr2h	equ	0xFDA
  4999                           fsr2l	equ	0xFD9
  5000                           status	equ	0xFD8
  5001                           
  5002                           	psect	bssBANK3
  5003  000300                     __pbssBANK3:
  5004                           	opt stack 0
  5005  000300                     _crc8_table:
  5006                           	opt stack 0
  5007  000300                     	ds	256
  5008                           tblptru	equ	0xFF8
  5009                           tblptrh	equ	0xFF7
  5010                           tblptrl	equ	0xFF6
  5011                           tablat	equ	0xFF5
  5012                           prodh	equ	0xFF4
  5013                           prodl	equ	0xFF3
  5014                           intcon	equ	0xFF2
  5015                           indf0	equ	0xFEF
  5016                           postinc0	equ	0xFEE
  5017                           fsr0h	equ	0xFEA
  5018                           fsr0l	equ	0xFE9
  5019                           wreg	equ	0xFE8
  5020                           indf1	equ	0xFE7
  5021                           postinc1	equ	0xFE6
  5022                           postdec1	equ	0xFE5
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           postinc2	equ	0xFDE
  5027                           postdec2	equ	0xFDD
  5028                           plusw2	equ	0xFDB
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033                           	psect	bssBIGRAM
  5034  000400                     __pbssBIGRAM:
  5035                           	opt stack 0
  5036  000400                     _can_inputBuffer:
  5037                           	opt stack 0
  5038  000400                     	ds	494
  5039                           tblptru	equ	0xFF8
  5040                           tblptrh	equ	0xFF7
  5041                           tblptrl	equ	0xFF6
  5042                           tablat	equ	0xFF5
  5043                           prodh	equ	0xFF4
  5044                           prodl	equ	0xFF3
  5045                           intcon	equ	0xFF2
  5046                           indf0	equ	0xFEF
  5047                           postinc0	equ	0xFEE
  5048                           fsr0h	equ	0xFEA
  5049                           fsr0l	equ	0xFE9
  5050                           wreg	equ	0xFE8
  5051                           indf1	equ	0xFE7
  5052                           postinc1	equ	0xFE6
  5053                           postdec1	equ	0xFE5
  5054                           fsr1h	equ	0xFE2
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           plusw2	equ	0xFDB
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064                           	psect	cstackBANK2
  5065  000280                     __pcstackBANK2:
  5066                           	opt stack 0
  5067  000280                     doModeVerbose@id:
  5068                           	opt stack 0
  5069                           
  5070                           ; 4 bytes @ 0x0
  5071  000280                     	ds	4
  5072  000284                     doModeVerbose@preg:
  5073                           	opt stack 0
  5074                           
  5075                           ; 2 bytes @ 0x4
  5076  000284                     	ds	2
  5077  000286                     doModeVerbose@preg_1169:
  5078                           	opt stack 0
  5079                           
  5080                           ; 2 bytes @ 0x6
  5081  000286                     	ds	2
  5082  000288                     doModeVerbose@filter_class:
  5083                           	opt stack 0
  5084                           
  5085                           ; 2 bytes @ 0x8
  5086  000288                     	ds	2
  5087  00028A                     doModeVerbose@mask_class:
  5088                           	opt stack 0
  5089                           
  5090                           ; 2 bytes @ 0xA
  5091  00028A                     	ds	2
  5092  00028C                     doModeVerbose@nodeid:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0xC
  5096  00028C                     	ds	1
  5097  00028D                     doModeVerbose@nodeid_1161:
  5098                           	opt stack 0
  5099                           
  5100                           ; 1 bytes @ 0xD
  5101  00028D                     	ds	1
  5102  00028E                     doModeVerbose@filter_priority:
  5103                           	opt stack 0
  5104                           
  5105                           ; 1 bytes @ 0xE
  5106  00028E                     	ds	1
  5107  00028F                     doModeVerbose@filter_type:
  5108                           	opt stack 0
  5109                           
  5110                           ; 1 bytes @ 0xF
  5111  00028F                     	ds	1
  5112  000290                     doModeVerbose@filter_nodeid:
  5113                           	opt stack 0
  5114                           
  5115                           ; 1 bytes @ 0x10
  5116  000290                     	ds	1
  5117  000291                     doModeVerbose@mask_priority:
  5118                           	opt stack 0
  5119                           
  5120                           ; 1 bytes @ 0x11
  5121  000291                     	ds	1
  5122  000292                     doModeVerbose@mask_type:
  5123                           	opt stack 0
  5124                           
  5125                           ; 1 bytes @ 0x12
  5126  000292                     	ds	1
  5127  000293                     doModeVerbose@mask_nodeid:
  5128                           	opt stack 0
  5129                           
  5130                           ; 1 bytes @ 0x13
  5131  000293                     	ds	1
  5132  000294                     _doModeVerbose$1129:
  5133                           	opt stack 0
  5134                           
  5135                           ; 2 bytes @ 0x14
  5136  000294                     	ds	2
  5137  000296                     _doModeVerbose$1141:
  5138                           	opt stack 0
  5139                           
  5140                           ; 2 bytes @ 0x16
  5141  000296                     	ds	2
  5142  000298                     _doModeVerbose$1146:
  5143                           	opt stack 0
  5144                           
  5145                           ; 2 bytes @ 0x18
  5146  000298                     	ds	2
  5147  00029A                     _doModeVerbose$1152:
  5148                           	opt stack 0
  5149                           
  5150                           ; 2 bytes @ 0x1A
  5151  00029A                     	ds	2
  5152  00029C                     _doModeVerbose$1156:
  5153                           	opt stack 0
  5154                           
  5155                           ; 2 bytes @ 0x1C
  5156  00029C                     	ds	2
  5157  00029E                     _doModeVerbose$1181:
  5158                           	opt stack 0
  5159                           
  5160                           ; 2 bytes @ 0x1E
  5161  00029E                     	ds	2
  5162  0002A0                     doModeVerbose@rv:
  5163                           	opt stack 0
  5164                           
  5165                           ; 1 bytes @ 0x20
  5166  0002A0                     	ds	1
  5167  0002A1                     doModeVerbose@page_1162:
  5168                           	opt stack 0
  5169                           
  5170                           ; 1 bytes @ 0x21
  5171  0002A1                     	ds	1
  5172  0002A2                     doModeVerbose@reg_1163:
  5173                           	opt stack 0
  5174                           
  5175                           ; 1 bytes @ 0x22
  5176  0002A2                     	ds	1
  5177  0002A3                     doModeVerbose@id_1222:
  5178                           	opt stack 0
  5179                           
  5180                           ; 4 bytes @ 0x23
  5181  0002A3                     	ds	4
  5182  0002A7                     doModeVerbose@filterno:
  5183                           	opt stack 0
  5184                           
  5185                           ; 1 bytes @ 0x27
  5186  0002A7                     	ds	1
  5187  0002A8                     doModeVerbose@maskno:
  5188                           	opt stack 0
  5189                           
  5190                           ; 1 bytes @ 0x28
  5191  0002A8                     	ds	1
  5192  0002A9                     doModeVerbose@i:
  5193                           	opt stack 0
  5194                           
  5195                           ; 1 bytes @ 0x29
  5196  0002A9                     	ds	1
  5197  0002AA                     doModeVerbose@value_1164:
  5198                           	opt stack 0
  5199                           
  5200                           ; 1 bytes @ 0x2A
  5201  0002AA                     	ds	1
  5202  0002AB                     doModeVerbose@count:
  5203                           	opt stack 0
  5204                           
  5205                           ; 1 bytes @ 0x2B
  5206  0002AB                     	ds	1
  5207  0002AC                     doModeVerbose@c:
  5208                           	opt stack 0
  5209                           
  5210                           ; 1 bytes @ 0x2C
  5211  0002AC                     	ds	1
  5212  0002AD                     doModeVerbose@page:
  5213                           	opt stack 0
  5214                           
  5215                           ; 1 bytes @ 0x2D
  5216  0002AD                     	ds	1
  5217  0002AE                     doModeVerbose@reg:
  5218                           	opt stack 0
  5219                           
  5220                           ; 1 bytes @ 0x2E
  5221  0002AE                     	ds	1
  5222  0002AF                     doModeVerbose@nodeid_1176:
  5223                           	opt stack 0
  5224                           
  5225                           ; 1 bytes @ 0x2F
  5226  0002AF                     	ds	1
  5227  0002B0                     doModeVerbose@i_1111:
  5228                           	opt stack 0
  5229                           
  5230                           ; 1 bytes @ 0x30
  5231  0002B0                     	ds	1
  5232  0002B1                     doModeVerbose@value:
  5233                           	opt stack 0
  5234                           
  5235                           ; 1 bytes @ 0x31
  5236  0002B1                     	ds	1
  5237  0002B2                     doModeVerbose@p_1117:
  5238                           	opt stack 0
  5239                           
  5240                           ; 2 bytes @ 0x32
  5241  0002B2                     	ds	2
  5242  0002B4                     doModeVerbose@p_1165:
  5243                           	opt stack 0
  5244                           
  5245                           ; 2 bytes @ 0x34
  5246  0002B4                     	ds	2
  5247  0002B6                     doModeVerbose@ifmode:
  5248                           	opt stack 0
  5249                           
  5250                           ; 1 bytes @ 0x36
  5251  0002B6                     	ds	1
  5252  0002B7                     doModeVerbose@p:
  5253                           	opt stack 0
  5254                           
  5255                           ; 2 bytes @ 0x37
  5256  0002B7                     	ds	2
  5257  0002B9                     doModeVerbose@p_1190:
  5258                           	opt stack 0
  5259                           
  5260                           ; 2 bytes @ 0x39
  5261  0002B9                     	ds	2
  5262  0002BB                     doModeVerbose@p_1210:
  5263                           	opt stack 0
  5264                           
  5265                           ; 2 bytes @ 0x3B
  5266  0002BB                     	ds	2
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           indf0	equ	0xFEF
  5275                           postinc0	equ	0xFEE
  5276                           fsr0h	equ	0xFEA
  5277                           fsr0l	equ	0xFE9
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           postinc1	equ	0xFE6
  5281                           postdec1	equ	0xFE5
  5282                           fsr1h	equ	0xFE2
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           plusw2	equ	0xFDB
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292                           	psect	cstackBANK0
  5293  000060                     __pcstackBANK0:
  5294                           	opt stack 0
  5295  000060                     ?_WriteTimer0:
  5296                           	opt stack 0
  5297  000060                     ?_fifo_init:
  5298                           	opt stack 0
  5299  000060                     ?_OpenUSART:
  5300                           	opt stack 0
  5301  000060                     ?_Write_b_eep:
  5302                           	opt stack 0
  5303  000060                     ?_setFilter:
  5304                           	opt stack 0
  5305  000060                     ?__CANIDToRegs:
  5306                           	opt stack 0
  5307  000060                     ??_isdigit:
  5308  000060                     ?_Read_b_eep:
  5309                           	opt stack 0
  5310  000060                     ?_fifo_read:
  5311                           	opt stack 0
  5312  000060                     ?_memset:
  5313                           	opt stack 0
  5314  000060                     ?_strcpy:
  5315                           	opt stack 0
  5316  000060                     ?_strchr:
  5317                           	opt stack 0
  5318  000060                     ?_strlen:
  5319                           	opt stack 0
  5320  000060                     ?_memcpy:
  5321                           	opt stack 0
  5322  000060                     ?_strcat:
  5323                           	opt stack 0
  5324  000060                     ?___lwdiv:
  5325                           	opt stack 0
  5326  000060                     ?___lwmod:
  5327                           	opt stack 0
  5328  000060                     ?___wmul:
  5329                           	opt stack 0
  5330  000060                     ?___lldiv:
  5331                           	opt stack 0
  5332  000060                     ECANSetOperationMode@mode:
  5333                           	opt stack 0
  5334  000060                     nibbleFromChar@c:
  5335                           	opt stack 0
  5336  000060                     OpenTimer0@config:
  5337                           	opt stack 0
  5338  000060                     WriteUSART@data:
  5339                           	opt stack 0
  5340  000060                     toupper@c:
  5341                           	opt stack 0
  5342  000060                     __CANIDToRegs@ptr:
  5343                           	opt stack 0
  5344  000060                     fifo_init@f:
  5345                           	opt stack 0
  5346  000060                     fifo_read@f:
  5347                           	opt stack 0
  5348  000060                     _init_crc8$1962:
  5349                           	opt stack 0
  5350  000060                     Read_b_eep@badd:
  5351                           	opt stack 0
  5352  000060                     Write_b_eep@badd:
  5353                           	opt stack 0
  5354  000060                     WriteTimer0@timer0:
  5355                           	opt stack 0
  5356  000060                     OpenUSART@spbrg:
  5357                           	opt stack 0
  5358  000060                     ___lwdiv@dividend:
  5359                           	opt stack 0
  5360  000060                     ___lwmod@dividend:
  5361                           	opt stack 0
  5362  000060                     memcpy@d1:
  5363                           	opt stack 0
  5364  000060                     memset@p1:
  5365                           	opt stack 0
  5366  000060                     strcat@to:
  5367                           	opt stack 0
  5368  000060                     strchr@ptr:
  5369                           	opt stack 0
  5370  000060                     strcpy@to:
  5371                           	opt stack 0
  5372  000060                     strlen@s:
  5373                           	opt stack 0
  5374  000060                     ___wmul@multiplier:
  5375                           	opt stack 0
  5376  000060                     setFilter@val:
  5377                           	opt stack 0
  5378  000060                     ___lldiv@dividend:
  5379                           	opt stack 0
  5380                           
  5381                           ; 4 bytes @ 0x0
  5382  000060                     	ds	1
  5383  000061                     ?_putsUSART:
  5384                           	opt stack 0
  5385  000061                     ??_printBinary:
  5386  000061                     ?_strichr:
  5387                           	opt stack 0
  5388  000061                     _isdigit$2910:
  5389                           	opt stack 0
  5390  000061                     putsUSART@data:
  5391                           	opt stack 0
  5392  000061                     strichr@ptr:
  5393                           	opt stack 0
  5394                           
  5395                           ; 2 bytes @ 0x1
  5396  000061                     	ds	1
  5397  000062                     Write_b_eep@bdat:
  5398                           	opt stack 0
  5399  000062                     OpenUSART@config:
  5400                           	opt stack 0
  5401  000062                     isdigit@c:
  5402                           	opt stack 0
  5403  000062                     fifo_init@buf:
  5404                           	opt stack 0
  5405  000062                     fifo_read@buf:
  5406                           	opt stack 0
  5407  000062                     init_crc8@j:
  5408                           	opt stack 0
  5409  000062                     WriteTimer0@timer:
  5410                           	opt stack 0
  5411  000062                     ___lwdiv@divisor:
  5412                           	opt stack 0
  5413  000062                     ___lwmod@divisor:
  5414                           	opt stack 0
  5415  000062                     memcpy@s1:
  5416                           	opt stack 0
  5417  000062                     memset@c:
  5418                           	opt stack 0
  5419  000062                     strcat@from:
  5420                           	opt stack 0
  5421  000062                     strchr@chr:
  5422                           	opt stack 0
  5423  000062                     strcpy@from:
  5424                           	opt stack 0
  5425  000062                     strlen@cp:
  5426                           	opt stack 0
  5427  000062                     ___wmul@multiplicand:
  5428                           	opt stack 0
  5429  000062                     __CANIDToRegs@val:
  5430                           	opt stack 0
  5431                           
  5432                           ; 4 bytes @ 0x2
  5433  000062                     	ds	1
  5434  000063                     ??_putsUSART:
  5435  000063                     printBinary@value:
  5436                           	opt stack 0
  5437  000063                     Write_b_eep@GIE_BIT_VAL:
  5438                           	opt stack 0
  5439  000063                     strichr@chr:
  5440                           	opt stack 0
  5441                           
  5442                           ; 2 bytes @ 0x3
  5443  000063                     	ds	1
  5444  000064                     ??_strchr:
  5445  000064                     ??_setFilter:
  5446  000064                     ?_hexStringToBytes:
  5447                           	opt stack 0
  5448  000064                     ?_strnicmp:
  5449                           	opt stack 0
  5450  000064                     init_app_eeprom@i:
  5451                           	opt stack 0
  5452  000064                     init_crc8@crc:
  5453                           	opt stack 0
  5454  000064                     ___lwdiv@counter:
  5455                           	opt stack 0
  5456  000064                     ___lwmod@counter:
  5457                           	opt stack 0
  5458  000064                     printBinary@i:
  5459                           	opt stack 0
  5460  000064                     fifo_init@size:
  5461                           	opt stack 0
  5462  000064                     fifo_read@nbytes:
  5463                           	opt stack 0
  5464  000064                     hexStringToBytes@buf:
  5465                           	opt stack 0
  5466  000064                     memcpy@n:
  5467                           	opt stack 0
  5468  000064                     memset@n:
  5469                           	opt stack 0
  5470  000064                     strcat@cp:
  5471                           	opt stack 0
  5472  000064                     strcpy@cp:
  5473                           	opt stack 0
  5474  000064                     strnicmp@s1:
  5475                           	opt stack 0
  5476  000064                     ___wmul@product:
  5477                           	opt stack 0
  5478  000064                     ___lldiv@divisor:
  5479                           	opt stack 0
  5480                           
  5481                           ; 4 bytes @ 0x4
  5482  000064                     	ds	1
  5483  000065                     init_crc8@i:
  5484                           	opt stack 0
  5485  000065                     ___lwdiv@quotient:
  5486                           	opt stack 0
  5487                           
  5488                           ; 2 bytes @ 0x5
  5489  000065                     	ds	1
  5490  000066                     ??_fifo_read:
  5491  000066                     ?_atoi:
  5492                           	opt stack 0
  5493  000066                     ?_strspn:
  5494                           	opt stack 0
  5495  000066                     ?_strcspn:
  5496                           	opt stack 0
  5497  000066                     __CANIDToRegs@type:
  5498                           	opt stack 0
  5499  000066                     hexStringToBytes@size:
  5500                           	opt stack 0
  5501  000066                     atoi@s:
  5502                           	opt stack 0
  5503  000066                     memcpy@d:
  5504                           	opt stack 0
  5505  000066                     memset@p:
  5506                           	opt stack 0
  5507  000066                     strnicmp@s2:
  5508                           	opt stack 0
  5509  000066                     strcspn@s1:
  5510                           	opt stack 0
  5511  000066                     strspn@s1:
  5512                           	opt stack 0
  5513                           
  5514                           ; 2 bytes @ 0x6
  5515  000066                     	ds	1
  5516  000067                     ??__CANIDToRegs:
  5517  000067                     ?_crc8:
  5518                           	opt stack 0
  5519  000067                     ?_utoa:
  5520                           	opt stack 0
  5521  000067                     crc8@crc:
  5522                           	opt stack 0
  5523  000067                     hexStringToBytes@inhex:
  5524                           	opt stack 0
  5525  000067                     utoa@buf:
  5526                           	opt stack 0
  5527                           
  5528                           ; 2 bytes @ 0x7
  5529  000067                     	ds	1
  5530  000068                     ??_atoi:
  5531  000068                     ___lldiv@counter:
  5532                           	opt stack 0
  5533  000068                     memcpy@s:
  5534                           	opt stack 0
  5535  000068                     strnicmp@len:
  5536                           	opt stack 0
  5537  000068                     strcspn@s2:
  5538                           	opt stack 0
  5539  000068                     strspn@s2:
  5540                           	opt stack 0
  5541                           
  5542                           ; 2 bytes @ 0x8
  5543  000068                     	ds	1
  5544  000069                     ??_hexStringToBytes:
  5545  000069                     __CANIDToRegs@Value:
  5546                           	opt stack 0
  5547  000069                     crc8@m:
  5548                           	opt stack 0
  5549  000069                     utoa@val:
  5550                           	opt stack 0
  5551  000069                     ___lldiv@quotient:
  5552                           	opt stack 0
  5553                           
  5554                           ; 4 bytes @ 0x9
  5555  000069                     	ds	1
  5556  00006A                     ??_crc8:
  5557  00006A                     ??_strnicmp:
  5558  00006A                     ?_ECANSendMessage:
  5559                           	opt stack 0
  5560  00006A                     setFilter@filter:
  5561                           	opt stack 0
  5562  00006A                     atoi@sign:
  5563                           	opt stack 0
  5564  00006A                     fifo_read@p:
  5565                           	opt stack 0
  5566  00006A                     strcspn@i:
  5567                           	opt stack 0
  5568  00006A                     strspn@i:
  5569                           	opt stack 0
  5570  00006A                     ECANSendMessage@id:
  5571                           	opt stack 0
  5572                           
  5573                           ; 4 bytes @ 0xA
  5574  00006A                     	ds	1
  5575  00006B                     setFilter@sidh:
  5576                           	opt stack 0
  5577  00006B                     atoi@a:
  5578                           	opt stack 0
  5579  00006B                     utoa@base:
  5580                           	opt stack 0
  5581                           
  5582                           ; 2 bytes @ 0xB
  5583  00006B                     	ds	1
  5584  00006C                     ?_sendEscapedUartData:
  5585                           	opt stack 0
  5586  00006C                     ?_calcCRC:
  5587                           	opt stack 0
  5588  00006C                     ?_strtok:
  5589                           	opt stack 0
  5590  00006C                     setFilter@sidl:
  5591                           	opt stack 0
  5592  00006C                     strnicmp@r:
  5593                           	opt stack 0
  5594  00006C                     sendEscapedUartData@pcrc:
  5595                           	opt stack 0
  5596  00006C                     calcCRC@p:
  5597                           	opt stack 0
  5598  00006C                     fifo_read@i:
  5599                           	opt stack 0
  5600  00006C                     hexStringToBytes@len:
  5601                           	opt stack 0
  5602  00006C                     strtok@s1:
  5603                           	opt stack 0
  5604                           
  5605                           ; 2 bytes @ 0xC
  5606  00006C                     	ds	1
  5607  00006D                     ?_stristr:
  5608                           	opt stack 0
  5609  00006D                     ?___llmod:
  5610                           	opt stack 0
  5611  00006D                     setFilter@eidh:
  5612                           	opt stack 0
  5613  00006D                     utoa@v:
  5614                           	opt stack 0
  5615  00006D                     stristr@s1:
  5616                           	opt stack 0
  5617  00006D                     ___llmod@dividend:
  5618                           	opt stack 0
  5619                           
  5620                           ; 4 bytes @ 0xD
  5621  00006D                     	ds	1
  5622  00006E                     ?_getCANFrame:
  5623                           	opt stack 0
  5624  00006E                     sendEscapedUartData@c:
  5625                           	opt stack 0
  5626  00006E                     calcCRC@len:
  5627                           	opt stack 0
  5628  00006E                     setFilter@eidl:
  5629                           	opt stack 0
  5630  00006E                     getCANFrame@pdlc:
  5631                           	opt stack 0
  5632  00006E                     ECANSendMessage@data:
  5633                           	opt stack 0
  5634  00006E                     hexStringToBytes@p:
  5635                           	opt stack 0
  5636  00006E                     strtok@s2:
  5637                           	opt stack 0
  5638                           
  5639                           ; 2 bytes @ 0xE
  5640  00006E                     	ds	1
  5641  00006F                     ?_sendVSCPDriverCommandReply:
  5642                           	opt stack 0
  5643  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5644                           	opt stack 0
  5645  00006F                     sendVSCPDriverAck@crc:
  5646                           	opt stack 0
  5647  00006F                     sendVSCPDriverNack@crc:
  5648                           	opt stack 0
  5649  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5650                           	opt stack 0
  5651  00006F                     sendVSCPModeCapabilities@crc:
  5652                           	opt stack 0
  5653  00006F                     calcCRC@j:
  5654                           	opt stack 0
  5655  00006F                     utoa@c:
  5656                           	opt stack 0
  5657  00006F                     getCANFrame@pdata:
  5658                           	opt stack 0
  5659  00006F                     stristr@s2:
  5660                           	opt stack 0
  5661                           
  5662                           ; 2 bytes @ 0xF
  5663  00006F                     	ds	1
  5664  000070                     ?_itoa:
  5665                           	opt stack 0
  5666  000070                     sendVSCPDriverErrorFrame@crc:
  5667                           	opt stack 0
  5668  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5669                           	opt stack 0
  5670  000070                     calcCRC@crc:
  5671                           	opt stack 0
  5672  000070                     ECANSendMessage@dataLen:
  5673                           	opt stack 0
  5674  000070                     hexStringToBytes@i:
  5675                           	opt stack 0
  5676  000070                     itoa@buf:
  5677                           	opt stack 0
  5678                           
  5679                           ; 2 bytes @ 0x10
  5680  000070                     	ds	1
  5681  000071                     sendVSCPDriverCommandReply@crc:
  5682                           	opt stack 0
  5683  000071                     getCANFrame@pid:
  5684                           	opt stack 0
  5685  000071                     ECANSendMessage@msgFlags:
  5686                           	opt stack 0
  5687  000071                     ___llmod@divisor:
  5688                           	opt stack 0
  5689                           
  5690                           ; 4 bytes @ 0x11
  5691  000071                     	ds	1
  5692  000072                     ??_ECANSendMessage:
  5693  000072                     ?_getVSCPFrame:
  5694                           	opt stack 0
  5695  000072                     getVSCPFrame@pvscptype:
  5696                           	opt stack 0
  5697  000072                     itoa@val:
  5698                           	opt stack 0
  5699  000072                     receiveSendEventCANAL@data:
  5700                           	opt stack 0
  5701  000072                     receiveSendMultiEventCANAL@data:
  5702                           	opt stack 0
  5703                           
  5704                           ; 8 bytes @ 0x12
  5705  000072                     	ds	1
  5706  000073                     getVSCPFrame@pNodeId:
  5707                           	opt stack 0
  5708  000073                     ECANSendMessage@pb:
  5709                           	opt stack 0
  5710                           
  5711                           ; 18 bytes @ 0x13
  5712  000073                     	ds	1
  5713  000074                     getVSCPFrame@pPriority:
  5714                           	opt stack 0
  5715  000074                     itoa@base:
  5716                           	opt stack 0
  5717                           
  5718                           ; 2 bytes @ 0x14
  5719  000074                     	ds	1
  5720  000075                     getVSCPFrame@pSize:
  5721                           	opt stack 0
  5722  000075                     ___llmod@counter:
  5723                           	opt stack 0
  5724                           
  5725                           ; 1 bytes @ 0x15
  5726  000075                     	ds	1
  5727  000076                     ?_sprintf:
  5728                           	opt stack 0
  5729  000076                     ?_ultoa:
  5730                           	opt stack 0
  5731  000076                     getVSCPFrame@pData:
  5732                           	opt stack 0
  5733  000076                     sprintf@sp:
  5734                           	opt stack 0
  5735  000076                     ultoa@buf:
  5736                           	opt stack 0
  5737                           
  5738                           ; 2 bytes @ 0x16
  5739  000076                     	ds	1
  5740  000077                     ??_getVSCPFrame:
  5741                           
  5742                           ; 0 bytes @ 0x17
  5743  000077                     	ds	1
  5744  000078                     sprintf@f:
  5745                           	opt stack 0
  5746  000078                     ultoa@val:
  5747                           	opt stack 0
  5748  000078                     printFirmwareVersion@wrkbuf:
  5749                           	opt stack 0
  5750                           
  5751                           ; 20 bytes @ 0x18
  5752  000078                     	ds	2
  5753  00007A                     receiveSendEventCANAL@i:
  5754                           	opt stack 0
  5755  00007A                     receiveSendMultiEventCANAL@msgcount:
  5756                           	opt stack 0
  5757                           
  5758                           ; 1 bytes @ 0x1A
  5759  00007A                     	ds	1
  5760  00007B                     receiveSendMultiEventCANAL@i:
  5761                           	opt stack 0
  5762  00007B                     getVSCPFrame@pvscpclass:
  5763                           	opt stack 0
  5764  00007B                     receiveSendEventCANAL@id:
  5765                           	opt stack 0
  5766                           
  5767                           ; 4 bytes @ 0x1B
  5768  00007B                     	ds	1
  5769  00007C                     ultoa@base:
  5770                           	opt stack 0
  5771  00007C                     receiveSendMultiEventCANAL@id:
  5772                           	opt stack 0
  5773  00007C                     getVSCPFrame@id:
  5774                           	opt stack 0
  5775                           
  5776                           ; 4 bytes @ 0x1C
  5777  00007C                     	ds	2
  5778  00007E                     ??_sprintf:
  5779  00007E                     ultoa@v:
  5780                           	opt stack 0
  5781                           
  5782                           ; 4 bytes @ 0x1E
  5783  00007E                     	ds	1
  5784  00007F                     receiveSendEventCANAL@dlc:
  5785                           	opt stack 0
  5786                           
  5787                           ; 1 bytes @ 0x1F
  5788  00007F                     	ds	1
  5789  000080                     receiveSendEventCANAL@crc:
  5790                           	opt stack 0
  5791  000080                     receiveSendMultiEventCANAL@dlc:
  5792                           	opt stack 0
  5793                           
  5794                           ; 1 bytes @ 0x20
  5795  000080                     	ds	1
  5796  000081                     receiveSendMultiEventCANAL@crc:
  5797                           	opt stack 0
  5798  000081                     sprintf@idx:
  5799                           	opt stack 0
  5800                           
  5801                           ; 1 bytes @ 0x21
  5802  000081                     	ds	1
  5803  000082                     receiveSendMultiEventCANAL@pos:
  5804                           	opt stack 0
  5805  000082                     ultoa@c:
  5806                           	opt stack 0
  5807  000082                     _sprintf$2024:
  5808                           	opt stack 0
  5809                           
  5810                           ; 2 bytes @ 0x22
  5811  000082                     	ds	1
  5812  000083                     ??_receiveSendEventSLCAN:
  5813                           
  5814                           ; 0 bytes @ 0x23
  5815  000083                     	ds	1
  5816  000084                     _sprintf$2025:
  5817                           	opt stack 0
  5818                           
  5819                           ; 2 bytes @ 0x24
  5820  000084                     	ds	1
  5821  000085                     ECANSendMessage@mode:
  5822                           	opt stack 0
  5823                           
  5824                           ; 1 bytes @ 0x25
  5825  000085                     	ds	1
  5826  000086                     ECANSendMessage@buffers:
  5827                           	opt stack 0
  5828  000086                     _sprintf$2031:
  5829                           	opt stack 0
  5830  000086                     receiveSendEventSLCAN@id:
  5831                           	opt stack 0
  5832                           
  5833                           ; 4 bytes @ 0x26
  5834  000086                     	ds	1
  5835  000087                     ECANSendMessage@j:
  5836                           	opt stack 0
  5837                           
  5838                           ; 1 bytes @ 0x27
  5839  000087                     	ds	1
  5840  000088                     ECANSendMessage@tempBSEL0:
  5841                           	opt stack 0
  5842  000088                     sprintf@ap:
  5843                           	opt stack 0
  5844                           
  5845                           ; 1 bytes @ 0x28
  5846  000088                     	ds	1
  5847  000089                     ECANSendMessage@tempPtr:
  5848                           	opt stack 0
  5849  000089                     sprintf@prec:
  5850                           	opt stack 0
  5851                           
  5852                           ; 2 bytes @ 0x29
  5853  000089                     	ds	1
  5854  00008A                     receiveSendEventSLCAN@dlc:
  5855                           	opt stack 0
  5856                           
  5857                           ; 1 bytes @ 0x2A
  5858  00008A                     	ds	1
  5859  00008B                     ECANSendMessage@temp:
  5860                           	opt stack 0
  5861  00008B                     receiveSendEventSLCAN@i:
  5862                           	opt stack 0
  5863  00008B                     sprintf@width:
  5864                           	opt stack 0
  5865                           
  5866                           ; 2 bytes @ 0x2B
  5867  00008B                     	ds	1
  5868  00008C                     ECANSendMessage@i:
  5869                           	opt stack 0
  5870                           
  5871                           ; 1 bytes @ 0x2C
  5872  00008C                     	ds	1
  5873  00008D                     ECANSendMessage@ptr:
  5874                           	opt stack 0
  5875  00008D                     sprintf@_val:
  5876                           	opt stack 0
  5877                           
  5878                           ; 4 bytes @ 0x2D
  5879  00008D                     	ds	2
  5880  00008F                     ?_sendCANFrame:
  5881                           	opt stack 0
  5882  00008F                     sendCANFrame@id:
  5883                           	opt stack 0
  5884                           
  5885                           ; 4 bytes @ 0x2F
  5886  00008F                     	ds	2
  5887  000091                     sprintf@c:
  5888                           	opt stack 0
  5889                           
  5890                           ; 1 bytes @ 0x31
  5891  000091                     	ds	1
  5892  000092                     sprintf@flag:
  5893                           	opt stack 0
  5894                           
  5895                           ; 2 bytes @ 0x32
  5896  000092                     	ds	1
  5897  000093                     sendCANFrame@dlc:
  5898                           	opt stack 0
  5899                           
  5900                           ; 1 bytes @ 0x33
  5901  000093                     	ds	1
  5902  000094                     ??_receivePrintEventVerbose:
  5903  000094                     _printStatistics$1371:
  5904                           	opt stack 0
  5905  000094                     _printErrors$1396:
  5906                           	opt stack 0
  5907  000094                     sendCANFrame@pdata:
  5908                           	opt stack 0
  5909                           
  5910                           ; 2 bytes @ 0x34
  5911  000094                     	ds	2
  5912  000096                     ??_doModeSLCAN:
  5913  000096                     ??_receiveVSCPModeCanalMsg:
  5914  000096                     ?_sendVSCPFrame:
  5915                           	opt stack 0
  5916  000096                     _printStatistics$1377:
  5917                           	opt stack 0
  5918  000096                     _printErrors$1402:
  5919                           	opt stack 0
  5920  000096                     sendVSCPFrame@vscpclass:
  5921                           	opt stack 0
  5922                           
  5923                           ; 2 bytes @ 0x36
  5924  000096                     	ds	2
  5925  000098                     sendVSCPFrame@vscptype:
  5926                           	opt stack 0
  5927  000098                     _printStatistics$1383:
  5928                           	opt stack 0
  5929  000098                     _printErrors$1408:
  5930                           	opt stack 0
  5931                           
  5932                           ; 2 bytes @ 0x38
  5933  000098                     	ds	1
  5934  000099                     sendVSCPFrame@nodeid:
  5935                           	opt stack 0
  5936  000099                     _receivePrintEventVerbose$1278:
  5937                           	opt stack 0
  5938                           
  5939                           ; 2 bytes @ 0x39
  5940  000099                     	ds	1
  5941  00009A                     sendVSCPFrame@priority:
  5942                           	opt stack 0
  5943  00009A                     _printStatistics$1389:
  5944                           	opt stack 0
  5945  00009A                     _printErrors$1414:
  5946                           	opt stack 0
  5947                           
  5948                           ; 2 bytes @ 0x3A
  5949  00009A                     	ds	1
  5950  00009B                     sendVSCPFrame@size:
  5951                           	opt stack 0
  5952  00009B                     _receivePrintEventVerbose$1283:
  5953                           	opt stack 0
  5954                           
  5955                           ; 2 bytes @ 0x3B
  5956  00009B                     	ds	1
  5957  00009C                     sendVSCPFrame@pData:
  5958                           	opt stack 0
  5959  00009C                     _printErrors$1420:
  5960                           	opt stack 0
  5961                           
  5962                           ; 2 bytes @ 0x3C
  5963  00009C                     	ds	1
  5964  00009D                     ??_sendVSCPFrame:
  5965  00009D                     _receivePrintEventVerbose$1288:
  5966                           	opt stack 0
  5967  00009D                     doModeSLCAN@id:
  5968                           	opt stack 0
  5969                           
  5970                           ; 4 bytes @ 0x3D
  5971  00009D                     	ds	1
  5972  00009E                     _printErrors$1429:
  5973                           	opt stack 0
  5974                           
  5975                           ; 2 bytes @ 0x3E
  5976  00009E                     	ds	1
  5977  00009F                     _receivePrintEventVerbose$1293:
  5978                           	opt stack 0
  5979                           
  5980                           ; 2 bytes @ 0x3F
  5981  00009F                     	ds	2
  5982  0000A1                     doModeSLCAN@dlc:
  5983                           	opt stack 0
  5984  0000A1                     _receivePrintEventVerbose$1298:
  5985                           	opt stack 0
  5986                           
  5987                           ; 2 bytes @ 0x41
  5988  0000A1                     	ds	1
  5989  0000A2                     doModeSLCAN@c:
  5990                           	opt stack 0
  5991                           
  5992                           ; 1 bytes @ 0x42
  5993  0000A2                     	ds	1
  5994  0000A3                     doModeSLCAN@rv:
  5995                           	opt stack 0
  5996  0000A3                     _receivePrintEventVerbose$1303:
  5997                           	opt stack 0
  5998                           
  5999                           ; 2 bytes @ 0x43
  6000  0000A3                     	ds	2
  6001  0000A5                     receivePrintEventVerbose@i:
  6002                           	opt stack 0
  6003                           
  6004                           ; 1 bytes @ 0x45
  6005  0000A5                     	ds	5
  6006  0000AA                     receiveVSCPModeCanalMsg@data:
  6007                           	opt stack 0
  6008                           
  6009                           ; 8 bytes @ 0x4A
  6010  0000AA                     	ds	7
  6011  0000B1                     sendVSCPFrame@id:
  6012                           	opt stack 0
  6013                           
  6014                           ; 4 bytes @ 0x51
  6015  0000B1                     	ds	1
  6016  0000B2                     receiveVSCPModeCanalMsg@id:
  6017                           	opt stack 0
  6018                           
  6019                           ; 4 bytes @ 0x52
  6020  0000B2                     	ds	3
  6021  0000B5                     ?_readRegisterExtended:
  6022                           	opt stack 0
  6023  0000B5                     ?_writeRegisterExtended:
  6024                           	opt stack 0
  6025  0000B5                     ?_readRegister:
  6026                           	opt stack 0
  6027  0000B5                     readRegister@reg:
  6028                           	opt stack 0
  6029  0000B5                     readRegisterExtended@page:
  6030                           	opt stack 0
  6031  0000B5                     writeRegisterExtended@page:
  6032                           	opt stack 0
  6033                           
  6034                           ; 2 bytes @ 0x55
  6035  0000B5                     	ds	1
  6036  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6037                           	opt stack 0
  6038  0000B6                     readRegister@timeout:
  6039                           	opt stack 0
  6040                           
  6041                           ; 2 bytes @ 0x56
  6042  0000B6                     	ds	1
  6043  0000B7                     doModeVscp@c:
  6044                           	opt stack 0
  6045  0000B7                     readRegisterExtended@reg:
  6046                           	opt stack 0
  6047  0000B7                     writeRegisterExtended@reg:
  6048                           	opt stack 0
  6049                           
  6050                           ; 1 bytes @ 0x57
  6051  0000B7                     	ds	1
  6052  0000B8                     readRegister@value:
  6053                           	opt stack 0
  6054  0000B8                     readRegisterExtended@timeout:
  6055                           	opt stack 0
  6056  0000B8                     writeRegisterExtended@timeout:
  6057                           	opt stack 0
  6058                           
  6059                           ; 2 bytes @ 0x58
  6060  0000B8                     	ds	1
  6061  0000B9                     ??_readRegister:
  6062                           
  6063                           ; 0 bytes @ 0x59
  6064  0000B9                     	ds	1
  6065  0000BA                     readRegisterExtended@value:
  6066                           	opt stack 0
  6067  0000BA                     writeRegisterExtended@value:
  6068                           	opt stack 0
  6069                           
  6070                           ; 2 bytes @ 0x5A
  6071  0000BA                     	ds	2
  6072  0000BC                     ??_readRegisterExtended:
  6073  0000BC                     ??_writeRegisterExtended:
  6074                           
  6075                           ; 0 bytes @ 0x5C
  6076  0000BC                     	ds	1
  6077  0000BD                     readRegister@nodeid:
  6078                           	opt stack 0
  6079                           
  6080                           ; 1 bytes @ 0x5D
  6081  0000BD                     	ds	1
  6082  0000BE                     printGUID@nodeid:
  6083                           	opt stack 0
  6084  0000BE                     printMDF@nodeid:
  6085                           	opt stack 0
  6086  0000BE                     printNodeFirmwareVersion@nodeid:
  6087                           	opt stack 0
  6088                           
  6089                           ; 1 bytes @ 0x5E
  6090  0000BE                     	ds	1
  6091  0000BF                     printMDF@value:
  6092                           	opt stack 0
  6093  0000BF                     printGUID@buf:
  6094                           	opt stack 0
  6095  0000BF                     printNodeFirmwareVersion@buf:
  6096                           	opt stack 0
  6097                           
  6098                           ; 3 bytes @ 0x5F
  6099  0000BF                     	ds	1
  6100  0000C0                     readRegisterExtended@nodeid:
  6101                           	opt stack 0
  6102  0000C0                     writeRegisterExtended@nodeid:
  6103                           	opt stack 0
  6104  0000C0                     printMDF@p:
  6105                           	opt stack 0
  6106                           
  6107                           ; 2 bytes @ 0x60
  6108  0000C0                     	ds	2
  6109  0000C2                     printGUID@value:
  6110                           	opt stack 0
  6111  0000C2                     printMDF@i:
  6112                           	opt stack 0
  6113  0000C2                     printNodeFirmwareVersion@value:
  6114                           	opt stack 0
  6115                           
  6116                           ; 1 bytes @ 0x62
  6117  0000C2                     	ds	1
  6118  0000C3                     printGUID@i:
  6119                           	opt stack 0
  6120  0000C3                     printNodeFirmwareVersion@i:
  6121                           	opt stack 0
  6122                           
  6123                           ; 1 bytes @ 0x63
  6124  0000C3                     	ds	1
  6125  0000C4                     _findNodes$1473:
  6126                           	opt stack 0
  6127                           
  6128                           ; 2 bytes @ 0x64
  6129  0000C4                     	ds	2
  6130  0000C6                     findNodes@nFound:
  6131                           	opt stack 0
  6132                           
  6133                           ; 1 bytes @ 0x66
  6134  0000C6                     	ds	1
  6135  0000C7                     findNodes@value:
  6136                           	opt stack 0
  6137                           
  6138                           ; 1 bytes @ 0x67
  6139  0000C7                     	ds	1
  6140  0000C8                     findNodes@i:
  6141                           	opt stack 0
  6142                           
  6143                           ; 1 bytes @ 0x68
  6144  0000C8                     	ds	1
  6145  0000C9                     ??_doModeVerbose:
  6146                           
  6147                           ; 0 bytes @ 0x69
  6148  0000C9                     	ds	20
  6149  0000DD                     
  6150                           ; 2 bytes @ 0x7D
  6151  0000DD                     	ds	2
  6152  0000DF                     
  6153                           ; 3 bytes @ 0x7F
  6154  0000DF                     	ds	3
  6155  0000E2                     ??_main:
  6156                           
  6157                           ; 0 bytes @ 0x82
  6158  0000E2                     	ds	1
  6159  0000E3                     main@c:
  6160                           	opt stack 0
  6161                           
  6162                           ; 1 bytes @ 0x83
  6163  0000E3                     	ds	1
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           indf0	equ	0xFEF
  6172                           postinc0	equ	0xFEE
  6173                           fsr0h	equ	0xFEA
  6174                           fsr0l	equ	0xFE9
  6175                           wreg	equ	0xFE8
  6176                           indf1	equ	0xFE7
  6177                           postinc1	equ	0xFE6
  6178                           postdec1	equ	0xFE5
  6179                           fsr1h	equ	0xFE2
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           plusw2	equ	0xFDB
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189                           	psect	cstackCOMRAM
  6190  000001                     __pcstackCOMRAM:
  6191                           	opt stack 0
  6192  000001                     ?__RegsToCANID:
  6193                           	opt stack 0
  6194  000001                     ?i1_WriteTimer0:
  6195                           	opt stack 0
  6196  000001                     ?_fifo_write:
  6197                           	opt stack 0
  6198  000001                     ?_fifo_getFree:
  6199                           	opt stack 0
  6200  000001                     ?__ECANPointBuffer:
  6201                           	opt stack 0
  6202  000001                     ReadUSART@data:
  6203                           	opt stack 0
  6204  000001                     __RegsToCANID@ptr:
  6205                           	opt stack 0
  6206  000001                     fifo_write@f:
  6207                           	opt stack 0
  6208  000001                     fifo_getFree@f:
  6209                           	opt stack 0
  6210  000001                     i1WriteTimer0@timer0:
  6211                           	opt stack 0
  6212                           
  6213                           ; 2 bytes @ 0x0
  6214  000001                     	ds	2
  6215  000003                     ??_fifo_getFree:
  6216  000003                     __RegsToCANID@val:
  6217                           	opt stack 0
  6218  000003                     fifo_write@buf:
  6219                           	opt stack 0
  6220  000003                     i1WriteTimer0@timer:
  6221                           	opt stack 0
  6222                           
  6223                           ; 2 bytes @ 0x2
  6224  000003                     	ds	1
  6225  000004                     __ECANPointBuffer@b:
  6226                           	opt stack 0
  6227                           
  6228                           ; 1 bytes @ 0x3
  6229  000004                     	ds	1
  6230  000005                     __RegsToCANID@type:
  6231                           	opt stack 0
  6232  000005                     __ECANPointBuffer@pt:
  6233                           	opt stack 0
  6234  000005                     fifo_write@nbytes:
  6235                           	opt stack 0
  6236                           
  6237                           ; 4 bytes @ 0x4
  6238  000005                     	ds	1
  6239  000006                     ??__RegsToCANID:
  6240                           
  6241                           ; 0 bytes @ 0x5
  6242  000006                     	ds	2
  6243  000008                     __RegsToCANID@Value:
  6244                           	opt stack 0
  6245                           
  6246                           ; 2 bytes @ 0x7
  6247  000008                     	ds	1
  6248  000009                     ??_fifo_write:
  6249                           
  6250                           ; 0 bytes @ 0x8
  6251  000009                     	ds	1
  6252  00000A                     ?_ECANReceiveMessage:
  6253                           	opt stack 0
  6254  00000A                     ECANReceiveMessage@id:
  6255                           	opt stack 0
  6256                           
  6257                           ; 2 bytes @ 0x9
  6258  00000A                     	ds	2
  6259  00000C                     ECANReceiveMessage@data:
  6260                           	opt stack 0
  6261                           
  6262                           ; 2 bytes @ 0xB
  6263  00000C                     	ds	1
  6264  00000D                     fifo_write@p:
  6265                           	opt stack 0
  6266                           
  6267                           ; 2 bytes @ 0xC
  6268  00000D                     	ds	1
  6269  00000E                     ECANReceiveMessage@dataLen:
  6270                           	opt stack 0
  6271                           
  6272                           ; 1 bytes @ 0xD
  6273  00000E                     	ds	1
  6274  00000F                     ECANReceiveMessage@msgFlags:
  6275                           	opt stack 0
  6276  00000F                     fifo_write@i:
  6277                           	opt stack 0
  6278                           
  6279                           ; 4 bytes @ 0xE
  6280  00000F                     	ds	1
  6281  000010                     ECANReceiveMessage@savedPtr:
  6282                           	opt stack 0
  6283                           
  6284                           ; 2 bytes @ 0xF
  6285  000010                     	ds	2
  6286  000012                     ECANReceiveMessage@i:
  6287                           	opt stack 0
  6288                           
  6289                           ; 1 bytes @ 0x11
  6290  000012                     	ds	1
  6291  000013                     ECANReceiveMessage@mode:
  6292                           	opt stack 0
  6293                           
  6294                           ; 1 bytes @ 0x12
  6295  000013                     	ds	1
  6296  000014                     ECANReceiveMessage@temp:
  6297                           	opt stack 0
  6298                           
  6299                           ; 1 bytes @ 0x13
  6300  000014                     	ds	1
  6301  000015                     ECANReceiveMessage@ptr:
  6302                           	opt stack 0
  6303                           
  6304                           ; 2 bytes @ 0x14
  6305  000015                     	ds	2
  6306  000017                     ??_Interrupt:
  6307                           
  6308                           ; 0 bytes @ 0x16
  6309  000017                     	ds	9
  6310  000020                     Interrupt@c:
  6311                           	opt stack 0
  6312                           
  6313                           ; 1 bytes @ 0x1F
  6314  000020                     	ds	1
  6315  000021                     Interrupt@fail:
  6316                           	opt stack 0
  6317                           
  6318                           ; 1 bytes @ 0x20
  6319  000021                     	ds	1
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           indf0	equ	0xFEF
  6328                           postinc0	equ	0xFEE
  6329                           fsr0h	equ	0xFEA
  6330                           fsr0l	equ	0xFE9
  6331                           wreg	equ	0xFE8
  6332                           indf1	equ	0xFE7
  6333                           postinc1	equ	0xFE6
  6334                           postdec1	equ	0xFE5
  6335                           fsr1h	equ	0xFE2
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           plusw2	equ	0xFDB
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;;
  6346 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6347 ;;
  6348 ;; *************** function _main *****************
  6349 ;; Defined at:
  6350 ;;		line 276 in file "main.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  argc            2  125[BANK0 ] int 
  6353 ;;  argv            3  127[BANK0 ] PTR PTR unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  c               1  131[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  2  125[BANK0 ] int 
  6358 ;; Registers used:
  6359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : F/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6365 ;;      Params:         0       5       0       0       0       0       0
  6366 ;;      Locals:         0       1       0       0       0       0       0
  6367 ;;      Temps:          0       1       0       0       0       0       0
  6368 ;;      Totals:         0       7       0       0       0       0       0
  6369 ;;Total ram usage:        7 bytes
  6370 ;; Hardware stack levels required when called:   11
  6371 ;; This function calls:
  6372 ;;		_fifo_init
  6373 ;;		_init_crc8
  6374 ;;		_Read_b_eep
  6375 ;;		_vscp_restoreDefaults
  6376 ;;		_init
  6377 ;;		_putsUSART
  6378 ;;		_printFirmwareVersion
  6379 ;;		_printMode
  6380 ;;		_fifo_read
  6381 ;;		_doModeVerbose
  6382 ;;		_doModeVscp
  6383 ;;		_doModeSLCAN
  6384 ;;		_doModeVscpNode
  6385 ;; This function is called by:
  6386 ;;		Startup code after reset
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text0
  6391  003C26                     __ptext0:
  6392                           	opt stack 0
  6393  003C26                     _main:
  6394                           	opt stack 19
  6395                           
  6396                           ;main.c: 278: caps.maxVscpFrames = 1;
  6397                           
  6398                           ;incstack = 0
  6399                           ;incstack = 0
  6400  003C26  0E01               	movlw	1
  6401  003C28  0101               	movlb	1	; () banked
  6402  003C2A  6FE7               	movwf	_caps& (0+255),b
  6403                           
  6404                           ;main.c: 279: caps.maxCanalFrames = 1;
  6405  003C2C  6FE8               	movwf	(_caps+1)& (0+255),b
  6406                           
  6407                           ; BSR set to: 1
  6408                           ;main.c: 284: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6409  003C2E  0E01               	movlw	high _serialInputFifo
  6410  003C30  0100               	movlb	0	; () banked
  6411  003C32  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6412  003C34  0EDB               	movlw	low _serialInputFifo
  6413  003C36  6F60               	movwf	?_fifo_init& (0+255),b
  6414  003C38  0E02               	movlw	high _serial_inputBuffer
  6415  003C3A  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6416  003C3C  0E00               	movlw	low _serial_inputBuffer
  6417  003C3E  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6418  003C40  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6419  003C42  0E80               	movlw	128
  6420  003C44  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6421  003C46  ECF2  F00C         	call	_fifo_init	;wreg free
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;main.c: 285: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6425  003C4A  0E01               	movlw	high _canInputFifo
  6426  003C4C  0100               	movlb	0	; () banked
  6427  003C4E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6428  003C50  0ECB               	movlw	low _canInputFifo
  6429  003C52  6F60               	movwf	?_fifo_init& (0+255),b
  6430  003C54  0E04               	movlw	high _can_inputBuffer
  6431  003C56  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6432  003C58  0E00               	movlw	low _can_inputBuffer
  6433  003C5A  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6434  003C5C  0E01               	movlw	1
  6435  003C5E  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6436  003C60  0EEE               	movlw	238
  6437  003C62  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6438  003C64  ECF2  F00C         	call	_fifo_init	;wreg free
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;main.c: 288: init_crc8();
  6442  003C68  ECA9  F00F         	call	_init_crc8	;wreg free
  6443                           
  6444                           ; BSR set to: 1
  6445                           ;main.c: 292: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6446                           ;main.c: 293: ( 0xaa != Read_b_eep(0x02) ) ) {
  6447  003C6C  0100               	movlb	0	; () banked
  6448  003C6E  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6449  003C70  0E01               	movlw	1
  6450  003C72  6F60               	movwf	?_Read_b_eep& (0+255),b
  6451  003C74  EC66  F00B         	call	_Read_b_eep	;wreg free
  6452  003C78  0A55               	xorlw	85
  6453  003C7A  E108               	bnz	l13383
  6454  003C7C  0100               	movlb	0	; () banked
  6455  003C7E  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6456  003C80  0E02               	movlw	2
  6457  003C82  6F60               	movwf	?_Read_b_eep& (0+255),b
  6458  003C84  EC66  F00B         	call	_Read_b_eep	;wreg free
  6459  003C88  0AAA               	xorlw	170
  6460  003C8A  A4D8               	btfss	status,2,c
  6461  003C8C                     l13383:
  6462                           
  6463                           ;main.c: 294: vscp_restoreDefaults();
  6464  003C8C  EC59  F00B         	call	_vscp_restoreDefaults	;wreg free
  6465                           
  6466                           ;main.c: 295: }
  6467                           ;main.c: 298: init();
  6468  003C90  EC97  F00D         	call	_init	;wreg free
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;main.c: 302: _delay((unsigned long)((10)*(40000000/4000.0)));
  6472  003C94  0E82               	movlw	130
  6473  003C96  6FE2               	movwf	??_main& (0+255),b
  6474  003C98  0EDD               	movlw	221
  6475  003C9A                     u22737:
  6476  003C9A  2EE8               	decfsz	wreg,f,c
  6477  003C9C  D7FE               	goto	u22737
  6478  003C9E  2FE2               	decfsz	??_main& (0+255),f,b
  6479  003CA0  D7FC               	goto	u22737
  6480  003CA2  D000               	nop2	
  6481                           
  6482                           ;main.c: 306: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6483  003CA4  0E76               	movlw	high STR_1
  6484  003CA6  0100               	movlb	0	; () banked
  6485  003CA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6486  003CAA  0E30               	movlw	low STR_1
  6487  003CAC  6F61               	movwf	?_putsUSART& (0+255),b
  6488  003CAE  EC2D  F00E         	call	_putsUSART	;wreg free
  6489                           
  6490                           ;main.c: 307: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6491  003CB2  0E6F               	movlw	high STR_2
  6492  003CB4  0100               	movlb	0	; () banked
  6493  003CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6494  003CB8  0ED2               	movlw	low STR_2
  6495  003CBA  6F61               	movwf	?_putsUSART& (0+255),b
  6496  003CBC  EC2D  F00E         	call	_putsUSART	;wreg free
  6497                           
  6498                           ;main.c: 308: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6499  003CC0  0E76               	movlw	high STR_3
  6500  003CC2  0100               	movlb	0	; () banked
  6501  003CC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6502  003CC6  0E9E               	movlw	low STR_3
  6503  003CC8  6F61               	movwf	?_putsUSART& (0+255),b
  6504  003CCA  EC2D  F00E         	call	_putsUSART	;wreg free
  6505                           
  6506                           ;main.c: 309: printFirmwareVersion();
  6507  003CCE  EC50  F011         	call	_printFirmwareVersion	;wreg free
  6508                           
  6509                           ;main.c: 310: printMode();
  6510  003CD2  EC1C  F010         	call	_printMode	;wreg free
  6511                           
  6512                           ;main.c: 314: if ( 0 != mode ) {
  6513  003CD6  0100               	movlb	0	; () banked
  6514  003CD8  51E6               	movf	_mode& (0+255),w,b
  6515  003CDA  E036               	bz	l13417
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;main.c: 316: uint8_t c;
  6519                           ;main.c: 318: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6520  003CDC  0E70               	movlw	high STR_4
  6521  003CDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6522  003CE0  0EEB               	movlw	low STR_4
  6523  003CE2  6F61               	movwf	?_putsUSART& (0+255),b
  6524  003CE4  EC2D  F00E         	call	_putsUSART	;wreg free
  6525                           
  6526                           ;main.c: 320: timekeeper = 0;
  6527  003CE8  6A22               	clrf	_timekeeper,c	;volatile
  6528  003CEA  6A23               	clrf	_timekeeper+1,c	;volatile
  6529  003CEC  6A24               	clrf	_timekeeper+2,c	;volatile
  6530  003CEE  6A25               	clrf	_timekeeper+3,c	;volatile
  6531                           
  6532                           ;main.c: 321: ledFunctionality = 6;
  6533  003CF0  0E06               	movlw	6
  6534  003CF2  6E30               	movwf	_ledFunctionality,c
  6535                           
  6536                           ;main.c: 322: while (timekeeper < 3000) {
  6537  003CF4  D020               	goto	l13415
  6538  003CF6                     l435:
  6539  003CF6  0004               	clrwdt		;# 
  6540                           
  6541                           ;main.c: 324: (INTCONbits.GIE = 0);
  6542  003CF8  9EF2               	bcf	intcon,7,c	;volatile
  6543                           
  6544                           ;main.c: 325: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6545  003CFA  0E01               	movlw	high _serialInputFifo
  6546  003CFC  0100               	movlb	0	; () banked
  6547  003CFE  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6548  003D00  0EDB               	movlw	low _serialInputFifo
  6549  003D02  6F60               	movwf	?_fifo_read& (0+255),b
  6550  003D04  0E00               	movlw	high main@c
  6551  003D06  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6552  003D08  0EE3               	movlw	low main@c
  6553  003D0A  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6554  003D0C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6555  003D0E  0E01               	movlw	1
  6556  003D10  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6557  003D12  EC9D  F016         	call	_fifo_read	;wreg free
  6558  003D16  0560               	decf	?_fifo_read& (0+255),w,b
  6559  003D18  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6560  003D1A  E10C               	bnz	l436
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;main.c: 326: (INTCONbits.GIE = 1);
  6564  003D1C  8EF2               	bsf	intcon,7,c	;volatile
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;main.c: 327: if ('v' == c) {
  6568  003D1E  51E3               	movf	main@c& (0+255),w,b
  6569  003D20  0A76               	xorlw	118
  6570  003D22  E108               	bnz	l436
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;main.c: 328: mode = 0;
  6574  003D24  6BE6               	clrf	_mode& (0+255),b
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;main.c: 329: putsUSART((char *) "Temporary verbose mode set\r\n");
  6578  003D26  0E78               	movlw	high STR_5
  6579  003D28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6580  003D2A  0E2B               	movlw	low STR_5
  6581  003D2C  6F61               	movwf	?_putsUSART& (0+255),b
  6582  003D2E  EC2D  F00E         	call	_putsUSART	;wreg free
  6583                           
  6584                           ;main.c: 330: break;
  6585  003D32  D00A               	goto	l13417
  6586  003D34                     l436:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;main.c: 331: }
  6590                           ;main.c: 332: }
  6591                           ;main.c: 333: (INTCONbits.GIE = 1);
  6592  003D34  8EF2               	bsf	intcon,7,c	;volatile
  6593  003D36                     l13415:
  6594  003D36  0EB8               	movlw	184
  6595  003D38  5C22               	subwf	_timekeeper,w,c	;volatile
  6596  003D3A  0E0B               	movlw	11
  6597  003D3C  5823               	subwfb	_timekeeper+1,w,c	;volatile
  6598  003D3E  0E00               	movlw	0
  6599  003D40  5824               	subwfb	_timekeeper+2,w,c	;volatile
  6600  003D42  0E00               	movlw	0
  6601  003D44  5825               	subwfb	_timekeeper+3,w,c	;volatile
  6602  003D46  E3D7               	bnc	l435
  6603  003D48                     l13417:
  6604                           
  6605                           ;main.c: 334: }
  6606                           ;main.c: 335: }
  6607                           ;main.c: 337: ledFunctionality = 1;
  6608  003D48  0E01               	movlw	1
  6609  003D4A  6E30               	movwf	_ledFunctionality,c
  6610  003D4C                     l439:
  6611  003D4C  0004               	clrwdt		;# 
  6612                           
  6613                           ;main.c: 348: if (COMSTATbits.TXBO) {
  6614  003D4E  AA74               	btfss	3956,5,c	;volatile
  6615  003D50  D002               	goto	l440
  6616                           
  6617                           ;main.c: 350: ledFunctionality = 6;
  6618  003D52  0E06               	movlw	6
  6619  003D54  D009               	goto	L1
  6620  003D56                     l440:
  6621                           
  6622                           ;main.c: 352: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6623  003D56  B874               	btfsc	3956,4,c	;volatile
  6624  003D58  D002               	goto	l13425
  6625  003D5A  A674               	btfss	3956,3,c	;volatile
  6626  003D5C  D002               	goto	l442
  6627  003D5E                     l13425:
  6628                           
  6629                           ;main.c: 354: ledFunctionality = 5;
  6630  003D5E  0E05               	movlw	5
  6631  003D60  D003               	goto	L1
  6632  003D62                     l442:
  6633                           
  6634                           ;main.c: 358: ledFunctionality = 4;
  6635  003D62  0E04               	movlw	4
  6636                           
  6637                           ;main.c: 356: else if (COMSTATbits.EWARN) {
  6638  003D64  A074               	btfss	3956,0,c	;volatile
  6639                           
  6640                           ;main.c: 360: else {
  6641                           ;main.c: 362: ledFunctionality = 1;
  6642                           
  6643                           ;main.c: 359: }
  6644  003D66  0E01               	movlw	1
  6645  003D68                     L1:
  6646  003D68  6E30               	movwf	_ledFunctionality,c
  6647                           
  6648                           ;main.c: 363: }
  6649                           ;main.c: 366: if (COMSTATbits.RXBnOVFL) {
  6650  003D6A  AC74               	btfss	3956,6,c	;volatile
  6651  003D6C  D007               	goto	l13437
  6652                           
  6653                           ;main.c: 367: can_receiveOverruns++;
  6654  003D6E  0101               	movlb	1	; () banked
  6655  003D70  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6656  003D72  0E00               	movlw	0
  6657  003D74  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6658  003D76  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6659  003D78  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6660                           
  6661                           ; BSR set to: 1
  6662                           ;main.c: 368: COMSTATbits.RXBnOVFL = 0;
  6663  003D7A  9C74               	bcf	3956,6,c	;volatile
  6664  003D7C                     l13437:
  6665                           
  6666                           ;main.c: 369: }
  6667                           ;main.c: 371: if (0 == mode) {
  6668  003D7C  0100               	movlb	0	; () banked
  6669  003D7E  67E6               	tstfsz	_mode& (0+255),b
  6670  003D80  D003               	goto	l13441
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;main.c: 372: doModeVerbose();
  6674  003D82  EC4A  F02C         	call	_doModeVerbose	;wreg free
  6675                           
  6676                           ;main.c: 373: }
  6677  003D86  D7E2               	goto	l439
  6678  003D88                     l13441:
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 374: else if (1 == mode) {
  6682  003D88  05E6               	decf	_mode& (0+255),w,b
  6683  003D8A  E103               	bnz	l13445
  6684  003D8C                     l13443:
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;main.c: 375: doModeVscp();
  6688  003D8C  EC46  F021         	call	_doModeVscp	;wreg free
  6689                           
  6690                           ;main.c: 376: }
  6691  003D90  D7DD               	goto	l439
  6692  003D92                     l13445:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;main.c: 377: else if (2 == mode) {
  6696  003D92  51E6               	movf	_mode& (0+255),w,b
  6697  003D94  0A02               	xorlw	2
  6698  003D96  E103               	bnz	l13449
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;main.c: 378: doModeSLCAN();
  6702  003D98  ECBC  F026         	call	_doModeSLCAN	;wreg free
  6703                           
  6704                           ;main.c: 379: }
  6705  003D9C  D7D7               	goto	l439
  6706  003D9E                     l13449:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;main.c: 380: else if (3 == mode) {
  6710  003D9E  51E6               	movf	_mode& (0+255),w,b
  6711  003DA0  0A03               	xorlw	3
  6712  003DA2  E1F4               	bnz	l13443
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;main.c: 381: doModeVscpNode();
  6716  003DA4  EC55  F00B         	call	_doModeVscpNode	;wreg free
  6717                           
  6718                           ;main.c: 382: }
  6719  003DA8  D7D1               	goto	l439
  6720  003DAA                     __end_of_main:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           indf0	equ	0xFEF
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           indf1	equ	0xFE7
  6735                           postinc1	equ	0xFE6
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           postdec2	equ	0xFDD
  6742                           plusw2	equ	0xFDB
  6743                           fsr2h	equ	0xFDA
  6744                           fsr2l	equ	0xFD9
  6745                           status	equ	0xFD8
  6746                           
  6747 ;; *************** function _doModeVscpNode *****************
  6748 ;; Defined at:
  6749 ;;		line 1565 in file "main.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;		None               void
  6756 ;; Registers used:
  6757 ;;		None
  6758 ;; Tracked objects:
  6759 ;;		On entry : F/0
  6760 ;;		On exit  : F/0
  6761 ;;		Unchanged: F/0
  6762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6763 ;;      Params:         0       0       0       0       0       0       0
  6764 ;;      Locals:         0       0       0       0       0       0       0
  6765 ;;      Temps:          0       0       0       0       0       0       0
  6766 ;;      Totals:         0       0       0       0       0       0       0
  6767 ;;Total ram usage:        0 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    3
  6770 ;; This function calls:
  6771 ;;		Nothing
  6772 ;; This function is called by:
  6773 ;;		_main
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text1
  6778  0016AA                     __ptext1:
  6779                           	opt stack 0
  6780  0016AA                     _doModeVscpNode:
  6781                           	opt stack 26
  6782                           
  6783                           ; BSR set to: 0
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;incstack = 0
  6787                           ;incstack = 0
  6788  0016AA  0012               	return	
  6789  0016AC                     __end_of_doModeVscpNode:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           indf0	equ	0xFEF
  6799                           postinc0	equ	0xFEE
  6800                           fsr0h	equ	0xFEA
  6801                           fsr0l	equ	0xFE9
  6802                           wreg	equ	0xFE8
  6803                           indf1	equ	0xFE7
  6804                           postinc1	equ	0xFE6
  6805                           postdec1	equ	0xFE5
  6806                           fsr1h	equ	0xFE2
  6807                           fsr1l	equ	0xFE1
  6808                           indf2	equ	0xFDF
  6809                           postinc2	equ	0xFDE
  6810                           postdec2	equ	0xFDD
  6811                           plusw2	equ	0xFDB
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _doModeSLCAN *****************
  6817 ;; Defined at:
  6818 ;;		line 1347 in file "main.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;  id              4   61[BANK0 ] unsigned long 
  6823 ;;  dlc             1   65[BANK0 ] unsigned char 
  6824 ;;  rv              1   67[BANK0 ] enum E15660
  6825 ;;  c               1   66[BANK0 ] unsigned char 
  6826 ;; Return value:  Size  Location     Type
  6827 ;;		None               void
  6828 ;; Registers used:
  6829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6830 ;; Tracked objects:
  6831 ;;		On entry : F/0
  6832 ;;		On exit  : F/0
  6833 ;;		Unchanged: 0/0
  6834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6835 ;;      Params:         0       0       0       0       0       0       0
  6836 ;;      Locals:         0       7       0       0       0       0       0
  6837 ;;      Temps:          0       7       0       0       0       0       0
  6838 ;;      Totals:         0      14       0       0       0       0       0
  6839 ;;Total ram usage:       14 bytes
  6840 ;; Hardware stack levels used:    1
  6841 ;; Hardware stack levels required when called:    7
  6842 ;; This function calls:
  6843 ;;		_putsUSART
  6844 ;;		_fifo_read
  6845 ;;		_Busy_eep
  6846 ;;		_Write_b_eep
  6847 ;;		_ECANSetOperationMode
  6848 ;;		_memset
  6849 ;;		_receiveSendEventSLCAN
  6850 ;;		_strlen
  6851 ;;		_hexStringToBytes
  6852 ;;		_memcpy
  6853 ;;		_sendCANFrame
  6854 ;; This function is called by:
  6855 ;;		_main
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text2
  6860  004D78                     __ptext2:
  6861                           	opt stack 0
  6862  004D78                     _doModeSLCAN:
  6863                           	opt stack 22
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;main.c: 1348: uint8_t c;
  6867                           ;main.c: 1349: BOOL rv = 0;
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;incstack = 0
  6871                           ;incstack = 0
  6872  004D78  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;main.c: 1352: receiveSendEventSLCAN();
  6876  004D7A  ECD5  F01E         	call	_receiveSendEventSLCAN	;wreg free
  6877                           
  6878                           ;main.c: 1355: (INTCONbits.GIE = 0);
  6879  004D7E  9EF2               	bcf	intcon,7,c	;volatile
  6880                           
  6881                           ;main.c: 1357: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6882  004D80  0E01               	movlw	high _serialInputFifo
  6883  004D82  0100               	movlb	0	; () banked
  6884  004D84  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6885  004D86  0EDB               	movlw	low _serialInputFifo
  6886  004D88  6F60               	movwf	?_fifo_read& (0+255),b
  6887  004D8A  0E00               	movlw	high doModeSLCAN@c
  6888  004D8C  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6889  004D8E  0EA2               	movlw	low doModeSLCAN@c
  6890  004D90  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6891  004D92  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6892  004D94  0E01               	movlw	1
  6893  004D96  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6894  004D98  EC9D  F016         	call	_fifo_read	;wreg free
  6895  004D9C  0560               	decf	?_fifo_read& (0+255),w,b
  6896  004D9E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6897  004DA0  E001 D1D0          	bnz	l14523
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 1360: (INTCONbits.GIE = 1);
  6901  004DA4  8EF2               	bsf	intcon,7,c	;volatile
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;main.c: 1362: if (0x0d != c) {
  6905  004DA6  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6906  004DA8  0A0D               	xorlw	13
  6907  004DAA  E101 D17F          	bz	l14511
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 1363: cmdbuf[ pos ] = c;
  6911  004DAE  EC20  F022         	call	PL24	;call to abstracted procedure
  6912  004DB2  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 1364: pos++;
  6916  004DB6  2BE7               	incf	_pos& (0+255),f,b
  6917  004DB8  D1C6               	goto	l723
  6918  004DBA                     l14383:
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;main.c: 1372: if (1 == strlen(cmdbuf)) {
  6922  004DBA  0E01               	movlw	high _cmdbuf
  6923  004DBC  0100               	movlb	0	; () banked
  6924  004DBE  6F61               	movwf	(?_strlen+1)& (0+255),b
  6925  004DC0  0E2B               	movlw	low _cmdbuf
  6926  004DC2  6F60               	movwf	?_strlen& (0+255),b
  6927  004DC4  EC12  F00D         	call	_strlen	;wreg free
  6928  004DC8  0560               	decf	?_strlen& (0+255),w,b
  6929  004DCA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6930  004DCC  E001 D19D          	bnz	l14513
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;main.c: 1373: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6934  004DD0  0E7A               	movlw	high STR_133
  6935  004DD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6936  004DD4  0E5B               	movlw	low STR_133
  6937  004DD6  6F61               	movwf	?_putsUSART& (0+255),b
  6938  004DD8  EC2D  F00E         	call	_putsUSART	;wreg free
  6939  004DDC                     l14387:
  6940                           
  6941                           ;main.c: 1374: rv = 1;
  6942  004DDC  0E01               	movlw	1
  6943  004DDE  D11D               	goto	L4
  6944  004DE0                     l14389:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;main.c: 1380: if (1 == strlen(cmdbuf)) {
  6948  004DE0  0E01               	movlw	high _cmdbuf
  6949  004DE2  0100               	movlb	0	; () banked
  6950  004DE4  6F61               	movwf	(?_strlen+1)& (0+255),b
  6951  004DE6  0E2B               	movlw	low _cmdbuf
  6952  004DE8  6F60               	movwf	?_strlen& (0+255),b
  6953  004DEA  EC12  F00D         	call	_strlen	;wreg free
  6954  004DEE  0560               	decf	?_strlen& (0+255),w,b
  6955  004DF0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6956  004DF2  E001 D18A          	bnz	l14513
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;main.c: 1381: putsUSART((char *) "V1011\r\n");
  6960  004DF6  0E7B               	movlw	high STR_134
  6961  004DF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6962  004DFA  0ED6               	movlw	low STR_134
  6963  004DFC  6F61               	movwf	?_putsUSART& (0+255),b
  6964  004DFE  EC2D  F00E         	call	_putsUSART	;wreg free
  6965  004E02  D7EC               	goto	l14387
  6966  004E04                     l14395:
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;main.c: 1388: if (1 == strlen(cmdbuf)) {
  6970  004E04  0E01               	movlw	high _cmdbuf
  6971  004E06  0100               	movlb	0	; () banked
  6972  004E08  6F61               	movwf	(?_strlen+1)& (0+255),b
  6973  004E0A  0E2B               	movlw	low _cmdbuf
  6974  004E0C  6F60               	movwf	?_strlen& (0+255),b
  6975  004E0E  EC12  F00D         	call	_strlen	;wreg free
  6976  004E12  0560               	decf	?_strlen& (0+255),w,b
  6977  004E14  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6978  004E16  E001 D178          	bnz	l14513
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;main.c: 1389: putsUSART((char *) "N1977\r\n");
  6982  004E1A  0E7B               	movlw	high STR_135
  6983  004E1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6984  004E1E  0EDE               	movlw	low STR_135
  6985  004E20  6F61               	movwf	?_putsUSART& (0+255),b
  6986  004E22  EC2D  F00E         	call	_putsUSART	;wreg free
  6987  004E26  D7DA               	goto	l14387
  6988  004E28                     l14401:
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;main.c: 1398: bInitiated = 1;
  6992  004E28  0E01               	movlw	1
  6993  004E2A  6E2D               	movwf	_bInitiated,c
  6994                           
  6995                           ;main.c: 1399: rv = 1;
  6996  004E2C  D0C1               	goto	L3
  6997  004E2E                     l733:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;main.c: 1404: if (!bOpen) {
  7001  004E2E  67E5               	tstfsz	_bOpen& (0+255),b
  7002  004E30  D003               	goto	l14405
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;main.c: 1405: bInitiated = 1;
  7006  004E32  0E01               	movlw	1
  7007  004E34  6E2D               	movwf	_bInitiated,c
  7008                           
  7009                           ;main.c: 1406: rv = 1;
  7010  004E36  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7011  004E38                     l14405:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 1411: if (1 == strlen(cmdbuf)) {
  7015  004E38  0E01               	movlw	high _cmdbuf
  7016  004E3A  0100               	movlb	0	; () banked
  7017  004E3C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7018  004E3E  0E2B               	movlw	low _cmdbuf
  7019  004E40  6F60               	movwf	?_strlen& (0+255),b
  7020  004E42  EC12  F00D         	call	_strlen	;wreg free
  7021  004E46  0560               	decf	?_strlen& (0+255),w,b
  7022  004E48  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7023  004E4A  E001 D15E          	bnz	l14513
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;main.c: 1412: if (!bOpen && bInitiated) {
  7027  004E4E  67E5               	tstfsz	_bOpen& (0+255),b
  7028  004E50  D15C               	goto	l14513
  7029                           
  7030                           ; BSR set to: 0
  7031  004E52  502D               	movf	_bInitiated,w,c
  7032  004E54  E101 D159          	bz	l14513
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;main.c: 1413: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7036  004E58  0E00               	movlw	0
  7037  004E5A  EC8D  F00B         	call	_ECANSetOperationMode
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;main.c: 1414: bOpen = 1;
  7041  004E5E  0E01               	movlw	1
  7042  004E60  6FE5               	movwf	_bOpen& (0+255),b
  7043  004E62  D7BC               	goto	l14387
  7044  004E64                     l14417:
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;main.c: 1422: if (1 == strlen(cmdbuf)) {
  7048  004E64  0E01               	movlw	high _cmdbuf
  7049  004E66  0100               	movlb	0	; () banked
  7050  004E68  6F61               	movwf	(?_strlen+1)& (0+255),b
  7051  004E6A  0E2B               	movlw	low _cmdbuf
  7052  004E6C  6F60               	movwf	?_strlen& (0+255),b
  7053  004E6E  EC12  F00D         	call	_strlen	;wreg free
  7054  004E72  0560               	decf	?_strlen& (0+255),w,b
  7055  004E74  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7056  004E76  E001 D148          	bnz	l14513
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;main.c: 1423: if (bOpen) {
  7060  004E7A  51E5               	movf	_bOpen& (0+255),w,b
  7061  004E7C  E0AF               	bz	l14387
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;main.c: 1424: ECANSetOperationMode(0x20);
  7065  004E7E  0E20               	movlw	32
  7066  004E80  EC8D  F00B         	call	_ECANSetOperationMode
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;main.c: 1425: bOpen = 0;
  7070  004E84  6BE5               	clrf	_bOpen& (0+255),b
  7071  004E86  D7AA               	goto	l14387
  7072  004E88                     l14427:
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;main.c: 1438: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7076  004E88  51E5               	movf	_bOpen& (0+255),w,b
  7077  004E8A  E101 D13E          	bz	l14513
  7078                           
  7079                           ; BSR set to: 0
  7080  004E8E  0E01               	movlw	high _cmdbuf
  7081  004E90  0100               	movlb	0	; () banked
  7082  004E92  6F61               	movwf	(?_strlen+1)& (0+255),b
  7083  004E94  0E2B               	movlw	low _cmdbuf
  7084  004E96  6F60               	movwf	?_strlen& (0+255),b
  7085  004E98  EC12  F00D         	call	_strlen	;wreg free
  7086  004E9C  0E0A               	movlw	10
  7087  004E9E  5D60               	subwf	?_strlen& (0+255),w,b
  7088  004EA0  0E00               	movlw	0
  7089  004EA2  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7090  004EA4  E201 D131          	bnc	l14513
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;main.c: 1440: uint32_t id;
  7094                           ;main.c: 1441: uint8_t dlc;
  7095                           ;main.c: 1443: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7096  004EA8  0E01               	movlw	high _wrkbuf
  7097  004EAA  0100               	movlb	0	; () banked
  7098  004EAC  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7099  004EAE  0E7B               	movlw	low _wrkbuf
  7100  004EB0  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7101  004EB2  0E50               	movlw	80
  7102  004EB4  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7103  004EB6  0E01               	movlw	high _cmdbuf
  7104  004EB8  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7105  004EBA  0E2B               	movlw	low _cmdbuf
  7106  004EBC  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7107  004EBE  EC2A  F012         	call	_hexStringToBytes	;wreg free
  7108  004EC2  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7109  004EC4  0E05               	movlw	5
  7110  004EC6  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7111  004EC8  E201 D11F          	bnc	l14513
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;main.c: 1445: }
  7115                           ;main.c: 1447: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7116  004ECC  C17E  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7117  004ED0  0E08               	movlw	8
  7118  004ED2  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7119  004ED4  C17D  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7120  004ED8  0E10               	movlw	16
  7121  004EDA  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7122  004EDC  C17C  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7123  004EE0  0E18               	movlw	24
  7124  004EE2  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7125  004EE4  C17B  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7126  004EE8  0100               	movlb	0	; () banked
  7127  004EEA  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7128  004EEC  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7129  004EEE  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7130  004EF0  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7131  004EF2  D001               	goto	u19420
  7132  004EF4                     u19425:
  7133  004EF4  D929               	call	PL78	;call to abstracted procedure
  7134  004EF6                     u19420:
  7135  004EF6  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7136  004EF8  D7FD               	goto	u19425
  7137  004EFA  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7138  004EFC  D001               	goto	u19430
  7139  004EFE                     u19435:
  7140  004EFE  D924               	call	PL78	;call to abstracted procedure
  7141  004F00                     u19430:
  7142  004F00  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7143  004F02  D7FD               	goto	u19435
  7144  004F04  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7145  004F06  D001               	goto	u19440
  7146  004F08                     u19445:
  7147  004F08  D91F               	call	PL78	;call to abstracted procedure
  7148  004F0A                     u19440:
  7149  004F0A  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7150  004F0C  D7FD               	goto	u19445
  7151  004F0E  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7152  004F12  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7153  004F16  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7154  004F1A  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;main.c: 1448: dlc = vscpData[4];
  7158  004F1E  C038  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;main.c: 1451: if (dlc > 8) break;
  7162  004F22  0E08               	movlw	8
  7163  004F24  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7164  004F26  D001               	goto	l14443
  7165  004F28  D0F0               	goto	l14513
  7166  004F2A                     l14443:
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;main.c: 1452: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7170  004F2A  90D8               	bcf	status,0,c
  7171  004F2C  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7172  004F2E  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7173  004F30  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7174  004F32  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7175  004F34  0E0A               	movlw	10
  7176  004F36  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7177  004F38  0E00               	movlw	0
  7178  004F3A  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7179  004F3C  0E01               	movlw	high _cmdbuf
  7180  004F3E  0100               	movlb	0	; () banked
  7181  004F40  6F61               	movwf	(?_strlen+1)& (0+255),b
  7182  004F42  0E2B               	movlw	low _cmdbuf
  7183  004F44  6F60               	movwf	?_strlen& (0+255),b
  7184  004F46  EC12  F00D         	call	_strlen	;wreg free
  7185  004F4A  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7186  004F4C  5D60               	subwf	?_strlen& (0+255),w,b
  7187  004F4E  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7188  004F50  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7189  004F52  E201 D0DA          	bnc	l14513
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;main.c: 1454: memcpy(vscpData, vscpData + 5, dlc);
  7193  004F56  0E34               	movlw	low _vscpData
  7194  004F58  6F60               	movwf	?_memcpy& (0+255),b
  7195  004F5A  0E00               	movlw	high _vscpData
  7196  004F5C  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7197  004F5E  0E0F               	movlw	15
  7198  004F60  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7199  004F62  0E5F               	movlw	__accesstop+-1
  7200  004F64  6560               	cpfsgt	?_memcpy& (0+255),b
  7201  004F66  6B61               	clrf	(?_memcpy+1)& (0+255),b
  7202  004F68  0E39               	movlw	low (_vscpData+5)
  7203  004F6A  6F62               	movwf	(?_memcpy+2)& (0+255),b
  7204  004F6C  0E00               	movlw	high (_vscpData+5)
  7205  004F6E  6F63               	movwf	(?_memcpy+3)& (0+255),b
  7206  004F70  0E0F               	movlw	15
  7207  004F72  6F63               	movwf	(?_memcpy+3)& (0+255),b
  7208  004F74  0E5F               	movlw	__accesstop+-1
  7209  004F76  6562               	cpfsgt	(?_memcpy+2)& (0+255),b
  7210  004F78  6B63               	clrf	(?_memcpy+3)& (0+255),b
  7211  004F7A  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7212  004F7E  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7213  004F80  EC32  F00D         	call	_memcpy	;wreg free
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;main.c: 1456: rv = sendCANFrame(id, dlc, vscpData);
  7217  004F84  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7218  004F88  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7219  004F8C  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7220  004F90  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7221  004F94  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7222  004F98  0E34               	movlw	low _vscpData
  7223  004F9A  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7224  004F9C  0E00               	movlw	high _vscpData
  7225  004F9E  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7226  004FA0  0E0F               	movlw	15
  7227  004FA2  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7228  004FA4  0E5F               	movlw	__accesstop+-1
  7229  004FA6  6594               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
  7230  004FA8  6B95               	clrf	(?_sendCANFrame+6)& (0+255),b
  7231  004FAA  EC78  F00C         	call	_sendCANFrame	;wreg free
  7232  004FAE  D035               	goto	L4
  7233  004FB0                     L3:
  7234  004FB0  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7235  004FB2  D0AB               	goto	l14513
  7236  004FB4                     l14451:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;main.c: 1471: if (bOpen && (strlen(cmdbuf) == 1)) {
  7240  004FB4  51E5               	movf	_bOpen& (0+255),w,b
  7241  004FB6  E101 D0A8          	bz	l14513
  7242                           
  7243                           ; BSR set to: 0
  7244  004FBA  0E01               	movlw	high _cmdbuf
  7245  004FBC  0100               	movlb	0	; () banked
  7246  004FBE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7247  004FC0  0E2B               	movlw	low _cmdbuf
  7248  004FC2  6F60               	movwf	?_strlen& (0+255),b
  7249  004FC4  EC12  F00D         	call	_strlen	;wreg free
  7250  004FC8  0560               	decf	?_strlen& (0+255),w,b
  7251  004FCA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7252  004FCC  E001 D09D          	bnz	l14513
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;main.c: 1472: putsUSART((char *) "F00\r\n");
  7256  004FD0  0E7C               	movlw	high STR_136
  7257  004FD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7258  004FD4  0E7A               	movlw	low STR_136
  7259  004FD6  6F61               	movwf	?_putsUSART& (0+255),b
  7260  004FD8  EC2D  F00E         	call	_putsUSART	;wreg free
  7261  004FDC  D096               	goto	l14513
  7262  004FDE                     l14461:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 1488: if (2 == strlen(cmdbuf)) {
  7266  004FDE  0E01               	movlw	high _cmdbuf
  7267  004FE0  0100               	movlb	0	; () banked
  7268  004FE2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7269  004FE4  0E2B               	movlw	low _cmdbuf
  7270  004FE6  6F60               	movwf	?_strlen& (0+255),b
  7271  004FE8  EC12  F00D         	call	_strlen	;wreg free
  7272  004FEC  5160               	movf	?_strlen& (0+255),w,b
  7273  004FEE  0A02               	xorlw	2
  7274  004FF0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7275  004FF2  E001 D08A          	bnz	l14513
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;main.c: 1489: if (!bOpen) {
  7279  004FF6  67E5               	tstfsz	_bOpen& (0+255),b
  7280  004FF8  D088               	goto	l14513
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;main.c: 1490: if ('0' == cmdbuf[1]) {
  7284  004FFA  0101               	movlb	1	; () banked
  7285  004FFC  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7286  004FFE  0A30               	xorlw	48
  7287  005000  E10E               	bnz	l14473
  7288                           
  7289                           ; BSR set to: 1
  7290                           ;main.c: 1491: nTimeStamp = 0;
  7291  005002  6A31               	clrf	_nTimeStamp,c
  7292                           
  7293                           ; BSR set to: 1
  7294                           ;main.c: 1493: (Busy_eep(), Write_b_eep(0x05,0));
  7295  005004  EC56  F00B         	call	_Busy_eep	;wreg free
  7296  005008  0100               	movlb	0	; () banked
  7297  00500A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7298  00500C  0E05               	movlw	5
  7299  00500E  6F60               	movwf	?_Write_b_eep& (0+255),b
  7300  005010  0E00               	movlw	0
  7301  005012  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7302  005014  EC26  F00C         	call	_Write_b_eep	;wreg free
  7303  005018  D6E1               	goto	l14387
  7304  00501A                     L4:
  7305  00501A  0100               	movlb	0	; () banked
  7306  00501C  D7C9               	goto	L3
  7307  00501E                     l14473:
  7308                           
  7309                           ; BSR set to: 1
  7310  00501E  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7311  005020  0A31               	xorlw	49
  7312  005022  E10D               	bnz	l758
  7313                           
  7314                           ; BSR set to: 1
  7315                           ;main.c: 1496: nTimeStamp = 1;
  7316  005024  0E01               	movlw	1
  7317  005026  6E31               	movwf	_nTimeStamp,c
  7318                           
  7319                           ; BSR set to: 1
  7320                           ;main.c: 1498: (Busy_eep(), Write_b_eep(0x05,1));
  7321  005028  EC56  F00B         	call	_Busy_eep	;wreg free
  7322  00502C  0100               	movlb	0	; () banked
  7323  00502E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7324  005030  0E05               	movlw	5
  7325  005032  6F60               	movwf	?_Write_b_eep& (0+255),b
  7326  005034  0E01               	movlw	1
  7327  005036  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7328  005038  EC26  F00C         	call	_Write_b_eep	;wreg free
  7329  00503C  D6CF               	goto	l14387
  7330  00503E                     l758:
  7331                           
  7332                           ; BSR set to: 1
  7333                           ;main.c: 1502: rv = 0;
  7334  00503E  0100               	movlb	0	; () banked
  7335  005040  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7336  005042  D063               	goto	l14513
  7337  005044                     l14481:
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;main.c: 1510: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7341  005044  EC56  F00B         	call	_Busy_eep	;wreg free
  7342  005048  EC0D  F015         	call	PL58	;call to abstracted procedure
  7343  00504C  EC26  F00C         	call	_Write_b_eep	;wreg free
  7344  005050  00FF               	reset		;# 
  7345                           
  7346                           ;main.c: 1512: break;
  7347  005052  D05B               	goto	l14513
  7348  005054                     l14485:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;main.c: 1516: if ( 'v' == cmdbuf[1] &&
  7352                           ;main.c: 1517: 's' == cmdbuf[2] &&
  7353                           ;main.c: 1518: 'c' == cmdbuf[3] &&
  7354                           ;main.c: 1519: 'p' == cmdbuf[4] ) {
  7355  005054  0101               	movlb	1	; () banked
  7356  005056  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7357  005058  0A76               	xorlw	118
  7358  00505A  E10D               	bnz	l14495
  7359                           
  7360                           ; BSR set to: 1
  7361  00505C  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  7362  00505E  0A73               	xorlw	115
  7363  005060  E10A               	bnz	l14495
  7364                           
  7365                           ; BSR set to: 1
  7366  005062  512E               	movf	(_cmdbuf+3)& (0+255),w,b
  7367  005064  0A63               	xorlw	99
  7368  005066  E107               	bnz	l14495
  7369                           
  7370                           ; BSR set to: 1
  7371  005068  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  7372  00506A  0A70               	xorlw	112
  7373  00506C  E104               	bnz	l14495
  7374                           
  7375                           ; BSR set to: 1
  7376                           ;main.c: 1520: mode = 1;
  7377  00506E  0E01               	movlw	1
  7378  005070  0100               	movlb	0	; () banked
  7379  005072  6FE6               	movwf	_mode& (0+255),b
  7380                           
  7381                           ;main.c: 1521: }
  7382  005074  D04A               	goto	l14513
  7383  005076                     l14495:
  7384                           
  7385                           ; BSR set to: 1
  7386                           ;main.c: 1522: else if ( 'v' == cmdbuf[1] &&
  7387                           ;main.c: 1523: 'e' == cmdbuf[2] &&
  7388                           ;main.c: 1524: 'r' == cmdbuf[3] &&
  7389                           ;main.c: 1525: 'b' == cmdbuf[4] ) {
  7390  005076  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7391  005078  0A76               	xorlw	118
  7392  00507A  E147               	bnz	l14513
  7393                           
  7394                           ; BSR set to: 1
  7395  00507C  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  7396  00507E  0A65               	xorlw	101
  7397  005080  E144               	bnz	l14513
  7398                           
  7399                           ; BSR set to: 1
  7400  005082  512E               	movf	(_cmdbuf+3)& (0+255),w,b
  7401  005084  0A72               	xorlw	114
  7402  005086  E141               	bnz	l14513
  7403                           
  7404                           ; BSR set to: 1
  7405  005088  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  7406  00508A  0A62               	xorlw	98
  7407  00508C  E13E               	bnz	l14513
  7408                           
  7409                           ; BSR set to: 1
  7410                           ;main.c: 1526: mode = 0;
  7411  00508E  0100               	movlb	0	; () banked
  7412  005090  6BE6               	clrf	_mode& (0+255),b
  7413  005092  D03B               	goto	l14513
  7414  005094                     l14505:
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;main.c: 1531: {
  7418                           ;main.c: 1533: if (0 == strlen(cmdbuf)) {
  7419  005094  0E01               	movlw	high _cmdbuf
  7420  005096  0100               	movlb	0	; () banked
  7421  005098  6F61               	movwf	(?_strlen+1)& (0+255),b
  7422  00509A  0E2B               	movlw	low _cmdbuf
  7423  00509C  6F60               	movwf	?_strlen& (0+255),b
  7424  00509E  EC12  F00D         	call	_strlen	;wreg free
  7425  0050A2  5161               	movf	(?_strlen+1)& (0+255),w,b
  7426  0050A4  1160               	iorwf	?_strlen& (0+255),w,b
  7427  0050A6  E101 D699          	bz	l14387
  7428  0050AA  D02F               	goto	l14513
  7429  0050AC                     l14511:
  7430                           
  7431                           ; BSR set to: 0
  7432  0050AC  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7433                           
  7434                           ; Switch size 1, requested type "space"
  7435                           ; Number of cases is 17, Range of values is 64 to 116
  7436                           ; switch strategies available:
  7437                           ; Name         Instructions Cycles
  7438                           ; simple_byte           52    27 (average)
  7439                           ;	Chosen strategy is simple_byte
  7440  0050AE  0A40               	xorlw	64	; case 64
  7441  0050B0  E0D1               	bz	l14485
  7442  0050B2  0A02               	xorlw	2	; case 66
  7443  0050B4  E0C7               	bz	l14481
  7444  0050B6  0A01               	xorlw	1	; case 67
  7445  0050B8  E101 D6D4          	bz	l14417
  7446  0050BC  0A05               	xorlw	5	; case 70
  7447  0050BE  E101 D779          	bz	l14451
  7448  0050C2  0A0C               	xorlw	12	; case 74
  7449  0050C4  E101 D679          	bz	l14383
  7450  0050C8  0A07               	xorlw	7	; case 77
  7451  0050CA  E101 D687          	bz	l14387
  7452  0050CE  0A03               	xorlw	3	; case 78
  7453  0050D0  E101 D698          	bz	l14395
  7454  0050D4  0A01               	xorlw	1	; case 79
  7455  0050D6  E101 D6AF          	bz	l14405
  7456  0050DA  0A1D               	xorlw	29	; case 82
  7457  0050DC  E016               	bz	l14513
  7458  0050DE  0A01               	xorlw	1	; case 83
  7459  0050E0  E101 D6A2          	bz	l14401
  7460  0050E4  0A07               	xorlw	7	; case 84
  7461  0050E6  E101 D6CF          	bz	l14427
  7462  0050EA  0A02               	xorlw	2	; case 86
  7463  0050EC  E101 D678          	bz	l14389
  7464  0050F0  0A0C               	xorlw	12	; case 90
  7465  0050F2  E101 D774          	bz	l14461
  7466  0050F6  0A37               	xorlw	55	; case 109
  7467  0050F8  E101 D670          	bz	l14387
  7468  0050FC  0A1F               	xorlw	31	; case 114
  7469  0050FE  E005               	bz	l14513
  7470  005100  0A01               	xorlw	1	; case 115
  7471  005102  E101 D694          	bz	l733
  7472  005106  0A07               	xorlw	7	; case 116
  7473  005108  E1C5               	bnz	l14505
  7474  00510A                     l14513:
  7475                           
  7476                           ;main.c: 1541: if (rv) {
  7477  00510A  0100               	movlb	0	; () banked
  7478  00510C  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7479  00510E  E007               	bz	l14517
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;main.c: 1543: putsUSART((char *) "\r");
  7483  005110  0E7C               	movlw	high STR_137
  7484  005112  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7485  005114  0EF3               	movlw	low STR_137
  7486  005116  6F61               	movwf	?_putsUSART& (0+255),b
  7487  005118  EC2D  F00E         	call	_putsUSART	;wreg free
  7488                           
  7489                           ;main.c: 1544: }
  7490  00511C  D006               	goto	l14519
  7491  00511E                     l14517:
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;main.c: 1545: else {
  7495                           ;main.c: 1547: putsUSART((char *) "\a");
  7496  00511E  0E7C               	movlw	high STR_138
  7497  005120  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7498  005122  0EF1               	movlw	low STR_138
  7499  005124  6F61               	movwf	?_putsUSART& (0+255),b
  7500  005126  EC2D  F00E         	call	_putsUSART	;wreg free
  7501  00512A                     l14519:
  7502                           
  7503                           ;main.c: 1548: }
  7504                           ;main.c: 1551: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7505  00512A  0E01               	movlw	high _cmdbuf
  7506  00512C  0100               	movlb	0	; () banked
  7507  00512E  6F61               	movwf	(?_memset+1)& (0+255),b
  7508  005130  0E2B               	movlw	low _cmdbuf
  7509  005132  6F60               	movwf	?_memset& (0+255),b
  7510  005134  6B63               	clrf	(?_memset+3)& (0+255),b
  7511  005136  6B62               	clrf	(?_memset+2)& (0+255),b
  7512  005138  6B65               	clrf	(?_memset+5)& (0+255),b
  7513  00513A  0E50               	movlw	80
  7514  00513C  6F64               	movwf	(?_memset+4)& (0+255),b
  7515  00513E  ECC8  F00B         	call	_memset	;wreg free
  7516                           
  7517                           ; BSR set to: 0
  7518                           ;main.c: 1552: pos = 0;
  7519  005142  6BE7               	clrf	_pos& (0+255),b
  7520  005144                     l14523:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;main.c: 1554: }
  7524                           ;main.c: 1557: (INTCONbits.GIE = 1);
  7525  005144  8EF2               	bsf	intcon,7,c	;volatile
  7526  005146                     l723:
  7527                           
  7528                           ; BSR set to: 0
  7529  005146  0012               	return	
  7530  005148                     __end_of_doModeSLCAN:
  7531                           	opt stack 0
  7532  005148                     PL78:
  7533                           	opt stack 22
  7534  005148  90D8               	bcf	status,0,c
  7535  00514A  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7536  00514C  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7537  00514E  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7538  005150  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7539  005152  0012               	return	
  7540  005154                     __end_ofPL78:
  7541                           	opt stack 0
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodh	equ	0xFF4
  7547                           prodl	equ	0xFF3
  7548                           intcon	equ	0xFF2
  7549                           indf0	equ	0xFEF
  7550                           postinc0	equ	0xFEE
  7551                           fsr0h	equ	0xFEA
  7552                           fsr0l	equ	0xFE9
  7553                           wreg	equ	0xFE8
  7554                           indf1	equ	0xFE7
  7555                           postinc1	equ	0xFE6
  7556                           postdec1	equ	0xFE5
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           plusw2	equ	0xFDB
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _hexStringToBytes *****************
  7568 ;; Defined at:
  7569 ;;		line 35 in file "hexutils.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7572 ;;		 -> wrkbuf(80), 
  7573 ;;  size            1    6[BANK0 ] unsigned char 
  7574 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7575 ;;		 -> cmdbuf(80), 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  i               2   16[BANK0 ] int 
  7578 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7579 ;;		 -> cmdbuf(80), 
  7580 ;;  len             2   12[BANK0 ] int 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      unsigned char 
  7583 ;; Registers used:
  7584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : F/0
  7587 ;;		On exit  : F/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7590 ;;      Params:         0       5       0       0       0       0       0
  7591 ;;      Locals:         0       6       0       0       0       0       0
  7592 ;;      Temps:          0       3       0       0       0       0       0
  7593 ;;      Totals:         0      14       0       0       0       0       0
  7594 ;;Total ram usage:       14 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    4
  7597 ;; This function calls:
  7598 ;;		_strlen
  7599 ;;		_nibbleFromChar
  7600 ;; This function is called by:
  7601 ;;		_doModeSLCAN
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text3
  7606  002454                     __ptext3:
  7607                           	opt stack 0
  7608  002454                     _hexStringToBytes:
  7609                           	opt stack 24
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;hexutils.c: 36: uint8_t *p;
  7613                           ;hexutils.c: 37: int len, i;
  7614                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;incstack = 0
  7618                           ;incstack = 0
  7619  002454  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7620  002458  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7621  00245C  EC12  F00D         	call	_strlen	;wreg free
  7622  002460  90D8               	bcf	status,0,c
  7623  002462  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7624  002464  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7625  002466  3160               	rrcf	?_strlen& (0+255),w,b
  7626  002468  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;hexutils.c: 40: if (len > size) return 0;
  7630  00246A  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7631  00246C  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7632  00246E  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7633  002470  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7634  002472  0A80               	xorlw	128
  7635  002474  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7636  002476  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7637  002478  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7638  00247A  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7639  00247C  0A80               	xorlw	128
  7640  00247E  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7641  002480  E202               	bc	l1591
  7642                           
  7643                           ; BSR set to: 0
  7644  002482  0E00               	movlw	0
  7645  002484  D033               	goto	l1592
  7646  002486                     l1591:
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7650  002486  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7651  002488  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7652  00248A  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7653  00248E  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7654  002492  D022               	goto	l16085
  7655  002494                     l16079:
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7659  002494  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7660  002496  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7661  002498  6ED9               	movwf	fsr2l,c
  7662  00249A  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7663  00249C  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7664  00249E  6EDA               	movwf	fsr2h,c
  7665  0024A0  EE10 F001          	lfsr	1,1
  7666  0024A4  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7667  0024A6  26E1               	addwf	fsr1l,f,c
  7668  0024A8  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7669  0024AA  22E2               	addwfc	fsr1h,f,c
  7670  0024AC  50E7               	movf	indf1,w,c
  7671  0024AE  ECD3  F00C         	call	_nibbleFromChar
  7672  0024B2  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7673  0024B4  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7674  0024B8  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7675  0024BC  50E7               	movf	indf1,w,c
  7676  0024BE  ECD3  F00C         	call	_nibbleFromChar
  7677  0024C2  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7678  0024C4  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7679  0024C6  0BF0               	andlw	240
  7680  0024C8  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7681  0024CA  6EDF               	movwf	indf2,c
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;hexutils.c: 43: p += 2;
  7685  0024CC  0E02               	movlw	2
  7686  0024CE  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7687  0024D0  0E00               	movlw	0
  7688  0024D2  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7689                           
  7690                           ; BSR set to: 0
  7691  0024D4  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7692  0024D6  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7693  0024D8                     l16085:
  7694                           
  7695                           ; BSR set to: 0
  7696  0024D8  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7697  0024DA  0A80               	xorlw	128
  7698  0024DC  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7699  0024DE  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7700  0024E0  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7701  0024E2  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7702  0024E4  0A80               	xorlw	128
  7703  0024E6  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7704  0024E8  E3D5               	bnc	l16079
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;hexutils.c: 44: }
  7708                           ;hexutils.c: 46: return i;
  7709  0024EA  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7710  0024EC                     l1592:
  7711                           
  7712                           ; BSR set to: 0
  7713  0024EC  0012               	return	
  7714  0024EE                     __end_of_hexStringToBytes:
  7715                           	opt stack 0
  7716                           tblptru	equ	0xFF8
  7717                           tblptrh	equ	0xFF7
  7718                           tblptrl	equ	0xFF6
  7719                           tablat	equ	0xFF5
  7720                           prodh	equ	0xFF4
  7721                           prodl	equ	0xFF3
  7722                           intcon	equ	0xFF2
  7723                           indf0	equ	0xFEF
  7724                           postinc0	equ	0xFEE
  7725                           fsr0h	equ	0xFEA
  7726                           fsr0l	equ	0xFE9
  7727                           wreg	equ	0xFE8
  7728                           indf1	equ	0xFE7
  7729                           postinc1	equ	0xFE6
  7730                           postdec1	equ	0xFE5
  7731                           fsr1h	equ	0xFE2
  7732                           fsr1l	equ	0xFE1
  7733                           indf2	equ	0xFDF
  7734                           postinc2	equ	0xFDE
  7735                           postdec2	equ	0xFDD
  7736                           plusw2	equ	0xFDB
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _nibbleFromChar *****************
  7742 ;; Defined at:
  7743 ;;		line 20 in file "hexutils.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;  c               1    wreg     unsigned char 
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  c               1    0[BANK0 ] unsigned char 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;                  1    wreg      unsigned char 
  7750 ;; Registers used:
  7751 ;;		wreg, status,2, status,0
  7752 ;; Tracked objects:
  7753 ;;		On entry : F/0
  7754 ;;		On exit  : F/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7757 ;;      Params:         0       0       0       0       0       0       0
  7758 ;;      Locals:         0       1       0       0       0       0       0
  7759 ;;      Temps:          0       0       0       0       0       0       0
  7760 ;;      Totals:         0       1       0       0       0       0       0
  7761 ;;Total ram usage:        1 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    3
  7764 ;; This function calls:
  7765 ;;		Nothing
  7766 ;; This function is called by:
  7767 ;;		_hexStringToBytes
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           	psect	text4
  7772  0019A6                     __ptext4:
  7773                           	opt stack 0
  7774  0019A6                     _nibbleFromChar:
  7775                           	opt stack 24
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;incstack = 0
  7779                           ;incstack = 0
  7780                           ;nibbleFromChar@c stored from wreg
  7781  0019A6  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7785  0019AA  0E2F               	movlw	47
  7786  0019AC  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7787  0019AE  D006               	goto	l16285
  7788                           
  7789                           ; BSR set to: 0
  7790  0019B0  0E3A               	movlw	58
  7791  0019B2  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7792  0019B4  D003               	goto	l16285
  7793                           
  7794                           ; BSR set to: 0
  7795  0019B6  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7796  0019B8  0FD0               	addlw	208
  7797  0019BA  D013               	goto	l1586
  7798  0019BC                     l16285:
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7802  0019BC  0E60               	movlw	96
  7803  0019BE  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7804  0019C0  D006               	goto	l16293
  7805                           
  7806                           ; BSR set to: 0
  7807  0019C2  0E67               	movlw	103
  7808  0019C4  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7809  0019C6  D003               	goto	l16293
  7810                           
  7811                           ; BSR set to: 0
  7812  0019C8  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7813  0019CA  0FA9               	addlw	169
  7814  0019CC  D00A               	goto	l1586
  7815  0019CE                     l16293:
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7819  0019CE  0E40               	movlw	64
  7820  0019D0  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7821  0019D2  D006               	goto	l16301
  7822                           
  7823                           ; BSR set to: 0
  7824  0019D4  0E47               	movlw	71
  7825  0019D6  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7826  0019D8  D003               	goto	l16301
  7827                           
  7828                           ; BSR set to: 0
  7829  0019DA  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7830  0019DC  0FC9               	addlw	201
  7831  0019DE  D001               	goto	l1586
  7832  0019E0                     l16301:
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;hexutils.c: 24: return 255;
  7836  0019E0  0EFF               	movlw	255
  7837  0019E2                     l1586:
  7838                           
  7839                           ; BSR set to: 0
  7840  0019E2  0012               	return	
  7841  0019E4                     __end_of_nibbleFromChar:
  7842                           	opt stack 0
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           indf0	equ	0xFEF
  7851                           postinc0	equ	0xFEE
  7852                           fsr0h	equ	0xFEA
  7853                           fsr0l	equ	0xFE9
  7854                           wreg	equ	0xFE8
  7855                           indf1	equ	0xFE7
  7856                           postinc1	equ	0xFE6
  7857                           postdec1	equ	0xFE5
  7858                           fsr1h	equ	0xFE2
  7859                           fsr1l	equ	0xFE1
  7860                           indf2	equ	0xFDF
  7861                           postinc2	equ	0xFDE
  7862                           postdec2	equ	0xFDD
  7863                           plusw2	equ	0xFDB
  7864                           fsr2h	equ	0xFDA
  7865                           fsr2l	equ	0xFD9
  7866                           status	equ	0xFD8
  7867                           
  7868 ;; *************** function _receiveSendEventSLCAN *****************
  7869 ;; Defined at:
  7870 ;;		line 2154 in file "main.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  id              4   38[BANK0 ] unsigned long 
  7875 ;;  i               2   43[BANK0 ] int 
  7876 ;;  dlc             1   42[BANK0 ] unsigned char 
  7877 ;; Return value:  Size  Location     Type
  7878 ;;                  1    wreg      enum E15660
  7879 ;; Registers used:
  7880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7881 ;; Tracked objects:
  7882 ;;		On entry : F/0
  7883 ;;		On exit  : 0/0
  7884 ;;		Unchanged: 0/0
  7885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7886 ;;      Params:         0       0       0       0       0       0       0
  7887 ;;      Locals:         0       7       0       0       0       0       0
  7888 ;;      Temps:          0       3       0       0       0       0       0
  7889 ;;      Totals:         0      10       0       0       0       0       0
  7890 ;;Total ram usage:       10 bytes
  7891 ;; Hardware stack levels used:    1
  7892 ;; Hardware stack levels required when called:    6
  7893 ;; This function calls:
  7894 ;;		_putsUSART
  7895 ;;		_WriteUSART
  7896 ;;		_strlen
  7897 ;;		_getCANFrame
  7898 ;;		_ultoa
  7899 ;;		_itoa
  7900 ;; This function is called by:
  7901 ;;		_doModeSLCAN
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           	psect	text5
  7906  003DAA                     __ptext5:
  7907                           	opt stack 0
  7908  003DAA                     _receiveSendEventSLCAN:
  7909                           	opt stack 22
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;main.c: 2155: int i;
  7913                           ;main.c: 2156: uint8_t dlc;
  7914                           ;main.c: 2157: uint32_t id;
  7915                           ;main.c: 2159: if (getCANFrame(&id, &dlc, vscpData)) {
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;incstack = 0
  7919                           ;incstack = 0
  7920  003DAA  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7921  003DAC  6F6E               	movwf	?_getCANFrame& (0+255),b
  7922  003DAE  0E34               	movlw	low _vscpData
  7923  003DB0  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  7924  003DB2  0E00               	movlw	high _vscpData
  7925  003DB4  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7926  003DB6  0E0F               	movlw	15
  7927  003DB8  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7928  003DBA  0E5F               	movlw	__accesstop+-1
  7929  003DBC  656F               	cpfsgt	(?_getCANFrame+1)& (0+255),b
  7930  003DBE  6B70               	clrf	(?_getCANFrame+2)& (0+255),b
  7931  003DC0  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7932  003DC2  EC77  F012         	call	_getCANFrame
  7933  003DC6  0900               	iorlw	0
  7934  003DC8  E101 D0AE          	bz	l1069
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;main.c: 2162: cntRxFrames++;
  7938  003DCC  0101               	movlb	1	; () banked
  7939  003DCE  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7940  003DD0  0E00               	movlw	0
  7941  003DD2  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7942  003DD4  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7943  003DD6  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7944                           
  7945                           ;main.c: 2163: cntRxBytes += dlc;
  7946  003DD8  0100               	movlb	0	; () banked
  7947  003DDA  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7948  003DDC  0101               	movlb	1	; () banked
  7949  003DDE  2708               	addwf	_cntRxBytes& (0+255),f,b
  7950  003DE0  0E00               	movlw	0
  7951  003DE2  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7952  003DE4  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7953  003DE6  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7954  003DE8                     l1042:
  7955  003DE8  A2AC               	btfss	4012,1,c	;volatile
  7956  003DEA  D7FE               	goto	l1042
  7957                           
  7958                           ;main.c: 2166: WriteUSART('T');
  7959  003DEC  0E54               	movlw	84
  7960  003DEE  EC78  F00B         	call	_WriteUSART
  7961                           
  7962                           ;main.c: 2168: ultoa(wrkbuf, id, 16);
  7963  003DF2  0E01               	movlw	high _wrkbuf
  7964  003DF4  0100               	movlb	0	; () banked
  7965  003DF6  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7966  003DF8  0E7B               	movlw	low _wrkbuf
  7967  003DFA  6F76               	movwf	?_ultoa& (0+255),b
  7968  003DFC  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7969  003E00  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7970  003E04  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7971  003E08  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7972  003E0C  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7973  003E0E  0E10               	movlw	16
  7974  003E10  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7975  003E12  ECDA  F017         	call	_ultoa	;wreg free
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;main.c: 2170: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7979  003E16  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7980  003E18  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7981  003E1A                     l1047:
  7982                           
  7983                           ; BSR set to: 0
  7984  003E1A  A2AC               	btfss	4012,1,c	;volatile
  7985  003E1C  D7FE               	goto	l1047
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 2172: WriteUSART('0');
  7989  003E1E  0E30               	movlw	48
  7990  003E20  EC78  F00B         	call	_WriteUSART
  7991                           
  7992                           ; BSR set to: 0
  7993  003E24  D882               	call	PL80	;call to abstracted procedure
  7994  003E26  B4D8               	btfsc	status,2,c
  7995  003E28  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7996  003E2A  E3F7               	bnc	l1047
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;main.c: 2173: }
  8000                           ;main.c: 2174: putsUSART(wrkbuf);
  8001  003E2C  0E01               	movlw	high _wrkbuf
  8002  003E2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8003  003E30  0E7B               	movlw	low _wrkbuf
  8004  003E32  6F61               	movwf	?_putsUSART& (0+255),b
  8005  003E34  EC2D  F00E         	call	_putsUSART	;wreg free
  8006                           
  8007                           ;main.c: 2177: itoa(wrkbuf, dlc, 16);
  8008  003E38  0E01               	movlw	high _wrkbuf
  8009  003E3A  0100               	movlb	0	; () banked
  8010  003E3C  6F71               	movwf	(?_itoa+1)& (0+255),b
  8011  003E3E  0E7B               	movlw	low _wrkbuf
  8012  003E40  6F70               	movwf	?_itoa& (0+255),b
  8013  003E42  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8014  003E46  6B73               	clrf	(?_itoa+3)& (0+255),b
  8015  003E48  6B75               	clrf	(?_itoa+5)& (0+255),b
  8016  003E4A  0E10               	movlw	16
  8017  003E4C  6F74               	movwf	(?_itoa+4)& (0+255),b
  8018  003E4E  EC40  F00C         	call	_itoa	;wreg free
  8019  003E52                     l1050:
  8020                           
  8021                           ; BSR set to: 0
  8022  003E52  A2AC               	btfss	4012,1,c	;volatile
  8023  003E54  D7FE               	goto	l1050
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;main.c: 2179: WriteUSART(wrkbuf[0]);
  8027  003E56  0101               	movlb	1	; () banked
  8028  003E58  517B               	movf	_wrkbuf& (0+255),w,b
  8029  003E5A  EC78  F00B         	call	_WriteUSART
  8030                           
  8031                           ;main.c: 2182: for (i = 0; i < dlc; i++) {
  8032  003E5E  0100               	movlb	0	; () banked
  8033  003E60  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8034  003E62  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8035  003E64  D02B               	goto	l16037
  8036  003E66                     l16025:
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 2183: itoa(wrkbuf, vscpData[i], 16);
  8040  003E66  0E01               	movlw	high _wrkbuf
  8041  003E68  0100               	movlb	0	; () banked
  8042  003E6A  6F71               	movwf	(?_itoa+1)& (0+255),b
  8043  003E6C  0E7B               	movlw	low _wrkbuf
  8044  003E6E  6F70               	movwf	?_itoa& (0+255),b
  8045  003E70  518B               	movf	receiveSendEventSLCAN@i& (0+255),w,b
  8046  003E72  0F34               	addlw	low _vscpData
  8047  003E74  6ED9               	movwf	fsr2l,c
  8048  003E76  6ADA               	clrf	fsr2h,c
  8049  003E78  50DF               	movf	indf2,w,c
  8050  003E7A  6F72               	movwf	(?_itoa+2)& (0+255),b
  8051  003E7C  6B73               	clrf	(?_itoa+3)& (0+255),b
  8052  003E7E  6B75               	clrf	(?_itoa+5)& (0+255),b
  8053  003E80  0E10               	movlw	16
  8054  003E82  6F74               	movwf	(?_itoa+4)& (0+255),b
  8055  003E84  EC40  F00C         	call	_itoa	;wreg free
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;main.c: 2185: if (2 != strlen(wrkbuf)) {
  8059  003E88  0E01               	movlw	high _wrkbuf
  8060  003E8A  0100               	movlb	0	; () banked
  8061  003E8C  6F61               	movwf	(?_strlen+1)& (0+255),b
  8062  003E8E  0E7B               	movlw	low _wrkbuf
  8063  003E90  6F60               	movwf	?_strlen& (0+255),b
  8064  003E92  EC12  F00D         	call	_strlen	;wreg free
  8065  003E96  5160               	movf	?_strlen& (0+255),w,b
  8066  003E98  0A02               	xorlw	2
  8067  003E9A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8068  003E9C  E005               	bz	l16033
  8069  003E9E                     l1056:
  8070                           
  8071                           ; BSR set to: 0
  8072  003E9E  A2AC               	btfss	4012,1,c	;volatile
  8073  003EA0  D7FE               	goto	l1056
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 2187: WriteUSART('0');
  8077  003EA2  0E30               	movlw	48
  8078  003EA4  EC78  F00B         	call	_WriteUSART
  8079  003EA8                     l16033:
  8080                           
  8081                           ;main.c: 2188: }
  8082                           ;main.c: 2190: putsUSART(wrkbuf);
  8083  003EA8  0E01               	movlw	high _wrkbuf
  8084  003EAA  0100               	movlb	0	; () banked
  8085  003EAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8086  003EAE  0E7B               	movlw	low _wrkbuf
  8087  003EB0  6F61               	movwf	?_putsUSART& (0+255),b
  8088  003EB2  EC2D  F00E         	call	_putsUSART	;wreg free
  8089  003EB6  0100               	movlb	0	; () banked
  8090  003EB8  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8091  003EBA  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8092  003EBC                     l16037:
  8093                           
  8094                           ; BSR set to: 0
  8095  003EBC  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8096  003EBE  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8097  003EC0  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8098  003EC2  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8099  003EC4  0A80               	xorlw	128
  8100  003EC6  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8101  003EC8  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8102  003ECA  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8103  003ECC  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8104  003ECE  0A80               	xorlw	128
  8105  003ED0  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8106  003ED2  E3C9               	bnc	l16025
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 2191: }
  8110                           ;main.c: 2194: if (nTimeStamp) {
  8111  003ED4  5031               	movf	_nTimeStamp,w,c
  8112  003ED6  E023               	bz	l1066
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 2195: ultoa(wrkbuf, timer, 16);
  8116  003ED8  0E01               	movlw	high _wrkbuf
  8117  003EDA  0100               	movlb	0	; () banked
  8118  003EDC  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8119  003EDE  0E7B               	movlw	low _wrkbuf
  8120  003EE0  6F76               	movwf	?_ultoa& (0+255),b
  8121  003EE2  C118  F078         	movff	_timer,?_ultoa+2	;volatile
  8122  003EE6  C119  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8123  003EEA  C11A  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8124  003EEE  C11B  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8125  003EF2  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8126  003EF4  0E10               	movlw	16
  8127  003EF6  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8128  003EF8  ECDA  F017         	call	_ultoa	;wreg free
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;main.c: 2197: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8132  003EFC  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8133  003EFE  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8134  003F00                     l1063:
  8135                           
  8136                           ; BSR set to: 0
  8137  003F00  A2AC               	btfss	4012,1,c	;volatile
  8138  003F02  D7FE               	goto	l1063
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;main.c: 2199: WriteUSART('0');
  8142  003F04  0E30               	movlw	48
  8143  003F06  EC78  F00B         	call	_WriteUSART
  8144                           
  8145                           ; BSR set to: 0
  8146  003F0A  D80F               	call	PL80	;call to abstracted procedure
  8147  003F0C  B4D8               	btfsc	status,2,c
  8148  003F0E  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8149  003F10  E3F7               	bnc	l1063
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 2200: }
  8153                           ;main.c: 2201: putsUSART(wrkbuf);
  8154  003F12  0E01               	movlw	high _wrkbuf
  8155  003F14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8156  003F16  0E7B               	movlw	low _wrkbuf
  8157  003F18  6F61               	movwf	?_putsUSART& (0+255),b
  8158  003F1A  EC2D  F00E         	call	_putsUSART	;wreg free
  8159  003F1E                     l1066:
  8160  003F1E  A2AC               	btfss	4012,1,c	;volatile
  8161  003F20  D7FE               	goto	l1066
  8162                           
  8163                           ;main.c: 2205: WriteUSART(0x0d);
  8164  003F22  0E0D               	movlw	13
  8165  003F24  EC78  F00B         	call	_WriteUSART
  8166  003F28                     l1069:
  8167  003F28  0012               	return	
  8168  003F2A                     __end_of_receiveSendEventSLCAN:
  8169                           	opt stack 0
  8170  003F2A                     PL80:
  8171                           	opt stack 22
  8172  003F2A  0100               	movlb	0	; () banked
  8173  003F2C  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8174  003F2E  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8175  003F30  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8176  003F32  0A80               	xorlw	128
  8177  003F34  0F80               	addlw	-128
  8178  003F36  0CB8               	retlw	184
  8179  003F38                     __end_ofPL80:
  8180                           	opt stack 0
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           intcon	equ	0xFF2
  8188                           indf0	equ	0xFEF
  8189                           postinc0	equ	0xFEE
  8190                           fsr0h	equ	0xFEA
  8191                           fsr0l	equ	0xFE9
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           postinc1	equ	0xFE6
  8195                           postdec1	equ	0xFE5
  8196                           fsr1h	equ	0xFE2
  8197                           fsr1l	equ	0xFE1
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           postdec2	equ	0xFDD
  8201                           plusw2	equ	0xFDB
  8202                           fsr2h	equ	0xFDA
  8203                           fsr2l	equ	0xFD9
  8204                           status	equ	0xFD8
  8205                           
  8206 ;; *************** function _ultoa *****************
  8207 ;; Defined at:
  8208 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8211 ;;		 -> wrkbuf(80), 
  8212 ;;  val             4   24[BANK0 ] unsigned long 
  8213 ;;  base            2   28[BANK0 ] int 
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  v               4   30[BANK0 ] unsigned long 
  8216 ;;  c               1   34[BANK0 ] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  2   22[BANK0 ] PTR unsigned char 
  8219 ;; Registers used:
  8220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : F/0
  8223 ;;		On exit  : F/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8226 ;;      Params:         0       8       0       0       0       0       0
  8227 ;;      Locals:         0       5       0       0       0       0       0
  8228 ;;      Temps:          0       0       0       0       0       0       0
  8229 ;;      Totals:         0      13       0       0       0       0       0
  8230 ;;Total ram usage:       13 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    4
  8233 ;; This function calls:
  8234 ;;		___lldiv
  8235 ;;		___llmod
  8236 ;; This function is called by:
  8237 ;;		_receiveSendEventSLCAN
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text6
  8242  002FB4                     __ptext6:
  8243                           	opt stack 0
  8244  002FB4                     _ultoa:
  8245                           	opt stack 23
  8246                           
  8247                           ; BSR set to: 0
  8248                           
  8249                           ;incstack = 0
  8250                           ;incstack = 0
  8251  002FB4  C078  F07E         	movff	ultoa@val,ultoa@v
  8252  002FB8  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8253  002FBC  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8254  002FC0  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8255  002FC4                     l16199:
  8256                           
  8257                           ; BSR set to: 0
  8258  002FC4  C07E  F060         	movff	ultoa@v,?___lldiv
  8259  002FC8  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8260  002FCC  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8261  002FD0  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8262  002FD4  D858               	call	PL66	;call to abstracted procedure
  8263  002FD6  EC57  F010         	call	___lldiv	;wreg free
  8264  002FDA  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8265  002FDE  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8266  002FE2  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8267  002FE6  C060  F07E         	movff	?___lldiv,ultoa@v
  8268                           
  8269                           ; BSR set to: 0
  8270  002FEA  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8271  002FEC  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8272                           
  8273                           ; BSR set to: 0
  8274  002FEE  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8275  002FF0  117E               	iorwf	ultoa@v& (0+255),w,b
  8276  002FF2  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8277  002FF4  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8278  002FF6  E1E6               	bnz	l16199
  8279                           
  8280                           ; BSR set to: 0
  8281  002FF8  C076  FFD9         	movff	ultoa@buf,fsr2l
  8282  002FFC  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8283  003000  6ADF               	clrf	indf2,c
  8284                           
  8285                           ; BSR set to: 0
  8286  003002  0776               	decf	ultoa@buf& (0+255),f,b
  8287  003004  A0D8               	btfss	status,0,c
  8288  003006  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8289  003008                     l16209:
  8290                           
  8291                           ; BSR set to: 0
  8292  003008  C078  F06D         	movff	ultoa@val,?___llmod
  8293  00300C  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8294  003010  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8295  003014  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8296  003018  C07C  F071         	movff	ultoa@base,?___llmod+4
  8297  00301C  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8298  003020  0E00               	movlw	0
  8299  003022  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8300  003024  0EFF               	movlw	-1
  8301  003026  6F73               	movwf	(?___llmod+6)& (0+255),b
  8302  003028  6F74               	movwf	(?___llmod+7)& (0+255),b
  8303  00302A  ECE3  F00E         	call	___llmod	;wreg free
  8304  00302E  516D               	movf	?___llmod& (0+255),w,b
  8305  003030  6F82               	movwf	ultoa@c& (0+255),b
  8306                           
  8307                           ; BSR set to: 0
  8308  003032  C078  F060         	movff	ultoa@val,?___lldiv
  8309  003036  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8310  00303A  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8311  00303E  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8312  003042  D821               	call	PL66	;call to abstracted procedure
  8313  003044  EC57  F010         	call	___lldiv	;wreg free
  8314  003048  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8315  00304C  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8316  003050  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8317  003054  C060  F078         	movff	?___lldiv,ultoa@val
  8318                           
  8319                           ; BSR set to: 0
  8320  003058  0E09               	movlw	9
  8321  00305A  6582               	cpfsgt	ultoa@c& (0+255),b
  8322  00305C  D002               	goto	l2436
  8323                           
  8324                           ; BSR set to: 0
  8325  00305E  0E07               	movlw	7
  8326  003060  2782               	addwf	ultoa@c& (0+255),f,b
  8327  003062                     l2436:
  8328                           
  8329                           ; BSR set to: 0
  8330  003062  0E30               	movlw	48
  8331  003064  2782               	addwf	ultoa@c& (0+255),f,b
  8332                           
  8333                           ; BSR set to: 0
  8334  003066  C076  FFD9         	movff	ultoa@buf,fsr2l
  8335  00306A  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8336  00306E  C082  FFDF         	movff	ultoa@c,indf2
  8337                           
  8338                           ; BSR set to: 0
  8339  003072  0776               	decf	ultoa@buf& (0+255),f,b
  8340  003074  A0D8               	btfss	status,0,c
  8341  003076  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8342                           
  8343                           ; BSR set to: 0
  8344  003078  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8345  00307A  1178               	iorwf	ultoa@val& (0+255),w,b
  8346  00307C  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8347  00307E  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8348  003080  B4D8               	btfsc	status,2,c
  8349                           
  8350                           ; BSR set to: 0
  8351  003082  0012               	return	
  8352  003084  D7C1               	goto	l16209
  8353  003086                     __end_of_ultoa:
  8354                           	opt stack 0
  8355  003086                     PL66:
  8356                           	opt stack 23
  8357  003086  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8358  00308A  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8359  00308E  0E00               	movlw	0
  8360  003090  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8361  003092  0EFF               	movlw	-1
  8362  003094  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8363  003096  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8364  003098  0012               	return	
  8365  00309A                     __end_ofPL66:
  8366                           	opt stack 0
  8367                           tblptru	equ	0xFF8
  8368                           tblptrh	equ	0xFF7
  8369                           tblptrl	equ	0xFF6
  8370                           tablat	equ	0xFF5
  8371                           prodh	equ	0xFF4
  8372                           prodl	equ	0xFF3
  8373                           intcon	equ	0xFF2
  8374                           indf0	equ	0xFEF
  8375                           postinc0	equ	0xFEE
  8376                           fsr0h	equ	0xFEA
  8377                           fsr0l	equ	0xFE9
  8378                           wreg	equ	0xFE8
  8379                           indf1	equ	0xFE7
  8380                           postinc1	equ	0xFE6
  8381                           postdec1	equ	0xFE5
  8382                           fsr1h	equ	0xFE2
  8383                           fsr1l	equ	0xFE1
  8384                           indf2	equ	0xFDF
  8385                           postinc2	equ	0xFDE
  8386                           postdec2	equ	0xFDD
  8387                           plusw2	equ	0xFDB
  8388                           fsr2h	equ	0xFDA
  8389                           fsr2l	equ	0xFD9
  8390                           status	equ	0xFD8
  8391                           
  8392 ;; *************** function _doModeVscp *****************
  8393 ;; Defined at:
  8394 ;;		line 1118 in file "main.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;		None
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;  c               1   87[BANK0 ] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;		None               void
  8401 ;; Registers used:
  8402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8408 ;;      Params:         0       0       0       0       0       0       0
  8409 ;;      Locals:         0       1       0       0       0       0       0
  8410 ;;      Temps:          0       0       0       0       0       0       0
  8411 ;;      Totals:         0       1       0       0       0       0       0
  8412 ;;Total ram usage:        1 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    7
  8415 ;; This function calls:
  8416 ;;		_fifo_read
  8417 ;;		_ECANSetOperationMode
  8418 ;;		_receiveSendMultiEventCANAL
  8419 ;;		_receiveSendEventCANAL
  8420 ;;		_calcCRC
  8421 ;;		_sendVSCPDriverNack
  8422 ;;		_sendVSCPDriverAck
  8423 ;;		_receiveVSCPModeCanalMsg
  8424 ;;		_receiveVSCPModeMultiCanalMsg
  8425 ;;		_sendVSCPModeCapabilities
  8426 ;;		_sendVSCPDriverCommandReply
  8427 ;;		_sendVSCPDriverErrorFrame
  8428 ;; This function is called by:
  8429 ;;		_main
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           	psect	text7
  8434  00428C                     __ptext7:
  8435                           	opt stack 0
  8436  00428C                     _doModeVscp:
  8437                           	opt stack 22
  8438                           
  8439                           ;main.c: 1119: uint8_t c;
  8440                           ;main.c: 1122: if ( caps.maxCanalFrames > 1 ) {
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;incstack = 0
  8444                           ;incstack = 0
  8445  00428C  0101               	movlb	1	; () banked
  8446  00428E  EE21  F0E8         	lfsr	2,_caps+1
  8447  004292  0E01               	movlw	1
  8448  004294  64DF               	cpfsgt	indf2,c
  8449  004296  D003               	goto	l14213
  8450                           
  8451                           ; BSR set to: 1
  8452                           ;main.c: 1125: receiveSendMultiEventCANAL();
  8453  004298  EC51  F01D         	call	_receiveSendMultiEventCANAL	;wreg free
  8454                           
  8455                           ;main.c: 1126: }
  8456  00429C  D002               	goto	l14215
  8457  00429E                     l14213:
  8458                           
  8459                           ; BSR set to: 1
  8460                           ;main.c: 1127: else {
  8461                           ;main.c: 1130: receiveSendEventCANAL();
  8462  00429E  ECFA  F01B         	call	_receiveSendEventCANAL	;wreg free
  8463  0042A2                     l14215:
  8464                           
  8465                           ;main.c: 1131: }
  8466                           ;main.c: 1134: (INTCONbits.GIE = 0);
  8467  0042A2  9EF2               	bcf	intcon,7,c	;volatile
  8468                           
  8469                           ;main.c: 1136: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8470  0042A4  0E01               	movlw	high _serialInputFifo
  8471  0042A6  0100               	movlb	0	; () banked
  8472  0042A8  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8473  0042AA  0EDB               	movlw	low _serialInputFifo
  8474  0042AC  6F60               	movwf	?_fifo_read& (0+255),b
  8475  0042AE  0E00               	movlw	high doModeVscp@c
  8476  0042B0  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8477  0042B2  0EB7               	movlw	low doModeVscp@c
  8478  0042B4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8479  0042B6  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8480  0042B8  0E01               	movlw	1
  8481  0042BA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8482  0042BC  EC9D  F016         	call	_fifo_read	;wreg free
  8483  0042C0  0560               	decf	?_fifo_read& (0+255),w,b
  8484  0042C2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8485  0042C4  E001 D0BA          	bnz	l14363
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;main.c: 1139: (INTCONbits.GIE = 1);
  8489  0042C8  8EF2               	bsf	intcon,7,c	;volatile
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1142: if ( pos >= sizeof( cmdbuf ) ) {
  8493  0042CA  0E4F               	movlw	79
  8494  0042CC  65E7               	cpfsgt	_pos& (0+255),b
  8495  0042CE  D003               	goto	l667
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;main.c: 1144: pos = 0;
  8499  0042D0  6BE7               	clrf	_pos& (0+255),b
  8500                           
  8501                           ;main.c: 1145: bDLE = 0;
  8502  0042D2  6A2C               	clrf	_bDLE,c
  8503                           
  8504                           ;main.c: 1146: stateVscpDriver = 0;
  8505  0042D4  6A33               	clrf	_stateVscpDriver,c
  8506  0042D6                     l667:
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;main.c: 1147: }
  8510                           ;main.c: 1149: if ( 0 == stateVscpDriver ) {
  8511  0042D6  6633               	tstfsz	_stateVscpDriver,c
  8512  0042D8  D00D               	goto	l14237
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1151: if ( bDLE ) {
  8516  0042DA  502C               	movf	_bDLE,w,c
  8517  0042DC  E008               	bz	l14233
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1153: bDLE = 0;
  8521  0042DE  6A2C               	clrf	_bDLE,c
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;main.c: 1156: if ( 0x02 == c ) {
  8525  0042E0  51B7               	movf	doModeVscp@c& (0+255),w,b
  8526  0042E2  0A02               	xorlw	2
  8527  0042E4  E124               	bnz	l14273
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;main.c: 1157: stateVscpDriver = 1;
  8531  0042E6  0E01               	movlw	1
  8532  0042E8  6E33               	movwf	_stateVscpDriver,c
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;main.c: 1158: pos = 0;
  8536  0042EA  6BE7               	clrf	_pos& (0+255),b
  8537  0042EC  D020               	goto	l14273
  8538  0042EE                     l14233:
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 1161: else {
  8542                           ;main.c: 1162: bDLE = 1;
  8543  0042EE  0E01               	movlw	1
  8544  0042F0  6E2C               	movwf	_bDLE,c
  8545  0042F2  D0A5               	goto	l672
  8546  0042F4                     l14237:
  8547                           
  8548                           ; BSR set to: 0
  8549                           ;main.c: 1166: else if ( 1 == stateVscpDriver ) {
  8550  0042F4  0433               	decf	_stateVscpDriver,w,c
  8551  0042F6  E11B               	bnz	l14273
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;main.c: 1169: if ( bDLE ) {
  8555  0042F8  502C               	movf	_bDLE,w,c
  8556  0042FA  E015               	bz	l14257
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;main.c: 1172: bDLE = 0;
  8560  0042FC  6A2C               	clrf	_bDLE,c
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;main.c: 1175: if ( 0x03 == c ) {
  8564  0042FE  51B7               	movf	doModeVscp@c& (0+255),w,b
  8565  004300  0A03               	xorlw	3
  8566  004302  E103               	bnz	l14247
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;main.c: 1176: stateVscpDriver = 2;
  8570  004304  0E02               	movlw	2
  8571  004306  6E33               	movwf	_stateVscpDriver,c
  8572                           
  8573                           ;main.c: 1177: }
  8574  004308  D012               	goto	l14273
  8575  00430A                     l14247:
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;main.c: 1179: else if (0x10 == c) {
  8579  00430A  51B7               	movf	doModeVscp@c& (0+255),w,b
  8580  00430C  0A10               	xorlw	16
  8581  00430E  E10F               	bnz	l14273
  8582  004310                     u19050:
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;main.c: 1181: cmdbuf[ pos++ ] = c;
  8586  004310  D897               	call	PL24	;call to abstracted procedure
  8587  004312  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8588                           
  8589                           ; BSR set to: 0
  8590  004316  2BE7               	incf	_pos& (0+255),f,b
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;main.c: 1182: if ( pos >= sizeof( cmdbuf ) ) {
  8594  004318  0E4F               	movlw	79
  8595  00431A  65E7               	cpfsgt	_pos& (0+255),b
  8596  00431C  D090               	goto	l672
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;main.c: 1185: bDLE = 0;
  8600  00431E  6A2C               	clrf	_bDLE,c
  8601                           
  8602                           ;main.c: 1186: pos = 0;
  8603  004320  6BE7               	clrf	_pos& (0+255),b
  8604                           
  8605                           ;main.c: 1187: stateVscpDriver = 0;
  8606  004322  6A33               	clrf	_stateVscpDriver,c
  8607  004324  D08C               	goto	l672
  8608  004326                     l14257:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;main.c: 1192: else {
  8612                           ;main.c: 1193: if (0x10 == c) {
  8613  004326  51B7               	movf	doModeVscp@c& (0+255),w,b
  8614  004328  0A10               	xorlw	16
  8615  00432A  E0E1               	bz	l14233
  8616  00432C  D7F1               	goto	u19050
  8617  00432E                     l14273:
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;main.c: 1209: }
  8621                           ;main.c: 1210: }
  8622                           ;main.c: 1211: }
  8623                           ;main.c: 1213: if (2 == stateVscpDriver) {
  8624  00432E  5033               	movf	_stateVscpDriver,w,c
  8625  004330  0A02               	xorlw	2
  8626  004332  E001 D083          	bnz	l14363
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;main.c: 1216: stateVscpDriver = 0;
  8630  004336  6A33               	clrf	_stateVscpDriver,c
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;main.c: 1228: if (calcCRC(cmdbuf, pos)) {
  8634  004338  0E01               	movlw	high _cmdbuf
  8635  00433A  0100               	movlb	0	; () banked
  8636  00433C  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8637  00433E  0E2B               	movlw	low _cmdbuf
  8638  004340  6F6C               	movwf	?_calcCRC& (0+255),b
  8639  004342  C0E7  F06E         	movff	_pos,?_calcCRC+2
  8640  004346  ECF6  F00B         	call	_calcCRC	;wreg free
  8641  00434A  0900               	iorlw	0
  8642  00434C  E003               	bz	l685
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 1229: sendVSCPDriverNack();
  8646  00434E  EC16  F013         	call	_sendVSCPDriverNack	;wreg free
  8647  004352  D075               	goto	l672
  8648  004354                     l685:
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;main.c: 1231: }
  8652                           ;main.c: 1234: if (0 ==
  8653                           ;main.c: 1235: cmdbuf[ 0 ]) {
  8654  004354  0101               	movlb	1	; () banked
  8655  004356  672B               	tstfsz	_cmdbuf& (0+255),b
  8656  004358  D003               	goto	l14285
  8657  00435A                     l14283:
  8658                           
  8659                           ;main.c: 1236: sendVSCPDriverAck();
  8660  00435A  EC66  F013         	call	_sendVSCPDriverAck	;wreg free
  8661                           
  8662                           ;main.c: 1237: }
  8663  00435E  D06B               	goto	l14359
  8664  004360                     l14285:
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;main.c: 1239: else if (1 ==
  8668                           ;main.c: 1240: cmdbuf[ 0 ]) {
  8669  004360  052B               	decf	_cmdbuf& (0+255),w,b
  8670  004362  E103               	bnz	l14289
  8671  004364                     l14287:
  8672                           
  8673                           ;main.c: 1241: sendVSCPDriverNack();
  8674  004364  EC16  F013         	call	_sendVSCPDriverNack	;wreg free
  8675                           
  8676                           ;main.c: 1242: }
  8677  004368  D066               	goto	l14359
  8678  00436A                     l14289:
  8679                           
  8680                           ; BSR set to: 1
  8681                           ;main.c: 1244: else if (2 ==
  8682                           ;main.c: 1245: cmdbuf[ 0 ]) {
  8683  00436A  512B               	movf	_cmdbuf& (0+255),w,b
  8684  00436C  0A02               	xorlw	2
  8685  00436E  E105               	bnz	l14297
  8686                           
  8687                           ; BSR set to: 1
  8688                           ;main.c: 1246: if ( receiveVSCPModeCanalMsg() ) {
  8689  004370  EC4D  F018         	call	_receiveVSCPModeCanalMsg	;wreg free
  8690  004374  0900               	iorlw	0
  8691  004376  E1F1               	bnz	l14283
  8692  004378  D7F5               	goto	l14287
  8693  00437A                     l14297:
  8694                           
  8695                           ; BSR set to: 1
  8696                           ;main.c: 1254: else if (6 ==
  8697                           ;main.c: 1255: cmdbuf[ 0 ]) {
  8698  00437A  512B               	movf	_cmdbuf& (0+255),w,b
  8699  00437C  0A06               	xorlw	6
  8700  00437E  E103               	bnz	l14305
  8701                           
  8702                           ; BSR set to: 1
  8703                           ;main.c: 1256: if (receiveVSCPModeMultiCanalMsg()) {
  8704  004380  EC54  F00B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8705  004384  D7F7               	goto	L5
  8706  004386                     l14305:
  8707                           
  8708                           ; BSR set to: 1
  8709                           ;main.c: 1264: else if (6 ==
  8710                           ;main.c: 1265: cmdbuf[ 0 ]) {
  8711  004386  512B               	movf	_cmdbuf& (0+255),w,b
  8712  004388  0A06               	xorlw	6
  8713  00438A  E0EC               	bz	l14287
  8714                           
  8715                           ; BSR set to: 1
  8716                           ;main.c: 1269: else if (3 ==
  8717                           ;main.c: 1270: cmdbuf[ 0 ]) {
  8718  00438C  512B               	movf	_cmdbuf& (0+255),w,b
  8719  00438E  0A03               	xorlw	3
  8720  004390  E0E9               	bz	l14287
  8721                           
  8722                           ; BSR set to: 1
  8723                           ;main.c: 1274: else if (4 ==
  8724                           ;main.c: 1275: cmdbuf[ 0 ]) {
  8725  004392  512B               	movf	_cmdbuf& (0+255),w,b
  8726  004394  0A04               	xorlw	4
  8727  004396  E0E6               	bz	l14287
  8728                           
  8729                           ; BSR set to: 1
  8730                           ;main.c: 1279: else if (8 ==
  8731                           ;main.c: 1280: cmdbuf[ 0 ]) {
  8732  004398  512B               	movf	_cmdbuf& (0+255),w,b
  8733  00439A  0A08               	xorlw	8
  8734  00439C  E107               	bnz	l14323
  8735                           
  8736                           ; BSR set to: 1
  8737                           ;main.c: 1281: caps.maxVscpFrames = cmdbuf[ 5 ];
  8738  00439E  C130  F1E7         	movff	_cmdbuf+5,_caps
  8739                           
  8740                           ;main.c: 1282: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8741  0043A2  C131  F1E8         	movff	_cmdbuf+6,_caps+1
  8742                           
  8743                           ; BSR set to: 1
  8744                           ;main.c: 1283: sendVSCPModeCapabilities();
  8745  0043A6  EC5C  F014         	call	_sendVSCPModeCapabilities	;wreg free
  8746                           
  8747                           ;main.c: 1284: }
  8748  0043AA  D045               	goto	l14359
  8749  0043AC                     l14323:
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;main.c: 1286: else if (255 ==
  8753                           ;main.c: 1287: cmdbuf[ 0 ]) {
  8754  0043AC  292B               	incf	_cmdbuf& (0+255),w,b
  8755  0043AE  E140               	bnz	l14357
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;main.c: 1289: if (cmdbuf[ 5 ] ==
  8759                           ;main.c: 1290: 0) {
  8760  0043B0  6730               	tstfsz	(_cmdbuf+5)& (0+255),b
  8761  0043B2  D006               	goto	l14329
  8762                           
  8763                           ; BSR set to: 1
  8764                           ;main.c: 1291: sendVSCPDriverCommandReply(0, 0);
  8765  0043B4  0E00               	movlw	0
  8766  0043B6  0100               	movlb	0	; () banked
  8767  0043B8  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8768  0043BA  EC06  F017         	call	_sendVSCPDriverCommandReply
  8769                           
  8770                           ;main.c: 1292: }
  8771  0043BE  D03B               	goto	l14359
  8772  0043C0                     l14329:
  8773                           
  8774                           ; BSR set to: 1
  8775                           ;main.c: 1294: else if (cmdbuf[ 5 ] ==
  8776                           ;main.c: 1295: 1) {
  8777  0043C0  0530               	decf	(_cmdbuf+5)& (0+255),w,b
  8778  0043C2  E109               	bnz	l14335
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;main.c: 1296: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8782  0043C4  0E00               	movlw	0
  8783  0043C6  EC8D  F00B         	call	_ECANSetOperationMode
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;main.c: 1297: sendVSCPDriverCommandReply(0, 1);
  8787  0043CA  0E01               	movlw	1
  8788  0043CC  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8789  0043CE  0E00               	movlw	0
  8790  0043D0  EC06  F017         	call	_sendVSCPDriverCommandReply
  8791                           
  8792                           ;main.c: 1298: }
  8793  0043D4  D030               	goto	l14359
  8794  0043D6                     l14335:
  8795                           
  8796                           ; BSR set to: 1
  8797                           ;main.c: 1300: else if (cmdbuf[ 5 ] ==
  8798                           ;main.c: 1301: 2) {
  8799  0043D6  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8800  0043D8  0A02               	xorlw	2
  8801  0043DA  E109               	bnz	l14341
  8802                           
  8803                           ; BSR set to: 1
  8804                           ;main.c: 1302: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8805  0043DC  0E40               	movlw	64
  8806  0043DE  EC8D  F00B         	call	_ECANSetOperationMode
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;main.c: 1303: sendVSCPDriverCommandReply(0, 2);
  8810  0043E2  0E02               	movlw	2
  8811  0043E4  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8812  0043E6  0E00               	movlw	0
  8813  0043E8  EC06  F017         	call	_sendVSCPDriverCommandReply
  8814                           
  8815                           ;main.c: 1304: }
  8816  0043EC  D024               	goto	l14359
  8817  0043EE                     l14341:
  8818                           
  8819                           ; BSR set to: 1
  8820                           ;main.c: 1306: else if (cmdbuf[ 5 ] ==
  8821                           ;main.c: 1307: 3) {
  8822  0043EE  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8823  0043F0  0A03               	xorlw	3
  8824  0043F2  E109               	bnz	l14347
  8825                           
  8826                           ; BSR set to: 1
  8827                           ;main.c: 1308: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8828  0043F4  0E60               	movlw	96
  8829  0043F6  EC8D  F00B         	call	_ECANSetOperationMode
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;main.c: 1309: sendVSCPDriverCommandReply(0, 3);
  8833  0043FA  0E03               	movlw	3
  8834  0043FC  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8835  0043FE  0E00               	movlw	0
  8836  004400  EC06  F017         	call	_sendVSCPDriverCommandReply
  8837                           
  8838                           ;main.c: 1310: }
  8839  004404  D018               	goto	l14359
  8840  004406                     l14347:
  8841                           
  8842                           ; BSR set to: 1
  8843                           ;main.c: 1312: else if (cmdbuf[ 5 ] ==
  8844                           ;main.c: 1313: 4) {
  8845  004406  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8846  004408  0A04               	xorlw	4
  8847  00440A  E109               	bnz	l14353
  8848                           
  8849                           ; BSR set to: 1
  8850                           ;main.c: 1314: ECANSetOperationMode(0x20);
  8851  00440C  0E20               	movlw	32
  8852  00440E  EC8D  F00B         	call	_ECANSetOperationMode
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;main.c: 1315: sendVSCPDriverCommandReply(0, 4);
  8856  004412  0E04               	movlw	4
  8857  004414  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8858  004416  0E00               	movlw	0
  8859  004418  EC06  F017         	call	_sendVSCPDriverCommandReply
  8860                           
  8861                           ;main.c: 1316: }
  8862  00441C  D00C               	goto	l14359
  8863  00441E                     l14353:
  8864                           
  8865                           ; BSR set to: 1
  8866                           ;main.c: 1318: else if (cmdbuf[ 5 ] ==
  8867                           ;main.c: 1319: 5) {
  8868  00441E  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8869  004420  0A05               	xorlw	5
  8870  004422  E109               	bnz	l14359
  8871                           
  8872                           ; BSR set to: 1
  8873                           ;main.c: 1320: sendVSCPDriverCommandReply(0, 0);
  8874  004424  0E00               	movlw	0
  8875  004426  0100               	movlb	0	; () banked
  8876  004428  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8877  00442A  EC06  F017         	call	_sendVSCPDriverCommandReply
  8878  00442E  D003               	goto	l14359
  8879  004430                     l14357:
  8880                           
  8881                           ; BSR set to: 1
  8882                           ;main.c: 1325: else {
  8883                           ;main.c: 1327: sendVSCPDriverErrorFrame(2);
  8884  004430  0E02               	movlw	2
  8885  004432  EC71  F015         	call	_sendVSCPDriverErrorFrame
  8886  004436                     l14359:
  8887                           
  8888                           ;main.c: 1328: }
  8889                           ;main.c: 1331: pos = 0;
  8890  004436  0100               	movlb	0	; () banked
  8891  004438  6BE7               	clrf	_pos& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 1332: stateVscpDriver = 0;
  8895  00443A  6A33               	clrf	_stateVscpDriver,c
  8896  00443C                     l14363:
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;main.c: 1334: }
  8900                           ;main.c: 1336: }
  8901                           ;main.c: 1339: (INTCONbits.GIE = 1);
  8902  00443C  8EF2               	bsf	intcon,7,c	;volatile
  8903  00443E                     l672:
  8904  00443E  0012               	return	
  8905  004440                     __end_of_doModeVscp:
  8906                           	opt stack 0
  8907  004440                     PL24:
  8908                           	opt stack 19
  8909  004440  0E2B               	movlw	low _cmdbuf
  8910  004442  0100               	movlb	0	; () banked
  8911  004444  25E7               	addwf	_pos& (0+255),w,b
  8912  004446  6ED9               	movwf	fsr2l,c
  8913  004448  6ADA               	clrf	fsr2h,c
  8914  00444A  0E01               	movlw	high _cmdbuf
  8915  00444C  22DA               	addwfc	fsr2h,f,c
  8916  00444E  0012               	return	
  8917  004450                     __end_ofPL24:
  8918                           	opt stack 0
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           indf0	equ	0xFEF
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           indf1	equ	0xFE7
  8932                           postinc1	equ	0xFE6
  8933                           postdec1	equ	0xFE5
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           plusw2	equ	0xFDB
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _sendVSCPDriverErrorFrame *****************
  8945 ;; Defined at:
  8946 ;;		line 1600 in file "main.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  errorcode       1    wreg     unsigned char 
  8949 ;; Auto vars:     Size  Location     Type
  8950 ;;  errorcode       1   15[BANK0 ] unsigned char 
  8951 ;;  crc             1   16[BANK0 ] unsigned char 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;		None               void
  8954 ;; Registers used:
  8955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : F/1
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8961 ;;      Params:         0       0       0       0       0       0       0
  8962 ;;      Locals:         0       2       0       0       0       0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0
  8964 ;;      Totals:         0       2       0       0       0       0       0
  8965 ;;Total ram usage:        2 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    6
  8968 ;; This function calls:
  8969 ;;		_WriteUSART
  8970 ;;		_sendEscapedUartData
  8971 ;;		_crc8
  8972 ;; This function is called by:
  8973 ;;		_doModeVscp
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           	psect	text8
  8978  002AE2                     __ptext8:
  8979                           	opt stack 0
  8980  002AE2                     _sendVSCPDriverErrorFrame:
  8981                           	opt stack 22
  8982                           
  8983                           ;incstack = 0
  8984                           ;incstack = 0
  8985                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  8986  002AE2  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  8987                           
  8988                           ; BSR set to: 1
  8989                           ;main.c: 1601: uint8_t crc = 0;
  8990  002AE6  0100               	movlb	0	; () banked
  8991  002AE8  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  8992  002AEA                     l790:
  8993  002AEA  A2AC               	btfss	4012,1,c	;volatile
  8994  002AEC  D7FE               	goto	l790
  8995                           
  8996                           ;main.c: 1605: WriteUSART(0x10);
  8997  002AEE  0E10               	movlw	16
  8998  002AF0  EC78  F00B         	call	_WriteUSART
  8999  002AF4                     l793:
  9000  002AF4  A2AC               	btfss	4012,1,c	;volatile
  9001  002AF6  D7FE               	goto	l793
  9002                           
  9003                           ;main.c: 1607: WriteUSART(0x02);
  9004  002AF8  0E02               	movlw	2
  9005  002AFA  EC78  F00B         	call	_WriteUSART
  9006  002AFE                     l796:
  9007  002AFE  A2AC               	btfss	4012,1,c	;volatile
  9008  002B00  D7FE               	goto	l796
  9009                           
  9010                           ;main.c: 1611: WriteUSART(253);
  9011  002B02  0EFD               	movlw	253
  9012  002B04  EC78  F00B         	call	_WriteUSART
  9013                           
  9014                           ;main.c: 1612: crc8(&crc, 253);
  9015  002B08  0100               	movlb	0	; () banked
  9016  002B0A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9017  002B0C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9018  002B0E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9019  002B10  6F67               	movwf	?_crc8& (0+255),b
  9020  002B12  0EFD               	movlw	253
  9021  002B14  6F69               	movwf	(?_crc8+2)& (0+255),b
  9022  002B16  EC5C  F00C         	call	_crc8	;wreg free
  9023  002B1A                     l799:
  9024  002B1A  A2AC               	btfss	4012,1,c	;volatile
  9025  002B1C  D7FE               	goto	l799
  9026                           
  9027                           ;main.c: 1616: WriteUSART(0);
  9028  002B1E  0E00               	movlw	0
  9029  002B20  EC78  F00B         	call	_WriteUSART
  9030                           
  9031                           ;main.c: 1617: crc8(&crc, 0);
  9032  002B24  D836               	call	PL82	;call to abstracted procedure
  9033  002B26  EC5C  F00C         	call	_crc8	;wreg free
  9034                           
  9035                           ; BSR set to: 0
  9036                           ;main.c: 1620: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9037  002B2A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9038  002B2C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9039  002B2E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9040  002B30  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9041  002B32  0101               	movlb	1	; () banked
  9042  002B34  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  9043  002B36  ECB3  F00E         	call	_sendEscapedUartData
  9044  002B3A                     l802:
  9045  002B3A  A2AC               	btfss	4012,1,c	;volatile
  9046  002B3C  D7FE               	goto	l802
  9047                           
  9048                           ;main.c: 1624: WriteUSART(0);
  9049  002B3E  0E00               	movlw	0
  9050  002B40  EC78  F00B         	call	_WriteUSART
  9051                           
  9052                           ;main.c: 1625: crc8(&crc, 0);
  9053  002B44  D826               	call	PL82	;call to abstracted procedure
  9054  002B46  EC5C  F00C         	call	_crc8	;wreg free
  9055  002B4A                     l805:
  9056  002B4A  A2AC               	btfss	4012,1,c	;volatile
  9057  002B4C  D7FE               	goto	l805
  9058                           
  9059                           ;main.c: 1627: WriteUSART(1);
  9060  002B4E  0E01               	movlw	1
  9061  002B50  EC78  F00B         	call	_WriteUSART
  9062                           
  9063                           ;main.c: 1628: crc8(&crc, 1);
  9064  002B54  0100               	movlb	0	; () banked
  9065  002B56  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9066  002B58  6F68               	movwf	(?_crc8+1)& (0+255),b
  9067  002B5A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9068  002B5C  6F67               	movwf	?_crc8& (0+255),b
  9069  002B5E  0E01               	movlw	1
  9070  002B60  6F69               	movwf	(?_crc8+2)& (0+255),b
  9071  002B62  EC5C  F00C         	call	_crc8	;wreg free
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;main.c: 1631: sendEscapedUartData(errorcode, &crc);
  9075  002B66  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9076  002B68  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9077  002B6A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9078  002B6C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9079  002B6E  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9080  002B70  ECB3  F00E         	call	_sendEscapedUartData
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;main.c: 1634: sendEscapedUartData(crc, (0));
  9084  002B74  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9085  002B76  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9086  002B78  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9087  002B7A  ECB3  F00E         	call	_sendEscapedUartData
  9088  002B7E                     l808:
  9089  002B7E  A2AC               	btfss	4012,1,c	;volatile
  9090  002B80  D7FE               	goto	l808
  9091                           
  9092                           ;main.c: 1638: WriteUSART(0x10);
  9093  002B82  0E10               	movlw	16
  9094  002B84  EC78  F00B         	call	_WriteUSART
  9095  002B88                     l811:
  9096  002B88  A2AC               	btfss	4012,1,c	;volatile
  9097  002B8A  D7FE               	goto	l811
  9098                           
  9099                           ;main.c: 1640: WriteUSART(0x03);
  9100  002B8C  0E03               	movlw	3
  9101  002B8E  EF78  F00B         	goto	_WriteUSART
  9102  002B92                     __end_of_sendVSCPDriverErrorFrame:
  9103                           	opt stack 0
  9104  002B92                     PL82:
  9105                           	opt stack 22
  9106  002B92  0100               	movlb	0	; () banked
  9107  002B94  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9108  002B96  6F68               	movwf	(?_crc8+1)& (0+255),b
  9109  002B98  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9110  002B9A  6F67               	movwf	?_crc8& (0+255),b
  9111  002B9C  6B69               	clrf	(?_crc8+2)& (0+255),b
  9112  002B9E  0C00               	retlw	0
  9113  002BA0                     __end_ofPL82:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           intcon	equ	0xFF2
  9122                           indf0	equ	0xFEF
  9123                           postinc0	equ	0xFEE
  9124                           fsr0h	equ	0xFEA
  9125                           fsr0l	equ	0xFE9
  9126                           wreg	equ	0xFE8
  9127                           indf1	equ	0xFE7
  9128                           postinc1	equ	0xFE6
  9129                           postdec1	equ	0xFE5
  9130                           fsr1h	equ	0xFE2
  9131                           fsr1l	equ	0xFE1
  9132                           indf2	equ	0xFDF
  9133                           postinc2	equ	0xFDE
  9134                           postdec2	equ	0xFDD
  9135                           plusw2	equ	0xFDB
  9136                           fsr2h	equ	0xFDA
  9137                           fsr2l	equ	0xFD9
  9138                           status	equ	0xFD8
  9139                           
  9140 ;; *************** function _sendVSCPDriverCommandReply *****************
  9141 ;; Defined at:
  9142 ;;		line 1737 in file "main.c"
  9143 ;; Parameters:    Size  Location     Type
  9144 ;;  cmdReplyCode    1    wreg     unsigned char 
  9145 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9148 ;;  crc             1   17[BANK0 ] unsigned char 
  9149 ;; Return value:  Size  Location     Type
  9150 ;;		None               void
  9151 ;; Registers used:
  9152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9153 ;; Tracked objects:
  9154 ;;		On entry : F/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9158 ;;      Params:         0       1       0       0       0       0       0
  9159 ;;      Locals:         0       2       0       0       0       0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0
  9161 ;;      Totals:         0       3       0       0       0       0       0
  9162 ;;Total ram usage:        3 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; Hardware stack levels required when called:    6
  9165 ;; This function calls:
  9166 ;;		_WriteUSART
  9167 ;;		_sendEscapedUartData
  9168 ;;		_crc8
  9169 ;; This function is called by:
  9170 ;;		_doModeVscp
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           	psect	text9
  9175  002E0C                     __ptext9:
  9176                           	opt stack 0
  9177  002E0C                     _sendVSCPDriverCommandReply:
  9178                           	opt stack 22
  9179                           
  9180                           ;incstack = 0
  9181                           ;incstack = 0
  9182                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9183  002E0C  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;main.c: 1738: uint8_t crc = 0;
  9187  002E10  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9188  002E12                     l871:
  9189                           
  9190                           ; BSR set to: 0
  9191  002E12  A2AC               	btfss	4012,1,c	;volatile
  9192  002E14  D7FE               	goto	l871
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;main.c: 1742: WriteUSART(0x10);
  9196  002E16  0E10               	movlw	16
  9197  002E18  EC78  F00B         	call	_WriteUSART
  9198  002E1C                     l874:
  9199  002E1C  A2AC               	btfss	4012,1,c	;volatile
  9200  002E1E  D7FE               	goto	l874
  9201                           
  9202                           ;main.c: 1744: WriteUSART(0x02);
  9203  002E20  0E02               	movlw	2
  9204  002E22  EC78  F00B         	call	_WriteUSART
  9205  002E26                     l877:
  9206  002E26  A2AC               	btfss	4012,1,c	;volatile
  9207  002E28  D7FE               	goto	l877
  9208                           
  9209                           ;main.c: 1748: WriteUSART(254);
  9210  002E2A  0EFE               	movlw	254
  9211  002E2C  EC78  F00B         	call	_WriteUSART
  9212                           
  9213                           ;main.c: 1749: crc8(&crc, 254);
  9214  002E30  0100               	movlb	0	; () banked
  9215  002E32  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9216  002E34  6F68               	movwf	(?_crc8+1)& (0+255),b
  9217  002E36  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9218  002E38  6F67               	movwf	?_crc8& (0+255),b
  9219  002E3A  0EFE               	movlw	254
  9220  002E3C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9221  002E3E  EC5C  F00C         	call	_crc8	;wreg free
  9222  002E42                     l880:
  9223                           
  9224                           ; BSR set to: 0
  9225  002E42  A2AC               	btfss	4012,1,c	;volatile
  9226  002E44  D7FE               	goto	l880
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;main.c: 1753: WriteUSART(0);
  9230  002E46  0E00               	movlw	0
  9231  002E48  EC78  F00B         	call	_WriteUSART
  9232                           
  9233                           ;main.c: 1754: crc8(&crc, 0);
  9234  002E4C  D841               	call	PL84	;call to abstracted procedure
  9235  002E4E  EC5C  F00C         	call	_crc8	;wreg free
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;main.c: 1757: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9239  002E52  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9240  002E54  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9241  002E56  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9242  002E58  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9243  002E5A  0101               	movlb	1	; () banked
  9244  002E5C  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  9245  002E5E  ECB3  F00E         	call	_sendEscapedUartData
  9246  002E62                     l883:
  9247                           
  9248                           ; BSR set to: 0
  9249  002E62  A2AC               	btfss	4012,1,c	;volatile
  9250  002E64  D7FE               	goto	l883
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;main.c: 1761: WriteUSART(0);
  9254  002E66  0E00               	movlw	0
  9255  002E68  EC78  F00B         	call	_WriteUSART
  9256                           
  9257                           ;main.c: 1762: crc8(&crc, 0);
  9258  002E6C  D831               	call	PL84	;call to abstracted procedure
  9259  002E6E  EC5C  F00C         	call	_crc8	;wreg free
  9260  002E72                     l886:
  9261                           
  9262                           ; BSR set to: 0
  9263  002E72  A2AC               	btfss	4012,1,c	;volatile
  9264  002E74  D7FE               	goto	l886
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;main.c: 1764: WriteUSART(2);
  9268  002E76  0E02               	movlw	2
  9269  002E78  EC78  F00B         	call	_WriteUSART
  9270                           
  9271                           ;main.c: 1765: crc8(&crc, 2);
  9272  002E7C  0100               	movlb	0	; () banked
  9273  002E7E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9274  002E80  6F68               	movwf	(?_crc8+1)& (0+255),b
  9275  002E82  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9276  002E84  6F67               	movwf	?_crc8& (0+255),b
  9277  002E86  0E02               	movlw	2
  9278  002E88  6F69               	movwf	(?_crc8+2)& (0+255),b
  9279  002E8A  EC5C  F00C         	call	_crc8	;wreg free
  9280  002E8E                     l889:
  9281                           
  9282                           ; BSR set to: 0
  9283  002E8E  A2AC               	btfss	4012,1,c	;volatile
  9284  002E90  D7FE               	goto	l889
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;main.c: 1769: sendEscapedUartData(cmdReplyCode, &crc);
  9288  002E92  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9289  002E94  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9290  002E96  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9291  002E98  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9292  002E9A  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9293  002E9C  ECB3  F00E         	call	_sendEscapedUartData
  9294  002EA0                     l892:
  9295                           
  9296                           ; BSR set to: 0
  9297  002EA0  A2AC               	btfss	4012,1,c	;volatile
  9298  002EA2  D7FE               	goto	l892
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;main.c: 1773: sendEscapedUartData(cmdCode, &crc);
  9302  002EA4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9303  002EA6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9304  002EA8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9305  002EAA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9306  002EAC  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9307  002EAE  ECB3  F00E         	call	_sendEscapedUartData
  9308                           
  9309                           ;main.c: 1776: sendEscapedUartData(crc, (0));
  9310  002EB2  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9311  002EB4  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9312  002EB6  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9313  002EB8  ECB3  F00E         	call	_sendEscapedUartData
  9314  002EBC                     l895:
  9315                           
  9316                           ; BSR set to: 0
  9317  002EBC  A2AC               	btfss	4012,1,c	;volatile
  9318  002EBE  D7FE               	goto	l895
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;main.c: 1780: WriteUSART(0x10);
  9322  002EC0  0E10               	movlw	16
  9323  002EC2  EC78  F00B         	call	_WriteUSART
  9324  002EC6                     l898:
  9325  002EC6  A2AC               	btfss	4012,1,c	;volatile
  9326  002EC8  D7FE               	goto	l898
  9327                           
  9328                           ;main.c: 1782: WriteUSART(0x03);
  9329  002ECA  0E03               	movlw	3
  9330  002ECC  EF78  F00B         	goto	_WriteUSART
  9331  002ED0                     __end_of_sendVSCPDriverCommandReply:
  9332                           	opt stack 0
  9333  002ED0                     PL84:
  9334                           	opt stack 22
  9335  002ED0  0100               	movlb	0	; () banked
  9336  002ED2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9337  002ED4  6F68               	movwf	(?_crc8+1)& (0+255),b
  9338  002ED6  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9339  002ED8  6F67               	movwf	?_crc8& (0+255),b
  9340  002EDA  6B69               	clrf	(?_crc8+2)& (0+255),b
  9341  002EDC  0C00               	retlw	0
  9342  002EDE                     __end_ofPL84:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           indf0	equ	0xFEF
  9352                           postinc0	equ	0xFEE
  9353                           fsr0h	equ	0xFEA
  9354                           fsr0l	equ	0xFE9
  9355                           wreg	equ	0xFE8
  9356                           indf1	equ	0xFE7
  9357                           postinc1	equ	0xFE6
  9358                           postdec1	equ	0xFE5
  9359                           fsr1h	equ	0xFE2
  9360                           fsr1l	equ	0xFE1
  9361                           indf2	equ	0xFDF
  9362                           postinc2	equ	0xFDE
  9363                           postdec2	equ	0xFDD
  9364                           plusw2	equ	0xFDB
  9365                           fsr2h	equ	0xFDA
  9366                           fsr2l	equ	0xFD9
  9367                           status	equ	0xFD8
  9368                           
  9369 ;; *************** function _sendVSCPModeCapabilities *****************
  9370 ;; Defined at:
  9371 ;;		line 2106 in file "main.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;  crc             1   15[BANK0 ] unsigned char 
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  1    wreg      enum E15660
  9378 ;; Registers used:
  9379 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9380 ;; Tracked objects:
  9381 ;;		On entry : F/1
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9385 ;;      Params:         0       0       0       0       0       0       0
  9386 ;;      Locals:         0       1       0       0       0       0       0
  9387 ;;      Temps:          0       0       0       0       0       0       0
  9388 ;;      Totals:         0       1       0       0       0       0       0
  9389 ;;Total ram usage:        1 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    6
  9392 ;; This function calls:
  9393 ;;		_WriteUSART
  9394 ;;		_sendEscapedUartData
  9395 ;;		_crc8
  9396 ;; This function is called by:
  9397 ;;		_doModeVscp
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           	psect	text10
  9402  0028B8                     __ptext10:
  9403                           	opt stack 0
  9404  0028B8                     _sendVSCPModeCapabilities:
  9405                           	opt stack 22
  9406                           
  9407                           ; BSR set to: 1
  9408                           ;main.c: 2107: uint8_t crc = 0;
  9409                           
  9410                           ;incstack = 0
  9411                           ;incstack = 0
  9412  0028B8  0100               	movlb	0	; () banked
  9413  0028BA  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9414  0028BC                     l1020:
  9415  0028BC  A2AC               	btfss	4012,1,c	;volatile
  9416  0028BE  D7FE               	goto	l1020
  9417                           
  9418                           ;main.c: 2111: WriteUSART(0x10);
  9419  0028C0  0E10               	movlw	16
  9420  0028C2  EC78  F00B         	call	_WriteUSART
  9421  0028C6                     l1023:
  9422  0028C6  A2AC               	btfss	4012,1,c	;volatile
  9423  0028C8  D7FE               	goto	l1023
  9424                           
  9425                           ;main.c: 2113: WriteUSART(0x02);
  9426  0028CA  0E02               	movlw	2
  9427  0028CC  EC78  F00B         	call	_WriteUSART
  9428  0028D0                     l1026:
  9429  0028D0  A2AC               	btfss	4012,1,c	;volatile
  9430  0028D2  D7FE               	goto	l1026
  9431                           
  9432                           ;main.c: 2117: WriteUSART(9);
  9433  0028D4  0E09               	movlw	9
  9434  0028D6  EC78  F00B         	call	_WriteUSART
  9435                           
  9436                           ;main.c: 2118: crc8(&crc, 9);
  9437  0028DA  0100               	movlb	0	; () banked
  9438  0028DC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9439  0028DE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9440  0028E0  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9441  0028E2  6F67               	movwf	?_crc8& (0+255),b
  9442  0028E4  0E09               	movlw	9
  9443  0028E6  6F69               	movwf	(?_crc8+2)& (0+255),b
  9444  0028E8  EC5C  F00C         	call	_crc8	;wreg free
  9445  0028EC                     l1029:
  9446  0028EC  A2AC               	btfss	4012,1,c	;volatile
  9447  0028EE  D7FE               	goto	l1029
  9448                           
  9449                           ;main.c: 2122: WriteUSART(0);
  9450  0028F0  0E00               	movlw	0
  9451  0028F2  EC78  F00B         	call	_WriteUSART
  9452                           
  9453                           ;main.c: 2123: crc8(&crc, 0);
  9454  0028F6  0100               	movlb	0	; () banked
  9455  0028F8  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9456  0028FA  6F68               	movwf	(?_crc8+1)& (0+255),b
  9457  0028FC  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9458  0028FE  6F67               	movwf	?_crc8& (0+255),b
  9459  002900  0E00               	movlw	0
  9460  002902  6B69               	clrf	(?_crc8+2)& (0+255),b
  9461  002904  EC5C  F00C         	call	_crc8	;wreg free
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;main.c: 2126: sendEscapedUartData(sequencyno, &crc );
  9465  002908  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9466  00290A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9467  00290C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9468  00290E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9469  002910  5032               	movf	_sequencyno,w,c
  9470  002912  ECB3  F00E         	call	_sendEscapedUartData
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;main.c: 2127: sequencyno++;
  9474  002916  2A32               	incf	_sequencyno,f,c
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;main.c: 2130: sendEscapedUartData( 0, &crc );
  9478  002918  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9479  00291A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9480  00291C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9481  00291E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9482  002920  0E00               	movlw	0
  9483  002922  ECB3  F00E         	call	_sendEscapedUartData
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;main.c: 2131: sendEscapedUartData( 2, &crc );
  9487  002926  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9488  002928  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9489  00292A  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9490  00292C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9491  00292E  0E02               	movlw	2
  9492  002930  ECB3  F00E         	call	_sendEscapedUartData
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;main.c: 2134: sendEscapedUartData( 1, &crc );
  9496  002934  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9497  002936  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9498  002938  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9499  00293A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9500  00293C  0E01               	movlw	1
  9501  00293E  ECB3  F00E         	call	_sendEscapedUartData
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;main.c: 2135: sendEscapedUartData( 0, &crc );
  9505  002942  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9506  002944  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9507  002946  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9508  002948  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9509  00294A  0E00               	movlw	0
  9510  00294C  ECB3  F00E         	call	_sendEscapedUartData
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;main.c: 2138: sendEscapedUartData(crc, (0));
  9514  002950  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9515  002952  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9516  002954  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9517  002956  ECB3  F00E         	call	_sendEscapedUartData
  9518  00295A                     l1032:
  9519  00295A  A2AC               	btfss	4012,1,c	;volatile
  9520  00295C  D7FE               	goto	l1032
  9521                           
  9522                           ;main.c: 2142: WriteUSART(0x10);
  9523  00295E  0E10               	movlw	16
  9524  002960  EC78  F00B         	call	_WriteUSART
  9525  002964                     l1035:
  9526  002964  A2AC               	btfss	4012,1,c	;volatile
  9527  002966  D7FE               	goto	l1035
  9528                           
  9529                           ;main.c: 2144: WriteUSART(0x03);
  9530  002968  0E03               	movlw	3
  9531  00296A  EF78  F00B         	goto	_WriteUSART
  9532  00296E                     __end_of_sendVSCPModeCapabilities:
  9533                           	opt stack 0
  9534                           tblptru	equ	0xFF8
  9535                           tblptrh	equ	0xFF7
  9536                           tblptrl	equ	0xFF6
  9537                           tablat	equ	0xFF5
  9538                           prodh	equ	0xFF4
  9539                           prodl	equ	0xFF3
  9540                           intcon	equ	0xFF2
  9541                           indf0	equ	0xFEF
  9542                           postinc0	equ	0xFEE
  9543                           fsr0h	equ	0xFEA
  9544                           fsr0l	equ	0xFE9
  9545                           wreg	equ	0xFE8
  9546                           indf1	equ	0xFE7
  9547                           postinc1	equ	0xFE6
  9548                           postdec1	equ	0xFE5
  9549                           fsr1h	equ	0xFE2
  9550                           fsr1l	equ	0xFE1
  9551                           indf2	equ	0xFDF
  9552                           postinc2	equ	0xFDE
  9553                           postdec2	equ	0xFDD
  9554                           plusw2	equ	0xFDB
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9560 ;; Defined at:
  9561 ;;		line 2240 in file "main.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      enum E15660
  9568 ;; Registers used:
  9569 ;;		wreg
  9570 ;; Tracked objects:
  9571 ;;		On entry : F/1
  9572 ;;		On exit  : F/1
  9573 ;;		Unchanged: F/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9575 ;;      Params:         0       0       0       0       0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0
  9577 ;;      Temps:          0       0       0       0       0       0       0
  9578 ;;      Totals:         0       0       0       0       0       0       0
  9579 ;;Total ram usage:        0 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    3
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_doModeVscp
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           	psect	text11
  9590  0016A8                     __ptext11:
  9591                           	opt stack 0
  9592  0016A8                     _receiveVSCPModeMultiCanalMsg:
  9593                           	opt stack 25
  9594                           
  9595                           ; BSR set to: 1
  9596                           
  9597                           ; BSR set to: 1
  9598                           ;main.c: 2242: return 0;
  9599                           
  9600                           ;incstack = 0
  9601                           ;incstack = 0
  9602  0016A8  0C00               	retlw	0
  9603  0016AA                     __end_of_receiveVSCPModeMultiCanalMsg:
  9604                           	opt stack 0
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           intcon	equ	0xFF2
  9612                           indf0	equ	0xFEF
  9613                           postinc0	equ	0xFEE
  9614                           fsr0h	equ	0xFEA
  9615                           fsr0l	equ	0xFE9
  9616                           wreg	equ	0xFE8
  9617                           indf1	equ	0xFE7
  9618                           postinc1	equ	0xFE6
  9619                           postdec1	equ	0xFE5
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           postdec2	equ	0xFDD
  9625                           plusw2	equ	0xFDB
  9626                           fsr2h	equ	0xFDA
  9627                           fsr2l	equ	0xFD9
  9628                           status	equ	0xFD8
  9629                           
  9630 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9631 ;; Defined at:
  9632 ;;		line 2216 in file "main.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;		None
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  data            8   74[BANK0 ] unsigned char [8]
  9637 ;;  id              4   82[BANK0 ] unsigned long 
  9638 ;;  dlc             1   86[BANK0 ] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  1    wreg      enum E15660
  9641 ;; Registers used:
  9642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9643 ;; Tracked objects:
  9644 ;;		On entry : F/1
  9645 ;;		On exit  : E/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9648 ;;      Params:         0       0       0       0       0       0       0
  9649 ;;      Locals:         0      13       0       0       0       0       0
  9650 ;;      Temps:          0      20       0       0       0       0       0
  9651 ;;      Totals:         0      33       0       0       0       0       0
  9652 ;;Total ram usage:       33 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    6
  9655 ;; This function calls:
  9656 ;;		_memcpy
  9657 ;;		_sendCANFrame
  9658 ;; This function is called by:
  9659 ;;		_doModeVscp
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text12
  9664  00309A                     __ptext12:
  9665                           	opt stack 0
  9666  00309A                     _receiveVSCPModeCanalMsg:
  9667                           	opt stack 22
  9668                           
  9669                           ; BSR set to: 1
  9670                           ;main.c: 2217: uint32_t id;
  9671                           ;main.c: 2218: uint8_t dlc;
  9672                           ;main.c: 2219: uint8_t data[8];
  9673                           ;main.c: 2221: id = ((uint32_t) cmdbuf[5] << 26) |
  9674                           ;main.c: 2222: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9675                           ;main.c: 2223: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9676                           ;main.c: 2224: cmdbuf[5 + 3];
  9677                           
  9678                           ; BSR set to: 1
  9679                           ;incstack = 0
  9680                           ;incstack = 0
  9681  00309A  C132  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9682  00309E  0100               	movlb	0	; () banked
  9683  0030A0  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9684  0030A2  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9685  0030A4  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9686  0030A6  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9687  0030AA  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9688  0030AE  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9689  0030B2  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9690  0030B4  C131  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9691  0030B8  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9692  0030BA  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9693  0030BC  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9694  0030BE  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9695  0030C2  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9696  0030C6  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9697  0030C8  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9698  0030CA  C130  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9699  0030CE  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9700  0030D0  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9701  0030D2  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9702  0030D4  0E1A               	movlw	26
  9703  0030D6                     u21675:
  9704  0030D6  90D8               	bcf	status,0,c
  9705  0030D8  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9706  0030DA  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9707  0030DC  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9708  0030DE  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9709  0030E0  2EE8               	decfsz	wreg,f,c
  9710  0030E2  D7F9               	goto	u21675
  9711  0030E4  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9712  0030E6  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9713  0030E8  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9714  0030EA  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9715  0030EC  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9716  0030EE  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9717  0030F0  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9718  0030F2  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9719  0030F4  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9720  0030F6  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9721  0030F8  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9722  0030FA  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9723  0030FC  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9724  0030FE  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9725  003100  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9726  003102  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9727  003104  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9728  003106  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9729  003108  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9730  00310A  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9731  00310C  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9732  00310E  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9733  003110  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9734  003112  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9735  003114  0101               	movlb	1	; () banked
  9736  003116  5133               	movf	(_cmdbuf+8)& (0+255),w,b
  9737  003118  0100               	movlb	0	; () banked
  9738  00311A  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9739  00311C  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9740  00311E  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9741  003120  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9742  003122  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9743  003124  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9744  003126  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9745  003128  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9746                           
  9747                           ;main.c: 2225: dlc = ( cmdbuf[4] - 4 ) & 0x07;
  9748  00312A  0101               	movlb	1	; () banked
  9749  00312C  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  9750  00312E  0FFC               	addlw	252
  9751  003130  0B07               	andlw	7
  9752  003132  0100               	movlb	0	; () banked
  9753  003134  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 2226: if ( dlc > 8 ) {
  9757  003136  0E08               	movlw	8
  9758  003138  65B6               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9759  00313A  D002               	goto	l15889
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;main.c: 2227: return 0;
  9763  00313C  0E00               	movlw	0
  9764  00313E  D021               	goto	l1073
  9765  003140                     l15889:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;main.c: 2228: }
  9769                           ;main.c: 2229: memcpy( data, cmdbuf + 5 + 4, dlc );
  9770  003140  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9771  003142  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9772  003144  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9773  003146  6F60               	movwf	?_memcpy& (0+255),b
  9774  003148  0E34               	movlw	low (_cmdbuf+9)
  9775  00314A  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9776  00314C  0E01               	movlw	high (_cmdbuf+9)
  9777  00314E  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9778  003150  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9779  003154  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9780  003158  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9781  00315C  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9782  00315E  EC32  F00D         	call	_memcpy	;wreg free
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;main.c: 2231: return sendCANFrame(id, dlc, data);
  9786  003162  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9787  003166  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9788  00316A  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9789  00316E  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9790  003172  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9791  003176  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9792  003178  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9793  00317A  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9794  00317C  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9795  00317E  EC78  F00C         	call	_sendCANFrame	;wreg free
  9796  003182                     l1073:
  9797  003182  0012               	return	
  9798  003184                     __end_of_receiveVSCPModeCanalMsg:
  9799                           	opt stack 0
  9800                           tblptru	equ	0xFF8
  9801                           tblptrh	equ	0xFF7
  9802                           tblptrl	equ	0xFF6
  9803                           tablat	equ	0xFF5
  9804                           prodh	equ	0xFF4
  9805                           prodl	equ	0xFF3
  9806                           intcon	equ	0xFF2
  9807                           indf0	equ	0xFEF
  9808                           postinc0	equ	0xFEE
  9809                           fsr0h	equ	0xFEA
  9810                           fsr0l	equ	0xFE9
  9811                           wreg	equ	0xFE8
  9812                           indf1	equ	0xFE7
  9813                           postinc1	equ	0xFE6
  9814                           postdec1	equ	0xFE5
  9815                           fsr1h	equ	0xFE2
  9816                           fsr1l	equ	0xFE1
  9817                           indf2	equ	0xFDF
  9818                           postinc2	equ	0xFDE
  9819                           postdec2	equ	0xFDD
  9820                           plusw2	equ	0xFDB
  9821                           fsr2h	equ	0xFDA
  9822                           fsr2l	equ	0xFD9
  9823                           status	equ	0xFD8
  9824                           
  9825 ;; *************** function _memcpy *****************
  9826 ;; Defined at:
  9827 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9828 ;; Parameters:    Size  Location     Type
  9829 ;;  d1              2    0[BANK0 ] PTR void 
  9830 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9831 ;;  s1              2    2[BANK0 ] PTR const void 
  9832 ;;		 -> vscpData(8), cmdbuf(80), 
  9833 ;;  n               2    4[BANK0 ] unsigned int 
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9836 ;;		 -> vscpData(8), cmdbuf(80), 
  9837 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9838 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9839 ;; Return value:  Size  Location     Type
  9840 ;;                  2    0[BANK0 ] PTR void 
  9841 ;; Registers used:
  9842 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9843 ;; Tracked objects:
  9844 ;;		On entry : F/0
  9845 ;;		On exit  : F/0
  9846 ;;		Unchanged: 0/0
  9847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9848 ;;      Params:         0       6       0       0       0       0       0
  9849 ;;      Locals:         0       4       0       0       0       0       0
  9850 ;;      Temps:          0       0       0       0       0       0       0
  9851 ;;      Totals:         0      10       0       0       0       0       0
  9852 ;;Total ram usage:       10 bytes
  9853 ;; Hardware stack levels used:    1
  9854 ;; Hardware stack levels required when called:    3
  9855 ;; This function calls:
  9856 ;;		Nothing
  9857 ;; This function is called by:
  9858 ;;		_doModeSLCAN
  9859 ;;		_receiveVSCPModeCanalMsg
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           	psect	text13
  9864  001A64                     __ptext13:
  9865                           	opt stack 0
  9866  001A64                     _memcpy:
  9867                           	opt stack 25
  9868                           
  9869                           ; BSR set to: 0
  9870                           
  9871                           ;incstack = 0
  9872                           ;incstack = 0
  9873  001A64  C062  F068         	movff	memcpy@s1,memcpy@s
  9874  001A68  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9875  001A6C  C060  F066         	movff	memcpy@d1,memcpy@d
  9876  001A70  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9877  001A74  D00E               	goto	l16099
  9878  001A76                     l16093:
  9879                           
  9880                           ; BSR set to: 0
  9881  001A76  C068  FFD9         	movff	memcpy@s,fsr2l
  9882  001A7A  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9883  001A7E  C066  FFE1         	movff	memcpy@d,fsr1l
  9884  001A82  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9885  001A86  CFDF FFE7          	movff	indf2,indf1
  9886                           
  9887                           ; BSR set to: 0
  9888  001A8A  4B68               	infsnz	memcpy@s& (0+255),f,b
  9889  001A8C  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892  001A8E  4B66               	infsnz	memcpy@d& (0+255),f,b
  9893  001A90  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9894  001A92                     l16099:
  9895                           
  9896                           ; BSR set to: 0
  9897  001A92  0764               	decf	memcpy@n& (0+255),f,b
  9898  001A94  A0D8               	btfss	status,0,c
  9899  001A96  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9900  001A98  0100               	movlb	0	; () banked
  9901  001A9A  2964               	incf	memcpy@n& (0+255),w,b
  9902  001A9C  B4D8               	btfsc	status,2,c
  9903  001A9E  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9904  001AA0  B4D8               	btfsc	status,2,c
  9905                           
  9906                           ; BSR set to: 0
  9907  001AA2  0012               	return	
  9908  001AA4  D7E8               	goto	l16093
  9909  001AA6                     __end_of_memcpy:
  9910                           	opt stack 0
  9911                           tblptru	equ	0xFF8
  9912                           tblptrh	equ	0xFF7
  9913                           tblptrl	equ	0xFF6
  9914                           tablat	equ	0xFF5
  9915                           prodh	equ	0xFF4
  9916                           prodl	equ	0xFF3
  9917                           intcon	equ	0xFF2
  9918                           indf0	equ	0xFEF
  9919                           postinc0	equ	0xFEE
  9920                           fsr0h	equ	0xFEA
  9921                           fsr0l	equ	0xFE9
  9922                           wreg	equ	0xFE8
  9923                           indf1	equ	0xFE7
  9924                           postinc1	equ	0xFE6
  9925                           postdec1	equ	0xFE5
  9926                           fsr1h	equ	0xFE2
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           plusw2	equ	0xFDB
  9932                           fsr2h	equ	0xFDA
  9933                           fsr2l	equ	0xFD9
  9934                           status	equ	0xFD8
  9935                           
  9936 ;; *************** function _sendVSCPDriverAck *****************
  9937 ;; Defined at:
  9938 ;;		line 1648 in file "main.c"
  9939 ;; Parameters:    Size  Location     Type
  9940 ;;		None
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;  crc             1   15[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : E/1
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9952 ;;      Params:         0       0       0       0       0       0       0
  9953 ;;      Locals:         0       1       0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0
  9955 ;;      Totals:         0       1       0       0       0       0       0
  9956 ;;Total ram usage:        1 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    6
  9959 ;; This function calls:
  9960 ;;		_WriteUSART
  9961 ;;		_sendEscapedUartData
  9962 ;;		_crc8
  9963 ;; This function is called by:
  9964 ;;		_doModeVscp
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text14
  9969  0026CC                     __ptext14:
  9970                           	opt stack 0
  9971  0026CC                     _sendVSCPDriverAck:
  9972                           	opt stack 22
  9973                           
  9974                           ;main.c: 1649: uint8_t crc = 0;
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;incstack = 0
  9978                           ;incstack = 0
  9979  0026CC  0100               	movlb	0	; () banked
  9980  0026CE  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9981  0026D0                     l817:
  9982  0026D0  A2AC               	btfss	4012,1,c	;volatile
  9983  0026D2  D7FE               	goto	l817
  9984                           
  9985                           ;main.c: 1653: WriteUSART(0x10);
  9986  0026D4  0E10               	movlw	16
  9987  0026D6  EC78  F00B         	call	_WriteUSART
  9988  0026DA                     l820:
  9989  0026DA  A2AC               	btfss	4012,1,c	;volatile
  9990  0026DC  D7FE               	goto	l820
  9991                           
  9992                           ;main.c: 1655: WriteUSART(0x02);
  9993  0026DE  0E02               	movlw	2
  9994  0026E0  EC78  F00B         	call	_WriteUSART
  9995  0026E4                     l823:
  9996  0026E4  A2AC               	btfss	4012,1,c	;volatile
  9997  0026E6  D7FE               	goto	l823
  9998                           
  9999                           ;main.c: 1659: WriteUSART(251);
 10000  0026E8  0EFB               	movlw	251
 10001  0026EA  EC78  F00B         	call	_WriteUSART
 10002                           
 10003                           ;main.c: 1660: crc8(&crc, 251);
 10004  0026EE  0100               	movlb	0	; () banked
 10005  0026F0  0E00               	movlw	high sendVSCPDriverAck@crc
 10006  0026F2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10007  0026F4  0E6F               	movlw	low sendVSCPDriverAck@crc
 10008  0026F6  6F67               	movwf	?_crc8& (0+255),b
 10009  0026F8  0EFB               	movlw	251
 10010  0026FA  6F69               	movwf	(?_crc8+2)& (0+255),b
 10011  0026FC  EC5C  F00C         	call	_crc8	;wreg free
 10012  002700                     l826:
 10013  002700  A2AC               	btfss	4012,1,c	;volatile
 10014  002702  D7FE               	goto	l826
 10015                           
 10016                           ;main.c: 1664: WriteUSART(0);
 10017  002704  0E00               	movlw	0
 10018  002706  EC78  F00B         	call	_WriteUSART
 10019                           
 10020                           ;main.c: 1665: crc8(&crc, 0);
 10021  00270A  D829               	call	PL42	;call to abstracted procedure
 10022  00270C  EC5C  F00C         	call	_crc8	;wreg free
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;main.c: 1668: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10026  002710  0E00               	movlw	high sendVSCPDriverAck@crc
 10027  002712  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10028  002714  0E6F               	movlw	low sendVSCPDriverAck@crc
 10029  002716  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10030  002718  0101               	movlb	1	; () banked
 10031  00271A  512D               	movf	(_cmdbuf+2)& (0+255),w,b
 10032  00271C  ECB3  F00E         	call	_sendEscapedUartData
 10033  002720                     l829:
 10034  002720  A2AC               	btfss	4012,1,c	;volatile
 10035  002722  D7FE               	goto	l829
 10036                           
 10037                           ;main.c: 1672: WriteUSART(0);
 10038  002724  0E00               	movlw	0
 10039  002726  EC78  F00B         	call	_WriteUSART
 10040                           
 10041                           ;main.c: 1673: crc8(&crc, 0);
 10042  00272A  D819               	call	PL42	;call to abstracted procedure
 10043  00272C  EC5C  F00C         	call	_crc8	;wreg free
 10044  002730                     l832:
 10045  002730  A2AC               	btfss	4012,1,c	;volatile
 10046  002732  D7FE               	goto	l832
 10047                           
 10048                           ;main.c: 1675: WriteUSART(0);
 10049  002734  0E00               	movlw	0
 10050  002736  EC78  F00B         	call	_WriteUSART
 10051                           
 10052                           ;main.c: 1676: crc8(&crc, 0);
 10053  00273A  D811               	call	PL42	;call to abstracted procedure
 10054  00273C  EC5C  F00C         	call	_crc8	;wreg free
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;main.c: 1679: sendEscapedUartData(crc, (0));
 10058  002740  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10059  002742  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10060  002744  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10061  002746  ECB3  F00E         	call	_sendEscapedUartData
 10062  00274A                     l835:
 10063  00274A  A2AC               	btfss	4012,1,c	;volatile
 10064  00274C  D7FE               	goto	l835
 10065                           
 10066                           ;main.c: 1683: WriteUSART(0x10);
 10067  00274E  0E10               	movlw	16
 10068  002750  EC78  F00B         	call	_WriteUSART
 10069  002754                     l838:
 10070  002754  A2AC               	btfss	4012,1,c	;volatile
 10071  002756  D7FE               	goto	l838
 10072                           
 10073                           ;main.c: 1685: WriteUSART(0x03);
 10074  002758  0E03               	movlw	3
 10075  00275A  EF78  F00B         	goto	_WriteUSART
 10076  00275E                     __end_of_sendVSCPDriverAck:
 10077                           	opt stack 0
 10078  00275E                     PL42:
 10079                           	opt stack 22
 10080  00275E  0100               	movlb	0	; () banked
 10081  002760  0E00               	movlw	high sendVSCPDriverAck@crc
 10082  002762  6F68               	movwf	(?_crc8+1)& (0+255),b
 10083  002764  0E6F               	movlw	low sendVSCPDriverAck@crc
 10084  002766  6F67               	movwf	?_crc8& (0+255),b
 10085  002768  6B69               	clrf	(?_crc8+2)& (0+255),b
 10086  00276A  0C00               	retlw	0
 10087  00276C                     __end_ofPL42:
 10088                           	opt stack 0
 10089                           tblptru	equ	0xFF8
 10090                           tblptrh	equ	0xFF7
 10091                           tblptrl	equ	0xFF6
 10092                           tablat	equ	0xFF5
 10093                           prodh	equ	0xFF4
 10094                           prodl	equ	0xFF3
 10095                           intcon	equ	0xFF2
 10096                           indf0	equ	0xFEF
 10097                           postinc0	equ	0xFEE
 10098                           fsr0h	equ	0xFEA
 10099                           fsr0l	equ	0xFE9
 10100                           wreg	equ	0xFE8
 10101                           indf1	equ	0xFE7
 10102                           postinc1	equ	0xFE6
 10103                           postdec1	equ	0xFE5
 10104                           fsr1h	equ	0xFE2
 10105                           fsr1l	equ	0xFE1
 10106                           indf2	equ	0xFDF
 10107                           postinc2	equ	0xFDE
 10108                           postdec2	equ	0xFDD
 10109                           plusw2	equ	0xFDB
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _sendVSCPDriverNack *****************
 10115 ;; Defined at:
 10116 ;;		line 1692 in file "main.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;  crc             1   15[BANK0 ] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;		None               void
 10123 ;; Registers used:
 10124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : E/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10130 ;;      Params:         0       0       0       0       0       0       0
 10131 ;;      Locals:         0       1       0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0
 10133 ;;      Totals:         0       1       0       0       0       0       0
 10134 ;;Total ram usage:        1 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:    6
 10137 ;; This function calls:
 10138 ;;		_WriteUSART
 10139 ;;		_sendEscapedUartData
 10140 ;;		_crc8
 10141 ;; This function is called by:
 10142 ;;		_doModeVscp
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           	psect	text15
 10147  00262C                     __ptext15:
 10148                           	opt stack 0
 10149  00262C                     _sendVSCPDriverNack:
 10150                           	opt stack 22
 10151                           
 10152                           ;main.c: 1693: uint8_t crc = 0;
 10153                           
 10154                           ;incstack = 0
 10155                           ;incstack = 0
 10156  00262C  0100               	movlb	0	; () banked
 10157  00262E  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10158  002630                     l844:
 10159  002630  A2AC               	btfss	4012,1,c	;volatile
 10160  002632  D7FE               	goto	l844
 10161                           
 10162                           ;main.c: 1697: WriteUSART(0x10);
 10163  002634  0E10               	movlw	16
 10164  002636  EC78  F00B         	call	_WriteUSART
 10165  00263A                     l847:
 10166  00263A  A2AC               	btfss	4012,1,c	;volatile
 10167  00263C  D7FE               	goto	l847
 10168                           
 10169                           ;main.c: 1699: WriteUSART(0x02);
 10170  00263E  0E02               	movlw	2
 10171  002640  EC78  F00B         	call	_WriteUSART
 10172  002644                     l850:
 10173  002644  A2AC               	btfss	4012,1,c	;volatile
 10174  002646  D7FE               	goto	l850
 10175                           
 10176                           ;main.c: 1703: WriteUSART(252);
 10177  002648  0EFC               	movlw	252
 10178  00264A  EC78  F00B         	call	_WriteUSART
 10179                           
 10180                           ;main.c: 1704: crc8(&crc, 252);
 10181  00264E  0100               	movlb	0	; () banked
 10182  002650  0E00               	movlw	high sendVSCPDriverNack@crc
 10183  002652  6F68               	movwf	(?_crc8+1)& (0+255),b
 10184  002654  0E6F               	movlw	low sendVSCPDriverNack@crc
 10185  002656  6F67               	movwf	?_crc8& (0+255),b
 10186  002658  0EFC               	movlw	252
 10187  00265A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10188  00265C  EC5C  F00C         	call	_crc8	;wreg free
 10189  002660                     l853:
 10190  002660  A2AC               	btfss	4012,1,c	;volatile
 10191  002662  D7FE               	goto	l853
 10192                           
 10193                           ;main.c: 1708: WriteUSART(0);
 10194  002664  0E00               	movlw	0
 10195  002666  EC78  F00B         	call	_WriteUSART
 10196                           
 10197                           ;main.c: 1709: crc8(&crc, 0);
 10198  00266A  D829               	call	PL46	;call to abstracted procedure
 10199  00266C  EC5C  F00C         	call	_crc8	;wreg free
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;main.c: 1712: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10203  002670  0E00               	movlw	high sendVSCPDriverNack@crc
 10204  002672  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10205  002674  0E6F               	movlw	low sendVSCPDriverNack@crc
 10206  002676  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10207  002678  0101               	movlb	1	; () banked
 10208  00267A  512D               	movf	(_cmdbuf+2)& (0+255),w,b
 10209  00267C  ECB3  F00E         	call	_sendEscapedUartData
 10210  002680                     l856:
 10211  002680  A2AC               	btfss	4012,1,c	;volatile
 10212  002682  D7FE               	goto	l856
 10213                           
 10214                           ;main.c: 1716: WriteUSART(0);
 10215  002684  0E00               	movlw	0
 10216  002686  EC78  F00B         	call	_WriteUSART
 10217                           
 10218                           ;main.c: 1717: crc8(&crc, 0);
 10219  00268A  D819               	call	PL46	;call to abstracted procedure
 10220  00268C  EC5C  F00C         	call	_crc8	;wreg free
 10221  002690                     l859:
 10222  002690  A2AC               	btfss	4012,1,c	;volatile
 10223  002692  D7FE               	goto	l859
 10224                           
 10225                           ;main.c: 1719: WriteUSART(0);
 10226  002694  0E00               	movlw	0
 10227  002696  EC78  F00B         	call	_WriteUSART
 10228                           
 10229                           ;main.c: 1720: crc8(&crc, 0);
 10230  00269A  D811               	call	PL46	;call to abstracted procedure
 10231  00269C  EC5C  F00C         	call	_crc8	;wreg free
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;main.c: 1723: sendEscapedUartData(crc, (0));
 10235  0026A0  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10236  0026A2  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10237  0026A4  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10238  0026A6  ECB3  F00E         	call	_sendEscapedUartData
 10239  0026AA                     l862:
 10240  0026AA  A2AC               	btfss	4012,1,c	;volatile
 10241  0026AC  D7FE               	goto	l862
 10242                           
 10243                           ;main.c: 1727: WriteUSART(0x10);
 10244  0026AE  0E10               	movlw	16
 10245  0026B0  EC78  F00B         	call	_WriteUSART
 10246  0026B4                     l865:
 10247  0026B4  A2AC               	btfss	4012,1,c	;volatile
 10248  0026B6  D7FE               	goto	l865
 10249                           
 10250                           ;main.c: 1729: WriteUSART(0x03);
 10251  0026B8  0E03               	movlw	3
 10252  0026BA  EF78  F00B         	goto	_WriteUSART
 10253  0026BE                     __end_of_sendVSCPDriverNack:
 10254                           	opt stack 0
 10255  0026BE                     PL46:
 10256                           	opt stack 22
 10257  0026BE  0100               	movlb	0	; () banked
 10258  0026C0  0E00               	movlw	high sendVSCPDriverNack@crc
 10259  0026C2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10260  0026C4  0E6F               	movlw	low sendVSCPDriverNack@crc
 10261  0026C6  6F67               	movwf	?_crc8& (0+255),b
 10262  0026C8  6B69               	clrf	(?_crc8+2)& (0+255),b
 10263  0026CA  0C00               	retlw	0
 10264  0026CC                     __end_ofPL46:
 10265                           	opt stack 0
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           indf0	equ	0xFEF
 10274                           postinc0	equ	0xFEE
 10275                           fsr0h	equ	0xFEA
 10276                           fsr0l	equ	0xFE9
 10277                           wreg	equ	0xFE8
 10278                           indf1	equ	0xFE7
 10279                           postinc1	equ	0xFE6
 10280                           postdec1	equ	0xFE5
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           plusw2	equ	0xFDB
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function _calcCRC *****************
 10292 ;; Defined at:
 10293 ;;		line 2452 in file "main.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10296 ;;		 -> cmdbuf(80), 
 10297 ;;  len             1   14[BANK0 ] unsigned char 
 10298 ;; Auto vars:     Size  Location     Type
 10299 ;;  crc             1   16[BANK0 ] unsigned char 
 10300 ;;  j               1   15[BANK0 ] unsigned char 
 10301 ;; Return value:  Size  Location     Type
 10302 ;;                  1    wreg      unsigned char 
 10303 ;; Registers used:
 10304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10305 ;; Tracked objects:
 10306 ;;		On entry : F/0
 10307 ;;		On exit  : F/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10310 ;;      Params:         0       3       0       0       0       0       0
 10311 ;;      Locals:         0       2       0       0       0       0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0
 10313 ;;      Totals:         0       5       0       0       0       0       0
 10314 ;;Total ram usage:        5 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    5
 10317 ;; This function calls:
 10318 ;;		_crc8
 10319 ;; This function is called by:
 10320 ;;		_doModeVscp
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text16
 10325  0017EC                     __ptext16:
 10326                           	opt stack 0
 10327  0017EC                     _calcCRC:
 10328                           	opt stack 23
 10329                           
 10330                           ; BSR set to: 0
 10331                           ;main.c: 2453: uint8_t j;
 10332                           ;main.c: 2454: uint8_t crc = 0;
 10333                           
 10334                           ;incstack = 0
 10335                           ;incstack = 0
 10336  0017EC  6B70               	clrf	calcCRC@crc& (0+255),b
 10337                           
 10338                           ;main.c: 2456: for (j = 0; j < len; j++) {
 10339  0017EE  6B6F               	clrf	calcCRC@j& (0+255),b
 10340  0017F0  D00F               	goto	l15815
 10341  0017F2                     l15811:
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;main.c: 2457: crc8(&crc, p[j]);
 10345  0017F2  0E00               	movlw	high calcCRC@crc
 10346  0017F4  6F68               	movwf	(?_crc8+1)& (0+255),b
 10347  0017F6  0E70               	movlw	low calcCRC@crc
 10348  0017F8  6F67               	movwf	?_crc8& (0+255),b
 10349  0017FA  516F               	movf	calcCRC@j& (0+255),w,b
 10350  0017FC  256C               	addwf	calcCRC@p& (0+255),w,b
 10351  0017FE  6ED9               	movwf	fsr2l,c
 10352  001800  0E00               	movlw	0
 10353  001802  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10354  001804  6EDA               	movwf	fsr2h,c
 10355  001806  50DF               	movf	indf2,w,c
 10356  001808  6F69               	movwf	(?_crc8+2)& (0+255),b
 10357  00180A  EC5C  F00C         	call	_crc8	;wreg free
 10358                           
 10359                           ; BSR set to: 0
 10360  00180E  2B6F               	incf	calcCRC@j& (0+255),f,b
 10361  001810                     l15815:
 10362                           
 10363                           ; BSR set to: 0
 10364  001810  516E               	movf	calcCRC@len& (0+255),w,b
 10365  001812  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10366  001814  E3EE               	bnc	l15811
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;main.c: 2458: }
 10370                           ;main.c: 2460: return crc;
 10371  001816  5170               	movf	calcCRC@crc& (0+255),w,b
 10372                           
 10373                           ; BSR set to: 0
 10374  001818  0012               	return	
 10375  00181A                     __end_of_calcCRC:
 10376                           	opt stack 0
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           indf0	equ	0xFEF
 10385                           postinc0	equ	0xFEE
 10386                           fsr0h	equ	0xFEA
 10387                           fsr0l	equ	0xFE9
 10388                           wreg	equ	0xFE8
 10389                           indf1	equ	0xFE7
 10390                           postinc1	equ	0xFE6
 10391                           postdec1	equ	0xFE5
 10392                           fsr1h	equ	0xFE2
 10393                           fsr1l	equ	0xFE1
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           plusw2	equ	0xFDB
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function _receiveSendEventCANAL *****************
 10403 ;; Defined at:
 10404 ;;		line 1844 in file "main.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;		None
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;  crc             1   32[BANK0 ] unsigned char 
 10409 ;;  data            8   18[BANK0 ] unsigned char [8]
 10410 ;;  id              4   27[BANK0 ] unsigned long 
 10411 ;;  dlc             1   31[BANK0 ] unsigned char 
 10412 ;;  i               1   26[BANK0 ] unsigned char 
 10413 ;; Return value:  Size  Location     Type
 10414 ;;                  1    wreg      enum E15660
 10415 ;; Registers used:
 10416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10417 ;; Tracked objects:
 10418 ;;		On entry : F/1
 10419 ;;		On exit  : 0/0
 10420 ;;		Unchanged: 0/0
 10421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10422 ;;      Params:         0       0       0       0       0       0       0
 10423 ;;      Locals:         0      15       0       0       0       0       0
 10424 ;;      Temps:          0       0       0       0       0       0       0
 10425 ;;      Totals:         0      15       0       0       0       0       0
 10426 ;;Total ram usage:       15 bytes
 10427 ;; Hardware stack levels used:    1
 10428 ;; Hardware stack levels required when called:    6
 10429 ;; This function calls:
 10430 ;;		_WriteUSART
 10431 ;;		_sendEscapedUartData
 10432 ;;		_crc8
 10433 ;;		_getCANFrame
 10434 ;; This function is called by:
 10435 ;;		_doModeVscp
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           	psect	text17
 10440  0037F4                     __ptext17:
 10441                           	opt stack 0
 10442  0037F4                     _receiveSendEventCANAL:
 10443                           	opt stack 22
 10444                           
 10445                           ; BSR set to: 1
 10446                           ;main.c: 1845: uint8_t i;
 10447                           ;main.c: 1846: uint32_t id;
 10448                           ;main.c: 1847: uint8_t dlc;
 10449                           ;main.c: 1848: uint8_t data[8];
 10450                           ;main.c: 1850: if ( getCANFrame( &id, &dlc, &data ) ) {
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;incstack = 0
 10454                           ;incstack = 0
 10455  0037F4  0100               	movlb	0	; () banked
 10456  0037F6  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10457  0037F8  6F6E               	movwf	?_getCANFrame& (0+255),b
 10458  0037FA  0E00               	movlw	high receiveSendEventCANAL@data
 10459  0037FC  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10460  0037FE  0E72               	movlw	low receiveSendEventCANAL@data
 10461  003800  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10462  003802  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10463  003804  EC77  F012         	call	_getCANFrame
 10464  003808  0900               	iorlw	0
 10465  00380A  E101 D092          	bz	l960
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;main.c: 1852: uint8_t crc = 0;
 10469  00380E  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;main.c: 1855: cntRxFrames++;
 10473  003810  0101               	movlb	1	; () banked
 10474  003812  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10475  003814  0E00               	movlw	0
 10476  003816  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10477  003818  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10478  00381A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10479                           
 10480                           ;main.c: 1856: cntRxBytes += dlc;
 10481  00381C  0100               	movlb	0	; () banked
 10482  00381E  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10483  003820  0101               	movlb	1	; () banked
 10484  003822  2708               	addwf	_cntRxBytes& (0+255),f,b
 10485  003824  0E00               	movlw	0
 10486  003826  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10487  003828  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10488  00382A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10489  00382C                     l939:
 10490                           
 10491                           ; BSR set to: 1
 10492  00382C  A2AC               	btfss	4012,1,c	;volatile
 10493  00382E  D7FE               	goto	l939
 10494                           
 10495                           ; BSR set to: 1
 10496                           ;main.c: 1860: WriteUSART(0x10);
 10497  003830  0E10               	movlw	16
 10498  003832  EC78  F00B         	call	_WriteUSART
 10499  003836                     l942:
 10500  003836  A2AC               	btfss	4012,1,c	;volatile
 10501  003838  D7FE               	goto	l942
 10502                           
 10503                           ;main.c: 1862: WriteUSART(0x02);
 10504  00383A  0E02               	movlw	2
 10505  00383C  EC78  F00B         	call	_WriteUSART
 10506  003840                     l945:
 10507  003840  A2AC               	btfss	4012,1,c	;volatile
 10508  003842  D7FE               	goto	l945
 10509                           
 10510                           ;main.c: 1866: WriteUSART(2);
 10511  003844  0E02               	movlw	2
 10512  003846  EC78  F00B         	call	_WriteUSART
 10513                           
 10514                           ;main.c: 1867: crc8(&crc, 2);
 10515  00384A  0100               	movlb	0	; () banked
 10516  00384C  0E00               	movlw	high receiveSendEventCANAL@crc
 10517  00384E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10518  003850  0E80               	movlw	low receiveSendEventCANAL@crc
 10519  003852  6F67               	movwf	?_crc8& (0+255),b
 10520  003854  0E02               	movlw	2
 10521  003856  6F69               	movwf	(?_crc8+2)& (0+255),b
 10522  003858  EC5C  F00C         	call	_crc8	;wreg free
 10523  00385C                     l948:
 10524  00385C  A2AC               	btfss	4012,1,c	;volatile
 10525  00385E  D7FE               	goto	l948
 10526                           
 10527                           ;main.c: 1871: WriteUSART(0);
 10528  003860  0E00               	movlw	0
 10529  003862  EC78  F00B         	call	_WriteUSART
 10530                           
 10531                           ;main.c: 1872: crc8(&crc, 0);
 10532  003866  0100               	movlb	0	; () banked
 10533  003868  0E00               	movlw	high receiveSendEventCANAL@crc
 10534  00386A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10535  00386C  0E80               	movlw	low receiveSendEventCANAL@crc
 10536  00386E  6F67               	movwf	?_crc8& (0+255),b
 10537  003870  0E00               	movlw	0
 10538  003872  6B69               	clrf	(?_crc8+2)& (0+255),b
 10539  003874  EC5C  F00C         	call	_crc8	;wreg free
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;main.c: 1875: sendEscapedUartData(sequencyno, &crc);
 10543  003878  0E00               	movlw	high receiveSendEventCANAL@crc
 10544  00387A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10545  00387C  0E80               	movlw	low receiveSendEventCANAL@crc
 10546  00387E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10547  003880  5032               	movf	_sequencyno,w,c
 10548  003882  ECB3  F00E         	call	_sendEscapedUartData
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;main.c: 1876: sequencyno++;
 10552  003886  2A32               	incf	_sequencyno,f,c
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;main.c: 1879: sendEscapedUartData(0, &crc);
 10556  003888  0E00               	movlw	high receiveSendEventCANAL@crc
 10557  00388A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10558  00388C  0E80               	movlw	low receiveSendEventCANAL@crc
 10559  00388E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10560  003890  0E00               	movlw	0
 10561  003892  ECB3  F00E         	call	_sendEscapedUartData
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;main.c: 1880: sendEscapedUartData(5 + dlc, &crc);
 10565  003896  0E00               	movlw	high receiveSendEventCANAL@crc
 10566  003898  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10567  00389A  0E80               	movlw	low receiveSendEventCANAL@crc
 10568  00389C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10569  00389E  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10570  0038A0  0F05               	addlw	5
 10571  0038A2  ECB3  F00E         	call	_sendEscapedUartData
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 1886: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10575  0038A6  0E00               	movlw	high receiveSendEventCANAL@crc
 10576  0038A8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10577  0038AA  0E80               	movlw	low receiveSendEventCANAL@crc
 10578  0038AC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10579  0038AE  0100               	movlb	0	; () banked
 10580  0038B0  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10581  0038B2  ECB3  F00E         	call	_sendEscapedUartData
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;main.c: 1887: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10585  0038B6  0E00               	movlw	high receiveSendEventCANAL@crc
 10586  0038B8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10587  0038BA  0E80               	movlw	low receiveSendEventCANAL@crc
 10588  0038BC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10589  0038BE  0100               	movlb	0	; () banked
 10590  0038C0  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10591  0038C2  ECB3  F00E         	call	_sendEscapedUartData
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;main.c: 1888: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10595  0038C6  0E00               	movlw	high receiveSendEventCANAL@crc
 10596  0038C8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10597  0038CA  0E80               	movlw	low receiveSendEventCANAL@crc
 10598  0038CC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10599  0038CE  0100               	movlb	0	; () banked
 10600  0038D0  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10601  0038D2  ECB3  F00E         	call	_sendEscapedUartData
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;main.c: 1889: sendEscapedUartData((id & 0xff), &crc);
 10605  0038D6  0E00               	movlw	high receiveSendEventCANAL@crc
 10606  0038D8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10607  0038DA  0E80               	movlw	low receiveSendEventCANAL@crc
 10608  0038DC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10609  0038DE  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10610  0038E0  ECB3  F00E         	call	_sendEscapedUartData
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;main.c: 1892: sendEscapedUartData(dlc, &crc);
 10614  0038E4  0E00               	movlw	high receiveSendEventCANAL@crc
 10615  0038E6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10616  0038E8  0E80               	movlw	low receiveSendEventCANAL@crc
 10617  0038EA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10618  0038EC  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10619  0038EE  ECB3  F00E         	call	_sendEscapedUartData
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;main.c: 1895: for (i = 0; i < dlc; i++) {
 10623  0038F2  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10624  0038F4  D00C               	goto	l15799
 10625  0038F6                     l15795:
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 1896: sendEscapedUartData( data[ i ], &crc );
 10629  0038F6  0E00               	movlw	high receiveSendEventCANAL@crc
 10630  0038F8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10631  0038FA  0E80               	movlw	low receiveSendEventCANAL@crc
 10632  0038FC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10633  0038FE  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10634  003900  0F72               	addlw	low receiveSendEventCANAL@data
 10635  003902  6ED9               	movwf	fsr2l,c
 10636  003904  6ADA               	clrf	fsr2h,c
 10637  003906  50DF               	movf	indf2,w,c
 10638  003908  ECB3  F00E         	call	_sendEscapedUartData
 10639                           
 10640                           ; BSR set to: 0
 10641  00390C  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10642  00390E                     l15799:
 10643                           
 10644                           ; BSR set to: 0
 10645  00390E  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10646  003910  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10647  003912  E3F1               	bnc	l15795
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;main.c: 1897: }
 10651                           ;main.c: 1902: sendEscapedUartData(crc, (0));
 10652  003914  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10653  003916  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10654  003918  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10655  00391A  ECB3  F00E         	call	_sendEscapedUartData
 10656  00391E                     l954:
 10657  00391E  A2AC               	btfss	4012,1,c	;volatile
 10658  003920  D7FE               	goto	l954
 10659                           
 10660                           ;main.c: 1906: WriteUSART(0x10);
 10661  003922  0E10               	movlw	16
 10662  003924  EC78  F00B         	call	_WriteUSART
 10663  003928                     l957:
 10664  003928  A2AC               	btfss	4012,1,c	;volatile
 10665  00392A  D7FE               	goto	l957
 10666                           
 10667                           ;main.c: 1908: WriteUSART(0x03);
 10668  00392C  0E03               	movlw	3
 10669  00392E  EC78  F00B         	call	_WriteUSART
 10670  003932                     l960:
 10671  003932  0012               	return	
 10672  003934                     __end_of_receiveSendEventCANAL:
 10673                           	opt stack 0
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           intcon	equ	0xFF2
 10681                           indf0	equ	0xFEF
 10682                           postinc0	equ	0xFEE
 10683                           fsr0h	equ	0xFEA
 10684                           fsr0l	equ	0xFE9
 10685                           wreg	equ	0xFE8
 10686                           indf1	equ	0xFE7
 10687                           postinc1	equ	0xFE6
 10688                           postdec1	equ	0xFE5
 10689                           fsr1h	equ	0xFE2
 10690                           fsr1l	equ	0xFE1
 10691                           indf2	equ	0xFDF
 10692                           postinc2	equ	0xFDE
 10693                           postdec2	equ	0xFDD
 10694                           plusw2	equ	0xFDB
 10695                           fsr2h	equ	0xFDA
 10696                           fsr2l	equ	0xFD9
 10697                           status	equ	0xFD8
 10698                           
 10699 ;; *************** function _receiveSendMultiEventCANAL *****************
 10700 ;; Defined at:
 10701 ;;		line 1921 in file "main.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;  crc             1   33[BANK0 ] unsigned char 
 10706 ;;  data            8   18[BANK0 ] unsigned char [8]
 10707 ;;  id              4   28[BANK0 ] unsigned long 
 10708 ;;  pos             1   34[BANK0 ] unsigned char 
 10709 ;;  dlc             1   32[BANK0 ] unsigned char 
 10710 ;;  i               1   27[BANK0 ] unsigned char 
 10711 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      enum E15660
 10714 ;; Registers used:
 10715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : F/1
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10721 ;;      Params:         0       0       0       0       0       0       0
 10722 ;;      Locals:         0      17       0       0       0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0
 10724 ;;      Totals:         0      17       0       0       0       0       0
 10725 ;;Total ram usage:       17 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    6
 10728 ;; This function calls:
 10729 ;;		_WriteUSART
 10730 ;;		_sendEscapedUartData
 10731 ;;		_crc8
 10732 ;;		_getCANFrame
 10733 ;; This function is called by:
 10734 ;;		_doModeVscp
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text18
 10739  003AA2                     __ptext18:
 10740                           	opt stack 0
 10741  003AA2                     _receiveSendMultiEventCANAL:
 10742                           	opt stack 22
 10743                           
 10744                           ; BSR set to: 1
 10745                           ;main.c: 1922: uint8_t i;
 10746                           ;main.c: 1923: uint8_t pos=0;
 10747                           
 10748                           ;incstack = 0
 10749                           ;incstack = 0
 10750  003AA2  0100               	movlb	0	; () banked
 10751  003AA4  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10752                           
 10753                           ;main.c: 1924: uint8_t msgcount=0;
 10754  003AA6  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;main.c: 1925: uint32_t id;
 10758                           ;main.c: 1926: uint8_t dlc;
 10759                           ;main.c: 1927: uint8_t data[8];
 10760                           ;main.c: 1929: if ( getCANFrame( &id, &dlc, &data ) ) {
 10761  003AA8  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 10762  003AAA  D8B6               	call	PL90	;call to abstracted procedure
 10763  003AAC  EC77  F012         	call	_getCANFrame
 10764  003AB0  0900               	iorlw	0
 10765  003AB2  E101 D0A8          	bz	l992
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;main.c: 1931: uint8_t crc = 0;
 10769  003AB6  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;main.c: 1934: cntRxFrames++;
 10773  003AB8  0101               	movlb	1	; () banked
 10774  003ABA  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10775  003ABC  0E00               	movlw	0
 10776  003ABE  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10777  003AC0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10778  003AC2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10779                           
 10780                           ;main.c: 1935: cntRxBytes += dlc;
 10781  003AC4  0100               	movlb	0	; () banked
 10782  003AC6  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10783  003AC8  0101               	movlb	1	; () banked
 10784  003ACA  2708               	addwf	_cntRxBytes& (0+255),f,b
 10785  003ACC  0E00               	movlw	0
 10786  003ACE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10787  003AD0  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10788  003AD2  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10789  003AD4                     l964:
 10790                           
 10791                           ; BSR set to: 1
 10792  003AD4  A2AC               	btfss	4012,1,c	;volatile
 10793  003AD6  D7FE               	goto	l964
 10794                           
 10795                           ; BSR set to: 1
 10796                           ;main.c: 1939: WriteUSART(0x10);
 10797  003AD8  0E10               	movlw	16
 10798  003ADA  EC78  F00B         	call	_WriteUSART
 10799  003ADE                     l967:
 10800  003ADE  A2AC               	btfss	4012,1,c	;volatile
 10801  003AE0  D7FE               	goto	l967
 10802                           
 10803                           ;main.c: 1941: WriteUSART(0x02);
 10804  003AE2  0E02               	movlw	2
 10805  003AE4  EC78  F00B         	call	_WriteUSART
 10806  003AE8                     l970:
 10807  003AE8  A2AC               	btfss	4012,1,c	;volatile
 10808  003AEA  D7FE               	goto	l970
 10809                           
 10810                           ;main.c: 1945: WriteUSART(6);
 10811  003AEC  0E06               	movlw	6
 10812  003AEE  EC78  F00B         	call	_WriteUSART
 10813                           
 10814                           ;main.c: 1946: crc8(&crc, 6);
 10815  003AF2  0100               	movlb	0	; () banked
 10816  003AF4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10817  003AF6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10818  003AF8  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10819  003AFA  6F67               	movwf	?_crc8& (0+255),b
 10820  003AFC  0E06               	movlw	6
 10821  003AFE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10822  003B00  EC5C  F00C         	call	_crc8	;wreg free
 10823  003B04                     l973:
 10824  003B04  A2AC               	btfss	4012,1,c	;volatile
 10825  003B06  D7FE               	goto	l973
 10826                           
 10827                           ;main.c: 1950: WriteUSART(0);
 10828  003B08  0E00               	movlw	0
 10829  003B0A  EC78  F00B         	call	_WriteUSART
 10830                           
 10831                           ;main.c: 1951: crc8(&crc, 0);
 10832  003B0E  0100               	movlb	0	; () banked
 10833  003B10  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10834  003B12  6F68               	movwf	(?_crc8+1)& (0+255),b
 10835  003B14  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10836  003B16  6F67               	movwf	?_crc8& (0+255),b
 10837  003B18  0E00               	movlw	0
 10838  003B1A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10839  003B1C  EC5C  F00C         	call	_crc8	;wreg free
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;main.c: 1954: sendEscapedUartData(sequencyno, &crc);
 10843  003B20  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10844  003B22  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10845  003B24  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10846  003B26  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10847  003B28  5032               	movf	_sequencyno,w,c
 10848  003B2A  ECB3  F00E         	call	_sendEscapedUartData
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;main.c: 1955: sequencyno++;
 10852  003B2E  2A32               	incf	_sequencyno,f,c
 10853  003B30                     l15701:
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;main.c: 1965: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10857  003B30  0E7B               	movlw	low _wrkbuf
 10858  003B32  0100               	movlb	0	; () banked
 10859  003B34  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10860  003B36  6ED9               	movwf	fsr2l,c
 10861  003B38  6ADA               	clrf	fsr2h,c
 10862  003B3A  0E01               	movlw	high _wrkbuf
 10863  003B3C  22DA               	addwfc	fsr2h,f,c
 10864  003B3E  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;main.c: 1966: pos++;
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;main.c: 1967: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10871  003B42  D862               	call	PL22	;call to abstracted procedure
 10872  003B44  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;main.c: 1968: pos++;
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;main.c: 1969: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10879  003B48  D85F               	call	PL22	;call to abstracted procedure
 10880  003B4A  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10881                           
 10882                           ; BSR set to: 0
 10883                           ;main.c: 1970: pos++;
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 1971: wrkbuf[ pos ] = id & 0xff;
 10887  003B4E  D85C               	call	PL22	;call to abstracted procedure
 10888  003B50  C07C  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;main.c: 1972: pos++;
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;main.c: 1975: wrkbuf[ pos ] = dlc;
 10895  003B54  D859               	call	PL22	;call to abstracted procedure
 10896  003B56  C080  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;main.c: 1976: pos++;
 10900  003B5A  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;main.c: 1979: for (i = 0; i < dlc; i++) {
 10904  003B5C  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10905  003B5E  D00F               	goto	l15729
 10906  003B60                     l15723:
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;main.c: 1980: wrkbuf[ pos ] = data[ i ];
 10910  003B60  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10911  003B62  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10912  003B64  6ED9               	movwf	fsr2l,c
 10913  003B66  6ADA               	clrf	fsr2h,c
 10914  003B68  0E7B               	movlw	low _wrkbuf
 10915  003B6A  0100               	movlb	0	; () banked
 10916  003B6C  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10917  003B6E  6EE1               	movwf	fsr1l,c
 10918  003B70  6AE2               	clrf	fsr1h,c
 10919  003B72  0E01               	movlw	high _wrkbuf
 10920  003B74  22E2               	addwfc	fsr1h,f,c
 10921  003B76  CFDF FFE7          	movff	indf2,indf1
 10922                           
 10923                           ; BSR set to: 1
 10924                           ;main.c: 1981: pos++;
 10925  003B7A  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10926                           
 10927                           ; BSR set to: 0
 10928  003B7C  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10929  003B7E                     l15729:
 10930                           
 10931                           ; BSR set to: 0
 10932  003B7E  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10933  003B80  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10934  003B82  E3EE               	bnc	l15723
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;main.c: 1982: }
 10938                           ;main.c: 1984: msgcount++;
 10939  003B84  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;main.c: 1986: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10943                           ;main.c: 1987: ( msgcount < 5 ) &&
 10944                           ;main.c: 1988: getCANFrame( &id, &dlc, &data ) );
 10945  003B86  0101               	movlb	1	; () banked
 10946  003B88  51E8               	movf	(_caps+1)& (0+255),w,b
 10947  003B8A  0100               	movlb	0	; () banked
 10948  003B8C  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10949  003B8E  D009               	goto	l15739
 10950                           
 10951                           ; BSR set to: 0
 10952  003B90  0E05               	movlw	5
 10953  003B92  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10954  003B94  D006               	goto	l15739
 10955                           
 10956                           ; BSR set to: 0
 10957  003B96  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 10958  003B98  D83F               	call	PL90	;call to abstracted procedure
 10959  003B9A  EC77  F012         	call	_getCANFrame
 10960  003B9E  0900               	iorlw	0
 10961  003BA0  E1C7               	bnz	l15701
 10962  003BA2                     l15739:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;main.c: 1993: sendEscapedUartData(0, &crc);
 10966  003BA2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10967  003BA4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10968  003BA6  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10969  003BA8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10970  003BAA  0E00               	movlw	0
 10971  003BAC  ECB3  F00E         	call	_sendEscapedUartData
 10972                           
 10973                           ;main.c: 1994: sendEscapedUartData(pos, &crc);
 10974  003BB0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10975  003BB2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10976  003BB4  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10977  003BB6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10978  003BB8  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10979  003BBA  ECB3  F00E         	call	_sendEscapedUartData
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 1997: for (i = 0; i < pos; i++) {
 10983  003BBE  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10984  003BC0  D010               	goto	l15747
 10985  003BC2                     l15743:
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;main.c: 1998: sendEscapedUartData( wrkbuf[ i ], &crc);
 10989  003BC2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10990  003BC4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10991  003BC6  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10992  003BC8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10993  003BCA  0E7B               	movlw	low _wrkbuf
 10994  003BCC  0100               	movlb	0	; () banked
 10995  003BCE  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10996  003BD0  6ED9               	movwf	fsr2l,c
 10997  003BD2  6ADA               	clrf	fsr2h,c
 10998  003BD4  0101               	movlb	1	; () banked
 10999  003BD6  0E01               	movlw	high _wrkbuf
 11000  003BD8  22DA               	addwfc	fsr2h,f,c
 11001  003BDA  50DF               	movf	indf2,w,c
 11002  003BDC  ECB3  F00E         	call	_sendEscapedUartData
 11003                           
 11004                           ; BSR set to: 0
 11005  003BE0  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11006  003BE2                     l15747:
 11007                           
 11008                           ; BSR set to: 0
 11009  003BE2  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11010  003BE4  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11011  003BE6  E3ED               	bnc	l15743
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;main.c: 1999: }
 11015                           ;main.c: 2002: sendEscapedUartData(crc, (0));
 11016  003BE8  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11017  003BEA  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11018  003BEC  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11019  003BEE  ECB3  F00E         	call	_sendEscapedUartData
 11020  003BF2                     l986:
 11021  003BF2  A2AC               	btfss	4012,1,c	;volatile
 11022  003BF4  D7FE               	goto	l986
 11023                           
 11024                           ;main.c: 2006: WriteUSART(0x10);
 11025  003BF6  0E10               	movlw	16
 11026  003BF8  EC78  F00B         	call	_WriteUSART
 11027  003BFC                     l989:
 11028  003BFC  A2AC               	btfss	4012,1,c	;volatile
 11029  003BFE  D7FE               	goto	l989
 11030                           
 11031                           ;main.c: 2008: WriteUSART(0x03);
 11032  003C00  0E03               	movlw	3
 11033  003C02  EC78  F00B         	call	_WriteUSART
 11034  003C06                     l992:
 11035  003C06  0012               	return	
 11036  003C08                     __end_of_receiveSendMultiEventCANAL:
 11037                           	opt stack 0
 11038  003C08                     PL22:
 11039                           	opt stack 22
 11040  003C08  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11041  003C0A  0E7B               	movlw	low _wrkbuf
 11042  003C0C  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11043  003C0E  6ED9               	movwf	fsr2l,c
 11044  003C10  6ADA               	clrf	fsr2h,c
 11045  003C12  0E01               	movlw	high _wrkbuf
 11046  003C14  22DA               	addwfc	fsr2h,f,c
 11047  003C16  0012               	return	
 11048  003C18                     __end_ofPL22:
 11049                           	opt stack 0
 11050  003C18                     PL90:
 11051                           	opt stack 22
 11052  003C18  6F6E               	movwf	?_getCANFrame& (0+255),b
 11053  003C1A  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11054  003C1C  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11055  003C1E  0E72               	movlw	low receiveSendMultiEventCANAL@data
 11056  003C20  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11057  003C22  0E7C               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11058  003C24  0012               	return	
 11059  003C26                     __end_ofPL90:
 11060                           	opt stack 0
 11061                           tblptru	equ	0xFF8
 11062                           tblptrh	equ	0xFF7
 11063                           tblptrl	equ	0xFF6
 11064                           tablat	equ	0xFF5
 11065                           prodh	equ	0xFF4
 11066                           prodl	equ	0xFF3
 11067                           intcon	equ	0xFF2
 11068                           indf0	equ	0xFEF
 11069                           postinc0	equ	0xFEE
 11070                           fsr0h	equ	0xFEA
 11071                           fsr0l	equ	0xFE9
 11072                           wreg	equ	0xFE8
 11073                           indf1	equ	0xFE7
 11074                           postinc1	equ	0xFE6
 11075                           postdec1	equ	0xFE5
 11076                           fsr1h	equ	0xFE2
 11077                           fsr1l	equ	0xFE1
 11078                           indf2	equ	0xFDF
 11079                           postinc2	equ	0xFDE
 11080                           postdec2	equ	0xFDD
 11081                           plusw2	equ	0xFDB
 11082                           fsr2h	equ	0xFDA
 11083                           fsr2l	equ	0xFD9
 11084                           status	equ	0xFD8
 11085                           
 11086 ;; *************** function _sendEscapedUartData *****************
 11087 ;; Defined at:
 11088 ;;		line 1574 in file "main.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;  c               1    wreg     unsigned char 
 11091 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11092 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11093 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11094 ;;		 -> NULL(0), 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  c               1   14[BANK0 ] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;		None               void
 11099 ;; Registers used:
 11100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : E/1
 11103 ;;		On exit  : F/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11106 ;;      Params:         0       2       0       0       0       0       0
 11107 ;;      Locals:         0       1       0       0       0       0       0
 11108 ;;      Temps:          0       0       0       0       0       0       0
 11109 ;;      Totals:         0       3       0       0       0       0       0
 11110 ;;Total ram usage:        3 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    5
 11113 ;; This function calls:
 11114 ;;		_WriteUSART
 11115 ;;		_crc8
 11116 ;; This function is called by:
 11117 ;;		_sendVSCPDriverErrorFrame
 11118 ;;		_sendVSCPDriverAck
 11119 ;;		_sendVSCPDriverNack
 11120 ;;		_sendVSCPDriverCommandReply
 11121 ;;		_receiveSendEventCANAL
 11122 ;;		_receiveSendMultiEventCANAL
 11123 ;;		_sendVSCPModeCapabilities
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text19
 11128  001D66                     __ptext19:
 11129                           	opt stack 0
 11130  001D66                     _sendEscapedUartData:
 11131                           	opt stack 22
 11132                           
 11133                           ;incstack = 0
 11134                           ;incstack = 0
 11135                           ;sendEscapedUartData@c stored from wreg
 11136  001D66  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11137                           
 11138                           ;main.c: 1575: if (0x10 == c) {
 11139  001D6A  0100               	movlb	0	; () banked
 11140  001D6C  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11141  001D6E  0A10               	xorlw	16
 11142  001D70  E117               	bnz	l783
 11143  001D72                     l775:
 11144  001D72  A2AC               	btfss	4012,1,c	;volatile
 11145  001D74  D7FE               	goto	l775
 11146                           
 11147                           ;main.c: 1578: WriteUSART(0x10);
 11148  001D76  0E10               	movlw	16
 11149  001D78  EC78  F00B         	call	_WriteUSART
 11150  001D7C                     l778:
 11151  001D7C  A2AC               	btfss	4012,1,c	;volatile
 11152  001D7E  D7FE               	goto	l778
 11153                           
 11154                           ;main.c: 1582: WriteUSART(0x10);
 11155  001D80  0E10               	movlw	16
 11156  001D82  EC78  F00B         	call	_WriteUSART
 11157                           
 11158                           ;main.c: 1583: if ((0) != pcrc) crc8(pcrc, 0x10);
 11159  001D86  0100               	movlb	0	; () banked
 11160  001D88  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11161  001D8A  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11162  001D8C  E01B               	bz	l787
 11163                           
 11164                           ; BSR set to: 0
 11165  001D8E  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11166  001D92  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11167  001D96  0E10               	movlw	16
 11168  001D98  6F69               	movwf	(?_crc8+2)& (0+255),b
 11169  001D9A  EC5C  F00C         	call	_crc8	;wreg free
 11170  001D9E  D012               	goto	l787
 11171  001DA0                     l783:
 11172  001DA0  A2AC               	btfss	4012,1,c	;volatile
 11173  001DA2  D7FE               	goto	l783
 11174                           
 11175                           ;main.c: 1589: WriteUSART(c);
 11176  001DA4  0100               	movlb	0	; () banked
 11177  001DA6  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11178  001DA8  EC78  F00B         	call	_WriteUSART
 11179                           
 11180                           ;main.c: 1590: if ((0) != pcrc) crc8(pcrc, c);
 11181  001DAC  0100               	movlb	0	; () banked
 11182  001DAE  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11183  001DB0  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11184  001DB2  E008               	bz	l787
 11185                           
 11186                           ; BSR set to: 0
 11187  001DB4  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11188  001DB8  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11189  001DBC  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11190  001DC0  EC5C  F00C         	call	_crc8	;wreg free
 11191  001DC4                     l787:
 11192                           
 11193                           ; BSR set to: 0
 11194  001DC4  0012               	return	
 11195  001DC6                     __end_of_sendEscapedUartData:
 11196                           	opt stack 0
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           prodh	equ	0xFF4
 11202                           prodl	equ	0xFF3
 11203                           intcon	equ	0xFF2
 11204                           indf0	equ	0xFEF
 11205                           postinc0	equ	0xFEE
 11206                           fsr0h	equ	0xFEA
 11207                           fsr0l	equ	0xFE9
 11208                           wreg	equ	0xFE8
 11209                           indf1	equ	0xFE7
 11210                           postinc1	equ	0xFE6
 11211                           postdec1	equ	0xFE5
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           plusw2	equ	0xFDB
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _crc8 *****************
 11223 ;; Defined at:
 11224 ;;		line 47 in file "crc8.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11227 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11228 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11229 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11230 ;;  m               1    9[BANK0 ] unsigned char 
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;		None
 11233 ;; Return value:  Size  Location     Type
 11234 ;;		None               void
 11235 ;; Registers used:
 11236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11237 ;; Tracked objects:
 11238 ;;		On entry : F/0
 11239 ;;		On exit  : F/0
 11240 ;;		Unchanged: 0/0
 11241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11242 ;;      Params:         0       3       0       0       0       0       0
 11243 ;;      Locals:         0       0       0       0       0       0       0
 11244 ;;      Temps:          0       2       0       0       0       0       0
 11245 ;;      Totals:         0       5       0       0       0       0       0
 11246 ;;Total ram usage:        5 bytes
 11247 ;; Hardware stack levels used:    1
 11248 ;; Hardware stack levels required when called:    4
 11249 ;; This function calls:
 11250 ;;		_init_crc8
 11251 ;; This function is called by:
 11252 ;;		_sendEscapedUartData
 11253 ;;		_sendVSCPDriverErrorFrame
 11254 ;;		_sendVSCPDriverAck
 11255 ;;		_sendVSCPDriverNack
 11256 ;;		_sendVSCPDriverCommandReply
 11257 ;;		_receiveSendEventCANAL
 11258 ;;		_receiveSendMultiEventCANAL
 11259 ;;		_sendVSCPModeCapabilities
 11260 ;;		_calcCRC
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           	psect	text20
 11265  0018B8                     __ptext20:
 11266                           	opt stack 0
 11267  0018B8                     _crc8:
 11268                           	opt stack 23
 11269                           
 11270                           ; BSR set to: 0
 11271                           ;crc8.c: 48: if ( !made_table ) {
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;incstack = 0
 11275                           ;incstack = 0
 11276  0018B8  0101               	movlb	1	; () banked
 11277  0018BA  5125               	movf	(_made_table+1)& (0+255),w,b
 11278  0018BC  1124               	iorwf	_made_table& (0+255),w,b
 11279  0018BE  B4D8               	btfsc	status,2,c
 11280                           
 11281                           ; BSR set to: 1
 11282                           ;crc8.c: 49: init_crc8();
 11283  0018C0  ECA9  F00F         	call	_init_crc8	;wreg free
 11284                           
 11285                           ; BSR set to: 1
 11286                           ;crc8.c: 50: }
 11287                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11288  0018C4  C067  FFD9         	movff	crc8@crc,fsr2l
 11289  0018C8  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11290  0018CC  50DF               	movf	indf2,w,c
 11291  0018CE  0100               	movlb	0	; () banked
 11292  0018D0  1969               	xorwf	crc8@m& (0+255),w,b
 11293  0018D2  6F6A               	movwf	??_crc8& (0+255),b
 11294  0018D4  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11295  0018D6  0E00               	movlw	low _crc8_table
 11296  0018D8  256A               	addwf	??_crc8& (0+255),w,b
 11297  0018DA  6ED9               	movwf	fsr2l,c
 11298  0018DC  0E03               	movlw	high _crc8_table
 11299  0018DE  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11300  0018E0  6EDA               	movwf	fsr2h,c
 11301  0018E2  C067  FFE1         	movff	crc8@crc,fsr1l
 11302  0018E6  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11303  0018EA  CFDF FFE7          	movff	indf2,indf1
 11304                           
 11305                           ; BSR set to: 0
 11306  0018EE  0012               	return	
 11307  0018F0                     __end_of_crc8:
 11308                           	opt stack 0
 11309                           tblptru	equ	0xFF8
 11310                           tblptrh	equ	0xFF7
 11311                           tblptrl	equ	0xFF6
 11312                           tablat	equ	0xFF5
 11313                           prodh	equ	0xFF4
 11314                           prodl	equ	0xFF3
 11315                           intcon	equ	0xFF2
 11316                           indf0	equ	0xFEF
 11317                           postinc0	equ	0xFEE
 11318                           fsr0h	equ	0xFEA
 11319                           fsr0l	equ	0xFE9
 11320                           wreg	equ	0xFE8
 11321                           indf1	equ	0xFE7
 11322                           postinc1	equ	0xFE6
 11323                           postdec1	equ	0xFE5
 11324                           fsr1h	equ	0xFE2
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           plusw2	equ	0xFDB
 11330                           fsr2h	equ	0xFDA
 11331                           fsr2l	equ	0xFD9
 11332                           status	equ	0xFD8
 11333                           
 11334 ;; *************** function _init_crc8 *****************
 11335 ;; Defined at:
 11336 ;;		line 25 in file "crc8.c"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;		None
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;  i               2    5[BANK0 ] int 
 11341 ;;  j               2    2[BANK0 ] int 
 11342 ;;  crc             1    4[BANK0 ] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11347 ;; Tracked objects:
 11348 ;;		On entry : E/0
 11349 ;;		On exit  : F/1
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11352 ;;      Params:         0       0       0       0       0       0       0
 11353 ;;      Locals:         0       7       0       0       0       0       0
 11354 ;;      Temps:          0       0       0       0       0       0       0
 11355 ;;      Totals:         0       7       0       0       0       0       0
 11356 ;;Total ram usage:        7 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    3
 11359 ;; This function calls:
 11360 ;;		Nothing
 11361 ;; This function is called by:
 11362 ;;		_main
 11363 ;;		_crc8
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           	psect	text21
 11368  001F52                     __ptext21:
 11369                           	opt stack 0
 11370  001F52                     _init_crc8:
 11371                           	opt stack 23
 11372                           
 11373                           ;crc8.c: 26: int i,j;
 11374                           ;crc8.c: 27: unsigned char crc;
 11375                           ;crc8.c: 29: if (!made_table) {
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;incstack = 0
 11379                           ;incstack = 0
 11380  001F52  0101               	movlb	1	; () banked
 11381  001F54  5125               	movf	(_made_table+1)& (0+255),w,b
 11382  001F56  1124               	iorwf	_made_table& (0+255),w,b
 11383  001F58  E133               	bnz	l1572
 11384                           
 11385                           ; BSR set to: 1
 11386                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11387  001F5A  0100               	movlb	0	; () banked
 11388  001F5C  6B65               	clrf	init_crc8@i& (0+255),b
 11389  001F5E  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11390  001F60                     l1564:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;crc8.c: 31: crc = i;
 11394  001F60  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11395                           
 11396                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11397  001F64  6B62               	clrf	init_crc8@j& (0+255),b
 11398  001F66  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11399  001F68                     l1566:
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11403  001F68  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11404  001F6A  D003               	goto	l13473
 11405                           
 11406                           ; BSR set to: 0
 11407  001F6C  6B60               	clrf	_init_crc8$1962& (0+255),b
 11408  001F6E  6B61               	clrf	(_init_crc8$1962+1)& (0+255),b
 11409  001F70  D003               	goto	l13475
 11410  001F72                     l13473:
 11411                           
 11412                           ; BSR set to: 0
 11413  001F72  6B61               	clrf	(_init_crc8$1962+1)& (0+255),b
 11414  001F74  0E07               	movlw	7
 11415  001F76  6F60               	movwf	_init_crc8$1962& (0+255),b
 11416  001F78                     l13475:
 11417                           
 11418                           ; BSR set to: 0
 11419  001F78  5164               	movf	init_crc8@crc& (0+255),w,b
 11420  001F7A  2564               	addwf	init_crc8@crc& (0+255),w,b
 11421  001F7C  1960               	xorwf	_init_crc8$1962& (0+255),w,b
 11422  001F7E  6F64               	movwf	init_crc8@crc& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425  001F80  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11426  001F82  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11427                           
 11428                           ; BSR set to: 0
 11429  001F84  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11430  001F86  0A80               	xorlw	128
 11431  001F88  0F80               	addlw	-128
 11432  001F8A  0E08               	movlw	8
 11433  001F8C  B4D8               	btfsc	status,2,c
 11434  001F8E  5D62               	subwf	init_crc8@j& (0+255),w,b
 11435  001F90  E3EB               	bnc	l1566
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;crc8.c: 34: }
 11439                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11440  001F92  0E00               	movlw	low _crc8_table
 11441  001F94  0100               	movlb	0	; () banked
 11442  001F96  2565               	addwf	init_crc8@i& (0+255),w,b
 11443  001F98  6ED9               	movwf	fsr2l,c
 11444  001F9A  0E03               	movlw	high _crc8_table
 11445  001F9C  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11446  001F9E  6EDA               	movwf	fsr2h,c
 11447  001FA0  C064  FFDF         	movff	init_crc8@crc,indf2
 11448                           
 11449                           ; BSR set to: 0
 11450  001FA4  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11451  001FA6  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11452                           
 11453                           ; BSR set to: 0
 11454  001FA8  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11455  001FAA  0A80               	xorlw	128
 11456  001FAC  0F7F               	addlw	-129
 11457  001FAE  0E00               	movlw	0
 11458  001FB0  B4D8               	btfsc	status,2,c
 11459  001FB2  5D65               	subwf	init_crc8@i& (0+255),w,b
 11460  001FB4  E3D5               	bnc	l1564
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;crc8.c: 37: }
 11464                           ;crc8.c: 38: made_table=1;
 11465  001FB6  0E00               	movlw	0
 11466  001FB8  0101               	movlb	1	; () banked
 11467  001FBA  6F25               	movwf	(_made_table+1)& (0+255),b
 11468  001FBC  0E01               	movlw	1
 11469  001FBE  6F24               	movwf	_made_table& (0+255),b
 11470  001FC0                     l1572:
 11471                           
 11472                           ; BSR set to: 1
 11473  001FC0  0012               	return	
 11474  001FC2                     __end_of_init_crc8:
 11475                           	opt stack 0
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           indf0	equ	0xFEF
 11484                           postinc0	equ	0xFEE
 11485                           fsr0h	equ	0xFEA
 11486                           fsr0l	equ	0xFE9
 11487                           wreg	equ	0xFE8
 11488                           indf1	equ	0xFE7
 11489                           postinc1	equ	0xFE6
 11490                           postdec1	equ	0xFE5
 11491                           fsr1h	equ	0xFE2
 11492                           fsr1l	equ	0xFE1
 11493                           indf2	equ	0xFDF
 11494                           postinc2	equ	0xFDE
 11495                           postdec2	equ	0xFDD
 11496                           plusw2	equ	0xFDB
 11497                           fsr2h	equ	0xFDA
 11498                           fsr2l	equ	0xFD9
 11499                           status	equ	0xFD8
 11500                           
 11501 ;; *************** function _doModeVerbose *****************
 11502 ;; Defined at:
 11503 ;;		line 516 in file "main.c"
 11504 ;; Parameters:    Size  Location     Type
 11505 ;;		None
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11508 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11509 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11510 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11511 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11512 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11513 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11514 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11515 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11516 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11517 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11518 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11519 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11520 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11521 ;;  id              4   35[BANK2 ] unsigned long 
 11522 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11523 ;;		 -> NULL(0), cmdbuf(80), 
 11524 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11525 ;;  maskno          1   40[BANK2 ] unsigned char 
 11526 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11527 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11528 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11529 ;;  id              4    0[BANK2 ] unsigned long 
 11530 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11531 ;;		 -> NULL(0), cmdbuf(80), 
 11532 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11533 ;;  filterno        1   39[BANK2 ] unsigned char 
 11534 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11535 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11536 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11537 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11538 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11539 ;;		 -> NULL(0), cmdbuf(80), 
 11540 ;;  value           1   42[BANK2 ] unsigned char 
 11541 ;;  reg             1   34[BANK2 ] unsigned char 
 11542 ;;  page            1   33[BANK2 ] unsigned char 
 11543 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11544 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11545 ;;		 -> NULL(0), cmdbuf(80), 
 11546 ;;  value           1   49[BANK2 ] unsigned char 
 11547 ;;  i               1   48[BANK2 ] unsigned char 
 11548 ;;  reg             1   46[BANK2 ] unsigned char 
 11549 ;;  page            1   45[BANK2 ] unsigned char 
 11550 ;;  count           1   43[BANK2 ] unsigned char 
 11551 ;;  rv              1   32[BANK2 ] enum E15660
 11552 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11553 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11554 ;;		 -> NULL(0), cmdbuf(80), 
 11555 ;;  ifmode          1   54[BANK2 ] enum E16371
 11556 ;;  c               1   44[BANK2 ] unsigned char 
 11557 ;;  i               1   41[BANK2 ] unsigned char 
 11558 ;; Return value:  Size  Location     Type
 11559 ;;		None               void
 11560 ;; Registers used:
 11561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11562 ;; Tracked objects:
 11563 ;;		On entry : F/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11567 ;;      Params:         0       0       0       0       0       0       0
 11568 ;;      Locals:         0       0       0      61       0       0       0
 11569 ;;      Temps:          0      20       0       0       0       0       0
 11570 ;;      Totals:         0      20       0      61       0       0       0
 11571 ;;Total ram usage:       81 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:   10
 11574 ;; This function calls:
 11575 ;;		_putsUSART
 11576 ;;		_printFirmwareVersion
 11577 ;;		_fifo_read
 11578 ;;		_Busy_eep
 11579 ;;		_Write_b_eep
 11580 ;;		_receivePrintEventVerbose
 11581 ;;		_stristr
 11582 ;;		_ECANSetOperationMode
 11583 ;;		_strtok
 11584 ;;		_atoi
 11585 ;;		_memset
 11586 ;;		_sendVSCPFrame
 11587 ;;		_printStatistics
 11588 ;;		_printErrors
 11589 ;;		_printHelp
 11590 ;;		_findNodes
 11591 ;;		_strcpy
 11592 ;;		_strchr
 11593 ;;		_readRegisterExtended
 11594 ;;		_sprintf
 11595 ;;		_WriteUSART
 11596 ;;		_printBinary
 11597 ;;		_writeRegisterExtended
 11598 ;;		_printNodeFirmwareVersion
 11599 ;;		_printGUID
 11600 ;;		_printMDF
 11601 ;;		_setFilter
 11602 ;;		__CANIDToRegs
 11603 ;; This function is called by:
 11604 ;;		_main
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           	psect	text22
 11609  005894                     __ptext22:
 11610                           	opt stack 0
 11611  005894                     _doModeVerbose:
 11612                           	opt stack 19
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;main.c: 517: uint8_t c;
 11616                           ;main.c: 518: uint8_t i;
 11617                           ;main.c: 521: if (!bSilent) {
 11618                           
 11619                           ; BSR set to: 1
 11620                           ;incstack = 0
 11621                           ;incstack = 0
 11622  005894  662E               	tstfsz	_bSilent,c
 11623  005896  D002               	goto	l13585
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;main.c: 522: receivePrintEventVerbose();
 11627  005898  EC1D  F024         	call	_receivePrintEventVerbose	;wreg free
 11628  00589C                     l13585:
 11629                           
 11630                           ;main.c: 523: }
 11631                           ;main.c: 526: (INTCONbits.GIE = 0);
 11632  00589C  9EF2               	bcf	intcon,7,c	;volatile
 11633                           
 11634                           ;main.c: 528: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11635  00589E  0E01               	movlw	high _serialInputFifo
 11636  0058A0  0100               	movlb	0	; () banked
 11637  0058A2  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11638  0058A4  0EDB               	movlw	low _serialInputFifo
 11639  0058A6  6F60               	movwf	?_fifo_read& (0+255),b
 11640  0058A8  0E02               	movlw	high doModeVerbose@c
 11641  0058AA  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11642  0058AC  0EAC               	movlw	low doModeVerbose@c
 11643  0058AE  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11644  0058B0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11645  0058B2  0E01               	movlw	1
 11646  0058B4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11647  0058B6  EC9D  F016         	call	_fifo_read	;wreg free
 11648  0058BA  0560               	decf	?_fifo_read& (0+255),w,b
 11649  0058BC  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11650  0058BE  E002 EFC3  F035    	bnz	l14207
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;main.c: 531: (INTCONbits.GIE = 1);
 11654  0058C4  8EF2               	bsf	intcon,7,c	;volatile
 11655                           
 11656                           ; BSR set to: 0
 11657                           ;main.c: 534: cmdbuf[ pos++ ] = c;
 11658  0058C6  EC20  F022         	call	PL24	;call to abstracted procedure
 11659  0058CA  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11660                           
 11661                           ; BSR set to: 2
 11662  0058CE  2BE7               	incf	_pos& (0+255),f,b
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;main.c: 535: if (pos >= sizeof( cmdbuf ) ) {
 11666  0058D0  0E4F               	movlw	79
 11667  0058D2  65E7               	cpfsgt	_pos& (0+255),b
 11668  0058D4  D001               	goto	l13599
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;main.c: 538: pos = 0;
 11672  0058D6  6BE7               	clrf	_pos& (0+255),b
 11673  0058D8                     l13599:
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;main.c: 539: }
 11677                           ;main.c: 542: if (0x0d == c) {
 11678  0058D8  0102               	movlb	2	; () banked
 11679  0058DA  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11680  0058DC  0A0D               	xorlw	13
 11681  0058DE  E002 EFC3  F035    	bnz	l14207
 11682                           
 11683                           ; BSR set to: 2
 11684                           ;main.c: 544: cmdbuf[ pos ] = 0;
 11685  0058E4  EC20  F022         	call	PL24	;call to abstracted procedure
 11686  0058E8  6ADF               	clrf	indf2,c
 11687                           
 11688                           ; BSR set to: 1
 11689                           ;main.c: 547: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11690  0058EA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11691  0058EC  0E2B               	movlw	low _cmdbuf
 11692  0058EE  6F6D               	movwf	?_stristr& (0+255),b
 11693  0058F0  0E7C               	movlw	high STR_6
 11694  0058F2  6F70               	movwf	(?_stristr+3)& (0+255),b
 11695  0058F4  0ED0               	movlw	low STR_6
 11696  0058F6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11697  0058F8  EC92  F010         	call	_stristr	;wreg free
 11698  0058FC  0E2B               	movlw	low _cmdbuf
 11699  0058FE  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11700  005900  0E01               	movlw	high _cmdbuf
 11701  005902  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11702  005904  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11703  005906  E102               	bnz	u18055
 11704  005908  516D               	movf	?_stristr& (0+255),w,b
 11705  00590A  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11706  00590C                     u18055:
 11707  00590C  E112               	bnz	l13611
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;main.c: 548: putsUSART((char *) "Will enter bootloader now...\r\n");
 11711  00590E  0E77               	movlw	high STR_7
 11712  005910  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11713  005912  0EED               	movlw	low STR_7
 11714  005914  6F61               	movwf	?_putsUSART& (0+255),b
 11715  005916  EC2D  F00E         	call	_putsUSART	;wreg free
 11716                           
 11717                           ;main.c: 549: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11718  00591A  EC56  F00B         	call	_Busy_eep	;wreg free
 11719  00591E  0100               	movlb	0	; () banked
 11720  005920  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11721  005922  6B60               	clrf	?_Write_b_eep& (0+255),b
 11722  005924  0EFF               	movlw	255
 11723  005926  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11724  005928  EC26  F00C         	call	_Write_b_eep	;wreg free
 11725  00592C  00FF               	reset		;# 
 11726                           
 11727                           ;main.c: 551: }
 11728  00592E  EFB6  F035         	goto	l14203
 11729  005932                     l13611:
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;main.c: 553: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11733  005932  0E01               	movlw	high _cmdbuf
 11734  005934  0100               	movlb	0	; () banked
 11735  005936  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11736  005938  0E2B               	movlw	low _cmdbuf
 11737  00593A  6F6D               	movwf	?_stristr& (0+255),b
 11738  00593C  0E7C               	movlw	high STR_8
 11739  00593E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11740  005940  0EB7               	movlw	low STR_8
 11741  005942  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11742  005944  EC92  F010         	call	_stristr	;wreg free
 11743  005948  0E2B               	movlw	low _cmdbuf
 11744  00594A  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11745  00594C  0E01               	movlw	high _cmdbuf
 11746  00594E  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11747  005950  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11748  005952  E102               	bnz	u18065
 11749  005954  516D               	movf	?_stristr& (0+255),w,b
 11750  005956  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11751  005958                     u18065:
 11752  005958  E10C               	bnz	l13619
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;main.c: 554: bSilent = 0;
 11756  00595A  6A2E               	clrf	_bSilent,c
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;main.c: 555: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11760  00595C  0E00               	movlw	0
 11761  00595E  EC8D  F00B         	call	_ECANSetOperationMode
 11762                           
 11763                           ; BSR set to: 0
 11764                           ;main.c: 556: putsUSART((char *) "+OK\r\n");
 11765  005962  0E7C               	movlw	high STR_9
 11766  005964  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11767  005966  0E80               	movlw	low STR_9
 11768  005968  6F61               	movwf	?_putsUSART& (0+255),b
 11769  00596A  EC2D  F00E         	call	_putsUSART	;wreg free
 11770                           
 11771                           ;main.c: 557: }
 11772  00596E  EFB6  F035         	goto	l14203
 11773  005972                     l13619:
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;main.c: 559: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11777  005972  0E01               	movlw	high _cmdbuf
 11778  005974  0100               	movlb	0	; () banked
 11779  005976  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11780  005978  0E2B               	movlw	low _cmdbuf
 11781  00597A  6F6D               	movwf	?_stristr& (0+255),b
 11782  00597C  0E7C               	movlw	high STR_10
 11783  00597E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11784  005980  0E5E               	movlw	low STR_10
 11785  005982  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11786  005984  EC92  F010         	call	_stristr	;wreg free
 11787  005988  0E2B               	movlw	low _cmdbuf
 11788  00598A  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11789  00598C  0E01               	movlw	high _cmdbuf
 11790  00598E  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11791  005990  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11792  005992  E102               	bnz	u18075
 11793  005994  516D               	movf	?_stristr& (0+255),w,b
 11794  005996  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11795  005998                     u18075:
 11796  005998  E10D               	bnz	l13627
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;main.c: 560: bSilent = 1;
 11800  00599A  0E01               	movlw	1
 11801  00599C  6E2E               	movwf	_bSilent,c
 11802                           
 11803                           ; BSR set to: 0
 11804                           ;main.c: 561: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11805  00599E  0E00               	movlw	0
 11806  0059A0  EC8D  F00B         	call	_ECANSetOperationMode
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;main.c: 562: putsUSART((char *) "+OK\r\n");
 11810  0059A4  0E7C               	movlw	high STR_9
 11811  0059A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11812  0059A8  0E80               	movlw	low STR_9
 11813  0059AA  6F61               	movwf	?_putsUSART& (0+255),b
 11814  0059AC  EC2D  F00E         	call	_putsUSART	;wreg free
 11815                           
 11816                           ;main.c: 563: }
 11817  0059B0  EFB6  F035         	goto	l14203
 11818  0059B4                     l13627:
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;main.c: 565: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11822  0059B4  0E01               	movlw	high _cmdbuf
 11823  0059B6  0100               	movlb	0	; () banked
 11824  0059B8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11825  0059BA  0E2B               	movlw	low _cmdbuf
 11826  0059BC  6F6D               	movwf	?_stristr& (0+255),b
 11827  0059BE  0E7C               	movlw	high STR_12
 11828  0059C0  6F70               	movwf	(?_stristr+3)& (0+255),b
 11829  0059C2  0E92               	movlw	low STR_12
 11830  0059C4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11831  0059C6  EC92  F010         	call	_stristr	;wreg free
 11832  0059CA  0E2B               	movlw	low _cmdbuf
 11833  0059CC  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11834  0059CE  0E01               	movlw	high _cmdbuf
 11835  0059D0  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11836  0059D2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11837  0059D4  E102               	bnz	u18085
 11838  0059D6  516D               	movf	?_stristr& (0+255),w,b
 11839  0059D8  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11840  0059DA                     u18085:
 11841  0059DA  E10D               	bnz	l13635
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;main.c: 566: bSilent = 1;
 11845  0059DC  0E01               	movlw	1
 11846  0059DE  6E2E               	movwf	_bSilent,c
 11847                           
 11848                           ; BSR set to: 0
 11849                           ;main.c: 567: ECANSetOperationMode(0x20);
 11850  0059E0  0E20               	movlw	32
 11851  0059E2  EC8D  F00B         	call	_ECANSetOperationMode
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;main.c: 568: putsUSART((char *) "+OK\r\n");
 11855  0059E6  0E7C               	movlw	high STR_9
 11856  0059E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11857  0059EA  0E80               	movlw	low STR_9
 11858  0059EC  6F61               	movwf	?_putsUSART& (0+255),b
 11859  0059EE  EC2D  F00E         	call	_putsUSART	;wreg free
 11860                           
 11861                           ;main.c: 569: }
 11862  0059F2  EFB6  F035         	goto	l14203
 11863  0059F6                     l13635:
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;main.c: 571: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11867  0059F6  0E01               	movlw	high _cmdbuf
 11868  0059F8  0100               	movlb	0	; () banked
 11869  0059FA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11870  0059FC  0E2B               	movlw	low _cmdbuf
 11871  0059FE  6F6D               	movwf	?_stristr& (0+255),b
 11872  005A00  0E7B               	movlw	high STR_14
 11873  005A02  6F70               	movwf	(?_stristr+3)& (0+255),b
 11874  005A04  0ECD               	movlw	low STR_14
 11875  005A06  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11876  005A08  EC92  F010         	call	_stristr	;wreg free
 11877  005A0C  0E2B               	movlw	low _cmdbuf
 11878  005A0E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11879  005A10  0E01               	movlw	high _cmdbuf
 11880  005A12  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11881  005A14  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11882  005A16  E102               	bnz	u18095
 11883  005A18  516D               	movf	?_stristr& (0+255),w,b
 11884  005A1A  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11885  005A1C                     u18095:
 11886  005A1C  E10C               	bnz	l13643
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;main.c: 572: bSilent = 0;
 11890  005A1E  6A2E               	clrf	_bSilent,c
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;main.c: 573: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11894  005A20  0E40               	movlw	64
 11895  005A22  EC8D  F00B         	call	_ECANSetOperationMode
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 574: putsUSART((char *) "+OK\r\n");
 11899  005A26  0E7C               	movlw	high STR_9
 11900  005A28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11901  005A2A  0E80               	movlw	low STR_9
 11902  005A2C  6F61               	movwf	?_putsUSART& (0+255),b
 11903  005A2E  EC2D  F00E         	call	_putsUSART	;wreg free
 11904                           
 11905                           ;main.c: 575: }
 11906  005A32  EFB6  F035         	goto	l14203
 11907  005A36                     l13643:
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;main.c: 577: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11911  005A36  0E01               	movlw	high _cmdbuf
 11912  005A38  0100               	movlb	0	; () banked
 11913  005A3A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11914  005A3C  0E2B               	movlw	low _cmdbuf
 11915  005A3E  6F6D               	movwf	?_stristr& (0+255),b
 11916  005A40  0E7C               	movlw	high STR_16
 11917  005A42  6F70               	movwf	(?_stristr+3)& (0+255),b
 11918  005A44  0E50               	movlw	low STR_16
 11919  005A46  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11920  005A48  EC92  F010         	call	_stristr	;wreg free
 11921  005A4C  0E2B               	movlw	low _cmdbuf
 11922  005A4E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11923  005A50  0E01               	movlw	high _cmdbuf
 11924  005A52  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11925  005A54  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11926  005A56  E102               	bnz	u18105
 11927  005A58  516D               	movf	?_stristr& (0+255),w,b
 11928  005A5A  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11929  005A5C                     u18105:
 11930  005A5C  E10C               	bnz	l13651
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;main.c: 578: bSilent = 0;
 11934  005A5E  6A2E               	clrf	_bSilent,c
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;main.c: 579: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11938  005A60  0E60               	movlw	96
 11939  005A62  EC8D  F00B         	call	_ECANSetOperationMode
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;main.c: 580: putsUSART((char *) "+OK\r\n");
 11943  005A66  0E7C               	movlw	high STR_9
 11944  005A68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11945  005A6A  0E80               	movlw	low STR_9
 11946  005A6C  6F61               	movwf	?_putsUSART& (0+255),b
 11947  005A6E  EC2D  F00E         	call	_putsUSART	;wreg free
 11948                           
 11949                           ;main.c: 581: }
 11950  005A72  EFB6  F035         	goto	l14203
 11951  005A76                     l13651:
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;main.c: 583: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11955  005A76  0E01               	movlw	high _cmdbuf
 11956  005A78  0100               	movlb	0	; () banked
 11957  005A7A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11958  005A7C  0E2B               	movlw	low _cmdbuf
 11959  005A7E  6F6D               	movwf	?_stristr& (0+255),b
 11960  005A80  0E7C               	movlw	high STR_18
 11961  005A82  6F70               	movwf	(?_stristr+3)& (0+255),b
 11962  005A84  0E0E               	movlw	low STR_18
 11963  005A86  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11964  005A88  EC92  F010         	call	_stristr	;wreg free
 11965  005A8C  0E2B               	movlw	low _cmdbuf
 11966  005A8E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11967  005A90  0E01               	movlw	high _cmdbuf
 11968  005A92  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11969  005A94  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11970  005A96  E102               	bnz	u18115
 11971  005A98  516D               	movf	?_stristr& (0+255),w,b
 11972  005A9A  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11973  005A9C                     u18115:
 11974  005A9C  E10B               	bnz	l13657
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;main.c: 584: printFirmwareVersion();
 11978  005A9E  EC50  F011         	call	_printFirmwareVersion	;wreg free
 11979                           
 11980                           ;main.c: 585: putsUSART((char *) "+OK\r\n");
 11981  005AA2  0E7C               	movlw	high STR_9
 11982  005AA4  0100               	movlb	0	; () banked
 11983  005AA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11984  005AA8  0E80               	movlw	low STR_9
 11985  005AAA  6F61               	movwf	?_putsUSART& (0+255),b
 11986  005AAC  EC2D  F00E         	call	_putsUSART	;wreg free
 11987                           
 11988                           ;main.c: 586: }
 11989  005AB0  EFB6  F035         	goto	l14203
 11990  005AB4                     l13657:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;main.c: 588: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11994  005AB4  0E01               	movlw	high _cmdbuf
 11995  005AB6  0100               	movlb	0	; () banked
 11996  005AB8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11997  005ABA  0E2B               	movlw	low _cmdbuf
 11998  005ABC  6F6D               	movwf	?_stristr& (0+255),b
 11999  005ABE  0E7C               	movlw	high STR_20
 12000  005AC0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12001  005AC2  0E49               	movlw	low STR_20
 12002  005AC4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12003  005AC6  EC92  F010         	call	_stristr	;wreg free
 12004  005ACA  0E2B               	movlw	low _cmdbuf
 12005  005ACC  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12006  005ACE  0E01               	movlw	high _cmdbuf
 12007  005AD0  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12008  005AD2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12009  005AD4  E102               	bnz	u18125
 12010  005AD6  516D               	movf	?_stristr& (0+255),w,b
 12011  005AD8  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12012  005ADA                     u18125:
 12013  005ADA  E165               	bnz	l13693
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;main.c: 589: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12017  005ADC  506F               	movf	3951,w,c	;volatile
 12018  005ADE  0BE0               	andlw	224
 12019  005AE0  0102               	movlb	2	; () banked
 12020  005AE2  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 12021                           
 12022                           ; BSR set to: 2
 12023                           ;main.c: 590: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12024  005AE4  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12025  005AE6  D00B               	goto	l13667
 12026                           
 12027                           ; BSR set to: 2
 12028  005AE8  662E               	tstfsz	_bSilent,c
 12029  005AEA  D009               	goto	l13667
 12030                           
 12031                           ; BSR set to: 2
 12032                           ;main.c: 591: putsUSART((char *) "+OK - Normal mode\r\n");
 12033  005AEC  0E7A               	movlw	high STR_21
 12034  005AEE  0100               	movlb	0	; () banked
 12035  005AF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12036  005AF2  0E83               	movlw	low STR_21
 12037  005AF4  6F61               	movwf	?_putsUSART& (0+255),b
 12038  005AF6  EC2D  F00E         	call	_putsUSART	;wreg free
 12039                           
 12040                           ;main.c: 592: }
 12041  005AFA  EFB6  F035         	goto	l14203
 12042  005AFE                     l13667:
 12043                           
 12044                           ; BSR set to: 2
 12045                           ;main.c: 593: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12046  005AFE  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12047  005B00  0E01               	movlw	1
 12048  005B02  A4D8               	btfss	status,2,c
 12049  005B04  0E00               	movlw	0
 12050  005B06  142E               	andwf	_bSilent,w,c
 12051  005B08  E009               	bz	l13671
 12052                           
 12053                           ; BSR set to: 2
 12054                           ;main.c: 594: putsUSART((char *) "+OK - Silent mode\r\n");
 12055  005B0A  0E7A               	movlw	high STR_22
 12056  005B0C  0100               	movlb	0	; () banked
 12057  005B0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12058  005B10  0E97               	movlw	low STR_22
 12059  005B12  6F61               	movwf	?_putsUSART& (0+255),b
 12060  005B14  EC2D  F00E         	call	_putsUSART	;wreg free
 12061                           
 12062                           ;main.c: 595: }
 12063  005B18  EFB6  F035         	goto	l14203
 12064  005B1C                     l13671:
 12065                           
 12066                           ; BSR set to: 2
 12067                           ;main.c: 596: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12068  005B1C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12069  005B1E  0A20               	xorlw	32
 12070  005B20  E109               	bnz	l13675
 12071                           
 12072                           ; BSR set to: 2
 12073                           ;main.c: 597: putsUSART((char *) "+OK - Sleep mode\r\n");
 12074  005B22  0E7A               	movlw	high STR_23
 12075  005B24  0100               	movlb	0	; () banked
 12076  005B26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12077  005B28  0ED3               	movlw	low STR_23
 12078  005B2A  6F61               	movwf	?_putsUSART& (0+255),b
 12079  005B2C  EC2D  F00E         	call	_putsUSART	;wreg free
 12080                           
 12081                           ;main.c: 598: }
 12082  005B30  EFB6  F035         	goto	l14203
 12083  005B34                     l13675:
 12084                           
 12085                           ; BSR set to: 2
 12086                           ;main.c: 599: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12087  005B34  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12088  005B36  0A40               	xorlw	64
 12089  005B38  E109               	bnz	l13679
 12090                           
 12091                           ; BSR set to: 2
 12092                           ;main.c: 600: putsUSART((char *) "+OK - Loopback mode\r\n");
 12093  005B3A  0E7A               	movlw	high STR_24
 12094  005B3C  0100               	movlb	0	; () banked
 12095  005B3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12096  005B40  0E06               	movlw	low STR_24
 12097  005B42  6F61               	movwf	?_putsUSART& (0+255),b
 12098  005B44  EC2D  F00E         	call	_putsUSART	;wreg free
 12099                           
 12100                           ;main.c: 601: }
 12101  005B48  EFB6  F035         	goto	l14203
 12102  005B4C                     l13679:
 12103                           
 12104                           ; BSR set to: 2
 12105                           ;main.c: 602: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12106  005B4C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12107  005B4E  0A60               	xorlw	96
 12108  005B50  E109               	bnz	l13683
 12109                           
 12110                           ; BSR set to: 2
 12111                           ;main.c: 603: putsUSART((char *) "+OK - Listen only mode\r\n");
 12112  005B52  0E78               	movlw	high STR_25
 12113  005B54  0100               	movlb	0	; () banked
 12114  005B56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12115  005B58  0ECF               	movlw	low STR_25
 12116  005B5A  6F61               	movwf	?_putsUSART& (0+255),b
 12117  005B5C  EC2D  F00E         	call	_putsUSART	;wreg free
 12118                           
 12119                           ;main.c: 604: }
 12120  005B60  EFB6  F035         	goto	l14203
 12121  005B64                     l13683:
 12122                           
 12123                           ; BSR set to: 2
 12124                           ;main.c: 605: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12125  005B64  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12126  005B66  0A80               	xorlw	128
 12127  005B68  E109               	bnz	l13687
 12128                           
 12129                           ; BSR set to: 2
 12130                           ;main.c: 606: putsUSART((char *) "+OK - Closed mode\r\n");
 12131  005B6A  0E7A               	movlw	high STR_26
 12132  005B6C  0100               	movlb	0	; () banked
 12133  005B6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12134  005B70  0E6F               	movlw	low STR_26
 12135  005B72  6F61               	movwf	?_putsUSART& (0+255),b
 12136  005B74  EC2D  F00E         	call	_putsUSART	;wreg free
 12137                           
 12138                           ;main.c: 607: }
 12139  005B78  EFB6  F035         	goto	l14203
 12140  005B7C                     l13687:
 12141                           
 12142                           ; BSR set to: 2
 12143                           ;main.c: 608: else if (ECAN_OP_MODE_BITS == ifmode) {
 12144  005B7C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12145  005B7E  0AE0               	xorlw	224
 12146  005B80  E109               	bnz	l13691
 12147                           
 12148                           ; BSR set to: 2
 12149                           ;main.c: 609: putsUSART((char *) "+OK - Bits mode\r\n");
 12150  005B82  0E7A               	movlw	high STR_27
 12151  005B84  0100               	movlb	0	; () banked
 12152  005B86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12153  005B88  0EE6               	movlw	low STR_27
 12154  005B8A  6F61               	movwf	?_putsUSART& (0+255),b
 12155  005B8C  EC2D  F00E         	call	_putsUSART	;wreg free
 12156                           
 12157                           ;main.c: 610: }
 12158  005B90  EFB6  F035         	goto	l14203
 12159  005B94                     l13691:
 12160                           
 12161                           ; BSR set to: 2
 12162                           ;main.c: 611: else {
 12163                           ;main.c: 612: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12164  005B94  0E79               	movlw	high STR_28
 12165  005B96  0100               	movlb	0	; () banked
 12166  005B98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12167  005B9A  0E49               	movlw	low STR_28
 12168  005B9C  6F61               	movwf	?_putsUSART& (0+255),b
 12169  005B9E  EC2D  F00E         	call	_putsUSART	;wreg free
 12170  005BA2  EFB6  F035         	goto	l14203
 12171  005BA6                     l13693:
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 617: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12175  005BA6  0E01               	movlw	high _cmdbuf
 12176  005BA8  0100               	movlb	0	; () banked
 12177  005BAA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12178  005BAC  0E2B               	movlw	low _cmdbuf
 12179  005BAE  6F6D               	movwf	?_stristr& (0+255),b
 12180  005BB0  0E7C               	movlw	high STR_29
 12181  005BB2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12182  005BB4  0EEB               	movlw	low STR_29
 12183  005BB6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12184  005BB8  EC92  F010         	call	_stristr	;wreg free
 12185  005BBC  0E2B               	movlw	low _cmdbuf
 12186  005BBE  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12187  005BC0  0E01               	movlw	high _cmdbuf
 12188  005BC2  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12189  005BC4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12190  005BC6  E102               	bnz	u18225
 12191  005BC8  516D               	movf	?_stristr& (0+255),w,b
 12192  005BCA  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12193  005BCC                     u18225:
 12194  005BCC  E001 D0D8          	bnz	l13747
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;main.c: 619: char *p = strtok(cmdbuf, ",");
 12198  005BD0  EC14  F036         	call	PL28	;call to abstracted procedure
 12199  005BD4  EC97  F011         	call	_strtok	;wreg free
 12200  005BD8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12201  005BDC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;main.c: 622: vscpPriority = 3;
 12205  005BE0  0E03               	movlw	3
 12206  005BE2  6FEA               	movwf	_vscpPriority& (0+255),b
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;main.c: 623: if ((0) != p) {
 12210  005BE4  0102               	movlb	2	; () banked
 12211  005BE6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12212  005BE8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12213  005BEA  E008               	bz	l13703
 12214                           
 12215                           ; BSR set to: 2
 12216                           ;main.c: 624: vscpPriority = atoi(p);
 12217  005BEC  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12218  005BF0  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12219  005BF4  ECBA  F019         	call	_atoi	;wreg free
 12220  005BF8  5166               	movf	?_atoi& (0+255),w,b
 12221  005BFA  6FEA               	movwf	_vscpPriority& (0+255),b
 12222  005BFC                     l13703:
 12223                           
 12224                           ;main.c: 625: }
 12225                           ;main.c: 628: vscpClass = 0;
 12226  005BFC  6A3C               	clrf	_vscpClass,c
 12227  005BFE  6A3D               	clrf	_vscpClass+1,c
 12228                           
 12229                           ;main.c: 629: if ((0) != (p = strtok((0), ","))) {
 12230  005C00  0100               	movlb	0	; () banked
 12231  005C02  ECD3  F035         	call	PL4	;call to abstracted procedure
 12232  005C06  EC97  F011         	call	_strtok	;wreg free
 12233  005C0A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12234  005C0E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12235  005C12  0102               	movlb	2	; () banked
 12236  005C14  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12237  005C16  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12238  005C18  E00A               	bz	l13709
 12239                           
 12240                           ; BSR set to: 2
 12241                           ;main.c: 630: vscpClass = atoi(p);
 12242  005C1A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12243  005C1E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12244  005C22  ECBA  F019         	call	_atoi	;wreg free
 12245  005C26  C066  F03C         	movff	?_atoi,_vscpClass
 12246  005C2A  C067  F03D         	movff	?_atoi+1,_vscpClass+1
 12247  005C2E                     l13709:
 12248                           
 12249                           ;main.c: 631: }
 12250                           ;main.c: 634: vscpType = 0;
 12251  005C2E  0100               	movlb	0	; () banked
 12252  005C30  6BEC               	clrf	_vscpType& (0+255),b
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;main.c: 635: if ((0) != (p = strtok((0), ","))) {
 12256  005C32  ECD3  F035         	call	PL4	;call to abstracted procedure
 12257  005C36  EC97  F011         	call	_strtok	;wreg free
 12258  005C3A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12259  005C3E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12260  005C42  0102               	movlb	2	; () banked
 12261  005C44  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12262  005C46  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12263  005C48  E008               	bz	l13715
 12264                           
 12265                           ; BSR set to: 2
 12266                           ;main.c: 636: vscpType = atoi(p);
 12267  005C4A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12268  005C4E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12269  005C52  ECBA  F019         	call	_atoi	;wreg free
 12270  005C56  5166               	movf	?_atoi& (0+255),w,b
 12271  005C58  6FEC               	movwf	_vscpType& (0+255),b
 12272  005C5A                     l13715:
 12273                           
 12274                           ;main.c: 637: }
 12275                           ;main.c: 640: vscpNodeId = 0;
 12276  005C5A  0100               	movlb	0	; () banked
 12277  005C5C  6BE9               	clrf	_vscpNodeId& (0+255),b
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;main.c: 641: if ((0) != (p = strtok((0), ","))) {
 12281  005C5E  ECD3  F035         	call	PL4	;call to abstracted procedure
 12282  005C62  EC97  F011         	call	_strtok	;wreg free
 12283  005C66  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12284  005C6A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12285  005C6E  0102               	movlb	2	; () banked
 12286  005C70  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12287  005C72  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12288  005C74  E008               	bz	l13721
 12289                           
 12290                           ; BSR set to: 2
 12291                           ;main.c: 642: vscpNodeId = atoi(p);
 12292  005C76  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12293  005C7A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12294  005C7E  ECBA  F019         	call	_atoi	;wreg free
 12295  005C82  5166               	movf	?_atoi& (0+255),w,b
 12296  005C84  6FE9               	movwf	_vscpNodeId& (0+255),b
 12297  005C86                     l13721:
 12298                           
 12299                           ;main.c: 643: }
 12300                           ;main.c: 646: vscpSize = 0;
 12301  005C86  0100               	movlb	0	; () banked
 12302  005C88  6BEB               	clrf	_vscpSize& (0+255),b
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;main.c: 647: if ((0) != (p = strtok((0), ","))) {
 12306  005C8A  ECD3  F035         	call	PL4	;call to abstracted procedure
 12307  005C8E  EC97  F011         	call	_strtok	;wreg free
 12308  005C92  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12309  005C96  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12310  005C9A  0102               	movlb	2	; () banked
 12311  005C9C  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12312  005C9E  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12313  005CA0  E008               	bz	l13727
 12314                           
 12315                           ; BSR set to: 2
 12316                           ;main.c: 648: vscpSize = atoi(p);
 12317  005CA2  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12318  005CA6  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12319  005CAA  ECBA  F019         	call	_atoi	;wreg free
 12320  005CAE  5166               	movf	?_atoi& (0+255),w,b
 12321  005CB0  6FEB               	movwf	_vscpSize& (0+255),b
 12322  005CB2                     l13727:
 12323                           
 12324                           ;main.c: 649: }
 12325                           ;main.c: 651: memset( vscpData, 0, 8 );
 12326  005CB2  0E34               	movlw	low _vscpData
 12327  005CB4  0100               	movlb	0	; () banked
 12328  005CB6  6F60               	movwf	?_memset& (0+255),b
 12329  005CB8  0E00               	movlw	high _vscpData
 12330  005CBA  6F61               	movwf	(?_memset+1)& (0+255),b
 12331  005CBC  0E0F               	movlw	15
 12332  005CBE  6F61               	movwf	(?_memset+1)& (0+255),b
 12333  005CC0  0E5F               	movlw	__accesstop+-1
 12334  005CC2  6560               	cpfsgt	?_memset& (0+255),b
 12335  005CC4  6B61               	clrf	(?_memset+1)& (0+255),b
 12336  005CC6  6B63               	clrf	(?_memset+3)& (0+255),b
 12337  005CC8  6B62               	clrf	(?_memset+2)& (0+255),b
 12338  005CCA  6B65               	clrf	(?_memset+5)& (0+255),b
 12339  005CCC  0E08               	movlw	8
 12340  005CCE  6F64               	movwf	(?_memset+4)& (0+255),b
 12341  005CD0  ECC8  F00B         	call	_memset	;wreg free
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;main.c: 652: for (i = 0; i < vscpSize; i++) {
 12345  005CD4  0102               	movlb	2	; () banked
 12346  005CD6  6BA9               	clrf	doModeVerbose@i& (0+255),b
 12347  005CD8  D01B               	goto	l13737
 12348  005CDA                     l13731:
 12349                           
 12350                           ; BSR set to: 2
 12351                           ;main.c: 653: if ((0) != (p = strtok((0), ","))) {
 12352  005CDA  0100               	movlb	0	; () banked
 12353  005CDC  ECD3  F035         	call	PL4	;call to abstracted procedure
 12354  005CE0  EC97  F011         	call	_strtok	;wreg free
 12355  005CE4  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12356  005CE8  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12357  005CEC  0102               	movlb	2	; () banked
 12358  005CEE  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12359  005CF0  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12360  005CF2  E013               	bz	l13739
 12361                           
 12362                           ; BSR set to: 2
 12363                           ;main.c: 654: vscpData[ i ] = atoi(p);
 12364  005CF4  51A9               	movf	doModeVerbose@i& (0+255),w,b
 12365  005CF6  0F34               	addlw	low _vscpData
 12366  005CF8  6ED9               	movwf	fsr2l,c
 12367  005CFA  6ADA               	clrf	fsr2h,c
 12368  005CFC  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12369  005D00  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12370  005D04  ECBA  F019         	call	_atoi	;wreg free
 12371  005D08  5166               	movf	?_atoi& (0+255),w,b
 12372  005D0A  6EDF               	movwf	indf2,c
 12373                           
 12374                           ; BSR set to: 0
 12375                           
 12376                           ;main.c: 655: }
 12377  005D0C  0102               	movlb	2	; () banked
 12378  005D0E  2BA9               	incf	doModeVerbose@i& (0+255),f,b
 12379  005D10                     l13737:
 12380                           
 12381                           ; BSR set to: 2
 12382  005D10  0100               	movlb	0	; () banked
 12383  005D12  51EB               	movf	_vscpSize& (0+255),w,b
 12384  005D14  0102               	movlb	2	; () banked
 12385  005D16  5DA9               	subwf	doModeVerbose@i& (0+255),w,b
 12386  005D18  E3E0               	bnc	l13731
 12387  005D1A                     l13739:
 12388                           
 12389                           ; BSR set to: 2
 12390                           ;main.c: 658: }
 12391                           ;main.c: 659: }
 12392                           ;main.c: 661: if ( sendVSCPFrame(vscpClass,
 12393                           ;main.c: 662: vscpType,
 12394                           ;main.c: 663: vscpNodeId,
 12395                           ;main.c: 664: vscpPriority,
 12396                           ;main.c: 665: vscpSize,
 12397                           ;main.c: 666: vscpData ) ) {
 12398  005D1A  C03C  F096         	movff	_vscpClass,?_sendVSCPFrame
 12399  005D1E  C03D  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12400  005D22  C0EC  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12401  005D26  C0E9  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12402  005D2A  C0EA  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12403  005D2E  C0EB  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12404  005D32  0E34               	movlw	low _vscpData
 12405  005D34  0100               	movlb	0	; () banked
 12406  005D36  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12407  005D38  EC13  F015         	call	_sendVSCPFrame	;wreg free
 12408  005D3C  0900               	iorlw	0
 12409  005D3E  E017               	bz	l13745
 12410                           
 12411                           ;main.c: 668: cntTxFrames++;
 12412  005D40  0101               	movlb	1	; () banked
 12413  005D42  2B14               	incf	_cntTxFrames& (0+255),f,b
 12414  005D44  0E00               	movlw	0
 12415  005D46  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12416  005D48  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12417  005D4A  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12418                           
 12419                           ;main.c: 669: cntTxBytes += vscpSize;
 12420  005D4C  0100               	movlb	0	; () banked
 12421  005D4E  51EB               	movf	_vscpSize& (0+255),w,b
 12422  005D50  0101               	movlb	1	; () banked
 12423  005D52  2710               	addwf	_cntTxBytes& (0+255),f,b
 12424  005D54  0E00               	movlw	0
 12425  005D56  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12426  005D58  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12427  005D5A  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12428                           
 12429                           ; BSR set to: 1
 12430                           ;main.c: 670: putsUSART((char *) "+OK\r\n");
 12431  005D5C  0E7C               	movlw	high STR_9
 12432  005D5E  0100               	movlb	0	; () banked
 12433  005D60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12434  005D62  0E80               	movlw	low STR_9
 12435  005D64  6F61               	movwf	?_putsUSART& (0+255),b
 12436  005D66  EC2D  F00E         	call	_putsUSART	;wreg free
 12437                           
 12438                           ;main.c: 671: }
 12439  005D6A  EFB6  F035         	goto	l14203
 12440  005D6E                     l13745:
 12441                           
 12442                           ;main.c: 672: else {
 12443                           ;main.c: 673: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12444  005D6E  0E77               	movlw	high STR_37
 12445  005D70  0100               	movlb	0	; () banked
 12446  005D72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12447  005D74  0E49               	movlw	low STR_37
 12448  005D76  6F61               	movwf	?_putsUSART& (0+255),b
 12449  005D78  EC2D  F00E         	call	_putsUSART	;wreg free
 12450  005D7C  EFB6  F035         	goto	l14203
 12451  005D80                     l13747:
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;main.c: 677: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12455  005D80  0E01               	movlw	high _cmdbuf
 12456  005D82  0100               	movlb	0	; () banked
 12457  005D84  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12458  005D86  0E2B               	movlw	low _cmdbuf
 12459  005D88  6F6D               	movwf	?_stristr& (0+255),b
 12460  005D8A  0E7C               	movlw	high STR_38
 12461  005D8C  6F70               	movwf	(?_stristr+3)& (0+255),b
 12462  005D8E  0EE8               	movlw	low STR_38
 12463  005D90  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12464  005D92  EC92  F010         	call	_stristr	;wreg free
 12465  005D96  0E2B               	movlw	low _cmdbuf
 12466  005D98  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12467  005D9A  0E01               	movlw	high _cmdbuf
 12468  005D9C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12469  005D9E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12470  005DA0  E102               	bnz	u18315
 12471  005DA2  516D               	movf	?_stristr& (0+255),w,b
 12472  005DA4  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12473  005DA6                     u18315:
 12474  005DA6  E116               	bnz	l13755
 12475                           
 12476                           ; BSR set to: 0
 12477                           ;main.c: 678: if (receivePrintEventVerbose()) {
 12478  005DA8  EC1D  F024         	call	_receivePrintEventVerbose	;wreg free
 12479  005DAC  0900               	iorlw	0
 12480  005DAE  E009               	bz	l13753
 12481                           
 12482                           ;main.c: 679: putsUSART((char *) "+OK\r\n");
 12483  005DB0  0E7C               	movlw	high STR_9
 12484  005DB2  0100               	movlb	0	; () banked
 12485  005DB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12486  005DB6  0E80               	movlw	low STR_9
 12487  005DB8  6F61               	movwf	?_putsUSART& (0+255),b
 12488  005DBA  EC2D  F00E         	call	_putsUSART	;wreg free
 12489                           
 12490                           ;main.c: 680: }
 12491  005DBE  EFB6  F035         	goto	l14203
 12492  005DC2                     l13753:
 12493                           
 12494                           ;main.c: 681: else {
 12495                           ;main.c: 682: putsUSART((char *) "+OK - no events\r\n");
 12496  005DC2  0E7A               	movlw	high STR_40
 12497  005DC4  0100               	movlb	0	; () banked
 12498  005DC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12499  005DC8  0EF8               	movlw	low STR_40
 12500  005DCA  6F61               	movwf	?_putsUSART& (0+255),b
 12501  005DCC  EC2D  F00E         	call	_putsUSART	;wreg free
 12502  005DD0  EFB6  F035         	goto	l14203
 12503  005DD4                     l13755:
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;main.c: 686: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12507  005DD4  0E01               	movlw	high _cmdbuf
 12508  005DD6  0100               	movlb	0	; () banked
 12509  005DD8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12510  005DDA  0E2B               	movlw	low _cmdbuf
 12511  005DDC  6F6D               	movwf	?_stristr& (0+255),b
 12512  005DDE  0E7C               	movlw	high STR_41
 12513  005DE0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12514  005DE2  0ECB               	movlw	low STR_41
 12515  005DE4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12516  005DE6  EC92  F010         	call	_stristr	;wreg free
 12517  005DEA  0E2B               	movlw	low _cmdbuf
 12518  005DEC  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12519  005DEE  0E01               	movlw	high _cmdbuf
 12520  005DF0  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12521  005DF2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12522  005DF4  E102               	bnz	u18335
 12523  005DF6  516D               	movf	?_stristr& (0+255),w,b
 12524  005DF8  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12525  005DFA                     u18335:
 12526  005DFA  E10B               	bnz	l13761
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;main.c: 687: printStatistics();
 12530  005DFC  EC9C  F01F         	call	_printStatistics	;wreg free
 12531                           
 12532                           ;main.c: 688: putsUSART((char *) "+OK\r\n");
 12533  005E00  0E7C               	movlw	high STR_9
 12534  005E02  0100               	movlb	0	; () banked
 12535  005E04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12536  005E06  0E80               	movlw	low STR_9
 12537  005E08  6F61               	movwf	?_putsUSART& (0+255),b
 12538  005E0A  EC2D  F00E         	call	_putsUSART	;wreg free
 12539                           
 12540                           ;main.c: 689: }
 12541  005E0E  EFB6  F035         	goto	l14203
 12542  005E12                     l13761:
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;main.c: 691: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12546  005E12  0E01               	movlw	high _cmdbuf
 12547  005E14  0100               	movlb	0	; () banked
 12548  005E16  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12549  005E18  0E2B               	movlw	low _cmdbuf
 12550  005E1A  6F6D               	movwf	?_stristr& (0+255),b
 12551  005E1C  0E7C               	movlw	high STR_43
 12552  005E1E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12553  005E20  0ED9               	movlw	low STR_43
 12554  005E22  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12555  005E24  EC92  F010         	call	_stristr	;wreg free
 12556  005E28  0E2B               	movlw	low _cmdbuf
 12557  005E2A  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12558  005E2C  0E01               	movlw	high _cmdbuf
 12559  005E2E  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12560  005E30  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12561  005E32  E102               	bnz	u18345
 12562  005E34  516D               	movf	?_stristr& (0+255),w,b
 12563  005E36  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12564  005E38                     u18345:
 12565  005E38  E10B               	bnz	l13767
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;main.c: 692: printErrors();
 12569  005E3A  EC5E  F025         	call	_printErrors	;wreg free
 12570                           
 12571                           ;main.c: 693: putsUSART((char *) "+OK\r\n");
 12572  005E3E  0E7C               	movlw	high STR_9
 12573  005E40  0100               	movlb	0	; () banked
 12574  005E42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12575  005E44  0E80               	movlw	low STR_9
 12576  005E46  6F61               	movwf	?_putsUSART& (0+255),b
 12577  005E48  EC2D  F00E         	call	_putsUSART	;wreg free
 12578                           
 12579                           ;main.c: 694: }
 12580  005E4C  EFB6  F035         	goto	l14203
 12581  005E50                     l13767:
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;main.c: 696: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12585  005E50  0E01               	movlw	high _cmdbuf
 12586  005E52  0100               	movlb	0	; () banked
 12587  005E54  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12588  005E56  0E2B               	movlw	low _cmdbuf
 12589  005E58  6F6D               	movwf	?_stristr& (0+255),b
 12590  005E5A  0E7C               	movlw	high STR_45
 12591  005E5C  6F70               	movwf	(?_stristr+3)& (0+255),b
 12592  005E5E  0EC6               	movlw	low STR_45
 12593  005E60  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12594  005E62  EC92  F010         	call	_stristr	;wreg free
 12595  005E66  0E2B               	movlw	low _cmdbuf
 12596  005E68  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12597  005E6A  0E01               	movlw	high _cmdbuf
 12598  005E6C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12599  005E6E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12600  005E70  E102               	bnz	u18355
 12601  005E72  516D               	movf	?_stristr& (0+255),w,b
 12602  005E74  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12603  005E76                     u18355:
 12604  005E76  E10B               	bnz	l13771
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;main.c: 697: printHelp();
 12608  005E78  EC67  F020         	call	_printHelp	;wreg free
 12609                           
 12610                           ;main.c: 698: putsUSART((char *) "+OK\r\n");
 12611  005E7C  0E7C               	movlw	high STR_9
 12612  005E7E  0100               	movlb	0	; () banked
 12613  005E80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12614  005E82  0E80               	movlw	low STR_9
 12615  005E84  6F61               	movwf	?_putsUSART& (0+255),b
 12616  005E86  EC2D  F00E         	call	_putsUSART	;wreg free
 12617                           
 12618                           ;main.c: 699: }
 12619  005E8A  EFB6  F035         	goto	l14203
 12620  005E8E                     l13771:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;main.c: 701: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12624  005E8E  0E01               	movlw	high _cmdbuf
 12625  005E90  0100               	movlb	0	; () banked
 12626  005E92  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12627  005E94  0E2B               	movlw	low _cmdbuf
 12628  005E96  6F6D               	movwf	?_stristr& (0+255),b
 12629  005E98  0E7C               	movlw	high STR_47
 12630  005E9A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12631  005E9C  0EA3               	movlw	low STR_47
 12632  005E9E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12633  005EA0  EC92  F010         	call	_stristr	;wreg free
 12634  005EA4  0E2B               	movlw	low _cmdbuf
 12635  005EA6  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12636  005EA8  0E01               	movlw	high _cmdbuf
 12637  005EAA  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12638  005EAC  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12639  005EAE  E102               	bnz	u18365
 12640  005EB0  516D               	movf	?_stristr& (0+255),w,b
 12641  005EB2  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12642  005EB4                     u18365:
 12643  005EB4  E10B               	bnz	l13777
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;main.c: 702: findNodes();
 12647  005EB6  ECC2  F018         	call	_findNodes	;wreg free
 12648                           
 12649                           ;main.c: 703: putsUSART((char *) "+OK\r\n");
 12650  005EBA  0E7C               	movlw	high STR_9
 12651  005EBC  0100               	movlb	0	; () banked
 12652  005EBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12653  005EC0  0E80               	movlw	low STR_9
 12654  005EC2  6F61               	movwf	?_putsUSART& (0+255),b
 12655  005EC4  EC2D  F00E         	call	_putsUSART	;wreg free
 12656                           
 12657                           ;main.c: 704: }
 12658  005EC8  EFB6  F035         	goto	l14203
 12659  005ECC                     l13777:
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;main.c: 707: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12663  005ECC  0E01               	movlw	high _cmdbuf
 12664  005ECE  0100               	movlb	0	; () banked
 12665  005ED0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12666  005ED2  0E2B               	movlw	low _cmdbuf
 12667  005ED4  6F6D               	movwf	?_stristr& (0+255),b
 12668  005ED6  0E7C               	movlw	high STR_49
 12669  005ED8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12670  005EDA  0EA8               	movlw	low STR_49
 12671  005EDC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12672  005EDE  EC92  F010         	call	_stristr	;wreg free
 12673  005EE2  0E2B               	movlw	low _cmdbuf
 12674  005EE4  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12675  005EE6  0E01               	movlw	high _cmdbuf
 12676  005EE8  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12677  005EEA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12678  005EEC  E102               	bnz	u18375
 12679  005EEE  516D               	movf	?_stristr& (0+255),w,b
 12680  005EF0  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12681  005EF2                     u18375:
 12682  005EF2  E001 D1B4          	bnz	l13907
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;main.c: 709: uint8_t i;
 12686                           ;main.c: 710: uint8_t nodeid;
 12687                           ;main.c: 711: uint8_t page = 0;
 12688  005EF6  0102               	movlb	2	; () banked
 12689  005EF8  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12690                           
 12691                           ; BSR set to: 2
 12692                           ;main.c: 712: uint8_t reg;
 12693                           ;main.c: 713: uint8_t value;
 12694                           ;main.c: 714: uint8_t count = 1;
 12695  005EFA  0E01               	movlw	1
 12696  005EFC  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12697                           
 12698                           ; BSR set to: 2
 12699                           ;main.c: 716: strcpy(cmdbuf, cmdbuf + 5);
 12700  005EFE  ECC5  F035         	call	PL2	;call to abstracted procedure
 12701  005F02  ECDF  F00B         	call	_strcpy	;wreg free
 12702                           
 12703                           ; BSR set to: 0
 12704                           ;main.c: 717: char *p = strtok(cmdbuf, " ");
 12705  005F06  0E01               	movlw	high _cmdbuf
 12706  005F08  EC1E  F036         	call	PL32	;call to abstracted procedure
 12707  005F0C  EC97  F011         	call	_strtok	;wreg free
 12708  005F10  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12709  005F14  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;main.c: 718: if ((0) != p) {
 12713  005F18  0102               	movlb	2	; () banked
 12714  005F1A  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12715  005F1C  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12716  005F1E  E00A               	bz	l13791
 12717                           
 12718                           ; BSR set to: 2
 12719                           ;main.c: 719: nodeid = atoi(p);
 12720  005F20  C2B2  F066         	movff	doModeVerbose@p_1117,?_atoi
 12721  005F24  C2B3  F067         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12722  005F28  ECBA  F019         	call	_atoi	;wreg free
 12723  005F2C  5166               	movf	?_atoi& (0+255),w,b
 12724  005F2E  0102               	movlb	2	; () banked
 12725  005F30  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12726                           
 12727                           ;main.c: 720: }
 12728  005F32  D009               	goto	l13795
 12729  005F34                     l13791:
 12730                           
 12731                           ; BSR set to: 2
 12732                           ;main.c: 721: else {
 12733                           ;main.c: 722: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12734  005F34  0E79               	movlw	high STR_51
 12735  005F36  0100               	movlb	0	; () banked
 12736  005F38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12737  005F3A  0E31               	movlw	low STR_51
 12738  005F3C  6F61               	movwf	?_putsUSART& (0+255),b
 12739  005F3E  EC2D  F00E         	call	_putsUSART	;wreg free
 12740  005F42  EFC4  F035         	goto	l538
 12741  005F46                     l13795:
 12742                           
 12743                           ; BSR set to: 2
 12744                           ;main.c: 724: }
 12745                           ;main.c: 726: if ((0) != (p = strtok((0), " "))) {
 12746  005F46  EC0C  F036         	call	PL26	;call to abstracted procedure
 12747  005F4A  EC97  F011         	call	_strtok	;wreg free
 12748  005F4E  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12749  005F52  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12750  005F56  0102               	movlb	2	; () banked
 12751  005F58  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12752  005F5A  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12753  005F5C  E034               	bz	l13803
 12754                           
 12755                           ; BSR set to: 2
 12756                           ;main.c: 728: char *preg;
 12757                           ;main.c: 729: if (preg = strchr(p, ':')) {
 12758  005F5E  C2B2  F060         	movff	doModeVerbose@p_1117,?_strchr
 12759  005F62  C2B3  F061         	movff	doModeVerbose@p_1117+1,?_strchr+1
 12760  005F66  0100               	movlb	0	; () banked
 12761  005F68  6B63               	clrf	(?_strchr+3)& (0+255),b
 12762  005F6A  0E3A               	movlw	58
 12763  005F6C  6F62               	movwf	(?_strchr+2)& (0+255),b
 12764  005F6E  EC14  F00F         	call	_strchr	;wreg free
 12765  005F72  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12766  005F76  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12767  005F7A  0102               	movlb	2	; () banked
 12768  005F7C  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12769  005F7E  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12770  005F80  E018               	bz	l13801
 12771                           
 12772                           ; BSR set to: 2
 12773                           ;main.c: 730: page = atoi(p);
 12774  005F82  C2B2  F066         	movff	doModeVerbose@p_1117,?_atoi
 12775  005F86  C2B3  F067         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12776  005F8A  ECBA  F019         	call	_atoi	;wreg free
 12777  005F8E  5166               	movf	?_atoi& (0+255),w,b
 12778  005F90  0102               	movlb	2	; () banked
 12779  005F92  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12780                           
 12781                           ;main.c: 731: reg = atoi(preg + 1);
 12782  005F94  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12783  005F96  0100               	movlb	0	; () banked
 12784  005F98  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12785  005F9A  0E00               	movlw	0
 12786  005F9C  0102               	movlb	2	; () banked
 12787  005F9E  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12788  005FA0  0100               	movlb	0	; () banked
 12789  005FA2  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12790  005FA4  C0C9  F066         	movff	??_doModeVerbose,?_atoi
 12791  005FA8  C0CA  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12792  005FAC  ECBA  F019         	call	_atoi	;wreg free
 12793  005FB0  D006               	goto	L6
 12794  005FB2                     l13801:
 12795                           
 12796                           ; BSR set to: 2
 12797                           ;main.c: 733: else {
 12798                           ;main.c: 734: reg = atoi(p);
 12799  005FB2  C2B2  F066         	movff	doModeVerbose@p_1117,?_atoi
 12800  005FB6  C2B3  F067         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12801  005FBA  ECBA  F019         	call	_atoi	;wreg free
 12802  005FBE                     L6:
 12803  005FBE  5166               	movf	?_atoi& (0+255),w,b
 12804  005FC0  0102               	movlb	2	; () banked
 12805  005FC2  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12806  005FC4  D009               	goto	l13807
 12807  005FC6                     l13803:
 12808                           
 12809                           ; BSR set to: 2
 12810                           ;main.c: 739: else {
 12811                           ;main.c: 740: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12812  005FC6  0E77               	movlw	high STR_53
 12813  005FC8  0100               	movlb	0	; () banked
 12814  005FCA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12815  005FCC  0EAC               	movlw	low STR_53
 12816  005FCE  6F61               	movwf	?_putsUSART& (0+255),b
 12817  005FD0  EC2D  F00E         	call	_putsUSART	;wreg free
 12818  005FD4  EFC4  F035         	goto	l538
 12819  005FD8                     l13807:
 12820                           
 12821                           ; BSR set to: 2
 12822                           ;main.c: 742: }
 12823                           ;main.c: 745: if ((0) != (p = strtok((0), " "))) {
 12824  005FD8  EC0C  F036         	call	PL26	;call to abstracted procedure
 12825  005FDC  EC97  F011         	call	_strtok	;wreg free
 12826  005FE0  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12827  005FE4  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12828  005FE8  0102               	movlb	2	; () banked
 12829  005FEA  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12830  005FEC  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12831  005FEE  E00D               	bz	l543
 12832                           
 12833                           ; BSR set to: 2
 12834                           ;main.c: 746: count = atoi(p);
 12835  005FF0  C2B2  F066         	movff	doModeVerbose@p_1117,?_atoi
 12836  005FF4  C2B3  F067         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12837  005FF8  ECBA  F019         	call	_atoi	;wreg free
 12838  005FFC  5166               	movf	?_atoi& (0+255),w,b
 12839  005FFE  0102               	movlb	2	; () banked
 12840  006000  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12841                           
 12842                           ; BSR set to: 2
 12843                           ;main.c: 747: if (0 == count) count = 1;
 12844  006002  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12845  006004  D002               	goto	l543
 12846                           
 12847                           ; BSR set to: 2
 12848  006006  0E01               	movlw	1
 12849  006008  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12850  00600A                     l543:
 12851                           
 12852                           ; BSR set to: 2
 12853                           ;main.c: 748: }
 12854                           ;main.c: 750: BOOL rv = 1;
 12855  00600A  0E01               	movlw	1
 12856  00600C  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12857                           
 12858                           ; BSR set to: 2
 12859                           ;main.c: 751: for (i = 0; i < count; i++) {
 12860  00600E  6BB0               	clrf	doModeVerbose@i_1111& (0+255),b
 12861  006010  D10E               	goto	l13899
 12862  006012                     l13817:
 12863                           
 12864                           ; BSR set to: 2
 12865                           ;main.c: 753: if (readRegisterExtended(nodeid,
 12866                           ;main.c: 754: page,
 12867                           ;main.c: 755: (reg + i) & 0xff,
 12868                           ;main.c: 756: rwtimeout,
 12869                           ;main.c: 757: &value)) {
 12870  006012  0100               	movlb	0	; () banked
 12871  006014  C2AD  F0B5         	movff	doModeVerbose@page,?_readRegisterExtended
 12872  006018  6BB6               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12873  00601A  0102               	movlb	2	; () banked
 12874  00601C  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12875  00601E  25B0               	addwf	doModeVerbose@i_1111& (0+255),w,b
 12876  006020  0100               	movlb	0	; () banked
 12877  006022  6FB7               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12878  006024  C0E8  F0B8         	movff	_rwtimeout,?_readRegisterExtended+3
 12879  006028  6BB9               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12880  00602A  0E02               	movlw	high doModeVerbose@value
 12881  00602C  6FBB               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12882  00602E  0EB1               	movlw	low doModeVerbose@value
 12883  006030  6FBA               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12884  006032  0102               	movlb	2	; () banked
 12885  006034  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12886  006036  ECD0  F015         	call	_readRegisterExtended
 12887  00603A  0900               	iorlw	0
 12888  00603C  E101 D09D          	bz	l547
 12889                           
 12890                           ;main.c: 758: putsUSART((char *) "Value for reg ");
 12891  006040  0E7B               	movlw	high STR_55
 12892  006042  0100               	movlb	0	; () banked
 12893  006044  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12894  006046  0E5E               	movlw	low STR_55
 12895  006048  6F61               	movwf	?_putsUSART& (0+255),b
 12896  00604A  EC2D  F00E         	call	_putsUSART	;wreg free
 12897                           
 12898                           ;main.c: 759: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12899  00604E  0100               	movlb	0	; () banked
 12900  006050  67E4               	tstfsz	_bHex& (0+255),b
 12901  006052  D005               	goto	l13825
 12902                           
 12903                           ; BSR set to: 0
 12904  006054  0E7C               	movlw	high STR_57
 12905  006056  0102               	movlb	2	; () banked
 12906  006058  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12907  00605A  0EEE               	movlw	low STR_57
 12908  00605C  D004               	goto	L7
 12909  00605E                     l13825:
 12910                           
 12911                           ; BSR set to: 0
 12912  00605E  0E7C               	movlw	high STR_56
 12913  006060  0102               	movlb	2	; () banked
 12914  006062  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12915  006064  0E65               	movlw	low STR_56
 12916  006066                     L7:
 12917  006066  6F94               	movwf	_doModeVerbose$1129& (0+255),b
 12918                           
 12919                           ; BSR set to: 2
 12920  006068  0E01               	movlw	high _wrkbuf
 12921  00606A  0100               	movlb	0	; () banked
 12922  00606C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12923  00606E  0E7B               	movlw	low _wrkbuf
 12924  006070  6F76               	movwf	?_sprintf& (0+255),b
 12925  006072  C294  F078         	movff	_doModeVerbose$1129,?_sprintf+2
 12926  006076  C295  F079         	movff	_doModeVerbose$1129+1,?_sprintf+3
 12927  00607A  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12928  00607E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12929  006080  ECAA  F028         	call	_sprintf	;wreg free
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;main.c: 760: putsUSART(wrkbuf);
 12933  006084  0E01               	movlw	high _wrkbuf
 12934  006086  0100               	movlb	0	; () banked
 12935  006088  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12936  00608A  0E7B               	movlw	low _wrkbuf
 12937  00608C  6F61               	movwf	?_putsUSART& (0+255),b
 12938  00608E  EC2D  F00E         	call	_putsUSART	;wreg free
 12939  006092                     l552:
 12940  006092  A2AC               	btfss	4012,1,c	;volatile
 12941  006094  D7FE               	goto	l552
 12942                           
 12943                           ;main.c: 762: WriteUSART(':');
 12944  006096  0E3A               	movlw	58
 12945  006098  EC78  F00B         	call	_WriteUSART
 12946                           
 12947                           ;main.c: 763: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12948  00609C  0100               	movlb	0	; () banked
 12949  00609E  67E4               	tstfsz	_bHex& (0+255),b
 12950  0060A0  D005               	goto	l13837
 12951                           
 12952                           ; BSR set to: 0
 12953  0060A2  0E7C               	movlw	high STR_57
 12954  0060A4  0102               	movlb	2	; () banked
 12955  0060A6  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12956  0060A8  0EEE               	movlw	low STR_57
 12957  0060AA  D004               	goto	L8
 12958  0060AC                     l13837:
 12959                           
 12960                           ; BSR set to: 0
 12961  0060AC  0E7C               	movlw	high STR_56
 12962  0060AE  0102               	movlb	2	; () banked
 12963  0060B0  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12964  0060B2  0E65               	movlw	low STR_56
 12965  0060B4                     L8:
 12966  0060B4  6F96               	movwf	_doModeVerbose$1141& (0+255),b
 12967                           
 12968                           ; BSR set to: 2
 12969  0060B6  0E01               	movlw	high _wrkbuf
 12970  0060B8  0100               	movlb	0	; () banked
 12971  0060BA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12972  0060BC  0E7B               	movlw	low _wrkbuf
 12973  0060BE  6F76               	movwf	?_sprintf& (0+255),b
 12974  0060C0  C296  F078         	movff	_doModeVerbose$1141,?_sprintf+2
 12975  0060C4  C297  F079         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12976  0060C8  EC27  F036         	call	PL38	;call to abstracted procedure
 12977  0060CC  ECAA  F028         	call	_sprintf	;wreg free
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;main.c: 764: putsUSART(wrkbuf);
 12981  0060D0  0E01               	movlw	high _wrkbuf
 12982  0060D2  0100               	movlb	0	; () banked
 12983  0060D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12984  0060D6  0E7B               	movlw	low _wrkbuf
 12985  0060D8  6F61               	movwf	?_putsUSART& (0+255),b
 12986  0060DA  EC2D  F00E         	call	_putsUSART	;wreg free
 12987                           
 12988                           ;main.c: 765: putsUSART((char *) " = ");
 12989  0060DE  0E7B               	movlw	high (STR_243+4)
 12990  0060E0  0100               	movlb	0	; () banked
 12991  0060E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12992  0060E4  0EEA               	movlw	low (STR_243+4)
 12993  0060E6  6F61               	movwf	?_putsUSART& (0+255),b
 12994  0060E8  EC2D  F00E         	call	_putsUSART	;wreg free
 12995                           
 12996                           ;main.c: 766: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12997  0060EC  0100               	movlb	0	; () banked
 12998  0060EE  67E4               	tstfsz	_bHex& (0+255),b
 12999  0060F0  D005               	goto	l13849
 13000                           
 13001                           ; BSR set to: 0
 13002  0060F2  0E7C               	movlw	high STR_57
 13003  0060F4  0102               	movlb	2	; () banked
 13004  0060F6  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 13005  0060F8  0EEE               	movlw	low STR_57
 13006  0060FA  D004               	goto	L9
 13007  0060FC                     l13849:
 13008                           
 13009                           ; BSR set to: 0
 13010  0060FC  0E7C               	movlw	high STR_56
 13011  0060FE  0102               	movlb	2	; () banked
 13012  006100  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 13013  006102  0E65               	movlw	low STR_56
 13014  006104                     L9:
 13015  006104  6F98               	movwf	_doModeVerbose$1146& (0+255),b
 13016                           
 13017                           ; BSR set to: 2
 13018  006106  0E01               	movlw	high _wrkbuf
 13019  006108  0100               	movlb	0	; () banked
 13020  00610A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13021  00610C  0E7B               	movlw	low _wrkbuf
 13022  00610E  6F76               	movwf	?_sprintf& (0+255),b
 13023  006110  C298  F078         	movff	_doModeVerbose$1146,?_sprintf+2
 13024  006114  C299  F079         	movff	_doModeVerbose$1146+1,?_sprintf+3
 13025  006118  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13026  00611C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13027  00611E  ECAA  F028         	call	_sprintf	;wreg free
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;main.c: 767: putsUSART(wrkbuf);
 13031  006122  0E01               	movlw	high _wrkbuf
 13032  006124  0100               	movlb	0	; () banked
 13033  006126  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13034  006128  0E7B               	movlw	low _wrkbuf
 13035  00612A  6F61               	movwf	?_putsUSART& (0+255),b
 13036  00612C  EC2D  F00E         	call	_putsUSART	;wreg free
 13037  006130                     l563:
 13038  006130  A2AC               	btfss	4012,1,c	;volatile
 13039  006132  D7FE               	goto	l563
 13040                           
 13041                           ;main.c: 769: WriteUSART(' ');
 13042  006134  0E20               	movlw	32
 13043  006136  EC78  F00B         	call	_WriteUSART
 13044  00613A                     l566:
 13045  00613A  A2AC               	btfss	4012,1,c	;volatile
 13046  00613C  D7FE               	goto	l566
 13047                           
 13048                           ;main.c: 771: if ((value > 32) && (value < 127)) {
 13049  00613E  0E20               	movlw	32
 13050  006140  0102               	movlb	2	; () banked
 13051  006142  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 13052  006144  D007               	goto	l13863
 13053                           
 13054                           ; BSR set to: 2
 13055  006146  0E7F               	movlw	127
 13056  006148  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 13057  00614A  D004               	goto	l13863
 13058                           
 13059                           ; BSR set to: 2
 13060                           ;main.c: 772: WriteUSART(value);
 13061  00614C  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13062  00614E  EC78  F00B         	call	_WriteUSART
 13063                           
 13064                           ;main.c: 773: }
 13065  006152  D003               	goto	l571
 13066  006154                     l13863:
 13067                           
 13068                           ; BSR set to: 2
 13069                           ;main.c: 774: else {
 13070                           ;main.c: 775: WriteUSART('.');
 13071  006154  0E2E               	movlw	46
 13072  006156  EC78  F00B         	call	_WriteUSART
 13073  00615A                     l571:
 13074  00615A  A2AC               	btfss	4012,1,c	;volatile
 13075  00615C  D7FE               	goto	l571
 13076                           
 13077                           ;main.c: 778: WriteUSART(' ');
 13078  00615E  0E20               	movlw	32
 13079  006160  EC78  F00B         	call	_WriteUSART
 13080                           
 13081                           ;main.c: 779: printBinary(value);
 13082  006164  0102               	movlb	2	; () banked
 13083  006166  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13084  006168  ECE0  F00D         	call	_printBinary
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;main.c: 780: putsUSART((char *) "\r\n");
 13088  00616C  0E71               	movlw	high (STR_197+50)
 13089  00616E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13090  006170  0EC0               	movlw	low (STR_197+50)
 13091  006172  6F61               	movwf	?_putsUSART& (0+255),b
 13092  006174  EC2D  F00E         	call	_putsUSART	;wreg free
 13093                           
 13094                           ;main.c: 781: }
 13095  006178  D058               	goto	l13897
 13096  00617A                     l547:
 13097                           
 13098                           ;main.c: 782: else {
 13099                           ;main.c: 783: rv = 0;
 13100  00617A  0102               	movlb	2	; () banked
 13101  00617C  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 13102                           
 13103                           ; BSR set to: 2
 13104                           ;main.c: 784: putsUSART((char *) "-ERROR - Unable to read register ");
 13105  00617E  0E77               	movlw	high STR_64
 13106  006180  0100               	movlb	0	; () banked
 13107  006182  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13108  006184  0E06               	movlw	low STR_64
 13109  006186  6F61               	movwf	?_putsUSART& (0+255),b
 13110  006188  EC2D  F00E         	call	_putsUSART	;wreg free
 13111                           
 13112                           ;main.c: 785: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13113  00618C  0100               	movlb	0	; () banked
 13114  00618E  67E4               	tstfsz	_bHex& (0+255),b
 13115  006190  D005               	goto	l13877
 13116                           
 13117                           ; BSR set to: 0
 13118  006192  0E7C               	movlw	high STR_57
 13119  006194  0102               	movlb	2	; () banked
 13120  006196  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 13121  006198  0EEE               	movlw	low STR_57
 13122  00619A  D004               	goto	L10
 13123  00619C                     l13877:
 13124                           
 13125                           ; BSR set to: 0
 13126  00619C  0E7C               	movlw	high STR_56
 13127  00619E  0102               	movlb	2	; () banked
 13128  0061A0  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 13129  0061A2  0E65               	movlw	low STR_56
 13130  0061A4                     L10:
 13131  0061A4  6F9A               	movwf	_doModeVerbose$1152& (0+255),b
 13132                           
 13133                           ; BSR set to: 2
 13134  0061A6  0E01               	movlw	high _wrkbuf
 13135  0061A8  0100               	movlb	0	; () banked
 13136  0061AA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13137  0061AC  0E7B               	movlw	low _wrkbuf
 13138  0061AE  6F76               	movwf	?_sprintf& (0+255),b
 13139  0061B0  C29A  F078         	movff	_doModeVerbose$1152,?_sprintf+2
 13140  0061B4  C29B  F079         	movff	_doModeVerbose$1152+1,?_sprintf+3
 13141  0061B8  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13142  0061BC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13143  0061BE  ECAA  F028         	call	_sprintf	;wreg free
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;main.c: 786: putsUSART(wrkbuf);
 13147  0061C2  0E01               	movlw	high _wrkbuf
 13148  0061C4  0100               	movlb	0	; () banked
 13149  0061C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13150  0061C8  0E7B               	movlw	low _wrkbuf
 13151  0061CA  6F61               	movwf	?_putsUSART& (0+255),b
 13152  0061CC  EC2D  F00E         	call	_putsUSART	;wreg free
 13153  0061D0                     l579:
 13154  0061D0  A2AC               	btfss	4012,1,c	;volatile
 13155  0061D2  D7FE               	goto	l579
 13156                           
 13157                           ;main.c: 788: WriteUSART(':');
 13158  0061D4  0E3A               	movlw	58
 13159  0061D6  EC78  F00B         	call	_WriteUSART
 13160                           
 13161                           ;main.c: 789: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13162  0061DA  0100               	movlb	0	; () banked
 13163  0061DC  67E4               	tstfsz	_bHex& (0+255),b
 13164  0061DE  D005               	goto	l13889
 13165                           
 13166                           ; BSR set to: 0
 13167  0061E0  0E7C               	movlw	high STR_57
 13168  0061E2  0102               	movlb	2	; () banked
 13169  0061E4  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13170  0061E6  0EEE               	movlw	low STR_57
 13171  0061E8  D004               	goto	L11
 13172  0061EA                     l13889:
 13173                           
 13174                           ; BSR set to: 0
 13175  0061EA  0E7C               	movlw	high STR_56
 13176  0061EC  0102               	movlb	2	; () banked
 13177  0061EE  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13178  0061F0  0E65               	movlw	low STR_56
 13179  0061F2                     L11:
 13180  0061F2  6F9C               	movwf	_doModeVerbose$1156& (0+255),b
 13181                           
 13182                           ; BSR set to: 2
 13183  0061F4  0E01               	movlw	high _wrkbuf
 13184  0061F6  0100               	movlb	0	; () banked
 13185  0061F8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13186  0061FA  0E7B               	movlw	low _wrkbuf
 13187  0061FC  6F76               	movwf	?_sprintf& (0+255),b
 13188  0061FE  C29C  F078         	movff	_doModeVerbose$1156,?_sprintf+2
 13189  006202  C29D  F079         	movff	_doModeVerbose$1156+1,?_sprintf+3
 13190  006206  EC27  F036         	call	PL38	;call to abstracted procedure
 13191  00620A  ECAA  F028         	call	_sprintf	;wreg free
 13192                           
 13193                           ; BSR set to: 0
 13194                           ;main.c: 790: putsUSART(wrkbuf);
 13195  00620E  0E01               	movlw	high _wrkbuf
 13196  006210  0100               	movlb	0	; () banked
 13197  006212  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13198  006214  0E7B               	movlw	low _wrkbuf
 13199  006216  6F61               	movwf	?_putsUSART& (0+255),b
 13200  006218  EC2D  F00E         	call	_putsUSART	;wreg free
 13201                           
 13202                           ;main.c: 791: putsUSART((char *) "\r\n");
 13203  00621C  0E71               	movlw	high (STR_197+50)
 13204  00621E  0100               	movlb	0	; () banked
 13205  006220  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13206  006222  0EC0               	movlw	low (STR_197+50)
 13207  006224  6F61               	movwf	?_putsUSART& (0+255),b
 13208  006226  EC2D  F00E         	call	_putsUSART	;wreg free
 13209  00622A                     l13897:
 13210  00622A  0102               	movlb	2	; () banked
 13211  00622C  2BB0               	incf	doModeVerbose@i_1111& (0+255),f,b
 13212  00622E                     l13899:
 13213                           
 13214                           ; BSR set to: 2
 13215  00622E  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13216  006230  5DB0               	subwf	doModeVerbose@i_1111& (0+255),w,b
 13217  006232  E201 D6EE          	bnc	l13817
 13218                           
 13219                           ; BSR set to: 2
 13220                           ;main.c: 792: }
 13221                           ;main.c: 793: }
 13222                           ;main.c: 795: if (rv) {
 13223  006236  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13224  006238  E009               	bz	l13905
 13225                           
 13226                           ; BSR set to: 2
 13227                           ;main.c: 796: putsUSART((char *) "+OK\r\n");
 13228  00623A  0E7C               	movlw	high STR_9
 13229  00623C  0100               	movlb	0	; () banked
 13230  00623E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13231  006240  0E80               	movlw	low STR_9
 13232  006242  6F61               	movwf	?_putsUSART& (0+255),b
 13233  006244  EC2D  F00E         	call	_putsUSART	;wreg free
 13234                           
 13235                           ;main.c: 797: }
 13236  006248  EFB6  F035         	goto	l14203
 13237  00624C                     l13905:
 13238                           
 13239                           ; BSR set to: 2
 13240                           ;main.c: 798: else {
 13241                           ;main.c: 799: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13242  00624C  0E71               	movlw	high STR_71
 13243  00624E  0100               	movlb	0	; () banked
 13244  006250  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13245  006252  0E58               	movlw	low STR_71
 13246  006254  6F61               	movwf	?_putsUSART& (0+255),b
 13247  006256  EC2D  F00E         	call	_putsUSART	;wreg free
 13248  00625A  EFB6  F035         	goto	l14203
 13249  00625E                     l13907:
 13250                           
 13251                           ; BSR set to: 0
 13252                           ;main.c: 805: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13253  00625E  0E01               	movlw	high _cmdbuf
 13254  006260  0100               	movlb	0	; () banked
 13255  006262  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13256  006264  0E2B               	movlw	low _cmdbuf
 13257  006266  6F6D               	movwf	?_stristr& (0+255),b
 13258  006268  0E7C               	movlw	high STR_72
 13259  00626A  6F70               	movwf	(?_stristr+3)& (0+255),b
 13260  00626C  0EAD               	movlw	low STR_72
 13261  00626E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13262  006270  EC92  F010         	call	_stristr	;wreg free
 13263  006274  0E2B               	movlw	low _cmdbuf
 13264  006276  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13265  006278  0E01               	movlw	high _cmdbuf
 13266  00627A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13267  00627C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13268  00627E  E102               	bnz	u18585
 13269  006280  516D               	movf	?_stristr& (0+255),w,b
 13270  006282  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13271  006284                     u18585:
 13272  006284  E001 D0B0          	bnz	l13949
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;main.c: 807: uint8_t nodeid;
 13276                           ;main.c: 808: uint8_t page = 0;
 13277  006288  0102               	movlb	2	; () banked
 13278  00628A  6BA1               	clrf	doModeVerbose@page_1162& (0+255),b
 13279                           
 13280                           ; BSR set to: 2
 13281                           ;main.c: 809: uint8_t reg;
 13282                           ;main.c: 810: uint8_t value;
 13283                           ;main.c: 812: strcpy(cmdbuf, cmdbuf + 5);
 13284  00628C  ECC5  F035         	call	PL2	;call to abstracted procedure
 13285  006290  ECDF  F00B         	call	_strcpy	;wreg free
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;main.c: 813: char *p = strtok(cmdbuf, " ");
 13289  006294  0E01               	movlw	high _cmdbuf
 13290  006296  EC1E  F036         	call	PL32	;call to abstracted procedure
 13291  00629A  EC97  F011         	call	_strtok	;wreg free
 13292  00629E  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13293  0062A2  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;main.c: 814: if ((0) != p) {
 13297  0062A6  0102               	movlb	2	; () banked
 13298  0062A8  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13299  0062AA  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13300  0062AC  E00A               	bz	l13919
 13301                           
 13302                           ; BSR set to: 2
 13303                           ;main.c: 815: nodeid = atoi(p);
 13304  0062AE  C2B4  F066         	movff	doModeVerbose@p_1165,?_atoi
 13305  0062B2  C2B5  F067         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13306  0062B6  ECBA  F019         	call	_atoi	;wreg free
 13307  0062BA  5166               	movf	?_atoi& (0+255),w,b
 13308  0062BC  0102               	movlb	2	; () banked
 13309  0062BE  6F8D               	movwf	doModeVerbose@nodeid_1161& (0+255),b
 13310                           
 13311                           ;main.c: 816: }
 13312  0062C0  D009               	goto	l13923
 13313  0062C2                     l13919:
 13314                           
 13315                           ; BSR set to: 2
 13316                           ;main.c: 817: else {
 13317                           ;main.c: 818: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13318  0062C2  0E79               	movlw	high STR_51
 13319  0062C4  0100               	movlb	0	; () banked
 13320  0062C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13321  0062C8  0E31               	movlw	low STR_51
 13322  0062CA  6F61               	movwf	?_putsUSART& (0+255),b
 13323  0062CC  EC2D  F00E         	call	_putsUSART	;wreg free
 13324  0062D0  EFC4  F035         	goto	l538
 13325  0062D4                     l13923:
 13326                           
 13327                           ; BSR set to: 2
 13328                           ;main.c: 820: }
 13329                           ;main.c: 822: if ( (0) != ( p = strtok((0), " ") ) ) {
 13330  0062D4  EC0C  F036         	call	PL26	;call to abstracted procedure
 13331  0062D8  EC97  F011         	call	_strtok	;wreg free
 13332  0062DC  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13333  0062E0  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13334  0062E4  0102               	movlb	2	; () banked
 13335  0062E6  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13336  0062E8  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13337  0062EA  E034               	bz	l13931
 13338                           
 13339                           ; BSR set to: 2
 13340                           ;main.c: 824: char *preg;
 13341                           ;main.c: 825: if (preg = strchr(p, ':')) {
 13342  0062EC  C2B4  F060         	movff	doModeVerbose@p_1165,?_strchr
 13343  0062F0  C2B5  F061         	movff	doModeVerbose@p_1165+1,?_strchr+1
 13344  0062F4  0100               	movlb	0	; () banked
 13345  0062F6  6B63               	clrf	(?_strchr+3)& (0+255),b
 13346  0062F8  0E3A               	movlw	58
 13347  0062FA  6F62               	movwf	(?_strchr+2)& (0+255),b
 13348  0062FC  EC14  F00F         	call	_strchr	;wreg free
 13349  006300  C060  F286         	movff	?_strchr,doModeVerbose@preg_1169
 13350  006304  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1169+1
 13351  006308  0102               	movlb	2	; () banked
 13352  00630A  5187               	movf	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13353  00630C  1186               	iorwf	doModeVerbose@preg_1169& (0+255),w,b
 13354  00630E  E018               	bz	l13929
 13355                           
 13356                           ; BSR set to: 2
 13357                           ;main.c: 826: page = atoi(p);
 13358  006310  C2B4  F066         	movff	doModeVerbose@p_1165,?_atoi
 13359  006314  C2B5  F067         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13360  006318  ECBA  F019         	call	_atoi	;wreg free
 13361  00631C  5166               	movf	?_atoi& (0+255),w,b
 13362  00631E  0102               	movlb	2	; () banked
 13363  006320  6FA1               	movwf	doModeVerbose@page_1162& (0+255),b
 13364                           
 13365                           ;main.c: 827: reg = atoi(preg + 1);
 13366  006322  2986               	incf	doModeVerbose@preg_1169& (0+255),w,b
 13367  006324  0100               	movlb	0	; () banked
 13368  006326  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13369  006328  0E00               	movlw	0
 13370  00632A  0102               	movlb	2	; () banked
 13371  00632C  2187               	addwfc	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13372  00632E  0100               	movlb	0	; () banked
 13373  006330  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13374  006332  C0C9  F066         	movff	??_doModeVerbose,?_atoi
 13375  006336  C0CA  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13376  00633A  ECBA  F019         	call	_atoi	;wreg free
 13377  00633E  D006               	goto	L12
 13378  006340                     l13929:
 13379                           
 13380                           ; BSR set to: 2
 13381                           ;main.c: 829: else {
 13382                           ;main.c: 830: reg = atoi(p);
 13383  006340  C2B4  F066         	movff	doModeVerbose@p_1165,?_atoi
 13384  006344  C2B5  F067         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13385  006348  ECBA  F019         	call	_atoi	;wreg free
 13386  00634C                     L12:
 13387  00634C  5166               	movf	?_atoi& (0+255),w,b
 13388  00634E  0102               	movlb	2	; () banked
 13389  006350  6FA2               	movwf	doModeVerbose@reg_1163& (0+255),b
 13390  006352  D009               	goto	l13935
 13391  006354                     l13931:
 13392                           
 13393                           ; BSR set to: 2
 13394                           ;main.c: 834: else {
 13395                           ;main.c: 835: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13396  006354  0E77               	movlw	high STR_53
 13397  006356  0100               	movlb	0	; () banked
 13398  006358  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13399  00635A  0EAC               	movlw	low STR_53
 13400  00635C  6F61               	movwf	?_putsUSART& (0+255),b
 13401  00635E  EC2D  F00E         	call	_putsUSART	;wreg free
 13402  006362  EFC4  F035         	goto	l538
 13403  006366                     l13935:
 13404                           
 13405                           ; BSR set to: 2
 13406                           ;main.c: 837: }
 13407                           ;main.c: 840: if ((0) != (p = strtok((0), " "))) {
 13408  006366  EC0C  F036         	call	PL26	;call to abstracted procedure
 13409  00636A  EC97  F011         	call	_strtok	;wreg free
 13410  00636E  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13411  006372  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13412  006376  0102               	movlb	2	; () banked
 13413  006378  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13414  00637A  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13415  00637C  E00A               	bz	l13939
 13416                           
 13417                           ; BSR set to: 2
 13418                           ;main.c: 841: value = atoi(p);
 13419  00637E  C2B4  F066         	movff	doModeVerbose@p_1165,?_atoi
 13420  006382  C2B5  F067         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13421  006386  ECBA  F019         	call	_atoi	;wreg free
 13422  00638A  5166               	movf	?_atoi& (0+255),w,b
 13423  00638C  0102               	movlb	2	; () banked
 13424  00638E  6FAA               	movwf	doModeVerbose@value_1164& (0+255),b
 13425                           
 13426                           ;main.c: 842: }
 13427  006390  D008               	goto	l13943
 13428  006392                     l13939:
 13429                           
 13430                           ; BSR set to: 2
 13431                           ;main.c: 843: else {
 13432                           ;main.c: 844: putsUSART((char *) "-ERROR - Need a value\r\n");
 13433  006392  0E79               	movlw	high STR_78
 13434  006394  0100               	movlb	0	; () banked
 13435  006396  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13436  006398  0E61               	movlw	low STR_78
 13437  00639A  6F61               	movwf	?_putsUSART& (0+255),b
 13438  00639C  EC2D  F00E         	call	_putsUSART	;wreg free
 13439  0063A0  D3F3               	goto	l538
 13440  0063A2                     l13943:
 13441                           
 13442                           ; BSR set to: 2
 13443                           ;main.c: 846: }
 13444                           ;main.c: 848: if (writeRegisterExtended(nodeid,
 13445                           ;main.c: 849: page,
 13446                           ;main.c: 850: reg,
 13447                           ;main.c: 851: rwtimeout,
 13448                           ;main.c: 852: &value)) {
 13449  0063A2  0100               	movlb	0	; () banked
 13450  0063A4  C2A1  F0B5         	movff	doModeVerbose@page_1162,?_writeRegisterExtended
 13451  0063A8  6BB6               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13452  0063AA  C2A2  F0B7         	movff	doModeVerbose@reg_1163,?_writeRegisterExtended+2
 13453  0063AE  C0E8  F0B8         	movff	_rwtimeout,?_writeRegisterExtended+3
 13454  0063B2  6BB9               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13455  0063B4  0E02               	movlw	high doModeVerbose@value_1164
 13456  0063B6  6FBB               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13457  0063B8  0EAA               	movlw	low doModeVerbose@value_1164
 13458  0063BA  6FBA               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13459  0063BC  0102               	movlb	2	; () banked
 13460  0063BE  518D               	movf	doModeVerbose@nodeid_1161& (0+255),w,b
 13461  0063C0  EC6F  F017         	call	_writeRegisterExtended
 13462  0063C4  0900               	iorlw	0
 13463  0063C6  E008               	bz	l13947
 13464                           
 13465                           ;main.c: 853: putsUSART((char *) "+OK - Value written successfully\r\n");
 13466  0063C8  0E76               	movlw	high STR_79
 13467  0063CA  0100               	movlb	0	; () banked
 13468  0063CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13469  0063CE  0EC1               	movlw	low STR_79
 13470  0063D0  6F61               	movwf	?_putsUSART& (0+255),b
 13471  0063D2  EC2D  F00E         	call	_putsUSART	;wreg free
 13472                           
 13473                           ;main.c: 854: }
 13474  0063D6  D3CA               	goto	l14203
 13475  0063D8                     l13947:
 13476                           
 13477                           ;main.c: 855: else {
 13478                           ;main.c: 856: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13479  0063D8  0E77               	movlw	high STR_80
 13480  0063DA  0100               	movlb	0	; () banked
 13481  0063DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13482  0063DE  0E8B               	movlw	low STR_80
 13483  0063E0  6F61               	movwf	?_putsUSART& (0+255),b
 13484  0063E2  EC2D  F00E         	call	_putsUSART	;wreg free
 13485  0063E6  D3C2               	goto	l14203
 13486  0063E8                     l13949:
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;main.c: 862: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13490  0063E8  0E01               	movlw	high _cmdbuf
 13491  0063EA  0100               	movlb	0	; () banked
 13492  0063EC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13493  0063EE  0E2B               	movlw	low _cmdbuf
 13494  0063F0  6F6D               	movwf	?_stristr& (0+255),b
 13495  0063F2  0E7C               	movlw	high STR_81
 13496  0063F4  6F70               	movwf	(?_stristr+3)& (0+255),b
 13497  0063F6  0EBC               	movlw	low STR_81
 13498  0063F8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13499  0063FA  EC92  F010         	call	_stristr	;wreg free
 13500  0063FE  0E2B               	movlw	low _cmdbuf
 13501  006400  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13502  006402  0E01               	movlw	high _cmdbuf
 13503  006404  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13504  006406  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13505  006408  E102               	bnz	u18645
 13506  00640A  516D               	movf	?_stristr& (0+255),w,b
 13507  00640C  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13508  00640E                     u18645:
 13509  00640E  E151               	bnz	l13977
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;main.c: 863: uint8_t nodeid;
 13513                           ;main.c: 865: strcpy(cmdbuf, cmdbuf + 5);
 13514  006410  DBBC               	call	PL2	;call to abstracted procedure
 13515  006412  ECDF  F00B         	call	_strcpy	;wreg free
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;main.c: 866: nodeid = atoi(cmdbuf);
 13519  006416  0E01               	movlw	high _cmdbuf
 13520  006418  0100               	movlb	0	; () banked
 13521  00641A  6F67               	movwf	(?_atoi+1)& (0+255),b
 13522  00641C  0E2B               	movlw	low _cmdbuf
 13523  00641E  6F66               	movwf	?_atoi& (0+255),b
 13524  006420  ECBA  F019         	call	_atoi	;wreg free
 13525  006424  5166               	movf	?_atoi& (0+255),w,b
 13526  006426  0102               	movlb	2	; () banked
 13527  006428  6FAF               	movwf	doModeVerbose@nodeid_1176& (0+255),b
 13528                           
 13529                           ; BSR set to: 2
 13530                           ;main.c: 868: putsUSART((char *) "Info for node id = ");
 13531  00642A  0E7A               	movlw	high STR_82
 13532  00642C  0100               	movlb	0	; () banked
 13533  00642E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13534  006430  0EAB               	movlw	low STR_82
 13535  006432  6F61               	movwf	?_putsUSART& (0+255),b
 13536  006434  EC2D  F00E         	call	_putsUSART	;wreg free
 13537                           
 13538                           ;main.c: 869: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13539  006438  0100               	movlb	0	; () banked
 13540  00643A  67E4               	tstfsz	_bHex& (0+255),b
 13541  00643C  D005               	goto	l13961
 13542                           
 13543                           ; BSR set to: 0
 13544  00643E  0E7C               	movlw	high STR_57
 13545  006440  0102               	movlb	2	; () banked
 13546  006442  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13547  006444  0EEE               	movlw	low STR_57
 13548  006446  D004               	goto	L13
 13549  006448                     l13961:
 13550                           
 13551                           ; BSR set to: 0
 13552  006448  0E7C               	movlw	high STR_56
 13553  00644A  0102               	movlb	2	; () banked
 13554  00644C  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13555  00644E  0E65               	movlw	low STR_56
 13556  006450                     L13:
 13557  006450  6F9E               	movwf	_doModeVerbose$1181& (0+255),b
 13558                           
 13559                           ; BSR set to: 2
 13560  006452  0E01               	movlw	high _wrkbuf
 13561  006454  0100               	movlb	0	; () banked
 13562  006456  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13563  006458  0E7B               	movlw	low _wrkbuf
 13564  00645A  6F76               	movwf	?_sprintf& (0+255),b
 13565  00645C  C29E  F078         	movff	_doModeVerbose$1181,?_sprintf+2
 13566  006460  C29F  F079         	movff	_doModeVerbose$1181+1,?_sprintf+3
 13567  006464  C2AF  F07A         	movff	doModeVerbose@nodeid_1176,?_sprintf+4
 13568  006468  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13569  00646A  ECAA  F028         	call	_sprintf	;wreg free
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;main.c: 870: putsUSART(wrkbuf);
 13573  00646E  0E01               	movlw	high _wrkbuf
 13574  006470  0100               	movlb	0	; () banked
 13575  006472  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13576  006474  0E7B               	movlw	low _wrkbuf
 13577  006476  6F61               	movwf	?_putsUSART& (0+255),b
 13578  006478  EC2D  F00E         	call	_putsUSART	;wreg free
 13579                           
 13580                           ;main.c: 871: putsUSART((char *) "\r\n");
 13581  00647C  0E71               	movlw	high (STR_197+50)
 13582  00647E  0100               	movlb	0	; () banked
 13583  006480  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13584  006482  0EC0               	movlw	low (STR_197+50)
 13585  006484  6F61               	movwf	?_putsUSART& (0+255),b
 13586  006486  EC2D  F00E         	call	_putsUSART	;wreg free
 13587                           
 13588                           ;main.c: 872: printNodeFirmwareVersion(nodeid);
 13589  00648A  0102               	movlb	2	; () banked
 13590  00648C  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13591  00648E  EC36  F016         	call	_printNodeFirmwareVersion
 13592                           
 13593                           ;main.c: 873: printGUID(nodeid);
 13594  006492  0102               	movlb	2	; () banked
 13595  006494  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13596  006496  EC39  F019         	call	_printGUID
 13597                           
 13598                           ;main.c: 874: printMDF(nodeid);
 13599  00649A  0102               	movlb	2	; () banked
 13600  00649C  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13601  00649E  ECE0  F011         	call	_printMDF
 13602                           
 13603                           ;main.c: 875: putsUSART((char *) "+OK\r\n");
 13604  0064A2  0E7C               	movlw	high STR_9
 13605  0064A4  0100               	movlb	0	; () banked
 13606  0064A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13607  0064A8  0E80               	movlw	low STR_9
 13608  0064AA  6F61               	movwf	?_putsUSART& (0+255),b
 13609  0064AC  EC2D  F00E         	call	_putsUSART	;wreg free
 13610                           
 13611                           ;main.c: 876: }
 13612  0064B0  D35D               	goto	l14203
 13613  0064B2                     l13977:
 13614                           
 13615                           ; BSR set to: 0
 13616                           ;main.c: 880: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13617  0064B2  0E01               	movlw	high _cmdbuf
 13618  0064B4  0100               	movlb	0	; () banked
 13619  0064B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13620  0064B8  0E2B               	movlw	low _cmdbuf
 13621  0064BA  6F6D               	movwf	?_stristr& (0+255),b
 13622  0064BC  0E7C               	movlw	high STR_87
 13623  0064BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 13624  0064C0  0E57               	movlw	low STR_87
 13625  0064C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13626  0064C4  EC92  F010         	call	_stristr	;wreg free
 13627  0064C8  0E2B               	movlw	low _cmdbuf
 13628  0064CA  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13629  0064CC  0E01               	movlw	high _cmdbuf
 13630  0064CE  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13631  0064D0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13632  0064D2  E102               	bnz	u18665
 13633  0064D4  516D               	movf	?_stristr& (0+255),w,b
 13634  0064D6  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13635  0064D8                     u18665:
 13636  0064D8  E001 D0D5          	bnz	l14045
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;main.c: 882: uint8_t filterno;
 13640                           ;main.c: 883: uint8_t filter_priority;
 13641                           ;main.c: 884: uint16_t filter_class;
 13642                           ;main.c: 885: uint8_t filter_type;
 13643                           ;main.c: 886: uint8_t filter_nodeid;
 13644                           ;main.c: 888: strcpy(cmdbuf, cmdbuf + 8);
 13645  0064DC  0E01               	movlw	high _cmdbuf
 13646  0064DE  DB6A               	call	PL6	;call to abstracted procedure
 13647  0064E0  ECDF  F00B         	call	_strcpy	;wreg free
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;main.c: 889: char *p = strtok(cmdbuf, ",");
 13651  0064E4  DBA1               	call	PL28	;call to abstracted procedure
 13652  0064E6  EC97  F011         	call	_strtok	;wreg free
 13653  0064EA  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13654  0064EE  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;main.c: 890: if ((0) != p) {
 13658  0064F2  0102               	movlb	2	; () banked
 13659  0064F4  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13660  0064F6  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13661  0064F8  E014               	bz	l13993
 13662                           
 13663                           ; BSR set to: 2
 13664                           ;main.c: 891: filterno = atoi(p);
 13665  0064FA  C2B9  F066         	movff	doModeVerbose@p_1190,?_atoi
 13666  0064FE  C2BA  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13667  006502  ECBA  F019         	call	_atoi	;wreg free
 13668  006506  5166               	movf	?_atoi& (0+255),w,b
 13669  006508  0102               	movlb	2	; () banked
 13670  00650A  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13671                           
 13672                           ; BSR set to: 2
 13673                           ;main.c: 892: if (filterno > 15) {
 13674  00650C  0E0F               	movlw	15
 13675  00650E  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13676  006510  D010               	goto	l13997
 13677                           
 13678                           ; BSR set to: 2
 13679                           ;main.c: 893: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13680  006512  0E6F               	movlw	high STR_89
 13681  006514  0100               	movlb	0	; () banked
 13682  006516  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13683  006518  0E18               	movlw	low STR_89
 13684  00651A  6F61               	movwf	?_putsUSART& (0+255),b
 13685  00651C  EC2D  F00E         	call	_putsUSART	;wreg free
 13686  006520  D333               	goto	l538
 13687  006522                     l13993:
 13688                           
 13689                           ; BSR set to: 2
 13690                           ;main.c: 897: else {
 13691                           ;main.c: 898: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13692  006522  0E74               	movlw	high STR_90
 13693  006524  0100               	movlb	0	; () banked
 13694  006526  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13695  006528  0EFB               	movlw	low STR_90
 13696  00652A  6F61               	movwf	?_putsUSART& (0+255),b
 13697  00652C  EC2D  F00E         	call	_putsUSART	;wreg free
 13698  006530  D32B               	goto	l538
 13699  006532                     l13997:
 13700                           
 13701                           ; BSR set to: 2
 13702                           ;main.c: 900: }
 13703                           ;main.c: 903: p = strtok((0), ",");
 13704  006532  0100               	movlb	0	; () banked
 13705  006534  DB38               	call	PL4	;call to abstracted procedure
 13706  006536  EC97  F011         	call	_strtok	;wreg free
 13707  00653A  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13708  00653E  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;main.c: 904: if ((0) != p) {
 13712  006542  0102               	movlb	2	; () banked
 13713  006544  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13714  006546  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13715  006548  E00A               	bz	l14003
 13716                           
 13717                           ; BSR set to: 2
 13718                           ;main.c: 905: filter_priority = atoi(p);
 13719  00654A  C2B9  F066         	movff	doModeVerbose@p_1190,?_atoi
 13720  00654E  C2BA  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13721  006552  ECBA  F019         	call	_atoi	;wreg free
 13722  006556  5166               	movf	?_atoi& (0+255),w,b
 13723  006558  0102               	movlb	2	; () banked
 13724  00655A  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13725                           
 13726                           ;main.c: 906: }
 13727  00655C  D008               	goto	l14007
 13728  00655E                     l14003:
 13729                           
 13730                           ; BSR set to: 2
 13731                           ;main.c: 907: else {
 13732                           ;main.c: 908: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13733  00655E  0E74               	movlw	high STR_92
 13734  006560  0100               	movlb	0	; () banked
 13735  006562  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13736  006564  0E30               	movlw	low STR_92
 13737  006566  6F61               	movwf	?_putsUSART& (0+255),b
 13738  006568  EC2D  F00E         	call	_putsUSART	;wreg free
 13739  00656C  D30D               	goto	l538
 13740  00656E                     l14007:
 13741                           
 13742                           ; BSR set to: 2
 13743                           ;main.c: 910: }
 13744                           ;main.c: 913: p = strtok((0), ",");
 13745  00656E  0100               	movlb	0	; () banked
 13746  006570  DB1A               	call	PL4	;call to abstracted procedure
 13747  006572  EC97  F011         	call	_strtok	;wreg free
 13748  006576  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13749  00657A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13750                           
 13751                           ; BSR set to: 0
 13752                           ;main.c: 914: if ((0) != p) {
 13753  00657E  0102               	movlb	2	; () banked
 13754  006580  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13755  006582  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13756  006584  E00B               	bz	l14013
 13757                           
 13758                           ; BSR set to: 2
 13759                           ;main.c: 915: filter_class = atoi(p);
 13760  006586  C2B9  F066         	movff	doModeVerbose@p_1190,?_atoi
 13761  00658A  C2BA  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13762  00658E  ECBA  F019         	call	_atoi	;wreg free
 13763  006592  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13764  006596  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13765                           
 13766                           ;main.c: 916: }
 13767  00659A  D008               	goto	l14017
 13768  00659C                     l14013:
 13769                           
 13770                           ; BSR set to: 2
 13771                           ;main.c: 917: else {
 13772                           ;main.c: 918: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13773  00659C  0E75               	movlw	high STR_94
 13774  00659E  0100               	movlb	0	; () banked
 13775  0065A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13776  0065A2  0E97               	movlw	low STR_94
 13777  0065A4  6F61               	movwf	?_putsUSART& (0+255),b
 13778  0065A6  EC2D  F00E         	call	_putsUSART	;wreg free
 13779  0065AA  D2EE               	goto	l538
 13780  0065AC                     l14017:
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;main.c: 920: }
 13784                           ;main.c: 923: p = strtok((0), ",");
 13785  0065AC  DAFC               	call	PL4	;call to abstracted procedure
 13786  0065AE  EC97  F011         	call	_strtok	;wreg free
 13787  0065B2  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13788  0065B6  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;main.c: 924: if ((0) != p) {
 13792  0065BA  0102               	movlb	2	; () banked
 13793  0065BC  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13794  0065BE  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13795  0065C0  E00A               	bz	l14023
 13796                           
 13797                           ; BSR set to: 2
 13798                           ;main.c: 925: filter_type = atoi(p);
 13799  0065C2  C2B9  F066         	movff	doModeVerbose@p_1190,?_atoi
 13800  0065C6  C2BA  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13801  0065CA  ECBA  F019         	call	_atoi	;wreg free
 13802  0065CE  5166               	movf	?_atoi& (0+255),w,b
 13803  0065D0  0102               	movlb	2	; () banked
 13804  0065D2  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13805                           
 13806                           ;main.c: 926: }
 13807  0065D4  D008               	goto	l14027
 13808  0065D6                     l14023:
 13809                           
 13810                           ; BSR set to: 2
 13811                           ;main.c: 927: else {
 13812                           ;main.c: 928: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13813  0065D6  0E75               	movlw	high STR_96
 13814  0065D8  0100               	movlb	0	; () banked
 13815  0065DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13816  0065DC  0EE5               	movlw	low STR_96
 13817  0065DE  6F61               	movwf	?_putsUSART& (0+255),b
 13818  0065E0  EC2D  F00E         	call	_putsUSART	;wreg free
 13819  0065E4  D2D1               	goto	l538
 13820  0065E6                     l14027:
 13821                           
 13822                           ; BSR set to: 2
 13823                           ;main.c: 930: }
 13824                           ;main.c: 933: p = strtok((0), ",");
 13825  0065E6  0100               	movlb	0	; () banked
 13826  0065E8  DADE               	call	PL4	;call to abstracted procedure
 13827  0065EA  EC97  F011         	call	_strtok	;wreg free
 13828  0065EE  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13829  0065F2  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;main.c: 934: if ((0) != p) {
 13833  0065F6  0102               	movlb	2	; () banked
 13834  0065F8  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13835  0065FA  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13836  0065FC  E00A               	bz	l14033
 13837                           
 13838                           ; BSR set to: 2
 13839                           ;main.c: 935: filter_nodeid = atoi(p);
 13840  0065FE  C2B9  F066         	movff	doModeVerbose@p_1190,?_atoi
 13841  006602  C2BA  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13842  006606  ECBA  F019         	call	_atoi	;wreg free
 13843  00660A  5166               	movf	?_atoi& (0+255),w,b
 13844  00660C  0102               	movlb	2	; () banked
 13845  00660E  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13846                           
 13847                           ;main.c: 936: }
 13848  006610  D008               	goto	l14037
 13849  006612                     l14033:
 13850                           
 13851                           ; BSR set to: 2
 13852                           ;main.c: 937: else {
 13853                           ;main.c: 938: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13854  006612  0E74               	movlw	high STR_98
 13855  006614  0100               	movlb	0	; () banked
 13856  006616  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13857  006618  0E5A               	movlw	low STR_98
 13858  00661A  6F61               	movwf	?_putsUSART& (0+255),b
 13859  00661C  EC2D  F00E         	call	_putsUSART	;wreg free
 13860  006620  D2B3               	goto	l538
 13861  006622                     l14037:
 13862                           
 13863                           ; BSR set to: 2
 13864                           ;main.c: 940: }
 13865                           ;main.c: 943: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13866  006622  0E80               	movlw	128
 13867  006624  EC8D  F00B         	call	_ECANSetOperationMode
 13868                           
 13869                           ; BSR set to: 0
 13870                           ;main.c: 945: uint32_t id = ((uint32_t) filter_priority << 26) |
 13871                           ;main.c: 946: ((uint32_t) filter_class << 16) |
 13872                           ;main.c: 947: ((uint32_t) filter_type << 8) |
 13873                           ;main.c: 948: filter_nodeid;
 13874  006628  C28F  F0C9         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13875  00662C  DB1D               	call	PL40	;call to abstracted procedure
 13876  00662E  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13877  006630  0100               	movlb	0	; () banked
 13878  006632  6FCD               	movwf	(??_doModeVerbose+4)& (0+255),b
 13879  006634  0102               	movlb	2	; () banked
 13880  006636  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13881  006638  DB30               	call	PL54	;call to abstracted procedure
 13882  00663A  C28E  F0D1         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13883  00663E  DAC7               	call	PL8	;call to abstracted procedure
 13884  006640  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13885  006642  0100               	movlb	0	; () banked
 13886  006644  11D9               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13887  006646  0102               	movlb	2	; () banked
 13888  006648  6F80               	movwf	doModeVerbose@id& (0+255),b
 13889  00664A  0100               	movlb	0	; () banked
 13890  00664C  51DA               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13891  00664E  0102               	movlb	2	; () banked
 13892  006650  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13893  006652  0100               	movlb	0	; () banked
 13894  006654  51DB               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13895  006656  0102               	movlb	2	; () banked
 13896  006658  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13897  00665A  0100               	movlb	0	; () banked
 13898  00665C  51DC               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13899  00665E  0102               	movlb	2	; () banked
 13900  006660  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13901                           
 13902                           ; BSR set to: 2
 13903                           ;main.c: 949: setFilter(filterno, id);
 13904  006662  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13905  006666  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13906  00666A  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13907  00666E  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13908  006672  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13909  006674  EC28  F022         	call	_setFilter
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;main.c: 950: putsUSART((char *) "+OK\r\n");
 13913  006678  0E7C               	movlw	high STR_9
 13914  00667A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13915  00667C  0E80               	movlw	low STR_9
 13916  00667E  6F61               	movwf	?_putsUSART& (0+255),b
 13917  006680  EC2D  F00E         	call	_putsUSART	;wreg free
 13918                           
 13919                           ;main.c: 951: }
 13920  006684  D273               	goto	l14203
 13921  006686                     l14045:
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;main.c: 955: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13925  006686  0E01               	movlw	high _cmdbuf
 13926  006688  0100               	movlb	0	; () banked
 13927  00668A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13928  00668C  0E2B               	movlw	low _cmdbuf
 13929  00668E  6F6D               	movwf	?_stristr& (0+255),b
 13930  006690  0E7C               	movlw	high STR_100
 13931  006692  6F70               	movwf	(?_stristr+3)& (0+255),b
 13932  006694  0EB2               	movlw	low STR_100
 13933  006696  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13934  006698  EC92  F010         	call	_stristr	;wreg free
 13935  00669C  0E2B               	movlw	low _cmdbuf
 13936  00669E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13937  0066A0  0E01               	movlw	high _cmdbuf
 13938  0066A2  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13939  0066A4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13940  0066A6  E102               	bnz	u18745
 13941  0066A8  516D               	movf	?_stristr& (0+255),w,b
 13942  0066AA  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13943  0066AC                     u18745:
 13944  0066AC  E001 D0DC          	bnz	l14117
 13945                           
 13946                           ; BSR set to: 0
 13947                           ;main.c: 957: uint8_t maskno;
 13948                           ;main.c: 958: uint8_t mask_priority;
 13949                           ;main.c: 959: uint16_t mask_class;
 13950                           ;main.c: 960: uint8_t mask_type;
 13951                           ;main.c: 961: uint8_t mask_nodeid;
 13952                           ;main.c: 963: strcpy(cmdbuf, cmdbuf + 8);
 13953  0066B0  0E01               	movlw	high _cmdbuf
 13954  0066B2  DA80               	call	PL6	;call to abstracted procedure
 13955  0066B4  ECDF  F00B         	call	_strcpy	;wreg free
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;main.c: 964: char *p = strtok(cmdbuf, ",");
 13959  0066B8  DAB7               	call	PL28	;call to abstracted procedure
 13960  0066BA  EC97  F011         	call	_strtok	;wreg free
 13961  0066BE  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13962  0066C2  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;main.c: 965: if ((0) != p) {
 13966  0066C6  0102               	movlb	2	; () banked
 13967  0066C8  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13968  0066CA  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13969  0066CC  E014               	bz	l14061
 13970                           
 13971                           ; BSR set to: 2
 13972                           ;main.c: 966: maskno = atoi(p);
 13973  0066CE  C2BB  F066         	movff	doModeVerbose@p_1210,?_atoi
 13974  0066D2  C2BC  F067         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13975  0066D6  ECBA  F019         	call	_atoi	;wreg free
 13976  0066DA  5166               	movf	?_atoi& (0+255),w,b
 13977  0066DC  0102               	movlb	2	; () banked
 13978  0066DE  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13979                           
 13980                           ; BSR set to: 2
 13981                           ;main.c: 967: if (maskno > 1) {
 13982  0066E0  0E01               	movlw	1
 13983  0066E2  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13984  0066E4  D010               	goto	l14065
 13985                           
 13986                           ; BSR set to: 2
 13987                           ;main.c: 968: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13988  0066E6  0E72               	movlw	high STR_102
 13989  0066E8  0100               	movlb	0	; () banked
 13990  0066EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13991  0066EC  0E2A               	movlw	low STR_102
 13992  0066EE  6F61               	movwf	?_putsUSART& (0+255),b
 13993  0066F0  EC2D  F00E         	call	_putsUSART	;wreg free
 13994  0066F4  D249               	goto	l538
 13995  0066F6                     l14061:
 13996                           
 13997                           ; BSR set to: 2
 13998                           ;main.c: 972: else {
 13999                           ;main.c: 973: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14000  0066F6  0E76               	movlw	high STR_103
 14001  0066F8  0100               	movlb	0	; () banked
 14002  0066FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14003  0066FC  0E0B               	movlw	low STR_103
 14004  0066FE  6F61               	movwf	?_putsUSART& (0+255),b
 14005  006700  EC2D  F00E         	call	_putsUSART	;wreg free
 14006  006704  D241               	goto	l538
 14007  006706                     l14065:
 14008                           
 14009                           ; BSR set to: 2
 14010                           ;main.c: 975: }
 14011                           ;main.c: 978: p = strtok((0), ",");
 14012  006706  0100               	movlb	0	; () banked
 14013  006708  DA4E               	call	PL4	;call to abstracted procedure
 14014  00670A  EC97  F011         	call	_strtok	;wreg free
 14015  00670E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14016  006712  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14017                           
 14018                           ; BSR set to: 0
 14019                           ;main.c: 979: if ((0) != p) {
 14020  006716  0102               	movlb	2	; () banked
 14021  006718  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14022  00671A  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14023  00671C  E00A               	bz	l14071
 14024                           
 14025                           ; BSR set to: 2
 14026                           ;main.c: 980: mask_priority = atoi(p);
 14027  00671E  C2BB  F066         	movff	doModeVerbose@p_1210,?_atoi
 14028  006722  C2BC  F067         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14029  006726  ECBA  F019         	call	_atoi	;wreg free
 14030  00672A  5166               	movf	?_atoi& (0+255),w,b
 14031  00672C  0102               	movlb	2	; () banked
 14032  00672E  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 14033                           
 14034                           ;main.c: 981: }
 14035  006730  D008               	goto	l14075
 14036  006732                     l14071:
 14037                           
 14038                           ; BSR set to: 2
 14039                           ;main.c: 982: else {
 14040                           ;main.c: 983: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14041  006732  0E74               	movlw	high STR_105
 14042  006734  0100               	movlb	0	; () banked
 14043  006736  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14044  006738  0EAB               	movlw	low STR_105
 14045  00673A  6F61               	movwf	?_putsUSART& (0+255),b
 14046  00673C  EC2D  F00E         	call	_putsUSART	;wreg free
 14047  006740  D223               	goto	l538
 14048  006742                     l14075:
 14049                           
 14050                           ; BSR set to: 2
 14051                           ;main.c: 985: }
 14052                           ;main.c: 988: p = strtok((0), ",");
 14053  006742  0100               	movlb	0	; () banked
 14054  006744  DA30               	call	PL4	;call to abstracted procedure
 14055  006746  EC97  F011         	call	_strtok	;wreg free
 14056  00674A  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14057  00674E  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14058                           
 14059                           ; BSR set to: 0
 14060                           ;main.c: 989: if ((0) != p) {
 14061  006752  0102               	movlb	2	; () banked
 14062  006754  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14063  006756  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14064  006758  E00B               	bz	l14081
 14065                           
 14066                           ; BSR set to: 2
 14067                           ;main.c: 990: mask_class = atoi(p);
 14068  00675A  C2BB  F066         	movff	doModeVerbose@p_1210,?_atoi
 14069  00675E  C2BC  F067         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14070  006762  ECBA  F019         	call	_atoi	;wreg free
 14071  006766  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14072  00676A  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14073                           
 14074                           ;main.c: 991: }
 14075  00676E  D008               	goto	l14085
 14076  006770                     l14081:
 14077                           
 14078                           ; BSR set to: 2
 14079                           ;main.c: 992: else {
 14080                           ;main.c: 993: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14081  006770  0E76               	movlw	high STR_107
 14082  006772  0100               	movlb	0	; () banked
 14083  006774  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14084  006776  0E55               	movlw	low STR_107
 14085  006778  6F61               	movwf	?_putsUSART& (0+255),b
 14086  00677A  EC2D  F00E         	call	_putsUSART	;wreg free
 14087  00677E  D204               	goto	l538
 14088  006780                     l14085:
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;main.c: 995: }
 14092                           ;main.c: 998: p = strtok((0), ",");
 14093  006780  DA12               	call	PL4	;call to abstracted procedure
 14094  006782  EC97  F011         	call	_strtok	;wreg free
 14095  006786  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14096  00678A  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14097                           
 14098                           ; BSR set to: 0
 14099                           ;main.c: 999: if ((0) != p) {
 14100  00678E  0102               	movlb	2	; () banked
 14101  006790  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14102  006792  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14103  006794  E00A               	bz	l14091
 14104                           
 14105                           ; BSR set to: 2
 14106                           ;main.c: 1000: mask_type = atoi(p);
 14107  006796  C2BB  F066         	movff	doModeVerbose@p_1210,?_atoi
 14108  00679A  C2BC  F067         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14109  00679E  ECBA  F019         	call	_atoi	;wreg free
 14110  0067A2  5166               	movf	?_atoi& (0+255),w,b
 14111  0067A4  0102               	movlb	2	; () banked
 14112  0067A6  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 14113                           
 14114                           ;main.c: 1001: }
 14115  0067A8  D008               	goto	l14095
 14116  0067AA                     l14091:
 14117                           
 14118                           ; BSR set to: 2
 14119                           ;main.c: 1002: else {
 14120                           ;main.c: 1003: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14121  0067AA  0E76               	movlw	high STR_109
 14122  0067AC  0100               	movlb	0	; () banked
 14123  0067AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14124  0067B0  0E7A               	movlw	low STR_109
 14125  0067B2  6F61               	movwf	?_putsUSART& (0+255),b
 14126  0067B4  EC2D  F00E         	call	_putsUSART	;wreg free
 14127  0067B8  D1E7               	goto	l538
 14128  0067BA                     l14095:
 14129                           
 14130                           ; BSR set to: 2
 14131                           ;main.c: 1005: }
 14132                           ;main.c: 1008: p = strtok((0), ",");
 14133  0067BA  0100               	movlb	0	; () banked
 14134  0067BC  D9F4               	call	PL4	;call to abstracted procedure
 14135  0067BE  EC97  F011         	call	_strtok	;wreg free
 14136  0067C2  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14137  0067C6  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14138                           
 14139                           ; BSR set to: 0
 14140                           ;main.c: 1009: if ((0) != p) {
 14141  0067CA  0102               	movlb	2	; () banked
 14142  0067CC  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14143  0067CE  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14144  0067D0  E00A               	bz	l14101
 14145                           
 14146                           ; BSR set to: 2
 14147                           ;main.c: 1010: mask_nodeid = atoi(p);
 14148  0067D2  C2BB  F066         	movff	doModeVerbose@p_1210,?_atoi
 14149  0067D6  C2BC  F067         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14150  0067DA  ECBA  F019         	call	_atoi	;wreg free
 14151  0067DE  5166               	movf	?_atoi& (0+255),w,b
 14152  0067E0  0102               	movlb	2	; () banked
 14153  0067E2  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14154                           
 14155                           ;main.c: 1011: }
 14156  0067E4  D008               	goto	l14105
 14157  0067E6                     l14101:
 14158                           
 14159                           ; BSR set to: 2
 14160                           ;main.c: 1012: else {
 14161                           ;main.c: 1013: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14162  0067E6  0E75               	movlw	high STR_111
 14163  0067E8  0100               	movlb	0	; () banked
 14164  0067EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14165  0067EC  0E70               	movlw	low STR_111
 14166  0067EE  6F61               	movwf	?_putsUSART& (0+255),b
 14167  0067F0  EC2D  F00E         	call	_putsUSART	;wreg free
 14168  0067F4  D1C9               	goto	l538
 14169  0067F6                     l14105:
 14170                           
 14171                           ; BSR set to: 2
 14172                           ;main.c: 1015: }
 14173                           ;main.c: 1017: uint32_t id = ((uint32_t) mask_priority << 26) |
 14174                           ;main.c: 1018: ((uint32_t) mask_class << 16) |
 14175                           ;main.c: 1019: ((uint32_t) mask_type << 8) |
 14176                           ;main.c: 1020: mask_nodeid;
 14177  0067F6  C292  F0C9         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14178  0067FA  DA36               	call	PL40	;call to abstracted procedure
 14179  0067FC  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14180  0067FE  0100               	movlb	0	; () banked
 14181  006800  6FCD               	movwf	(??_doModeVerbose+4)& (0+255),b
 14182  006802  0102               	movlb	2	; () banked
 14183  006804  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14184  006806  DA49               	call	PL54	;call to abstracted procedure
 14185  006808  C291  F0D1         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14186  00680C  D9E0               	call	PL8	;call to abstracted procedure
 14187  00680E  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14188  006810  0100               	movlb	0	; () banked
 14189  006812  11D9               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14190  006814  0102               	movlb	2	; () banked
 14191  006816  6FA3               	movwf	doModeVerbose@id_1222& (0+255),b
 14192  006818  0100               	movlb	0	; () banked
 14193  00681A  51DA               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14194  00681C  0102               	movlb	2	; () banked
 14195  00681E  6FA4               	movwf	(doModeVerbose@id_1222+1)& (0+255),b
 14196  006820  0100               	movlb	0	; () banked
 14197  006822  51DB               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14198  006824  0102               	movlb	2	; () banked
 14199  006826  6FA5               	movwf	(doModeVerbose@id_1222+2)& (0+255),b
 14200  006828  0100               	movlb	0	; () banked
 14201  00682A  51DC               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14202  00682C  0102               	movlb	2	; () banked
 14203  00682E  6FA6               	movwf	(doModeVerbose@id_1222+3)& (0+255),b
 14204                           
 14205                           ; BSR set to: 2
 14206                           ;main.c: 1023: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14207  006830  0E80               	movlw	128
 14208  006832  EC8D  F00B         	call	_ECANSetOperationMode
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;main.c: 1025: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14212                           ;main.c: 1026: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14213  006836  0102               	movlb	2	; () banked
 14214  006838  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14215  00683A  E008               	bz	l14113
 14216                           
 14217                           ; BSR set to: 2
 14218  00683C  0E0F               	movlw	15	;volatile
 14219  00683E  0100               	movlb	0	; () banked
 14220  006840  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14221  006842  0E18               	movlw	24	;volatile
 14222  006844  DA1E               	call	PL50	;call to abstracted procedure
 14223  006846  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 14224  00684A  D007               	goto	l14115
 14225  00684C                     l14113:
 14226                           
 14227                           ; BSR set to: 2
 14228  00684C  0E0F               	movlw	15	;volatile
 14229  00684E  0100               	movlb	0	; () banked
 14230  006850  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14231  006852  0E1C               	movlw	28	;volatile
 14232  006854  DA16               	call	PL50	;call to abstracted procedure
 14233  006856  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 14234  00685A                     l14115:
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;main.c: 1027: putsUSART((char *) "+OK\r\n");
 14238  00685A  0E7C               	movlw	high STR_9
 14239  00685C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14240  00685E  0E80               	movlw	low STR_9
 14241  006860  6F61               	movwf	?_putsUSART& (0+255),b
 14242  006862  EC2D  F00E         	call	_putsUSART	;wreg free
 14243                           
 14244                           ;main.c: 1028: }
 14245  006866  D182               	goto	l14203
 14246  006868                     l14117:
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;main.c: 1035: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14250  006868  0E01               	movlw	high _cmdbuf
 14251  00686A  0100               	movlb	0	; () banked
 14252  00686C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14253  00686E  0E2B               	movlw	low _cmdbuf
 14254  006870  6F6D               	movwf	?_stristr& (0+255),b
 14255  006872  0E7C               	movlw	high STR_113
 14256  006874  6F70               	movwf	(?_stristr+3)& (0+255),b
 14257  006876  0E9E               	movlw	low STR_113
 14258  006878  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14259  00687A  EC92  F010         	call	_stristr	;wreg free
 14260  00687E  0E2B               	movlw	low _cmdbuf
 14261  006880  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14262  006882  0E01               	movlw	high _cmdbuf
 14263  006884  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14264  006886  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14265  006888  E102               	bnz	u18835
 14266  00688A  516D               	movf	?_stristr& (0+255),w,b
 14267  00688C  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14268  00688E                     u18835:
 14269  00688E  E001 D15A          	bnz	l14197
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;main.c: 1038: strcpy(cmdbuf, cmdbuf + 4);
 14273  006892  0E01               	movlw	high _cmdbuf
 14274  006894  0100               	movlb	0	; () banked
 14275  006896  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14276  006898  0E2B               	movlw	low _cmdbuf
 14277  00689A  6F60               	movwf	?_strcpy& (0+255),b
 14278  00689C  0E2F               	movlw	low (_cmdbuf+4)
 14279  00689E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14280  0068A0  0E01               	movlw	high (_cmdbuf+4)
 14281  0068A2  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14282  0068A4  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14283  0068A8  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14284  0068AC  ECDF  F00B         	call	_strcpy	;wreg free
 14285                           
 14286                           ; BSR set to: 0
 14287                           ;main.c: 1041: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14288  0068B0  0E01               	movlw	high _cmdbuf
 14289  0068B2  0100               	movlb	0	; () banked
 14290  0068B4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14291  0068B6  0E2B               	movlw	low _cmdbuf
 14292  0068B8  6F6D               	movwf	?_stristr& (0+255),b
 14293  0068BA  0E7C               	movlw	high STR_114
 14294  0068BC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14295  0068BE  0EDD               	movlw	low STR_114
 14296  0068C0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14297  0068C2  EC92  F010         	call	_stristr	;wreg free
 14298  0068C6  0E2B               	movlw	low _cmdbuf
 14299  0068C8  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14300  0068CA  0E01               	movlw	high _cmdbuf
 14301  0068CC  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14302  0068CE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14303  0068D0  E102               	bnz	u18845
 14304  0068D2  516D               	movf	?_stristr& (0+255),w,b
 14305  0068D4  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14306  0068D6                     u18845:
 14307  0068D6  E114               	bnz	l14129
 14308                           
 14309                           ; BSR set to: 0
 14310                           ;main.c: 1042: bHex = 1;
 14311  0068D8  0E01               	movlw	1
 14312  0068DA  6FE4               	movwf	_bHex& (0+255),b
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;main.c: 1043: (Busy_eep(), Write_b_eep(0x06,1));
 14316  0068DC  EC56  F00B         	call	_Busy_eep	;wreg free
 14317  0068E0  0100               	movlb	0	; () banked
 14318  0068E2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14319  0068E4  0E06               	movlw	6
 14320  0068E6  6F60               	movwf	?_Write_b_eep& (0+255),b
 14321  0068E8  0E01               	movlw	1
 14322  0068EA  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14323  0068EC  EC26  F00C         	call	_Write_b_eep	;wreg free
 14324                           
 14325                           ;main.c: 1044: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14326  0068F0  0E74               	movlw	high STR_115
 14327  0068F2  0100               	movlb	0	; () banked
 14328  0068F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14329  0068F6  0E04               	movlw	low STR_115
 14330  0068F8  6F61               	movwf	?_putsUSART& (0+255),b
 14331  0068FA  EC2D  F00E         	call	_putsUSART	;wreg free
 14332                           
 14333                           ;main.c: 1045: }
 14334  0068FE  D136               	goto	l14203
 14335  006900                     l14129:
 14336                           
 14337                           ; BSR set to: 0
 14338                           ;main.c: 1047: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14339  006900  0E01               	movlw	high _cmdbuf
 14340  006902  0100               	movlb	0	; () banked
 14341  006904  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14342  006906  0E2B               	movlw	low _cmdbuf
 14343  006908  6F6D               	movwf	?_stristr& (0+255),b
 14344  00690A  0E7C               	movlw	high STR_116
 14345  00690C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14346  00690E  0E06               	movlw	low STR_116
 14347  006910  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14348  006912  EC92  F010         	call	_stristr	;wreg free
 14349  006916  0E2B               	movlw	low _cmdbuf
 14350  006918  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14351  00691A  0E01               	movlw	high _cmdbuf
 14352  00691C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14353  00691E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14354  006920  E102               	bnz	u18855
 14355  006922  516D               	movf	?_stristr& (0+255),w,b
 14356  006924  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14357  006926                     u18855:
 14358  006926  E113               	bnz	l14139
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;main.c: 1048: bHex = 0;
 14362  006928  6BE4               	clrf	_bHex& (0+255),b
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;main.c: 1049: (Busy_eep(), Write_b_eep(0x06,0));
 14366  00692A  EC56  F00B         	call	_Busy_eep	;wreg free
 14367  00692E  0100               	movlb	0	; () banked
 14368  006930  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14369  006932  0E06               	movlw	6
 14370  006934  6F60               	movwf	?_Write_b_eep& (0+255),b
 14371  006936  0E00               	movlw	0
 14372  006938  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14373  00693A  EC26  F00C         	call	_Write_b_eep	;wreg free
 14374                           
 14375                           ;main.c: 1050: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14376  00693E  0E74               	movlw	high STR_117
 14377  006940  0100               	movlb	0	; () banked
 14378  006942  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14379  006944  0ED3               	movlw	low STR_117
 14380  006946  6F61               	movwf	?_putsUSART& (0+255),b
 14381  006948  EC2D  F00E         	call	_putsUSART	;wreg free
 14382                           
 14383                           ;main.c: 1051: }
 14384  00694C  D10F               	goto	l14203
 14385  00694E                     l14139:
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14389  00694E  0E01               	movlw	high _cmdbuf
 14390  006950  0100               	movlb	0	; () banked
 14391  006952  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14392  006954  0E2B               	movlw	low _cmdbuf
 14393  006956  6F6D               	movwf	?_stristr& (0+255),b
 14394  006958  0E7B               	movlw	high STR_118
 14395  00695A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14396  00695C  0E87               	movlw	low STR_118
 14397  00695E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14398  006960  EC92  F010         	call	_stristr	;wreg free
 14399  006964  516E               	movf	(?_stristr+1)& (0+255),w,b
 14400  006966  116D               	iorwf	?_stristr& (0+255),w,b
 14401  006968  E02E               	bz	l14153
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;main.c: 1053: strcpy(cmdbuf, cmdbuf + 10);
 14405  00696A  0E01               	movlw	high _cmdbuf
 14406  00696C  0100               	movlb	0	; () banked
 14407  00696E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14408  006970  0E2B               	movlw	low _cmdbuf
 14409  006972  6F60               	movwf	?_strcpy& (0+255),b
 14410  006974  0E35               	movlw	low (_cmdbuf+10)
 14411  006976  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14412  006978  0E01               	movlw	high (_cmdbuf+10)
 14413  00697A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14414  00697C  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14415  006980  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14416  006984  ECDF  F00B         	call	_strcpy	;wreg free
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;main.c: 1054: rwtimeout = atoi(cmdbuf);
 14420  006988  0E01               	movlw	high _cmdbuf
 14421  00698A  0100               	movlb	0	; () banked
 14422  00698C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14423  00698E  0E2B               	movlw	low _cmdbuf
 14424  006990  6F66               	movwf	?_atoi& (0+255),b
 14425  006992  ECBA  F019         	call	_atoi	;wreg free
 14426  006996  5166               	movf	?_atoi& (0+255),w,b
 14427  006998  6FE8               	movwf	_rwtimeout& (0+255),b
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;main.c: 1055: if (rwtimeout < 10u) {
 14431  00699A  0E0A               	movlw	10
 14432  00699C  61E8               	cpfslt	_rwtimeout& (0+255),b
 14433  00699E  D001               	goto	l14149
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;main.c: 1056: rwtimeout = 10u;
 14437  0069A0  6FE8               	movwf	_rwtimeout& (0+255),b
 14438  0069A2                     l14149:
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;main.c: 1057: }
 14442                           ;main.c: 1058: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14443  0069A2  EC56  F00B         	call	_Busy_eep	;wreg free
 14444  0069A6  0100               	movlb	0	; () banked
 14445  0069A8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14446  0069AA  0E09               	movlw	9
 14447  0069AC  6F60               	movwf	?_Write_b_eep& (0+255),b
 14448  0069AE  C0E8  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14449  0069B2  EC26  F00C         	call	_Write_b_eep	;wreg free
 14450                           
 14451                           ;main.c: 1059: putsUSART((char *) "+OK\r\n");
 14452  0069B6  0E7C               	movlw	high STR_9
 14453  0069B8  0100               	movlb	0	; () banked
 14454  0069BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14455  0069BC  0E80               	movlw	low STR_9
 14456  0069BE  6F61               	movwf	?_putsUSART& (0+255),b
 14457  0069C0  EC2D  F00E         	call	_putsUSART	;wreg free
 14458                           
 14459                           ;main.c: 1060: }
 14460  0069C4  D0D3               	goto	l14203
 14461  0069C6                     l14153:
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;main.c: 1061: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14465  0069C6  0E01               	movlw	high _cmdbuf
 14466  0069C8  0100               	movlb	0	; () banked
 14467  0069CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14468  0069CC  0E2B               	movlw	low _cmdbuf
 14469  0069CE  6F6D               	movwf	?_stristr& (0+255),b
 14470  0069D0  0E7B               	movlw	high STR_120
 14471  0069D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14472  0069D4  0EBB               	movlw	low STR_120
 14473  0069D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14474  0069D8  EC92  F010         	call	_stristr	;wreg free
 14475  0069DC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14476  0069DE  116D               	iorwf	?_stristr& (0+255),w,b
 14477  0069E0  E005               	bz	l14157
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;main.c: 1062: strcpy(cmdbuf, cmdbuf + 8);
 14481  0069E2  0E01               	movlw	high _cmdbuf
 14482  0069E4  D8E7               	call	PL6	;call to abstracted procedure
 14483  0069E6  ECDF  F00B         	call	_strcpy	;wreg free
 14484                           
 14485                           ;main.c: 1063: }
 14486  0069EA  D0C0               	goto	l14203
 14487  0069EC                     l14157:
 14488                           
 14489                           ; BSR set to: 0
 14490                           ;main.c: 1064: else if (0 != stristr(cmdbuf, "MODE ")) {
 14491  0069EC  0E01               	movlw	high _cmdbuf
 14492  0069EE  0100               	movlb	0	; () banked
 14493  0069F0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14494  0069F2  0E2B               	movlw	low _cmdbuf
 14495  0069F4  6F6D               	movwf	?_stristr& (0+255),b
 14496  0069F6  0E7C               	movlw	high STR_121
 14497  0069F8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14498  0069FA  0E86               	movlw	low STR_121
 14499  0069FC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14500  0069FE  EC92  F010         	call	_stristr	;wreg free
 14501  006A02  516E               	movf	(?_stristr+1)& (0+255),w,b
 14502  006A04  116D               	iorwf	?_stristr& (0+255),w,b
 14503  006A06  E068               	bz	l14187
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;main.c: 1065: strcpy(cmdbuf, cmdbuf + 5);
 14507  006A08  D8C0               	call	PL2	;call to abstracted procedure
 14508  006A0A  ECDF  F00B         	call	_strcpy	;wreg free
 14509                           
 14510                           ; BSR set to: 0
 14511                           ;main.c: 1066: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14512  006A0E  0E01               	movlw	high _cmdbuf
 14513  006A10  0100               	movlb	0	; () banked
 14514  006A12  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14515  006A14  0E2B               	movlw	low _cmdbuf
 14516  006A16  6F6D               	movwf	?_stristr& (0+255),b
 14517  006A18  0E7B               	movlw	high STR_122
 14518  006A1A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14519  006A1C  0EFE               	movlw	low STR_122
 14520  006A1E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14521  006A20  EC92  F010         	call	_stristr	;wreg free
 14522  006A24  516E               	movf	(?_stristr+1)& (0+255),w,b
 14523  006A26  116D               	iorwf	?_stristr& (0+255),w,b
 14524  006A28  E013               	bz	l14171
 14525                           
 14526                           ; BSR set to: 0
 14527                           ;main.c: 1067: mode = 0;
 14528  006A2A  6BE6               	clrf	_mode& (0+255),b
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;main.c: 1068: (Busy_eep(), Write_b_eep(0x03,0));
 14532  006A2C  EC56  F00B         	call	_Busy_eep	;wreg free
 14533  006A30  0100               	movlb	0	; () banked
 14534  006A32  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14535  006A34  0E03               	movlw	3
 14536  006A36  6F60               	movwf	?_Write_b_eep& (0+255),b
 14537  006A38  0E00               	movlw	0
 14538  006A3A  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14539  006A3C  EC26  F00C         	call	_Write_b_eep	;wreg free
 14540                           
 14541                           ;main.c: 1069: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14542  006A40  0E78               	movlw	high STR_123
 14543  006A42  0100               	movlb	0	; () banked
 14544  006A44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14545  006A46  0E48               	movlw	low STR_123
 14546  006A48  6F61               	movwf	?_putsUSART& (0+255),b
 14547  006A4A  EC2D  F00E         	call	_putsUSART	;wreg free
 14548                           
 14549                           ;main.c: 1070: }
 14550  006A4E  D08E               	goto	l14203
 14551  006A50                     l14171:
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;main.c: 1071: else if (0 != stristr(cmdbuf, "VSCP")) {
 14555  006A50  0E01               	movlw	high _cmdbuf
 14556  006A52  0100               	movlb	0	; () banked
 14557  006A54  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14558  006A56  0E2B               	movlw	low _cmdbuf
 14559  006A58  6F6D               	movwf	?_stristr& (0+255),b
 14560  006A5A  0E7C               	movlw	high STR_124
 14561  006A5C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14562  006A5E  0EC1               	movlw	low STR_124
 14563  006A60  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14564  006A62  EC92  F010         	call	_stristr	;wreg free
 14565  006A66  516E               	movf	(?_stristr+1)& (0+255),w,b
 14566  006A68  116D               	iorwf	?_stristr& (0+255),w,b
 14567  006A6A  E014               	bz	l14179
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;main.c: 1072: mode = 1;
 14571  006A6C  0E01               	movlw	1
 14572  006A6E  6FE6               	movwf	_mode& (0+255),b
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;main.c: 1073: (Busy_eep(), Write_b_eep(0x03,1));
 14576  006A70  EC56  F00B         	call	_Busy_eep	;wreg free
 14577  006A74  0100               	movlb	0	; () banked
 14578  006A76  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14579  006A78  0E03               	movlw	3
 14580  006A7A  6F60               	movwf	?_Write_b_eep& (0+255),b
 14581  006A7C  0E01               	movlw	1
 14582  006A7E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14583  006A80  EC26  F00C         	call	_Write_b_eep	;wreg free
 14584                           
 14585                           ;main.c: 1074: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14586  006A84  0E77               	movlw	high STR_125
 14587  006A86  0100               	movlb	0	; () banked
 14588  006A88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14589  006A8A  0ECD               	movlw	low STR_125
 14590  006A8C  6F61               	movwf	?_putsUSART& (0+255),b
 14591  006A8E  EC2D  F00E         	call	_putsUSART	;wreg free
 14592                           
 14593                           ;main.c: 1075: }
 14594  006A92  D06C               	goto	l14203
 14595  006A94                     l14179:
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;main.c: 1076: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14599  006A94  0E01               	movlw	high _cmdbuf
 14600  006A96  0100               	movlb	0	; () banked
 14601  006A98  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14602  006A9A  0E2B               	movlw	low _cmdbuf
 14603  006A9C  6F6D               	movwf	?_stristr& (0+255),b
 14604  006A9E  0E7C               	movlw	high STR_126
 14605  006AA0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14606  006AA2  0E98               	movlw	low STR_126
 14607  006AA4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14608  006AA6  EC92  F010         	call	_stristr	;wreg free
 14609  006AAA  516E               	movf	(?_stristr+1)& (0+255),w,b
 14610  006AAC  116D               	iorwf	?_stristr& (0+255),w,b
 14611  006AAE  E05E               	bz	l14203
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;main.c: 1077: mode = 2;
 14615  006AB0  0E02               	movlw	2
 14616  006AB2  6FE6               	movwf	_mode& (0+255),b
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;main.c: 1078: (Busy_eep(), Write_b_eep(0x03,2));
 14620  006AB4  EC56  F00B         	call	_Busy_eep	;wreg free
 14621  006AB8  0100               	movlb	0	; () banked
 14622  006ABA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14623  006ABC  0E03               	movlw	3
 14624  006ABE  6F60               	movwf	?_Write_b_eep& (0+255),b
 14625  006AC0  0E02               	movlw	2
 14626  006AC2  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14627  006AC4  EC26  F00C         	call	_Write_b_eep	;wreg free
 14628                           
 14629                           ;main.c: 1079: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14630  006AC8  0E78               	movlw	high STR_127
 14631  006ACA  0100               	movlb	0	; () banked
 14632  006ACC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14633  006ACE  0EB5               	movlw	low STR_127
 14634  006AD0  6F61               	movwf	?_putsUSART& (0+255),b
 14635  006AD2  EC2D  F00E         	call	_putsUSART	;wreg free
 14636  006AD6  D04A               	goto	l14203
 14637  006AD8                     l14187:
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;main.c: 1083: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14641  006AD8  0E01               	movlw	high _cmdbuf
 14642  006ADA  0100               	movlb	0	; () banked
 14643  006ADC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14644  006ADE  0E2B               	movlw	low _cmdbuf
 14645  006AE0  6F6D               	movwf	?_stristr& (0+255),b
 14646  006AE2  0E7B               	movlw	high STR_128
 14647  006AE4  6F70               	movwf	(?_stristr+3)& (0+255),b
 14648  006AE6  0EEE               	movlw	low STR_128
 14649  006AE8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14650  006AEA  EC92  F010         	call	_stristr	;wreg free
 14651  006AEE  516E               	movf	(?_stristr+1)& (0+255),w,b
 14652  006AF0  116D               	iorwf	?_stristr& (0+255),w,b
 14653  006AF2  E010               	bz	l14191
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;main.c: 1084: strcpy(cmdbuf, cmdbuf + 7);
 14657  006AF4  0E01               	movlw	high _cmdbuf
 14658  006AF6  0100               	movlb	0	; () banked
 14659  006AF8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14660  006AFA  0E2B               	movlw	low _cmdbuf
 14661  006AFC  6F60               	movwf	?_strcpy& (0+255),b
 14662  006AFE  0E32               	movlw	low (_cmdbuf+7)
 14663  006B00  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14664  006B02  0E01               	movlw	high (_cmdbuf+7)
 14665  006B04  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14666  006B06  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14667  006B0A  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14668  006B0E  ECDF  F00B         	call	_strcpy	;wreg free
 14669                           
 14670                           ;main.c: 1085: }
 14671  006B12  D02C               	goto	l14203
 14672  006B14                     l14191:
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;main.c: 1087: else if (0 != stristr(cmdbuf, "MASK ")) {
 14676  006B14  0E01               	movlw	high _cmdbuf
 14677  006B16  0100               	movlb	0	; () banked
 14678  006B18  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14679  006B1A  0E2B               	movlw	low _cmdbuf
 14680  006B1C  6F6D               	movwf	?_stristr& (0+255),b
 14681  006B1E  0E7C               	movlw	high STR_129
 14682  006B20  6F70               	movwf	(?_stristr+3)& (0+255),b
 14683  006B22  0E8C               	movlw	low STR_129
 14684  006B24  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14685  006B26  EC92  F010         	call	_stristr	;wreg free
 14686  006B2A  516E               	movf	(?_stristr+1)& (0+255),w,b
 14687  006B2C  116D               	iorwf	?_stristr& (0+255),w,b
 14688  006B2E  E004               	bz	l14195
 14689                           
 14690                           ; BSR set to: 0
 14691                           ;main.c: 1088: strcpy(cmdbuf, cmdbuf + 5);
 14692  006B30  D82C               	call	PL2	;call to abstracted procedure
 14693  006B32  ECDF  F00B         	call	_strcpy	;wreg free
 14694                           
 14695                           ;main.c: 1089: }
 14696  006B36  D01A               	goto	l14203
 14697  006B38                     l14195:
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;main.c: 1090: else {
 14701                           ;main.c: 1091: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14702  006B38  0E77               	movlw	high STR_130
 14703  006B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14704  006B3C  0E6A               	movlw	low STR_130
 14705  006B3E  6F61               	movwf	?_putsUSART& (0+255),b
 14706  006B40  EC2D  F00E         	call	_putsUSART	;wreg free
 14707  006B44  D013               	goto	l14203
 14708  006B46                     l14197:
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;main.c: 1095: else {
 14712                           ;main.c: 1096: if ( 0x0d == cmdbuf[ 0 ] ) {
 14713  006B46  0101               	movlb	1	; () banked
 14714  006B48  512B               	movf	_cmdbuf& (0+255),w,b
 14715  006B4A  0A0D               	xorlw	13
 14716  006B4C  E108               	bnz	l14201
 14717                           
 14718                           ; BSR set to: 1
 14719                           ;main.c: 1097: putsUSART((char *) "+OK\r\n");
 14720  006B4E  0E7C               	movlw	high STR_9
 14721  006B50  0100               	movlb	0	; () banked
 14722  006B52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14723  006B54  0E80               	movlw	low STR_9
 14724  006B56  6F61               	movwf	?_putsUSART& (0+255),b
 14725  006B58  EC2D  F00E         	call	_putsUSART	;wreg free
 14726                           
 14727                           ;main.c: 1098: }
 14728  006B5C  D007               	goto	l14203
 14729  006B5E                     l14201:
 14730                           
 14731                           ; BSR set to: 1
 14732                           ;main.c: 1099: else {
 14733                           ;main.c: 1100: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14734  006B5E  0E78               	movlw	high STR_132
 14735  006B60  0100               	movlb	0	; () banked
 14736  006B62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14737  006B64  0E7F               	movlw	low STR_132
 14738  006B66  6F61               	movwf	?_putsUSART& (0+255),b
 14739  006B68  EC2D  F00E         	call	_putsUSART	;wreg free
 14740  006B6C                     l14203:
 14741                           
 14742                           ;main.c: 1101: }
 14743                           ;main.c: 1102: }
 14744                           ;main.c: 1104: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 14745  006B6C  0E01               	movlw	high _cmdbuf
 14746  006B6E  0100               	movlb	0	; () banked
 14747  006B70  6F61               	movwf	(?_memset+1)& (0+255),b
 14748  006B72  0E2B               	movlw	low _cmdbuf
 14749  006B74  6F60               	movwf	?_memset& (0+255),b
 14750  006B76  6B63               	clrf	(?_memset+3)& (0+255),b
 14751  006B78  6B62               	clrf	(?_memset+2)& (0+255),b
 14752  006B7A  6B65               	clrf	(?_memset+5)& (0+255),b
 14753  006B7C  0E50               	movlw	80
 14754  006B7E  6F64               	movwf	(?_memset+4)& (0+255),b
 14755  006B80  ECC8  F00B         	call	_memset	;wreg free
 14756                           
 14757                           ; BSR set to: 0
 14758                           ;main.c: 1105: pos = 0;
 14759  006B84  6BE7               	clrf	_pos& (0+255),b
 14760  006B86                     l14207:
 14761                           
 14762                           ;main.c: 1106: }
 14763                           ;main.c: 1107: }
 14764                           ;main.c: 1110: (INTCONbits.GIE = 1);
 14765  006B86  8EF2               	bsf	intcon,7,c	;volatile
 14766  006B88                     l538:
 14767  006B88  0012               	return	
 14768  006B8A                     __end_of_doModeVerbose:
 14769                           	opt stack 0
 14770  006B8A                     PL2:
 14771                           	opt stack 19
 14772  006B8A  0E01               	movlw	high _cmdbuf
 14773  006B8C  0100               	movlb	0	; () banked
 14774  006B8E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14775  006B90  0E2B               	movlw	low _cmdbuf
 14776  006B92  6F60               	movwf	?_strcpy& (0+255),b
 14777  006B94  0E30               	movlw	low (_cmdbuf+5)
 14778  006B96  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14779  006B98  0E01               	movlw	high (_cmdbuf+5)
 14780  006B9A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14781  006B9C  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14782  006BA0  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14783  006BA4  0012               	return	
 14784  006BA6                     __end_ofPL2:
 14785                           	opt stack 0
 14786  006BA6                     PL4:
 14787                           	opt stack 19
 14788  006BA6  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14789  006BA8  6B6C               	clrf	?_strtok& (0+255),b
 14790  006BAA  0E7C               	movlw	high STR_30
 14791  006BAC  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14792  006BAE  0EF5               	movlw	low STR_30
 14793  006BB0  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14794  006BB2  0012               	return	
 14795  006BB4                     __end_ofPL4:
 14796                           	opt stack 0
 14797  006BB4                     PL6:
 14798                           	opt stack 19
 14799  006BB4  0100               	movlb	0	; () banked
 14800  006BB6  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14801  006BB8  0E2B               	movlw	low _cmdbuf
 14802  006BBA  6F60               	movwf	?_strcpy& (0+255),b
 14803  006BBC  0E33               	movlw	low (_cmdbuf+8)
 14804  006BBE  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14805  006BC0  0E01               	movlw	high (_cmdbuf+8)
 14806  006BC2  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14807  006BC4  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14808  006BC8  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14809  006BCC  0012               	return	
 14810  006BCE                     __end_ofPL6:
 14811                           	opt stack 0
 14812  006BCE                     PL8:
 14813                           	opt stack 19
 14814  006BCE  6BD2               	clrf	(??_doModeVerbose+9)& (0+255),b
 14815  006BD0  6BD3               	clrf	(??_doModeVerbose+10)& (0+255),b
 14816  006BD2  6BD4               	clrf	(??_doModeVerbose+11)& (0+255),b
 14817  006BD4  0E1A               	movlw	26
 14818  006BD6                     u18735:
 14819  006BD6  90D8               	bcf	status,0,c
 14820  006BD8  37D1               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14821  006BDA  37D2               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14822  006BDC  37D3               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14823  006BDE  37D4               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14824  006BE0  2EE8               	decfsz	wreg,f,c
 14825  006BE2  D7F9               	goto	u18735
 14826  006BE4  51CD               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14827  006BE6  11D1               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14828  006BE8  6FD5               	movwf	(??_doModeVerbose+12)& (0+255),b
 14829  006BEA  51CE               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14830  006BEC  11D2               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14831  006BEE  6FD6               	movwf	(??_doModeVerbose+13)& (0+255),b
 14832  006BF0  51CF               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14833  006BF2  11D3               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14834  006BF4  6FD7               	movwf	(??_doModeVerbose+14)& (0+255),b
 14835  006BF6  51D0               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14836  006BF8  11D4               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14837  006BFA  6FD8               	movwf	(??_doModeVerbose+15)& (0+255),b
 14838  006BFC  51C9               	movf	??_doModeVerbose& (0+255),w,b
 14839  006BFE  11D5               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14840  006C00  6FD9               	movwf	(??_doModeVerbose+16)& (0+255),b
 14841  006C02  51CA               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14842  006C04  11D6               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14843  006C06  6FDA               	movwf	(??_doModeVerbose+17)& (0+255),b
 14844  006C08  51CB               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14845  006C0A  11D7               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14846  006C0C  6FDB               	movwf	(??_doModeVerbose+18)& (0+255),b
 14847  006C0E  51CC               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14848  006C10  11D8               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14849  006C12  6FDC               	movwf	(??_doModeVerbose+19)& (0+255),b
 14850  006C14  0102               	movlb	2	; () banked
 14851  006C16  0012               	return	
 14852  006C18                     __end_ofPL8:
 14853                           	opt stack 0
 14854  006C18                     PL26:
 14855                           	opt stack 19
 14856  006C18  0100               	movlb	0	; () banked
 14857  006C1A  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14858  006C1C  6B6C               	clrf	?_strtok& (0+255),b
 14859  006C1E  0E7C               	movlw	high (STR_256+5)
 14860  006C20  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14861  006C22  0E2B               	movlw	low (STR_256+5)
 14862  006C24  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14863  006C26  0012               	return	
 14864  006C28                     __end_ofPL26:
 14865                           	opt stack 0
 14866  006C28                     PL28:
 14867                           	opt stack 19
 14868  006C28  0E01               	movlw	high _cmdbuf
 14869  006C2A  0100               	movlb	0	; () banked
 14870  006C2C  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14871  006C2E  0E2B               	movlw	low _cmdbuf
 14872  006C30  6F6C               	movwf	?_strtok& (0+255),b
 14873  006C32  0E7C               	movlw	high STR_30
 14874  006C34  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14875  006C36  0EF5               	movlw	low STR_30
 14876  006C38  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14877  006C3A  0012               	return	
 14878  006C3C                     __end_ofPL28:
 14879                           	opt stack 0
 14880  006C3C                     PL32:
 14881                           	opt stack 19
 14882  006C3C  0100               	movlb	0	; () banked
 14883  006C3E  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14884  006C40  0E2B               	movlw	low _cmdbuf
 14885  006C42  6F6C               	movwf	?_strtok& (0+255),b
 14886  006C44  0E7C               	movlw	high (STR_256+5)
 14887  006C46  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14888  006C48  0E2B               	movlw	low (STR_256+5)
 14889  006C4A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14890  006C4C  0012               	return	
 14891  006C4E                     __end_ofPL32:
 14892                           	opt stack 0
 14893  006C4E                     PL38:
 14894                           	opt stack 19
 14895  006C4E  0102               	movlb	2	; () banked
 14896  006C50  51B0               	movf	doModeVerbose@i_1111& (0+255),w,b
 14897  006C52  C2AE  F0C9         	movff	doModeVerbose@reg,??_doModeVerbose
 14898  006C56  0100               	movlb	0	; () banked
 14899  006C58  6BCA               	clrf	(??_doModeVerbose+1)& (0+255),b
 14900  006C5A  27C9               	addwf	??_doModeVerbose& (0+255),f,b
 14901  006C5C  0E00               	movlw	0
 14902  006C5E  23CA               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14903  006C60  51C9               	movf	??_doModeVerbose& (0+255),w,b
 14904  006C62  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14905  006C64  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14906  006C66  0012               	return	
 14907  006C68                     __end_ofPL38:
 14908                           	opt stack 0
 14909  006C68                     PL40:
 14910                           	opt stack 19
 14911  006C68  0100               	movlb	0	; () banked
 14912  006C6A  6BCA               	clrf	(??_doModeVerbose+1)& (0+255),b
 14913  006C6C  6BCB               	clrf	(??_doModeVerbose+2)& (0+255),b
 14914  006C6E  6BCC               	clrf	(??_doModeVerbose+3)& (0+255),b
 14915  006C70  C0CB  F0CC         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14916  006C74  C0CA  F0CB         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14917  006C78  C0C9  F0CA         	movff	??_doModeVerbose,??_doModeVerbose+1
 14918  006C7C  6BC9               	clrf	??_doModeVerbose& (0+255),b
 14919  006C7E  0102               	movlb	2	; () banked
 14920  006C80  0012               	return	
 14921  006C82                     __end_ofPL40:
 14922                           	opt stack 0
 14923  006C82                     PL50:
 14924                           	opt stack 19
 14925  006C82  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14926  006C84  C2A3  F062         	movff	doModeVerbose@id_1222,?__CANIDToRegs+2
 14927  006C88  C2A4  F063         	movff	doModeVerbose@id_1222+1,?__CANIDToRegs+3
 14928  006C8C  C2A5  F064         	movff	doModeVerbose@id_1222+2,?__CANIDToRegs+4
 14929  006C90  C2A6  F065         	movff	doModeVerbose@id_1222+3,?__CANIDToRegs+5
 14930  006C94  0E01               	movlw	1
 14931  006C96  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14932  006C98  0C01               	retlw	1
 14933  006C9A                     __end_ofPL50:
 14934                           	opt stack 0
 14935  006C9A                     PL54:
 14936                           	opt stack 19
 14937  006C9A  0100               	movlb	0	; () banked
 14938  006C9C  6FCE               	movwf	(??_doModeVerbose+5)& (0+255),b
 14939  006C9E  6BCF               	clrf	(??_doModeVerbose+6)& (0+255),b
 14940  006CA0  6BD0               	clrf	(??_doModeVerbose+7)& (0+255),b
 14941  006CA2  C0CE  F0D0         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14942  006CA6  C0CD  F0CF         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14943  006CAA  6BCE               	clrf	(??_doModeVerbose+5)& (0+255),b
 14944  006CAC  6BCD               	clrf	(??_doModeVerbose+4)& (0+255),b
 14945  006CAE  0012               	return	
 14946  006CB0                     __end_ofPL54:
 14947                           	opt stack 0
 14948                           tblptru	equ	0xFF8
 14949                           tblptrh	equ	0xFF7
 14950                           tblptrl	equ	0xFF6
 14951                           tablat	equ	0xFF5
 14952                           prodh	equ	0xFF4
 14953                           prodl	equ	0xFF3
 14954                           intcon	equ	0xFF2
 14955                           indf0	equ	0xFEF
 14956                           postinc0	equ	0xFEE
 14957                           fsr0h	equ	0xFEA
 14958                           fsr0l	equ	0xFE9
 14959                           wreg	equ	0xFE8
 14960                           indf1	equ	0xFE7
 14961                           postinc1	equ	0xFE6
 14962                           postdec1	equ	0xFE5
 14963                           fsr1h	equ	0xFE2
 14964                           fsr1l	equ	0xFE1
 14965                           indf2	equ	0xFDF
 14966                           postinc2	equ	0xFDE
 14967                           postdec2	equ	0xFDD
 14968                           plusw2	equ	0xFDB
 14969                           fsr2h	equ	0xFDA
 14970                           fsr2l	equ	0xFD9
 14971                           status	equ	0xFD8
 14972                           
 14973 ;; *************** function _setFilter *****************
 14974 ;; Defined at:
 14975 ;;		line 2838 in file "main.c"
 14976 ;; Parameters:    Size  Location     Type
 14977 ;;  filter          1    wreg     unsigned char 
 14978 ;;  val             4    0[BANK0 ] unsigned long 
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;  filter          1   10[BANK0 ] unsigned char 
 14981 ;;  eidl            1   14[BANK0 ] unsigned char 
 14982 ;;  eidh            1   13[BANK0 ] unsigned char 
 14983 ;;  sidl            1   12[BANK0 ] unsigned char 
 14984 ;;  sidh            1   11[BANK0 ] unsigned char 
 14985 ;; Return value:  Size  Location     Type
 14986 ;;		None               void
 14987 ;; Registers used:
 14988 ;;		wreg, status,2, status,0
 14989 ;; Tracked objects:
 14990 ;;		On entry : F/2
 14991 ;;		On exit  : F/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14994 ;;      Params:         0       4       0       0       0       0       0
 14995 ;;      Locals:         0       5       0       0       0       0       0
 14996 ;;      Temps:          0       6       0       0       0       0       0
 14997 ;;      Totals:         0      15       0       0       0       0       0
 14998 ;;Total ram usage:       15 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    3
 15001 ;; This function calls:
 15002 ;;		Nothing
 15003 ;; This function is called by:
 15004 ;;		_doModeVerbose
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text23
 15009  004450                     __ptext23:
 15010                           	opt stack 0
 15011  004450                     _setFilter:
 15012                           	opt stack 25
 15013                           
 15014                           ;incstack = 0
 15015                           ;incstack = 0
 15016                           ;setFilter@filter stored from wreg
 15017  004450  CFE8 F06A          	movff	wreg,setFilter@filter
 15018                           
 15019                           ; BSR set to: 2
 15020                           ;main.c: 2839: uint8_t sidh = (long) val >> 21L;
 15021  004454  0E15               	movlw	21
 15022  004456  0100               	movlb	0	; () banked
 15023  004458  6F64               	movwf	??_setFilter& (0+255),b
 15024  00445A  C060  F065         	movff	setFilter@val,??_setFilter+1
 15025  00445E  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 15026  004462  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 15027  004466  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 15028  00446A                     u15855:
 15029  00446A  6764               	tstfsz	??_setFilter& (0+255),b
 15030  00446C  D001               	goto	u15856
 15031  00446E  D007               	goto	u15857
 15032  004470                     u15856:
 15033  004470  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 15034  004472  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15035  004474  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15036  004476  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15037  004478  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 15038  00447A  2F64               	decfsz	??_setFilter& (0+255),f,b
 15039  00447C  D7F6               	goto	u15855
 15040  00447E                     u15857:
 15041  00447E  5165               	movf	(??_setFilter+1)& (0+255),w,b
 15042  004480  6F6B               	movwf	setFilter@sidh& (0+255),b
 15043                           
 15044                           ;main.c: 2840: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 15045                           ;main.c: 2841: ((long) (val) & 0x03L) |
 15046                           ;main.c: 2842: 0x08;
 15047  004482  C060  F064         	movff	setFilter@val,??_setFilter
 15048  004486  0E03               	movlw	3
 15049  004488  1764               	andwf	??_setFilter& (0+255),f,b
 15050  00448A  0E0D               	movlw	13
 15051  00448C  6F65               	movwf	(??_setFilter+1)& (0+255),b
 15052  00448E  C060  F066         	movff	setFilter@val,??_setFilter+2
 15053  004492  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 15054  004496  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 15055  00449A  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 15056  00449E                     u15865:
 15057  00449E  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 15058  0044A0  D001               	goto	u15866
 15059  0044A2  D007               	goto	u15867
 15060  0044A4                     u15866:
 15061  0044A4  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 15062  0044A6  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 15063  0044A8  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15064  0044AA  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15065  0044AC  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15066  0044AE  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 15067  0044B0  D7F6               	goto	u15865
 15068  0044B2                     u15867:
 15069  0044B2  5166               	movf	(??_setFilter+2)& (0+255),w,b
 15070  0044B4  0BE0               	andlw	224
 15071  0044B6  1164               	iorwf	??_setFilter& (0+255),w,b
 15072  0044B8  0908               	iorlw	8
 15073  0044BA  6F6C               	movwf	setFilter@sidl& (0+255),b
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;main.c: 2843: uint8_t eidh = (long) val >> 8L;
 15077  0044BC  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15078                           
 15079                           ; BSR set to: 0
 15080                           ;main.c: 2844: uint8_t eidl = val;
 15081  0044C0  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15082                           
 15083                           ;main.c: 2846: switch (filter) {
 15084  0044C4  D090               	goto	l12345
 15085  0044C6                     l1251:
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;main.c: 2849: RXF0SIDH = sidh;
 15089  0044C6  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15090                           
 15091                           ;main.c: 2850: RXF0SIDL = sidl;
 15092  0044CA  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15093                           
 15094                           ;main.c: 2851: RXF0EIDH = eidh;
 15095  0044CE  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15096                           
 15097                           ;main.c: 2852: RXF0EIDL = eidl;
 15098  0044D2  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15099                           
 15100                           ;main.c: 2853: break;
 15101  0044D6  D0AA               	goto	l1268
 15102  0044D8                     l1253:
 15103                           
 15104                           ; BSR set to: 0
 15105                           ;main.c: 2856: RXF1SIDH = sidh;
 15106  0044D8  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15107                           
 15108                           ;main.c: 2857: RXF1SIDL = sidl;
 15109  0044DC  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15110                           
 15111                           ;main.c: 2858: RXF1EIDH = eidh;
 15112  0044E0  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15113                           
 15114                           ;main.c: 2859: RXF1EIDL = eidl;
 15115  0044E4  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15116                           
 15117                           ;main.c: 2860: break;
 15118  0044E8  D0A1               	goto	l1268
 15119  0044EA                     l1254:
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;main.c: 2863: RXF2SIDH = sidh;
 15123  0044EA  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15124                           
 15125                           ;main.c: 2864: RXF2SIDL = sidl;
 15126  0044EE  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15127                           
 15128                           ;main.c: 2865: RXF2EIDH = eidh;
 15129  0044F2  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15130                           
 15131                           ;main.c: 2866: RXF2EIDL = eidl;
 15132  0044F6  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15133                           
 15134                           ;main.c: 2867: break;
 15135  0044FA  D098               	goto	l1268
 15136  0044FC                     l1255:
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;main.c: 2870: RXF3SIDH = sidh;
 15140  0044FC  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15141                           
 15142                           ;main.c: 2871: RXF3SIDL = sidl;
 15143  004500  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15144                           
 15145                           ;main.c: 2872: RXF3EIDH = eidh;
 15146  004504  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15147                           
 15148                           ;main.c: 2873: RXF3EIDL = eidl;
 15149  004508  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15150                           
 15151                           ;main.c: 2874: break;
 15152  00450C  D08F               	goto	l1268
 15153  00450E                     l1256:
 15154                           
 15155                           ; BSR set to: 0
 15156                           ;main.c: 2877: RXF4SIDH = sidh;
 15157  00450E  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15158                           
 15159                           ;main.c: 2878: RXF4SIDL = sidl;
 15160  004512  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15161                           
 15162                           ;main.c: 2879: RXF4EIDH = eidh;
 15163  004516  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15164                           
 15165                           ;main.c: 2880: RXF4EIDL = eidl;
 15166  00451A  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15167                           
 15168                           ;main.c: 2881: break;
 15169  00451E  D086               	goto	l1268
 15170  004520                     l1257:
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;main.c: 2884: RXF5SIDH = sidh;
 15174  004520  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15175                           
 15176                           ;main.c: 2885: RXF5SIDL = sidl;
 15177  004524  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15178                           
 15179                           ;main.c: 2886: RXF5EIDH = eidh;
 15180  004528  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15181                           
 15182                           ;main.c: 2887: RXF5EIDL = eidl;
 15183  00452C  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15184                           
 15185                           ;main.c: 2888: break;
 15186  004530  D07D               	goto	l1268
 15187  004532                     l1258:
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;main.c: 2891: RXF6SIDH = sidh;
 15191  004532  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15192                           
 15193                           ;main.c: 2892: RXF6SIDL = sidl;
 15194  004536  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15195                           
 15196                           ;main.c: 2893: RXF6EIDH = eidh;
 15197  00453A  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15198                           
 15199                           ;main.c: 2894: RXF6EIDL = eidl;
 15200  00453E  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15201                           
 15202                           ;main.c: 2895: break;
 15203  004542  D074               	goto	l1268
 15204  004544                     l1259:
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;main.c: 2898: RXF7SIDH = sidh;
 15208  004544  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15209                           
 15210                           ;main.c: 2899: RXF7SIDL = sidl;
 15211  004548  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15212                           
 15213                           ;main.c: 2900: RXF7EIDH = eidh;
 15214  00454C  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15215                           
 15216                           ;main.c: 2901: RXF7EIDL = eidl;
 15217  004550  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15218                           
 15219                           ;main.c: 2902: break;
 15220  004554  D06B               	goto	l1268
 15221  004556                     l1260:
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;main.c: 2905: RXF8SIDH = sidh;
 15225  004556  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15226                           
 15227                           ;main.c: 2906: RXF8SIDL = sidl;
 15228  00455A  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15229                           
 15230                           ;main.c: 2907: RXF8EIDH = eidh;
 15231  00455E  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15232                           
 15233                           ;main.c: 2908: RXF8EIDL = eidl;
 15234  004562  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15235                           
 15236                           ;main.c: 2909: break;
 15237  004566  D062               	goto	l1268
 15238  004568                     l1261:
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;main.c: 2912: RXF9SIDH = sidh;
 15242  004568  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15243                           
 15244                           ;main.c: 2913: RXF9SIDL = sidl;
 15245  00456C  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15246                           
 15247                           ;main.c: 2914: RXF9EIDH = eidh;
 15248  004570  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15249                           
 15250                           ;main.c: 2915: RXF9EIDL = eidl;
 15251  004574  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15252                           
 15253                           ;main.c: 2916: break;
 15254  004578  D059               	goto	l1268
 15255  00457A                     l1262:
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;main.c: 2919: RXF10SIDH = sidh;
 15259  00457A  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15260                           
 15261                           ;main.c: 2920: RXF10SIDL = sidl;
 15262  00457E  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15263                           
 15264                           ;main.c: 2921: RXF10EIDH = eidh;
 15265  004582  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15266                           
 15267                           ;main.c: 2922: RXF10EIDL = eidl;
 15268  004586  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15269                           
 15270                           ;main.c: 2923: break;
 15271  00458A  D050               	goto	l1268
 15272  00458C                     l1263:
 15273                           
 15274                           ; BSR set to: 0
 15275                           ;main.c: 2926: RXF11SIDH = sidh;
 15276  00458C  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15277                           
 15278                           ;main.c: 2927: RXF11SIDL = sidl;
 15279  004590  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15280                           
 15281                           ;main.c: 2928: RXF11EIDH = eidh;
 15282  004594  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15283                           
 15284                           ;main.c: 2929: RXF11EIDL = eidl;
 15285  004598  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15286                           
 15287                           ;main.c: 2930: break;
 15288  00459C  D047               	goto	l1268
 15289  00459E                     l1264:
 15290                           
 15291                           ; BSR set to: 0
 15292                           ;main.c: 2933: RXF12SIDH = sidh;
 15293  00459E  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15294                           
 15295                           ;main.c: 2934: RXF12SIDL = sidl;
 15296  0045A2  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15297                           
 15298                           ;main.c: 2935: RXF12EIDH = eidh;
 15299  0045A6  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15300                           
 15301                           ;main.c: 2936: RXF12EIDL = eidl;
 15302  0045AA  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15303                           
 15304                           ;main.c: 2937: break;
 15305  0045AE  D03E               	goto	l1268
 15306  0045B0                     l1265:
 15307                           
 15308                           ; BSR set to: 0
 15309                           ;main.c: 2940: RXF13SIDH = sidh;
 15310  0045B0  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15311                           
 15312                           ;main.c: 2941: RXF13SIDL = sidl;
 15313  0045B4  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15314                           
 15315                           ;main.c: 2942: RXF13EIDH = eidh;
 15316  0045B8  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15317                           
 15318                           ;main.c: 2943: RXF13EIDL = eidl;
 15319  0045BC  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15320                           
 15321                           ;main.c: 2944: break;
 15322  0045C0  D035               	goto	l1268
 15323  0045C2                     l1266:
 15324                           
 15325                           ; BSR set to: 0
 15326                           ;main.c: 2947: RXF14SIDH = sidh;
 15327  0045C2  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15328                           
 15329                           ;main.c: 2948: RXF14SIDL = sidl;
 15330  0045C6  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15331                           
 15332                           ;main.c: 2949: RXF14EIDH = eidh;
 15333  0045CA  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15334                           
 15335                           ;main.c: 2950: RXF14EIDL = eidl;
 15336  0045CE  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15337                           
 15338                           ;main.c: 2951: break;
 15339  0045D2  D02C               	goto	l1268
 15340  0045D4                     l1267:
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;main.c: 2954: RXF15SIDH = sidh;
 15344  0045D4  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15345                           
 15346                           ;main.c: 2955: RXF15SIDL = sidl;
 15347  0045D8  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15348                           
 15349                           ;main.c: 2956: RXF15EIDH = eidh;
 15350  0045DC  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15351                           
 15352                           ;main.c: 2957: RXF15EIDL = eidl;
 15353  0045E0  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15354                           
 15355                           ;main.c: 2958: break;
 15356  0045E4  D023               	goto	l1268
 15357  0045E6                     l12345:
 15358                           
 15359                           ; BSR set to: 0
 15360  0045E6  516A               	movf	setFilter@filter& (0+255),w,b
 15361                           
 15362                           ; Switch size 1, requested type "space"
 15363                           ; Number of cases is 16, Range of values is 0 to 15
 15364                           ; switch strategies available:
 15365                           ; Name         Instructions Cycles
 15366                           ; simple_byte           49    25 (average)
 15367                           ;	Chosen strategy is simple_byte
 15368  0045E8  E101 D76D          	bz	l1251
 15369  0045EC  0A01               	xorlw	1	; case 1
 15370  0045EE  E101 D773          	bz	l1253
 15371  0045F2  0A03               	xorlw	3	; case 2
 15372  0045F4  E101 D779          	bz	l1254
 15373  0045F8  0A01               	xorlw	1	; case 3
 15374  0045FA  E080               	bz	l1255
 15375  0045FC  0A07               	xorlw	7	; case 4
 15376  0045FE  E087               	bz	l1256
 15377  004600  0A01               	xorlw	1	; case 5
 15378  004602  E08E               	bz	l1257
 15379  004604  0A03               	xorlw	3	; case 6
 15380  004606  E095               	bz	l1258
 15381  004608  0A01               	xorlw	1	; case 7
 15382  00460A  E09C               	bz	l1259
 15383  00460C  0A0F               	xorlw	15	; case 8
 15384  00460E  E0A3               	bz	l1260
 15385  004610  0A01               	xorlw	1	; case 9
 15386  004612  E0AA               	bz	l1261
 15387  004614  0A03               	xorlw	3	; case 10
 15388  004616  E0B1               	bz	l1262
 15389  004618  0A01               	xorlw	1	; case 11
 15390  00461A  E0B8               	bz	l1263
 15391  00461C  0A07               	xorlw	7	; case 12
 15392  00461E  E0BF               	bz	l1264
 15393  004620  0A01               	xorlw	1	; case 13
 15394  004622  E0C6               	bz	l1265
 15395  004624  0A03               	xorlw	3	; case 14
 15396  004626  E0CD               	bz	l1266
 15397  004628  0A01               	xorlw	1	; case 15
 15398  00462A  E0D4               	bz	l1267
 15399  00462C                     l1268:
 15400                           
 15401                           ; BSR set to: 0
 15402  00462C  0012               	return	
 15403  00462E                     __end_of_setFilter:
 15404                           	opt stack 0
 15405                           tblptru	equ	0xFF8
 15406                           tblptrh	equ	0xFF7
 15407                           tblptrl	equ	0xFF6
 15408                           tablat	equ	0xFF5
 15409                           prodh	equ	0xFF4
 15410                           prodl	equ	0xFF3
 15411                           intcon	equ	0xFF2
 15412                           indf0	equ	0xFEF
 15413                           postinc0	equ	0xFEE
 15414                           fsr0h	equ	0xFEA
 15415                           fsr0l	equ	0xFE9
 15416                           wreg	equ	0xFE8
 15417                           indf1	equ	0xFE7
 15418                           postinc1	equ	0xFE6
 15419                           postdec1	equ	0xFE5
 15420                           fsr1h	equ	0xFE2
 15421                           fsr1l	equ	0xFE1
 15422                           indf2	equ	0xFDF
 15423                           postinc2	equ	0xFDE
 15424                           postdec2	equ	0xFDD
 15425                           plusw2	equ	0xFDB
 15426                           fsr2h	equ	0xFDA
 15427                           fsr2l	equ	0xFD9
 15428                           status	equ	0xFD8
 15429                           
 15430 ;; *************** function _writeRegisterExtended *****************
 15431 ;; Defined at:
 15432 ;;		line 2401 in file "main.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;  nodeid          1    wreg     unsigned char 
 15435 ;;  page            2   85[BANK0 ] unsigned short 
 15436 ;;  reg             1   87[BANK0 ] unsigned char 
 15437 ;;  timeout         2   88[BANK0 ] unsigned short 
 15438 ;;  value           2   90[BANK0 ] PTR unsigned char 
 15439 ;;		 -> doModeVerbose@value_1164(1), 
 15440 ;; Auto vars:     Size  Location     Type
 15441 ;;  nodeid          1   96[BANK0 ] unsigned char 
 15442 ;; Return value:  Size  Location     Type
 15443 ;;                  1    wreg      enum E15660
 15444 ;; Registers used:
 15445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15446 ;; Tracked objects:
 15447 ;;		On entry : F/2
 15448 ;;		On exit  : E/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15451 ;;      Params:         0       7       0       0       0       0       0
 15452 ;;      Locals:         0       1       0       0       0       0       0
 15453 ;;      Temps:          0       4       0       0       0       0       0
 15454 ;;      Totals:         0      12       0       0       0       0       0
 15455 ;;Total ram usage:       12 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:    7
 15458 ;; This function calls:
 15459 ;;		_sendVSCPFrame
 15460 ;;		_getVSCPFrame
 15461 ;; This function is called by:
 15462 ;;		_doModeVerbose
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           	psect	text24
 15467  002EDE                     __ptext24:
 15468                           	opt stack 0
 15469  002EDE                     _writeRegisterExtended:
 15470                           	opt stack 21
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;incstack = 0
 15474                           ;incstack = 0
 15475                           ;writeRegisterExtended@nodeid stored from wreg
 15476  002EDE  CFE8 F0C0          	movff	wreg,writeRegisterExtended@nodeid
 15477                           
 15478                           ; BSR set to: 2
 15479                           ;main.c: 2402: vscpData[ 0 ] = nodeid;
 15480  002EE2  C0C0  F034         	movff	writeRegisterExtended@nodeid,_vscpData
 15481                           
 15482                           ; BSR set to: 2
 15483                           ;main.c: 2403: vscpData[ 1 ] = page >> 8;
 15484  002EE6  0100               	movlb	0	; () banked
 15485  002EE8  51B6               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15486  002EEA  6E35               	movwf	_vscpData+1,c
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;main.c: 2404: vscpData[ 2 ] = page & 0xff;
 15490  002EEC  C0B5  F036         	movff	writeRegisterExtended@page,_vscpData+2
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;main.c: 2405: vscpData[ 3 ] = reg;
 15494  002EF0  C0B7  F037         	movff	writeRegisterExtended@reg,_vscpData+3
 15495                           
 15496                           ; BSR set to: 0
 15497                           ;main.c: 2406: vscpData[ 4 ] = *value;
 15498  002EF4  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15499  002EF8  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15500  002EFC  50DF               	movf	indf2,w,c
 15501  002EFE  6E38               	movwf	_vscpData+4,c
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;main.c: 2408: if (sendVSCPFrame(0,
 15505                           ;main.c: 2409: 38,
 15506                           ;main.c: 2410: 0,
 15507                           ;main.c: 2411: 0,
 15508                           ;main.c: 2412: 5,
 15509                           ;main.c: 2413: vscpData)) {
 15510  002F00  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15511  002F02  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15512  002F04  0E26               	movlw	38
 15513  002F06  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15514  002F08  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15515  002F0A  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15516  002F0C  0E05               	movlw	5
 15517  002F0E  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15518  002F10  0E34               	movlw	low _vscpData
 15519  002F12  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15520  002F14  EC13  F015         	call	_sendVSCPFrame	;wreg free
 15521  002F18  0900               	iorlw	0
 15522  002F1A  E04A               	bz	l15585
 15523                           
 15524                           ;main.c: 2415: timekeeper = 0;
 15525  002F1C  6A22               	clrf	_timekeeper,c	;volatile
 15526  002F1E  6A23               	clrf	_timekeeper+1,c	;volatile
 15527  002F20  6A24               	clrf	_timekeeper+2,c	;volatile
 15528  002F22  6A25               	clrf	_timekeeper+3,c	;volatile
 15529                           
 15530                           ;main.c: 2416: while (timekeeper < timeout) {
 15531  002F24  D035               	goto	l15583
 15532  002F26                     l1108:
 15533                           
 15534                           ; BSR set to: 0
 15535  002F26  0004               	clrwdt		;# 
 15536                           
 15537                           ;main.c: 2420: if (getVSCPFrame(&vscpClass,
 15538                           ;main.c: 2421: &vscpType,
 15539                           ;main.c: 2422: &vscpNodeId,
 15540                           ;main.c: 2423: &vscpPriority,
 15541                           ;main.c: 2424: &vscpSize,
 15542                           ;main.c: 2425: vscpData)) {
 15543  002F28  0100               	movlb	0	; () banked
 15544  002F2A  0EEC               	movlw	low _vscpType
 15545  002F2C  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15546  002F2E  0EE9               	movlw	low _vscpNodeId
 15547  002F30  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15548  002F32  0EEA               	movlw	low _vscpPriority
 15549  002F34  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15550  002F36  0EEB               	movlw	low _vscpSize
 15551  002F38  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15552  002F3A  0E34               	movlw	low _vscpData
 15553  002F3C  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15554  002F3E  0E3C               	movlw	_vscpClass& (0+255)
 15555  002F40  EC0E  F011         	call	_getVSCPFrame
 15556  002F44  0900               	iorlw	0
 15557  002F46  E024               	bz	l15583
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;main.c: 2427: if ((nodeid == vscpNodeId) &&
 15561                           ;main.c: 2428: (5 == vscpSize) &&
 15562                           ;main.c: 2429: (0 == vscpData[ 0 ]) &&
 15563                           ;main.c: 2430: ((page >> 8) == vscpData[ 1 ]) &&
 15564                           ;main.c: 2431: ((page & 0xff) == vscpData[ 2 ]) &&
 15565                           ;main.c: 2432: (reg == vscpData[ 3 ]) &&
 15566                           ;main.c: 2433: (*value == vscpData[ 4 ])) {
 15567  002F48  51E9               	movf	_vscpNodeId& (0+255),w,b
 15568  002F4A  63C0               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15569  002F4C  D021               	goto	l15583
 15570                           
 15571                           ; BSR set to: 0
 15572  002F4E  51EB               	movf	_vscpSize& (0+255),w,b
 15573  002F50  0A05               	xorlw	5
 15574  002F52  E11E               	bnz	l15583
 15575                           
 15576                           ; BSR set to: 0
 15577  002F54  6634               	tstfsz	_vscpData,c
 15578  002F56  D01C               	goto	l15583
 15579                           
 15580                           ; BSR set to: 0
 15581  002F58  51B6               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15582  002F5A  1835               	xorwf	_vscpData+1,w,c
 15583  002F5C  E119               	bnz	l15583
 15584                           
 15585                           ; BSR set to: 0
 15586  002F5E  51B5               	movf	writeRegisterExtended@page& (0+255),w,b
 15587  002F60  EE20  F036         	lfsr	2,_vscpData+2
 15588  002F64  62DF               	cpfseq	indf2,c
 15589  002F66  D014               	goto	l15583
 15590                           
 15591                           ; BSR set to: 0
 15592  002F68  51B7               	movf	writeRegisterExtended@reg& (0+255),w,b
 15593  002F6A  EE20  F037         	lfsr	2,_vscpData+3
 15594  002F6E  62DF               	cpfseq	indf2,c
 15595  002F70  D00F               	goto	l15583
 15596                           
 15597                           ; BSR set to: 0
 15598  002F72  5038               	movf	_vscpData+4,w,c
 15599  002F74  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15600  002F78  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15601  002F7C  62DF               	cpfseq	indf2,c
 15602  002F7E  D008               	goto	l15583
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;main.c: 2434: *value = vscpData[ 1 ];
 15606  002F80  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15607  002F84  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15608  002F88  C035  FFDF         	movff	_vscpData+1,indf2
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;main.c: 2435: return 1;
 15612  002F8C  0E01               	movlw	1
 15613  002F8E  D011               	goto	l1111
 15614  002F90                     l15583:
 15615  002F90  0100               	movlb	0	; () banked
 15616  002F92  51B8               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15617  002F94  6FBC               	movwf	??_writeRegisterExtended& (0+255),b
 15618  002F96  51B9               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15619  002F98  6FBD               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15620  002F9A  6BBE               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15621  002F9C  6BBF               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15622  002F9E  51BC               	movf	??_writeRegisterExtended& (0+255),w,b
 15623  002FA0  5C22               	subwf	_timekeeper,w,c	;volatile
 15624  002FA2  51BD               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15625  002FA4  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15626  002FA6  51BE               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15627  002FA8  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15628  002FAA  51BF               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15629  002FAC  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15630  002FAE  E3BB               	bnc	l1108
 15631  002FB0                     l15585:
 15632                           
 15633                           ;main.c: 2436: }
 15634                           ;main.c: 2438: }
 15635                           ;main.c: 2440: }
 15636                           ;main.c: 2442: }
 15637                           ;main.c: 2444: return 0;
 15638  002FB0  0E00               	movlw	0
 15639  002FB2                     l1111:
 15640  002FB2  0012               	return	
 15641  002FB4                     __end_of_writeRegisterExtended:
 15642                           	opt stack 0
 15643                           tblptru	equ	0xFF8
 15644                           tblptrh	equ	0xFF7
 15645                           tblptrl	equ	0xFF6
 15646                           tablat	equ	0xFF5
 15647                           prodh	equ	0xFF4
 15648                           prodl	equ	0xFF3
 15649                           intcon	equ	0xFF2
 15650                           indf0	equ	0xFEF
 15651                           postinc0	equ	0xFEE
 15652                           fsr0h	equ	0xFEA
 15653                           fsr0l	equ	0xFE9
 15654                           wreg	equ	0xFE8
 15655                           indf1	equ	0xFE7
 15656                           postinc1	equ	0xFE6
 15657                           postdec1	equ	0xFE5
 15658                           fsr1h	equ	0xFE2
 15659                           fsr1l	equ	0xFE1
 15660                           indf2	equ	0xFDF
 15661                           postinc2	equ	0xFDE
 15662                           postdec2	equ	0xFDD
 15663                           plusw2	equ	0xFDB
 15664                           fsr2h	equ	0xFDA
 15665                           fsr2l	equ	0xFD9
 15666                           status	equ	0xFD8
 15667                           
 15668 ;; *************** function _printBinary *****************
 15669 ;; Defined at:
 15670 ;;		line 2488 in file "main.c"
 15671 ;; Parameters:    Size  Location     Type
 15672 ;;  value           1    wreg     unsigned char 
 15673 ;; Auto vars:     Size  Location     Type
 15674 ;;  value           1    3[BANK0 ] unsigned char 
 15675 ;;  i               2    4[BANK0 ] int 
 15676 ;; Return value:  Size  Location     Type
 15677 ;;		None               void
 15678 ;; Registers used:
 15679 ;;		wreg, status,2, status,0, cstack
 15680 ;; Tracked objects:
 15681 ;;		On entry : F/2
 15682 ;;		On exit  : F/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15685 ;;      Params:         0       0       0       0       0       0       0
 15686 ;;      Locals:         0       3       0       0       0       0       0
 15687 ;;      Temps:          0       2       0       0       0       0       0
 15688 ;;      Totals:         0       5       0       0       0       0       0
 15689 ;;Total ram usage:        5 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:    4
 15692 ;; This function calls:
 15693 ;;		_WriteUSART
 15694 ;; This function is called by:
 15695 ;;		_doModeVerbose
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           	psect	text25
 15700  001BC0                     __ptext25:
 15701                           	opt stack 0
 15702  001BC0                     _printBinary:
 15703                           	opt stack 24
 15704                           
 15705                           ;incstack = 0
 15706                           ;incstack = 0
 15707                           ;printBinary@value stored from wreg
 15708  001BC0  CFE8 F063          	movff	wreg,printBinary@value
 15709                           
 15710                           ; BSR set to: 2
 15711                           ;main.c: 2489: int i;
 15712                           ;main.c: 2491: for (i = 7; i >= 0; i--) {
 15713  001BC4  0100               	movlb	0	; () banked
 15714  001BC6  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15715  001BC8  0E07               	movlw	7
 15716  001BCA  6F64               	movwf	printBinary@i& (0+255),b
 15717  001BCC                     l15535:
 15718                           
 15719                           ; BSR set to: 0
 15720                           ;main.c: 2492: if (value & (1 << i)) {
 15721  001BCC  C064  F061         	movff	printBinary@i,??_printBinary
 15722  001BD0  0E01               	movlw	1
 15723  001BD2  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15724  001BD4  2B61               	incf	??_printBinary& (0+255),f,b
 15725  001BD6  D002               	goto	u21064
 15726  001BD8                     u21065:
 15727  001BD8  90D8               	bcf	status,0,c
 15728  001BDA  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15729  001BDC                     u21064:
 15730  001BDC  2F61               	decfsz	??_printBinary& (0+255),f,b
 15731  001BDE  D7FC               	goto	u21065
 15732  001BE0  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15733  001BE2  1563               	andwf	printBinary@value& (0+255),w,b
 15734  001BE4  E006               	bz	l1131
 15735  001BE6                     l1127:
 15736  001BE6  A2AC               	btfss	4012,1,c	;volatile
 15737  001BE8  D7FE               	goto	l1127
 15738                           
 15739                           ;main.c: 2494: WriteUSART('1');
 15740  001BEA  0E31               	movlw	49
 15741  001BEC  EC78  F00B         	call	_WriteUSART
 15742                           
 15743                           ;main.c: 2495: } else {
 15744  001BF0  D005               	goto	l15543
 15745  001BF2                     l1131:
 15746  001BF2  A2AC               	btfss	4012,1,c	;volatile
 15747  001BF4  D7FE               	goto	l1131
 15748                           
 15749                           ;main.c: 2497: WriteUSART('0');
 15750  001BF6  0E30               	movlw	48
 15751  001BF8  EC78  F00B         	call	_WriteUSART
 15752  001BFC                     l15543:
 15753  001BFC  0100               	movlb	0	; () banked
 15754  001BFE  0764               	decf	printBinary@i& (0+255),f,b
 15755  001C00  A0D8               	btfss	status,0,c
 15756  001C02  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15757                           
 15758                           ; BSR set to: 0
 15759  001C04  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15760                           
 15761                           ; BSR set to: 0
 15762  001C06  0012               	return	
 15763  001C08  D7E1               	goto	l15535
 15764  001C0A                     __end_of_printBinary:
 15765                           	opt stack 0
 15766                           tblptru	equ	0xFF8
 15767                           tblptrh	equ	0xFF7
 15768                           tblptrl	equ	0xFF6
 15769                           tablat	equ	0xFF5
 15770                           prodh	equ	0xFF4
 15771                           prodl	equ	0xFF3
 15772                           intcon	equ	0xFF2
 15773                           indf0	equ	0xFEF
 15774                           postinc0	equ	0xFEE
 15775                           fsr0h	equ	0xFEA
 15776                           fsr0l	equ	0xFE9
 15777                           wreg	equ	0xFE8
 15778                           indf1	equ	0xFE7
 15779                           postinc1	equ	0xFE6
 15780                           postdec1	equ	0xFE5
 15781                           fsr1h	equ	0xFE2
 15782                           fsr1l	equ	0xFE1
 15783                           indf2	equ	0xFDF
 15784                           postinc2	equ	0xFDE
 15785                           postdec2	equ	0xFDD
 15786                           plusw2	equ	0xFDB
 15787                           fsr2h	equ	0xFDA
 15788                           fsr2l	equ	0xFD9
 15789                           status	equ	0xFD8
 15790                           
 15791 ;; *************** function _readRegisterExtended *****************
 15792 ;; Defined at:
 15793 ;;		line 2300 in file "main.c"
 15794 ;; Parameters:    Size  Location     Type
 15795 ;;  nodeid          1    wreg     unsigned char 
 15796 ;;  page            2   85[BANK0 ] unsigned short 
 15797 ;;  reg             1   87[BANK0 ] unsigned char 
 15798 ;;  timeout         2   88[BANK0 ] unsigned short 
 15799 ;;  value           2   90[BANK0 ] PTR unsigned char 
 15800 ;;		 -> doModeVerbose@value(1), 
 15801 ;; Auto vars:     Size  Location     Type
 15802 ;;  nodeid          1   96[BANK0 ] unsigned char 
 15803 ;; Return value:  Size  Location     Type
 15804 ;;                  1    wreg      enum E15660
 15805 ;; Registers used:
 15806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15807 ;; Tracked objects:
 15808 ;;		On entry : F/2
 15809 ;;		On exit  : E/0
 15810 ;;		Unchanged: 0/0
 15811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15812 ;;      Params:         0       7       0       0       0       0       0
 15813 ;;      Locals:         0       1       0       0       0       0       0
 15814 ;;      Temps:          0       4       0       0       0       0       0
 15815 ;;      Totals:         0      12       0       0       0       0       0
 15816 ;;Total ram usage:       12 bytes
 15817 ;; Hardware stack levels used:    1
 15818 ;; Hardware stack levels required when called:    7
 15819 ;; This function calls:
 15820 ;;		_sendVSCPFrame
 15821 ;;		_getVSCPFrame
 15822 ;; This function is called by:
 15823 ;;		_doModeVerbose
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           	psect	text26
 15828  002BA0                     __ptext26:
 15829                           	opt stack 0
 15830  002BA0                     _readRegisterExtended:
 15831                           	opt stack 21
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;incstack = 0
 15835                           ;incstack = 0
 15836                           ;readRegisterExtended@nodeid stored from wreg
 15837  002BA0  CFE8 F0C0          	movff	wreg,readRegisterExtended@nodeid
 15838                           
 15839                           ; BSR set to: 2
 15840                           ;main.c: 2301: vscpData[ 0 ] = nodeid;
 15841  002BA4  C0C0  F034         	movff	readRegisterExtended@nodeid,_vscpData
 15842                           
 15843                           ; BSR set to: 2
 15844                           ;main.c: 2302: vscpData[ 1 ] = page >> 8;
 15845  002BA8  0100               	movlb	0	; () banked
 15846  002BAA  51B6               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15847  002BAC  6E35               	movwf	_vscpData+1,c
 15848                           
 15849                           ; BSR set to: 0
 15850                           ;main.c: 2303: vscpData[ 2 ] = page & 0xff;
 15851  002BAE  C0B5  F036         	movff	readRegisterExtended@page,_vscpData+2
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;main.c: 2304: vscpData[ 3 ] = reg;
 15855  002BB2  C0B7  F037         	movff	readRegisterExtended@reg,_vscpData+3
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;main.c: 2305: vscpData[ 4 ] = 1;
 15859  002BB6  0E01               	movlw	1
 15860  002BB8  6E38               	movwf	_vscpData+4,c
 15861                           
 15862                           ; BSR set to: 0
 15863                           ;main.c: 2307: if (sendVSCPFrame(0,
 15864                           ;main.c: 2308: 37,
 15865                           ;main.c: 2309: 0,
 15866                           ;main.c: 2310: 0,
 15867                           ;main.c: 2311: 5,
 15868                           ;main.c: 2312: vscpData)) {
 15869  002BBA  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15870  002BBC  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15871  002BBE  0E25               	movlw	37
 15872  002BC0  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15873  002BC2  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15874  002BC4  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15875  002BC6  0E05               	movlw	5
 15876  002BC8  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15877  002BCA  0E34               	movlw	low _vscpData
 15878  002BCC  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15879  002BCE  EC13  F015         	call	_sendVSCPFrame	;wreg free
 15880  002BD2  0900               	iorlw	0
 15881  002BD4  E049               	bz	l15175
 15882                           
 15883                           ;main.c: 2314: timekeeper = 0;
 15884  002BD6  6A22               	clrf	_timekeeper,c	;volatile
 15885  002BD8  6A23               	clrf	_timekeeper+1,c	;volatile
 15886  002BDA  6A24               	clrf	_timekeeper+2,c	;volatile
 15887  002BDC  6A25               	clrf	_timekeeper+3,c	;volatile
 15888                           
 15889                           ;main.c: 2315: while (timekeeper < timeout) {
 15890  002BDE  D034               	goto	l15173
 15891  002BE0                     l1090:
 15892                           
 15893                           ; BSR set to: 0
 15894  002BE0  0004               	clrwdt		;# 
 15895                           
 15896                           ;main.c: 2319: if (getVSCPFrame(&vscpClass,
 15897                           ;main.c: 2320: &vscpType,
 15898                           ;main.c: 2321: &vscpNodeId,
 15899                           ;main.c: 2322: &vscpPriority,
 15900                           ;main.c: 2323: &vscpSize,
 15901                           ;main.c: 2324: vscpData)) {
 15902  002BE2  0100               	movlb	0	; () banked
 15903  002BE4  0EEC               	movlw	low _vscpType
 15904  002BE6  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15905  002BE8  0EE9               	movlw	low _vscpNodeId
 15906  002BEA  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15907  002BEC  0EEA               	movlw	low _vscpPriority
 15908  002BEE  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15909  002BF0  0EEB               	movlw	low _vscpSize
 15910  002BF2  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15911  002BF4  0E34               	movlw	low _vscpData
 15912  002BF6  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15913  002BF8  0E3C               	movlw	_vscpClass& (0+255)
 15914  002BFA  EC0E  F011         	call	_getVSCPFrame
 15915  002BFE  0900               	iorlw	0
 15916  002C00  E023               	bz	l15173
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;main.c: 2325: if ((nodeid == vscpNodeId) &&
 15920                           ;main.c: 2326: (0 == vscpClass) &&
 15921                           ;main.c: 2327: (39 == vscpType) &&
 15922                           ;main.c: 2328: (5 == vscpSize) &&
 15923                           ;main.c: 2329: (0 == vscpData[ 0 ]) &&
 15924                           ;main.c: 2330: ((page >> 8) == vscpData[ 1 ]) &&
 15925                           ;main.c: 2331: ((page & 0xff) == vscpData[ 2 ]) &&
 15926                           ;main.c: 2332: (reg == vscpData[ 3 ])) {
 15927  002C02  51E9               	movf	_vscpNodeId& (0+255),w,b
 15928  002C04  63C0               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15929  002C06  D020               	goto	l15173
 15930                           
 15931                           ; BSR set to: 0
 15932  002C08  503D               	movf	_vscpClass+1,w,c
 15933  002C0A  103C               	iorwf	_vscpClass,w,c
 15934  002C0C  E11D               	bnz	l15173
 15935                           
 15936                           ; BSR set to: 0
 15937  002C0E  51EC               	movf	_vscpType& (0+255),w,b
 15938  002C10  0A27               	xorlw	39
 15939  002C12  E11A               	bnz	l15173
 15940                           
 15941                           ; BSR set to: 0
 15942  002C14  51EB               	movf	_vscpSize& (0+255),w,b
 15943  002C16  0A05               	xorlw	5
 15944  002C18  E117               	bnz	l15173
 15945                           
 15946                           ; BSR set to: 0
 15947  002C1A  6634               	tstfsz	_vscpData,c
 15948  002C1C  D015               	goto	l15173
 15949                           
 15950                           ; BSR set to: 0
 15951  002C1E  51B6               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15952  002C20  1835               	xorwf	_vscpData+1,w,c
 15953  002C22  E112               	bnz	l15173
 15954                           
 15955                           ; BSR set to: 0
 15956  002C24  51B5               	movf	readRegisterExtended@page& (0+255),w,b
 15957  002C26  EE20  F036         	lfsr	2,_vscpData+2
 15958  002C2A  62DF               	cpfseq	indf2,c
 15959  002C2C  D00D               	goto	l15173
 15960                           
 15961                           ; BSR set to: 0
 15962  002C2E  51B7               	movf	readRegisterExtended@reg& (0+255),w,b
 15963  002C30  EE20  F037         	lfsr	2,_vscpData+3
 15964  002C34  62DF               	cpfseq	indf2,c
 15965  002C36  D008               	goto	l15173
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;main.c: 2333: *value = vscpData[ 4 ];
 15969  002C38  C0BA  FFD9         	movff	readRegisterExtended@value,fsr2l
 15970  002C3C  C0BB  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15971  002C40  C038  FFDF         	movff	_vscpData+4,indf2
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;main.c: 2334: return 1;
 15975  002C44  0E01               	movlw	1
 15976  002C46  D011               	goto	l1093
 15977  002C48                     l15173:
 15978  002C48  0100               	movlb	0	; () banked
 15979  002C4A  51B8               	movf	readRegisterExtended@timeout& (0+255),w,b
 15980  002C4C  6FBC               	movwf	??_readRegisterExtended& (0+255),b
 15981  002C4E  51B9               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15982  002C50  6FBD               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15983  002C52  6BBE               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15984  002C54  6BBF               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15985  002C56  51BC               	movf	??_readRegisterExtended& (0+255),w,b
 15986  002C58  5C22               	subwf	_timekeeper,w,c	;volatile
 15987  002C5A  51BD               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15988  002C5C  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15989  002C5E  51BE               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15990  002C60  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15991  002C62  51BF               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15992  002C64  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15993  002C66  E3BC               	bnc	l1090
 15994  002C68                     l15175:
 15995                           
 15996                           ;main.c: 2335: }
 15997                           ;main.c: 2336: }
 15998                           ;main.c: 2337: }
 15999                           ;main.c: 2338: }
 16000                           ;main.c: 2340: return 0;
 16001  002C68  0E00               	movlw	0
 16002  002C6A                     l1093:
 16003  002C6A  0012               	return	
 16004  002C6C                     __end_of_readRegisterExtended:
 16005                           	opt stack 0
 16006                           tblptru	equ	0xFF8
 16007                           tblptrh	equ	0xFF7
 16008                           tblptrl	equ	0xFF6
 16009                           tablat	equ	0xFF5
 16010                           prodh	equ	0xFF4
 16011                           prodl	equ	0xFF3
 16012                           intcon	equ	0xFF2
 16013                           indf0	equ	0xFEF
 16014                           postinc0	equ	0xFEE
 16015                           fsr0h	equ	0xFEA
 16016                           fsr0l	equ	0xFE9
 16017                           wreg	equ	0xFE8
 16018                           indf1	equ	0xFE7
 16019                           postinc1	equ	0xFE6
 16020                           postdec1	equ	0xFE5
 16021                           fsr1h	equ	0xFE2
 16022                           fsr1l	equ	0xFE1
 16023                           indf2	equ	0xFDF
 16024                           postinc2	equ	0xFDE
 16025                           postdec2	equ	0xFDD
 16026                           plusw2	equ	0xFDB
 16027                           fsr2h	equ	0xFDA
 16028                           fsr2l	equ	0xFD9
 16029                           status	equ	0xFD8
 16030                           
 16031 ;; *************** function _strcpy *****************
 16032 ;; Defined at:
 16033 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16034 ;; Parameters:    Size  Location     Type
 16035 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16036 ;;		 -> cmdbuf(80), 
 16037 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16038 ;;		 -> cmdbuf(80), 
 16039 ;; Auto vars:     Size  Location     Type
 16040 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16041 ;;		 -> cmdbuf(80), 
 16042 ;; Return value:  Size  Location     Type
 16043 ;;                  2    0[BANK0 ] PTR unsigned char 
 16044 ;; Registers used:
 16045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16046 ;; Tracked objects:
 16047 ;;		On entry : F/0
 16048 ;;		On exit  : F/0
 16049 ;;		Unchanged: 0/0
 16050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16051 ;;      Params:         0       4       0       0       0       0       0
 16052 ;;      Locals:         0       2       0       0       0       0       0
 16053 ;;      Temps:          0       0       0       0       0       0       0
 16054 ;;      Totals:         0       6       0       0       0       0       0
 16055 ;;Total ram usage:        6 bytes
 16056 ;; Hardware stack levels used:    1
 16057 ;; Hardware stack levels required when called:    3
 16058 ;; This function calls:
 16059 ;;		Nothing
 16060 ;; This function is called by:
 16061 ;;		_doModeVerbose
 16062 ;; This function uses a non-reentrant model
 16063 ;;
 16064                           
 16065                           	psect	text27
 16066  0017BE                     __ptext27:
 16067                           	opt stack 0
 16068  0017BE                     _strcpy:
 16069                           	opt stack 25
 16070                           
 16071                           ; BSR set to: 0
 16072                           
 16073                           ;incstack = 0
 16074                           ;incstack = 0
 16075  0017BE  C060  F064         	movff	strcpy@to,strcpy@cp
 16076  0017C2  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16077  0017C6  D004               	goto	l15133
 16078  0017C8                     l15131:
 16079                           
 16080                           ; BSR set to: 0
 16081  0017C8  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16082  0017CA  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16083  0017CC  4B62               	infsnz	strcpy@from& (0+255),f,b
 16084  0017CE  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16085  0017D0                     l15133:
 16086                           
 16087                           ; BSR set to: 0
 16088  0017D0  C062  FFD9         	movff	strcpy@from,fsr2l
 16089  0017D4  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16090  0017D8  C064  FFE1         	movff	strcpy@cp,fsr1l
 16091  0017DC  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16092  0017E0  CFDF FFE7          	movff	indf2,indf1
 16093  0017E4  50E7               	movf	indf1,w,c
 16094  0017E6  B4D8               	btfsc	status,2,c
 16095                           
 16096                           ; BSR set to: 0
 16097  0017E8  0012               	return	
 16098  0017EA  D7EE               	goto	l15131
 16099  0017EC                     __end_of_strcpy:
 16100                           	opt stack 0
 16101                           tblptru	equ	0xFF8
 16102                           tblptrh	equ	0xFF7
 16103                           tblptrl	equ	0xFF6
 16104                           tablat	equ	0xFF5
 16105                           prodh	equ	0xFF4
 16106                           prodl	equ	0xFF3
 16107                           intcon	equ	0xFF2
 16108                           indf0	equ	0xFEF
 16109                           postinc0	equ	0xFEE
 16110                           fsr0h	equ	0xFEA
 16111                           fsr0l	equ	0xFE9
 16112                           wreg	equ	0xFE8
 16113                           indf1	equ	0xFE7
 16114                           postinc1	equ	0xFE6
 16115                           postdec1	equ	0xFE5
 16116                           fsr1h	equ	0xFE2
 16117                           fsr1l	equ	0xFE1
 16118                           indf2	equ	0xFDF
 16119                           postinc2	equ	0xFDE
 16120                           postdec2	equ	0xFDD
 16121                           plusw2	equ	0xFDB
 16122                           fsr2h	equ	0xFDA
 16123                           fsr2l	equ	0xFD9
 16124                           status	equ	0xFD8
 16125                           
 16126 ;; *************** function _findNodes *****************
 16127 ;; Defined at:
 16128 ;;		line 2639 in file "main.c"
 16129 ;; Parameters:    Size  Location     Type
 16130 ;;		None
 16131 ;; Auto vars:     Size  Location     Type
 16132 ;;  i               1  104[BANK0 ] unsigned char 
 16133 ;;  value           1  103[BANK0 ] unsigned char 
 16134 ;;  nFound          1  102[BANK0 ] unsigned char 
 16135 ;; Return value:  Size  Location     Type
 16136 ;;		None               void
 16137 ;; Registers used:
 16138 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16139 ;; Tracked objects:
 16140 ;;		On entry : F/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16144 ;;      Params:         0       0       0       0       0       0       0
 16145 ;;      Locals:         0       5       0       0       0       0       0
 16146 ;;      Temps:          0       0       0       0       0       0       0
 16147 ;;      Totals:         0       5       0       0       0       0       0
 16148 ;;Total ram usage:        5 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    9
 16151 ;; This function calls:
 16152 ;;		_putsUSART
 16153 ;;		_printNodeFirmwareVersion
 16154 ;;		_printGUID
 16155 ;;		_printMDF
 16156 ;;		_itoa
 16157 ;;		_readRegister
 16158 ;; This function is called by:
 16159 ;;		_doModeVerbose
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           	psect	text28
 16164  003184                     __ptext28:
 16165                           	opt stack 0
 16166  003184                     _findNodes:
 16167                           	opt stack 19
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;main.c: 2640: uint8_t nFound = 0;
 16171                           
 16172                           ; BSR set to: 0
 16173                           ;incstack = 0
 16174                           ;incstack = 0
 16175  003184  6BC6               	clrf	findNodes@nFound& (0+255),b
 16176                           
 16177                           ; BSR set to: 0
 16178                           ;main.c: 2641: uint8_t i;
 16179                           ;main.c: 2642: uint8_t value;
 16180                           ;main.c: 2644: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16181  003186  0E6E               	movlw	high STR_238
 16182  003188  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16183  00318A  0E4F               	movlw	low STR_238
 16184  00318C  6F61               	movwf	?_putsUSART& (0+255),b
 16185  00318E  EC2D  F00E         	call	_putsUSART	;wreg free
 16186                           
 16187                           ;main.c: 2646: for (i = 1; i != 0; i++) {
 16188  003192  0E01               	movlw	1
 16189  003194  0100               	movlb	0	; () banked
 16190  003196  6FC8               	movwf	findNodes@i& (0+255),b
 16191  003198                     l1192:
 16192                           
 16193                           ; BSR set to: 0
 16194  003198  0004               	clrwdt		;# 
 16195                           
 16196                           ;main.c: 2650: if (readRegister(i,
 16197                           ;main.c: 2651: 0xE0,
 16198                           ;main.c: 2652: rwtimeout,
 16199                           ;main.c: 2653: &value)) {
 16200  00319A  0EE0               	movlw	224
 16201  00319C  0100               	movlb	0	; () banked
 16202  00319E  6FB5               	movwf	?_readRegister& (0+255),b
 16203  0031A0  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16204  0031A4  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16205  0031A6  0EC7               	movlw	low findNodes@value
 16206  0031A8  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16207  0031AA  51C8               	movf	findNodes@i& (0+255),w,b
 16208  0031AC  ECB6  F013         	call	_readRegister
 16209  0031B0  0900               	iorlw	0
 16210  0031B2  E041               	bz	l15119
 16211                           
 16212                           ;main.c: 2654: putsUSART((char *) "Node found with node id = ");
 16213  0031B4  0E78               	movlw	high STR_239
 16214  0031B6  0100               	movlb	0	; () banked
 16215  0031B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16216  0031BA  0E9A               	movlw	low STR_239
 16217  0031BC  6F61               	movwf	?_putsUSART& (0+255),b
 16218  0031BE  EC2D  F00E         	call	_putsUSART	;wreg free
 16219                           
 16220                           ;main.c: 2655: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16221  0031C2  0100               	movlb	0	; () banked
 16222  0031C4  67E4               	tstfsz	_bHex& (0+255),b
 16223  0031C6  D003               	goto	l15101
 16224                           
 16225                           ; BSR set to: 0
 16226  0031C8  6BC5               	clrf	(_findNodes$1473+1)& (0+255),b
 16227  0031CA  0E0A               	movlw	10
 16228  0031CC  D002               	goto	L14
 16229  0031CE                     l15101:
 16230                           
 16231                           ; BSR set to: 0
 16232  0031CE  6BC5               	clrf	(_findNodes$1473+1)& (0+255),b
 16233  0031D0  0E10               	movlw	16
 16234  0031D2                     L14:
 16235  0031D2  6FC4               	movwf	_findNodes$1473& (0+255),b
 16236                           
 16237                           ; BSR set to: 0
 16238  0031D4  0E01               	movlw	high _wrkbuf
 16239  0031D6  0100               	movlb	0	; () banked
 16240  0031D8  6F71               	movwf	(?_itoa+1)& (0+255),b
 16241  0031DA  0E7B               	movlw	low _wrkbuf
 16242  0031DC  6F70               	movwf	?_itoa& (0+255),b
 16243  0031DE  C0E9  F072         	movff	_vscpNodeId,?_itoa+2
 16244  0031E2  6B73               	clrf	(?_itoa+3)& (0+255),b
 16245  0031E4  C0C4  F074         	movff	_findNodes$1473,?_itoa+4
 16246  0031E8  C0C5  F075         	movff	_findNodes$1473+1,?_itoa+5
 16247  0031EC  EC40  F00C         	call	_itoa	;wreg free
 16248                           
 16249                           ; BSR set to: 0
 16250                           ;main.c: 2656: putsUSART(wrkbuf);
 16251  0031F0  0E01               	movlw	high _wrkbuf
 16252  0031F2  0100               	movlb	0	; () banked
 16253  0031F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16254  0031F6  0E7B               	movlw	low _wrkbuf
 16255  0031F8  6F61               	movwf	?_putsUSART& (0+255),b
 16256  0031FA  EC2D  F00E         	call	_putsUSART	;wreg free
 16257                           
 16258                           ;main.c: 2657: putsUSART((char *) "\r\n");
 16259  0031FE  0E71               	movlw	high (STR_197+50)
 16260  003200  0100               	movlb	0	; () banked
 16261  003202  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16262  003204  0EC0               	movlw	low (STR_197+50)
 16263  003206  6F61               	movwf	?_putsUSART& (0+255),b
 16264  003208  EC2D  F00E         	call	_putsUSART	;wreg free
 16265                           
 16266                           ;main.c: 2658: printNodeFirmwareVersion(i);
 16267  00320C  0100               	movlb	0	; () banked
 16268  00320E  51C8               	movf	findNodes@i& (0+255),w,b
 16269  003210  EC36  F016         	call	_printNodeFirmwareVersion
 16270                           
 16271                           ;main.c: 2659: printGUID(i);
 16272  003214  0100               	movlb	0	; () banked
 16273  003216  51C8               	movf	findNodes@i& (0+255),w,b
 16274  003218  EC39  F019         	call	_printGUID
 16275                           
 16276                           ;main.c: 2660: printMDF(i);
 16277  00321C  0100               	movlb	0	; () banked
 16278  00321E  51C8               	movf	findNodes@i& (0+255),w,b
 16279  003220  ECE0  F011         	call	_printMDF
 16280                           
 16281                           ;main.c: 2661: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16282  003224  0E6E               	movlw	high STR_238
 16283  003226  0100               	movlb	0	; () banked
 16284  003228  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16285  00322A  0E4F               	movlw	low STR_238
 16286  00322C  6F61               	movwf	?_putsUSART& (0+255),b
 16287  00322E  EC2D  F00E         	call	_putsUSART	;wreg free
 16288                           
 16289                           ;main.c: 2662: nFound++;
 16290  003232  0100               	movlb	0	; () banked
 16291  003234  2BC6               	incf	findNodes@nFound& (0+255),f,b
 16292  003236                     l15119:
 16293  003236  0100               	movlb	0	; () banked
 16294  003238  2BC8               	incf	findNodes@i& (0+255),f,b
 16295                           
 16296                           ; BSR set to: 0
 16297  00323A  67C8               	tstfsz	findNodes@i& (0+255),b
 16298  00323C  D7AD               	goto	l1192
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;main.c: 2663: }
 16302                           ;main.c: 2665: }
 16303                           ;main.c: 2667: itoa(wrkbuf, nFound, 10);
 16304  00323E  0E01               	movlw	high _wrkbuf
 16305  003240  6F71               	movwf	(?_itoa+1)& (0+255),b
 16306  003242  0E7B               	movlw	low _wrkbuf
 16307  003244  6F70               	movwf	?_itoa& (0+255),b
 16308  003246  C0C6  F072         	movff	findNodes@nFound,?_itoa+2
 16309  00324A  6B73               	clrf	(?_itoa+3)& (0+255),b
 16310  00324C  6B75               	clrf	(?_itoa+5)& (0+255),b
 16311  00324E  0E0A               	movlw	10
 16312  003250  6F74               	movwf	(?_itoa+4)& (0+255),b
 16313  003252  EC40  F00C         	call	_itoa	;wreg free
 16314                           
 16315                           ; BSR set to: 0
 16316                           ;main.c: 2668: putsUSART(wrkbuf);
 16317  003256  0E01               	movlw	high _wrkbuf
 16318  003258  0100               	movlb	0	; () banked
 16319  00325A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16320  00325C  0E7B               	movlw	low _wrkbuf
 16321  00325E  6F61               	movwf	?_putsUSART& (0+255),b
 16322  003260  EC2D  F00E         	call	_putsUSART	;wreg free
 16323                           
 16324                           ;main.c: 2669: putsUSART((char *) " nodes found\r\n");
 16325  003264  0E7B               	movlw	high STR_242
 16326  003266  0100               	movlb	0	; () banked
 16327  003268  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16328  00326A  0E4F               	movlw	low STR_242
 16329  00326C  6F61               	movwf	?_putsUSART& (0+255),b
 16330  00326E  EF2D  F00E         	goto	_putsUSART	;wreg free
 16331  003272                     __end_of_findNodes:
 16332                           	opt stack 0
 16333                           tblptru	equ	0xFF8
 16334                           tblptrh	equ	0xFF7
 16335                           tblptrl	equ	0xFF6
 16336                           tablat	equ	0xFF5
 16337                           prodh	equ	0xFF4
 16338                           prodl	equ	0xFF3
 16339                           intcon	equ	0xFF2
 16340                           indf0	equ	0xFEF
 16341                           postinc0	equ	0xFEE
 16342                           fsr0h	equ	0xFEA
 16343                           fsr0l	equ	0xFE9
 16344                           wreg	equ	0xFE8
 16345                           indf1	equ	0xFE7
 16346                           postinc1	equ	0xFE6
 16347                           postdec1	equ	0xFE5
 16348                           fsr1h	equ	0xFE2
 16349                           fsr1l	equ	0xFE1
 16350                           indf2	equ	0xFDF
 16351                           postinc2	equ	0xFDE
 16352                           postdec2	equ	0xFDD
 16353                           plusw2	equ	0xFDB
 16354                           fsr2h	equ	0xFDA
 16355                           fsr2l	equ	0xFD9
 16356                           status	equ	0xFD8
 16357                           
 16358 ;; *************** function _printMDF *****************
 16359 ;; Defined at:
 16360 ;;		line 2720 in file "main.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;  nodeid          1    wreg     unsigned char 
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16365 ;;  p               2   96[BANK0 ] PTR unsigned char 
 16366 ;;		 -> wrkbuf(80), 
 16367 ;;  i               1   98[BANK0 ] unsigned char 
 16368 ;;  value           1   95[BANK0 ] unsigned char 
 16369 ;; Return value:  Size  Location     Type
 16370 ;;		None               void
 16371 ;; Registers used:
 16372 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16373 ;; Tracked objects:
 16374 ;;		On entry : D/2
 16375 ;;		On exit  : 0/0
 16376 ;;		Unchanged: 0/0
 16377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16378 ;;      Params:         0       0       0       0       0       0       0
 16379 ;;      Locals:         0       5       0       0       0       0       0
 16380 ;;      Temps:          0       0       0       0       0       0       0
 16381 ;;      Totals:         0       5       0       0       0       0       0
 16382 ;;Total ram usage:        5 bytes
 16383 ;; Hardware stack levels used:    1
 16384 ;; Hardware stack levels required when called:    8
 16385 ;; This function calls:
 16386 ;;		_putsUSART
 16387 ;;		_memset
 16388 ;;		_readRegister
 16389 ;; This function is called by:
 16390 ;;		_doModeVerbose
 16391 ;;		_findNodes
 16392 ;; This function uses a non-reentrant model
 16393 ;;
 16394                           
 16395                           	psect	text29
 16396  0023C0                     __ptext29:
 16397                           	opt stack 0
 16398  0023C0                     _printMDF:
 16399                           	opt stack 20
 16400                           
 16401                           ;incstack = 0
 16402                           ;incstack = 0
 16403                           ;printMDF@nodeid stored from wreg
 16404  0023C0  CFE8 F0BE          	movff	wreg,printMDF@nodeid
 16405                           
 16406                           ;main.c: 2721: uint8_t i;
 16407                           ;main.c: 2722: uint8_t value;
 16408                           ;main.c: 2723: char *p = wrkbuf;
 16409  0023C4  0E01               	movlw	high _wrkbuf
 16410  0023C6  0100               	movlb	0	; () banked
 16411  0023C8  6FC1               	movwf	(printMDF@p+1)& (0+255),b
 16412  0023CA  0E7B               	movlw	low _wrkbuf
 16413  0023CC  6FC0               	movwf	printMDF@p& (0+255),b
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;main.c: 2724: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16417  0023CE  0E01               	movlw	high _wrkbuf
 16418  0023D0  6F61               	movwf	(?_memset+1)& (0+255),b
 16419  0023D2  0E7B               	movlw	low _wrkbuf
 16420  0023D4  6F60               	movwf	?_memset& (0+255),b
 16421  0023D6  6B63               	clrf	(?_memset+3)& (0+255),b
 16422  0023D8  6B62               	clrf	(?_memset+2)& (0+255),b
 16423  0023DA  6B65               	clrf	(?_memset+5)& (0+255),b
 16424  0023DC  0E50               	movlw	80
 16425  0023DE  6F64               	movwf	(?_memset+4)& (0+255),b
 16426  0023E0  ECC8  F00B         	call	_memset	;wreg free
 16427                           
 16428                           ; BSR set to: 0
 16429                           ;main.c: 2725: putsUSART((char *) "MDF = http://");
 16430  0023E4  0E7B               	movlw	high STR_248
 16431  0023E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16432  0023E8  0E6D               	movlw	low STR_248
 16433  0023EA  6F61               	movwf	?_putsUSART& (0+255),b
 16434  0023EC  EC2D  F00E         	call	_putsUSART	;wreg free
 16435                           
 16436                           ;main.c: 2727: for (i = 0; i < 32; i++) {
 16437  0023F0  0100               	movlb	0	; () banked
 16438  0023F2  6BC2               	clrf	printMDF@i& (0+255),b
 16439  0023F4                     l15661:
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;main.c: 2728: if (readRegister(nodeid,
 16443                           ;main.c: 2729: 0xE0 + i,
 16444                           ;main.c: 2730: rwtimeout,
 16445                           ;main.c: 2731: &value)) {
 16446  0023F4  51C2               	movf	printMDF@i& (0+255),w,b
 16447  0023F6  0FE0               	addlw	224
 16448  0023F8  6FB5               	movwf	?_readRegister& (0+255),b
 16449  0023FA  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16450  0023FE  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16451  002400  0EBF               	movlw	low printMDF@value
 16452  002402  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16453  002404  51BE               	movf	printMDF@nodeid& (0+255),w,b
 16454  002406  ECB6  F013         	call	_readRegister
 16455  00240A  0900               	iorlw	0
 16456  00240C  E00A               	bz	l15667
 16457                           
 16458                           ;main.c: 2732: *p = value;
 16459  00240E  C0C0  FFD9         	movff	printMDF@p,fsr2l
 16460  002412  C0C1  FFDA         	movff	printMDF@p+1,fsr2h
 16461  002416  C0BF  FFDF         	movff	printMDF@value,indf2
 16462  00241A                     l15665:
 16463                           
 16464                           ;main.c: 2733: p++;
 16465  00241A  0100               	movlb	0	; () banked
 16466  00241C  4BC0               	infsnz	printMDF@p& (0+255),f,b
 16467  00241E  2BC1               	incf	(printMDF@p+1)& (0+255),f,b
 16468                           
 16469                           ;main.c: 2735: }
 16470  002420  D007               	goto	l15671
 16471  002422                     l15667:
 16472                           
 16473                           ;main.c: 2736: else {
 16474                           ;main.c: 2737: *p = '?';
 16475  002422  C0C0  FFD9         	movff	printMDF@p,fsr2l
 16476  002426  C0C1  FFDA         	movff	printMDF@p+1,fsr2h
 16477  00242A  0E3F               	movlw	63
 16478  00242C  6EDF               	movwf	indf2,c
 16479  00242E  D7F5               	goto	l15665
 16480  002430                     l15671:
 16481                           
 16482                           ; BSR set to: 0
 16483  002430  2BC2               	incf	printMDF@i& (0+255),f,b
 16484                           
 16485                           ; BSR set to: 0
 16486  002432  0E1F               	movlw	31
 16487  002434  65C2               	cpfsgt	printMDF@i& (0+255),b
 16488  002436  D7DE               	goto	l15661
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;main.c: 2739: }
 16492                           ;main.c: 2740: }
 16493                           ;main.c: 2742: putsUSART(wrkbuf);
 16494  002438  0E01               	movlw	high _wrkbuf
 16495  00243A  0100               	movlb	0	; () banked
 16496  00243C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16497  00243E  0E7B               	movlw	low _wrkbuf
 16498  002440  6F61               	movwf	?_putsUSART& (0+255),b
 16499  002442  EC2D  F00E         	call	_putsUSART	;wreg free
 16500                           
 16501                           ;main.c: 2743: putsUSART((char *) "\r\n");
 16502  002446  0E71               	movlw	high (STR_197+50)
 16503  002448  0100               	movlb	0	; () banked
 16504  00244A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16505  00244C  0EC0               	movlw	low (STR_197+50)
 16506  00244E  6F61               	movwf	?_putsUSART& (0+255),b
 16507  002450  EF2D  F00E         	goto	_putsUSART	;wreg free
 16508  002454                     __end_of_printMDF:
 16509                           	opt stack 0
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodh	equ	0xFF4
 16515                           prodl	equ	0xFF3
 16516                           intcon	equ	0xFF2
 16517                           indf0	equ	0xFEF
 16518                           postinc0	equ	0xFEE
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           indf1	equ	0xFE7
 16523                           postinc1	equ	0xFE6
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           plusw2	equ	0xFDB
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           
 16535 ;; *************** function _printGUID *****************
 16536 ;; Defined at:
 16537 ;;		line 2679 in file "main.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;  nodeid          1    wreg     unsigned char 
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16542 ;;  buf             3   95[BANK0 ] unsigned char [3]
 16543 ;;  i               1   99[BANK0 ] unsigned char 
 16544 ;;  value           1   98[BANK0 ] unsigned char 
 16545 ;; Return value:  Size  Location     Type
 16546 ;;		None               void
 16547 ;; Registers used:
 16548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16549 ;; Tracked objects:
 16550 ;;		On entry : D/2
 16551 ;;		On exit  : 0/0
 16552 ;;		Unchanged: 0/0
 16553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16554 ;;      Params:         0       0       0       0       0       0       0
 16555 ;;      Locals:         0       6       0       0       0       0       0
 16556 ;;      Temps:          0       0       0       0       0       0       0
 16557 ;;      Totals:         0       6       0       0       0       0       0
 16558 ;;Total ram usage:        6 bytes
 16559 ;; Hardware stack levels used:    1
 16560 ;; Hardware stack levels required when called:    8
 16561 ;; This function calls:
 16562 ;;		_putsUSART
 16563 ;;		_memset
 16564 ;;		_strlen
 16565 ;;		_itoa
 16566 ;;		_readRegister
 16567 ;;		_strcat
 16568 ;; This function is called by:
 16569 ;;		_doModeVerbose
 16570 ;;		_findNodes
 16571 ;; This function uses a non-reentrant model
 16572 ;;
 16573                           
 16574                           	psect	text30
 16575  003272                     __ptext30:
 16576                           	opt stack 0
 16577  003272                     _printGUID:
 16578                           	opt stack 20
 16579                           
 16580                           ;incstack = 0
 16581                           ;incstack = 0
 16582                           ;printGUID@nodeid stored from wreg
 16583  003272  CFE8 F0BE          	movff	wreg,printGUID@nodeid
 16584                           
 16585                           ;main.c: 2680: uint8_t i;
 16586                           ;main.c: 2681: uint8_t value;
 16587                           ;main.c: 2682: char buf[3];
 16588                           ;main.c: 2684: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16589  003276  0E01               	movlw	high _wrkbuf
 16590  003278  0100               	movlb	0	; () banked
 16591  00327A  6F61               	movwf	(?_memset+1)& (0+255),b
 16592  00327C  0E7B               	movlw	low _wrkbuf
 16593  00327E  6F60               	movwf	?_memset& (0+255),b
 16594  003280  6B63               	clrf	(?_memset+3)& (0+255),b
 16595  003282  6B62               	clrf	(?_memset+2)& (0+255),b
 16596  003284  6B65               	clrf	(?_memset+5)& (0+255),b
 16597  003286  0E50               	movlw	80
 16598  003288  6F64               	movwf	(?_memset+4)& (0+255),b
 16599  00328A  ECC8  F00B         	call	_memset	;wreg free
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;main.c: 2685: putsUSART((char *) "GUID = ");
 16603  00328E  0E7B               	movlw	high STR_243
 16604  003290  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16605  003292  0EE6               	movlw	low STR_243
 16606  003294  6F61               	movwf	?_putsUSART& (0+255),b
 16607  003296  EC2D  F00E         	call	_putsUSART	;wreg free
 16608                           
 16609                           ;main.c: 2687: for (i = 0; i < 16; i++) {
 16610  00329A  0100               	movlb	0	; () banked
 16611  00329C  6BC3               	clrf	printGUID@i& (0+255),b
 16612  00329E                     l15627:
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;main.c: 2688: if (readRegister(nodeid,
 16616                           ;main.c: 2689: 0xD0 + i,
 16617                           ;main.c: 2690: rwtimeout,
 16618                           ;main.c: 2691: &value)) {
 16619  00329E  51C3               	movf	printGUID@i& (0+255),w,b
 16620  0032A0  0FD0               	addlw	208
 16621  0032A2  6FB5               	movwf	?_readRegister& (0+255),b
 16622  0032A4  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16623  0032A8  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16624  0032AA  0EC2               	movlw	low printGUID@value
 16625  0032AC  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16626  0032AE  51BE               	movf	printGUID@nodeid& (0+255),w,b
 16627  0032B0  ECB6  F013         	call	_readRegister
 16628  0032B4  0900               	iorlw	0
 16629  0032B6  E029               	bz	l15637
 16630                           
 16631                           ;main.c: 2692: itoa(buf, value, 16);
 16632  0032B8  0100               	movlb	0	; () banked
 16633  0032BA  0E00               	movlw	high printGUID@buf
 16634  0032BC  6F71               	movwf	(?_itoa+1)& (0+255),b
 16635  0032BE  0EBF               	movlw	low printGUID@buf
 16636  0032C0  6F70               	movwf	?_itoa& (0+255),b
 16637  0032C2  C0C2  F072         	movff	printGUID@value,?_itoa+2
 16638  0032C6  6B73               	clrf	(?_itoa+3)& (0+255),b
 16639  0032C8  6B75               	clrf	(?_itoa+5)& (0+255),b
 16640  0032CA  0E10               	movlw	16
 16641  0032CC  6F74               	movwf	(?_itoa+4)& (0+255),b
 16642  0032CE  EC40  F00C         	call	_itoa	;wreg free
 16643                           
 16644                           ; BSR set to: 0
 16645                           ;main.c: 2693: if (1 == strlen(buf)) {
 16646  0032D2  0E00               	movlw	high printGUID@buf
 16647  0032D4  6F61               	movwf	(?_strlen+1)& (0+255),b
 16648  0032D6  0EBF               	movlw	low printGUID@buf
 16649  0032D8  6F60               	movwf	?_strlen& (0+255),b
 16650  0032DA  EC12  F00D         	call	_strlen	;wreg free
 16651  0032DE  0560               	decf	?_strlen& (0+255),w,b
 16652  0032E0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16653  0032E2  E10F               	bnz	l15635
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;main.c: 2694: strcat(wrkbuf, "0");
 16657  0032E4  0E01               	movlw	high _wrkbuf
 16658  0032E6  0100               	movlb	0	; () banked
 16659  0032E8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16660  0032EA  0E7B               	movlw	low _wrkbuf
 16661  0032EC  6F60               	movwf	?_strcat& (0+255),b
 16662  0032EE  0E7C               	movlw	high STR_244
 16663  0032F0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16664  0032F2  0EF9               	movlw	low STR_244
 16665  0032F4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16666  0032F6  EC59  F00E         	call	_strcat	;wreg free
 16667                           
 16668                           ;main.c: 2695: strcat(wrkbuf, buf);
 16669  0032FA  D832               	call	PL68	;call to abstracted procedure
 16670  0032FC  EC59  F00E         	call	_strcat	;wreg free
 16671                           
 16672                           ;main.c: 2696: } else {
 16673  003300  D00F               	goto	l15639
 16674  003302                     l15635:
 16675                           
 16676                           ; BSR set to: 0
 16677                           ;main.c: 2697: strcat(wrkbuf, buf);
 16678  003302  D82E               	call	PL68	;call to abstracted procedure
 16679  003304  EC59  F00E         	call	_strcat	;wreg free
 16680  003308  D00B               	goto	l15639
 16681  00330A                     l15637:
 16682                           
 16683                           ;main.c: 2701: strcat(wrkbuf, "--");
 16684  00330A  0E01               	movlw	high _wrkbuf
 16685  00330C  0100               	movlb	0	; () banked
 16686  00330E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16687  003310  0E7B               	movlw	low _wrkbuf
 16688  003312  6F60               	movwf	?_strcat& (0+255),b
 16689  003314  0E7C               	movlw	high STR_245
 16690  003316  6F63               	movwf	(?_strcat+3)& (0+255),b
 16691  003318  0EE5               	movlw	low STR_245
 16692  00331A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16693  00331C  EC59  F00E         	call	_strcat	;wreg free
 16694  003320                     l15639:
 16695                           
 16696                           ;main.c: 2702: }
 16697                           ;main.c: 2704: if (i < 15) {
 16698  003320  0E0F               	movlw	15
 16699  003322  0100               	movlb	0	; () banked
 16700  003324  61C3               	cpfslt	printGUID@i& (0+255),b
 16701  003326  D00A               	goto	l15643
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;main.c: 2705: strcat(wrkbuf, ":");
 16705  003328  0E01               	movlw	high _wrkbuf
 16706  00332A  6F61               	movwf	(?_strcat+1)& (0+255),b
 16707  00332C  0E7B               	movlw	low _wrkbuf
 16708  00332E  6F60               	movwf	?_strcat& (0+255),b
 16709  003330  0E7C               	movlw	high STR_246
 16710  003332  6F63               	movwf	(?_strcat+3)& (0+255),b
 16711  003334  0EFB               	movlw	low STR_246
 16712  003336  6F62               	movwf	(?_strcat+2)& (0+255),b
 16713  003338  EC59  F00E         	call	_strcat	;wreg free
 16714  00333C                     l15643:
 16715  00333C  0100               	movlb	0	; () banked
 16716  00333E  2BC3               	incf	printGUID@i& (0+255),f,b
 16717                           
 16718                           ; BSR set to: 0
 16719  003340  0E0F               	movlw	15
 16720  003342  65C3               	cpfsgt	printGUID@i& (0+255),b
 16721  003344  D7AC               	goto	l15627
 16722                           
 16723                           ; BSR set to: 0
 16724                           ;main.c: 2706: }
 16725                           ;main.c: 2708: }
 16726                           ;main.c: 2710: putsUSART(wrkbuf);
 16727  003346  0E01               	movlw	high _wrkbuf
 16728  003348  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16729  00334A  0E7B               	movlw	low _wrkbuf
 16730  00334C  6F61               	movwf	?_putsUSART& (0+255),b
 16731  00334E  EC2D  F00E         	call	_putsUSART	;wreg free
 16732                           
 16733                           ;main.c: 2711: putsUSART((char *) "\r\n");
 16734  003352  0E71               	movlw	high (STR_197+50)
 16735  003354  0100               	movlb	0	; () banked
 16736  003356  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16737  003358  0EC0               	movlw	low (STR_197+50)
 16738  00335A  6F61               	movwf	?_putsUSART& (0+255),b
 16739  00335C  EF2D  F00E         	goto	_putsUSART	;wreg free
 16740  003360                     __end_of_printGUID:
 16741                           	opt stack 0
 16742  003360                     PL68:
 16743                           	opt stack 20
 16744  003360  0E01               	movlw	high _wrkbuf
 16745  003362  0100               	movlb	0	; () banked
 16746  003364  6F61               	movwf	(?_strcat+1)& (0+255),b
 16747  003366  0E7B               	movlw	low _wrkbuf
 16748  003368  6F60               	movwf	?_strcat& (0+255),b
 16749  00336A  0E00               	movlw	high printGUID@buf
 16750  00336C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16751  00336E  0EBF               	movlw	low printGUID@buf
 16752  003370  6F62               	movwf	(?_strcat+2)& (0+255),b
 16753  003372  0012               	return	
 16754  003374                     __end_ofPL68:
 16755                           	opt stack 0
 16756                           tblptru	equ	0xFF8
 16757                           tblptrh	equ	0xFF7
 16758                           tblptrl	equ	0xFF6
 16759                           tablat	equ	0xFF5
 16760                           prodh	equ	0xFF4
 16761                           prodl	equ	0xFF3
 16762                           intcon	equ	0xFF2
 16763                           indf0	equ	0xFEF
 16764                           postinc0	equ	0xFEE
 16765                           fsr0h	equ	0xFEA
 16766                           fsr0l	equ	0xFE9
 16767                           wreg	equ	0xFE8
 16768                           indf1	equ	0xFE7
 16769                           postinc1	equ	0xFE6
 16770                           postdec1	equ	0xFE5
 16771                           fsr1h	equ	0xFE2
 16772                           fsr1l	equ	0xFE1
 16773                           indf2	equ	0xFDF
 16774                           postinc2	equ	0xFDE
 16775                           postdec2	equ	0xFDD
 16776                           plusw2	equ	0xFDB
 16777                           fsr2h	equ	0xFDA
 16778                           fsr2l	equ	0xFD9
 16779                           status	equ	0xFD8
 16780                           
 16781 ;; *************** function _printNodeFirmwareVersion *****************
 16782 ;; Defined at:
 16783 ;;		line 2751 in file "main.c"
 16784 ;; Parameters:    Size  Location     Type
 16785 ;;  nodeid          1    wreg     unsigned char 
 16786 ;; Auto vars:     Size  Location     Type
 16787 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16788 ;;  buf             3   95[BANK0 ] unsigned char [3]
 16789 ;;  i               1   99[BANK0 ] unsigned char 
 16790 ;;  value           1   98[BANK0 ] unsigned char 
 16791 ;; Return value:  Size  Location     Type
 16792 ;;		None               void
 16793 ;; Registers used:
 16794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16795 ;; Tracked objects:
 16796 ;;		On entry : D/2
 16797 ;;		On exit  : 0/0
 16798 ;;		Unchanged: 0/0
 16799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16800 ;;      Params:         0       0       0       0       0       0       0
 16801 ;;      Locals:         0       6       0       0       0       0       0
 16802 ;;      Temps:          0       0       0       0       0       0       0
 16803 ;;      Totals:         0       6       0       0       0       0       0
 16804 ;;Total ram usage:        6 bytes
 16805 ;; Hardware stack levels used:    1
 16806 ;; Hardware stack levels required when called:    8
 16807 ;; This function calls:
 16808 ;;		_putsUSART
 16809 ;;		_memset
 16810 ;;		_itoa
 16811 ;;		_readRegister
 16812 ;;		_strcat
 16813 ;; This function is called by:
 16814 ;;		_doModeVerbose
 16815 ;;		_findNodes
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           	psect	text31
 16820  002C6C                     __ptext31:
 16821                           	opt stack 0
 16822  002C6C                     _printNodeFirmwareVersion:
 16823                           	opt stack 20
 16824                           
 16825                           ;incstack = 0
 16826                           ;incstack = 0
 16827                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16828  002C6C  CFE8 F0BE          	movff	wreg,printNodeFirmwareVersion@nodeid
 16829                           
 16830                           ;main.c: 2752: uint8_t i;
 16831                           ;main.c: 2753: uint8_t value;
 16832                           ;main.c: 2754: char buf[3];
 16833                           ;main.c: 2756: memset( wrkbuf, 0, sizeof(wrkbuf) );
 16834  002C70  0E01               	movlw	high _wrkbuf
 16835  002C72  0100               	movlb	0	; () banked
 16836  002C74  6F61               	movwf	(?_memset+1)& (0+255),b
 16837  002C76  0E7B               	movlw	low _wrkbuf
 16838  002C78  6F60               	movwf	?_memset& (0+255),b
 16839  002C7A  6B63               	clrf	(?_memset+3)& (0+255),b
 16840  002C7C  6B62               	clrf	(?_memset+2)& (0+255),b
 16841  002C7E  6B65               	clrf	(?_memset+5)& (0+255),b
 16842  002C80  0E50               	movlw	80
 16843  002C82  6F64               	movwf	(?_memset+4)& (0+255),b
 16844  002C84  ECC8  F00B         	call	_memset	;wreg free
 16845                           
 16846                           ; BSR set to: 0
 16847                           ;main.c: 2757: putsUSART((char *) "Firmware version = ");
 16848  002C88  0E7A               	movlw	high STR_250
 16849  002C8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16850  002C8C  0EBF               	movlw	low STR_250
 16851  002C8E  6F61               	movwf	?_putsUSART& (0+255),b
 16852  002C90  EC2D  F00E         	call	_putsUSART	;wreg free
 16853                           
 16854                           ;main.c: 2759: for (i = 0; i < 3; i++) {
 16855  002C94  0100               	movlb	0	; () banked
 16856  002C96  6BC3               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16857  002C98                     l15599:
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;main.c: 2760: if (readRegister(nodeid,
 16861                           ;main.c: 2761: 0x94 + i,
 16862                           ;main.c: 2762: rwtimeout,
 16863                           ;main.c: 2763: &value)) {
 16864  002C98  51C3               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16865  002C9A  0F94               	addlw	148
 16866  002C9C  6FB5               	movwf	?_readRegister& (0+255),b
 16867  002C9E  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16868  002CA2  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16869  002CA4  0EC2               	movlw	low printNodeFirmwareVersion@value
 16870  002CA6  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16871  002CA8  51BE               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16872  002CAA  ECB6  F013         	call	_readRegister
 16873  002CAE  0900               	iorlw	0
 16874  002CB0  E019               	bz	l15605
 16875                           
 16876                           ;main.c: 2764: itoa(buf, value, 16);
 16877  002CB2  0100               	movlb	0	; () banked
 16878  002CB4  0E00               	movlw	high printNodeFirmwareVersion@buf
 16879  002CB6  6F71               	movwf	(?_itoa+1)& (0+255),b
 16880  002CB8  0EBF               	movlw	low printNodeFirmwareVersion@buf
 16881  002CBA  6F70               	movwf	?_itoa& (0+255),b
 16882  002CBC  C0C2  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16883  002CC0  6B73               	clrf	(?_itoa+3)& (0+255),b
 16884  002CC2  6B75               	clrf	(?_itoa+5)& (0+255),b
 16885  002CC4  0E10               	movlw	16
 16886  002CC6  6F74               	movwf	(?_itoa+4)& (0+255),b
 16887  002CC8  EC40  F00C         	call	_itoa	;wreg free
 16888                           
 16889                           ; BSR set to: 0
 16890                           ;main.c: 2765: strcat(wrkbuf, buf);
 16891  002CCC  0E01               	movlw	high _wrkbuf
 16892  002CCE  0100               	movlb	0	; () banked
 16893  002CD0  6F61               	movwf	(?_strcat+1)& (0+255),b
 16894  002CD2  0E7B               	movlw	low _wrkbuf
 16895  002CD4  6F60               	movwf	?_strcat& (0+255),b
 16896  002CD6  0E00               	movlw	high printNodeFirmwareVersion@buf
 16897  002CD8  6F63               	movwf	(?_strcat+3)& (0+255),b
 16898  002CDA  0EBF               	movlw	low printNodeFirmwareVersion@buf
 16899  002CDC  6F62               	movwf	(?_strcat+2)& (0+255),b
 16900  002CDE  EC59  F00E         	call	_strcat	;wreg free
 16901                           
 16902                           ;main.c: 2766: }
 16903  002CE2  D00B               	goto	l15607
 16904  002CE4                     l15605:
 16905                           
 16906                           ;main.c: 2767: else {
 16907                           ;main.c: 2768: strcat(wrkbuf, "?");
 16908  002CE4  0E01               	movlw	high _wrkbuf
 16909  002CE6  0100               	movlb	0	; () banked
 16910  002CE8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16911  002CEA  0E7B               	movlw	low _wrkbuf
 16912  002CEC  6F60               	movwf	?_strcat& (0+255),b
 16913  002CEE  0E7C               	movlw	high STR_251
 16914  002CF0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16915  002CF2  0EFD               	movlw	low STR_251
 16916  002CF4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16917  002CF6  EC59  F00E         	call	_strcat	;wreg free
 16918  002CFA                     l15607:
 16919                           
 16920                           ;main.c: 2769: }
 16921                           ;main.c: 2771: if (i < 2) {
 16922  002CFA  0E02               	movlw	2
 16923  002CFC  0100               	movlb	0	; () banked
 16924  002CFE  61C3               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16925  002D00  D00A               	goto	l15611
 16926                           
 16927                           ; BSR set to: 0
 16928                           ;main.c: 2772: strcat(wrkbuf, ".");
 16929  002D02  0E01               	movlw	high _wrkbuf
 16930  002D04  6F61               	movwf	(?_strcat+1)& (0+255),b
 16931  002D06  0E7B               	movlw	low _wrkbuf
 16932  002D08  6F60               	movwf	?_strcat& (0+255),b
 16933  002D0A  0E7C               	movlw	high STR_252
 16934  002D0C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16935  002D0E  0EF7               	movlw	low STR_252
 16936  002D10  6F62               	movwf	(?_strcat+2)& (0+255),b
 16937  002D12  EC59  F00E         	call	_strcat	;wreg free
 16938  002D16                     l15611:
 16939  002D16  0100               	movlb	0	; () banked
 16940  002D18  2BC3               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16941                           
 16942                           ; BSR set to: 0
 16943  002D1A  0E02               	movlw	2
 16944  002D1C  65C3               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16945  002D1E  D7BC               	goto	l15599
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;main.c: 2773: }
 16949                           ;main.c: 2775: }
 16950                           ;main.c: 2777: putsUSART(wrkbuf);
 16951  002D20  0E01               	movlw	high _wrkbuf
 16952  002D22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16953  002D24  0E7B               	movlw	low _wrkbuf
 16954  002D26  6F61               	movwf	?_putsUSART& (0+255),b
 16955  002D28  EC2D  F00E         	call	_putsUSART	;wreg free
 16956                           
 16957                           ;main.c: 2778: putsUSART((char *) "\r\n");
 16958  002D2C  0E71               	movlw	high (STR_197+50)
 16959  002D2E  0100               	movlb	0	; () banked
 16960  002D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16961  002D32  0EC0               	movlw	low (STR_197+50)
 16962  002D34  6F61               	movwf	?_putsUSART& (0+255),b
 16963  002D36  EF2D  F00E         	goto	_putsUSART	;wreg free
 16964  002D3A                     __end_of_printNodeFirmwareVersion:
 16965                           	opt stack 0
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           indf0	equ	0xFEF
 16974                           postinc0	equ	0xFEE
 16975                           fsr0h	equ	0xFEA
 16976                           fsr0l	equ	0xFE9
 16977                           wreg	equ	0xFE8
 16978                           indf1	equ	0xFE7
 16979                           postinc1	equ	0xFE6
 16980                           postdec1	equ	0xFE5
 16981                           fsr1h	equ	0xFE2
 16982                           fsr1l	equ	0xFE1
 16983                           indf2	equ	0xFDF
 16984                           postinc2	equ	0xFDE
 16985                           postdec2	equ	0xFDD
 16986                           plusw2	equ	0xFDB
 16987                           fsr2h	equ	0xFDA
 16988                           fsr2l	equ	0xFD9
 16989                           status	equ	0xFD8
 16990                           
 16991 ;; *************** function _strcat *****************
 16992 ;; Defined at:
 16993 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16994 ;; Parameters:    Size  Location     Type
 16995 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16996 ;;		 -> wrkbuf(80), 
 16997 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16998 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16999 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17002 ;;		 -> wrkbuf(80), 
 17003 ;; Return value:  Size  Location     Type
 17004 ;;                  2    0[BANK0 ] PTR unsigned char 
 17005 ;; Registers used:
 17006 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17007 ;; Tracked objects:
 17008 ;;		On entry : F/0
 17009 ;;		On exit  : 0/0
 17010 ;;		Unchanged: 0/0
 17011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17012 ;;      Params:         0       4       0       0       0       0       0
 17013 ;;      Locals:         0       2       0       0       0       0       0
 17014 ;;      Temps:          0       0       0       0       0       0       0
 17015 ;;      Totals:         0       6       0       0       0       0       0
 17016 ;;Total ram usage:        6 bytes
 17017 ;; Hardware stack levels used:    1
 17018 ;; Hardware stack levels required when called:    3
 17019 ;; This function calls:
 17020 ;;		Nothing
 17021 ;; This function is called by:
 17022 ;;		_printGUID
 17023 ;;		_printNodeFirmwareVersion
 17024 ;; This function uses a non-reentrant model
 17025 ;;
 17026                           
 17027                           	psect	text32
 17028  001CB2                     __ptext32:
 17029                           	opt stack 0
 17030  001CB2                     _strcat:
 17031                           	opt stack 24
 17032                           
 17033                           ; BSR set to: 0
 17034                           
 17035                           ;incstack = 0
 17036                           ;incstack = 0
 17037  001CB2  C060  F064         	movff	strcat@to,strcat@cp
 17038  001CB6  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17039  001CBA  D002               	goto	l16271
 17040  001CBC                     l16269:
 17041                           
 17042                           ; BSR set to: 0
 17043  001CBC  4B64               	infsnz	strcat@cp& (0+255),f,b
 17044  001CBE  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17045  001CC0                     l16271:
 17046                           
 17047                           ; BSR set to: 0
 17048  001CC0  C064  FFD9         	movff	strcat@cp,fsr2l
 17049  001CC4  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17050  001CC8  50DF               	movf	indf2,w,c
 17051  001CCA  E006               	bz	l16275
 17052  001CCC  D7F7               	goto	l16269
 17053  001CCE                     l16273:
 17054  001CCE  0100               	movlb	0	; () banked
 17055  001CD0  4B64               	infsnz	strcat@cp& (0+255),f,b
 17056  001CD2  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17057  001CD4  4B62               	infsnz	strcat@from& (0+255),f,b
 17058  001CD6  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17059  001CD8                     l16275:
 17060                           
 17061                           ; BSR set to: 0
 17062  001CD8  C062  FFF6         	movff	strcat@from,tblptrl
 17063  001CDC  C063  FFF7         	movff	strcat@from+1,tblptrh
 17064  001CE0  6AF8               	clrf	tblptru,c
 17065  001CE2  C064  FFD9         	movff	strcat@cp,fsr2l
 17066  001CE6  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17067  001CEA  0E05               	movlw	(high __ramtop+-1)
 17068  001CEC  64F7               	cpfsgt	tblptrh,c
 17069  001CEE  D003               	bra	u22397
 17070  001CF0  0008               	tblrd		*
 17071  001CF2  50F5               	movf	tablat,w,c
 17072  001CF4  D005               	bra	u22390
 17073  001CF6                     u22397:
 17074  001CF6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17075  001CFA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17076  001CFE  50EF               	movf	indf0,w,c
 17077  001D00                     u22390:
 17078  001D00  6EDF               	movwf	indf2,c
 17079  001D02  50DF               	movf	indf2,w,c
 17080  001D04  B4D8               	btfsc	status,2,c
 17081  001D06  0012               	return	
 17082  001D08  D7E2               	goto	l16273
 17083  001D0A                     __end_of_strcat:
 17084                           	opt stack 0
 17085                           tblptru	equ	0xFF8
 17086                           tblptrh	equ	0xFF7
 17087                           tblptrl	equ	0xFF6
 17088                           tablat	equ	0xFF5
 17089                           prodh	equ	0xFF4
 17090                           prodl	equ	0xFF3
 17091                           intcon	equ	0xFF2
 17092                           indf0	equ	0xFEF
 17093                           postinc0	equ	0xFEE
 17094                           fsr0h	equ	0xFEA
 17095                           fsr0l	equ	0xFE9
 17096                           wreg	equ	0xFE8
 17097                           indf1	equ	0xFE7
 17098                           postinc1	equ	0xFE6
 17099                           postdec1	equ	0xFE5
 17100                           fsr1h	equ	0xFE2
 17101                           fsr1l	equ	0xFE1
 17102                           indf2	equ	0xFDF
 17103                           postinc2	equ	0xFDE
 17104                           postdec2	equ	0xFDD
 17105                           plusw2	equ	0xFDB
 17106                           fsr2h	equ	0xFDA
 17107                           fsr2l	equ	0xFD9
 17108                           status	equ	0xFD8
 17109                           
 17110 ;; *************** function _readRegister *****************
 17111 ;; Defined at:
 17112 ;;		line 2254 in file "main.c"
 17113 ;; Parameters:    Size  Location     Type
 17114 ;;  nodeid          1    wreg     unsigned char 
 17115 ;;  reg             1   85[BANK0 ] unsigned char 
 17116 ;;  timeout         2   86[BANK0 ] unsigned short 
 17117 ;;  value           1   88[BANK0 ] PTR unsigned char 
 17118 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17119 ;; Auto vars:     Size  Location     Type
 17120 ;;  nodeid          1   93[BANK0 ] unsigned char 
 17121 ;; Return value:  Size  Location     Type
 17122 ;;                  1    wreg      enum E15660
 17123 ;; Registers used:
 17124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17125 ;; Tracked objects:
 17126 ;;		On entry : F/0
 17127 ;;		On exit  : E/0
 17128 ;;		Unchanged: 0/0
 17129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17130 ;;      Params:         0       4       0       0       0       0       0
 17131 ;;      Locals:         0       1       0       0       0       0       0
 17132 ;;      Temps:          0       4       0       0       0       0       0
 17133 ;;      Totals:         0       9       0       0       0       0       0
 17134 ;;Total ram usage:        9 bytes
 17135 ;; Hardware stack levels used:    1
 17136 ;; Hardware stack levels required when called:    7
 17137 ;; This function calls:
 17138 ;;		_sendVSCPFrame
 17139 ;;		_getVSCPFrame
 17140 ;; This function is called by:
 17141 ;;		_findNodes
 17142 ;;		_printGUID
 17143 ;;		_printMDF
 17144 ;;		_printNodeFirmwareVersion
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	text33
 17149  00276C                     __ptext33:
 17150                           	opt stack 0
 17151  00276C                     _readRegister:
 17152                           	opt stack 20
 17153                           
 17154                           ;incstack = 0
 17155                           ;incstack = 0
 17156                           ;readRegister@nodeid stored from wreg
 17157  00276C  CFE8 F0BD          	movff	wreg,readRegister@nodeid
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;main.c: 2255: vscpData[ 0 ] = nodeid;
 17161  002770  C0BD  F034         	movff	readRegister@nodeid,_vscpData
 17162                           
 17163                           ; BSR set to: 0
 17164                           ;main.c: 2256: vscpData[ 1 ] = reg;
 17165  002774  C0B5  F035         	movff	readRegister@reg,_vscpData+1
 17166                           
 17167                           ; BSR set to: 0
 17168                           ;main.c: 2258: if (sendVSCPFrame(0,
 17169                           ;main.c: 2259: 9,
 17170                           ;main.c: 2260: 0,
 17171                           ;main.c: 2261: 0,
 17172                           ;main.c: 2262: 2,
 17173                           ;main.c: 2263: vscpData)) {
 17174  002778  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17175  00277A  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17176  00277C  0E09               	movlw	9
 17177  00277E  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17178  002780  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17179  002782  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17180  002784  0E02               	movlw	2
 17181  002786  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17182  002788  0E34               	movlw	low _vscpData
 17183  00278A  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17184  00278C  EC13  F015         	call	_sendVSCPFrame	;wreg free
 17185  002790  0900               	iorlw	0
 17186  002792  E03C               	bz	l16263
 17187                           
 17188                           ;main.c: 2265: timekeeper = 0;
 17189  002794  6A22               	clrf	_timekeeper,c	;volatile
 17190  002796  6A23               	clrf	_timekeeper+1,c	;volatile
 17191  002798  6A24               	clrf	_timekeeper+2,c	;volatile
 17192  00279A  6A25               	clrf	_timekeeper+3,c	;volatile
 17193                           
 17194                           ;main.c: 2266: while (timekeeper < timeout) {
 17195  00279C  D027               	goto	l16261
 17196  00279E                     l1081:
 17197                           
 17198                           ; BSR set to: 0
 17199  00279E  0004               	clrwdt		;# 
 17200                           
 17201                           ;main.c: 2270: if (getVSCPFrame(&vscpClass,
 17202                           ;main.c: 2271: &vscpType,
 17203                           ;main.c: 2272: &vscpNodeId,
 17204                           ;main.c: 2273: &vscpPriority,
 17205                           ;main.c: 2274: &vscpSize,
 17206                           ;main.c: 2275: vscpData)) {
 17207  0027A0  0100               	movlb	0	; () banked
 17208  0027A2  0EEC               	movlw	low _vscpType
 17209  0027A4  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17210  0027A6  0EE9               	movlw	low _vscpNodeId
 17211  0027A8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17212  0027AA  0EEA               	movlw	low _vscpPriority
 17213  0027AC  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17214  0027AE  0EEB               	movlw	low _vscpSize
 17215  0027B0  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17216  0027B2  0E34               	movlw	low _vscpData
 17217  0027B4  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17218  0027B6  0E3C               	movlw	_vscpClass& (0+255)
 17219  0027B8  EC0E  F011         	call	_getVSCPFrame
 17220  0027BC  0900               	iorlw	0
 17221  0027BE  E016               	bz	l16261
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;main.c: 2276: if ((nodeid == vscpNodeId) &&
 17225                           ;main.c: 2277: (0 == vscpClass) &&
 17226                           ;main.c: 2278: (10 == vscpType) &&
 17227                           ;main.c: 2279: (2 == vscpSize) &&
 17228                           ;main.c: 2280: (reg == vscpData[ 0 ])) {
 17229  0027C0  51E9               	movf	_vscpNodeId& (0+255),w,b
 17230  0027C2  63BD               	cpfseq	readRegister@nodeid& (0+255),b
 17231  0027C4  D013               	goto	l16261
 17232                           
 17233                           ; BSR set to: 0
 17234  0027C6  503D               	movf	_vscpClass+1,w,c
 17235  0027C8  103C               	iorwf	_vscpClass,w,c
 17236  0027CA  E110               	bnz	l16261
 17237                           
 17238                           ; BSR set to: 0
 17239  0027CC  51EC               	movf	_vscpType& (0+255),w,b
 17240  0027CE  0A0A               	xorlw	10
 17241  0027D0  E10D               	bnz	l16261
 17242                           
 17243                           ; BSR set to: 0
 17244  0027D2  51EB               	movf	_vscpSize& (0+255),w,b
 17245  0027D4  0A02               	xorlw	2
 17246  0027D6  E10A               	bnz	l16261
 17247                           
 17248                           ; BSR set to: 0
 17249  0027D8  5034               	movf	_vscpData,w,c
 17250  0027DA  63B5               	cpfseq	readRegister@reg& (0+255),b
 17251  0027DC  D007               	goto	l16261
 17252                           
 17253                           ; BSR set to: 0
 17254                           ;main.c: 2281: *value = vscpData[ 1 ];
 17255  0027DE  51B8               	movf	readRegister@value& (0+255),w,b
 17256  0027E0  6ED9               	movwf	fsr2l,c
 17257  0027E2  6ADA               	clrf	fsr2h,c
 17258  0027E4  C035  FFDF         	movff	_vscpData+1,indf2
 17259                           
 17260                           ; BSR set to: 0
 17261                           ;main.c: 2282: return 1;
 17262  0027E8  0E01               	movlw	1
 17263  0027EA  D011               	goto	l1084
 17264  0027EC                     l16261:
 17265  0027EC  0100               	movlb	0	; () banked
 17266  0027EE  51B6               	movf	readRegister@timeout& (0+255),w,b
 17267  0027F0  6FB9               	movwf	??_readRegister& (0+255),b
 17268  0027F2  51B7               	movf	(readRegister@timeout+1)& (0+255),w,b
 17269  0027F4  6FBA               	movwf	(??_readRegister+1)& (0+255),b
 17270  0027F6  6BBB               	clrf	(??_readRegister+2)& (0+255),b
 17271  0027F8  6BBC               	clrf	(??_readRegister+3)& (0+255),b
 17272  0027FA  51B9               	movf	??_readRegister& (0+255),w,b
 17273  0027FC  5C22               	subwf	_timekeeper,w,c	;volatile
 17274  0027FE  51BA               	movf	(??_readRegister+1)& (0+255),w,b
 17275  002800  5823               	subwfb	_timekeeper+1,w,c	;volatile
 17276  002802  51BB               	movf	(??_readRegister+2)& (0+255),w,b
 17277  002804  5824               	subwfb	_timekeeper+2,w,c	;volatile
 17278  002806  51BC               	movf	(??_readRegister+3)& (0+255),w,b
 17279  002808  5825               	subwfb	_timekeeper+3,w,c	;volatile
 17280  00280A  E3C9               	bnc	l1081
 17281  00280C                     l16263:
 17282                           
 17283                           ;main.c: 2283: }
 17284                           ;main.c: 2284: }
 17285                           ;main.c: 2285: }
 17286                           ;main.c: 2286: }
 17287                           ;main.c: 2288: return 0;
 17288  00280C  0E00               	movlw	0
 17289  00280E                     l1084:
 17290  00280E  0012               	return	
 17291  002810                     __end_of_readRegister:
 17292                           	opt stack 0
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           intcon	equ	0xFF2
 17300                           indf0	equ	0xFEF
 17301                           postinc0	equ	0xFEE
 17302                           fsr0h	equ	0xFEA
 17303                           fsr0l	equ	0xFE9
 17304                           wreg	equ	0xFE8
 17305                           indf1	equ	0xFE7
 17306                           postinc1	equ	0xFE6
 17307                           postdec1	equ	0xFE5
 17308                           fsr1h	equ	0xFE2
 17309                           fsr1l	equ	0xFE1
 17310                           indf2	equ	0xFDF
 17311                           postinc2	equ	0xFDE
 17312                           postdec2	equ	0xFDD
 17313                           plusw2	equ	0xFDB
 17314                           fsr2h	equ	0xFDA
 17315                           fsr2l	equ	0xFD9
 17316                           status	equ	0xFD8
 17317                           
 17318 ;; *************** function _sendVSCPFrame *****************
 17319 ;; Defined at:
 17320 ;;		line 2975 in file "main.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17323 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17324 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17325 ;;  priority        1   58[BANK0 ] unsigned char 
 17326 ;;  size            1   59[BANK0 ] unsigned char 
 17327 ;;  pData           1   60[BANK0 ] PTR unsigned char 
 17328 ;;		 -> vscpData(8), 
 17329 ;; Auto vars:     Size  Location     Type
 17330 ;;  id              4   81[BANK0 ] unsigned long 
 17331 ;; Return value:  Size  Location     Type
 17332 ;;                  1    wreg      unsigned char 
 17333 ;; Registers used:
 17334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17335 ;; Tracked objects:
 17336 ;;		On entry : F/0
 17337 ;;		On exit  : E/0
 17338 ;;		Unchanged: 0/0
 17339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17340 ;;      Params:         0       7       0       0       0       0       0
 17341 ;;      Locals:         0       4       0       0       0       0       0
 17342 ;;      Temps:          0      20       0       0       0       0       0
 17343 ;;      Totals:         0      31       0       0       0       0       0
 17344 ;;Total ram usage:       31 bytes
 17345 ;; Hardware stack levels used:    1
 17346 ;; Hardware stack levels required when called:    6
 17347 ;; This function calls:
 17348 ;;		_sendCANFrame
 17349 ;; This function is called by:
 17350 ;;		_doModeVerbose
 17351 ;;		_readRegister
 17352 ;;		_readRegisterExtended
 17353 ;;		_writeRegisterExtended
 17354 ;; This function uses a non-reentrant model
 17355 ;;
 17356                           
 17357                           	psect	text34
 17358  002A26                     __ptext34:
 17359                           	opt stack 0
 17360  002A26                     _sendVSCPFrame:
 17361                           	opt stack 20
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;main.c: 2976: uint32_t id = ((uint32_t) priority << 26) |
 17365                           ;main.c: 2977: ((uint32_t) vscpclass << 16) |
 17366                           ;main.c: 2978: ((uint32_t) vscptype << 8) |
 17367                           ;main.c: 2979: nodeid;
 17368                           
 17369                           ;incstack = 0
 17370                           ;incstack = 0
 17371  002A26  C098  F09D         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17372  002A2A  6B9E               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17373  002A2C  6B9F               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17374  002A2E  6BA0               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17375  002A30  C09F  F0A0         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17376  002A34  C09E  F09F         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17377  002A38  C09D  F09E         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17378  002A3C  6B9D               	clrf	??_sendVSCPFrame& (0+255),b
 17379  002A3E  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17380  002A40  6FA1               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17381  002A42  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17382  002A44  6FA2               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17383  002A46  6BA3               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17384  002A48  6BA4               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17385  002A4A  C0A2  F0A4         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17386  002A4E  C0A1  F0A3         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17387  002A52  6BA2               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17388  002A54  6BA1               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17389  002A56  C09A  F0A5         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17390  002A5A  6BA6               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17391  002A5C  6BA7               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17392  002A5E  6BA8               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17393  002A60  0E1A               	movlw	26
 17394  002A62                     u20105:
 17395  002A62  90D8               	bcf	status,0,c
 17396  002A64  37A5               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17397  002A66  37A6               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17398  002A68  37A7               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17399  002A6A  37A8               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17400  002A6C  2EE8               	decfsz	wreg,f,c
 17401  002A6E  D7F9               	goto	u20105
 17402  002A70  51A1               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17403  002A72  11A5               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17404  002A74  6FA9               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17405  002A76  51A2               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17406  002A78  11A6               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17407  002A7A  6FAA               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17408  002A7C  51A3               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17409  002A7E  11A7               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17410  002A80  6FAB               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17411  002A82  51A4               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17412  002A84  11A8               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17413  002A86  6FAC               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17414  002A88  519D               	movf	??_sendVSCPFrame& (0+255),w,b
 17415  002A8A  11A9               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17416  002A8C  6FAD               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17417  002A8E  519E               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17418  002A90  11AA               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17419  002A92  6FAE               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17420  002A94  519F               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17421  002A96  11AB               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17422  002A98  6FAF               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17423  002A9A  51A0               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17424  002A9C  11AC               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17425  002A9E  6FB0               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17426  002AA0  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17427  002AA2  11AD               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17428  002AA4  6FB1               	movwf	sendVSCPFrame@id& (0+255),b
 17429  002AA6  51AE               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17430  002AA8  6FB2               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17431  002AAA  51AF               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17432  002AAC  6FB3               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17433  002AAE  51B0               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17434  002AB0  6FB4               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17435                           
 17436                           ; BSR set to: 0
 17437                           ;main.c: 2981: if (!sendCANFrame(id, size, pData)) {
 17438  002AB2  C0B1  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17439  002AB6  C0B2  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17440  002ABA  C0B3  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17441  002ABE  C0B4  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17442  002AC2  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17443  002AC6  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17444  002ACA  0E0F               	movlw	15
 17445  002ACC  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
 17446  002ACE  0E5F               	movlw	__accesstop+-1
 17447  002AD0  6594               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
 17448  002AD2  6B95               	clrf	(?_sendCANFrame+6)& (0+255),b
 17449  002AD4  EC78  F00C         	call	_sendCANFrame	;wreg free
 17450  002AD8  0900               	iorlw	0
 17451                           
 17452                           ;main.c: 2983: return 0;
 17453  002ADA  0E00               	movlw	0
 17454  002ADC  A4D8               	btfss	status,2,c
 17455                           
 17456                           ;main.c: 2984: }
 17457                           ;main.c: 2986: return 1;
 17458  002ADE  0E01               	movlw	1
 17459  002AE0  0012               	return	
 17460  002AE2                     __end_of_sendVSCPFrame:
 17461                           	opt stack 0
 17462                           tblptru	equ	0xFF8
 17463                           tblptrh	equ	0xFF7
 17464                           tblptrl	equ	0xFF6
 17465                           tablat	equ	0xFF5
 17466                           prodh	equ	0xFF4
 17467                           prodl	equ	0xFF3
 17468                           intcon	equ	0xFF2
 17469                           indf0	equ	0xFEF
 17470                           postinc0	equ	0xFEE
 17471                           fsr0h	equ	0xFEA
 17472                           fsr0l	equ	0xFE9
 17473                           wreg	equ	0xFE8
 17474                           indf1	equ	0xFE7
 17475                           postinc1	equ	0xFE6
 17476                           postdec1	equ	0xFE5
 17477                           fsr1h	equ	0xFE2
 17478                           fsr1l	equ	0xFE1
 17479                           indf2	equ	0xFDF
 17480                           postinc2	equ	0xFDE
 17481                           postdec2	equ	0xFDD
 17482                           plusw2	equ	0xFDB
 17483                           fsr2h	equ	0xFDA
 17484                           fsr2l	equ	0xFD9
 17485                           status	equ	0xFD8
 17486                           
 17487 ;; *************** function _sendCANFrame *****************
 17488 ;; Defined at:
 17489 ;;		line 3021 in file "main.c"
 17490 ;; Parameters:    Size  Location     Type
 17491 ;;  id              4   47[BANK0 ] unsigned long 
 17492 ;;  dlc             1   51[BANK0 ] unsigned char 
 17493 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17494 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17495 ;; Auto vars:     Size  Location     Type
 17496 ;;		None
 17497 ;; Return value:  Size  Location     Type
 17498 ;;                  1    wreg      unsigned char 
 17499 ;; Registers used:
 17500 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17501 ;; Tracked objects:
 17502 ;;		On entry : F/0
 17503 ;;		On exit  : E/0
 17504 ;;		Unchanged: 0/0
 17505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17506 ;;      Params:         0       7       0       0       0       0       0
 17507 ;;      Locals:         0       0       0       0       0       0       0
 17508 ;;      Temps:          0       0       0       0       0       0       0
 17509 ;;      Totals:         0       7       0       0       0       0       0
 17510 ;;Total ram usage:        7 bytes
 17511 ;; Hardware stack levels used:    1
 17512 ;; Hardware stack levels required when called:    5
 17513 ;; This function calls:
 17514 ;;		_ECANSendMessage
 17515 ;; This function is called by:
 17516 ;;		_doModeSLCAN
 17517 ;;		_receiveVSCPModeCanalMsg
 17518 ;;		_sendVSCPFrame
 17519 ;; This function uses a non-reentrant model
 17520 ;;
 17521                           
 17522                           	psect	text35
 17523  0018F0                     __ptext35:
 17524                           	opt stack 0
 17525  0018F0                     _sendCANFrame:
 17526                           	opt stack 23
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;main.c: 3022: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17530                           
 17531                           ;incstack = 0
 17532                           ;incstack = 0
 17533  0018F0  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17534  0018F4  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17535  0018F8  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17536  0018FC  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17537  001900  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17538  001904  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17539  001908  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17540  00190C  0E20               	movlw	32
 17541  00190E  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17542  001910  EC9A  F01C         	call	_ECANSendMessage	;wreg free
 17543  001914  0900               	iorlw	0
 17544  001916  E107               	bnz	l16109
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;main.c: 3024: can_transmitOverruns++;
 17548  001918  0101               	movlb	1	; () banked
 17549  00191A  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17550  00191C  0E00               	movlw	0
 17551  00191E  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17552  001920  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17553  001922  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17554                           
 17555                           ; BSR set to: 1
 17556                           ;main.c: 3025: return 0;
 17557  001924  D001               	goto	l1280
 17558  001926                     l16109:
 17559                           
 17560                           ; BSR set to: 0
 17561                           ;main.c: 3026: }
 17562                           ;main.c: 3028: return 1;
 17563  001926  0E01               	movlw	1
 17564  001928                     l1280:
 17565  001928  0012               	return	
 17566  00192A                     __end_of_sendCANFrame:
 17567                           	opt stack 0
 17568                           tblptru	equ	0xFF8
 17569                           tblptrh	equ	0xFF7
 17570                           tblptrl	equ	0xFF6
 17571                           tablat	equ	0xFF5
 17572                           prodh	equ	0xFF4
 17573                           prodl	equ	0xFF3
 17574                           intcon	equ	0xFF2
 17575                           indf0	equ	0xFEF
 17576                           postinc0	equ	0xFEE
 17577                           fsr0h	equ	0xFEA
 17578                           fsr0l	equ	0xFE9
 17579                           wreg	equ	0xFE8
 17580                           indf1	equ	0xFE7
 17581                           postinc1	equ	0xFE6
 17582                           postdec1	equ	0xFE5
 17583                           fsr1h	equ	0xFE2
 17584                           fsr1l	equ	0xFE1
 17585                           indf2	equ	0xFDF
 17586                           postinc2	equ	0xFDE
 17587                           postdec2	equ	0xFDD
 17588                           plusw2	equ	0xFDB
 17589                           fsr2h	equ	0xFDA
 17590                           fsr2l	equ	0xFD9
 17591                           status	equ	0xFD8
 17592                           
 17593 ;; *************** function _ECANSendMessage *****************
 17594 ;; Defined at:
 17595 ;;		line 617 in file "ECAN.c"
 17596 ;; Parameters:    Size  Location     Type
 17597 ;;  id              4   10[BANK0 ] unsigned long 
 17598 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17599 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17600 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17601 ;;  msgFlags        1   17[BANK0 ] enum E16315
 17602 ;; Auto vars:     Size  Location     Type
 17603 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17604 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17605 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17606 ;;		 -> B0CON(1), 
 17607 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17608 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17609 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17610 ;;		 -> B0CON(1), 
 17611 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17612 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17613 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17614 ;;		 -> B0CON(1), 
 17615 ;;  i               1   44[BANK0 ] unsigned char 
 17616 ;;  temp            1   43[BANK0 ] unsigned char 
 17617 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17618 ;;  j               1   39[BANK0 ] unsigned char 
 17619 ;;  buffers         1   38[BANK0 ] unsigned char 
 17620 ;;  mode            1   37[BANK0 ] unsigned char 
 17621 ;; Return value:  Size  Location     Type
 17622 ;;                  1    wreg      enum E15660
 17623 ;; Registers used:
 17624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17625 ;; Tracked objects:
 17626 ;;		On entry : F/0
 17627 ;;		On exit  : F/0
 17628 ;;		Unchanged: 0/0
 17629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17630 ;;      Params:         0       8       0       0       0       0       0
 17631 ;;      Locals:         0      28       0       0       0       0       0
 17632 ;;      Temps:          0       1       0       0       0       0       0
 17633 ;;      Totals:         0      37       0       0       0       0       0
 17634 ;;Total ram usage:       37 bytes
 17635 ;; Hardware stack levels used:    1
 17636 ;; Hardware stack levels required when called:    4
 17637 ;; This function calls:
 17638 ;;		__CANIDToRegs
 17639 ;; This function is called by:
 17640 ;;		_sendCANFrame
 17641 ;; This function uses a non-reentrant model
 17642 ;;
 17643                           
 17644                           	psect	text36
 17645  003934                     __ptext36:
 17646                           	opt stack 0
 17647  003934                     _ECANSendMessage:
 17648                           	opt stack 23
 17649                           
 17650                           ; BSR set to: 0
 17651                           ;ECAN.c: 619: BYTE mode;
 17652                           ;ECAN.c: 620: BYTE buffers;
 17653                           ;ECAN.c: 628: BYTE i,j;
 17654                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17655                           ;ECAN.c: 630: BYTE* pb[9];
 17656                           ;ECAN.c: 631: BYTE temp;
 17657                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17658                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17659                           
 17660                           ;incstack = 0
 17661                           ;incstack = 0
 17662  003934  0E0F               	movlw	15	;volatile
 17663  003936  0100               	movlb	0	; () banked
 17664  003938  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17665  00393A  0E40               	movlw	64	;volatile
 17666  00393C  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17667                           
 17668                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17669  00393E  0E0F               	movlw	15	;volatile
 17670  003940  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17671  003942  0E30               	movlw	48	;volatile
 17672  003944  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17673                           
 17674                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17675  003946  0E0F               	movlw	15	;volatile
 17676  003948  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17677  00394A  0E20               	movlw	32	;volatile
 17678  00394C  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17679                           
 17680                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17681  00394E  0E0E               	movlw	14	;volatile
 17682  003950  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17683  003952  0E20               	movlw	32	;volatile
 17684  003954  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17685                           
 17686                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17687  003956  0E0E               	movlw	14	;volatile
 17688  003958  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17689  00395A  0E30               	movlw	48	;volatile
 17690  00395C  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17691                           
 17692                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17693  00395E  0E0E               	movlw	14	;volatile
 17694  003960  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17695  003962  0E40               	movlw	64	;volatile
 17696  003964  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17697                           
 17698                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17699  003966  0E0E               	movlw	14	;volatile
 17700  003968  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17701  00396A  0E50               	movlw	80	;volatile
 17702  00396C  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17703                           
 17704                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17705  00396E  0E0E               	movlw	14	;volatile
 17706  003970  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17707  003972  0E60               	movlw	96	;volatile
 17708  003974  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17709                           
 17710                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17711  003976  0E0E               	movlw	14	;volatile
 17712  003978  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17713  00397A  0E70               	movlw	112	;volatile
 17714  00397C  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17718  00397E  5077               	movf	3959,w,c	;volatile
 17719  003980  0BC0               	andlw	192
 17720  003982  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;ECAN.c: 660: if ( mode == 0x00 )
 17724  003984  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17725  003986  D002               	goto	l12981
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ECAN.c: 661: buffers = 2;
 17729  003988  0E02               	movlw	2
 17730  00398A  D001               	goto	L15
 17731  00398C                     l12981:
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;ECAN.c: 662: else
 17735                           ;ECAN.c: 663: buffers = 8;
 17736  00398C  0E08               	movlw	8
 17737  00398E                     L15:
 17738  00398E  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17742  003990  010D               	movlb	13	; () banked
 17743  003992  90D8               	bcf	status,0,c
 17744  003994  31F8               	rrcf	248,w,b	;volatile
 17745  003996  0100               	movlb	0	; () banked
 17746  003998  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17750  00399A  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17751  00399C  D07D               	goto	l13041
 17752  00399E                     l12987:
 17753                           
 17754                           ; BSR set to: 0
 17755                           ;ECAN.c: 688: {
 17756                           ;ECAN.c: 693: ptr = pb[i];
 17757  00399E  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17758  0039A0  0D02               	mullw	2
 17759  0039A2  50F3               	movf	prodl,w,c
 17760  0039A4  0F73               	addlw	low ECANSendMessage@pb
 17761  0039A6  6ED9               	movwf	fsr2l,c
 17762  0039A8  6ADA               	clrf	fsr2h,c
 17763  0039AA  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17764  0039AE  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17765                           
 17766                           ; BSR set to: 0
 17767                           ;ECAN.c: 694: tempPtr = ptr;
 17768  0039B2  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17769  0039B6  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;ECAN.c: 702: if ( i > 2 )
 17773  0039BA  0E02               	movlw	2
 17774  0039BC  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17775  0039BE  D004               	goto	l12999
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;ECAN.c: 703: {
 17779                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17780  0039C0  90D8               	bcf	status,0,c
 17781  0039C2  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17785  0039C4  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17786  0039C6  D067               	goto	l13039
 17787  0039C8                     l12999:
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;ECAN.c: 714: }
 17791                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17792  0039C8  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17793  0039CC  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17794  0039D0  50DF               	movf	indf2,w,c
 17795  0039D2  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17796  0039D4  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17797  0039D6  D05F               	goto	l13039
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;ECAN.c: 721: {
 17801                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17802  0039D8  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17803  0039DC  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17804  0039E0  0EFC               	movlw	252
 17805  0039E2  16DF               	andwf	indf2,f,c
 17806                           
 17807                           ; BSR set to: 0
 17808                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17809  0039E4  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17810  0039E8  0E03               	movlw	3
 17811  0039EA  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17812  0039EC  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17813  0039F0  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17814  0039F4  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17815  0039F6  12DF               	iorwf	indf2,f,c
 17816                           
 17817                           ; BSR set to: 0
 17818                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17819  0039F8  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17820  0039FA  D004               	goto	l1448
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17824  0039FC  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17825  0039FE  0940               	iorlw	64
 17826  003A00  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17827  003A02  D002               	goto	l13009
 17828  003A04                     l1448:
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;ECAN.c: 729: else
 17832                           ;ECAN.c: 730: temp = dataLen;
 17833  003A04  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17834  003A08                     l13009:
 17835                           
 17836                           ; BSR set to: 0
 17837                           ;ECAN.c: 732: *(ptr+5) = temp;
 17838  003A08  EE20 F005          	lfsr	2,5
 17839  003A0C  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17840  003A0E  26D9               	addwf	fsr2l,f,c
 17841  003A10  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17842  003A12  22DA               	addwfc	fsr2h,f,c
 17843  003A14  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17847  003A18  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17848  003A1A  D003               	goto	l1450
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;ECAN.c: 736: temp = 1;
 17852  003A1C  0E01               	movlw	1
 17853  003A1E  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17854  003A20  D001               	goto	l13015
 17855  003A22                     l1450:
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;ECAN.c: 738: else
 17859                           ;ECAN.c: 739: temp = 0;
 17860  003A22  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17861  003A24                     l13015:
 17862                           
 17863                           ; BSR set to: 0
 17864                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17865  003A24  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17866  003A26  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17867  003A28  0E00               	movlw	0
 17868  003A2A  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17869  003A2C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17870  003A2E  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17871  003A32  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17872  003A36  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17873  003A3A  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17874  003A3E  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17875  003A42  EC3D  F01A         	call	__CANIDToRegs	;wreg free
 17876                           
 17877                           ; BSR set to: 0
 17878                           ;ECAN.c: 745: ptr += 6;
 17879  003A46  0E06               	movlw	6
 17880  003A48  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17881  003A4A  0E00               	movlw	0
 17882  003A4C  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17886  003A4E  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17887  003A50  D00F               	goto	l13029
 17888  003A52                     l13021:
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;ECAN.c: 748: *ptr++ = *data++;
 17892  003A52  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17893  003A56  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17894  003A5A  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17895  003A5E  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17896  003A62  CFDF FFE7          	movff	indf2,indf1
 17897                           
 17898                           ; BSR set to: 0
 17899  003A66  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17900  003A68  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17901                           
 17902                           ; BSR set to: 0
 17903  003A6A  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17904  003A6C  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17905                           
 17906                           ; BSR set to: 0
 17907  003A6E  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17908  003A70                     l13029:
 17909                           
 17910                           ; BSR set to: 0
 17911  003A70  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17912  003A72  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17913  003A74  E3EE               	bnc	l13021
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17917  003A76  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17918  003A7A  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17919  003A7E  50DF               	movf	indf2,w,c
 17920  003A80  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17921  003A82  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17922  003A84  D006               	goto	l13035
 17923                           
 17924                           ; BSR set to: 0
 17925                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17926  003A86  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17927  003A8A  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17928  003A8E  0E00               	movlw	0
 17929  003A90  86DB               	bsf	plusw2,3,c
 17930  003A92                     l13035:
 17931                           
 17932                           ; BSR set to: 0
 17933                           ;ECAN.c: 755: return TRUE;
 17934  003A92  0E01               	movlw	1
 17935  003A94  D005               	goto	l1456
 17936  003A96                     l13039:
 17937                           
 17938                           ; BSR set to: 0
 17939  003A96  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17940  003A98                     l13041:
 17941                           
 17942                           ; BSR set to: 0
 17943  003A98  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17944  003A9A  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17945  003A9C  E380               	bnc	l12987
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;ECAN.c: 756: }
 17949                           ;ECAN.c: 757: }
 17950                           ;ECAN.c: 760: return FALSE;
 17951  003A9E  0E00               	movlw	0
 17952  003AA0                     l1456:
 17953                           
 17954                           ; BSR set to: 0
 17955  003AA0  0012               	return	
 17956  003AA2                     __end_of_ECANSendMessage:
 17957                           	opt stack 0
 17958                           tblptru	equ	0xFF8
 17959                           tblptrh	equ	0xFF7
 17960                           tblptrl	equ	0xFF6
 17961                           tablat	equ	0xFF5
 17962                           prodh	equ	0xFF4
 17963                           prodl	equ	0xFF3
 17964                           intcon	equ	0xFF2
 17965                           indf0	equ	0xFEF
 17966                           postinc0	equ	0xFEE
 17967                           fsr0h	equ	0xFEA
 17968                           fsr0l	equ	0xFE9
 17969                           wreg	equ	0xFE8
 17970                           indf1	equ	0xFE7
 17971                           postinc1	equ	0xFE6
 17972                           postdec1	equ	0xFE5
 17973                           fsr1h	equ	0xFE2
 17974                           fsr1l	equ	0xFE1
 17975                           indf2	equ	0xFDF
 17976                           postinc2	equ	0xFDE
 17977                           postdec2	equ	0xFDD
 17978                           plusw2	equ	0xFDB
 17979                           fsr2h	equ	0xFDA
 17980                           fsr2l	equ	0xFD9
 17981                           status	equ	0xFD8
 17982                           
 17983 ;; *************** function __CANIDToRegs *****************
 17984 ;; Defined at:
 17985 ;;		line 1101 in file "ECAN.c"
 17986 ;; Parameters:    Size  Location     Type
 17987 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17988 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17989 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17990 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17991 ;;  val             4    2[BANK0 ] unsigned long 
 17992 ;;  type            1    6[BANK0 ] unsigned char 
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17995 ;;		 -> _CANIDToRegs@val(4), 
 17996 ;; Return value:  Size  Location     Type
 17997 ;;		None               void
 17998 ;; Registers used:
 17999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 18000 ;; Tracked objects:
 18001 ;;		On entry : F/0
 18002 ;;		On exit  : F/0
 18003 ;;		Unchanged: 0/0
 18004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18005 ;;      Params:         0       7       0       0       0       0       0
 18006 ;;      Locals:         0       1       0       0       0       0       0
 18007 ;;      Temps:          0       2       0       0       0       0       0
 18008 ;;      Totals:         0      10       0       0       0       0       0
 18009 ;;Total ram usage:       10 bytes
 18010 ;; Hardware stack levels used:    1
 18011 ;; Hardware stack levels required when called:    3
 18012 ;; This function calls:
 18013 ;;		Nothing
 18014 ;; This function is called by:
 18015 ;;		_doModeVerbose
 18016 ;;		_ECANSendMessage
 18017 ;; This function uses a non-reentrant model
 18018 ;;
 18019                           
 18020                           	psect	text37
 18021  00347A                     __ptext37:
 18022                           	opt stack 0
 18023  00347A                     __CANIDToRegs:
 18024                           	opt stack 23
 18025                           
 18026                           ; BSR set to: 0
 18027                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18028                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;incstack = 0
 18032                           ;incstack = 0
 18033  00347A  0E62               	movlw	low __CANIDToRegs@val
 18034  00347C  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;ECAN.c: 1106: if ( type == 0 )
 18038  00347E  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18039  003480  D022               	goto	l12357
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;ECAN.c: 1107: {
 18043                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18044  003482  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18045  003484  6ED9               	movwf	fsr2l,c
 18046  003486  6ADA               	clrf	fsr2h,c
 18047  003488  50DF               	movf	indf2,w,c
 18048  00348A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18049  00348C  90D8               	bcf	status,0,c
 18050  00348E  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18051  003490  90D8               	bcf	status,0,c
 18052  003492  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18053  003494  90D8               	bcf	status,0,c
 18054  003496  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18055                           
 18056                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18057  003498  D862               	call	PL48	;call to abstracted procedure
 18058  00349A  2AD9               	incf	fsr2l,f,c
 18059  00349C  6ADA               	clrf	fsr2h,c
 18060  00349E  D872               	call	PL96	;call to abstracted procedure
 18061  0034A0                     u15885:
 18062  0034A0  90D8               	bcf	status,0,c
 18063  0034A2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18064  0034A4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18065  0034A6  D7FC               	goto	u15885
 18066  0034A8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18067                           
 18068                           ; BSR set to: 0
 18069                           ;ECAN.c: 1111: ptr++;
 18070                           
 18071                           ; BSR set to: 0
 18072                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18073  0034AC  D846               	call	PL30	;call to abstracted procedure
 18074  0034AE  D86A               	call	PL96	;call to abstracted procedure
 18075  0034B0                     u15895:
 18076  0034B0  90D8               	bcf	status,0,c
 18077  0034B2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18078  0034B4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18079  0034B6  D7FC               	goto	u15895
 18080  0034B8  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18081  0034BA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18082  0034BE  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18083  0034C2  6EDF               	movwf	indf2,c
 18084                           
 18085                           ;ECAN.c: 1113: }
 18086  0034C4  D039               	goto	l1510
 18087  0034C6                     l12357:
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;ECAN.c: 1114: else
 18091                           ;ECAN.c: 1115: {
 18092                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18093  0034C6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18094  0034C8  D842               	call	PL44	;call to abstracted procedure
 18095  0034CA  0E05               	movlw	5
 18096  0034CC  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18097  0034CE                     u15905:
 18098  0034CE  90D8               	bcf	status,0,c
 18099  0034D0  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18100  0034D2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18101  0034D4  D7FC               	goto	u15905
 18102  0034D6  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18103                           
 18104                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18105  0034D8  D842               	call	PL48	;call to abstracted procedure
 18106  0034DA  0E03               	movlw	3
 18107  0034DC  D849               	call	PL70	;call to abstracted procedure
 18108  0034DE  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18109  0034E0  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;ECAN.c: 1119: ptr++;
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18116  0034E4  D82A               	call	PL30	;call to abstracted procedure
 18117  0034E6  0E02               	movlw	2
 18118  0034E8  D843               	call	PL70	;call to abstracted procedure
 18119  0034EA  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18120  0034EC  0BE0               	andlw	224
 18121  0034EE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18122  0034F2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18123  0034F6  6EDF               	movwf	indf2,c
 18124                           
 18125                           ; BSR set to: 0
 18126                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18127  0034F8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18128  0034FC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18129  003500  0E00               	movlw	0
 18130  003502  86DB               	bsf	plusw2,3,c
 18131                           
 18132                           ; BSR set to: 0
 18133                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18134  003504  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18135  003506  D823               	call	PL44	;call to abstracted procedure
 18136  003508  0E03               	movlw	3
 18137  00350A  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18138  00350C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18139                           
 18140                           ;ECAN.c: 1124: ptr++;
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18144  003510  D814               	call	PL30	;call to abstracted procedure
 18145  003512  2AD9               	incf	fsr2l,f,c
 18146  003514  6ADA               	clrf	fsr2h,c
 18147  003516  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18148  00351A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18149  00351E  CFDF FFE7          	movff	indf2,indf1
 18150                           
 18151                           ; BSR set to: 0
 18152                           ;ECAN.c: 1126: ptr++;
 18153  003522  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18154  003524  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18158  003526  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18159  003528  6ED9               	movwf	fsr2l,c
 18160  00352A  6ADA               	clrf	fsr2h,c
 18161  00352C  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18162  003530  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18163  003534  CFDF FFE7          	movff	indf2,indf1
 18164  003538                     l1510:
 18165                           
 18166                           ; BSR set to: 0
 18167  003538  0012               	return	
 18168  00353A                     __end_of__CANIDToRegs:
 18169                           	opt stack 0
 18170  00353A                     PL30:
 18171                           	opt stack 23
 18172  00353A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18173  00353E  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18174  003540  12DF               	iorwf	indf2,f,c
 18175  003542  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18176  003544  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18177  003546  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18178  003548  6ED9               	movwf	fsr2l,c
 18179  00354A  6ADA               	clrf	fsr2h,c
 18180  00354C  0012               	return	
 18181  00354E                     __end_ofPL30:
 18182                           	opt stack 0
 18183  00354E                     PL44:
 18184                           	opt stack 23
 18185  00354E  6ED9               	movwf	fsr2l,c
 18186  003550  6ADA               	clrf	fsr2h,c
 18187  003552  0E02               	movlw	2
 18188  003554  26D9               	addwf	fsr2l,f,c
 18189  003556  6ADA               	clrf	fsr2h,c
 18190  003558  50DF               	movf	indf2,w,c
 18191  00355A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18192  00355C  0012               	return	
 18193  00355E                     __end_ofPL44:
 18194                           	opt stack 0
 18195  00355E                     PL48:
 18196                           	opt stack 23
 18197  00355E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18198  003562  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18199  003566  6EDF               	movwf	indf2,c
 18200  003568  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18201  00356A  6ED9               	movwf	fsr2l,c
 18202  00356C  6ADA               	clrf	fsr2h,c
 18203  00356E  0012               	return	
 18204  003570                     __end_ofPL48:
 18205                           	opt stack 0
 18206  003570                     PL70:
 18207                           	opt stack 23
 18208  003570  26D9               	addwf	fsr2l,f,c
 18209  003572  6ADA               	clrf	fsr2h,c
 18210  003574  50DF               	movf	indf2,w,c
 18211  003576  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18212  003578  90D8               	bcf	status,0,c
 18213  00357A  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18214  00357C  90D8               	bcf	status,0,c
 18215  00357E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18216  003580  90D8               	bcf	status,0,c
 18217  003582  0012               	return	
 18218  003584                     __end_ofPL70:
 18219                           	opt stack 0
 18220  003584                     PL96:
 18221                           	opt stack 23
 18222  003584  50DF               	movf	indf2,w,c
 18223  003586  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18224  003588  0E05               	movlw	5
 18225  00358A  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18226  00358C  0C05               	retlw	5
 18227  00358E                     __end_ofPL96:
 18228                           	opt stack 0
 18229                           tblptru	equ	0xFF8
 18230                           tblptrh	equ	0xFF7
 18231                           tblptrl	equ	0xFF6
 18232                           tablat	equ	0xFF5
 18233                           prodh	equ	0xFF4
 18234                           prodl	equ	0xFF3
 18235                           intcon	equ	0xFF2
 18236                           indf0	equ	0xFEF
 18237                           postinc0	equ	0xFEE
 18238                           fsr0h	equ	0xFEA
 18239                           fsr0l	equ	0xFE9
 18240                           wreg	equ	0xFE8
 18241                           indf1	equ	0xFE7
 18242                           postinc1	equ	0xFE6
 18243                           postdec1	equ	0xFE5
 18244                           fsr1h	equ	0xFE2
 18245                           fsr1l	equ	0xFE1
 18246                           indf2	equ	0xFDF
 18247                           postinc2	equ	0xFDE
 18248                           postdec2	equ	0xFDD
 18249                           plusw2	equ	0xFDB
 18250                           fsr2h	equ	0xFDA
 18251                           fsr2l	equ	0xFD9
 18252                           status	equ	0xFD8
 18253                           
 18254 ;; *************** function _memset *****************
 18255 ;; Defined at:
 18256 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18257 ;; Parameters:    Size  Location     Type
 18258 ;;  p1              2    0[BANK0 ] PTR void 
 18259 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18260 ;;  c               2    2[BANK0 ] int 
 18261 ;;  n               2    4[BANK0 ] unsigned int 
 18262 ;; Auto vars:     Size  Location     Type
 18263 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18264 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18265 ;; Return value:  Size  Location     Type
 18266 ;;                  2    0[BANK0 ] PTR void 
 18267 ;; Registers used:
 18268 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18269 ;; Tracked objects:
 18270 ;;		On entry : F/0
 18271 ;;		On exit  : F/0
 18272 ;;		Unchanged: 0/0
 18273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18274 ;;      Params:         0       6       0       0       0       0       0
 18275 ;;      Locals:         0       2       0       0       0       0       0
 18276 ;;      Temps:          0       0       0       0       0       0       0
 18277 ;;      Totals:         0       8       0       0       0       0       0
 18278 ;;Total ram usage:        8 bytes
 18279 ;; Hardware stack levels used:    1
 18280 ;; Hardware stack levels required when called:    3
 18281 ;; This function calls:
 18282 ;;		Nothing
 18283 ;; This function is called by:
 18284 ;;		_doModeVerbose
 18285 ;;		_doModeSLCAN
 18286 ;;		_printGUID
 18287 ;;		_printMDF
 18288 ;;		_printNodeFirmwareVersion
 18289 ;; This function uses a non-reentrant model
 18290 ;;
 18291                           
 18292                           	psect	text38
 18293  001790                     __ptext38:
 18294                           	opt stack 0
 18295  001790                     _memset:
 18296                           	opt stack 25
 18297                           
 18298                           ; BSR set to: 0
 18299                           
 18300                           ; BSR set to: 0
 18301                           ;incstack = 0
 18302                           ;incstack = 0
 18303  001790  C060  F066         	movff	memset@p1,memset@p
 18304  001794  C061  F067         	movff	memset@p1+1,memset@p+1
 18305  001798  D008               	goto	l14905
 18306  00179A                     l14901:
 18307                           
 18308                           ; BSR set to: 0
 18309  00179A  C066  FFD9         	movff	memset@p,fsr2l
 18310  00179E  C067  FFDA         	movff	memset@p+1,fsr2h
 18311  0017A2  C062  FFDF         	movff	memset@c,indf2
 18312                           
 18313                           ; BSR set to: 0
 18314  0017A6  4B66               	infsnz	memset@p& (0+255),f,b
 18315  0017A8  2B67               	incf	(memset@p+1)& (0+255),f,b
 18316  0017AA                     l14905:
 18317                           
 18318                           ; BSR set to: 0
 18319  0017AA  0764               	decf	memset@n& (0+255),f,b
 18320  0017AC  A0D8               	btfss	status,0,c
 18321  0017AE  0765               	decf	(memset@n+1)& (0+255),f,b
 18322  0017B0  0100               	movlb	0	; () banked
 18323  0017B2  2964               	incf	memset@n& (0+255),w,b
 18324  0017B4  B4D8               	btfsc	status,2,c
 18325  0017B6  2965               	incf	(memset@n+1)& (0+255),w,b
 18326  0017B8  B4D8               	btfsc	status,2,c
 18327                           
 18328                           ; BSR set to: 0
 18329  0017BA  0012               	return	
 18330  0017BC  D7EE               	goto	l14901
 18331  0017BE                     __end_of_memset:
 18332                           	opt stack 0
 18333                           tblptru	equ	0xFF8
 18334                           tblptrh	equ	0xFF7
 18335                           tblptrl	equ	0xFF6
 18336                           tablat	equ	0xFF5
 18337                           prodh	equ	0xFF4
 18338                           prodl	equ	0xFF3
 18339                           intcon	equ	0xFF2
 18340                           indf0	equ	0xFEF
 18341                           postinc0	equ	0xFEE
 18342                           fsr0h	equ	0xFEA
 18343                           fsr0l	equ	0xFE9
 18344                           wreg	equ	0xFE8
 18345                           indf1	equ	0xFE7
 18346                           postinc1	equ	0xFE6
 18347                           postdec1	equ	0xFE5
 18348                           fsr1h	equ	0xFE2
 18349                           fsr1l	equ	0xFE1
 18350                           indf2	equ	0xFDF
 18351                           postinc2	equ	0xFDE
 18352                           postdec2	equ	0xFDD
 18353                           plusw2	equ	0xFDB
 18354                           fsr2h	equ	0xFDA
 18355                           fsr2l	equ	0xFD9
 18356                           status	equ	0xFD8
 18357                           
 18358 ;; *************** function _printHelp *****************
 18359 ;; Defined at:
 18360 ;;		line 2598 in file "main.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;		None
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;		None
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18369 ;; Tracked objects:
 18370 ;;		On entry : F/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18374 ;;      Params:         0       0       0       0       0       0       0
 18375 ;;      Locals:         0       0       0       0       0       0       0
 18376 ;;      Temps:          0       0       0       0       0       0       0
 18377 ;;      Totals:         0       0       0       0       0       0       0
 18378 ;;Total ram usage:        0 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; Hardware stack levels required when called:    5
 18381 ;; This function calls:
 18382 ;;		_putsUSART
 18383 ;; This function is called by:
 18384 ;;		_doModeVerbose
 18385 ;; This function uses a non-reentrant model
 18386 ;;
 18387                           
 18388                           	psect	text39
 18389  0040CE                     __ptext39:
 18390                           	opt stack 0
 18391  0040CE                     _printHelp:
 18392                           	opt stack 23
 18393                           
 18394                           ; BSR set to: 0
 18395                           ;main.c: 2599: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18396                           
 18397                           ; BSR set to: 0
 18398                           ;incstack = 0
 18399                           ;incstack = 0
 18400  0040CE  0E75               	movlw	high STR_206
 18401  0040D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18402  0040D2  0E49               	movlw	low STR_206
 18403  0040D4  6F61               	movwf	?_putsUSART& (0+255),b
 18404  0040D6  EC2D  F00E         	call	_putsUSART	;wreg free
 18405                           
 18406                           ;main.c: 2600: putsUSART((char *) "------------------------------------\r\n");
 18407  0040DA  0E6E               	movlw	high (STR_238+28)
 18408  0040DC  0100               	movlb	0	; () banked
 18409  0040DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18410  0040E0  0E6B               	movlw	low (STR_238+28)
 18411  0040E2  6F61               	movwf	?_putsUSART& (0+255),b
 18412  0040E4  EC2D  F00E         	call	_putsUSART	;wreg free
 18413                           
 18414                           ;main.c: 2601: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18415  0040E8  0E78               	movlw	high STR_208
 18416  0040EA  0100               	movlb	0	; () banked
 18417  0040EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18418  0040EE  0E64               	movlw	low STR_208
 18419  0040F0  6F61               	movwf	?_putsUSART& (0+255),b
 18420  0040F2  EC2D  F00E         	call	_putsUSART	;wreg free
 18421                           
 18422                           ;main.c: 2602: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18423  0040F6  0E73               	movlw	high STR_209
 18424  0040F8  0100               	movlb	0	; () banked
 18425  0040FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18426  0040FC  0ED8               	movlw	low STR_209
 18427  0040FE  6F61               	movwf	?_putsUSART& (0+255),b
 18428  004100  EC2D  F00E         	call	_putsUSART	;wreg free
 18429                           
 18430                           ;main.c: 2603: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18431  004104  0E73               	movlw	high STR_210
 18432  004106  0100               	movlb	0	; () banked
 18433  004108  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18434  00410A  0E7E               	movlw	low STR_210
 18435  00410C  6F61               	movwf	?_putsUSART& (0+255),b
 18436  00410E  EC2D  F00E         	call	_putsUSART	;wreg free
 18437                           
 18438                           ;main.c: 2604: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18439  004112  0E71               	movlw	high STR_211
 18440  004114  0100               	movlb	0	; () banked
 18441  004116  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18442  004118  0EF7               	movlw	low STR_211
 18443  00411A  6F61               	movwf	?_putsUSART& (0+255),b
 18444  00411C  EC2D  F00E         	call	_putsUSART	;wreg free
 18445                           
 18446                           ;main.c: 2605: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18447  004120  0E72               	movlw	high STR_212
 18448  004122  0100               	movlb	0	; () banked
 18449  004124  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18450  004126  0E5C               	movlw	low STR_212
 18451  004128  6F61               	movwf	?_putsUSART& (0+255),b
 18452  00412A  EC2D  F00E         	call	_putsUSART	;wreg free
 18453                           
 18454                           ;main.c: 2606: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18455  00412E  0E78               	movlw	high STR_213
 18456  004130  0100               	movlb	0	; () banked
 18457  004132  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18458  004134  0E0C               	movlw	low STR_213
 18459  004136  6F61               	movwf	?_putsUSART& (0+255),b
 18460  004138  EC2D  F00E         	call	_putsUSART	;wreg free
 18461                           
 18462                           ;main.c: 2607: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18463  00413C  0E72               	movlw	high STR_214
 18464  00413E  0100               	movlb	0	; () banked
 18465  004140  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18466  004142  0E8E               	movlw	low STR_214
 18467  004144  6F61               	movwf	?_putsUSART& (0+255),b
 18468  004146  EC2D  F00E         	call	_putsUSART	;wreg free
 18469                           
 18470                           ;main.c: 2608: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18471  00414A  0E73               	movlw	high STR_215
 18472  00414C  0100               	movlb	0	; () banked
 18473  00414E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18474  004150  0EAC               	movlw	low STR_215
 18475  004152  6F61               	movwf	?_putsUSART& (0+255),b
 18476  004154  EC2D  F00E         	call	_putsUSART	;wreg free
 18477                           
 18478                           ;main.c: 2609: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18479  004158  0E79               	movlw	high STR_216
 18480  00415A  0100               	movlb	0	; () banked
 18481  00415C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18482  00415E  0E01               	movlw	low STR_216
 18483  004160  6F61               	movwf	?_putsUSART& (0+255),b
 18484  004162  EC2D  F00E         	call	_putsUSART	;wreg free
 18485                           
 18486                           ;main.c: 2610: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18487  004166  0E70               	movlw	high STR_217
 18488  004168  0100               	movlb	0	; () banked
 18489  00416A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18490  00416C  0E45               	movlw	low STR_217
 18491  00416E  6F61               	movwf	?_putsUSART& (0+255),b
 18492  004170  EC2D  F00E         	call	_putsUSART	;wreg free
 18493                           
 18494                           ;main.c: 2611: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18495  004174  0E79               	movlw	high STR_218
 18496  004176  0100               	movlb	0	; () banked
 18497  004178  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18498  00417A  0EC1               	movlw	low STR_218
 18499  00417C  6F61               	movwf	?_putsUSART& (0+255),b
 18500  00417E  EC2D  F00E         	call	_putsUSART	;wreg free
 18501                           
 18502                           ;main.c: 2612: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18503  004182  0E77               	movlw	high STR_219
 18504  004184  0100               	movlb	0	; () banked
 18505  004186  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18506  004188  0E28               	movlw	low STR_219
 18507  00418A  6F61               	movwf	?_putsUSART& (0+255),b
 18508  00418C  EC2D  F00E         	call	_putsUSART	;wreg free
 18509                           
 18510                           ;main.c: 2613: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18511  004190  0E75               	movlw	high STR_220
 18512  004192  0100               	movlb	0	; () banked
 18513  004194  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18514  004196  0E22               	movlw	low STR_220
 18515  004198  6F61               	movwf	?_putsUSART& (0+255),b
 18516  00419A  EC2D  F00E         	call	_putsUSART	;wreg free
 18517                           
 18518                           ;main.c: 2614: putsUSART((char *) "HELP - Display this help information.\r\n");
 18519  00419E  0E74               	movlw	high STR_221
 18520  0041A0  0100               	movlb	0	; () banked
 18521  0041A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18522  0041A4  0E83               	movlw	low STR_221
 18523  0041A6  6F61               	movwf	?_putsUSART& (0+255),b
 18524  0041A8  EC2D  F00E         	call	_putsUSART	;wreg free
 18525                           
 18526                           ;main.c: 2615: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18527  0041AC  0E73               	movlw	high STR_222
 18528  0041AE  0100               	movlb	0	; () banked
 18529  0041B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18530  0041B2  0E4F               	movlw	low STR_222
 18531  0041B4  6F61               	movwf	?_putsUSART& (0+255),b
 18532  0041B6  EC2D  F00E         	call	_putsUSART	;wreg free
 18533                           
 18534                           ;main.c: 2616: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18535  0041BA  0E6E               	movlw	high STR_223
 18536  0041BC  0100               	movlb	0	; () banked
 18537  0041BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18538  0041C0  0E0A               	movlw	low STR_223
 18539  0041C2  6F61               	movwf	?_putsUSART& (0+255),b
 18540  0041C4  EC2D  F00E         	call	_putsUSART	;wreg free
 18541                           
 18542                           ;main.c: 2617: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18543  0041C8  0E6E               	movlw	high STR_224
 18544  0041CA  0100               	movlb	0	; () banked
 18545  0041CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18546  0041CE  0ED5               	movlw	low STR_224
 18547  0041D0  6F61               	movwf	?_putsUSART& (0+255),b
 18548  0041D2  EC2D  F00E         	call	_putsUSART	;wreg free
 18549                           
 18550                           ;main.c: 2618: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18551  0041D6  0E6D               	movlw	high STR_225
 18552  0041D8  0100               	movlb	0	; () banked
 18553  0041DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18554  0041DC  0E76               	movlw	low STR_225
 18555  0041DE  6F61               	movwf	?_putsUSART& (0+255),b
 18556  0041E0  EC2D  F00E         	call	_putsUSART	;wreg free
 18557                           
 18558                           ;main.c: 2619: putsUSART((char *) "FILTER - Set filter .\r\n");
 18559  0041E4  0E79               	movlw	high STR_226
 18560  0041E6  0100               	movlb	0	; () banked
 18561  0041E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18562  0041EA  0E19               	movlw	low STR_226
 18563  0041EC  6F61               	movwf	?_putsUSART& (0+255),b
 18564  0041EE  EC2D  F00E         	call	_putsUSART	;wreg free
 18565                           
 18566                           ;main.c: 2620: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18567  0041F2  0E6D               	movlw	high STR_227
 18568  0041F4  0100               	movlb	0	; () banked
 18569  0041F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18570  0041F8  0E28               	movlw	low STR_227
 18571  0041FA  6F61               	movwf	?_putsUSART& (0+255),b
 18572  0041FC  EC2D  F00E         	call	_putsUSART	;wreg free
 18573                           
 18574                           ;main.c: 2621: putsUSART((char *) "MASK - Set mask .\r\n");
 18575  004200  0E7A               	movlw	high STR_228
 18576  004202  0100               	movlb	0	; () banked
 18577  004204  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18578  004206  0E47               	movlw	low STR_228
 18579  004208  6F61               	movwf	?_putsUSART& (0+255),b
 18580  00420A  EC2D  F00E         	call	_putsUSART	;wreg free
 18581                           
 18582                           ;main.c: 2622: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18583  00420E  0E6D               	movlw	high STR_229
 18584  004210  0100               	movlb	0	; () banked
 18585  004212  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18586  004214  0EC3               	movlw	low STR_229
 18587  004216  6F61               	movwf	?_putsUSART& (0+255),b
 18588  004218  EC2D  F00E         	call	_putsUSART	;wreg free
 18589                           
 18590                           ;main.c: 2623: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18591  00421C  0E76               	movlw	high STR_230
 18592  00421E  0100               	movlb	0	; () banked
 18593  004220  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18594  004222  0EE4               	movlw	low STR_230
 18595  004224  6F61               	movwf	?_putsUSART& (0+255),b
 18596  004226  EC2D  F00E         	call	_putsUSART	;wreg free
 18597                           
 18598                           ;main.c: 2624: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18599  00422A  0E73               	movlw	high STR_231
 18600  00422C  0100               	movlb	0	; () banked
 18601  00422E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18602  004230  0E20               	movlw	low STR_231
 18603  004232  6F61               	movwf	?_putsUSART& (0+255),b
 18604  004234  EC2D  F00E         	call	_putsUSART	;wreg free
 18605                           
 18606                           ;main.c: 2625: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18607  004238  0E72               	movlw	high STR_232
 18608  00423A  0100               	movlb	0	; () banked
 18609  00423C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18610  00423E  0EF1               	movlw	low STR_232
 18611  004240  6F61               	movwf	?_putsUSART& (0+255),b
 18612  004242  EC2D  F00E         	call	_putsUSART	;wreg free
 18613                           
 18614                           ;main.c: 2626: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18615  004246  0E6E               	movlw	high STR_233
 18616  004248  0100               	movlb	0	; () banked
 18617  00424A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18618  00424C  0E92               	movlw	low STR_233
 18619  00424E  6F61               	movwf	?_putsUSART& (0+255),b
 18620  004250  EC2D  F00E         	call	_putsUSART	;wreg free
 18621                           
 18622                           ;main.c: 2627: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18623  004254  0E72               	movlw	high STR_234
 18624  004256  0100               	movlb	0	; () banked
 18625  004258  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18626  00425A  0EC0               	movlw	low STR_234
 18627  00425C  6F61               	movwf	?_putsUSART& (0+255),b
 18628  00425E  EC2D  F00E         	call	_putsUSART	;wreg free
 18629                           
 18630                           ;main.c: 2628: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18631  004262  0E70               	movlw	high STR_235
 18632  004264  0100               	movlb	0	; () banked
 18633  004266  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18634  004268  0EB4               	movlw	low STR_235
 18635  00426A  6F61               	movwf	?_putsUSART& (0+255),b
 18636  00426C  EC2D  F00E         	call	_putsUSART	;wreg free
 18637                           
 18638                           ;main.c: 2629: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18639  004270  0E6F               	movlw	high STR_236
 18640  004272  0100               	movlb	0	; () banked
 18641  004274  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18642  004276  0E5A               	movlw	low STR_236
 18643  004278  6F61               	movwf	?_putsUSART& (0+255),b
 18644  00427A  EC2D  F00E         	call	_putsUSART	;wreg free
 18645                           
 18646                           ;main.c: 2630: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18647  00427E  0E75               	movlw	high STR_237
 18648  004280  0100               	movlb	0	; () banked
 18649  004282  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18650  004284  0EBE               	movlw	low STR_237
 18651  004286  6F61               	movwf	?_putsUSART& (0+255),b
 18652  004288  EF2D  F00E         	goto	_putsUSART	;wreg free
 18653  00428C                     __end_of_printHelp:
 18654                           	opt stack 0
 18655                           tblptru	equ	0xFF8
 18656                           tblptrh	equ	0xFF7
 18657                           tblptrl	equ	0xFF6
 18658                           tablat	equ	0xFF5
 18659                           prodh	equ	0xFF4
 18660                           prodl	equ	0xFF3
 18661                           intcon	equ	0xFF2
 18662                           indf0	equ	0xFEF
 18663                           postinc0	equ	0xFEE
 18664                           fsr0h	equ	0xFEA
 18665                           fsr0l	equ	0xFE9
 18666                           wreg	equ	0xFE8
 18667                           indf1	equ	0xFE7
 18668                           postinc1	equ	0xFE6
 18669                           postdec1	equ	0xFE5
 18670                           fsr1h	equ	0xFE2
 18671                           fsr1l	equ	0xFE1
 18672                           indf2	equ	0xFDF
 18673                           postinc2	equ	0xFDE
 18674                           postdec2	equ	0xFDD
 18675                           plusw2	equ	0xFDB
 18676                           fsr2h	equ	0xFDA
 18677                           fsr2l	equ	0xFD9
 18678                           status	equ	0xFD8
 18679                           
 18680 ;; *************** function _printErrors *****************
 18681 ;; Defined at:
 18682 ;;		line 2534 in file "main.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;		None
 18685 ;; Auto vars:     Size  Location     Type
 18686 ;;		None
 18687 ;; Return value:  Size  Location     Type
 18688 ;;		None               void
 18689 ;; Registers used:
 18690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18691 ;; Tracked objects:
 18692 ;;		On entry : F/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18696 ;;      Params:         0       0       0       0       0       0       0
 18697 ;;      Locals:         0      12       0       0       0       0       0
 18698 ;;      Temps:          0       0       0       0       0       0       0
 18699 ;;      Totals:         0      12       0       0       0       0       0
 18700 ;;Total ram usage:       12 bytes
 18701 ;; Hardware stack levels used:    1
 18702 ;; Hardware stack levels required when called:    5
 18703 ;; This function calls:
 18704 ;;		_putsUSART
 18705 ;;		_sprintf
 18706 ;; This function is called by:
 18707 ;;		_doModeVerbose
 18708 ;; This function uses a non-reentrant model
 18709 ;;
 18710                           
 18711                           	psect	text40
 18712  004ABC                     __ptext40:
 18713                           	opt stack 0
 18714  004ABC                     _printErrors:
 18715                           	opt stack 23
 18716                           
 18717                           ; BSR set to: 0
 18718                           ;main.c: 2535: putsUSART((char *) "CAN Receive overruns: ");
 18719                           
 18720                           ;incstack = 0
 18721                           ;incstack = 0
 18722  004ABC  0E79               	movlw	high STR_176
 18723  004ABE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18724  004AC0  0ED8               	movlw	low STR_176
 18725  004AC2  6F61               	movwf	?_putsUSART& (0+255),b
 18726  004AC4  EC2D  F00E         	call	_putsUSART	;wreg free
 18727                           
 18728                           ;main.c: 2536: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18729  004AC8  0100               	movlb	0	; () banked
 18730  004ACA  67E4               	tstfsz	_bHex& (0+255),b
 18731  004ACC  D004               	goto	l14981
 18732                           
 18733                           ; BSR set to: 0
 18734  004ACE  0E7C               	movlw	high STR_162
 18735  004AD0  6F95               	movwf	(_printErrors$1396+1)& (0+255),b
 18736  004AD2  0EE1               	movlw	low STR_162
 18737  004AD4  D003               	goto	L16
 18738  004AD6                     l14981:
 18739                           
 18740                           ; BSR set to: 0
 18741  004AD6  0E7C               	movlw	high STR_177
 18742  004AD8  6F95               	movwf	(_printErrors$1396+1)& (0+255),b
 18743  004ADA  0E16               	movlw	low STR_177
 18744  004ADC                     L16:
 18745  004ADC  6F94               	movwf	_printErrors$1396& (0+255),b
 18746                           
 18747                           ; BSR set to: 0
 18748  004ADE  0E01               	movlw	high _wrkbuf
 18749  004AE0  0100               	movlb	0	; () banked
 18750  004AE2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18751  004AE4  0E7B               	movlw	low _wrkbuf
 18752  004AE6  6F76               	movwf	?_sprintf& (0+255),b
 18753  004AE8  C094  F078         	movff	_printErrors$1396,?_sprintf+2
 18754  004AEC  C095  F079         	movff	_printErrors$1396+1,?_sprintf+3
 18755  004AF0  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18756  004AF4  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18757  004AF8  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18758  004AFC  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18759  004B00  ECAA  F028         	call	_sprintf	;wreg free
 18760                           
 18761                           ; BSR set to: 0
 18762                           ;main.c: 2537: putsUSART(wrkbuf);
 18763  004B04  0E01               	movlw	high _wrkbuf
 18764  004B06  0100               	movlb	0	; () banked
 18765  004B08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18766  004B0A  0E7B               	movlw	low _wrkbuf
 18767  004B0C  6F61               	movwf	?_putsUSART& (0+255),b
 18768  004B0E  EC2D  F00E         	call	_putsUSART	;wreg free
 18769                           
 18770                           ;main.c: 2538: putsUSART((char *) "\r\n");
 18771  004B12  0E71               	movlw	high (STR_197+50)
 18772  004B14  0100               	movlb	0	; () banked
 18773  004B16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18774  004B18  0EC0               	movlw	low (STR_197+50)
 18775  004B1A  6F61               	movwf	?_putsUSART& (0+255),b
 18776  004B1C  EC2D  F00E         	call	_putsUSART	;wreg free
 18777                           
 18778                           ;main.c: 2540: putsUSART((char *) "CAN Transmit overruns: ");
 18779  004B20  0E79               	movlw	high STR_180
 18780  004B22  0100               	movlb	0	; () banked
 18781  004B24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18782  004B26  0EA9               	movlw	low STR_180
 18783  004B28  6F61               	movwf	?_putsUSART& (0+255),b
 18784  004B2A  EC2D  F00E         	call	_putsUSART	;wreg free
 18785                           
 18786                           ;main.c: 2541: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18787  004B2E  0100               	movlb	0	; () banked
 18788  004B30  67E4               	tstfsz	_bHex& (0+255),b
 18789  004B32  D004               	goto	l14995
 18790                           
 18791                           ; BSR set to: 0
 18792  004B34  0E7C               	movlw	high STR_162
 18793  004B36  6F97               	movwf	(_printErrors$1402+1)& (0+255),b
 18794  004B38  0EE1               	movlw	low STR_162
 18795  004B3A  D003               	goto	L17
 18796  004B3C                     l14995:
 18797                           
 18798                           ; BSR set to: 0
 18799  004B3C  0E7C               	movlw	high STR_177
 18800  004B3E  6F97               	movwf	(_printErrors$1402+1)& (0+255),b
 18801  004B40  0E16               	movlw	low STR_177
 18802  004B42                     L17:
 18803  004B42  6F96               	movwf	_printErrors$1402& (0+255),b
 18804                           
 18805                           ; BSR set to: 0
 18806  004B44  0E01               	movlw	high _wrkbuf
 18807  004B46  0100               	movlb	0	; () banked
 18808  004B48  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18809  004B4A  0E7B               	movlw	low _wrkbuf
 18810  004B4C  6F76               	movwf	?_sprintf& (0+255),b
 18811  004B4E  C096  F078         	movff	_printErrors$1402,?_sprintf+2
 18812  004B52  C097  F079         	movff	_printErrors$1402+1,?_sprintf+3
 18813  004B56  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18814  004B5A  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18815  004B5E  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18816  004B62  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18817  004B66  ECAA  F028         	call	_sprintf	;wreg free
 18818                           
 18819                           ; BSR set to: 0
 18820                           ;main.c: 2542: putsUSART(wrkbuf);
 18821  004B6A  0E01               	movlw	high _wrkbuf
 18822  004B6C  0100               	movlb	0	; () banked
 18823  004B6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18824  004B70  0E7B               	movlw	low _wrkbuf
 18825  004B72  6F61               	movwf	?_putsUSART& (0+255),b
 18826  004B74  EC2D  F00E         	call	_putsUSART	;wreg free
 18827                           
 18828                           ;main.c: 2543: putsUSART((char *) "\r\n");
 18829  004B78  0E71               	movlw	high (STR_197+50)
 18830  004B7A  0100               	movlb	0	; () banked
 18831  004B7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18832  004B7E  0EC0               	movlw	low (STR_197+50)
 18833  004B80  6F61               	movwf	?_putsUSART& (0+255),b
 18834  004B82  EC2D  F00E         	call	_putsUSART	;wreg free
 18835                           
 18836                           ;main.c: 2545: putsUSART((char *) "UART Receive overruns: ");
 18837  004B86  0E79               	movlw	high STR_184
 18838  004B88  0100               	movlb	0	; () banked
 18839  004B8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18840  004B8C  0E91               	movlw	low STR_184
 18841  004B8E  6F61               	movwf	?_putsUSART& (0+255),b
 18842  004B90  EC2D  F00E         	call	_putsUSART	;wreg free
 18843                           
 18844                           ;main.c: 2546: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18845  004B94  0100               	movlb	0	; () banked
 18846  004B96  67E4               	tstfsz	_bHex& (0+255),b
 18847  004B98  D004               	goto	l15009
 18848                           
 18849                           ; BSR set to: 0
 18850  004B9A  0E7C               	movlw	high STR_162
 18851  004B9C  6F99               	movwf	(_printErrors$1408+1)& (0+255),b
 18852  004B9E  0EE1               	movlw	low STR_162
 18853  004BA0  D003               	goto	L18
 18854  004BA2                     l15009:
 18855                           
 18856                           ; BSR set to: 0
 18857  004BA2  0E7C               	movlw	high STR_177
 18858  004BA4  6F99               	movwf	(_printErrors$1408+1)& (0+255),b
 18859  004BA6  0E16               	movlw	low STR_177
 18860  004BA8                     L18:
 18861  004BA8  6F98               	movwf	_printErrors$1408& (0+255),b
 18862                           
 18863                           ; BSR set to: 0
 18864  004BAA  0E01               	movlw	high _wrkbuf
 18865  004BAC  0100               	movlb	0	; () banked
 18866  004BAE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18867  004BB0  0E7B               	movlw	low _wrkbuf
 18868  004BB2  6F76               	movwf	?_sprintf& (0+255),b
 18869  004BB4  C098  F078         	movff	_printErrors$1408,?_sprintf+2
 18870  004BB8  C099  F079         	movff	_printErrors$1408+1,?_sprintf+3
 18871  004BBC  C11C  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18872  004BC0  C11D  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18873  004BC4  C11E  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18874  004BC8  C11F  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18875  004BCC  ECAA  F028         	call	_sprintf	;wreg free
 18876                           
 18877                           ; BSR set to: 0
 18878                           ;main.c: 2547: putsUSART(wrkbuf);
 18879  004BD0  0E01               	movlw	high _wrkbuf
 18880  004BD2  0100               	movlb	0	; () banked
 18881  004BD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18882  004BD6  0E7B               	movlw	low _wrkbuf
 18883  004BD8  6F61               	movwf	?_putsUSART& (0+255),b
 18884  004BDA  EC2D  F00E         	call	_putsUSART	;wreg free
 18885                           
 18886                           ;main.c: 2548: putsUSART((char *) "\r\n");
 18887  004BDE  0E71               	movlw	high (STR_197+50)
 18888  004BE0  0100               	movlb	0	; () banked
 18889  004BE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18890  004BE4  0EC0               	movlw	low (STR_197+50)
 18891  004BE6  6F61               	movwf	?_putsUSART& (0+255),b
 18892  004BE8  EC2D  F00E         	call	_putsUSART	;wreg free
 18893                           
 18894                           ;main.c: 2550: putsUSART((char *) "UART Receive overruns: ");
 18895  004BEC  0E79               	movlw	high STR_184
 18896  004BEE  0100               	movlb	0	; () banked
 18897  004BF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18898  004BF2  0E91               	movlw	low STR_184
 18899  004BF4  6F61               	movwf	?_putsUSART& (0+255),b
 18900  004BF6  EC2D  F00E         	call	_putsUSART	;wreg free
 18901                           
 18902                           ;main.c: 2551: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18903  004BFA  0100               	movlb	0	; () banked
 18904  004BFC  67E4               	tstfsz	_bHex& (0+255),b
 18905  004BFE  D004               	goto	l15023
 18906                           
 18907                           ; BSR set to: 0
 18908  004C00  0E7C               	movlw	high STR_162
 18909  004C02  6F9B               	movwf	(_printErrors$1414+1)& (0+255),b
 18910  004C04  0EE1               	movlw	low STR_162
 18911  004C06  D003               	goto	L19
 18912  004C08                     l15023:
 18913                           
 18914                           ; BSR set to: 0
 18915  004C08  0E7C               	movlw	high STR_177
 18916  004C0A  6F9B               	movwf	(_printErrors$1414+1)& (0+255),b
 18917  004C0C  0E16               	movlw	low STR_177
 18918  004C0E                     L19:
 18919  004C0E  6F9A               	movwf	_printErrors$1414& (0+255),b
 18920                           
 18921                           ; BSR set to: 0
 18922  004C10  0E01               	movlw	high _wrkbuf
 18923  004C12  0100               	movlb	0	; () banked
 18924  004C14  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18925  004C16  0E7B               	movlw	low _wrkbuf
 18926  004C18  6F76               	movwf	?_sprintf& (0+255),b
 18927  004C1A  C09A  F078         	movff	_printErrors$1414,?_sprintf+2
 18928  004C1E  C09B  F079         	movff	_printErrors$1414+1,?_sprintf+3
 18929  004C22  C120  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18930  004C26  C121  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18931  004C2A  C122  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18932  004C2E  C123  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18933  004C32  ECAA  F028         	call	_sprintf	;wreg free
 18934                           
 18935                           ; BSR set to: 0
 18936                           ;main.c: 2552: putsUSART(wrkbuf);
 18937  004C36  0E01               	movlw	high _wrkbuf
 18938  004C38  0100               	movlb	0	; () banked
 18939  004C3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18940  004C3C  0E7B               	movlw	low _wrkbuf
 18941  004C3E  6F61               	movwf	?_putsUSART& (0+255),b
 18942  004C40  EC2D  F00E         	call	_putsUSART	;wreg free
 18943                           
 18944                           ;main.c: 2553: putsUSART((char *) "\r\n");
 18945  004C44  0E71               	movlw	high (STR_197+50)
 18946  004C46  0100               	movlb	0	; () banked
 18947  004C48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18948  004C4A  0EC0               	movlw	low (STR_197+50)
 18949  004C4C  6F61               	movwf	?_putsUSART& (0+255),b
 18950  004C4E  EC2D  F00E         	call	_putsUSART	;wreg free
 18951                           
 18952                           ;main.c: 2555: putsUSART((char *) "Transmit Error Counter: ");
 18953  004C52  0E78               	movlw	high STR_192
 18954  004C54  0100               	movlb	0	; () banked
 18955  004C56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18956  004C58  0EE8               	movlw	low STR_192
 18957  004C5A  6F61               	movwf	?_putsUSART& (0+255),b
 18958  004C5C  EC2D  F00E         	call	_putsUSART	;wreg free
 18959                           
 18960                           ;main.c: 2556: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18961  004C60  0100               	movlb	0	; () banked
 18962  004C62  67E4               	tstfsz	_bHex& (0+255),b
 18963  004C64  D004               	goto	l15037
 18964                           
 18965                           ; BSR set to: 0
 18966  004C66  0E7C               	movlw	high STR_57
 18967  004C68  6F9D               	movwf	(_printErrors$1420+1)& (0+255),b
 18968  004C6A  0EEE               	movlw	low STR_57
 18969  004C6C  D003               	goto	L20
 18970  004C6E                     l15037:
 18971                           
 18972                           ; BSR set to: 0
 18973  004C6E  0E7C               	movlw	high STR_56
 18974  004C70  6F9D               	movwf	(_printErrors$1420+1)& (0+255),b
 18975  004C72  0E65               	movlw	low STR_56
 18976  004C74                     L20:
 18977  004C74  6F9C               	movwf	_printErrors$1420& (0+255),b
 18978                           
 18979                           ; BSR set to: 0
 18980  004C76  0E01               	movlw	high _wrkbuf
 18981  004C78  0100               	movlb	0	; () banked
 18982  004C7A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18983  004C7C  0E7B               	movlw	low _wrkbuf
 18984  004C7E  6F76               	movwf	?_sprintf& (0+255),b
 18985  004C80  C09C  F078         	movff	_printErrors$1420,?_sprintf+2
 18986  004C84  C09D  F079         	movff	_printErrors$1420+1,?_sprintf+3
 18987  004C88  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18988  004C8C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18989  004C8E  ECAA  F028         	call	_sprintf	;wreg free
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;main.c: 2557: putsUSART(wrkbuf);
 18993  004C92  0E01               	movlw	high _wrkbuf
 18994  004C94  0100               	movlb	0	; () banked
 18995  004C96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18996  004C98  0E7B               	movlw	low _wrkbuf
 18997  004C9A  6F61               	movwf	?_putsUSART& (0+255),b
 18998  004C9C  EC2D  F00E         	call	_putsUSART	;wreg free
 18999                           
 19000                           ;main.c: 2558: putsUSART((char *) "\r\n");
 19001  004CA0  0E71               	movlw	high (STR_197+50)
 19002  004CA2  0100               	movlb	0	; () banked
 19003  004CA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19004  004CA6  0EC0               	movlw	low (STR_197+50)
 19005  004CA8  6F61               	movwf	?_putsUSART& (0+255),b
 19006  004CAA  EC2D  F00E         	call	_putsUSART	;wreg free
 19007                           
 19008                           ;main.c: 2560: if (COMSTATbits.TXWARN) {
 19009  004CAE  A474               	btfss	3956,2,c	;volatile
 19010  004CB0  D007               	goto	l15049
 19011                           
 19012                           ;main.c: 2561: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19013  004CB2  0E6F               	movlw	high STR_196
 19014  004CB4  0100               	movlb	0	; () banked
 19015  004CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19016  004CB8  0E98               	movlw	low STR_196
 19017  004CBA  6F61               	movwf	?_putsUSART& (0+255),b
 19018  004CBC  EC2D  F00E         	call	_putsUSART	;wreg free
 19019  004CC0                     l15049:
 19020                           
 19021                           ;main.c: 2562: }
 19022                           ;main.c: 2564: if (COMSTATbits.TXBO) {
 19023  004CC0  AA74               	btfss	3956,5,c	;volatile
 19024  004CC2  D007               	goto	l15053
 19025                           
 19026                           ;main.c: 2565: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19027  004CC4  0E71               	movlw	high STR_197
 19028  004CC6  0100               	movlb	0	; () banked
 19029  004CC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19030  004CCA  0E8E               	movlw	low STR_197
 19031  004CCC  6F61               	movwf	?_putsUSART& (0+255),b
 19032  004CCE  EC2D  F00E         	call	_putsUSART	;wreg free
 19033  004CD2                     l15053:
 19034                           
 19035                           ;main.c: 2566: }
 19036                           ;main.c: 2568: if (COMSTATbits.TXBP) {
 19037  004CD2  A874               	btfss	3956,4,c	;volatile
 19038  004CD4  D007               	goto	l1178
 19039                           
 19040                           ;main.c: 2569: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19041  004CD6  0E70               	movlw	high STR_198
 19042  004CD8  0100               	movlb	0	; () banked
 19043  004CDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19044  004CDC  0E0C               	movlw	low STR_198
 19045  004CDE  6F61               	movwf	?_putsUSART& (0+255),b
 19046  004CE0  EC2D  F00E         	call	_putsUSART	;wreg free
 19047  004CE4                     l1178:
 19048                           
 19049                           ;main.c: 2570: }
 19050                           ;main.c: 2573: putsUSART((char *) "Receive Error Counter: ");
 19051  004CE4  0E79               	movlw	high STR_199
 19052  004CE6  0100               	movlb	0	; () banked
 19053  004CE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19054  004CEA  0E79               	movlw	low STR_199
 19055  004CEC  6F61               	movwf	?_putsUSART& (0+255),b
 19056  004CEE  EC2D  F00E         	call	_putsUSART	;wreg free
 19057                           
 19058                           ;main.c: 2574: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19059  004CF2  0100               	movlb	0	; () banked
 19060  004CF4  67E4               	tstfsz	_bHex& (0+255),b
 19061  004CF6  D004               	goto	l15061
 19062                           
 19063                           ; BSR set to: 0
 19064  004CF8  0E7C               	movlw	high STR_57
 19065  004CFA  6F9F               	movwf	(_printErrors$1429+1)& (0+255),b
 19066  004CFC  0EEE               	movlw	low STR_57
 19067  004CFE  D003               	goto	L21
 19068  004D00                     l15061:
 19069                           
 19070                           ; BSR set to: 0
 19071  004D00  0E7C               	movlw	high STR_56
 19072  004D02  6F9F               	movwf	(_printErrors$1429+1)& (0+255),b
 19073  004D04  0E65               	movlw	low STR_56
 19074  004D06                     L21:
 19075  004D06  6F9E               	movwf	_printErrors$1429& (0+255),b
 19076                           
 19077                           ; BSR set to: 0
 19078  004D08  0E01               	movlw	high _wrkbuf
 19079  004D0A  0100               	movlb	0	; () banked
 19080  004D0C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19081  004D0E  0E7B               	movlw	low _wrkbuf
 19082  004D10  6F76               	movwf	?_sprintf& (0+255),b
 19083  004D12  C09E  F078         	movff	_printErrors$1429,?_sprintf+2
 19084  004D16  C09F  F079         	movff	_printErrors$1429+1,?_sprintf+3
 19085  004D1A  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19086  004D1E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19087  004D20  ECAA  F028         	call	_sprintf	;wreg free
 19088                           
 19089                           ; BSR set to: 0
 19090                           ;main.c: 2575: putsUSART(wrkbuf);
 19091  004D24  0E01               	movlw	high _wrkbuf
 19092  004D26  0100               	movlb	0	; () banked
 19093  004D28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19094  004D2A  0E7B               	movlw	low _wrkbuf
 19095  004D2C  6F61               	movwf	?_putsUSART& (0+255),b
 19096  004D2E  EC2D  F00E         	call	_putsUSART	;wreg free
 19097                           
 19098                           ;main.c: 2576: putsUSART((char *) "\r\n");
 19099  004D32  0E71               	movlw	high (STR_197+50)
 19100  004D34  0100               	movlb	0	; () banked
 19101  004D36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19102  004D38  0EC0               	movlw	low (STR_197+50)
 19103  004D3A  6F61               	movwf	?_putsUSART& (0+255),b
 19104  004D3C  EC2D  F00E         	call	_putsUSART	;wreg free
 19105                           
 19106                           ;main.c: 2578: if (COMSTATbits.RXWARN) {
 19107  004D40  A274               	btfss	3956,1,c	;volatile
 19108  004D42  D007               	goto	l15073
 19109                           
 19110                           ;main.c: 2579: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19111  004D44  0E70               	movlw	high STR_203
 19112  004D46  0100               	movlb	0	; () banked
 19113  004D48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19114  004D4A  0E7D               	movlw	low STR_203
 19115  004D4C  6F61               	movwf	?_putsUSART& (0+255),b
 19116  004D4E  EC2D  F00E         	call	_putsUSART	;wreg free
 19117  004D52                     l15073:
 19118                           
 19119                           ;main.c: 2580: }
 19120                           ;main.c: 2582: if (COMSTATbits.RXBP) {
 19121  004D52  A674               	btfss	3956,3,c	;volatile
 19122  004D54  D007               	goto	l15077
 19123                           
 19124                           ;main.c: 2583: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19125  004D56  0E71               	movlw	high STR_204
 19126  004D58  0100               	movlb	0	; () banked
 19127  004D5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19128  004D5C  0E22               	movlw	low STR_204
 19129  004D5E  6F61               	movwf	?_putsUSART& (0+255),b
 19130  004D60  EC2D  F00E         	call	_putsUSART	;wreg free
 19131  004D64                     l15077:
 19132                           
 19133                           ;main.c: 2584: }
 19134                           ;main.c: 2586: if (COMSTATbits.EWARN) {
 19135  004D64  A074               	btfss	3956,0,c	;volatile
 19136  004D66  D007               	goto	l1186
 19137                           
 19138                           ;main.c: 2587: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19139  004D68  0E71               	movlw	high STR_205
 19140  004D6A  0100               	movlb	0	; () banked
 19141  004D6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19142  004D6E  0EC3               	movlw	low STR_205
 19143  004D70  6F61               	movwf	?_putsUSART& (0+255),b
 19144  004D72  EC2D  F00E         	call	_putsUSART	;wreg free
 19145  004D76                     l1186:
 19146  004D76  0012               	return	
 19147  004D78                     __end_of_printErrors:
 19148                           	opt stack 0
 19149                           tblptru	equ	0xFF8
 19150                           tblptrh	equ	0xFF7
 19151                           tblptrl	equ	0xFF6
 19152                           tablat	equ	0xFF5
 19153                           prodh	equ	0xFF4
 19154                           prodl	equ	0xFF3
 19155                           intcon	equ	0xFF2
 19156                           indf0	equ	0xFEF
 19157                           postinc0	equ	0xFEE
 19158                           fsr0h	equ	0xFEA
 19159                           fsr0l	equ	0xFE9
 19160                           wreg	equ	0xFE8
 19161                           indf1	equ	0xFE7
 19162                           postinc1	equ	0xFE6
 19163                           postdec1	equ	0xFE5
 19164                           fsr1h	equ	0xFE2
 19165                           fsr1l	equ	0xFE1
 19166                           indf2	equ	0xFDF
 19167                           postinc2	equ	0xFDE
 19168                           postdec2	equ	0xFDD
 19169                           plusw2	equ	0xFDB
 19170                           fsr2h	equ	0xFDA
 19171                           fsr2l	equ	0xFD9
 19172                           status	equ	0xFD8
 19173                           
 19174 ;; *************** function _printStatistics *****************
 19175 ;; Defined at:
 19176 ;;		line 2507 in file "main.c"
 19177 ;; Parameters:    Size  Location     Type
 19178 ;;		None
 19179 ;; Auto vars:     Size  Location     Type
 19180 ;;		None
 19181 ;; Return value:  Size  Location     Type
 19182 ;;		None               void
 19183 ;; Registers used:
 19184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19185 ;; Tracked objects:
 19186 ;;		On entry : F/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19190 ;;      Params:         0       0       0       0       0       0       0
 19191 ;;      Locals:         0       8       0       0       0       0       0
 19192 ;;      Temps:          0       0       0       0       0       0       0
 19193 ;;      Totals:         0       8       0       0       0       0       0
 19194 ;;Total ram usage:        8 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    5
 19197 ;; This function calls:
 19198 ;;		_putsUSART
 19199 ;;		_sprintf
 19200 ;; This function is called by:
 19201 ;;		_doModeVerbose
 19202 ;; This function uses a non-reentrant model
 19203 ;;
 19204                           
 19205                           	psect	text41
 19206  003F38                     __ptext41:
 19207                           	opt stack 0
 19208  003F38                     _printStatistics:
 19209                           	opt stack 23
 19210                           
 19211                           ; BSR set to: 0
 19212                           ;main.c: 2508: putsUSART((char *) "Sent CAN frames: ");
 19213                           
 19214                           ;incstack = 0
 19215                           ;incstack = 0
 19216  003F38  0E7B               	movlw	high STR_160
 19217  003F3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19218  003F3C  0E0A               	movlw	low STR_160
 19219  003F3E  6F61               	movwf	?_putsUSART& (0+255),b
 19220  003F40  EC2D  F00E         	call	_putsUSART	;wreg free
 19221                           
 19222                           ;main.c: 2509: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19223  003F44  0100               	movlb	0	; () banked
 19224  003F46  67E4               	tstfsz	_bHex& (0+255),b
 19225  003F48  D004               	goto	l14925
 19226                           
 19227                           ; BSR set to: 0
 19228  003F4A  0E7C               	movlw	high STR_162
 19229  003F4C  6F95               	movwf	(_printStatistics$1371+1)& (0+255),b
 19230  003F4E  0EE1               	movlw	low STR_162
 19231  003F50  D003               	goto	L22
 19232  003F52                     l14925:
 19233                           
 19234                           ; BSR set to: 0
 19235  003F52  0E7C               	movlw	high STR_161
 19236  003F54  6F95               	movwf	(_printStatistics$1371+1)& (0+255),b
 19237  003F56  0E73               	movlw	low STR_161
 19238  003F58                     L22:
 19239  003F58  6F94               	movwf	_printStatistics$1371& (0+255),b
 19240                           
 19241                           ; BSR set to: 0
 19242  003F5A  0E01               	movlw	high _wrkbuf
 19243  003F5C  0100               	movlb	0	; () banked
 19244  003F5E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19245  003F60  0E7B               	movlw	low _wrkbuf
 19246  003F62  6F76               	movwf	?_sprintf& (0+255),b
 19247  003F64  C094  F078         	movff	_printStatistics$1371,?_sprintf+2
 19248  003F68  C095  F079         	movff	_printStatistics$1371+1,?_sprintf+3
 19249  003F6C  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19250  003F70  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19251  003F74  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19252  003F78  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19253  003F7C  ECAA  F028         	call	_sprintf	;wreg free
 19254                           
 19255                           ; BSR set to: 0
 19256                           ;main.c: 2510: putsUSART(wrkbuf);
 19257  003F80  0E01               	movlw	high _wrkbuf
 19258  003F82  0100               	movlb	0	; () banked
 19259  003F84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19260  003F86  0E7B               	movlw	low _wrkbuf
 19261  003F88  6F61               	movwf	?_putsUSART& (0+255),b
 19262  003F8A  EC2D  F00E         	call	_putsUSART	;wreg free
 19263                           
 19264                           ;main.c: 2511: putsUSART((char *) "\r\n");
 19265  003F8E  0E71               	movlw	high (STR_197+50)
 19266  003F90  0100               	movlb	0	; () banked
 19267  003F92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19268  003F94  0EC0               	movlw	low (STR_197+50)
 19269  003F96  6F61               	movwf	?_putsUSART& (0+255),b
 19270  003F98  EC2D  F00E         	call	_putsUSART	;wreg free
 19271                           
 19272                           ;main.c: 2513: putsUSART((char *) "Sent CAN bytes: ");
 19273  003F9C  0E7B               	movlw	high STR_164
 19274  003F9E  0100               	movlb	0	; () banked
 19275  003FA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19276  003FA2  0E3E               	movlw	low STR_164
 19277  003FA4  6F61               	movwf	?_putsUSART& (0+255),b
 19278  003FA6  EC2D  F00E         	call	_putsUSART	;wreg free
 19279                           
 19280                           ;main.c: 2514: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19281  003FAA  0100               	movlb	0	; () banked
 19282  003FAC  67E4               	tstfsz	_bHex& (0+255),b
 19283  003FAE  D004               	goto	l14939
 19284                           
 19285                           ; BSR set to: 0
 19286  003FB0  0E7C               	movlw	high STR_162
 19287  003FB2  6F97               	movwf	(_printStatistics$1377+1)& (0+255),b
 19288  003FB4  0EE1               	movlw	low STR_162
 19289  003FB6  D003               	goto	L23
 19290  003FB8                     l14939:
 19291                           
 19292                           ; BSR set to: 0
 19293  003FB8  0E7C               	movlw	high STR_161
 19294  003FBA  6F97               	movwf	(_printStatistics$1377+1)& (0+255),b
 19295  003FBC  0E73               	movlw	low STR_161
 19296  003FBE                     L23:
 19297  003FBE  6F96               	movwf	_printStatistics$1377& (0+255),b
 19298                           
 19299                           ; BSR set to: 0
 19300  003FC0  0E01               	movlw	high _wrkbuf
 19301  003FC2  0100               	movlb	0	; () banked
 19302  003FC4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19303  003FC6  0E7B               	movlw	low _wrkbuf
 19304  003FC8  6F76               	movwf	?_sprintf& (0+255),b
 19305  003FCA  C096  F078         	movff	_printStatistics$1377,?_sprintf+2
 19306  003FCE  C097  F079         	movff	_printStatistics$1377+1,?_sprintf+3
 19307  003FD2  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19308  003FD6  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19309  003FDA  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19310  003FDE  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19311  003FE2  ECAA  F028         	call	_sprintf	;wreg free
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;main.c: 2515: putsUSART(wrkbuf);
 19315  003FE6  0E01               	movlw	high _wrkbuf
 19316  003FE8  0100               	movlb	0	; () banked
 19317  003FEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19318  003FEC  0E7B               	movlw	low _wrkbuf
 19319  003FEE  6F61               	movwf	?_putsUSART& (0+255),b
 19320  003FF0  EC2D  F00E         	call	_putsUSART	;wreg free
 19321                           
 19322                           ;main.c: 2516: putsUSART((char *) "\r\n");
 19323  003FF4  0E71               	movlw	high (STR_197+50)
 19324  003FF6  0100               	movlb	0	; () banked
 19325  003FF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19326  003FFA  0EC0               	movlw	low (STR_197+50)
 19327  003FFC  6F61               	movwf	?_putsUSART& (0+255),b
 19328  003FFE  EC2D  F00E         	call	_putsUSART	;wreg free
 19329                           
 19330                           ;main.c: 2518: putsUSART((char *) "Received CAN frames: ");
 19331  004002  0E7A               	movlw	high STR_168
 19332  004004  0100               	movlb	0	; () banked
 19333  004006  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19334  004008  0E1C               	movlw	low STR_168
 19335  00400A  6F61               	movwf	?_putsUSART& (0+255),b
 19336  00400C  EC2D  F00E         	call	_putsUSART	;wreg free
 19337                           
 19338                           ;main.c: 2519: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19339  004010  0100               	movlb	0	; () banked
 19340  004012  67E4               	tstfsz	_bHex& (0+255),b
 19341  004014  D004               	goto	l14953
 19342                           
 19343                           ; BSR set to: 0
 19344  004016  0E7C               	movlw	high STR_162
 19345  004018  6F99               	movwf	(_printStatistics$1383+1)& (0+255),b
 19346  00401A  0EE1               	movlw	low STR_162
 19347  00401C  D003               	goto	L24
 19348  00401E                     l14953:
 19349                           
 19350                           ; BSR set to: 0
 19351  00401E  0E7C               	movlw	high STR_161
 19352  004020  6F99               	movwf	(_printStatistics$1383+1)& (0+255),b
 19353  004022  0E73               	movlw	low STR_161
 19354  004024                     L24:
 19355  004024  6F98               	movwf	_printStatistics$1383& (0+255),b
 19356                           
 19357                           ; BSR set to: 0
 19358  004026  0E01               	movlw	high _wrkbuf
 19359  004028  0100               	movlb	0	; () banked
 19360  00402A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19361  00402C  0E7B               	movlw	low _wrkbuf
 19362  00402E  6F76               	movwf	?_sprintf& (0+255),b
 19363  004030  C098  F078         	movff	_printStatistics$1383,?_sprintf+2
 19364  004034  C099  F079         	movff	_printStatistics$1383+1,?_sprintf+3
 19365  004038  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19366  00403C  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19367  004040  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19368  004044  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19369  004048  ECAA  F028         	call	_sprintf	;wreg free
 19370                           
 19371                           ; BSR set to: 0
 19372                           ;main.c: 2520: putsUSART(wrkbuf);
 19373  00404C  0E01               	movlw	high _wrkbuf
 19374  00404E  0100               	movlb	0	; () banked
 19375  004050  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19376  004052  0E7B               	movlw	low _wrkbuf
 19377  004054  6F61               	movwf	?_putsUSART& (0+255),b
 19378  004056  EC2D  F00E         	call	_putsUSART	;wreg free
 19379                           
 19380                           ;main.c: 2521: putsUSART((char *) "\r\n");
 19381  00405A  0E71               	movlw	high (STR_197+50)
 19382  00405C  0100               	movlb	0	; () banked
 19383  00405E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19384  004060  0EC0               	movlw	low (STR_197+50)
 19385  004062  6F61               	movwf	?_putsUSART& (0+255),b
 19386  004064  EC2D  F00E         	call	_putsUSART	;wreg free
 19387                           
 19388                           ;main.c: 2523: putsUSART((char *) "Received CAN bytes: ");
 19389  004068  0E7A               	movlw	high STR_172
 19390  00406A  0100               	movlb	0	; () banked
 19391  00406C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19392  00406E  0E32               	movlw	low STR_172
 19393  004070  6F61               	movwf	?_putsUSART& (0+255),b
 19394  004072  EC2D  F00E         	call	_putsUSART	;wreg free
 19395                           
 19396                           ;main.c: 2524: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19397  004076  0100               	movlb	0	; () banked
 19398  004078  67E4               	tstfsz	_bHex& (0+255),b
 19399  00407A  D004               	goto	l14967
 19400                           
 19401                           ; BSR set to: 0
 19402  00407C  0E7C               	movlw	high STR_162
 19403  00407E  6F9B               	movwf	(_printStatistics$1389+1)& (0+255),b
 19404  004080  0EE1               	movlw	low STR_162
 19405  004082  D003               	goto	L25
 19406  004084                     l14967:
 19407                           
 19408                           ; BSR set to: 0
 19409  004084  0E7C               	movlw	high STR_161
 19410  004086  6F9B               	movwf	(_printStatistics$1389+1)& (0+255),b
 19411  004088  0E73               	movlw	low STR_161
 19412  00408A                     L25:
 19413  00408A  6F9A               	movwf	_printStatistics$1389& (0+255),b
 19414                           
 19415                           ; BSR set to: 0
 19416  00408C  0E01               	movlw	high _wrkbuf
 19417  00408E  0100               	movlb	0	; () banked
 19418  004090  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19419  004092  0E7B               	movlw	low _wrkbuf
 19420  004094  6F76               	movwf	?_sprintf& (0+255),b
 19421  004096  C09A  F078         	movff	_printStatistics$1389,?_sprintf+2
 19422  00409A  C09B  F079         	movff	_printStatistics$1389+1,?_sprintf+3
 19423  00409E  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19424  0040A2  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19425  0040A6  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19426  0040AA  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19427  0040AE  ECAA  F028         	call	_sprintf	;wreg free
 19428                           
 19429                           ; BSR set to: 0
 19430                           ;main.c: 2525: putsUSART(wrkbuf);
 19431  0040B2  0E01               	movlw	high _wrkbuf
 19432  0040B4  0100               	movlb	0	; () banked
 19433  0040B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19434  0040B8  0E7B               	movlw	low _wrkbuf
 19435  0040BA  6F61               	movwf	?_putsUSART& (0+255),b
 19436  0040BC  EC2D  F00E         	call	_putsUSART	;wreg free
 19437                           
 19438                           ;main.c: 2526: putsUSART((char *) "\r\n");
 19439  0040C0  0E71               	movlw	high (STR_197+50)
 19440  0040C2  0100               	movlb	0	; () banked
 19441  0040C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19442  0040C6  0EC0               	movlw	low (STR_197+50)
 19443  0040C8  6F61               	movwf	?_putsUSART& (0+255),b
 19444  0040CA  EF2D  F00E         	goto	_putsUSART	;wreg free
 19445  0040CE                     __end_of_printStatistics:
 19446                           	opt stack 0
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           indf0	equ	0xFEF
 19455                           postinc0	equ	0xFEE
 19456                           fsr0h	equ	0xFEA
 19457                           fsr0l	equ	0xFE9
 19458                           wreg	equ	0xFE8
 19459                           indf1	equ	0xFE7
 19460                           postinc1	equ	0xFE6
 19461                           postdec1	equ	0xFE5
 19462                           fsr1h	equ	0xFE2
 19463                           fsr1l	equ	0xFE1
 19464                           indf2	equ	0xFDF
 19465                           postinc2	equ	0xFDE
 19466                           postdec2	equ	0xFDD
 19467                           plusw2	equ	0xFDB
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function _atoi *****************
 19473 ;; Defined at:
 19474 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19477 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19478 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19479 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19480 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19481 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19482 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19483 ;; Auto vars:     Size  Location     Type
 19484 ;;  a               2   11[BANK0 ] int 
 19485 ;;  sign            1   10[BANK0 ] unsigned char 
 19486 ;; Return value:  Size  Location     Type
 19487 ;;                  2    6[BANK0 ] int 
 19488 ;; Registers used:
 19489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19490 ;; Tracked objects:
 19491 ;;		On entry : D/2
 19492 ;;		On exit  : F/0
 19493 ;;		Unchanged: 0/0
 19494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19495 ;;      Params:         0       2       0       0       0       0       0
 19496 ;;      Locals:         0       3       0       0       0       0       0
 19497 ;;      Temps:          0       2       0       0       0       0       0
 19498 ;;      Totals:         0       7       0       0       0       0       0
 19499 ;;Total ram usage:        7 bytes
 19500 ;; Hardware stack levels used:    1
 19501 ;; Hardware stack levels required when called:    4
 19502 ;; This function calls:
 19503 ;;		_isdigit
 19504 ;;		___wmul
 19505 ;; This function is called by:
 19506 ;;		_doModeVerbose
 19507 ;; This function uses a non-reentrant model
 19508 ;;
 19509                           
 19510                           	psect	text42
 19511  003374                     __ptext42:
 19512                           	opt stack 0
 19513  003374                     _atoi:
 19514                           	opt stack 24
 19515                           
 19516                           ;incstack = 0
 19517                           ;incstack = 0
 19518  003374  D003               	goto	l14877
 19519  003376                     l14875:
 19520  003376  0100               	movlb	0	; () banked
 19521  003378  4B66               	infsnz	atoi@s& (0+255),f,b
 19522  00337A  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19523  00337C                     l14877:
 19524  00337C  0100               	movlb	0	; () banked
 19525  00337E  D876               	call	PL16	;call to abstracted procedure
 19526  003380  64EA               	cpfsgt	fsr0h,c
 19527  003382  D003               	bra	u19977
 19528  003384  6EEA               	movwf	fsr0h,c
 19529  003386  50EF               	movf	indf0,w,c
 19530  003388  D003               	bra	u19970
 19531  00338A                     u19977:
 19532  00338A  6EF7               	movwf	tblptrh,c
 19533  00338C  0008               	tblrd		*
 19534  00338E  50F5               	movf	tablat,w,c
 19535  003390                     u19970:
 19536  003390  0A20               	xorlw	32
 19537  003392  E0F1               	bz	l14875
 19538  003394  0100               	movlb	0	; () banked
 19539  003396  D86A               	call	PL16	;call to abstracted procedure
 19540  003398  64EA               	cpfsgt	fsr0h,c
 19541  00339A  D003               	bra	u19997
 19542  00339C  6EEA               	movwf	fsr0h,c
 19543  00339E  50EF               	movf	indf0,w,c
 19544  0033A0  D003               	bra	u19990
 19545  0033A2                     u19997:
 19546  0033A2  6EF7               	movwf	tblptrh,c
 19547  0033A4  0008               	tblrd		*
 19548  0033A6  50F5               	movf	tablat,w,c
 19549  0033A8                     u19990:
 19550  0033A8  0A09               	xorlw	9
 19551  0033AA  E0E5               	bz	l14875
 19552  0033AC  0100               	movlb	0	; () banked
 19553  0033AE  6B6B               	clrf	atoi@a& (0+255),b
 19554  0033B0  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19555  0033B2  6B6A               	clrf	atoi@sign& (0+255),b
 19556                           
 19557                           ; BSR set to: 0
 19558  0033B4  D85B               	call	PL16	;call to abstracted procedure
 19559  0033B6  64EA               	cpfsgt	fsr0h,c
 19560  0033B8  D003               	bra	u20017
 19561  0033BA  6EEA               	movwf	fsr0h,c
 19562  0033BC  50EF               	movf	indf0,w,c
 19563  0033BE  D003               	bra	u20010
 19564  0033C0                     u20017:
 19565  0033C0  6EF7               	movwf	tblptrh,c
 19566  0033C2  0008               	tblrd		*
 19567  0033C4  50F5               	movf	tablat,w,c
 19568  0033C6                     u20010:
 19569  0033C6  0A2D               	xorlw	45
 19570  0033C8  E103               	bnz	l14885
 19571  0033CA  0100               	movlb	0	; () banked
 19572  0033CC  2B6A               	incf	atoi@sign& (0+255),f,b
 19573  0033CE  D00D               	goto	L26
 19574  0033D0                     l14885:
 19575  0033D0  0100               	movlb	0	; () banked
 19576  0033D2  D84C               	call	PL16	;call to abstracted procedure
 19577  0033D4  64EA               	cpfsgt	fsr0h,c
 19578  0033D6  D003               	bra	u20037
 19579  0033D8  6EEA               	movwf	fsr0h,c
 19580  0033DA  50EF               	movf	indf0,w,c
 19581  0033DC  D003               	bra	u20030
 19582  0033DE                     u20037:
 19583  0033DE  6EF7               	movwf	tblptrh,c
 19584  0033E0  0008               	tblrd		*
 19585  0033E2  50F5               	movf	tablat,w,c
 19586  0033E4                     u20030:
 19587  0033E4  0A2B               	xorlw	43
 19588  0033E6  E121               	bnz	l14893
 19589  0033E8                     l14887:
 19590  0033E8  0100               	movlb	0	; () banked
 19591  0033EA                     L26:
 19592  0033EA  4B66               	infsnz	atoi@s& (0+255),f,b
 19593  0033EC  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19594  0033EE  D01D               	goto	l14893
 19595  0033F0                     l14889:
 19596                           
 19597                           ; BSR set to: 0
 19598  0033F0  C06B  F060         	movff	atoi@a,?___wmul
 19599  0033F4  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19600  0033F8  6B63               	clrf	(?___wmul+3)& (0+255),b
 19601  0033FA  0E0A               	movlw	10
 19602  0033FC  6F62               	movwf	(?___wmul+2)& (0+255),b
 19603  0033FE  EC0D  F00C         	call	___wmul	;wreg free
 19604  003402  D834               	call	PL16	;call to abstracted procedure
 19605  003404  64EA               	cpfsgt	fsr0h,c
 19606  003406  D003               	bra	u20057
 19607  003408  6EEA               	movwf	fsr0h,c
 19608  00340A  50EF               	movf	indf0,w,c
 19609  00340C  D003               	bra	u20050
 19610  00340E                     u20057:
 19611  00340E  6EF7               	movwf	tblptrh,c
 19612  003410  0008               	tblrd		*
 19613  003412  50F5               	movf	tablat,w,c
 19614  003414                     u20050:
 19615  003414  0100               	movlb	0	; () banked
 19616  003416  2760               	addwf	?___wmul& (0+255),f,b
 19617  003418  0E00               	movlw	0
 19618  00341A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19619  00341C  0ED0               	movlw	208
 19620  00341E  2560               	addwf	?___wmul& (0+255),w,b
 19621  003420  6F6B               	movwf	atoi@a& (0+255),b
 19622  003422  0EFF               	movlw	255
 19623  003424  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19624  003426  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19625  003428  D7DF               	goto	l14887
 19626  00342A                     l14893:
 19627  00342A  0100               	movlb	0	; () banked
 19628  00342C  D81F               	call	PL16	;call to abstracted procedure
 19629  00342E  64EA               	cpfsgt	fsr0h,c
 19630  003430  D003               	bra	u20067
 19631  003432  6EEA               	movwf	fsr0h,c
 19632  003434  50EF               	movf	indf0,w,c
 19633  003436  D003               	bra	u20060
 19634  003438                     u20067:
 19635  003438  6EF7               	movwf	tblptrh,c
 19636  00343A  0008               	tblrd		*
 19637  00343C  50F5               	movf	tablat,w,c
 19638  00343E                     u20060:
 19639  00343E  ECB8  F00B         	call	_isdigit
 19640  003442  E2D6               	bc	l14889
 19641                           
 19642                           ; BSR set to: 0
 19643  003444  516A               	movf	atoi@sign& (0+255),w,b
 19644  003446  E00D               	bz	l2061
 19645                           
 19646                           ; BSR set to: 0
 19647  003448  C06B  F068         	movff	atoi@a,??_atoi
 19648  00344C  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19649  003450  1F68               	comf	??_atoi& (0+255),f,b
 19650  003452  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19651  003454  4B68               	infsnz	??_atoi& (0+255),f,b
 19652  003456  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19653  003458  C068  F066         	movff	??_atoi,?_atoi
 19654  00345C  C069  F067         	movff	??_atoi+1,?_atoi+1
 19655  003460  D004               	goto	l2062
 19656  003462                     l2061:
 19657                           
 19658                           ; BSR set to: 0
 19659  003462  C06B  F066         	movff	atoi@a,?_atoi
 19660  003466  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19661  00346A                     l2062:
 19662                           
 19663                           ; BSR set to: 0
 19664  00346A  0012               	return	
 19665  00346C                     __end_of_atoi:
 19666                           	opt stack 0
 19667  00346C                     PL16:
 19668                           	opt stack 24
 19669  00346C  5166               	movf	atoi@s& (0+255),w,b
 19670  00346E  6EF6               	movwf	tblptrl,c
 19671  003470  6EE9               	movwf	fsr0l,c
 19672  003472  0E05               	movlw	(high __ramtop+-1)
 19673  003474  6EEA               	movwf	fsr0h,c
 19674  003476  5167               	movf	(atoi@s+1)& (0+255),w,b
 19675  003478  0012               	return	
 19676  00347A                     __end_ofPL16:
 19677                           	opt stack 0
 19678                           tblptru	equ	0xFF8
 19679                           tblptrh	equ	0xFF7
 19680                           tblptrl	equ	0xFF6
 19681                           tablat	equ	0xFF5
 19682                           prodh	equ	0xFF4
 19683                           prodl	equ	0xFF3
 19684                           intcon	equ	0xFF2
 19685                           indf0	equ	0xFEF
 19686                           postinc0	equ	0xFEE
 19687                           fsr0h	equ	0xFEA
 19688                           fsr0l	equ	0xFE9
 19689                           wreg	equ	0xFE8
 19690                           indf1	equ	0xFE7
 19691                           postinc1	equ	0xFE6
 19692                           postdec1	equ	0xFE5
 19693                           fsr1h	equ	0xFE2
 19694                           fsr1l	equ	0xFE1
 19695                           indf2	equ	0xFDF
 19696                           postinc2	equ	0xFDE
 19697                           postdec2	equ	0xFDD
 19698                           plusw2	equ	0xFDB
 19699                           fsr2h	equ	0xFDA
 19700                           fsr2l	equ	0xFD9
 19701                           status	equ	0xFD8
 19702                           
 19703 ;; *************** function _strtok *****************
 19704 ;; Defined at:
 19705 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19706 ;; Parameters:    Size  Location     Type
 19707 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19708 ;;		 -> NULL(0), cmdbuf(80), 
 19709 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19710 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19711 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19712 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19713 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19714 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19715 ;;		 -> STR_31(2), STR_30(2), 
 19716 ;; Auto vars:     Size  Location     Type
 19717 ;;		None
 19718 ;; Return value:  Size  Location     Type
 19719 ;;                  2   12[BANK0 ] PTR unsigned char 
 19720 ;; Registers used:
 19721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19722 ;; Tracked objects:
 19723 ;;		On entry : F/0
 19724 ;;		On exit  : F/0
 19725 ;;		Unchanged: 0/0
 19726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19727 ;;      Params:         0       4       0       0       0       0       0
 19728 ;;      Locals:         0       0       0       0       0       0       0
 19729 ;;      Temps:          0       0       0       0       0       0       0
 19730 ;;      Totals:         0       4       0       0       0       0       0
 19731 ;;Total ram usage:        4 bytes
 19732 ;; Hardware stack levels used:    1
 19733 ;; Hardware stack levels required when called:    5
 19734 ;; This function calls:
 19735 ;;		_strspn
 19736 ;;		_strcspn
 19737 ;; This function is called by:
 19738 ;;		_doModeVerbose
 19739 ;; This function uses a non-reentrant model
 19740 ;;
 19741                           
 19742                           	psect	text43
 19743  00232E                     __ptext43:
 19744                           	opt stack 0
 19745  00232E                     _strtok:
 19746                           	opt stack 23
 19747                           
 19748                           ; BSR set to: 0
 19749                           
 19750                           ; BSR set to: 0
 19751                           ;incstack = 0
 19752                           ;incstack = 0
 19753  00232E  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19754  002330  116C               	iorwf	strtok@s1& (0+255),w,b
 19755  002332  E104               	bnz	l14855
 19756                           
 19757                           ; BSR set to: 0
 19758  002334  C028  F06C         	movff	strtok@sp,strtok@s1
 19759  002338  C029  F06D         	movff	strtok@sp+1,strtok@s1+1
 19760  00233C                     l14855:
 19761                           
 19762                           ; BSR set to: 0
 19763  00233C  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19764  00233E  116C               	iorwf	strtok@s1& (0+255),w,b
 19765  002340  E016               	bz	L27
 19766                           
 19767                           ; BSR set to: 0
 19768                           
 19769                           ; BSR set to: 0
 19770  002342  C06C  F066         	movff	strtok@s1,?_strspn
 19771  002346  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19772  00234A  C06E  F068         	movff	strtok@s2,?_strspn+2
 19773  00234E  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19774  002352  EC53  F00D         	call	_strspn	;wreg free
 19775  002356  5166               	movf	?_strspn& (0+255),w,b
 19776  002358  276C               	addwf	strtok@s1& (0+255),f,b
 19777  00235A  5167               	movf	(?_strspn+1)& (0+255),w,b
 19778  00235C  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19779                           
 19780                           ; BSR set to: 0
 19781  00235E  C06C  FFD9         	movff	strtok@s1,fsr2l
 19782  002362  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19783  002366  50DF               	movf	indf2,w,c
 19784  002368  E105               	bnz	l14865
 19785                           
 19786                           ; BSR set to: 0
 19787  00236A  6A28               	clrf	strtok@sp,c
 19788  00236C  6A29               	clrf	strtok@sp+1,c
 19789  00236E                     L27:
 19790  00236E  6B6C               	clrf	?_strtok& (0+255),b
 19791  002370  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19792  002372  D025               	goto	l2554
 19793  002374                     l14865:
 19794                           
 19795                           ; BSR set to: 0
 19796  002374  C06C  F066         	movff	strtok@s1,?_strcspn
 19797  002378  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19798  00237C  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19799  002380  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19800  002384  EC75  F00D         	call	_strcspn	;wreg free
 19801  002388  5166               	movf	?_strcspn& (0+255),w,b
 19802  00238A  256C               	addwf	strtok@s1& (0+255),w,b
 19803  00238C  6E28               	movwf	strtok@sp,c
 19804  00238E  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19805  002390  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19806  002392  6E29               	movwf	strtok@sp+1,c
 19807                           
 19808                           ; BSR set to: 0
 19809  002394  C028  FFD9         	movff	strtok@sp,fsr2l
 19810  002398  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19811  00239C  50DF               	movf	indf2,w,c
 19812  00239E  E009               	bz	l2556
 19813                           
 19814                           ; BSR set to: 0
 19815  0023A0  C028  FFD9         	movff	strtok@sp,fsr2l
 19816  0023A4  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19817  0023A8  0E00               	movlw	0
 19818  0023AA  6EDF               	movwf	indf2,c
 19819                           
 19820                           ; BSR set to: 0
 19821  0023AC  4A28               	infsnz	strtok@sp,f,c
 19822  0023AE  2A29               	incf	strtok@sp+1,f,c
 19823  0023B0  D002               	goto	l2557
 19824  0023B2                     l2556:
 19825                           
 19826                           ; BSR set to: 0
 19827  0023B2  6A28               	clrf	strtok@sp,c
 19828  0023B4  6A29               	clrf	strtok@sp+1,c
 19829  0023B6                     l2557:
 19830                           
 19831                           ; BSR set to: 0
 19832  0023B6  C06C  F06C         	movff	strtok@s1,?_strtok
 19833  0023BA  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19834  0023BE                     l2554:
 19835                           
 19836                           ; BSR set to: 0
 19837  0023BE  0012               	return	
 19838  0023C0                     __end_of_strtok:
 19839                           	opt stack 0
 19840                           tblptru	equ	0xFF8
 19841                           tblptrh	equ	0xFF7
 19842                           tblptrl	equ	0xFF6
 19843                           tablat	equ	0xFF5
 19844                           prodh	equ	0xFF4
 19845                           prodl	equ	0xFF3
 19846                           intcon	equ	0xFF2
 19847                           indf0	equ	0xFEF
 19848                           postinc0	equ	0xFEE
 19849                           fsr0h	equ	0xFEA
 19850                           fsr0l	equ	0xFE9
 19851                           wreg	equ	0xFE8
 19852                           indf1	equ	0xFE7
 19853                           postinc1	equ	0xFE6
 19854                           postdec1	equ	0xFE5
 19855                           fsr1h	equ	0xFE2
 19856                           fsr1l	equ	0xFE1
 19857                           indf2	equ	0xFDF
 19858                           postinc2	equ	0xFDE
 19859                           postdec2	equ	0xFDD
 19860                           plusw2	equ	0xFDB
 19861                           fsr2h	equ	0xFDA
 19862                           fsr2l	equ	0xFD9
 19863                           status	equ	0xFD8
 19864                           
 19865 ;; *************** function _strcspn *****************
 19866 ;; Defined at:
 19867 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19868 ;; Parameters:    Size  Location     Type
 19869 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19870 ;;		 -> NULL(0), cmdbuf(80), 
 19871 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19872 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19873 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19874 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19875 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19876 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19877 ;;		 -> STR_31(2), STR_30(2), 
 19878 ;; Auto vars:     Size  Location     Type
 19879 ;;  i               2   10[BANK0 ] unsigned int 
 19880 ;; Return value:  Size  Location     Type
 19881 ;;                  2    6[BANK0 ] unsigned int 
 19882 ;; Registers used:
 19883 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19884 ;; Tracked objects:
 19885 ;;		On entry : F/0
 19886 ;;		On exit  : F/0
 19887 ;;		Unchanged: 0/0
 19888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19889 ;;      Params:         0       4       0       0       0       0       0
 19890 ;;      Locals:         0       2       0       0       0       0       0
 19891 ;;      Temps:          0       0       0       0       0       0       0
 19892 ;;      Totals:         0       6       0       0       0       0       0
 19893 ;;Total ram usage:        6 bytes
 19894 ;; Hardware stack levels used:    1
 19895 ;; Hardware stack levels required when called:    4
 19896 ;; This function calls:
 19897 ;;		_strchr
 19898 ;; This function is called by:
 19899 ;;		_strtok
 19900 ;; This function uses a non-reentrant model
 19901 ;;
 19902                           
 19903                           	psect	text44
 19904  001AEA                     __ptext44:
 19905                           	opt stack 0
 19906  001AEA                     _strcspn:
 19907                           	opt stack 23
 19908                           
 19909                           ; BSR set to: 0
 19910                           
 19911                           ; BSR set to: 0
 19912                           ;incstack = 0
 19913                           ;incstack = 0
 19914  001AEA  6B6A               	clrf	strcspn@i& (0+255),b
 19915  001AEC  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19916  001AEE  D004               	goto	l16457
 19917  001AF0                     l16455:
 19918                           
 19919                           ; BSR set to: 0
 19920  001AF0  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19921  001AF2  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19922  001AF4  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19923  001AF6  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19924  001AF8                     l16457:
 19925                           
 19926                           ; BSR set to: 0
 19927  001AF8  C066  FFD9         	movff	strcspn@s1,fsr2l
 19928  001AFC  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19929  001B00  50DF               	movf	indf2,w,c
 19930  001B02  E010               	bz	l2581
 19931                           
 19932                           ; BSR set to: 0
 19933  001B04  C068  F060         	movff	strcspn@s2,?_strchr
 19934  001B08  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19935  001B0C  C066  FFD9         	movff	strcspn@s1,fsr2l
 19936  001B10  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19937  001B14  50DF               	movf	indf2,w,c
 19938  001B16  6F62               	movwf	(?_strchr+2)& (0+255),b
 19939  001B18  6B63               	clrf	(?_strchr+3)& (0+255),b
 19940  001B1A  EC14  F00F         	call	_strchr	;wreg free
 19941  001B1E  5161               	movf	(?_strchr+1)& (0+255),w,b
 19942  001B20  1160               	iorwf	?_strchr& (0+255),w,b
 19943  001B22  E0E6               	bz	l16455
 19944  001B24                     l2581:
 19945                           
 19946                           ; BSR set to: 0
 19947  001B24  C06A  F066         	movff	strcspn@i,?_strcspn
 19948  001B28  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19949                           
 19950                           ; BSR set to: 0
 19951  001B2C  0012               	return	
 19952  001B2E                     __end_of_strcspn:
 19953                           	opt stack 0
 19954                           tblptru	equ	0xFF8
 19955                           tblptrh	equ	0xFF7
 19956                           tblptrl	equ	0xFF6
 19957                           tablat	equ	0xFF5
 19958                           prodh	equ	0xFF4
 19959                           prodl	equ	0xFF3
 19960                           intcon	equ	0xFF2
 19961                           indf0	equ	0xFEF
 19962                           postinc0	equ	0xFEE
 19963                           fsr0h	equ	0xFEA
 19964                           fsr0l	equ	0xFE9
 19965                           wreg	equ	0xFE8
 19966                           indf1	equ	0xFE7
 19967                           postinc1	equ	0xFE6
 19968                           postdec1	equ	0xFE5
 19969                           fsr1h	equ	0xFE2
 19970                           fsr1l	equ	0xFE1
 19971                           indf2	equ	0xFDF
 19972                           postinc2	equ	0xFDE
 19973                           postdec2	equ	0xFDD
 19974                           plusw2	equ	0xFDB
 19975                           fsr2h	equ	0xFDA
 19976                           fsr2l	equ	0xFD9
 19977                           status	equ	0xFD8
 19978                           
 19979 ;; *************** function _strspn *****************
 19980 ;; Defined at:
 19981 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19982 ;; Parameters:    Size  Location     Type
 19983 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19984 ;;		 -> NULL(0), cmdbuf(80), 
 19985 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19986 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19987 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19988 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19989 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19990 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19991 ;;		 -> STR_31(2), STR_30(2), 
 19992 ;; Auto vars:     Size  Location     Type
 19993 ;;  i               2   10[BANK0 ] unsigned int 
 19994 ;; Return value:  Size  Location     Type
 19995 ;;                  2    6[BANK0 ] unsigned int 
 19996 ;; Registers used:
 19997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19998 ;; Tracked objects:
 19999 ;;		On entry : F/0
 20000 ;;		On exit  : F/0
 20001 ;;		Unchanged: 0/0
 20002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20003 ;;      Params:         0       4       0       0       0       0       0
 20004 ;;      Locals:         0       2       0       0       0       0       0
 20005 ;;      Temps:          0       0       0       0       0       0       0
 20006 ;;      Totals:         0       6       0       0       0       0       0
 20007 ;;Total ram usage:        6 bytes
 20008 ;; Hardware stack levels used:    1
 20009 ;; Hardware stack levels required when called:    4
 20010 ;; This function calls:
 20011 ;;		_strchr
 20012 ;; This function is called by:
 20013 ;;		_strtok
 20014 ;; This function uses a non-reentrant model
 20015 ;;
 20016                           
 20017                           	psect	text45
 20018  001AA6                     __ptext45:
 20019                           	opt stack 0
 20020  001AA6                     _strspn:
 20021                           	opt stack 23
 20022                           
 20023                           ; BSR set to: 0
 20024                           
 20025                           ; BSR set to: 0
 20026                           ;incstack = 0
 20027                           ;incstack = 0
 20028  001AA6  6B6A               	clrf	strspn@i& (0+255),b
 20029  001AA8  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20030  001AAA  D004               	goto	l16449
 20031  001AAC                     l16447:
 20032                           
 20033                           ; BSR set to: 0
 20034  001AAC  4B66               	infsnz	strspn@s1& (0+255),f,b
 20035  001AAE  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20036  001AB0  4B6A               	infsnz	strspn@i& (0+255),f,b
 20037  001AB2  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20038  001AB4                     l16449:
 20039                           
 20040                           ; BSR set to: 0
 20041  001AB4  C066  FFD9         	movff	strspn@s1,fsr2l
 20042  001AB8  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20043  001ABC  50DF               	movf	indf2,w,c
 20044  001ABE  E010               	bz	l2600
 20045                           
 20046                           ; BSR set to: 0
 20047  001AC0  C068  F060         	movff	strspn@s2,?_strchr
 20048  001AC4  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20049  001AC8  C066  FFD9         	movff	strspn@s1,fsr2l
 20050  001ACC  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20051  001AD0  50DF               	movf	indf2,w,c
 20052  001AD2  6F62               	movwf	(?_strchr+2)& (0+255),b
 20053  001AD4  6B63               	clrf	(?_strchr+3)& (0+255),b
 20054  001AD6  EC14  F00F         	call	_strchr	;wreg free
 20055  001ADA  5161               	movf	(?_strchr+1)& (0+255),w,b
 20056  001ADC  1160               	iorwf	?_strchr& (0+255),w,b
 20057  001ADE  E1E6               	bnz	l16447
 20058  001AE0                     l2600:
 20059                           
 20060                           ; BSR set to: 0
 20061  001AE0  C06A  F066         	movff	strspn@i,?_strspn
 20062  001AE4  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20063                           
 20064                           ; BSR set to: 0
 20065  001AE8  0012               	return	
 20066  001AEA                     __end_of_strspn:
 20067                           	opt stack 0
 20068                           tblptru	equ	0xFF8
 20069                           tblptrh	equ	0xFF7
 20070                           tblptrl	equ	0xFF6
 20071                           tablat	equ	0xFF5
 20072                           prodh	equ	0xFF4
 20073                           prodl	equ	0xFF3
 20074                           intcon	equ	0xFF2
 20075                           indf0	equ	0xFEF
 20076                           postinc0	equ	0xFEE
 20077                           fsr0h	equ	0xFEA
 20078                           fsr0l	equ	0xFE9
 20079                           wreg	equ	0xFE8
 20080                           indf1	equ	0xFE7
 20081                           postinc1	equ	0xFE6
 20082                           postdec1	equ	0xFE5
 20083                           fsr1h	equ	0xFE2
 20084                           fsr1l	equ	0xFE1
 20085                           indf2	equ	0xFDF
 20086                           postinc2	equ	0xFDE
 20087                           postdec2	equ	0xFDD
 20088                           plusw2	equ	0xFDB
 20089                           fsr2h	equ	0xFDA
 20090                           fsr2l	equ	0xFD9
 20091                           status	equ	0xFD8
 20092                           
 20093 ;; *************** function _strchr *****************
 20094 ;; Defined at:
 20095 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20096 ;; Parameters:    Size  Location     Type
 20097 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20098 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20099 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20100 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20101 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20102 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20103 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20104 ;;  chr             2    2[BANK0 ] int 
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;		None
 20107 ;; Return value:  Size  Location     Type
 20108 ;;                  2    0[BANK0 ] PTR unsigned char 
 20109 ;; Registers used:
 20110 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20111 ;; Tracked objects:
 20112 ;;		On entry : F/0
 20113 ;;		On exit  : F/0
 20114 ;;		Unchanged: 0/0
 20115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20116 ;;      Params:         0       4       0       0       0       0       0
 20117 ;;      Locals:         0       0       0       0       0       0       0
 20118 ;;      Temps:          0       2       0       0       0       0       0
 20119 ;;      Totals:         0       6       0       0       0       0       0
 20120 ;;Total ram usage:        6 bytes
 20121 ;; Hardware stack levels used:    1
 20122 ;; Hardware stack levels required when called:    3
 20123 ;; This function calls:
 20124 ;;		Nothing
 20125 ;; This function is called by:
 20126 ;;		_doModeVerbose
 20127 ;;		_strcspn
 20128 ;;		_strspn
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	text46
 20133  001E28                     __ptext46:
 20134                           	opt stack 0
 20135  001E28                     _strchr:
 20136                           	opt stack 25
 20137  001E28                     l2502:
 20138                           
 20139                           ; BSR set to: 0
 20140  001E28  0100               	movlb	0	; () banked
 20141  001E2A  5160               	movf	strchr@ptr& (0+255),w,b
 20142  001E2C  6EF6               	movwf	tblptrl,c
 20143  001E2E  6EE9               	movwf	fsr0l,c
 20144  001E30  0E05               	movlw	(high __ramtop+-1)
 20145  001E32  6EEA               	movwf	fsr0h,c
 20146  001E34  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20147  001E36  64EA               	cpfsgt	fsr0h,c
 20148  001E38  D003               	bra	u14847
 20149  001E3A  6EEA               	movwf	fsr0h,c
 20150  001E3C  50EF               	movf	indf0,w,c
 20151  001E3E  D003               	bra	u14840
 20152  001E40                     u14847:
 20153  001E40  6EF7               	movwf	tblptrh,c
 20154  001E42  0008               	tblrd		*
 20155  001E44  50F5               	movf	tablat,w,c
 20156  001E46                     u14840:
 20157  001E46  0100               	movlb	0	; () banked
 20158  001E48  1962               	xorwf	strchr@chr& (0+255),w,b
 20159  001E4A  E105               	bnz	l11793
 20160                           
 20161                           ; BSR set to: 0
 20162  001E4C  C060  F060         	movff	strchr@ptr,?_strchr
 20163  001E50  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20164  001E54  D019               	goto	l2504
 20165  001E56                     l11793:
 20166                           
 20167                           ; BSR set to: 0
 20168  001E56  5160               	movf	strchr@ptr& (0+255),w,b
 20169  001E58  6F64               	movwf	??_strchr& (0+255),b
 20170  001E5A  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20171  001E5C  6F65               	movwf	(??_strchr+1)& (0+255),b
 20172  001E5E  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20173  001E60  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20174  001E62  5164               	movf	??_strchr& (0+255),w,b
 20175  001E64  6EF6               	movwf	tblptrl,c
 20176  001E66  6EE9               	movwf	fsr0l,c
 20177  001E68  0E05               	movlw	(high __ramtop+-1)
 20178  001E6A  6EEA               	movwf	fsr0h,c
 20179  001E6C  5165               	movf	(??_strchr+1)& (0+255),w,b
 20180  001E6E  64EA               	cpfsgt	fsr0h,c
 20181  001E70  D003               	bra	u14867
 20182  001E72  6EEA               	movwf	fsr0h,c
 20183  001E74  50EF               	movf	indf0,w,c
 20184  001E76  D003               	bra	u14860
 20185  001E78                     u14867:
 20186  001E78  6EF7               	movwf	tblptrh,c
 20187  001E7A  0008               	tblrd		*
 20188  001E7C  50F5               	movf	tablat,w,c
 20189  001E7E                     u14860:
 20190  001E7E  0900               	iorlw	0
 20191  001E80  E1D3               	bnz	l2502
 20192  001E82  0100               	movlb	0	; () banked
 20193  001E84  6B60               	clrf	?_strchr& (0+255),b
 20194  001E86  6B61               	clrf	(?_strchr+1)& (0+255),b
 20195  001E88                     l2504:
 20196                           
 20197                           ; BSR set to: 0
 20198  001E88  0012               	return	
 20199  001E8A                     __end_of_strchr:
 20200                           	opt stack 0
 20201                           tblptru	equ	0xFF8
 20202                           tblptrh	equ	0xFF7
 20203                           tblptrl	equ	0xFF6
 20204                           tablat	equ	0xFF5
 20205                           prodh	equ	0xFF4
 20206                           prodl	equ	0xFF3
 20207                           intcon	equ	0xFF2
 20208                           indf0	equ	0xFEF
 20209                           postinc0	equ	0xFEE
 20210                           fsr0h	equ	0xFEA
 20211                           fsr0l	equ	0xFE9
 20212                           wreg	equ	0xFE8
 20213                           indf1	equ	0xFE7
 20214                           postinc1	equ	0xFE6
 20215                           postdec1	equ	0xFE5
 20216                           fsr1h	equ	0xFE2
 20217                           fsr1l	equ	0xFE1
 20218                           indf2	equ	0xFDF
 20219                           postinc2	equ	0xFDE
 20220                           postdec2	equ	0xFDD
 20221                           plusw2	equ	0xFDB
 20222                           fsr2h	equ	0xFDA
 20223                           fsr2l	equ	0xFD9
 20224                           status	equ	0xFD8
 20225                           
 20226 ;; *************** function _stristr *****************
 20227 ;; Defined at:
 20228 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20229 ;; Parameters:    Size  Location     Type
 20230 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20231 ;;		 -> NULL(0), cmdbuf(80), 
 20232 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20233 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20234 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20235 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20236 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20237 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20238 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20239 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20240 ;;		 -> STR_8(5), STR_6(5), 
 20241 ;; Auto vars:     Size  Location     Type
 20242 ;;		None
 20243 ;; Return value:  Size  Location     Type
 20244 ;;                  2   13[BANK0 ] PTR unsigned char 
 20245 ;; Registers used:
 20246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20247 ;; Tracked objects:
 20248 ;;		On entry : F/0
 20249 ;;		On exit  : F/0
 20250 ;;		Unchanged: 0/0
 20251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20252 ;;      Params:         0       4       0       0       0       0       0
 20253 ;;      Locals:         0       0       0       0       0       0       0
 20254 ;;      Temps:          0       0       0       0       0       0       0
 20255 ;;      Totals:         0       4       0       0       0       0       0
 20256 ;;Total ram usage:        4 bytes
 20257 ;; Hardware stack levels used:    1
 20258 ;; Hardware stack levels required when called:    5
 20259 ;; This function calls:
 20260 ;;		_strlen
 20261 ;;		_strnicmp
 20262 ;;		_strichr
 20263 ;; This function is called by:
 20264 ;;		_doModeVerbose
 20265 ;; This function uses a non-reentrant model
 20266 ;;
 20267                           
 20268                           	psect	text47
 20269  002124                     __ptext47:
 20270                           	opt stack 0
 20271  002124                     _stristr:
 20272                           	opt stack 23
 20273                           
 20274                           ; BSR set to: 0
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;incstack = 0
 20278                           ;incstack = 0
 20279  002124  D02F               	goto	l14843
 20280  002126                     l14837:
 20281                           
 20282                           ; BSR set to: 0
 20283  002126  C06D  F064         	movff	stristr@s1,?_strnicmp
 20284  00212A  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20285  00212E  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20286  002132  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20287  002136  C06F  F060         	movff	stristr@s2,?_strlen
 20288  00213A  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20289  00213E  EC12  F00D         	call	_strlen	;wreg free
 20290  002142  C060  F068         	movff	?_strlen,?_strnicmp+4
 20291  002146  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20292  00214A  EC76  F00F         	call	_strnicmp	;wreg free
 20293  00214E  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20294  002150  1164               	iorwf	?_strnicmp& (0+255),w,b
 20295  002152  E105               	bnz	l14841
 20296                           
 20297                           ; BSR set to: 0
 20298  002154  C06D  F06D         	movff	stristr@s1,?_stristr
 20299  002158  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20300  00215C  D01E               	goto	l2523
 20301  00215E                     l14841:
 20302                           
 20303                           ; BSR set to: 0
 20304  00215E  296D               	incf	stristr@s1& (0+255),w,b
 20305  002160  6F61               	movwf	?_strichr& (0+255),b
 20306  002162  0E00               	movlw	0
 20307  002164  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20308  002166  6F62               	movwf	(?_strichr+1)& (0+255),b
 20309  002168  C06F  FFF6         	movff	stristr@s2,tblptrl
 20310  00216C  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20311  002170  0008               	tblrd		*
 20312  002172  50F5               	movf	tablat,w,c
 20313  002174  6F63               	movwf	(?_strichr+2)& (0+255),b
 20314  002176  6B64               	clrf	(?_strichr+3)& (0+255),b
 20315  002178  ECB4  F00C         	call	_strichr	;wreg free
 20316  00217C  C061  F06D         	movff	?_strichr,stristr@s1
 20317  002180  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20318  002184                     l14843:
 20319                           
 20320                           ; BSR set to: 0
 20321  002184  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20322  002186  116D               	iorwf	stristr@s1& (0+255),w,b
 20323  002188  E006               	bz	l2526
 20324                           
 20325                           ; BSR set to: 0
 20326  00218A  C06D  FFD9         	movff	stristr@s1,fsr2l
 20327  00218E  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20328  002192  50DF               	movf	indf2,w,c
 20329  002194  E1C8               	bnz	l14837
 20330  002196                     l2526:
 20331                           
 20332                           ; BSR set to: 0
 20333  002196  6B6D               	clrf	?_stristr& (0+255),b
 20334  002198  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20335  00219A                     l2523:
 20336                           
 20337                           ; BSR set to: 0
 20338  00219A  0012               	return	
 20339  00219C                     __end_of_stristr:
 20340                           	opt stack 0
 20341                           tblptru	equ	0xFF8
 20342                           tblptrh	equ	0xFF7
 20343                           tblptrl	equ	0xFF6
 20344                           tablat	equ	0xFF5
 20345                           prodh	equ	0xFF4
 20346                           prodl	equ	0xFF3
 20347                           intcon	equ	0xFF2
 20348                           indf0	equ	0xFEF
 20349                           postinc0	equ	0xFEE
 20350                           fsr0h	equ	0xFEA
 20351                           fsr0l	equ	0xFE9
 20352                           wreg	equ	0xFE8
 20353                           indf1	equ	0xFE7
 20354                           postinc1	equ	0xFE6
 20355                           postdec1	equ	0xFE5
 20356                           fsr1h	equ	0xFE2
 20357                           fsr1l	equ	0xFE1
 20358                           indf2	equ	0xFDF
 20359                           postinc2	equ	0xFDE
 20360                           postdec2	equ	0xFDD
 20361                           plusw2	equ	0xFDB
 20362                           fsr2h	equ	0xFDA
 20363                           fsr2l	equ	0xFD9
 20364                           status	equ	0xFD8
 20365                           
 20366 ;; *************** function _strichr *****************
 20367 ;; Defined at:
 20368 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20369 ;; Parameters:    Size  Location     Type
 20370 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20371 ;;		 -> NULL(0), cmdbuf(80), 
 20372 ;;  chr             2    3[BANK0 ] int 
 20373 ;; Auto vars:     Size  Location     Type
 20374 ;;		None
 20375 ;; Return value:  Size  Location     Type
 20376 ;;                  2    1[BANK0 ] PTR unsigned char 
 20377 ;; Registers used:
 20378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20379 ;; Tracked objects:
 20380 ;;		On entry : F/0
 20381 ;;		On exit  : F/0
 20382 ;;		Unchanged: 0/0
 20383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20384 ;;      Params:         0       4       0       0       0       0       0
 20385 ;;      Locals:         0       0       0       0       0       0       0
 20386 ;;      Temps:          0       0       0       0       0       0       0
 20387 ;;      Totals:         0       4       0       0       0       0       0
 20388 ;;Total ram usage:        4 bytes
 20389 ;; Hardware stack levels used:    1
 20390 ;; Hardware stack levels required when called:    4
 20391 ;; This function calls:
 20392 ;;		_toupper
 20393 ;; This function is called by:
 20394 ;;		_stristr
 20395 ;; This function uses a non-reentrant model
 20396 ;;
 20397                           
 20398                           	psect	text48
 20399  001968                     __ptext48:
 20400                           	opt stack 0
 20401  001968                     _strichr:
 20402                           	opt stack 23
 20403                           
 20404                           ; BSR set to: 0
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;incstack = 0
 20408                           ;incstack = 0
 20409  001968  5163               	movf	strichr@chr& (0+255),w,b
 20410  00196A  EC82  F00B         	call	_toupper
 20411  00196E  6F63               	movwf	strichr@chr& (0+255),b
 20412  001970  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20413  001972  D010               	goto	l16433
 20414  001974                     l16427:
 20415                           
 20416                           ; BSR set to: 0
 20417  001974  C061  FFD9         	movff	strichr@ptr,fsr2l
 20418  001978  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20419  00197C  50DF               	movf	indf2,w,c
 20420  00197E  EC82  F00B         	call	_toupper
 20421  001982  1963               	xorwf	strichr@chr& (0+255),w,b
 20422  001984  E105               	bnz	l16431
 20423                           
 20424                           ; BSR set to: 0
 20425  001986  C061  F061         	movff	strichr@ptr,?_strichr
 20426  00198A  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20427  00198E  D00A               	goto	l2590
 20428  001990                     l16431:
 20429                           
 20430                           ; BSR set to: 0
 20431  001990  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20432  001992  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20433  001994                     l16433:
 20434                           
 20435                           ; BSR set to: 0
 20436  001994  C061  FFD9         	movff	strichr@ptr,fsr2l
 20437  001998  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20438  00199C  50DF               	movf	indf2,w,c
 20439  00199E  E1EA               	bnz	l16427
 20440                           
 20441                           ; BSR set to: 0
 20442  0019A0  6B61               	clrf	?_strichr& (0+255),b
 20443  0019A2  6B62               	clrf	(?_strichr+1)& (0+255),b
 20444  0019A4                     l2590:
 20445                           
 20446                           ; BSR set to: 0
 20447  0019A4  0012               	return	
 20448  0019A6                     __end_of_strichr:
 20449                           	opt stack 0
 20450                           tblptru	equ	0xFF8
 20451                           tblptrh	equ	0xFF7
 20452                           tblptrl	equ	0xFF6
 20453                           tablat	equ	0xFF5
 20454                           prodh	equ	0xFF4
 20455                           prodl	equ	0xFF3
 20456                           intcon	equ	0xFF2
 20457                           indf0	equ	0xFEF
 20458                           postinc0	equ	0xFEE
 20459                           fsr0h	equ	0xFEA
 20460                           fsr0l	equ	0xFE9
 20461                           wreg	equ	0xFE8
 20462                           indf1	equ	0xFE7
 20463                           postinc1	equ	0xFE6
 20464                           postdec1	equ	0xFE5
 20465                           fsr1h	equ	0xFE2
 20466                           fsr1l	equ	0xFE1
 20467                           indf2	equ	0xFDF
 20468                           postinc2	equ	0xFDE
 20469                           postdec2	equ	0xFDD
 20470                           plusw2	equ	0xFDB
 20471                           fsr2h	equ	0xFDA
 20472                           fsr2l	equ	0xFD9
 20473                           status	equ	0xFD8
 20474                           
 20475 ;; *************** function _strnicmp *****************
 20476 ;; Defined at:
 20477 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20478 ;; Parameters:    Size  Location     Type
 20479 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20480 ;;		 -> NULL(0), cmdbuf(80), 
 20481 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20482 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20483 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20484 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20485 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20486 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20487 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20488 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20489 ;;		 -> STR_8(5), STR_6(5), 
 20490 ;;  len             2    8[BANK0 ] unsigned int 
 20491 ;; Auto vars:     Size  Location     Type
 20492 ;;  r               1   12[BANK0 ] char 
 20493 ;; Return value:  Size  Location     Type
 20494 ;;                  2    4[BANK0 ] int 
 20495 ;; Registers used:
 20496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20497 ;; Tracked objects:
 20498 ;;		On entry : F/0
 20499 ;;		On exit  : F/0
 20500 ;;		Unchanged: 0/0
 20501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20502 ;;      Params:         0       6       0       0       0       0       0
 20503 ;;      Locals:         0       1       0       0       0       0       0
 20504 ;;      Temps:          0       2       0       0       0       0       0
 20505 ;;      Totals:         0       9       0       0       0       0       0
 20506 ;;Total ram usage:        9 bytes
 20507 ;; Hardware stack levels used:    1
 20508 ;; Hardware stack levels required when called:    4
 20509 ;; This function calls:
 20510 ;;		_toupper
 20511 ;; This function is called by:
 20512 ;;		_stristr
 20513 ;; This function uses a non-reentrant model
 20514 ;;
 20515                           
 20516                           	psect	text49
 20517  001EEC                     __ptext49:
 20518                           	opt stack 0
 20519  001EEC                     _strnicmp:
 20520                           	opt stack 23
 20521                           
 20522                           ; BSR set to: 0
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;incstack = 0
 20526                           ;incstack = 0
 20527  001EEC  D027               	goto	l16423
 20528  001EEE                     l16413:
 20529                           
 20530                           ; BSR set to: 0
 20531  001EEE  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20532  001EF2  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20533  001EF6  0008               	tblrd		*
 20534  001EF8  50F5               	movf	tablat,w,c
 20535  001EFA  EC82  F00B         	call	_toupper
 20536  001EFE  6F6A               	movwf	??_strnicmp& (0+255),b
 20537  001F00  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20538  001F04  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20539  001F08  50DF               	movf	indf2,w,c
 20540  001F0A  EC82  F00B         	call	_toupper
 20541  001F0E  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20542  001F10  516A               	movf	??_strnicmp& (0+255),w,b
 20543  001F12  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20544  001F14  6F6C               	movwf	strnicmp@r& (0+255),b
 20545  001F16  0100               	movlb	0	; () banked
 20546  001F18  676C               	tstfsz	strnicmp@r& (0+255),b
 20547  001F1A  D006               	goto	l16417
 20548                           
 20549                           ; BSR set to: 0
 20550  001F1C  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20551  001F20  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20552  001F24  50DF               	movf	indf2,w,c
 20553  001F26  E106               	bnz	l16421
 20554  001F28                     l16417:
 20555                           
 20556                           ; BSR set to: 0
 20557  001F28  516C               	movf	strnicmp@r& (0+255),w,b
 20558  001F2A  6F64               	movwf	?_strnicmp& (0+255),b
 20559  001F2C  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20560  001F2E  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20561  001F30  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20562  001F32  D00E               	goto	l2542
 20563  001F34                     l16421:
 20564                           
 20565                           ; BSR set to: 0
 20566  001F34  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20567  001F36  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20568  001F38  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20569  001F3A  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20570  001F3C                     l16423:
 20571                           
 20572                           ; BSR set to: 0
 20573  001F3C  0768               	decf	strnicmp@len& (0+255),f,b
 20574  001F3E  A0D8               	btfss	status,0,c
 20575  001F40  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20576  001F42  0100               	movlb	0	; () banked
 20577  001F44  2968               	incf	strnicmp@len& (0+255),w,b
 20578  001F46  B4D8               	btfsc	status,2,c
 20579  001F48  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20580  001F4A  E1D1               	bnz	l16413
 20581                           
 20582                           ; BSR set to: 0
 20583  001F4C  6B64               	clrf	?_strnicmp& (0+255),b
 20584  001F4E  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20585  001F50                     l2542:
 20586                           
 20587                           ; BSR set to: 0
 20588  001F50  0012               	return	
 20589  001F52                     __end_of_strnicmp:
 20590                           	opt stack 0
 20591                           tblptru	equ	0xFF8
 20592                           tblptrh	equ	0xFF7
 20593                           tblptrl	equ	0xFF6
 20594                           tablat	equ	0xFF5
 20595                           prodh	equ	0xFF4
 20596                           prodl	equ	0xFF3
 20597                           intcon	equ	0xFF2
 20598                           indf0	equ	0xFEF
 20599                           postinc0	equ	0xFEE
 20600                           fsr0h	equ	0xFEA
 20601                           fsr0l	equ	0xFE9
 20602                           wreg	equ	0xFE8
 20603                           indf1	equ	0xFE7
 20604                           postinc1	equ	0xFE6
 20605                           postdec1	equ	0xFE5
 20606                           fsr1h	equ	0xFE2
 20607                           fsr1l	equ	0xFE1
 20608                           indf2	equ	0xFDF
 20609                           postinc2	equ	0xFDE
 20610                           postdec2	equ	0xFDD
 20611                           plusw2	equ	0xFDB
 20612                           fsr2h	equ	0xFDA
 20613                           fsr2l	equ	0xFD9
 20614                           status	equ	0xFD8
 20615                           
 20616 ;; *************** function _toupper *****************
 20617 ;; Defined at:
 20618 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20619 ;; Parameters:    Size  Location     Type
 20620 ;;  c               1    wreg     unsigned char 
 20621 ;; Auto vars:     Size  Location     Type
 20622 ;;  c               1    0[BANK0 ] unsigned char 
 20623 ;; Return value:  Size  Location     Type
 20624 ;;                  1    wreg      unsigned char 
 20625 ;; Registers used:
 20626 ;;		wreg, status,2, status,0
 20627 ;; Tracked objects:
 20628 ;;		On entry : F/0
 20629 ;;		On exit  : F/0
 20630 ;;		Unchanged: 0/0
 20631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20632 ;;      Params:         0       0       0       0       0       0       0
 20633 ;;      Locals:         0       1       0       0       0       0       0
 20634 ;;      Temps:          0       0       0       0       0       0       0
 20635 ;;      Totals:         0       1       0       0       0       0       0
 20636 ;;Total ram usage:        1 bytes
 20637 ;; Hardware stack levels used:    1
 20638 ;; Hardware stack levels required when called:    3
 20639 ;; This function calls:
 20640 ;;		Nothing
 20641 ;; This function is called by:
 20642 ;;		_strnicmp
 20643 ;;		_strichr
 20644 ;; This function uses a non-reentrant model
 20645 ;;
 20646                           
 20647                           	psect	text50
 20648  001704                     __ptext50:
 20649                           	opt stack 0
 20650  001704                     _toupper:
 20651                           	opt stack 23
 20652                           
 20653                           ; BSR set to: 0
 20654                           ;incstack = 0
 20655                           ;incstack = 0
 20656                           ;toupper@c stored from wreg
 20657  001704  CFE8 F060          	movff	wreg,toupper@c
 20658                           
 20659                           ; BSR set to: 0
 20660  001708  0E7B               	movlw	123
 20661  00170A  6160               	cpfslt	toupper@c& (0+255),b
 20662  00170C  D004               	goto	l16441
 20663                           
 20664                           ; BSR set to: 0
 20665  00170E  0E60               	movlw	96
 20666  001710  6560               	cpfsgt	toupper@c& (0+255),b
 20667  001712  D001               	goto	l16441
 20668                           
 20669                           ; BSR set to: 0
 20670  001714  9B60               	bcf	toupper@c& (0+255),5,b
 20671  001716                     l16441:
 20672                           
 20673                           ; BSR set to: 0
 20674  001716  5160               	movf	toupper@c& (0+255),w,b
 20675                           
 20676                           ; BSR set to: 0
 20677  001718  0012               	return	
 20678  00171A                     __end_of_toupper:
 20679                           	opt stack 0
 20680                           tblptru	equ	0xFF8
 20681                           tblptrh	equ	0xFF7
 20682                           tblptrl	equ	0xFF6
 20683                           tablat	equ	0xFF5
 20684                           prodh	equ	0xFF4
 20685                           prodl	equ	0xFF3
 20686                           intcon	equ	0xFF2
 20687                           indf0	equ	0xFEF
 20688                           postinc0	equ	0xFEE
 20689                           fsr0h	equ	0xFEA
 20690                           fsr0l	equ	0xFE9
 20691                           wreg	equ	0xFE8
 20692                           indf1	equ	0xFE7
 20693                           postinc1	equ	0xFE6
 20694                           postdec1	equ	0xFE5
 20695                           fsr1h	equ	0xFE2
 20696                           fsr1l	equ	0xFE1
 20697                           indf2	equ	0xFDF
 20698                           postinc2	equ	0xFDE
 20699                           postdec2	equ	0xFDD
 20700                           plusw2	equ	0xFDB
 20701                           fsr2h	equ	0xFDA
 20702                           fsr2l	equ	0xFD9
 20703                           status	equ	0xFD8
 20704                           
 20705 ;; *************** function _strlen *****************
 20706 ;; Defined at:
 20707 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20708 ;; Parameters:    Size  Location     Type
 20709 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20710 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20711 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20712 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20713 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20714 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20715 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20716 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20717 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20718 ;;		 -> cmdbuf(80), 
 20719 ;; Auto vars:     Size  Location     Type
 20720 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20721 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20722 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20723 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20724 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20725 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20726 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20727 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20728 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20729 ;;		 -> cmdbuf(80), 
 20730 ;; Return value:  Size  Location     Type
 20731 ;;                  2    0[BANK0 ] unsigned int 
 20732 ;; Registers used:
 20733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20734 ;; Tracked objects:
 20735 ;;		On entry : F/0
 20736 ;;		On exit  : F/0
 20737 ;;		Unchanged: 0/0
 20738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20739 ;;      Params:         0       2       0       0       0       0       0
 20740 ;;      Locals:         0       2       0       0       0       0       0
 20741 ;;      Temps:          0       0       0       0       0       0       0
 20742 ;;      Totals:         0       4       0       0       0       0       0
 20743 ;;Total ram usage:        4 bytes
 20744 ;; Hardware stack levels used:    1
 20745 ;; Hardware stack levels required when called:    3
 20746 ;; This function calls:
 20747 ;;		Nothing
 20748 ;; This function is called by:
 20749 ;;		_doModeSLCAN
 20750 ;;		_receiveSendEventSLCAN
 20751 ;;		_printGUID
 20752 ;;		_hexStringToBytes
 20753 ;;		_stristr
 20754 ;; This function uses a non-reentrant model
 20755 ;;
 20756                           
 20757                           	psect	text51
 20758  001A24                     __ptext51:
 20759                           	opt stack 0
 20760  001A24                     _strlen:
 20761                           	opt stack 24
 20762                           
 20763                           ; BSR set to: 0
 20764                           
 20765                           ; BSR set to: 0
 20766                           ;incstack = 0
 20767                           ;incstack = 0
 20768  001A24  C060  F062         	movff	strlen@s,strlen@cp
 20769  001A28  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20770  001A2C  D003               	goto	l16065
 20771  001A2E                     l16063:
 20772  001A2E  0100               	movlb	0	; () banked
 20773  001A30  4B62               	infsnz	strlen@cp& (0+255),f,b
 20774  001A32  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20775  001A34                     l16065:
 20776                           
 20777                           ; BSR set to: 0
 20778  001A34  5162               	movf	strlen@cp& (0+255),w,b
 20779  001A36  6EF6               	movwf	tblptrl,c
 20780  001A38  6EE9               	movwf	fsr0l,c
 20781  001A3A  0E05               	movlw	(high __ramtop+-1)
 20782  001A3C  6EEA               	movwf	fsr0h,c
 20783  001A3E  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20784  001A40  64EA               	cpfsgt	fsr0h,c
 20785  001A42  D003               	bra	u22057
 20786  001A44  6EEA               	movwf	fsr0h,c
 20787  001A46  50EF               	movf	indf0,w,c
 20788  001A48  D003               	bra	u22050
 20789  001A4A                     u22057:
 20790  001A4A  6EF7               	movwf	tblptrh,c
 20791  001A4C  0008               	tblrd		*
 20792  001A4E  50F5               	movf	tablat,w,c
 20793  001A50                     u22050:
 20794  001A50  0900               	iorlw	0
 20795  001A52  E1ED               	bnz	l16063
 20796  001A54  0100               	movlb	0	; () banked
 20797  001A56  5160               	movf	strlen@s& (0+255),w,b
 20798  001A58  5D62               	subwf	strlen@cp& (0+255),w,b
 20799  001A5A  6F60               	movwf	?_strlen& (0+255),b
 20800  001A5C  5161               	movf	(strlen@s+1)& (0+255),w,b
 20801  001A5E  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20802  001A60  6F61               	movwf	(?_strlen+1)& (0+255),b
 20803                           
 20804                           ; BSR set to: 0
 20805  001A62  0012               	return	
 20806  001A64                     __end_of_strlen:
 20807                           	opt stack 0
 20808                           tblptru	equ	0xFF8
 20809                           tblptrh	equ	0xFF7
 20810                           tblptrl	equ	0xFF6
 20811                           tablat	equ	0xFF5
 20812                           prodh	equ	0xFF4
 20813                           prodl	equ	0xFF3
 20814                           intcon	equ	0xFF2
 20815                           indf0	equ	0xFEF
 20816                           postinc0	equ	0xFEE
 20817                           fsr0h	equ	0xFEA
 20818                           fsr0l	equ	0xFE9
 20819                           wreg	equ	0xFE8
 20820                           indf1	equ	0xFE7
 20821                           postinc1	equ	0xFE6
 20822                           postdec1	equ	0xFE5
 20823                           fsr1h	equ	0xFE2
 20824                           fsr1l	equ	0xFE1
 20825                           indf2	equ	0xFDF
 20826                           postinc2	equ	0xFDE
 20827                           postdec2	equ	0xFDD
 20828                           plusw2	equ	0xFDB
 20829                           fsr2h	equ	0xFDA
 20830                           fsr2l	equ	0xFD9
 20831                           status	equ	0xFD8
 20832                           
 20833 ;; *************** function _receivePrintEventVerbose *****************
 20834 ;; Defined at:
 20835 ;;		line 1790 in file "main.c"
 20836 ;; Parameters:    Size  Location     Type
 20837 ;;		None
 20838 ;; Auto vars:     Size  Location     Type
 20839 ;;  i               1   69[BANK0 ] unsigned char 
 20840 ;; Return value:  Size  Location     Type
 20841 ;;                  1    wreg      enum E15660
 20842 ;; Registers used:
 20843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20844 ;; Tracked objects:
 20845 ;;		On entry : F/0
 20846 ;;		On exit  : 0/0
 20847 ;;		Unchanged: 0/0
 20848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20849 ;;      Params:         0       0       0       0       0       0       0
 20850 ;;      Locals:         0      13       0       0       0       0       0
 20851 ;;      Temps:          0       5       0       0       0       0       0
 20852 ;;      Totals:         0      18       0       0       0       0       0
 20853 ;;Total ram usage:       18 bytes
 20854 ;; Hardware stack levels used:    1
 20855 ;; Hardware stack levels required when called:    6
 20856 ;; This function calls:
 20857 ;;		_putsUSART
 20858 ;;		_sprintf
 20859 ;;		_getVSCPFrame
 20860 ;; This function is called by:
 20861 ;;		_doModeVerbose
 20862 ;; This function uses a non-reentrant model
 20863 ;;
 20864                           
 20865                           	psect	text52
 20866  00483A                     __ptext52:
 20867                           	opt stack 0
 20868  00483A                     _receivePrintEventVerbose:
 20869                           	opt stack 22
 20870                           
 20871                           ; BSR set to: 0
 20872                           ;main.c: 1791: uint8_t i;
 20873                           ;main.c: 1793: if (getVSCPFrame(&vscpClass,
 20874                           ;main.c: 1794: &vscpType,
 20875                           ;main.c: 1795: &vscpNodeId,
 20876                           ;main.c: 1796: &vscpPriority,
 20877                           ;main.c: 1797: &vscpSize,
 20878                           ;main.c: 1798: vscpData)) {
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;incstack = 0
 20882                           ;incstack = 0
 20883  00483A  0EEC               	movlw	low _vscpType
 20884  00483C  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20885  00483E  0EE9               	movlw	low _vscpNodeId
 20886  004840  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20887  004842  0EEA               	movlw	low _vscpPriority
 20888  004844  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20889  004846  0EEB               	movlw	low _vscpSize
 20890  004848  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20891  00484A  0E34               	movlw	low _vscpData
 20892  00484C  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20893  00484E  0E3C               	movlw	_vscpClass& (0+255)
 20894  004850  EC0E  F011         	call	_getVSCPFrame
 20895  004854  0900               	iorlw	0
 20896  004856  E101 D12F          	bz	l14831
 20897                           
 20898                           ; BSR set to: 0
 20899                           ;main.c: 1801: cntRxFrames++;
 20900  00485A  0101               	movlb	1	; () banked
 20901  00485C  2B0C               	incf	_cntRxFrames& (0+255),f,b
 20902  00485E  0E00               	movlw	0
 20903  004860  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20904  004862  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20905  004864  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20906                           
 20907                           ;main.c: 1802: cntRxBytes += vscpSize;
 20908  004866  0100               	movlb	0	; () banked
 20909  004868  51EB               	movf	_vscpSize& (0+255),w,b
 20910  00486A  0101               	movlb	1	; () banked
 20911  00486C  2708               	addwf	_cntRxBytes& (0+255),f,b
 20912  00486E  0E00               	movlw	0
 20913  004870  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20914  004872  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20915  004874  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20916                           
 20917                           ; BSR set to: 1
 20918                           ;main.c: 1804: putsUSART((char *) "<Prio=");
 20919  004876  0E7C               	movlw	high STR_139
 20920  004878  0100               	movlb	0	; () banked
 20921  00487A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20922  00487C  0E42               	movlw	low STR_139
 20923  00487E  6F61               	movwf	?_putsUSART& (0+255),b
 20924  004880  EC2D  F00E         	call	_putsUSART	;wreg free
 20925                           
 20926                           ;main.c: 1805: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20927  004884  0100               	movlb	0	; () banked
 20928  004886  67E4               	tstfsz	_bHex& (0+255),b
 20929  004888  D004               	goto	l14749
 20930                           
 20931                           ; BSR set to: 0
 20932  00488A  0E7C               	movlw	high STR_57
 20933  00488C  6F9A               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20934  00488E  0EEE               	movlw	low STR_57
 20935  004890  D003               	goto	L28
 20936  004892                     l14749:
 20937                           
 20938                           ; BSR set to: 0
 20939  004892  0E7C               	movlw	high STR_56
 20940  004894  6F9A               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20941  004896  0E65               	movlw	low STR_56
 20942  004898                     L28:
 20943  004898  6F99               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 20944                           
 20945                           ; BSR set to: 0
 20946  00489A  0E01               	movlw	high _wrkbuf
 20947  00489C  0100               	movlb	0	; () banked
 20948  00489E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20949  0048A0  0E7B               	movlw	low _wrkbuf
 20950  0048A2  6F76               	movwf	?_sprintf& (0+255),b
 20951  0048A4  C099  F078         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 20952  0048A8  C09A  F079         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 20953  0048AC  C0EA  F07A         	movff	_vscpPriority,?_sprintf+4
 20954  0048B0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20955  0048B2  ECAA  F028         	call	_sprintf	;wreg free
 20956                           
 20957                           ; BSR set to: 0
 20958                           ;main.c: 1806: putsUSART(wrkbuf);
 20959  0048B6  0E01               	movlw	high _wrkbuf
 20960  0048B8  0100               	movlb	0	; () banked
 20961  0048BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20962  0048BC  0E7B               	movlw	low _wrkbuf
 20963  0048BE  6F61               	movwf	?_putsUSART& (0+255),b
 20964  0048C0  EC2D  F00E         	call	_putsUSART	;wreg free
 20965                           
 20966                           ;main.c: 1807: putsUSART((char *) ",class=");
 20967  0048C4  0E7B               	movlw	high STR_142
 20968  0048C6  0100               	movlb	0	; () banked
 20969  0048C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20970  0048CA  0EF6               	movlw	low STR_142
 20971  0048CC  6F61               	movwf	?_putsUSART& (0+255),b
 20972  0048CE  EC2D  F00E         	call	_putsUSART	;wreg free
 20973                           
 20974                           ;main.c: 1808: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20975  0048D2  0100               	movlb	0	; () banked
 20976  0048D4  67E4               	tstfsz	_bHex& (0+255),b
 20977  0048D6  D004               	goto	l14761
 20978                           
 20979                           ; BSR set to: 0
 20980  0048D8  0E7C               	movlw	high STR_57
 20981  0048DA  6F9C               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20982  0048DC  0EEE               	movlw	low STR_57
 20983  0048DE  D003               	goto	L29
 20984  0048E0                     l14761:
 20985                           
 20986                           ; BSR set to: 0
 20987  0048E0  0E7C               	movlw	high STR_143
 20988  0048E2  6F9C               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20989  0048E4  0E6C               	movlw	low STR_143
 20990  0048E6                     L29:
 20991  0048E6  6F9B               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 20992                           
 20993                           ; BSR set to: 0
 20994  0048E8  0E01               	movlw	high _wrkbuf
 20995  0048EA  0100               	movlb	0	; () banked
 20996  0048EC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20997  0048EE  0E7B               	movlw	low _wrkbuf
 20998  0048F0  6F76               	movwf	?_sprintf& (0+255),b
 20999  0048F2  C09B  F078         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 21000  0048F6  C09C  F079         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 21001  0048FA  C03C  F07A         	movff	_vscpClass,?_sprintf+4
 21002  0048FE  C03D  F07B         	movff	_vscpClass+1,?_sprintf+5
 21003  004902  ECAA  F028         	call	_sprintf	;wreg free
 21004                           
 21005                           ; BSR set to: 0
 21006                           ;main.c: 1809: putsUSART(wrkbuf);
 21007  004906  0E01               	movlw	high _wrkbuf
 21008  004908  0100               	movlb	0	; () banked
 21009  00490A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21010  00490C  0E7B               	movlw	low _wrkbuf
 21011  00490E  6F61               	movwf	?_putsUSART& (0+255),b
 21012  004910  EC2D  F00E         	call	_putsUSART	;wreg free
 21013                           
 21014                           ;main.c: 1810: putsUSART((char *) ",type=");
 21015  004914  0E7C               	movlw	high STR_145
 21016  004916  0100               	movlb	0	; () banked
 21017  004918  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21018  00491A  0E34               	movlw	low STR_145
 21019  00491C  6F61               	movwf	?_putsUSART& (0+255),b
 21020  00491E  EC2D  F00E         	call	_putsUSART	;wreg free
 21021                           
 21022                           ;main.c: 1811: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21023  004922  0100               	movlb	0	; () banked
 21024  004924  67E4               	tstfsz	_bHex& (0+255),b
 21025  004926  D004               	goto	l14773
 21026                           
 21027                           ; BSR set to: 0
 21028  004928  0E7C               	movlw	high STR_57
 21029  00492A  6F9E               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21030  00492C  0EEE               	movlw	low STR_57
 21031  00492E  D003               	goto	L30
 21032  004930                     l14773:
 21033                           
 21034                           ; BSR set to: 0
 21035  004930  0E7C               	movlw	high STR_56
 21036  004932  6F9E               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21037  004934  0E65               	movlw	low STR_56
 21038  004936                     L30:
 21039  004936  6F9D               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 21040                           
 21041                           ; BSR set to: 0
 21042  004938  0E01               	movlw	high _wrkbuf
 21043  00493A  0100               	movlb	0	; () banked
 21044  00493C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21045  00493E  0E7B               	movlw	low _wrkbuf
 21046  004940  6F76               	movwf	?_sprintf& (0+255),b
 21047  004942  C09D  F078         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 21048  004946  C09E  F079         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 21049  00494A  C0EC  F07A         	movff	_vscpType,?_sprintf+4
 21050  00494E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21051  004950  ECAA  F028         	call	_sprintf	;wreg free
 21052                           
 21053                           ; BSR set to: 0
 21054                           ;main.c: 1812: putsUSART(wrkbuf);
 21055  004954  0E01               	movlw	high _wrkbuf
 21056  004956  0100               	movlb	0	; () banked
 21057  004958  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21058  00495A  0E7B               	movlw	low _wrkbuf
 21059  00495C  6F61               	movwf	?_putsUSART& (0+255),b
 21060  00495E  EC2D  F00E         	call	_putsUSART	;wreg free
 21061                           
 21062                           ;main.c: 1813: putsUSART((char *) ",nodeid=");
 21063  004962  0E7B               	movlw	high STR_148
 21064  004964  0100               	movlb	0	; () banked
 21065  004966  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21066  004968  0EC4               	movlw	low STR_148
 21067  00496A  6F61               	movwf	?_putsUSART& (0+255),b
 21068  00496C  EC2D  F00E         	call	_putsUSART	;wreg free
 21069                           
 21070                           ;main.c: 1814: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21071  004970  0100               	movlb	0	; () banked
 21072  004972  67E4               	tstfsz	_bHex& (0+255),b
 21073  004974  D004               	goto	l14785
 21074                           
 21075                           ; BSR set to: 0
 21076  004976  0E7C               	movlw	high STR_57
 21077  004978  6FA0               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21078  00497A  0EEE               	movlw	low STR_57
 21079  00497C  D003               	goto	L31
 21080  00497E                     l14785:
 21081                           
 21082                           ; BSR set to: 0
 21083  00497E  0E7C               	movlw	high STR_56
 21084  004980  6FA0               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21085  004982  0E65               	movlw	low STR_56
 21086  004984                     L31:
 21087  004984  6F9F               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 21088                           
 21089                           ; BSR set to: 0
 21090  004986  0E01               	movlw	high _wrkbuf
 21091  004988  0100               	movlb	0	; () banked
 21092  00498A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21093  00498C  0E7B               	movlw	low _wrkbuf
 21094  00498E  6F76               	movwf	?_sprintf& (0+255),b
 21095  004990  C09F  F078         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 21096  004994  C0A0  F079         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 21097  004998  C0E9  F07A         	movff	_vscpNodeId,?_sprintf+4
 21098  00499C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21099  00499E  ECAA  F028         	call	_sprintf	;wreg free
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;main.c: 1815: putsUSART(wrkbuf);
 21103  0049A2  0E01               	movlw	high _wrkbuf
 21104  0049A4  0100               	movlb	0	; () banked
 21105  0049A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21106  0049A8  0E7B               	movlw	low _wrkbuf
 21107  0049AA  6F61               	movwf	?_putsUSART& (0+255),b
 21108  0049AC  EC2D  F00E         	call	_putsUSART	;wreg free
 21109                           
 21110                           ;main.c: 1816: putsUSART((char *) ",size=");
 21111  0049B0  0E7C               	movlw	high STR_151
 21112  0049B2  0100               	movlb	0	; () banked
 21113  0049B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21114  0049B6  0E3B               	movlw	low STR_151
 21115  0049B8  6F61               	movwf	?_putsUSART& (0+255),b
 21116  0049BA  EC2D  F00E         	call	_putsUSART	;wreg free
 21117                           
 21118                           ;main.c: 1817: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21119  0049BE  0100               	movlb	0	; () banked
 21120  0049C0  67E4               	tstfsz	_bHex& (0+255),b
 21121  0049C2  D004               	goto	l14797
 21122                           
 21123                           ; BSR set to: 0
 21124  0049C4  0E7C               	movlw	high STR_57
 21125  0049C6  6FA2               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21126  0049C8  0EEE               	movlw	low STR_57
 21127  0049CA  D003               	goto	L32
 21128  0049CC                     l14797:
 21129                           
 21130                           ; BSR set to: 0
 21131  0049CC  0E7C               	movlw	high STR_56
 21132  0049CE  6FA2               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21133  0049D0  0E65               	movlw	low STR_56
 21134  0049D2                     L32:
 21135  0049D2  6FA1               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 21136                           
 21137                           ; BSR set to: 0
 21138  0049D4  0E01               	movlw	high _wrkbuf
 21139  0049D6  0100               	movlb	0	; () banked
 21140  0049D8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21141  0049DA  0E7B               	movlw	low _wrkbuf
 21142  0049DC  6F76               	movwf	?_sprintf& (0+255),b
 21143  0049DE  C0A1  F078         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 21144  0049E2  C0A2  F079         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 21145  0049E6  C0EB  F07A         	movff	_vscpSize,?_sprintf+4
 21146  0049EA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21147  0049EC  ECAA  F028         	call	_sprintf	;wreg free
 21148                           
 21149                           ; BSR set to: 0
 21150                           ;main.c: 1818: putsUSART(wrkbuf);
 21151  0049F0  0E01               	movlw	high _wrkbuf
 21152  0049F2  0100               	movlb	0	; () banked
 21153  0049F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21154  0049F6  0E7B               	movlw	low _wrkbuf
 21155  0049F8  6F61               	movwf	?_putsUSART& (0+255),b
 21156  0049FA  EC2D  F00E         	call	_putsUSART	;wreg free
 21157                           
 21158                           ;main.c: 1819: if (vscpSize > 0) {
 21159  0049FE  0100               	movlb	0	; () banked
 21160  004A00  51EB               	movf	_vscpSize& (0+255),w,b
 21161  004A02  E04B               	bz	l14825
 21162                           
 21163                           ; BSR set to: 0
 21164                           ;main.c: 1820: putsUSART((char *) ",Data=");
 21165  004A04  0E7C               	movlw	high STR_154
 21166  004A06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21167  004A08  0E2D               	movlw	low STR_154
 21168  004A0A  6F61               	movwf	?_putsUSART& (0+255),b
 21169  004A0C  EC2D  F00E         	call	_putsUSART	;wreg free
 21170                           
 21171                           ;main.c: 1821: for (i = 0; i < vscpSize; i++) {
 21172  004A10  0100               	movlb	0	; () banked
 21173  004A12  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21174  004A14  D03E               	goto	l14823
 21175  004A16                     l927:
 21176                           
 21177                           ; BSR set to: 0
 21178                           ;main.c: 1823: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21179  004A16  67E4               	tstfsz	_bHex& (0+255),b
 21180  004A18  D004               	goto	l14811
 21181                           
 21182                           ; BSR set to: 0
 21183  004A1A  0E7C               	movlw	high STR_57
 21184  004A1C  6FA4               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 21185  004A1E  0EEE               	movlw	low STR_57
 21186  004A20  D003               	goto	L33
 21187  004A22                     l14811:
 21188                           
 21189                           ; BSR set to: 0
 21190  004A22  0E7C               	movlw	high STR_56
 21191  004A24  6FA4               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 21192  004A26  0E65               	movlw	low STR_56
 21193  004A28                     L33:
 21194  004A28  6FA3               	movwf	_receivePrintEventVerbose$1303& (0+255),b
 21195                           
 21196                           ; BSR set to: 0
 21197  004A2A  0E01               	movlw	high _wrkbuf
 21198  004A2C  0100               	movlb	0	; () banked
 21199  004A2E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21200  004A30  0E7B               	movlw	low _wrkbuf
 21201  004A32  6F76               	movwf	?_sprintf& (0+255),b
 21202  004A34  C0A3  F078         	movff	_receivePrintEventVerbose$1303,?_sprintf+2
 21203  004A38  C0A4  F079         	movff	_receivePrintEventVerbose$1303+1,?_sprintf+3
 21204  004A3C  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21205  004A3E  0F34               	addlw	low _vscpData
 21206  004A40  6ED9               	movwf	fsr2l,c
 21207  004A42  6ADA               	clrf	fsr2h,c
 21208  004A44  50DF               	movf	indf2,w,c
 21209  004A46  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21210  004A48  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21211  004A4A  ECAA  F028         	call	_sprintf	;wreg free
 21212                           
 21213                           ; BSR set to: 0
 21214                           ;main.c: 1824: putsUSART(wrkbuf);
 21215  004A4E  0E01               	movlw	high _wrkbuf
 21216  004A50  0100               	movlb	0	; () banked
 21217  004A52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21218  004A54  0E7B               	movlw	low _wrkbuf
 21219  004A56  6F61               	movwf	?_putsUSART& (0+255),b
 21220  004A58  EC2D  F00E         	call	_putsUSART	;wreg free
 21221                           
 21222                           ;main.c: 1825: if (i < (vscpSize - 1)) {
 21223  004A5C  0EFF               	movlw	255
 21224  004A5E  0100               	movlb	0	; () banked
 21225  004A60  25EB               	addwf	_vscpSize& (0+255),w,b
 21226  004A62  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21227  004A64  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21228  004A66  0EFF               	movlw	255
 21229  004A68  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21230  004A6A  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21231  004A6C  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21232  004A6E  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21233  004A70  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21234  004A72  0A80               	xorlw	128
 21235  004A74  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21236  004A76  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21237  004A78  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21238  004A7A  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21239  004A7C  0A80               	xorlw	128
 21240  004A7E  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21241  004A80  E206               	bc	l14821
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;main.c: 1826: putsUSART((char *) ",");
 21245  004A82  0E7C               	movlw	high STR_30
 21246  004A84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21247  004A86  0EF5               	movlw	low STR_30
 21248  004A88  6F61               	movwf	?_putsUSART& (0+255),b
 21249  004A8A  EC2D  F00E         	call	_putsUSART	;wreg free
 21250  004A8E                     l14821:
 21251  004A8E  0100               	movlb	0	; () banked
 21252  004A90  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21253  004A92                     l14823:
 21254                           
 21255                           ; BSR set to: 0
 21256  004A92  51EB               	movf	_vscpSize& (0+255),w,b
 21257  004A94  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21258  004A96  E207               	bc	l934
 21259  004A98  D7BE               	goto	l927
 21260  004A9A                     l14825:
 21261                           
 21262                           ; BSR set to: 0
 21263                           ;main.c: 1830: putsUSART((char *) ",Data=none");
 21264  004A9A  0E7B               	movlw	high STR_158
 21265  004A9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21266  004A9E  0E92               	movlw	low STR_158
 21267  004AA0  6F61               	movwf	?_putsUSART& (0+255),b
 21268  004AA2  EC2D  F00E         	call	_putsUSART	;wreg free
 21269  004AA6                     l934:
 21270                           
 21271                           ;main.c: 1831: }
 21272                           ;main.c: 1832: putsUSART((char *) ">\r\n");
 21273  004AA6  0E7C               	movlw	high STR_159
 21274  004AA8  0100               	movlb	0	; () banked
 21275  004AAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21276  004AAC  0ED5               	movlw	low STR_159
 21277  004AAE  6F61               	movwf	?_putsUSART& (0+255),b
 21278  004AB0  EC2D  F00E         	call	_putsUSART	;wreg free
 21279                           
 21280                           ;main.c: 1833: return 1;
 21281  004AB4  0E01               	movlw	1
 21282  004AB6  D001               	goto	l935
 21283  004AB8                     l14831:
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;main.c: 1834: }
 21287                           ;main.c: 1836: return 0;
 21288  004AB8  0E00               	movlw	0
 21289  004ABA                     l935:
 21290  004ABA  0012               	return	
 21291  004ABC                     __end_of_receivePrintEventVerbose:
 21292                           	opt stack 0
 21293                           tblptru	equ	0xFF8
 21294                           tblptrh	equ	0xFF7
 21295                           tblptrl	equ	0xFF6
 21296                           tablat	equ	0xFF5
 21297                           prodh	equ	0xFF4
 21298                           prodl	equ	0xFF3
 21299                           intcon	equ	0xFF2
 21300                           indf0	equ	0xFEF
 21301                           postinc0	equ	0xFEE
 21302                           fsr0h	equ	0xFEA
 21303                           fsr0l	equ	0xFE9
 21304                           wreg	equ	0xFE8
 21305                           indf1	equ	0xFE7
 21306                           postinc1	equ	0xFE6
 21307                           postdec1	equ	0xFE5
 21308                           fsr1h	equ	0xFE2
 21309                           fsr1l	equ	0xFE1
 21310                           indf2	equ	0xFDF
 21311                           postinc2	equ	0xFDE
 21312                           postdec2	equ	0xFDD
 21313                           plusw2	equ	0xFDB
 21314                           fsr2h	equ	0xFDA
 21315                           fsr2l	equ	0xFD9
 21316                           status	equ	0xFD8
 21317                           
 21318 ;; *************** function _getVSCPFrame *****************
 21319 ;; Defined at:
 21320 ;;		line 3000 in file "main.c"
 21321 ;; Parameters:    Size  Location     Type
 21322 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21323 ;;		 -> vscpClass(2), 
 21324 ;;  pvscptype       1   18[BANK0 ] PTR unsigned char 
 21325 ;;		 -> vscpType(1), 
 21326 ;;  pNodeId         1   19[BANK0 ] PTR unsigned char 
 21327 ;;		 -> vscpNodeId(1), 
 21328 ;;  pPriority       1   20[BANK0 ] PTR unsigned char 
 21329 ;;		 -> vscpPriority(1), 
 21330 ;;  pSize           1   21[BANK0 ] PTR unsigned char 
 21331 ;;		 -> vscpSize(1), 
 21332 ;;  pData           1   22[BANK0 ] PTR unsigned char 
 21333 ;;		 -> vscpData(8), 
 21334 ;; Auto vars:     Size  Location     Type
 21335 ;;  pvscpclass      1   27[BANK0 ] PTR unsigned short 
 21336 ;;		 -> vscpClass(2), 
 21337 ;;  id              4   28[BANK0 ] unsigned long 
 21338 ;; Return value:  Size  Location     Type
 21339 ;;                  1    wreg      unsigned char 
 21340 ;; Registers used:
 21341 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21342 ;; Tracked objects:
 21343 ;;		On entry : F/0
 21344 ;;		On exit  : F/0
 21345 ;;		Unchanged: 0/0
 21346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21347 ;;      Params:         0       5       0       0       0       0       0
 21348 ;;      Locals:         0       5       0       0       0       0       0
 21349 ;;      Temps:          0       4       0       0       0       0       0
 21350 ;;      Totals:         0      14       0       0       0       0       0
 21351 ;;Total ram usage:       14 bytes
 21352 ;; Hardware stack levels used:    1
 21353 ;; Hardware stack levels required when called:    5
 21354 ;; This function calls:
 21355 ;;		_getCANFrame
 21356 ;; This function is called by:
 21357 ;;		_receivePrintEventVerbose
 21358 ;;		_readRegister
 21359 ;;		_readRegisterExtended
 21360 ;;		_writeRegisterExtended
 21361 ;; This function uses a non-reentrant model
 21362 ;;
 21363                           
 21364                           	psect	text53
 21365  00221C                     __ptext53:
 21366                           	opt stack 0
 21367  00221C                     _getVSCPFrame:
 21368                           	opt stack 21
 21369                           
 21370                           ;incstack = 0
 21371                           ;incstack = 0
 21372                           ;getVSCPFrame@pvscpclass stored from wreg
 21373  00221C  CFE8 F07B          	movff	wreg,getVSCPFrame@pvscpclass
 21374                           
 21375                           ; BSR set to: 0
 21376                           ;main.c: 3001: uint32_t id;
 21377                           ;main.c: 3003: if (!getCANFrame(&id, pSize, pData)) {
 21378  002220  C075  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21379  002224  C076  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+1
 21380  002228  0E0F               	movlw	15
 21381  00222A  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 21382  00222C  0E5F               	movlw	__accesstop+-1
 21383  00222E  656F               	cpfsgt	(?_getCANFrame+1)& (0+255),b
 21384  002230  6B70               	clrf	(?_getCANFrame+2)& (0+255),b
 21385  002232  0E7C               	movlw	getVSCPFrame@id& (0+255)
 21386  002234  EC77  F012         	call	_getCANFrame
 21387  002238  0900               	iorlw	0
 21388  00223A  E102               	bnz	l16143
 21389                           
 21390                           ; BSR set to: 0
 21391                           ;main.c: 3004: return 0;
 21392  00223C  0E00               	movlw	0
 21393  00223E  D02F               	goto	l1276
 21394  002240                     l16143:
 21395                           
 21396                           ; BSR set to: 0
 21397                           ;main.c: 3005: }
 21398                           ;main.c: 3007: *pNodeId = id & 0x0ff;
 21399  002240  5173               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21400  002242  6ED9               	movwf	fsr2l,c
 21401  002244  6ADA               	clrf	fsr2h,c
 21402  002246  C07C  FFDF         	movff	getVSCPFrame@id,indf2
 21403                           
 21404                           ;main.c: 3008: *pvscptype = (id >> 8) & 0xff;
 21405  00224A  5172               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21406  00224C  6ED9               	movwf	fsr2l,c
 21407  00224E  6ADA               	clrf	fsr2h,c
 21408  002250  C07D  FFDF         	movff	getVSCPFrame@id+1,indf2
 21409                           
 21410                           ; BSR set to: 0
 21411                           ;main.c: 3009: *pvscpclass = (id >> 16) & 0x1ff;
 21412  002254  0100               	movlb	0	; () banked
 21413  002256  517E               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21414  002258  6F77               	movwf	??_getVSCPFrame& (0+255),b
 21415  00225A  0E01               	movlw	1
 21416  00225C  157F               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21417  00225E  6F78               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21418  002260  517B               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21419  002262  6ED9               	movwf	fsr2l,c
 21420  002264  6ADA               	clrf	fsr2h,c
 21421  002266  C077  FFDE         	movff	??_getVSCPFrame,postinc2
 21422  00226A  C078  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;main.c: 3010: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21426  00226E  5174               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21427  002270  6ED9               	movwf	fsr2l,c
 21428  002272  6ADA               	clrf	fsr2h,c
 21429  002274  C07C  F077         	movff	getVSCPFrame@id,??_getVSCPFrame
 21430  002278  C07D  F078         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21431  00227C  C07E  F079         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21432  002280  C07F  F07A         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21433  002284  0E1B               	movlw	27
 21434  002286  D005               	goto	u22200
 21435  002288                     u22205:
 21436  002288  90D8               	bcf	status,0,c
 21437  00228A  337A               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21438  00228C  3379               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21439  00228E  3378               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21440  002290  3377               	rrcf	??_getVSCPFrame& (0+255),f,b
 21441  002292                     u22200:
 21442  002292  2EE8               	decfsz	wreg,f,c
 21443  002294  D7F9               	goto	u22205
 21444  002296  5177               	movf	??_getVSCPFrame& (0+255),w,b
 21445  002298  0B07               	andlw	7
 21446  00229A  6EDF               	movwf	indf2,c
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;main.c: 3012: return 1;
 21450  00229C  0E01               	movlw	1
 21451  00229E                     l1276:
 21452                           
 21453                           ; BSR set to: 0
 21454  00229E  0012               	return	
 21455  0022A0                     __end_of_getVSCPFrame:
 21456                           	opt stack 0
 21457                           tblptru	equ	0xFF8
 21458                           tblptrh	equ	0xFF7
 21459                           tblptrl	equ	0xFF6
 21460                           tablat	equ	0xFF5
 21461                           prodh	equ	0xFF4
 21462                           prodl	equ	0xFF3
 21463                           intcon	equ	0xFF2
 21464                           indf0	equ	0xFEF
 21465                           postinc0	equ	0xFEE
 21466                           fsr0h	equ	0xFEA
 21467                           fsr0l	equ	0xFE9
 21468                           wreg	equ	0xFE8
 21469                           indf1	equ	0xFE7
 21470                           postinc1	equ	0xFE6
 21471                           postdec1	equ	0xFE5
 21472                           fsr1h	equ	0xFE2
 21473                           fsr1l	equ	0xFE1
 21474                           indf2	equ	0xFDF
 21475                           postinc2	equ	0xFDE
 21476                           postdec2	equ	0xFDD
 21477                           plusw2	equ	0xFDB
 21478                           fsr2h	equ	0xFDA
 21479                           fsr2l	equ	0xFD9
 21480                           status	equ	0xFD8
 21481                           
 21482 ;; *************** function _getCANFrame *****************
 21483 ;; Defined at:
 21484 ;;		line 3036 in file "main.c"
 21485 ;; Parameters:    Size  Location     Type
 21486 ;;  pid             1    wreg     PTR unsigned long 
 21487 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21488 ;;  pdlc            1   14[BANK0 ] PTR unsigned char 
 21489 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21490 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21491 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21492 ;; Auto vars:     Size  Location     Type
 21493 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21494 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21495 ;; Return value:  Size  Location     Type
 21496 ;;                  1    wreg      unsigned char 
 21497 ;; Registers used:
 21498 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21499 ;; Tracked objects:
 21500 ;;		On entry : F/0
 21501 ;;		On exit  : F/0
 21502 ;;		Unchanged: 0/0
 21503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21504 ;;      Params:         0       3       0       0       0       0       0
 21505 ;;      Locals:         0       1       0       0       0       0       0
 21506 ;;      Temps:          0       0       0       0       0       0       0
 21507 ;;      Totals:         0       4       0       0       0       0       0
 21508 ;;Total ram usage:        4 bytes
 21509 ;; Hardware stack levels used:    1
 21510 ;; Hardware stack levels required when called:    4
 21511 ;; This function calls:
 21512 ;;		_fifo_read
 21513 ;; This function is called by:
 21514 ;;		_receiveSendEventCANAL
 21515 ;;		_receiveSendMultiEventCANAL
 21516 ;;		_receiveSendEventSLCAN
 21517 ;;		_getVSCPFrame
 21518 ;; This function uses a non-reentrant model
 21519 ;;
 21520                           
 21521                           	psect	text54
 21522  0024EE                     __ptext54:
 21523                           	opt stack 0
 21524  0024EE                     _getCANFrame:
 21525                           	opt stack 23
 21526                           
 21527                           ; BSR set to: 0
 21528                           ;incstack = 0
 21529                           ;incstack = 0
 21530                           ;getCANFrame@pid stored from wreg
 21531  0024EE  CFE8 F071          	movff	wreg,getCANFrame@pid
 21532                           
 21533                           ; BSR set to: 0
 21534                           ;main.c: 3057: if ( fifo_canrxcount ) {
 21535  0024F2  502F               	movf	_fifo_canrxcount,w,c	;volatile
 21536  0024F4  E013               	bz	l16161
 21537                           
 21538                           ; BSR set to: 0
 21539                           ;main.c: 3060: (INTCONbits.GIE = 0);
 21540  0024F6  9EF2               	bcf	intcon,7,c	;volatile
 21541                           
 21542                           ; BSR set to: 0
 21543                           ;main.c: 3061: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21544  0024F8  0E01               	movlw	high _canInputFifo
 21545  0024FA  0100               	movlb	0	; () banked
 21546  0024FC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21547  0024FE  0ECB               	movlw	low _canInputFifo
 21548  002500  6F60               	movwf	?_fifo_read& (0+255),b
 21549  002502  C071  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21550  002506  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21551  002508  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21552  00250A  0E04               	movlw	4
 21553  00250C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21554  00250E  EC9D  F016         	call	_fifo_read	;wreg free
 21555  002512  5160               	movf	?_fifo_read& (0+255),w,b
 21556  002514  0A04               	xorlw	4
 21557  002516  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21558  002518  E003               	bz	l16165
 21559  00251A                     l16159:
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;main.c: 3062: (INTCONbits.GIE = 1);
 21563  00251A  8EF2               	bsf	intcon,7,c	;volatile
 21564  00251C                     l16161:
 21565                           
 21566                           ; BSR set to: 0
 21567                           ;main.c: 3063: return 0;
 21568  00251C  0E00               	movlw	0
 21569  00251E  D035               	goto	l1285
 21570  002520                     l16165:
 21571                           
 21572                           ; BSR set to: 0
 21573                           ;main.c: 3064: }
 21574                           ;main.c: 3067: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21575  002520  0E01               	movlw	high _canInputFifo
 21576  002522  0100               	movlb	0	; () banked
 21577  002524  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21578  002526  0ECB               	movlw	low _canInputFifo
 21579  002528  6F60               	movwf	?_fifo_read& (0+255),b
 21580  00252A  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21581  00252E  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21582  002530  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21583  002532  0E01               	movlw	1
 21584  002534  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21585  002536  EC9D  F016         	call	_fifo_read	;wreg free
 21586  00253A  0560               	decf	?_fifo_read& (0+255),w,b
 21587  00253C  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21588  00253E  E1ED               	bnz	l16159
 21589                           
 21590                           ; BSR set to: 0
 21591                           ;main.c: 3070: }
 21592                           ;main.c: 3073: if ( *pdlc > 8 ) {
 21593  002540  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21594  002542  6ED9               	movwf	fsr2l,c
 21595  002544  6ADA               	clrf	fsr2h,c
 21596  002546  0E08               	movlw	8
 21597  002548  64DF               	cpfsgt	indf2,c
 21598  00254A  D004               	goto	l16177
 21599                           
 21600                           ; BSR set to: 0
 21601                           ;main.c: 3074: *pdlc = 0;
 21602  00254C  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21603  00254E  6ED9               	movwf	fsr2l,c
 21604  002550  6ADA               	clrf	fsr2h,c
 21605  002552  6ADF               	clrf	indf2,c
 21606  002554                     l16177:
 21607                           
 21608                           ; BSR set to: 0
 21609                           ;main.c: 3075: }
 21610                           ;main.c: 3078: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21611  002554  0E01               	movlw	high _canInputFifo
 21612  002556  0100               	movlb	0	; () banked
 21613  002558  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21614  00255A  0ECB               	movlw	low _canInputFifo
 21615  00255C  6F60               	movwf	?_fifo_read& (0+255),b
 21616  00255E  C06F  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21617  002562  C070  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21618  002566  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21619  002568  6ED9               	movwf	fsr2l,c
 21620  00256A  6ADA               	clrf	fsr2h,c
 21621  00256C  50DF               	movf	indf2,w,c
 21622  00256E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21623  002570  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21624  002572  EC9D  F016         	call	_fifo_read	;wreg free
 21625  002576  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21626  002578  6ED9               	movwf	fsr2l,c
 21627  00257A  6ADA               	clrf	fsr2h,c
 21628  00257C  50DF               	movf	indf2,w,c
 21629  00257E  1960               	xorwf	?_fifo_read& (0+255),w,b
 21630  002580  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21631  002582  E1CB               	bnz	l16159
 21632                           
 21633                           ; BSR set to: 0
 21634                           ;main.c: 3081: }
 21635                           ;main.c: 3083: fifo_canrxcount--;
 21636  002584  062F               	decf	_fifo_canrxcount,f,c	;volatile
 21637                           
 21638                           ; BSR set to: 0
 21639                           ;main.c: 3085: (INTCONbits.GIE = 1);
 21640  002586  8EF2               	bsf	intcon,7,c	;volatile
 21641                           
 21642                           ; BSR set to: 0
 21643                           ;main.c: 3087: return 1;
 21644  002588  0E01               	movlw	1
 21645  00258A                     l1285:
 21646                           
 21647                           ; BSR set to: 0
 21648  00258A  0012               	return	
 21649  00258C                     __end_of_getCANFrame:
 21650                           	opt stack 0
 21651                           tblptru	equ	0xFF8
 21652                           tblptrh	equ	0xFF7
 21653                           tblptrl	equ	0xFF6
 21654                           tablat	equ	0xFF5
 21655                           prodh	equ	0xFF4
 21656                           prodl	equ	0xFF3
 21657                           intcon	equ	0xFF2
 21658                           indf0	equ	0xFEF
 21659                           postinc0	equ	0xFEE
 21660                           fsr0h	equ	0xFEA
 21661                           fsr0l	equ	0xFE9
 21662                           wreg	equ	0xFE8
 21663                           indf1	equ	0xFE7
 21664                           postinc1	equ	0xFE6
 21665                           postdec1	equ	0xFE5
 21666                           fsr1h	equ	0xFE2
 21667                           fsr1l	equ	0xFE1
 21668                           indf2	equ	0xFDF
 21669                           postinc2	equ	0xFDE
 21670                           postdec2	equ	0xFDD
 21671                           plusw2	equ	0xFDB
 21672                           fsr2h	equ	0xFDA
 21673                           fsr2l	equ	0xFD9
 21674                           status	equ	0xFD8
 21675                           
 21676 ;; *************** function _fifo_read *****************
 21677 ;; Defined at:
 21678 ;;		line 29 in file "fifo.c"
 21679 ;; Parameters:    Size  Location     Type
 21680 ;;  f               2    0[BANK0 ] PTR struct .
 21681 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21682 ;;  buf             2    2[BANK0 ] PTR const void 
 21683 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21684 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21685 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21686 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21687 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21688 ;; Auto vars:     Size  Location     Type
 21689 ;;  i               2   12[BANK0 ] unsigned short 
 21690 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21691 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21692 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21693 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21694 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21695 ;; Return value:  Size  Location     Type
 21696 ;;                  2    0[BANK0 ] unsigned short 
 21697 ;; Registers used:
 21698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21699 ;; Tracked objects:
 21700 ;;		On entry : F/0
 21701 ;;		On exit  : F/0
 21702 ;;		Unchanged: 0/0
 21703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21704 ;;      Params:         0       6       0       0       0       0       0
 21705 ;;      Locals:         0       4       0       0       0       0       0
 21706 ;;      Temps:          0       4       0       0       0       0       0
 21707 ;;      Totals:         0      14       0       0       0       0       0
 21708 ;;Total ram usage:       14 bytes
 21709 ;; Hardware stack levels used:    1
 21710 ;; Hardware stack levels required when called:    3
 21711 ;; This function calls:
 21712 ;;		Nothing
 21713 ;; This function is called by:
 21714 ;;		_main
 21715 ;;		_doModeVerbose
 21716 ;;		_doModeVscp
 21717 ;;		_doModeSLCAN
 21718 ;;		_getCANFrame
 21719 ;; This function uses a non-reentrant model
 21720 ;;
 21721                           
 21722                           	psect	text55
 21723  002D3A                     __ptext55:
 21724                           	opt stack 0
 21725  002D3A                     _fifo_read:
 21726                           	opt stack 23
 21727                           
 21728                           ; BSR set to: 0
 21729                           ;fifo.c: 30: uint16_t i;
 21730                           ;fifo.c: 31: uint8_t *p;
 21731                           ;fifo.c: 32: p = buf;
 21732                           
 21733                           ; BSR set to: 0
 21734                           ;incstack = 0
 21735                           ;incstack = 0
 21736  002D3A  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21737  002D3E  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21738                           
 21739                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21740  002D42  6B6C               	clrf	fifo_read@i& (0+255),b
 21741  002D44  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21742  002D46  D04A               	goto	l10231
 21743  002D48                     l10217:
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21747  002D48  EE20 F002          	lfsr	2,2
 21748  002D4C  D851               	call	PL34	;call to abstracted procedure
 21749  002D4E  18E5               	xorwf	postdec1,w,c
 21750  002D50  CFDF FFE8          	movff	indf2,wreg
 21751  002D54  B4D8               	btfsc	status,2,c
 21752  002D56  18E7               	xorwf	indf1,w,c
 21753  002D58  E03A               	bz	l1536
 21754                           
 21755                           ; BSR set to: 0
 21756                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21757  002D5A  EE20 F004          	lfsr	2,4
 21758  002D5E  5160               	movf	fifo_read@f& (0+255),w,b
 21759  002D60  26D9               	addwf	fsr2l,f,c
 21760  002D62  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21761  002D64  22DA               	addwfc	fsr2h,f,c
 21762  002D66  CFDE F066          	movff	postinc2,??_fifo_read
 21763  002D6A  CFDD F067          	movff	postdec2,??_fifo_read+1
 21764  002D6E  C060  FFD9         	movff	fifo_read@f,fsr2l
 21765  002D72  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21766  002D76  CFDE F068          	movff	postinc2,??_fifo_read+2
 21767  002D7A  CFDD F069          	movff	postdec2,??_fifo_read+3
 21768  002D7E  5166               	movf	??_fifo_read& (0+255),w,b
 21769  002D80  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21770  002D82  6ED9               	movwf	fsr2l,c
 21771  002D84  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21772  002D86  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21773  002D88  6EDA               	movwf	fsr2h,c
 21774  002D8A  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21775  002D8E  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21776  002D92  CFDF FFE7          	movff	indf2,indf1
 21777                           
 21778                           ; BSR set to: 0
 21779  002D96  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21780  002D98  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21781                           
 21782                           ; BSR set to: 0
 21783                           ;fifo.c: 38: f->tail++;
 21784  002D9A  EE20 F004          	lfsr	2,4
 21785  002D9E  5160               	movf	fifo_read@f& (0+255),w,b
 21786  002DA0  26D9               	addwf	fsr2l,f,c
 21787  002DA2  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21788  002DA4  22DA               	addwfc	fsr2h,f,c
 21789  002DA6  2ADE               	incf	postinc2,f,c
 21790  002DA8  0E00               	movlw	0
 21791  002DAA  22DD               	addwfc	postdec2,f,c
 21792                           
 21793                           ; BSR set to: 0
 21794                           ;fifo.c: 39: if (f->tail >= f->size) {
 21795  002DAC  EE20 F006          	lfsr	2,6
 21796  002DB0  D81F               	call	PL34	;call to abstracted procedure
 21797  002DB2  5CE5               	subwf	postdec1,w,c
 21798  002DB4  E102               	bnz	u12505
 21799  002DB6  50DF               	movf	indf2,w,c
 21800  002DB8  5CE7               	subwf	indf1,w,c
 21801  002DBA                     u12505:
 21802  002DBA  E30E               	bnc	l10229
 21803                           
 21804                           ; BSR set to: 0
 21805                           ;fifo.c: 40: f->tail = 0;
 21806  002DBC  EE20 F004          	lfsr	2,4
 21807  002DC0  5160               	movf	fifo_read@f& (0+255),w,b
 21808  002DC2  26D9               	addwf	fsr2l,f,c
 21809  002DC4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21810  002DC6  22DA               	addwfc	fsr2h,f,c
 21811  002DC8  6ADE               	clrf	postinc2,c
 21812  002DCA  6ADD               	clrf	postdec2,c
 21813  002DCC  D005               	goto	l10229
 21814  002DCE                     l1536:
 21815                           
 21816                           ; BSR set to: 0
 21817                           ;fifo.c: 43: else {
 21818                           ;fifo.c: 44: return i;
 21819  002DCE  C06C  F060         	movff	fifo_read@i,?_fifo_read
 21820  002DD2  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21821  002DD6  D00B               	goto	l1539
 21822  002DD8                     l10229:
 21823                           
 21824                           ; BSR set to: 0
 21825  002DD8  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 21826  002DDA  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 21827  002DDC                     l10231:
 21828                           
 21829                           ; BSR set to: 0
 21830  002DDC  5164               	movf	fifo_read@nbytes& (0+255),w,b
 21831  002DDE  5D6C               	subwf	fifo_read@i& (0+255),w,b
 21832  002DE0  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21833  002DE2  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21834  002DE4  E3B1               	bnc	l10217
 21835                           
 21836                           ; BSR set to: 0
 21837                           ;fifo.c: 45: }
 21838                           ;fifo.c: 47: }
 21839                           ;fifo.c: 49: return nbytes;
 21840  002DE6  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 21841  002DEA  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21842  002DEE                     l1539:
 21843                           
 21844                           ; BSR set to: 0
 21845  002DEE  0012               	return	
 21846  002DF0                     __end_of_fifo_read:
 21847                           	opt stack 0
 21848  002DF0                     PL34:
 21849                           	opt stack 23
 21850  002DF0  5160               	movf	fifo_read@f& (0+255),w,b
 21851  002DF2  26D9               	addwf	fsr2l,f,c
 21852  002DF4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21853  002DF6  22DA               	addwfc	fsr2h,f,c
 21854  002DF8  EE10 F004          	lfsr	1,4
 21855  002DFC  5160               	movf	fifo_read@f& (0+255),w,b
 21856  002DFE  26E1               	addwf	fsr1l,f,c
 21857  002E00  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21858  002E02  22E2               	addwfc	fsr1h,f,c
 21859  002E04  52E6               	movf	postinc1,f,c
 21860  002E06  52DE               	movf	postinc2,f,c
 21861  002E08  50DD               	movf	postdec2,w,c
 21862  002E0A  0012               	return	
 21863  002E0C                     __end_ofPL34:
 21864                           	opt stack 0
 21865                           tblptru	equ	0xFF8
 21866                           tblptrh	equ	0xFF7
 21867                           tblptrl	equ	0xFF6
 21868                           tablat	equ	0xFF5
 21869                           prodh	equ	0xFF4
 21870                           prodl	equ	0xFF3
 21871                           intcon	equ	0xFF2
 21872                           indf0	equ	0xFEF
 21873                           postinc0	equ	0xFEE
 21874                           fsr0h	equ	0xFEA
 21875                           fsr0l	equ	0xFE9
 21876                           wreg	equ	0xFE8
 21877                           indf1	equ	0xFE7
 21878                           postinc1	equ	0xFE6
 21879                           postdec1	equ	0xFE5
 21880                           fsr1h	equ	0xFE2
 21881                           fsr1l	equ	0xFE1
 21882                           indf2	equ	0xFDF
 21883                           postinc2	equ	0xFDE
 21884                           postdec2	equ	0xFDD
 21885                           plusw2	equ	0xFDB
 21886                           fsr2h	equ	0xFDA
 21887                           fsr2l	equ	0xFD9
 21888                           status	equ	0xFD8
 21889                           
 21890 ;; *************** function _sprintf *****************
 21891 ;; Defined at:
 21892 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21893 ;; Parameters:    Size  Location     Type
 21894 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21895 ;;		 -> wrkbuf(80), 
 21896 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21897 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21898 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21899 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21900 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21901 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21902 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21903 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21904 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21905 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21906 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21907 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21908 ;; Auto vars:     Size  Location     Type
 21909 ;;  idx             1   33[BANK0 ] unsigned char 
 21910 ;;  _val            4   45[BANK0 ] struct .
 21911 ;;  flag            2   50[BANK0 ] unsigned short 
 21912 ;;  width           2   43[BANK0 ] int 
 21913 ;;  prec            2   41[BANK0 ] int 
 21914 ;;  c               1   49[BANK0 ] char 
 21915 ;;  ap              1   40[BANK0 ] PTR void [1]
 21916 ;;		 -> ?_sprintf(2), 
 21917 ;; Return value:  Size  Location     Type
 21918 ;;                  2   22[BANK0 ] int 
 21919 ;; Registers used:
 21920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21921 ;; Tracked objects:
 21922 ;;		On entry : F/0
 21923 ;;		On exit  : F/0
 21924 ;;		Unchanged: 0/0
 21925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21926 ;;      Params:         0       8       0       0       0       0       0
 21927 ;;      Locals:         0      19       0       0       0       0       0
 21928 ;;      Temps:          0       3       0       0       0       0       0
 21929 ;;      Totals:         0      30       0       0       0       0       0
 21930 ;;Total ram usage:       30 bytes
 21931 ;; Hardware stack levels used:    1
 21932 ;; Hardware stack levels required when called:    4
 21933 ;; This function calls:
 21934 ;;		_isdigit
 21935 ;;		___lldiv
 21936 ;;		___llmod
 21937 ;;		___wmul
 21938 ;; This function is called by:
 21939 ;;		_doModeVerbose
 21940 ;;		_receivePrintEventVerbose
 21941 ;;		_printStatistics
 21942 ;;		_printErrors
 21943 ;; This function uses a non-reentrant model
 21944 ;;
 21945                           
 21946                           	psect	text56
 21947  005154                     __ptext56:
 21948                           	opt stack 0
 21949  005154                     _sprintf:
 21950                           	opt stack 24
 21951                           
 21952                           ; BSR set to: 0
 21953                           ;doprnt.c: 494: va_list ap;
 21954                           ;doprnt.c: 499: signed char c;
 21955                           ;doprnt.c: 501: int width;
 21956                           ;doprnt.c: 504: int prec;
 21957                           ;doprnt.c: 508: unsigned short flag;
 21958                           ;doprnt.c: 527: union {
 21959                           ;doprnt.c: 528: unsigned long _val;
 21960                           ;doprnt.c: 529: struct {
 21961                           ;doprnt.c: 530: const char * _cp;
 21962                           ;doprnt.c: 531: unsigned _len;
 21963                           ;doprnt.c: 532: } _str;
 21964                           ;doprnt.c: 533: } _val;
 21965                           ;doprnt.c: 542: *ap = __va_start();
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;incstack = 0
 21969                           ;incstack = 0
 21970  005154  0E7A               	movlw	low (?_sprintf+4)
 21971  005156  6F88               	movwf	sprintf@ap& (0+255),b
 21972                           
 21973                           ;doprnt.c: 545: while(c = *f++) {
 21974  005158  D32C               	goto	l15515
 21975  00515A                     l15181:
 21976                           
 21977                           ; BSR set to: 0
 21978                           ;doprnt.c: 547: if(c != '%')
 21979  00515A  5191               	movf	sprintf@c& (0+255),w,b
 21980  00515C  0A25               	xorlw	37
 21981  00515E  E009               	bz	l1623
 21982                           
 21983                           ; BSR set to: 0
 21984                           ;doprnt.c: 549: {
 21985                           ;doprnt.c: 550: ((*sp++ = (c)));
 21986  005160  C076  FFD9         	movff	sprintf@sp,fsr2l
 21987  005164  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21988  005168  C091  FFDF         	movff	sprintf@c,indf2
 21989                           
 21990                           ; BSR set to: 0
 21991  00516C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21992  00516E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21993                           
 21994                           ;doprnt.c: 551: continue;
 21995  005170  D320               	goto	l15515
 21996  005172                     l1623:
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;doprnt.c: 552: }
 22000                           ;doprnt.c: 555: width = 0;
 22001  005172  6B8B               	clrf	sprintf@width& (0+255),b
 22002  005174  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22003                           
 22004                           ;doprnt.c: 557: flag = 0;
 22005  005176  6B92               	clrf	sprintf@flag& (0+255),b
 22006  005178  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22007  00517A  D009               	goto	l15197
 22008  00517C                     l15187:
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;doprnt.c: 563: flag |= 0x08;
 22012  00517C  8792               	bsf	sprintf@flag& (0+255),3,b
 22013  00517E  D005               	goto	L34
 22014  005180                     l15189:
 22015                           
 22016                           ; BSR set to: 0
 22017                           ;doprnt.c: 570: flag |= 0x01;
 22018  005180  8192               	bsf	sprintf@flag& (0+255),0,b
 22019  005182  D003               	goto	L34
 22020  005184                     l15191:
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;doprnt.c: 583: flag |= 0x800;
 22024  005184  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22025  005186  D001               	goto	L34
 22026  005188                     l15193:
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;doprnt.c: 589: flag |= 0x04;
 22030  005188  8592               	bsf	sprintf@flag& (0+255),2,b
 22031  00518A                     L34:
 22032                           
 22033                           ;doprnt.c: 590: f++;
 22034  00518A  4B78               	infsnz	sprintf@f& (0+255),f,b
 22035  00518C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22036  00518E                     l15197:
 22037                           
 22038                           ; BSR set to: 0
 22039  00518E  C078  FFF6         	movff	sprintf@f,tblptrl
 22040  005192  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22041  005196  0008               	tblrd		*
 22042  005198  50F5               	movf	tablat,w,c
 22043                           
 22044                           ; Switch size 1, requested type "space"
 22045                           ; Number of cases is 4, Range of values is 32 to 48
 22046                           ; switch strategies available:
 22047                           ; Name         Instructions Cycles
 22048                           ; simple_byte           13     7 (average)
 22049                           ;	Chosen strategy is simple_byte
 22050  00519A  0A20               	xorlw	32	; case 32
 22051  00519C  E0F1               	bz	l15189
 22052  00519E  0A03               	xorlw	3	; case 35
 22053  0051A0  E0F1               	bz	l15191
 22054  0051A2  0A0E               	xorlw	14	; case 45
 22055  0051A4  E0EB               	bz	l15187
 22056  0051A6  0A1D               	xorlw	29	; case 48
 22057  0051A8  E0EF               	bz	l15193
 22058                           
 22059                           ; BSR set to: 0
 22060                           ;doprnt.c: 602: if(flag & 0x08)
 22061  0051AA  B792               	btfsc	sprintf@flag& (0+255),3,b
 22062                           
 22063                           ; BSR set to: 0
 22064                           ;doprnt.c: 603: flag &= ~0x04;
 22065  0051AC  9592               	bcf	sprintf@flag& (0+255),2,b
 22066                           
 22067                           ; BSR set to: 0
 22068                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22069  0051AE  C078  FFF6         	movff	sprintf@f,tblptrl
 22070  0051B2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22071  0051B6  0008               	tblrd		*
 22072  0051B8  50F5               	movf	tablat,w,c
 22073  0051BA  ECB8  F00B         	call	_isdigit
 22074  0051BE  E325               	bnc	l15213
 22075                           
 22076                           ; BSR set to: 0
 22077                           ;doprnt.c: 607: width = 0;
 22078  0051C0  6B8B               	clrf	sprintf@width& (0+255),b
 22079  0051C2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22080  0051C4                     l15205:
 22081                           
 22082                           ; BSR set to: 0
 22083                           ;doprnt.c: 609: width *= 10;
 22084  0051C4  C08B  F060         	movff	sprintf@width,?___wmul
 22085  0051C8  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22086  0051CC  6B63               	clrf	(?___wmul+3)& (0+255),b
 22087  0051CE  0E0A               	movlw	10
 22088  0051D0  6F62               	movwf	(?___wmul+2)& (0+255),b
 22089  0051D2  EC0D  F00C         	call	___wmul	;wreg free
 22090  0051D6  C060  F08B         	movff	?___wmul,sprintf@width
 22091  0051DA  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22092                           
 22093                           ; BSR set to: 0
 22094                           ;doprnt.c: 610: width += *f++ - '0';
 22095  0051DE  C078  FFF6         	movff	sprintf@f,tblptrl
 22096  0051E2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22097  0051E6  0008               	tblrd		*
 22098  0051E8  CFF5 F07E          	movff	tablat,??_sprintf
 22099  0051EC  0ED0               	movlw	208
 22100  0051EE  257E               	addwf	??_sprintf& (0+255),w,b
 22101  0051F0  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22102  0051F2  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22103  0051F4  0EFF               	movlw	255
 22104  0051F6  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22105  0051F8  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22106  0051FA  278B               	addwf	sprintf@width& (0+255),f,b
 22107  0051FC  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22108  0051FE  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22109                           
 22110                           ; BSR set to: 0
 22111                           
 22112                           ; BSR set to: 0
 22113                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22114  005200  DB36               	call	PL76	;call to abstracted procedure
 22115  005202  ECB8  F00B         	call	_isdigit
 22116  005206  E314               	bnc	l15221
 22117  005208  D7DD               	goto	l15205
 22118  00520A                     l15213:
 22119                           
 22120                           ; BSR set to: 0
 22121  00520A  C078  FFF6         	movff	sprintf@f,tblptrl
 22122  00520E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22123  005212  0008               	tblrd		*
 22124  005214  50F5               	movf	tablat,w,c
 22125  005216  0A2A               	xorlw	42
 22126  005218  E10B               	bnz	l15221
 22127                           
 22128                           ; BSR set to: 0
 22129                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22130  00521A  5188               	movf	sprintf@ap& (0+255),w,b
 22131  00521C  6ED9               	movwf	fsr2l,c
 22132  00521E  6ADA               	clrf	fsr2h,c
 22133  005220  CFDE F08B          	movff	postinc2,sprintf@width
 22134  005224  CFDD F08C          	movff	postdec2,sprintf@width+1
 22135                           
 22136                           ; BSR set to: 0
 22137  005228  0E02               	movlw	2
 22138  00522A  2788               	addwf	sprintf@ap& (0+255),f,b
 22139                           
 22140                           ; BSR set to: 0
 22141                           ;doprnt.c: 615: f++;
 22142  00522C  4B78               	infsnz	sprintf@f& (0+255),f,b
 22143  00522E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22144  005230                     l15221:
 22145                           
 22146                           ; BSR set to: 0
 22147                           ;doprnt.c: 617: }
 22148                           ;doprnt.c: 620: if(*f == '.') {
 22149  005230  C078  FFF6         	movff	sprintf@f,tblptrl
 22150  005234  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22151  005238  0008               	tblrd		*
 22152  00523A  50F5               	movf	tablat,w,c
 22153  00523C  0A2E               	xorlw	46
 22154  00523E  E137               	bnz	l1639
 22155                           
 22156                           ; BSR set to: 0
 22157                           ;doprnt.c: 621: flag |= 0x4000;
 22158  005240  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22159                           
 22160                           ;doprnt.c: 622: f++;
 22161                           
 22162                           ; BSR set to: 0
 22163                           ;doprnt.c: 624: if(*f == '*') {
 22164  005242  DB15               	call	PL76	;call to abstracted procedure
 22165  005244  0A2A               	xorlw	42
 22166  005246  E10C               	bnz	l1640
 22167                           
 22168                           ; BSR set to: 0
 22169                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22170  005248  5188               	movf	sprintf@ap& (0+255),w,b
 22171  00524A  6ED9               	movwf	fsr2l,c
 22172  00524C  6ADA               	clrf	fsr2h,c
 22173  00524E  CFDE F089          	movff	postinc2,sprintf@prec
 22174  005252  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22175                           
 22176                           ; BSR set to: 0
 22177  005256  0E02               	movlw	2
 22178  005258  2788               	addwf	sprintf@ap& (0+255),f,b
 22179                           
 22180                           ; BSR set to: 0
 22181                           ;doprnt.c: 626: f++;
 22182  00525A  4B78               	infsnz	sprintf@f& (0+255),f,b
 22183  00525C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22184                           
 22185                           ;doprnt.c: 627: } else
 22186  00525E  D088               	goto	l15291
 22187  005260                     l1640:
 22188                           
 22189                           ; BSR set to: 0
 22190                           ;doprnt.c: 629: {
 22191                           ;doprnt.c: 630: prec = 0;
 22192  005260  6B89               	clrf	sprintf@prec& (0+255),b
 22193  005262  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22194                           
 22195                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22196  005264  D01A               	goto	l15237
 22197  005266                     l15233:
 22198                           
 22199                           ; BSR set to: 0
 22200                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22201  005266  C089  F060         	movff	sprintf@prec,?___wmul
 22202  00526A  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22203  00526E  6B63               	clrf	(?___wmul+3)& (0+255),b
 22204  005270  0E0A               	movlw	10
 22205  005272  6F62               	movwf	(?___wmul+2)& (0+255),b
 22206  005274  EC0D  F00C         	call	___wmul	;wreg free
 22207  005278  C078  FFF6         	movff	sprintf@f,tblptrl
 22208  00527C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22209  005280  0008               	tblrd		*
 22210  005282  50F5               	movf	tablat,w,c
 22211  005284  2760               	addwf	?___wmul& (0+255),f,b
 22212  005286  0E00               	movlw	0
 22213  005288  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22214  00528A  0ED0               	movlw	208
 22215  00528C  2560               	addwf	?___wmul& (0+255),w,b
 22216  00528E  6F89               	movwf	sprintf@prec& (0+255),b
 22217  005290  0EFF               	movlw	255
 22218  005292  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22219  005294  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22220                           
 22221                           ; BSR set to: 0
 22222  005296  4B78               	infsnz	sprintf@f& (0+255),f,b
 22223  005298  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22224  00529A                     l15237:
 22225                           
 22226                           ; BSR set to: 0
 22227  00529A  C078  FFF6         	movff	sprintf@f,tblptrl
 22228  00529E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22229  0052A2  0008               	tblrd		*
 22230  0052A4  50F5               	movf	tablat,w,c
 22231  0052A6  ECB8  F00B         	call	_isdigit
 22232  0052AA  E362               	bnc	l15291
 22233  0052AC  D7DC               	goto	l15233
 22234  0052AE                     l1639:
 22235                           
 22236                           ; BSR set to: 0
 22237                           ;doprnt.c: 635: prec = 0;
 22238  0052AE  6B89               	clrf	sprintf@prec& (0+255),b
 22239  0052B0  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22240  0052B2  D05E               	goto	l15291
 22241  0052B4                     l15239:
 22242                           
 22243                           ; BSR set to: 0
 22244                           ;doprnt.c: 652: flag |= 0x10;
 22245  0052B4  8992               	bsf	sprintf@flag& (0+255),4,b
 22246                           
 22247                           ;doprnt.c: 653: goto loop;
 22248  0052B6  D05C               	goto	l15291
 22249  0052B8                     l15241:
 22250                           
 22251                           ; BSR set to: 0
 22252                           ;doprnt.c: 700: flag |= 0x40;
 22253  0052B8  8D92               	bsf	sprintf@flag& (0+255),6,b
 22254                           
 22255                           ;doprnt.c: 702: break;
 22256  0052BA  D06F               	goto	l15293
 22257  0052BC                     l15243:
 22258                           
 22259                           ; BSR set to: 0
 22260                           ;doprnt.c: 723: flag |= 0x20;
 22261  0052BC  8B92               	bsf	sprintf@flag& (0+255),5,b
 22262  0052BE                     l1656:
 22263                           
 22264                           ; BSR set to: 0
 22265                           ;doprnt.c: 730: flag |= 0x80;
 22266  0052BE  8F92               	bsf	sprintf@flag& (0+255),7,b
 22267                           
 22268                           ;doprnt.c: 732: break;
 22269  0052C0  D06C               	goto	l15293
 22270  0052C2                     l15245:
 22271                           
 22272                           ; BSR set to: 0
 22273                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22274  0052C2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22275  0052C4  1189               	iorwf	sprintf@prec& (0+255),w,b
 22276  0052C6  E009               	bz	l15251
 22277                           
 22278                           ; BSR set to: 0
 22279  0052C8  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22280  0052CA  5D89               	subwf	sprintf@prec& (0+255),w,b
 22281  0052CC  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22282  0052CE  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22283  0052D0  E204               	bc	l15251
 22284                           
 22285                           ; BSR set to: 0
 22286                           ;doprnt.c: 763: _val._str._len = prec;
 22287  0052D2  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22288  0052D6  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22289  0052DA                     l15251:
 22290                           
 22291                           ; BSR set to: 0
 22292                           ;doprnt.c: 766: if(width > _val._str._len)
 22293  0052DA  518B               	movf	sprintf@width& (0+255),w,b
 22294  0052DC  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22295  0052DE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22296  0052E0  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22297  0052E2  E207               	bc	l1659
 22298                           
 22299                           ; BSR set to: 0
 22300                           ;doprnt.c: 767: width -= _val._str._len;
 22301  0052E4  EE20  F08E         	lfsr	2,sprintf@_val+1
 22302  0052E8  50DE               	movf	postinc2,w,c
 22303  0052EA  5F8B               	subwf	sprintf@width& (0+255),f,b
 22304  0052EC  50DD               	movf	postdec2,w,c
 22305  0052EE  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22306  0052F0  D002               	goto	l1660
 22307  0052F2                     l1659:
 22308                           
 22309                           ; BSR set to: 0
 22310                           ;doprnt.c: 768: else
 22311                           ;doprnt.c: 769: width = 0;
 22312  0052F2  6B8B               	clrf	sprintf@width& (0+255),b
 22313  0052F4  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22314  0052F6                     l1660:
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;doprnt.c: 771: if(!(flag & 0x08))
 22318  0052F6  A792               	btfss	sprintf@flag& (0+255),3,b
 22319  0052F8  D004               	goto	l15261
 22320  0052FA  D015               	goto	l15269
 22321  0052FC                     l15257:
 22322                           
 22323                           ; BSR set to: 0
 22324                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22325  0052FC  DAB1               	call	PL60	;call to abstracted procedure
 22326                           
 22327                           ; BSR set to: 0
 22328  0052FE  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22329  005300  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22330  005302                     l15261:
 22331                           
 22332                           ; BSR set to: 0
 22333  005302  078B               	decf	sprintf@width& (0+255),f,b
 22334  005304  DAC2               	call	PL98	;call to abstracted procedure
 22335  005306  B4D8               	btfsc	status,2,c
 22336  005308  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22337  00530A  E00D               	bz	l15269
 22338  00530C  D7F7               	goto	l15257
 22339  00530E                     l15263:
 22340                           
 22341                           ; BSR set to: 0
 22342                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22343  00530E  518D               	movf	sprintf@_val& (0+255),w,b
 22344  005310  6ED9               	movwf	fsr2l,c
 22345  005312  6ADA               	clrf	fsr2h,c
 22346  005314  C076  FFE1         	movff	sprintf@sp,fsr1l
 22347  005318  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22348  00531C  CFDF FFE7          	movff	indf2,indf1
 22349                           
 22350                           ; BSR set to: 0
 22351  005320  2B8D               	incf	sprintf@_val& (0+255),f,b
 22352                           
 22353                           ; BSR set to: 0
 22354  005322  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22355  005324  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22356  005326                     l15269:
 22357                           
 22358                           ; BSR set to: 0
 22359  005326  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22360  005328  A0D8               	btfss	status,0,c
 22361  00532A  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22362  00532C  0100               	movlb	0	; () banked
 22363  00532E  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22364  005330  B4D8               	btfsc	status,2,c
 22365  005332  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22366  005334  E1EC               	bnz	l15263
 22367                           
 22368                           ; BSR set to: 0
 22369                           ;doprnt.c: 779: if(flag & 0x08)
 22370  005336  B792               	btfsc	sprintf@flag& (0+255),3,b
 22371  005338  D004               	goto	l15277
 22372  00533A  D23B               	goto	l15515
 22373  00533C                     l15273:
 22374                           
 22375                           ; BSR set to: 0
 22376                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22377  00533C  DA91               	call	PL60	;call to abstracted procedure
 22378                           
 22379                           ; BSR set to: 0
 22380  00533E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22381  005340  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22382  005342                     l15277:
 22383                           
 22384                           ; BSR set to: 0
 22385  005342  078B               	decf	sprintf@width& (0+255),f,b
 22386  005344  DAA2               	call	PL98	;call to abstracted procedure
 22387  005346  B4D8               	btfsc	status,2,c
 22388  005348  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22389  00534A  E101 D232          	bz	l15515
 22390  00534E  D7F6               	goto	l15273
 22391  005350                     l15279:
 22392                           
 22393                           ; BSR set to: 0
 22394                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22395  005350  5188               	movf	sprintf@ap& (0+255),w,b
 22396  005352  6ED9               	movwf	fsr2l,c
 22397  005354  6ADA               	clrf	fsr2h,c
 22398  005356  50DF               	movf	indf2,w,c
 22399  005358  6F91               	movwf	sprintf@c& (0+255),b
 22400                           
 22401                           ; BSR set to: 0
 22402  00535A  0E02               	movlw	2
 22403  00535C  2788               	addwf	sprintf@ap& (0+255),f,b
 22404  00535E                     l15283:
 22405                           
 22406                           ; BSR set to: 0
 22407                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22408  00535E  0E91               	movlw	low sprintf@c
 22409  005360  6F8D               	movwf	sprintf@_val& (0+255),b
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;doprnt.c: 815: _val._str._len = 1;
 22413  005362  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22414  005364  0E01               	movlw	1
 22415  005366  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22416                           
 22417                           ;doprnt.c: 816: goto dostring;
 22418  005368  D7AC               	goto	l15245
 22419  00536A                     l15287:
 22420                           
 22421                           ; BSR set to: 0
 22422                           ;doprnt.c: 827: flag |= 0xC0;
 22423  00536A  0EC0               	movlw	192
 22424  00536C  1392               	iorwf	sprintf@flag& (0+255),f,b
 22425                           
 22426                           ;doprnt.c: 828: break;
 22427  00536E  D015               	goto	l15293
 22428  005370                     l15291:
 22429                           
 22430                           ; BSR set to: 0
 22431  005370  DA6C               	call	PL56	;call to abstracted procedure
 22432  005372  5191               	movf	sprintf@c& (0+255),w,b
 22433                           
 22434                           ; Switch size 1, requested type "space"
 22435                           ; Number of cases is 9, Range of values is 0 to 120
 22436                           ; switch strategies available:
 22437                           ; Name         Instructions Cycles
 22438                           ; simple_byte           28    15 (average)
 22439                           ;	Chosen strategy is simple_byte
 22440  005374  E101 D220          	bz	l15517
 22441  005378  0A58               	xorlw	88	; case 88
 22442  00537A  E0A0               	bz	l15243
 22443  00537C  0A3B               	xorlw	59	; case 99
 22444  00537E  E0E8               	bz	l15279
 22445  005380  0A07               	xorlw	7	; case 100
 22446  005382  E00B               	bz	l15293
 22447  005384  0A0D               	xorlw	13	; case 105
 22448  005386  E009               	bz	l15293
 22449  005388  0A05               	xorlw	5	; case 108
 22450  00538A  E094               	bz	l15239
 22451  00538C  0A03               	xorlw	3	; case 111
 22452  00538E  E094               	bz	l15241
 22453  005390  0A1A               	xorlw	26	; case 117
 22454  005392  E0EB               	bz	l15287
 22455  005394  0A0D               	xorlw	13	; case 120
 22456  005396  E093               	bz	l1656
 22457  005398  D7E2               	goto	l15283
 22458  00539A                     l15293:
 22459                           
 22460                           ; BSR set to: 0
 22461                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22462  00539A  5192               	movf	sprintf@flag& (0+255),w,b
 22463  00539C  0BC0               	andlw	192
 22464  00539E  E120               	bnz	l1675
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;doprnt.c: 1260: {
 22468                           ;doprnt.c: 1262: if(flag & 0x10)
 22469  0053A0  A992               	btfss	sprintf@flag& (0+255),4,b
 22470  0053A2  D003               	goto	l15301
 22471                           
 22472                           ; BSR set to: 0
 22473                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22474  0053A4  5188               	movf	sprintf@ap& (0+255),w,b
 22475                           
 22476                           ; BSR set to: 0
 22477  0053A6  DA46               	call	PL52	;call to abstracted procedure
 22478  0053A8  D00D               	goto	L35
 22479  0053AA                     l15301:
 22480                           
 22481                           ; BSR set to: 0
 22482                           ;doprnt.c: 1264: else
 22483                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22484  0053AA  5188               	movf	sprintf@ap& (0+255),w,b
 22485  0053AC  6ED9               	movwf	fsr2l,c
 22486  0053AE  6ADA               	clrf	fsr2h,c
 22487  0053B0  CFDE F08D          	movff	postinc2,sprintf@_val
 22488  0053B4  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22489  0053B8  0E00               	movlw	0
 22490  0053BA  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22491  0053BC  0EFF               	movlw	-1
 22492  0053BE  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22493  0053C0  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22494                           
 22495                           ; BSR set to: 0
 22496  0053C2  0E02               	movlw	2
 22497  0053C4                     L35:
 22498  0053C4  2788               	addwf	sprintf@ap& (0+255),f,b
 22499                           
 22500                           ; BSR set to: 0
 22501                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22502  0053C6  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22503  0053C8  D01F               	goto	l15319
 22504                           
 22505                           ; BSR set to: 0
 22506                           ;doprnt.c: 1269: flag |= 0x03;
 22507  0053CA  0E03               	movlw	3
 22508  0053CC  1392               	iorwf	sprintf@flag& (0+255),f,b
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;doprnt.c: 1270: _val._val = -_val._val;
 22512  0053CE  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22513  0053D0  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22514  0053D2  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22515  0053D4  6D8D               	negf	sprintf@_val& (0+255),b
 22516  0053D6  0E00               	movlw	0
 22517  0053D8  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22518  0053DA  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22519  0053DC  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22520  0053DE  D014               	goto	l15319
 22521  0053E0                     l1675:
 22522                           
 22523                           ; BSR set to: 0
 22524                           ;doprnt.c: 1275: else
 22525                           ;doprnt.c: 1280: {
 22526                           ;doprnt.c: 1288: if(flag & 0x10)
 22527  0053E0  A992               	btfss	sprintf@flag& (0+255),4,b
 22528  0053E2  D003               	goto	l15315
 22529                           
 22530                           ; BSR set to: 0
 22531                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22532  0053E4  5188               	movf	sprintf@ap& (0+255),w,b
 22533                           
 22534                           ; BSR set to: 0
 22535  0053E6  DA26               	call	PL52	;call to abstracted procedure
 22536  0053E8  D00E               	goto	L36
 22537  0053EA                     l15315:
 22538                           
 22539                           ; BSR set to: 0
 22540                           ;doprnt.c: 1290: else
 22541                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22542  0053EA  5188               	movf	sprintf@ap& (0+255),w,b
 22543  0053EC  6ED9               	movwf	fsr2l,c
 22544  0053EE  6ADA               	clrf	fsr2h,c
 22545  0053F0  CFDE F07E          	movff	postinc2,??_sprintf
 22546  0053F4  CFDD F07F          	movff	postdec2,??_sprintf+1
 22547  0053F8  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22548  0053FC  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22549  005400  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22550  005402  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22551                           
 22552                           ; BSR set to: 0
 22553  005404  0E02               	movlw	2
 22554  005406                     L36:
 22555  005406  2788               	addwf	sprintf@ap& (0+255),f,b
 22556  005408                     l15319:
 22557                           
 22558                           ; BSR set to: 0
 22559                           ;doprnt.c: 1294: }
 22560                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22561  005408  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22562  00540A  1189               	iorwf	sprintf@prec& (0+255),w,b
 22563  00540C  E15C               	bnz	l15369
 22564                           
 22565                           ; BSR set to: 0
 22566  00540E  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22567  005410  118D               	iorwf	sprintf@_val& (0+255),w,b
 22568  005412  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22569  005414  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22570  005416  E157               	bnz	l15369
 22571                           
 22572                           ; BSR set to: 0
 22573                           ;doprnt.c: 1298: prec++;
 22574  005418  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22575  00541A  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22576  00541C  D054               	goto	l15369
 22577  00541E                     l15325:
 22578                           
 22579                           ; BSR set to: 0
 22580                           ;doprnt.c: 1309: case 0xC0:
 22581                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22582  00541E  0E01               	movlw	1
 22583  005420  6F91               	movwf	sprintf@c& (0+255),b
 22584  005422                     l15327:
 22585                           
 22586                           ; BSR set to: 0
 22587  005422  5191               	movf	sprintf@c& (0+255),w,b
 22588  005424  0A0A               	xorlw	10
 22589  005426  E058               	bz	l15371
 22590                           
 22591                           ; BSR set to: 0
 22592                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22593  005428  5191               	movf	sprintf@c& (0+255),w,b
 22594  00542A  0D04               	mullw	4
 22595  00542C  0EE0               	movlw	low _dpowers
 22596  00542E  24F3               	addwf	prodl,w,c
 22597  005430  6EF6               	movwf	tblptrl,c
 22598  005432  0E6C               	movlw	high _dpowers
 22599  005434  20F4               	addwfc	prodh,w,c
 22600  005436  6EF7               	movwf	tblptrh,c
 22601  005438  0009               	tblrd		*+
 22602  00543A  50F5               	movf	tablat,w,c
 22603  00543C  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22604  00543E  0009               	tblrd		*+
 22605  005440  50F5               	movf	tablat,w,c
 22606  005442  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22607  005444  0009               	tblrd		*+
 22608  005446  50F5               	movf	tablat,w,c
 22609  005448  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22610  00544A  0009               	tblrd		*+
 22611  00544C  50F5               	movf	tablat,w,c
 22612  00544E  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22613  005450  E343               	bnc	l15371
 22614                           
 22615                           ; BSR set to: 0
 22616  005452  2B91               	incf	sprintf@c& (0+255),f,b
 22617  005454  D7E6               	goto	l15327
 22618  005456                     l15339:
 22619                           
 22620                           ; BSR set to: 0
 22621                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22622  005456  0E01               	movlw	1
 22623  005458  6F91               	movwf	sprintf@c& (0+255),b
 22624  00545A                     l15341:
 22625                           
 22626                           ; BSR set to: 0
 22627  00545A  5191               	movf	sprintf@c& (0+255),w,b
 22628  00545C  0A08               	xorlw	8
 22629  00545E  E03C               	bz	l15371
 22630                           
 22631                           ; BSR set to: 0
 22632                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22633  005460  5191               	movf	sprintf@c& (0+255),w,b
 22634  005462  0D04               	mullw	4
 22635  005464  0E08               	movlw	low _hexpowers
 22636  005466  24F3               	addwf	prodl,w,c
 22637  005468  6EF6               	movwf	tblptrl,c
 22638  00546A  0E6D               	movlw	high _hexpowers
 22639  00546C  20F4               	addwfc	prodh,w,c
 22640  00546E  6EF7               	movwf	tblptrh,c
 22641  005470  0009               	tblrd		*+
 22642  005472  50F5               	movf	tablat,w,c
 22643  005474  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22644  005476  0009               	tblrd		*+
 22645  005478  50F5               	movf	tablat,w,c
 22646  00547A  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22647  00547C  0009               	tblrd		*+
 22648  00547E  50F5               	movf	tablat,w,c
 22649  005480  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22650  005482  0009               	tblrd		*+
 22651  005484  50F5               	movf	tablat,w,c
 22652  005486  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22653  005488  E327               	bnc	l15371
 22654                           
 22655                           ; BSR set to: 0
 22656  00548A  2B91               	incf	sprintf@c& (0+255),f,b
 22657  00548C  D7E6               	goto	l15341
 22658  00548E                     l15353:
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22662  00548E  0E01               	movlw	1
 22663  005490  6F91               	movwf	sprintf@c& (0+255),b
 22664  005492                     l15355:
 22665                           
 22666                           ; BSR set to: 0
 22667  005492  5191               	movf	sprintf@c& (0+255),w,b
 22668  005494  0A0C               	xorlw	12
 22669  005496  E020               	bz	l15371
 22670                           
 22671                           ; BSR set to: 0
 22672                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22673  005498  5191               	movf	sprintf@c& (0+255),w,b
 22674  00549A  0D04               	mullw	4
 22675  00549C  0EB0               	movlw	low _octpowers
 22676  00549E  24F3               	addwf	prodl,w,c
 22677  0054A0  6EF6               	movwf	tblptrl,c
 22678  0054A2  0E6C               	movlw	high _octpowers
 22679  0054A4  20F4               	addwfc	prodh,w,c
 22680  0054A6  6EF7               	movwf	tblptrh,c
 22681  0054A8  0009               	tblrd		*+
 22682  0054AA  50F5               	movf	tablat,w,c
 22683  0054AC  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22684  0054AE  0009               	tblrd		*+
 22685  0054B0  50F5               	movf	tablat,w,c
 22686  0054B2  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22687  0054B4  0009               	tblrd		*+
 22688  0054B6  50F5               	movf	tablat,w,c
 22689  0054B8  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22690  0054BA  0009               	tblrd		*+
 22691  0054BC  50F5               	movf	tablat,w,c
 22692  0054BE  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22693  0054C0  E30B               	bnc	l15371
 22694                           
 22695                           ; BSR set to: 0
 22696  0054C2  2B91               	incf	sprintf@c& (0+255),f,b
 22697  0054C4  D7E6               	goto	l15355
 22698  0054C6                     l15369:
 22699                           
 22700                           ; BSR set to: 0
 22701  0054C6  5192               	movf	sprintf@flag& (0+255),w,b
 22702  0054C8  0BC0               	andlw	192
 22703                           
 22704                           ; Switch size 1, requested type "space"
 22705                           ; Number of cases is 4, Range of values is 0 to 192
 22706                           ; switch strategies available:
 22707                           ; Name         Instructions Cycles
 22708                           ; simple_byte           13     7 (average)
 22709                           ;	Chosen strategy is simple_byte
 22710  0054CA  E0A9               	bz	l15325
 22711  0054CC  0A40               	xorlw	64	; case 64
 22712  0054CE  E0DF               	bz	l15353
 22713  0054D0  0AC0               	xorlw	192	; case 128
 22714  0054D2  E0C1               	bz	l15339
 22715  0054D4  0A40               	xorlw	64	; case 192
 22716  0054D6  E0A3               	bz	l15325
 22717  0054D8                     l15371:
 22718                           
 22719                           ; BSR set to: 0
 22720                           ;doprnt.c: 1346: if(c < prec)
 22721  0054D8  0E80               	movlw	128
 22722  0054DA  BF91               	btfsc	sprintf@c& (0+255),7,b
 22723  0054DC  0E7F               	movlw	127
 22724  0054DE  6F7E               	movwf	??_sprintf& (0+255),b
 22725  0054E0  5189               	movf	sprintf@prec& (0+255),w,b
 22726  0054E2  5D91               	subwf	sprintf@c& (0+255),w,b
 22727  0054E4  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22728  0054E6  0A80               	xorlw	128
 22729  0054E8  597E               	subwfb	??_sprintf& (0+255),w,b
 22730  0054EA  E203               	bc	l15375
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;doprnt.c: 1347: c = prec;
 22734  0054EC  C089  F091         	movff	sprintf@prec,sprintf@c
 22735  0054F0  D00F               	goto	l15379
 22736  0054F2                     l15375:
 22737                           
 22738                           ; BSR set to: 0
 22739                           ;doprnt.c: 1348: else if(prec < c)
 22740  0054F2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22741  0054F4  0A80               	xorlw	128
 22742  0054F6  6F7E               	movwf	??_sprintf& (0+255),b
 22743  0054F8  5191               	movf	sprintf@c& (0+255),w,b
 22744  0054FA  5D89               	subwf	sprintf@prec& (0+255),w,b
 22745  0054FC  0E80               	movlw	128
 22746  0054FE  BF91               	btfsc	sprintf@c& (0+255),7,b
 22747  005500  0E7F               	movlw	127
 22748  005502  597E               	subwfb	??_sprintf& (0+255),w,b
 22749  005504  E205               	bc	l15379
 22750                           
 22751                           ; BSR set to: 0
 22752                           ;doprnt.c: 1349: prec = c;
 22753  005506  5191               	movf	sprintf@c& (0+255),w,b
 22754  005508  6F89               	movwf	sprintf@prec& (0+255),b
 22755  00550A  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22756  00550C  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22757  00550E  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22758  005510                     l15379:
 22759                           
 22760                           ; BSR set to: 0
 22761                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22762  005510  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22763  005512  118B               	iorwf	sprintf@width& (0+255),w,b
 22764  005514  E006               	bz	l15385
 22765                           
 22766                           ; BSR set to: 0
 22767  005516  5192               	movf	sprintf@flag& (0+255),w,b
 22768  005518  0B03               	andlw	3
 22769  00551A  E003               	bz	l15385
 22770                           
 22771                           ; BSR set to: 0
 22772                           ;doprnt.c: 1353: width--;
 22773  00551C  078B               	decf	sprintf@width& (0+255),f,b
 22774  00551E  A0D8               	btfss	status,0,c
 22775  005520  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22776  005522                     l15385:
 22777                           
 22778                           ; BSR set to: 0
 22779                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22780  005522  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22781  005524  D010               	goto	l15391
 22782                           
 22783                           ; BSR set to: 0
 22784                           ;doprnt.c: 1356: if(width > prec)
 22785  005526  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22786  005528  0A80               	xorlw	128
 22787  00552A  6F7E               	movwf	??_sprintf& (0+255),b
 22788  00552C  518B               	movf	sprintf@width& (0+255),w,b
 22789  00552E  5D89               	subwf	sprintf@prec& (0+255),w,b
 22790  005530  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22791  005532  0A80               	xorlw	128
 22792  005534  597E               	subwfb	??_sprintf& (0+255),w,b
 22793  005536  E205               	bc	l1703
 22794                           
 22795                           ; BSR set to: 0
 22796                           ;doprnt.c: 1357: width -= prec;
 22797  005538  5189               	movf	sprintf@prec& (0+255),w,b
 22798  00553A  5F8B               	subwf	sprintf@width& (0+255),f,b
 22799  00553C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22800  00553E  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22801  005540  D002               	goto	l15391
 22802  005542                     l1703:
 22803                           
 22804                           ; BSR set to: 0
 22805                           ;doprnt.c: 1358: else
 22806                           ;doprnt.c: 1359: width = 0;
 22807  005542  6B8B               	clrf	sprintf@width& (0+255),b
 22808  005544  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22809  005546                     l15391:
 22810                           
 22811                           ; BSR set to: 0
 22812                           ;doprnt.c: 1360: }
 22813                           ;doprnt.c: 1364: if((flag & (
 22814                           ;doprnt.c: 1366: 0x04|
 22815                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22816  005546  0EC4               	movlw	196
 22817  005548  D94D               	call	PL14	;call to abstracted procedure
 22818  00554A  0E40               	movlw	64
 22819  00554C  B4D8               	btfsc	status,2,c
 22820  00554E  197E               	xorwf	??_sprintf& (0+255),w,b
 22821  005550  E107               	bnz	l15397
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;doprnt.c: 1369: if(width)
 22825  005552  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22826  005554  118B               	iorwf	sprintf@width& (0+255),w,b
 22827  005556  E018               	bz	l15403
 22828                           
 22829                           ; BSR set to: 0
 22830                           ;doprnt.c: 1370: width--;
 22831  005558  078B               	decf	sprintf@width& (0+255),f,b
 22832  00555A  A0D8               	btfss	status,0,c
 22833  00555C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22834  00555E  D014               	goto	l15403
 22835  005560                     l15397:
 22836                           
 22837                           ; BSR set to: 0
 22838                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22839  005560  0EC0               	movlw	192
 22840  005562  D940               	call	PL14	;call to abstracted procedure
 22841  005564  0E80               	movlw	128
 22842  005566  B4D8               	btfsc	status,2,c
 22843  005568  197E               	xorwf	??_sprintf& (0+255),w,b
 22844  00556A  E10E               	bnz	l15403
 22845                           
 22846                           ; BSR set to: 0
 22847                           ;doprnt.c: 1379: if(width > 2)
 22848  00556C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22849  00556E  0A80               	xorlw	128
 22850  005570  0F80               	addlw	-128
 22851  005572  0E03               	movlw	3
 22852  005574  B4D8               	btfsc	status,2,c
 22853  005576  5D8B               	subwf	sprintf@width& (0+255),w,b
 22854  005578  E305               	bnc	l1709
 22855                           
 22856                           ; BSR set to: 0
 22857                           ;doprnt.c: 1380: width -= 2;
 22858  00557A  0EFE               	movlw	254
 22859  00557C  278B               	addwf	sprintf@width& (0+255),f,b
 22860  00557E  0EFF               	movlw	255
 22861  005580  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22862  005582  D002               	goto	l15403
 22863  005584                     l1709:
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;doprnt.c: 1381: else
 22867                           ;doprnt.c: 1382: width = 0;
 22868  005584  6B8B               	clrf	sprintf@width& (0+255),b
 22869  005586  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22870  005588                     l15403:
 22871                           
 22872                           ; BSR set to: 0
 22873                           ;doprnt.c: 1383: }
 22874                           ;doprnt.c: 1388: if(width > c)
 22875  005588  0E80               	movlw	128
 22876  00558A  BF91               	btfsc	sprintf@c& (0+255),7,b
 22877  00558C  0E7F               	movlw	127
 22878  00558E  6F7E               	movwf	??_sprintf& (0+255),b
 22879  005590  518B               	movf	sprintf@width& (0+255),w,b
 22880  005592  5D91               	subwf	sprintf@c& (0+255),w,b
 22881  005594  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22882  005596  0A80               	xorlw	128
 22883  005598  597E               	subwfb	??_sprintf& (0+255),w,b
 22884  00559A  E207               	bc	l1711
 22885                           
 22886                           ; BSR set to: 0
 22887                           ;doprnt.c: 1389: width -= c;
 22888  00559C  5191               	movf	sprintf@c& (0+255),w,b
 22889  00559E  5F8B               	subwf	sprintf@width& (0+255),f,b
 22890  0055A0  0E00               	movlw	0
 22891  0055A2  BF91               	btfsc	sprintf@c& (0+255),7,b
 22892  0055A4  0EFF               	movlw	255
 22893  0055A6  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22894  0055A8  D002               	goto	l1712
 22895  0055AA                     l1711:
 22896                           
 22897                           ; BSR set to: 0
 22898                           ;doprnt.c: 1390: else
 22899                           ;doprnt.c: 1391: width = 0;
 22900  0055AA  6B8B               	clrf	sprintf@width& (0+255),b
 22901  0055AC  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22902  0055AE                     l1712:
 22903                           
 22904                           ; BSR set to: 0
 22905                           ;doprnt.c: 1394: if(flag & 0x04) {
 22906  0055AE  A592               	btfss	sprintf@flag& (0+255),2,b
 22907  0055B0  D03C               	goto	l15441
 22908                           
 22909                           ; BSR set to: 0
 22910                           ;doprnt.c: 1399: if(flag & 0x03)
 22911  0055B2  5192               	movf	sprintf@flag& (0+255),w,b
 22912  0055B4  0B03               	andlw	3
 22913  0055B6  E009               	bz	l1714
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22917  0055B8  C076  FFD9         	movff	sprintf@sp,fsr2l
 22918  0055BC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22919  0055C0  0E2D               	movlw	45
 22920  0055C2  6EDF               	movwf	indf2,c
 22921  0055C4                     l15411:
 22922                           
 22923                           ; BSR set to: 0
 22924  0055C4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22925  0055C6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22926  0055C8  D022               	goto	l15433
 22927  0055CA                     l1714:
 22928                           
 22929                           ; BSR set to: 0
 22930                           ;doprnt.c: 1403: else
 22931                           ;doprnt.c: 1406: if(flag & 0x01)
 22932  0055CA  A192               	btfss	sprintf@flag& (0+255),0,b
 22933  0055CC  D006               	goto	l15417
 22934                           
 22935                           ; BSR set to: 0
 22936                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22937  0055CE  C076  FFD9         	movff	sprintf@sp,fsr2l
 22938  0055D2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22939  0055D6  0E20               	movlw	32
 22940  0055D8  D7F4               	goto	L37
 22941  0055DA                     l15417:
 22942                           
 22943                           ; BSR set to: 0
 22944                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22945  0055DA  0EC0               	movlw	192
 22946  0055DC  D903               	call	PL14	;call to abstracted procedure
 22947  0055DE  0E80               	movlw	128
 22948  0055E0  B4D8               	btfsc	status,2,c
 22949  0055E2  197E               	xorwf	??_sprintf& (0+255),w,b
 22950  0055E4  E114               	bnz	l15433
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22954  0055E6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22955  0055EA  D94A               	call	PL86	;call to abstracted procedure
 22956                           
 22957                           ; BSR set to: 0
 22958  0055EC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22959  0055EE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22960                           
 22961                           ; BSR set to: 0
 22962                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22963  0055F0  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22964  0055F2  D003               	goto	l15427
 22965                           
 22966                           ; BSR set to: 0
 22967  0055F4  6B83               	clrf	(_sprintf$2024+1)& (0+255),b
 22968  0055F6  0E78               	movlw	120
 22969  0055F8  D002               	goto	L38
 22970  0055FA                     l15427:
 22971                           
 22972                           ; BSR set to: 0
 22973  0055FA  6B83               	clrf	(_sprintf$2024+1)& (0+255),b
 22974  0055FC  0E58               	movlw	88
 22975  0055FE                     L38:
 22976  0055FE  6F82               	movwf	_sprintf$2024& (0+255),b
 22977                           
 22978                           ; BSR set to: 0
 22979  005600  C076  FFD9         	movff	sprintf@sp,fsr2l
 22980  005604  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22981  005608  C082  FFDF         	movff	_sprintf$2024,indf2
 22982  00560C  D7DB               	goto	l15411
 22983  00560E                     l15433:
 22984                           
 22985                           ; BSR set to: 0
 22986                           ;doprnt.c: 1419: }
 22987                           ;doprnt.c: 1422: if(width)
 22988  00560E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22989  005610  118B               	iorwf	sprintf@width& (0+255),w,b
 22990  005612  E101 D0B9          	bz	l15505
 22991                           
 22992                           ; BSR set to: 0
 22993                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22994  005616  C076  FFD9         	movff	sprintf@sp,fsr2l
 22995  00561A  D932               	call	PL86	;call to abstracted procedure
 22996                           
 22997                           ; BSR set to: 0
 22998  00561C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22999  00561E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23000                           
 23001                           ; BSR set to: 0
 23002                           ;doprnt.c: 1425: while(--width);
 23003  005620  078B               	decf	sprintf@width& (0+255),f,b
 23004  005622  A0D8               	btfss	status,0,c
 23005  005624  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23006  005626  0100               	movlb	0	; () banked
 23007  005628  D7F2               	goto	l15433
 23008  00562A                     l15441:
 23009                           
 23010                           ; BSR set to: 0
 23011                           ;doprnt.c: 1429: {
 23012                           ;doprnt.c: 1431: if(width
 23013                           ;doprnt.c: 1433: && !(flag & 0x08)
 23014                           ;doprnt.c: 1435: )
 23015  00562A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23016  00562C  118B               	iorwf	sprintf@width& (0+255),w,b
 23017  00562E  A4D8               	btfss	status,2,c
 23018                           
 23019                           ; BSR set to: 0
 23020  005630  B792               	btfsc	sprintf@flag& (0+255),3,b
 23021  005632  D004               	goto	l15451
 23022  005634                     l15445:
 23023                           
 23024                           ; BSR set to: 0
 23025                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23026  005634  C076  FFD9         	movff	sprintf@sp,fsr2l
 23027                           
 23028                           ; BSR set to: 0
 23029                           
 23030                           ; BSR set to: 0
 23031                           ;doprnt.c: 1438: while(--width);
 23032  005638  D8F0               	call	PL36	;call to abstracted procedure
 23033  00563A  E1FC               	bnz	l15445
 23034  00563C                     l15451:
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;doprnt.c: 1445: if(flag & 0x03)
 23038  00563C  5192               	movf	sprintf@flag& (0+255),w,b
 23039  00563E  0B03               	andlw	3
 23040  005640  E009               	bz	l1730
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23044  005642  C076  FFD9         	movff	sprintf@sp,fsr2l
 23045  005646  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23046  00564A  0E2D               	movlw	45
 23047  00564C  6EDF               	movwf	indf2,c
 23048                           
 23049                           ; BSR set to: 0
 23050  00564E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23051  005650  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23052  005652  D008               	goto	l15461
 23053  005654                     l1730:
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;doprnt.c: 1450: else if(flag & 0x01)
 23057  005654  A192               	btfss	sprintf@flag& (0+255),0,b
 23058  005656  D006               	goto	l15461
 23059                           
 23060                           ; BSR set to: 0
 23061                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23062  005658  C076  FFD9         	movff	sprintf@sp,fsr2l
 23063  00565C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23064  005660  0E20               	movlw	32
 23065  005662  D7F4               	goto	L39
 23066  005664                     l15461:
 23067                           
 23068                           ; BSR set to: 0
 23069                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23070  005664  0EC0               	movlw	192
 23071  005666  D8BE               	call	PL14	;call to abstracted procedure
 23072  005668  0E40               	movlw	64
 23073  00566A  B4D8               	btfsc	status,2,c
 23074  00566C  197E               	xorwf	??_sprintf& (0+255),w,b
 23075  00566E  E106               	bnz	l15467
 23076                           
 23077                           ; BSR set to: 0
 23078                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23079  005670  C076  FFD9         	movff	sprintf@sp,fsr2l
 23080  005674  D905               	call	PL86	;call to abstracted procedure
 23081  005676                     l15465:
 23082                           
 23083                           ; BSR set to: 0
 23084  005676  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23085  005678  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23086  00567A  D086               	goto	l15505
 23087  00567C                     l15467:
 23088                           
 23089                           ; BSR set to: 0
 23090                           ;doprnt.c: 1457: else
 23091                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23092  00567C  0EC0               	movlw	192
 23093  00567E  D8B2               	call	PL14	;call to abstracted procedure
 23094  005680  0E80               	movlw	128
 23095  005682  B4D8               	btfsc	status,2,c
 23096  005684  197E               	xorwf	??_sprintf& (0+255),w,b
 23097  005686  E001 D07F          	bnz	l15505
 23098                           
 23099                           ; BSR set to: 0
 23100                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23101  00568A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23102  00568E  D8F8               	call	PL86	;call to abstracted procedure
 23103                           
 23104                           ; BSR set to: 0
 23105  005690  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23106  005692  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23107                           
 23108                           ; BSR set to: 0
 23109                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23110  005694  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23111  005696  D003               	goto	l15477
 23112                           
 23113                           ; BSR set to: 0
 23114  005698  6B85               	clrf	(_sprintf$2025+1)& (0+255),b
 23115  00569A  0E78               	movlw	120
 23116  00569C  D002               	goto	L40
 23117  00569E                     l15477:
 23118                           
 23119                           ; BSR set to: 0
 23120  00569E  6B85               	clrf	(_sprintf$2025+1)& (0+255),b
 23121  0056A0  0E58               	movlw	88
 23122  0056A2                     L40:
 23123  0056A2  6F84               	movwf	_sprintf$2025& (0+255),b
 23124                           
 23125                           ; BSR set to: 0
 23126  0056A4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23127  0056A8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23128  0056AC  C084  FFDF         	movff	_sprintf$2025,indf2
 23129  0056B0  D7E2               	goto	l15465
 23130  0056B2                     l15483:
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;doprnt.c: 1493: case 0xC0:
 23134                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23135  0056B2  C089  F07E         	movff	sprintf@prec,??_sprintf
 23136  0056B6  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23137  0056BA  90D8               	bcf	status,0,c
 23138  0056BC  377E               	rlcf	??_sprintf& (0+255),f,b
 23139  0056BE  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23140  0056C0  90D8               	bcf	status,0,c
 23141  0056C2  377E               	rlcf	??_sprintf& (0+255),f,b
 23142  0056C4  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23143  0056C6  0EE0               	movlw	low _dpowers
 23144  0056C8  257E               	addwf	??_sprintf& (0+255),w,b
 23145  0056CA  6EF6               	movwf	tblptrl,c
 23146  0056CC  0E6C               	movlw	high _dpowers
 23147  0056CE  D87B               	call	PL10	;call to abstracted procedure
 23148  0056D0  C08D  F060         	movff	sprintf@_val,?___lldiv
 23149  0056D4  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23150  0056D8  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23151  0056DC  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23152  0056E0  EC57  F010         	call	___lldiv	;wreg free
 23153  0056E4  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23154  0056E8  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23155  0056EC  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23156  0056F0  C060  F06D         	movff	?___lldiv,?___llmod
 23157  0056F4  0E0A               	movlw	10
 23158  0056F6  6F71               	movwf	(?___llmod+4)& (0+255),b
 23159  0056F8  0E00               	movlw	0
 23160  0056FA  6B72               	clrf	(?___llmod+5)& (0+255),b
 23161  0056FC  6B73               	clrf	(?___llmod+6)& (0+255),b
 23162  0056FE  6B74               	clrf	(?___llmod+7)& (0+255),b
 23163  005700  ECE3  F00E         	call	___llmod	;wreg free
 23164  005704  516D               	movf	?___llmod& (0+255),w,b
 23165  005706  D02D               	goto	L41
 23166  005708                     l15485:
 23167                           
 23168                           ; BSR set to: 0
 23169                           ;doprnt.c: 1506: {
 23170                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23171  005708  D875               	call	PL18	;call to abstracted procedure
 23172  00570A  0E08               	movlw	low _hexpowers
 23173  00570C  257E               	addwf	??_sprintf& (0+255),w,b
 23174  00570E  6EF6               	movwf	tblptrl,c
 23175  005710  0E6D               	movlw	high _hexpowers
 23176  005712  D859               	call	PL10	;call to abstracted procedure
 23177  005714  EC57  F010         	call	___lldiv	;wreg free
 23178  005718  5160               	movf	?___lldiv& (0+255),w,b
 23179  00571A  0B0F               	andlw	15
 23180  00571C  6F81               	movwf	sprintf@idx& (0+255),b
 23181                           
 23182                           ; BSR set to: 0
 23183                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23184  00571E  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23185  005720  D004               	goto	l15491
 23186                           
 23187                           ; BSR set to: 0
 23188  005722  0E7B               	movlw	high STR_264
 23189  005724  6F87               	movwf	(_sprintf$2031+1)& (0+255),b
 23190  005726  0E2D               	movlw	low STR_264
 23191  005728  D003               	goto	L42
 23192  00572A                     l15491:
 23193                           
 23194                           ; BSR set to: 0
 23195  00572A  0E7B               	movlw	high STR_263
 23196  00572C  6F87               	movwf	(_sprintf$2031+1)& (0+255),b
 23197  00572E  0E1C               	movlw	low STR_263
 23198  005730                     L42:
 23199  005730  6F86               	movwf	_sprintf$2031& (0+255),b
 23200                           
 23201                           ; BSR set to: 0
 23202  005732  5181               	movf	sprintf@idx& (0+255),w,b
 23203  005734  2586               	addwf	_sprintf$2031& (0+255),w,b
 23204  005736  6F7E               	movwf	??_sprintf& (0+255),b
 23205  005738  0E00               	movlw	0
 23206  00573A  2187               	addwfc	(_sprintf$2031+1)& (0+255),w,b
 23207  00573C  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23208  00573E  C07E  FFF6         	movff	??_sprintf,tblptrl
 23209  005742  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23210  005746  0008               	tblrd		*
 23211  005748  CFF5 F091          	movff	tablat,sprintf@c
 23212                           
 23213                           ;doprnt.c: 1515: }
 23214                           ;doprnt.c: 1517: break;
 23215  00574C  D016               	goto	l15501
 23216  00574E                     l15495:
 23217                           
 23218                           ; BSR set to: 0
 23219                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23220  00574E  D852               	call	PL18	;call to abstracted procedure
 23221  005750  0EB0               	movlw	low _octpowers
 23222  005752  257E               	addwf	??_sprintf& (0+255),w,b
 23223  005754  6EF6               	movwf	tblptrl,c
 23224  005756  0E6C               	movlw	high _octpowers
 23225  005758  D836               	call	PL10	;call to abstracted procedure
 23226  00575A  EC57  F010         	call	___lldiv	;wreg free
 23227  00575E  5160               	movf	?___lldiv& (0+255),w,b
 23228  005760  0B07               	andlw	7
 23229  005762                     L41:
 23230  005762  0F30               	addlw	48
 23231  005764  6F91               	movwf	sprintf@c& (0+255),b
 23232                           
 23233                           ;doprnt.c: 1527: break;
 23234  005766  D009               	goto	l15501
 23235  005768                     l15499:
 23236                           
 23237                           ; BSR set to: 0
 23238  005768  5192               	movf	sprintf@flag& (0+255),w,b
 23239  00576A  0BC0               	andlw	192
 23240                           
 23241                           ; Switch size 1, requested type "space"
 23242                           ; Number of cases is 4, Range of values is 0 to 192
 23243                           ; switch strategies available:
 23244                           ; Name         Instructions Cycles
 23245                           ; simple_byte           13     7 (average)
 23246                           ;	Chosen strategy is simple_byte
 23247  00576C  E0A2               	bz	l15483
 23248  00576E  0A40               	xorlw	64	; case 64
 23249  005770  E0EE               	bz	l15495
 23250  005772  0AC0               	xorlw	192	; case 128
 23251  005774  E0C9               	bz	l15485
 23252  005776  0A40               	xorlw	64	; case 192
 23253  005778  E09C               	bz	l15483
 23254  00577A                     l15501:
 23255                           
 23256                           ; BSR set to: 0
 23257                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23258  00577A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23259  00577E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23260  005782  C091  FFDF         	movff	sprintf@c,indf2
 23261  005786  D777               	goto	l15465
 23262  005788                     l15505:
 23263                           
 23264                           ; BSR set to: 0
 23265  005788  0789               	decf	sprintf@prec& (0+255),f,b
 23266  00578A  A0D8               	btfss	status,0,c
 23267  00578C  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23268  00578E  0100               	movlb	0	; () banked
 23269  005790  2989               	incf	sprintf@prec& (0+255),w,b
 23270  005792  B4D8               	btfsc	status,2,c
 23271  005794  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23272  005796  E1E8               	bnz	l15499
 23273                           
 23274                           ; BSR set to: 0
 23275                           ;doprnt.c: 1532: }
 23276                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23277  005798  A792               	btfss	sprintf@flag& (0+255),3,b
 23278  00579A  D00B               	goto	l15515
 23279                           
 23280                           ; BSR set to: 0
 23281  00579C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23282  00579E  0A80               	xorlw	128
 23283  0057A0  0F80               	addlw	-128
 23284  0057A2  0E01               	movlw	1
 23285  0057A4  B4D8               	btfsc	status,2,c
 23286  0057A6  5D8B               	subwf	sprintf@width& (0+255),w,b
 23287  0057A8  E304               	bnc	l15515
 23288  0057AA                     l15509:
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23292  0057AA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23293                           
 23294                           ; BSR set to: 0
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;doprnt.c: 1538: while(--width);
 23298  0057AE  D835               	call	PL36	;call to abstracted procedure
 23299  0057B0  E1FC               	bnz	l15509
 23300  0057B2                     l15515:
 23301                           
 23302                           ; BSR set to: 0
 23303  0057B2  D84B               	call	PL56	;call to abstracted procedure
 23304  0057B4  6791               	tstfsz	sprintf@c& (0+255),b
 23305  0057B6  D4D1               	goto	l15181
 23306  0057B8                     l15517:
 23307                           
 23308                           ; BSR set to: 0
 23309                           ;doprnt.c: 1545: *sp = 0;
 23310  0057B8  C076  FFD9         	movff	sprintf@sp,fsr2l
 23311  0057BC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23312  0057C0  0E00               	movlw	0
 23313  0057C2  6EDF               	movwf	indf2,c
 23314                           
 23315                           ; BSR set to: 0
 23316  0057C4  0C00               	retlw	0
 23317  0057C6                     __end_of_sprintf:
 23318                           	opt stack 0
 23319  0057C6                     PL10:
 23320                           	opt stack 24
 23321  0057C6  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23322  0057C8  6EF7               	movwf	tblptrh,c
 23323  0057CA  0009               	tblrd		*+
 23324  0057CC  CFF5 F064          	movff	tablat,?___lldiv+4
 23325  0057D0  0009               	tblrd		*+
 23326  0057D2  CFF5 F065          	movff	tablat,?___lldiv+5
 23327  0057D6  0009               	tblrd		*+
 23328  0057D8  CFF5 F066          	movff	tablat,?___lldiv+6
 23329  0057DC  000A               	tblrd		*-
 23330  0057DE  CFF5 F067          	movff	tablat,?___lldiv+7
 23331  0057E2  0012               	return	
 23332  0057E4                     __end_ofPL10:
 23333                           	opt stack 0
 23334  0057E4                     PL14:
 23335                           	opt stack 24
 23336  0057E4  1592               	andwf	sprintf@flag& (0+255),w,b
 23337  0057E6  6F7E               	movwf	??_sprintf& (0+255),b
 23338  0057E8  0E08               	movlw	8
 23339  0057EA  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23340  0057EC  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23341  0057EE  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23342  0057F0  0A08               	xorlw	8
 23343  0057F2  0012               	return	
 23344  0057F4                     __end_ofPL14:
 23345                           	opt stack 0
 23346  0057F4                     PL18:
 23347                           	opt stack 24
 23348  0057F4  C08D  F060         	movff	sprintf@_val,?___lldiv
 23349  0057F8  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23350  0057FC  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23351  005800  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23352  005804  C089  F07E         	movff	sprintf@prec,??_sprintf
 23353  005808  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23354  00580C  90D8               	bcf	status,0,c
 23355  00580E  377E               	rlcf	??_sprintf& (0+255),f,b
 23356  005810  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23357  005812  90D8               	bcf	status,0,c
 23358  005814  377E               	rlcf	??_sprintf& (0+255),f,b
 23359  005816  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23360  005818  0012               	return	
 23361  00581A                     __end_ofPL18:
 23362                           	opt stack 0
 23363  00581A                     PL36:
 23364                           	opt stack 24
 23365  00581A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23366  00581E  0E20               	movlw	32
 23367  005820  6EDF               	movwf	indf2,c
 23368  005822  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23369  005824  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23370  005826  078B               	decf	sprintf@width& (0+255),f,b
 23371  005828  A0D8               	btfss	status,0,c
 23372  00582A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23373  00582C  0100               	movlb	0	; () banked
 23374  00582E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23375  005830  118B               	iorwf	sprintf@width& (0+255),w,b
 23376  005832  0012               	return	
 23377  005834                     __end_ofPL36:
 23378                           	opt stack 0
 23379  005834                     PL52:
 23380                           	opt stack 24
 23381  005834  6ED9               	movwf	fsr2l,c
 23382  005836  6ADA               	clrf	fsr2h,c
 23383  005838  CFDE F08D          	movff	postinc2,sprintf@_val
 23384  00583C  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23385  005840  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23386  005844  CFDE F090          	movff	postinc2,sprintf@_val+3
 23387  005848  0C04               	retlw	4
 23388  00584A                     __end_ofPL52:
 23389                           	opt stack 0
 23390  00584A                     PL56:
 23391                           	opt stack 24
 23392  00584A  C078  FFF6         	movff	sprintf@f,tblptrl
 23393  00584E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23394  005852  4B78               	infsnz	sprintf@f& (0+255),f,b
 23395  005854  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23396  005856  0008               	tblrd		*
 23397  005858  CFF5 F091          	movff	tablat,sprintf@c
 23398  00585C  0100               	movlb	0	; () banked
 23399  00585E  0012               	return	
 23400  005860                     __end_ofPL56:
 23401                           	opt stack 0
 23402  005860                     PL60:
 23403                           	opt stack 24
 23404  005860  C076  FFD9         	movff	sprintf@sp,fsr2l
 23405  005864  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23406  005868  0E20               	movlw	32
 23407  00586A  6EDF               	movwf	indf2,c
 23408  00586C  0C20               	retlw	32
 23409  00586E                     __end_ofPL60:
 23410                           	opt stack 0
 23411  00586E                     PL76:
 23412                           	opt stack 24
 23413  00586E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23414  005870  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23415  005872  C078  FFF6         	movff	sprintf@f,tblptrl
 23416  005876  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23417  00587A  0008               	tblrd		*
 23418  00587C  50F5               	movf	tablat,w,c
 23419  00587E  0012               	return	
 23420  005880                     __end_ofPL76:
 23421                           	opt stack 0
 23422  005880                     PL86:
 23423                           	opt stack 24
 23424  005880  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23425  005884  0E30               	movlw	48
 23426  005886  6EDF               	movwf	indf2,c
 23427  005888  0C30               	retlw	48
 23428  00588A                     __end_ofPL86:
 23429                           	opt stack 0
 23430  00588A                     PL98:
 23431                           	opt stack 24
 23432  00588A  A0D8               	btfss	status,0,c
 23433  00588C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23434  00588E  0100               	movlb	0	; () banked
 23435  005890  298B               	incf	sprintf@width& (0+255),w,b
 23436  005892  0012               	return	
 23437  005894                     __end_ofPL98:
 23438                           	opt stack 0
 23439                           tblptru	equ	0xFF8
 23440                           tblptrh	equ	0xFF7
 23441                           tblptrl	equ	0xFF6
 23442                           tablat	equ	0xFF5
 23443                           prodh	equ	0xFF4
 23444                           prodl	equ	0xFF3
 23445                           intcon	equ	0xFF2
 23446                           indf0	equ	0xFEF
 23447                           postinc0	equ	0xFEE
 23448                           fsr0h	equ	0xFEA
 23449                           fsr0l	equ	0xFE9
 23450                           wreg	equ	0xFE8
 23451                           indf1	equ	0xFE7
 23452                           postinc1	equ	0xFE6
 23453                           postdec1	equ	0xFE5
 23454                           fsr1h	equ	0xFE2
 23455                           fsr1l	equ	0xFE1
 23456                           indf2	equ	0xFDF
 23457                           postinc2	equ	0xFDE
 23458                           postdec2	equ	0xFDD
 23459                           plusw2	equ	0xFDB
 23460                           fsr2h	equ	0xFDA
 23461                           fsr2l	equ	0xFD9
 23462                           status	equ	0xFD8
 23463                           
 23464 ;; *************** function ___wmul *****************
 23465 ;; Defined at:
 23466 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23467 ;; Parameters:    Size  Location     Type
 23468 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23469 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23470 ;; Auto vars:     Size  Location     Type
 23471 ;;  product         2    4[BANK0 ] unsigned int 
 23472 ;; Return value:  Size  Location     Type
 23473 ;;                  2    0[BANK0 ] unsigned int 
 23474 ;; Registers used:
 23475 ;;		wreg, status,2, status,0, prodl, prodh
 23476 ;; Tracked objects:
 23477 ;;		On entry : F/0
 23478 ;;		On exit  : F/0
 23479 ;;		Unchanged: 0/0
 23480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23481 ;;      Params:         0       4       0       0       0       0       0
 23482 ;;      Locals:         0       2       0       0       0       0       0
 23483 ;;      Temps:          0       0       0       0       0       0       0
 23484 ;;      Totals:         0       6       0       0       0       0       0
 23485 ;;Total ram usage:        6 bytes
 23486 ;; Hardware stack levels used:    1
 23487 ;; Hardware stack levels required when called:    3
 23488 ;; This function calls:
 23489 ;;		Nothing
 23490 ;; This function is called by:
 23491 ;;		_sprintf
 23492 ;;		_atoi
 23493 ;; This function uses a non-reentrant model
 23494 ;;
 23495                           
 23496                           	psect	text57
 23497  00181A                     __ptext57:
 23498                           	opt stack 0
 23499  00181A                     ___wmul:
 23500                           	opt stack 24
 23501                           
 23502                           ; BSR set to: 0
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;incstack = 0
 23506                           ;incstack = 0
 23507  00181A  5160               	movf	___wmul@multiplier& (0+255),w,b
 23508  00181C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23509  00181E  CFF3 F064          	movff	prodl,___wmul@product
 23510  001822  CFF4 F065          	movff	prodh,___wmul@product+1
 23511  001826  5160               	movf	___wmul@multiplier& (0+255),w,b
 23512  001828  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23513  00182A  D808               	call	PL88	;call to abstracted procedure
 23514  00182C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23515  00182E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23516  001830  D805               	call	PL88	;call to abstracted procedure
 23517                           
 23518                           ; BSR set to: 0
 23519  001832  C064  F060         	movff	___wmul@product,?___wmul
 23520  001836  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23521                           
 23522                           ; BSR set to: 0
 23523  00183A  0012               	return	
 23524  00183C                     __end_of___wmul:
 23525                           	opt stack 0
 23526  00183C                     PL88:
 23527                           	opt stack 24
 23528  00183C  CFF3 FFF4          	movff	prodl,prodh
 23529  001840  6AF3               	clrf	prodl,c
 23530  001842  50F3               	movf	prodl,w,c
 23531  001844  2764               	addwf	___wmul@product& (0+255),f,b
 23532  001846  50F4               	movf	prodh,w,c
 23533  001848  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23534  00184A  0012               	return	
 23535  00184C                     __end_ofPL88:
 23536                           	opt stack 0
 23537                           tblptru	equ	0xFF8
 23538                           tblptrh	equ	0xFF7
 23539                           tblptrl	equ	0xFF6
 23540                           tablat	equ	0xFF5
 23541                           prodh	equ	0xFF4
 23542                           prodl	equ	0xFF3
 23543                           intcon	equ	0xFF2
 23544                           indf0	equ	0xFEF
 23545                           postinc0	equ	0xFEE
 23546                           fsr0h	equ	0xFEA
 23547                           fsr0l	equ	0xFE9
 23548                           wreg	equ	0xFE8
 23549                           indf1	equ	0xFE7
 23550                           postinc1	equ	0xFE6
 23551                           postdec1	equ	0xFE5
 23552                           fsr1h	equ	0xFE2
 23553                           fsr1l	equ	0xFE1
 23554                           indf2	equ	0xFDF
 23555                           postinc2	equ	0xFDE
 23556                           postdec2	equ	0xFDD
 23557                           plusw2	equ	0xFDB
 23558                           fsr2h	equ	0xFDA
 23559                           fsr2l	equ	0xFD9
 23560                           status	equ	0xFD8
 23561                           
 23562 ;; *************** function ___llmod *****************
 23563 ;; Defined at:
 23564 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23565 ;; Parameters:    Size  Location     Type
 23566 ;;  dividend        4   13[BANK0 ] unsigned long 
 23567 ;;  divisor         4   17[BANK0 ] unsigned long 
 23568 ;; Auto vars:     Size  Location     Type
 23569 ;;  counter         1   21[BANK0 ] unsigned char 
 23570 ;; Return value:  Size  Location     Type
 23571 ;;                  4   13[BANK0 ] unsigned long 
 23572 ;; Registers used:
 23573 ;;		wreg, status,2, status,0
 23574 ;; Tracked objects:
 23575 ;;		On entry : F/0
 23576 ;;		On exit  : F/0
 23577 ;;		Unchanged: 0/0
 23578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23579 ;;      Params:         0       8       0       0       0       0       0
 23580 ;;      Locals:         0       1       0       0       0       0       0
 23581 ;;      Temps:          0       0       0       0       0       0       0
 23582 ;;      Totals:         0       9       0       0       0       0       0
 23583 ;;Total ram usage:        9 bytes
 23584 ;; Hardware stack levels used:    1
 23585 ;; Hardware stack levels required when called:    3
 23586 ;; This function calls:
 23587 ;;		Nothing
 23588 ;; This function is called by:
 23589 ;;		_sprintf
 23590 ;;		_ultoa
 23591 ;; This function uses a non-reentrant model
 23592 ;;
 23593                           
 23594                           	psect	text58
 23595  001DC6                     __ptext58:
 23596                           	opt stack 0
 23597  001DC6                     ___llmod:
 23598                           	opt stack 23
 23599                           
 23600                           ; BSR set to: 0
 23601                           
 23602                           ; BSR set to: 0
 23603                           ;incstack = 0
 23604                           ;incstack = 0
 23605  001DC6  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23606  001DC8  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23607  001DCA  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23608  001DCC  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23609  001DCE  E023               	bz	l2378
 23610                           
 23611                           ; BSR set to: 0
 23612  001DD0  0E01               	movlw	1
 23613  001DD2  6F75               	movwf	___llmod@counter& (0+255),b
 23614  001DD4  D006               	goto	l16363
 23615  001DD6                     l16361:
 23616                           
 23617                           ; BSR set to: 0
 23618  001DD6  90D8               	bcf	status,0,c
 23619  001DD8  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23620  001DDA  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23621  001DDC  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23622  001DDE  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23623  001DE0  2B75               	incf	___llmod@counter& (0+255),f,b
 23624  001DE2                     l16363:
 23625                           
 23626                           ; BSR set to: 0
 23627  001DE2  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23628  001DE4  D7F8               	goto	l16361
 23629  001DE6                     l16365:
 23630                           
 23631                           ; BSR set to: 0
 23632  001DE6  5171               	movf	___llmod@divisor& (0+255),w,b
 23633  001DE8  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23634  001DEA  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23635  001DEC  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23636  001DEE  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23637  001DF0  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23638  001DF2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23639  001DF4  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23640  001DF6  E308               	bnc	l16369
 23641                           
 23642                           ; BSR set to: 0
 23643  001DF8  5171               	movf	___llmod@divisor& (0+255),w,b
 23644  001DFA  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23645  001DFC  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23646  001DFE  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23647  001E00  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23648  001E02  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23649  001E04  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23650  001E06  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23651  001E08                     l16369:
 23652                           
 23653                           ; BSR set to: 0
 23654  001E08  90D8               	bcf	status,0,c
 23655  001E0A  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23656  001E0C  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23657  001E0E  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23658  001E10  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23659                           
 23660                           ; BSR set to: 0
 23661  001E12  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23662  001E14  D7E8               	goto	l16365
 23663  001E16                     l2378:
 23664                           
 23665                           ; BSR set to: 0
 23666  001E16  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23667  001E1A  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23668  001E1E  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23669  001E22  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23670                           
 23671                           ; BSR set to: 0
 23672  001E26  0012               	return	
 23673  001E28                     __end_of___llmod:
 23674                           	opt stack 0
 23675                           tblptru	equ	0xFF8
 23676                           tblptrh	equ	0xFF7
 23677                           tblptrl	equ	0xFF6
 23678                           tablat	equ	0xFF5
 23679                           prodh	equ	0xFF4
 23680                           prodl	equ	0xFF3
 23681                           intcon	equ	0xFF2
 23682                           indf0	equ	0xFEF
 23683                           postinc0	equ	0xFEE
 23684                           fsr0h	equ	0xFEA
 23685                           fsr0l	equ	0xFE9
 23686                           wreg	equ	0xFE8
 23687                           indf1	equ	0xFE7
 23688                           postinc1	equ	0xFE6
 23689                           postdec1	equ	0xFE5
 23690                           fsr1h	equ	0xFE2
 23691                           fsr1l	equ	0xFE1
 23692                           indf2	equ	0xFDF
 23693                           postinc2	equ	0xFDE
 23694                           postdec2	equ	0xFDD
 23695                           plusw2	equ	0xFDB
 23696                           fsr2h	equ	0xFDA
 23697                           fsr2l	equ	0xFD9
 23698                           status	equ	0xFD8
 23699                           
 23700 ;; *************** function ___lldiv *****************
 23701 ;; Defined at:
 23702 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23703 ;; Parameters:    Size  Location     Type
 23704 ;;  dividend        4    0[BANK0 ] unsigned long 
 23705 ;;  divisor         4    4[BANK0 ] unsigned long 
 23706 ;; Auto vars:     Size  Location     Type
 23707 ;;  quotient        4    9[BANK0 ] unsigned long 
 23708 ;;  counter         1    8[BANK0 ] unsigned char 
 23709 ;; Return value:  Size  Location     Type
 23710 ;;                  4    0[BANK0 ] unsigned long 
 23711 ;; Registers used:
 23712 ;;		wreg, status,2, status,0
 23713 ;; Tracked objects:
 23714 ;;		On entry : F/0
 23715 ;;		On exit  : F/0
 23716 ;;		Unchanged: 0/0
 23717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23718 ;;      Params:         0       8       0       0       0       0       0
 23719 ;;      Locals:         0       5       0       0       0       0       0
 23720 ;;      Temps:          0       0       0       0       0       0       0
 23721 ;;      Totals:         0      13       0       0       0       0       0
 23722 ;;Total ram usage:       13 bytes
 23723 ;; Hardware stack levels used:    1
 23724 ;; Hardware stack levels required when called:    3
 23725 ;; This function calls:
 23726 ;;		Nothing
 23727 ;; This function is called by:
 23728 ;;		_sprintf
 23729 ;;		_ultoa
 23730 ;; This function uses a non-reentrant model
 23731 ;;
 23732                           
 23733                           	psect	text59
 23734  0020AE                     __ptext59:
 23735                           	opt stack 0
 23736  0020AE                     ___lldiv:
 23737                           	opt stack 23
 23738                           
 23739                           ; BSR set to: 0
 23740                           
 23741                           ; BSR set to: 0
 23742                           ;incstack = 0
 23743                           ;incstack = 0
 23744  0020AE  6B69               	clrf	___lldiv@quotient& (0+255),b
 23745  0020B0  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 23746  0020B2  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 23747  0020B4  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 23748                           
 23749                           ; BSR set to: 0
 23750  0020B6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23751  0020B8  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23752  0020BA  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23753  0020BC  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23754  0020BE  E029               	bz	l2368
 23755                           
 23756                           ; BSR set to: 0
 23757  0020C0  0E01               	movlw	1
 23758  0020C2  6F68               	movwf	___lldiv@counter& (0+255),b
 23759  0020C4  D006               	goto	l16343
 23760  0020C6                     l16341:
 23761                           
 23762                           ; BSR set to: 0
 23763  0020C6  90D8               	bcf	status,0,c
 23764  0020C8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23765  0020CA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23766  0020CC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23767  0020CE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23768  0020D0  2B68               	incf	___lldiv@counter& (0+255),f,b
 23769  0020D2                     l16343:
 23770                           
 23771                           ; BSR set to: 0
 23772  0020D2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23773  0020D4  D7F8               	goto	l16341
 23774  0020D6                     l16345:
 23775                           
 23776                           ; BSR set to: 0
 23777  0020D6  90D8               	bcf	status,0,c
 23778  0020D8  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 23779  0020DA  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23780  0020DC  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23781  0020DE  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23782                           
 23783                           ; BSR set to: 0
 23784  0020E0  5164               	movf	___lldiv@divisor& (0+255),w,b
 23785  0020E2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23786  0020E4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23787  0020E6  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23788  0020E8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23789  0020EA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23790  0020EC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23791  0020EE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23792  0020F0  E309               	bnc	l16353
 23793                           
 23794                           ; BSR set to: 0
 23795  0020F2  5164               	movf	___lldiv@divisor& (0+255),w,b
 23796  0020F4  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23797  0020F6  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23798  0020F8  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23799  0020FA  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23800  0020FC  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23801  0020FE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23802  002100  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23803                           
 23804                           ; BSR set to: 0
 23805  002102  8169               	bsf	___lldiv@quotient& (0+255),0,b
 23806  002104                     l16353:
 23807                           
 23808                           ; BSR set to: 0
 23809  002104  90D8               	bcf	status,0,c
 23810  002106  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23811  002108  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23812  00210A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23813  00210C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23814                           
 23815                           ; BSR set to: 0
 23816  00210E  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 23817  002110  D7E2               	goto	l16345
 23818  002112                     l2368:
 23819                           
 23820                           ; BSR set to: 0
 23821  002112  C069  F060         	movff	___lldiv@quotient,?___lldiv
 23822  002116  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23823  00211A  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23824  00211E  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23825                           
 23826                           ; BSR set to: 0
 23827  002122  0012               	return	
 23828  002124                     __end_of___lldiv:
 23829                           	opt stack 0
 23830                           tblptru	equ	0xFF8
 23831                           tblptrh	equ	0xFF7
 23832                           tblptrl	equ	0xFF6
 23833                           tablat	equ	0xFF5
 23834                           prodh	equ	0xFF4
 23835                           prodl	equ	0xFF3
 23836                           intcon	equ	0xFF2
 23837                           indf0	equ	0xFEF
 23838                           postinc0	equ	0xFEE
 23839                           fsr0h	equ	0xFEA
 23840                           fsr0l	equ	0xFE9
 23841                           wreg	equ	0xFE8
 23842                           indf1	equ	0xFE7
 23843                           postinc1	equ	0xFE6
 23844                           postdec1	equ	0xFE5
 23845                           fsr1h	equ	0xFE2
 23846                           fsr1l	equ	0xFE1
 23847                           indf2	equ	0xFDF
 23848                           postinc2	equ	0xFDE
 23849                           postdec2	equ	0xFDD
 23850                           plusw2	equ	0xFDB
 23851                           fsr2h	equ	0xFDA
 23852                           fsr2l	equ	0xFD9
 23853                           status	equ	0xFD8
 23854                           
 23855 ;; *************** function _isdigit *****************
 23856 ;; Defined at:
 23857 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23858 ;; Parameters:    Size  Location     Type
 23859 ;;  c               1    wreg     unsigned char 
 23860 ;; Auto vars:     Size  Location     Type
 23861 ;;  c               1    2[BANK0 ] unsigned char 
 23862 ;; Return value:  Size  Location     Type
 23863 ;;		None               void
 23864 ;; Registers used:
 23865 ;;		wreg, status,2, status,0
 23866 ;; Tracked objects:
 23867 ;;		On entry : 0/0
 23868 ;;		On exit  : F/0
 23869 ;;		Unchanged: 0/0
 23870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23871 ;;      Params:         0       0       0       0       0       0       0
 23872 ;;      Locals:         0       2       0       0       0       0       0
 23873 ;;      Temps:          0       1       0       0       0       0       0
 23874 ;;      Totals:         0       3       0       0       0       0       0
 23875 ;;Total ram usage:        3 bytes
 23876 ;; Hardware stack levels used:    1
 23877 ;; Hardware stack levels required when called:    3
 23878 ;; This function calls:
 23879 ;;		Nothing
 23880 ;; This function is called by:
 23881 ;;		_sprintf
 23882 ;;		_atoi
 23883 ;; This function uses a non-reentrant model
 23884 ;;
 23885                           
 23886                           	psect	text60
 23887  001770                     __ptext60:
 23888                           	opt stack 0
 23889  001770                     _isdigit:
 23890                           	opt stack 24
 23891                           
 23892                           ; BSR set to: 0
 23893                           ;incstack = 0
 23894                           ;incstack = 0
 23895                           ;isdigit@c stored from wreg
 23896  001770  CFE8 F062          	movff	wreg,isdigit@c
 23897  001774  0100               	movlb	0	; () banked
 23898  001776  6B61               	clrf	_isdigit$2910& (0+255),b
 23899                           
 23900                           ; BSR set to: 0
 23901  001778  0E3A               	movlw	58
 23902  00177A  6162               	cpfslt	isdigit@c& (0+255),b
 23903  00177C  D005               	goto	l13083
 23904                           
 23905                           ; BSR set to: 0
 23906  00177E  0E2F               	movlw	47
 23907  001780  6562               	cpfsgt	isdigit@c& (0+255),b
 23908  001782  D002               	goto	l13083
 23909                           
 23910                           ; BSR set to: 0
 23911  001784  0E01               	movlw	1
 23912  001786  6F61               	movwf	_isdigit$2910& (0+255),b
 23913  001788                     l13083:
 23914                           
 23915                           ; BSR set to: 0
 23916  001788  C061  F060         	movff	_isdigit$2910,??_isdigit
 23917  00178C  3160               	rrcf	??_isdigit& (0+255),w,b
 23918                           
 23919                           ; BSR set to: 0
 23920  00178E  0012               	return	
 23921  001790                     __end_of_isdigit:
 23922                           	opt stack 0
 23923                           tblptru	equ	0xFF8
 23924                           tblptrh	equ	0xFF7
 23925                           tblptrl	equ	0xFF6
 23926                           tablat	equ	0xFF5
 23927                           prodh	equ	0xFF4
 23928                           prodl	equ	0xFF3
 23929                           intcon	equ	0xFF2
 23930                           indf0	equ	0xFEF
 23931                           postinc0	equ	0xFEE
 23932                           fsr0h	equ	0xFEA
 23933                           fsr0l	equ	0xFE9
 23934                           wreg	equ	0xFE8
 23935                           indf1	equ	0xFE7
 23936                           postinc1	equ	0xFE6
 23937                           postdec1	equ	0xFE5
 23938                           fsr1h	equ	0xFE2
 23939                           fsr1l	equ	0xFE1
 23940                           indf2	equ	0xFDF
 23941                           postinc2	equ	0xFDE
 23942                           postdec2	equ	0xFDD
 23943                           plusw2	equ	0xFDB
 23944                           fsr2h	equ	0xFDA
 23945                           fsr2l	equ	0xFD9
 23946                           status	equ	0xFD8
 23947                           
 23948 ;; *************** function _printFirmwareVersion *****************
 23949 ;; Defined at:
 23950 ;;		line 2796 in file "main.c"
 23951 ;; Parameters:    Size  Location     Type
 23952 ;;		None
 23953 ;; Auto vars:     Size  Location     Type
 23954 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23955 ;; Return value:  Size  Location     Type
 23956 ;;		None               void
 23957 ;; Registers used:
 23958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23959 ;; Tracked objects:
 23960 ;;		On entry : 0/0
 23961 ;;		On exit  : 0/0
 23962 ;;		Unchanged: 0/0
 23963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23964 ;;      Params:         0       0       0       0       0       0       0
 23965 ;;      Locals:         0      20       0       0       0       0       0
 23966 ;;      Temps:          0       0       0       0       0       0       0
 23967 ;;      Totals:         0      20       0       0       0       0       0
 23968 ;;Total ram usage:       20 bytes
 23969 ;; Hardware stack levels used:    1
 23970 ;; Hardware stack levels required when called:    6
 23971 ;; This function calls:
 23972 ;;		_putsUSART
 23973 ;;		_WriteUSART
 23974 ;;		_itoa
 23975 ;; This function is called by:
 23976 ;;		_main
 23977 ;;		_doModeVerbose
 23978 ;; This function uses a non-reentrant model
 23979 ;;
 23980                           
 23981                           	psect	text61
 23982  0022A0                     __ptext61:
 23983                           	opt stack 0
 23984  0022A0                     _printFirmwareVersion:
 23985                           	opt stack 22
 23986                           
 23987                           ;main.c: 2797: char wrkbuf[20];
 23988                           ;main.c: 2798: putsUSART((char *) "Version: ");
 23989                           
 23990                           ; BSR set to: 0
 23991                           ;incstack = 0
 23992                           ;incstack = 0
 23993  0022A0  0E7B               	movlw	high STR_254
 23994  0022A2  0100               	movlb	0	; () banked
 23995  0022A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23996  0022A6  0E9D               	movlw	low STR_254
 23997  0022A8  6F61               	movwf	?_putsUSART& (0+255),b
 23998  0022AA  EC2D  F00E         	call	_putsUSART	;wreg free
 23999                           
 24000                           ;main.c: 2799: itoa(wrkbuf, 1, 10);
 24001  0022AE  D838               	call	PL62	;call to abstracted procedure
 24002  0022B0  0E01               	movlw	1
 24003  0022B2  6F72               	movwf	(?_itoa+2)& (0+255),b
 24004  0022B4  6B75               	clrf	(?_itoa+5)& (0+255),b
 24005  0022B6  0E0A               	movlw	10
 24006  0022B8  6F74               	movwf	(?_itoa+4)& (0+255),b
 24007  0022BA  EC40  F00C         	call	_itoa	;wreg free
 24008                           
 24009                           ; BSR set to: 0
 24010                           ;main.c: 2800: putsUSART(wrkbuf);
 24011  0022BE  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24012  0022C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24013  0022C2  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24014  0022C4  6F61               	movwf	?_putsUSART& (0+255),b
 24015  0022C6  EC2D  F00E         	call	_putsUSART	;wreg free
 24016  0022CA                     l1230:
 24017  0022CA  A2AC               	btfss	4012,1,c	;volatile
 24018  0022CC  D7FE               	goto	l1230
 24019                           
 24020                           ;main.c: 2802: WriteUSART('.');
 24021  0022CE  0E2E               	movlw	46
 24022  0022D0  EC78  F00B         	call	_WriteUSART
 24023                           
 24024                           ;main.c: 2803: itoa(wrkbuf, 0, 10);
 24025  0022D4  D825               	call	PL62	;call to abstracted procedure
 24026  0022D6  6B72               	clrf	(?_itoa+2)& (0+255),b
 24027  0022D8  6B75               	clrf	(?_itoa+5)& (0+255),b
 24028  0022DA  0E0A               	movlw	10
 24029  0022DC  6F74               	movwf	(?_itoa+4)& (0+255),b
 24030  0022DE  EC40  F00C         	call	_itoa	;wreg free
 24031                           
 24032                           ; BSR set to: 0
 24033                           ;main.c: 2804: putsUSART(wrkbuf);
 24034  0022E2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24035  0022E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24036  0022E6  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24037  0022E8  6F61               	movwf	?_putsUSART& (0+255),b
 24038  0022EA  EC2D  F00E         	call	_putsUSART	;wreg free
 24039  0022EE                     l1233:
 24040  0022EE  A2AC               	btfss	4012,1,c	;volatile
 24041  0022F0  D7FE               	goto	l1233
 24042                           
 24043                           ;main.c: 2806: WriteUSART('.');
 24044  0022F2  0E2E               	movlw	46
 24045  0022F4  EC78  F00B         	call	_WriteUSART
 24046                           
 24047                           ;main.c: 2807: itoa(wrkbuf, 0, 10);
 24048  0022F8  D813               	call	PL62	;call to abstracted procedure
 24049  0022FA  6B72               	clrf	(?_itoa+2)& (0+255),b
 24050  0022FC  6B75               	clrf	(?_itoa+5)& (0+255),b
 24051  0022FE  0E0A               	movlw	10
 24052  002300  6F74               	movwf	(?_itoa+4)& (0+255),b
 24053  002302  EC40  F00C         	call	_itoa	;wreg free
 24054                           
 24055                           ; BSR set to: 0
 24056                           ;main.c: 2808: putsUSART(wrkbuf);
 24057  002306  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24058  002308  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24059  00230A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24060  00230C  6F61               	movwf	?_putsUSART& (0+255),b
 24061  00230E  EC2D  F00E         	call	_putsUSART	;wreg free
 24062                           
 24063                           ;main.c: 2809: putsUSART((char *) "\r\n");
 24064  002312  0E71               	movlw	high (STR_197+50)
 24065  002314  0100               	movlb	0	; () banked
 24066  002316  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24067  002318  0EC0               	movlw	low (STR_197+50)
 24068  00231A  6F61               	movwf	?_putsUSART& (0+255),b
 24069  00231C  EF2D  F00E         	goto	_putsUSART	;wreg free
 24070  002320                     __end_of_printFirmwareVersion:
 24071                           	opt stack 0
 24072  002320                     PL62:
 24073                           	opt stack 22
 24074  002320  0100               	movlb	0	; () banked
 24075  002322  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24076  002324  6F71               	movwf	(?_itoa+1)& (0+255),b
 24077  002326  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24078  002328  6F70               	movwf	?_itoa& (0+255),b
 24079  00232A  6B73               	clrf	(?_itoa+3)& (0+255),b
 24080  00232C  0012               	return	
 24081  00232E                     __end_ofPL62:
 24082                           	opt stack 0
 24083                           tblptru	equ	0xFF8
 24084                           tblptrh	equ	0xFF7
 24085                           tblptrl	equ	0xFF6
 24086                           tablat	equ	0xFF5
 24087                           prodh	equ	0xFF4
 24088                           prodl	equ	0xFF3
 24089                           intcon	equ	0xFF2
 24090                           indf0	equ	0xFEF
 24091                           postinc0	equ	0xFEE
 24092                           fsr0h	equ	0xFEA
 24093                           fsr0l	equ	0xFE9
 24094                           wreg	equ	0xFE8
 24095                           indf1	equ	0xFE7
 24096                           postinc1	equ	0xFE6
 24097                           postdec1	equ	0xFE5
 24098                           fsr1h	equ	0xFE2
 24099                           fsr1l	equ	0xFE1
 24100                           indf2	equ	0xFDF
 24101                           postinc2	equ	0xFDE
 24102                           postdec2	equ	0xFDD
 24103                           plusw2	equ	0xFDB
 24104                           fsr2h	equ	0xFDA
 24105                           fsr2l	equ	0xFD9
 24106                           status	equ	0xFD8
 24107                           
 24108 ;; *************** function _itoa *****************
 24109 ;; Defined at:
 24110 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24111 ;; Parameters:    Size  Location     Type
 24112 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24113 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24114 ;;  val             2   18[BANK0 ] int 
 24115 ;;  base            2   20[BANK0 ] int 
 24116 ;; Auto vars:     Size  Location     Type
 24117 ;;  cp              2    0        PTR unsigned char 
 24118 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24119 ;; Return value:  Size  Location     Type
 24120 ;;                  2   16[BANK0 ] PTR unsigned char 
 24121 ;; Registers used:
 24122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24123 ;; Tracked objects:
 24124 ;;		On entry : F/0
 24125 ;;		On exit  : F/0
 24126 ;;		Unchanged: 0/0
 24127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24128 ;;      Params:         0       6       0       0       0       0       0
 24129 ;;      Locals:         0       2       0       0       0       0       0
 24130 ;;      Temps:          0       0       0       0       0       0       0
 24131 ;;      Totals:         0       8       0       0       0       0       0
 24132 ;;Total ram usage:        8 bytes
 24133 ;; Hardware stack levels used:    1
 24134 ;; Hardware stack levels required when called:    5
 24135 ;; This function calls:
 24136 ;;		_utoa
 24137 ;; This function is called by:
 24138 ;;		_receiveSendEventSLCAN
 24139 ;;		_findNodes
 24140 ;;		_printGUID
 24141 ;;		_printNodeFirmwareVersion
 24142 ;;		_printFirmwareVersion
 24143 ;; This function uses a non-reentrant model
 24144 ;;
 24145                           
 24146                           	psect	text62
 24147  001880                     __ptext62:
 24148                           	opt stack 0
 24149  001880                     _itoa:
 24150                           	opt stack 22
 24151                           
 24152                           ; BSR set to: 0
 24153                           
 24154                           ;incstack = 0
 24155                           ;incstack = 0
 24156  001880  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24157  001882  D00C               	goto	l16231
 24158                           
 24159                           ; BSR set to: 0
 24160  001884  C070  FFD9         	movff	itoa@buf,fsr2l
 24161  001888  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24162  00188C  0E2D               	movlw	45
 24163  00188E  6EDF               	movwf	indf2,c
 24164                           
 24165                           ; BSR set to: 0
 24166  001890  4B70               	infsnz	itoa@buf& (0+255),f,b
 24167  001892  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24168                           
 24169                           ; BSR set to: 0
 24170  001894  6D72               	negf	itoa@val& (0+255),b
 24171  001896  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24172  001898  B0D8               	btfsc	status,0,c
 24173  00189A  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24174  00189C                     l16231:
 24175                           
 24176                           ; BSR set to: 0
 24177  00189C  C070  F067         	movff	itoa@buf,?_utoa
 24178  0018A0  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24179  0018A4  C072  F069         	movff	itoa@val,?_utoa+2
 24180  0018A8  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24181  0018AC  C074  F06B         	movff	itoa@base,?_utoa+4
 24182  0018B0  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24183  0018B4  EFC6  F012         	goto	_utoa	;wreg free
 24184  0018B8                     __end_of_itoa:
 24185                           	opt stack 0
 24186                           tblptru	equ	0xFF8
 24187                           tblptrh	equ	0xFF7
 24188                           tblptrl	equ	0xFF6
 24189                           tablat	equ	0xFF5
 24190                           prodh	equ	0xFF4
 24191                           prodl	equ	0xFF3
 24192                           intcon	equ	0xFF2
 24193                           indf0	equ	0xFEF
 24194                           postinc0	equ	0xFEE
 24195                           fsr0h	equ	0xFEA
 24196                           fsr0l	equ	0xFE9
 24197                           wreg	equ	0xFE8
 24198                           indf1	equ	0xFE7
 24199                           postinc1	equ	0xFE6
 24200                           postdec1	equ	0xFE5
 24201                           fsr1h	equ	0xFE2
 24202                           fsr1l	equ	0xFE1
 24203                           indf2	equ	0xFDF
 24204                           postinc2	equ	0xFDE
 24205                           postdec2	equ	0xFDD
 24206                           plusw2	equ	0xFDB
 24207                           fsr2h	equ	0xFDA
 24208                           fsr2l	equ	0xFD9
 24209                           status	equ	0xFD8
 24210                           
 24211 ;; *************** function _utoa *****************
 24212 ;; Defined at:
 24213 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24214 ;; Parameters:    Size  Location     Type
 24215 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24216 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24217 ;;  val             2    9[BANK0 ] unsigned int 
 24218 ;;  base            2   11[BANK0 ] int 
 24219 ;; Auto vars:     Size  Location     Type
 24220 ;;  v               2   13[BANK0 ] unsigned int 
 24221 ;;  c               1   15[BANK0 ] unsigned char 
 24222 ;; Return value:  Size  Location     Type
 24223 ;;                  2    7[BANK0 ] PTR unsigned char 
 24224 ;; Registers used:
 24225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24226 ;; Tracked objects:
 24227 ;;		On entry : F/0
 24228 ;;		On exit  : F/0
 24229 ;;		Unchanged: 0/0
 24230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24231 ;;      Params:         0       6       0       0       0       0       0
 24232 ;;      Locals:         0       3       0       0       0       0       0
 24233 ;;      Temps:          0       0       0       0       0       0       0
 24234 ;;      Totals:         0       9       0       0       0       0       0
 24235 ;;Total ram usage:        9 bytes
 24236 ;; Hardware stack levels used:    1
 24237 ;; Hardware stack levels required when called:    4
 24238 ;; This function calls:
 24239 ;;		___lwdiv
 24240 ;;		___lwmod
 24241 ;; This function is called by:
 24242 ;;		_itoa
 24243 ;; This function uses a non-reentrant model
 24244 ;;
 24245                           
 24246                           	psect	text63
 24247  00258C                     __ptext63:
 24248                           	opt stack 0
 24249  00258C                     _utoa:
 24250                           	opt stack 22
 24251                           
 24252                           ; BSR set to: 0
 24253                           
 24254                           ; BSR set to: 0
 24255                           ;incstack = 0
 24256                           ;incstack = 0
 24257  00258C  C069  F06D         	movff	utoa@val,utoa@v
 24258  002590  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24259  002594                     l16307:
 24260                           
 24261                           ; BSR set to: 0
 24262  002594  C06D  F060         	movff	utoa@v,?___lwdiv
 24263  002598  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24264  00259C  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24265  0025A0  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24266  0025A4  ECBB  F00D         	call	___lwdiv	;wreg free
 24267  0025A8  C060  F06D         	movff	?___lwdiv,utoa@v
 24268  0025AC  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24269                           
 24270                           ; BSR set to: 0
 24271  0025B0  4B67               	infsnz	utoa@buf& (0+255),f,b
 24272  0025B2  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24273                           
 24274                           ; BSR set to: 0
 24275  0025B4  516E               	movf	(utoa@v+1)& (0+255),w,b
 24276  0025B6  116D               	iorwf	utoa@v& (0+255),w,b
 24277  0025B8  E1ED               	bnz	l16307
 24278                           
 24279                           ; BSR set to: 0
 24280  0025BA  C067  FFD9         	movff	utoa@buf,fsr2l
 24281  0025BE  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24282  0025C2  0E00               	movlw	0
 24283  0025C4  6ADF               	clrf	indf2,c
 24284                           
 24285                           ; BSR set to: 0
 24286  0025C6  0767               	decf	utoa@buf& (0+255),f,b
 24287  0025C8  A0D8               	btfss	status,0,c
 24288  0025CA  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24289  0025CC                     l16317:
 24290                           
 24291                           ; BSR set to: 0
 24292  0025CC  C069  F060         	movff	utoa@val,?___lwmod
 24293  0025D0  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24294  0025D4  C06B  F062         	movff	utoa@base,?___lwmod+2
 24295  0025D8  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24296  0025DC  EC95  F00C         	call	___lwmod	;wreg free
 24297  0025E0  5160               	movf	?___lwmod& (0+255),w,b
 24298  0025E2  6F6F               	movwf	utoa@c& (0+255),b
 24299                           
 24300                           ; BSR set to: 0
 24301  0025E4  C069  F060         	movff	utoa@val,?___lwdiv
 24302  0025E8  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24303  0025EC  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24304  0025F0  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24305  0025F4  ECBB  F00D         	call	___lwdiv	;wreg free
 24306  0025F8  C060  F069         	movff	?___lwdiv,utoa@val
 24307  0025FC  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24308                           
 24309                           ; BSR set to: 0
 24310  002600  0E09               	movlw	9
 24311  002602  656F               	cpfsgt	utoa@c& (0+255),b
 24312  002604  D002               	goto	l2337
 24313                           
 24314                           ; BSR set to: 0
 24315  002606  0E07               	movlw	7
 24316  002608  276F               	addwf	utoa@c& (0+255),f,b
 24317  00260A                     l2337:
 24318                           
 24319                           ; BSR set to: 0
 24320  00260A  0E30               	movlw	48
 24321  00260C  276F               	addwf	utoa@c& (0+255),f,b
 24322                           
 24323                           ; BSR set to: 0
 24324  00260E  C067  FFD9         	movff	utoa@buf,fsr2l
 24325  002612  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24326  002616  C06F  FFDF         	movff	utoa@c,indf2
 24327                           
 24328                           ; BSR set to: 0
 24329  00261A  0767               	decf	utoa@buf& (0+255),f,b
 24330  00261C  A0D8               	btfss	status,0,c
 24331  00261E  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24332                           
 24333                           ; BSR set to: 0
 24334  002620  516A               	movf	(utoa@val+1)& (0+255),w,b
 24335  002622  1169               	iorwf	utoa@val& (0+255),w,b
 24336  002624  E1D3               	bnz	l16317
 24337                           
 24338                           ; BSR set to: 0
 24339                           ;	Return value of _utoa is never used
 24340  002626  4B67               	infsnz	utoa@buf& (0+255),f,b
 24341  002628  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24342                           
 24343                           ; BSR set to: 0
 24344  00262A  0012               	return	
 24345  00262C                     __end_of_utoa:
 24346                           	opt stack 0
 24347                           tblptru	equ	0xFF8
 24348                           tblptrh	equ	0xFF7
 24349                           tblptrl	equ	0xFF6
 24350                           tablat	equ	0xFF5
 24351                           prodh	equ	0xFF4
 24352                           prodl	equ	0xFF3
 24353                           intcon	equ	0xFF2
 24354                           indf0	equ	0xFEF
 24355                           postinc0	equ	0xFEE
 24356                           fsr0h	equ	0xFEA
 24357                           fsr0l	equ	0xFE9
 24358                           wreg	equ	0xFE8
 24359                           indf1	equ	0xFE7
 24360                           postinc1	equ	0xFE6
 24361                           postdec1	equ	0xFE5
 24362                           fsr1h	equ	0xFE2
 24363                           fsr1l	equ	0xFE1
 24364                           indf2	equ	0xFDF
 24365                           postinc2	equ	0xFDE
 24366                           postdec2	equ	0xFDD
 24367                           plusw2	equ	0xFDB
 24368                           fsr2h	equ	0xFDA
 24369                           fsr2l	equ	0xFD9
 24370                           status	equ	0xFD8
 24371                           
 24372 ;; *************** function ___lwmod *****************
 24373 ;; Defined at:
 24374 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24375 ;; Parameters:    Size  Location     Type
 24376 ;;  dividend        2    0[BANK0 ] unsigned int 
 24377 ;;  divisor         2    2[BANK0 ] unsigned int 
 24378 ;; Auto vars:     Size  Location     Type
 24379 ;;  counter         1    4[BANK0 ] unsigned char 
 24380 ;; Return value:  Size  Location     Type
 24381 ;;                  2    0[BANK0 ] unsigned int 
 24382 ;; Registers used:
 24383 ;;		wreg, status,2, status,0
 24384 ;; Tracked objects:
 24385 ;;		On entry : F/0
 24386 ;;		On exit  : F/0
 24387 ;;		Unchanged: 0/0
 24388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24389 ;;      Params:         0       4       0       0       0       0       0
 24390 ;;      Locals:         0       1       0       0       0       0       0
 24391 ;;      Temps:          0       0       0       0       0       0       0
 24392 ;;      Totals:         0       5       0       0       0       0       0
 24393 ;;Total ram usage:        5 bytes
 24394 ;; Hardware stack levels used:    1
 24395 ;; Hardware stack levels required when called:    3
 24396 ;; This function calls:
 24397 ;;		Nothing
 24398 ;; This function is called by:
 24399 ;;		_utoa
 24400 ;; This function uses a non-reentrant model
 24401 ;;
 24402                           
 24403                           	psect	text64
 24404  00192A                     __ptext64:
 24405                           	opt stack 0
 24406  00192A                     ___lwmod:
 24407                           	opt stack 22
 24408                           
 24409                           ; BSR set to: 0
 24410                           
 24411                           ; BSR set to: 0
 24412                           ;incstack = 0
 24413                           ;incstack = 0
 24414  00192A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24415  00192C  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24416  00192E  E017               	bz	l2461
 24417                           
 24418                           ; BSR set to: 0
 24419  001930  0E01               	movlw	1
 24420  001932  6F64               	movwf	___lwmod@counter& (0+255),b
 24421  001934  D004               	goto	l16401
 24422  001936                     l16399:
 24423                           
 24424                           ; BSR set to: 0
 24425  001936  90D8               	bcf	status,0,c
 24426  001938  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24427  00193A  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24428  00193C  2B64               	incf	___lwmod@counter& (0+255),f,b
 24429  00193E                     l16401:
 24430                           
 24431                           ; BSR set to: 0
 24432  00193E  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24433  001940  D7FA               	goto	l16399
 24434  001942                     l16403:
 24435                           
 24436                           ; BSR set to: 0
 24437  001942  5162               	movf	___lwmod@divisor& (0+255),w,b
 24438  001944  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24439  001946  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24440  001948  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24441  00194A  E304               	bnc	l16407
 24442                           
 24443                           ; BSR set to: 0
 24444  00194C  5162               	movf	___lwmod@divisor& (0+255),w,b
 24445  00194E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24446  001950  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24447  001952  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24448  001954                     l16407:
 24449                           
 24450                           ; BSR set to: 0
 24451  001954  90D8               	bcf	status,0,c
 24452  001956  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24453  001958  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24454                           
 24455                           ; BSR set to: 0
 24456  00195A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24457  00195C  D7F2               	goto	l16403
 24458  00195E                     l2461:
 24459                           
 24460                           ; BSR set to: 0
 24461  00195E  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24462  001962  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24463                           
 24464                           ; BSR set to: 0
 24465  001966  0012               	return	
 24466  001968                     __end_of___lwmod:
 24467                           	opt stack 0
 24468                           tblptru	equ	0xFF8
 24469                           tblptrh	equ	0xFF7
 24470                           tblptrl	equ	0xFF6
 24471                           tablat	equ	0xFF5
 24472                           prodh	equ	0xFF4
 24473                           prodl	equ	0xFF3
 24474                           intcon	equ	0xFF2
 24475                           indf0	equ	0xFEF
 24476                           postinc0	equ	0xFEE
 24477                           fsr0h	equ	0xFEA
 24478                           fsr0l	equ	0xFE9
 24479                           wreg	equ	0xFE8
 24480                           indf1	equ	0xFE7
 24481                           postinc1	equ	0xFE6
 24482                           postdec1	equ	0xFE5
 24483                           fsr1h	equ	0xFE2
 24484                           fsr1l	equ	0xFE1
 24485                           indf2	equ	0xFDF
 24486                           postinc2	equ	0xFDE
 24487                           postdec2	equ	0xFDD
 24488                           plusw2	equ	0xFDB
 24489                           fsr2h	equ	0xFDA
 24490                           fsr2l	equ	0xFD9
 24491                           status	equ	0xFD8
 24492                           
 24493 ;; *************** function ___lwdiv *****************
 24494 ;; Defined at:
 24495 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24496 ;; Parameters:    Size  Location     Type
 24497 ;;  dividend        2    0[BANK0 ] unsigned int 
 24498 ;;  divisor         2    2[BANK0 ] unsigned int 
 24499 ;; Auto vars:     Size  Location     Type
 24500 ;;  quotient        2    5[BANK0 ] unsigned int 
 24501 ;;  counter         1    4[BANK0 ] unsigned char 
 24502 ;; Return value:  Size  Location     Type
 24503 ;;                  2    0[BANK0 ] unsigned int 
 24504 ;; Registers used:
 24505 ;;		wreg, status,2, status,0
 24506 ;; Tracked objects:
 24507 ;;		On entry : F/0
 24508 ;;		On exit  : F/0
 24509 ;;		Unchanged: 0/0
 24510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24511 ;;      Params:         0       4       0       0       0       0       0
 24512 ;;      Locals:         0       3       0       0       0       0       0
 24513 ;;      Temps:          0       0       0       0       0       0       0
 24514 ;;      Totals:         0       7       0       0       0       0       0
 24515 ;;Total ram usage:        7 bytes
 24516 ;; Hardware stack levels used:    1
 24517 ;; Hardware stack levels required when called:    3
 24518 ;; This function calls:
 24519 ;;		Nothing
 24520 ;; This function is called by:
 24521 ;;		_utoa
 24522 ;; This function uses a non-reentrant model
 24523 ;;
 24524                           
 24525                           	psect	text65
 24526  001B76                     __ptext65:
 24527                           	opt stack 0
 24528  001B76                     ___lwdiv:
 24529                           	opt stack 22
 24530                           
 24531                           ; BSR set to: 0
 24532                           
 24533                           ; BSR set to: 0
 24534                           ;incstack = 0
 24535                           ;incstack = 0
 24536  001B76  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24537  001B78  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24538                           
 24539                           ; BSR set to: 0
 24540  001B7A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24541  001B7C  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24542  001B7E  E01B               	bz	l2451
 24543                           
 24544                           ; BSR set to: 0
 24545  001B80  0E01               	movlw	1
 24546  001B82  6F64               	movwf	___lwdiv@counter& (0+255),b
 24547  001B84  D004               	goto	l16381
 24548  001B86                     l16379:
 24549                           
 24550                           ; BSR set to: 0
 24551  001B86  90D8               	bcf	status,0,c
 24552  001B88  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24553  001B8A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24554  001B8C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24555  001B8E                     l16381:
 24556                           
 24557                           ; BSR set to: 0
 24558  001B8E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24559  001B90  D7FA               	goto	l16379
 24560  001B92                     l16383:
 24561                           
 24562                           ; BSR set to: 0
 24563  001B92  90D8               	bcf	status,0,c
 24564  001B94  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24565  001B96  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24566                           
 24567                           ; BSR set to: 0
 24568  001B98  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24569  001B9A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24570  001B9C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24571  001B9E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24572  001BA0  E305               	bnc	l16391
 24573                           
 24574                           ; BSR set to: 0
 24575  001BA2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24576  001BA4  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24577  001BA6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24578  001BA8  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24579                           
 24580                           ; BSR set to: 0
 24581  001BAA  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24582  001BAC                     l16391:
 24583                           
 24584                           ; BSR set to: 0
 24585  001BAC  90D8               	bcf	status,0,c
 24586  001BAE  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24587  001BB0  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24588                           
 24589                           ; BSR set to: 0
 24590  001BB2  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24591  001BB4  D7EE               	goto	l16383
 24592  001BB6                     l2451:
 24593                           
 24594                           ; BSR set to: 0
 24595  001BB6  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24596  001BBA  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24597                           
 24598                           ; BSR set to: 0
 24599  001BBE  0012               	return	
 24600  001BC0                     __end_of___lwdiv:
 24601                           	opt stack 0
 24602                           tblptru	equ	0xFF8
 24603                           tblptrh	equ	0xFF7
 24604                           tblptrl	equ	0xFF6
 24605                           tablat	equ	0xFF5
 24606                           prodh	equ	0xFF4
 24607                           prodl	equ	0xFF3
 24608                           intcon	equ	0xFF2
 24609                           indf0	equ	0xFEF
 24610                           postinc0	equ	0xFEE
 24611                           fsr0h	equ	0xFEA
 24612                           fsr0l	equ	0xFE9
 24613                           wreg	equ	0xFE8
 24614                           indf1	equ	0xFE7
 24615                           postinc1	equ	0xFE6
 24616                           postdec1	equ	0xFE5
 24617                           fsr1h	equ	0xFE2
 24618                           fsr1l	equ	0xFE1
 24619                           indf2	equ	0xFDF
 24620                           postinc2	equ	0xFDE
 24621                           postdec2	equ	0xFDD
 24622                           plusw2	equ	0xFDB
 24623                           fsr2h	equ	0xFDA
 24624                           fsr2l	equ	0xFD9
 24625                           status	equ	0xFD8
 24626                           
 24627 ;; *************** function _printMode *****************
 24628 ;; Defined at:
 24629 ;;		line 2817 in file "main.c"
 24630 ;; Parameters:    Size  Location     Type
 24631 ;;		None
 24632 ;; Auto vars:     Size  Location     Type
 24633 ;;		None
 24634 ;; Return value:  Size  Location     Type
 24635 ;;		None               void
 24636 ;; Registers used:
 24637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24638 ;; Tracked objects:
 24639 ;;		On entry : 0/0
 24640 ;;		On exit  : 0/0
 24641 ;;		Unchanged: 0/0
 24642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24643 ;;      Params:         0       0       0       0       0       0       0
 24644 ;;      Locals:         0       0       0       0       0       0       0
 24645 ;;      Temps:          0       0       0       0       0       0       0
 24646 ;;      Totals:         0       0       0       0       0       0       0
 24647 ;;Total ram usage:        0 bytes
 24648 ;; Hardware stack levels used:    1
 24649 ;; Hardware stack levels required when called:    5
 24650 ;; This function calls:
 24651 ;;		_putsUSART
 24652 ;; This function is called by:
 24653 ;;		_main
 24654 ;; This function uses a non-reentrant model
 24655 ;;
 24656                           
 24657                           	psect	text66
 24658  002038                     __ptext66:
 24659                           	opt stack 0
 24660  002038                     _printMode:
 24661                           	opt stack 24
 24662                           
 24663                           ;main.c: 2818: putsUSART((char *) "Mode: ");
 24664                           
 24665                           ; BSR set to: 0
 24666                           ;incstack = 0
 24667                           ;incstack = 0
 24668  002038  0E7C               	movlw	high STR_256
 24669  00203A  0100               	movlb	0	; () banked
 24670  00203C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24671  00203E  0E26               	movlw	low STR_256
 24672  002040  6F61               	movwf	?_putsUSART& (0+255),b
 24673  002042  EC2D  F00E         	call	_putsUSART	;wreg free
 24674                           
 24675                           ;main.c: 2819: if (0 == mode) {
 24676  002046  0100               	movlb	0	; () banked
 24677  002048  67E6               	tstfsz	_mode& (0+255),b
 24678  00204A  D007               	goto	l13567
 24679                           
 24680                           ; BSR set to: 0
 24681                           ;main.c: 2820: putsUSART((char *) "Verbose");
 24682  00204C  0E7C               	movlw	high STR_257
 24683  00204E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24684  002050  0E1E               	movlw	low STR_257
 24685  002052  6F61               	movwf	?_putsUSART& (0+255),b
 24686  002054  EC2D  F00E         	call	_putsUSART	;wreg free
 24687                           
 24688                           ;main.c: 2821: } else if (1 == mode) {
 24689  002058  D023               	goto	l1240
 24690  00205A                     l13567:
 24691                           
 24692                           ; BSR set to: 0
 24693  00205A  05E6               	decf	_mode& (0+255),w,b
 24694  00205C  E107               	bnz	l13571
 24695                           
 24696                           ; BSR set to: 0
 24697                           ;main.c: 2822: putsUSART((char *) "VSCP Driver");
 24698  00205E  0E7B               	movlw	high STR_258
 24699  002060  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24700  002062  0E7B               	movlw	low STR_258
 24701  002064  6F61               	movwf	?_putsUSART& (0+255),b
 24702  002066  EC2D  F00E         	call	_putsUSART	;wreg free
 24703                           
 24704                           ;main.c: 2823: } else if (2 == mode) {
 24705  00206A  D01A               	goto	l1240
 24706  00206C                     l13571:
 24707                           
 24708                           ; BSR set to: 0
 24709  00206C  51E6               	movf	_mode& (0+255),w,b
 24710  00206E  0A02               	xorlw	2
 24711  002070  E107               	bnz	l13575
 24712                           
 24713                           ; BSR set to: 0
 24714                           ;main.c: 2824: putsUSART((char *) "SL Driver");
 24715  002072  0E7B               	movlw	high STR_259
 24716  002074  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24717  002076  0EB1               	movlw	low STR_259
 24718  002078  6F61               	movwf	?_putsUSART& (0+255),b
 24719  00207A  EC2D  F00E         	call	_putsUSART	;wreg free
 24720                           
 24721                           ;main.c: 2825: } else if (3 == mode) {
 24722  00207E  D010               	goto	l1240
 24723  002080                     l13575:
 24724                           
 24725                           ; BSR set to: 0
 24726  002080  51E6               	movf	_mode& (0+255),w,b
 24727  002082  0A03               	xorlw	3
 24728  002084  E107               	bnz	l13579
 24729                           
 24730                           ; BSR set to: 0
 24731                           ;main.c: 2826: putsUSART((char *) "VSCP Node");
 24732  002086  0E7B               	movlw	high STR_260
 24733  002088  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24734  00208A  0EA7               	movlw	low STR_260
 24735  00208C  6F61               	movwf	?_putsUSART& (0+255),b
 24736  00208E  EC2D  F00E         	call	_putsUSART	;wreg free
 24737                           
 24738                           ;main.c: 2827: } else {
 24739  002092  D006               	goto	l1240
 24740  002094                     l13579:
 24741                           
 24742                           ; BSR set to: 0
 24743                           ;main.c: 2828: putsUSART((char *) "Unknown (Verbose used)");
 24744  002094  0E79               	movlw	high STR_261
 24745  002096  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24746  002098  0EEF               	movlw	low STR_261
 24747  00209A  6F61               	movwf	?_putsUSART& (0+255),b
 24748  00209C  EC2D  F00E         	call	_putsUSART	;wreg free
 24749  0020A0                     l1240:
 24750                           
 24751                           ;main.c: 2829: }
 24752                           ;main.c: 2830: putsUSART((char *) "\r\n");
 24753  0020A0  0E71               	movlw	high (STR_197+50)
 24754  0020A2  0100               	movlb	0	; () banked
 24755  0020A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24756  0020A6  0EC0               	movlw	low (STR_197+50)
 24757  0020A8  6F61               	movwf	?_putsUSART& (0+255),b
 24758  0020AA  EF2D  F00E         	goto	_putsUSART	;wreg free
 24759  0020AE                     __end_of_printMode:
 24760                           	opt stack 0
 24761                           tblptru	equ	0xFF8
 24762                           tblptrh	equ	0xFF7
 24763                           tblptrl	equ	0xFF6
 24764                           tablat	equ	0xFF5
 24765                           prodh	equ	0xFF4
 24766                           prodl	equ	0xFF3
 24767                           intcon	equ	0xFF2
 24768                           indf0	equ	0xFEF
 24769                           postinc0	equ	0xFEE
 24770                           fsr0h	equ	0xFEA
 24771                           fsr0l	equ	0xFE9
 24772                           wreg	equ	0xFE8
 24773                           indf1	equ	0xFE7
 24774                           postinc1	equ	0xFE6
 24775                           postdec1	equ	0xFE5
 24776                           fsr1h	equ	0xFE2
 24777                           fsr1l	equ	0xFE1
 24778                           indf2	equ	0xFDF
 24779                           postinc2	equ	0xFDE
 24780                           postdec2	equ	0xFDD
 24781                           plusw2	equ	0xFDB
 24782                           fsr2h	equ	0xFDA
 24783                           fsr2l	equ	0xFD9
 24784                           status	equ	0xFD8
 24785                           
 24786 ;; *************** function _putsUSART *****************
 24787 ;; Defined at:
 24788 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24789 ;; Parameters:    Size  Location     Type
 24790 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24791 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24792 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24793 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24794 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24795 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24796 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24797 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24798 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24799 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24800 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24801 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24802 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24803 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24804 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24805 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24806 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24807 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24808 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24809 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24810 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24811 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24812 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24813 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24814 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24815 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24816 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24817 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24818 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24819 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24820 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24821 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24822 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24823 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24824 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24825 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24826 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24827 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24828 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24829 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24830 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24831 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 24832 ;; Auto vars:     Size  Location     Type
 24833 ;;		None
 24834 ;; Return value:  Size  Location     Type
 24835 ;;		None               void
 24836 ;; Registers used:
 24837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24838 ;; Tracked objects:
 24839 ;;		On entry : F/0
 24840 ;;		On exit  : 0/0
 24841 ;;		Unchanged: 0/0
 24842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24843 ;;      Params:         0       2       0       0       0       0       0
 24844 ;;      Locals:         0       0       0       0       0       0       0
 24845 ;;      Temps:          0       2       0       0       0       0       0
 24846 ;;      Totals:         0       4       0       0       0       0       0
 24847 ;;Total ram usage:        4 bytes
 24848 ;; Hardware stack levels used:    1
 24849 ;; Hardware stack levels required when called:    4
 24850 ;; This function calls:
 24851 ;;		_WriteUSART
 24852 ;; This function is called by:
 24853 ;;		_main
 24854 ;;		_doModeVerbose
 24855 ;;		_doModeSLCAN
 24856 ;;		_receivePrintEventVerbose
 24857 ;;		_receiveSendEventSLCAN
 24858 ;;		_printStatistics
 24859 ;;		_printErrors
 24860 ;;		_printHelp
 24861 ;;		_findNodes
 24862 ;;		_printGUID
 24863 ;;		_printMDF
 24864 ;;		_printNodeFirmwareVersion
 24865 ;;		_printFirmwareVersion
 24866 ;;		_printMode
 24867 ;; This function uses a non-reentrant model
 24868 ;;
 24869                           
 24870                           	psect	text67
 24871  001C5A                     __ptext67:
 24872                           	opt stack 0
 24873  001C5A                     _putsUSART:
 24874                           	opt stack 23
 24875  001C5A                     l1853:
 24876  001C5A  A2AC               	btfss	4012,1,c	;volatile
 24877  001C5C  D7FE               	goto	l1853
 24878  001C5E  0100               	movlb	0	; () banked
 24879  001C60  5161               	movf	putsUSART@data& (0+255),w,b
 24880  001C62  6EF6               	movwf	tblptrl,c
 24881  001C64  6EE9               	movwf	fsr0l,c
 24882  001C66  0E05               	movlw	(high __ramtop+-1)
 24883  001C68  6EEA               	movwf	fsr0h,c
 24884  001C6A  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24885  001C6C  64EA               	cpfsgt	fsr0h,c
 24886  001C6E  D003               	bra	u17927
 24887  001C70  6EEA               	movwf	fsr0h,c
 24888  001C72  50EF               	movf	indf0,w,c
 24889  001C74  D003               	bra	u17920
 24890  001C76                     u17927:
 24891  001C76  6EF7               	movwf	tblptrh,c
 24892  001C78  0008               	tblrd		*
 24893  001C7A  50F5               	movf	tablat,w,c
 24894  001C7C                     u17920:
 24895  001C7C  EC78  F00B         	call	_WriteUSART
 24896  001C80  0100               	movlb	0	; () banked
 24897  001C82  5161               	movf	putsUSART@data& (0+255),w,b
 24898  001C84  6F63               	movwf	??_putsUSART& (0+255),b
 24899  001C86  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24900  001C88  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24901  001C8A  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24902  001C8C  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24903  001C8E  5163               	movf	??_putsUSART& (0+255),w,b
 24904  001C90  6EF6               	movwf	tblptrl,c
 24905  001C92  6EE9               	movwf	fsr0l,c
 24906  001C94  0E05               	movlw	(high __ramtop+-1)
 24907  001C96  6EEA               	movwf	fsr0h,c
 24908  001C98  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24909  001C9A  64EA               	cpfsgt	fsr0h,c
 24910  001C9C  D003               	bra	u17937
 24911  001C9E  6EEA               	movwf	fsr0h,c
 24912  001CA0  50EF               	movf	indf0,w,c
 24913  001CA2  D003               	bra	u17930
 24914  001CA4                     u17937:
 24915  001CA4  6EF7               	movwf	tblptrh,c
 24916  001CA6  0008               	tblrd		*
 24917  001CA8  50F5               	movf	tablat,w,c
 24918  001CAA                     u17930:
 24919  001CAA  0900               	iorlw	0
 24920  001CAC  B4D8               	btfsc	status,2,c
 24921  001CAE  0012               	return	
 24922  001CB0  D7D4               	goto	l1853
 24923  001CB2                     __end_of_putsUSART:
 24924                           	opt stack 0
 24925                           tblptru	equ	0xFF8
 24926                           tblptrh	equ	0xFF7
 24927                           tblptrl	equ	0xFF6
 24928                           tablat	equ	0xFF5
 24929                           prodh	equ	0xFF4
 24930                           prodl	equ	0xFF3
 24931                           intcon	equ	0xFF2
 24932                           indf0	equ	0xFEF
 24933                           postinc0	equ	0xFEE
 24934                           fsr0h	equ	0xFEA
 24935                           fsr0l	equ	0xFE9
 24936                           wreg	equ	0xFE8
 24937                           indf1	equ	0xFE7
 24938                           postinc1	equ	0xFE6
 24939                           postdec1	equ	0xFE5
 24940                           fsr1h	equ	0xFE2
 24941                           fsr1l	equ	0xFE1
 24942                           indf2	equ	0xFDF
 24943                           postinc2	equ	0xFDE
 24944                           postdec2	equ	0xFDD
 24945                           plusw2	equ	0xFDB
 24946                           fsr2h	equ	0xFDA
 24947                           fsr2l	equ	0xFD9
 24948                           status	equ	0xFD8
 24949                           
 24950 ;; *************** function _WriteUSART *****************
 24951 ;; Defined at:
 24952 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24953 ;; Parameters:    Size  Location     Type
 24954 ;;  data            1    wreg     unsigned char 
 24955 ;; Auto vars:     Size  Location     Type
 24956 ;;  data            1    0[BANK0 ] unsigned char 
 24957 ;; Return value:  Size  Location     Type
 24958 ;;		None               void
 24959 ;; Registers used:
 24960 ;;		wreg
 24961 ;; Tracked objects:
 24962 ;;		On entry : 0/1
 24963 ;;		On exit  : 0/0
 24964 ;;		Unchanged: 0/0
 24965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24966 ;;      Params:         0       0       0       0       0       0       0
 24967 ;;      Locals:         0       1       0       0       0       0       0
 24968 ;;      Temps:          0       0       0       0       0       0       0
 24969 ;;      Totals:         0       1       0       0       0       0       0
 24970 ;;Total ram usage:        1 bytes
 24971 ;; Hardware stack levels used:    1
 24972 ;; Hardware stack levels required when called:    3
 24973 ;; This function calls:
 24974 ;;		Nothing
 24975 ;; This function is called by:
 24976 ;;		_doModeVerbose
 24977 ;;		_sendEscapedUartData
 24978 ;;		_sendVSCPDriverErrorFrame
 24979 ;;		_sendVSCPDriverAck
 24980 ;;		_sendVSCPDriverNack
 24981 ;;		_sendVSCPDriverCommandReply
 24982 ;;		_receiveSendEventCANAL
 24983 ;;		_receiveSendMultiEventCANAL
 24984 ;;		_sendVSCPModeCapabilities
 24985 ;;		_receiveSendEventSLCAN
 24986 ;;		_printBinary
 24987 ;;		_printFirmwareVersion
 24988 ;;		_putsUSART
 24989 ;; This function uses a non-reentrant model
 24990 ;;
 24991                           
 24992                           	psect	text68
 24993  0016F0                     __ptext68:
 24994                           	opt stack 0
 24995  0016F0                     _WriteUSART:
 24996                           	opt stack 24
 24997                           
 24998                           ;incstack = 0
 24999                           ;incstack = 0
 25000                           ;WriteUSART@data stored from wreg
 25001  0016F0  CFE8 F060          	movff	wreg,WriteUSART@data
 25002  0016F4  ACAC               	btfss	4012,6,c	;volatile
 25003  0016F6  D003               	goto	l15527
 25004  0016F8  90AC               	bcf	4012,0,c	;volatile
 25005  0016FA  B22A               	btfsc	_USART_Status,1,c
 25006  0016FC  80AC               	bsf	4012,0,c	;volatile
 25007  0016FE                     l15527:
 25008  0016FE  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25009  001702  0012               	return	
 25010  001704                     __end_of_WriteUSART:
 25011                           	opt stack 0
 25012                           tblptru	equ	0xFF8
 25013                           tblptrh	equ	0xFF7
 25014                           tblptrl	equ	0xFF6
 25015                           tablat	equ	0xFF5
 25016                           prodh	equ	0xFF4
 25017                           prodl	equ	0xFF3
 25018                           intcon	equ	0xFF2
 25019                           indf0	equ	0xFEF
 25020                           postinc0	equ	0xFEE
 25021                           fsr0h	equ	0xFEA
 25022                           fsr0l	equ	0xFE9
 25023                           wreg	equ	0xFE8
 25024                           indf1	equ	0xFE7
 25025                           postinc1	equ	0xFE6
 25026                           postdec1	equ	0xFE5
 25027                           fsr1h	equ	0xFE2
 25028                           fsr1l	equ	0xFE1
 25029                           indf2	equ	0xFDF
 25030                           postinc2	equ	0xFDE
 25031                           postdec2	equ	0xFDD
 25032                           plusw2	equ	0xFDB
 25033                           fsr2h	equ	0xFDA
 25034                           fsr2l	equ	0xFD9
 25035                           status	equ	0xFD8
 25036                           
 25037 ;; *************** function _init *****************
 25038 ;; Defined at:
 25039 ;;		line 399 in file "main.c"
 25040 ;; Parameters:    Size  Location     Type
 25041 ;;		None
 25042 ;; Auto vars:     Size  Location     Type
 25043 ;;		None
 25044 ;; Return value:  Size  Location     Type
 25045 ;;		None               void
 25046 ;; Registers used:
 25047 ;;		wreg, status,2, status,0, cstack
 25048 ;; Tracked objects:
 25049 ;;		On entry : 0/1
 25050 ;;		On exit  : F/0
 25051 ;;		Unchanged: 0/0
 25052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25053 ;;      Params:         0       0       0       0       0       0       0
 25054 ;;      Locals:         0       0       0       0       0       0       0
 25055 ;;      Temps:          0       0       0       0       0       0       0
 25056 ;;      Totals:         0       0       0       0       0       0       0
 25057 ;;Total ram usage:        0 bytes
 25058 ;; Hardware stack levels used:    1
 25059 ;; Hardware stack levels required when called:    5
 25060 ;; This function calls:
 25061 ;;		_WriteTimer0
 25062 ;;		_init_app_ram
 25063 ;;		_OpenUSART
 25064 ;;		_OpenTimer0
 25065 ;;		_ECANInitialize
 25066 ;; This function is called by:
 25067 ;;		_main
 25068 ;; This function uses a non-reentrant model
 25069 ;;
 25070                           
 25071                           	psect	text69
 25072  001B2E                     __ptext69:
 25073                           	opt stack 0
 25074  001B2E                     _init:
 25075                           	opt stack 24
 25076                           
 25077                           ;main.c: 401: init_app_ram();
 25078                           
 25079                           ;incstack = 0
 25080                           ;incstack = 0
 25081  001B2E  EC05  F00E         	call	_init_app_ram	;wreg free
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;main.c: 404: OSCCONbits.IRCF0 = 1;
 25085  001B32  88D3               	bsf	4051,4,c	;volatile
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;main.c: 405: OSCCONbits.IRCF1 = 1;
 25089  001B34  8AD3               	bsf	4051,5,c	;volatile
 25090                           
 25091                           ; BSR set to: 0
 25092                           ;main.c: 406: OSCCONbits.IRCF2 = 1;
 25093  001B36  8CD3               	bsf	4051,6,c	;volatile
 25094                           
 25095                           ; BSR set to: 0
 25096                           ;main.c: 407: OSCTUNEbits.PLLEN = 1;
 25097  001B38  8C9B               	bsf	3995,6,c	;volatile
 25098                           
 25099                           ; BSR set to: 0
 25100                           ;main.c: 409: TRISBbits.RB2 = 0;
 25101  001B3A  9493               	bcf	3987,2,c	;volatile
 25102                           
 25103                           ; BSR set to: 0
 25104                           ;main.c: 410: TRISBbits.RB3 = 1;
 25105  001B3C  8693               	bsf	3987,3,c	;volatile
 25106                           
 25107                           ; BSR set to: 0
 25108                           ;main.c: 412: TRISCbits.RC1 = 0;
 25109  001B3E  9294               	bcf	3988,1,c	;volatile
 25110                           
 25111                           ; BSR set to: 0
 25112                           ;main.c: 413: TRISCbits.RC6 = 0;
 25113  001B40  9C94               	bcf	3988,6,c	;volatile
 25114                           
 25115                           ; BSR set to: 0
 25116                           ;main.c: 414: TRISCbits.RC7 = 1;
 25117  001B42  8E94               	bsf	3988,7,c	;volatile
 25118                           
 25119                           ;main.c: 418: OpenUSART( 0b01111111 &
 25120                           ;main.c: 419: 0b11111111 &
 25121                           ;main.c: 420: 0b11111110 &
 25122                           ;main.c: 421: 0b11111101 &
 25123                           ;main.c: 422: 0b11111111,
 25124                           ;main.c: 423: 21 );
 25125  001B44  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25126  001B46  0E15               	movlw	21
 25127  001B48  6F60               	movwf	?_OpenUSART& (0+255),b
 25128  001B4A  0E7C               	movlw	124
 25129  001B4C  EC85  F00E         	call	_OpenUSART
 25130                           
 25131                           ; BSR set to: 0
 25132                           ;main.c: 425: RCIF = 0;
 25133  001B50  9A9E               	bcf	3998,5,c	;volatile
 25134                           
 25135                           ; BSR set to: 0
 25136                           ;main.c: 426: RCIP = 0;
 25137  001B52  9A9F               	bcf	3999,5,c	;volatile
 25138                           
 25139                           ; BSR set to: 0
 25140                           ;main.c: 427: RCIE = 1;
 25141  001B54  8A9D               	bsf	3997,5,c	;volatile
 25142                           
 25143                           ; BSR set to: 0
 25144                           ;main.c: 428: PEIE = 1;
 25145  001B56  8CF2               	bsf	intcon,6,c	;volatile
 25146                           
 25147                           ; BSR set to: 0
 25148                           ;main.c: 431: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25149  001B58  0E92               	movlw	146
 25150  001B5A  ECA9  F00B         	call	_OpenTimer0
 25151                           
 25152                           ; BSR set to: 0
 25153                           ;main.c: 432: WriteTimer0(0xfb1d);
 25154  001B5E  0EFB               	movlw	251
 25155  001B60  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25156  001B62  0E1D               	movlw	29
 25157  001B64  6F60               	movwf	?_WriteTimer0& (0+255),b
 25158  001B66  EC6F  F00B         	call	_WriteTimer0	;wreg free
 25159                           
 25160                           ;main.c: 435: ECANInitialize();
 25161  001B6A  ECCE  F010         	call	_ECANInitialize	;wreg free
 25162                           
 25163                           ; BSR set to: 0
 25164                           ;main.c: 459: RXBnIE = 1;
 25165  001B6E  82A3               	bsf	4003,1,c	;volatile
 25166                           
 25167                           ; BSR set to: 0
 25168                           ;main.c: 460: ERRIE = 1;
 25169  001B70  8AA3               	bsf	4003,5,c	;volatile
 25170                           
 25171                           ; BSR set to: 0
 25172                           ;main.c: 462: (INTCONbits.GIE = 1);
 25173  001B72  8EF2               	bsf	intcon,7,c	;volatile
 25174                           
 25175                           ; BSR set to: 0
 25176  001B74  0012               	return	
 25177  001B76                     __end_of_init:
 25178                           	opt stack 0
 25179                           tblptru	equ	0xFF8
 25180                           tblptrh	equ	0xFF7
 25181                           tblptrl	equ	0xFF6
 25182                           tablat	equ	0xFF5
 25183                           prodh	equ	0xFF4
 25184                           prodl	equ	0xFF3
 25185                           intcon	equ	0xFF2
 25186                           indf0	equ	0xFEF
 25187                           postinc0	equ	0xFEE
 25188                           fsr0h	equ	0xFEA
 25189                           fsr0l	equ	0xFE9
 25190                           wreg	equ	0xFE8
 25191                           indf1	equ	0xFE7
 25192                           postinc1	equ	0xFE6
 25193                           postdec1	equ	0xFE5
 25194                           fsr1h	equ	0xFE2
 25195                           fsr1l	equ	0xFE1
 25196                           indf2	equ	0xFDF
 25197                           postinc2	equ	0xFDE
 25198                           postdec2	equ	0xFDD
 25199                           plusw2	equ	0xFDB
 25200                           fsr2h	equ	0xFDA
 25201                           fsr2l	equ	0xFD9
 25202                           status	equ	0xFD8
 25203                           
 25204 ;; *************** function _ECANInitialize *****************
 25205 ;; Defined at:
 25206 ;;		line 168 in file "ECAN.c"
 25207 ;; Parameters:    Size  Location     Type
 25208 ;;		None
 25209 ;; Auto vars:     Size  Location     Type
 25210 ;;		None
 25211 ;; Return value:  Size  Location     Type
 25212 ;;		None               void
 25213 ;; Registers used:
 25214 ;;		wreg, status,2, status,0, cstack
 25215 ;; Tracked objects:
 25216 ;;		On entry : F/0
 25217 ;;		On exit  : F/0
 25218 ;;		Unchanged: 0/0
 25219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25220 ;;      Params:         0       0       0       0       0       0       0
 25221 ;;      Locals:         0       0       0       0       0       0       0
 25222 ;;      Temps:          0       0       0       0       0       0       0
 25223 ;;      Totals:         0       0       0       0       0       0       0
 25224 ;;Total ram usage:        0 bytes
 25225 ;; Hardware stack levels used:    1
 25226 ;; Hardware stack levels required when called:    4
 25227 ;; This function calls:
 25228 ;;		_ECANSetOperationMode
 25229 ;; This function is called by:
 25230 ;;		_init
 25231 ;; This function uses a non-reentrant model
 25232 ;;
 25233                           
 25234                           	psect	text70
 25235  00219C                     __ptext70:
 25236                           	opt stack 0
 25237  00219C                     _ECANInitialize:
 25238                           	opt stack 24
 25239                           
 25240                           ; BSR set to: 0
 25241                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25242                           
 25243                           ; BSR set to: 0
 25244                           ;incstack = 0
 25245                           ;incstack = 0
 25246  00219C  0E80               	movlw	128
 25247  00219E  EC8D  F00B         	call	_ECANSetOperationMode
 25248                           
 25249                           ; BSR set to: 0
 25250                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25251  0021A2  0E09               	movlw	9
 25252  0021A4  6E70               	movwf	3952,c	;volatile
 25253                           
 25254                           ; BSR set to: 0
 25255                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25256  0021A6  0EFC               	movlw	252
 25257  0021A8  6E71               	movwf	3953,c	;volatile
 25258                           
 25259                           ; BSR set to: 0
 25260                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25261                           ;ECAN.c: 181: (0 << 6) |
 25262                           ;ECAN.c: 182: (2-1);
 25263  0021AA  0E01               	movlw	1
 25264  0021AC  6E72               	movwf	3954,c	;volatile
 25265                           
 25266                           ; BSR set to: 0
 25267                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25268  0021AE  0E20               	movlw	32
 25269  0021B0  6E73               	movwf	3955,c	;volatile
 25270                           
 25271                           ; BSR set to: 0
 25272                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25273  0021B2  8E77               	bsf	3959,7,c	;volatile
 25274                           
 25275                           ; BSR set to: 0
 25276                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25277  0021B4  9C77               	bcf	3959,6,c	;volatile
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;ECAN.c: 205: RXB0CON = 0;
 25281  0021B6  6A60               	clrf	3936,c	;volatile
 25282                           
 25283                           ; BSR set to: 0
 25284                           ;ECAN.c: 211: RXB1CON = 0;
 25285  0021B8  010F               	movlb	15	; () banked
 25286  0021BA  6B50               	clrf	80,b	;volatile
 25287                           
 25288                           ; BSR set to: 15
 25289                           ;ECAN.c: 221: B0CON = 0;
 25290  0021BC  010E               	movlb	14	; () banked
 25291  0021BE  6B20               	clrf	32,b	;volatile
 25292                           
 25293                           ; BSR set to: 14
 25294                           ;ECAN.c: 231: B1CON = 0;
 25295  0021C0  6B30               	clrf	48,b	;volatile
 25296                           
 25297                           ; BSR set to: 14
 25298                           ;ECAN.c: 241: B2CON = 0;
 25299  0021C2  6B40               	clrf	64,b	;volatile
 25300                           
 25301                           ; BSR set to: 14
 25302                           ;ECAN.c: 251: B3CON = 0;
 25303  0021C4  6B50               	clrf	80,b	;volatile
 25304                           
 25305                           ; BSR set to: 14
 25306                           ;ECAN.c: 261: B4CON = 0;
 25307  0021C6  6B60               	clrf	96,b	;volatile
 25308                           
 25309                           ; BSR set to: 14
 25310                           ;ECAN.c: 271: B5CON = 0;
 25311  0021C8  6B70               	clrf	112,b	;volatile
 25312                           
 25313                           ; BSR set to: 14
 25314                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25315  0021CA  010D               	movlb	13	; () banked
 25316  0021CC  6BF8               	clrf	248,b	;volatile
 25317                           
 25318                           ; BSR set to: 13
 25319                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25320  0021CE  010F               	movlb	15	; () banked
 25321  0021D0  6B00               	clrf	0,b	;volatile
 25322                           
 25323                           ; BSR set to: 15
 25324  0021D2  0E08               	movlw	8
 25325  0021D4  6F01               	movwf	1,b	;volatile
 25326                           
 25327                           ; BSR set to: 15
 25328  0021D6  6B02               	clrf	2,b	;volatile
 25329                           
 25330                           ; BSR set to: 15
 25331  0021D8  6B03               	clrf	3,b	;volatile
 25332                           
 25333                           ; BSR set to: 15
 25334                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25335  0021DA  0E01               	movlw	1
 25336  0021DC  010D               	movlb	13	; () banked
 25337  0021DE  6FD4               	movwf	212,b	;volatile
 25338                           
 25339                           ; BSR set to: 13
 25340                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25341  0021E0  6BD5               	clrf	213,b	;volatile
 25342                           
 25343                           ; BSR set to: 13
 25344                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25345  0021E2  6BE0               	clrf	224,b	;volatile
 25346                           
 25347                           ; BSR set to: 13
 25348                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25349  0021E4  0E11               	movlw	17
 25350  0021E6  6FE1               	movwf	225,b	;volatile
 25351                           
 25352                           ; BSR set to: 13
 25353                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25354  0021E8  6FE2               	movwf	226,b	;volatile
 25355                           
 25356                           ; BSR set to: 13
 25357                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25358  0021EA  6BE3               	clrf	227,b	;volatile
 25359                           
 25360                           ; BSR set to: 13
 25361                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25362  0021EC  6BE4               	clrf	228,b	;volatile
 25363                           
 25364                           ; BSR set to: 13
 25365                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25366  0021EE  6BE5               	clrf	229,b	;volatile
 25367                           
 25368                           ; BSR set to: 13
 25369                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25370  0021F0  6BE6               	clrf	230,b	;volatile
 25371                           
 25372                           ; BSR set to: 13
 25373                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25374  0021F2  6BE7               	clrf	231,b	;volatile
 25375                           
 25376                           ; BSR set to: 13
 25377                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25378  0021F4  0E54               	movlw	84
 25379  0021F6  6FF0               	movwf	240,b	;volatile
 25380                           
 25381                           ; BSR set to: 13
 25382                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25383  0021F8  0E05               	movlw	5
 25384  0021FA  6FF1               	movwf	241,b	;volatile
 25385                           
 25386                           ; BSR set to: 13
 25387                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25388  0021FC  6BF2               	clrf	242,b	;volatile
 25389                           
 25390                           ; BSR set to: 13
 25391                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25392  0021FE  6BF2               	clrf	242,b	;volatile
 25393                           
 25394                           ; BSR set to: 13
 25395                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25396  002200  010F               	movlb	15	; () banked
 25397  002202  6B18               	clrf	24,b	;volatile
 25398                           
 25399                           ; BSR set to: 15
 25400  002204  6B19               	clrf	25,b	;volatile
 25401                           
 25402                           ; BSR set to: 15
 25403  002206  6B1A               	clrf	26,b	;volatile
 25404                           
 25405                           ; BSR set to: 15
 25406  002208  6B1B               	clrf	27,b	;volatile
 25407                           
 25408                           ; BSR set to: 15
 25409                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25410  00220A  8719               	bsf	25,3,b	;volatile
 25411                           
 25412                           ; BSR set to: 15
 25413                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25414  00220C  6B1C               	clrf	28,b	;volatile
 25415                           
 25416                           ; BSR set to: 15
 25417  00220E  6B1D               	clrf	29,b	;volatile
 25418                           
 25419                           ; BSR set to: 15
 25420  002210  6B1E               	clrf	30,b	;volatile
 25421                           
 25422                           ; BSR set to: 15
 25423  002212  6B1F               	clrf	31,b	;volatile
 25424                           
 25425                           ; BSR set to: 15
 25426                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25427  002214  871D               	bsf	29,3,b	;volatile
 25428                           
 25429                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25430  002216  0E20               	movlw	32
 25431  002218  EF8D  F00B         	goto	_ECANSetOperationMode
 25432  00221C                     __end_of_ECANInitialize:
 25433                           	opt stack 0
 25434                           tblptru	equ	0xFF8
 25435                           tblptrh	equ	0xFF7
 25436                           tblptrl	equ	0xFF6
 25437                           tablat	equ	0xFF5
 25438                           prodh	equ	0xFF4
 25439                           prodl	equ	0xFF3
 25440                           intcon	equ	0xFF2
 25441                           indf0	equ	0xFEF
 25442                           postinc0	equ	0xFEE
 25443                           fsr0h	equ	0xFEA
 25444                           fsr0l	equ	0xFE9
 25445                           wreg	equ	0xFE8
 25446                           indf1	equ	0xFE7
 25447                           postinc1	equ	0xFE6
 25448                           postdec1	equ	0xFE5
 25449                           fsr1h	equ	0xFE2
 25450                           fsr1l	equ	0xFE1
 25451                           indf2	equ	0xFDF
 25452                           postinc2	equ	0xFDE
 25453                           postdec2	equ	0xFDD
 25454                           plusw2	equ	0xFDB
 25455                           fsr2h	equ	0xFDA
 25456                           fsr2l	equ	0xFD9
 25457                           status	equ	0xFD8
 25458                           
 25459 ;; *************** function _ECANSetOperationMode *****************
 25460 ;; Defined at:
 25461 ;;		line 1014 in file "ECAN.c"
 25462 ;; Parameters:    Size  Location     Type
 25463 ;;  mode            1    wreg     enum E16346
 25464 ;; Auto vars:     Size  Location     Type
 25465 ;;  mode            1    0[BANK0 ] enum E16346
 25466 ;; Return value:  Size  Location     Type
 25467 ;;		None               void
 25468 ;; Registers used:
 25469 ;;		wreg, status,2, status,0
 25470 ;; Tracked objects:
 25471 ;;		On entry : 0/0
 25472 ;;		On exit  : F/0
 25473 ;;		Unchanged: 0/0
 25474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25475 ;;      Params:         0       0       0       0       0       0       0
 25476 ;;      Locals:         0       1       0       0       0       0       0
 25477 ;;      Temps:          0       0       0       0       0       0       0
 25478 ;;      Totals:         0       1       0       0       0       0       0
 25479 ;;Total ram usage:        1 bytes
 25480 ;; Hardware stack levels used:    1
 25481 ;; Hardware stack levels required when called:    3
 25482 ;; This function calls:
 25483 ;;		Nothing
 25484 ;; This function is called by:
 25485 ;;		_doModeVerbose
 25486 ;;		_doModeVscp
 25487 ;;		_doModeSLCAN
 25488 ;;		_ECANInitialize
 25489 ;; This function uses a non-reentrant model
 25490 ;;
 25491                           
 25492                           	psect	text71
 25493  00171A                     __ptext71:
 25494                           	opt stack 0
 25495  00171A                     _ECANSetOperationMode:
 25496                           	opt stack 25
 25497                           
 25498                           ; BSR set to: 0
 25499                           ;incstack = 0
 25500                           ;incstack = 0
 25501                           ;ECANSetOperationMode@mode stored from wreg
 25502  00171A  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25503                           
 25504                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25505  00171E  0E1F               	movlw	31
 25506  001720  166F               	andwf	3951,f,c	;volatile
 25507                           
 25508                           ;ECAN.c: 1016: CANCON |= mode;
 25509  001722  0100               	movlb	0	; () banked
 25510  001724  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25511  001726  126F               	iorwf	3951,f,c	;volatile
 25512  001728                     l14849:
 25513                           
 25514                           ; BSR set to: 0
 25515  001728  506F               	movf	3951,w,c	;volatile
 25516  00172A  0BE0               	andlw	224
 25517  00172C  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25518  00172E  B4D8               	btfsc	status,2,c
 25519                           
 25520                           ; BSR set to: 0
 25521  001730  0012               	return	
 25522  001732  D7FA               	goto	l14849
 25523  001734                     __end_of_ECANSetOperationMode:
 25524                           	opt stack 0
 25525                           tblptru	equ	0xFF8
 25526                           tblptrh	equ	0xFF7
 25527                           tblptrl	equ	0xFF6
 25528                           tablat	equ	0xFF5
 25529                           prodh	equ	0xFF4
 25530                           prodl	equ	0xFF3
 25531                           intcon	equ	0xFF2
 25532                           indf0	equ	0xFEF
 25533                           postinc0	equ	0xFEE
 25534                           fsr0h	equ	0xFEA
 25535                           fsr0l	equ	0xFE9
 25536                           wreg	equ	0xFE8
 25537                           indf1	equ	0xFE7
 25538                           postinc1	equ	0xFE6
 25539                           postdec1	equ	0xFE5
 25540                           fsr1h	equ	0xFE2
 25541                           fsr1l	equ	0xFE1
 25542                           indf2	equ	0xFDF
 25543                           postinc2	equ	0xFDE
 25544                           postdec2	equ	0xFDD
 25545                           plusw2	equ	0xFDB
 25546                           fsr2h	equ	0xFDA
 25547                           fsr2l	equ	0xFD9
 25548                           status	equ	0xFD8
 25549                           
 25550 ;; *************** function _OpenTimer0 *****************
 25551 ;; Defined at:
 25552 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25553 ;; Parameters:    Size  Location     Type
 25554 ;;  config          1    wreg     unsigned char 
 25555 ;; Auto vars:     Size  Location     Type
 25556 ;;  config          1    0[BANK0 ] unsigned char 
 25557 ;; Return value:  Size  Location     Type
 25558 ;;		None               void
 25559 ;; Registers used:
 25560 ;;		wreg, status,2, status,0
 25561 ;; Tracked objects:
 25562 ;;		On entry : F/0
 25563 ;;		On exit  : F/0
 25564 ;;		Unchanged: 0/0
 25565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25566 ;;      Params:         0       0       0       0       0       0       0
 25567 ;;      Locals:         0       1       0       0       0       0       0
 25568 ;;      Temps:          0       0       0       0       0       0       0
 25569 ;;      Totals:         0       1       0       0       0       0       0
 25570 ;;Total ram usage:        1 bytes
 25571 ;; Hardware stack levels used:    1
 25572 ;; Hardware stack levels required when called:    3
 25573 ;; This function calls:
 25574 ;;		Nothing
 25575 ;; This function is called by:
 25576 ;;		_init
 25577 ;; This function uses a non-reentrant model
 25578 ;;
 25579                           
 25580                           	psect	text72
 25581  001752                     __ptext72:
 25582                           	opt stack 0
 25583  001752                     _OpenTimer0:
 25584                           	opt stack 25
 25585                           
 25586                           ; BSR set to: 0
 25587                           ;incstack = 0
 25588                           ;incstack = 0
 25589                           ;OpenTimer0@config stored from wreg
 25590  001752  CFE8 F060          	movff	wreg,OpenTimer0@config
 25591                           
 25592                           ; BSR set to: 0
 25593  001756  5160               	movf	OpenTimer0@config& (0+255),w,b
 25594  001758  0B7F               	andlw	127
 25595  00175A  6ED5               	movwf	4053,c	;volatile
 25596                           
 25597                           ; BSR set to: 0
 25598  00175C  6AD7               	clrf	4055,c	;volatile
 25599                           
 25600                           ; BSR set to: 0
 25601  00175E  6AD6               	clrf	4054,c	;volatile
 25602                           
 25603                           ; BSR set to: 0
 25604  001760  94F2               	bcf	intcon,2,c	;volatile
 25605                           
 25606                           ; BSR set to: 0
 25607  001762  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25608  001764  D002               	goto	l1803
 25609                           
 25610                           ; BSR set to: 0
 25611  001766  8AF2               	bsf	intcon,5,c	;volatile
 25612  001768  D001               	goto	l1804
 25613  00176A                     l1803:
 25614                           
 25615                           ; BSR set to: 0
 25616  00176A  9AF2               	bcf	intcon,5,c	;volatile
 25617  00176C                     l1804:
 25618                           
 25619                           ; BSR set to: 0
 25620  00176C  8ED5               	bsf	4053,7,c	;volatile
 25621                           
 25622                           ; BSR set to: 0
 25623  00176E  0012               	return	
 25624  001770                     __end_of_OpenTimer0:
 25625                           	opt stack 0
 25626                           tblptru	equ	0xFF8
 25627                           tblptrh	equ	0xFF7
 25628                           tblptrl	equ	0xFF6
 25629                           tablat	equ	0xFF5
 25630                           prodh	equ	0xFF4
 25631                           prodl	equ	0xFF3
 25632                           intcon	equ	0xFF2
 25633                           indf0	equ	0xFEF
 25634                           postinc0	equ	0xFEE
 25635                           fsr0h	equ	0xFEA
 25636                           fsr0l	equ	0xFE9
 25637                           wreg	equ	0xFE8
 25638                           indf1	equ	0xFE7
 25639                           postinc1	equ	0xFE6
 25640                           postdec1	equ	0xFE5
 25641                           fsr1h	equ	0xFE2
 25642                           fsr1l	equ	0xFE1
 25643                           indf2	equ	0xFDF
 25644                           postinc2	equ	0xFDE
 25645                           postdec2	equ	0xFDD
 25646                           plusw2	equ	0xFDB
 25647                           fsr2h	equ	0xFDA
 25648                           fsr2l	equ	0xFD9
 25649                           status	equ	0xFD8
 25650                           
 25651 ;; *************** function _OpenUSART *****************
 25652 ;; Defined at:
 25653 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25654 ;; Parameters:    Size  Location     Type
 25655 ;;  config          1    wreg     unsigned char 
 25656 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25657 ;; Auto vars:     Size  Location     Type
 25658 ;;  config          1    2[BANK0 ] unsigned char 
 25659 ;; Return value:  Size  Location     Type
 25660 ;;		None               void
 25661 ;; Registers used:
 25662 ;;		wreg, status,2
 25663 ;; Tracked objects:
 25664 ;;		On entry : F/0
 25665 ;;		On exit  : F/0
 25666 ;;		Unchanged: 0/0
 25667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25668 ;;      Params:         0       2       0       0       0       0       0
 25669 ;;      Locals:         0       1       0       0       0       0       0
 25670 ;;      Temps:          0       0       0       0       0       0       0
 25671 ;;      Totals:         0       3       0       0       0       0       0
 25672 ;;Total ram usage:        3 bytes
 25673 ;; Hardware stack levels used:    1
 25674 ;; Hardware stack levels required when called:    3
 25675 ;; This function calls:
 25676 ;;		Nothing
 25677 ;; This function is called by:
 25678 ;;		_init
 25679 ;; This function uses a non-reentrant model
 25680 ;;
 25681                           
 25682                           	psect	text73
 25683  001D0A                     __ptext73:
 25684                           	opt stack 0
 25685  001D0A                     _OpenUSART:
 25686                           	opt stack 25
 25687                           
 25688                           ; BSR set to: 0
 25689                           ;incstack = 0
 25690                           ;incstack = 0
 25691                           ;OpenUSART@config stored from wreg
 25692  001D0A  CFE8 F062          	movff	wreg,OpenUSART@config
 25693                           
 25694                           ; BSR set to: 0
 25695  001D0E  6AAC               	clrf	4012,c	;volatile
 25696  001D10  6AAB               	clrf	4011,c	;volatile
 25697                           
 25698                           ; BSR set to: 0
 25699  001D12  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25700                           
 25701                           ; BSR set to: 0
 25702  001D14  88AC               	bsf	4012,4,c	;volatile
 25703                           
 25704                           ; BSR set to: 0
 25705  001D16  A362               	btfss	OpenUSART@config& (0+255),1,b
 25706  001D18  D002               	goto	l14539
 25707                           
 25708                           ; BSR set to: 0
 25709  001D1A  8CAC               	bsf	4012,6,c	;volatile
 25710  001D1C  8CAB               	bsf	4011,6,c	;volatile
 25711  001D1E                     l14539:
 25712                           
 25713                           ; BSR set to: 0
 25714  001D1E  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25715                           
 25716                           ; BSR set to: 0
 25717  001D20  8EAC               	bsf	4012,7,c	;volatile
 25718                           
 25719                           ; BSR set to: 0
 25720  001D22  A762               	btfss	OpenUSART@config& (0+255),3,b
 25721  001D24  D002               	goto	l1836
 25722                           
 25723                           ; BSR set to: 0
 25724  001D26  88AB               	bsf	4011,4,c	;volatile
 25725  001D28  D001               	goto	l14547
 25726  001D2A                     l1836:
 25727                           
 25728                           ; BSR set to: 0
 25729  001D2A  8AAB               	bsf	4011,5,c	;volatile
 25730  001D2C                     l14547:
 25731                           
 25732                           ; BSR set to: 0
 25733  001D2C  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25734                           
 25735                           ; BSR set to: 0
 25736  001D2E  84AC               	bsf	4012,2,c	;volatile
 25737                           
 25738                           ; BSR set to: 0
 25739  001D30  989E               	bcf	3998,4,c	;volatile
 25740                           
 25741                           ; BSR set to: 0
 25742  001D32  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25743                           
 25744                           ; BSR set to: 0
 25745  001D34  86AB               	bsf	4011,3,c	;volatile
 25746                           
 25747                           ; BSR set to: 0
 25748  001D36  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25749  001D38  D002               	goto	l1840
 25750                           
 25751                           ; BSR set to: 0
 25752  001D3A  8A9D               	bsf	3997,5,c	;volatile
 25753  001D3C  D001               	goto	l1841
 25754  001D3E                     l1840:
 25755                           
 25756                           ; BSR set to: 0
 25757  001D3E  9A9D               	bcf	3997,5,c	;volatile
 25758  001D40                     l1841:
 25759                           
 25760                           ; BSR set to: 0
 25761  001D40  9A9E               	bcf	3998,5,c	;volatile
 25762                           
 25763                           ; BSR set to: 0
 25764  001D42  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25765  001D44  D002               	goto	l1842
 25766                           
 25767                           ; BSR set to: 0
 25768  001D46  889D               	bsf	3997,4,c	;volatile
 25769  001D48  D001               	goto	l1843
 25770  001D4A                     l1842:
 25771                           
 25772                           ; BSR set to: 0
 25773  001D4A  989D               	bcf	3997,4,c	;volatile
 25774  001D4C                     l1843:
 25775                           
 25776                           ; BSR set to: 0
 25777  001D4C  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25778                           
 25779                           ; BSR set to: 0
 25780  001D50  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25781  001D52  6EB0               	movwf	4016,c	;volatile
 25782                           
 25783                           ; BSR set to: 0
 25784  001D54  8AAC               	bsf	4012,5,c	;volatile
 25785                           
 25786                           ; BSR set to: 0
 25787  001D56  8EAB               	bsf	4011,7,c	;volatile
 25788                           
 25789                           ; BSR set to: 0
 25790  001D58  9C94               	bcf	3988,6,c	;volatile
 25791                           
 25792                           ; BSR set to: 0
 25793  001D5A  8E94               	bsf	3988,7,c	;volatile
 25794                           
 25795                           ; BSR set to: 0
 25796  001D5C  B8AC               	btfsc	4012,4,c	;volatile
 25797                           
 25798                           ; BSR set to: 0
 25799  001D5E  BEAC               	btfsc	4012,7,c	;volatile
 25800  001D60  D001               	goto	l1845
 25801                           
 25802                           ; BSR set to: 0
 25803  001D62  8C94               	bsf	3988,6,c	;volatile
 25804  001D64                     l1845:
 25805                           
 25806                           ; BSR set to: 0
 25807  001D64  0012               	return	
 25808  001D66                     __end_of_OpenUSART:
 25809                           	opt stack 0
 25810                           tblptru	equ	0xFF8
 25811                           tblptrh	equ	0xFF7
 25812                           tblptrl	equ	0xFF6
 25813                           tablat	equ	0xFF5
 25814                           prodh	equ	0xFF4
 25815                           prodl	equ	0xFF3
 25816                           intcon	equ	0xFF2
 25817                           indf0	equ	0xFEF
 25818                           postinc0	equ	0xFEE
 25819                           fsr0h	equ	0xFEA
 25820                           fsr0l	equ	0xFE9
 25821                           wreg	equ	0xFE8
 25822                           indf1	equ	0xFE7
 25823                           postinc1	equ	0xFE6
 25824                           postdec1	equ	0xFE5
 25825                           fsr1h	equ	0xFE2
 25826                           fsr1l	equ	0xFE1
 25827                           indf2	equ	0xFDF
 25828                           postinc2	equ	0xFDE
 25829                           postdec2	equ	0xFDD
 25830                           plusw2	equ	0xFDB
 25831                           fsr2h	equ	0xFDA
 25832                           fsr2l	equ	0xFD9
 25833                           status	equ	0xFD8
 25834                           
 25835 ;; *************** function _WriteTimer0 *****************
 25836 ;; Defined at:
 25837 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25838 ;; Parameters:    Size  Location     Type
 25839 ;;  timer0          2    0[BANK0 ] unsigned int 
 25840 ;; Auto vars:     Size  Location     Type
 25841 ;;  timer           2    2[BANK0 ] struct Timers
 25842 ;; Return value:  Size  Location     Type
 25843 ;;		None               void
 25844 ;; Registers used:
 25845 ;;		None
 25846 ;; Tracked objects:
 25847 ;;		On entry : F/0
 25848 ;;		On exit  : F/0
 25849 ;;		Unchanged: F/0
 25850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25851 ;;      Params:         0       2       0       0       0       0       0
 25852 ;;      Locals:         0       2       0       0       0       0       0
 25853 ;;      Temps:          0       0       0       0       0       0       0
 25854 ;;      Totals:         0       4       0       0       0       0       0
 25855 ;;Total ram usage:        4 bytes
 25856 ;; Hardware stack levels used:    1
 25857 ;; Hardware stack levels required when called:    3
 25858 ;; This function calls:
 25859 ;;		Nothing
 25860 ;; This function is called by:
 25861 ;;		_init
 25862 ;; This function uses a non-reentrant model
 25863 ;;
 25864                           
 25865                           	psect	text74
 25866  0016DE                     __ptext74:
 25867                           	opt stack 0
 25868  0016DE                     _WriteTimer0:
 25869                           	opt stack 25
 25870                           
 25871                           ; BSR set to: 0
 25872                           
 25873                           ; BSR set to: 0
 25874                           ;incstack = 0
 25875                           ;incstack = 0
 25876  0016DE  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25877  0016E2  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25878  0016E6  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25879  0016EA  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25880                           
 25881                           ; BSR set to: 0
 25882  0016EE  0012               	return	
 25883  0016F0                     __end_of_WriteTimer0:
 25884                           	opt stack 0
 25885                           tblptru	equ	0xFF8
 25886                           tblptrh	equ	0xFF7
 25887                           tblptrl	equ	0xFF6
 25888                           tablat	equ	0xFF5
 25889                           prodh	equ	0xFF4
 25890                           prodl	equ	0xFF3
 25891                           intcon	equ	0xFF2
 25892                           indf0	equ	0xFEF
 25893                           postinc0	equ	0xFEE
 25894                           fsr0h	equ	0xFEA
 25895                           fsr0l	equ	0xFE9
 25896                           wreg	equ	0xFE8
 25897                           indf1	equ	0xFE7
 25898                           postinc1	equ	0xFE6
 25899                           postdec1	equ	0xFE5
 25900                           fsr1h	equ	0xFE2
 25901                           fsr1l	equ	0xFE1
 25902                           indf2	equ	0xFDF
 25903                           postinc2	equ	0xFDE
 25904                           postdec2	equ	0xFDD
 25905                           plusw2	equ	0xFDB
 25906                           fsr2h	equ	0xFDA
 25907                           fsr2l	equ	0xFD9
 25908                           status	equ	0xFD8
 25909                           
 25910 ;; *************** function _vscp_restoreDefaults *****************
 25911 ;; Defined at:
 25912 ;;		line 2786 in file "main.c"
 25913 ;; Parameters:    Size  Location     Type
 25914 ;;		None
 25915 ;; Auto vars:     Size  Location     Type
 25916 ;;		None
 25917 ;; Return value:  Size  Location     Type
 25918 ;;		None               void
 25919 ;; Registers used:
 25920 ;;		wreg, status,2, status,0, cstack
 25921 ;; Tracked objects:
 25922 ;;		On entry : 0/1
 25923 ;;		On exit  : F/0
 25924 ;;		Unchanged: 0/0
 25925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25926 ;;      Params:         0       0       0       0       0       0       0
 25927 ;;      Locals:         0       0       0       0       0       0       0
 25928 ;;      Temps:          0       0       0       0       0       0       0
 25929 ;;      Totals:         0       0       0       0       0       0       0
 25930 ;;Total ram usage:        0 bytes
 25931 ;; Hardware stack levels used:    1
 25932 ;; Hardware stack levels required when called:    5
 25933 ;; This function calls:
 25934 ;;		_init_app_ram
 25935 ;;		_init_app_eeprom
 25936 ;; This function is called by:
 25937 ;;		_main
 25938 ;; This function uses a non-reentrant model
 25939 ;;
 25940                           
 25941                           	psect	text75
 25942  0016B2                     __ptext75:
 25943                           	opt stack 0
 25944  0016B2                     _vscp_restoreDefaults:
 25945                           	opt stack 24
 25946                           
 25947                           ;main.c: 2787: init_app_eeprom();
 25948                           
 25949                           ; BSR set to: 0
 25950                           ;incstack = 0
 25951                           ;incstack = 0
 25952  0016B2  ECB7  F014         	call	_init_app_eeprom	;wreg free
 25953                           
 25954                           ; BSR set to: 0
 25955                           ;main.c: 2788: init_app_ram();
 25956  0016B6  EF05  F00E         	goto	_init_app_ram	;wreg free
 25957  0016BA                     __end_of_vscp_restoreDefaults:
 25958                           	opt stack 0
 25959                           tblptru	equ	0xFF8
 25960                           tblptrh	equ	0xFF7
 25961                           tblptrl	equ	0xFF6
 25962                           tablat	equ	0xFF5
 25963                           prodh	equ	0xFF4
 25964                           prodl	equ	0xFF3
 25965                           intcon	equ	0xFF2
 25966                           indf0	equ	0xFEF
 25967                           postinc0	equ	0xFEE
 25968                           fsr0h	equ	0xFEA
 25969                           fsr0l	equ	0xFE9
 25970                           wreg	equ	0xFE8
 25971                           indf1	equ	0xFE7
 25972                           postinc1	equ	0xFE6
 25973                           postdec1	equ	0xFE5
 25974                           fsr1h	equ	0xFE2
 25975                           fsr1l	equ	0xFE1
 25976                           indf2	equ	0xFDF
 25977                           postinc2	equ	0xFDE
 25978                           postdec2	equ	0xFDD
 25979                           plusw2	equ	0xFDB
 25980                           fsr2h	equ	0xFDA
 25981                           fsr2l	equ	0xFD9
 25982                           status	equ	0xFD8
 25983                           
 25984 ;; *************** function _init_app_eeprom *****************
 25985 ;; Defined at:
 25986 ;;		line 489 in file "main.c"
 25987 ;; Parameters:    Size  Location     Type
 25988 ;;		None
 25989 ;; Auto vars:     Size  Location     Type
 25990 ;;  i               1    4[BANK0 ] unsigned char 
 25991 ;; Return value:  Size  Location     Type
 25992 ;;		None               void
 25993 ;; Registers used:
 25994 ;;		wreg, status,2, status,0, cstack
 25995 ;; Tracked objects:
 25996 ;;		On entry : 0/1
 25997 ;;		On exit  : F/0
 25998 ;;		Unchanged: 0/0
 25999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26000 ;;      Params:         0       0       0       0       0       0       0
 26001 ;;      Locals:         0       1       0       0       0       0       0
 26002 ;;      Temps:          0       0       0       0       0       0       0
 26003 ;;      Totals:         0       1       0       0       0       0       0
 26004 ;;Total ram usage:        1 bytes
 26005 ;; Hardware stack levels used:    1
 26006 ;; Hardware stack levels required when called:    4
 26007 ;; This function calls:
 26008 ;;		_Busy_eep
 26009 ;;		_Write_b_eep
 26010 ;; This function is called by:
 26011 ;;		_vscp_restoreDefaults
 26012 ;; This function uses a non-reentrant model
 26013 ;;
 26014                           
 26015                           	psect	text76
 26016  00296E                     __ptext76:
 26017                           	opt stack 0
 26018  00296E                     _init_app_eeprom:
 26019                           	opt stack 24
 26020                           
 26021                           ;main.c: 490: uint8_t i;
 26022                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x01,0x55));
 26023                           
 26024                           ; BSR set to: 0
 26025                           ;incstack = 0
 26026                           ;incstack = 0
 26027  00296E  EC56  F00B         	call	_Busy_eep	;wreg free
 26028  002972  0100               	movlb	0	; () banked
 26029  002974  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26030  002976  0E01               	movlw	1
 26031  002978  6F60               	movwf	?_Write_b_eep& (0+255),b
 26032  00297A  0E55               	movlw	85
 26033  00297C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26034  00297E  EC26  F00C         	call	_Write_b_eep	;wreg free
 26035                           
 26036                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26037  002982  EC56  F00B         	call	_Busy_eep	;wreg free
 26038  002986  0100               	movlb	0	; () banked
 26039  002988  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26040  00298A  0E02               	movlw	2
 26041  00298C  6F60               	movwf	?_Write_b_eep& (0+255),b
 26042  00298E  0EAA               	movlw	170
 26043  002990  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26044  002992  EC26  F00C         	call	_Write_b_eep	;wreg free
 26045                           
 26046                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x03,0));
 26047  002996  EC56  F00B         	call	_Busy_eep	;wreg free
 26048  00299A  0100               	movlb	0	; () banked
 26049  00299C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26050  00299E  0E03               	movlw	3
 26051  0029A0  6F60               	movwf	?_Write_b_eep& (0+255),b
 26052  0029A2  0E00               	movlw	0
 26053  0029A4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26054  0029A6  EC26  F00C         	call	_Write_b_eep	;wreg free
 26055                           
 26056                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x05,0));
 26057  0029AA  EC56  F00B         	call	_Busy_eep	;wreg free
 26058  0029AE  0100               	movlb	0	; () banked
 26059  0029B0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26060  0029B2  0E05               	movlw	5
 26061  0029B4  6F60               	movwf	?_Write_b_eep& (0+255),b
 26062  0029B6  0E00               	movlw	0
 26063  0029B8  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26064  0029BA  EC26  F00C         	call	_Write_b_eep	;wreg free
 26065                           
 26066                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x06,0));
 26067  0029BE  EC56  F00B         	call	_Busy_eep	;wreg free
 26068  0029C2  0100               	movlb	0	; () banked
 26069  0029C4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26070  0029C6  0E06               	movlw	6
 26071  0029C8  6F60               	movwf	?_Write_b_eep& (0+255),b
 26072  0029CA  0E00               	movlw	0
 26073  0029CC  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26074  0029CE  EC26  F00C         	call	_Write_b_eep	;wreg free
 26075                           
 26076                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x09,10u));
 26077  0029D2  EC56  F00B         	call	_Busy_eep	;wreg free
 26078  0029D6  0100               	movlb	0	; () banked
 26079  0029D8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26080  0029DA  0E09               	movlw	9
 26081  0029DC  6F60               	movwf	?_Write_b_eep& (0+255),b
 26082  0029DE  0E0A               	movlw	10
 26083  0029E0  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26084  0029E2  EC26  F00C         	call	_Write_b_eep	;wreg free
 26085                           
 26086                           ;main.c: 500: for (i = 0x20; i < (0x5C + 4); i++) {
 26087  0029E6  0E20               	movlw	32
 26088  0029E8  0100               	movlb	0	; () banked
 26089  0029EA  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26090  0029EC                     l14703:
 26091                           
 26092                           ; BSR set to: 0
 26093                           ;main.c: 501: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26094  0029EC  EC56  F00B         	call	_Busy_eep	;wreg free
 26095  0029F0  D814               	call	PL58	;call to abstracted procedure
 26096  0029F2  EC26  F00C         	call	_Write_b_eep	;wreg free
 26097  0029F6  0100               	movlb	0	; () banked
 26098  0029F8  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26099                           
 26100                           ; BSR set to: 0
 26101  0029FA  0E5F               	movlw	95
 26102  0029FC  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26103  0029FE  D7F6               	goto	l14703
 26104                           
 26105                           ; BSR set to: 0
 26106                           ;main.c: 502: }
 26107                           ;main.c: 505: for (i = 0x60; i < (0x64 + 4); i++) {
 26108  002A00  0E60               	movlw	96
 26109  002A02  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26110  002A04                     l14717:
 26111                           
 26112                           ; BSR set to: 0
 26113                           ;main.c: 506: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26114  002A04  EC56  F00B         	call	_Busy_eep	;wreg free
 26115  002A08  D808               	call	PL58	;call to abstracted procedure
 26116  002A0A  EC26  F00C         	call	_Write_b_eep	;wreg free
 26117  002A0E  0100               	movlb	0	; () banked
 26118  002A10  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26119                           
 26120                           ; BSR set to: 0
 26121  002A12  0E67               	movlw	103
 26122  002A14  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26123  002A16  D7F6               	goto	l14717
 26124                           
 26125                           ; BSR set to: 0
 26126  002A18  0C67               	retlw	103
 26127  002A1A                     __end_of_init_app_eeprom:
 26128                           	opt stack 0
 26129  002A1A                     PL58:
 26130                           	opt stack 24
 26131  002A1A  0100               	movlb	0	; () banked
 26132  002A1C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26133  002A1E  0E01               	movlw	1
 26134  002A20  6F60               	movwf	?_Write_b_eep& (0+255),b
 26135  002A22  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26136  002A24  0CFF               	retlw	255
 26137  002A26                     __end_ofPL58:
 26138                           	opt stack 0
 26139                           tblptru	equ	0xFF8
 26140                           tblptrh	equ	0xFF7
 26141                           tblptrl	equ	0xFF6
 26142                           tablat	equ	0xFF5
 26143                           prodh	equ	0xFF4
 26144                           prodl	equ	0xFF3
 26145                           intcon	equ	0xFF2
 26146                           indf0	equ	0xFEF
 26147                           postinc0	equ	0xFEE
 26148                           fsr0h	equ	0xFEA
 26149                           fsr0l	equ	0xFE9
 26150                           wreg	equ	0xFE8
 26151                           indf1	equ	0xFE7
 26152                           postinc1	equ	0xFE6
 26153                           postdec1	equ	0xFE5
 26154                           fsr1h	equ	0xFE2
 26155                           fsr1l	equ	0xFE1
 26156                           indf2	equ	0xFDF
 26157                           postinc2	equ	0xFDE
 26158                           postdec2	equ	0xFDD
 26159                           plusw2	equ	0xFDB
 26160                           fsr2h	equ	0xFDA
 26161                           fsr2l	equ	0xFD9
 26162                           status	equ	0xFD8
 26163                           
 26164 ;; *************** function _Write_b_eep *****************
 26165 ;; Defined at:
 26166 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26167 ;; Parameters:    Size  Location     Type
 26168 ;;  badd            2    0[BANK0 ] unsigned int 
 26169 ;;  bdat            1    2[BANK0 ] unsigned char 
 26170 ;; Auto vars:     Size  Location     Type
 26171 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 26172 ;; Return value:  Size  Location     Type
 26173 ;;		None               void
 26174 ;; Registers used:
 26175 ;;		wreg, status,2
 26176 ;; Tracked objects:
 26177 ;;		On entry : F/0
 26178 ;;		On exit  : 0/0
 26179 ;;		Unchanged: 0/0
 26180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26181 ;;      Params:         0       3       0       0       0       0       0
 26182 ;;      Locals:         0       1       0       0       0       0       0
 26183 ;;      Temps:          0       0       0       0       0       0       0
 26184 ;;      Totals:         0       4       0       0       0       0       0
 26185 ;;Total ram usage:        4 bytes
 26186 ;; Hardware stack levels used:    1
 26187 ;; Hardware stack levels required when called:    3
 26188 ;; This function calls:
 26189 ;;		Nothing
 26190 ;; This function is called by:
 26191 ;;		_init_app_eeprom
 26192 ;;		_doModeVerbose
 26193 ;;		_doModeSLCAN
 26194 ;; This function uses a non-reentrant model
 26195 ;;
 26196                           
 26197                           	psect	text77
 26198  00184C                     __ptext77:
 26199                           	opt stack 0
 26200  00184C                     _Write_b_eep:
 26201                           	opt stack 25
 26202                           
 26203                           ; BSR set to: 0
 26204                           
 26205                           ; BSR set to: 0
 26206                           ;incstack = 0
 26207                           ;incstack = 0
 26208  00184C  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26209  001850  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26210  001854  9EA6               	bcf	4006,7,c	;volatile
 26211  001856  9CA6               	bcf	4006,6,c	;volatile
 26212  001858  84A6               	bsf	4006,2,c	;volatile
 26213                           
 26214                           ; BSR set to: 0
 26215  00185A  0E00               	movlw	0
 26216  00185C  BEF2               	btfsc	intcon,7,c	;volatile
 26217  00185E  0E01               	movlw	1
 26218  001860  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 26219                           
 26220                           ; BSR set to: 0
 26221  001862  9EF2               	bcf	intcon,7,c	;volatile
 26222                           
 26223                           ; BSR set to: 0
 26224  001864  0E55               	movlw	85
 26225  001866  6EA7               	movwf	4007,c	;volatile
 26226                           
 26227                           ; BSR set to: 0
 26228  001868  0EAA               	movlw	170
 26229  00186A  6EA7               	movwf	4007,c	;volatile
 26230                           
 26231                           ; BSR set to: 0
 26232  00186C  82A6               	bsf	4006,1,c	;volatile
 26233  00186E                     l1787:
 26234                           
 26235                           ; BSR set to: 0
 26236  00186E  B2A6               	btfsc	4006,1,c	;volatile
 26237  001870  D7FE               	goto	l1787
 26238                           
 26239                           ; BSR set to: 0
 26240  001872  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 26241  001874  D002               	bra	u19785
 26242  001876  9EF2               	bcf	intcon,7,c	;volatile
 26243  001878  D001               	bra	u19786
 26244  00187A                     u19785:
 26245  00187A  8EF2               	bsf	intcon,7,c	;volatile
 26246  00187C                     u19786:
 26247  00187C  94A6               	bcf	4006,2,c	;volatile
 26248  00187E  0012               	return	
 26249  001880                     __end_of_Write_b_eep:
 26250                           	opt stack 0
 26251                           tblptru	equ	0xFF8
 26252                           tblptrh	equ	0xFF7
 26253                           tblptrl	equ	0xFF6
 26254                           tablat	equ	0xFF5
 26255                           prodh	equ	0xFF4
 26256                           prodl	equ	0xFF3
 26257                           intcon	equ	0xFF2
 26258                           indf0	equ	0xFEF
 26259                           postinc0	equ	0xFEE
 26260                           fsr0h	equ	0xFEA
 26261                           fsr0l	equ	0xFE9
 26262                           wreg	equ	0xFE8
 26263                           indf1	equ	0xFE7
 26264                           postinc1	equ	0xFE6
 26265                           postdec1	equ	0xFE5
 26266                           fsr1h	equ	0xFE2
 26267                           fsr1l	equ	0xFE1
 26268                           indf2	equ	0xFDF
 26269                           postinc2	equ	0xFDE
 26270                           postdec2	equ	0xFDD
 26271                           plusw2	equ	0xFDB
 26272                           fsr2h	equ	0xFDA
 26273                           fsr2l	equ	0xFD9
 26274                           status	equ	0xFD8
 26275                           
 26276 ;; *************** function _Busy_eep *****************
 26277 ;; Defined at:
 26278 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26279 ;; Parameters:    Size  Location     Type
 26280 ;;		None
 26281 ;; Auto vars:     Size  Location     Type
 26282 ;;		None
 26283 ;; Return value:  Size  Location     Type
 26284 ;;		None               void
 26285 ;; Registers used:
 26286 ;;		None
 26287 ;; Tracked objects:
 26288 ;;		On entry : 0/1
 26289 ;;		On exit  : 0/0
 26290 ;;		Unchanged: 0/0
 26291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26292 ;;      Params:         0       0       0       0       0       0       0
 26293 ;;      Locals:         0       0       0       0       0       0       0
 26294 ;;      Temps:          0       0       0       0       0       0       0
 26295 ;;      Totals:         0       0       0       0       0       0       0
 26296 ;;Total ram usage:        0 bytes
 26297 ;; Hardware stack levels used:    1
 26298 ;; Hardware stack levels required when called:    3
 26299 ;; This function calls:
 26300 ;;		Nothing
 26301 ;; This function is called by:
 26302 ;;		_init_app_eeprom
 26303 ;;		_doModeVerbose
 26304 ;;		_doModeSLCAN
 26305 ;; This function uses a non-reentrant model
 26306 ;;
 26307                           
 26308                           	psect	text78
 26309  0016AC                     __ptext78:
 26310                           	opt stack 0
 26311  0016AC                     _Busy_eep:
 26312                           	opt stack 25
 26313  0016AC                     l1762:
 26314  0016AC  A2A6               	btfss	4006,1,c	;volatile
 26315  0016AE  0012               	return	
 26316  0016B0  D7FD               	goto	l1762
 26317  0016B2                     __end_of_Busy_eep:
 26318                           	opt stack 0
 26319                           tblptru	equ	0xFF8
 26320                           tblptrh	equ	0xFF7
 26321                           tblptrl	equ	0xFF6
 26322                           tablat	equ	0xFF5
 26323                           prodh	equ	0xFF4
 26324                           prodl	equ	0xFF3
 26325                           intcon	equ	0xFF2
 26326                           indf0	equ	0xFEF
 26327                           postinc0	equ	0xFEE
 26328                           fsr0h	equ	0xFEA
 26329                           fsr0l	equ	0xFE9
 26330                           wreg	equ	0xFE8
 26331                           indf1	equ	0xFE7
 26332                           postinc1	equ	0xFE6
 26333                           postdec1	equ	0xFE5
 26334                           fsr1h	equ	0xFE2
 26335                           fsr1l	equ	0xFE1
 26336                           indf2	equ	0xFDF
 26337                           postinc2	equ	0xFDE
 26338                           postdec2	equ	0xFDD
 26339                           plusw2	equ	0xFDB
 26340                           fsr2h	equ	0xFDA
 26341                           fsr2l	equ	0xFD9
 26342                           status	equ	0xFD8
 26343                           
 26344 ;; *************** function _init_app_ram *****************
 26345 ;; Defined at:
 26346 ;;		line 471 in file "main.c"
 26347 ;; Parameters:    Size  Location     Type
 26348 ;;		None
 26349 ;; Auto vars:     Size  Location     Type
 26350 ;;		None
 26351 ;; Return value:  Size  Location     Type
 26352 ;;		None               void
 26353 ;; Registers used:
 26354 ;;		wreg, status,2, cstack
 26355 ;; Tracked objects:
 26356 ;;		On entry : 0/1
 26357 ;;		On exit  : F/0
 26358 ;;		Unchanged: 0/0
 26359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26360 ;;      Params:         0       0       0       0       0       0       0
 26361 ;;      Locals:         0       0       0       0       0       0       0
 26362 ;;      Temps:          0       0       0       0       0       0       0
 26363 ;;      Totals:         0       0       0       0       0       0       0
 26364 ;;Total ram usage:        0 bytes
 26365 ;; Hardware stack levels used:    1
 26366 ;; Hardware stack levels required when called:    4
 26367 ;; This function calls:
 26368 ;;		_Read_b_eep
 26369 ;; This function is called by:
 26370 ;;		_init
 26371 ;;		_vscp_restoreDefaults
 26372 ;; This function uses a non-reentrant model
 26373 ;;
 26374                           
 26375                           	psect	text79
 26376  001C0A                     __ptext79:
 26377                           	opt stack 0
 26378  001C0A                     _init_app_ram:
 26379                           	opt stack 24
 26380                           
 26381                           ;main.c: 473: can_receiveOverruns = 0;
 26382                           
 26383                           ;incstack = 0
 26384                           ;incstack = 0
 26385  001C0A  0101               	movlb	1	; () banked
 26386  001C0C  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26387  001C0E  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26388  001C10  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26389  001C12  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26390                           
 26391                           ;main.c: 474: can_transmitOverruns = 0;
 26392  001C14  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26393  001C16  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26394  001C18  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26395  001C1A  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26396                           
 26397                           ;main.c: 475: uart_receiveOverruns = 0;
 26398  001C1C  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26399  001C1E  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26400  001C20  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26401  001C22  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26402                           
 26403                           ;main.c: 476: uart_transmitOverruns = 0;
 26404  001C24  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26405  001C26  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26406  001C28  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26407  001C2A  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26408                           
 26409                           ; BSR set to: 1
 26410                           ;main.c: 478: bHex = Read_b_eep(0x06);
 26411  001C2C  0100               	movlb	0	; () banked
 26412  001C2E  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26413  001C30  0E06               	movlw	6
 26414  001C32  6F60               	movwf	?_Read_b_eep& (0+255),b
 26415  001C34  EC66  F00B         	call	_Read_b_eep	;wreg free
 26416  001C38  0100               	movlb	0	; () banked
 26417  001C3A  6FE4               	movwf	_bHex& (0+255),b
 26418                           
 26419                           ;main.c: 479: mode = Read_b_eep(0x03);
 26420  001C3C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26421  001C3E  0E03               	movlw	3
 26422  001C40  6F60               	movwf	?_Read_b_eep& (0+255),b
 26423  001C42  EC66  F00B         	call	_Read_b_eep	;wreg free
 26424  001C46  0100               	movlb	0	; () banked
 26425  001C48  6FE6               	movwf	_mode& (0+255),b
 26426                           
 26427                           ;main.c: 481: rwtimeout = Read_b_eep(0x09);
 26428  001C4A  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26429  001C4C  0E09               	movlw	9
 26430  001C4E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26431  001C50  EC66  F00B         	call	_Read_b_eep	;wreg free
 26432  001C54  0100               	movlb	0	; () banked
 26433  001C56  6FE8               	movwf	_rwtimeout& (0+255),b
 26434                           
 26435                           ; BSR set to: 0
 26436  001C58  0012               	return	
 26437  001C5A                     __end_of_init_app_ram:
 26438                           	opt stack 0
 26439                           tblptru	equ	0xFF8
 26440                           tblptrh	equ	0xFF7
 26441                           tblptrl	equ	0xFF6
 26442                           tablat	equ	0xFF5
 26443                           prodh	equ	0xFF4
 26444                           prodl	equ	0xFF3
 26445                           intcon	equ	0xFF2
 26446                           indf0	equ	0xFEF
 26447                           postinc0	equ	0xFEE
 26448                           fsr0h	equ	0xFEA
 26449                           fsr0l	equ	0xFE9
 26450                           wreg	equ	0xFE8
 26451                           indf1	equ	0xFE7
 26452                           postinc1	equ	0xFE6
 26453                           postdec1	equ	0xFE5
 26454                           fsr1h	equ	0xFE2
 26455                           fsr1l	equ	0xFE1
 26456                           indf2	equ	0xFDF
 26457                           postinc2	equ	0xFDE
 26458                           postdec2	equ	0xFDD
 26459                           plusw2	equ	0xFDB
 26460                           fsr2h	equ	0xFDA
 26461                           fsr2l	equ	0xFD9
 26462                           status	equ	0xFD8
 26463                           
 26464 ;; *************** function _Read_b_eep *****************
 26465 ;; Defined at:
 26466 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26467 ;; Parameters:    Size  Location     Type
 26468 ;;  badd            2    0[BANK0 ] unsigned int 
 26469 ;; Auto vars:     Size  Location     Type
 26470 ;;		None
 26471 ;; Return value:  Size  Location     Type
 26472 ;;                  1    wreg      unsigned char 
 26473 ;; Registers used:
 26474 ;;		wreg, status,2
 26475 ;; Tracked objects:
 26476 ;;		On entry : F/0
 26477 ;;		On exit  : 0/0
 26478 ;;		Unchanged: 0/0
 26479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26480 ;;      Params:         0       2       0       0       0       0       0
 26481 ;;      Locals:         0       0       0       0       0       0       0
 26482 ;;      Temps:          0       0       0       0       0       0       0
 26483 ;;      Totals:         0       2       0       0       0       0       0
 26484 ;;Total ram usage:        2 bytes
 26485 ;; Hardware stack levels used:    1
 26486 ;; Hardware stack levels required when called:    3
 26487 ;; This function calls:
 26488 ;;		Nothing
 26489 ;; This function is called by:
 26490 ;;		_main
 26491 ;;		_init_app_ram
 26492 ;; This function uses a non-reentrant model
 26493 ;;
 26494                           
 26495                           	psect	text80
 26496  0016CC                     __ptext80:
 26497                           	opt stack 0
 26498  0016CC                     _Read_b_eep:
 26499                           	opt stack 24
 26500                           
 26501                           ; BSR set to: 0
 26502                           
 26503                           ; BSR set to: 0
 26504                           ;incstack = 0
 26505                           ;incstack = 0
 26506  0016CC  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26507  0016D0  9CA6               	bcf	4006,6,c	;volatile
 26508  0016D2  9EA6               	bcf	4006,7,c	;volatile
 26509  0016D4  80A6               	bsf	4006,0,c	;volatile
 26510  0016D6  F000               	nop		;# 
 26511  0016D8  F000               	nop		;# 
 26512  0016DA  50A8               	movf	4008,w,c	;volatile
 26513  0016DC  0012               	return	
 26514  0016DE                     __end_of_Read_b_eep:
 26515                           	opt stack 0
 26516                           tblptru	equ	0xFF8
 26517                           tblptrh	equ	0xFF7
 26518                           tblptrl	equ	0xFF6
 26519                           tablat	equ	0xFF5
 26520                           prodh	equ	0xFF4
 26521                           prodl	equ	0xFF3
 26522                           intcon	equ	0xFF2
 26523                           indf0	equ	0xFEF
 26524                           postinc0	equ	0xFEE
 26525                           fsr0h	equ	0xFEA
 26526                           fsr0l	equ	0xFE9
 26527                           wreg	equ	0xFE8
 26528                           indf1	equ	0xFE7
 26529                           postinc1	equ	0xFE6
 26530                           postdec1	equ	0xFE5
 26531                           fsr1h	equ	0xFE2
 26532                           fsr1l	equ	0xFE1
 26533                           indf2	equ	0xFDF
 26534                           postinc2	equ	0xFDE
 26535                           postdec2	equ	0xFDD
 26536                           plusw2	equ	0xFDB
 26537                           fsr2h	equ	0xFDA
 26538                           fsr2l	equ	0xFD9
 26539                           status	equ	0xFD8
 26540                           
 26541 ;; *************** function _fifo_init *****************
 26542 ;; Defined at:
 26543 ;;		line 14 in file "fifo.c"
 26544 ;; Parameters:    Size  Location     Type
 26545 ;;  f               2    0[BANK0 ] PTR struct .
 26546 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26547 ;;  buf             2    2[BANK0 ] PTR const void 
 26548 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26549 ;;  size            2    4[BANK0 ] unsigned short 
 26550 ;; Auto vars:     Size  Location     Type
 26551 ;;		None
 26552 ;; Return value:  Size  Location     Type
 26553 ;;		None               void
 26554 ;; Registers used:
 26555 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26556 ;; Tracked objects:
 26557 ;;		On entry : F/0
 26558 ;;		On exit  : F/0
 26559 ;;		Unchanged: 0/0
 26560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26561 ;;      Params:         0       6       0       0       0       0       0
 26562 ;;      Locals:         0       0       0       0       0       0       0
 26563 ;;      Temps:          0       0       0       0       0       0       0
 26564 ;;      Totals:         0       6       0       0       0       0       0
 26565 ;;Total ram usage:        6 bytes
 26566 ;; Hardware stack levels used:    1
 26567 ;; Hardware stack levels required when called:    3
 26568 ;; This function calls:
 26569 ;;		Nothing
 26570 ;; This function is called by:
 26571 ;;		_main
 26572 ;; This function uses a non-reentrant model
 26573 ;;
 26574                           
 26575                           	psect	text81
 26576  0019E4                     __ptext81:
 26577                           	opt stack 0
 26578  0019E4                     _fifo_init:
 26579                           	opt stack 26
 26580                           
 26581                           ; BSR set to: 0
 26582                           ;fifo.c: 15: f->head = 0;
 26583                           
 26584                           ;incstack = 0
 26585                           ;incstack = 0
 26586  0019E4  EE20 F002          	lfsr	2,2
 26587  0019E8  D816               	call	PL94	;call to abstracted procedure
 26588                           
 26589                           ;fifo.c: 16: f->tail = 0;
 26590  0019EA  EE20 F004          	lfsr	2,4
 26591  0019EE  D813               	call	PL94	;call to abstracted procedure
 26592                           
 26593                           ;fifo.c: 17: f->size = size;
 26594  0019F0  EE20 F006          	lfsr	2,6
 26595  0019F4  5160               	movf	fifo_init@f& (0+255),w,b
 26596  0019F6  26D9               	addwf	fsr2l,f,c
 26597  0019F8  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26598  0019FA  22DA               	addwfc	fsr2h,f,c
 26599  0019FC  C064  FFDE         	movff	fifo_init@size,postinc2
 26600  001A00  C065  FFDD         	movff	fifo_init@size+1,postdec2
 26601                           
 26602                           ; BSR set to: 0
 26603                           ;fifo.c: 18: f->buf = buf;
 26604  001A04  C060  FFD9         	movff	fifo_init@f,fsr2l
 26605  001A08  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 26606  001A0C  C062  FFDE         	movff	fifo_init@buf,postinc2
 26607  001A10  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 26608                           
 26609                           ; BSR set to: 0
 26610  001A14  0012               	return	
 26611  001A16                     __end_of_fifo_init:
 26612                           	opt stack 0
 26613  001A16                     PL94:
 26614                           	opt stack 26
 26615  001A16  5160               	movf	fifo_init@f& (0+255),w,b
 26616  001A18  26D9               	addwf	fsr2l,f,c
 26617  001A1A  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26618  001A1C  22DA               	addwfc	fsr2h,f,c
 26619  001A1E  6ADE               	clrf	postinc2,c
 26620  001A20  6ADD               	clrf	postdec2,c
 26621  001A22  0012               	return	
 26622  001A24                     __end_ofPL94:
 26623                           	opt stack 0
 26624                           tblptru	equ	0xFF8
 26625                           tblptrh	equ	0xFF7
 26626                           tblptrl	equ	0xFF6
 26627                           tablat	equ	0xFF5
 26628                           prodh	equ	0xFF4
 26629                           prodl	equ	0xFF3
 26630                           intcon	equ	0xFF2
 26631                           indf0	equ	0xFEF
 26632                           postinc0	equ	0xFEE
 26633                           fsr0h	equ	0xFEA
 26634                           fsr0l	equ	0xFE9
 26635                           wreg	equ	0xFE8
 26636                           indf1	equ	0xFE7
 26637                           postinc1	equ	0xFE6
 26638                           postdec1	equ	0xFE5
 26639                           fsr1h	equ	0xFE2
 26640                           fsr1l	equ	0xFE1
 26641                           indf2	equ	0xFDF
 26642                           postinc2	equ	0xFDE
 26643                           postdec2	equ	0xFDD
 26644                           plusw2	equ	0xFDB
 26645                           fsr2h	equ	0xFDA
 26646                           fsr2l	equ	0xFD9
 26647                           status	equ	0xFD8
 26648                           
 26649 ;; *************** function _Interrupt *****************
 26650 ;; Defined at:
 26651 ;;		line 150 in file "main.c"
 26652 ;; Parameters:    Size  Location     Type
 26653 ;;		None
 26654 ;; Auto vars:     Size  Location     Type
 26655 ;;  fail            1   32[COMRAM] unsigned char 
 26656 ;;  c               1   31[COMRAM] unsigned char 
 26657 ;; Return value:  Size  Location     Type
 26658 ;;		None               void
 26659 ;; Registers used:
 26660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26661 ;; Tracked objects:
 26662 ;;		On entry : 0/0
 26663 ;;		On exit  : 0/0
 26664 ;;		Unchanged: 0/0
 26665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26666 ;;      Params:         0       0       0       0       0       0       0
 26667 ;;      Locals:         2       0       0       0       0       0       0
 26668 ;;      Temps:          9       0       0       0       0       0       0
 26669 ;;      Totals:        11       0       0       0       0       0       0
 26670 ;;Total ram usage:       11 bytes
 26671 ;; Hardware stack levels used:    1
 26672 ;; Hardware stack levels required when called:    2
 26673 ;; This function calls:
 26674 ;;		_ReadUSART
 26675 ;;		_fifo_write
 26676 ;;		_ECANReceiveMessage
 26677 ;;		_fifo_getFree
 26678 ;;		i1_WriteTimer0
 26679 ;; This function is called by:
 26680 ;;		Interrupt level 1
 26681 ;; This function uses a non-reentrant model
 26682 ;;
 26683                           
 26684                           	psect	intcodelo
 26685  000018                     __pintcodelo:
 26686                           	opt stack 0
 26687  000018                     _Interrupt:
 26688                           	opt stack 19
 26689                           
 26690                           ; BSR set to: 0
 26691                           ;incstack = 0
 26692  000018  CFD8 F019          	movff	status,??_Interrupt+2
 26693  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 26694  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 26695  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 26696  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 26697  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 26698  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 26699  000034                     
 26700                           ;main.c: 151: uint8_t c;
 26701                           ;main.c: 154: if ( 1 == PIR1bits.RCIF ) {
 26702  000034  AA9E               	btfss	3998,5,c	;volatile
 26703  000036  D001               	goto	i1u1745_21
 26704  000038  D001               	goto	i1u1745_20
 26705  00003A                     i1u1745_21:
 26706  00003A  D02B               	goto	i1l397
 26707  00003C                     i1u1745_20:
 26708  00003C                     
 26709                           ;main.c: 156: c = ReadUSART();
 26710  00003C  EC9A  F00B         	call	_ReadUSART	;wreg free
 26711  000040  6E20               	movwf	Interrupt@c,c
 26712  000042                     
 26713                           ;main.c: 158: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 26714  000042  0101               	movlb	1	; () banked
 26715  000044  0E01               	movlw	high _serialInputFifo
 26716  000046  6E02               	movwf	?_fifo_write+1,c
 26717  000048  0EDB               	movlw	low _serialInputFifo
 26718  00004A  6E01               	movwf	?_fifo_write,c
 26719  00004C  0E20               	movlw	low Interrupt@c
 26720  00004E  6E03               	movwf	?_fifo_write+2,c
 26721  000050  0E00               	movlw	high Interrupt@c
 26722  000052  6E04               	movwf	?_fifo_write+3,c
 26723  000054  0E0F               	movlw	15
 26724  000056  6E04               	movwf	?_fifo_write+3,c
 26725  000058  0E5F               	movlw	__accesstop+-1
 26726  00005A  6403               	cpfsgt	?_fifo_write+2,c
 26727  00005C  6A04               	clrf	?_fifo_write+3,c
 26728  00005E  0E01               	movlw	1
 26729  000060  6E05               	movwf	?_fifo_write+4,c
 26730  000062  0E00               	movlw	0
 26731  000064  6E06               	movwf	?_fifo_write+5,c
 26732  000066  0E00               	movlw	0
 26733  000068  6E07               	movwf	?_fifo_write+6,c
 26734  00006A  0E00               	movlw	0
 26735  00006C  6E08               	movwf	?_fifo_write+7,c
 26736  00006E  ECC7  F01A         	call	_fifo_write	;wreg free
 26737  000072  0401               	decf	?_fifo_write,w,c
 26738  000074  1002               	iorwf	?_fifo_write+1,w,c
 26739  000076  B4D8               	btfsc	status,2,c
 26740  000078  D001               	goto	i1u1746_21
 26741  00007A  D001               	goto	i1u1746_20
 26742  00007C                     i1u1746_21:
 26743  00007C  D008               	goto	i1l13259
 26744  00007E                     i1u1746_20:
 26745  00007E                     
 26746                           ; BSR set to: 1
 26747                           ;main.c: 160: uart_receiveOverruns++;
 26748  00007E  0E01               	movlw	1
 26749  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 26750  000082  0E00               	movlw	0
 26751  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 26752  000086  0E00               	movlw	0
 26753  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 26754  00008A  0E00               	movlw	0
 26755  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 26756  00008E                     i1l13259:
 26757                           
 26758                           ; BSR set to: 1
 26759                           ;main.c: 161: }
 26760                           ;main.c: 164: PIR1bits.RCIF = 0;
 26761  00008E  9A9E               	bcf	3998,5,c	;volatile
 26762                           
 26763                           ;main.c: 166: }
 26764  000090  D07D               	goto	i1l399
 26765  000092                     i1l397:
 26766                           
 26767                           ;main.c: 168: else if (1 == INTCONbits.TMR0IF) {
 26768  000092  A4F2               	btfss	intcon,2,c	;volatile
 26769  000094  D001               	goto	i1u1747_21
 26770  000096  D001               	goto	i1u1747_20
 26771  000098                     i1u1747_21:
 26772  000098  D079               	goto	i1l399
 26773  00009A                     i1u1747_20:
 26774  00009A                     
 26775                           ;main.c: 170: WriteTimer0(0xfb1d);
 26776  00009A  0EFB               	movlw	251
 26777  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 26778  00009E  0E1D               	movlw	29
 26779  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 26780  0000A2  EC5D  F00B         	call	i1_WriteTimer0	;wreg free
 26781  0000A6                     
 26782                           ;main.c: 172: timer++;
 26783  0000A6  0E01               	movlw	1
 26784  0000A8  0101               	movlb	1	; () banked
 26785  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 26786  0000AC  0E00               	movlw	0
 26787  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26788  0000B0  0E00               	movlw	0
 26789  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26790  0000B4  0E00               	movlw	0
 26791  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26792  0000B8                     
 26793                           ; BSR set to: 1
 26794                           ;main.c: 173: timekeeper++;
 26795  0000B8  0E01               	movlw	1
 26796  0000BA  2622               	addwf	_timekeeper,f,c	;volatile
 26797  0000BC  0E00               	movlw	0
 26798  0000BE  2223               	addwfc	_timekeeper+1,f,c	;volatile
 26799  0000C0  0E00               	movlw	0
 26800  0000C2  2224               	addwfc	_timekeeper+2,f,c	;volatile
 26801  0000C4  0E00               	movlw	0
 26802  0000C6  2225               	addwfc	_timekeeper+3,f,c	;volatile
 26803  0000C8                     
 26804                           ; BSR set to: 1
 26805                           ;main.c: 176: status_led_cnt++;
 26806  0000C8  4A26               	infsnz	_status_led_cnt,f,c	;volatile
 26807  0000CA  2A27               	incf	_status_led_cnt+1,f,c	;volatile
 26808  0000CC                     
 26809                           ; BSR set to: 1
 26810                           ;main.c: 177: if ((2 == ledFunctionality) &&
 26811                           ;main.c: 178: (status_led_cnt > 1000)) {
 26812  0000CC  5030               	movf	_ledFunctionality,w,c
 26813  0000CE  0A02               	xorlw	2
 26814  0000D0  A4D8               	btfss	status,2,c
 26815  0000D2  D001               	goto	i1u1748_21
 26816  0000D4  D001               	goto	i1u1748_20
 26817  0000D6                     i1u1748_21:
 26818  0000D6  D00C               	goto	i1l13275
 26819  0000D8                     i1u1748_20:
 26820  0000D8                     
 26821                           ; BSR set to: 1
 26822  0000D8  0EE9               	movlw	233
 26823  0000DA  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26824  0000DC  0E03               	movlw	3
 26825  0000DE  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26826  0000E0  A0D8               	btfss	status,0,c
 26827  0000E2  D001               	goto	i1u1749_21
 26828  0000E4  D001               	goto	i1u1749_20
 26829  0000E6                     i1u1749_21:
 26830  0000E6  D004               	goto	i1l13275
 26831  0000E8                     i1u1749_20:
 26832  0000E8                     i1l13273:
 26833                           
 26834                           ; BSR set to: 1
 26835                           ;main.c: 179: LATC1 = ~LATC1;
 26836  0000E8  728B               	btg	3979,1,c	;volatile
 26837                           
 26838                           ;main.c: 180: status_led_cnt = 0;
 26839  0000EA  6A26               	clrf	_status_led_cnt,c	;volatile
 26840  0000EC  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26841                           
 26842                           ;main.c: 181: }
 26843  0000EE  D04D               	goto	i1l402
 26844  0000F0                     i1l13275:
 26845                           
 26846                           ; BSR set to: 1
 26847                           ;main.c: 182: else if ((3 == ledFunctionality) &&
 26848                           ;main.c: 183: (status_led_cnt > 400)) {
 26849  0000F0  5030               	movf	_ledFunctionality,w,c
 26850  0000F2  0A03               	xorlw	3
 26851  0000F4  A4D8               	btfss	status,2,c
 26852  0000F6  D001               	goto	i1u1750_21
 26853  0000F8  D001               	goto	i1u1750_20
 26854  0000FA                     i1u1750_21:
 26855  0000FA  D009               	goto	i1l13281
 26856  0000FC                     i1u1750_20:
 26857  0000FC                     
 26858                           ; BSR set to: 1
 26859  0000FC  0E91               	movlw	145
 26860  0000FE  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26861  000100  0E01               	movlw	1
 26862  000102  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26863  000104  A0D8               	btfss	status,0,c
 26864  000106  D001               	goto	i1u1751_21
 26865  000108  D001               	goto	i1u1751_20
 26866  00010A                     i1u1751_21:
 26867  00010A  D001               	goto	i1l13281
 26868  00010C                     i1u1751_20:
 26869  00010C  D7ED               	goto	i1l13273
 26870  00010E                     i1l13281:
 26871                           
 26872                           ; BSR set to: 1
 26873                           ;main.c: 187: else if ((4 == ledFunctionality) &&
 26874                           ;main.c: 188: (status_led_cnt > 100)) {
 26875  00010E  5030               	movf	_ledFunctionality,w,c
 26876  000110  0A04               	xorlw	4
 26877  000112  A4D8               	btfss	status,2,c
 26878  000114  D001               	goto	i1u1752_21
 26879  000116  D001               	goto	i1u1752_20
 26880  000118                     i1u1752_21:
 26881  000118  D009               	goto	i1l13287
 26882  00011A                     i1u1752_20:
 26883  00011A                     
 26884                           ; BSR set to: 1
 26885  00011A  0E65               	movlw	101
 26886  00011C  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26887  00011E  0E00               	movlw	0
 26888  000120  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26889  000122  A0D8               	btfss	status,0,c
 26890  000124  D001               	goto	i1u1753_21
 26891  000126  D001               	goto	i1u1753_20
 26892  000128                     i1u1753_21:
 26893  000128  D001               	goto	i1l13287
 26894  00012A                     i1u1753_20:
 26895  00012A  D7DE               	goto	i1l13273
 26896  00012C                     i1l13287:
 26897                           
 26898                           ; BSR set to: 1
 26899                           ;main.c: 192: else if ((5 == ledFunctionality) &&
 26900                           ;main.c: 193: (status_led_cnt > 70)) {
 26901  00012C  5030               	movf	_ledFunctionality,w,c
 26902  00012E  0A05               	xorlw	5
 26903  000130  A4D8               	btfss	status,2,c
 26904  000132  D001               	goto	i1u1754_21
 26905  000134  D001               	goto	i1u1754_20
 26906  000136                     i1u1754_21:
 26907  000136  D009               	goto	i1l13293
 26908  000138                     i1u1754_20:
 26909  000138                     
 26910                           ; BSR set to: 1
 26911  000138  0E47               	movlw	71
 26912  00013A  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26913  00013C  0E00               	movlw	0
 26914  00013E  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26915  000140  A0D8               	btfss	status,0,c
 26916  000142  D001               	goto	i1u1755_21
 26917  000144  D001               	goto	i1u1755_20
 26918  000146                     i1u1755_21:
 26919  000146  D001               	goto	i1l13293
 26920  000148                     i1u1755_20:
 26921  000148  D7CF               	goto	i1l13273
 26922  00014A                     i1l13293:
 26923                           
 26924                           ; BSR set to: 1
 26925                           ;main.c: 197: else if ((6 == ledFunctionality) &&
 26926                           ;main.c: 198: (status_led_cnt > 40)) {
 26927  00014A  5030               	movf	_ledFunctionality,w,c
 26928  00014C  0A06               	xorlw	6
 26929  00014E  A4D8               	btfss	status,2,c
 26930  000150  D001               	goto	i1u1756_21
 26931  000152  D001               	goto	i1u1756_20
 26932  000154                     i1u1756_21:
 26933  000154  D009               	goto	i1l13299
 26934  000156                     i1u1756_20:
 26935  000156                     
 26936                           ; BSR set to: 1
 26937  000156  0E29               	movlw	41
 26938  000158  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26939  00015A  0E00               	movlw	0
 26940  00015C  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26941  00015E  A0D8               	btfss	status,0,c
 26942  000160  D001               	goto	i1u1757_21
 26943  000162  D001               	goto	i1u1757_20
 26944  000164                     i1u1757_21:
 26945  000164  D001               	goto	i1l13299
 26946  000166                     i1u1757_20:
 26947  000166  D7C0               	goto	i1l13273
 26948  000168                     i1l13299:
 26949                           
 26950                           ; BSR set to: 1
 26951                           ;main.c: 202: else if (1 == ledFunctionality) {
 26952  000168  0430               	decf	_ledFunctionality,w,c
 26953  00016A  A4D8               	btfss	status,2,c
 26954  00016C  D001               	goto	i1u1758_21
 26955  00016E  D001               	goto	i1u1758_20
 26956  000170                     i1u1758_21:
 26957  000170  D004               	goto	i1l411
 26958  000172                     i1u1758_20:
 26959  000172                     
 26960                           ; BSR set to: 1
 26961                           ;main.c: 203: LATC1 = 1;
 26962  000172  828B               	bsf	3979,1,c	;volatile
 26963                           
 26964                           ;main.c: 204: status_led_cnt = 0;
 26965  000174  6A26               	clrf	_status_led_cnt,c	;volatile
 26966  000176  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26967                           
 26968                           ;main.c: 205: }
 26969  000178  D008               	goto	i1l402
 26970  00017A                     i1l411:
 26971                           
 26972                           ; BSR set to: 1
 26973                           ;main.c: 206: else if (0 == ledFunctionality) {
 26974  00017A  6630               	tstfsz	_ledFunctionality,c
 26975  00017C  D001               	goto	i1u1759_21
 26976  00017E  D001               	goto	i1u1759_20
 26977  000180                     i1u1759_21:
 26978  000180  D004               	goto	i1l408
 26979  000182                     i1u1759_20:
 26980  000182                     
 26981                           ; BSR set to: 1
 26982                           ;main.c: 207: LATC1 = 0;
 26983  000182  928B               	bcf	3979,1,c	;volatile
 26984                           
 26985                           ;main.c: 208: status_led_cnt = 0;
 26986  000184  6A26               	clrf	_status_led_cnt,c	;volatile
 26987  000186  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26988  000188  D000               	goto	i1l402
 26989  00018A                     i1l408:
 26990  00018A                     i1l402:
 26991                           
 26992                           ; BSR set to: 1
 26993                           ;main.c: 209: }
 26994                           ;main.c: 211: INTCONbits.TMR0IF = 0;
 26995  00018A  94F2               	bcf	intcon,2,c	;volatile
 26996  00018C                     i1l399:
 26997                           
 26998                           ;main.c: 212: }
 26999                           ;main.c: 215: if ( 1 == IRXIF ) {
 27000  00018C  AEA4               	btfss	4004,7,c	;volatile
 27001  00018E  D001               	goto	i1u1760_21
 27002  000190  D001               	goto	i1u1760_20
 27003  000192                     i1u1760_21:
 27004  000192  D001               	goto	i1l414
 27005  000194                     i1u1760_20:
 27006  000194                     
 27007                           ;main.c: 217: IRXIF = 0;
 27008  000194  9EA4               	bcf	4004,7,c	;volatile
 27009  000196                     i1l414:
 27010                           
 27011                           ;main.c: 218: }
 27012                           ;main.c: 221: if ( RXBnIF ) {
 27013  000196  A2A4               	btfss	4004,1,c	;volatile
 27014  000198  D001               	goto	i1u1761_21
 27015  00019A  D001               	goto	i1u1761_20
 27016  00019C                     i1u1761_21:
 27017  00019C  D09F               	goto	i1l427
 27018  00019E                     i1u1761_20:
 27019  00019E                     
 27020                           ;main.c: 223: if ( ECANReceiveMessage((unsigned long *)&id,
 27021                           ;main.c: 224: (BYTE*)&data,
 27022                           ;main.c: 225: (BYTE*)&dlc,
 27023                           ;main.c: 226: &flags) ) {
 27024  00019E  0101               	movlb	1	; () banked
 27025  0001A0  0E01               	movlw	high _id
 27026  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 27027  0001A4  0EE3               	movlw	low _id
 27028  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 27029  0001A8  0E01               	movlw	high _data
 27030  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 27031  0001AC  0ED3               	movlw	low _data
 27032  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 27033  0001B0  0E3E               	movlw	low _dlc
 27034  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 27035  0001B4  0E3F               	movlw	low _flags
 27036  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 27037  0001B8  EC17  F023         	call	_ECANReceiveMessage	;wreg free
 27038  0001BC  0900               	iorlw	0
 27039  0001BE  B4D8               	btfsc	status,2,c
 27040  0001C0  D001               	goto	i1u1762_21
 27041  0001C2  D001               	goto	i1u1762_20
 27042  0001C4                     i1u1762_21:
 27043  0001C4  D08A               	goto	i1l13341
 27044  0001C6                     i1u1762_20:
 27045  0001C6                     
 27046                           ;main.c: 229: if ( flags & ECAN_RX_OVERFLOW ) {
 27047  0001C6  A63F               	btfss	_flags,3,c
 27048  0001C8  D001               	goto	i1u1763_21
 27049  0001CA  D001               	goto	i1u1763_20
 27050  0001CC                     i1u1763_21:
 27051  0001CC  D00E               	goto	i1l417
 27052  0001CE                     i1u1763_20:
 27053  0001CE                     
 27054                           ;main.c: 230: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27055  0001CE  AA3F               	btfss	_flags,5,c
 27056  0001D0  D001               	goto	i1u1764_21
 27057  0001D2  D001               	goto	i1u1764_20
 27058  0001D4                     i1u1764_21:
 27059  0001D4  D082               	goto	i1l13341
 27060  0001D6                     i1u1764_20:
 27061  0001D6                     i1l13313:
 27062  0001D6  0E01               	movlw	1
 27063  0001D8  0101               	movlb	1	; () banked
 27064  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 27065  0001DC  0E00               	movlw	0
 27066  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27067  0001E0  0E00               	movlw	0
 27068  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27069  0001E4  0E00               	movlw	0
 27070  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27071  0001E8  D078               	goto	i1l13341
 27072  0001EA                     i1l417:
 27073                           
 27074                           ;main.c: 232: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27075                           ;main.c: 233: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27076  0001EA  BC3F               	btfsc	_flags,6,c
 27077  0001EC  D001               	goto	i1u1765_21
 27078  0001EE  D001               	goto	i1u1765_20
 27079  0001F0                     i1u1765_21:
 27080  0001F0  D074               	goto	i1l13341
 27081  0001F2                     i1u1765_20:
 27082  0001F2  AA3F               	btfss	_flags,5,c
 27083  0001F4  D001               	goto	i1u1766_21
 27084  0001F6  D001               	goto	i1u1766_20
 27085  0001F8                     i1u1766_21:
 27086  0001F8  D070               	goto	i1l13341
 27087  0001FA                     i1u1766_20:
 27088  0001FA                     
 27089                           ;main.c: 235: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27090  0001FA  503E               	movf	_dlc,w,c
 27091  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 27092  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 27093  000200  0E05               	movlw	5
 27094  000202  2617               	addwf	??_Interrupt,f,c
 27095  000204  0E00               	movlw	0
 27096  000206  2218               	addwfc	??_Interrupt+1,f,c
 27097  000208  0101               	movlb	1	; () banked
 27098  00020A  0E01               	movlw	high _canInputFifo
 27099  00020C  6E02               	movwf	?_fifo_getFree+1,c
 27100  00020E  0ECB               	movlw	low _canInputFifo
 27101  000210  6E01               	movwf	?_fifo_getFree,c
 27102  000212  EC08  F014         	call	_fifo_getFree	;wreg free
 27103  000216  5017               	movf	??_Interrupt,w,c
 27104  000218  5C01               	subwf	?_fifo_getFree,w,c
 27105  00021A  5018               	movf	??_Interrupt+1,w,c
 27106  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 27107  00021E  A0D8               	btfss	status,0,c
 27108  000220  D001               	goto	i1u1767_21
 27109  000222  D001               	goto	i1u1767_20
 27110  000224                     i1u1767_21:
 27111  000224  D7D8               	goto	i1l13313
 27112  000226                     i1u1767_20:
 27113  000226                     
 27114                           ; BSR set to: 1
 27115                           ;main.c: 236: uint8_t fail = 0;
 27116  000226  6A21               	clrf	Interrupt@fail,c
 27117  000228                     
 27118                           ; BSR set to: 1
 27119                           ;main.c: 237: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 27120  000228  0E01               	movlw	high _canInputFifo
 27121  00022A  6E02               	movwf	?_fifo_write+1,c
 27122  00022C  0ECB               	movlw	low _canInputFifo
 27123  00022E  6E01               	movwf	?_fifo_write,c
 27124  000230  0E01               	movlw	high _id
 27125  000232  6E04               	movwf	?_fifo_write+3,c
 27126  000234  0EE3               	movlw	low _id
 27127  000236  6E03               	movwf	?_fifo_write+2,c
 27128  000238  0E04               	movlw	4
 27129  00023A  6E05               	movwf	?_fifo_write+4,c
 27130  00023C  0E00               	movlw	0
 27131  00023E  6E06               	movwf	?_fifo_write+5,c
 27132  000240  0E00               	movlw	0
 27133  000242  6E07               	movwf	?_fifo_write+6,c
 27134  000244  0E00               	movlw	0
 27135  000246  6E08               	movwf	?_fifo_write+7,c
 27136  000248  ECC7  F01A         	call	_fifo_write	;wreg free
 27137  00024C  5001               	movf	?_fifo_write,w,c
 27138  00024E  0A04               	xorlw	4
 27139  000250  1002               	iorwf	?_fifo_write+1,w,c
 27140  000252  B4D8               	btfsc	status,2,c
 27141  000254  D001               	goto	i1u1768_21
 27142  000256  D001               	goto	i1u1768_20
 27143  000258                     i1u1768_21:
 27144  000258  D002               	goto	i1l13325
 27145  00025A                     i1u1768_20:
 27146  00025A                     
 27147                           ; BSR set to: 1
 27148                           ;main.c: 238: fail = 1;
 27149  00025A  0E01               	movlw	1
 27150  00025C  6E21               	movwf	Interrupt@fail,c
 27151  00025E                     i1l13325:
 27152                           
 27153                           ; BSR set to: 1
 27154                           ;main.c: 239: }
 27155                           ;main.c: 240: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 27156  00025E  0E01               	movlw	high _canInputFifo
 27157  000260  6E02               	movwf	?_fifo_write+1,c
 27158  000262  0ECB               	movlw	low _canInputFifo
 27159  000264  6E01               	movwf	?_fifo_write,c
 27160  000266  0E3E               	movlw	low _dlc
 27161  000268  6E03               	movwf	?_fifo_write+2,c
 27162  00026A  0E00               	movlw	high _dlc
 27163  00026C  6E04               	movwf	?_fifo_write+3,c
 27164  00026E  0E0F               	movlw	15
 27165  000270  6E04               	movwf	?_fifo_write+3,c
 27166  000272  0E5F               	movlw	__accesstop+-1
 27167  000274  6403               	cpfsgt	?_fifo_write+2,c
 27168  000276  6A04               	clrf	?_fifo_write+3,c
 27169  000278  0E01               	movlw	1
 27170  00027A  6E05               	movwf	?_fifo_write+4,c
 27171  00027C  0E00               	movlw	0
 27172  00027E  6E06               	movwf	?_fifo_write+5,c
 27173  000280  0E00               	movlw	0
 27174  000282  6E07               	movwf	?_fifo_write+6,c
 27175  000284  0E00               	movlw	0
 27176  000286  6E08               	movwf	?_fifo_write+7,c
 27177  000288  ECC7  F01A         	call	_fifo_write	;wreg free
 27178  00028C  0401               	decf	?_fifo_write,w,c
 27179  00028E  1002               	iorwf	?_fifo_write+1,w,c
 27180  000290  B4D8               	btfsc	status,2,c
 27181  000292  D001               	goto	i1u1769_21
 27182  000294  D001               	goto	i1u1769_20
 27183  000296                     i1u1769_21:
 27184  000296  D002               	goto	i1l13329
 27185  000298                     i1u1769_20:
 27186  000298                     
 27187                           ; BSR set to: 1
 27188                           ;main.c: 241: fail = 1;
 27189  000298  0E01               	movlw	1
 27190  00029A  6E21               	movwf	Interrupt@fail,c
 27191  00029C                     i1l13329:
 27192                           
 27193                           ; BSR set to: 1
 27194                           ;main.c: 242: }
 27195                           ;main.c: 243: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 27196  00029C  0E01               	movlw	high _canInputFifo
 27197  00029E  6E02               	movwf	?_fifo_write+1,c
 27198  0002A0  0ECB               	movlw	low _canInputFifo
 27199  0002A2  6E01               	movwf	?_fifo_write,c
 27200  0002A4  0E01               	movlw	high _data
 27201  0002A6  6E04               	movwf	?_fifo_write+3,c
 27202  0002A8  0ED3               	movlw	low _data
 27203  0002AA  6E03               	movwf	?_fifo_write+2,c
 27204  0002AC  503E               	movf	_dlc,w,c
 27205  0002AE  6E05               	movwf	?_fifo_write+4,c
 27206  0002B0  6A06               	clrf	?_fifo_write+5,c
 27207  0002B2  6A07               	clrf	?_fifo_write+6,c
 27208  0002B4  6A08               	clrf	?_fifo_write+7,c
 27209  0002B6  ECC7  F01A         	call	_fifo_write	;wreg free
 27210  0002BA  503E               	movf	_dlc,w,c
 27211  0002BC  1801               	xorwf	?_fifo_write,w,c
 27212  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 27213  0002C0  B4D8               	btfsc	status,2,c
 27214  0002C2  D001               	goto	i1u1770_21
 27215  0002C4  D001               	goto	i1u1770_20
 27216  0002C6                     i1u1770_21:
 27217  0002C6  D002               	goto	i1l13333
 27218  0002C8                     i1u1770_20:
 27219  0002C8                     
 27220                           ; BSR set to: 1
 27221                           ;main.c: 244: fail = 1;
 27222  0002C8  0E01               	movlw	1
 27223  0002CA  6E21               	movwf	Interrupt@fail,c
 27224  0002CC                     i1l13333:
 27225                           
 27226                           ; BSR set to: 1
 27227                           ;main.c: 245: }
 27228                           ;main.c: 247: fifo_canrxcount++;
 27229  0002CC  2A2F               	incf	_fifo_canrxcount,f,c	;volatile
 27230  0002CE                     
 27231                           ; BSR set to: 1
 27232                           ;main.c: 249: if ( fail ) {
 27233  0002CE  5021               	movf	Interrupt@fail,w,c
 27234  0002D0  B4D8               	btfsc	status,2,c
 27235  0002D2  D001               	goto	i1u1771_21
 27236  0002D4  D001               	goto	i1u1771_20
 27237  0002D6                     i1u1771_21:
 27238  0002D6  D001               	goto	i1l13341
 27239  0002D8                     i1u1771_20:
 27240  0002D8  D77E               	goto	i1l13313
 27241  0002DA                     i1l13341:
 27242                           
 27243                           ;main.c: 256: }
 27244                           ;main.c: 258: }
 27245                           ;main.c: 260: }
 27246                           ;main.c: 263: RXBnIF = 0;
 27247  0002DA  92A4               	bcf	4004,1,c	;volatile
 27248  0002DC                     i1l427:
 27249  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 27250  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 27251  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 27252  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 27253  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 27254  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 27255  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 27256  0002F8  0010               	retfie	
 27257  0002FA                     __end_of_Interrupt:
 27258                           	opt stack 0
 27259                           tblptru	equ	0xFF8
 27260                           tblptrh	equ	0xFF7
 27261                           tblptrl	equ	0xFF6
 27262                           tablat	equ	0xFF5
 27263                           prodh	equ	0xFF4
 27264                           prodl	equ	0xFF3
 27265                           intcon	equ	0xFF2
 27266                           indf0	equ	0xFEF
 27267                           postinc0	equ	0xFEE
 27268                           fsr0h	equ	0xFEA
 27269                           fsr0l	equ	0xFE9
 27270                           wreg	equ	0xFE8
 27271                           indf1	equ	0xFE7
 27272                           postinc1	equ	0xFE6
 27273                           postdec1	equ	0xFE5
 27274                           fsr1h	equ	0xFE2
 27275                           fsr1l	equ	0xFE1
 27276                           bsr	equ	0xFE0
 27277                           indf2	equ	0xFDF
 27278                           postinc2	equ	0xFDE
 27279                           postdec2	equ	0xFDD
 27280                           plusw2	equ	0xFDB
 27281                           fsr2h	equ	0xFDA
 27282                           fsr2l	equ	0xFD9
 27283                           status	equ	0xFD8
 27284                           
 27285 ;; *************** function i1_WriteTimer0 *****************
 27286 ;; Defined at:
 27287 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27288 ;; Parameters:    Size  Location     Type
 27289 ;;  timer0          2    0[COMRAM] unsigned int 
 27290 ;; Auto vars:     Size  Location     Type
 27291 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27292 ;; Return value:  Size  Location     Type
 27293 ;;		None               void
 27294 ;; Registers used:
 27295 ;;		None
 27296 ;; Tracked objects:
 27297 ;;		On entry : 0/0
 27298 ;;		On exit  : 0/0
 27299 ;;		Unchanged: 0/0
 27300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27301 ;;      Params:         2       0       0       0       0       0       0
 27302 ;;      Locals:         2       0       0       0       0       0       0
 27303 ;;      Temps:          0       0       0       0       0       0       0
 27304 ;;      Totals:         4       0       0       0       0       0       0
 27305 ;;Total ram usage:        4 bytes
 27306 ;; Hardware stack levels used:    1
 27307 ;; This function calls:
 27308 ;;		Nothing
 27309 ;; This function is called by:
 27310 ;;		_Interrupt
 27311 ;; This function uses a non-reentrant model
 27312 ;;
 27313                           
 27314                           	psect	text83
 27315  0016BA                     __ptext83:
 27316                           	opt stack 0
 27317  0016BA                     i1_WriteTimer0:
 27318                           	opt stack 20
 27319                           
 27320                           ;incstack = 0
 27321                           ;incstack = 0
 27322  0016BA  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27323  0016BE  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27324  0016C2  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27325  0016C6  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27326  0016CA  0012               	return	
 27327  0016CC                     __end_ofi1_WriteTimer0:
 27328                           	opt stack 0
 27329                           tblptru	equ	0xFF8
 27330                           tblptrh	equ	0xFF7
 27331                           tblptrl	equ	0xFF6
 27332                           tablat	equ	0xFF5
 27333                           prodh	equ	0xFF4
 27334                           prodl	equ	0xFF3
 27335                           intcon	equ	0xFF2
 27336                           indf0	equ	0xFEF
 27337                           postinc0	equ	0xFEE
 27338                           fsr0h	equ	0xFEA
 27339                           fsr0l	equ	0xFE9
 27340                           wreg	equ	0xFE8
 27341                           indf1	equ	0xFE7
 27342                           postinc1	equ	0xFE6
 27343                           postdec1	equ	0xFE5
 27344                           fsr1h	equ	0xFE2
 27345                           fsr1l	equ	0xFE1
 27346                           bsr	equ	0xFE0
 27347                           indf2	equ	0xFDF
 27348                           postinc2	equ	0xFDE
 27349                           postdec2	equ	0xFDD
 27350                           plusw2	equ	0xFDB
 27351                           fsr2h	equ	0xFDA
 27352                           fsr2l	equ	0xFD9
 27353                           status	equ	0xFD8
 27354                           
 27355 ;; *************** function _fifo_getFree *****************
 27356 ;; Defined at:
 27357 ;;		line 97 in file "fifo.c"
 27358 ;; Parameters:    Size  Location     Type
 27359 ;;  f               2    0[COMRAM] PTR struct .
 27360 ;;		 -> canInputFifo(8), 
 27361 ;; Auto vars:     Size  Location     Type
 27362 ;;		None
 27363 ;; Return value:  Size  Location     Type
 27364 ;;                  2    0[COMRAM] unsigned short 
 27365 ;; Registers used:
 27366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27367 ;; Tracked objects:
 27368 ;;		On entry : F/1
 27369 ;;		On exit  : F/1
 27370 ;;		Unchanged: F/0
 27371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27372 ;;      Params:         2       0       0       0       0       0       0
 27373 ;;      Locals:         0       0       0       0       0       0       0
 27374 ;;      Temps:          8       0       0       0       0       0       0
 27375 ;;      Totals:        10       0       0       0       0       0       0
 27376 ;;Total ram usage:       10 bytes
 27377 ;; Hardware stack levels used:    1
 27378 ;; This function calls:
 27379 ;;		Nothing
 27380 ;; This function is called by:
 27381 ;;		_Interrupt
 27382 ;; This function uses a non-reentrant model
 27383 ;;
 27384                           
 27385                           	psect	text84
 27386  002810                     __ptext84:
 27387                           	opt stack 0
 27388  002810                     _fifo_getFree:
 27389                           	opt stack 20
 27390                           
 27391                           ; BSR set to: 1
 27392                           ;fifo.c: 98: if (f->head < f->tail) {
 27393                           
 27394                           ;incstack = 0
 27395                           ;incstack = 0
 27396  002810  EE20 F004          	lfsr	2,4
 27397  002814  5001               	movf	fifo_getFree@f,w,c
 27398  002816  26D9               	addwf	fsr2l,f,c
 27399  002818  5002               	movf	fifo_getFree@f+1,w,c
 27400  00281A  22DA               	addwfc	fsr2h,f,c
 27401  00281C  EE10 F002          	lfsr	1,2
 27402  002820  5001               	movf	fifo_getFree@f,w,c
 27403  002822  26E1               	addwf	fsr1l,f,c
 27404  002824  5002               	movf	fifo_getFree@f+1,w,c
 27405  002826  22E2               	addwfc	fsr1h,f,c
 27406  002828  52E6               	movf	postinc1,f,c
 27407  00282A  52DE               	movf	postinc2,f,c
 27408  00282C  50DD               	movf	postdec2,w,c
 27409  00282E  5CE5               	subwf	postdec1,w,c
 27410  002830  E102               	bnz	i1u634_25
 27411  002832  50DF               	movf	indf2,w,c
 27412  002834  5CE7               	subwf	indf1,w,c
 27413  002836                     i1u634_25:
 27414  002836  E213               	bc	i1l6447
 27415                           
 27416                           ; BSR set to: 1
 27417                           ;fifo.c: 99: return (f->tail - f->head);
 27418  002838  EE20 F002          	lfsr	2,2
 27419  00283C  D834               	call	PL74	;call to abstracted procedure
 27420  00283E  EE20 F004          	lfsr	2,4
 27421  002842  5001               	movf	fifo_getFree@f,w,c
 27422  002844  26D9               	addwf	fsr2l,f,c
 27423  002846  5002               	movf	fifo_getFree@f+1,w,c
 27424  002848  22DA               	addwfc	fsr2h,f,c
 27425  00284A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27426  00284E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27427  002852  5003               	movf	??_fifo_getFree,w,c
 27428  002854  5C05               	subwf	??_fifo_getFree+2,w,c
 27429  002856  6E01               	movwf	?_fifo_getFree,c
 27430  002858  5004               	movf	??_fifo_getFree+1,w,c
 27431  00285A  5806               	subwfb	??_fifo_getFree+3,w,c
 27432  00285C  D022               	goto	L43
 27433  00285E                     i1l6447:
 27434                           
 27435                           ; BSR set to: 1
 27436                           ;fifo.c: 101: else {
 27437                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27438  00285E  EE20 F004          	lfsr	2,4
 27439  002862  D821               	call	PL74	;call to abstracted procedure
 27440  002864  EE20 F002          	lfsr	2,2
 27441  002868  5001               	movf	fifo_getFree@f,w,c
 27442  00286A  26D9               	addwf	fsr2l,f,c
 27443  00286C  5002               	movf	fifo_getFree@f+1,w,c
 27444  00286E  22DA               	addwfc	fsr2h,f,c
 27445  002870  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27446  002874  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27447  002878  EE20 F006          	lfsr	2,6
 27448  00287C  5001               	movf	fifo_getFree@f,w,c
 27449  00287E  26D9               	addwf	fsr2l,f,c
 27450  002880  5002               	movf	fifo_getFree@f+1,w,c
 27451  002882  22DA               	addwfc	fsr2h,f,c
 27452  002884  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27453  002888  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27454  00288C  5005               	movf	??_fifo_getFree+2,w,c
 27455  00288E  5C07               	subwf	??_fifo_getFree+4,w,c
 27456  002890  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27457  002892  5006               	movf	??_fifo_getFree+3,w,c
 27458  002894  5808               	subwfb	??_fifo_getFree+5,w,c
 27459  002896  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27460  002898  5003               	movf	??_fifo_getFree,w,c
 27461  00289A  2409               	addwf	??_fifo_getFree+6,w,c
 27462  00289C  6E01               	movwf	?_fifo_getFree,c
 27463  00289E  5004               	movf	??_fifo_getFree+1,w,c
 27464  0028A0  200A               	addwfc	??_fifo_getFree+7,w,c
 27465  0028A2                     L43:
 27466  0028A2  6E02               	movwf	?_fifo_getFree+1,c
 27467                           
 27468                           ; BSR set to: 1
 27469  0028A4  0012               	return	
 27470  0028A6                     __end_of_fifo_getFree:
 27471                           	opt stack 0
 27472  0028A6                     PL74:
 27473                           	opt stack 20
 27474  0028A6  5001               	movf	fifo_getFree@f,w,c
 27475  0028A8  26D9               	addwf	fsr2l,f,c
 27476  0028AA  5002               	movf	fifo_getFree@f+1,w,c
 27477  0028AC  22DA               	addwfc	fsr2h,f,c
 27478  0028AE  CFDE F003          	movff	postinc2,??_fifo_getFree
 27479  0028B2  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27480  0028B6  0012               	return	
 27481  0028B8                     __end_ofPL74:
 27482                           	opt stack 0
 27483                           tblptru	equ	0xFF8
 27484                           tblptrh	equ	0xFF7
 27485                           tblptrl	equ	0xFF6
 27486                           tablat	equ	0xFF5
 27487                           prodh	equ	0xFF4
 27488                           prodl	equ	0xFF3
 27489                           intcon	equ	0xFF2
 27490                           indf0	equ	0xFEF
 27491                           postinc0	equ	0xFEE
 27492                           fsr0h	equ	0xFEA
 27493                           fsr0l	equ	0xFE9
 27494                           wreg	equ	0xFE8
 27495                           indf1	equ	0xFE7
 27496                           postinc1	equ	0xFE6
 27497                           postdec1	equ	0xFE5
 27498                           fsr1h	equ	0xFE2
 27499                           fsr1l	equ	0xFE1
 27500                           bsr	equ	0xFE0
 27501                           indf2	equ	0xFDF
 27502                           postinc2	equ	0xFDE
 27503                           postdec2	equ	0xFDD
 27504                           plusw2	equ	0xFDB
 27505                           fsr2h	equ	0xFDA
 27506                           fsr2l	equ	0xFD9
 27507                           status	equ	0xFD8
 27508                           
 27509 ;; *************** function _ECANReceiveMessage *****************
 27510 ;; Defined at:
 27511 ;;		line 803 in file "ECAN.c"
 27512 ;; Parameters:    Size  Location     Type
 27513 ;;  id              2    9[COMRAM] PTR unsigned long 
 27514 ;;		 -> id(4), 
 27515 ;;  data            2   11[COMRAM] PTR unsigned char 
 27516 ;;		 -> data(8), 
 27517 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 27518 ;;		 -> dlc(1), 
 27519 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 27520 ;;		 -> flags(1), 
 27521 ;; Auto vars:     Size  Location     Type
 27522 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 27523 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27524 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27525 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 27526 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27527 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27528 ;;  temp            1   19[COMRAM] struct .
 27529 ;;  mode            1   18[COMRAM] unsigned char 
 27530 ;;  i               1   17[COMRAM] unsigned char 
 27531 ;; Return value:  Size  Location     Type
 27532 ;;                  1    wreg      enum E15660
 27533 ;; Registers used:
 27534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27535 ;; Tracked objects:
 27536 ;;		On entry : F/1
 27537 ;;		On exit  : 0/0
 27538 ;;		Unchanged: 0/0
 27539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27540 ;;      Params:         6       0       0       0       0       0       0
 27541 ;;      Locals:         7       0       0       0       0       0       0
 27542 ;;      Temps:          0       0       0       0       0       0       0
 27543 ;;      Totals:        13       0       0       0       0       0       0
 27544 ;;Total ram usage:       13 bytes
 27545 ;; Hardware stack levels used:    1
 27546 ;; Hardware stack levels required when called:    1
 27547 ;; This function calls:
 27548 ;;		__ECANPointBuffer
 27549 ;;		__RegsToCANID
 27550 ;; This function is called by:
 27551 ;;		_Interrupt
 27552 ;; This function uses a non-reentrant model
 27553 ;;
 27554                           
 27555                           	psect	text85
 27556  00462E                     __ptext85:
 27557                           	opt stack 0
 27558  00462E                     _ECANReceiveMessage:
 27559                           	opt stack 19
 27560                           
 27561                           ; BSR set to: 1
 27562                           ;ECAN.c: 805: BYTE mode;
 27563                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27564                           ;ECAN.c: 809: char i;
 27565                           ;ECAN.c: 810: BYTE_VAL temp;
 27566                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27567                           
 27568                           ; BSR set to: 1
 27569                           ;incstack = 0
 27570                           ;incstack = 0
 27571  00462E  6A2B               	clrf	__ECANRxFilterHitInfo,c
 27572                           
 27573                           ; BSR set to: 1
 27574                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27575  004630  5077               	movf	3959,w,c	;volatile
 27576  004632  0BC0               	andlw	192
 27577  004634  6E13               	movwf	ECANReceiveMessage@mode,c
 27578                           
 27579                           ; BSR set to: 1
 27580                           ;ECAN.c: 816: if ( mode == 0x00 )
 27581  004636  6613               	tstfsz	ECANReceiveMessage@mode,c
 27582  004638  D032               	goto	i1l9781
 27583                           
 27584                           ; BSR set to: 1
 27585                           ;ECAN.c: 822: {
 27586                           ;ECAN.c: 824: if ( RXB0FUL )
 27587  00463A  AE60               	btfss	3936,7,c	;volatile
 27588  00463C  D012               	goto	i1l1461
 27589                           
 27590                           ; BSR set to: 1
 27591                           ;ECAN.c: 825: {
 27592                           ;ECAN.c: 827: RXB0IF = 0;
 27593  00463E  90A4               	bcf	4004,0,c	;volatile
 27594                           
 27595                           ;ECAN.c: 830: if ( RXB0OVFL )
 27596  004640  AE74               	btfss	3956,7,c	;volatile
 27597  004642  D006               	goto	i1l9757
 27598                           
 27599                           ; BSR set to: 1
 27600                           ;ECAN.c: 831: {
 27601                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27602  004644  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27603  004646  6ED9               	movwf	fsr2l,c
 27604  004648  6ADA               	clrf	fsr2h,c
 27605  00464A  0E00               	movlw	0
 27606  00464C  86DB               	bsf	plusw2,3,c
 27607                           
 27608                           ; BSR set to: 1
 27609                           ;ECAN.c: 833: RXB0OVFL = 0;
 27610  00464E  9E74               	bcf	3956,7,c	;volatile
 27611  004650                     i1l9757:
 27612                           
 27613                           ; BSR set to: 1
 27614                           ;ECAN.c: 834: }
 27615                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27616  004650  A060               	btfss	3936,0,c	;volatile
 27617  004652  D002               	bra	i1u1167_25
 27618  004654  802B               	bsf	__ECANRxFilterHitInfo,0,c
 27619  004656  D001               	bra	i1u1167_27
 27620  004658                     i1u1167_25:
 27621  004658  902B               	bcf	__ECANRxFilterHitInfo,0,c
 27622  00465A                     i1u1167_27:
 27623                           
 27624                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27625  00465A  0E0F               	movlw	15	;volatile
 27626  00465C  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27627  00465E  0E60               	movlw	96	;volatile
 27628  004660  D01A               	goto	L44
 27629  004662                     i1l1461:
 27630                           
 27631                           ; BSR set to: 1
 27632                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27633  004662  010F               	movlb	15	; () banked
 27634  004664  AF50               	btfss	80,7,b	;volatile
 27635  004666  D019               	goto	i1l9775
 27636                           
 27637                           ; BSR set to: 15
 27638                           ;ECAN.c: 842: {
 27639                           ;ECAN.c: 844: RXB1IF = 0;
 27640  004668  92A4               	bcf	4004,1,c	;volatile
 27641                           
 27642                           ;ECAN.c: 847: if ( RXB1OVFL )
 27643  00466A  AC74               	btfss	3956,6,c	;volatile
 27644  00466C  D006               	goto	i1l9767
 27645                           
 27646                           ; BSR set to: 15
 27647                           ;ECAN.c: 848: {
 27648                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27649  00466E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27650  004670  6ED9               	movwf	fsr2l,c
 27651  004672  6ADA               	clrf	fsr2h,c
 27652  004674  0E00               	movlw	0
 27653  004676  86DB               	bsf	plusw2,3,c
 27654                           
 27655                           ; BSR set to: 15
 27656                           ;ECAN.c: 850: RXB1OVFL = 0;
 27657  004678  9C74               	bcf	3956,6,c	;volatile
 27658  00467A                     i1l9767:
 27659                           
 27660                           ; BSR set to: 15
 27661                           ;ECAN.c: 851: }
 27662                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27663  00467A  5150               	movf	80,w,b	;volatile
 27664  00467C  0B07               	andlw	7
 27665  00467E  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27666                           
 27667                           ; BSR set to: 15
 27668                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27669  004680  0E02               	movlw	2
 27670  004682  602B               	cpfslt	__ECANRxFilterHitInfo,c
 27671  004684  D005               	goto	i1l9773
 27672                           
 27673                           ; BSR set to: 15
 27674                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27675  004686  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27676  004688  6ED9               	movwf	fsr2l,c
 27677  00468A  6ADA               	clrf	fsr2h,c
 27678  00468C  0E00               	movlw	0
 27679  00468E  8EDB               	bsf	plusw2,7,c
 27680  004690                     i1l9773:
 27681                           
 27682                           ; BSR set to: 15
 27683                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27684  004690  0E0F               	movlw	15	;volatile
 27685  004692  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27686  004694  0E50               	movlw	80	;volatile
 27687  004696                     L44:
 27688  004696  6E15               	movwf	ECANReceiveMessage@ptr,c
 27689                           
 27690                           ;ECAN.c: 860: }
 27691  004698  D065               	goto	i1l9835
 27692  00469A                     i1l9775:
 27693                           
 27694                           ;ECAN.c: 861: else
 27695                           ;ECAN.c: 862: return FALSE;
 27696  00469A  0E00               	movlw	0
 27697  00469C  D0C6               	goto	i1l1468
 27698  00469E                     i1l9781:
 27699                           
 27700                           ; BSR set to: 1
 27701                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27702  00469E  5013               	movf	ECANReceiveMessage@mode,w,c
 27703  0046A0  0A40               	xorlw	64
 27704  0046A2  E146               	bnz	i1l1471
 27705                           
 27706                           ; BSR set to: 1
 27707                           ;ECAN.c: 875: {
 27708                           ;ECAN.c: 876: if ( RXB0FUL )
 27709  0046A4  AE60               	btfss	3936,7,c	;volatile
 27710  0046A6  D004               	goto	i1l1472
 27711                           
 27712                           ; BSR set to: 1
 27713                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27714  0046A8  0E0F               	movlw	15	;volatile
 27715  0046AA  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27716  0046AC  0E60               	movlw	96	;volatile
 27717  0046AE  D03E               	goto	L51
 27718  0046B0                     i1l1472:
 27719                           
 27720                           ; BSR set to: 1
 27721                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27722  0046B0  010F               	movlb	15	; () banked
 27723  0046B2  AF50               	btfss	80,7,b	;volatile
 27724  0046B4  D004               	goto	i1l1474
 27725                           
 27726                           ; BSR set to: 15
 27727                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27728  0046B6  0E0F               	movlw	15	;volatile
 27729  0046B8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27730  0046BA  0E50               	movlw	80	;volatile
 27731  0046BC  D037               	goto	L51
 27732  0046BE                     i1l1474:
 27733                           
 27734                           ; BSR set to: 15
 27735                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27736  0046BE  010D               	movlb	13
 27737  0046C0  B5F8               	btfsc	248,2,b	;volatile
 27738  0046C2  D007               	goto	i1l1476
 27739  0046C4  010E               	movlb	14
 27740  0046C6  AF20               	btfss	32,7,b	;volatile
 27741  0046C8  D004               	goto	i1l1476
 27742                           
 27743                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27744  0046CA  0E0E               	movlw	14	;volatile
 27745  0046CC  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27746  0046CE  0E20               	movlw	32	;volatile
 27747  0046D0  D02D               	goto	L51
 27748  0046D2                     i1l1476:
 27749                           
 27750                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27751  0046D2  010D               	movlb	13
 27752  0046D4  B7F8               	btfsc	248,3,b	;volatile
 27753  0046D6  D007               	goto	i1l1478
 27754  0046D8  010E               	movlb	14
 27755  0046DA  AF30               	btfss	48,7,b	;volatile
 27756  0046DC  D004               	goto	i1l1478
 27757                           
 27758                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27759  0046DE  0E0E               	movlw	14	;volatile
 27760  0046E0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27761  0046E2  0E30               	movlw	48	;volatile
 27762  0046E4  D023               	goto	L51
 27763  0046E6                     i1l1478:
 27764                           
 27765                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27766  0046E6  010D               	movlb	13
 27767  0046E8  B9F8               	btfsc	248,4,b	;volatile
 27768  0046EA  D007               	goto	i1l1480
 27769  0046EC  010E               	movlb	14
 27770  0046EE  AF40               	btfss	64,7,b	;volatile
 27771  0046F0  D004               	goto	i1l1480
 27772                           
 27773                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27774  0046F2  0E0E               	movlw	14	;volatile
 27775  0046F4  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27776  0046F6  0E40               	movlw	64	;volatile
 27777  0046F8  D019               	goto	L51
 27778  0046FA                     i1l1480:
 27779                           
 27780                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27781  0046FA  010D               	movlb	13
 27782  0046FC  BBF8               	btfsc	248,5,b	;volatile
 27783  0046FE  D005               	goto	i1l1482
 27784  004700  010E               	movlb	14
 27785  004702  AF50               	btfss	80,7,b	;volatile
 27786  004704  D002               	goto	i1l1482
 27787                           
 27788                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27789  004706  0E0E               	movlw	14	;volatile
 27790  004708  D7D7               	goto	L52
 27791  00470A                     i1l1482:
 27792                           
 27793                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27794  00470A  010D               	movlb	13
 27795  00470C  BDF8               	btfsc	248,6,b	;volatile
 27796  00470E  D005               	goto	i1l1484
 27797  004710  010E               	movlb	14
 27798  004712  AF60               	btfss	96,7,b	;volatile
 27799  004714  D002               	goto	i1l1484
 27800                           
 27801                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27802  004716  0E0E               	movlw	14	;volatile
 27803  004718  D7C8               	goto	L53
 27804  00471A                     i1l1484:
 27805                           
 27806                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27807  00471A  010D               	movlb	13
 27808  00471C  BFF8               	btfsc	248,7,b	;volatile
 27809  00471E  D7BD               	goto	i1l9775
 27810  004720  010E               	movlb	14
 27811  004722  AF70               	btfss	112,7,b	;volatile
 27812  004724  D7BA               	goto	i1l9775
 27813                           
 27814                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27815  004726  0E0E               	movlw	14	;volatile
 27816  004728  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27817  00472A  0E70               	movlw	112	;volatile
 27818  00472C                     L51:
 27819  00472C  6E15               	movwf	ECANReceiveMessage@ptr,c
 27820  00472E  D00A               	goto	i1l9825
 27821  004730                     i1l1471:
 27822                           
 27823                           ; BSR set to: 1
 27824                           ;ECAN.c: 910: else
 27825                           ;ECAN.c: 915: {
 27826                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27827  004730  AE74               	btfss	3956,7,c	;volatile
 27828  004732  D7B3               	goto	i1l9775
 27829                           
 27830                           ; BSR set to: 1
 27831                           ;ECAN.c: 919: {
 27832                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27833  004734  506F               	movf	3951,w,c	;volatile
 27834  004736  0B07               	andlw	7
 27835  004738  ECE1  F00F         	call	__ECANPointBuffer
 27836  00473C  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27837  004740  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27838  004744                     i1l9825:
 27839                           
 27840                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27841  004744  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27842  004748  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27843  00474C  50DF               	movf	indf2,w,c
 27844  00474E  0B1F               	andlw	31
 27845  004750  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27846                           
 27847                           ;ECAN.c: 934: RXB1IF = 0;
 27848  004752  92A4               	bcf	4004,1,c	;volatile
 27849                           
 27850                           ;ECAN.c: 936: if ( RXB1OVFL )
 27851  004754  AC74               	btfss	3956,6,c	;volatile
 27852  004756  D006               	goto	i1l9835
 27853                           
 27854                           ;ECAN.c: 937: {
 27855                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27856  004758  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27857  00475A  6ED9               	movwf	fsr2l,c
 27858  00475C  6ADA               	clrf	fsr2h,c
 27859  00475E  0E00               	movlw	0
 27860  004760  86DB               	bsf	plusw2,3,c
 27861                           
 27862                           ;ECAN.c: 939: RXB1OVFL = 0;
 27863  004762  9C74               	bcf	3956,6,c	;volatile
 27864  004764                     i1l9835:
 27865                           
 27866                           ;ECAN.c: 944: savedPtr = ptr;
 27867  004764  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27868  004768  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27869                           
 27870                           ;ECAN.c: 945: *msgFlags = 0;
 27871  00476C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27872  00476E  6ED9               	movwf	fsr2l,c
 27873  004770  6ADA               	clrf	fsr2h,c
 27874  004772  6ADF               	clrf	indf2,c
 27875                           
 27876                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27877  004774  EE20 F005          	lfsr	2,5
 27878  004778  D859               	call	PL92	;call to abstracted procedure
 27879                           
 27880                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27881  00477A  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27882  00477C  6ED9               	movwf	fsr2l,c
 27883  00477E  6ADA               	clrf	fsr2h,c
 27884  004780  5014               	movf	ECANReceiveMessage@temp,w,c
 27885  004782  0B0F               	andlw	15
 27886  004784  6EDF               	movwf	indf2,c
 27887                           
 27888                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27889  004786  AC14               	btfss	ECANReceiveMessage@temp,6,c
 27890  004788  D005               	goto	i1l1492
 27891                           
 27892                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27893  00478A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27894  00478C  6ED9               	movwf	fsr2l,c
 27895  00478E  6ADA               	clrf	fsr2h,c
 27896  004790  0E00               	movlw	0
 27897  004792  8CDB               	bsf	plusw2,6,c
 27898  004794                     i1l1492:
 27899                           
 27900                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27901  004794  EE20 F002          	lfsr	2,2
 27902  004798  D849               	call	PL92	;call to abstracted procedure
 27903                           
 27904                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27905  00479A  A614               	btfss	ECANReceiveMessage@temp,3,c
 27906  00479C  D008               	goto	i1l1493
 27907                           
 27908                           ;ECAN.c: 958: {
 27909                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27910  00479E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27911  0047A0  6ED9               	movwf	fsr2l,c
 27912  0047A2  6ADA               	clrf	fsr2h,c
 27913  0047A4  0E00               	movlw	0
 27914  0047A6  8ADB               	bsf	plusw2,5,c
 27915                           
 27916                           ;ECAN.c: 960: temp.Val = 1;
 27917  0047A8  0E01               	movlw	1
 27918  0047AA  6E14               	movwf	ECANReceiveMessage@temp,c
 27919                           
 27920                           ;ECAN.c: 961: }
 27921  0047AC  D001               	goto	i1l9853
 27922  0047AE                     i1l1493:
 27923                           
 27924                           ;ECAN.c: 962: else
 27925                           ;ECAN.c: 963: temp.Val = 0;
 27926  0047AE  6A14               	clrf	ECANReceiveMessage@temp,c
 27927  0047B0                     i1l9853:
 27928                           
 27929                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27930  0047B0  2815               	incf	ECANReceiveMessage@ptr,w,c
 27931  0047B2  6E01               	movwf	?__RegsToCANID,c
 27932  0047B4  0E00               	movlw	0
 27933  0047B6  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27934  0047B8  6E02               	movwf	?__RegsToCANID+1,c
 27935  0047BA  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27936  0047BE  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 27937  0047C2  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 27938  0047C6  EC5D  F01B         	call	__RegsToCANID	;wreg free
 27939                           
 27940                           ;ECAN.c: 968: ptr += 6;
 27941  0047CA  0E06               	movlw	6
 27942  0047CC  2615               	addwf	ECANReceiveMessage@ptr,f,c
 27943  0047CE  0E00               	movlw	0
 27944  0047D0  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27945                           
 27946                           ;ECAN.c: 969: temp.Val = *dataLen;
 27947  0047D2  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27948  0047D4  6ED9               	movwf	fsr2l,c
 27949  0047D6  6ADA               	clrf	fsr2h,c
 27950  0047D8  50DF               	movf	indf2,w,c
 27951  0047DA  6E14               	movwf	ECANReceiveMessage@temp,c
 27952                           
 27953                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27954  0047DC  6A12               	clrf	ECANReceiveMessage@i,c
 27955  0047DE  D00F               	goto	i1l9869
 27956  0047E0                     i1l9861:
 27957                           
 27958                           ;ECAN.c: 971: *data++ = *ptr++;
 27959  0047E0  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27960  0047E4  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27961  0047E8  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 27962  0047EC  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 27963  0047F0  CFDF FFE7          	movff	indf2,indf1
 27964  0047F4  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 27965  0047F6  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 27966  0047F8  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 27967  0047FA  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 27968  0047FC  2A12               	incf	ECANReceiveMessage@i,f,c
 27969  0047FE                     i1l9869:
 27970  0047FE  5014               	movf	ECANReceiveMessage@temp,w,c
 27971  004800  5C12               	subwf	ECANReceiveMessage@i,w,c
 27972  004802  E3EE               	bnc	i1l9861
 27973                           
 27974                           ;ECAN.c: 974: if ( IRXIF )
 27975  004804  AEA4               	btfss	4004,7,c	;volatile
 27976  004806  D006               	goto	i1l9875
 27977                           
 27978                           ;ECAN.c: 975: {
 27979                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27980  004808  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27981  00480A  6ED9               	movwf	fsr2l,c
 27982  00480C  6ADA               	clrf	fsr2h,c
 27983  00480E  0E00               	movlw	0
 27984  004810  88DB               	bsf	plusw2,4,c
 27985                           
 27986                           ;ECAN.c: 977: IRXIF = 0;
 27987  004812  9EA4               	bcf	4004,7,c	;volatile
 27988  004814                     i1l9875:
 27989                           
 27990                           ;ECAN.c: 978: }
 27991                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27992  004814  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27993  004818  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27994  00481C  0E7F               	movlw	127
 27995  00481E  16DF               	andwf	indf2,f,c
 27996                           
 27997                           ;ECAN.c: 985: if ( mode == 0x80 )
 27998  004820  5013               	movf	ECANReceiveMessage@mode,w,c
 27999  004822  0A80               	xorlw	128
 28000  004824  B4D8               	btfsc	status,2,c
 28001                           
 28002                           ;ECAN.c: 986: FIFOEMPTY = 0;
 28003  004826  9E74               	bcf	3956,7,c	;volatile
 28004                           
 28005                           ;ECAN.c: 992: return TRUE;
 28006  004828  0E01               	movlw	1
 28007  00482A                     i1l1468:
 28008  00482A  0012               	return	
 28009  00482C                     __end_of_ECANReceiveMessage:
 28010                           	opt stack 0
 28011  00482C                     PL92:
 28012                           	opt stack 19
 28013  00482C  5015               	movf	ECANReceiveMessage@ptr,w,c
 28014  00482E  26D9               	addwf	fsr2l,f,c
 28015  004830  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 28016  004832  22DA               	addwfc	fsr2h,f,c
 28017  004834  50DF               	movf	indf2,w,c
 28018  004836  6E14               	movwf	ECANReceiveMessage@temp,c
 28019  004838  0012               	return	
 28020  00483A                     __end_ofPL92:
 28021                           	opt stack 0
 28022                           tblptru	equ	0xFF8
 28023                           tblptrh	equ	0xFF7
 28024                           tblptrl	equ	0xFF6
 28025                           tablat	equ	0xFF5
 28026                           prodh	equ	0xFF4
 28027                           prodl	equ	0xFF3
 28028                           intcon	equ	0xFF2
 28029                           indf0	equ	0xFEF
 28030                           postinc0	equ	0xFEE
 28031                           fsr0h	equ	0xFEA
 28032                           fsr0l	equ	0xFE9
 28033                           wreg	equ	0xFE8
 28034                           indf1	equ	0xFE7
 28035                           postinc1	equ	0xFE6
 28036                           postdec1	equ	0xFE5
 28037                           fsr1h	equ	0xFE2
 28038                           fsr1l	equ	0xFE1
 28039                           bsr	equ	0xFE0
 28040                           indf2	equ	0xFDF
 28041                           postinc2	equ	0xFDE
 28042                           postdec2	equ	0xFDD
 28043                           plusw2	equ	0xFDB
 28044                           fsr2h	equ	0xFDA
 28045                           fsr2l	equ	0xFD9
 28046                           status	equ	0xFD8
 28047                           
 28048 ;; *************** function __RegsToCANID *****************
 28049 ;; Defined at:
 28050 ;;		line 1158 in file "ECAN.c"
 28051 ;; Parameters:    Size  Location     Type
 28052 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 28053 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28054 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28055 ;;  val             2    2[COMRAM] PTR unsigned long 
 28056 ;;		 -> id(4), 
 28057 ;;  type            1    4[COMRAM] unsigned char 
 28058 ;; Auto vars:     Size  Location     Type
 28059 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 28060 ;;		 -> id(4), 
 28061 ;; Return value:  Size  Location     Type
 28062 ;;		None               void
 28063 ;; Registers used:
 28064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28065 ;; Tracked objects:
 28066 ;;		On entry : 0/1
 28067 ;;		On exit  : 0/0
 28068 ;;		Unchanged: 0/0
 28069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28070 ;;      Params:         5       0       0       0       0       0       0
 28071 ;;      Locals:         2       0       0       0       0       0       0
 28072 ;;      Temps:          2       0       0       0       0       0       0
 28073 ;;      Totals:         9       0       0       0       0       0       0
 28074 ;;Total ram usage:        9 bytes
 28075 ;; Hardware stack levels used:    1
 28076 ;; This function calls:
 28077 ;;		Nothing
 28078 ;; This function is called by:
 28079 ;;		_ECANReceiveMessage
 28080 ;; This function uses a non-reentrant model
 28081 ;;
 28082                           
 28083                           	psect	text86
 28084  0036BA                     __ptext86:
 28085                           	opt stack 0
 28086  0036BA                     __RegsToCANID:
 28087                           	opt stack 19
 28088                           
 28089                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28090                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28091                           
 28092                           ;incstack = 0
 28093                           ;incstack = 0
 28094  0036BA  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28095  0036BE  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 28096                           
 28097                           ;ECAN.c: 1163: if ( type == 0 )
 28098  0036C2  6605               	tstfsz	__RegsToCANID@type,c
 28099  0036C4  D038               	goto	i1l9525
 28100                           
 28101                           ;ECAN.c: 1164: {
 28102                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28103  0036C6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28104  0036CA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28105  0036CE  50DF               	movf	indf2,w,c
 28106  0036D0  6E06               	movwf	??__RegsToCANID& (0+255),c
 28107  0036D2  90D8               	bcf	status,0,c
 28108  0036D4  3606               	rlcf	??__RegsToCANID,f,c
 28109  0036D6  90D8               	bcf	status,0,c
 28110  0036D8  3606               	rlcf	??__RegsToCANID,f,c
 28111  0036DA  90D8               	bcf	status,0,c
 28112  0036DC  3406               	rlcf	??__RegsToCANID,w,c
 28113  0036DE  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28114  0036E2  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28115  0036E6  6EDF               	movwf	indf2,c
 28116                           
 28117                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28118  0036E8  EE20 F001          	lfsr	2,1
 28119  0036EC  D864               	call	PL20	;call to abstracted procedure
 28120  0036EE  0E05               	movlw	5
 28121  0036F0  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28122  0036F2                     i1u1127_25:
 28123  0036F2  90D8               	bcf	status,0,c
 28124  0036F4  3206               	rrcf	??__RegsToCANID,f,c
 28125  0036F6  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28126  0036F8  D7FC               	goto	i1u1127_25
 28127  0036FA  5006               	movf	??__RegsToCANID,w,c
 28128                           
 28129                           ;ECAN.c: 1168: ptr++;
 28130                           
 28131                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28132  0036FC  D867               	call	PL64	;call to abstracted procedure
 28133  0036FE  0E05               	movlw	5
 28134  003700  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28135  003702                     i1u1128_25:
 28136  003702  90D8               	bcf	status,0,c
 28137  003704  3206               	rrcf	??__RegsToCANID,f,c
 28138  003706  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28139  003708  D7FC               	goto	i1u1128_25
 28140  00370A  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28141  00370E  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28142  003712  5006               	movf	??__RegsToCANID,w,c
 28143  003714  12DF               	iorwf	indf2,f,c
 28144                           
 28145                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28146  003716  EE20 F002          	lfsr	2,2
 28147  00371A  5008               	movf	__RegsToCANID@Value,w,c
 28148  00371C  26D9               	addwf	fsr2l,f,c
 28149  00371E  5009               	movf	__RegsToCANID@Value+1,w,c
 28150  003720  22DA               	addwfc	fsr2h,f,c
 28151  003722  6ADF               	clrf	indf2,c
 28152                           
 28153                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28154  003724  EE20 F003          	lfsr	2,3
 28155  003728  5008               	movf	__RegsToCANID@Value,w,c
 28156  00372A  26D9               	addwf	fsr2l,f,c
 28157  00372C  5009               	movf	__RegsToCANID@Value+1,w,c
 28158  00372E  22DA               	addwfc	fsr2h,f,c
 28159  003730  0E00               	movlw	0
 28160  003732  6EDF               	movwf	indf2,c
 28161                           
 28162                           ;ECAN.c: 1172: }
 28163  003734  D03F               	goto	i1l1515
 28164  003736                     i1l9525:
 28165                           
 28166                           ;ECAN.c: 1173: else
 28167                           ;ECAN.c: 1174: {
 28168                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28169  003736  EE20 F002          	lfsr	2,2
 28170  00373A  D83D               	call	PL20	;call to abstracted procedure
 28171  00373C  0E05               	movlw	5
 28172  00373E  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28173  003740                     i1u1129_25:
 28174  003740  90D8               	bcf	status,0,c
 28175  003742  3606               	rlcf	??__RegsToCANID,f,c
 28176  003744  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28177  003746  D7FC               	goto	i1u1129_25
 28178  003748  5006               	movf	??__RegsToCANID,w,c
 28179  00374A  6EDF               	movwf	indf2,c
 28180                           
 28181                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28182  00374C  EE20 F003          	lfsr	2,3
 28183  003750  D832               	call	PL20	;call to abstracted procedure
 28184  003752  90D8               	bcf	status,0,c
 28185  003754  3206               	rrcf	??__RegsToCANID,f,c
 28186  003756  90D8               	bcf	status,0,c
 28187  003758  3206               	rrcf	??__RegsToCANID,f,c
 28188  00375A  90D8               	bcf	status,0,c
 28189  00375C  3006               	rrcf	??__RegsToCANID,w,c
 28190                           
 28191                           ;ECAN.c: 1178: ptr++;
 28192                           
 28193                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28194  00375E  D836               	call	PL64	;call to abstracted procedure
 28195  003760  0E03               	movlw	3
 28196  003762  D83E               	call	PL72	;call to abstracted procedure
 28197                           
 28198                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28199  003764  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28200  003768  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28201  00376C  50DF               	movf	indf2,w,c
 28202  00376E  6E06               	movwf	??__RegsToCANID& (0+255),c
 28203  003770  90D8               	bcf	status,0,c
 28204  003772  3206               	rrcf	??__RegsToCANID,f,c
 28205  003774  90D8               	bcf	status,0,c
 28206  003776  3206               	rrcf	??__RegsToCANID,f,c
 28207  003778  90D8               	bcf	status,0,c
 28208  00377A  3206               	rrcf	??__RegsToCANID,f,c
 28209  00377C  0E1C               	movlw	28
 28210  00377E  D830               	call	PL72	;call to abstracted procedure
 28211                           
 28212                           ;ECAN.c: 1182: ptr++;
 28213  003780  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28214  003782  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28215                           
 28216                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28217  003784  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28218  003788  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28219  00378C  EE10 F001          	lfsr	1,1
 28220  003790  5008               	movf	__RegsToCANID@Value,w,c
 28221  003792  26E1               	addwf	fsr1l,f,c
 28222  003794  5009               	movf	__RegsToCANID@Value+1,w,c
 28223  003796  22E2               	addwfc	fsr1h,f,c
 28224  003798  CFDF FFE7          	movff	indf2,indf1
 28225                           
 28226                           ;ECAN.c: 1184: ptr++;
 28227  00379C  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28228  00379E  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28229                           
 28230                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28231  0037A0  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28232  0037A4  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28233  0037A8  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 28234  0037AC  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 28235  0037B0  CFDF FFE7          	movff	indf2,indf1
 28236  0037B4                     i1l1515:
 28237  0037B4  0012               	return	
 28238  0037B6                     __end_of__RegsToCANID:
 28239                           	opt stack 0
 28240  0037B6                     PL20:
 28241                           	opt stack 19
 28242  0037B6  5008               	movf	__RegsToCANID@Value,w,c
 28243  0037B8  26D9               	addwf	fsr2l,f,c
 28244  0037BA  5009               	movf	__RegsToCANID@Value+1,w,c
 28245  0037BC  22DA               	addwfc	fsr2h,f,c
 28246  0037BE  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28247  0037C2  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28248  0037C6  50E7               	movf	indf1,w,c
 28249  0037C8  6E06               	movwf	??__RegsToCANID& (0+255),c
 28250  0037CA  0012               	return	
 28251  0037CC                     __end_ofPL20:
 28252                           	opt stack 0
 28253  0037CC                     PL64:
 28254                           	opt stack 19
 28255  0037CC  6EDF               	movwf	indf2,c
 28256  0037CE  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28257  0037D0  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28258  0037D2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28259  0037D6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28260  0037DA  50DF               	movf	indf2,w,c
 28261  0037DC  6E06               	movwf	??__RegsToCANID& (0+255),c
 28262  0037DE  0012               	return	
 28263  0037E0                     __end_ofPL64:
 28264                           	opt stack 0
 28265  0037E0                     PL72:
 28266                           	opt stack 19
 28267  0037E0  1606               	andwf	??__RegsToCANID,f,c
 28268  0037E2  EE20 F002          	lfsr	2,2
 28269  0037E6  5008               	movf	__RegsToCANID@Value,w,c
 28270  0037E8  26D9               	addwf	fsr2l,f,c
 28271  0037EA  5009               	movf	__RegsToCANID@Value+1,w,c
 28272  0037EC  22DA               	addwfc	fsr2h,f,c
 28273  0037EE  5006               	movf	??__RegsToCANID,w,c
 28274  0037F0  12DF               	iorwf	indf2,f,c
 28275  0037F2  0012               	return	
 28276  0037F4                     __end_ofPL72:
 28277                           	opt stack 0
 28278                           tblptru	equ	0xFF8
 28279                           tblptrh	equ	0xFF7
 28280                           tblptrl	equ	0xFF6
 28281                           tablat	equ	0xFF5
 28282                           prodh	equ	0xFF4
 28283                           prodl	equ	0xFF3
 28284                           intcon	equ	0xFF2
 28285                           indf0	equ	0xFEF
 28286                           postinc0	equ	0xFEE
 28287                           fsr0h	equ	0xFEA
 28288                           fsr0l	equ	0xFE9
 28289                           wreg	equ	0xFE8
 28290                           indf1	equ	0xFE7
 28291                           postinc1	equ	0xFE6
 28292                           postdec1	equ	0xFE5
 28293                           fsr1h	equ	0xFE2
 28294                           fsr1l	equ	0xFE1
 28295                           bsr	equ	0xFE0
 28296                           indf2	equ	0xFDF
 28297                           postinc2	equ	0xFDE
 28298                           postdec2	equ	0xFDD
 28299                           plusw2	equ	0xFDB
 28300                           fsr2h	equ	0xFDA
 28301                           fsr2l	equ	0xFD9
 28302                           status	equ	0xFD8
 28303                           
 28304 ;; *************** function __ECANPointBuffer *****************
 28305 ;; Defined at:
 28306 ;;		line 1209 in file "ECAN.c"
 28307 ;; Parameters:    Size  Location     Type
 28308 ;;  b               1    wreg     unsigned char 
 28309 ;; Auto vars:     Size  Location     Type
 28310 ;;  b               1    3[COMRAM] unsigned char 
 28311 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28312 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28313 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28314 ;; Return value:  Size  Location     Type
 28315 ;;                  2    0[COMRAM] PTR unsigned char 
 28316 ;; Registers used:
 28317 ;;		wreg, status,2, status,0
 28318 ;; Tracked objects:
 28319 ;;		On entry : F/1
 28320 ;;		On exit  : 0/0
 28321 ;;		Unchanged: 0/0
 28322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28323 ;;      Params:         3       0       0       0       0       0       0
 28324 ;;      Locals:         3       0       0       0       0       0       0
 28325 ;;      Temps:          0       0       0       0       0       0       0
 28326 ;;      Totals:         6       0       0       0       0       0       0
 28327 ;;Total ram usage:        6 bytes
 28328 ;; Hardware stack levels used:    1
 28329 ;; This function calls:
 28330 ;;		Nothing
 28331 ;; This function is called by:
 28332 ;;		_ECANReceiveMessage
 28333 ;; This function uses a non-reentrant model
 28334 ;;
 28335                           
 28336                           	psect	text87
 28337  001FC2                     __ptext87:
 28338                           	opt stack 0
 28339  001FC2                     __ECANPointBuffer:
 28340                           	opt stack 19
 28341                           
 28342                           ;incstack = 0
 28343                           ;incstack = 0
 28344                           ;__ECANPointBuffer@b stored from wreg
 28345  001FC2  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28346                           
 28347                           ; BSR set to: 1
 28348                           ;ECAN.c: 1210: BYTE* pt;
 28349                           ;ECAN.c: 1212: switch(b)
 28350  001FC6  D024               	goto	i1l9509
 28351  001FC8                     i1l9491:
 28352                           
 28353                           ; BSR set to: 1
 28354                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28355  001FC8  0E0F               	movlw	15	;volatile
 28356  001FCA  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28357  001FCC  0E60               	movlw	96	;volatile
 28358  001FCE  D01E               	goto	L60
 28359  001FD0                     i1l9493:
 28360                           
 28361                           ; BSR set to: 1
 28362                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28363  001FD0  010F               	movlb	15	; () banked
 28364  001FD2  0E0F               	movlw	15	;volatile
 28365  001FD4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28366  001FD6  0E50               	movlw	80	;volatile
 28367  001FD8  D019               	goto	L60
 28368  001FDA                     i1l9495:
 28369                           
 28370                           ; BSR set to: 1
 28371                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28372  001FDA  010E               	movlb	14	; () banked
 28373  001FDC  0E0E               	movlw	14	;volatile
 28374  001FDE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28375  001FE0  0E20               	movlw	32	;volatile
 28376  001FE2  D014               	goto	L60
 28377  001FE4                     i1l9497:
 28378                           
 28379                           ; BSR set to: 1
 28380                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28381  001FE4  010E               	movlb	14	; () banked
 28382  001FE6  0E0E               	movlw	14	;volatile
 28383  001FE8  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28384  001FEA  0E30               	movlw	48	;volatile
 28385  001FEC  D00F               	goto	L60
 28386  001FEE                     i1l9499:
 28387                           
 28388                           ; BSR set to: 1
 28389                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28390  001FEE  010E               	movlb	14	; () banked
 28391  001FF0  0E0E               	movlw	14	;volatile
 28392  001FF2  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28393  001FF4  0E40               	movlw	64	;volatile
 28394  001FF6  D00A               	goto	L60
 28395  001FF8                     i1l9501:
 28396                           
 28397                           ; BSR set to: 1
 28398                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28399  001FF8  010E               	movlb	14	; () banked
 28400  001FFA  0E0E               	movlw	14	;volatile
 28401  001FFC  D7EB               	goto	L61
 28402  001FFE                     i1l9503:
 28403                           
 28404                           ; BSR set to: 1
 28405                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28406  001FFE  010E               	movlb	14	; () banked
 28407  002000  0E0E               	movlw	14	;volatile
 28408  002002  D7E3               	goto	L62
 28409  002004                     i1l9505:
 28410                           
 28411                           ; BSR set to: 1
 28412                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28413  002004  010E               	movlb	14	; () banked
 28414  002006  0E0E               	movlw	14	;volatile
 28415  002008  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28416  00200A  0E70               	movlw	112	;volatile
 28417  00200C                     L60:
 28418  00200C  6E05               	movwf	__ECANPointBuffer@pt,c
 28419                           
 28420                           ;ECAN.c: 1237: break;
 28421  00200E  D00F               	goto	i1l1520
 28422  002010                     i1l9509:
 28423                           
 28424                           ; BSR set to: 1
 28425  002010  5004               	movf	__ECANPointBuffer@b,w,c
 28426                           
 28427                           ; Switch size 1, requested type "space"
 28428                           ; Number of cases is 7, Range of values is 0 to 6
 28429                           ; switch strategies available:
 28430                           ; Name         Instructions Cycles
 28431                           ; simple_byte           22    12 (average)
 28432                           ;	Chosen strategy is simple_byte
 28433  002012  E0DA               	bz	i1l9491
 28434  002014  0A01               	xorlw	1	; case 1
 28435  002016  E0DC               	bz	i1l9493
 28436  002018  0A03               	xorlw	3	; case 2
 28437  00201A  E0DF               	bz	i1l9495
 28438  00201C  0A01               	xorlw	1	; case 3
 28439  00201E  E0E2               	bz	i1l9497
 28440  002020  0A07               	xorlw	7	; case 4
 28441  002022  E0E5               	bz	i1l9499
 28442  002024  0A01               	xorlw	1	; case 5
 28443  002026  E0E8               	bz	i1l9501
 28444  002028  0A03               	xorlw	3	; case 6
 28445  00202A  E0E9               	bz	i1l9503
 28446  00202C  D7EB               	goto	i1l9505
 28447  00202E                     i1l1520:
 28448                           
 28449                           ;ECAN.c: 1239: return (pt);
 28450  00202E  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28451  002032  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28452  002036  0012               	return	
 28453  002038                     __end_of__ECANPointBuffer:
 28454                           	opt stack 0
 28455                           tblptru	equ	0xFF8
 28456                           tblptrh	equ	0xFF7
 28457                           tblptrl	equ	0xFF6
 28458                           tablat	equ	0xFF5
 28459                           prodh	equ	0xFF4
 28460                           prodl	equ	0xFF3
 28461                           intcon	equ	0xFF2
 28462                           indf0	equ	0xFEF
 28463                           postinc0	equ	0xFEE
 28464                           fsr0h	equ	0xFEA
 28465                           fsr0l	equ	0xFE9
 28466                           wreg	equ	0xFE8
 28467                           indf1	equ	0xFE7
 28468                           postinc1	equ	0xFE6
 28469                           postdec1	equ	0xFE5
 28470                           fsr1h	equ	0xFE2
 28471                           fsr1l	equ	0xFE1
 28472                           bsr	equ	0xFE0
 28473                           indf2	equ	0xFDF
 28474                           postinc2	equ	0xFDE
 28475                           postdec2	equ	0xFDD
 28476                           plusw2	equ	0xFDB
 28477                           fsr2h	equ	0xFDA
 28478                           fsr2l	equ	0xFD9
 28479                           status	equ	0xFD8
 28480                           
 28481 ;; *************** function _fifo_write *****************
 28482 ;; Defined at:
 28483 ;;		line 61 in file "fifo.c"
 28484 ;; Parameters:    Size  Location     Type
 28485 ;;  f               2    0[COMRAM] PTR struct .
 28486 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28487 ;;  buf             2    2[COMRAM] PTR const void 
 28488 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28489 ;;  nbytes          4    4[COMRAM] unsigned long 
 28490 ;; Auto vars:     Size  Location     Type
 28491 ;;  i               4   14[COMRAM] unsigned long 
 28492 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28493 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28494 ;; Return value:  Size  Location     Type
 28495 ;;                  2    0[COMRAM] unsigned short 
 28496 ;; Registers used:
 28497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28498 ;; Tracked objects:
 28499 ;;		On entry : F/1
 28500 ;;		On exit  : F/1
 28501 ;;		Unchanged: F/0
 28502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28503 ;;      Params:         8       0       0       0       0       0       0
 28504 ;;      Locals:         6       0       0       0       0       0       0
 28505 ;;      Temps:          4       0       0       0       0       0       0
 28506 ;;      Totals:        18       0       0       0       0       0       0
 28507 ;;Total ram usage:       18 bytes
 28508 ;; Hardware stack levels used:    1
 28509 ;; This function calls:
 28510 ;;		Nothing
 28511 ;; This function is called by:
 28512 ;;		_Interrupt
 28513 ;; This function uses a non-reentrant model
 28514 ;;
 28515                           
 28516                           	psect	text88
 28517  00358E                     __ptext88:
 28518                           	opt stack 0
 28519  00358E                     _fifo_write:
 28520                           	opt stack 20
 28521                           
 28522                           ; BSR set to: 1
 28523                           ;fifo.c: 62: uint32_t i;
 28524                           ;fifo.c: 63: const uint8_t *p;
 28525                           ;fifo.c: 64: p = buf;
 28526                           
 28527                           ;incstack = 0
 28528                           ;incstack = 0
 28529  00358E  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28530  003592  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28531                           
 28532                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28533  003596  6A0F               	clrf	fifo_write@i,c
 28534  003598  6A10               	clrf	fifo_write@i+1,c
 28535  00359A  6A11               	clrf	fifo_write@i+2,c
 28536  00359C  6A12               	clrf	fifo_write@i+3,c
 28537  00359E  D068               	goto	i1l6435
 28538  0035A0                     i1l6415:
 28539                           
 28540                           ; BSR set to: 1
 28541                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28542                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28543  0035A0  EE20 F004          	lfsr	2,4
 28544  0035A4  5001               	movf	fifo_write@f,w,c
 28545  0035A6  D872               	call	PL12	;call to abstracted procedure
 28546  0035A8  E102               	bnz	i1u629_25
 28547  0035AA  5009               	movf	??_fifo_write,w,c
 28548  0035AC  180B               	xorwf	??_fifo_write+2,w,c
 28549  0035AE                     i1u629_25:
 28550  0035AE  E011               	bz	i1l1547
 28551                           
 28552                           ; BSR set to: 1
 28553  0035B0  EE20 F006          	lfsr	2,6
 28554  0035B4  5001               	movf	fifo_write@f,w,c
 28555  0035B6  D86A               	call	PL12	;call to abstracted procedure
 28556  0035B8  E102               	bnz	i1u630_25
 28557  0035BA  5009               	movf	??_fifo_write,w,c
 28558  0035BC  180B               	xorwf	??_fifo_write+2,w,c
 28559  0035BE                     i1u630_25:
 28560  0035BE  E10E               	bnz	i1l6423
 28561                           
 28562                           ; BSR set to: 1
 28563  0035C0  EE20 F004          	lfsr	2,4
 28564  0035C4  5001               	movf	fifo_write@f,w,c
 28565  0035C6  26D9               	addwf	fsr2l,f,c
 28566  0035C8  5002               	movf	fifo_write@f+1,w,c
 28567  0035CA  22DA               	addwfc	fsr2h,f,c
 28568  0035CC  50DE               	movf	postinc2,w,c
 28569  0035CE  10DD               	iorwf	postdec2,w,c
 28570  0035D0  E105               	bnz	i1l6423
 28571  0035D2                     i1l1547:
 28572                           
 28573                           ; BSR set to: 1
 28574                           ;fifo.c: 71: return i;
 28575  0035D2  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28576  0035D6  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28577  0035DA  D057               	goto	i1l1548
 28578  0035DC                     i1l6423:
 28579                           
 28580                           ; BSR set to: 1
 28581                           ;fifo.c: 73: else {
 28582                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28583  0035DC  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28584  0035E0  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28585  0035E4  EE10 F002          	lfsr	1,2
 28586  0035E8  5001               	movf	fifo_write@f,w,c
 28587  0035EA  26E1               	addwf	fsr1l,f,c
 28588  0035EC  5002               	movf	fifo_write@f+1,w,c
 28589  0035EE  22E2               	addwfc	fsr1h,f,c
 28590  0035F0  CFE6 F009          	movff	postinc1,??_fifo_write
 28591  0035F4  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28592  0035F8  C001  FFE1         	movff	fifo_write@f,fsr1l
 28593  0035FC  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28594  003600  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28595  003604  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28596  003608  5009               	movf	??_fifo_write,w,c
 28597  00360A  240B               	addwf	??_fifo_write+2,w,c
 28598  00360C  6EE1               	movwf	fsr1l,c
 28599  00360E  500A               	movf	??_fifo_write+1,w,c
 28600  003610  200C               	addwfc	??_fifo_write+3,w,c
 28601  003612  6EE2               	movwf	fsr1h,c
 28602  003614  CFDF FFE7          	movff	indf2,indf1
 28603                           
 28604                           ; BSR set to: 1
 28605  003618  4A0D               	infsnz	fifo_write@p,f,c
 28606  00361A  2A0E               	incf	fifo_write@p+1,f,c
 28607                           
 28608                           ; BSR set to: 1
 28609                           ;fifo.c: 75: f->head++;
 28610  00361C  EE20 F002          	lfsr	2,2
 28611  003620  5001               	movf	fifo_write@f,w,c
 28612  003622  26D9               	addwf	fsr2l,f,c
 28613  003624  5002               	movf	fifo_write@f+1,w,c
 28614  003626  22DA               	addwfc	fsr2h,f,c
 28615  003628  2ADE               	incf	postinc2,f,c
 28616  00362A  0E00               	movlw	0
 28617  00362C  22DD               	addwfc	postdec2,f,c
 28618                           
 28619                           ; BSR set to: 1
 28620                           ;fifo.c: 77: if (f->head >= f->size) {
 28621  00362E  EE20 F006          	lfsr	2,6
 28622  003632  5001               	movf	fifo_write@f,w,c
 28623  003634  26D9               	addwf	fsr2l,f,c
 28624  003636  5002               	movf	fifo_write@f+1,w,c
 28625  003638  22DA               	addwfc	fsr2h,f,c
 28626  00363A  EE10 F002          	lfsr	1,2
 28627  00363E  5001               	movf	fifo_write@f,w,c
 28628  003640  26E1               	addwf	fsr1l,f,c
 28629  003642  5002               	movf	fifo_write@f+1,w,c
 28630  003644  22E2               	addwfc	fsr1h,f,c
 28631  003646  52E6               	movf	postinc1,f,c
 28632  003648  52DE               	movf	postinc2,f,c
 28633  00364A  50DD               	movf	postdec2,w,c
 28634  00364C  5CE5               	subwf	postdec1,w,c
 28635  00364E  E102               	bnz	i1u632_25
 28636  003650  50DF               	movf	indf2,w,c
 28637  003652  5CE7               	subwf	indf1,w,c
 28638  003654                     i1u632_25:
 28639  003654  E308               	bnc	i1l6433
 28640                           
 28641                           ; BSR set to: 1
 28642                           ;fifo.c: 78: f->head = 0;
 28643  003656  EE20 F002          	lfsr	2,2
 28644  00365A  5001               	movf	fifo_write@f,w,c
 28645  00365C  26D9               	addwf	fsr2l,f,c
 28646  00365E  5002               	movf	fifo_write@f+1,w,c
 28647  003660  22DA               	addwfc	fsr2h,f,c
 28648  003662  6ADE               	clrf	postinc2,c
 28649  003664  6ADD               	clrf	postdec2,c
 28650  003666                     i1l6433:
 28651                           
 28652                           ; BSR set to: 1
 28653  003666  2A0F               	incf	fifo_write@i,f,c
 28654  003668  0E00               	movlw	0
 28655  00366A  2210               	addwfc	fifo_write@i+1,f,c
 28656  00366C  2211               	addwfc	fifo_write@i+2,f,c
 28657  00366E  2212               	addwfc	fifo_write@i+3,f,c
 28658  003670                     i1l6435:
 28659                           
 28660                           ; BSR set to: 1
 28661  003670  5005               	movf	fifo_write@nbytes,w,c
 28662  003672  5C0F               	subwf	fifo_write@i,w,c
 28663  003674  5006               	movf	fifo_write@nbytes+1,w,c
 28664  003676  5810               	subwfb	fifo_write@i+1,w,c
 28665  003678  5007               	movf	fifo_write@nbytes+2,w,c
 28666  00367A  5811               	subwfb	fifo_write@i+2,w,c
 28667  00367C  5008               	movf	fifo_write@nbytes+3,w,c
 28668  00367E  5812               	subwfb	fifo_write@i+3,w,c
 28669  003680  E38F               	bnc	i1l6415
 28670                           
 28671                           ; BSR set to: 1
 28672                           ;fifo.c: 79: }
 28673                           ;fifo.c: 80: }
 28674                           ;fifo.c: 82: }
 28675                           ;fifo.c: 84: return nbytes;
 28676  003682  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28677  003686  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28678  00368A                     i1l1548:
 28679                           
 28680                           ; BSR set to: 1
 28681  00368A  0012               	return	
 28682  00368C                     __end_of_fifo_write:
 28683                           	opt stack 0
 28684  00368C                     PL12:
 28685                           	opt stack 20
 28686  00368C  26D9               	addwf	fsr2l,f,c
 28687  00368E  5002               	movf	fifo_write@f+1,w,c
 28688  003690  22DA               	addwfc	fsr2h,f,c
 28689  003692  CFDE F009          	movff	postinc2,??_fifo_write
 28690  003696  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28691  00369A  EE20 F002          	lfsr	2,2
 28692  00369E  5001               	movf	fifo_write@f,w,c
 28693  0036A0  26D9               	addwf	fsr2l,f,c
 28694  0036A2  5002               	movf	fifo_write@f+1,w,c
 28695  0036A4  22DA               	addwfc	fsr2h,f,c
 28696  0036A6  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28697  0036AA  CFDD F00C          	movff	postdec2,??_fifo_write+3
 28698  0036AE  2A0B               	incf	??_fifo_write+2,f,c
 28699  0036B0  0E00               	movlw	0
 28700  0036B2  220C               	addwfc	??_fifo_write+3,f,c
 28701  0036B4  500A               	movf	??_fifo_write+1,w,c
 28702  0036B6  180C               	xorwf	??_fifo_write+3,w,c
 28703  0036B8  0012               	return	
 28704  0036BA                     __end_ofPL12:
 28705                           	opt stack 0
 28706                           tblptru	equ	0xFF8
 28707                           tblptrh	equ	0xFF7
 28708                           tblptrl	equ	0xFF6
 28709                           tablat	equ	0xFF5
 28710                           prodh	equ	0xFF4
 28711                           prodl	equ	0xFF3
 28712                           intcon	equ	0xFF2
 28713                           indf0	equ	0xFEF
 28714                           postinc0	equ	0xFEE
 28715                           fsr0h	equ	0xFEA
 28716                           fsr0l	equ	0xFE9
 28717                           wreg	equ	0xFE8
 28718                           indf1	equ	0xFE7
 28719                           postinc1	equ	0xFE6
 28720                           postdec1	equ	0xFE5
 28721                           fsr1h	equ	0xFE2
 28722                           fsr1l	equ	0xFE1
 28723                           bsr	equ	0xFE0
 28724                           indf2	equ	0xFDF
 28725                           postinc2	equ	0xFDE
 28726                           postdec2	equ	0xFDD
 28727                           plusw2	equ	0xFDB
 28728                           fsr2h	equ	0xFDA
 28729                           fsr2l	equ	0xFD9
 28730                           status	equ	0xFD8
 28731                           
 28732 ;; *************** function _ReadUSART *****************
 28733 ;; Defined at:
 28734 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28735 ;; Parameters:    Size  Location     Type
 28736 ;;		None
 28737 ;; Auto vars:     Size  Location     Type
 28738 ;;  data            1    0[COMRAM] unsigned char 
 28739 ;; Return value:  Size  Location     Type
 28740 ;;                  1    wreg      unsigned char 
 28741 ;; Registers used:
 28742 ;;		wreg, status,2, status,0
 28743 ;; Tracked objects:
 28744 ;;		On entry : 0/0
 28745 ;;		On exit  : 0/0
 28746 ;;		Unchanged: 0/0
 28747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28748 ;;      Params:         0       0       0       0       0       0       0
 28749 ;;      Locals:         1       0       0       0       0       0       0
 28750 ;;      Temps:          0       0       0       0       0       0       0
 28751 ;;      Totals:         1       0       0       0       0       0       0
 28752 ;;Total ram usage:        1 bytes
 28753 ;; Hardware stack levels used:    1
 28754 ;; This function calls:
 28755 ;;		Nothing
 28756 ;; This function is called by:
 28757 ;;		_Interrupt
 28758 ;; This function uses a non-reentrant model
 28759 ;;
 28760                           
 28761                           	psect	text89
 28762  001734                     __ptext89:
 28763                           	opt stack 0
 28764  001734                     _ReadUSART:
 28765                           	opt stack 20
 28766                           
 28767                           ; BSR set to: 1
 28768                           ;incstack = 0
 28769                           ;incstack = 0
 28770  001734  0EF2               	movlw	242
 28771  001736  162A               	andwf	_USART_Status,f,c
 28772  001738  ACAB               	btfss	4011,6,c	;volatile
 28773  00173A  D003               	goto	i1l1866
 28774  00173C  902A               	bcf	_USART_Status,0,c
 28775  00173E  B0AB               	btfsc	4011,0,c	;volatile
 28776  001740  802A               	bsf	_USART_Status,0,c
 28777  001742                     i1l1866:
 28778  001742  B4AB               	btfsc	4011,2,c	;volatile
 28779  001744  842A               	bsf	_USART_Status,2,c
 28780  001746  B2AB               	btfsc	4011,1,c	;volatile
 28781  001748  862A               	bsf	_USART_Status,3,c
 28782  00174A  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28783  00174E  5001               	movf	ReadUSART@data,w,c
 28784  001750  0012               	return	
 28785  001752                     __end_of_ReadUSART:
 28786                           	opt stack 0
 28787                           tblptru	equ	0xFF8
 28788                           tblptrh	equ	0xFF7
 28789                           tblptrl	equ	0xFF6
 28790                           tablat	equ	0xFF5
 28791                           prodh	equ	0xFF4
 28792                           prodl	equ	0xFF3
 28793                           intcon	equ	0xFF2
 28794                           indf0	equ	0xFEF
 28795                           postinc0	equ	0xFEE
 28796                           fsr0h	equ	0xFEA
 28797                           fsr0l	equ	0xFE9
 28798                           wreg	equ	0xFE8
 28799                           indf1	equ	0xFE7
 28800                           postinc1	equ	0xFE6
 28801                           postdec1	equ	0xFE5
 28802                           fsr1h	equ	0xFE2
 28803                           fsr1l	equ	0xFE1
 28804                           bsr	equ	0xFE0
 28805                           indf2	equ	0xFDF
 28806                           postinc2	equ	0xFDE
 28807                           postdec2	equ	0xFDD
 28808                           plusw2	equ	0xFDB
 28809                           fsr2h	equ	0xFDA
 28810                           fsr2l	equ	0xFD9
 28811                           status	equ	0xFD8
 28812                           tblptru	equ	0xFF8
 28813                           tblptrh	equ	0xFF7
 28814                           tblptrl	equ	0xFF6
 28815                           tablat	equ	0xFF5
 28816                           prodh	equ	0xFF4
 28817                           prodl	equ	0xFF3
 28818                           intcon	equ	0xFF2
 28819                           indf0	equ	0xFEF
 28820                           postinc0	equ	0xFEE
 28821                           fsr0h	equ	0xFEA
 28822                           fsr0l	equ	0xFE9
 28823                           wreg	equ	0xFE8
 28824                           indf1	equ	0xFE7
 28825                           postinc1	equ	0xFE6
 28826                           postdec1	equ	0xFE5
 28827                           fsr1h	equ	0xFE2
 28828                           fsr1l	equ	0xFE1
 28829                           bsr	equ	0xFE0
 28830                           indf2	equ	0xFDF
 28831                           postinc2	equ	0xFDE
 28832                           postdec2	equ	0xFDD
 28833                           plusw2	equ	0xFDB
 28834                           fsr2h	equ	0xFDA
 28835                           fsr2l	equ	0xFD9
 28836                           status	equ	0xFD8
 28837                           
 28838                           	psect	rparam
 28839  0000                     tblptru	equ	0xFF8
 28840                           tblptrh	equ	0xFF7
 28841                           tblptrl	equ	0xFF6
 28842                           tablat	equ	0xFF5
 28843                           prodh	equ	0xFF4
 28844                           prodl	equ	0xFF3
 28845                           intcon	equ	0xFF2
 28846                           indf0	equ	0xFEF
 28847                           postinc0	equ	0xFEE
 28848                           fsr0h	equ	0xFEA
 28849                           fsr0l	equ	0xFE9
 28850                           wreg	equ	0xFE8
 28851                           indf1	equ	0xFE7
 28852                           postinc1	equ	0xFE6
 28853                           postdec1	equ	0xFE5
 28854                           fsr1h	equ	0xFE2
 28855                           fsr1l	equ	0xFE1
 28856                           bsr	equ	0xFE0
 28857                           indf2	equ	0xFDF
 28858                           postinc2	equ	0xFDE
 28859                           postdec2	equ	0xFDD
 28860                           plusw2	equ	0xFDB
 28861                           fsr2h	equ	0xFDA
 28862                           fsr2l	equ	0xFD9
 28863                           status	equ	0xFD8
 28864                           tblptru	equ	0xFF8
 28865                           tblptrh	equ	0xFF7
 28866                           tblptrl	equ	0xFF6
 28867                           tablat	equ	0xFF5
 28868                           prodh	equ	0xFF4
 28869                           prodl	equ	0xFF3
 28870                           intcon	equ	0xFF2
 28871                           indf0	equ	0xFEF
 28872                           postinc0	equ	0xFEE
 28873                           fsr0h	equ	0xFEA
 28874                           fsr0l	equ	0xFE9
 28875                           wreg	equ	0xFE8
 28876                           indf1	equ	0xFE7
 28877                           postinc1	equ	0xFE6
 28878                           postdec1	equ	0xFE5
 28879                           fsr1h	equ	0xFE2
 28880                           fsr1l	equ	0xFE1
 28881                           bsr	equ	0xFE0
 28882                           indf2	equ	0xFDF
 28883                           postinc2	equ	0xFDE
 28884                           postdec2	equ	0xFDD
 28885                           plusw2	equ	0xFDB
 28886                           fsr2h	equ	0xFDA
 28887                           fsr2l	equ	0xFD9
 28888                           status	equ	0xFD8


Data Sizes:
    Strings     4055
    Constant    120
    Data        0
    BSS         1148
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    132     141
    BANK1           256      0     234
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2031	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2011$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(COMRAM[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(COMRAM[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1429	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1414	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1389	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1164(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1303	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    doModeVerbose@p_1210	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1190	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1181	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1169	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1165	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1156	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1152	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1146	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1129	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1117	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  132081
                                            125 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   96496
                                            105 BANK0     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             85 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             85 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23342
                                            100 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             94 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             94 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             94 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             85 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2312
                                             54 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        14     9      5    1214
                                             18 BANK0     14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     1      3     740
                                             14 BANK0      4     1      3
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     777
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     372
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     3D      BD       8       73.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EA       6       91.4%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     84      8D       4       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     373      15        0.0%
DATA                 0      0     56F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 05 15:06:37 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6B8A  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 2AE2  
            doModeVerbose@filter_nodeid 0290                                      PL2 6B8A  
                                    PL4 6BA6                                      PL6 6BB4  
                                    PL8 6BCE                                      _id 01E3  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 16AC  
                                   PL10 57C6                                     PL20 37B6  
                                   PL12 368C                                     PL30 353A  
                                   PL22 3C08                                     PL14 57E4  
                                   PL40 6C68                                     PL32 6C3C  
                                   PL24 4440                                     PL16 346C  
                                   PL50 6C82                                     PL42 275E  
                                   PL34 2DF0                                     PL26 6C18  
                                   PL18 57F4                                     PL60 5860  
                                   PL52 5834                                     PL44 354E  
                                   PL36 581A                                     PL28 6C28  
                                   PL70 3570                                     PL62 2320  
                                   PL54 6C9A                                     PL46 26BE  
                                   PL38 6C4E                                     PL80 3F2A  
                                   PL72 37E0                                     PL64 37CC  
                                   PL56 584A                                     PL48 355E  
                                   PL90 3C18                                     PL82 2B92  
                                   PL74 28A6                                     PL66 3086  
                                   PL58 2A1A                                     PL92 482C  
                                   PL84 2ED0                                     PL76 586E  
                                   PL68 3360                                     PL94 1A16  
                                   PL86 5880                                     PL78 5148  
                                   PL96 3584                                     PL88 183C  
                                   PL98 588A                 sendEscapedUartData@pcrc 006C  
                                   l440 3D56                                     l442 3D62  
                                   l435 3CF6                                     l436 3D34  
                                   l543 600A                                     l439 3D4C  
                                   l552 6092                                     l538 6B88  
                                   l802 2B3A                                     l571 615A  
                                   l563 6130                                     l547 617A  
                                   l811 2B88                                     l723 5146  
                                   l820 26DA                                     l805 2B4A  
                                   l733 4E2E                                     l566 613A  
                                   l823 26E4                                     l832 2730  
                                   l808 2B7E                                     l672 443E  
                                   l817 26D0                                     l850 2644  
                                   l826 2700                                     l579 61D0  
                                   l835 274A                                     l667 42D6  
                                   l844 2630                                     l853 2660  
                                   l829 2720                                     l685 4354  
                                   l934 4AA6                                     l942 3836  
                                   l862 26AA                                     l838 2754  
                                   l790 2AEA                                     l758 503E  
                                   l935 4ABA                                     l927 4A16  
                                   l775 1D72                                     l783 1DA0  
                                   l847 263A                                     l871 2E12  
                                   l960 3932                                     l856 2680  
                                   l880 2E42                                     l945 3840  
                                   l865 26B4                                     l793 2AF4  
                                   l778 1D7C                                     l970 3AE8  
                                   l954 391E                                     l874 2E1C  
                                   l787 1DC4                                     l939 382C  
                                   l859 2690                                     l883 2E62  
                                   l964 3AD4                                     l948 385C  
                                   l892 2EA0                                     l796 2AFE  
                                   l973 3B04                                     l957 3928  
                                   l877 2E26                                     l886 2E72  
                                   l967 3ADE                                     l895 2EBC  
                                   l799 2B1A                                     l992 3C06  
                                   l889 2E8E                                     l986 3BF2  
                                   l898 2EC6                                     l989 3BFC  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 007C  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _dlc 003E  
                                   _pos 00E7                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00D6                                     wreg 000FE8  
         __end_of_writeRegisterExtended 2FB4                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1020 28BC  
                                  l1111 2FB2                                    l1023 28C6  
                                  l1032 295A                                    l1026 28D0  
                                  l1050 3E52                                    l1042 3DE8  
                                  l1131 1BF2                                    l1035 2964  
                                  l1108 2F26                                    l1029 28EC  
                                  l1230 22CA                                    l1127 1BE6  
                                  l1063 3F00                                    l1047 3E1A  
                                  l1240 20A0                                    l1056 3E9E  
                                  l1233 22EE                                    l1081 279E  
                                  l1073 3182                                    l1090 2BE0  
                                  l1066 3F1E                                    l1251 44C6  
                                  l1084 280E                                    l1260 4556  
                                  l2061 3462                                    l1093 2C6A  
                                  l1261 4568                                    l1253 44D8  
                                  l1069 3F28                                    l2062 346A  
                                  l1510 3538                                    l1262 457A  
                                  l1254 44EA                                    l1263 458C  
                                  l1255 44FC                                    l1280 1928  
                                  l1192 3198                                    l1264 459E  
                                  l1256 450E                                    l1265 45B0  
                                  l1257 4520                                    l1186 4D76  
                                  l1178 4CE4                                    l1450 3A22  
                                  l1266 45C2                                    l1258 4532  
                                  l1267 45D4                                    l1259 4544  
                                  l1276 229E                                    l1268 462C  
                                  l1285 258A                                    l2502 1E28  
                                  l1711 55AA                                    l1703 5542  
                                  l1623 5172                                    l1712 55AE  
                                  l1640 5260                                    l1536 2DCE  
                                  l2504 1E88                                    l2600 1AE0  
                                  l1456 3AA0                                    l1448 3A04  
                                  l2337 260A                                    l1730 5654  
                                  l1714 55CA                                    l1803 176A  
                                  l2451 1BB6                                    l1539 2DEE  
                                  l2523 219A                                    l1804 176C  
                                  l1660 52F6                                    l1564 1F60  
                                  l1572 1FC0                                    l2436 3062  
                                  l2461 195E                                    l1709 5584  
                                  l2542 1F50                                    l2526 2196  
                                  l1566 1F68                                    l1639 52AE  
                                  l1591 2486                                    l1840 1D3E  
                                  l2368 2112                                    l1656 52BE  
                                  l1592 24EC                                    l1841 1D40  
                                  l1762 16AC                                    l1842 1D4A  
                                  l2378 1E16                                    l2554 23BE  
                                  l1586 19E2                                    l1843 1D4C  
                                  l1675 53E0                                    l1659 52F2  
                                  l1836 1D2A                                    l2556 23B2  
                                  l1845 1D64                                    l1853 1C5A  
                                  l2581 1B24                                    l2557 23B6  
                                  l2590 19A4                                    l1787 186E  
                                  STR_1 7630                                    STR_2 6FD2  
                                  STR_3 769E                                    STR_4 70EB  
                                  STR_5 782B                                    STR_6 7CD0  
                                  STR_7 77ED                                    STR_8 7CB7  
                                  STR_9 7C80                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 002C  
                          __CFG_PWRT$ON 000000                                    ___IT 000101  
            __end_of_sendVSCPDriverNack 26BE                                    _bHex 00E4  
          doModeVerbose@filter_priority 028E                                    _crc8 18B8  
                                  _data 01D3                                    _caps 01E7  
                                  _atoi 3374                                    _main 3C26  
                                  _init 1B2E                                    _mode 00E6  
                                  _itoa 1880                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 258C                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 02FA                            _sprintf$2031 0086  
                          _sprintf$2024 0082                            _sprintf$2025 0084  
          receiveSendMultiEventCANAL@id 007C               ECANReceiveMessage@dataLen 000E  
    __end_of_receiveSendMultiEventCANAL 3C08              _receiveSendMultiEventCANAL 3AA2  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0074  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 22A0  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 009E                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10231 2DDC  
                                 l10217 2D48                                   l10229 2DD8  
                                 _B0CON 000E20                                   l13021 3A52  
                                 l13015 3A24                                   _B1CON 000E30  
                                 l13009 3A08                                   l13041 3A98  
                                 l13035 3A92                                   l14003 655E  
                                 l13029 3A70                                   l14101 67E6  
                                 l14013 659C                                   l13039 3A96  
                                 l14023 65D6                                   l14007 656E  
                                 _B2CON 000E40                                   l12345 45E6  
                                 l14201 6B5E                                   l14113 684C  
                                 l14105 67F6                                   l14033 6612  
                                 l14017 65AC                                   l13083 1788  
                                 l14115 685A                                   l14027 65E6  
                                 l14203 6B6C                                   l12357 34C6  
                                 l15101 31CE                                   l14061 66F6  
                                 l14117 6868                                   l14037 6622  
                                 l14045 6686                                   l14213 429E  
                                 l15023 4C08                                   l14071 6732  
                                 l14207 6B86                                   l14215 42A2  
                                 l13415 3D36                                   _B3CON 000E50  
                                 l15009 4BA2                                   l14153 69C6  
                                 l14129 6900                                   l14081 6770  
                                 l14065 6706                                   l14305 4386  
                                 l14233 42EE                                   l14401 4E28  
                                 l13441 3D88                                   l13425 3D5E  
                                 l13417 3D48                                   l15131 17C8  
                                 l14171 6A50                                   l14139 694E  
                                 l14091 67AA                                   l14075 6742  
                                 l13611 5932                                   l14323 43AC  
                                 l13443 3D8C                                   l15301 53AA  
                                 l15221 5230                                   l15205 51C4  
                                 l15213 520A                                   l15061 4D00  
                                 l15053 4CD2                                   l15037 4C6E  
                                 l15133 17D0                                   l14157 69EC  
                                 l14149 69A2                                   l14085 6780  
                                 l14341 43EE                                   l14237 42F4  
                                 l14405 4E38                                   l13445 3D92  
                                 l13437 3D7C                                   l15119 3236  
                                 l14191 6B14                                   l14095 67BA  
                                 l13703 5BFC                                   l14335 43D6  
                                 l14247 430A                                   l14511 50AC  
                                 l13383 3C8C                                   _B4CON 000E60  
                                 l15241 52B8                                   l15233 5266  
                                 l11793 1E56                                   l15073 4D52  
                                 l15049 4CC0                                   l13801 5FB2  
                                 l13721 5C86                                   l13473 1F72  
                                 l14353 441E                                   l14329 43C0  
                                 l14257 4326                                   l14273 432E  
                                 l16033 3EA8                                   l16025 3E66  
                                 l14505 5094                                   l14417 4E64  
                                 l14513 510A                                   l13449 3D9E  
                                 l13571 206C                                   l15411 55C4  
                                 l15403 5588                                   l15315 53EA  
                                 l15251 52DA                                   l15243 52BC  
                                 l14195 6B38                                   l14179 6A94  
                                 l14187 6AD8                                   l13803 5FC6  
                                 l13731 5CDA                                   l13715 5C5A  
                                 l13651 5A76                                   l13643 5A36  
                                 l13635 59F6                                   l13627 59B4  
                                 l13619 5972                                   l13475 1F78  
                                 l14347 4406                                   l14283 435A  
                                 l14363 443C                                   l14451 4FB4  
                                 l14443 4F2A                                   l14427 4E88  
                                 l14523 5144                                   l15501 577A  
                                 l15341 545A                                   l15325 541E  
                                 l15261 5302                                   l15245 52C2  
                                 l15237 529A                                   l15181 515A  
                                 l15077 4D64                                   l16109 1926  
                                 l15173 2C48                                   l14197 6B46  
                                 l13709 5C2E                                   l14357 4430  
                                 l14285 4360                                   l16037 3EBC  
                                 l16301 19E0                                   l14517 511E  
                                 l14461 4FDE                                   l14703 29EC  
                                 l13575 2080                                   l13567 205A  
                                 l16231 189C                                   l15327 5422  
                                 l15319 5408                                   l15263 530E  
                                 l15239 52B4                                   l15191 5184  
                                 l16143 2240                                   l16063 1A2E  
                                 l15175 2C68                                   l13807 5FD8  
                                 l13727 5CB2                                   l13671 5B1C  
                                 l14287 4364                                   l14359 4436  
                                 l14519 512A                                   l14383 4DBA  
                                 _B5CON 000E70                                   l16401 193E  
                                 l15505 5788                                   l15417 55DA  
                                 l15433 560E                                   l15441 562A  
                                 l15353 548E                                   l15273 533C  
                                 l15257 52FC                                   l15193 5188  
                                 l16161 251C                                   l16065 1A34  
                                 l13905 624C                                   l13825 605E  
                                 l13817 6012                                   l13761 5E12  
                                 l13753 5DC2                                   l13745 5D6E  
                                 l13737 5D10                                   l13657 5AB4  
                                 l13585 589C                                   l14297 437A  
                                 l14289 436A                                   l16209 3008  
                                 l14481 5044                                   l14473 501E  
                                 l14547 1D2C                                   l14539 1D1E  
                                 l13579 2094                                   l16403 1942  
                                 l16307 2594                                   l15451 563C  
                                 l15427 55FA                                   l15355 5492  
                                 l15339 5456                                   l15371 54D8  
                                 l15283 535E                                   l15291 5370  
                                 l15187 517C                                   l15515 57B2  
                                 l14811 4A22                                   l15611 2D16  
                                 l13931 6354                                   l13923 62D4  
                                 l13907 625E                                   l13771 5E8E  
                                 l13755 5DD4                                   l13739 5D1A  
                                 l13747 5D80                                   l13691 5B94  
                                 l13683 5B64                                   l13675 5B34  
                                 l13667 5AFE                                   l14395 4E04  
                                 l14387 4DDC                                   l14717 2A04  
                                 l16317 25CC                                   l16341 20C6  
                                 l15509 57AA                                   l15461 5664  
                                 l15445 5634                                   l15517 57B8  
                                 l15277 5342                                   l15269 5326  
                                 l15293 539A                                   l15189 5180  
                                 l15197 518E                                   l16165 2520  
                                 l14821 4A8E                                   l16421 1F34  
                                 l16413 1EEE                                   l14901 179A  
                                 l12981 398C                                   l16261 27EC  
                                 l15605 2CE4                                   l13837 60AC  
                                 l13693 5BA6                                   l15701 3B30  
                                 l16093 1A76                                   l16085 24D8  
                                 l14485 5054                                   l14389 4DE0  
                                 l15527 16FE                                   l16407 1954  
                                 l16343 20D2                                   l15391 5546  
                                 l15375 54F2                                   l15287 536A  
                                 l15279 5350                                   l16159 251A  
                                 l14823 4A92                                   l14831 4AB8  
                                 l16423 1F3C                                   l16431 1990  
                                 l16263 280C                                   l16271 1CC0  
                                 l15607 2CFA                                   l15543 1BFC  
                                 l15535 1BCC                                   l13943 63A2  
                                 l13935 6366                                   l13919 62C2  
                                 l13863 6154                                   l13791 5F34  
                                 l13767 5E50                                   l13687 5B7C  
                                 l13679 5B4C                                   l13599 58D8  
                                 l16079 2494                                   l14495 5076  
                                 l16353 2104                                   l16345 20D6  
                                 l16361 1DD6                                   l15465 5676  
                                 l15385 5522                                   l15369 54C6  
                                 l16177 2554                                   l14825 4A9A  
                                 l14761 48E0                                   l16441 1716  
                                 l16417 1F28                                   l16433 1994  
                                 l14841 215E                                   l14905 17AA  
                                 l16273 1CCE                                   l13961 6448  
                                 l13929 6340                                   l13849 60FC  
                                 l13777 5ECC                                   l16363 1DE2  
                                 l15491 572A                                   l15483 56B2  
                                 l15467 567C                                   l15379 5510  
                                 l16427 1974                                   l14843 2184  
                                 l12987 399E                                   l16275 1CD8  
                                 l15643 333C                                   l15635 3302  
                                 l15627 329E                                   l13947 63D8  
                                 l13939 6392                                   l13795 5F46  
                                 l15723 3B60                                   l15811 17F2  
                                 l16099 1A92                                   l16381 1B8E  
                                 l16365 1DE6                                   l15485 5708  
                                 l15477 569E                                   l15397 5560  
                                 l14773 4930                                   l14749 4892  
                                 l14837 2126                                   l14925 3F52  
                                 l16269 1CBC                                   l15637 330A  
                                 l15661 23F4                                   l13949 63E8  
                                 l13877 619C                                   l16293 19CE  
                                 l16285 19BC                                   ?_crc8 0067  
                                 l16391 1BAC                                   l16383 1B92  
                                 l15495 574E                                   l16447 1AAC  
                                 l16455 1AF0                                   l14855 233C  
                                 l12999 39C8                                   l15639 3320  
                                 l15671 2430                                   l15583 2F90  
                                 l15743 3BC2                                   l15815 1810  
                                 l16199 2FC4                                   l14849 1728  
                                 l16369 1E08                                   l14785 497E  
                                 l16449 1AB4                                   l16457 1AF8  
                                 l14865 2374                                   l14953 401E  
                                 l15665 241A                                   l15585 2FB0  
                                 l13993 6522                                   l13977 64B2  
                                 l13889 61EA                                   l13897 622A  
                                 l15729 3B7E                                   l16379 1B86  
                                 l15499 5768                                   l14875 3376  
                                 l14939 3FB8                                   l15667 2422  
                                 l13899 622E                                   l15747 3BE2  
                                 l15739 3BA2                                   l14797 49CC  
                                 l14893 342A                                   l14885 33D0  
                                 l14877 337C                                   l14981 4AD6  
                                 l13997 6532                                   l16399 1936  
                                 l14887 33E8                                   l14967 4084  
                                 l15599 2C98                                   l14889 33F0  
                                 l14995 4B3C                                   l15795 38F6  
                                 l15799 390E                                   l15889 3140  
                  __size_of_doModeSLCAN 03D0                                   ?_atoi 0066  
                                 ?_main 00DD                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 16BA  
                                 _EEADR 000FA9                                   STR_10 7C5E  
                                 STR_11 7C80                                   STR_12 7C92  
                                 STR_20 7C49                                   STR_13 7C80  
                                 STR_21 7A83                                   STR_30 7CF5  
                                 STR_14 7BCD                                   STR_22 7A97  
                                 STR_15 7C80                                   STR_31 7CF5  
                                 STR_23 7AD3                                   STR_32 7CF5  
                                 STR_16 7C50                                   STR_40 7AF8  
                                 STR_24 7A06                                   STR_17 7C80  
                                 STR_33 7CF5                                   STR_41 7CCB  
                                 STR_25 78CF                                   STR_42 7C80  
                                 STR_50 7C2B                                   STR_34 7CF5  
                                 STR_18 7C0E                                   STR_26 7A6F  
                                 STR_19 7C80                                   STR_35 7CF5  
                                 STR_43 7CD9                                   STR_27 7AE6  
                                 STR_51 7931                                   STR_44 7C80  
                                 STR_36 7C80                                   STR_52 7C2B  
                                 STR_60 7BEA                                   STR_28 7949  
                                 STR_61 7C65                                   STR_29 7CEB  
                                 STR_45 7CC6                                   STR_53 77AC  
                                 STR_37 7749                                   STR_70 7C80  
                                 STR_46 7C80                                   STR_54 7C2B  
                                 STR_62 7CEE                                   STR_38 7CE8  
                                 STR_63 71C0                                   STR_39 7C80  
                                 STR_47 7CA3                                   STR_55 7B5E  
                                 STR_71 7158                                   STR_48 7C80  
                                 STR_72 7CAD                                   STR_56 7C65  
                                 STR_80 778B                                   STR_64 7706  
                                 STR_73 7C2B                                   STR_65 7C65  
                                 STR_57 7CEE                                   STR_81 7CBC  
                                 STR_49 7CA8                                   STR_74 7931  
                                 STR_58 7C65                                   STR_66 7CEE  
                                 STR_82 7AAB                                   STR_90 74FB  
                                 STR_75 7C2B                                   STR_91 7CF5  
                                 STR_83 7C65                                   STR_67 7C65  
                                 STR_59 7CEE                                   STR_76 77AC  
                                 STR_84 7CEE                                   STR_68 7CEE  
                                 STR_92 7430                                   STR_85 71C0  
                                 STR_69 71C0                                   STR_77 7C2B  
                                 STR_93 7CF5                                   STR_86 7C80  
                                 STR_78 7961                                   STR_94 7597  
                                 STR_95 7CF5                                   STR_87 7C57  
                                 STR_79 76C1                                   STR_88 7CF5  
                                 STR_96 75E5                                   STR_97 7CF5  
                                 STR_89 6F18                                   STR_98 745A  
                                 STR_99 7C80            __end_of_printFirmwareVersion 2320  
                                 _BSEL0 000DF8                         __end_of___lldiv 2124  
                                 ?_utoa 0067                                   u20010 33C6  
                                 u20030 33E4                         __end_of_calcCRC 181A  
                                 _T0CON 000FD5                                   u20017 33C0  
                                 u20105 2A62                                   u20050 3414  
                                 u20060 343E                                   u20037 33DE  
                       __end_of___llmod 1E28                                   u20057 340E  
                                 u20067 3438                                   u22200 2292  
                                 u21064 1BDC                                   u12505 2DBA  
                                 u21065 1BD8                                   u22050 1A50  
                                 u22205 2288                                   _LATC1 007C59  
                                 u22057 1A4A                                   u22390 1D00  
                                 u21675 30D6                                   u22397 1CF6  
                                 u14840 1E46                                   u18105 5A5C  
                                 u22737 3C9A                                   u18115 5A9C  
                                 u14860 1E7E                                   u18125 5ADA  
                                 u14847 1E40                                   u18055 590C  
                                 u15905 34CE                                   u18225 5BCC  
                                 u18065 5958                                   u19050 4310  
                                 u14867 1E78                                   u18315 5DA6  
                                 u18075 5998                                   u18085 59DA  
                                 u15855 446A                                   u18335 5DFA  
                                 u18095 5A1C                                   u15856 4470  
                                 u15865 449E                                   u15857 447E  
                                 u18345 5E38                                   u15866 44A4  
                       __end_of___lwdiv 1BC0                                   u15867 44B2  
                                 u18355 5E76                                   u19420 4EF6  
                                 u15885 34A0                                   u18365 5EB4  
                                 u19430 4F00                                   u15895 34B0  
                                 u18375 5EF2                                   _ERRIE 007D1D  
                                 u17920 1C7C                                   u19440 4F0A  
                                 u19425 4EF4                                   u17930 1CAA  
                                 u19435 4EFE                                   u18645 640E  
                                 u19445 4F08                                   u17927 1C76  
                                 u18735 6BD6                                   u17937 1CA4  
                                 u18745 66AC                                   u18665 64D8  
                                 u18585 6284                                   u18835 688E  
                                 u18845 68D6                                   u18855 6926  
                          _vscpPriority 00EA                                   i1l402 018A  
                                 i1l411 017A                                   i1l414 0196  
                                 i1l408 018A                                   i1l417 01EA  
                                 u19785 187A                         __end_of___lwmod 1968  
                                 u19786 187C                                   u19970 3390  
                                 i1l427 02DC                                   u19990 33A8  
                                 u19977 338A                                   i1l397 0092  
                                 u19997 33A2                                   i1l399 018C  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B7  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00E5                 readRegisterExtended@reg 00B7  
                         __CFG_WRTD$OFF 000000                          Read_b_eep@badd 0060  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 2454  
                                 crc8@m 0069                                   _flags 003F  
                       __end_of_dpowers 6D08                  Write_b_eep@GIE_BIT_VAL 0063  
                       __end_of_isdigit 1790                                   _timer 0118  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00E3                                   _ultoa 2FB4  
                            Interrupt@c 0020              ??_printNodeFirmwareVersion 00BE  
                      _printErrors$1402 0096                        _printErrors$1420 009C  
                      _printErrors$1414 009A                        _printErrors$1408 0098  
                      _printErrors$1429 009E                                   tablat 000FF5  
                      _printErrors$1396 0094                 ??_receiveSendEventCANAL 0072  
           __end_of_sendEscapedUartData 1DC6                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 57C6  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 19A6  
                       __end_of_strcspn 1B2E                         __end_of_toupper 171A  
                       __end_of_stristr 219C       __size_of_receivePrintEventVerbose 0282  
                   doModeVerbose@i_1111 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1210 02BB                     doModeVerbose@p_1117 02B2  
                   doModeVerbose@p_1165 02B4                     doModeVerbose@p_1190 02B9  
                        WriteUSART@data 0060                    _ECANSetOperationMode 171A  
                          _canInputFifo 01CB                         __initialization 1E8A  
                doModeVerbose@page_1162 02A1           receiveSendMultiEventCANAL@dlc 0080  
                          __end_of_crc8 18F0           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 346C           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3DAA                            __end_of_init 1B76  
                          __end_of_itoa 18B8                            __end_of_utoa 262C  
                   doModeVerbose@ifmode 02B6                              _Read_b_eep 16CC  
                   doModeVerbose@maskno 02A8                        __end_of_Busy_eep 16B2  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BA                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0072                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0065                                  ??_main 00E2  
                     readRegister@value 00B8                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 0033                       __RegsToCANID@type 0005  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000F  
                         ?_readRegister 00B5               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1169 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B8  
            ECANReceiveMessage@savedPtr 0010                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7CB2  
                                STR_101 7CF5                                  STR_110 7CF5  
                                STR_102 722A                                  STR_103 760B  
                                STR_111 7570                                  STR_112 7C80  
                                STR_104 7CF5                                  STR_200 7C65  
                                STR_120 7BBB                                  STR_201 7CEE  
                                STR_113 7C9E                                  STR_121 7C86  
                                STR_105 74AB                                  STR_202 71C0  
                                STR_106 7CF5                                  STR_114 7CDD  
                                STR_122 7BFE                                  STR_130 776A  
                                STR_210 737E                                  STR_131 7C80  
                                STR_123 7848                                  STR_107 7655  
                                STR_115 7404                                  STR_211 71F7  
                                STR_203 707D                                  STR_108 7CF5  
                                STR_140 7C65                                  STR_124 7CC1  
                                STR_116 7C06                                  STR_132 787F  
                                STR_220 7522                                  STR_212 725C  
                                STR_204 7122                                  STR_141 7CEE  
                                STR_133 7A5B                                  STR_213 780C  
                                STR_125 77CD                                  STR_109 767A  
                                STR_117 74D3                                  STR_221 7483  
                                STR_205 71C3                                  STR_150 7CEE  
                                STR_126 7C98                                  STR_142 7BF6  
                                STR_134 7BD6                                  STR_118 7B87  
                                STR_230 76E4                                  STR_206 7549  
                                STR_222 734F                                  STR_214 728E  
                                STR_207 6E6B                                  STR_119 7C80  
                                STR_143 7C6C                                  STR_151 7C3B  
                                STR_135 7BDE                                  STR_127 78B5  
                                STR_215 73AC                                  STR_231 7320  
                                STR_223 6E0A                                  STR_240 71C0  
                                STR_152 7C65                                  STR_144 7CEE  
                                STR_136 7C7A                                  STR_128 7BEE  
                                STR_160 7B0A                                  STR_216 7901  
                                STR_208 7864                                  STR_232 72F1  
                                STR_224 6ED5                                  STR_241 6E4F  
                                STR_153 7CEE                                  STR_137 7CF3  
                                STR_129 7C8C                                  STR_161 7C73  
                                STR_145 7C34                                  STR_209 73D8  
                                STR_217 7045                                  STR_233 6E92  
                                STR_225 6D76                                  STR_146 7C65  
                                STR_170 7CE1                                  STR_138 7CF1  
                                STR_162 7CE1                                  STR_154 7C2D  
                                STR_242 7B4F                                  STR_250 7ABF  
                                STR_218 79C1                                  STR_226 7919  
                                STR_234 72C0                                  STR_171 71C0  
                                STR_163 71C0                                  STR_155 7C65  
                                STR_147 7CEE                                  STR_251 7CFD  
                                STR_139 7C42                                  STR_243 7BE6  
                                STR_219 7728                                  STR_235 70B4  
                                STR_227 6D28                                  STR_156 7CEE  
                                STR_244 7CF9                                  STR_252 7CF7  
                                STR_148 7BC4                                  STR_260 7BA7  
                                STR_164 7B3E                                  STR_228 7A47  
                                STR_172 7A32                                  STR_180 79A9  
                                STR_236 6F5A                                  STR_253 71C0  
                                STR_157 7CF5                                  STR_149 7C65  
                                STR_173 7C73                                  STR_165 7C73  
                                STR_181 7C16                                  STR_245 7CE5  
                                STR_261 79EF                                  STR_237 75BE  
                                STR_229 6DC3                                  _EEDATA 000FA8  
                                STR_262 71C0                                  STR_190 7CE1  
                                STR_182 7CE1                                  STR_174 7CE1  
                                STR_166 7CE1                                  STR_246 7CFB  
                                STR_254 7B9D                                  STR_158 7B92  
                                STR_238 6E4F                                  STR_255 71C0  
                                STR_247 71C0                                  STR_191 71C0  
                                STR_183 71C0                                  STR_175 71C0  
                                STR_167 71C0                                  STR_159 7CD5  
                                STR_263 7B1C                                  STR_239 789A  
                                STR_256 7C26                                  STR_248 7B6D  
                                STR_264 7B2D                                  STR_168 7A1C  
                                STR_176 79D8                                  STR_184 7991  
                                STR_192 78E8                                  STR_249 71C0  
                                STR_193 7C65                                  STR_169 7C73  
                                STR_185 7C16                                  STR_257 7C1E  
                                STR_177 7C16                                  STR_194 7CEE  
                                STR_186 7CE1                                  STR_178 7CE1  
                                STR_258 7B7B                                  STR_195 71C0  
                                STR_187 71C0                                  STR_179 71C0  
                                STR_259 7BB1                                  STR_188 7991  
                                STR_196 6F98                                  STR_189 7C16  
                                STR_197 718E                                  STR_198 700C  
                                STR_199 7979                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 2C6C                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 28A6                                  i1l1520 202E  
                         ?_init_app_ram 0001                                  i1l1515 37B4  
                                _MDSEL0 007BBE                                  i1l1461 4662  
                                _MDSEL1 007BBF                                  i1l1471 4730  
                                i1l1480 46FA                                  i1l1472 46B0  
                                i1l1482 470A                                  i1l1474 46BE  
                                i1l1547 35D2                                  i1l1548 368A  
                                i1l1492 4794                                  i1l1484 471A  
                                i1l1476 46D2                                  i1l1468 482A  
                                i1l1493 47AE                                  i1l1478 46E6  
                                i1l1866 1742                                  i1l6423 35DC  
                                i1l6415 35A0                                  i1l6433 3666  
                            _OpenTimer0 1752                                  i1l6435 3670  
                                i1l6447 285E                                  i1l9501 1FF8  
                                i1l9503 1FFE                                  i1l9505 2004  
                                i1l9509 2010                                  i1l9525 3736  
                                i1l9491 1FC8                                  i1l9493 1FD0  
                                i1l9495 1FDA                                  i1l9497 1FE4  
                                i1l9825 4744                                  i1l9499 1FEE  
                                i1l9835 4764                                  i1l9861 47E0  
                                i1l9853 47B0                                  i1l9773 4690  
                                i1l9757 4650                                  i1l9781 469E  
                                i1l9767 467A                                  i1l9775 469A  
                                i1l9875 4814                                  i1l9869 47FE  
                       _init_app_eeprom 296E                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 000C  
                ECANReceiveMessage@mode 0013                  ECANReceiveMessage@temp 0014  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 0076              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 0075                      _doModeVerbose$1141 0296  
                    _doModeVerbose$1152 029A                      _doModeVerbose$1129 0294  
                    _doModeVerbose$1146 0298                      _doModeVerbose$1156 029C  
                    _doModeVerbose$1181 029E                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 02E2  
              readRegisterExtended@page 00B5                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0071  
                                ___wmul 181A                              _bInitiated 002D  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 012B  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1303 00A3  
         _receivePrintEventVerbose$1283 009B           _receivePrintEventVerbose$1293 009F  
         _receivePrintEventVerbose$1278 0099           _receivePrintEventVerbose$1288 009D  
         _receivePrintEventVerbose$1298 00A1                                  _memcpy 1A64  
                                _memset 1790                                  clear_0 1E92  
                                clear_1 1EA6                                  clear_2 1EB8  
                                clear_3 1EC4                                  clear_4 1ED0  
                                clear_5 1EDC                           ?_sendCANFrame 008F  
                                _strcat 1CB2                                  _strchr 1E28  
                                _strcpy 17BE                                  _strlen 1A24  
                                _wrkbuf 017B                                  _strtok 232E  
                                _strspn 1AA6     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 2454                            __mediumconst 6CB0  
                        ??_readRegister 00B9                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0062  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 1F52  
                            __accesstop 0060                 __end_of__initialization 1EE2  
                  _printFirmwareVersion 22A0                   __size_of_getVSCPFrame 0084  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1222 02A3  
                            _WriteUSART 16F0                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0196                    _printStatistics$1371 0094  
                  _printStatistics$1383 0098                    _printStatistics$1377 0096  
                  _printStatistics$1389 009A                   _uart_transmitOverruns 0120  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 3086                              __end_ofPL2 6BA6  
                            __end_ofPL4 6BB4                              __end_ofPL6 6BCE  
                            __end_ofPL8 6C18                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 1752                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B5                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00EE                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007B                         _fifo_canrxcount 002F  
               __end_of_init_app_eeprom 2A1A                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00BD  
                        _status_led_cnt 0026                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 1D66  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C3  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 2D3A                              _doModeVscp 428C  
                               ??_ultoa 007E                            _getVSCPFrame 221C  
                            __pbssBANK0 00E4                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                            __IT_INT_MASK 0126  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                          __IT_SAVE_BSR 0127                           setFilter@sidh 006B  
                         setFilter@sidl 006C                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0031             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 24EE                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 002B                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 262C                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 2BA0                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0063                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00EE  
                               i1l13301 0172                                 i1l13311 01CE  
                               i1l13303 0182                     ?_sendVSCPDriverNack 0001  
                               i1l13321 0228                                 i1l13313 01D6  
                               i1l13305 0194                                 i1l13331 02C8  
                               i1l13323 025A                                 i1l13315 01F2  
                               i1l13307 019E                                 i1l13251 0034  
                               i1l13333 02CC                                 i1l13325 025E  
                               i1l13317 01FA                                 i1l13309 01C6  
                               i1l13341 02DA                                 i1l13261 009A  
                               i1l13253 003C                                 i1l13335 02CE  
                               i1l13327 0298                                 i1l13319 0226  
                               i1l13271 00D8                                 i1l13263 00A6  
                               i1l13255 0042                                 i1l13329 029C  
                               i1l13281 010E                                 i1l13273 00E8  
                               i1l13265 00B8                                 i1l13257 007E  
                               i1l13283 011A                                 i1l13275 00F0  
                               i1l13267 00C8                                 i1l13259 008E  
                               i1l13293 014A                                 i1l13277 00FC  
                               i1l13269 00CC                                 i1l13295 0156  
                               i1l13287 012C                                 i1l13289 0138  
                               i1l13299 0168                              _fifo_write 358E  
                    __size_of_printHelp 01BE                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1164 02AA                       sendCANFrame@pdata 0094  
                            _made_table 0124                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 1FC2                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2ED0  
            _sendVSCPDriverCommandReply 2E0C                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2EDE  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 12F6  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00BC  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 2B92          __size_of_receiveSendEventCANAL 0140  
         __end_of_receiveSendEventCANAL 3934                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 0180  
                       _ECANSendMessage 3934           __end_of_receiveSendEventSLCAN 3F2A  
                               __Hparam 0000                       __end_of_findNodes 3272  
                               __Lparam 0000                       __end_of_fifo_init 1A16  
                     __end_of_fifo_read 2DF0                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 2810                               ?_printMDF 0001  
                               _bSilent 002E               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 20AE  
                       __size_of___wmul 0022                                 _calcCRC 17EC  
                       getCANFrame@pdlc 006E                                 ___llmod 1DC6  
                               ___lwdiv 1B76                               _FIFOEMPTY 007BA7  
                               ___lwmod 192A                   ?_readRegisterExtended 00B5  
           printNodeFirmwareVersion@buf 00BF                    __end_of_init_app_ram 1C5A  
                          _fifo_getFree 2810                            init_crc8@crc 0064  
                               __pcinit 1E8A                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3C26                                 __ptext1 16AA  
                               __ptext2 4D78                                 __ptext3 2454  
                               __ptext4 19A6                 receiveSendEventCANAL@id 007B  
                               __ptext5 3DAA                                 __ptext6 2FB4  
                               __ptext7 428C                                 __ptext8 2AE2  
                               __ptext9 2E0C                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C2                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6D28  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6CE0                       __end_of_init_crc8 1FC2  
                               _isdigit 1770          printNodeFirmwareVersion@nodeid 00BE  
                   __end_of_WriteTimer0 16F0                          _nibbleFromChar 19A6  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 1880  
                               _sprintf 5154        __end_of_sendVSCPModeCapabilities 296E  
                     __end_of_setFilter 462E                                 _strichr 1968  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02A9  
                        doModeVerbose@p 02B7                                 _strcspn 1AEA  
                               _toupper 1704                             ?_doModeVscp 0001  
                               _stristr 2124                    __size_of_printBinary 004A  
                  end_of_initialization 1EE2                       __end_of_octpowers 6CE0  
                  __size_of_printErrors 02BC                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                             i1u1127_25 36F2                               i1u1128_25 3702  
                             i1u1129_25 3740                           __Lmediumconst 6CB0  
                  __end_of_sendCANFrame 192A                               i1u1167_25 4658  
                             i1u1167_27 465A                               i1u1750_20 00FC  
                             i1u1750_21 00FA                               i1u1751_20 010C  
                             i1u1751_21 010A                               i1u1760_20 0194  
                             i1u1752_20 011A                               i1u1760_21 0192  
                             i1u1752_21 0118                               i1u1761_20 019E  
                             i1u1753_20 012A                               i1u1745_20 003C  
                             i1u1761_21 019C                               i1u1753_21 0128  
                             i1u1745_21 003A                               i1u1770_20 02C8  
                             i1u1762_20 01C6                               i1u1754_20 0138  
                             i1u1746_20 007E                               i1u1770_21 02C6  
                             i1u1762_21 01C4                               i1u1754_21 0136  
                             i1u1746_21 007C                               i1u1771_20 02D8  
                             i1u1763_20 01CE                               i1u1755_20 0148  
                             i1u1747_20 009A                               i1u1771_21 02D6  
                             i1u1763_21 01CC                               i1u1755_21 0146  
                             i1u1747_21 0098                               i1u1764_20 01D6  
                             i1u1756_20 0156                               i1u1748_20 00D8  
                             i1u1764_21 01D4                               i1u1756_21 0154  
                             i1u1748_21 00D6                               i1u1765_20 01F2  
                             i1u1757_20 0166                               i1u1749_20 00E8  
                             i1u1765_21 01F0                               i1u1757_21 0164  
                             i1u1749_21 00E6                               i1u1766_20 01FA  
                             i1u1758_20 0172                               i1u1766_21 01F8  
                             i1u1758_21 0170                               i1u1767_20 0226  
                             i1u1759_20 0182                               i1u1767_21 0224  
                             i1u1759_21 0180                               i1u1768_20 025A  
                             i1u1768_21 0258                               i1u1769_20 0298  
                             i1u1769_21 0296                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 3360  
                       ___lldiv@divisor 0064                       __end_of_printHelp 428C  
                       ___lldiv@counter 0068                       __end_of_printMode 20AE  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BE  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1CB2  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 5894  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 2A26                                 strlen@s 0060  
                            _sequencyno 0032                              _timekeeper 0022  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 258C  
                            findNodes@i 00C8                  __end_of_nibbleFromChar 19E4  
                   __end_of_doModeSLCAN 5148                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B5  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 3AA2  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 483A  
                            _vscpNodeId 00E9                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 37B6                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                  ??_readRegisterExtended 00BC  
                        _init_crc8$1962 0060                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0096  
                        __end_of___wmul 183C                     __size_of_doModeVscp 01B4  
                           _WriteTimer0 16DE                             _Write_b_eep 184C  
                        __end_of_memcpy 1AA6                          __end_of_memset 17BE  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01E9  
                        __end_of_strcat 1D0A                          __end_of_strchr 1E8A  
                        __end_of_strcpy 17EC                          __end_of_strlen 1A64  
              doModeVerbose@filter_type 028F                          __end_of_strtok 23C0  
                        __end_of_strspn 1AEA                             __end_ofPL10 57E4  
                           __end_ofPL20 37CC                             __end_ofPL12 36BA  
                           __end_ofPL30 354E                             __end_ofPL22 3C18  
                           __end_ofPL14 57F4                             __end_ofPL40 6C82  
                           __end_ofPL32 6C4E                             __end_ofPL24 4450  
                           __end_ofPL16 347A                             __end_ofPL50 6C9A  
                           __end_ofPL42 276C                             __end_ofPL34 2E0C  
                           __end_ofPL26 6C28                             __end_ofPL18 581A  
                           __end_ofPL60 586E                             __end_ofPL52 584A  
                           __end_ofPL44 355E                             __end_ofPL36 5834  
                           __end_ofPL28 6C3C                             __end_ofPL70 3584  
                           __end_ofPL62 232E                             __end_ofPL54 6CB0  
                           __end_ofPL46 26CC                             __end_ofPL38 6C68  
                           __end_ofPL80 3F38                             __end_ofPL72 37F4  
                           __end_ofPL64 37E0                             __end_ofPL56 5860  
                           __end_ofPL48 3570                             __end_ofPL90 3C26  
                           __end_ofPL82 2BA0                             __end_ofPL74 28B8  
                           __end_ofPL66 309A                             __end_ofPL58 2A26  
                           __end_ofPL92 483A                             __end_ofPL84 2EDE  
                           __end_ofPL76 5880                             __end_ofPL68 3374  
                           __end_ofPL94 1A24                             __end_ofPL86 588A  
                           __end_ofPL78 5154                             __end_ofPL96 358E  
                           __end_ofPL88 184C                             __end_ofPL98 5894  
                   start_initialization 1E8A                               _ReadUSART 1734  
                       findNodes@nFound 00C6                   doModeVerbose@reg_1163 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 309A  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C0                               _OpenUSART 1D0A  
                    __end_of_Read_b_eep 16DE                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00A4  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 0050                          _findNodes$1473 00C4  
              __end_of__ECANPointBuffer 2038                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 24EE                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 4D78               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 482C                                ??_memcpy 0066  
                   readRegister@timeout 00B6                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 16CC                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 1770                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 0128                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFF  
                          _readRegister 276C                            _isdigit$2910 0061  
                 __size_of_sendCANFrame 003A             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 1C0A  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01E7  
                         __IT_SAVE_WREG 0129                        _ledFunctionality 0030  
              doModeVerbose@nodeid_1161 028D                doModeVerbose@nodeid_1176 02AF  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00C9           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 3F38                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009D                          _ECANInitialize 219C  
                     _sendVSCPDriverAck 26CC                           __pmediumconst 6CB0  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 3184  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 19E4                               _fifo_read 2D3A  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 18F0  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BE                     _sendEscapedUartData 1D66  
                             _hexpowers 6D08                        ___lwdiv@quotient 0065  
                             _init_crc8 1F52                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 010C  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 1704                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 4450                             strnicmp@len 0068  
                             _octpowers 6CB0                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 221C  
             __end_of_sendVSCPDriverAck 275E                                i1u630_25 35BE  
                              i1u632_25 3654                                i1u634_25 2836  
                              i1u629_25 35AE                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 37F4                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3DAA                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007B                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3272                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C3  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 40CE  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 2038                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 4440                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 353A                               _putsUSART 1C5A  
                           __stringdata 6D28                       ___wmul@multiplier 0060  
                          __RegsToCANID 36BA                               _vscpClass 003C  
               ??_writeRegisterExtended 00BC                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0073  
                         ??_printBinary 0061                        doModeVerbose@reg 02AE  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 00E8  
             writeRegisterExtended@page 00B5                                ___DCByte 012A  
  __end_of_receiveVSCPModeMultiCanalMsg 16AA   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 16A8                             ??_Interrupt 0017  
               __end_of_printStatistics 40CE                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B8                                _Busy_eep 16AC  
              __size_of_init_app_eeprom 00AC                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C7  
          __end_of_vscp_restoreDefaults 16BA                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 3184  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 368C                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 28B8  
                              __ptext11 16A8                                __ptext20 18B8  
                              __ptext12 309A                                __ptext21 1F52  
                              __ptext13 1A64                                __ptext30 3272  
                              __ptext22 5894                                __ptext14 26CC  
                              __ptext31 2C6C                                __ptext23 4450  
                              __ptext15 262C                                __ptext40 4ABC  
                              __ptext32 1CB2                                __ptext24 2EDE  
                              __ptext16 17EC                                __ptext41 3F38  
                              __ptext33 276C                                __ptext25 1BC0  
                              __ptext17 37F4                                __ptext50 1704  
                              __ptext42 3374                                __ptext34 2A26  
                              __ptext26 2BA0                                __ptext18 3AA2  
                              __ptext51 1A24                                __ptext43 232E  
                              __ptext35 18F0                                __ptext27 17BE  
                              __ptext19 1D66                                __ptext60 1770  
                              __ptext52 483A                                __ptext44 1AEA  
                              __ptext36 3934                                __ptext28 3184  
                              __ptext61 22A0                                __ptext53 221C  
                              __ptext45 1AA6                                __ptext37 347A  
                              __ptext29 23C0                                __ptext70 219C  
                              __ptext62 1880                                __ptext54 24EE  
                              __ptext46 1E28                                __ptext38 1790  
                              __ptext71 171A                                __ptext63 258C  
                              __ptext55 2D3A                                __ptext47 2124  
                              __ptext39 40CE                                __ptext80 16CC  
                              __ptext72 1752                                __ptext64 192A  
                              __ptext56 5154                                __ptext48 1968  
                              __ptext81 19E4                                __ptext73 1D0A  
                              __ptext65 1B76                                __ptext57 181A  
                              __ptext49 1EEC                                __ptext74 16DE  
                              __ptext66 2038                                __ptext58 1DC6  
                              __ptext83 16BA                                __ptext75 16B2  
                              __ptext67 1C5A                                __ptext59 20AE  
                              __ptext84 2810                                __ptext76 296E  
                              __ptext68 16F0                                __ptext85 462E  
                              __ptext77 184C                                __ptext69 1B2E  
                              __ptext86 36BA                                __ptext78 16AC  
                              __ptext87 1FC2                                __ptext79 1C0A  
                              __ptext88 358E                                __ptext89 1734  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BE                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C2                     __end_of_printBinary 1C0A  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 0184                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 4D78                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 2C6C                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 23C0  
                             printMDF@i 00C2                               printMDF@p 00C0  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0072                                atoi@sign 006A  
                           ??_findNodes 00C4                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0066                             ??_fifo_read 0066  
                              _vscpData 0034           __size_of_readRegisterExtended 00CC  
                              main@argc 00DD                                main@argv 00DF  
                              _vscpSize 00EB                      ??__ECANPointBuffer 0004  
                              _vscpType 00EC                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 1EEC  
                      init_app_eeprom@i 0064             writeRegisterExtended@nodeid 00C0  
                         Interrupt@fail 0021                         _serialInputFifo 01DB  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 462E                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 0077               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B1                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00BF  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007A                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0064  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BE  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 2AE2                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 16AA  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 4ABC  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0069  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 1734  
                  _vscp_restoreDefaults 16B2                            printGUID@buf 00BF  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 1BC0                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0028                  ECANSendMessage@tempPtr 0089  
                           _printErrors 4ABC                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 347A                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002A               readRegisterExtended@value 00BA  
              _sendVSCPModeCapabilities 28B8                __size_of_ECANSendMessage 016E  
