

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 05 23:36:39 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006C62                     __pmediumconst:
   136                           	opt stack 0
   137  006C62                     _octpowers:
   138                           	opt stack 0
   139  006C62  0001               	dw	1
   140  006C64  0000               	dw	0
   141  006C66  0008               	dw	8
   142  006C68  0000               	dw	0
   143  006C6A  0040               	dw	64
   144  006C6C  0000               	dw	0
   145  006C6E  0200               	dw	512
   146  006C70  0000               	dw	0
   147  006C72  1000               	dw	4096
   148  006C74  0000               	dw	0
   149  006C76  8000               	dw	32768
   150  006C78  0000               	dw	0
   151  006C7A  0000               	dw	0
   152  006C7C  0004               	dw	4
   153  006C7E  0000               	dw	0
   154  006C80  0020               	dw	32
   155  006C82  0000               	dw	0
   156  006C84  0100               	dw	256
   157  006C86  0000               	dw	0
   158  006C88  0800               	dw	2048
   159  006C8A  0000               	dw	0
   160  006C8C  4000               	dw	16384
   161  006C8E  0000               	dw	0
   162  006C90  0000               	dw	0
   163  006C92                     __end_of_octpowers:
   164                           	opt stack 0
   165  006C92                     _dpowers:
   166                           	opt stack 0
   167  006C92  0001               	dw	1
   168  006C94  0000               	dw	0
   169  006C96  000A               	dw	10
   170  006C98  0000               	dw	0
   171  006C9A  0064               	dw	100
   172  006C9C  0000               	dw	0
   173  006C9E  03E8               	dw	1000
   174  006CA0  0000               	dw	0
   175  006CA2  2710               	dw	10000
   176  006CA4  0000               	dw	0
   177  006CA6  86A0               	dw	34464
   178  006CA8  0001               	dw	1
   179  006CAA  4240               	dw	16960
   180  006CAC  000F               	dw	15
   181  006CAE  9680               	dw	38528
   182  006CB0  0098               	dw	152
   183  006CB2  E100               	dw	57600
   184  006CB4  05F5               	dw	1525
   185  006CB6  CA00               	dw	51712
   186  006CB8  3B9A               	dw	15258
   187  006CBA                     __end_of_dpowers:
   188                           	opt stack 0
   189  006CBA                     _hexpowers:
   190                           	opt stack 0
   191  006CBA  0001               	dw	1
   192  006CBC  0000               	dw	0
   193  006CBE  0010               	dw	16
   194  006CC0  0000               	dw	0
   195  006CC2  0100               	dw	256
   196  006CC4  0000               	dw	0
   197  006CC6  1000               	dw	4096
   198  006CC8  0000               	dw	0
   199  006CCA  0000               	dw	0
   200  006CCC  0001               	dw	1
   201  006CCE  0000               	dw	0
   202  006CD0  0010               	dw	16
   203  006CD2  0000               	dw	0
   204  006CD4  0100               	dw	256
   205  006CD6  0000               	dw	0
   206  006CD8  1000               	dw	4096
   207  006CDA                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  006CDA                     __stringdata:
   372                           	opt stack 0
   373  006CDA                     STR_241:
   374  006CDA  20                 	db	32
   375  006CDB  20                 	db	32
   376  006CDC  20                 	db	32
   377  006CDD  20                 	db	32
   378  006CDE  20                 	db	32
   379  006CDF  20                 	db	32
   380  006CE0  20                 	db	32
   381  006CE1  20                 	db	32
   382  006CE2  20                 	db	32
   383  006CE3  46                 	db	70	;'F'
   384  006CE4  6F                 	db	111	;'o'
   385  006CE5  72                 	db	114	;'r'
   386  006CE6  6D                 	db	109	;'m'
   387  006CE7  61                 	db	97	;'a'
   388  006CE8  74                 	db	116	;'t'
   389  006CE9  3A                 	db	58	;':'
   390  006CEA  20                 	db	32
   391  006CEB  66                 	db	102	;'f'
   392  006CEC  69                 	db	105	;'i'
   393  006CED  6C                 	db	108	;'l'
   394  006CEE  74                 	db	116	;'t'
   395  006CEF  65                 	db	101	;'e'
   396  006CF0  72                 	db	114	;'r'
   397  006CF1  20                 	db	32
   398  006CF2  66                 	db	102	;'f'
   399  006CF3  69                 	db	105	;'i'
   400  006CF4  6C                 	db	108	;'l'
   401  006CF5  74                 	db	116	;'t'
   402  006CF6  65                 	db	101	;'e'
   403  006CF7  72                 	db	114	;'r'
   404  006CF8  6E                 	db	110	;'n'
   405  006CF9  6F                 	db	111	;'o'
   406  006CFA  2C                 	db	44
   407  006CFB  70                 	db	112	;'p'
   408  006CFC  72                 	db	114	;'r'
   409  006CFD  69                 	db	105	;'i'
   410  006CFE  6F                 	db	111	;'o'
   411  006CFF  2C                 	db	44
   412  006D00  63                 	db	99	;'c'
   413  006D01  6C                 	db	108	;'l'
   414  006D02  61                 	db	97	;'a'
   415  006D03  73                 	db	115	;'s'
   416  006D04  73                 	db	115	;'s'
   417  006D05  2C                 	db	44
   418  006D06  74                 	db	116	;'t'
   419  006D07  79                 	db	121	;'y'
   420  006D08  70                 	db	112	;'p'
   421  006D09  65                 	db	101	;'e'
   422  006D0A  2C                 	db	44
   423  006D0B  6E                 	db	110	;'n'
   424  006D0C  6F                 	db	111	;'o'
   425  006D0D  64                 	db	100	;'d'
   426  006D0E  65                 	db	101	;'e'
   427  006D0F  69                 	db	105	;'i'
   428  006D10  64                 	db	100	;'d'
   429  006D11  20                 	db	32
   430  006D12  20                 	db	32
   431  006D13  28                 	db	40
   432  006D14  66                 	db	102	;'f'
   433  006D15  69                 	db	105	;'i'
   434  006D16  6C                 	db	108	;'l'
   435  006D17  74                 	db	116	;'t'
   436  006D18  65                 	db	101	;'e'
   437  006D19  72                 	db	114	;'r'
   438  006D1A  6E                 	db	110	;'n'
   439  006D1B  6F                 	db	111	;'o'
   440  006D1C  20                 	db	32
   441  006D1D  3D                 	db	61	;'='
   442  006D1E  20                 	db	32
   443  006D1F  30                 	db	48	;'0'
   444  006D20  2D                 	db	45
   445  006D21  31                 	db	49	;'1'
   446  006D22  35                 	db	53	;'5'
   447  006D23  29                 	db	41
   448  006D24  2E                 	db	46
   449  006D25  0D                 	db	13
   450  006D26  0A                 	db	10
   451  006D27  00                 	db	0
   452  006D28                     STR_239:
   453  006D28  49                 	db	73	;'I'
   454  006D29  4E                 	db	78	;'N'
   455  006D2A  46                 	db	70	;'F'
   456  006D2B  4F                 	db	79	;'O'
   457  006D2C  20                 	db	32
   458  006D2D  2D                 	db	45
   459  006D2E  20                 	db	32
   460  006D2F  47                 	db	71	;'G'
   461  006D30  65                 	db	101	;'e'
   462  006D31  74                 	db	116	;'t'
   463  006D32  20                 	db	32
   464  006D33  69                 	db	105	;'i'
   465  006D34  6E                 	db	110	;'n'
   466  006D35  66                 	db	102	;'f'
   467  006D36  6F                 	db	111	;'o'
   468  006D37  20                 	db	32
   469  006D38  61                 	db	97	;'a'
   470  006D39  62                 	db	98	;'b'
   471  006D3A  6F                 	db	111	;'o'
   472  006D3B  75                 	db	117	;'u'
   473  006D3C  74                 	db	116	;'t'
   474  006D3D  20                 	db	32
   475  006D3E  61                 	db	97	;'a'
   476  006D3F  6E                 	db	110	;'n'
   477  006D40  20                 	db	32
   478  006D41  65                 	db	101	;'e'
   479  006D42  78                 	db	120	;'x'
   480  006D43  69                 	db	105	;'i'
   481  006D44  73                 	db	115	;'s'
   482  006D45  74                 	db	116	;'t'
   483  006D46  65                 	db	101	;'e'
   484  006D47  6E                 	db	110	;'n'
   485  006D48  74                 	db	116	;'t'
   486  006D49  20                 	db	32
   487  006D4A  6E                 	db	110	;'n'
   488  006D4B  6F                 	db	111	;'o'
   489  006D4C  64                 	db	100	;'d'
   490  006D4D  65                 	db	101	;'e'
   491  006D4E  20                 	db	32
   492  006D4F  6F                 	db	111	;'o'
   493  006D50  6E                 	db	110	;'n'
   494  006D51  20                 	db	32
   495  006D52  74                 	db	116	;'t'
   496  006D53  68                 	db	104	;'h'
   497  006D54  65                 	db	101	;'e'
   498  006D55  20                 	db	32
   499  006D56  62                 	db	98	;'b'
   500  006D57  75                 	db	117	;'u'
   501  006D58  73                 	db	115	;'s'
   502  006D59  20                 	db	32
   503  006D5A  28                 	db	40
   504  006D5B  46                 	db	70	;'F'
   505  006D5C  6F                 	db	111	;'o'
   506  006D5D  72                 	db	114	;'r'
   507  006D5E  6D                 	db	109	;'m'
   508  006D5F  61                 	db	97	;'a'
   509  006D60  74                 	db	116	;'t'
   510  006D61  3A                 	db	58	;':'
   511  006D62  20                 	db	32
   512  006D63  69                 	db	105	;'i'
   513  006D64  6E                 	db	110	;'n'
   514  006D65  66                 	db	102	;'f'
   515  006D66  6F                 	db	111	;'o'
   516  006D67  20                 	db	32
   517  006D68  6E                 	db	110	;'n'
   518  006D69  69                 	db	105	;'i'
   519  006D6A  63                 	db	99	;'c'
   520  006D6B  6B                 	db	107	;'k'
   521  006D6C  6E                 	db	110	;'n'
   522  006D6D  61                 	db	97	;'a'
   523  006D6E  6D                 	db	109	;'m'
   524  006D6F  65                 	db	101	;'e'
   525  006D70  29                 	db	41
   526  006D71  2E                 	db	46
   527  006D72  0D                 	db	13
   528  006D73  0A                 	db	10
   529  006D74  00                 	db	0
   530  006D75                     STR_237:
   531  006D75  52                 	db	82	;'R'
   532  006D76  52                 	db	82	;'R'
   533  006D77  45                 	db	69	;'E'
   534  006D78  47                 	db	71	;'G'
   535  006D79  20                 	db	32
   536  006D7A  2D                 	db	45
   537  006D7B  20                 	db	32
   538  006D7C  52                 	db	82	;'R'
   539  006D7D  65                 	db	101	;'e'
   540  006D7E  61                 	db	97	;'a'
   541  006D7F  64                 	db	100	;'d'
   542  006D80  20                 	db	32
   543  006D81  72                 	db	114	;'r'
   544  006D82  65                 	db	101	;'e'
   545  006D83  67                 	db	103	;'g'
   546  006D84  69                 	db	105	;'i'
   547  006D85  73                 	db	115	;'s'
   548  006D86  74                 	db	116	;'t'
   549  006D87  65                 	db	101	;'e'
   550  006D88  72                 	db	114	;'r'
   551  006D89  28                 	db	40
   552  006D8A  73                 	db	115	;'s'
   553  006D8B  29                 	db	41
   554  006D8C  20                 	db	32
   555  006D8D  6F                 	db	111	;'o'
   556  006D8E  66                 	db	102	;'f'
   557  006D8F  20                 	db	32
   558  006D90  6E                 	db	110	;'n'
   559  006D91  6F                 	db	111	;'o'
   560  006D92  64                 	db	100	;'d'
   561  006D93  65                 	db	101	;'e'
   562  006D94  20                 	db	32
   563  006D95  28                 	db	40
   564  006D96  46                 	db	70	;'F'
   565  006D97  6F                 	db	111	;'o'
   566  006D98  72                 	db	114	;'r'
   567  006D99  6D                 	db	109	;'m'
   568  006D9A  61                 	db	97	;'a'
   569  006D9B  74                 	db	116	;'t'
   570  006D9C  3A                 	db	58	;':'
   571  006D9D  20                 	db	32
   572  006D9E  72                 	db	114	;'r'
   573  006D9F  72                 	db	114	;'r'
   574  006DA0  65                 	db	101	;'e'
   575  006DA1  67                 	db	103	;'g'
   576  006DA2  20                 	db	32
   577  006DA3  6E                 	db	110	;'n'
   578  006DA4  6F                 	db	111	;'o'
   579  006DA5  64                 	db	100	;'d'
   580  006DA6  65                 	db	101	;'e'
   581  006DA7  69                 	db	105	;'i'
   582  006DA8  64                 	db	100	;'d'
   583  006DA9  20                 	db	32
   584  006DAA  5B                 	db	91	;'['
   585  006DAB  70                 	db	112	;'p'
   586  006DAC  61                 	db	97	;'a'
   587  006DAD  67                 	db	103	;'g'
   588  006DAE  65                 	db	101	;'e'
   589  006DAF  3A                 	db	58	;':'
   590  006DB0  5D                 	db	93	;']'
   591  006DB1  72                 	db	114	;'r'
   592  006DB2  65                 	db	101	;'e'
   593  006DB3  67                 	db	103	;'g'
   594  006DB4  20                 	db	32
   595  006DB5  5B                 	db	91	;'['
   596  006DB6  63                 	db	99	;'c'
   597  006DB7  6F                 	db	111	;'o'
   598  006DB8  75                 	db	117	;'u'
   599  006DB9  6E                 	db	110	;'n'
   600  006DBA  74                 	db	116	;'t'
   601  006DBB  5D                 	db	93	;']'
   602  006DBC  29                 	db	41
   603  006DBD  2E                 	db	46
   604  006DBE  0D                 	db	13
   605  006DBF  0A                 	db	10
   606  006DC0  00                 	db	0
   607  006DC1                     STR_238:
   608  006DC1  57                 	db	87	;'W'
   609  006DC2  52                 	db	82	;'R'
   610  006DC3  45                 	db	69	;'E'
   611  006DC4  47                 	db	71	;'G'
   612  006DC5  20                 	db	32
   613  006DC6  2D                 	db	45
   614  006DC7  20                 	db	32
   615  006DC8  57                 	db	87	;'W'
   616  006DC9  72                 	db	114	;'r'
   617  006DCA  69                 	db	105	;'i'
   618  006DCB  74                 	db	116	;'t'
   619  006DCC  65                 	db	101	;'e'
   620  006DCD  20                 	db	32
   621  006DCE  72                 	db	114	;'r'
   622  006DCF  65                 	db	101	;'e'
   623  006DD0  67                 	db	103	;'g'
   624  006DD1  69                 	db	105	;'i'
   625  006DD2  73                 	db	115	;'s'
   626  006DD3  74                 	db	116	;'t'
   627  006DD4  65                 	db	101	;'e'
   628  006DD5  72                 	db	114	;'r'
   629  006DD6  20                 	db	32
   630  006DD7  6F                 	db	111	;'o'
   631  006DD8  66                 	db	102	;'f'
   632  006DD9  20                 	db	32
   633  006DDA  6E                 	db	110	;'n'
   634  006DDB  6F                 	db	111	;'o'
   635  006DDC  64                 	db	100	;'d'
   636  006DDD  65                 	db	101	;'e'
   637  006DDE  20                 	db	32
   638  006DDF  28                 	db	40
   639  006DE0  46                 	db	70	;'F'
   640  006DE1  6F                 	db	111	;'o'
   641  006DE2  72                 	db	114	;'r'
   642  006DE3  6D                 	db	109	;'m'
   643  006DE4  61                 	db	97	;'a'
   644  006DE5  74                 	db	116	;'t'
   645  006DE6  3A                 	db	58	;':'
   646  006DE7  20                 	db	32
   647  006DE8  77                 	db	119	;'w'
   648  006DE9  72                 	db	114	;'r'
   649  006DEA  65                 	db	101	;'e'
   650  006DEB  67                 	db	103	;'g'
   651  006DEC  20                 	db	32
   652  006DED  6E                 	db	110	;'n'
   653  006DEE  6F                 	db	111	;'o'
   654  006DEF  64                 	db	100	;'d'
   655  006DF0  65                 	db	101	;'e'
   656  006DF1  69                 	db	105	;'i'
   657  006DF2  64                 	db	100	;'d'
   658  006DF3  20                 	db	32
   659  006DF4  5B                 	db	91	;'['
   660  006DF5  70                 	db	112	;'p'
   661  006DF6  61                 	db	97	;'a'
   662  006DF7  67                 	db	103	;'g'
   663  006DF8  65                 	db	101	;'e'
   664  006DF9  3A                 	db	58	;':'
   665  006DFA  5D                 	db	93	;']'
   666  006DFB  72                 	db	114	;'r'
   667  006DFC  65                 	db	101	;'e'
   668  006DFD  67                 	db	103	;'g'
   669  006DFE  20                 	db	32
   670  006DFF  63                 	db	99	;'c'
   671  006E00  6F                 	db	111	;'o'
   672  006E01  6E                 	db	110	;'n'
   673  006E02  74                 	db	116	;'t'
   674  006E03  65                 	db	101	;'e'
   675  006E04  6E                 	db	110	;'n'
   676  006E05  74                 	db	116	;'t'
   677  006E06  29                 	db	41
   678  006E07  2E                 	db	46
   679  006E08  0D                 	db	13
   680  006E09  0A                 	db	10
   681  006E0A  00                 	db	0
   682  006E0B                     STR_243:
   683  006E0B  20                 	db	32
   684  006E0C  20                 	db	32
   685  006E0D  20                 	db	32
   686  006E0E  20                 	db	32
   687  006E0F  20                 	db	32
   688  006E10  20                 	db	32
   689  006E11  20                 	db	32
   690  006E12  46                 	db	70	;'F'
   691  006E13  6F                 	db	111	;'o'
   692  006E14  72                 	db	114	;'r'
   693  006E15  6D                 	db	109	;'m'
   694  006E16  61                 	db	97	;'a'
   695  006E17  74                 	db	116	;'t'
   696  006E18  3A                 	db	58	;':'
   697  006E19  20                 	db	32
   698  006E1A  6D                 	db	109	;'m'
   699  006E1B  61                 	db	97	;'a'
   700  006E1C  73                 	db	115	;'s'
   701  006E1D  6B                 	db	107	;'k'
   702  006E1E  20                 	db	32
   703  006E1F  6D                 	db	109	;'m'
   704  006E20  61                 	db	97	;'a'
   705  006E21  73                 	db	115	;'s'
   706  006E22  6B                 	db	107	;'k'
   707  006E23  6E                 	db	110	;'n'
   708  006E24  6F                 	db	111	;'o'
   709  006E25  2C                 	db	44
   710  006E26  70                 	db	112	;'p'
   711  006E27  72                 	db	114	;'r'
   712  006E28  69                 	db	105	;'i'
   713  006E29  6F                 	db	111	;'o'
   714  006E2A  2C                 	db	44
   715  006E2B  63                 	db	99	;'c'
   716  006E2C  6C                 	db	108	;'l'
   717  006E2D  61                 	db	97	;'a'
   718  006E2E  73                 	db	115	;'s'
   719  006E2F  73                 	db	115	;'s'
   720  006E30  2C                 	db	44
   721  006E31  74                 	db	116	;'t'
   722  006E32  79                 	db	121	;'y'
   723  006E33  70                 	db	112	;'p'
   724  006E34  65                 	db	101	;'e'
   725  006E35  2C                 	db	44
   726  006E36  6E                 	db	110	;'n'
   727  006E37  6F                 	db	111	;'o'
   728  006E38  64                 	db	100	;'d'
   729  006E39  65                 	db	101	;'e'
   730  006E3A  69                 	db	105	;'i'
   731  006E3B  64                 	db	100	;'d'
   732  006E3C  20                 	db	32
   733  006E3D  28                 	db	40
   734  006E3E  6D                 	db	109	;'m'
   735  006E3F  61                 	db	97	;'a'
   736  006E40  73                 	db	115	;'s'
   737  006E41  6B                 	db	107	;'k'
   738  006E42  6E                 	db	110	;'n'
   739  006E43  6F                 	db	111	;'o'
   740  006E44  20                 	db	32
   741  006E45  3D                 	db	61	;'='
   742  006E46  20                 	db	32
   743  006E47  30                 	db	48	;'0'
   744  006E48  20                 	db	32
   745  006E49  6F                 	db	111	;'o'
   746  006E4A  72                 	db	114	;'r'
   747  006E4B  20                 	db	32
   748  006E4C  31                 	db	49	;'1'
   749  006E4D  29                 	db	41
   750  006E4E  2E                 	db	46
   751  006E4F  0D                 	db	13
   752  006E50  0A                 	db	10
   753  006E51  00                 	db	0
   754  006E52                     STR_252:
   755  006E52  2D                 	db	45
   756  006E53  2D                 	db	45
   757  006E54  2D                 	db	45
   758  006E55  2D                 	db	45
   759  006E56  2D                 	db	45
   760  006E57  2D                 	db	45
   761  006E58  2D                 	db	45
   762  006E59  2D                 	db	45
   763  006E5A  2D                 	db	45
   764  006E5B  2D                 	db	45
   765  006E5C  2D                 	db	45
   766  006E5D  2D                 	db	45
   767  006E5E  2D                 	db	45
   768  006E5F  2D                 	db	45
   769  006E60  2D                 	db	45
   770  006E61  2D                 	db	45
   771  006E62  2D                 	db	45
   772  006E63  2D                 	db	45
   773  006E64  2D                 	db	45
   774  006E65  2D                 	db	45
   775  006E66  2D                 	db	45
   776  006E67  2D                 	db	45
   777  006E68  2D                 	db	45
   778  006E69  2D                 	db	45
   779  006E6A  2D                 	db	45
   780  006E6B  2D                 	db	45
   781  006E6C  2D                 	db	45
   782  006E6D  2D                 	db	45
   783  006E6E  2D                 	db	45
   784  006E6F  2D                 	db	45
   785  006E70  2D                 	db	45
   786  006E71  2D                 	db	45
   787  006E72  2D                 	db	45
   788  006E73  2D                 	db	45
   789  006E74  2D                 	db	45
   790  006E75  2D                 	db	45
   791  006E76  2D                 	db	45
   792  006E77  2D                 	db	45
   793  006E78  2D                 	db	45
   794  006E79  2D                 	db	45
   795  006E7A  2D                 	db	45
   796  006E7B  2D                 	db	45
   797  006E7C  2D                 	db	45
   798  006E7D  2D                 	db	45
   799  006E7E  2D                 	db	45
   800  006E7F  2D                 	db	45
   801  006E80  2D                 	db	45
   802  006E81  2D                 	db	45
   803  006E82  2D                 	db	45
   804  006E83  2D                 	db	45
   805  006E84  2D                 	db	45
   806  006E85  2D                 	db	45
   807  006E86  2D                 	db	45
   808  006E87  2D                 	db	45
   809  006E88  2D                 	db	45
   810  006E89  2D                 	db	45
   811  006E8A  2D                 	db	45
   812  006E8B  2D                 	db	45
   813  006E8C  2D                 	db	45
   814  006E8D  2D                 	db	45
   815  006E8E  2D                 	db	45
   816  006E8F  2D                 	db	45
   817  006E90  2D                 	db	45
   818  006E91  2D                 	db	45
   819  006E92  0D                 	db	13
   820  006E93  0A                 	db	10
   821  006E94  00                 	db	0
   822  006E95                     STR_247:
   823  006E95  20                 	db	32
   824  006E96  20                 	db	32
   825  006E97  20                 	db	32
   826  006E98  20                 	db	32
   827  006E99  52                 	db	82	;'R'
   828  006E9A  57                 	db	87	;'W'
   829  006E9B  54                 	db	84	;'T'
   830  006E9C  49                 	db	73	;'I'
   831  006E9D  4D                 	db	77	;'M'
   832  006E9E  45                 	db	69	;'E'
   833  006E9F  4F                 	db	79	;'O'
   834  006EA0  55                 	db	85	;'U'
   835  006EA1  54                 	db	84	;'T'
   836  006EA2  20                 	db	32
   837  006EA3  2D                 	db	45
   838  006EA4  20                 	db	32
   839  006EA5  53                 	db	83	;'S'
   840  006EA6  65                 	db	101	;'e'
   841  006EA7  74                 	db	116	;'t'
   842  006EA8  20                 	db	32
   843  006EA9  72                 	db	114	;'r'
   844  006EAA  65                 	db	101	;'e'
   845  006EAB  67                 	db	103	;'g'
   846  006EAC  69                 	db	105	;'i'
   847  006EAD  73                 	db	115	;'s'
   848  006EAE  74                 	db	116	;'t'
   849  006EAF  65                 	db	101	;'e'
   850  006EB0  72                 	db	114	;'r'
   851  006EB1  20                 	db	32
   852  006EB2  72                 	db	114	;'r'
   853  006EB3  65                 	db	101	;'e'
   854  006EB4  61                 	db	97	;'a'
   855  006EB5  64                 	db	100	;'d'
   856  006EB6  2F                 	db	47
   857  006EB7  77                 	db	119	;'w'
   858  006EB8  72                 	db	114	;'r'
   859  006EB9  69                 	db	105	;'i'
   860  006EBA  74                 	db	116	;'t'
   861  006EBB  65                 	db	101	;'e'
   862  006EBC  20                 	db	32
   863  006EBD  74                 	db	116	;'t'
   864  006EBE  69                 	db	105	;'i'
   865  006EBF  6D                 	db	109	;'m'
   866  006EC0  65                 	db	101	;'e'
   867  006EC1  6F                 	db	111	;'o'
   868  006EC2  75                 	db	117	;'u'
   869  006EC3  74                 	db	116	;'t'
   870  006EC4  2E                 	db	46
   871  006EC5  20                 	db	32
   872  006EC6  44                 	db	68	;'D'
   873  006EC7  65                 	db	101	;'e'
   874  006EC8  66                 	db	102	;'f'
   875  006EC9  61                 	db	97	;'a'
   876  006ECA  75                 	db	117	;'u'
   877  006ECB  6C                 	db	108	;'l'
   878  006ECC  74                 	db	116	;'t'
   879  006ECD  3D                 	db	61	;'='
   880  006ECE  32                 	db	50	;'2'
   881  006ECF  30                 	db	48	;'0'
   882  006ED0  20                 	db	32
   883  006ED1  6D                 	db	109	;'m'
   884  006ED2  73                 	db	115	;'s'
   885  006ED3  20                 	db	32
   886  006ED4  2E                 	db	46
   887  006ED5  0D                 	db	13
   888  006ED6  0A                 	db	10
   889  006ED7  00                 	db	0
   890  006ED8                     STR_103:
   891  006ED8  2D                 	db	45
   892  006ED9  45                 	db	69	;'E'
   893  006EDA  52                 	db	82	;'R'
   894  006EDB  52                 	db	82	;'R'
   895  006EDC  4F                 	db	79	;'O'
   896  006EDD  52                 	db	82	;'R'
   897  006EDE  20                 	db	32
   898  006EDF  2D                 	db	45
   899  006EE0  20                 	db	32
   900  006EE1  46                 	db	70	;'F'
   901  006EE2  69                 	db	105	;'i'
   902  006EE3  6C                 	db	108	;'l'
   903  006EE4  74                 	db	116	;'t'
   904  006EE5  65                 	db	101	;'e'
   905  006EE6  72                 	db	114	;'r'
   906  006EE7  20                 	db	32
   907  006EE8  6E                 	db	110	;'n'
   908  006EE9  75                 	db	117	;'u'
   909  006EEA  6D                 	db	109	;'m'
   910  006EEB  62                 	db	98	;'b'
   911  006EEC  65                 	db	101	;'e'
   912  006EED  72                 	db	114	;'r'
   913  006EEE  20                 	db	32
   914  006EEF  63                 	db	99	;'c'
   915  006EF0  61                 	db	97	;'a'
   916  006EF1  6E                 	db	110	;'n'
   917  006EF2  20                 	db	32
   918  006EF3  6F                 	db	111	;'o'
   919  006EF4  6E                 	db	110	;'n'
   920  006EF5  6C                 	db	108	;'l'
   921  006EF6  79                 	db	121	;'y'
   922  006EF7  20                 	db	32
   923  006EF8  62                 	db	98	;'b'
   924  006EF9  65                 	db	101	;'e'
   925  006EFA  20                 	db	32
   926  006EFB  73                 	db	115	;'s'
   927  006EFC  65                 	db	101	;'e'
   928  006EFD  74                 	db	116	;'t'
   929  006EFE  20                 	db	32
   930  006EFF  74                 	db	116	;'t'
   931  006F00  6F                 	db	111	;'o'
   932  006F01  20                 	db	32
   933  006F02  61                 	db	97	;'a'
   934  006F03  20                 	db	32
   935  006F04  76                 	db	118	;'v'
   936  006F05  61                 	db	97	;'a'
   937  006F06  6C                 	db	108	;'l'
   938  006F07  75                 	db	117	;'u'
   939  006F08  65                 	db	101	;'e'
   940  006F09  20                 	db	32
   941  006F0A  62                 	db	98	;'b'
   942  006F0B  65                 	db	101	;'e'
   943  006F0C  74                 	db	116	;'t'
   944  006F0D  77                 	db	119	;'w'
   945  006F0E  65                 	db	101	;'e'
   946  006F0F  65                 	db	101	;'e'
   947  006F10  6E                 	db	110	;'n'
   948  006F11  20                 	db	32
   949  006F12  30                 	db	48	;'0'
   950  006F13  2D                 	db	45
   951  006F14  31                 	db	49	;'1'
   952  006F15  35                 	db	53	;'5'
   953  006F16  2E                 	db	46
   954  006F17  0D                 	db	13
   955  006F18  0A                 	db	10
   956  006F19  00                 	db	0
   957  006F1A                     STR_250:
   958  006F1A  20                 	db	32
   959  006F1B  20                 	db	32
   960  006F1C  20                 	db	32
   961  006F1D  20                 	db	32
   962  006F1E  4D                 	db	77	;'M'
   963  006F1F  4F                 	db	79	;'O'
   964  006F20  44                 	db	68	;'D'
   965  006F21  45                 	db	69	;'E'
   966  006F22  20                 	db	32
   967  006F23  2D                 	db	45
   968  006F24  20                 	db	32
   969  006F25  53                 	db	83	;'S'
   970  006F26  65                 	db	101	;'e'
   971  006F27  74                 	db	116	;'t'
   972  006F28  20                 	db	32
   973  006F29  61                 	db	97	;'a'
   974  006F2A  64                 	db	100	;'d'
   975  006F2B  61                 	db	97	;'a'
   976  006F2C  70                 	db	112	;'p'
   977  006F2D  74                 	db	116	;'t'
   978  006F2E  65                 	db	101	;'e'
   979  006F2F  72                 	db	114	;'r'
   980  006F30  20                 	db	32
   981  006F31  6D                 	db	109	;'m'
   982  006F32  6F                 	db	111	;'o'
   983  006F33  64                 	db	100	;'d'
   984  006F34  65                 	db	101	;'e'
   985  006F35  20                 	db	32
   986  006F36  74                 	db	116	;'t'
   987  006F37  68                 	db	104	;'h'
   988  006F38  61                 	db	97	;'a'
   989  006F39  74                 	db	116	;'t'
   990  006F3A  20                 	db	32
   991  006F3B  73                 	db	115	;'s'
   992  006F3C  68                 	db	104	;'h'
   993  006F3D  6F                 	db	111	;'o'
   994  006F3E  75                 	db	117	;'u'
   995  006F3F  6C                 	db	108	;'l'
   996  006F40  64                 	db	100	;'d'
   997  006F41  20                 	db	32
   998  006F42  62                 	db	98	;'b'
   999  006F43  65                 	db	101	;'e'
  1000  006F44  20                 	db	32
  1001  006F45  75                 	db	117	;'u'
  1002  006F46  73                 	db	115	;'s'
  1003  006F47  65                 	db	101	;'e'
  1004  006F48  64                 	db	100	;'d'
  1005  006F49  20                 	db	32
  1006  006F4A  6F                 	db	111	;'o'
  1007  006F4B  6E                 	db	110	;'n'
  1008  006F4C  20                 	db	32
  1009  006F4D  73                 	db	115	;'s'
  1010  006F4E  74                 	db	116	;'t'
  1011  006F4F  61                 	db	97	;'a'
  1012  006F50  72                 	db	114	;'r'
  1013  006F51  74                 	db	116	;'t'
  1014  006F52  75                 	db	117	;'u'
  1015  006F53  70                 	db	112	;'p'
  1016  006F54  2E                 	db	46
  1017  006F55  0D                 	db	13
  1018  006F56  0A                 	db	10
  1019  006F57  00                 	db	0
  1020  006F58                     STR_210:
  1021  006F58  54                 	db	84	;'T'
  1022  006F59  72                 	db	114	;'r'
  1023  006F5A  61                 	db	97	;'a'
  1024  006F5B  6E                 	db	110	;'n'
  1025  006F5C  73                 	db	115	;'s'
  1026  006F5D  6D                 	db	109	;'m'
  1027  006F5E  69                 	db	105	;'i'
  1028  006F5F  74                 	db	116	;'t'
  1029  006F60  74                 	db	116	;'t'
  1030  006F61  65                 	db	101	;'e'
  1031  006F62  72                 	db	114	;'r'
  1032  006F63  20                 	db	32
  1033  006F64  69                 	db	105	;'i'
  1034  006F65  6E                 	db	110	;'n'
  1035  006F66  20                 	db	32
  1036  006F67  45                 	db	69	;'E'
  1037  006F68  72                 	db	114	;'r'
  1038  006F69  72                 	db	114	;'r'
  1039  006F6A  6F                 	db	111	;'o'
  1040  006F6B  72                 	db	114	;'r'
  1041  006F6C  20                 	db	32
  1042  006F6D  53                 	db	83	;'S'
  1043  006F6E  74                 	db	116	;'t'
  1044  006F6F  61                 	db	97	;'a'
  1045  006F70  74                 	db	116	;'t'
  1046  006F71  65                 	db	101	;'e'
  1047  006F72  20                 	db	32
  1048  006F73  57                 	db	87	;'W'
  1049  006F74  61                 	db	97	;'a'
  1050  006F75  72                 	db	114	;'r'
  1051  006F76  6E                 	db	110	;'n'
  1052  006F77  69                 	db	105	;'i'
  1053  006F78  6E                 	db	110	;'n'
  1054  006F79  67                 	db	103	;'g'
  1055  006F7A  20                 	db	32
  1056  006F7B  28                 	db	40
  1057  006F7C  31                 	db	49	;'1'
  1058  006F7D  32                 	db	50	;'2'
  1059  006F7E  38                 	db	56	;'8'
  1060  006F7F  20                 	db	32
  1061  006F80  3E                 	db	62	;'>'
  1062  006F81  20                 	db	32
  1063  006F82  54                 	db	84	;'T'
  1064  006F83  45                 	db	69	;'E'
  1065  006F84  52                 	db	82	;'R'
  1066  006F85  52                 	db	82	;'R'
  1067  006F86  43                 	db	67	;'C'
  1068  006F87  4E                 	db	78	;'N'
  1069  006F88  54                 	db	84	;'T'
  1070  006F89  20                 	db	32
  1071  006F8A  3F                 	db	63	;'?'
  1072  006F8B  20                 	db	32
  1073  006F8C  39                 	db	57	;'9'
  1074  006F8D  36                 	db	54	;'6'
  1075  006F8E  29                 	db	41
  1076  006F8F  0D                 	db	13
  1077  006F90  0A                 	db	10
  1078  006F91  00                 	db	0
  1079  006F92                     STR_2:
  1080  006F92  43                 	db	67	;'C'
  1081  006F93  6F                 	db	111	;'o'
  1082  006F94  70                 	db	112	;'p'
  1083  006F95  79                 	db	121	;'y'
  1084  006F96  72                 	db	114	;'r'
  1085  006F97  69                 	db	105	;'i'
  1086  006F98  67                 	db	103	;'g'
  1087  006F99  68                 	db	104	;'h'
  1088  006F9A  74                 	db	116	;'t'
  1089  006F9B  20                 	db	32
  1090  006F9C  28                 	db	40
  1091  006F9D  43                 	db	67	;'C'
  1092  006F9E  29                 	db	41
  1093  006F9F  20                 	db	32
  1094  006FA0  32                 	db	50	;'2'
  1095  006FA1  30                 	db	48	;'0'
  1096  006FA2  31                 	db	49	;'1'
  1097  006FA3  34                 	db	52	;'4'
  1098  006FA4  2D                 	db	45
  1099  006FA5  32                 	db	50	;'2'
  1100  006FA6  30                 	db	48	;'0'
  1101  006FA7  31                 	db	49	;'1'
  1102  006FA8  35                 	db	53	;'5'
  1103  006FA9  20                 	db	32
  1104  006FAA  50                 	db	80	;'P'
  1105  006FAB  61                 	db	97	;'a'
  1106  006FAC  72                 	db	114	;'r'
  1107  006FAD  61                 	db	97	;'a'
  1108  006FAE  64                 	db	100	;'d'
  1109  006FAF  69                 	db	105	;'i'
  1110  006FB0  73                 	db	115	;'s'
  1111  006FB1  65                 	db	101	;'e'
  1112  006FB2  20                 	db	32
  1113  006FB3  6F                 	db	111	;'o'
  1114  006FB4  66                 	db	102	;'f'
  1115  006FB5  20                 	db	32
  1116  006FB6  74                 	db	116	;'t'
  1117  006FB7  68                 	db	104	;'h'
  1118  006FB8  65                 	db	101	;'e'
  1119  006FB9  20                 	db	32
  1120  006FBA  46                 	db	70	;'F'
  1121  006FBB  72                 	db	114	;'r'
  1122  006FBC  6F                 	db	111	;'o'
  1123  006FBD  67                 	db	103	;'g'
  1124  006FBE  20                 	db	32
  1125  006FBF  41                 	db	65	;'A'
  1126  006FC0  42                 	db	66	;'B'
  1127  006FC1  2C                 	db	44
  1128  006FC2  20                 	db	32
  1129  006FC3  53                 	db	83	;'S'
  1130  006FC4  77                 	db	119	;'w'
  1131  006FC5  65                 	db	101	;'e'
  1132  006FC6  64                 	db	100	;'d'
  1133  006FC7  65                 	db	101	;'e'
  1134  006FC8  6E                 	db	110	;'n'
  1135  006FC9  0D                 	db	13
  1136  006FCA  0A                 	db	10
  1137  006FCB  00                 	db	0
  1138  006FCC                     STR_212:
  1139  006FCC  54                 	db	84	;'T'
  1140  006FCD  72                 	db	114	;'r'
  1141  006FCE  61                 	db	97	;'a'
  1142  006FCF  6E                 	db	110	;'n'
  1143  006FD0  73                 	db	115	;'s'
  1144  006FD1  6D                 	db	109	;'m'
  1145  006FD2  69                 	db	105	;'i'
  1146  006FD3  74                 	db	116	;'t'
  1147  006FD4  74                 	db	116	;'t'
  1148  006FD5  65                 	db	101	;'e'
  1149  006FD6  72                 	db	114	;'r'
  1150  006FD7  20                 	db	32
  1151  006FD8  69                 	db	105	;'i'
  1152  006FD9  6E                 	db	110	;'n'
  1153  006FDA  20                 	db	32
  1154  006FDB  45                 	db	69	;'E'
  1155  006FDC  72                 	db	114	;'r'
  1156  006FDD  72                 	db	114	;'r'
  1157  006FDE  6F                 	db	111	;'o'
  1158  006FDF  72                 	db	114	;'r'
  1159  006FE0  20                 	db	32
  1160  006FE1  53                 	db	83	;'S'
  1161  006FE2  74                 	db	116	;'t'
  1162  006FE3  61                 	db	97	;'a'
  1163  006FE4  74                 	db	116	;'t'
  1164  006FE5  65                 	db	101	;'e'
  1165  006FE6  20                 	db	32
  1166  006FE7  42                 	db	66	;'B'
  1167  006FE8  75                 	db	117	;'u'
  1168  006FE9  73                 	db	115	;'s'
  1169  006FEA  20                 	db	32
  1170  006FEB  50                 	db	80	;'P'
  1171  006FEC  61                 	db	97	;'a'
  1172  006FED  73                 	db	115	;'s'
  1173  006FEE  73                 	db	115	;'s'
  1174  006FEF  69                 	db	105	;'i'
  1175  006FF0  76                 	db	118	;'v'
  1176  006FF1  65                 	db	101	;'e'
  1177  006FF2  20                 	db	32
  1178  006FF3  28                 	db	40
  1179  006FF4  54                 	db	84	;'T'
  1180  006FF5  45                 	db	69	;'E'
  1181  006FF6  52                 	db	82	;'R'
  1182  006FF7  52                 	db	82	;'R'
  1183  006FF8  43                 	db	67	;'C'
  1184  006FF9  4E                 	db	78	;'N'
  1185  006FFA  54                 	db	84	;'T'
  1186  006FFB  20                 	db	32
  1187  006FFC  3F                 	db	63	;'?'
  1188  006FFD  20                 	db	32
  1189  006FFE  31                 	db	49	;'1'
  1190  006FFF  32                 	db	50	;'2'
  1191  007000  38                 	db	56	;'8'
  1192  007001  29                 	db	41
  1193  007002  0D                 	db	13
  1194  007003  0A                 	db	10
  1195  007004  00                 	db	0
  1196  007005                     STR_231:
  1197  007005  20                 	db	32
  1198  007006  20                 	db	32
  1199  007007  20                 	db	32
  1200  007008  20                 	db	32
  1201  007009  20                 	db	32
  1202  00700A  46                 	db	70	;'F'
  1203  00700B  6F                 	db	111	;'o'
  1204  00700C  72                 	db	114	;'r'
  1205  00700D  6D                 	db	109	;'m'
  1206  00700E  61                 	db	97	;'a'
  1207  00700F  74                 	db	116	;'t'
  1208  007010  3A                 	db	58	;':'
  1209  007011  20                 	db	32
  1210  007012  70                 	db	112	;'p'
  1211  007013  72                 	db	114	;'r'
  1212  007014  69                 	db	105	;'i'
  1213  007015  6F                 	db	111	;'o'
  1214  007016  72                 	db	114	;'r'
  1215  007017  69                 	db	105	;'i'
  1216  007018  74                 	db	116	;'t'
  1217  007019  79                 	db	121	;'y'
  1218  00701A  2C                 	db	44
  1219  00701B  63                 	db	99	;'c'
  1220  00701C  6C                 	db	108	;'l'
  1221  00701D  61                 	db	97	;'a'
  1222  00701E  73                 	db	115	;'s'
  1223  00701F  73                 	db	115	;'s'
  1224  007020  2C                 	db	44
  1225  007021  74                 	db	116	;'t'
  1226  007022  79                 	db	121	;'y'
  1227  007023  70                 	db	112	;'p'
  1228  007024  65                 	db	101	;'e'
  1229  007025  2C                 	db	44
  1230  007026  6E                 	db	110	;'n'
  1231  007027  6F                 	db	111	;'o'
  1232  007028  64                 	db	100	;'d'
  1233  007029  65                 	db	101	;'e'
  1234  00702A  69                 	db	105	;'i'
  1235  00702B  64                 	db	100	;'d'
  1236  00702C  2C                 	db	44
  1237  00702D  63                 	db	99	;'c'
  1238  00702E  6F                 	db	111	;'o'
  1239  00702F  75                 	db	117	;'u'
  1240  007030  6E                 	db	110	;'n'
  1241  007031  74                 	db	116	;'t'
  1242  007032  2C                 	db	44
  1243  007033  64                 	db	100	;'d'
  1244  007034  61                 	db	97	;'a'
  1245  007035  74                 	db	116	;'t'
  1246  007036  61                 	db	97	;'a'
  1247  007037  2C                 	db	44
  1248  007038  2C                 	db	44
  1249  007039  2C                 	db	44
  1250  00703A  0D                 	db	13
  1251  00703B  0A                 	db	10
  1252  00703C  00                 	db	0
  1253  00703D                     STR_217:
  1254  00703D  52                 	db	82	;'R'
  1255  00703E  65                 	db	101	;'e'
  1256  00703F  63                 	db	99	;'c'
  1257  007040  65                 	db	101	;'e'
  1258  007041  69                 	db	105	;'i'
  1259  007042  76                 	db	118	;'v'
  1260  007043  65                 	db	101	;'e'
  1261  007044  72                 	db	114	;'r'
  1262  007045  20                 	db	32
  1263  007046  69                 	db	105	;'i'
  1264  007047  6E                 	db	110	;'n'
  1265  007048  20                 	db	32
  1266  007049  45                 	db	69	;'E'
  1267  00704A  72                 	db	114	;'r'
  1268  00704B  72                 	db	114	;'r'
  1269  00704C  6F                 	db	111	;'o'
  1270  00704D  72                 	db	114	;'r'
  1271  00704E  20                 	db	32
  1272  00704F  53                 	db	83	;'S'
  1273  007050  74                 	db	116	;'t'
  1274  007051  61                 	db	97	;'a'
  1275  007052  74                 	db	116	;'t'
  1276  007053  65                 	db	101	;'e'
  1277  007054  20                 	db	32
  1278  007055  57                 	db	87	;'W'
  1279  007056  61                 	db	97	;'a'
  1280  007057  72                 	db	114	;'r'
  1281  007058  6E                 	db	110	;'n'
  1282  007059  69                 	db	105	;'i'
  1283  00705A  6E                 	db	110	;'n'
  1284  00705B  67                 	db	103	;'g'
  1285  00705C  20                 	db	32
  1286  00705D  28                 	db	40
  1287  00705E  31                 	db	49	;'1'
  1288  00705F  32                 	db	50	;'2'
  1289  007060  38                 	db	56	;'8'
  1290  007061  20                 	db	32
  1291  007062  3E                 	db	62	;'>'
  1292  007063  20                 	db	32
  1293  007064  52                 	db	82	;'R'
  1294  007065  45                 	db	69	;'E'
  1295  007066  52                 	db	82	;'R'
  1296  007067  52                 	db	82	;'R'
  1297  007068  43                 	db	67	;'C'
  1298  007069  4E                 	db	78	;'N'
  1299  00706A  54                 	db	84	;'T'
  1300  00706B  20                 	db	32
  1301  00706C  3F                 	db	63	;'?'
  1302  00706D  20                 	db	32
  1303  00706E  39                 	db	57	;'9'
  1304  00706F  36                 	db	54	;'6'
  1305  007070  29                 	db	41
  1306  007071  0D                 	db	13
  1307  007072  0A                 	db	10
  1308  007073  00                 	db	0
  1309  007074                     STR_249:
  1310  007074  20                 	db	32
  1311  007075  20                 	db	32
  1312  007076  20                 	db	32
  1313  007077  20                 	db	32
  1314  007078  53                 	db	83	;'S'
  1315  007079  54                 	db	84	;'T'
  1316  00707A  41                 	db	65	;'A'
  1317  00707B  52                 	db	82	;'R'
  1318  00707C  54                 	db	84	;'T'
  1319  00707D  49                 	db	73	;'I'
  1320  00707E  46                 	db	70	;'F'
  1321  00707F  20                 	db	32
  1322  007080  2D                 	db	45
  1323  007081  20                 	db	32
  1324  007082  53                 	db	83	;'S'
  1325  007083  65                 	db	101	;'e'
  1326  007084  74                 	db	116	;'t'
  1327  007085  20                 	db	32
  1328  007086  69                 	db	105	;'i'
  1329  007087  6E                 	db	110	;'n'
  1330  007088  74                 	db	116	;'t'
  1331  007089  65                 	db	101	;'e'
  1332  00708A  72                 	db	114	;'r'
  1333  00708B  66                 	db	102	;'f'
  1334  00708C  61                 	db	97	;'a'
  1335  00708D  63                 	db	99	;'c'
  1336  00708E  65                 	db	101	;'e'
  1337  00708F  20                 	db	32
  1338  007090  73                 	db	115	;'s'
  1339  007091  74                 	db	116	;'t'
  1340  007092  61                 	db	97	;'a'
  1341  007093  74                 	db	116	;'t'
  1342  007094  65                 	db	101	;'e'
  1343  007095  20                 	db	32
  1344  007096  74                 	db	116	;'t'
  1345  007097  6F                 	db	111	;'o'
  1346  007098  20                 	db	32
  1347  007099  75                 	db	117	;'u'
  1348  00709A  73                 	db	115	;'s'
  1349  00709B  65                 	db	101	;'e'
  1350  00709C  20                 	db	32
  1351  00709D  6F                 	db	111	;'o'
  1352  00709E  6E                 	db	110	;'n'
  1353  00709F  20                 	db	32
  1354  0070A0  73                 	db	115	;'s'
  1355  0070A1  74                 	db	116	;'t'
  1356  0070A2  61                 	db	97	;'a'
  1357  0070A3  72                 	db	114	;'r'
  1358  0070A4  74                 	db	116	;'t'
  1359  0070A5  75                 	db	117	;'u'
  1360  0070A6  70                 	db	112	;'p'
  1361  0070A7  2E                 	db	46
  1362  0070A8  0D                 	db	13
  1363  0070A9  0A                 	db	10
  1364  0070AA  00                 	db	0
  1365  0070AB                     STR_4:
  1366  0070AB  50                 	db	80	;'P'
  1367  0070AC  72                 	db	114	;'r'
  1368  0070AD  65                 	db	101	;'e'
  1369  0070AE  73                 	db	115	;'s'
  1370  0070AF  73                 	db	115	;'s'
  1371  0070B0  20                 	db	32
  1372  0070B1  27                 	db	39
  1373  0070B2  76                 	db	118	;'v'
  1374  0070B3  27                 	db	39
  1375  0070B4  20                 	db	32
  1376  0070B5  77                 	db	119	;'w'
  1377  0070B6  69                 	db	105	;'i'
  1378  0070B7  74                 	db	116	;'t'
  1379  0070B8  68                 	db	104	;'h'
  1380  0070B9  69                 	db	105	;'i'
  1381  0070BA  6E                 	db	110	;'n'
  1382  0070BB  20                 	db	32
  1383  0070BC  74                 	db	116	;'t'
  1384  0070BD  68                 	db	104	;'h'
  1385  0070BE  72                 	db	114	;'r'
  1386  0070BF  65                 	db	101	;'e'
  1387  0070C0  65                 	db	101	;'e'
  1388  0070C1  20                 	db	32
  1389  0070C2  73                 	db	115	;'s'
  1390  0070C3  65                 	db	101	;'e'
  1391  0070C4  63                 	db	99	;'c'
  1392  0070C5  6F                 	db	111	;'o'
  1393  0070C6  6E                 	db	110	;'n'
  1394  0070C7  64                 	db	100	;'d'
  1395  0070C8  73                 	db	115	;'s'
  1396  0070C9  20                 	db	32
  1397  0070CA  74                 	db	116	;'t'
  1398  0070CB  6F                 	db	111	;'o'
  1399  0070CC  20                 	db	32
  1400  0070CD  65                 	db	101	;'e'
  1401  0070CE  6E                 	db	110	;'n'
  1402  0070CF  74                 	db	116	;'t'
  1403  0070D0  65                 	db	101	;'e'
  1404  0070D1  72                 	db	114	;'r'
  1405  0070D2  20                 	db	32
  1406  0070D3  76                 	db	118	;'v'
  1407  0070D4  65                 	db	101	;'e'
  1408  0070D5  72                 	db	114	;'r'
  1409  0070D6  62                 	db	98	;'b'
  1410  0070D7  6F                 	db	111	;'o'
  1411  0070D8  73                 	db	115	;'s'
  1412  0070D9  65                 	db	101	;'e'
  1413  0070DA  20                 	db	32
  1414  0070DB  6D                 	db	109	;'m'
  1415  0070DC  6F                 	db	111	;'o'
  1416  0070DD  64                 	db	100	;'d'
  1417  0070DE  65                 	db	101	;'e'
  1418  0070DF  0D                 	db	13
  1419  0070E0  0A                 	db	10
  1420  0070E1  00                 	db	0
  1421  0070E2                     STR_218:
  1422  0070E2  52                 	db	82	;'R'
  1423  0070E3  65                 	db	101	;'e'
  1424  0070E4  63                 	db	99	;'c'
  1425  0070E5  65                 	db	101	;'e'
  1426  0070E6  69                 	db	105	;'i'
  1427  0070E7  76                 	db	118	;'v'
  1428  0070E8  65                 	db	101	;'e'
  1429  0070E9  72                 	db	114	;'r'
  1430  0070EA  20                 	db	32
  1431  0070EB  69                 	db	105	;'i'
  1432  0070EC  6E                 	db	110	;'n'
  1433  0070ED  20                 	db	32
  1434  0070EE  45                 	db	69	;'E'
  1435  0070EF  72                 	db	114	;'r'
  1436  0070F0  72                 	db	114	;'r'
  1437  0070F1  6F                 	db	111	;'o'
  1438  0070F2  72                 	db	114	;'r'
  1439  0070F3  20                 	db	32
  1440  0070F4  53                 	db	83	;'S'
  1441  0070F5  74                 	db	116	;'t'
  1442  0070F6  61                 	db	97	;'a'
  1443  0070F7  74                 	db	116	;'t'
  1444  0070F8  65                 	db	101	;'e'
  1445  0070F9  20                 	db	32
  1446  0070FA  42                 	db	66	;'B'
  1447  0070FB  75                 	db	117	;'u'
  1448  0070FC  73                 	db	115	;'s'
  1449  0070FD  20                 	db	32
  1450  0070FE  50                 	db	80	;'P'
  1451  0070FF  61                 	db	97	;'a'
  1452  007100  73                 	db	115	;'s'
  1453  007101  73                 	db	115	;'s'
  1454  007102  69                 	db	105	;'i'
  1455  007103  76                 	db	118	;'v'
  1456  007104  65                 	db	101	;'e'
  1457  007105  20                 	db	32
  1458  007106  28                 	db	40
  1459  007107  52                 	db	82	;'R'
  1460  007108  45                 	db	69	;'E'
  1461  007109  52                 	db	82	;'R'
  1462  00710A  52                 	db	82	;'R'
  1463  00710B  43                 	db	67	;'C'
  1464  00710C  4E                 	db	78	;'N'
  1465  00710D  54                 	db	84	;'T'
  1466  00710E  20                 	db	32
  1467  00710F  3F                 	db	63	;'?'
  1468  007110  20                 	db	32
  1469  007111  31                 	db	49	;'1'
  1470  007112  32                 	db	50	;'2'
  1471  007113  38                 	db	56	;'8'
  1472  007114  29                 	db	41
  1473  007115  0D                 	db	13
  1474  007116  0A                 	db	10
  1475  007117  00                 	db	0
  1476  007118                     STR_79:
  1477  007118  2D                 	db	45
  1478  007119  45                 	db	69	;'E'
  1479  00711A  52                 	db	82	;'R'
  1480  00711B  52                 	db	82	;'R'
  1481  00711C  4F                 	db	79	;'O'
  1482  00711D  52                 	db	82	;'R'
  1483  00711E  20                 	db	32
  1484  00711F  2D                 	db	45
  1485  007120  20                 	db	32
  1486  007121  4F                 	db	79	;'O'
  1487  007122  6E                 	db	110	;'n'
  1488  007123  65                 	db	101	;'e'
  1489  007124  20                 	db	32
  1490  007125  6F                 	db	111	;'o'
  1491  007126  72                 	db	114	;'r'
  1492  007127  20                 	db	32
  1493  007128  6D                 	db	109	;'m'
  1494  007129  6F                 	db	111	;'o'
  1495  00712A  72                 	db	114	;'r'
  1496  00712B  65                 	db	101	;'e'
  1497  00712C  20                 	db	32
  1498  00712D  72                 	db	114	;'r'
  1499  00712E  65                 	db	101	;'e'
  1500  00712F  67                 	db	103	;'g'
  1501  007130  69                 	db	105	;'i'
  1502  007131  73                 	db	115	;'s'
  1503  007132  74                 	db	116	;'t'
  1504  007133  65                 	db	101	;'e'
  1505  007134  72                 	db	114	;'r'
  1506  007135  28                 	db	40
  1507  007136  73                 	db	115	;'s'
  1508  007137  29                 	db	41
  1509  007138  20                 	db	32
  1510  007139  63                 	db	99	;'c'
  1511  00713A  6F                 	db	111	;'o'
  1512  00713B  75                 	db	117	;'u'
  1513  00713C  6C                 	db	108	;'l'
  1514  00713D  64                 	db	100	;'d'
  1515  00713E  20                 	db	32
  1516  00713F  6E                 	db	110	;'n'
  1517  007140  6F                 	db	111	;'o'
  1518  007141  74                 	db	116	;'t'
  1519  007142  20                 	db	32
  1520  007143  62                 	db	98	;'b'
  1521  007144  65                 	db	101	;'e'
  1522  007145  20                 	db	32
  1523  007146  72                 	db	114	;'r'
  1524  007147  65                 	db	101	;'e'
  1525  007148  61                 	db	97	;'a'
  1526  007149  64                 	db	100	;'d'
  1527  00714A  2E                 	db	46
  1528  00714B  0D                 	db	13
  1529  00714C  0A                 	db	10
  1530  00714D  00                 	db	0
  1531  00714E                     STR_211:
  1532  00714E  54                 	db	84	;'T'
  1533  00714F  72                 	db	114	;'r'
  1534  007150  61                 	db	97	;'a'
  1535  007151  6E                 	db	110	;'n'
  1536  007152  73                 	db	115	;'s'
  1537  007153  6D                 	db	109	;'m'
  1538  007154  69                 	db	105	;'i'
  1539  007155  74                 	db	116	;'t'
  1540  007156  74                 	db	116	;'t'
  1541  007157  65                 	db	101	;'e'
  1542  007158  72                 	db	114	;'r'
  1543  007159  20                 	db	32
  1544  00715A  69                 	db	105	;'i'
  1545  00715B  6E                 	db	110	;'n'
  1546  00715C  20                 	db	32
  1547  00715D  45                 	db	69	;'E'
  1548  00715E  72                 	db	114	;'r'
  1549  00715F  72                 	db	114	;'r'
  1550  007160  6F                 	db	111	;'o'
  1551  007161  72                 	db	114	;'r'
  1552  007162  20                 	db	32
  1553  007163  53                 	db	83	;'S'
  1554  007164  74                 	db	116	;'t'
  1555  007165  61                 	db	97	;'a'
  1556  007166  74                 	db	116	;'t'
  1557  007167  65                 	db	101	;'e'
  1558  007168  20                 	db	32
  1559  007169  42                 	db	66	;'B'
  1560  00716A  75                 	db	117	;'u'
  1561  00716B  73                 	db	115	;'s'
  1562  00716C  20                 	db	32
  1563  00716D  4F                 	db	79	;'O'
  1564  00716E  46                 	db	70	;'F'
  1565  00716F  46                 	db	70	;'F'
  1566  007170  20                 	db	32
  1567  007171  28                 	db	40
  1568  007172  54                 	db	84	;'T'
  1569  007173  45                 	db	69	;'E'
  1570  007174  52                 	db	82	;'R'
  1571  007175  52                 	db	82	;'R'
  1572  007176  43                 	db	67	;'C'
  1573  007177  4E                 	db	78	;'N'
  1574  007178  54                 	db	84	;'T'
  1575  007179  20                 	db	32
  1576  00717A  3F                 	db	63	;'?'
  1577  00717B  20                 	db	32
  1578  00717C  32                 	db	50	;'2'
  1579  00717D  35                 	db	53	;'5'
  1580  00717E  36                 	db	54	;'6'
  1581  00717F  29                 	db	41
  1582  007180  0D                 	db	13
  1583  007181  0A                 	db	10
  1584  007182  00                 	db	0
  1585  007183                     STR_219:
  1586  007183  54                 	db	84	;'T'
  1587  007184  72                 	db	114	;'r'
  1588  007185  61                 	db	97	;'a'
  1589  007186  6E                 	db	110	;'n'
  1590  007187  73                 	db	115	;'s'
  1591  007188  6D                 	db	109	;'m'
  1592  007189  69                 	db	105	;'i'
  1593  00718A  74                 	db	116	;'t'
  1594  00718B  74                 	db	116	;'t'
  1595  00718C  65                 	db	101	;'e'
  1596  00718D  72                 	db	114	;'r'
  1597  00718E  20                 	db	32
  1598  00718F  6F                 	db	111	;'o'
  1599  007190  72                 	db	114	;'r'
  1600  007191  20                 	db	32
  1601  007192  52                 	db	82	;'R'
  1602  007193  65                 	db	101	;'e'
  1603  007194  63                 	db	99	;'c'
  1604  007195  65                 	db	101	;'e'
  1605  007196  69                 	db	105	;'i'
  1606  007197  76                 	db	118	;'v'
  1607  007198  65                 	db	101	;'e'
  1608  007199  72                 	db	114	;'r'
  1609  00719A  20                 	db	32
  1610  00719B  69                 	db	105	;'i'
  1611  00719C  73                 	db	115	;'s'
  1612  00719D  20                 	db	32
  1613  00719E  69                 	db	105	;'i'
  1614  00719F  6E                 	db	110	;'n'
  1615  0071A0  20                 	db	32
  1616  0071A1  45                 	db	69	;'E'
  1617  0071A2  72                 	db	114	;'r'
  1618  0071A3  72                 	db	114	;'r'
  1619  0071A4  6F                 	db	111	;'o'
  1620  0071A5  72                 	db	114	;'r'
  1621  0071A6  20                 	db	32
  1622  0071A7  53                 	db	83	;'S'
  1623  0071A8  74                 	db	116	;'t'
  1624  0071A9  61                 	db	97	;'a'
  1625  0071AA  74                 	db	116	;'t'
  1626  0071AB  65                 	db	101	;'e'
  1627  0071AC  20                 	db	32
  1628  0071AD  57                 	db	87	;'W'
  1629  0071AE  61                 	db	97	;'a'
  1630  0071AF  72                 	db	114	;'r'
  1631  0071B0  6E                 	db	110	;'n'
  1632  0071B1  69                 	db	105	;'i'
  1633  0071B2  6E                 	db	110	;'n'
  1634  0071B3  67                 	db	103	;'g'
  1635  0071B4  0D                 	db	13
  1636  0071B5  0A                 	db	10
  1637  0071B6  00                 	db	0
  1638  0071B7                     STR_225:
  1639  0071B7  4C                 	db	76	;'L'
  1640  0071B8  49                 	db	73	;'I'
  1641  0071B9  53                 	db	83	;'S'
  1642  0071BA  54                 	db	84	;'T'
  1643  0071BB  45                 	db	69	;'E'
  1644  0071BC  4E                 	db	78	;'N'
  1645  0071BD  20                 	db	32
  1646  0071BE  2D                 	db	45
  1647  0071BF  20                 	db	32
  1648  0071C0  4F                 	db	79	;'O'
  1649  0071C1  70                 	db	112	;'p'
  1650  0071C2  65                 	db	101	;'e'
  1651  0071C3  6E                 	db	110	;'n'
  1652  0071C4  20                 	db	32
  1653  0071C5  43                 	db	67	;'C'
  1654  0071C6  41                 	db	65	;'A'
  1655  0071C7  4E                 	db	78	;'N'
  1656  0071C8  20                 	db	32
  1657  0071C9  69                 	db	105	;'i'
  1658  0071CA  6E                 	db	110	;'n'
  1659  0071CB  74                 	db	116	;'t'
  1660  0071CC  65                 	db	101	;'e'
  1661  0071CD  72                 	db	114	;'r'
  1662  0071CE  66                 	db	102	;'f'
  1663  0071CF  61                 	db	97	;'a'
  1664  0071D0  63                 	db	99	;'c'
  1665  0071D1  65                 	db	101	;'e'
  1666  0071D2  20                 	db	32
  1667  0071D3  69                 	db	105	;'i'
  1668  0071D4  6E                 	db	110	;'n'
  1669  0071D5  20                 	db	32
  1670  0071D6  6C                 	db	108	;'l'
  1671  0071D7  69                 	db	105	;'i'
  1672  0071D8  73                 	db	115	;'s'
  1673  0071D9  74                 	db	116	;'t'
  1674  0071DA  65                 	db	101	;'e'
  1675  0071DB  6E                 	db	110	;'n'
  1676  0071DC  20                 	db	32
  1677  0071DD  6F                 	db	111	;'o'
  1678  0071DE  6E                 	db	110	;'n'
  1679  0071DF  6C                 	db	108	;'l'
  1680  0071E0  79                 	db	121	;'y'
  1681  0071E1  20                 	db	32
  1682  0071E2  6D                 	db	109	;'m'
  1683  0071E3  6F                 	db	111	;'o'
  1684  0071E4  64                 	db	100	;'d'
  1685  0071E5  65                 	db	101	;'e'
  1686  0071E6  2E                 	db	46
  1687  0071E7  0D                 	db	13
  1688  0071E8  0A                 	db	10
  1689  0071E9  00                 	db	0
  1690  0071EA                     STR_116:
  1691  0071EA  2D                 	db	45
  1692  0071EB  45                 	db	69	;'E'
  1693  0071EC  52                 	db	82	;'R'
  1694  0071ED  52                 	db	82	;'R'
  1695  0071EE  4F                 	db	79	;'O'
  1696  0071EF  52                 	db	82	;'R'
  1697  0071F0  20                 	db	32
  1698  0071F1  2D                 	db	45
  1699  0071F2  20                 	db	32
  1700  0071F3  4D                 	db	77	;'M'
  1701  0071F4  61                 	db	97	;'a'
  1702  0071F5  73                 	db	115	;'s'
  1703  0071F6  6B                 	db	107	;'k'
  1704  0071F7  20                 	db	32
  1705  0071F8  6E                 	db	110	;'n'
  1706  0071F9  75                 	db	117	;'u'
  1707  0071FA  6D                 	db	109	;'m'
  1708  0071FB  62                 	db	98	;'b'
  1709  0071FC  65                 	db	101	;'e'
  1710  0071FD  72                 	db	114	;'r'
  1711  0071FE  20                 	db	32
  1712  0071FF  63                 	db	99	;'c'
  1713  007200  61                 	db	97	;'a'
  1714  007201  6E                 	db	110	;'n'
  1715  007202  20                 	db	32
  1716  007203  6F                 	db	111	;'o'
  1717  007204  6E                 	db	110	;'n'
  1718  007205  6C                 	db	108	;'l'
  1719  007206  79                 	db	121	;'y'
  1720  007207  20                 	db	32
  1721  007208  62                 	db	98	;'b'
  1722  007209  65                 	db	101	;'e'
  1723  00720A  20                 	db	32
  1724  00720B  73                 	db	115	;'s'
  1725  00720C  65                 	db	101	;'e'
  1726  00720D  74                 	db	116	;'t'
  1727  00720E  20                 	db	32
  1728  00720F  61                 	db	97	;'a'
  1729  007210  73                 	db	115	;'s'
  1730  007211  20                 	db	32
  1731  007212  30                 	db	48	;'0'
  1732  007213  20                 	db	32
  1733  007214  6F                 	db	111	;'o'
  1734  007215  72                 	db	114	;'r'
  1735  007216  20                 	db	32
  1736  007217  31                 	db	49	;'1'
  1737  007218  2E                 	db	46
  1738  007219  0D                 	db	13
  1739  00721A  0A                 	db	10
  1740  00721B  00                 	db	0
  1741  00721C                     STR_226:
  1742  00721C  4C                 	db	76	;'L'
  1743  00721D  4F                 	db	79	;'O'
  1744  00721E  4F                 	db	79	;'O'
  1745  00721F  50                 	db	80	;'P'
  1746  007220  42                 	db	66	;'B'
  1747  007221  41                 	db	65	;'A'
  1748  007222  43                 	db	67	;'C'
  1749  007223  4B                 	db	75	;'K'
  1750  007224  20                 	db	32
  1751  007225  2D                 	db	45
  1752  007226  20                 	db	32
  1753  007227  4F                 	db	79	;'O'
  1754  007228  70                 	db	112	;'p'
  1755  007229  65                 	db	101	;'e'
  1756  00722A  6E                 	db	110	;'n'
  1757  00722B  20                 	db	32
  1758  00722C  43                 	db	67	;'C'
  1759  00722D  41                 	db	65	;'A'
  1760  00722E  4E                 	db	78	;'N'
  1761  00722F  20                 	db	32
  1762  007230  69                 	db	105	;'i'
  1763  007231  6E                 	db	110	;'n'
  1764  007232  74                 	db	116	;'t'
  1765  007233  65                 	db	101	;'e'
  1766  007234  72                 	db	114	;'r'
  1767  007235  66                 	db	102	;'f'
  1768  007236  61                 	db	97	;'a'
  1769  007237  63                 	db	99	;'c'
  1770  007238  65                 	db	101	;'e'
  1771  007239  20                 	db	32
  1772  00723A  69                 	db	105	;'i'
  1773  00723B  6E                 	db	110	;'n'
  1774  00723C  20                 	db	32
  1775  00723D  6C                 	db	108	;'l'
  1776  00723E  6F                 	db	111	;'o'
  1777  00723F  6F                 	db	111	;'o'
  1778  007240  70                 	db	112	;'p'
  1779  007241  62                 	db	98	;'b'
  1780  007242  61                 	db	97	;'a'
  1781  007243  63                 	db	99	;'c'
  1782  007244  6B                 	db	107	;'k'
  1783  007245  20                 	db	32
  1784  007246  6D                 	db	109	;'m'
  1785  007247  6F                 	db	111	;'o'
  1786  007248  64                 	db	100	;'d'
  1787  007249  65                 	db	101	;'e'
  1788  00724A  2E                 	db	46
  1789  00724B  0D                 	db	13
  1790  00724C  0A                 	db	10
  1791  00724D  00                 	db	0
  1792  00724E                     STR_228:
  1793  00724E  56                 	db	86	;'V'
  1794  00724F  45                 	db	69	;'E'
  1795  007250  52                 	db	82	;'R'
  1796  007251  53                 	db	83	;'S'
  1797  007252  49                 	db	73	;'I'
  1798  007253  4F                 	db	79	;'O'
  1799  007254  4E                 	db	78	;'N'
  1800  007255  20                 	db	32
  1801  007256  2D                 	db	45
  1802  007257  20                 	db	32
  1803  007258  44                 	db	68	;'D'
  1804  007259  69                 	db	105	;'i'
  1805  00725A  73                 	db	115	;'s'
  1806  00725B  70                 	db	112	;'p'
  1807  00725C  6C                 	db	108	;'l'
  1808  00725D  61                 	db	97	;'a'
  1809  00725E  79                 	db	121	;'y'
  1810  00725F  20                 	db	32
  1811  007260  66                 	db	102	;'f'
  1812  007261  69                 	db	105	;'i'
  1813  007262  72                 	db	114	;'r'
  1814  007263  6D                 	db	109	;'m'
  1815  007264  77                 	db	119	;'w'
  1816  007265  61                 	db	97	;'a'
  1817  007266  72                 	db	114	;'r'
  1818  007267  65                 	db	101	;'e'
  1819  007268  20                 	db	32
  1820  007269  76                 	db	118	;'v'
  1821  00726A  65                 	db	101	;'e'
  1822  00726B  72                 	db	114	;'r'
  1823  00726C  73                 	db	115	;'s'
  1824  00726D  69                 	db	105	;'i'
  1825  00726E  6F                 	db	111	;'o'
  1826  00726F  6E                 	db	110	;'n'
  1827  007270  20                 	db	32
  1828  007271  69                 	db	105	;'i'
  1829  007272  6E                 	db	110	;'n'
  1830  007273  66                 	db	102	;'f'
  1831  007274  6F                 	db	111	;'o'
  1832  007275  72                 	db	114	;'r'
  1833  007276  6D                 	db	109	;'m'
  1834  007277  61                 	db	97	;'a'
  1835  007278  74                 	db	116	;'t'
  1836  007279  69                 	db	105	;'i'
  1837  00727A  6F                 	db	111	;'o'
  1838  00727B  6E                 	db	110	;'n'
  1839  00727C  2E                 	db	46
  1840  00727D  0D                 	db	13
  1841  00727E  0A                 	db	10
  1842  00727F  00                 	db	0
  1843  007280                     STR_248:
  1844  007280  20                 	db	32
  1845  007281  20                 	db	32
  1846  007282  20                 	db	32
  1847  007283  20                 	db	32
  1848  007284  20                 	db	32
  1849  007285  20                 	db	32
  1850  007286  20                 	db	32
  1851  007287  20                 	db	32
  1852  007288  20                 	db	32
  1853  007289  20                 	db	32
  1854  00728A  20                 	db	32
  1855  00728B  20                 	db	32
  1856  00728C  20                 	db	32
  1857  00728D  20                 	db	32
  1858  00728E  20                 	db	32
  1859  00728F  20                 	db	32
  1860  007290  46                 	db	70	;'F'
  1861  007291  6F                 	db	111	;'o'
  1862  007292  72                 	db	114	;'r'
  1863  007293  6D                 	db	109	;'m'
  1864  007294  61                 	db	97	;'a'
  1865  007295  74                 	db	116	;'t'
  1866  007296  3A                 	db	58	;':'
  1867  007297  20                 	db	32
  1868  007298  73                 	db	115	;'s'
  1869  007299  65                 	db	101	;'e'
  1870  00729A  74                 	db	116	;'t'
  1871  00729B  20                 	db	32
  1872  00729C  72                 	db	114	;'r'
  1873  00729D  77                 	db	119	;'w'
  1874  00729E  74                 	db	116	;'t'
  1875  00729F  69                 	db	105	;'i'
  1876  0072A0  6D                 	db	109	;'m'
  1877  0072A1  65                 	db	101	;'e'
  1878  0072A2  6F                 	db	111	;'o'
  1879  0072A3  75                 	db	117	;'u'
  1880  0072A4  74                 	db	116	;'t'
  1881  0072A5  20                 	db	32
  1882  0072A6  74                 	db	116	;'t'
  1883  0072A7  69                 	db	105	;'i'
  1884  0072A8  6D                 	db	109	;'m'
  1885  0072A9  65                 	db	101	;'e'
  1886  0072AA  6F                 	db	111	;'o'
  1887  0072AB  75                 	db	117	;'u'
  1888  0072AC  74                 	db	116	;'t'
  1889  0072AD  2E                 	db	46
  1890  0072AE  0D                 	db	13
  1891  0072AF  0A                 	db	10
  1892  0072B0  00                 	db	0
  1893  0072B1                     STR_246:
  1894  0072B1  20                 	db	32
  1895  0072B2  20                 	db	32
  1896  0072B3  20                 	db	32
  1897  0072B4  20                 	db	32
  1898  0072B5  44                 	db	68	;'D'
  1899  0072B6  45                 	db	69	;'E'
  1900  0072B7  43                 	db	67	;'C'
  1901  0072B8  49                 	db	73	;'I'
  1902  0072B9  4D                 	db	77	;'M'
  1903  0072BA  41                 	db	65	;'A'
  1904  0072BB  4C                 	db	76	;'L'
  1905  0072BC  20                 	db	32
  1906  0072BD  2D                 	db	45
  1907  0072BE  20                 	db	32
  1908  0072BF  44                 	db	68	;'D'
  1909  0072C0  69                 	db	105	;'i'
  1910  0072C1  73                 	db	115	;'s'
  1911  0072C2  70                 	db	112	;'p'
  1912  0072C3  6C                 	db	108	;'l'
  1913  0072C4  61                 	db	97	;'a'
  1914  0072C5  79                 	db	121	;'y'
  1915  0072C6  20                 	db	32
  1916  0072C7  6E                 	db	110	;'n'
  1917  0072C8  75                 	db	117	;'u'
  1918  0072C9  6D                 	db	109	;'m'
  1919  0072CA  65                 	db	101	;'e'
  1920  0072CB  72                 	db	114	;'r'
  1921  0072CC  69                 	db	105	;'i'
  1922  0072CD  63                 	db	99	;'c'
  1923  0072CE  61                 	db	97	;'a'
  1924  0072CF  6C                 	db	108	;'l'
  1925  0072D0  73                 	db	115	;'s'
  1926  0072D1  20                 	db	32
  1927  0072D2  69                 	db	105	;'i'
  1928  0072D3  6E                 	db	110	;'n'
  1929  0072D4  20                 	db	32
  1930  0072D5  64                 	db	100	;'d'
  1931  0072D6  65                 	db	101	;'e'
  1932  0072D7  63                 	db	99	;'c'
  1933  0072D8  69                 	db	105	;'i'
  1934  0072D9  6D                 	db	109	;'m'
  1935  0072DA  61                 	db	97	;'a'
  1936  0072DB  6C                 	db	108	;'l'
  1937  0072DC  2E                 	db	46
  1938  0072DD  0D                 	db	13
  1939  0072DE  0A                 	db	10
  1940  0072DF  00                 	db	0
  1941  0072E0                     STR_245:
  1942  0072E0  20                 	db	32
  1943  0072E1  20                 	db	32
  1944  0072E2  20                 	db	32
  1945  0072E3  20                 	db	32
  1946  0072E4  48                 	db	72	;'H'
  1947  0072E5  45                 	db	69	;'E'
  1948  0072E6  58                 	db	88	;'X'
  1949  0072E7  20                 	db	32
  1950  0072E8  2D                 	db	45
  1951  0072E9  20                 	db	32
  1952  0072EA  44                 	db	68	;'D'
  1953  0072EB  69                 	db	105	;'i'
  1954  0072EC  73                 	db	115	;'s'
  1955  0072ED  70                 	db	112	;'p'
  1956  0072EE  6C                 	db	108	;'l'
  1957  0072EF  61                 	db	97	;'a'
  1958  0072F0  79                 	db	121	;'y'
  1959  0072F1  20                 	db	32
  1960  0072F2  6E                 	db	110	;'n'
  1961  0072F3  75                 	db	117	;'u'
  1962  0072F4  6D                 	db	109	;'m'
  1963  0072F5  65                 	db	101	;'e'
  1964  0072F6  72                 	db	114	;'r'
  1965  0072F7  69                 	db	105	;'i'
  1966  0072F8  63                 	db	99	;'c'
  1967  0072F9  61                 	db	97	;'a'
  1968  0072FA  6C                 	db	108	;'l'
  1969  0072FB  73                 	db	115	;'s'
  1970  0072FC  20                 	db	32
  1971  0072FD  69                 	db	105	;'i'
  1972  0072FE  6E                 	db	110	;'n'
  1973  0072FF  20                 	db	32
  1974  007300  68                 	db	104	;'h'
  1975  007301  65                 	db	101	;'e'
  1976  007302  78                 	db	120	;'x'
  1977  007303  61                 	db	97	;'a'
  1978  007304  64                 	db	100	;'d'
  1979  007305  65                 	db	101	;'e'
  1980  007306  63                 	db	99	;'c'
  1981  007307  69                 	db	105	;'i'
  1982  007308  6D                 	db	109	;'m'
  1983  007309  61                 	db	97	;'a'
  1984  00730A  6C                 	db	108	;'l'
  1985  00730B  2E                 	db	46
  1986  00730C  0D                 	db	13
  1987  00730D  0A                 	db	10
  1988  00730E  00                 	db	0
  1989  00730F                     STR_236:
  1990  00730F  46                 	db	70	;'F'
  1991  007310  49                 	db	73	;'I'
  1992  007311  4E                 	db	78	;'N'
  1993  007312  44                 	db	68	;'D'
  1994  007313  20                 	db	32
  1995  007314  2D                 	db	45
  1996  007315  20                 	db	32
  1997  007316  46                 	db	70	;'F'
  1998  007317  69                 	db	105	;'i'
  1999  007318  6E                 	db	110	;'n'
  2000  007319  64                 	db	100	;'d'
  2001  00731A  20                 	db	32
  2002  00731B  61                 	db	97	;'a'
  2003  00731C  76                 	db	118	;'v'
  2004  00731D  61                 	db	97	;'a'
  2005  00731E  69                 	db	105	;'i'
  2006  00731F  6C                 	db	108	;'l'
  2007  007320  61                 	db	97	;'a'
  2008  007321  62                 	db	98	;'b'
  2009  007322  6C                 	db	108	;'l'
  2010  007323  65                 	db	101	;'e'
  2011  007324  20                 	db	32
  2012  007325  43                 	db	67	;'C'
  2013  007326  41                 	db	65	;'A'
  2014  007327  4E                 	db	78	;'N'
  2015  007328  34                 	db	52	;'4'
  2016  007329  56                 	db	86	;'V'
  2017  00732A  53                 	db	83	;'S'
  2018  00732B  43                 	db	67	;'C'
  2019  00732C  50                 	db	80	;'P'
  2020  00732D  20                 	db	32
  2021  00732E  6E                 	db	110	;'n'
  2022  00732F  6F                 	db	111	;'o'
  2023  007330  64                 	db	100	;'d'
  2024  007331  65                 	db	101	;'e'
  2025  007332  73                 	db	115	;'s'
  2026  007333  20                 	db	32
  2027  007334  6F                 	db	111	;'o'
  2028  007335  6E                 	db	110	;'n'
  2029  007336  20                 	db	32
  2030  007337  62                 	db	98	;'b'
  2031  007338  75                 	db	117	;'u'
  2032  007339  73                 	db	115	;'s'
  2033  00733A  2E                 	db	46
  2034  00733B  0D                 	db	13
  2035  00733C  0A                 	db	10
  2036  00733D  00                 	db	0
  2037  00733E                     STR_224:
  2038  00733E  53                 	db	83	;'S'
  2039  00733F  49                 	db	73	;'I'
  2040  007340  4C                 	db	76	;'L'
  2041  007341  45                 	db	69	;'E'
  2042  007342  4E                 	db	78	;'N'
  2043  007343  54                 	db	84	;'T'
  2044  007344  20                 	db	32
  2045  007345  2D                 	db	45
  2046  007346  20                 	db	32
  2047  007347  4F                 	db	79	;'O'
  2048  007348  70                 	db	112	;'p'
  2049  007349  65                 	db	101	;'e'
  2050  00734A  6E                 	db	110	;'n'
  2051  00734B  20                 	db	32
  2052  00734C  43                 	db	67	;'C'
  2053  00734D  41                 	db	65	;'A'
  2054  00734E  4E                 	db	78	;'N'
  2055  00734F  20                 	db	32
  2056  007350  69                 	db	105	;'i'
  2057  007351  6E                 	db	110	;'n'
  2058  007352  74                 	db	116	;'t'
  2059  007353  65                 	db	101	;'e'
  2060  007354  72                 	db	114	;'r'
  2061  007355  66                 	db	102	;'f'
  2062  007356  61                 	db	97	;'a'
  2063  007357  63                 	db	99	;'c'
  2064  007358  65                 	db	101	;'e'
  2065  007359  20                 	db	32
  2066  00735A  69                 	db	105	;'i'
  2067  00735B  6E                 	db	110	;'n'
  2068  00735C  20                 	db	32
  2069  00735D  73                 	db	115	;'s'
  2070  00735E  69                 	db	105	;'i'
  2071  00735F  6C                 	db	108	;'l'
  2072  007360  65                 	db	101	;'e'
  2073  007361  6E                 	db	110	;'n'
  2074  007362  74                 	db	116	;'t'
  2075  007363  20                 	db	32
  2076  007364  6D                 	db	109	;'m'
  2077  007365  6F                 	db	111	;'o'
  2078  007366  64                 	db	100	;'d'
  2079  007367  65                 	db	101	;'e'
  2080  007368  2E                 	db	46
  2081  007369  0D                 	db	13
  2082  00736A  0A                 	db	10
  2083  00736B  00                 	db	0
  2084  00736C                     STR_229:
  2085  00736C  49                 	db	73	;'I'
  2086  00736D  46                 	db	70	;'F'
  2087  00736E  4D                 	db	77	;'M'
  2088  00736F  4F                 	db	79	;'O'
  2089  007370  44                 	db	68	;'D'
  2090  007371  45                 	db	69	;'E'
  2091  007372  20                 	db	32
  2092  007373  2D                 	db	45
  2093  007374  20                 	db	32
  2094  007375  44                 	db	68	;'D'
  2095  007376  69                 	db	105	;'i'
  2096  007377  73                 	db	115	;'s'
  2097  007378  70                 	db	112	;'p'
  2098  007379  6C                 	db	108	;'l'
  2099  00737A  61                 	db	97	;'a'
  2100  00737B  79                 	db	121	;'y'
  2101  00737C  20                 	db	32
  2102  00737D  73                 	db	115	;'s'
  2103  00737E  65                 	db	101	;'e'
  2104  00737F  6C                 	db	108	;'l'
  2105  007380  65                 	db	101	;'e'
  2106  007381  63                 	db	99	;'c'
  2107  007382  74                 	db	116	;'t'
  2108  007383  65                 	db	101	;'e'
  2109  007384  64                 	db	100	;'d'
  2110  007385  20                 	db	32
  2111  007386  69                 	db	105	;'i'
  2112  007387  6E                 	db	110	;'n'
  2113  007388  74                 	db	116	;'t'
  2114  007389  65                 	db	101	;'e'
  2115  00738A  72                 	db	114	;'r'
  2116  00738B  66                 	db	102	;'f'
  2117  00738C  61                 	db	97	;'a'
  2118  00738D  63                 	db	99	;'c'
  2119  00738E  65                 	db	101	;'e'
  2120  00738F  20                 	db	32
  2121  007390  6D                 	db	109	;'m'
  2122  007391  6F                 	db	111	;'o'
  2123  007392  64                 	db	100	;'d'
  2124  007393  65                 	db	101	;'e'
  2125  007394  2E                 	db	46
  2126  007395  0D                 	db	13
  2127  007396  0A                 	db	10
  2128  007397  00                 	db	0
  2129  007398                     STR_223:
  2130  007398  4F                 	db	79	;'O'
  2131  007399  50                 	db	80	;'P'
  2132  00739A  45                 	db	69	;'E'
  2133  00739B  4E                 	db	78	;'N'
  2134  00739C  20                 	db	32
  2135  00739D  2D                 	db	45
  2136  00739E  20                 	db	32
  2137  00739F  4F                 	db	79	;'O'
  2138  0073A0  70                 	db	112	;'p'
  2139  0073A1  65                 	db	101	;'e'
  2140  0073A2  6E                 	db	110	;'n'
  2141  0073A3  20                 	db	32
  2142  0073A4  43                 	db	67	;'C'
  2143  0073A5  41                 	db	65	;'A'
  2144  0073A6  4E                 	db	78	;'N'
  2145  0073A7  20                 	db	32
  2146  0073A8  69                 	db	105	;'i'
  2147  0073A9  6E                 	db	110	;'n'
  2148  0073AA  74                 	db	116	;'t'
  2149  0073AB  65                 	db	101	;'e'
  2150  0073AC  72                 	db	114	;'r'
  2151  0073AD  66                 	db	102	;'f'
  2152  0073AE  61                 	db	97	;'a'
  2153  0073AF  63                 	db	99	;'c'
  2154  0073B0  65                 	db	101	;'e'
  2155  0073B1  20                 	db	32
  2156  0073B2  69                 	db	105	;'i'
  2157  0073B3  6E                 	db	110	;'n'
  2158  0073B4  20                 	db	32
  2159  0073B5  6E                 	db	110	;'n'
  2160  0073B6  6F                 	db	111	;'o'
  2161  0073B7  72                 	db	114	;'r'
  2162  0073B8  6D                 	db	109	;'m'
  2163  0073B9  61                 	db	97	;'a'
  2164  0073BA  6C                 	db	108	;'l'
  2165  0073BB  20                 	db	32
  2166  0073BC  6D                 	db	109	;'m'
  2167  0073BD  6F                 	db	111	;'o'
  2168  0073BE  64                 	db	100	;'d'
  2169  0073BF  65                 	db	101	;'e'
  2170  0073C0  2E                 	db	46
  2171  0073C1  0D                 	db	13
  2172  0073C2  0A                 	db	10
  2173  0073C3  00                 	db	0
  2174  0073C4                     STR_129:
  2175  0073C4  2B                 	db	43
  2176  0073C5  4F                 	db	79	;'O'
  2177  0073C6  4B                 	db	75	;'K'
  2178  0073C7  20                 	db	32
  2179  0073C8  2D                 	db	45
  2180  0073C9  20                 	db	32
  2181  0073CA  4E                 	db	78	;'N'
  2182  0073CB  75                 	db	117	;'u'
  2183  0073CC  6D                 	db	109	;'m'
  2184  0073CD  65                 	db	101	;'e'
  2185  0073CE  72                 	db	114	;'r'
  2186  0073CF  69                 	db	105	;'i'
  2187  0073D0  63                 	db	99	;'c'
  2188  0073D1  61                 	db	97	;'a'
  2189  0073D2  6C                 	db	108	;'l'
  2190  0073D3  20                 	db	32
  2191  0073D4  6F                 	db	111	;'o'
  2192  0073D5  75                 	db	117	;'u'
  2193  0073D6  74                 	db	116	;'t'
  2194  0073D7  70                 	db	112	;'p'
  2195  0073D8  75                 	db	117	;'u'
  2196  0073D9  74                 	db	116	;'t'
  2197  0073DA  20                 	db	32
  2198  0073DB  6E                 	db	110	;'n'
  2199  0073DC  6F                 	db	111	;'o'
  2200  0073DD  77                 	db	119	;'w'
  2201  0073DE  20                 	db	32
  2202  0073DF  69                 	db	105	;'i'
  2203  0073E0  6E                 	db	110	;'n'
  2204  0073E1  20                 	db	32
  2205  0073E2  68                 	db	104	;'h'
  2206  0073E3  65                 	db	101	;'e'
  2207  0073E4  78                 	db	120	;'x'
  2208  0073E5  61                 	db	97	;'a'
  2209  0073E6  64                 	db	100	;'d'
  2210  0073E7  65                 	db	101	;'e'
  2211  0073E8  63                 	db	99	;'c'
  2212  0073E9  69                 	db	105	;'i'
  2213  0073EA  6D                 	db	109	;'m'
  2214  0073EB  61                 	db	97	;'a'
  2215  0073EC  6C                 	db	108	;'l'
  2216  0073ED  0D                 	db	13
  2217  0073EE  0A                 	db	10
  2218  0073EF  00                 	db	0
  2219  0073F0                     STR_106:
  2220  0073F0  2D                 	db	45
  2221  0073F1  45                 	db	69	;'E'
  2222  0073F2  52                 	db	82	;'R'
  2223  0073F3  52                 	db	82	;'R'
  2224  0073F4  4F                 	db	79	;'O'
  2225  0073F5  52                 	db	82	;'R'
  2226  0073F6  20                 	db	32
  2227  0073F7  2D                 	db	45
  2228  0073F8  20                 	db	32
  2229  0073F9  66                 	db	102	;'f'
  2230  0073FA  69                 	db	105	;'i'
  2231  0073FB  6C                 	db	108	;'l'
  2232  0073FC  74                 	db	116	;'t'
  2233  0073FD  65                 	db	101	;'e'
  2234  0073FE  72                 	db	114	;'r'
  2235  0073FF  20                 	db	32
  2236  007400  66                 	db	102	;'f'
  2237  007401  6F                 	db	111	;'o'
  2238  007402  72                 	db	114	;'r'
  2239  007403  20                 	db	32
  2240  007404  70                 	db	112	;'p'
  2241  007405  72                 	db	114	;'r'
  2242  007406  69                 	db	105	;'i'
  2243  007407  6F                 	db	111	;'o'
  2244  007408  72                 	db	114	;'r'
  2245  007409  69                 	db	105	;'i'
  2246  00740A  74                 	db	116	;'t'
  2247  00740B  79                 	db	121	;'y'
  2248  00740C  20                 	db	32
  2249  00740D  69                 	db	105	;'i'
  2250  00740E  73                 	db	115	;'s'
  2251  00740F  20                 	db	32
  2252  007410  6D                 	db	109	;'m'
  2253  007411  69                 	db	105	;'i'
  2254  007412  73                 	db	115	;'s'
  2255  007413  73                 	db	115	;'s'
  2256  007414  69                 	db	105	;'i'
  2257  007415  6E                 	db	110	;'n'
  2258  007416  67                 	db	103	;'g'
  2259  007417  0D                 	db	13
  2260  007418  0A                 	db	10
  2261  007419  00                 	db	0
  2262  00741A                     STR_112:
  2263  00741A  2D                 	db	45
  2264  00741B  45                 	db	69	;'E'
  2265  00741C  52                 	db	82	;'R'
  2266  00741D  52                 	db	82	;'R'
  2267  00741E  4F                 	db	79	;'O'
  2268  00741F  52                 	db	82	;'R'
  2269  007420  20                 	db	32
  2270  007421  2D                 	db	45
  2271  007422  20                 	db	32
  2272  007423  66                 	db	102	;'f'
  2273  007424  69                 	db	105	;'i'
  2274  007425  6C                 	db	108	;'l'
  2275  007426  74                 	db	116	;'t'
  2276  007427  65                 	db	101	;'e'
  2277  007428  72                 	db	114	;'r'
  2278  007429  20                 	db	32
  2279  00742A  66                 	db	102	;'f'
  2280  00742B  6F                 	db	111	;'o'
  2281  00742C  72                 	db	114	;'r'
  2282  00742D  20                 	db	32
  2283  00742E  6E                 	db	110	;'n'
  2284  00742F  69                 	db	105	;'i'
  2285  007430  64                 	db	100	;'d'
  2286  007431  65                 	db	101	;'e'
  2287  007432  20                 	db	32
  2288  007433  69                 	db	105	;'i'
  2289  007434  64                 	db	100	;'d'
  2290  007435  20                 	db	32
  2291  007436  69                 	db	105	;'i'
  2292  007437  73                 	db	115	;'s'
  2293  007438  20                 	db	32
  2294  007439  6D                 	db	109	;'m'
  2295  00743A  69                 	db	105	;'i'
  2296  00743B  73                 	db	115	;'s'
  2297  00743C  73                 	db	115	;'s'
  2298  00743D  69                 	db	105	;'i'
  2299  00743E  6E                 	db	110	;'n'
  2300  00743F  67                 	db	103	;'g'
  2301  007440  0D                 	db	13
  2302  007441  0A                 	db	10
  2303  007442  00                 	db	0
  2304  007443                     STR_235:
  2305  007443  48                 	db	72	;'H'
  2306  007444  45                 	db	69	;'E'
  2307  007445  4C                 	db	76	;'L'
  2308  007446  50                 	db	80	;'P'
  2309  007447  20                 	db	32
  2310  007448  2D                 	db	45
  2311  007449  20                 	db	32
  2312  00744A  44                 	db	68	;'D'
  2313  00744B  69                 	db	105	;'i'
  2314  00744C  73                 	db	115	;'s'
  2315  00744D  70                 	db	112	;'p'
  2316  00744E  6C                 	db	108	;'l'
  2317  00744F  61                 	db	97	;'a'
  2318  007450  79                 	db	121	;'y'
  2319  007451  20                 	db	32
  2320  007452  74                 	db	116	;'t'
  2321  007453  68                 	db	104	;'h'
  2322  007454  69                 	db	105	;'i'
  2323  007455  73                 	db	115	;'s'
  2324  007456  20                 	db	32
  2325  007457  68                 	db	104	;'h'
  2326  007458  65                 	db	101	;'e'
  2327  007459  6C                 	db	108	;'l'
  2328  00745A  70                 	db	112	;'p'
  2329  00745B  20                 	db	32
  2330  00745C  69                 	db	105	;'i'
  2331  00745D  6E                 	db	110	;'n'
  2332  00745E  66                 	db	102	;'f'
  2333  00745F  6F                 	db	111	;'o'
  2334  007460  72                 	db	114	;'r'
  2335  007461  6D                 	db	109	;'m'
  2336  007462  61                 	db	97	;'a'
  2337  007463  74                 	db	116	;'t'
  2338  007464  69                 	db	105	;'i'
  2339  007465  6F                 	db	111	;'o'
  2340  007466  6E                 	db	110	;'n'
  2341  007467  2E                 	db	46
  2342  007468  0D                 	db	13
  2343  007469  0A                 	db	10
  2344  00746A  00                 	db	0
  2345  00746B                     STR_119:
  2346  00746B  2D                 	db	45
  2347  00746C  45                 	db	69	;'E'
  2348  00746D  52                 	db	82	;'R'
  2349  00746E  52                 	db	82	;'R'
  2350  00746F  4F                 	db	79	;'O'
  2351  007470  52                 	db	82	;'R'
  2352  007471  20                 	db	32
  2353  007472  2D                 	db	45
  2354  007473  20                 	db	32
  2355  007474  6D                 	db	109	;'m'
  2356  007475  61                 	db	97	;'a'
  2357  007476  73                 	db	115	;'s'
  2358  007477  6B                 	db	107	;'k'
  2359  007478  20                 	db	32
  2360  007479  66                 	db	102	;'f'
  2361  00747A  6F                 	db	111	;'o'
  2362  00747B  72                 	db	114	;'r'
  2363  00747C  20                 	db	32
  2364  00747D  70                 	db	112	;'p'
  2365  00747E  72                 	db	114	;'r'
  2366  00747F  69                 	db	105	;'i'
  2367  007480  6F                 	db	111	;'o'
  2368  007481  72                 	db	114	;'r'
  2369  007482  69                 	db	105	;'i'
  2370  007483  74                 	db	116	;'t'
  2371  007484  79                 	db	121	;'y'
  2372  007485  20                 	db	32
  2373  007486  69                 	db	105	;'i'
  2374  007487  73                 	db	115	;'s'
  2375  007488  20                 	db	32
  2376  007489  6D                 	db	109	;'m'
  2377  00748A  69                 	db	105	;'i'
  2378  00748B  73                 	db	115	;'s'
  2379  00748C  73                 	db	115	;'s'
  2380  00748D  69                 	db	105	;'i'
  2381  00748E  6E                 	db	110	;'n'
  2382  00748F  67                 	db	103	;'g'
  2383  007490  0D                 	db	13
  2384  007491  0A                 	db	10
  2385  007492  00                 	db	0
  2386  007493                     STR_131:
  2387  007493  2B                 	db	43
  2388  007494  4F                 	db	79	;'O'
  2389  007495  4B                 	db	75	;'K'
  2390  007496  20                 	db	32
  2391  007497  2D                 	db	45
  2392  007498  20                 	db	32
  2393  007499  4E                 	db	78	;'N'
  2394  00749A  75                 	db	117	;'u'
  2395  00749B  6D                 	db	109	;'m'
  2396  00749C  65                 	db	101	;'e'
  2397  00749D  72                 	db	114	;'r'
  2398  00749E  69                 	db	105	;'i'
  2399  00749F  63                 	db	99	;'c'
  2400  0074A0  61                 	db	97	;'a'
  2401  0074A1  6C                 	db	108	;'l'
  2402  0074A2  20                 	db	32
  2403  0074A3  6F                 	db	111	;'o'
  2404  0074A4  75                 	db	117	;'u'
  2405  0074A5  74                 	db	116	;'t'
  2406  0074A6  70                 	db	112	;'p'
  2407  0074A7  75                 	db	117	;'u'
  2408  0074A8  74                 	db	116	;'t'
  2409  0074A9  20                 	db	32
  2410  0074AA  6E                 	db	110	;'n'
  2411  0074AB  6F                 	db	111	;'o'
  2412  0074AC  77                 	db	119	;'w'
  2413  0074AD  20                 	db	32
  2414  0074AE  69                 	db	105	;'i'
  2415  0074AF  6E                 	db	110	;'n'
  2416  0074B0  20                 	db	32
  2417  0074B1  64                 	db	100	;'d'
  2418  0074B2  65                 	db	101	;'e'
  2419  0074B3  63                 	db	99	;'c'
  2420  0074B4  69                 	db	105	;'i'
  2421  0074B5  6D                 	db	109	;'m'
  2422  0074B6  61                 	db	97	;'a'
  2423  0074B7  6C                 	db	108	;'l'
  2424  0074B8  0D                 	db	13
  2425  0074B9  0A                 	db	10
  2426  0074BA  00                 	db	0
  2427  0074BB                     STR_104:
  2428  0074BB  2D                 	db	45
  2429  0074BC  45                 	db	69	;'E'
  2430  0074BD  52                 	db	82	;'R'
  2431  0074BE  52                 	db	82	;'R'
  2432  0074BF  4F                 	db	79	;'O'
  2433  0074C0  52                 	db	82	;'R'
  2434  0074C1  20                 	db	32
  2435  0074C2  2D                 	db	45
  2436  0074C3  20                 	db	32
  2437  0074C4  4E                 	db	78	;'N'
  2438  0074C5  6F                 	db	111	;'o'
  2439  0074C6  20                 	db	32
  2440  0074C7  66                 	db	102	;'f'
  2441  0074C8  69                 	db	105	;'i'
  2442  0074C9  6C                 	db	108	;'l'
  2443  0074CA  74                 	db	116	;'t'
  2444  0074CB  65                 	db	101	;'e'
  2445  0074CC  72                 	db	114	;'r'
  2446  0074CD  20                 	db	32
  2447  0074CE  6E                 	db	110	;'n'
  2448  0074CF  75                 	db	117	;'u'
  2449  0074D0  6D                 	db	109	;'m'
  2450  0074D1  62                 	db	98	;'b'
  2451  0074D2  65                 	db	101	;'e'
  2452  0074D3  72                 	db	114	;'r'
  2453  0074D4  20                 	db	32
  2454  0074D5  73                 	db	115	;'s'
  2455  0074D6  70                 	db	112	;'p'
  2456  0074D7  65                 	db	101	;'e'
  2457  0074D8  63                 	db	99	;'c'
  2458  0074D9  69                 	db	105	;'i'
  2459  0074DA  66                 	db	102	;'f'
  2460  0074DB  69                 	db	105	;'i'
  2461  0074DC  65                 	db	101	;'e'
  2462  0074DD  64                 	db	100	;'d'
  2463  0074DE  2E                 	db	46
  2464  0074DF  0D                 	db	13
  2465  0074E0  0A                 	db	10
  2466  0074E1  00                 	db	0
  2467  0074E2                     STR_234:
  2468  0074E2  45                 	db	69	;'E'
  2469  0074E3  52                 	db	82	;'R'
  2470  0074E4  52                 	db	82	;'R'
  2471  0074E5  20                 	db	32
  2472  0074E6  2D                 	db	45
  2473  0074E7  20                 	db	32
  2474  0074E8  44                 	db	68	;'D'
  2475  0074E9  69                 	db	105	;'i'
  2476  0074EA  73                 	db	115	;'s'
  2477  0074EB  70                 	db	112	;'p'
  2478  0074EC  6C                 	db	108	;'l'
  2479  0074ED  61                 	db	97	;'a'
  2480  0074EE  79                 	db	121	;'y'
  2481  0074EF  20                 	db	32
  2482  0074F0  43                 	db	67	;'C'
  2483  0074F1  41                 	db	65	;'A'
  2484  0074F2  4E                 	db	78	;'N'
  2485  0074F3  20                 	db	32
  2486  0074F4  65                 	db	101	;'e'
  2487  0074F5  72                 	db	114	;'r'
  2488  0074F6  72                 	db	114	;'r'
  2489  0074F7  6F                 	db	111	;'o'
  2490  0074F8  72                 	db	114	;'r'
  2491  0074F9  20                 	db	32
  2492  0074FA  69                 	db	105	;'i'
  2493  0074FB  6E                 	db	110	;'n'
  2494  0074FC  66                 	db	102	;'f'
  2495  0074FD  6F                 	db	111	;'o'
  2496  0074FE  72                 	db	114	;'r'
  2497  0074FF  6D                 	db	109	;'m'
  2498  007500  61                 	db	97	;'a'
  2499  007501  74                 	db	116	;'t'
  2500  007502  69                 	db	105	;'i'
  2501  007503  6F                 	db	111	;'o'
  2502  007504  6E                 	db	110	;'n'
  2503  007505  2E                 	db	46
  2504  007506  0D                 	db	13
  2505  007507  0A                 	db	10
  2506  007508  00                 	db	0
  2507  007509                     STR_220:
  2508  007509  48                 	db	72	;'H'
  2509  00750A  65                 	db	101	;'e'
  2510  00750B  6C                 	db	108	;'l'
  2511  00750C  70                 	db	112	;'p'
  2512  00750D  20                 	db	32
  2513  00750E  66                 	db	102	;'f'
  2514  00750F  6F                 	db	111	;'o'
  2515  007510  72                 	db	114	;'r'
  2516  007511  20                 	db	32
  2517  007512  74                 	db	116	;'t'
  2518  007513  68                 	db	104	;'h'
  2519  007514  65                 	db	101	;'e'
  2520  007515  20                 	db	32
  2521  007516  46                 	db	70	;'F'
  2522  007517  72                 	db	114	;'r'
  2523  007518  61                 	db	97	;'a'
  2524  007519  6E                 	db	110	;'n'
  2525  00751A  6B                 	db	107	;'k'
  2526  00751B  66                 	db	102	;'f'
  2527  00751C  75                 	db	117	;'u'
  2528  00751D  72                 	db	114	;'r'
  2529  00751E  74                 	db	116	;'t'
  2530  00751F  20                 	db	32
  2531  007520  52                 	db	82	;'R'
  2532  007521  53                 	db	83	;'S'
  2533  007522  2D                 	db	45
  2534  007523  32                 	db	50	;'2'
  2535  007524  33                 	db	51	;'3'
  2536  007525  32                 	db	50	;'2'
  2537  007526  20                 	db	32
  2538  007527  6D                 	db	109	;'m'
  2539  007528  6F                 	db	111	;'o'
  2540  007529  64                 	db	100	;'d'
  2541  00752A  75                 	db	117	;'u'
  2542  00752B  6C                 	db	108	;'l'
  2543  00752C  65                 	db	101	;'e'
  2544  00752D  0D                 	db	13
  2545  00752E  0A                 	db	10
  2546  00752F  00                 	db	0
  2547  007530                     STR_125:
  2548  007530  2D                 	db	45
  2549  007531  45                 	db	69	;'E'
  2550  007532  52                 	db	82	;'R'
  2551  007533  52                 	db	82	;'R'
  2552  007534  4F                 	db	79	;'O'
  2553  007535  52                 	db	82	;'R'
  2554  007536  20                 	db	32
  2555  007537  2D                 	db	45
  2556  007538  20                 	db	32
  2557  007539  6D                 	db	109	;'m'
  2558  00753A  61                 	db	97	;'a'
  2559  00753B  73                 	db	115	;'s'
  2560  00753C  6B                 	db	107	;'k'
  2561  00753D  20                 	db	32
  2562  00753E  66                 	db	102	;'f'
  2563  00753F  6F                 	db	111	;'o'
  2564  007540  72                 	db	114	;'r'
  2565  007541  20                 	db	32
  2566  007542  6E                 	db	110	;'n'
  2567  007543  69                 	db	105	;'i'
  2568  007544  64                 	db	100	;'d'
  2569  007545  65                 	db	101	;'e'
  2570  007546  20                 	db	32
  2571  007547  69                 	db	105	;'i'
  2572  007548  64                 	db	100	;'d'
  2573  007549  20                 	db	32
  2574  00754A  69                 	db	105	;'i'
  2575  00754B  73                 	db	115	;'s'
  2576  00754C  20                 	db	32
  2577  00754D  6D                 	db	109	;'m'
  2578  00754E  69                 	db	105	;'i'
  2579  00754F  73                 	db	115	;'s'
  2580  007550  73                 	db	115	;'s'
  2581  007551  69                 	db	105	;'i'
  2582  007552  6E                 	db	110	;'n'
  2583  007553  67                 	db	103	;'g'
  2584  007554  0D                 	db	13
  2585  007555  0A                 	db	10
  2586  007556  00                 	db	0
  2587  007557                     STR_108:
  2588  007557  2D                 	db	45
  2589  007558  45                 	db	69	;'E'
  2590  007559  52                 	db	82	;'R'
  2591  00755A  52                 	db	82	;'R'
  2592  00755B  4F                 	db	79	;'O'
  2593  00755C  52                 	db	82	;'R'
  2594  00755D  20                 	db	32
  2595  00755E  2D                 	db	45
  2596  00755F  20                 	db	32
  2597  007560  66                 	db	102	;'f'
  2598  007561  69                 	db	105	;'i'
  2599  007562  6C                 	db	108	;'l'
  2600  007563  74                 	db	116	;'t'
  2601  007564  65                 	db	101	;'e'
  2602  007565  72                 	db	114	;'r'
  2603  007566  20                 	db	32
  2604  007567  66                 	db	102	;'f'
  2605  007568  6F                 	db	111	;'o'
  2606  007569  72                 	db	114	;'r'
  2607  00756A  20                 	db	32
  2608  00756B  63                 	db	99	;'c'
  2609  00756C  6C                 	db	108	;'l'
  2610  00756D  61                 	db	97	;'a'
  2611  00756E  73                 	db	115	;'s'
  2612  00756F  73                 	db	115	;'s'
  2613  007570  20                 	db	32
  2614  007571  69                 	db	105	;'i'
  2615  007572  73                 	db	115	;'s'
  2616  007573  20                 	db	32
  2617  007574  6D                 	db	109	;'m'
  2618  007575  69                 	db	105	;'i'
  2619  007576  73                 	db	115	;'s'
  2620  007577  73                 	db	115	;'s'
  2621  007578  69                 	db	105	;'i'
  2622  007579  6E                 	db	110	;'n'
  2623  00757A  67                 	db	103	;'g'
  2624  00757B  0D                 	db	13
  2625  00757C  0A                 	db	10
  2626  00757D  00                 	db	0
  2627  00757E                     STR_251:
  2628  00757E  20                 	db	32
  2629  00757F  20                 	db	32
  2630  007580  20                 	db	32
  2631  007581  20                 	db	32
  2632  007582  20                 	db	32
  2633  007583  20                 	db	32
  2634  007584  20                 	db	32
  2635  007585  20                 	db	32
  2636  007586  20                 	db	32
  2637  007587  20                 	db	32
  2638  007588  20                 	db	32
  2639  007589  4D                 	db	77	;'M'
  2640  00758A  6F                 	db	111	;'o'
  2641  00758B  64                 	db	100	;'d'
  2642  00758C  65                 	db	101	;'e'
  2643  00758D  73                 	db	115	;'s'
  2644  00758E  3A                 	db	58	;':'
  2645  00758F  20                 	db	32
  2646  007590  76                 	db	118	;'v'
  2647  007591  65                 	db	101	;'e'
  2648  007592  72                 	db	114	;'r'
  2649  007593  62                 	db	98	;'b'
  2650  007594  6F                 	db	111	;'o'
  2651  007595  73                 	db	115	;'s'
  2652  007596  65                 	db	101	;'e'
  2653  007597  7C                 	db	124
  2654  007598  76                 	db	118	;'v'
  2655  007599  73                 	db	115	;'s'
  2656  00759A  63                 	db	99	;'c'
  2657  00759B  70                 	db	112	;'p'
  2658  00759C  7C                 	db	124
  2659  00759D  73                 	db	115	;'s'
  2660  00759E  6C                 	db	108	;'l'
  2661  00759F  63                 	db	99	;'c'
  2662  0075A0  61                 	db	97	;'a'
  2663  0075A1  6E                 	db	110	;'n'
  2664  0075A2  0D                 	db	13
  2665  0075A3  0A                 	db	10
  2666  0075A4  00                 	db	0
  2667  0075A5                     STR_110:
  2668  0075A5  2D                 	db	45
  2669  0075A6  45                 	db	69	;'E'
  2670  0075A7  52                 	db	82	;'R'
  2671  0075A8  52                 	db	82	;'R'
  2672  0075A9  4F                 	db	79	;'O'
  2673  0075AA  52                 	db	82	;'R'
  2674  0075AB  20                 	db	32
  2675  0075AC  2D                 	db	45
  2676  0075AD  20                 	db	32
  2677  0075AE  66                 	db	102	;'f'
  2678  0075AF  69                 	db	105	;'i'
  2679  0075B0  6C                 	db	108	;'l'
  2680  0075B1  74                 	db	116	;'t'
  2681  0075B2  65                 	db	101	;'e'
  2682  0075B3  72                 	db	114	;'r'
  2683  0075B4  20                 	db	32
  2684  0075B5  66                 	db	102	;'f'
  2685  0075B6  6F                 	db	111	;'o'
  2686  0075B7  72                 	db	114	;'r'
  2687  0075B8  20                 	db	32
  2688  0075B9  74                 	db	116	;'t'
  2689  0075BA  79                 	db	121	;'y'
  2690  0075BB  70                 	db	112	;'p'
  2691  0075BC  65                 	db	101	;'e'
  2692  0075BD  20                 	db	32
  2693  0075BE  69                 	db	105	;'i'
  2694  0075BF  73                 	db	115	;'s'
  2695  0075C0  20                 	db	32
  2696  0075C1  6D                 	db	109	;'m'
  2697  0075C2  69                 	db	105	;'i'
  2698  0075C3  73                 	db	115	;'s'
  2699  0075C4  73                 	db	115	;'s'
  2700  0075C5  69                 	db	105	;'i'
  2701  0075C6  6E                 	db	110	;'n'
  2702  0075C7  67                 	db	103	;'g'
  2703  0075C8  0D                 	db	13
  2704  0075C9  0A                 	db	10
  2705  0075CA  00                 	db	0
  2706  0075CB                     STR_87:
  2707  0075CB  2B                 	db	43
  2708  0075CC  4F                 	db	79	;'O'
  2709  0075CD  4B                 	db	75	;'K'
  2710  0075CE  20                 	db	32
  2711  0075CF  2D                 	db	45
  2712  0075D0  20                 	db	32
  2713  0075D1  56                 	db	86	;'V'
  2714  0075D2  61                 	db	97	;'a'
  2715  0075D3  6C                 	db	108	;'l'
  2716  0075D4  75                 	db	117	;'u'
  2717  0075D5  65                 	db	101	;'e'
  2718  0075D6  20                 	db	32
  2719  0075D7  77                 	db	119	;'w'
  2720  0075D8  72                 	db	114	;'r'
  2721  0075D9  69                 	db	105	;'i'
  2722  0075DA  74                 	db	116	;'t'
  2723  0075DB  74                 	db	116	;'t'
  2724  0075DC  65                 	db	101	;'e'
  2725  0075DD  6E                 	db	110	;'n'
  2726  0075DE  20                 	db	32
  2727  0075DF  73                 	db	115	;'s'
  2728  0075E0  75                 	db	117	;'u'
  2729  0075E1  63                 	db	99	;'c'
  2730  0075E2  63                 	db	99	;'c'
  2731  0075E3  65                 	db	101	;'e'
  2732  0075E4  73                 	db	115	;'s'
  2733  0075E5  73                 	db	115	;'s'
  2734  0075E6  66                 	db	102	;'f'
  2735  0075E7  75                 	db	117	;'u'
  2736  0075E8  6C                 	db	108	;'l'
  2737  0075E9  6C                 	db	108	;'l'
  2738  0075EA  79                 	db	121	;'y'
  2739  0075EB  20                 	db	32
  2740  0075EC  66                 	db	102	;'f'
  2741  0075ED  6F                 	db	111	;'o'
  2742  0075EE  72                 	db	114	;'r'
  2743  0075EF  20                 	db	32
  2744  0075F0  00                 	db	0
  2745  0075F1                     STR_117:
  2746  0075F1  2D                 	db	45
  2747  0075F2  45                 	db	69	;'E'
  2748  0075F3  52                 	db	82	;'R'
  2749  0075F4  52                 	db	82	;'R'
  2750  0075F5  4F                 	db	79	;'O'
  2751  0075F6  52                 	db	82	;'R'
  2752  0075F7  20                 	db	32
  2753  0075F8  2D                 	db	45
  2754  0075F9  20                 	db	32
  2755  0075FA  4E                 	db	78	;'N'
  2756  0075FB  6F                 	db	111	;'o'
  2757  0075FC  20                 	db	32
  2758  0075FD  6D                 	db	109	;'m'
  2759  0075FE  61                 	db	97	;'a'
  2760  0075FF  73                 	db	115	;'s'
  2761  007600  6B                 	db	107	;'k'
  2762  007601  20                 	db	32
  2763  007602  6E                 	db	110	;'n'
  2764  007603  75                 	db	117	;'u'
  2765  007604  6D                 	db	109	;'m'
  2766  007605  62                 	db	98	;'b'
  2767  007606  65                 	db	101	;'e'
  2768  007607  72                 	db	114	;'r'
  2769  007608  20                 	db	32
  2770  007609  73                 	db	115	;'s'
  2771  00760A  70                 	db	112	;'p'
  2772  00760B  65                 	db	101	;'e'
  2773  00760C  63                 	db	99	;'c'
  2774  00760D  69                 	db	105	;'i'
  2775  00760E  66                 	db	102	;'f'
  2776  00760F  69                 	db	105	;'i'
  2777  007610  65                 	db	101	;'e'
  2778  007611  64                 	db	100	;'d'
  2779  007612  2E                 	db	46
  2780  007613  0D                 	db	13
  2781  007614  0A                 	db	10
  2782  007615  00                 	db	0
  2783  007616                     STR_1:
  2784  007616  0D                 	db	13
  2785  007617  0A                 	db	10
  2786  007618  46                 	db	70	;'F'
  2787  007619  72                 	db	114	;'r'
  2788  00761A  61                 	db	97	;'a'
  2789  00761B  6E                 	db	110	;'n'
  2790  00761C  6B                 	db	107	;'k'
  2791  00761D  66                 	db	102	;'f'
  2792  00761E  75                 	db	117	;'u'
  2793  00761F  72                 	db	114	;'r'
  2794  007620  74                 	db	116	;'t'
  2795  007621  20                 	db	32
  2796  007622  52                 	db	82	;'R'
  2797  007623  53                 	db	83	;'S'
  2798  007624  2D                 	db	45
  2799  007625  32                 	db	50	;'2'
  2800  007626  33                 	db	51	;'3'
  2801  007627  32                 	db	50	;'2'
  2802  007628  20                 	db	32
  2803  007629  43                 	db	67	;'C'
  2804  00762A  41                 	db	65	;'A'
  2805  00762B  4E                 	db	78	;'N'
  2806  00762C  34                 	db	52	;'4'
  2807  00762D  56                 	db	86	;'V'
  2808  00762E  53                 	db	83	;'S'
  2809  00762F  43                 	db	67	;'C'
  2810  007630  50                 	db	80	;'P'
  2811  007631  20                 	db	32
  2812  007632  6D                 	db	109	;'m'
  2813  007633  6F                 	db	111	;'o'
  2814  007634  64                 	db	100	;'d'
  2815  007635  75                 	db	117	;'u'
  2816  007636  6C                 	db	108	;'l'
  2817  007637  65                 	db	101	;'e'
  2818  007638  0D                 	db	13
  2819  007639  0A                 	db	10
  2820  00763A  00                 	db	0
  2821  00763B                     STR_121:
  2822  00763B  2D                 	db	45
  2823  00763C  45                 	db	69	;'E'
  2824  00763D  52                 	db	82	;'R'
  2825  00763E  52                 	db	82	;'R'
  2826  00763F  4F                 	db	79	;'O'
  2827  007640  52                 	db	82	;'R'
  2828  007641  20                 	db	32
  2829  007642  2D                 	db	45
  2830  007643  20                 	db	32
  2831  007644  6D                 	db	109	;'m'
  2832  007645  61                 	db	97	;'a'
  2833  007646  73                 	db	115	;'s'
  2834  007647  6B                 	db	107	;'k'
  2835  007648  20                 	db	32
  2836  007649  66                 	db	102	;'f'
  2837  00764A  6F                 	db	111	;'o'
  2838  00764B  72                 	db	114	;'r'
  2839  00764C  20                 	db	32
  2840  00764D  63                 	db	99	;'c'
  2841  00764E  6C                 	db	108	;'l'
  2842  00764F  61                 	db	97	;'a'
  2843  007650  73                 	db	115	;'s'
  2844  007651  73                 	db	115	;'s'
  2845  007652  20                 	db	32
  2846  007653  69                 	db	105	;'i'
  2847  007654  73                 	db	115	;'s'
  2848  007655  20                 	db	32
  2849  007656  6D                 	db	109	;'m'
  2850  007657  69                 	db	105	;'i'
  2851  007658  73                 	db	115	;'s'
  2852  007659  73                 	db	115	;'s'
  2853  00765A  69                 	db	105	;'i'
  2854  00765B  6E                 	db	110	;'n'
  2855  00765C  67                 	db	103	;'g'
  2856  00765D  0D                 	db	13
  2857  00765E  0A                 	db	10
  2858  00765F  00                 	db	0
  2859  007660                     STR_123:
  2860  007660  2D                 	db	45
  2861  007661  45                 	db	69	;'E'
  2862  007662  52                 	db	82	;'R'
  2863  007663  52                 	db	82	;'R'
  2864  007664  4F                 	db	79	;'O'
  2865  007665  52                 	db	82	;'R'
  2866  007666  20                 	db	32
  2867  007667  2D                 	db	45
  2868  007668  20                 	db	32
  2869  007669  6D                 	db	109	;'m'
  2870  00766A  61                 	db	97	;'a'
  2871  00766B  73                 	db	115	;'s'
  2872  00766C  6B                 	db	107	;'k'
  2873  00766D  20                 	db	32
  2874  00766E  66                 	db	102	;'f'
  2875  00766F  6F                 	db	111	;'o'
  2876  007670  72                 	db	114	;'r'
  2877  007671  20                 	db	32
  2878  007672  74                 	db	116	;'t'
  2879  007673  79                 	db	121	;'y'
  2880  007674  70                 	db	112	;'p'
  2881  007675  65                 	db	101	;'e'
  2882  007676  20                 	db	32
  2883  007677  69                 	db	105	;'i'
  2884  007678  73                 	db	115	;'s'
  2885  007679  20                 	db	32
  2886  00767A  6D                 	db	109	;'m'
  2887  00767B  69                 	db	105	;'i'
  2888  00767C  73                 	db	115	;'s'
  2889  00767D  73                 	db	115	;'s'
  2890  00767E  69                 	db	105	;'i'
  2891  00767F  6E                 	db	110	;'n'
  2892  007680  67                 	db	103	;'g'
  2893  007681  0D                 	db	13
  2894  007682  0A                 	db	10
  2895  007683  00                 	db	0
  2896  007684                     STR_91:
  2897  007684  2D                 	db	45
  2898  007685  45                 	db	69	;'E'
  2899  007686  52                 	db	82	;'R'
  2900  007687  52                 	db	82	;'R'
  2901  007688  4F                 	db	79	;'O'
  2902  007689  52                 	db	82	;'R'
  2903  00768A  20                 	db	32
  2904  00768B  2D                 	db	45
  2905  00768C  20                 	db	32
  2906  00768D  46                 	db	70	;'F'
  2907  00768E  61                 	db	97	;'a'
  2908  00768F  69                 	db	105	;'i'
  2909  007690  6C                 	db	108	;'l'
  2910  007691  65                 	db	101	;'e'
  2911  007692  64                 	db	100	;'d'
  2912  007693  20                 	db	32
  2913  007694  74                 	db	116	;'t'
  2914  007695  6F                 	db	111	;'o'
  2915  007696  20                 	db	32
  2916  007697  77                 	db	119	;'w'
  2917  007698  72                 	db	114	;'r'
  2918  007699  69                 	db	105	;'i'
  2919  00769A  74                 	db	116	;'t'
  2920  00769B  65                 	db	101	;'e'
  2921  00769C  20                 	db	32
  2922  00769D  76                 	db	118	;'v'
  2923  00769E  61                 	db	97	;'a'
  2924  00769F  6C                 	db	108	;'l'
  2925  0076A0  75                 	db	117	;'u'
  2926  0076A1  65                 	db	101	;'e'
  2927  0076A2  20                 	db	32
  2928  0076A3  66                 	db	102	;'f'
  2929  0076A4  6F                 	db	111	;'o'
  2930  0076A5  72                 	db	114	;'r'
  2931  0076A6  20                 	db	32
  2932  0076A7  00                 	db	0
  2933  0076A8                     STR_3:
  2934  0076A8  68                 	db	104	;'h'
  2935  0076A9  74                 	db	116	;'t'
  2936  0076AA  74                 	db	116	;'t'
  2937  0076AB  70                 	db	112	;'p'
  2938  0076AC  3A                 	db	58	;':'
  2939  0076AD  2F                 	db	47
  2940  0076AE  2F                 	db	47
  2941  0076AF  77                 	db	119	;'w'
  2942  0076B0  77                 	db	119	;'w'
  2943  0076B1  77                 	db	119	;'w'
  2944  0076B2  2E                 	db	46
  2945  0076B3  70                 	db	112	;'p'
  2946  0076B4  61                 	db	97	;'a'
  2947  0076B5  72                 	db	114	;'r'
  2948  0076B6  61                 	db	97	;'a'
  2949  0076B7  64                 	db	100	;'d'
  2950  0076B8  69                 	db	105	;'i'
  2951  0076B9  73                 	db	115	;'s'
  2952  0076BA  65                 	db	101	;'e'
  2953  0076BB  6F                 	db	111	;'o'
  2954  0076BC  66                 	db	102	;'f'
  2955  0076BD  74                 	db	116	;'t'
  2956  0076BE  68                 	db	104	;'h'
  2957  0076BF  65                 	db	101	;'e'
  2958  0076C0  66                 	db	102	;'f'
  2959  0076C1  72                 	db	114	;'r'
  2960  0076C2  6F                 	db	111	;'o'
  2961  0076C3  67                 	db	103	;'g'
  2962  0076C4  2E                 	db	46
  2963  0076C5  63                 	db	99	;'c'
  2964  0076C6  6F                 	db	111	;'o'
  2965  0076C7  6D                 	db	109	;'m'
  2966  0076C8  0D                 	db	13
  2967  0076C9  0A                 	db	10
  2968  0076CA  00                 	db	0
  2969  0076CB                     STR_244:
  2970  0076CB  53                 	db	83	;'S'
  2971  0076CC  45                 	db	69	;'E'
  2972  0076CD  54                 	db	84	;'T'
  2973  0076CE  20                 	db	32
  2974  0076CF  2D                 	db	45
  2975  0076D0  20                 	db	32
  2976  0076D1  50                 	db	80	;'P'
  2977  0076D2  65                 	db	101	;'e'
  2978  0076D3  72                 	db	114	;'r'
  2979  0076D4  73                 	db	115	;'s'
  2980  0076D5  69                 	db	105	;'i'
  2981  0076D6  73                 	db	115	;'s'
  2982  0076D7  74                 	db	116	;'t'
  2983  0076D8  65                 	db	101	;'e'
  2984  0076D9  6E                 	db	110	;'n'
  2985  0076DA  74                 	db	116	;'t'
  2986  0076DB  20                 	db	32
  2987  0076DC  66                 	db	102	;'f'
  2988  0076DD  75                 	db	117	;'u'
  2989  0076DE  6E                 	db	110	;'n'
  2990  0076DF  63                 	db	99	;'c'
  2991  0076E0  74                 	db	116	;'t'
  2992  0076E1  69                 	db	105	;'i'
  2993  0076E2  6F                 	db	111	;'o'
  2994  0076E3  6E                 	db	110	;'n'
  2995  0076E4  61                 	db	97	;'a'
  2996  0076E5  6C                 	db	108	;'l'
  2997  0076E6  69                 	db	105	;'i'
  2998  0076E7  74                 	db	116	;'t'
  2999  0076E8  79                 	db	121	;'y'
  3000  0076E9  2E                 	db	46
  3001  0076EA  0D                 	db	13
  3002  0076EB  0A                 	db	10
  3003  0076EC  00                 	db	0
  3004  0076ED                     STR_233:
  3005  0076ED  53                 	db	83	;'S'
  3006  0076EE  54                 	db	84	;'T'
  3007  0076EF  41                 	db	65	;'A'
  3008  0076F0  54                 	db	84	;'T'
  3009  0076F1  20                 	db	32
  3010  0076F2  2D                 	db	45
  3011  0076F3  20                 	db	32
  3012  0076F4  44                 	db	68	;'D'
  3013  0076F5  69                 	db	105	;'i'
  3014  0076F6  73                 	db	115	;'s'
  3015  0076F7  70                 	db	112	;'p'
  3016  0076F8  6C                 	db	108	;'l'
  3017  0076F9  61                 	db	97	;'a'
  3018  0076FA  79                 	db	121	;'y'
  3019  0076FB  20                 	db	32
  3020  0076FC  43                 	db	67	;'C'
  3021  0076FD  41                 	db	65	;'A'
  3022  0076FE  4E                 	db	78	;'N'
  3023  0076FF  20                 	db	32
  3024  007700  73                 	db	115	;'s'
  3025  007701  74                 	db	116	;'t'
  3026  007702  61                 	db	97	;'a'
  3027  007703  74                 	db	116	;'t'
  3028  007704  69                 	db	105	;'i'
  3029  007705  73                 	db	115	;'s'
  3030  007706  74                 	db	116	;'t'
  3031  007707  69                 	db	105	;'i'
  3032  007708  63                 	db	99	;'c'
  3033  007709  73                 	db	115	;'s'
  3034  00770A  2E                 	db	46
  3035  00770B  0D                 	db	13
  3036  00770C  0A                 	db	10
  3037  00770D  00                 	db	0
  3038  00770E                     STR_37:
  3039  00770E  2D                 	db	45
  3040  00770F  45                 	db	69	;'E'
  3041  007710  52                 	db	82	;'R'
  3042  007711  52                 	db	82	;'R'
  3043  007712  4F                 	db	79	;'O'
  3044  007713  52                 	db	82	;'R'
  3045  007714  20                 	db	32
  3046  007715  2D                 	db	45
  3047  007716  20                 	db	32
  3048  007717  46                 	db	70	;'F'
  3049  007718  61                 	db	97	;'a'
  3050  007719  69                 	db	105	;'i'
  3051  00771A  6C                 	db	108	;'l'
  3052  00771B  65                 	db	101	;'e'
  3053  00771C  64                 	db	100	;'d'
  3054  00771D  20                 	db	32
  3055  00771E  74                 	db	116	;'t'
  3056  00771F  6F                 	db	111	;'o'
  3057  007720  20                 	db	32
  3058  007721  73                 	db	115	;'s'
  3059  007722  65                 	db	101	;'e'
  3060  007723  6E                 	db	110	;'n'
  3061  007724  64                 	db	100	;'d'
  3062  007725  20                 	db	32
  3063  007726  65                 	db	101	;'e'
  3064  007727  76                 	db	118	;'v'
  3065  007728  65                 	db	101	;'e'
  3066  007729  6E                 	db	110	;'n'
  3067  00772A  74                 	db	116	;'t'
  3068  00772B  2E                 	db	46
  3069  00772C  0D                 	db	13
  3070  00772D  0A                 	db	10
  3071  00772E  00                 	db	0
  3072  00772F                     STR_144:
  3073  00772F  2D                 	db	45
  3074  007730  45                 	db	69	;'E'
  3075  007731  52                 	db	82	;'R'
  3076  007732  52                 	db	82	;'R'
  3077  007733  4F                 	db	79	;'O'
  3078  007734  52                 	db	82	;'R'
  3079  007735  20                 	db	32
  3080  007736  2D                 	db	45
  3081  007737  20                 	db	32
  3082  007738  55                 	db	85	;'U'
  3083  007739  6E                 	db	110	;'n'
  3084  00773A  6B                 	db	107	;'k'
  3085  00773B  6E                 	db	110	;'n'
  3086  00773C  6F                 	db	111	;'o'
  3087  00773D  77                 	db	119	;'w'
  3088  00773E  6E                 	db	110	;'n'
  3089  00773F  20                 	db	32
  3090  007740  27                 	db	39
  3091  007741  53                 	db	83	;'S'
  3092  007742  45                 	db	69	;'E'
  3093  007743  54                 	db	84	;'T'
  3094  007744  27                 	db	39
  3095  007745  20                 	db	32
  3096  007746  63                 	db	99	;'c'
  3097  007747  6F                 	db	111	;'o'
  3098  007748  6D                 	db	109	;'m'
  3099  007749  6D                 	db	109	;'m'
  3100  00774A  61                 	db	97	;'a'
  3101  00774B  6E                 	db	110	;'n'
  3102  00774C  64                 	db	100	;'d'
  3103  00774D  0D                 	db	13
  3104  00774E  0A                 	db	10
  3105  00774F  00                 	db	0
  3106  007750                     STR_53:
  3107  007750  2D                 	db	45
  3108  007751  45                 	db	69	;'E'
  3109  007752  52                 	db	82	;'R'
  3110  007753  52                 	db	82	;'R'
  3111  007754  4F                 	db	79	;'O'
  3112  007755  52                 	db	82	;'R'
  3113  007756  20                 	db	32
  3114  007757  2D                 	db	45
  3115  007758  20                 	db	32
  3116  007759  4E                 	db	78	;'N'
  3117  00775A  65                 	db	101	;'e'
  3118  00775B  65                 	db	101	;'e'
  3119  00775C  64                 	db	100	;'d'
  3120  00775D  73                 	db	115	;'s'
  3121  00775E  20                 	db	32
  3122  00775F  5B                 	db	91	;'['
  3123  007760  70                 	db	112	;'p'
  3124  007761  61                 	db	97	;'a'
  3125  007762  67                 	db	103	;'g'
  3126  007763  65                 	db	101	;'e'
  3127  007764  3A                 	db	58	;':'
  3128  007765  5D                 	db	93	;']'
  3129  007766  72                 	db	114	;'r'
  3130  007767  65                 	db	101	;'e'
  3131  007768  67                 	db	103	;'g'
  3132  007769  69                 	db	105	;'i'
  3133  00776A  73                 	db	115	;'s'
  3134  00776B  74                 	db	116	;'t'
  3135  00776C  65                 	db	101	;'e'
  3136  00776D  72                 	db	114	;'r'
  3137  00776E  0D                 	db	13
  3138  00776F  0A                 	db	10
  3139  007770  00                 	db	0
  3140  007771                     STR_139:
  3141  007771  2B                 	db	43
  3142  007772  4F                 	db	79	;'O'
  3143  007773  4B                 	db	75	;'K'
  3144  007774  20                 	db	32
  3145  007775  2D                 	db	45
  3146  007776  20                 	db	32
  3147  007777  4D                 	db	77	;'M'
  3148  007778  6F                 	db	111	;'o'
  3149  007779  64                 	db	100	;'d'
  3150  00777A  65                 	db	101	;'e'
  3151  00777B  20                 	db	32
  3152  00777C  69                 	db	105	;'i'
  3153  00777D  73                 	db	115	;'s'
  3154  00777E  20                 	db	32
  3155  00777F  6E                 	db	110	;'n'
  3156  007780  6F                 	db	111	;'o'
  3157  007781  77                 	db	119	;'w'
  3158  007782  20                 	db	32
  3159  007783  56                 	db	86	;'V'
  3160  007784  53                 	db	83	;'S'
  3161  007785  43                 	db	67	;'C'
  3162  007786  50                 	db	80	;'P'
  3163  007787  20                 	db	32
  3164  007788  44                 	db	68	;'D'
  3165  007789  72                 	db	114	;'r'
  3166  00778A  69                 	db	105	;'i'
  3167  00778B  76                 	db	118	;'v'
  3168  00778C  65                 	db	101	;'e'
  3169  00778D  72                 	db	114	;'r'
  3170  00778E  0D                 	db	13
  3171  00778F  0A                 	db	10
  3172  007790  00                 	db	0
  3173  007791                     STR_7:
  3174  007791  57                 	db	87	;'W'
  3175  007792  69                 	db	105	;'i'
  3176  007793  6C                 	db	108	;'l'
  3177  007794  6C                 	db	108	;'l'
  3178  007795  20                 	db	32
  3179  007796  65                 	db	101	;'e'
  3180  007797  6E                 	db	110	;'n'
  3181  007798  74                 	db	116	;'t'
  3182  007799  65                 	db	101	;'e'
  3183  00779A  72                 	db	114	;'r'
  3184  00779B  20                 	db	32
  3185  00779C  62                 	db	98	;'b'
  3186  00779D  6F                 	db	111	;'o'
  3187  00779E  6F                 	db	111	;'o'
  3188  00779F  74                 	db	116	;'t'
  3189  0077A0  6C                 	db	108	;'l'
  3190  0077A1  6F                 	db	111	;'o'
  3191  0077A2  61                 	db	97	;'a'
  3192  0077A3  64                 	db	100	;'d'
  3193  0077A4  65                 	db	101	;'e'
  3194  0077A5  72                 	db	114	;'r'
  3195  0077A6  20                 	db	32
  3196  0077A7  6E                 	db	110	;'n'
  3197  0077A8  6F                 	db	111	;'o'
  3198  0077A9  77                 	db	119	;'w'
  3199  0077AA  2E                 	db	46
  3200  0077AB  2E                 	db	46
  3201  0077AC  2E                 	db	46
  3202  0077AD  0D                 	db	13
  3203  0077AE  0A                 	db	10
  3204  0077AF  00                 	db	0
  3205  0077B0                     STR_227:
  3206  0077B0  43                 	db	67	;'C'
  3207  0077B1  4C                 	db	76	;'L'
  3208  0077B2  4F                 	db	79	;'O'
  3209  0077B3  53                 	db	83	;'S'
  3210  0077B4  45                 	db	69	;'E'
  3211  0077B5  20                 	db	32
  3212  0077B6  2D                 	db	45
  3213  0077B7  20                 	db	32
  3214  0077B8  43                 	db	67	;'C'
  3215  0077B9  6C                 	db	108	;'l'
  3216  0077BA  6F                 	db	111	;'o'
  3217  0077BB  73                 	db	115	;'s'
  3218  0077BC  65                 	db	101	;'e'
  3219  0077BD  20                 	db	32
  3220  0077BE  43                 	db	67	;'C'
  3221  0077BF  41                 	db	65	;'A'
  3222  0077C0  4E                 	db	78	;'N'
  3223  0077C1  20                 	db	32
  3224  0077C2  69                 	db	105	;'i'
  3225  0077C3  6E                 	db	110	;'n'
  3226  0077C4  74                 	db	116	;'t'
  3227  0077C5  65                 	db	101	;'e'
  3228  0077C6  72                 	db	114	;'r'
  3229  0077C7  66                 	db	102	;'f'
  3230  0077C8  61                 	db	97	;'a'
  3231  0077C9  63                 	db	99	;'c'
  3232  0077CA  65                 	db	101	;'e'
  3233  0077CB  2E                 	db	46
  3234  0077CC  0D                 	db	13
  3235  0077CD  0A                 	db	10
  3236  0077CE  00                 	db	0
  3237  0077CF                     STR_5:
  3238  0077CF  54                 	db	84	;'T'
  3239  0077D0  65                 	db	101	;'e'
  3240  0077D1  6D                 	db	109	;'m'
  3241  0077D2  70                 	db	112	;'p'
  3242  0077D3  6F                 	db	111	;'o'
  3243  0077D4  72                 	db	114	;'r'
  3244  0077D5  61                 	db	97	;'a'
  3245  0077D6  72                 	db	114	;'r'
  3246  0077D7  79                 	db	121	;'y'
  3247  0077D8  20                 	db	32
  3248  0077D9  76                 	db	118	;'v'
  3249  0077DA  65                 	db	101	;'e'
  3250  0077DB  72                 	db	114	;'r'
  3251  0077DC  62                 	db	98	;'b'
  3252  0077DD  6F                 	db	111	;'o'
  3253  0077DE  73                 	db	115	;'s'
  3254  0077DF  65                 	db	101	;'e'
  3255  0077E0  20                 	db	32
  3256  0077E1  6D                 	db	109	;'m'
  3257  0077E2  6F                 	db	111	;'o'
  3258  0077E3  64                 	db	100	;'d'
  3259  0077E4  65                 	db	101	;'e'
  3260  0077E5  20                 	db	32
  3261  0077E6  73                 	db	115	;'s'
  3262  0077E7  65                 	db	101	;'e'
  3263  0077E8  74                 	db	116	;'t'
  3264  0077E9  0D                 	db	13
  3265  0077EA  0A                 	db	10
  3266  0077EB  00                 	db	0
  3267  0077EC                     STR_137:
  3268  0077EC  2B                 	db	43
  3269  0077ED  4F                 	db	79	;'O'
  3270  0077EE  4B                 	db	75	;'K'
  3271  0077EF  20                 	db	32
  3272  0077F0  2D                 	db	45
  3273  0077F1  20                 	db	32
  3274  0077F2  4D                 	db	77	;'M'
  3275  0077F3  6F                 	db	111	;'o'
  3276  0077F4  64                 	db	100	;'d'
  3277  0077F5  65                 	db	101	;'e'
  3278  0077F6  20                 	db	32
  3279  0077F7  69                 	db	105	;'i'
  3280  0077F8  73                 	db	115	;'s'
  3281  0077F9  20                 	db	32
  3282  0077FA  6E                 	db	110	;'n'
  3283  0077FB  6F                 	db	111	;'o'
  3284  0077FC  77                 	db	119	;'w'
  3285  0077FD  20                 	db	32
  3286  0077FE  76                 	db	118	;'v'
  3287  0077FF  65                 	db	101	;'e'
  3288  007800  72                 	db	114	;'r'
  3289  007801  62                 	db	98	;'b'
  3290  007802  6F                 	db	111	;'o'
  3291  007803  73                 	db	115	;'s'
  3292  007804  65                 	db	101	;'e'
  3293  007805  0D                 	db	13
  3294  007806  0A                 	db	10
  3295  007807  00                 	db	0
  3296  007808                     STR_222:
  3297  007808  42                 	db	66	;'B'
  3298  007809  4F                 	db	79	;'O'
  3299  00780A  4F                 	db	79	;'O'
  3300  00780B  54                 	db	84	;'T'
  3301  00780C  20                 	db	32
  3302  00780D  2D                 	db	45
  3303  00780E  20                 	db	32
  3304  00780F  45                 	db	69	;'E'
  3305  007810  6E                 	db	110	;'n'
  3306  007811  74                 	db	116	;'t'
  3307  007812  65                 	db	101	;'e'
  3308  007813  72                 	db	114	;'r'
  3309  007814  20                 	db	32
  3310  007815  62                 	db	98	;'b'
  3311  007816  6F                 	db	111	;'o'
  3312  007817  6F                 	db	111	;'o'
  3313  007818  74                 	db	116	;'t'
  3314  007819  6C                 	db	108	;'l'
  3315  00781A  6F                 	db	111	;'o'
  3316  00781B  61                 	db	97	;'a'
  3317  00781C  64                 	db	100	;'d'
  3318  00781D  65                 	db	101	;'e'
  3319  00781E  72                 	db	114	;'r'
  3320  00781F  2E                 	db	46
  3321  007820  0D                 	db	13
  3322  007821  0A                 	db	10
  3323  007822  00                 	db	0
  3324  007823                     STR_146:
  3325  007823  2D                 	db	45
  3326  007824  45                 	db	69	;'E'
  3327  007825  52                 	db	82	;'R'
  3328  007826  52                 	db	82	;'R'
  3329  007827  4F                 	db	79	;'O'
  3330  007828  52                 	db	82	;'R'
  3331  007829  20                 	db	32
  3332  00782A  2D                 	db	45
  3333  00782B  20                 	db	32
  3334  00782C  55                 	db	85	;'U'
  3335  00782D  6E                 	db	110	;'n'
  3336  00782E  6B                 	db	107	;'k'
  3337  00782F  6E                 	db	110	;'n'
  3338  007830  6F                 	db	111	;'o'
  3339  007831  77                 	db	119	;'w'
  3340  007832  6E                 	db	110	;'n'
  3341  007833  20                 	db	32
  3342  007834  63                 	db	99	;'c'
  3343  007835  6F                 	db	111	;'o'
  3344  007836  6D                 	db	109	;'m'
  3345  007837  6D                 	db	109	;'m'
  3346  007838  61                 	db	97	;'a'
  3347  007839  6E                 	db	110	;'n'
  3348  00783A  64                 	db	100	;'d'
  3349  00783B  0D                 	db	13
  3350  00783C  0A                 	db	10
  3351  00783D  00                 	db	0
  3352  00783E                     STR_253:
  3353  00783E  4E                 	db	78	;'N'
  3354  00783F  6F                 	db	111	;'o'
  3355  007840  64                 	db	100	;'d'
  3356  007841  65                 	db	101	;'e'
  3357  007842  20                 	db	32
  3358  007843  66                 	db	102	;'f'
  3359  007844  6F                 	db	111	;'o'
  3360  007845  75                 	db	117	;'u'
  3361  007846  6E                 	db	110	;'n'
  3362  007847  64                 	db	100	;'d'
  3363  007848  20                 	db	32
  3364  007849  77                 	db	119	;'w'
  3365  00784A  69                 	db	105	;'i'
  3366  00784B  74                 	db	116	;'t'
  3367  00784C  68                 	db	104	;'h'
  3368  00784D  20                 	db	32
  3369  00784E  6E                 	db	110	;'n'
  3370  00784F  6F                 	db	111	;'o'
  3371  007850  64                 	db	100	;'d'
  3372  007851  65                 	db	101	;'e'
  3373  007852  20                 	db	32
  3374  007853  69                 	db	105	;'i'
  3375  007854  64                 	db	100	;'d'
  3376  007855  20                 	db	32
  3377  007856  3D                 	db	61	;'='
  3378  007857  20                 	db	32
  3379  007858  00                 	db	0
  3380  007859                     STR_141:
  3381  007859  2B                 	db	43
  3382  00785A  4F                 	db	79	;'O'
  3383  00785B  4B                 	db	75	;'K'
  3384  00785C  20                 	db	32
  3385  00785D  2D                 	db	45
  3386  00785E  20                 	db	32
  3387  00785F  4D                 	db	77	;'M'
  3388  007860  6F                 	db	111	;'o'
  3389  007861  64                 	db	100	;'d'
  3390  007862  65                 	db	101	;'e'
  3391  007863  20                 	db	32
  3392  007864  69                 	db	105	;'i'
  3393  007865  73                 	db	115	;'s'
  3394  007866  20                 	db	32
  3395  007867  6E                 	db	110	;'n'
  3396  007868  6F                 	db	111	;'o'
  3397  007869  77                 	db	119	;'w'
  3398  00786A  20                 	db	32
  3399  00786B  53                 	db	83	;'S'
  3400  00786C  4C                 	db	76	;'L'
  3401  00786D  43                 	db	67	;'C'
  3402  00786E  41                 	db	65	;'A'
  3403  00786F  4E                 	db	78	;'N'
  3404  007870  0D                 	db	13
  3405  007871  0A                 	db	10
  3406  007872  00                 	db	0
  3407  007873                     STR_25:
  3408  007873  2B                 	db	43
  3409  007874  4F                 	db	79	;'O'
  3410  007875  4B                 	db	75	;'K'
  3411  007876  20                 	db	32
  3412  007877  2D                 	db	45
  3413  007878  20                 	db	32
  3414  007879  4C                 	db	76	;'L'
  3415  00787A  69                 	db	105	;'i'
  3416  00787B  73                 	db	115	;'s'
  3417  00787C  74                 	db	116	;'t'
  3418  00787D  65                 	db	101	;'e'
  3419  00787E  6E                 	db	110	;'n'
  3420  00787F  20                 	db	32
  3421  007880  6F                 	db	111	;'o'
  3422  007881  6E                 	db	110	;'n'
  3423  007882  6C                 	db	108	;'l'
  3424  007883  79                 	db	121	;'y'
  3425  007884  20                 	db	32
  3426  007885  6D                 	db	109	;'m'
  3427  007886  6F                 	db	111	;'o'
  3428  007887  64                 	db	100	;'d'
  3429  007888  65                 	db	101	;'e'
  3430  007889  0D                 	db	13
  3431  00788A  0A                 	db	10
  3432  00788B  00                 	db	0
  3433  00788C                     STR_206:
  3434  00788C  54                 	db	84	;'T'
  3435  00788D  72                 	db	114	;'r'
  3436  00788E  61                 	db	97	;'a'
  3437  00788F  6E                 	db	110	;'n'
  3438  007890  73                 	db	115	;'s'
  3439  007891  6D                 	db	109	;'m'
  3440  007892  69                 	db	105	;'i'
  3441  007893  74                 	db	116	;'t'
  3442  007894  20                 	db	32
  3443  007895  45                 	db	69	;'E'
  3444  007896  72                 	db	114	;'r'
  3445  007897  72                 	db	114	;'r'
  3446  007898  6F                 	db	111	;'o'
  3447  007899  72                 	db	114	;'r'
  3448  00789A  20                 	db	32
  3449  00789B  43                 	db	67	;'C'
  3450  00789C  6F                 	db	111	;'o'
  3451  00789D  75                 	db	117	;'u'
  3452  00789E  6E                 	db	110	;'n'
  3453  00789F  74                 	db	116	;'t'
  3454  0078A0  65                 	db	101	;'e'
  3455  0078A1  72                 	db	114	;'r'
  3456  0078A2  3A                 	db	58	;':'
  3457  0078A3  20                 	db	32
  3458  0078A4  00                 	db	0
  3459  0078A5                     STR_72:
  3460  0078A5  55                 	db	85	;'U'
  3461  0078A6  6E                 	db	110	;'n'
  3462  0078A7  61                 	db	97	;'a'
  3463  0078A8  62                 	db	98	;'b'
  3464  0078A9  6C                 	db	108	;'l'
  3465  0078AA  65                 	db	101	;'e'
  3466  0078AB  20                 	db	32
  3467  0078AC  74                 	db	116	;'t'
  3468  0078AD  6F                 	db	111	;'o'
  3469  0078AE  20                 	db	32
  3470  0078AF  72                 	db	114	;'r'
  3471  0078B0  65                 	db	101	;'e'
  3472  0078B1  61                 	db	97	;'a'
  3473  0078B2  64                 	db	100	;'d'
  3474  0078B3  20                 	db	32
  3475  0078B4  72                 	db	114	;'r'
  3476  0078B5  65                 	db	101	;'e'
  3477  0078B6  67                 	db	103	;'g'
  3478  0078B7  69                 	db	105	;'i'
  3479  0078B8  73                 	db	115	;'s'
  3480  0078B9  74                 	db	116	;'t'
  3481  0078BA  65                 	db	101	;'e'
  3482  0078BB  72                 	db	114	;'r'
  3483  0078BC  20                 	db	32
  3484  0078BD  00                 	db	0
  3485  0078BE                     STR_230:
  3486  0078BE  54                 	db	84	;'T'
  3487  0078BF  58                 	db	88	;'X'
  3488  0078C0  20                 	db	32
  3489  0078C1  2D                 	db	45
  3490  0078C2  20                 	db	32
  3491  0078C3  53                 	db	83	;'S'
  3492  0078C4  65                 	db	101	;'e'
  3493  0078C5  6E                 	db	110	;'n'
  3494  0078C6  64                 	db	100	;'d'
  3495  0078C7  20                 	db	32
  3496  0078C8  43                 	db	67	;'C'
  3497  0078C9  41                 	db	65	;'A'
  3498  0078CA  4E                 	db	78	;'N'
  3499  0078CB  20                 	db	32
  3500  0078CC  66                 	db	102	;'f'
  3501  0078CD  72                 	db	114	;'r'
  3502  0078CE  61                 	db	97	;'a'
  3503  0078CF  6D                 	db	109	;'m'
  3504  0078D0  65                 	db	101	;'e'
  3505  0078D1  20                 	db	32
  3506  0078D2  2E                 	db	46
  3507  0078D3  0D                 	db	13
  3508  0078D4  0A                 	db	10
  3509  0078D5  00                 	db	0
  3510  0078D6                     STR_240:
  3511  0078D6  46                 	db	70	;'F'
  3512  0078D7  49                 	db	73	;'I'
  3513  0078D8  4C                 	db	76	;'L'
  3514  0078D9  54                 	db	84	;'T'
  3515  0078DA  45                 	db	69	;'E'
  3516  0078DB  52                 	db	82	;'R'
  3517  0078DC  20                 	db	32
  3518  0078DD  2D                 	db	45
  3519  0078DE  20                 	db	32
  3520  0078DF  53                 	db	83	;'S'
  3521  0078E0  65                 	db	101	;'e'
  3522  0078E1  74                 	db	116	;'t'
  3523  0078E2  20                 	db	32
  3524  0078E3  66                 	db	102	;'f'
  3525  0078E4  69                 	db	105	;'i'
  3526  0078E5  6C                 	db	108	;'l'
  3527  0078E6  74                 	db	116	;'t'
  3528  0078E7  65                 	db	101	;'e'
  3529  0078E8  72                 	db	114	;'r'
  3530  0078E9  20                 	db	32
  3531  0078EA  2E                 	db	46
  3532  0078EB  0D                 	db	13
  3533  0078EC  0A                 	db	10
  3534  0078ED  00                 	db	0
  3535  0078EE                     STR_51:
  3536  0078EE  2D                 	db	45
  3537  0078EF  45                 	db	69	;'E'
  3538  0078F0  52                 	db	82	;'R'
  3539  0078F1  52                 	db	82	;'R'
  3540  0078F2  4F                 	db	79	;'O'
  3541  0078F3  52                 	db	82	;'R'
  3542  0078F4  20                 	db	32
  3543  0078F5  2D                 	db	45
  3544  0078F6  20                 	db	32
  3545  0078F7  4E                 	db	78	;'N'
  3546  0078F8  65                 	db	101	;'e'
  3547  0078F9  65                 	db	101	;'e'
  3548  0078FA  64                 	db	100	;'d'
  3549  0078FB  73                 	db	115	;'s'
  3550  0078FC  20                 	db	32
  3551  0078FD  6E                 	db	110	;'n'
  3552  0078FE  6F                 	db	111	;'o'
  3553  0078FF  64                 	db	100	;'d'
  3554  007900  65                 	db	101	;'e'
  3555  007901  69                 	db	105	;'i'
  3556  007902  64                 	db	100	;'d'
  3557  007903  0D                 	db	13
  3558  007904  0A                 	db	10
  3559  007905  00                 	db	0
  3560  007906                     STR_28:
  3561  007906  2D                 	db	45
  3562  007907  45                 	db	69	;'E'
  3563  007908  52                 	db	82	;'R'
  3564  007909  52                 	db	82	;'R'
  3565  00790A  4F                 	db	79	;'O'
  3566  00790B  52                 	db	82	;'R'
  3567  00790C  20                 	db	32
  3568  00790D  2D                 	db	45
  3569  00790E  20                 	db	32
  3570  00790F  55                 	db	85	;'U'
  3571  007910  6E                 	db	110	;'n'
  3572  007911  6B                 	db	107	;'k'
  3573  007912  6E                 	db	110	;'n'
  3574  007913  6F                 	db	111	;'o'
  3575  007914  77                 	db	119	;'w'
  3576  007915  6E                 	db	110	;'n'
  3577  007916  20                 	db	32
  3578  007917  6D                 	db	109	;'m'
  3579  007918  6F                 	db	111	;'o'
  3580  007919  64                 	db	100	;'d'
  3581  00791A  65                 	db	101	;'e'
  3582  00791B  0D                 	db	13
  3583  00791C  0A                 	db	10
  3584  00791D  00                 	db	0
  3585  00791E                     STR_86:
  3586  00791E  2D                 	db	45
  3587  00791F  45                 	db	69	;'E'
  3588  007920  52                 	db	82	;'R'
  3589  007921  52                 	db	82	;'R'
  3590  007922  4F                 	db	79	;'O'
  3591  007923  52                 	db	82	;'R'
  3592  007924  20                 	db	32
  3593  007925  2D                 	db	45
  3594  007926  20                 	db	32
  3595  007927  4E                 	db	78	;'N'
  3596  007928  65                 	db	101	;'e'
  3597  007929  65                 	db	101	;'e'
  3598  00792A  64                 	db	100	;'d'
  3599  00792B  20                 	db	32
  3600  00792C  61                 	db	97	;'a'
  3601  00792D  20                 	db	32
  3602  00792E  76                 	db	118	;'v'
  3603  00792F  61                 	db	97	;'a'
  3604  007930  6C                 	db	108	;'l'
  3605  007931  75                 	db	117	;'u'
  3606  007932  65                 	db	101	;'e'
  3607  007933  0D                 	db	13
  3608  007934  0A                 	db	10
  3609  007935  00                 	db	0
  3610  007936                     STR_213:
  3611  007936  52                 	db	82	;'R'
  3612  007937  65                 	db	101	;'e'
  3613  007938  63                 	db	99	;'c'
  3614  007939  65                 	db	101	;'e'
  3615  00793A  69                 	db	105	;'i'
  3616  00793B  76                 	db	118	;'v'
  3617  00793C  65                 	db	101	;'e'
  3618  00793D  20                 	db	32
  3619  00793E  45                 	db	69	;'E'
  3620  00793F  72                 	db	114	;'r'
  3621  007940  72                 	db	114	;'r'
  3622  007941  6F                 	db	111	;'o'
  3623  007942  72                 	db	114	;'r'
  3624  007943  20                 	db	32
  3625  007944  43                 	db	67	;'C'
  3626  007945  6F                 	db	111	;'o'
  3627  007946  75                 	db	117	;'u'
  3628  007947  6E                 	db	110	;'n'
  3629  007948  74                 	db	116	;'t'
  3630  007949  65                 	db	101	;'e'
  3631  00794A  72                 	db	114	;'r'
  3632  00794B  3A                 	db	58	;':'
  3633  00794C  20                 	db	32
  3634  00794D  00                 	db	0
  3635  00794E                     STR_198:
  3636  00794E  55                 	db	85	;'U'
  3637  00794F  41                 	db	65	;'A'
  3638  007950  52                 	db	82	;'R'
  3639  007951  54                 	db	84	;'T'
  3640  007952  20                 	db	32
  3641  007953  52                 	db	82	;'R'
  3642  007954  65                 	db	101	;'e'
  3643  007955  63                 	db	99	;'c'
  3644  007956  65                 	db	101	;'e'
  3645  007957  69                 	db	105	;'i'
  3646  007958  76                 	db	118	;'v'
  3647  007959  65                 	db	101	;'e'
  3648  00795A  20                 	db	32
  3649  00795B  6F                 	db	111	;'o'
  3650  00795C  76                 	db	118	;'v'
  3651  00795D  65                 	db	101	;'e'
  3652  00795E  72                 	db	114	;'r'
  3653  00795F  72                 	db	114	;'r'
  3654  007960  75                 	db	117	;'u'
  3655  007961  6E                 	db	110	;'n'
  3656  007962  73                 	db	115	;'s'
  3657  007963  3A                 	db	58	;':'
  3658  007964  20                 	db	32
  3659  007965  00                 	db	0
  3660  007966                     STR_194:
  3661  007966  43                 	db	67	;'C'
  3662  007967  41                 	db	65	;'A'
  3663  007968  4E                 	db	78	;'N'
  3664  007969  20                 	db	32
  3665  00796A  54                 	db	84	;'T'
  3666  00796B  72                 	db	114	;'r'
  3667  00796C  61                 	db	97	;'a'
  3668  00796D  6E                 	db	110	;'n'
  3669  00796E  73                 	db	115	;'s'
  3670  00796F  6D                 	db	109	;'m'
  3671  007970  69                 	db	105	;'i'
  3672  007971  74                 	db	116	;'t'
  3673  007972  20                 	db	32
  3674  007973  6F                 	db	111	;'o'
  3675  007974  76                 	db	118	;'v'
  3676  007975  65                 	db	101	;'e'
  3677  007976  72                 	db	114	;'r'
  3678  007977  72                 	db	114	;'r'
  3679  007978  75                 	db	117	;'u'
  3680  007979  6E                 	db	110	;'n'
  3681  00797A  73                 	db	115	;'s'
  3682  00797B  3A                 	db	58	;':'
  3683  00797C  20                 	db	32
  3684  00797D  00                 	db	0
  3685  00797E                     STR_232:
  3686  00797E  52                 	db	82	;'R'
  3687  00797F  58                 	db	88	;'X'
  3688  007980  20                 	db	32
  3689  007981  2D                 	db	45
  3690  007982  20                 	db	32
  3691  007983  52                 	db	82	;'R'
  3692  007984  65                 	db	101	;'e'
  3693  007985  61                 	db	97	;'a'
  3694  007986  64                 	db	100	;'d'
  3695  007987  20                 	db	32
  3696  007988  43                 	db	67	;'C'
  3697  007989  41                 	db	65	;'A'
  3698  00798A  4E                 	db	78	;'N'
  3699  00798B  20                 	db	32
  3700  00798C  66                 	db	102	;'f'
  3701  00798D  72                 	db	114	;'r'
  3702  00798E  61                 	db	97	;'a'
  3703  00798F  6D                 	db	109	;'m'
  3704  007990  65                 	db	101	;'e'
  3705  007991  2E                 	db	46
  3706  007992  0D                 	db	13
  3707  007993  0A                 	db	10
  3708  007994  00                 	db	0
  3709  007995                     STR_190:
  3710  007995  43                 	db	67	;'C'
  3711  007996  41                 	db	65	;'A'
  3712  007997  4E                 	db	78	;'N'
  3713  007998  20                 	db	32
  3714  007999  52                 	db	82	;'R'
  3715  00799A  65                 	db	101	;'e'
  3716  00799B  63                 	db	99	;'c'
  3717  00799C  65                 	db	101	;'e'
  3718  00799D  69                 	db	105	;'i'
  3719  00799E  76                 	db	118	;'v'
  3720  00799F  65                 	db	101	;'e'
  3721  0079A0  20                 	db	32
  3722  0079A1  6F                 	db	111	;'o'
  3723  0079A2  76                 	db	118	;'v'
  3724  0079A3  65                 	db	101	;'e'
  3725  0079A4  72                 	db	114	;'r'
  3726  0079A5  72                 	db	114	;'r'
  3727  0079A6  75                 	db	117	;'u'
  3728  0079A7  6E                 	db	110	;'n'
  3729  0079A8  73                 	db	115	;'s'
  3730  0079A9  3A                 	db	58	;':'
  3731  0079AA  20                 	db	32
  3732  0079AB  00                 	db	0
  3733  0079AC                     STR_275:
  3734  0079AC  55                 	db	85	;'U'
  3735  0079AD  6E                 	db	110	;'n'
  3736  0079AE  6B                 	db	107	;'k'
  3737  0079AF  6E                 	db	110	;'n'
  3738  0079B0  6F                 	db	111	;'o'
  3739  0079B1  77                 	db	119	;'w'
  3740  0079B2  6E                 	db	110	;'n'
  3741  0079B3  20                 	db	32
  3742  0079B4  28                 	db	40
  3743  0079B5  56                 	db	86	;'V'
  3744  0079B6  65                 	db	101	;'e'
  3745  0079B7  72                 	db	114	;'r'
  3746  0079B8  62                 	db	98	;'b'
  3747  0079B9  6F                 	db	111	;'o'
  3748  0079BA  73                 	db	115	;'s'
  3749  0079BB  65                 	db	101	;'e'
  3750  0079BC  20                 	db	32
  3751  0079BD  75                 	db	117	;'u'
  3752  0079BE  73                 	db	115	;'s'
  3753  0079BF  65                 	db	101	;'e'
  3754  0079C0  64                 	db	100	;'d'
  3755  0079C1  29                 	db	41
  3756  0079C2  00                 	db	0
  3757  0079C3                     STR_24:
  3758  0079C3  2B                 	db	43
  3759  0079C4  4F                 	db	79	;'O'
  3760  0079C5  4B                 	db	75	;'K'
  3761  0079C6  20                 	db	32
  3762  0079C7  2D                 	db	45
  3763  0079C8  20                 	db	32
  3764  0079C9  4C                 	db	76	;'L'
  3765  0079CA  6F                 	db	111	;'o'
  3766  0079CB  6F                 	db	111	;'o'
  3767  0079CC  70                 	db	112	;'p'
  3768  0079CD  62                 	db	98	;'b'
  3769  0079CE  61                 	db	97	;'a'
  3770  0079CF  63                 	db	99	;'c'
  3771  0079D0  6B                 	db	107	;'k'
  3772  0079D1  20                 	db	32
  3773  0079D2  6D                 	db	109	;'m'
  3774  0079D3  6F                 	db	111	;'o'
  3775  0079D4  64                 	db	100	;'d'
  3776  0079D5  65                 	db	101	;'e'
  3777  0079D6  0D                 	db	13
  3778  0079D7  0A                 	db	10
  3779  0079D8  00                 	db	0
  3780  0079D9                     STR_182:
  3781  0079D9  52                 	db	82	;'R'
  3782  0079DA  65                 	db	101	;'e'
  3783  0079DB  63                 	db	99	;'c'
  3784  0079DC  65                 	db	101	;'e'
  3785  0079DD  69                 	db	105	;'i'
  3786  0079DE  76                 	db	118	;'v'
  3787  0079DF  65                 	db	101	;'e'
  3788  0079E0  64                 	db	100	;'d'
  3789  0079E1  20                 	db	32
  3790  0079E2  43                 	db	67	;'C'
  3791  0079E3  41                 	db	65	;'A'
  3792  0079E4  4E                 	db	78	;'N'
  3793  0079E5  20                 	db	32
  3794  0079E6  66                 	db	102	;'f'
  3795  0079E7  72                 	db	114	;'r'
  3796  0079E8  61                 	db	97	;'a'
  3797  0079E9  6D                 	db	109	;'m'
  3798  0079EA  65                 	db	101	;'e'
  3799  0079EB  73                 	db	115	;'s'
  3800  0079EC  3A                 	db	58	;':'
  3801  0079ED  20                 	db	32
  3802  0079EE  00                 	db	0
  3803  0079EF                     STR_186:
  3804  0079EF  52                 	db	82	;'R'
  3805  0079F0  65                 	db	101	;'e'
  3806  0079F1  63                 	db	99	;'c'
  3807  0079F2  65                 	db	101	;'e'
  3808  0079F3  69                 	db	105	;'i'
  3809  0079F4  76                 	db	118	;'v'
  3810  0079F5  65                 	db	101	;'e'
  3811  0079F6  64                 	db	100	;'d'
  3812  0079F7  20                 	db	32
  3813  0079F8  43                 	db	67	;'C'
  3814  0079F9  41                 	db	65	;'A'
  3815  0079FA  4E                 	db	78	;'N'
  3816  0079FB  20                 	db	32
  3817  0079FC  62                 	db	98	;'b'
  3818  0079FD  79                 	db	121	;'y'
  3819  0079FE  74                 	db	116	;'t'
  3820  0079FF  65                 	db	101	;'e'
  3821  007A00  73                 	db	115	;'s'
  3822  007A01  3A                 	db	58	;':'
  3823  007A02  20                 	db	32
  3824  007A03  00                 	db	0
  3825  007A04                     STR_242:
  3826  007A04  4D                 	db	77	;'M'
  3827  007A05  41                 	db	65	;'A'
  3828  007A06  53                 	db	83	;'S'
  3829  007A07  4B                 	db	75	;'K'
  3830  007A08  20                 	db	32
  3831  007A09  2D                 	db	45
  3832  007A0A  20                 	db	32
  3833  007A0B  53                 	db	83	;'S'
  3834  007A0C  65                 	db	101	;'e'
  3835  007A0D  74                 	db	116	;'t'
  3836  007A0E  20                 	db	32
  3837  007A0F  6D                 	db	109	;'m'
  3838  007A10  61                 	db	97	;'a'
  3839  007A11  73                 	db	115	;'s'
  3840  007A12  6B                 	db	107	;'k'
  3841  007A13  20                 	db	32
  3842  007A14  2E                 	db	46
  3843  007A15  0D                 	db	13
  3844  007A16  0A                 	db	10
  3845  007A17  00                 	db	0
  3846  007A18                     STR_147:
  3847  007A18  4A                 	db	74	;'J'
  3848  007A19  46                 	db	70	;'F'
  3849  007A1A  72                 	db	114	;'r'
  3850  007A1B  61                 	db	97	;'a'
  3851  007A1C  6E                 	db	110	;'n'
  3852  007A1D  6B                 	db	107	;'k'
  3853  007A1E  66                 	db	102	;'f'
  3854  007A1F  75                 	db	117	;'u'
  3855  007A20  72                 	db	114	;'r'
  3856  007A21  74                 	db	116	;'t'
  3857  007A22  20                 	db	32
  3858  007A23  52                 	db	82	;'R'
  3859  007A24  53                 	db	83	;'S'
  3860  007A25  2D                 	db	45
  3861  007A26  32                 	db	50	;'2'
  3862  007A27  33                 	db	51	;'3'
  3863  007A28  32                 	db	50	;'2'
  3864  007A29  0D                 	db	13
  3865  007A2A  0A                 	db	10
  3866  007A2B  00                 	db	0
  3867  007A2C                     STR_26:
  3868  007A2C  2B                 	db	43
  3869  007A2D  4F                 	db	79	;'O'
  3870  007A2E  4B                 	db	75	;'K'
  3871  007A2F  20                 	db	32
  3872  007A30  2D                 	db	45
  3873  007A31  20                 	db	32
  3874  007A32  43                 	db	67	;'C'
  3875  007A33  6C                 	db	108	;'l'
  3876  007A34  6F                 	db	111	;'o'
  3877  007A35  73                 	db	115	;'s'
  3878  007A36  65                 	db	101	;'e'
  3879  007A37  64                 	db	100	;'d'
  3880  007A38  20                 	db	32
  3881  007A39  6D                 	db	109	;'m'
  3882  007A3A  6F                 	db	111	;'o'
  3883  007A3B  64                 	db	100	;'d'
  3884  007A3C  65                 	db	101	;'e'
  3885  007A3D  0D                 	db	13
  3886  007A3E  0A                 	db	10
  3887  007A3F  00                 	db	0
  3888  007A40                     STR_21:
  3889  007A40  2B                 	db	43
  3890  007A41  4F                 	db	79	;'O'
  3891  007A42  4B                 	db	75	;'K'
  3892  007A43  20                 	db	32
  3893  007A44  2D                 	db	45
  3894  007A45  20                 	db	32
  3895  007A46  4E                 	db	78	;'N'
  3896  007A47  6F                 	db	111	;'o'
  3897  007A48  72                 	db	114	;'r'
  3898  007A49  6D                 	db	109	;'m'
  3899  007A4A  61                 	db	97	;'a'
  3900  007A4B  6C                 	db	108	;'l'
  3901  007A4C  20                 	db	32
  3902  007A4D  6D                 	db	109	;'m'
  3903  007A4E  6F                 	db	111	;'o'
  3904  007A4F  64                 	db	100	;'d'
  3905  007A50  65                 	db	101	;'e'
  3906  007A51  0D                 	db	13
  3907  007A52  0A                 	db	10
  3908  007A53  00                 	db	0
  3909  007A54                     STR_22:
  3910  007A54  2B                 	db	43
  3911  007A55  4F                 	db	79	;'O'
  3912  007A56  4B                 	db	75	;'K'
  3913  007A57  20                 	db	32
  3914  007A58  2D                 	db	45
  3915  007A59  20                 	db	32
  3916  007A5A  53                 	db	83	;'S'
  3917  007A5B  69                 	db	105	;'i'
  3918  007A5C  6C                 	db	108	;'l'
  3919  007A5D  65                 	db	101	;'e'
  3920  007A5E  6E                 	db	110	;'n'
  3921  007A5F  74                 	db	116	;'t'
  3922  007A60  20                 	db	32
  3923  007A61  6D                 	db	109	;'m'
  3924  007A62  6F                 	db	111	;'o'
  3925  007A63  64                 	db	100	;'d'
  3926  007A64  65                 	db	101	;'e'
  3927  007A65  0D                 	db	13
  3928  007A66  0A                 	db	10
  3929  007A67  00                 	db	0
  3930  007A68                     STR_96:
  3931  007A68  49                 	db	73	;'I'
  3932  007A69  6E                 	db	110	;'n'
  3933  007A6A  66                 	db	102	;'f'
  3934  007A6B  6F                 	db	111	;'o'
  3935  007A6C  20                 	db	32
  3936  007A6D  66                 	db	102	;'f'
  3937  007A6E  6F                 	db	111	;'o'
  3938  007A6F  72                 	db	114	;'r'
  3939  007A70  20                 	db	32
  3940  007A71  6E                 	db	110	;'n'
  3941  007A72  6F                 	db	111	;'o'
  3942  007A73  64                 	db	100	;'d'
  3943  007A74  65                 	db	101	;'e'
  3944  007A75  20                 	db	32
  3945  007A76  69                 	db	105	;'i'
  3946  007A77  64                 	db	100	;'d'
  3947  007A78  20                 	db	32
  3948  007A79  3D                 	db	61	;'='
  3949  007A7A  20                 	db	32
  3950  007A7B  00                 	db	0
  3951  007A7C                     STR_264:
  3952  007A7C  46                 	db	70	;'F'
  3953  007A7D  69                 	db	105	;'i'
  3954  007A7E  72                 	db	114	;'r'
  3955  007A7F  6D                 	db	109	;'m'
  3956  007A80  77                 	db	119	;'w'
  3957  007A81  61                 	db	97	;'a'
  3958  007A82  72                 	db	114	;'r'
  3959  007A83  65                 	db	101	;'e'
  3960  007A84  20                 	db	32
  3961  007A85  76                 	db	118	;'v'
  3962  007A86  65                 	db	101	;'e'
  3963  007A87  72                 	db	114	;'r'
  3964  007A88  73                 	db	115	;'s'
  3965  007A89  69                 	db	105	;'i'
  3966  007A8A  6F                 	db	111	;'o'
  3967  007A8B  6E                 	db	110	;'n'
  3968  007A8C  20                 	db	32
  3969  007A8D  3D                 	db	61	;'='
  3970  007A8E  20                 	db	32
  3971  007A8F  00                 	db	0
  3972  007A90                     STR_23:
  3973  007A90  2B                 	db	43
  3974  007A91  4F                 	db	79	;'O'
  3975  007A92  4B                 	db	75	;'K'
  3976  007A93  20                 	db	32
  3977  007A94  2D                 	db	45
  3978  007A95  20                 	db	32
  3979  007A96  53                 	db	83	;'S'
  3980  007A97  6C                 	db	108	;'l'
  3981  007A98  65                 	db	101	;'e'
  3982  007A99  65                 	db	101	;'e'
  3983  007A9A  70                 	db	112	;'p'
  3984  007A9B  20                 	db	32
  3985  007A9C  6D                 	db	109	;'m'
  3986  007A9D  6F                 	db	111	;'o'
  3987  007A9E  64                 	db	100	;'d'
  3988  007A9F  65                 	db	101	;'e'
  3989  007AA0  0D                 	db	13
  3990  007AA1  0A                 	db	10
  3991  007AA2  00                 	db	0
  3992  007AA3                     STR_27:
  3993  007AA3  2B                 	db	43
  3994  007AA4  4F                 	db	79	;'O'
  3995  007AA5  4B                 	db	75	;'K'
  3996  007AA6  20                 	db	32
  3997  007AA7  2D                 	db	45
  3998  007AA8  20                 	db	32
  3999  007AA9  42                 	db	66	;'B'
  4000  007AAA  69                 	db	105	;'i'
  4001  007AAB  74                 	db	116	;'t'
  4002  007AAC  73                 	db	115	;'s'
  4003  007AAD  20                 	db	32
  4004  007AAE  6D                 	db	109	;'m'
  4005  007AAF  6F                 	db	111	;'o'
  4006  007AB0  64                 	db	100	;'d'
  4007  007AB1  65                 	db	101	;'e'
  4008  007AB2  0D                 	db	13
  4009  007AB3  0A                 	db	10
  4010  007AB4  00                 	db	0
  4011  007AB5                     STR_40:
  4012  007AB5  2B                 	db	43
  4013  007AB6  4F                 	db	79	;'O'
  4014  007AB7  4B                 	db	75	;'K'
  4015  007AB8  20                 	db	32
  4016  007AB9  2D                 	db	45
  4017  007ABA  20                 	db	32
  4018  007ABB  6E                 	db	110	;'n'
  4019  007ABC  6F                 	db	111	;'o'
  4020  007ABD  20                 	db	32
  4021  007ABE  65                 	db	101	;'e'
  4022  007ABF  76                 	db	118	;'v'
  4023  007AC0  65                 	db	101	;'e'
  4024  007AC1  6E                 	db	110	;'n'
  4025  007AC2  74                 	db	116	;'t'
  4026  007AC3  73                 	db	115	;'s'
  4027  007AC4  0D                 	db	13
  4028  007AC5  0A                 	db	10
  4029  007AC6  00                 	db	0
  4030  007AC7                     STR_174:
  4031  007AC7  53                 	db	83	;'S'
  4032  007AC8  65                 	db	101	;'e'
  4033  007AC9  6E                 	db	110	;'n'
  4034  007ACA  74                 	db	116	;'t'
  4035  007ACB  20                 	db	32
  4036  007ACC  43                 	db	67	;'C'
  4037  007ACD  41                 	db	65	;'A'
  4038  007ACE  4E                 	db	78	;'N'
  4039  007ACF  20                 	db	32
  4040  007AD0  66                 	db	102	;'f'
  4041  007AD1  72                 	db	114	;'r'
  4042  007AD2  61                 	db	97	;'a'
  4043  007AD3  6D                 	db	109	;'m'
  4044  007AD4  65                 	db	101	;'e'
  4045  007AD5  73                 	db	115	;'s'
  4046  007AD6  3A                 	db	58	;':'
  4047  007AD7  20                 	db	32
  4048  007AD8  00                 	db	0
  4049  007AD9                     STR_277:
  4050  007AD9  30                 	db	48	;'0'
  4051  007ADA  31                 	db	49	;'1'
  4052  007ADB  32                 	db	50	;'2'
  4053  007ADC  33                 	db	51	;'3'
  4054  007ADD  34                 	db	52	;'4'
  4055  007ADE  35                 	db	53	;'5'
  4056  007ADF  36                 	db	54	;'6'
  4057  007AE0  37                 	db	55	;'7'
  4058  007AE1  38                 	db	56	;'8'
  4059  007AE2  39                 	db	57	;'9'
  4060  007AE3  41                 	db	65	;'A'
  4061  007AE4  42                 	db	66	;'B'
  4062  007AE5  43                 	db	67	;'C'
  4063  007AE6  44                 	db	68	;'D'
  4064  007AE7  45                 	db	69	;'E'
  4065  007AE8  46                 	db	70	;'F'
  4066  007AE9  00                 	db	0
  4067  007AEA                     STR_278:
  4068  007AEA  30                 	db	48	;'0'
  4069  007AEB  31                 	db	49	;'1'
  4070  007AEC  32                 	db	50	;'2'
  4071  007AED  33                 	db	51	;'3'
  4072  007AEE  34                 	db	52	;'4'
  4073  007AEF  35                 	db	53	;'5'
  4074  007AF0  36                 	db	54	;'6'
  4075  007AF1  37                 	db	55	;'7'
  4076  007AF2  38                 	db	56	;'8'
  4077  007AF3  39                 	db	57	;'9'
  4078  007AF4  61                 	db	97	;'a'
  4079  007AF5  62                 	db	98	;'b'
  4080  007AF6  63                 	db	99	;'c'
  4081  007AF7  64                 	db	100	;'d'
  4082  007AF8  65                 	db	101	;'e'
  4083  007AF9  66                 	db	102	;'f'
  4084  007AFA  00                 	db	0
  4085  007AFB                     STR_178:
  4086  007AFB  53                 	db	83	;'S'
  4087  007AFC  65                 	db	101	;'e'
  4088  007AFD  6E                 	db	110	;'n'
  4089  007AFE  74                 	db	116	;'t'
  4090  007AFF  20                 	db	32
  4091  007B00  43                 	db	67	;'C'
  4092  007B01  41                 	db	65	;'A'
  4093  007B02  4E                 	db	78	;'N'
  4094  007B03  20                 	db	32
  4095  007B04  62                 	db	98	;'b'
  4096  007B05  79                 	db	121	;'y'
  4097  007B06  74                 	db	116	;'t'
  4098  007B07  65                 	db	101	;'e'
  4099  007B08  73                 	db	115	;'s'
  4100  007B09  3A                 	db	58	;':'
  4101  007B0A  20                 	db	32
  4102  007B0B  00                 	db	0
  4103  007B0C                     STR_69:
  4104  007B0C  2D                 	db	45
  4105  007B0D  45                 	db	69	;'E'
  4106  007B0E  52                 	db	82	;'R'
  4107  007B0F  52                 	db	82	;'R'
  4108  007B10  4F                 	db	79	;'O'
  4109  007B11  52                 	db	82	;'R'
  4110  007B12  20                 	db	32
  4111  007B13  2D                 	db	45
  4112  007B14  20                 	db	32
  4113  007B15  6E                 	db	110	;'n'
  4114  007B16  6F                 	db	111	;'o'
  4115  007B17  64                 	db	100	;'d'
  4116  007B18  65                 	db	101	;'e'
  4117  007B19  69                 	db	105	;'i'
  4118  007B1A  64                 	db	100	;'d'
  4119  007B1B  3D                 	db	61	;'='
  4120  007B1C  00                 	db	0
  4121  007B1D                     STR_256:
  4122  007B1D  20                 	db	32
  4123  007B1E  6E                 	db	110	;'n'
  4124  007B1F  6F                 	db	111	;'o'
  4125  007B20  64                 	db	100	;'d'
  4126  007B21  65                 	db	101	;'e'
  4127  007B22  73                 	db	115	;'s'
  4128  007B23  20                 	db	32
  4129  007B24  66                 	db	102	;'f'
  4130  007B25  6F                 	db	111	;'o'
  4131  007B26  75                 	db	117	;'u'
  4132  007B27  6E                 	db	110	;'n'
  4133  007B28  64                 	db	100	;'d'
  4134  007B29  0D                 	db	13
  4135  007B2A  0A                 	db	10
  4136  007B2B  00                 	db	0
  4137  007B2C                     STR_58:
  4138  007B2C  56                 	db	86	;'V'
  4139  007B2D  61                 	db	97	;'a'
  4140  007B2E  6C                 	db	108	;'l'
  4141  007B2F  75                 	db	117	;'u'
  4142  007B30  65                 	db	101	;'e'
  4143  007B31  20                 	db	32
  4144  007B32  66                 	db	102	;'f'
  4145  007B33  6F                 	db	111	;'o'
  4146  007B34  72                 	db	114	;'r'
  4147  007B35  20                 	db	32
  4148  007B36  72                 	db	114	;'r'
  4149  007B37  65                 	db	101	;'e'
  4150  007B38  67                 	db	103	;'g'
  4151  007B39  20                 	db	32
  4152  007B3A  00                 	db	0
  4153  007B3B                     STR_262:
  4154  007B3B  4D                 	db	77	;'M'
  4155  007B3C  44                 	db	68	;'D'
  4156  007B3D  46                 	db	70	;'F'
  4157  007B3E  20                 	db	32
  4158  007B3F  3D                 	db	61	;'='
  4159  007B40  20                 	db	32
  4160  007B41  68                 	db	104	;'h'
  4161  007B42  74                 	db	116	;'t'
  4162  007B43  74                 	db	116	;'t'
  4163  007B44  70                 	db	112	;'p'
  4164  007B45  3A                 	db	58	;':'
  4165  007B46  2F                 	db	47
  4166  007B47  2F                 	db	47
  4167  007B48  00                 	db	0
  4168  007B49                     STR_55:
  4169  007B49  2B                 	db	43
  4170  007B4A  4F                 	db	79	;'O'
  4171  007B4B  4B                 	db	75	;'K'
  4172  007B4C  20                 	db	32
  4173  007B4D  2D                 	db	45
  4174  007B4E  20                 	db	32
  4175  007B4F  6E                 	db	110	;'n'
  4176  007B50  6F                 	db	111	;'o'
  4177  007B51  64                 	db	100	;'d'
  4178  007B52  65                 	db	101	;'e'
  4179  007B53  69                 	db	105	;'i'
  4180  007B54  64                 	db	100	;'d'
  4181  007B55  3D                 	db	61	;'='
  4182  007B56  00                 	db	0
  4183  007B57                     STR_272:
  4184  007B57  56                 	db	86	;'V'
  4185  007B58  53                 	db	83	;'S'
  4186  007B59  43                 	db	67	;'C'
  4187  007B5A  50                 	db	80	;'P'
  4188  007B5B  20                 	db	32
  4189  007B5C  44                 	db	68	;'D'
  4190  007B5D  72                 	db	114	;'r'
  4191  007B5E  69                 	db	105	;'i'
  4192  007B5F  76                 	db	118	;'v'
  4193  007B60  65                 	db	101	;'e'
  4194  007B61  72                 	db	114	;'r'
  4195  007B62  00                 	db	0
  4196  007B63                     STR_132:
  4197  007B63  52                 	db	82	;'R'
  4198  007B64  57                 	db	87	;'W'
  4199  007B65  54                 	db	84	;'T'
  4200  007B66  49                 	db	73	;'I'
  4201  007B67  4D                 	db	77	;'M'
  4202  007B68  45                 	db	69	;'E'
  4203  007B69  4F                 	db	79	;'O'
  4204  007B6A  55                 	db	85	;'U'
  4205  007B6B  54                 	db	84	;'T'
  4206  007B6C  20                 	db	32
  4207  007B6D  00                 	db	0
  4208  007B6E                     STR_172:
  4209  007B6E  2C                 	db	44
  4210  007B6F  44                 	db	68	;'D'
  4211  007B70  61                 	db	97	;'a'
  4212  007B71  74                 	db	116	;'t'
  4213  007B72  61                 	db	97	;'a'
  4214  007B73  3D                 	db	61	;'='
  4215  007B74  6E                 	db	110	;'n'
  4216  007B75  6F                 	db	111	;'o'
  4217  007B76  6E                 	db	110	;'n'
  4218  007B77  65                 	db	101	;'e'
  4219  007B78  00                 	db	0
  4220  007B79                     STR_56:
  4221  007B79  30                 	db	48	;'0'
  4222  007B7A  78                 	db	120	;'x'
  4223  007B7B  25                 	db	37
  4224  007B7C  30                 	db	48	;'0'
  4225  007B7D  32                 	db	50	;'2'
  4226  007B7E  58                 	db	88	;'X'
  4227  007B7F  20                 	db	32
  4228  007B80  2D                 	db	45
  4229  007B81  20                 	db	32
  4230  007B82  00                 	db	0
  4231  007B83                     STR_268:
  4232  007B83  56                 	db	86	;'V'
  4233  007B84  65                 	db	101	;'e'
  4234  007B85  72                 	db	114	;'r'
  4235  007B86  73                 	db	115	;'s'
  4236  007B87  69                 	db	105	;'i'
  4237  007B88  6F                 	db	111	;'o'
  4238  007B89  6E                 	db	110	;'n'
  4239  007B8A  3A                 	db	58	;':'
  4240  007B8B  20                 	db	32
  4241  007B8C  00                 	db	0
  4242  007B8D                     STR_274:
  4243  007B8D  56                 	db	86	;'V'
  4244  007B8E  53                 	db	83	;'S'
  4245  007B8F  43                 	db	67	;'C'
  4246  007B90  50                 	db	80	;'P'
  4247  007B91  20                 	db	32
  4248  007B92  4E                 	db	78	;'N'
  4249  007B93  6F                 	db	111	;'o'
  4250  007B94  64                 	db	100	;'d'
  4251  007B95  65                 	db	101	;'e'
  4252  007B96  00                 	db	0
  4253  007B97                     STR_273:
  4254  007B97  53                 	db	83	;'S'
  4255  007B98  4C                 	db	76	;'L'
  4256  007B99  20                 	db	32
  4257  007B9A  44                 	db	68	;'D'
  4258  007B9B  72                 	db	114	;'r'
  4259  007B9C  69                 	db	105	;'i'
  4260  007B9D  76                 	db	118	;'v'
  4261  007B9E  65                 	db	101	;'e'
  4262  007B9F  72                 	db	114	;'r'
  4263  007BA0  00                 	db	0
  4264  007BA1                     STR_134:
  4265  007BA1  53                 	db	83	;'S'
  4266  007BA2  54                 	db	84	;'T'
  4267  007BA3  41                 	db	65	;'A'
  4268  007BA4  52                 	db	82	;'R'
  4269  007BA5  54                 	db	84	;'T'
  4270  007BA6  49                 	db	73	;'I'
  4271  007BA7  46                 	db	70	;'F'
  4272  007BA8  20                 	db	32
  4273  007BA9  00                 	db	0
  4274  007BAA                     STR_162:
  4275  007BAA  2C                 	db	44
  4276  007BAB  6E                 	db	110	;'n'
  4277  007BAC  6F                 	db	111	;'o'
  4278  007BAD  64                 	db	100	;'d'
  4279  007BAE  65                 	db	101	;'e'
  4280  007BAF  69                 	db	105	;'i'
  4281  007BB0  64                 	db	100	;'d'
  4282  007BB1  3D                 	db	61	;'='
  4283  007BB2  00                 	db	0
  4284  007BB3                     STR_14:
  4285  007BB3  4C                 	db	76	;'L'
  4286  007BB4  4F                 	db	79	;'O'
  4287  007BB5  4F                 	db	79	;'O'
  4288  007BB6  50                 	db	80	;'P'
  4289  007BB7  42                 	db	66	;'B'
  4290  007BB8  41                 	db	65	;'A'
  4291  007BB9  43                 	db	67	;'C'
  4292  007BBA  4B                 	db	75	;'K'
  4293  007BBB  00                 	db	0
  4294  007BBC                     STR_148:
  4295  007BBC  56                 	db	86	;'V'
  4296  007BBD  31                 	db	49	;'1'
  4297  007BBE  30                 	db	48	;'0'
  4298  007BBF  31                 	db	49	;'1'
  4299  007BC0  31                 	db	49	;'1'
  4300  007BC1  0D                 	db	13
  4301  007BC2  0A                 	db	10
  4302  007BC3  00                 	db	0
  4303  007BC4                     STR_149:
  4304  007BC4  4E                 	db	78	;'N'
  4305  007BC5  31                 	db	49	;'1'
  4306  007BC6  39                 	db	57	;'9'
  4307  007BC7  37                 	db	55	;'7'
  4308  007BC8  37                 	db	55	;'7'
  4309  007BC9  0D                 	db	13
  4310  007BCA  0A                 	db	10
  4311  007BCB  00                 	db	0
  4312  007BCC                     STR_89:
  4313  007BCC  30                 	db	48	;'0'
  4314  007BCD  78                 	db	120	;'x'
  4315  007BCE  25                 	db	37
  4316  007BCF  30                 	db	48	;'0'
  4317  007BD0  32                 	db	50	;'2'
  4318  007BD1  58                 	db	88	;'X'
  4319  007BD2  0A                 	db	10
  4320  007BD3  00                 	db	0
  4321  007BD4                     STR_257:
  4322  007BD4  47                 	db	71	;'G'
  4323  007BD5  55                 	db	85	;'U'
  4324  007BD6  49                 	db	73	;'I'
  4325  007BD7  44                 	db	68	;'D'
  4326  007BD8  20                 	db	32
  4327  007BD9  3D                 	db	61	;'='
  4328  007BDA  20                 	db	32
  4329  007BDB  00                 	db	0
  4330  007BDC                     STR_142:
  4331  007BDC  46                 	db	70	;'F'
  4332  007BDD  49                 	db	73	;'I'
  4333  007BDE  4C                 	db	76	;'L'
  4334  007BDF  54                 	db	84	;'T'
  4335  007BE0  45                 	db	69	;'E'
  4336  007BE1  52                 	db	82	;'R'
  4337  007BE2  20                 	db	32
  4338  007BE3  00                 	db	0
  4339  007BE4                     STR_156:
  4340  007BE4  2C                 	db	44
  4341  007BE5  63                 	db	99	;'c'
  4342  007BE6  6C                 	db	108	;'l'
  4343  007BE7  61                 	db	97	;'a'
  4344  007BE8  73                 	db	115	;'s'
  4345  007BE9  73                 	db	115	;'s'
  4346  007BEA  3D                 	db	61	;'='
  4347  007BEB  00                 	db	0
  4348  007BEC                     STR_136:
  4349  007BEC  56                 	db	86	;'V'
  4350  007BED  45                 	db	69	;'E'
  4351  007BEE  52                 	db	82	;'R'
  4352  007BEF  42                 	db	66	;'B'
  4353  007BF0  4F                 	db	79	;'O'
  4354  007BF1  53                 	db	83	;'S'
  4355  007BF2  45                 	db	69	;'E'
  4356  007BF3  00                 	db	0
  4357  007BF4                     STR_130:
  4358  007BF4  44                 	db	68	;'D'
  4359  007BF5  45                 	db	69	;'E'
  4360  007BF6  43                 	db	67	;'C'
  4361  007BF7  49                 	db	73	;'I'
  4362  007BF8  4D                 	db	77	;'M'
  4363  007BF9  41                 	db	65	;'A'
  4364  007BFA  4C                 	db	76	;'L'
  4365  007BFB  00                 	db	0
  4366  007BFC                     STR_18:
  4367  007BFC  56                 	db	86	;'V'
  4368  007BFD  45                 	db	69	;'E'
  4369  007BFE  52                 	db	82	;'R'
  4370  007BFF  53                 	db	83	;'S'
  4371  007C00  49                 	db	73	;'I'
  4372  007C01  4F                 	db	79	;'O'
  4373  007C02  4E                 	db	78	;'N'
  4374  007C03  00                 	db	0
  4375  007C04                     STR_191:
  4376  007C04  30                 	db	48	;'0'
  4377  007C05  78                 	db	120	;'x'
  4378  007C06  25                 	db	37
  4379  007C07  30                 	db	48	;'0'
  4380  007C08  38                 	db	56	;'8'
  4381  007C09  6C                 	db	108	;'l'
  4382  007C0A  58                 	db	88	;'X'
  4383  007C0B  00                 	db	0
  4384  007C0C                     STR_271:
  4385  007C0C  56                 	db	86	;'V'
  4386  007C0D  65                 	db	101	;'e'
  4387  007C0E  72                 	db	114	;'r'
  4388  007C0F  62                 	db	98	;'b'
  4389  007C10  6F                 	db	111	;'o'
  4390  007C11  73                 	db	115	;'s'
  4391  007C12  65                 	db	101	;'e'
  4392  007C13  00                 	db	0
  4393  007C14                     STR_270:
  4394  007C14  4D                 	db	77	;'M'
  4395  007C15  6F                 	db	111	;'o'
  4396  007C16  64                 	db	100	;'d'
  4397  007C17  65                 	db	101	;'e'
  4398  007C18  3A                 	db	58	;':'
  4399  007C19  20                 	db	32
  4400  007C1A  00                 	db	0
  4401  007C1B                     STR_168:
  4402  007C1B  2C                 	db	44
  4403  007C1C  44                 	db	68	;'D'
  4404  007C1D  61                 	db	97	;'a'
  4405  007C1E  74                 	db	116	;'t'
  4406  007C1F  61                 	db	97	;'a'
  4407  007C20  3D                 	db	61	;'='
  4408  007C21  00                 	db	0
  4409  007C22                     STR_159:
  4410  007C22  2C                 	db	44
  4411  007C23  74                 	db	116	;'t'
  4412  007C24  79                 	db	121	;'y'
  4413  007C25  70                 	db	112	;'p'
  4414  007C26  65                 	db	101	;'e'
  4415  007C27  3D                 	db	61	;'='
  4416  007C28  00                 	db	0
  4417  007C29                     STR_165:
  4418  007C29  2C                 	db	44
  4419  007C2A  73                 	db	115	;'s'
  4420  007C2B  69                 	db	105	;'i'
  4421  007C2C  7A                 	db	122	;'z'
  4422  007C2D  65                 	db	101	;'e'
  4423  007C2E  3D                 	db	61	;'='
  4424  007C2F  00                 	db	0
  4425  007C30                     STR_153:
  4426  007C30  3C                 	db	60	;'<'
  4427  007C31  50                 	db	80	;'P'
  4428  007C32  72                 	db	114	;'r'
  4429  007C33  69                 	db	105	;'i'
  4430  007C34  6F                 	db	111	;'o'
  4431  007C35  3D                 	db	61	;'='
  4432  007C36  00                 	db	0
  4433  007C37                     STR_20:
  4434  007C37  49                 	db	73	;'I'
  4435  007C38  46                 	db	70	;'F'
  4436  007C39  4D                 	db	77	;'M'
  4437  007C3A  4F                 	db	79	;'O'
  4438  007C3B  44                 	db	68	;'D'
  4439  007C3C  45                 	db	69	;'E'
  4440  007C3D  00                 	db	0
  4441  007C3E                     STR_16:
  4442  007C3E  4C                 	db	76	;'L'
  4443  007C3F  49                 	db	73	;'I'
  4444  007C40  53                 	db	83	;'S'
  4445  007C41  54                 	db	84	;'T'
  4446  007C42  45                 	db	69	;'E'
  4447  007C43  4E                 	db	78	;'N'
  4448  007C44  00                 	db	0
  4449  007C45                     STR_101:
  4450  007C45  46                 	db	70	;'F'
  4451  007C46  49                 	db	73	;'I'
  4452  007C47  4C                 	db	76	;'L'
  4453  007C48  54                 	db	84	;'T'
  4454  007C49  45                 	db	69	;'E'
  4455  007C4A  52                 	db	82	;'R'
  4456  007C4B  00                 	db	0
  4457  007C4C                     STR_10:
  4458  007C4C  53                 	db	83	;'S'
  4459  007C4D  49                 	db	73	;'I'
  4460  007C4E  4C                 	db	76	;'L'
  4461  007C4F  45                 	db	69	;'E'
  4462  007C50  4E                 	db	78	;'N'
  4463  007C51  54                 	db	84	;'T'
  4464  007C52  00                 	db	0
  4465  007C53                     STR_59:
  4466  007C53  30                 	db	48	;'0'
  4467  007C54  78                 	db	120	;'x'
  4468  007C55  25                 	db	37
  4469  007C56  30                 	db	48	;'0'
  4470  007C57  32                 	db	50	;'2'
  4471  007C58  58                 	db	88	;'X'
  4472  007C59  00                 	db	0
  4473  007C5A                     STR_157:
  4474  007C5A  30                 	db	48	;'0'
  4475  007C5B  78                 	db	120	;'x'
  4476  007C5C  25                 	db	37
  4477  007C5D  30                 	db	48	;'0'
  4478  007C5E  34                 	db	52	;'4'
  4479  007C5F  58                 	db	88	;'X'
  4480  007C60  00                 	db	0
  4481  007C61                     STR_175:
  4482  007C61  30                 	db	48	;'0'
  4483  007C62  78                 	db	120	;'x'
  4484  007C63  25                 	db	37
  4485  007C64  30                 	db	48	;'0'
  4486  007C65  38                 	db	56	;'8'
  4487  007C66  58                 	db	88	;'X'
  4488  007C67  00                 	db	0
  4489  007C68                     STR_150:
  4490  007C68  46                 	db	70	;'F'
  4491  007C69  30                 	db	48	;'0'
  4492  007C6A  30                 	db	48	;'0'
  4493  007C6B  0D                 	db	13
  4494  007C6C  0A                 	db	10
  4495  007C6D  00                 	db	0
  4496  007C6E                     STR_9:
  4497  007C6E  2B                 	db	43
  4498  007C6F  4F                 	db	79	;'O'
  4499  007C70  4B                 	db	75	;'K'
  4500  007C71  0D                 	db	13
  4501  007C72  0A                 	db	10
  4502  007C73  00                 	db	0
  4503  007C74                     STR_57:
  4504  007C74  25                 	db	37
  4505  007C75  64                 	db	100	;'d'
  4506  007C76  20                 	db	32
  4507  007C77  2D                 	db	45
  4508  007C78  20                 	db	32
  4509  007C79  00                 	db	0
  4510  007C7A                     STR_135:
  4511  007C7A  4D                 	db	77	;'M'
  4512  007C7B  4F                 	db	79	;'O'
  4513  007C7C  44                 	db	68	;'D'
  4514  007C7D  45                 	db	69	;'E'
  4515  007C7E  20                 	db	32
  4516  007C7F  00                 	db	0
  4517  007C80                     STR_143:
  4518  007C80  4D                 	db	77	;'M'
  4519  007C81  41                 	db	65	;'A'
  4520  007C82  53                 	db	83	;'S'
  4521  007C83  4B                 	db	75	;'K'
  4522  007C84  20                 	db	32
  4523  007C85  00                 	db	0
  4524  007C86                     STR_12:
  4525  007C86  43                 	db	67	;'C'
  4526  007C87  4C                 	db	76	;'L'
  4527  007C88  4F                 	db	79	;'O'
  4528  007C89  53                 	db	83	;'S'
  4529  007C8A  45                 	db	69	;'E'
  4530  007C8B  00                 	db	0
  4531  007C8C                     STR_140:
  4532  007C8C  53                 	db	83	;'S'
  4533  007C8D  4C                 	db	76	;'L'
  4534  007C8E  43                 	db	67	;'C'
  4535  007C8F  41                 	db	65	;'A'
  4536  007C90  4E                 	db	78	;'N'
  4537  007C91  00                 	db	0
  4538  007C92                     STR_127:
  4539  007C92  53                 	db	83	;'S'
  4540  007C93  45                 	db	69	;'E'
  4541  007C94  54                 	db	84	;'T'
  4542  007C95  20                 	db	32
  4543  007C96  00                 	db	0
  4544  007C97                     STR_47:
  4545  007C97  46                 	db	70	;'F'
  4546  007C98  49                 	db	73	;'I'
  4547  007C99  4E                 	db	78	;'N'
  4548  007C9A  44                 	db	68	;'D'
  4549  007C9B  00                 	db	0
  4550  007C9C                     STR_49:
  4551  007C9C  52                 	db	82	;'R'
  4552  007C9D  52                 	db	82	;'R'
  4553  007C9E  45                 	db	69	;'E'
  4554  007C9F  47                 	db	71	;'G'
  4555  007CA0  00                 	db	0
  4556  007CA1                     STR_80:
  4557  007CA1  57                 	db	87	;'W'
  4558  007CA2  52                 	db	82	;'R'
  4559  007CA3  45                 	db	69	;'E'
  4560  007CA4  47                 	db	71	;'G'
  4561  007CA5  00                 	db	0
  4562  007CA6                     STR_114:
  4563  007CA6  4D                 	db	77	;'M'
  4564  007CA7  41                 	db	65	;'A'
  4565  007CA8  53                 	db	83	;'S'
  4566  007CA9  4B                 	db	75	;'K'
  4567  007CAA  00                 	db	0
  4568  007CAB                     STR_8:
  4569  007CAB  4F                 	db	79	;'O'
  4570  007CAC  50                 	db	80	;'P'
  4571  007CAD  45                 	db	69	;'E'
  4572  007CAE  4E                 	db	78	;'N'
  4573  007CAF  00                 	db	0
  4574  007CB0                     STR_95:
  4575  007CB0  49                 	db	73	;'I'
  4576  007CB1  4E                 	db	78	;'N'
  4577  007CB2  46                 	db	70	;'F'
  4578  007CB3  4F                 	db	79	;'O'
  4579  007CB4  00                 	db	0
  4580  007CB5                     STR_138:
  4581  007CB5  56                 	db	86	;'V'
  4582  007CB6  53                 	db	83	;'S'
  4583  007CB7  43                 	db	67	;'C'
  4584  007CB8  50                 	db	80	;'P'
  4585  007CB9  00                 	db	0
  4586  007CBA                     STR_45:
  4587  007CBA  48                 	db	72	;'H'
  4588  007CBB  45                 	db	69	;'E'
  4589  007CBC  4C                 	db	76	;'L'
  4590  007CBD  50                 	db	80	;'P'
  4591  007CBE  00                 	db	0
  4592  007CBF                     STR_41:
  4593  007CBF  53                 	db	83	;'S'
  4594  007CC0  54                 	db	84	;'T'
  4595  007CC1  41                 	db	65	;'A'
  4596  007CC2  54                 	db	84	;'T'
  4597  007CC3  00                 	db	0
  4598  007CC4                     STR_6:
  4599  007CC4  42                 	db	66	;'B'
  4600  007CC5  4F                 	db	79	;'O'
  4601  007CC6  4F                 	db	79	;'O'
  4602  007CC7  54                 	db	84	;'T'
  4603  007CC8  00                 	db	0
  4604  007CC9                     STR_67:
  4605  007CC9  27                 	db	39
  4606  007CCA  20                 	db	32
  4607  007CCB  09                 	db	9
  4608  007CCC  00                 	db	0
  4609  007CCD                     STR_173:
  4610  007CCD  3E                 	db	62	;'>'
  4611  007CCE  0D                 	db	13
  4612  007CCF  0A                 	db	10
  4613  007CD0  00                 	db	0
  4614  007CD1                     STR_90:
  4615  007CD1  25                 	db	37
  4616  007CD2  64                 	db	100	;'d'
  4617  007CD3  0A                 	db	10
  4618  007CD4  00                 	db	0
  4619  007CD5                     STR_43:
  4620  007CD5  45                 	db	69	;'E'
  4621  007CD6  52                 	db	82	;'R'
  4622  007CD7  52                 	db	82	;'R'
  4623  007CD8  00                 	db	0
  4624  007CD9                     STR_128:
  4625  007CD9  48                 	db	72	;'H'
  4626  007CDA  45                 	db	69	;'E'
  4627  007CDB  58                 	db	88	;'X'
  4628  007CDC  00                 	db	0
  4629  007CDD                     STR_176:
  4630  007CDD  25                 	db	37
  4631  007CDE  6C                 	db	108	;'l'
  4632  007CDF  75                 	db	117	;'u'
  4633  007CE0  00                 	db	0
  4634  007CE1                     STR_66:
  4635  007CE1  09                 	db	9
  4636  007CE2  27                 	db	39
  4637  007CE3  00                 	db	0
  4638  007CE4                     STR_259:
  4639  007CE4  2D                 	db	45
  4640  007CE5  2D                 	db	45
  4641  007CE6  00                 	db	0
  4642  007CE7                     STR_38:
  4643  007CE7  52                 	db	82	;'R'
  4644  007CE8  58                 	db	88	;'X'
  4645  007CE9  00                 	db	0
  4646  007CEA                     STR_29:
  4647  007CEA  54                 	db	84	;'T'
  4648  007CEB  58                 	db	88	;'X'
  4649  007CEC  00                 	db	0
  4650  007CED                     STR_60:
  4651  007CED  25                 	db	37
  4652  007CEE  64                 	db	100	;'d'
  4653  007CEF  00                 	db	0
  4654  007CF0                     STR_152:
  4655  007CF0  07                 	db	7
  4656  007CF1  00                 	db	0
  4657  007CF2                     STR_151:
  4658  007CF2  0D                 	db	13
  4659  007CF3  00                 	db	0
  4660  007CF4                     STR_30:
  4661  007CF4  2C                 	db	44
  4662  007CF5  00                 	db	0
  4663  007CF6                     STR_266:
  4664  007CF6  2E                 	db	46
  4665  007CF7  00                 	db	0
  4666  007CF8                     STR_258:
  4667  007CF8  30                 	db	48	;'0'
  4668  007CF9  00                 	db	0
  4669  007CFA                     STR_260:
  4670  007CFA  3A                 	db	58	;':'
  4671  007CFB  00                 	db	0
  4672  007CFC                     STR_265:
  4673  007CFC  3F                 	db	63	;'?'
  4674  007CFD  00                 	db	0
  4675  007CFE                     __end_of__stringdata:
  4676                           	opt stack 0
  4677                           
  4678                           ; #config settings
  4679  007CFE  00                 	db	0	; dummy byte at the end
  4680  0000                     tblptru	equ	0xFF8
  4681                           tblptrh	equ	0xFF7
  4682                           tblptrl	equ	0xFF6
  4683                           tablat	equ	0xFF5
  4684                           prodh	equ	0xFF4
  4685                           prodl	equ	0xFF3
  4686                           intcon	equ	0xFF2
  4687                           indf0	equ	0xFEF
  4688                           fsr0h	equ	0xFEA
  4689                           fsr0l	equ	0xFE9
  4690                           wreg	equ	0xFE8
  4691                           indf1	equ	0xFE7
  4692                           postinc1	equ	0xFE6
  4693                           postdec1	equ	0xFE5
  4694                           fsr1h	equ	0xFE2
  4695                           fsr1l	equ	0xFE1
  4696                           indf2	equ	0xFDF
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           plusw2	equ	0xFDB
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704                           	psect	nvBANK1
  4705  0001EF                     __pnvBANK1:
  4706                           	opt stack 0
  4707  0001EF                     _caps:
  4708                           	opt stack 0
  4709  0001EF                     	ds	2
  4710  0001F1                     ___DCDelay:
  4711                           	opt stack 0
  4712  0001F1                     	ds	1
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           indf0	equ	0xFEF
  4721                           fsr0h	equ	0xFEA
  4722                           fsr0l	equ	0xFE9
  4723                           wreg	equ	0xFE8
  4724                           indf1	equ	0xFE7
  4725                           postinc1	equ	0xFE6
  4726                           postdec1	equ	0xFE5
  4727                           fsr1h	equ	0xFE2
  4728                           fsr1l	equ	0xFE1
  4729                           indf2	equ	0xFDF
  4730                           postinc2	equ	0xFDE
  4731                           postdec2	equ	0xFDD
  4732                           plusw2	equ	0xFDB
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737                           	psect	cinit
  4738  001B16                     __pcinit:
  4739                           	opt stack 0
  4740  001B16                     start_initialization:
  4741                           	opt stack 0
  4742  001B16                     __initialization:
  4743                           	opt stack 0
  4744                           
  4745                           ; Clear objects allocated to BIGRAM (494 bytes)
  4746  001B16  EE04  F000         	lfsr	0,__pbssBIGRAM
  4747  001B1A  EE11 F0EE          	lfsr	1,494
  4748  001B1E                     clear_0:
  4749  001B1E  6AEE               	clrf	postinc0,c
  4750  001B20  50E5               	movf	postdec1,w,c
  4751  001B22  50E1               	movf	fsr1l,w,c
  4752  001B24  E1FC               	bnz	clear_0
  4753  001B26  50E2               	movf	fsr1h,w,c
  4754  001B28  E1FA               	bnz	clear_0
  4755                           
  4756                           ; Clear objects allocated to BANK3 (256 bytes)
  4757  001B2A  EE03  F000         	lfsr	0,__pbssBANK3
  4758  001B2E  EE11 F000          	lfsr	1,256
  4759  001B32                     clear_1:
  4760  001B32  6AEE               	clrf	postinc0,c
  4761  001B34  50E5               	movf	postdec1,w,c
  4762  001B36  50E1               	movf	fsr1l,w,c
  4763  001B38  E1FC               	bnz	clear_1
  4764  001B3A  50E2               	movf	fsr1h,w,c
  4765  001B3C  E1FA               	bnz	clear_1
  4766                           
  4767                           ; Clear objects allocated to BANK2 (128 bytes)
  4768  001B3E  EE02  F000         	lfsr	0,__pbssBANK2
  4769  001B42  0E80               	movlw	128
  4770  001B44                     clear_2:
  4771  001B44  6AEE               	clrf	postinc0,c
  4772  001B46  06E8               	decf	wreg,f,c
  4773  001B48  E1FD               	bnz	clear_2
  4774                           
  4775                           ; Clear objects allocated to BANK1 (239 bytes)
  4776  001B4A  EE01  F000         	lfsr	0,__pbssBANK1
  4777  001B4E  0EEF               	movlw	239
  4778  001B50                     clear_3:
  4779  001B50  6AEE               	clrf	postinc0,c
  4780  001B52  06E8               	decf	wreg,f,c
  4781  001B54  E1FD               	bnz	clear_3
  4782                           
  4783                           ; Clear objects allocated to BANK0 (1 bytes)
  4784  001B56  0100               	movlb	0
  4785  001B58  6BE5               	clrf	__pbssBANK0& (0+255),b
  4786                           
  4787                           ; Clear objects allocated to COMRAM (30 bytes)
  4788  001B5A  EE00  F022         	lfsr	0,__pbssCOMRAM
  4789  001B5E  0E1E               	movlw	30
  4790  001B60                     clear_4:
  4791  001B60  6AEE               	clrf	postinc0,c
  4792  001B62  06E8               	decf	wreg,f,c
  4793  001B64  E1FD               	bnz	clear_4
  4794  001B66                     end_of_initialization:
  4795                           	opt stack 0
  4796  001B66                     __end_of__initialization:
  4797                           	opt stack 0
  4798  001B66  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4799  001B68  6EF8               	movwf	tblptru,c
  4800  001B6A  0100               	movlb	0
  4801  001B6C  EF41  F01D         	goto	_main	;jump to C main() function
  4802                           tblptru	equ	0xFF8
  4803                           tblptrh	equ	0xFF7
  4804                           tblptrl	equ	0xFF6
  4805                           tablat	equ	0xFF5
  4806                           prodh	equ	0xFF4
  4807                           prodl	equ	0xFF3
  4808                           intcon	equ	0xFF2
  4809                           indf0	equ	0xFEF
  4810                           postinc0	equ	0xFEE
  4811                           fsr0h	equ	0xFEA
  4812                           fsr0l	equ	0xFE9
  4813                           wreg	equ	0xFE8
  4814                           indf1	equ	0xFE7
  4815                           postinc1	equ	0xFE6
  4816                           postdec1	equ	0xFE5
  4817                           fsr1h	equ	0xFE2
  4818                           fsr1l	equ	0xFE1
  4819                           indf2	equ	0xFDF
  4820                           postinc2	equ	0xFDE
  4821                           postdec2	equ	0xFDD
  4822                           plusw2	equ	0xFDB
  4823                           fsr2h	equ	0xFDA
  4824                           fsr2l	equ	0xFD9
  4825                           status	equ	0xFD8
  4826                           
  4827                           	psect	bssCOMRAM
  4828  000022                     __pbssCOMRAM:
  4829                           	opt stack 0
  4830  000022                     _timekeeper:
  4831                           	opt stack 0
  4832  000022                     	ds	4
  4833  000026                     _status_led_cnt:
  4834                           	opt stack 0
  4835  000026                     	ds	2
  4836  000028                     strtok@sp:
  4837                           	opt stack 0
  4838  000028                     	ds	2
  4839  00002A                     _USART_Status:
  4840                           	opt stack 0
  4841  00002A                     	ds	1
  4842  00002B                     __ECANRxFilterHitInfo:
  4843                           	opt stack 0
  4844  00002B                     	ds	1
  4845  00002C                     _bDLE:
  4846                           	opt stack 0
  4847  00002C                     	ds	1
  4848  00002D                     _bInitiated:
  4849                           	opt stack 0
  4850  00002D                     	ds	1
  4851  00002E                     _bOpen:
  4852                           	opt stack 0
  4853  00002E                     	ds	1
  4854  00002F                     _bSilent:
  4855                           	opt stack 0
  4856  00002F                     	ds	1
  4857  000030                     _fifo_canrxcount:
  4858                           	opt stack 0
  4859  000030                     	ds	1
  4860  000031                     _ledFunctionality:
  4861                           	opt stack 0
  4862  000031                     	ds	1
  4863  000032                     _mode:
  4864                           	opt stack 0
  4865  000032                     	ds	1
  4866  000033                     _nTimeStamp:
  4867                           	opt stack 0
  4868  000033                     	ds	1
  4869  000034                     _pos:
  4870                           	opt stack 0
  4871  000034                     	ds	1
  4872  000035                     _rwtimeout:
  4873                           	opt stack 0
  4874  000035                     	ds	1
  4875  000036                     _sequencyno:
  4876                           	opt stack 0
  4877  000036                     	ds	1
  4878  000037                     _stateVscpDriver:
  4879                           	opt stack 0
  4880  000037                     	ds	1
  4881  000038                     _vscpClass:
  4882                           	opt stack 0
  4883  000038                     	ds	2
  4884  00003A                     _dlc:
  4885                           	opt stack 0
  4886  00003A                     	ds	1
  4887  00003B                     _flags:
  4888                           	opt stack 0
  4889  00003B                     	ds	1
  4890  00003C                     _vscpNodeId:
  4891                           	opt stack 0
  4892  00003C                     	ds	1
  4893  00003D                     _vscpPriority:
  4894                           	opt stack 0
  4895  00003D                     	ds	1
  4896  00003E                     _vscpSize:
  4897                           	opt stack 0
  4898  00003E                     	ds	1
  4899  00003F                     _vscpType:
  4900                           	opt stack 0
  4901  00003F                     	ds	1
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           intcon	equ	0xFF2
  4909                           indf0	equ	0xFEF
  4910                           postinc0	equ	0xFEE
  4911                           fsr0h	equ	0xFEA
  4912                           fsr0l	equ	0xFE9
  4913                           wreg	equ	0xFE8
  4914                           indf1	equ	0xFE7
  4915                           postinc1	equ	0xFE6
  4916                           postdec1	equ	0xFE5
  4917                           fsr1h	equ	0xFE2
  4918                           fsr1l	equ	0xFE1
  4919                           indf2	equ	0xFDF
  4920                           postinc2	equ	0xFDE
  4921                           postdec2	equ	0xFDD
  4922                           plusw2	equ	0xFDB
  4923                           fsr2h	equ	0xFDA
  4924                           fsr2l	equ	0xFD9
  4925                           status	equ	0xFD8
  4926                           
  4927                           	psect	bssBANK0
  4928  0000E5                     __pbssBANK0:
  4929                           	opt stack 0
  4930  0000E5                     _bHex:
  4931                           	opt stack 0
  4932  0000E5                     	ds	1
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           indf0	equ	0xFEF
  4941                           postinc0	equ	0xFEE
  4942                           fsr0h	equ	0xFEA
  4943                           fsr0l	equ	0xFE9
  4944                           wreg	equ	0xFE8
  4945                           indf1	equ	0xFE7
  4946                           postinc1	equ	0xFE6
  4947                           postdec1	equ	0xFE5
  4948                           fsr1h	equ	0xFE2
  4949                           fsr1l	equ	0xFE1
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           plusw2	equ	0xFDB
  4954                           fsr2h	equ	0xFDA
  4955                           fsr2l	equ	0xFD9
  4956                           status	equ	0xFD8
  4957                           
  4958                           	psect	bssBANK1
  4959  000100                     __pbssBANK1:
  4960                           	opt stack 0
  4961  000100                     _can_receiveOverruns:
  4962                           	opt stack 0
  4963  000100                     	ds	4
  4964  000104                     _can_transmitOverruns:
  4965                           	opt stack 0
  4966  000104                     	ds	4
  4967  000108                     _cntRxBytes:
  4968                           	opt stack 0
  4969  000108                     	ds	4
  4970  00010C                     _cntRxFrames:
  4971                           	opt stack 0
  4972  00010C                     	ds	4
  4973  000110                     _cntTxBytes:
  4974                           	opt stack 0
  4975  000110                     	ds	4
  4976  000114                     _cntTxFrames:
  4977                           	opt stack 0
  4978  000114                     	ds	4
  4979  000118                     _timer:
  4980                           	opt stack 0
  4981  000118                     	ds	4
  4982  00011C                     _uart_receiveOverruns:
  4983                           	opt stack 0
  4984  00011C                     	ds	4
  4985  000120                     _uart_transmitOverruns:
  4986                           	opt stack 0
  4987  000120                     	ds	4
  4988  000124                     _made_table:
  4989                           	opt stack 0
  4990  000124                     	ds	2
  4991  000126                     __IT_INT_MASK:
  4992                           	opt stack 0
  4993  000126                     	ds	1
  4994  000127                     __IT_SAVE_BSR:
  4995                           	opt stack 0
  4996  000127                     	ds	1
  4997  000128                     __IT_SAVE_STATUS:
  4998                           	opt stack 0
  4999  000128                     	ds	1
  5000  000129                     __IT_SAVE_WREG:
  5001                           	opt stack 0
  5002  000129                     	ds	1
  5003  00012A                     ___DCByte:
  5004                           	opt stack 0
  5005  00012A                     	ds	1
  5006  00012B                     _cmdbuf:
  5007                           	opt stack 0
  5008  00012B                     	ds	80
  5009  00017B                     _wrkbuf:
  5010                           	opt stack 0
  5011  00017B                     	ds	80
  5012  0001CB                     _canInputFifo:
  5013                           	opt stack 0
  5014  0001CB                     	ds	8
  5015  0001D3                     _data:
  5016                           	opt stack 0
  5017  0001D3                     	ds	8
  5018  0001DB                     _serialInputFifo:
  5019                           	opt stack 0
  5020  0001DB                     	ds	8
  5021  0001E3                     _vscpData:
  5022                           	opt stack 0
  5023  0001E3                     	ds	8
  5024  0001EB                     _id:
  5025                           	opt stack 0
  5026  0001EB                     	ds	4
  5027                           tblptru	equ	0xFF8
  5028                           tblptrh	equ	0xFF7
  5029                           tblptrl	equ	0xFF6
  5030                           tablat	equ	0xFF5
  5031                           prodh	equ	0xFF4
  5032                           prodl	equ	0xFF3
  5033                           intcon	equ	0xFF2
  5034                           indf0	equ	0xFEF
  5035                           postinc0	equ	0xFEE
  5036                           fsr0h	equ	0xFEA
  5037                           fsr0l	equ	0xFE9
  5038                           wreg	equ	0xFE8
  5039                           indf1	equ	0xFE7
  5040                           postinc1	equ	0xFE6
  5041                           postdec1	equ	0xFE5
  5042                           fsr1h	equ	0xFE2
  5043                           fsr1l	equ	0xFE1
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           plusw2	equ	0xFDB
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052                           	psect	bssBANK2
  5053  000200                     __pbssBANK2:
  5054                           	opt stack 0
  5055  000200                     _serial_inputBuffer:
  5056                           	opt stack 0
  5057  000200                     	ds	128
  5058                           tblptru	equ	0xFF8
  5059                           tblptrh	equ	0xFF7
  5060                           tblptrl	equ	0xFF6
  5061                           tablat	equ	0xFF5
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           intcon	equ	0xFF2
  5065                           indf0	equ	0xFEF
  5066                           postinc0	equ	0xFEE
  5067                           fsr0h	equ	0xFEA
  5068                           fsr0l	equ	0xFE9
  5069                           wreg	equ	0xFE8
  5070                           indf1	equ	0xFE7
  5071                           postinc1	equ	0xFE6
  5072                           postdec1	equ	0xFE5
  5073                           fsr1h	equ	0xFE2
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           plusw2	equ	0xFDB
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083                           	psect	bssBANK3
  5084  000300                     __pbssBANK3:
  5085                           	opt stack 0
  5086  000300                     _crc8_table:
  5087                           	opt stack 0
  5088  000300                     	ds	256
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           intcon	equ	0xFF2
  5096                           indf0	equ	0xFEF
  5097                           postinc0	equ	0xFEE
  5098                           fsr0h	equ	0xFEA
  5099                           fsr0l	equ	0xFE9
  5100                           wreg	equ	0xFE8
  5101                           indf1	equ	0xFE7
  5102                           postinc1	equ	0xFE6
  5103                           postdec1	equ	0xFE5
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           plusw2	equ	0xFDB
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114                           	psect	bssBIGRAM
  5115  000400                     __pbssBIGRAM:
  5116                           	opt stack 0
  5117  000400                     _can_inputBuffer:
  5118                           	opt stack 0
  5119  000400                     	ds	494
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           indf0	equ	0xFEF
  5128                           postinc0	equ	0xFEE
  5129                           fsr0h	equ	0xFEA
  5130                           fsr0l	equ	0xFE9
  5131                           wreg	equ	0xFE8
  5132                           indf1	equ	0xFE7
  5133                           postinc1	equ	0xFE6
  5134                           postdec1	equ	0xFE5
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145                           	psect	cstackBANK2
  5146  000280                     __pcstackBANK2:
  5147                           	opt stack 0
  5148  000280                     doModeVerbose@id:
  5149                           	opt stack 0
  5150                           
  5151                           ; 4 bytes @ 0x0
  5152  000280                     	ds	4
  5153  000284                     doModeVerbose@preg:
  5154                           	opt stack 0
  5155                           
  5156                           ; 2 bytes @ 0x4
  5157  000284                     	ds	2
  5158  000286                     doModeVerbose@preg_1243:
  5159                           	opt stack 0
  5160                           
  5161                           ; 2 bytes @ 0x6
  5162  000286                     	ds	2
  5163  000288                     doModeVerbose@filter_class:
  5164                           	opt stack 0
  5165                           
  5166                           ; 2 bytes @ 0x8
  5167  000288                     	ds	2
  5168  00028A                     doModeVerbose@mask_class:
  5169                           	opt stack 0
  5170                           
  5171                           ; 2 bytes @ 0xA
  5172  00028A                     	ds	2
  5173  00028C                     doModeVerbose@filter_priority:
  5174                           	opt stack 0
  5175                           
  5176                           ; 1 bytes @ 0xC
  5177  00028C                     	ds	1
  5178  00028D                     doModeVerbose@filter_type:
  5179                           	opt stack 0
  5180                           
  5181                           ; 1 bytes @ 0xD
  5182  00028D                     	ds	1
  5183  00028E                     doModeVerbose@filter_nodeid:
  5184                           	opt stack 0
  5185                           
  5186                           ; 1 bytes @ 0xE
  5187  00028E                     	ds	1
  5188  00028F                     doModeVerbose@mask_priority:
  5189                           	opt stack 0
  5190                           
  5191                           ; 1 bytes @ 0xF
  5192  00028F                     	ds	1
  5193  000290                     doModeVerbose@mask_type:
  5194                           	opt stack 0
  5195                           
  5196                           ; 1 bytes @ 0x10
  5197  000290                     	ds	1
  5198  000291                     doModeVerbose@mask_nodeid:
  5199                           	opt stack 0
  5200                           
  5201                           ; 1 bytes @ 0x11
  5202  000291                     	ds	1
  5203  000292                     _doModeVerbose$1199:
  5204                           	opt stack 0
  5205                           
  5206                           ; 2 bytes @ 0x12
  5207  000292                     	ds	2
  5208  000294                     _doModeVerbose$1204:
  5209                           	opt stack 0
  5210                           
  5211                           ; 2 bytes @ 0x14
  5212  000294                     	ds	2
  5213  000296                     _doModeVerbose$1208:
  5214                           	opt stack 0
  5215                           
  5216                           ; 2 bytes @ 0x16
  5217  000296                     	ds	2
  5218  000298                     _doModeVerbose$1213:
  5219                           	opt stack 0
  5220                           
  5221                           ; 2 bytes @ 0x18
  5222  000298                     	ds	2
  5223  00029A                     _doModeVerbose$1221:
  5224                           	opt stack 0
  5225                           
  5226                           ; 2 bytes @ 0x1A
  5227  00029A                     	ds	2
  5228  00029C                     _doModeVerbose$1226:
  5229                           	opt stack 0
  5230                           
  5231                           ; 2 bytes @ 0x1C
  5232  00029C                     	ds	2
  5233  00029E                     _doModeVerbose$1230:
  5234                           	opt stack 0
  5235                           
  5236                           ; 2 bytes @ 0x1E
  5237  00029E                     	ds	2
  5238  0002A0                     _doModeVerbose$1252:
  5239                           	opt stack 0
  5240                           
  5241                           ; 2 bytes @ 0x20
  5242  0002A0                     	ds	2
  5243  0002A2                     _doModeVerbose$1258:
  5244                           	opt stack 0
  5245                           
  5246                           ; 2 bytes @ 0x22
  5247  0002A2                     	ds	2
  5248  0002A4                     _doModeVerbose$1265:
  5249                           	opt stack 0
  5250                           
  5251                           ; 2 bytes @ 0x24
  5252  0002A4                     	ds	2
  5253  0002A6                     doModeVerbose@rv:
  5254                           	opt stack 0
  5255                           
  5256                           ; 1 bytes @ 0x26
  5257  0002A6                     	ds	1
  5258  0002A7                     doModeVerbose@page_1236:
  5259                           	opt stack 0
  5260                           
  5261                           ; 1 bytes @ 0x27
  5262  0002A7                     	ds	1
  5263  0002A8                     doModeVerbose@reg_1237:
  5264                           	opt stack 0
  5265                           
  5266                           ; 1 bytes @ 0x28
  5267  0002A8                     	ds	1
  5268  0002A9                     doModeVerbose@id_1306:
  5269                           	opt stack 0
  5270                           
  5271                           ; 4 bytes @ 0x29
  5272  0002A9                     	ds	4
  5273  0002AD                     doModeVerbose@filterno:
  5274                           	opt stack 0
  5275                           
  5276                           ; 1 bytes @ 0x2D
  5277  0002AD                     	ds	1
  5278  0002AE                     doModeVerbose@maskno:
  5279                           	opt stack 0
  5280                           
  5281                           ; 1 bytes @ 0x2E
  5282  0002AE                     	ds	1
  5283  0002AF                     doModeVerbose@i:
  5284                           	opt stack 0
  5285                           
  5286                           ; 1 bytes @ 0x2F
  5287  0002AF                     	ds	1
  5288  0002B0                     doModeVerbose@value_1238:
  5289                           	opt stack 0
  5290                           
  5291                           ; 1 bytes @ 0x30
  5292  0002B0                     	ds	1
  5293  0002B1                     doModeVerbose@count:
  5294                           	opt stack 0
  5295                           
  5296                           ; 1 bytes @ 0x31
  5297  0002B1                     	ds	1
  5298  0002B2                     doModeVerbose@nodeid:
  5299                           	opt stack 0
  5300                           
  5301                           ; 1 bytes @ 0x32
  5302  0002B2                     	ds	1
  5303  0002B3                     doModeVerbose@nodeid_1235:
  5304                           	opt stack 0
  5305                           
  5306                           ; 1 bytes @ 0x33
  5307  0002B3                     	ds	1
  5308  0002B4                     doModeVerbose@page:
  5309                           	opt stack 0
  5310                           
  5311                           ; 1 bytes @ 0x34
  5312  0002B4                     	ds	1
  5313  0002B5                     doModeVerbose@reg:
  5314                           	opt stack 0
  5315                           
  5316                           ; 1 bytes @ 0x35
  5317  0002B5                     	ds	1
  5318  0002B6                     doModeVerbose@nodeid_1260:
  5319                           	opt stack 0
  5320                           
  5321                           ; 1 bytes @ 0x36
  5322  0002B6                     	ds	1
  5323  0002B7                     doModeVerbose@c:
  5324                           	opt stack 0
  5325                           
  5326                           ; 1 bytes @ 0x37
  5327  0002B7                     	ds	1
  5328  0002B8                     doModeVerbose@i_1181:
  5329                           	opt stack 0
  5330                           
  5331                           ; 1 bytes @ 0x38
  5332  0002B8                     	ds	1
  5333  0002B9                     doModeVerbose@value:
  5334                           	opt stack 0
  5335                           
  5336                           ; 1 bytes @ 0x39
  5337  0002B9                     	ds	1
  5338  0002BA                     doModeVerbose@p_1187:
  5339                           	opt stack 0
  5340                           
  5341                           ; 2 bytes @ 0x3A
  5342  0002BA                     	ds	2
  5343  0002BC                     doModeVerbose@p_1239:
  5344                           	opt stack 0
  5345                           
  5346                           ; 2 bytes @ 0x3C
  5347  0002BC                     	ds	2
  5348  0002BE                     doModeVerbose@ifmode:
  5349                           	opt stack 0
  5350                           
  5351                           ; 1 bytes @ 0x3E
  5352  0002BE                     	ds	1
  5353  0002BF                     doModeVerbose@p:
  5354                           	opt stack 0
  5355                           
  5356                           ; 2 bytes @ 0x3F
  5357  0002BF                     	ds	2
  5358  0002C1                     doModeVerbose@p_1274:
  5359                           	opt stack 0
  5360                           
  5361                           ; 2 bytes @ 0x41
  5362  0002C1                     	ds	2
  5363  0002C3                     doModeVerbose@p_1294:
  5364                           	opt stack 0
  5365                           
  5366                           ; 2 bytes @ 0x43
  5367  0002C3                     	ds	2
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           indf0	equ	0xFEF
  5376                           postinc0	equ	0xFEE
  5377                           fsr0h	equ	0xFEA
  5378                           fsr0l	equ	0xFE9
  5379                           wreg	equ	0xFE8
  5380                           indf1	equ	0xFE7
  5381                           postinc1	equ	0xFE6
  5382                           postdec1	equ	0xFE5
  5383                           fsr1h	equ	0xFE2
  5384                           fsr1l	equ	0xFE1
  5385                           indf2	equ	0xFDF
  5386                           postinc2	equ	0xFDE
  5387                           postdec2	equ	0xFDD
  5388                           plusw2	equ	0xFDB
  5389                           fsr2h	equ	0xFDA
  5390                           fsr2l	equ	0xFD9
  5391                           status	equ	0xFD8
  5392                           
  5393                           	psect	cstackBANK0
  5394  000060                     __pcstackBANK0:
  5395                           	opt stack 0
  5396  000060                     ?_WriteTimer0:
  5397                           	opt stack 0
  5398  000060                     ?_fifo_init:
  5399                           	opt stack 0
  5400  000060                     ?_OpenUSART:
  5401                           	opt stack 0
  5402  000060                     ?_Write_b_eep:
  5403                           	opt stack 0
  5404  000060                     ?_setFilter:
  5405                           	opt stack 0
  5406  000060                     ?__CANIDToRegs:
  5407                           	opt stack 0
  5408  000060                     ??_isdigit:
  5409  000060                     ?_Read_b_eep:
  5410                           	opt stack 0
  5411  000060                     ?_fifo_read:
  5412                           	opt stack 0
  5413  000060                     ?_memset:
  5414                           	opt stack 0
  5415  000060                     ?_strcpy:
  5416                           	opt stack 0
  5417  000060                     ?_strchr:
  5418                           	opt stack 0
  5419  000060                     ?_strlen:
  5420                           	opt stack 0
  5421  000060                     ?_memcpy:
  5422                           	opt stack 0
  5423  000060                     ?_strcat:
  5424                           	opt stack 0
  5425  000060                     ?___lwdiv:
  5426                           	opt stack 0
  5427  000060                     ?___lwmod:
  5428                           	opt stack 0
  5429  000060                     ?___wmul:
  5430                           	opt stack 0
  5431  000060                     ?___lldiv:
  5432                           	opt stack 0
  5433  000060                     ECANSetOperationMode@mode:
  5434                           	opt stack 0
  5435  000060                     nibbleFromChar@c:
  5436                           	opt stack 0
  5437  000060                     OpenTimer0@config:
  5438                           	opt stack 0
  5439  000060                     WriteUSART@data:
  5440                           	opt stack 0
  5441  000060                     toupper@c:
  5442                           	opt stack 0
  5443  000060                     __CANIDToRegs@ptr:
  5444                           	opt stack 0
  5445  000060                     fifo_init@f:
  5446                           	opt stack 0
  5447  000060                     fifo_read@f:
  5448                           	opt stack 0
  5449  000060                     _init_crc8$2046:
  5450                           	opt stack 0
  5451  000060                     Read_b_eep@badd:
  5452                           	opt stack 0
  5453  000060                     Write_b_eep@badd:
  5454                           	opt stack 0
  5455  000060                     WriteTimer0@timer0:
  5456                           	opt stack 0
  5457  000060                     OpenUSART@spbrg:
  5458                           	opt stack 0
  5459  000060                     ___lwdiv@dividend:
  5460                           	opt stack 0
  5461  000060                     ___lwmod@dividend:
  5462                           	opt stack 0
  5463  000060                     memcpy@d1:
  5464                           	opt stack 0
  5465  000060                     memset@p1:
  5466                           	opt stack 0
  5467  000060                     strcat@to:
  5468                           	opt stack 0
  5469  000060                     strchr@ptr:
  5470                           	opt stack 0
  5471  000060                     strcpy@to:
  5472                           	opt stack 0
  5473  000060                     strlen@s:
  5474                           	opt stack 0
  5475  000060                     ___wmul@multiplier:
  5476                           	opt stack 0
  5477  000060                     setFilter@val:
  5478                           	opt stack 0
  5479  000060                     ___lldiv@dividend:
  5480                           	opt stack 0
  5481                           
  5482                           ; 4 bytes @ 0x0
  5483  000060                     	ds	1
  5484  000061                     ?_putsUSART:
  5485                           	opt stack 0
  5486  000061                     ??_printBinary:
  5487  000061                     ?_strichr:
  5488                           	opt stack 0
  5489  000061                     _isdigit$2963:
  5490                           	opt stack 0
  5491  000061                     putsUSART@data:
  5492                           	opt stack 0
  5493  000061                     strichr@ptr:
  5494                           	opt stack 0
  5495                           
  5496                           ; 2 bytes @ 0x1
  5497  000061                     	ds	1
  5498  000062                     Write_b_eep@bdat:
  5499                           	opt stack 0
  5500  000062                     OpenUSART@config:
  5501                           	opt stack 0
  5502  000062                     isdigit@c:
  5503                           	opt stack 0
  5504  000062                     fifo_init@buf:
  5505                           	opt stack 0
  5506  000062                     fifo_read@buf:
  5507                           	opt stack 0
  5508  000062                     init_crc8@j:
  5509                           	opt stack 0
  5510  000062                     WriteTimer0@timer:
  5511                           	opt stack 0
  5512  000062                     ___lwdiv@divisor:
  5513                           	opt stack 0
  5514  000062                     ___lwmod@divisor:
  5515                           	opt stack 0
  5516  000062                     memcpy@s1:
  5517                           	opt stack 0
  5518  000062                     memset@c:
  5519                           	opt stack 0
  5520  000062                     strcat@from:
  5521                           	opt stack 0
  5522  000062                     strchr@chr:
  5523                           	opt stack 0
  5524  000062                     strcpy@from:
  5525                           	opt stack 0
  5526  000062                     strlen@cp:
  5527                           	opt stack 0
  5528  000062                     ___wmul@multiplicand:
  5529                           	opt stack 0
  5530  000062                     __CANIDToRegs@val:
  5531                           	opt stack 0
  5532                           
  5533                           ; 4 bytes @ 0x2
  5534  000062                     	ds	1
  5535  000063                     ??_putsUSART:
  5536  000063                     printBinary@value:
  5537                           	opt stack 0
  5538  000063                     Write_b_eep@GIE_BIT_VAL:
  5539                           	opt stack 0
  5540  000063                     strichr@chr:
  5541                           	opt stack 0
  5542                           
  5543                           ; 2 bytes @ 0x3
  5544  000063                     	ds	1
  5545  000064                     ??_strchr:
  5546  000064                     ??_setFilter:
  5547  000064                     ?_hexStringToBytes:
  5548                           	opt stack 0
  5549  000064                     ?_strnicmp:
  5550                           	opt stack 0
  5551  000064                     init_app_eeprom@i:
  5552                           	opt stack 0
  5553  000064                     init_crc8@crc:
  5554                           	opt stack 0
  5555  000064                     ___lwdiv@counter:
  5556                           	opt stack 0
  5557  000064                     ___lwmod@counter:
  5558                           	opt stack 0
  5559  000064                     printBinary@i:
  5560                           	opt stack 0
  5561  000064                     fifo_init@size:
  5562                           	opt stack 0
  5563  000064                     fifo_read@nbytes:
  5564                           	opt stack 0
  5565  000064                     hexStringToBytes@buf:
  5566                           	opt stack 0
  5567  000064                     memcpy@n:
  5568                           	opt stack 0
  5569  000064                     memset@n:
  5570                           	opt stack 0
  5571  000064                     strcat@cp:
  5572                           	opt stack 0
  5573  000064                     strcpy@cp:
  5574                           	opt stack 0
  5575  000064                     strnicmp@s1:
  5576                           	opt stack 0
  5577  000064                     ___wmul@product:
  5578                           	opt stack 0
  5579  000064                     ___lldiv@divisor:
  5580                           	opt stack 0
  5581                           
  5582                           ; 4 bytes @ 0x4
  5583  000064                     	ds	1
  5584  000065                     init_crc8@i:
  5585                           	opt stack 0
  5586  000065                     ___lwdiv@quotient:
  5587                           	opt stack 0
  5588                           
  5589                           ; 2 bytes @ 0x5
  5590  000065                     	ds	1
  5591  000066                     ??_fifo_read:
  5592  000066                     ?_atoi:
  5593                           	opt stack 0
  5594  000066                     ?_strspn:
  5595                           	opt stack 0
  5596  000066                     ?_strcspn:
  5597                           	opt stack 0
  5598  000066                     __CANIDToRegs@type:
  5599                           	opt stack 0
  5600  000066                     hexStringToBytes@size:
  5601                           	opt stack 0
  5602  000066                     atoi@s:
  5603                           	opt stack 0
  5604  000066                     memcpy@d:
  5605                           	opt stack 0
  5606  000066                     memset@p:
  5607                           	opt stack 0
  5608  000066                     strnicmp@s2:
  5609                           	opt stack 0
  5610  000066                     strcspn@s1:
  5611                           	opt stack 0
  5612  000066                     strspn@s1:
  5613                           	opt stack 0
  5614                           
  5615                           ; 2 bytes @ 0x6
  5616  000066                     	ds	1
  5617  000067                     ??__CANIDToRegs:
  5618  000067                     ?_crc8:
  5619                           	opt stack 0
  5620  000067                     ?_utoa:
  5621                           	opt stack 0
  5622  000067                     crc8@crc:
  5623                           	opt stack 0
  5624  000067                     hexStringToBytes@inhex:
  5625                           	opt stack 0
  5626  000067                     utoa@buf:
  5627                           	opt stack 0
  5628                           
  5629                           ; 2 bytes @ 0x7
  5630  000067                     	ds	1
  5631  000068                     ??_atoi:
  5632  000068                     ___lldiv@counter:
  5633                           	opt stack 0
  5634  000068                     memcpy@s:
  5635                           	opt stack 0
  5636  000068                     strnicmp@len:
  5637                           	opt stack 0
  5638  000068                     strcspn@s2:
  5639                           	opt stack 0
  5640  000068                     strspn@s2:
  5641                           	opt stack 0
  5642                           
  5643                           ; 2 bytes @ 0x8
  5644  000068                     	ds	1
  5645  000069                     ??_hexStringToBytes:
  5646  000069                     __CANIDToRegs@Value:
  5647                           	opt stack 0
  5648  000069                     crc8@m:
  5649                           	opt stack 0
  5650  000069                     utoa@val:
  5651                           	opt stack 0
  5652  000069                     ___lldiv@quotient:
  5653                           	opt stack 0
  5654                           
  5655                           ; 4 bytes @ 0x9
  5656  000069                     	ds	1
  5657  00006A                     ??_crc8:
  5658  00006A                     ??_strnicmp:
  5659  00006A                     ?_ECANSendMessage:
  5660                           	opt stack 0
  5661  00006A                     setFilter@filter:
  5662                           	opt stack 0
  5663  00006A                     atoi@sign:
  5664                           	opt stack 0
  5665  00006A                     fifo_read@p:
  5666                           	opt stack 0
  5667  00006A                     strcspn@i:
  5668                           	opt stack 0
  5669  00006A                     strspn@i:
  5670                           	opt stack 0
  5671  00006A                     ECANSendMessage@id:
  5672                           	opt stack 0
  5673                           
  5674                           ; 4 bytes @ 0xA
  5675  00006A                     	ds	1
  5676  00006B                     setFilter@sidh:
  5677                           	opt stack 0
  5678  00006B                     atoi@a:
  5679                           	opt stack 0
  5680  00006B                     utoa@base:
  5681                           	opt stack 0
  5682                           
  5683                           ; 2 bytes @ 0xB
  5684  00006B                     	ds	1
  5685  00006C                     ?_sendEscapedUartData:
  5686                           	opt stack 0
  5687  00006C                     ?_calcCRC:
  5688                           	opt stack 0
  5689  00006C                     ?_strtok:
  5690                           	opt stack 0
  5691  00006C                     setFilter@sidl:
  5692                           	opt stack 0
  5693  00006C                     strnicmp@r:
  5694                           	opt stack 0
  5695  00006C                     sendEscapedUartData@pcrc:
  5696                           	opt stack 0
  5697  00006C                     calcCRC@p:
  5698                           	opt stack 0
  5699  00006C                     fifo_read@i:
  5700                           	opt stack 0
  5701  00006C                     hexStringToBytes@len:
  5702                           	opt stack 0
  5703  00006C                     strtok@s1:
  5704                           	opt stack 0
  5705                           
  5706                           ; 2 bytes @ 0xC
  5707  00006C                     	ds	1
  5708  00006D                     ?_stristr:
  5709                           	opt stack 0
  5710  00006D                     ?___llmod:
  5711                           	opt stack 0
  5712  00006D                     setFilter@eidh:
  5713                           	opt stack 0
  5714  00006D                     utoa@v:
  5715                           	opt stack 0
  5716  00006D                     stristr@s1:
  5717                           	opt stack 0
  5718  00006D                     ___llmod@dividend:
  5719                           	opt stack 0
  5720                           
  5721                           ; 4 bytes @ 0xD
  5722  00006D                     	ds	1
  5723  00006E                     ?_getCANFrame:
  5724                           	opt stack 0
  5725  00006E                     sendEscapedUartData@c:
  5726                           	opt stack 0
  5727  00006E                     calcCRC@len:
  5728                           	opt stack 0
  5729  00006E                     setFilter@eidl:
  5730                           	opt stack 0
  5731  00006E                     getCANFrame@pdlc:
  5732                           	opt stack 0
  5733  00006E                     ECANSendMessage@data:
  5734                           	opt stack 0
  5735  00006E                     hexStringToBytes@p:
  5736                           	opt stack 0
  5737  00006E                     strtok@s2:
  5738                           	opt stack 0
  5739                           
  5740                           ; 2 bytes @ 0xE
  5741  00006E                     	ds	1
  5742  00006F                     ?_sendVSCPDriverCommandReply:
  5743                           	opt stack 0
  5744  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5745                           	opt stack 0
  5746  00006F                     sendVSCPDriverAck@crc:
  5747                           	opt stack 0
  5748  00006F                     sendVSCPDriverNack@crc:
  5749                           	opt stack 0
  5750  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5751                           	opt stack 0
  5752  00006F                     sendVSCPModeCapabilities@crc:
  5753                           	opt stack 0
  5754  00006F                     calcCRC@j:
  5755                           	opt stack 0
  5756  00006F                     utoa@c:
  5757                           	opt stack 0
  5758  00006F                     stristr@s2:
  5759                           	opt stack 0
  5760                           
  5761                           ; 2 bytes @ 0xF
  5762  00006F                     	ds	1
  5763  000070                     ?_itoa:
  5764                           	opt stack 0
  5765  000070                     sendVSCPDriverErrorFrame@crc:
  5766                           	opt stack 0
  5767  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5768                           	opt stack 0
  5769  000070                     calcCRC@crc:
  5770                           	opt stack 0
  5771  000070                     ECANSendMessage@dataLen:
  5772                           	opt stack 0
  5773  000070                     getCANFrame@pdata:
  5774                           	opt stack 0
  5775  000070                     hexStringToBytes@i:
  5776                           	opt stack 0
  5777  000070                     itoa@buf:
  5778                           	opt stack 0
  5779                           
  5780                           ; 2 bytes @ 0x10
  5781  000070                     	ds	1
  5782  000071                     sendVSCPDriverCommandReply@crc:
  5783                           	opt stack 0
  5784  000071                     ECANSendMessage@msgFlags:
  5785                           	opt stack 0
  5786  000071                     ___llmod@divisor:
  5787                           	opt stack 0
  5788                           
  5789                           ; 4 bytes @ 0x11
  5790  000071                     	ds	1
  5791  000072                     ??_ECANSendMessage:
  5792  000072                     getCANFrame@pid:
  5793                           	opt stack 0
  5794  000072                     itoa@val:
  5795                           	opt stack 0
  5796                           
  5797                           ; 2 bytes @ 0x12
  5798  000072                     	ds	1
  5799  000073                     ?_getVSCPFrame:
  5800                           	opt stack 0
  5801  000073                     getVSCPFrame@pvscptype:
  5802                           	opt stack 0
  5803  000073                     receiveSendEventCANAL@data:
  5804                           	opt stack 0
  5805  000073                     receiveSendMultiEventCANAL@data:
  5806                           	opt stack 0
  5807  000073                     ECANSendMessage@pb:
  5808                           	opt stack 0
  5809                           
  5810                           ; 18 bytes @ 0x13
  5811  000073                     	ds	1
  5812  000074                     getVSCPFrame@pNodeId:
  5813                           	opt stack 0
  5814  000074                     itoa@base:
  5815                           	opt stack 0
  5816                           
  5817                           ; 2 bytes @ 0x14
  5818  000074                     	ds	1
  5819  000075                     getVSCPFrame@pPriority:
  5820                           	opt stack 0
  5821  000075                     ___llmod@counter:
  5822                           	opt stack 0
  5823                           
  5824                           ; 1 bytes @ 0x15
  5825  000075                     	ds	1
  5826  000076                     ?_sprintf:
  5827                           	opt stack 0
  5828  000076                     ?_ultoa:
  5829                           	opt stack 0
  5830  000076                     getVSCPFrame@pSize:
  5831                           	opt stack 0
  5832  000076                     sprintf@sp:
  5833                           	opt stack 0
  5834  000076                     ultoa@buf:
  5835                           	opt stack 0
  5836                           
  5837                           ; 2 bytes @ 0x16
  5838  000076                     	ds	1
  5839  000077                     getVSCPFrame@pData:
  5840                           	opt stack 0
  5841                           
  5842                           ; 2 bytes @ 0x17
  5843  000077                     	ds	1
  5844  000078                     sprintf@f:
  5845                           	opt stack 0
  5846  000078                     ultoa@val:
  5847                           	opt stack 0
  5848  000078                     printFirmwareVersion@wrkbuf:
  5849                           	opt stack 0
  5850                           
  5851                           ; 20 bytes @ 0x18
  5852  000078                     	ds	1
  5853  000079                     ??_getVSCPFrame:
  5854                           
  5855                           ; 0 bytes @ 0x19
  5856  000079                     	ds	2
  5857  00007B                     receiveSendEventCANAL@i:
  5858                           	opt stack 0
  5859  00007B                     receiveSendMultiEventCANAL@msgcount:
  5860                           	opt stack 0
  5861                           
  5862                           ; 1 bytes @ 0x1B
  5863  00007B                     	ds	1
  5864  00007C                     receiveSendMultiEventCANAL@i:
  5865                           	opt stack 0
  5866  00007C                     ultoa@base:
  5867                           	opt stack 0
  5868  00007C                     receiveSendEventCANAL@id:
  5869                           	opt stack 0
  5870                           
  5871                           ; 4 bytes @ 0x1C
  5872  00007C                     	ds	1
  5873  00007D                     getVSCPFrame@pvscpclass:
  5874                           	opt stack 0
  5875  00007D                     receiveSendMultiEventCANAL@id:
  5876                           	opt stack 0
  5877                           
  5878                           ; 4 bytes @ 0x1D
  5879  00007D                     	ds	1
  5880  00007E                     ??_sprintf:
  5881  00007E                     getVSCPFrame@id:
  5882                           	opt stack 0
  5883  00007E                     ultoa@v:
  5884                           	opt stack 0
  5885                           
  5886                           ; 4 bytes @ 0x1E
  5887  00007E                     	ds	2
  5888  000080                     receiveSendEventCANAL@dlc:
  5889                           	opt stack 0
  5890                           
  5891                           ; 1 bytes @ 0x20
  5892  000080                     	ds	1
  5893  000081                     receiveSendEventCANAL@crc:
  5894                           	opt stack 0
  5895  000081                     receiveSendMultiEventCANAL@dlc:
  5896                           	opt stack 0
  5897  000081                     sprintf@idx:
  5898                           	opt stack 0
  5899                           
  5900                           ; 1 bytes @ 0x21
  5901  000081                     	ds	1
  5902  000082                     receiveSendMultiEventCANAL@crc:
  5903                           	opt stack 0
  5904  000082                     ultoa@c:
  5905                           	opt stack 0
  5906  000082                     _sprintf$2108:
  5907                           	opt stack 0
  5908                           
  5909                           ; 2 bytes @ 0x22
  5910  000082                     	ds	1
  5911  000083                     ??_receiveSendEventSLCAN:
  5912  000083                     receiveSendMultiEventCANAL@pos:
  5913                           	opt stack 0
  5914                           
  5915                           ; 1 bytes @ 0x23
  5916  000083                     	ds	1
  5917  000084                     _sprintf$2109:
  5918                           	opt stack 0
  5919                           
  5920                           ; 2 bytes @ 0x24
  5921  000084                     	ds	1
  5922  000085                     ECANSendMessage@mode:
  5923                           	opt stack 0
  5924                           
  5925                           ; 1 bytes @ 0x25
  5926  000085                     	ds	1
  5927  000086                     ECANSendMessage@buffers:
  5928                           	opt stack 0
  5929  000086                     _sprintf$2115:
  5930                           	opt stack 0
  5931  000086                     receiveSendEventSLCAN@id:
  5932                           	opt stack 0
  5933                           
  5934                           ; 4 bytes @ 0x26
  5935  000086                     	ds	1
  5936  000087                     ECANSendMessage@j:
  5937                           	opt stack 0
  5938                           
  5939                           ; 1 bytes @ 0x27
  5940  000087                     	ds	1
  5941  000088                     ECANSendMessage@tempBSEL0:
  5942                           	opt stack 0
  5943  000088                     sprintf@ap:
  5944                           	opt stack 0
  5945                           
  5946                           ; 1 bytes @ 0x28
  5947  000088                     	ds	1
  5948  000089                     ECANSendMessage@tempPtr:
  5949                           	opt stack 0
  5950  000089                     sprintf@prec:
  5951                           	opt stack 0
  5952                           
  5953                           ; 2 bytes @ 0x29
  5954  000089                     	ds	1
  5955  00008A                     receiveSendEventSLCAN@dlc:
  5956                           	opt stack 0
  5957                           
  5958                           ; 1 bytes @ 0x2A
  5959  00008A                     	ds	1
  5960  00008B                     ECANSendMessage@temp:
  5961                           	opt stack 0
  5962  00008B                     receiveSendEventSLCAN@i:
  5963                           	opt stack 0
  5964  00008B                     sprintf@width:
  5965                           	opt stack 0
  5966                           
  5967                           ; 2 bytes @ 0x2B
  5968  00008B                     	ds	1
  5969  00008C                     ECANSendMessage@i:
  5970                           	opt stack 0
  5971                           
  5972                           ; 1 bytes @ 0x2C
  5973  00008C                     	ds	1
  5974  00008D                     ECANSendMessage@ptr:
  5975                           	opt stack 0
  5976  00008D                     sprintf@_val:
  5977                           	opt stack 0
  5978                           
  5979                           ; 4 bytes @ 0x2D
  5980  00008D                     	ds	2
  5981  00008F                     ?_sendCANFrame:
  5982                           	opt stack 0
  5983  00008F                     sendCANFrame@id:
  5984                           	opt stack 0
  5985                           
  5986                           ; 4 bytes @ 0x2F
  5987  00008F                     	ds	2
  5988  000091                     sprintf@c:
  5989                           	opt stack 0
  5990                           
  5991                           ; 1 bytes @ 0x31
  5992  000091                     	ds	1
  5993  000092                     sprintf@flag:
  5994                           	opt stack 0
  5995                           
  5996                           ; 2 bytes @ 0x32
  5997  000092                     	ds	1
  5998  000093                     sendCANFrame@dlc:
  5999                           	opt stack 0
  6000                           
  6001                           ; 1 bytes @ 0x33
  6002  000093                     	ds	1
  6003  000094                     ??_receivePrintEventVerbose:
  6004  000094                     _printStatistics$1455:
  6005                           	opt stack 0
  6006  000094                     _printErrors$1480:
  6007                           	opt stack 0
  6008  000094                     sendCANFrame@pdata:
  6009                           	opt stack 0
  6010                           
  6011                           ; 2 bytes @ 0x34
  6012  000094                     	ds	2
  6013  000096                     ??_doModeSLCAN:
  6014  000096                     ??_receiveVSCPModeCanalMsg:
  6015  000096                     ?_sendVSCPFrame:
  6016                           	opt stack 0
  6017  000096                     _printStatistics$1461:
  6018                           	opt stack 0
  6019  000096                     _printErrors$1486:
  6020                           	opt stack 0
  6021  000096                     sendVSCPFrame@vscpclass:
  6022                           	opt stack 0
  6023                           
  6024                           ; 2 bytes @ 0x36
  6025  000096                     	ds	2
  6026  000098                     sendVSCPFrame@vscptype:
  6027                           	opt stack 0
  6028  000098                     _printStatistics$1467:
  6029                           	opt stack 0
  6030  000098                     _printErrors$1492:
  6031                           	opt stack 0
  6032                           
  6033                           ; 2 bytes @ 0x38
  6034  000098                     	ds	1
  6035  000099                     sendVSCPFrame@nodeid:
  6036                           	opt stack 0
  6037  000099                     _receivePrintEventVerbose$1362:
  6038                           	opt stack 0
  6039                           
  6040                           ; 2 bytes @ 0x39
  6041  000099                     	ds	1
  6042  00009A                     sendVSCPFrame@priority:
  6043                           	opt stack 0
  6044  00009A                     _printStatistics$1473:
  6045                           	opt stack 0
  6046  00009A                     _printErrors$1498:
  6047                           	opt stack 0
  6048                           
  6049                           ; 2 bytes @ 0x3A
  6050  00009A                     	ds	1
  6051  00009B                     sendVSCPFrame@size:
  6052                           	opt stack 0
  6053  00009B                     _receivePrintEventVerbose$1367:
  6054                           	opt stack 0
  6055                           
  6056                           ; 2 bytes @ 0x3B
  6057  00009B                     	ds	1
  6058  00009C                     _printErrors$1504:
  6059                           	opt stack 0
  6060  00009C                     sendVSCPFrame@pData:
  6061                           	opt stack 0
  6062                           
  6063                           ; 2 bytes @ 0x3C
  6064  00009C                     	ds	1
  6065  00009D                     _receivePrintEventVerbose$1372:
  6066                           	opt stack 0
  6067  00009D                     doModeSLCAN@id:
  6068                           	opt stack 0
  6069                           
  6070                           ; 4 bytes @ 0x3D
  6071  00009D                     	ds	1
  6072  00009E                     ??_sendVSCPFrame:
  6073  00009E                     _printErrors$1513:
  6074                           	opt stack 0
  6075                           
  6076                           ; 2 bytes @ 0x3E
  6077  00009E                     	ds	1
  6078  00009F                     _receivePrintEventVerbose$1377:
  6079                           	opt stack 0
  6080                           
  6081                           ; 2 bytes @ 0x3F
  6082  00009F                     	ds	2
  6083  0000A1                     doModeSLCAN@dlc:
  6084                           	opt stack 0
  6085  0000A1                     _receivePrintEventVerbose$1382:
  6086                           	opt stack 0
  6087                           
  6088                           ; 2 bytes @ 0x41
  6089  0000A1                     	ds	1
  6090  0000A2                     doModeSLCAN@c:
  6091                           	opt stack 0
  6092                           
  6093                           ; 1 bytes @ 0x42
  6094  0000A2                     	ds	1
  6095  0000A3                     doModeSLCAN@rv:
  6096                           	opt stack 0
  6097  0000A3                     _receivePrintEventVerbose$1387:
  6098                           	opt stack 0
  6099                           
  6100                           ; 2 bytes @ 0x43
  6101  0000A3                     	ds	2
  6102  0000A5                     receivePrintEventVerbose@i:
  6103                           	opt stack 0
  6104                           
  6105                           ; 1 bytes @ 0x45
  6106  0000A5                     	ds	5
  6107  0000AA                     receiveVSCPModeCanalMsg@data:
  6108                           	opt stack 0
  6109                           
  6110                           ; 8 bytes @ 0x4A
  6111  0000AA                     	ds	8
  6112  0000B2                     receiveVSCPModeCanalMsg@id:
  6113                           	opt stack 0
  6114  0000B2                     sendVSCPFrame@id:
  6115                           	opt stack 0
  6116                           
  6117                           ; 4 bytes @ 0x52
  6118  0000B2                     	ds	4
  6119  0000B6                     ?_readRegisterExtended:
  6120                           	opt stack 0
  6121  0000B6                     ?_writeRegisterExtended:
  6122                           	opt stack 0
  6123  0000B6                     ?_readRegister:
  6124                           	opt stack 0
  6125  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6126                           	opt stack 0
  6127  0000B6                     readRegister@reg:
  6128                           	opt stack 0
  6129  0000B6                     readRegisterExtended@page:
  6130                           	opt stack 0
  6131  0000B6                     writeRegisterExtended@page:
  6132                           	opt stack 0
  6133                           
  6134                           ; 2 bytes @ 0x56
  6135  0000B6                     	ds	1
  6136  0000B7                     doModeVscp@c:
  6137                           	opt stack 0
  6138  0000B7                     readRegister@timeout:
  6139                           	opt stack 0
  6140                           
  6141                           ; 2 bytes @ 0x57
  6142  0000B7                     	ds	1
  6143  0000B8                     readRegisterExtended@reg:
  6144                           	opt stack 0
  6145  0000B8                     writeRegisterExtended@reg:
  6146                           	opt stack 0
  6147                           
  6148                           ; 1 bytes @ 0x58
  6149  0000B8                     	ds	1
  6150  0000B9                     readRegister@value:
  6151                           	opt stack 0
  6152  0000B9                     readRegisterExtended@timeout:
  6153                           	opt stack 0
  6154  0000B9                     writeRegisterExtended@timeout:
  6155                           	opt stack 0
  6156                           
  6157                           ; 2 bytes @ 0x59
  6158  0000B9                     	ds	1
  6159  0000BA                     ??_readRegister:
  6160                           
  6161                           ; 0 bytes @ 0x5A
  6162  0000BA                     	ds	1
  6163  0000BB                     readRegisterExtended@value:
  6164                           	opt stack 0
  6165  0000BB                     writeRegisterExtended@value:
  6166                           	opt stack 0
  6167                           
  6168                           ; 2 bytes @ 0x5B
  6169  0000BB                     	ds	2
  6170  0000BD                     ??_readRegisterExtended:
  6171  0000BD                     ??_writeRegisterExtended:
  6172                           
  6173                           ; 0 bytes @ 0x5D
  6174  0000BD                     	ds	1
  6175  0000BE                     readRegister@nodeid:
  6176                           	opt stack 0
  6177                           
  6178                           ; 1 bytes @ 0x5E
  6179  0000BE                     	ds	1
  6180  0000BF                     printGUID@nodeid:
  6181                           	opt stack 0
  6182  0000BF                     printMDF@nodeid:
  6183                           	opt stack 0
  6184  0000BF                     printNodeFirmwareVersion@nodeid:
  6185                           	opt stack 0
  6186                           
  6187                           ; 1 bytes @ 0x5F
  6188  0000BF                     	ds	1
  6189  0000C0                     printMDF@value:
  6190                           	opt stack 0
  6191  0000C0                     printGUID@buf:
  6192                           	opt stack 0
  6193  0000C0                     printNodeFirmwareVersion@buf:
  6194                           	opt stack 0
  6195                           
  6196                           ; 3 bytes @ 0x60
  6197  0000C0                     	ds	1
  6198  0000C1                     readRegisterExtended@nodeid:
  6199                           	opt stack 0
  6200  0000C1                     writeRegisterExtended@nodeid:
  6201                           	opt stack 0
  6202  0000C1                     printMDF@p:
  6203                           	opt stack 0
  6204                           
  6205                           ; 2 bytes @ 0x61
  6206  0000C1                     	ds	2
  6207  0000C3                     printGUID@value:
  6208                           	opt stack 0
  6209  0000C3                     printMDF@i:
  6210                           	opt stack 0
  6211  0000C3                     printNodeFirmwareVersion@value:
  6212                           	opt stack 0
  6213                           
  6214                           ; 1 bytes @ 0x63
  6215  0000C3                     	ds	1
  6216  0000C4                     printGUID@i:
  6217                           	opt stack 0
  6218  0000C4                     printNodeFirmwareVersion@i:
  6219                           	opt stack 0
  6220                           
  6221                           ; 1 bytes @ 0x64
  6222  0000C4                     	ds	1
  6223  0000C5                     _findNodes$1557:
  6224                           	opt stack 0
  6225                           
  6226                           ; 2 bytes @ 0x65
  6227  0000C5                     	ds	2
  6228  0000C7                     findNodes@nFound:
  6229                           	opt stack 0
  6230                           
  6231                           ; 1 bytes @ 0x67
  6232  0000C7                     	ds	1
  6233  0000C8                     findNodes@value:
  6234                           	opt stack 0
  6235                           
  6236                           ; 1 bytes @ 0x68
  6237  0000C8                     	ds	1
  6238  0000C9                     findNodes@i:
  6239                           	opt stack 0
  6240                           
  6241                           ; 1 bytes @ 0x69
  6242  0000C9                     	ds	1
  6243  0000CA                     ??_doModeVerbose:
  6244                           
  6245                           ; 0 bytes @ 0x6A
  6246  0000CA                     	ds	20
  6247  0000DE                     
  6248                           ; 2 bytes @ 0x7E
  6249  0000DE                     	ds	2
  6250  0000E0                     
  6251                           ; 3 bytes @ 0x80
  6252  0000E0                     	ds	3
  6253  0000E3                     ??_main:
  6254                           
  6255                           ; 0 bytes @ 0x83
  6256  0000E3                     	ds	1
  6257  0000E4                     main@c:
  6258                           	opt stack 0
  6259                           
  6260                           ; 1 bytes @ 0x84
  6261  0000E4                     	ds	1
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           indf0	equ	0xFEF
  6270                           postinc0	equ	0xFEE
  6271                           fsr0h	equ	0xFEA
  6272                           fsr0l	equ	0xFE9
  6273                           wreg	equ	0xFE8
  6274                           indf1	equ	0xFE7
  6275                           postinc1	equ	0xFE6
  6276                           postdec1	equ	0xFE5
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           plusw2	equ	0xFDB
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287                           	psect	cstackCOMRAM
  6288  000001                     __pcstackCOMRAM:
  6289                           	opt stack 0
  6290  000001                     ?__RegsToCANID:
  6291                           	opt stack 0
  6292  000001                     ?i1_WriteTimer0:
  6293                           	opt stack 0
  6294  000001                     ?_fifo_write:
  6295                           	opt stack 0
  6296  000001                     ?_fifo_getFree:
  6297                           	opt stack 0
  6298  000001                     ?__ECANPointBuffer:
  6299                           	opt stack 0
  6300  000001                     ReadUSART@data:
  6301                           	opt stack 0
  6302  000001                     __RegsToCANID@ptr:
  6303                           	opt stack 0
  6304  000001                     fifo_write@f:
  6305                           	opt stack 0
  6306  000001                     fifo_getFree@f:
  6307                           	opt stack 0
  6308  000001                     i1WriteTimer0@timer0:
  6309                           	opt stack 0
  6310                           
  6311                           ; 2 bytes @ 0x0
  6312  000001                     	ds	2
  6313  000003                     ??_fifo_getFree:
  6314  000003                     __RegsToCANID@val:
  6315                           	opt stack 0
  6316  000003                     fifo_write@buf:
  6317                           	opt stack 0
  6318  000003                     i1WriteTimer0@timer:
  6319                           	opt stack 0
  6320                           
  6321                           ; 2 bytes @ 0x2
  6322  000003                     	ds	1
  6323  000004                     __ECANPointBuffer@b:
  6324                           	opt stack 0
  6325                           
  6326                           ; 1 bytes @ 0x3
  6327  000004                     	ds	1
  6328  000005                     __RegsToCANID@type:
  6329                           	opt stack 0
  6330  000005                     __ECANPointBuffer@pt:
  6331                           	opt stack 0
  6332  000005                     fifo_write@nbytes:
  6333                           	opt stack 0
  6334                           
  6335                           ; 4 bytes @ 0x4
  6336  000005                     	ds	1
  6337  000006                     ??__RegsToCANID:
  6338                           
  6339                           ; 0 bytes @ 0x5
  6340  000006                     	ds	2
  6341  000008                     __RegsToCANID@Value:
  6342                           	opt stack 0
  6343                           
  6344                           ; 2 bytes @ 0x7
  6345  000008                     	ds	1
  6346  000009                     ??_fifo_write:
  6347                           
  6348                           ; 0 bytes @ 0x8
  6349  000009                     	ds	1
  6350  00000A                     ?_ECANReceiveMessage:
  6351                           	opt stack 0
  6352  00000A                     ECANReceiveMessage@id:
  6353                           	opt stack 0
  6354                           
  6355                           ; 2 bytes @ 0x9
  6356  00000A                     	ds	2
  6357  00000C                     ECANReceiveMessage@data:
  6358                           	opt stack 0
  6359                           
  6360                           ; 2 bytes @ 0xB
  6361  00000C                     	ds	1
  6362  00000D                     fifo_write@p:
  6363                           	opt stack 0
  6364                           
  6365                           ; 2 bytes @ 0xC
  6366  00000D                     	ds	1
  6367  00000E                     ECANReceiveMessage@dataLen:
  6368                           	opt stack 0
  6369                           
  6370                           ; 1 bytes @ 0xD
  6371  00000E                     	ds	1
  6372  00000F                     ECANReceiveMessage@msgFlags:
  6373                           	opt stack 0
  6374  00000F                     fifo_write@i:
  6375                           	opt stack 0
  6376                           
  6377                           ; 4 bytes @ 0xE
  6378  00000F                     	ds	1
  6379  000010                     ECANReceiveMessage@savedPtr:
  6380                           	opt stack 0
  6381                           
  6382                           ; 2 bytes @ 0xF
  6383  000010                     	ds	2
  6384  000012                     ECANReceiveMessage@i:
  6385                           	opt stack 0
  6386                           
  6387                           ; 1 bytes @ 0x11
  6388  000012                     	ds	1
  6389  000013                     ECANReceiveMessage@mode:
  6390                           	opt stack 0
  6391                           
  6392                           ; 1 bytes @ 0x12
  6393  000013                     	ds	1
  6394  000014                     ECANReceiveMessage@temp:
  6395                           	opt stack 0
  6396                           
  6397                           ; 1 bytes @ 0x13
  6398  000014                     	ds	1
  6399  000015                     ECANReceiveMessage@ptr:
  6400                           	opt stack 0
  6401                           
  6402                           ; 2 bytes @ 0x14
  6403  000015                     	ds	2
  6404  000017                     ??_Interrupt:
  6405                           
  6406                           ; 0 bytes @ 0x16
  6407  000017                     	ds	9
  6408  000020                     Interrupt@c:
  6409                           	opt stack 0
  6410                           
  6411                           ; 1 bytes @ 0x1F
  6412  000020                     	ds	1
  6413  000021                     Interrupt@fail:
  6414                           	opt stack 0
  6415                           
  6416                           ; 1 bytes @ 0x20
  6417  000021                     	ds	1
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           indf0	equ	0xFEF
  6426                           postinc0	equ	0xFEE
  6427                           fsr0h	equ	0xFEA
  6428                           fsr0l	equ	0xFE9
  6429                           wreg	equ	0xFE8
  6430                           indf1	equ	0xFE7
  6431                           postinc1	equ	0xFE6
  6432                           postdec1	equ	0xFE5
  6433                           fsr1h	equ	0xFE2
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           plusw2	equ	0xFDB
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;;
  6444 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6445 ;;
  6446 ;; *************** function _main *****************
  6447 ;; Defined at:
  6448 ;;		line 270 in file "main.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  argc            2  126[BANK0 ] int 
  6451 ;;  argv            3  128[BANK0 ] PTR PTR unsigned char 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  c               1  132[BANK0 ] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  2  126[BANK0 ] int 
  6456 ;; Registers used:
  6457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6463 ;;      Params:         0       5       0       0       0       0       0
  6464 ;;      Locals:         0       1       0       0       0       0       0
  6465 ;;      Temps:          0       1       0       0       0       0       0
  6466 ;;      Totals:         0       7       0       0       0       0       0
  6467 ;;Total ram usage:        7 bytes
  6468 ;; Hardware stack levels required when called:   11
  6469 ;; This function calls:
  6470 ;;		_fifo_init
  6471 ;;		_init_crc8
  6472 ;;		_Read_b_eep
  6473 ;;		_vscp_restoreDefaults
  6474 ;;		_init
  6475 ;;		_putsUSART
  6476 ;;		_printFirmwareVersion
  6477 ;;		_printMode
  6478 ;;		_fifo_read
  6479 ;;		_doModeVerbose
  6480 ;;		_doModeVscp
  6481 ;;		_doModeSLCAN
  6482 ;;		_doModeVscpNode
  6483 ;; This function is called by:
  6484 ;;		Startup code after reset
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           	psect	text0
  6489  003A82                     __ptext0:
  6490                           	opt stack 0
  6491  003A82                     _main:
  6492                           	opt stack 19
  6493                           
  6494                           ;main.c: 272: caps.maxVscpFrames = 1;
  6495                           
  6496                           ;incstack = 0
  6497                           ;incstack = 0
  6498  003A82  0E01               	movlw	1
  6499  003A84  0101               	movlb	1	; () banked
  6500  003A86  6FEF               	movwf	_caps& (0+255),b
  6501                           
  6502                           ;main.c: 273: caps.maxCanalFrames = 1;
  6503  003A88  6FF0               	movwf	(_caps+1)& (0+255),b
  6504                           
  6505                           ; BSR set to: 1
  6506                           ;main.c: 278: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6507  003A8A  0E01               	movlw	high _serialInputFifo
  6508  003A8C  0100               	movlb	0	; () banked
  6509  003A8E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6510  003A90  0EDB               	movlw	low _serialInputFifo
  6511  003A92  6F60               	movwf	?_fifo_init& (0+255),b
  6512  003A94  0E02               	movlw	high _serial_inputBuffer
  6513  003A96  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6514  003A98  0E00               	movlw	low _serial_inputBuffer
  6515  003A9A  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6516  003A9C  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6517  003A9E  0E80               	movlw	128
  6518  003AA0  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6519  003AA2  ECF8  F00B         	call	_fifo_init	;wreg free
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;main.c: 279: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6523  003AA6  0E01               	movlw	high _canInputFifo
  6524  003AA8  0100               	movlb	0	; () banked
  6525  003AAA  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6526  003AAC  0ECB               	movlw	low _canInputFifo
  6527  003AAE  6F60               	movwf	?_fifo_init& (0+255),b
  6528  003AB0  0E04               	movlw	high _can_inputBuffer
  6529  003AB2  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6530  003AB4  0E00               	movlw	low _can_inputBuffer
  6531  003AB6  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6532  003AB8  0E01               	movlw	1
  6533  003ABA  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6534  003ABC  0EEE               	movlw	238
  6535  003ABE  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6536  003AC0  ECF8  F00B         	call	_fifo_init	;wreg free
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;main.c: 282: init_crc8();
  6540  003AC4  ECAB  F00E         	call	_init_crc8	;wreg free
  6541                           
  6542                           ; BSR set to: 1
  6543                           ;main.c: 286: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6544                           ;main.c: 287: ( 0xaa != Read_b_eep(0x02) ) ) {
  6545  003AC8  0100               	movlb	0	; () banked
  6546  003ACA  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6547  003ACC  0E01               	movlw	1
  6548  003ACE  6F60               	movwf	?_Read_b_eep& (0+255),b
  6549  003AD0  EC6C  F00A         	call	_Read_b_eep	;wreg free
  6550  003AD4  0A55               	xorlw	85
  6551  003AD6  E108               	bnz	l13528
  6552  003AD8  0100               	movlb	0	; () banked
  6553  003ADA  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6554  003ADC  0E02               	movlw	2
  6555  003ADE  6F60               	movwf	?_Read_b_eep& (0+255),b
  6556  003AE0  EC6C  F00A         	call	_Read_b_eep	;wreg free
  6557  003AE4  0AAA               	xorlw	170
  6558  003AE6  A4D8               	btfss	status,2,c
  6559  003AE8                     l13528:
  6560                           
  6561                           ;main.c: 288: vscp_restoreDefaults();
  6562  003AE8  EC5F  F00A         	call	_vscp_restoreDefaults	;wreg free
  6563                           
  6564                           ;main.c: 289: }
  6565                           ;main.c: 292: init();
  6566  003AEC  EC9D  F00C         	call	_init	;wreg free
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;main.c: 296: _delay((unsigned long)((10)*(40000000/4000.0)));
  6570  003AF0  0E82               	movlw	130
  6571  003AF2  6FE3               	movwf	??_main& (0+255),b
  6572  003AF4  0EDD               	movlw	221
  6573  003AF6                     u22907:
  6574  003AF6  2EE8               	decfsz	wreg,f,c
  6575  003AF8  D7FE               	goto	u22907
  6576  003AFA  2FE3               	decfsz	??_main& (0+255),f,b
  6577  003AFC  D7FC               	goto	u22907
  6578  003AFE  D000               	nop2	
  6579                           
  6580                           ;main.c: 300: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6581  003B00  0E76               	movlw	high STR_1
  6582  003B02  0100               	movlb	0	; () banked
  6583  003B04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6584  003B06  0E16               	movlw	low STR_1
  6585  003B08  6F61               	movwf	?_putsUSART& (0+255),b
  6586  003B0A  EC33  F00D         	call	_putsUSART	;wreg free
  6587                           
  6588                           ;main.c: 301: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6589  003B0E  0E6F               	movlw	high STR_2
  6590  003B10  0100               	movlb	0	; () banked
  6591  003B12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6592  003B14  0E92               	movlw	low STR_2
  6593  003B16  6F61               	movwf	?_putsUSART& (0+255),b
  6594  003B18  EC33  F00D         	call	_putsUSART	;wreg free
  6595                           
  6596                           ;main.c: 302: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6597  003B1C  0E76               	movlw	high STR_3
  6598  003B1E  0100               	movlb	0	; () banked
  6599  003B20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6600  003B22  0EA8               	movlw	low STR_3
  6601  003B24  6F61               	movwf	?_putsUSART& (0+255),b
  6602  003B26  EC33  F00D         	call	_putsUSART	;wreg free
  6603                           
  6604                           ;main.c: 303: printFirmwareVersion();
  6605  003B2A  EC58  F010         	call	_printFirmwareVersion	;wreg free
  6606                           
  6607                           ;main.c: 304: printMode();
  6608  003B2E  EC95  F00F         	call	_printMode	;wreg free
  6609                           
  6610                           ;main.c: 308: if ( 0 != mode ) {
  6611  003B32  5032               	movf	_mode,w,c
  6612  003B34  E037               	bz	l13562
  6613                           
  6614                           ;main.c: 310: uint8_t c;
  6615                           ;main.c: 312: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6616  003B36  0E70               	movlw	high STR_4
  6617  003B38  0100               	movlb	0	; () banked
  6618  003B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6619  003B3C  0EAB               	movlw	low STR_4
  6620  003B3E  6F61               	movwf	?_putsUSART& (0+255),b
  6621  003B40  EC33  F00D         	call	_putsUSART	;wreg free
  6622                           
  6623                           ;main.c: 314: timekeeper = 0;
  6624  003B44  6A22               	clrf	_timekeeper,c	;volatile
  6625  003B46  6A23               	clrf	_timekeeper+1,c	;volatile
  6626  003B48  6A24               	clrf	_timekeeper+2,c	;volatile
  6627  003B4A  6A25               	clrf	_timekeeper+3,c	;volatile
  6628                           
  6629                           ;main.c: 315: ledFunctionality = 6;
  6630  003B4C  0E06               	movlw	6
  6631  003B4E  6E31               	movwf	_ledFunctionality,c
  6632                           
  6633                           ;main.c: 316: while (timekeeper < 3000) {
  6634  003B50  D020               	goto	l13560
  6635  003B52                     l437:
  6636  003B52  0004               	clrwdt		;# 
  6637                           
  6638                           ;main.c: 318: (INTCONbits.GIE = 0);
  6639  003B54  9EF2               	bcf	intcon,7,c	;volatile
  6640                           
  6641                           ;main.c: 319: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6642  003B56  0E01               	movlw	high _serialInputFifo
  6643  003B58  0100               	movlb	0	; () banked
  6644  003B5A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6645  003B5C  0EDB               	movlw	low _serialInputFifo
  6646  003B5E  6F60               	movwf	?_fifo_read& (0+255),b
  6647  003B60  0E00               	movlw	high main@c
  6648  003B62  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6649  003B64  0EE4               	movlw	low main@c
  6650  003B66  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6651  003B68  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6652  003B6A  0E01               	movlw	1
  6653  003B6C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6654  003B6E  EC4B  F015         	call	_fifo_read	;wreg free
  6655  003B72  0560               	decf	?_fifo_read& (0+255),w,b
  6656  003B74  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6657  003B76  E10C               	bnz	l438
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;main.c: 320: (INTCONbits.GIE = 1);
  6661  003B78  8EF2               	bsf	intcon,7,c	;volatile
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;main.c: 321: if ('v' == c) {
  6665  003B7A  51E4               	movf	main@c& (0+255),w,b
  6666  003B7C  0A76               	xorlw	118
  6667  003B7E  E108               	bnz	l438
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;main.c: 322: mode = 0;
  6671  003B80  6A32               	clrf	_mode,c
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;main.c: 323: putsUSART((char *) "Temporary verbose mode set\r\n");
  6675  003B82  0E77               	movlw	high STR_5
  6676  003B84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6677  003B86  0ECF               	movlw	low STR_5
  6678  003B88  6F61               	movwf	?_putsUSART& (0+255),b
  6679  003B8A  EC33  F00D         	call	_putsUSART	;wreg free
  6680                           
  6681                           ;main.c: 324: break;
  6682  003B8E  D00A               	goto	l13562
  6683  003B90                     l438:
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 325: }
  6687                           ;main.c: 326: }
  6688                           ;main.c: 327: (INTCONbits.GIE = 1);
  6689  003B90  8EF2               	bsf	intcon,7,c	;volatile
  6690  003B92                     l13560:
  6691  003B92  0EB8               	movlw	184
  6692  003B94  5C22               	subwf	_timekeeper,w,c	;volatile
  6693  003B96  0E0B               	movlw	11
  6694  003B98  5823               	subwfb	_timekeeper+1,w,c	;volatile
  6695  003B9A  0E00               	movlw	0
  6696  003B9C  5824               	subwfb	_timekeeper+2,w,c	;volatile
  6697  003B9E  0E00               	movlw	0
  6698  003BA0  5825               	subwfb	_timekeeper+3,w,c	;volatile
  6699  003BA2  E3D7               	bnc	l437
  6700  003BA4                     l13562:
  6701                           
  6702                           ;main.c: 328: }
  6703                           ;main.c: 329: }
  6704                           ;main.c: 331: ledFunctionality = 1;
  6705  003BA4  0E01               	movlw	1
  6706  003BA6  6E31               	movwf	_ledFunctionality,c
  6707  003BA8                     l441:
  6708  003BA8  0004               	clrwdt		;# 
  6709                           
  6710                           ;main.c: 342: if (COMSTATbits.TXBO) {
  6711  003BAA  AA74               	btfss	3956,5,c	;volatile
  6712  003BAC  D002               	goto	l442
  6713                           
  6714                           ;main.c: 344: ledFunctionality = 6;
  6715  003BAE  0E06               	movlw	6
  6716  003BB0  D009               	goto	L1
  6717  003BB2                     l442:
  6718                           
  6719                           ;main.c: 346: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6720  003BB2  B874               	btfsc	3956,4,c	;volatile
  6721  003BB4  D002               	goto	l13570
  6722  003BB6  A674               	btfss	3956,3,c	;volatile
  6723  003BB8  D002               	goto	l444
  6724  003BBA                     l13570:
  6725                           
  6726                           ;main.c: 348: ledFunctionality = 5;
  6727  003BBA  0E05               	movlw	5
  6728  003BBC  D003               	goto	L1
  6729  003BBE                     l444:
  6730                           
  6731                           ;main.c: 352: ledFunctionality = 4;
  6732  003BBE  0E04               	movlw	4
  6733                           
  6734                           ;main.c: 350: else if (COMSTATbits.EWARN) {
  6735  003BC0  A074               	btfss	3956,0,c	;volatile
  6736                           
  6737                           ;main.c: 354: else {
  6738                           ;main.c: 356: ledFunctionality = 1;
  6739                           
  6740                           ;main.c: 353: }
  6741  003BC2  0E01               	movlw	1
  6742  003BC4                     L1:
  6743  003BC4  6E31               	movwf	_ledFunctionality,c
  6744                           
  6745                           ;main.c: 357: }
  6746                           ;main.c: 360: if (COMSTATbits.RXBnOVFL) {
  6747  003BC6  AC74               	btfss	3956,6,c	;volatile
  6748  003BC8  D007               	goto	l13582
  6749                           
  6750                           ;main.c: 361: can_receiveOverruns++;
  6751  003BCA  0101               	movlb	1	; () banked
  6752  003BCC  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6753  003BCE  0E00               	movlw	0
  6754  003BD0  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6755  003BD2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6756  003BD4  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6757                           
  6758                           ; BSR set to: 1
  6759                           ;main.c: 362: COMSTATbits.RXBnOVFL = 0;
  6760  003BD6  9C74               	bcf	3956,6,c	;volatile
  6761  003BD8                     l13582:
  6762                           
  6763                           ;main.c: 363: }
  6764                           ;main.c: 367: if ( RCSTAbits.OERR ) {
  6765  003BD8  A2AB               	btfss	4011,1,c	;volatile
  6766  003BDA  D002               	goto	l451
  6767                           
  6768                           ;main.c: 368: RCSTAbits.CREN = 0;
  6769  003BDC  98AB               	bcf	4011,4,c	;volatile
  6770                           
  6771                           ;main.c: 369: RCSTAbits.CREN = 1;
  6772  003BDE  88AB               	bsf	4011,4,c	;volatile
  6773  003BE0                     l451:
  6774                           
  6775                           ;main.c: 370: }
  6776                           ;main.c: 372: if (0 == mode) {
  6777  003BE0  6632               	tstfsz	_mode,c
  6778  003BE2  D003               	goto	l13588
  6779                           
  6780                           ;main.c: 373: doModeVerbose();
  6781  003BE4  EC77  F02B         	call	_doModeVerbose	;wreg free
  6782                           
  6783                           ;main.c: 374: }
  6784  003BE8  D7DF               	goto	l441
  6785  003BEA                     l13588:
  6786                           
  6787                           ;main.c: 375: else if (1 == mode) {
  6788  003BEA  0432               	decf	_mode,w,c
  6789  003BEC  E103               	bnz	l13592
  6790  003BEE                     l13590:
  6791                           
  6792                           ;main.c: 376: doModeVscp();
  6793  003BEE  EC77  F020         	call	_doModeVscp	;wreg free
  6794                           
  6795                           ;main.c: 377: }
  6796  003BF2  D7DA               	goto	l441
  6797  003BF4                     l13592:
  6798                           
  6799                           ;main.c: 378: else if (2 == mode) {
  6800  003BF4  5032               	movf	_mode,w,c
  6801  003BF6  0A02               	xorlw	2
  6802  003BF8  E103               	bnz	l13596
  6803                           
  6804                           ;main.c: 379: doModeSLCAN();
  6805  003BFA  ECEE  F025         	call	_doModeSLCAN	;wreg free
  6806                           
  6807                           ;main.c: 380: }
  6808  003BFE  D7D4               	goto	l441
  6809  003C00                     l13596:
  6810                           
  6811                           ;main.c: 381: else if (3 == mode) {
  6812  003C00  5032               	movf	_mode,w,c
  6813  003C02  0A03               	xorlw	3
  6814  003C04  E1F4               	bnz	l13590
  6815                           
  6816                           ;main.c: 382: doModeVscpNode();
  6817  003C06  EC5B  F00A         	call	_doModeVscpNode	;wreg free
  6818                           
  6819                           ;main.c: 383: }
  6820  003C0A  D7CE               	goto	l441
  6821  003C0C                     __end_of_main:
  6822                           	opt stack 0
  6823                           tblptru	equ	0xFF8
  6824                           tblptrh	equ	0xFF7
  6825                           tblptrl	equ	0xFF6
  6826                           tablat	equ	0xFF5
  6827                           prodh	equ	0xFF4
  6828                           prodl	equ	0xFF3
  6829                           intcon	equ	0xFF2
  6830                           indf0	equ	0xFEF
  6831                           postinc0	equ	0xFEE
  6832                           fsr0h	equ	0xFEA
  6833                           fsr0l	equ	0xFE9
  6834                           wreg	equ	0xFE8
  6835                           indf1	equ	0xFE7
  6836                           postinc1	equ	0xFE6
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           plusw2	equ	0xFDB
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function _doModeVscpNode *****************
  6849 ;; Defined at:
  6850 ;;		line 1580 in file "main.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;		None
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;		None               void
  6857 ;; Registers used:
  6858 ;;		None
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6864 ;;      Params:         0       0       0       0       0       0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0
  6866 ;;      Temps:          0       0       0       0       0       0       0
  6867 ;;      Totals:         0       0       0       0       0       0       0
  6868 ;;Total ram usage:        0 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    3
  6871 ;; This function calls:
  6872 ;;		Nothing
  6873 ;; This function is called by:
  6874 ;;		_main
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text1
  6879  0014B6                     __ptext1:
  6880                           	opt stack 0
  6881  0014B6                     _doModeVscpNode:
  6882                           	opt stack 26
  6883                           
  6884                           ;incstack = 0
  6885                           ;incstack = 0
  6886  0014B6  0012               	return	
  6887  0014B8                     __end_of_doModeVscpNode:
  6888                           	opt stack 0
  6889                           tblptru	equ	0xFF8
  6890                           tblptrh	equ	0xFF7
  6891                           tblptrl	equ	0xFF6
  6892                           tablat	equ	0xFF5
  6893                           prodh	equ	0xFF4
  6894                           prodl	equ	0xFF3
  6895                           intcon	equ	0xFF2
  6896                           indf0	equ	0xFEF
  6897                           postinc0	equ	0xFEE
  6898                           fsr0h	equ	0xFEA
  6899                           fsr0l	equ	0xFE9
  6900                           wreg	equ	0xFE8
  6901                           indf1	equ	0xFE7
  6902                           postinc1	equ	0xFE6
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _doModeSLCAN *****************
  6915 ;; Defined at:
  6916 ;;		line 1362 in file "main.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  id              4   61[BANK0 ] unsigned long 
  6921 ;;  dlc             1   65[BANK0 ] unsigned char 
  6922 ;;  rv              1   67[BANK0 ] enum E15660
  6923 ;;  c               1   66[BANK0 ] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;		None               void
  6926 ;; Registers used:
  6927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : F/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         0       0       0       0       0       0       0
  6934 ;;      Locals:         0       7       0       0       0       0       0
  6935 ;;      Temps:          0       7       0       0       0       0       0
  6936 ;;      Totals:         0      14       0       0       0       0       0
  6937 ;;Total ram usage:       14 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    7
  6940 ;; This function calls:
  6941 ;;		_putsUSART
  6942 ;;		_fifo_read
  6943 ;;		_Busy_eep
  6944 ;;		_Write_b_eep
  6945 ;;		_ECANSetOperationMode
  6946 ;;		_memset
  6947 ;;		_receiveSendEventSLCAN
  6948 ;;		_strlen
  6949 ;;		_hexStringToBytes
  6950 ;;		_memcpy
  6951 ;;		_sendCANFrame
  6952 ;; This function is called by:
  6953 ;;		_main
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           	psect	text2
  6958  004BDC                     __ptext2:
  6959                           	opt stack 0
  6960  004BDC                     _doModeSLCAN:
  6961                           	opt stack 22
  6962                           
  6963                           ;main.c: 1363: uint8_t c;
  6964                           ;main.c: 1364: BOOL rv = 0;
  6965                           
  6966                           ;incstack = 0
  6967                           ;incstack = 0
  6968  004BDC  0100               	movlb	0	; () banked
  6969  004BDE  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;main.c: 1367: receiveSendEventSLCAN();
  6973  004BE0  EC06  F01E         	call	_receiveSendEventSLCAN	;wreg free
  6974                           
  6975                           ;main.c: 1370: (INTCONbits.GIE = 0);
  6976  004BE4  9EF2               	bcf	intcon,7,c	;volatile
  6977                           
  6978                           ;main.c: 1372: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6979  004BE6  0E01               	movlw	high _serialInputFifo
  6980  004BE8  0100               	movlb	0	; () banked
  6981  004BEA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6982  004BEC  0EDB               	movlw	low _serialInputFifo
  6983  004BEE  6F60               	movwf	?_fifo_read& (0+255),b
  6984  004BF0  0E00               	movlw	high doModeSLCAN@c
  6985  004BF2  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6986  004BF4  0EA2               	movlw	low doModeSLCAN@c
  6987  004BF6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6988  004BF8  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6989  004BFA  0E01               	movlw	1
  6990  004BFC  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6991  004BFE  EC4B  F015         	call	_fifo_read	;wreg free
  6992  004C02  0560               	decf	?_fifo_read& (0+255),w,b
  6993  004C04  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6994  004C06  E001 D1CA          	bnz	l14710
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;main.c: 1375: (INTCONbits.GIE = 1);
  6998  004C0A  8EF2               	bsf	intcon,7,c	;volatile
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;main.c: 1377: if (0x0d != c) {
  7002  004C0C  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7003  004C0E  0A0D               	xorlw	13
  7004  004C10  E101 D179          	bz	l14698
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;main.c: 1378: cmdbuf[ pos ] = c;
  7008  004C14  0E2B               	movlw	low _cmdbuf
  7009  004C16  2434               	addwf	_pos,w,c
  7010  004C18  6ED9               	movwf	fsr2l,c
  7011  004C1A  6ADA               	clrf	fsr2h,c
  7012  004C1C  0E01               	movlw	high _cmdbuf
  7013  004C1E  22DA               	addwfc	fsr2h,f,c
  7014  004C20  0100               	movlb	0	; () banked
  7015  004C22  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;main.c: 1379: pos++;
  7019  004C26  2A34               	incf	_pos,f,c
  7020  004C28  D1BB               	goto	l742
  7021  004C2A                     l14570:
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;main.c: 1387: if (1 == strlen(cmdbuf)) {
  7025  004C2A  0E01               	movlw	high _cmdbuf
  7026  004C2C  0100               	movlb	0	; () banked
  7027  004C2E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7028  004C30  0E2B               	movlw	low _cmdbuf
  7029  004C32  6F60               	movwf	?_strlen& (0+255),b
  7030  004C34  EC18  F00C         	call	_strlen	;wreg free
  7031  004C38  0560               	decf	?_strlen& (0+255),w,b
  7032  004C3A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7033  004C3C  E001 D192          	bnz	l14700
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;main.c: 1388: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7037  004C40  0E7A               	movlw	high STR_147
  7038  004C42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7039  004C44  0E18               	movlw	low STR_147
  7040  004C46  6F61               	movwf	?_putsUSART& (0+255),b
  7041  004C48  EC33  F00D         	call	_putsUSART	;wreg free
  7042  004C4C                     l14574:
  7043                           
  7044                           ;main.c: 1389: rv = 1;
  7045  004C4C  0E01               	movlw	1
  7046  004C4E  D114               	goto	L4
  7047  004C50                     l14576:
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;main.c: 1395: if (1 == strlen(cmdbuf)) {
  7051  004C50  0E01               	movlw	high _cmdbuf
  7052  004C52  0100               	movlb	0	; () banked
  7053  004C54  6F61               	movwf	(?_strlen+1)& (0+255),b
  7054  004C56  0E2B               	movlw	low _cmdbuf
  7055  004C58  6F60               	movwf	?_strlen& (0+255),b
  7056  004C5A  EC18  F00C         	call	_strlen	;wreg free
  7057  004C5E  0560               	decf	?_strlen& (0+255),w,b
  7058  004C60  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7059  004C62  E001 D17F          	bnz	l14700
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;main.c: 1396: putsUSART((char *) "V1011\r\n");
  7063  004C66  0E7B               	movlw	high STR_148
  7064  004C68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7065  004C6A  0EBC               	movlw	low STR_148
  7066  004C6C  6F61               	movwf	?_putsUSART& (0+255),b
  7067  004C6E  EC33  F00D         	call	_putsUSART	;wreg free
  7068  004C72  D7EC               	goto	l14574
  7069  004C74                     l14582:
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;main.c: 1403: if (1 == strlen(cmdbuf)) {
  7073  004C74  0E01               	movlw	high _cmdbuf
  7074  004C76  0100               	movlb	0	; () banked
  7075  004C78  6F61               	movwf	(?_strlen+1)& (0+255),b
  7076  004C7A  0E2B               	movlw	low _cmdbuf
  7077  004C7C  6F60               	movwf	?_strlen& (0+255),b
  7078  004C7E  EC18  F00C         	call	_strlen	;wreg free
  7079  004C82  0560               	decf	?_strlen& (0+255),w,b
  7080  004C84  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7081  004C86  E001 D16D          	bnz	l14700
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;main.c: 1404: putsUSART((char *) "N1977\r\n");
  7085  004C8A  0E7B               	movlw	high STR_149
  7086  004C8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7087  004C8E  0EC4               	movlw	low STR_149
  7088  004C90  6F61               	movwf	?_putsUSART& (0+255),b
  7089  004C92  EC33  F00D         	call	_putsUSART	;wreg free
  7090  004C96  D7DA               	goto	l14574
  7091  004C98                     l14588:
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;main.c: 1413: bInitiated = 1;
  7095  004C98  0E01               	movlw	1
  7096  004C9A  6E2D               	movwf	_bInitiated,c
  7097                           
  7098                           ;main.c: 1414: rv = 1;
  7099  004C9C  D0B8               	goto	L3
  7100  004C9E                     l752:
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;main.c: 1419: if (!bOpen) {
  7104  004C9E  662E               	tstfsz	_bOpen,c
  7105  004CA0  D003               	goto	l14592
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;main.c: 1420: bInitiated = 1;
  7109  004CA2  0E01               	movlw	1
  7110  004CA4  6E2D               	movwf	_bInitiated,c
  7111                           
  7112                           ;main.c: 1421: rv = 1;
  7113  004CA6  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7114  004CA8                     l14592:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;main.c: 1426: if (1 == strlen(cmdbuf)) {
  7118  004CA8  0E01               	movlw	high _cmdbuf
  7119  004CAA  0100               	movlb	0	; () banked
  7120  004CAC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7121  004CAE  0E2B               	movlw	low _cmdbuf
  7122  004CB0  6F60               	movwf	?_strlen& (0+255),b
  7123  004CB2  EC18  F00C         	call	_strlen	;wreg free
  7124  004CB6  0560               	decf	?_strlen& (0+255),w,b
  7125  004CB8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7126  004CBA  E001 D153          	bnz	l14700
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 1427: if (!bOpen && bInitiated) {
  7130  004CBE  662E               	tstfsz	_bOpen,c
  7131  004CC0  D151               	goto	l14700
  7132                           
  7133                           ; BSR set to: 0
  7134  004CC2  502D               	movf	_bInitiated,w,c
  7135  004CC4  E101 D14E          	bz	l14700
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;main.c: 1428: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7139  004CC8  0E00               	movlw	0
  7140  004CCA  EC93  F00A         	call	_ECANSetOperationMode
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;main.c: 1429: bOpen = 1;
  7144  004CCE  0E01               	movlw	1
  7145  004CD0  6E2E               	movwf	_bOpen,c
  7146  004CD2  D7BC               	goto	l14574
  7147  004CD4                     l14604:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;main.c: 1437: if (1 == strlen(cmdbuf)) {
  7151  004CD4  0E01               	movlw	high _cmdbuf
  7152  004CD6  0100               	movlb	0	; () banked
  7153  004CD8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7154  004CDA  0E2B               	movlw	low _cmdbuf
  7155  004CDC  6F60               	movwf	?_strlen& (0+255),b
  7156  004CDE  EC18  F00C         	call	_strlen	;wreg free
  7157  004CE2  0560               	decf	?_strlen& (0+255),w,b
  7158  004CE4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7159  004CE6  E001 D13D          	bnz	l14700
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;main.c: 1438: if (bOpen) {
  7163  004CEA  502E               	movf	_bOpen,w,c
  7164  004CEC  E0AF               	bz	l14574
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;main.c: 1439: ECANSetOperationMode(0x20);
  7168  004CEE  0E20               	movlw	32
  7169  004CF0  EC93  F00A         	call	_ECANSetOperationMode
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;main.c: 1440: bOpen = 0;
  7173  004CF4  6A2E               	clrf	_bOpen,c
  7174  004CF6  D7AA               	goto	l14574
  7175  004CF8                     l14614:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;main.c: 1453: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7179  004CF8  502E               	movf	_bOpen,w,c
  7180  004CFA  E101 D133          	bz	l14700
  7181                           
  7182                           ; BSR set to: 0
  7183  004CFE  0E01               	movlw	high _cmdbuf
  7184  004D00  0100               	movlb	0	; () banked
  7185  004D02  6F61               	movwf	(?_strlen+1)& (0+255),b
  7186  004D04  0E2B               	movlw	low _cmdbuf
  7187  004D06  6F60               	movwf	?_strlen& (0+255),b
  7188  004D08  EC18  F00C         	call	_strlen	;wreg free
  7189  004D0C  0E0A               	movlw	10
  7190  004D0E  5D60               	subwf	?_strlen& (0+255),w,b
  7191  004D10  0E00               	movlw	0
  7192  004D12  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7193  004D14  E201 D126          	bnc	l14700
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;main.c: 1455: uint32_t id;
  7197                           ;main.c: 1456: uint8_t dlc;
  7198                           ;main.c: 1458: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7199  004D18  0E01               	movlw	high _wrkbuf
  7200  004D1A  0100               	movlb	0	; () banked
  7201  004D1C  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7202  004D1E  0E7B               	movlw	low _wrkbuf
  7203  004D20  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7204  004D22  0E50               	movlw	80
  7205  004D24  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7206  004D26  0E01               	movlw	high _cmdbuf
  7207  004D28  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7208  004D2A  0E2B               	movlw	low _cmdbuf
  7209  004D2C  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7210  004D2E  EC34  F011         	call	_hexStringToBytes	;wreg free
  7211  004D32  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7212  004D34  0E05               	movlw	5
  7213  004D36  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7214  004D38  E201 D114          	bnc	l14700
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;main.c: 1460: }
  7218                           ;main.c: 1462: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7219  004D3C  C17E  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7220  004D40  0E08               	movlw	8
  7221  004D42  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7222  004D44  C17D  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7223  004D48  0E10               	movlw	16
  7224  004D4A  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7225  004D4C  C17C  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7226  004D50  0E18               	movlw	24
  7227  004D52  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7228  004D54  C17B  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7229  004D58  0100               	movlb	0	; () banked
  7230  004D5A  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7231  004D5C  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7232  004D5E  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7233  004D60  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7234  004D62  D001               	goto	u19600
  7235  004D64                     u19605:
  7236  004D64  D91E               	call	PL80	;call to abstracted procedure
  7237  004D66                     u19600:
  7238  004D66  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7239  004D68  D7FD               	goto	u19605
  7240  004D6A  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7241  004D6C  D001               	goto	u19610
  7242  004D6E                     u19615:
  7243  004D6E  D919               	call	PL80	;call to abstracted procedure
  7244  004D70                     u19610:
  7245  004D70  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7246  004D72  D7FD               	goto	u19615
  7247  004D74  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7248  004D76  D001               	goto	u19620
  7249  004D78                     u19625:
  7250  004D78  D914               	call	PL80	;call to abstracted procedure
  7251  004D7A                     u19620:
  7252  004D7A  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7253  004D7C  D7FD               	goto	u19625
  7254  004D7E  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7255  004D82  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7256  004D86  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7257  004D8A  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;main.c: 1463: dlc = vscpData[4];
  7261  004D8E  C1E7  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;main.c: 1466: if (dlc > 8) break;
  7265  004D92  0E08               	movlw	8
  7266  004D94  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7267  004D96  D001               	goto	l14630
  7268  004D98  D0E5               	goto	l14700
  7269  004D9A                     l14630:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;main.c: 1467: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7273  004D9A  90D8               	bcf	status,0,c
  7274  004D9C  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7275  004D9E  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7276  004DA0  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7277  004DA2  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7278  004DA4  0E0A               	movlw	10
  7279  004DA6  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7280  004DA8  0E00               	movlw	0
  7281  004DAA  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7282  004DAC  0E01               	movlw	high _cmdbuf
  7283  004DAE  0100               	movlb	0	; () banked
  7284  004DB0  6F61               	movwf	(?_strlen+1)& (0+255),b
  7285  004DB2  0E2B               	movlw	low _cmdbuf
  7286  004DB4  6F60               	movwf	?_strlen& (0+255),b
  7287  004DB6  EC18  F00C         	call	_strlen	;wreg free
  7288  004DBA  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7289  004DBC  5D60               	subwf	?_strlen& (0+255),w,b
  7290  004DBE  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7291  004DC0  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7292  004DC2  E201 D0CF          	bnc	l14700
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;main.c: 1469: memcpy(vscpData, vscpData + 5, dlc);
  7296  004DC6  0E01               	movlw	high _vscpData
  7297  004DC8  0100               	movlb	0	; () banked
  7298  004DCA  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7299  004DCC  0EE3               	movlw	low _vscpData
  7300  004DCE  6F60               	movwf	?_memcpy& (0+255),b
  7301  004DD0  0EE8               	movlw	low (_vscpData+5)
  7302  004DD2  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7303  004DD4  0E01               	movlw	high (_vscpData+5)
  7304  004DD6  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7305  004DD8  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7306  004DDC  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7307  004DE0  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7308  004DE4  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7309  004DE6  EC38  F00C         	call	_memcpy	;wreg free
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;main.c: 1471: rv = sendCANFrame(id, dlc, vscpData);
  7313  004DEA  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7314  004DEE  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7315  004DF2  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7316  004DF6  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7317  004DFA  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7318  004DFE  0E01               	movlw	high _vscpData
  7319  004E00  0100               	movlb	0	; () banked
  7320  004E02  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7321  004E04  0EE3               	movlw	low _vscpData
  7322  004E06  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7323  004E08  EC7E  F00B         	call	_sendCANFrame	;wreg free
  7324  004E0C  D035               	goto	L4
  7325  004E0E                     L3:
  7326  004E0E  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7327  004E10  D0A9               	goto	l14700
  7328  004E12                     l14638:
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;main.c: 1486: if (bOpen && (strlen(cmdbuf) == 1)) {
  7332  004E12  502E               	movf	_bOpen,w,c
  7333  004E14  E101 D0A6          	bz	l14700
  7334                           
  7335                           ; BSR set to: 0
  7336  004E18  0E01               	movlw	high _cmdbuf
  7337  004E1A  0100               	movlb	0	; () banked
  7338  004E1C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7339  004E1E  0E2B               	movlw	low _cmdbuf
  7340  004E20  6F60               	movwf	?_strlen& (0+255),b
  7341  004E22  EC18  F00C         	call	_strlen	;wreg free
  7342  004E26  0560               	decf	?_strlen& (0+255),w,b
  7343  004E28  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7344  004E2A  E001 D09B          	bnz	l14700
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;main.c: 1487: putsUSART((char *) "F00\r\n");
  7348  004E2E  0E7C               	movlw	high STR_150
  7349  004E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7350  004E32  0E68               	movlw	low STR_150
  7351  004E34  6F61               	movwf	?_putsUSART& (0+255),b
  7352  004E36  EC33  F00D         	call	_putsUSART	;wreg free
  7353  004E3A  D094               	goto	l14700
  7354  004E3C                     l14648:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;main.c: 1503: if (2 == strlen(cmdbuf)) {
  7358  004E3C  0E01               	movlw	high _cmdbuf
  7359  004E3E  0100               	movlb	0	; () banked
  7360  004E40  6F61               	movwf	(?_strlen+1)& (0+255),b
  7361  004E42  0E2B               	movlw	low _cmdbuf
  7362  004E44  6F60               	movwf	?_strlen& (0+255),b
  7363  004E46  EC18  F00C         	call	_strlen	;wreg free
  7364  004E4A  5160               	movf	?_strlen& (0+255),w,b
  7365  004E4C  0A02               	xorlw	2
  7366  004E4E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7367  004E50  E001 D088          	bnz	l14700
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;main.c: 1504: if (!bOpen) {
  7371  004E54  662E               	tstfsz	_bOpen,c
  7372  004E56  D086               	goto	l14700
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;main.c: 1505: if ('0' == cmdbuf[1]) {
  7376  004E58  0101               	movlb	1	; () banked
  7377  004E5A  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7378  004E5C  0A30               	xorlw	48
  7379  004E5E  E10E               	bnz	l14660
  7380                           
  7381                           ; BSR set to: 1
  7382                           ;main.c: 1506: nTimeStamp = 0;
  7383  004E60  6A33               	clrf	_nTimeStamp,c
  7384                           
  7385                           ; BSR set to: 1
  7386                           ;main.c: 1508: (Busy_eep(), Write_b_eep(0x05,0));
  7387  004E62  EC5C  F00A         	call	_Busy_eep	;wreg free
  7388  004E66  0100               	movlb	0	; () banked
  7389  004E68  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7390  004E6A  0E05               	movlw	5
  7391  004E6C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7392  004E6E  0E00               	movlw	0
  7393  004E70  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7394  004E72  EC2C  F00B         	call	_Write_b_eep	;wreg free
  7395  004E76  D6EA               	goto	l14574
  7396  004E78                     L4:
  7397  004E78  0100               	movlb	0	; () banked
  7398  004E7A  D7C9               	goto	L3
  7399  004E7C                     l14660:
  7400                           
  7401                           ; BSR set to: 1
  7402  004E7C  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7403  004E7E  0A31               	xorlw	49
  7404  004E80  E10D               	bnz	l777
  7405                           
  7406                           ; BSR set to: 1
  7407                           ;main.c: 1511: nTimeStamp = 1;
  7408  004E82  0E01               	movlw	1
  7409  004E84  6E33               	movwf	_nTimeStamp,c
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;main.c: 1513: (Busy_eep(), Write_b_eep(0x05,1));
  7413  004E86  EC5C  F00A         	call	_Busy_eep	;wreg free
  7414  004E8A  0100               	movlb	0	; () banked
  7415  004E8C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7416  004E8E  0E05               	movlw	5
  7417  004E90  6F60               	movwf	?_Write_b_eep& (0+255),b
  7418  004E92  0E01               	movlw	1
  7419  004E94  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7420  004E96  EC2C  F00B         	call	_Write_b_eep	;wreg free
  7421  004E9A  D6D8               	goto	l14574
  7422  004E9C                     l777:
  7423                           
  7424                           ; BSR set to: 1
  7425                           ;main.c: 1517: rv = 0;
  7426  004E9C  0100               	movlb	0	; () banked
  7427  004E9E  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7428  004EA0  D061               	goto	l14700
  7429  004EA2                     l14668:
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;main.c: 1525: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7433  004EA2  EC5C  F00A         	call	_Busy_eep	;wreg free
  7434  004EA6  EC7F  F014         	call	PL60	;call to abstracted procedure
  7435  004EAA  EC2C  F00B         	call	_Write_b_eep	;wreg free
  7436  004EAE  00FF               	reset		;# 
  7437                           
  7438                           ;main.c: 1527: break;
  7439  004EB0  D059               	goto	l14700
  7440  004EB2                     l14672:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;main.c: 1531: if ( 'v' == cmdbuf[1] &&
  7444                           ;main.c: 1532: 's' == cmdbuf[2] &&
  7445                           ;main.c: 1533: 'c' == cmdbuf[3] &&
  7446                           ;main.c: 1534: 'p' == cmdbuf[4] ) {
  7447  004EB2  0101               	movlb	1	; () banked
  7448  004EB4  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7449  004EB6  0A76               	xorlw	118
  7450  004EB8  E10C               	bnz	l14682
  7451                           
  7452                           ; BSR set to: 1
  7453  004EBA  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  7454  004EBC  0A73               	xorlw	115
  7455  004EBE  E109               	bnz	l14682
  7456                           
  7457                           ; BSR set to: 1
  7458  004EC0  512E               	movf	(_cmdbuf+3)& (0+255),w,b
  7459  004EC2  0A63               	xorlw	99
  7460  004EC4  E106               	bnz	l14682
  7461                           
  7462                           ; BSR set to: 1
  7463  004EC6  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  7464  004EC8  0A70               	xorlw	112
  7465  004ECA  E103               	bnz	l14682
  7466                           
  7467                           ; BSR set to: 1
  7468                           ;main.c: 1535: mode = 1;
  7469  004ECC  0E01               	movlw	1
  7470  004ECE  6E32               	movwf	_mode,c
  7471                           
  7472                           ;main.c: 1536: }
  7473  004ED0  D049               	goto	l14700
  7474  004ED2                     l14682:
  7475                           
  7476                           ; BSR set to: 1
  7477                           ;main.c: 1537: else if ( 'v' == cmdbuf[1] &&
  7478                           ;main.c: 1538: 'e' == cmdbuf[2] &&
  7479                           ;main.c: 1539: 'r' == cmdbuf[3] &&
  7480                           ;main.c: 1540: 'b' == cmdbuf[4] ) {
  7481  004ED2  512C               	movf	(_cmdbuf+1)& (0+255),w,b
  7482  004ED4  0A76               	xorlw	118
  7483  004ED6  E146               	bnz	l14700
  7484                           
  7485                           ; BSR set to: 1
  7486  004ED8  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  7487  004EDA  0A65               	xorlw	101
  7488  004EDC  E143               	bnz	l14700
  7489                           
  7490                           ; BSR set to: 1
  7491  004EDE  512E               	movf	(_cmdbuf+3)& (0+255),w,b
  7492  004EE0  0A72               	xorlw	114
  7493  004EE2  E140               	bnz	l14700
  7494                           
  7495                           ; BSR set to: 1
  7496  004EE4  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  7497  004EE6  0A62               	xorlw	98
  7498  004EE8  E13D               	bnz	l14700
  7499                           
  7500                           ; BSR set to: 1
  7501                           ;main.c: 1541: mode = 0;
  7502  004EEA  6A32               	clrf	_mode,c
  7503  004EEC  D03B               	goto	l14700
  7504  004EEE                     l14692:
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;main.c: 1546: {
  7508                           ;main.c: 1548: if (0 == strlen(cmdbuf)) {
  7509  004EEE  0E01               	movlw	high _cmdbuf
  7510  004EF0  0100               	movlb	0	; () banked
  7511  004EF2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7512  004EF4  0E2B               	movlw	low _cmdbuf
  7513  004EF6  6F60               	movwf	?_strlen& (0+255),b
  7514  004EF8  EC18  F00C         	call	_strlen	;wreg free
  7515  004EFC  5161               	movf	(?_strlen+1)& (0+255),w,b
  7516  004EFE  1160               	iorwf	?_strlen& (0+255),w,b
  7517  004F00  E101 D6A4          	bz	l14574
  7518  004F04  D02F               	goto	l14700
  7519  004F06                     l14698:
  7520                           
  7521                           ; BSR set to: 0
  7522  004F06  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7523                           
  7524                           ; Switch size 1, requested type "space"
  7525                           ; Number of cases is 17, Range of values is 64 to 116
  7526                           ; switch strategies available:
  7527                           ; Name         Instructions Cycles
  7528                           ; simple_byte           52    27 (average)
  7529                           ;	Chosen strategy is simple_byte
  7530  004F08  0A40               	xorlw	64	; case 64
  7531  004F0A  E0D3               	bz	l14672
  7532  004F0C  0A02               	xorlw	2	; case 66
  7533  004F0E  E0C9               	bz	l14668
  7534  004F10  0A01               	xorlw	1	; case 67
  7535  004F12  E101 D6DF          	bz	l14604
  7536  004F16  0A05               	xorlw	5	; case 70
  7537  004F18  E101 D77B          	bz	l14638
  7538  004F1C  0A0C               	xorlw	12	; case 74
  7539  004F1E  E101 D684          	bz	l14570
  7540  004F22  0A07               	xorlw	7	; case 77
  7541  004F24  E101 D692          	bz	l14574
  7542  004F28  0A03               	xorlw	3	; case 78
  7543  004F2A  E101 D6A3          	bz	l14582
  7544  004F2E  0A01               	xorlw	1	; case 79
  7545  004F30  E101 D6BA          	bz	l14592
  7546  004F34  0A1D               	xorlw	29	; case 82
  7547  004F36  E016               	bz	l14700
  7548  004F38  0A01               	xorlw	1	; case 83
  7549  004F3A  E101 D6AD          	bz	l14588
  7550  004F3E  0A07               	xorlw	7	; case 84
  7551  004F40  E101 D6DA          	bz	l14614
  7552  004F44  0A02               	xorlw	2	; case 86
  7553  004F46  E101 D683          	bz	l14576
  7554  004F4A  0A0C               	xorlw	12	; case 90
  7555  004F4C  E101 D776          	bz	l14648
  7556  004F50  0A37               	xorlw	55	; case 109
  7557  004F52  E101 D67B          	bz	l14574
  7558  004F56  0A1F               	xorlw	31	; case 114
  7559  004F58  E005               	bz	l14700
  7560  004F5A  0A01               	xorlw	1	; case 115
  7561  004F5C  E101 D69F          	bz	l752
  7562  004F60  0A07               	xorlw	7	; case 116
  7563  004F62  E1C5               	bnz	l14692
  7564  004F64                     l14700:
  7565                           
  7566                           ;main.c: 1556: if (rv) {
  7567  004F64  0100               	movlb	0	; () banked
  7568  004F66  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7569  004F68  E007               	bz	l14704
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;main.c: 1558: putsUSART((char *) "\r");
  7573  004F6A  0E7C               	movlw	high STR_151
  7574  004F6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7575  004F6E  0EF2               	movlw	low STR_151
  7576  004F70  6F61               	movwf	?_putsUSART& (0+255),b
  7577  004F72  EC33  F00D         	call	_putsUSART	;wreg free
  7578                           
  7579                           ;main.c: 1559: }
  7580  004F76  D006               	goto	l14706
  7581  004F78                     l14704:
  7582                           
  7583                           ; BSR set to: 0
  7584                           ;main.c: 1560: else {
  7585                           ;main.c: 1562: putsUSART((char *) "\a");
  7586  004F78  0E7C               	movlw	high STR_152
  7587  004F7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7588  004F7C  0EF0               	movlw	low STR_152
  7589  004F7E  6F61               	movwf	?_putsUSART& (0+255),b
  7590  004F80  EC33  F00D         	call	_putsUSART	;wreg free
  7591  004F84                     l14706:
  7592                           
  7593                           ;main.c: 1563: }
  7594                           ;main.c: 1566: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7595  004F84  0E01               	movlw	high _cmdbuf
  7596  004F86  0100               	movlb	0	; () banked
  7597  004F88  6F61               	movwf	(?_memset+1)& (0+255),b
  7598  004F8A  0E2B               	movlw	low _cmdbuf
  7599  004F8C  6F60               	movwf	?_memset& (0+255),b
  7600  004F8E  6B63               	clrf	(?_memset+3)& (0+255),b
  7601  004F90  6B62               	clrf	(?_memset+2)& (0+255),b
  7602  004F92  6B65               	clrf	(?_memset+5)& (0+255),b
  7603  004F94  0E50               	movlw	80
  7604  004F96  6F64               	movwf	(?_memset+4)& (0+255),b
  7605  004F98  ECCE  F00A         	call	_memset	;wreg free
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;main.c: 1567: pos = 0;
  7609  004F9C  6A34               	clrf	_pos,c
  7610  004F9E                     l14710:
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;main.c: 1569: }
  7614                           ;main.c: 1572: (INTCONbits.GIE = 1);
  7615  004F9E  8EF2               	bsf	intcon,7,c	;volatile
  7616  004FA0                     l742:
  7617                           
  7618                           ; BSR set to: 0
  7619  004FA0  0012               	return	
  7620  004FA2                     __end_of_doModeSLCAN:
  7621                           	opt stack 0
  7622  004FA2                     PL80:
  7623                           	opt stack 22
  7624  004FA2  90D8               	bcf	status,0,c
  7625  004FA4  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7626  004FA6  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7627  004FA8  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7628  004FAA  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7629  004FAC  0012               	return	
  7630  004FAE                     __end_ofPL80:
  7631                           	opt stack 0
  7632                           tblptru	equ	0xFF8
  7633                           tblptrh	equ	0xFF7
  7634                           tblptrl	equ	0xFF6
  7635                           tablat	equ	0xFF5
  7636                           prodh	equ	0xFF4
  7637                           prodl	equ	0xFF3
  7638                           intcon	equ	0xFF2
  7639                           indf0	equ	0xFEF
  7640                           postinc0	equ	0xFEE
  7641                           fsr0h	equ	0xFEA
  7642                           fsr0l	equ	0xFE9
  7643                           wreg	equ	0xFE8
  7644                           indf1	equ	0xFE7
  7645                           postinc1	equ	0xFE6
  7646                           postdec1	equ	0xFE5
  7647                           fsr1h	equ	0xFE2
  7648                           fsr1l	equ	0xFE1
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           plusw2	equ	0xFDB
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function _hexStringToBytes *****************
  7658 ;; Defined at:
  7659 ;;		line 35 in file "hexutils.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7662 ;;		 -> wrkbuf(80), 
  7663 ;;  size            1    6[BANK0 ] unsigned char 
  7664 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7665 ;;		 -> cmdbuf(80), 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  i               2   16[BANK0 ] int 
  7668 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7669 ;;		 -> cmdbuf(80), 
  7670 ;;  len             2   12[BANK0 ] int 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      unsigned char 
  7673 ;; Registers used:
  7674 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : F/0
  7677 ;;		On exit  : F/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7680 ;;      Params:         0       5       0       0       0       0       0
  7681 ;;      Locals:         0       6       0       0       0       0       0
  7682 ;;      Temps:          0       3       0       0       0       0       0
  7683 ;;      Totals:         0      14       0       0       0       0       0
  7684 ;;Total ram usage:       14 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    4
  7687 ;; This function calls:
  7688 ;;		_strlen
  7689 ;;		_nibbleFromChar
  7690 ;; This function is called by:
  7691 ;;		_doModeSLCAN
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text3
  7696  002268                     __ptext3:
  7697                           	opt stack 0
  7698  002268                     _hexStringToBytes:
  7699                           	opt stack 24
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;hexutils.c: 36: uint8_t *p;
  7703                           ;hexutils.c: 37: int len, i;
  7704                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;incstack = 0
  7708                           ;incstack = 0
  7709  002268  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7710  00226C  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7711  002270  EC18  F00C         	call	_strlen	;wreg free
  7712  002274  90D8               	bcf	status,0,c
  7713  002276  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7714  002278  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7715  00227A  3160               	rrcf	?_strlen& (0+255),w,b
  7716  00227C  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;hexutils.c: 40: if (len > size) return 0;
  7720  00227E  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7721  002280  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7722  002282  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7723  002284  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7724  002286  0A80               	xorlw	128
  7725  002288  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7726  00228A  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7727  00228C  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7728  00228E  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7729  002290  0A80               	xorlw	128
  7730  002292  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7731  002294  E202               	bc	l1610
  7732                           
  7733                           ; BSR set to: 0
  7734  002296  0E00               	movlw	0
  7735  002298  D033               	goto	l1611
  7736  00229A                     l1610:
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7740  00229A  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7741  00229C  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7742  00229E  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7743  0022A2  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7744  0022A6  D022               	goto	l16272
  7745  0022A8                     l16266:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7749  0022A8  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7750  0022AA  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7751  0022AC  6ED9               	movwf	fsr2l,c
  7752  0022AE  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7753  0022B0  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7754  0022B2  6EDA               	movwf	fsr2h,c
  7755  0022B4  EE10 F001          	lfsr	1,1
  7756  0022B8  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7757  0022BA  26E1               	addwf	fsr1l,f,c
  7758  0022BC  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7759  0022BE  22E2               	addwfc	fsr1h,f,c
  7760  0022C0  50E7               	movf	indf1,w,c
  7761  0022C2  ECD9  F00B         	call	_nibbleFromChar
  7762  0022C6  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7763  0022C8  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7764  0022CC  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7765  0022D0  50E7               	movf	indf1,w,c
  7766  0022D2  ECD9  F00B         	call	_nibbleFromChar
  7767  0022D6  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7768  0022D8  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7769  0022DA  0BF0               	andlw	240
  7770  0022DC  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7771  0022DE  6EDF               	movwf	indf2,c
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;hexutils.c: 43: p += 2;
  7775  0022E0  0E02               	movlw	2
  7776  0022E2  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7777  0022E4  0E00               	movlw	0
  7778  0022E6  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7779                           
  7780                           ; BSR set to: 0
  7781  0022E8  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7782  0022EA  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7783  0022EC                     l16272:
  7784                           
  7785                           ; BSR set to: 0
  7786  0022EC  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7787  0022EE  0A80               	xorlw	128
  7788  0022F0  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7789  0022F2  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7790  0022F4  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7791  0022F6  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7792  0022F8  0A80               	xorlw	128
  7793  0022FA  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7794  0022FC  E3D5               	bnc	l16266
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;hexutils.c: 44: }
  7798                           ;hexutils.c: 46: return i;
  7799  0022FE  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7800  002300                     l1611:
  7801                           
  7802                           ; BSR set to: 0
  7803  002300  0012               	return	
  7804  002302                     __end_of_hexStringToBytes:
  7805                           	opt stack 0
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           intcon	equ	0xFF2
  7813                           indf0	equ	0xFEF
  7814                           postinc0	equ	0xFEE
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           indf1	equ	0xFE7
  7819                           postinc1	equ	0xFE6
  7820                           postdec1	equ	0xFE5
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           plusw2	equ	0xFDB
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _nibbleFromChar *****************
  7832 ;; Defined at:
  7833 ;;		line 20 in file "hexutils.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  c               1    wreg     unsigned char 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  c               1    0[BANK0 ] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0
  7842 ;; Tracked objects:
  7843 ;;		On entry : F/0
  7844 ;;		On exit  : F/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7847 ;;      Params:         0       0       0       0       0       0       0
  7848 ;;      Locals:         0       1       0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0
  7850 ;;      Totals:         0       1       0       0       0       0       0
  7851 ;;Total ram usage:        1 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    3
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_hexStringToBytes
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text4
  7862  0017B2                     __ptext4:
  7863                           	opt stack 0
  7864  0017B2                     _nibbleFromChar:
  7865                           	opt stack 24
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;incstack = 0
  7869                           ;incstack = 0
  7870                           ;nibbleFromChar@c stored from wreg
  7871  0017B2  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7875  0017B6  0E2F               	movlw	47
  7876  0017B8  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7877  0017BA  D006               	goto	l16472
  7878                           
  7879                           ; BSR set to: 0
  7880  0017BC  0E3A               	movlw	58
  7881  0017BE  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7882  0017C0  D003               	goto	l16472
  7883                           
  7884                           ; BSR set to: 0
  7885  0017C2  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7886  0017C4  0FD0               	addlw	208
  7887  0017C6  D013               	goto	l1605
  7888  0017C8                     l16472:
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7892  0017C8  0E60               	movlw	96
  7893  0017CA  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7894  0017CC  D006               	goto	l16480
  7895                           
  7896                           ; BSR set to: 0
  7897  0017CE  0E67               	movlw	103
  7898  0017D0  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7899  0017D2  D003               	goto	l16480
  7900                           
  7901                           ; BSR set to: 0
  7902  0017D4  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7903  0017D6  0FA9               	addlw	169
  7904  0017D8  D00A               	goto	l1605
  7905  0017DA                     l16480:
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7909  0017DA  0E40               	movlw	64
  7910  0017DC  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7911  0017DE  D006               	goto	l16488
  7912                           
  7913                           ; BSR set to: 0
  7914  0017E0  0E47               	movlw	71
  7915  0017E2  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7916  0017E4  D003               	goto	l16488
  7917                           
  7918                           ; BSR set to: 0
  7919  0017E6  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7920  0017E8  0FC9               	addlw	201
  7921  0017EA  D001               	goto	l1605
  7922  0017EC                     l16488:
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;hexutils.c: 24: return 255;
  7926  0017EC  0EFF               	movlw	255
  7927  0017EE                     l1605:
  7928                           
  7929                           ; BSR set to: 0
  7930  0017EE  0012               	return	
  7931  0017F0                     __end_of_nibbleFromChar:
  7932                           	opt stack 0
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           indf0	equ	0xFEF
  7941                           postinc0	equ	0xFEE
  7942                           fsr0h	equ	0xFEA
  7943                           fsr0l	equ	0xFE9
  7944                           wreg	equ	0xFE8
  7945                           indf1	equ	0xFE7
  7946                           postinc1	equ	0xFE6
  7947                           postdec1	equ	0xFE5
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           indf2	equ	0xFDF
  7951                           postinc2	equ	0xFDE
  7952                           postdec2	equ	0xFDD
  7953                           plusw2	equ	0xFDB
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           
  7958 ;; *************** function _receiveSendEventSLCAN *****************
  7959 ;; Defined at:
  7960 ;;		line 2169 in file "main.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  id              4   38[BANK0 ] unsigned long 
  7965 ;;  i               2   43[BANK0 ] int 
  7966 ;;  dlc             1   42[BANK0 ] unsigned char 
  7967 ;; Return value:  Size  Location     Type
  7968 ;;                  1    wreg      enum E15660
  7969 ;; Registers used:
  7970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7971 ;; Tracked objects:
  7972 ;;		On entry : F/0
  7973 ;;		On exit  : 0/0
  7974 ;;		Unchanged: 0/0
  7975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7976 ;;      Params:         0       0       0       0       0       0       0
  7977 ;;      Locals:         0       7       0       0       0       0       0
  7978 ;;      Temps:          0       3       0       0       0       0       0
  7979 ;;      Totals:         0      10       0       0       0       0       0
  7980 ;;Total ram usage:       10 bytes
  7981 ;; Hardware stack levels used:    1
  7982 ;; Hardware stack levels required when called:    6
  7983 ;; This function calls:
  7984 ;;		_putsUSART
  7985 ;;		_WriteUSART
  7986 ;;		_strlen
  7987 ;;		_getCANFrame
  7988 ;;		_ultoa
  7989 ;;		_itoa
  7990 ;; This function is called by:
  7991 ;;		_doModeSLCAN
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           	psect	text5
  7996  003C0C                     __ptext5:
  7997                           	opt stack 0
  7998  003C0C                     _receiveSendEventSLCAN:
  7999                           	opt stack 22
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;main.c: 2170: int i;
  8003                           ;main.c: 2171: uint8_t dlc;
  8004                           ;main.c: 2172: uint32_t id;
  8005                           ;main.c: 2174: if (getCANFrame(&id, &dlc, vscpData)) {
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;incstack = 0
  8009                           ;incstack = 0
  8010  003C0C  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8011  003C0E  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  8012  003C10  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  8013  003C12  6F6E               	movwf	?_getCANFrame& (0+255),b
  8014  003C14  0E01               	movlw	high _vscpData
  8015  003C16  0100               	movlb	0	; () banked
  8016  003C18  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
  8017  003C1A  0EE3               	movlw	low _vscpData
  8018  003C1C  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  8019  003C1E  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  8020  003C20  ECC5  F012         	call	_getCANFrame
  8021  003C24  0900               	iorlw	0
  8022  003C26  E101 D0B0          	bz	l1088
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 2177: cntRxFrames++;
  8026  003C2A  0101               	movlb	1	; () banked
  8027  003C2C  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8028  003C2E  0E00               	movlw	0
  8029  003C30  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8030  003C32  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8031  003C34  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8032                           
  8033                           ;main.c: 2178: cntRxBytes += dlc;
  8034  003C36  0100               	movlb	0	; () banked
  8035  003C38  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8036  003C3A  0101               	movlb	1	; () banked
  8037  003C3C  2708               	addwf	_cntRxBytes& (0+255),f,b
  8038  003C3E  0E00               	movlw	0
  8039  003C40  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8040  003C42  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8041  003C44  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8042  003C46                     l1061:
  8043  003C46  A2AC               	btfss	4012,1,c	;volatile
  8044  003C48  D7FE               	goto	l1061
  8045                           
  8046                           ;main.c: 2181: WriteUSART('T');
  8047  003C4A  0E54               	movlw	84
  8048  003C4C  EC7E  F00A         	call	_WriteUSART
  8049                           
  8050                           ;main.c: 2183: ultoa(wrkbuf, id, 16);
  8051  003C50  0E01               	movlw	high _wrkbuf
  8052  003C52  0100               	movlb	0	; () banked
  8053  003C54  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8054  003C56  0E7B               	movlw	low _wrkbuf
  8055  003C58  6F76               	movwf	?_ultoa& (0+255),b
  8056  003C5A  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8057  003C5E  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8058  003C62  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8059  003C66  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8060  003C6A  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8061  003C6C  0E10               	movlw	16
  8062  003C6E  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8063  003C70  EC8E  F016         	call	_ultoa	;wreg free
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;main.c: 2185: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8067  003C74  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8068  003C76  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8069  003C78                     l1066:
  8070                           
  8071                           ; BSR set to: 0
  8072  003C78  A2AC               	btfss	4012,1,c	;volatile
  8073  003C7A  D7FE               	goto	l1066
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;main.c: 2187: WriteUSART('0');
  8077  003C7C  0E30               	movlw	48
  8078  003C7E  EC7E  F00A         	call	_WriteUSART
  8079                           
  8080                           ; BSR set to: 0
  8081  003C82  D884               	call	PL88	;call to abstracted procedure
  8082  003C84  B4D8               	btfsc	status,2,c
  8083  003C86  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8084  003C88  E3F7               	bnc	l1066
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;main.c: 2188: }
  8088                           ;main.c: 2189: putsUSART(wrkbuf);
  8089  003C8A  0E01               	movlw	high _wrkbuf
  8090  003C8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8091  003C8E  0E7B               	movlw	low _wrkbuf
  8092  003C90  6F61               	movwf	?_putsUSART& (0+255),b
  8093  003C92  EC33  F00D         	call	_putsUSART	;wreg free
  8094                           
  8095                           ;main.c: 2192: itoa(wrkbuf, dlc, 16);
  8096  003C96  0E01               	movlw	high _wrkbuf
  8097  003C98  0100               	movlb	0	; () banked
  8098  003C9A  6F71               	movwf	(?_itoa+1)& (0+255),b
  8099  003C9C  0E7B               	movlw	low _wrkbuf
  8100  003C9E  6F70               	movwf	?_itoa& (0+255),b
  8101  003CA0  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8102  003CA4  6B73               	clrf	(?_itoa+3)& (0+255),b
  8103  003CA6  6B75               	clrf	(?_itoa+5)& (0+255),b
  8104  003CA8  0E10               	movlw	16
  8105  003CAA  6F74               	movwf	(?_itoa+4)& (0+255),b
  8106  003CAC  EC46  F00B         	call	_itoa	;wreg free
  8107  003CB0                     l1069:
  8108                           
  8109                           ; BSR set to: 0
  8110  003CB0  A2AC               	btfss	4012,1,c	;volatile
  8111  003CB2  D7FE               	goto	l1069
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 2194: WriteUSART(wrkbuf[0]);
  8115  003CB4  0101               	movlb	1	; () banked
  8116  003CB6  517B               	movf	_wrkbuf& (0+255),w,b
  8117  003CB8  EC7E  F00A         	call	_WriteUSART
  8118                           
  8119                           ;main.c: 2197: for (i = 0; i < dlc; i++) {
  8120  003CBC  0100               	movlb	0	; () banked
  8121  003CBE  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8122  003CC0  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8123  003CC2  D02D               	goto	l16224
  8124  003CC4                     l16212:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;main.c: 2198: itoa(wrkbuf, vscpData[i], 16);
  8128  003CC4  0E01               	movlw	high _wrkbuf
  8129  003CC6  0100               	movlb	0	; () banked
  8130  003CC8  6F71               	movwf	(?_itoa+1)& (0+255),b
  8131  003CCA  0E7B               	movlw	low _wrkbuf
  8132  003CCC  6F70               	movwf	?_itoa& (0+255),b
  8133  003CCE  0EE3               	movlw	low _vscpData
  8134  003CD0  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8135  003CD2  6ED9               	movwf	fsr2l,c
  8136  003CD4  0E01               	movlw	high _vscpData
  8137  003CD6  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8138  003CD8  6EDA               	movwf	fsr2h,c
  8139  003CDA  50DF               	movf	indf2,w,c
  8140  003CDC  6F72               	movwf	(?_itoa+2)& (0+255),b
  8141  003CDE  6B73               	clrf	(?_itoa+3)& (0+255),b
  8142  003CE0  6B75               	clrf	(?_itoa+5)& (0+255),b
  8143  003CE2  0E10               	movlw	16
  8144  003CE4  6F74               	movwf	(?_itoa+4)& (0+255),b
  8145  003CE6  EC46  F00B         	call	_itoa	;wreg free
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;main.c: 2200: if (2 != strlen(wrkbuf)) {
  8149  003CEA  0E01               	movlw	high _wrkbuf
  8150  003CEC  0100               	movlb	0	; () banked
  8151  003CEE  6F61               	movwf	(?_strlen+1)& (0+255),b
  8152  003CF0  0E7B               	movlw	low _wrkbuf
  8153  003CF2  6F60               	movwf	?_strlen& (0+255),b
  8154  003CF4  EC18  F00C         	call	_strlen	;wreg free
  8155  003CF8  5160               	movf	?_strlen& (0+255),w,b
  8156  003CFA  0A02               	xorlw	2
  8157  003CFC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8158  003CFE  E005               	bz	l16220
  8159  003D00                     l1075:
  8160                           
  8161                           ; BSR set to: 0
  8162  003D00  A2AC               	btfss	4012,1,c	;volatile
  8163  003D02  D7FE               	goto	l1075
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;main.c: 2202: WriteUSART('0');
  8167  003D04  0E30               	movlw	48
  8168  003D06  EC7E  F00A         	call	_WriteUSART
  8169  003D0A                     l16220:
  8170                           
  8171                           ;main.c: 2203: }
  8172                           ;main.c: 2205: putsUSART(wrkbuf);
  8173  003D0A  0E01               	movlw	high _wrkbuf
  8174  003D0C  0100               	movlb	0	; () banked
  8175  003D0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8176  003D10  0E7B               	movlw	low _wrkbuf
  8177  003D12  6F61               	movwf	?_putsUSART& (0+255),b
  8178  003D14  EC33  F00D         	call	_putsUSART	;wreg free
  8179  003D18  0100               	movlb	0	; () banked
  8180  003D1A  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8181  003D1C  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8182  003D1E                     l16224:
  8183                           
  8184                           ; BSR set to: 0
  8185  003D1E  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8186  003D20  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8187  003D22  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8188  003D24  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8189  003D26  0A80               	xorlw	128
  8190  003D28  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8191  003D2A  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8192  003D2C  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8193  003D2E  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8194  003D30  0A80               	xorlw	128
  8195  003D32  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8196  003D34  E3C7               	bnc	l16212
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;main.c: 2206: }
  8200                           ;main.c: 2209: if (nTimeStamp) {
  8201  003D36  5033               	movf	_nTimeStamp,w,c
  8202  003D38  E023               	bz	l1085
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;main.c: 2210: ultoa(wrkbuf, timer, 16);
  8206  003D3A  0E01               	movlw	high _wrkbuf
  8207  003D3C  0100               	movlb	0	; () banked
  8208  003D3E  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8209  003D40  0E7B               	movlw	low _wrkbuf
  8210  003D42  6F76               	movwf	?_ultoa& (0+255),b
  8211  003D44  C118  F078         	movff	_timer,?_ultoa+2	;volatile
  8212  003D48  C119  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8213  003D4C  C11A  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8214  003D50  C11B  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8215  003D54  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8216  003D56  0E10               	movlw	16
  8217  003D58  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8218  003D5A  EC8E  F016         	call	_ultoa	;wreg free
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;main.c: 2212: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8222  003D5E  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8223  003D60  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8224  003D62                     l1082:
  8225                           
  8226                           ; BSR set to: 0
  8227  003D62  A2AC               	btfss	4012,1,c	;volatile
  8228  003D64  D7FE               	goto	l1082
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 2214: WriteUSART('0');
  8232  003D66  0E30               	movlw	48
  8233  003D68  EC7E  F00A         	call	_WriteUSART
  8234                           
  8235                           ; BSR set to: 0
  8236  003D6C  D80F               	call	PL88	;call to abstracted procedure
  8237  003D6E  B4D8               	btfsc	status,2,c
  8238  003D70  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8239  003D72  E3F7               	bnc	l1082
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;main.c: 2215: }
  8243                           ;main.c: 2216: putsUSART(wrkbuf);
  8244  003D74  0E01               	movlw	high _wrkbuf
  8245  003D76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8246  003D78  0E7B               	movlw	low _wrkbuf
  8247  003D7A  6F61               	movwf	?_putsUSART& (0+255),b
  8248  003D7C  EC33  F00D         	call	_putsUSART	;wreg free
  8249  003D80                     l1085:
  8250  003D80  A2AC               	btfss	4012,1,c	;volatile
  8251  003D82  D7FE               	goto	l1085
  8252                           
  8253                           ;main.c: 2220: WriteUSART(0x0d);
  8254  003D84  0E0D               	movlw	13
  8255  003D86  EC7E  F00A         	call	_WriteUSART
  8256  003D8A                     l1088:
  8257  003D8A  0012               	return	
  8258  003D8C                     __end_of_receiveSendEventSLCAN:
  8259                           	opt stack 0
  8260  003D8C                     PL88:
  8261                           	opt stack 22
  8262  003D8C  0100               	movlb	0	; () banked
  8263  003D8E  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8264  003D90  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8265  003D92  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8266  003D94  0A80               	xorlw	128
  8267  003D96  0F80               	addlw	-128
  8268  003D98  0CB8               	retlw	184
  8269  003D9A                     __end_ofPL88:
  8270                           	opt stack 0
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           intcon	equ	0xFF2
  8278                           indf0	equ	0xFEF
  8279                           postinc0	equ	0xFEE
  8280                           fsr0h	equ	0xFEA
  8281                           fsr0l	equ	0xFE9
  8282                           wreg	equ	0xFE8
  8283                           indf1	equ	0xFE7
  8284                           postinc1	equ	0xFE6
  8285                           postdec1	equ	0xFE5
  8286                           fsr1h	equ	0xFE2
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           plusw2	equ	0xFDB
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _ultoa *****************
  8297 ;; Defined at:
  8298 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8301 ;;		 -> wrkbuf(80), 
  8302 ;;  val             4   24[BANK0 ] unsigned long 
  8303 ;;  base            2   28[BANK0 ] int 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  v               4   30[BANK0 ] unsigned long 
  8306 ;;  c               1   34[BANK0 ] unsigned char 
  8307 ;; Return value:  Size  Location     Type
  8308 ;;                  2   22[BANK0 ] PTR unsigned char 
  8309 ;; Registers used:
  8310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8311 ;; Tracked objects:
  8312 ;;		On entry : F/0
  8313 ;;		On exit  : F/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8316 ;;      Params:         0       8       0       0       0       0       0
  8317 ;;      Locals:         0       5       0       0       0       0       0
  8318 ;;      Temps:          0       0       0       0       0       0       0
  8319 ;;      Totals:         0      13       0       0       0       0       0
  8320 ;;Total ram usage:       13 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    4
  8323 ;; This function calls:
  8324 ;;		___lldiv
  8325 ;;		___llmod
  8326 ;; This function is called by:
  8327 ;;		_receiveSendEventSLCAN
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text6
  8332  002D1C                     __ptext6:
  8333                           	opt stack 0
  8334  002D1C                     _ultoa:
  8335                           	opt stack 23
  8336                           
  8337                           ; BSR set to: 0
  8338                           
  8339                           ;incstack = 0
  8340                           ;incstack = 0
  8341  002D1C  C078  F07E         	movff	ultoa@val,ultoa@v
  8342  002D20  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8343  002D24  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8344  002D28  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8345  002D2C                     l16386:
  8346                           
  8347                           ; BSR set to: 0
  8348  002D2C  C07E  F060         	movff	ultoa@v,?___lldiv
  8349  002D30  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8350  002D34  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8351  002D38  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8352  002D3C  D858               	call	PL68	;call to abstracted procedure
  8353  002D3E  EC1E  F00F         	call	___lldiv	;wreg free
  8354  002D42  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8355  002D46  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8356  002D4A  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8357  002D4E  C060  F07E         	movff	?___lldiv,ultoa@v
  8358                           
  8359                           ; BSR set to: 0
  8360  002D52  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8361  002D54  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8362                           
  8363                           ; BSR set to: 0
  8364  002D56  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8365  002D58  117E               	iorwf	ultoa@v& (0+255),w,b
  8366  002D5A  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8367  002D5C  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8368  002D5E  E1E6               	bnz	l16386
  8369                           
  8370                           ; BSR set to: 0
  8371  002D60  C076  FFD9         	movff	ultoa@buf,fsr2l
  8372  002D64  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8373  002D68  6ADF               	clrf	indf2,c
  8374                           
  8375                           ; BSR set to: 0
  8376  002D6A  0776               	decf	ultoa@buf& (0+255),f,b
  8377  002D6C  A0D8               	btfss	status,0,c
  8378  002D6E  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8379  002D70                     l16396:
  8380                           
  8381                           ; BSR set to: 0
  8382  002D70  C078  F06D         	movff	ultoa@val,?___llmod
  8383  002D74  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8384  002D78  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8385  002D7C  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8386  002D80  C07C  F071         	movff	ultoa@base,?___llmod+4
  8387  002D84  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8388  002D88  0E00               	movlw	0
  8389  002D8A  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8390  002D8C  0EFF               	movlw	-1
  8391  002D8E  6F73               	movwf	(?___llmod+6)& (0+255),b
  8392  002D90  6F74               	movwf	(?___llmod+7)& (0+255),b
  8393  002D92  EC16  F00E         	call	___llmod	;wreg free
  8394  002D96  516D               	movf	?___llmod& (0+255),w,b
  8395  002D98  6F82               	movwf	ultoa@c& (0+255),b
  8396                           
  8397                           ; BSR set to: 0
  8398  002D9A  C078  F060         	movff	ultoa@val,?___lldiv
  8399  002D9E  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8400  002DA2  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8401  002DA6  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8402  002DAA  D821               	call	PL68	;call to abstracted procedure
  8403  002DAC  EC1E  F00F         	call	___lldiv	;wreg free
  8404  002DB0  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8405  002DB4  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8406  002DB8  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8407  002DBC  C060  F078         	movff	?___lldiv,ultoa@val
  8408                           
  8409                           ; BSR set to: 0
  8410  002DC0  0E09               	movlw	9
  8411  002DC2  6582               	cpfsgt	ultoa@c& (0+255),b
  8412  002DC4  D002               	goto	l2455
  8413                           
  8414                           ; BSR set to: 0
  8415  002DC6  0E07               	movlw	7
  8416  002DC8  2782               	addwf	ultoa@c& (0+255),f,b
  8417  002DCA                     l2455:
  8418                           
  8419                           ; BSR set to: 0
  8420  002DCA  0E30               	movlw	48
  8421  002DCC  2782               	addwf	ultoa@c& (0+255),f,b
  8422                           
  8423                           ; BSR set to: 0
  8424  002DCE  C076  FFD9         	movff	ultoa@buf,fsr2l
  8425  002DD2  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8426  002DD6  C082  FFDF         	movff	ultoa@c,indf2
  8427                           
  8428                           ; BSR set to: 0
  8429  002DDA  0776               	decf	ultoa@buf& (0+255),f,b
  8430  002DDC  A0D8               	btfss	status,0,c
  8431  002DDE  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8432                           
  8433                           ; BSR set to: 0
  8434  002DE0  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8435  002DE2  1178               	iorwf	ultoa@val& (0+255),w,b
  8436  002DE4  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8437  002DE6  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8438  002DE8  B4D8               	btfsc	status,2,c
  8439                           
  8440                           ; BSR set to: 0
  8441  002DEA  0012               	return	
  8442  002DEC  D7C1               	goto	l16396
  8443  002DEE                     __end_of_ultoa:
  8444                           	opt stack 0
  8445  002DEE                     PL68:
  8446                           	opt stack 23
  8447  002DEE  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8448  002DF2  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8449  002DF6  0E00               	movlw	0
  8450  002DF8  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8451  002DFA  0EFF               	movlw	-1
  8452  002DFC  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8453  002DFE  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8454  002E00  0012               	return	
  8455  002E02                     __end_ofPL68:
  8456                           	opt stack 0
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           intcon	equ	0xFF2
  8464                           indf0	equ	0xFEF
  8465                           postinc0	equ	0xFEE
  8466                           fsr0h	equ	0xFEA
  8467                           fsr0l	equ	0xFE9
  8468                           wreg	equ	0xFE8
  8469                           indf1	equ	0xFE7
  8470                           postinc1	equ	0xFE6
  8471                           postdec1	equ	0xFE5
  8472                           fsr1h	equ	0xFE2
  8473                           fsr1l	equ	0xFE1
  8474                           indf2	equ	0xFDF
  8475                           postinc2	equ	0xFDE
  8476                           postdec2	equ	0xFDD
  8477                           plusw2	equ	0xFDB
  8478                           fsr2h	equ	0xFDA
  8479                           fsr2l	equ	0xFD9
  8480                           status	equ	0xFD8
  8481                           
  8482 ;; *************** function _doModeVscp *****************
  8483 ;; Defined at:
  8484 ;;		line 1133 in file "main.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;		None
  8487 ;; Auto vars:     Size  Location     Type
  8488 ;;  c               1   87[BANK0 ] unsigned char 
  8489 ;; Return value:  Size  Location     Type
  8490 ;;		None               void
  8491 ;; Registers used:
  8492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8498 ;;      Params:         0       0       0       0       0       0       0
  8499 ;;      Locals:         0       1       0       0       0       0       0
  8500 ;;      Temps:          0       0       0       0       0       0       0
  8501 ;;      Totals:         0       1       0       0       0       0       0
  8502 ;;Total ram usage:        1 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    7
  8505 ;; This function calls:
  8506 ;;		_fifo_read
  8507 ;;		_ECANSetOperationMode
  8508 ;;		_receiveSendMultiEventCANAL
  8509 ;;		_receiveSendEventCANAL
  8510 ;;		_calcCRC
  8511 ;;		_sendVSCPDriverNack
  8512 ;;		_sendVSCPDriverAck
  8513 ;;		_receiveVSCPModeCanalMsg
  8514 ;;		_receiveVSCPModeMultiCanalMsg
  8515 ;;		_sendVSCPModeCapabilities
  8516 ;;		_sendVSCPDriverCommandReply
  8517 ;;		_sendVSCPDriverErrorFrame
  8518 ;; This function is called by:
  8519 ;;		_main
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text7
  8524  0040EE                     __ptext7:
  8525                           	opt stack 0
  8526  0040EE                     _doModeVscp:
  8527                           	opt stack 22
  8528                           
  8529                           ;main.c: 1134: uint8_t c;
  8530                           ;main.c: 1137: if ( caps.maxCanalFrames > 1 ) {
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;incstack = 0
  8534                           ;incstack = 0
  8535  0040EE  0101               	movlb	1	; () banked
  8536  0040F0  EE21  F0F0         	lfsr	2,_caps+1
  8537  0040F4  0E01               	movlw	1
  8538  0040F6  64DF               	cpfsgt	indf2,c
  8539  0040F8  D003               	goto	l14400
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;main.c: 1140: receiveSendMultiEventCANAL();
  8543  0040FA  EC7D  F01C         	call	_receiveSendMultiEventCANAL	;wreg free
  8544                           
  8545                           ;main.c: 1141: }
  8546  0040FE  D002               	goto	l14402
  8547  004100                     l14400:
  8548                           
  8549                           ; BSR set to: 1
  8550                           ;main.c: 1142: else {
  8551                           ;main.c: 1145: receiveSendEventCANAL();
  8552  004100  EC24  F01B         	call	_receiveSendEventCANAL	;wreg free
  8553  004104                     l14402:
  8554                           
  8555                           ;main.c: 1146: }
  8556                           ;main.c: 1149: (INTCONbits.GIE = 0);
  8557  004104  9EF2               	bcf	intcon,7,c	;volatile
  8558                           
  8559                           ;main.c: 1151: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8560  004106  0E01               	movlw	high _serialInputFifo
  8561  004108  0100               	movlb	0	; () banked
  8562  00410A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8563  00410C  0EDB               	movlw	low _serialInputFifo
  8564  00410E  6F60               	movwf	?_fifo_read& (0+255),b
  8565  004110  0E00               	movlw	high doModeVscp@c
  8566  004112  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8567  004114  0EB7               	movlw	low doModeVscp@c
  8568  004116  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8569  004118  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8570  00411A  0E01               	movlw	1
  8571  00411C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8572  00411E  EC4B  F015         	call	_fifo_read	;wreg free
  8573  004122  0560               	decf	?_fifo_read& (0+255),w,b
  8574  004124  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8575  004126  E001 D0BF          	bnz	l14550
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;main.c: 1154: (INTCONbits.GIE = 1);
  8579  00412A  8EF2               	bsf	intcon,7,c	;volatile
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;main.c: 1157: if ( pos >= sizeof( cmdbuf ) ) {
  8583  00412C  0E4F               	movlw	79
  8584  00412E  6434               	cpfsgt	_pos,c
  8585  004130  D003               	goto	l686
  8586                           
  8587                           ; BSR set to: 0
  8588                           ;main.c: 1159: pos = 0;
  8589  004132  6A34               	clrf	_pos,c
  8590                           
  8591                           ;main.c: 1160: bDLE = 0;
  8592  004134  6A2C               	clrf	_bDLE,c
  8593                           
  8594                           ;main.c: 1161: stateVscpDriver = 0;
  8595  004136  6A37               	clrf	_stateVscpDriver,c
  8596  004138                     l686:
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;main.c: 1162: }
  8600                           ;main.c: 1164: if ( 0 == stateVscpDriver ) {
  8601  004138  6637               	tstfsz	_stateVscpDriver,c
  8602  00413A  D00D               	goto	l14424
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;main.c: 1166: if ( bDLE ) {
  8606  00413C  502C               	movf	_bDLE,w,c
  8607  00413E  E008               	bz	l14420
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;main.c: 1168: bDLE = 0;
  8611  004140  6A2C               	clrf	_bDLE,c
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;main.c: 1171: if ( 0x02 == c ) {
  8615  004142  51B7               	movf	doModeVscp@c& (0+255),w,b
  8616  004144  0A02               	xorlw	2
  8617  004146  E12A               	bnz	l14460
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;main.c: 1172: stateVscpDriver = 1;
  8621  004148  0E01               	movlw	1
  8622  00414A  6E37               	movwf	_stateVscpDriver,c
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;main.c: 1173: pos = 0;
  8626  00414C  6A34               	clrf	_pos,c
  8627  00414E  D026               	goto	l14460
  8628  004150                     l14420:
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;main.c: 1176: else {
  8632                           ;main.c: 1177: bDLE = 1;
  8633  004150  0E01               	movlw	1
  8634  004152  6E2C               	movwf	_bDLE,c
  8635  004154  D0AA               	goto	l691
  8636  004156                     l14424:
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1181: else if ( 1 == stateVscpDriver ) {
  8640  004156  0437               	decf	_stateVscpDriver,w,c
  8641  004158  E121               	bnz	l14460
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;main.c: 1184: if ( bDLE ) {
  8645  00415A  502C               	movf	_bDLE,w,c
  8646  00415C  E01B               	bz	l14444
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;main.c: 1187: bDLE = 0;
  8650  00415E  6A2C               	clrf	_bDLE,c
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 1190: if ( 0x03 == c ) {
  8654  004160  51B7               	movf	doModeVscp@c& (0+255),w,b
  8655  004162  0A03               	xorlw	3
  8656  004164  E103               	bnz	l14434
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;main.c: 1191: stateVscpDriver = 2;
  8660  004166  0E02               	movlw	2
  8661  004168  6E37               	movwf	_stateVscpDriver,c
  8662                           
  8663                           ;main.c: 1192: }
  8664  00416A  D018               	goto	l14460
  8665  00416C                     l14434:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 1194: else if (0x10 == c) {
  8669  00416C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8670  00416E  0A10               	xorlw	16
  8671  004170  E115               	bnz	l14460
  8672  004172                     u19230:
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;main.c: 1196: cmdbuf[ pos++ ] = c;
  8676  004172  0E2B               	movlw	low _cmdbuf
  8677  004174  2434               	addwf	_pos,w,c
  8678  004176  6ED9               	movwf	fsr2l,c
  8679  004178  6ADA               	clrf	fsr2h,c
  8680  00417A  0E01               	movlw	high _cmdbuf
  8681  00417C  22DA               	addwfc	fsr2h,f,c
  8682  00417E  0100               	movlb	0	; () banked
  8683  004180  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8684                           
  8685                           ; BSR set to: 0
  8686  004184  2A34               	incf	_pos,f,c
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;main.c: 1197: if ( pos >= sizeof( cmdbuf ) ) {
  8690  004186  0E4F               	movlw	79
  8691  004188  6434               	cpfsgt	_pos,c
  8692  00418A  D08F               	goto	l691
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;main.c: 1200: bDLE = 0;
  8696  00418C  6A2C               	clrf	_bDLE,c
  8697                           
  8698                           ;main.c: 1201: pos = 0;
  8699  00418E  6A34               	clrf	_pos,c
  8700                           
  8701                           ;main.c: 1202: stateVscpDriver = 0;
  8702  004190  6A37               	clrf	_stateVscpDriver,c
  8703  004192  D08B               	goto	l691
  8704  004194                     l14444:
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;main.c: 1207: else {
  8708                           ;main.c: 1208: if (0x10 == c) {
  8709  004194  51B7               	movf	doModeVscp@c& (0+255),w,b
  8710  004196  0A10               	xorlw	16
  8711  004198  E0DB               	bz	l14420
  8712  00419A  D7EB               	goto	u19230
  8713  00419C                     l14460:
  8714                           
  8715                           ; BSR set to: 0
  8716                           ;main.c: 1224: }
  8717                           ;main.c: 1225: }
  8718                           ;main.c: 1226: }
  8719                           ;main.c: 1228: if (2 == stateVscpDriver) {
  8720  00419C  5037               	movf	_stateVscpDriver,w,c
  8721  00419E  0A02               	xorlw	2
  8722  0041A0  E001 D082          	bnz	l14550
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;main.c: 1231: stateVscpDriver = 0;
  8726  0041A4  6A37               	clrf	_stateVscpDriver,c
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;main.c: 1243: if (calcCRC(cmdbuf, pos)) {
  8730  0041A6  0E01               	movlw	high _cmdbuf
  8731  0041A8  0100               	movlb	0	; () banked
  8732  0041AA  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8733  0041AC  0E2B               	movlw	low _cmdbuf
  8734  0041AE  6F6C               	movwf	?_calcCRC& (0+255),b
  8735  0041B0  C034  F06E         	movff	_pos,?_calcCRC+2
  8736  0041B4  ECFC  F00A         	call	_calcCRC	;wreg free
  8737  0041B8  0900               	iorlw	0
  8738  0041BA  E003               	bz	l704
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;main.c: 1244: sendVSCPDriverNack();
  8742  0041BC  ECD1  F011         	call	_sendVSCPDriverNack	;wreg free
  8743  0041C0  D074               	goto	l691
  8744  0041C2                     l704:
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1246: }
  8748                           ;main.c: 1249: if (0 ==
  8749                           ;main.c: 1250: cmdbuf[ 0 ]) {
  8750  0041C2  0101               	movlb	1	; () banked
  8751  0041C4  672B               	tstfsz	_cmdbuf& (0+255),b
  8752  0041C6  D003               	goto	l14472
  8753  0041C8                     l14470:
  8754                           
  8755                           ;main.c: 1251: sendVSCPDriverAck();
  8756  0041C8  EC21  F012         	call	_sendVSCPDriverAck	;wreg free
  8757                           
  8758                           ;main.c: 1252: }
  8759  0041CC  D06B               	goto	l14546
  8760  0041CE                     l14472:
  8761                           
  8762                           ; BSR set to: 1
  8763                           ;main.c: 1254: else if (1 ==
  8764                           ;main.c: 1255: cmdbuf[ 0 ]) {
  8765  0041CE  052B               	decf	_cmdbuf& (0+255),w,b
  8766  0041D0  E103               	bnz	l14476
  8767  0041D2                     l14474:
  8768                           
  8769                           ;main.c: 1256: sendVSCPDriverNack();
  8770  0041D2  ECD1  F011         	call	_sendVSCPDriverNack	;wreg free
  8771                           
  8772                           ;main.c: 1257: }
  8773  0041D6  D066               	goto	l14546
  8774  0041D8                     l14476:
  8775                           
  8776                           ; BSR set to: 1
  8777                           ;main.c: 1259: else if (2 ==
  8778                           ;main.c: 1260: cmdbuf[ 0 ]) {
  8779  0041D8  512B               	movf	_cmdbuf& (0+255),w,b
  8780  0041DA  0A02               	xorlw	2
  8781  0041DC  E105               	bnz	l14484
  8782                           
  8783                           ; BSR set to: 1
  8784                           ;main.c: 1261: if ( receiveVSCPModeCanalMsg() ) {
  8785  0041DE  EC01  F017         	call	_receiveVSCPModeCanalMsg	;wreg free
  8786  0041E2  0900               	iorlw	0
  8787  0041E4  E1F1               	bnz	l14470
  8788  0041E6  D7F5               	goto	l14474
  8789  0041E8                     l14484:
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;main.c: 1269: else if (6 ==
  8793                           ;main.c: 1270: cmdbuf[ 0 ]) {
  8794  0041E8  512B               	movf	_cmdbuf& (0+255),w,b
  8795  0041EA  0A06               	xorlw	6
  8796  0041EC  E103               	bnz	l14492
  8797                           
  8798                           ; BSR set to: 1
  8799                           ;main.c: 1271: if (receiveVSCPModeMultiCanalMsg()) {
  8800  0041EE  EC5A  F00A         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8801  0041F2  D7F7               	goto	L5
  8802  0041F4                     l14492:
  8803                           
  8804                           ; BSR set to: 1
  8805                           ;main.c: 1279: else if (6 ==
  8806                           ;main.c: 1280: cmdbuf[ 0 ]) {
  8807  0041F4  512B               	movf	_cmdbuf& (0+255),w,b
  8808  0041F6  0A06               	xorlw	6
  8809  0041F8  E0EC               	bz	l14474
  8810                           
  8811                           ; BSR set to: 1
  8812                           ;main.c: 1284: else if (3 ==
  8813                           ;main.c: 1285: cmdbuf[ 0 ]) {
  8814  0041FA  512B               	movf	_cmdbuf& (0+255),w,b
  8815  0041FC  0A03               	xorlw	3
  8816  0041FE  E0E9               	bz	l14474
  8817                           
  8818                           ; BSR set to: 1
  8819                           ;main.c: 1289: else if (4 ==
  8820                           ;main.c: 1290: cmdbuf[ 0 ]) {
  8821  004200  512B               	movf	_cmdbuf& (0+255),w,b
  8822  004202  0A04               	xorlw	4
  8823  004204  E0E6               	bz	l14474
  8824                           
  8825                           ; BSR set to: 1
  8826                           ;main.c: 1294: else if (8 ==
  8827                           ;main.c: 1295: cmdbuf[ 0 ]) {
  8828  004206  512B               	movf	_cmdbuf& (0+255),w,b
  8829  004208  0A08               	xorlw	8
  8830  00420A  E107               	bnz	l14510
  8831                           
  8832                           ; BSR set to: 1
  8833                           ;main.c: 1296: caps.maxVscpFrames = cmdbuf[ 5 ];
  8834  00420C  C130  F1EF         	movff	_cmdbuf+5,_caps
  8835                           
  8836                           ;main.c: 1297: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8837  004210  C131  F1F0         	movff	_cmdbuf+6,_caps+1
  8838                           
  8839                           ; BSR set to: 1
  8840                           ;main.c: 1298: sendVSCPModeCapabilities();
  8841  004214  ECCE  F013         	call	_sendVSCPModeCapabilities	;wreg free
  8842                           
  8843                           ;main.c: 1299: }
  8844  004218  D045               	goto	l14546
  8845  00421A                     l14510:
  8846                           
  8847                           ; BSR set to: 1
  8848                           ;main.c: 1301: else if (255 ==
  8849                           ;main.c: 1302: cmdbuf[ 0 ]) {
  8850  00421A  292B               	incf	_cmdbuf& (0+255),w,b
  8851  00421C  E140               	bnz	l14544
  8852                           
  8853                           ; BSR set to: 1
  8854                           ;main.c: 1304: if (cmdbuf[ 5 ] ==
  8855                           ;main.c: 1305: 0) {
  8856  00421E  6730               	tstfsz	(_cmdbuf+5)& (0+255),b
  8857  004220  D006               	goto	l14516
  8858                           
  8859                           ; BSR set to: 1
  8860                           ;main.c: 1306: sendVSCPDriverCommandReply(0, 0);
  8861  004222  0E00               	movlw	0
  8862  004224  0100               	movlb	0	; () banked
  8863  004226  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8864  004228  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8865                           
  8866                           ;main.c: 1307: }
  8867  00422C  D03B               	goto	l14546
  8868  00422E                     l14516:
  8869                           
  8870                           ; BSR set to: 1
  8871                           ;main.c: 1309: else if (cmdbuf[ 5 ] ==
  8872                           ;main.c: 1310: 1) {
  8873  00422E  0530               	decf	(_cmdbuf+5)& (0+255),w,b
  8874  004230  E109               	bnz	l14522
  8875                           
  8876                           ; BSR set to: 1
  8877                           ;main.c: 1311: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8878  004232  0E00               	movlw	0
  8879  004234  EC93  F00A         	call	_ECANSetOperationMode
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1312: sendVSCPDriverCommandReply(0, 1);
  8883  004238  0E01               	movlw	1
  8884  00423A  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8885  00423C  0E00               	movlw	0
  8886  00423E  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8887                           
  8888                           ;main.c: 1313: }
  8889  004242  D030               	goto	l14546
  8890  004244                     l14522:
  8891                           
  8892                           ; BSR set to: 1
  8893                           ;main.c: 1315: else if (cmdbuf[ 5 ] ==
  8894                           ;main.c: 1316: 2) {
  8895  004244  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8896  004246  0A02               	xorlw	2
  8897  004248  E109               	bnz	l14528
  8898                           
  8899                           ; BSR set to: 1
  8900                           ;main.c: 1317: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8901  00424A  0E40               	movlw	64
  8902  00424C  EC93  F00A         	call	_ECANSetOperationMode
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;main.c: 1318: sendVSCPDriverCommandReply(0, 2);
  8906  004250  0E02               	movlw	2
  8907  004252  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8908  004254  0E00               	movlw	0
  8909  004256  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8910                           
  8911                           ;main.c: 1319: }
  8912  00425A  D024               	goto	l14546
  8913  00425C                     l14528:
  8914                           
  8915                           ; BSR set to: 1
  8916                           ;main.c: 1321: else if (cmdbuf[ 5 ] ==
  8917                           ;main.c: 1322: 3) {
  8918  00425C  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8919  00425E  0A03               	xorlw	3
  8920  004260  E109               	bnz	l14534
  8921                           
  8922                           ; BSR set to: 1
  8923                           ;main.c: 1323: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8924  004262  0E60               	movlw	96
  8925  004264  EC93  F00A         	call	_ECANSetOperationMode
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;main.c: 1324: sendVSCPDriverCommandReply(0, 3);
  8929  004268  0E03               	movlw	3
  8930  00426A  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8931  00426C  0E00               	movlw	0
  8932  00426E  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8933                           
  8934                           ;main.c: 1325: }
  8935  004272  D018               	goto	l14546
  8936  004274                     l14534:
  8937                           
  8938                           ; BSR set to: 1
  8939                           ;main.c: 1327: else if (cmdbuf[ 5 ] ==
  8940                           ;main.c: 1328: 4) {
  8941  004274  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8942  004276  0A04               	xorlw	4
  8943  004278  E109               	bnz	l14540
  8944                           
  8945                           ; BSR set to: 1
  8946                           ;main.c: 1329: ECANSetOperationMode(0x20);
  8947  00427A  0E20               	movlw	32
  8948  00427C  EC93  F00A         	call	_ECANSetOperationMode
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;main.c: 1330: sendVSCPDriverCommandReply(0, 4);
  8952  004280  0E04               	movlw	4
  8953  004282  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8954  004284  0E00               	movlw	0
  8955  004286  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8956                           
  8957                           ;main.c: 1331: }
  8958  00428A  D00C               	goto	l14546
  8959  00428C                     l14540:
  8960                           
  8961                           ; BSR set to: 1
  8962                           ;main.c: 1333: else if (cmdbuf[ 5 ] ==
  8963                           ;main.c: 1334: 5) {
  8964  00428C  5130               	movf	(_cmdbuf+5)& (0+255),w,b
  8965  00428E  0A05               	xorlw	5
  8966  004290  E109               	bnz	l14546
  8967                           
  8968                           ; BSR set to: 1
  8969                           ;main.c: 1335: sendVSCPDriverCommandReply(0, 0);
  8970  004292  0E00               	movlw	0
  8971  004294  0100               	movlb	0	; () banked
  8972  004296  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8973  004298  ECB4  F015         	call	_sendVSCPDriverCommandReply
  8974  00429C  D003               	goto	l14546
  8975  00429E                     l14544:
  8976                           
  8977                           ; BSR set to: 1
  8978                           ;main.c: 1340: else {
  8979                           ;main.c: 1342: sendVSCPDriverErrorFrame(2);
  8980  00429E  0E02               	movlw	2
  8981  0042A0  EC85  F014         	call	_sendVSCPDriverErrorFrame
  8982  0042A4                     l14546:
  8983                           
  8984                           ;main.c: 1343: }
  8985                           ;main.c: 1346: pos = 0;
  8986  0042A4  6A34               	clrf	_pos,c
  8987                           
  8988                           ;main.c: 1347: stateVscpDriver = 0;
  8989  0042A6  6A37               	clrf	_stateVscpDriver,c
  8990  0042A8                     l14550:
  8991                           
  8992                           ;main.c: 1349: }
  8993                           ;main.c: 1351: }
  8994                           ;main.c: 1354: (INTCONbits.GIE = 1);
  8995  0042A8  8EF2               	bsf	intcon,7,c	;volatile
  8996  0042AA                     l691:
  8997  0042AA  0012               	return	
  8998  0042AC                     __end_of_doModeVscp:
  8999                           	opt stack 0
  9000                           tblptru	equ	0xFF8
  9001                           tblptrh	equ	0xFF7
  9002                           tblptrl	equ	0xFF6
  9003                           tablat	equ	0xFF5
  9004                           prodh	equ	0xFF4
  9005                           prodl	equ	0xFF3
  9006                           intcon	equ	0xFF2
  9007                           indf0	equ	0xFEF
  9008                           postinc0	equ	0xFEE
  9009                           fsr0h	equ	0xFEA
  9010                           fsr0l	equ	0xFE9
  9011                           wreg	equ	0xFE8
  9012                           indf1	equ	0xFE7
  9013                           postinc1	equ	0xFE6
  9014                           postdec1	equ	0xFE5
  9015                           fsr1h	equ	0xFE2
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           plusw2	equ	0xFDB
  9021                           fsr2h	equ	0xFDA
  9022                           fsr2l	equ	0xFD9
  9023                           status	equ	0xFD8
  9024                           
  9025 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9026 ;; Defined at:
  9027 ;;		line 1615 in file "main.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  errorcode       1    wreg     unsigned char 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9032 ;;  crc             1   16[BANK0 ] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;		None               void
  9035 ;; Registers used:
  9036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : F/1
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9042 ;;      Params:         0       0       0       0       0       0       0
  9043 ;;      Locals:         0       2       0       0       0       0       0
  9044 ;;      Temps:          0       0       0       0       0       0       0
  9045 ;;      Totals:         0       2       0       0       0       0       0
  9046 ;;Total ram usage:        2 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    6
  9049 ;; This function calls:
  9050 ;;		_WriteUSART
  9051 ;;		_sendEscapedUartData
  9052 ;;		_crc8
  9053 ;; This function is called by:
  9054 ;;		_doModeVscp
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           	psect	text8
  9059  00290A                     __ptext8:
  9060                           	opt stack 0
  9061  00290A                     _sendVSCPDriverErrorFrame:
  9062                           	opt stack 22
  9063                           
  9064                           ;incstack = 0
  9065                           ;incstack = 0
  9066                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9067  00290A  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9068                           
  9069                           ; BSR set to: 1
  9070                           ;main.c: 1616: uint8_t crc = 0;
  9071  00290E  0100               	movlb	0	; () banked
  9072  002910  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9073  002912                     l809:
  9074  002912  A2AC               	btfss	4012,1,c	;volatile
  9075  002914  D7FE               	goto	l809
  9076                           
  9077                           ;main.c: 1620: WriteUSART(0x10);
  9078  002916  0E10               	movlw	16
  9079  002918  EC7E  F00A         	call	_WriteUSART
  9080  00291C                     l812:
  9081  00291C  A2AC               	btfss	4012,1,c	;volatile
  9082  00291E  D7FE               	goto	l812
  9083                           
  9084                           ;main.c: 1622: WriteUSART(0x02);
  9085  002920  0E02               	movlw	2
  9086  002922  EC7E  F00A         	call	_WriteUSART
  9087  002926                     l815:
  9088  002926  A2AC               	btfss	4012,1,c	;volatile
  9089  002928  D7FE               	goto	l815
  9090                           
  9091                           ;main.c: 1626: WriteUSART(253);
  9092  00292A  0EFD               	movlw	253
  9093  00292C  EC7E  F00A         	call	_WriteUSART
  9094                           
  9095                           ;main.c: 1627: crc8(&crc, 253);
  9096  002930  0100               	movlb	0	; () banked
  9097  002932  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9098  002934  6F68               	movwf	(?_crc8+1)& (0+255),b
  9099  002936  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9100  002938  6F67               	movwf	?_crc8& (0+255),b
  9101  00293A  0EFD               	movlw	253
  9102  00293C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9103  00293E  EC62  F00B         	call	_crc8	;wreg free
  9104  002942                     l818:
  9105  002942  A2AC               	btfss	4012,1,c	;volatile
  9106  002944  D7FE               	goto	l818
  9107                           
  9108                           ;main.c: 1631: WriteUSART(0);
  9109  002946  0E00               	movlw	0
  9110  002948  EC7E  F00A         	call	_WriteUSART
  9111                           
  9112                           ;main.c: 1632: crc8(&crc, 0);
  9113  00294C  D836               	call	PL90	;call to abstracted procedure
  9114  00294E  EC62  F00B         	call	_crc8	;wreg free
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;main.c: 1635: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9118  002952  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9119  002954  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9120  002956  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9121  002958  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9122  00295A  0101               	movlb	1	; () banked
  9123  00295C  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  9124  00295E  ECE6  F00D         	call	_sendEscapedUartData
  9125  002962                     l821:
  9126  002962  A2AC               	btfss	4012,1,c	;volatile
  9127  002964  D7FE               	goto	l821
  9128                           
  9129                           ;main.c: 1639: WriteUSART(0);
  9130  002966  0E00               	movlw	0
  9131  002968  EC7E  F00A         	call	_WriteUSART
  9132                           
  9133                           ;main.c: 1640: crc8(&crc, 0);
  9134  00296C  D826               	call	PL90	;call to abstracted procedure
  9135  00296E  EC62  F00B         	call	_crc8	;wreg free
  9136  002972                     l824:
  9137  002972  A2AC               	btfss	4012,1,c	;volatile
  9138  002974  D7FE               	goto	l824
  9139                           
  9140                           ;main.c: 1642: WriteUSART(1);
  9141  002976  0E01               	movlw	1
  9142  002978  EC7E  F00A         	call	_WriteUSART
  9143                           
  9144                           ;main.c: 1643: crc8(&crc, 1);
  9145  00297C  0100               	movlb	0	; () banked
  9146  00297E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9147  002980  6F68               	movwf	(?_crc8+1)& (0+255),b
  9148  002982  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9149  002984  6F67               	movwf	?_crc8& (0+255),b
  9150  002986  0E01               	movlw	1
  9151  002988  6F69               	movwf	(?_crc8+2)& (0+255),b
  9152  00298A  EC62  F00B         	call	_crc8	;wreg free
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;main.c: 1646: sendEscapedUartData(errorcode, &crc);
  9156  00298E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9157  002990  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9158  002992  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9159  002994  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9160  002996  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9161  002998  ECE6  F00D         	call	_sendEscapedUartData
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;main.c: 1649: sendEscapedUartData(crc, (0));
  9165  00299C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9166  00299E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9167  0029A0  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9168  0029A2  ECE6  F00D         	call	_sendEscapedUartData
  9169  0029A6                     l827:
  9170  0029A6  A2AC               	btfss	4012,1,c	;volatile
  9171  0029A8  D7FE               	goto	l827
  9172                           
  9173                           ;main.c: 1653: WriteUSART(0x10);
  9174  0029AA  0E10               	movlw	16
  9175  0029AC  EC7E  F00A         	call	_WriteUSART
  9176  0029B0                     l830:
  9177  0029B0  A2AC               	btfss	4012,1,c	;volatile
  9178  0029B2  D7FE               	goto	l830
  9179                           
  9180                           ;main.c: 1655: WriteUSART(0x03);
  9181  0029B4  0E03               	movlw	3
  9182  0029B6  EF7E  F00A         	goto	_WriteUSART
  9183  0029BA                     __end_of_sendVSCPDriverErrorFrame:
  9184                           	opt stack 0
  9185  0029BA                     PL90:
  9186                           	opt stack 22
  9187  0029BA  0100               	movlb	0	; () banked
  9188  0029BC  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9189  0029BE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9190  0029C0  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9191  0029C2  6F67               	movwf	?_crc8& (0+255),b
  9192  0029C4  6B69               	clrf	(?_crc8+2)& (0+255),b
  9193  0029C6  0C00               	retlw	0
  9194  0029C8                     __end_ofPL90:
  9195                           	opt stack 0
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           indf0	equ	0xFEF
  9204                           postinc0	equ	0xFEE
  9205                           fsr0h	equ	0xFEA
  9206                           fsr0l	equ	0xFE9
  9207                           wreg	equ	0xFE8
  9208                           indf1	equ	0xFE7
  9209                           postinc1	equ	0xFE6
  9210                           postdec1	equ	0xFE5
  9211                           fsr1h	equ	0xFE2
  9212                           fsr1l	equ	0xFE1
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           plusw2	equ	0xFDB
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _sendVSCPDriverCommandReply *****************
  9222 ;; Defined at:
  9223 ;;		line 1752 in file "main.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  cmdReplyCode    1    wreg     unsigned char 
  9226 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9229 ;;  crc             1   17[BANK0 ] unsigned char 
  9230 ;; Return value:  Size  Location     Type
  9231 ;;		None               void
  9232 ;; Registers used:
  9233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : F/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9239 ;;      Params:         0       1       0       0       0       0       0
  9240 ;;      Locals:         0       2       0       0       0       0       0
  9241 ;;      Temps:          0       0       0       0       0       0       0
  9242 ;;      Totals:         0       3       0       0       0       0       0
  9243 ;;Total ram usage:        3 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    6
  9246 ;; This function calls:
  9247 ;;		_WriteUSART
  9248 ;;		_sendEscapedUartData
  9249 ;;		_crc8
  9250 ;; This function is called by:
  9251 ;;		_doModeVscp
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           	psect	text9
  9256  002B68                     __ptext9:
  9257                           	opt stack 0
  9258  002B68                     _sendVSCPDriverCommandReply:
  9259                           	opt stack 22
  9260                           
  9261                           ;incstack = 0
  9262                           ;incstack = 0
  9263                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9264  002B68  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;main.c: 1753: uint8_t crc = 0;
  9268  002B6C  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9269  002B6E                     l890:
  9270                           
  9271                           ; BSR set to: 0
  9272  002B6E  A2AC               	btfss	4012,1,c	;volatile
  9273  002B70  D7FE               	goto	l890
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;main.c: 1757: WriteUSART(0x10);
  9277  002B72  0E10               	movlw	16
  9278  002B74  EC7E  F00A         	call	_WriteUSART
  9279  002B78                     l893:
  9280  002B78  A2AC               	btfss	4012,1,c	;volatile
  9281  002B7A  D7FE               	goto	l893
  9282                           
  9283                           ;main.c: 1759: WriteUSART(0x02);
  9284  002B7C  0E02               	movlw	2
  9285  002B7E  EC7E  F00A         	call	_WriteUSART
  9286  002B82                     l896:
  9287  002B82  A2AC               	btfss	4012,1,c	;volatile
  9288  002B84  D7FE               	goto	l896
  9289                           
  9290                           ;main.c: 1763: WriteUSART(254);
  9291  002B86  0EFE               	movlw	254
  9292  002B88  EC7E  F00A         	call	_WriteUSART
  9293                           
  9294                           ;main.c: 1764: crc8(&crc, 254);
  9295  002B8C  0100               	movlb	0	; () banked
  9296  002B8E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9297  002B90  6F68               	movwf	(?_crc8+1)& (0+255),b
  9298  002B92  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9299  002B94  6F67               	movwf	?_crc8& (0+255),b
  9300  002B96  0EFE               	movlw	254
  9301  002B98  6F69               	movwf	(?_crc8+2)& (0+255),b
  9302  002B9A  EC62  F00B         	call	_crc8	;wreg free
  9303  002B9E                     l899:
  9304                           
  9305                           ; BSR set to: 0
  9306  002B9E  A2AC               	btfss	4012,1,c	;volatile
  9307  002BA0  D7FE               	goto	l899
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;main.c: 1768: WriteUSART(0);
  9311  002BA2  0E00               	movlw	0
  9312  002BA4  EC7E  F00A         	call	_WriteUSART
  9313                           
  9314                           ;main.c: 1769: crc8(&crc, 0);
  9315  002BA8  D841               	call	PL82	;call to abstracted procedure
  9316  002BAA  EC62  F00B         	call	_crc8	;wreg free
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;main.c: 1772: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9320  002BAE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9321  002BB0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9322  002BB2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9323  002BB4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9324  002BB6  0101               	movlb	1	; () banked
  9325  002BB8  512D               	movf	(_cmdbuf+2)& (0+255),w,b
  9326  002BBA  ECE6  F00D         	call	_sendEscapedUartData
  9327  002BBE                     l902:
  9328                           
  9329                           ; BSR set to: 0
  9330  002BBE  A2AC               	btfss	4012,1,c	;volatile
  9331  002BC0  D7FE               	goto	l902
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;main.c: 1776: WriteUSART(0);
  9335  002BC2  0E00               	movlw	0
  9336  002BC4  EC7E  F00A         	call	_WriteUSART
  9337                           
  9338                           ;main.c: 1777: crc8(&crc, 0);
  9339  002BC8  D831               	call	PL82	;call to abstracted procedure
  9340  002BCA  EC62  F00B         	call	_crc8	;wreg free
  9341  002BCE                     l905:
  9342                           
  9343                           ; BSR set to: 0
  9344  002BCE  A2AC               	btfss	4012,1,c	;volatile
  9345  002BD0  D7FE               	goto	l905
  9346                           
  9347                           ; BSR set to: 0
  9348                           ;main.c: 1779: WriteUSART(2);
  9349  002BD2  0E02               	movlw	2
  9350  002BD4  EC7E  F00A         	call	_WriteUSART
  9351                           
  9352                           ;main.c: 1780: crc8(&crc, 2);
  9353  002BD8  0100               	movlb	0	; () banked
  9354  002BDA  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9355  002BDC  6F68               	movwf	(?_crc8+1)& (0+255),b
  9356  002BDE  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9357  002BE0  6F67               	movwf	?_crc8& (0+255),b
  9358  002BE2  0E02               	movlw	2
  9359  002BE4  6F69               	movwf	(?_crc8+2)& (0+255),b
  9360  002BE6  EC62  F00B         	call	_crc8	;wreg free
  9361  002BEA                     l908:
  9362                           
  9363                           ; BSR set to: 0
  9364  002BEA  A2AC               	btfss	4012,1,c	;volatile
  9365  002BEC  D7FE               	goto	l908
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;main.c: 1784: sendEscapedUartData(cmdReplyCode, &crc);
  9369  002BEE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9370  002BF0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9371  002BF2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9372  002BF4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9373  002BF6  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9374  002BF8  ECE6  F00D         	call	_sendEscapedUartData
  9375  002BFC                     l911:
  9376                           
  9377                           ; BSR set to: 0
  9378  002BFC  A2AC               	btfss	4012,1,c	;volatile
  9379  002BFE  D7FE               	goto	l911
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;main.c: 1788: sendEscapedUartData(cmdCode, &crc);
  9383  002C00  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9384  002C02  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9385  002C04  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9386  002C06  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9387  002C08  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9388  002C0A  ECE6  F00D         	call	_sendEscapedUartData
  9389                           
  9390                           ;main.c: 1791: sendEscapedUartData(crc, (0));
  9391  002C0E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9392  002C10  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9393  002C12  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9394  002C14  ECE6  F00D         	call	_sendEscapedUartData
  9395  002C18                     l914:
  9396                           
  9397                           ; BSR set to: 0
  9398  002C18  A2AC               	btfss	4012,1,c	;volatile
  9399  002C1A  D7FE               	goto	l914
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;main.c: 1795: WriteUSART(0x10);
  9403  002C1C  0E10               	movlw	16
  9404  002C1E  EC7E  F00A         	call	_WriteUSART
  9405  002C22                     l917:
  9406  002C22  A2AC               	btfss	4012,1,c	;volatile
  9407  002C24  D7FE               	goto	l917
  9408                           
  9409                           ;main.c: 1797: WriteUSART(0x03);
  9410  002C26  0E03               	movlw	3
  9411  002C28  EF7E  F00A         	goto	_WriteUSART
  9412  002C2C                     __end_of_sendVSCPDriverCommandReply:
  9413                           	opt stack 0
  9414  002C2C                     PL82:
  9415                           	opt stack 22
  9416  002C2C  0100               	movlb	0	; () banked
  9417  002C2E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9418  002C30  6F68               	movwf	(?_crc8+1)& (0+255),b
  9419  002C32  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9420  002C34  6F67               	movwf	?_crc8& (0+255),b
  9421  002C36  6B69               	clrf	(?_crc8+2)& (0+255),b
  9422  002C38  0C00               	retlw	0
  9423  002C3A                     __end_ofPL82:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           indf0	equ	0xFEF
  9433                           postinc0	equ	0xFEE
  9434                           fsr0h	equ	0xFEA
  9435                           fsr0l	equ	0xFE9
  9436                           wreg	equ	0xFE8
  9437                           indf1	equ	0xFE7
  9438                           postinc1	equ	0xFE6
  9439                           postdec1	equ	0xFE5
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           plusw2	equ	0xFDB
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _sendVSCPModeCapabilities *****************
  9451 ;; Defined at:
  9452 ;;		line 2121 in file "main.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;  crc             1   15[BANK0 ] unsigned char 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      enum E15660
  9459 ;; Registers used:
  9460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : F/1
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9466 ;;      Params:         0       0       0       0       0       0       0
  9467 ;;      Locals:         0       1       0       0       0       0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0
  9469 ;;      Totals:         0       1       0       0       0       0       0
  9470 ;;Total ram usage:        1 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    6
  9473 ;; This function calls:
  9474 ;;		_WriteUSART
  9475 ;;		_sendEscapedUartData
  9476 ;;		_crc8
  9477 ;; This function is called by:
  9478 ;;		_doModeVscp
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text10
  9483  00279C                     __ptext10:
  9484                           	opt stack 0
  9485  00279C                     _sendVSCPModeCapabilities:
  9486                           	opt stack 22
  9487                           
  9488                           ; BSR set to: 1
  9489                           ;main.c: 2122: uint8_t crc = 0;
  9490                           
  9491                           ;incstack = 0
  9492                           ;incstack = 0
  9493  00279C  0100               	movlb	0	; () banked
  9494  00279E  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9495  0027A0                     l1039:
  9496  0027A0  A2AC               	btfss	4012,1,c	;volatile
  9497  0027A2  D7FE               	goto	l1039
  9498                           
  9499                           ;main.c: 2126: WriteUSART(0x10);
  9500  0027A4  0E10               	movlw	16
  9501  0027A6  EC7E  F00A         	call	_WriteUSART
  9502  0027AA                     l1042:
  9503  0027AA  A2AC               	btfss	4012,1,c	;volatile
  9504  0027AC  D7FE               	goto	l1042
  9505                           
  9506                           ;main.c: 2128: WriteUSART(0x02);
  9507  0027AE  0E02               	movlw	2
  9508  0027B0  EC7E  F00A         	call	_WriteUSART
  9509  0027B4                     l1045:
  9510  0027B4  A2AC               	btfss	4012,1,c	;volatile
  9511  0027B6  D7FE               	goto	l1045
  9512                           
  9513                           ;main.c: 2132: WriteUSART(9);
  9514  0027B8  0E09               	movlw	9
  9515  0027BA  EC7E  F00A         	call	_WriteUSART
  9516                           
  9517                           ;main.c: 2133: crc8(&crc, 9);
  9518  0027BE  0100               	movlb	0	; () banked
  9519  0027C0  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9520  0027C2  6F68               	movwf	(?_crc8+1)& (0+255),b
  9521  0027C4  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9522  0027C6  6F67               	movwf	?_crc8& (0+255),b
  9523  0027C8  0E09               	movlw	9
  9524  0027CA  6F69               	movwf	(?_crc8+2)& (0+255),b
  9525  0027CC  EC62  F00B         	call	_crc8	;wreg free
  9526  0027D0                     l1048:
  9527  0027D0  A2AC               	btfss	4012,1,c	;volatile
  9528  0027D2  D7FE               	goto	l1048
  9529                           
  9530                           ;main.c: 2137: WriteUSART(0);
  9531  0027D4  0E00               	movlw	0
  9532  0027D6  EC7E  F00A         	call	_WriteUSART
  9533                           
  9534                           ;main.c: 2138: crc8(&crc, 0);
  9535  0027DA  0100               	movlb	0	; () banked
  9536  0027DC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9537  0027DE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9538  0027E0  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9539  0027E2  6F67               	movwf	?_crc8& (0+255),b
  9540  0027E4  0E00               	movlw	0
  9541  0027E6  6B69               	clrf	(?_crc8+2)& (0+255),b
  9542  0027E8  EC62  F00B         	call	_crc8	;wreg free
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;main.c: 2141: sendEscapedUartData(sequencyno, &crc );
  9546  0027EC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9547  0027EE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9548  0027F0  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9549  0027F2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9550  0027F4  5036               	movf	_sequencyno,w,c
  9551  0027F6  ECE6  F00D         	call	_sendEscapedUartData
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;main.c: 2142: sequencyno++;
  9555  0027FA  2A36               	incf	_sequencyno,f,c
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;main.c: 2145: sendEscapedUartData( 0, &crc );
  9559  0027FC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9560  0027FE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9561  002800  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9562  002802  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9563  002804  0E00               	movlw	0
  9564  002806  ECE6  F00D         	call	_sendEscapedUartData
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;main.c: 2146: sendEscapedUartData( 2, &crc );
  9568  00280A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9569  00280C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9570  00280E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9571  002810  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9572  002812  0E02               	movlw	2
  9573  002814  ECE6  F00D         	call	_sendEscapedUartData
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;main.c: 2149: sendEscapedUartData( 1, &crc );
  9577  002818  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9578  00281A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9579  00281C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9580  00281E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9581  002820  0E01               	movlw	1
  9582  002822  ECE6  F00D         	call	_sendEscapedUartData
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;main.c: 2150: sendEscapedUartData( 0, &crc );
  9586  002826  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9587  002828  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9588  00282A  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9589  00282C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9590  00282E  0E00               	movlw	0
  9591  002830  ECE6  F00D         	call	_sendEscapedUartData
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;main.c: 2153: sendEscapedUartData(crc, (0));
  9595  002834  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9596  002836  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9597  002838  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9598  00283A  ECE6  F00D         	call	_sendEscapedUartData
  9599  00283E                     l1051:
  9600  00283E  A2AC               	btfss	4012,1,c	;volatile
  9601  002840  D7FE               	goto	l1051
  9602                           
  9603                           ;main.c: 2157: WriteUSART(0x10);
  9604  002842  0E10               	movlw	16
  9605  002844  EC7E  F00A         	call	_WriteUSART
  9606  002848                     l1054:
  9607  002848  A2AC               	btfss	4012,1,c	;volatile
  9608  00284A  D7FE               	goto	l1054
  9609                           
  9610                           ;main.c: 2159: WriteUSART(0x03);
  9611  00284C  0E03               	movlw	3
  9612  00284E  EF7E  F00A         	goto	_WriteUSART
  9613  002852                     __end_of_sendVSCPModeCapabilities:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           indf0	equ	0xFEF
  9623                           postinc0	equ	0xFEE
  9624                           fsr0h	equ	0xFEA
  9625                           fsr0l	equ	0xFE9
  9626                           wreg	equ	0xFE8
  9627                           indf1	equ	0xFE7
  9628                           postinc1	equ	0xFE6
  9629                           postdec1	equ	0xFE5
  9630                           fsr1h	equ	0xFE2
  9631                           fsr1l	equ	0xFE1
  9632                           indf2	equ	0xFDF
  9633                           postinc2	equ	0xFDE
  9634                           postdec2	equ	0xFDD
  9635                           plusw2	equ	0xFDB
  9636                           fsr2h	equ	0xFDA
  9637                           fsr2l	equ	0xFD9
  9638                           status	equ	0xFD8
  9639                           
  9640 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9641 ;; Defined at:
  9642 ;;		line 2255 in file "main.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;		None
  9647 ;; Return value:  Size  Location     Type
  9648 ;;                  1    wreg      enum E15660
  9649 ;; Registers used:
  9650 ;;		wreg
  9651 ;; Tracked objects:
  9652 ;;		On entry : F/1
  9653 ;;		On exit  : F/1
  9654 ;;		Unchanged: F/0
  9655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9656 ;;      Params:         0       0       0       0       0       0       0
  9657 ;;      Locals:         0       0       0       0       0       0       0
  9658 ;;      Temps:          0       0       0       0       0       0       0
  9659 ;;      Totals:         0       0       0       0       0       0       0
  9660 ;;Total ram usage:        0 bytes
  9661 ;; Hardware stack levels used:    1
  9662 ;; Hardware stack levels required when called:    3
  9663 ;; This function calls:
  9664 ;;		Nothing
  9665 ;; This function is called by:
  9666 ;;		_doModeVscp
  9667 ;; This function uses a non-reentrant model
  9668 ;;
  9669                           
  9670                           	psect	text11
  9671  0014B4                     __ptext11:
  9672                           	opt stack 0
  9673  0014B4                     _receiveVSCPModeMultiCanalMsg:
  9674                           	opt stack 25
  9675                           
  9676                           ; BSR set to: 1
  9677                           
  9678                           ; BSR set to: 1
  9679                           ;main.c: 2257: return 0;
  9680                           
  9681                           ;incstack = 0
  9682                           ;incstack = 0
  9683  0014B4  0C00               	retlw	0
  9684  0014B6                     __end_of_receiveVSCPModeMultiCanalMsg:
  9685                           	opt stack 0
  9686                           tblptru	equ	0xFF8
  9687                           tblptrh	equ	0xFF7
  9688                           tblptrl	equ	0xFF6
  9689                           tablat	equ	0xFF5
  9690                           prodh	equ	0xFF4
  9691                           prodl	equ	0xFF3
  9692                           intcon	equ	0xFF2
  9693                           indf0	equ	0xFEF
  9694                           postinc0	equ	0xFEE
  9695                           fsr0h	equ	0xFEA
  9696                           fsr0l	equ	0xFE9
  9697                           wreg	equ	0xFE8
  9698                           indf1	equ	0xFE7
  9699                           postinc1	equ	0xFE6
  9700                           postdec1	equ	0xFE5
  9701                           fsr1h	equ	0xFE2
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           plusw2	equ	0xFDB
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9712 ;; Defined at:
  9713 ;;		line 2231 in file "main.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;		None
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  data            8   74[BANK0 ] unsigned char [8]
  9718 ;;  id              4   82[BANK0 ] unsigned long 
  9719 ;;  dlc             1   86[BANK0 ] unsigned char 
  9720 ;; Return value:  Size  Location     Type
  9721 ;;                  1    wreg      enum E15660
  9722 ;; Registers used:
  9723 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : F/1
  9726 ;;		On exit  : E/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9729 ;;      Params:         0       0       0       0       0       0       0
  9730 ;;      Locals:         0      13       0       0       0       0       0
  9731 ;;      Temps:          0      20       0       0       0       0       0
  9732 ;;      Totals:         0      33       0       0       0       0       0
  9733 ;;Total ram usage:       33 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:    6
  9736 ;; This function calls:
  9737 ;;		_memcpy
  9738 ;;		_sendCANFrame
  9739 ;; This function is called by:
  9740 ;;		_doModeVscp
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text12
  9745  002E02                     __ptext12:
  9746                           	opt stack 0
  9747  002E02                     _receiveVSCPModeCanalMsg:
  9748                           	opt stack 22
  9749                           
  9750                           ; BSR set to: 1
  9751                           ;main.c: 2232: uint32_t id;
  9752                           ;main.c: 2233: uint8_t dlc;
  9753                           ;main.c: 2234: uint8_t data[8];
  9754                           ;main.c: 2236: id = ((uint32_t) cmdbuf[5] << 26) |
  9755                           ;main.c: 2237: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9756                           ;main.c: 2238: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9757                           ;main.c: 2239: cmdbuf[5 + 3];
  9758                           
  9759                           ; BSR set to: 1
  9760                           ;incstack = 0
  9761                           ;incstack = 0
  9762  002E02  C132  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9763  002E06  0100               	movlb	0	; () banked
  9764  002E08  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9765  002E0A  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9766  002E0C  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9767  002E0E  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9768  002E12  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9769  002E16  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9770  002E1A  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9771  002E1C  C131  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9772  002E20  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9773  002E22  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9774  002E24  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9775  002E26  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9776  002E2A  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9777  002E2E  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9778  002E30  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9779  002E32  C130  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9780  002E36  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9781  002E38  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9782  002E3A  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9783  002E3C  0E1A               	movlw	26
  9784  002E3E                     u21845:
  9785  002E3E  90D8               	bcf	status,0,c
  9786  002E40  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9787  002E42  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9788  002E44  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9789  002E46  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9790  002E48  2EE8               	decfsz	wreg,f,c
  9791  002E4A  D7F9               	goto	u21845
  9792  002E4C  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9793  002E4E  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9794  002E50  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9795  002E52  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9796  002E54  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9797  002E56  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9798  002E58  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9799  002E5A  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9800  002E5C  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9801  002E5E  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9802  002E60  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9803  002E62  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9804  002E64  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9805  002E66  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9806  002E68  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9807  002E6A  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9808  002E6C  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9809  002E6E  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9810  002E70  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9811  002E72  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9812  002E74  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9813  002E76  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9814  002E78  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9815  002E7A  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9816  002E7C  0101               	movlb	1	; () banked
  9817  002E7E  5133               	movf	(_cmdbuf+8)& (0+255),w,b
  9818  002E80  0100               	movlb	0	; () banked
  9819  002E82  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9820  002E84  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9821  002E86  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9822  002E88  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9823  002E8A  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9824  002E8C  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9825  002E8E  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9826  002E90  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9827                           
  9828                           ;main.c: 2240: dlc = ( cmdbuf[4] - 4 ) & 0x07;
  9829  002E92  0101               	movlb	1	; () banked
  9830  002E94  512F               	movf	(_cmdbuf+4)& (0+255),w,b
  9831  002E96  0FFC               	addlw	252
  9832  002E98  0B07               	andlw	7
  9833  002E9A  0100               	movlb	0	; () banked
  9834  002E9C  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;main.c: 2241: if ( dlc > 8 ) {
  9838  002E9E  0E08               	movlw	8
  9839  002EA0  65B6               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9840  002EA2  D002               	goto	l16076
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;main.c: 2242: return 0;
  9844  002EA4  0E00               	movlw	0
  9845  002EA6  D021               	goto	l1092
  9846  002EA8                     l16076:
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;main.c: 2243: }
  9850                           ;main.c: 2244: memcpy( data, cmdbuf + 5 + 4, dlc );
  9851  002EA8  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9852  002EAA  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9853  002EAC  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9854  002EAE  6F60               	movwf	?_memcpy& (0+255),b
  9855  002EB0  0E34               	movlw	low (_cmdbuf+9)
  9856  002EB2  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9857  002EB4  0E01               	movlw	high (_cmdbuf+9)
  9858  002EB6  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9859  002EB8  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9860  002EBC  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9861  002EC0  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9862  002EC4  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9863  002EC6  EC38  F00C         	call	_memcpy	;wreg free
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;main.c: 2246: return sendCANFrame(id, dlc, data);
  9867  002ECA  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9868  002ECE  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9869  002ED2  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9870  002ED6  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9871  002EDA  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9872  002EDE  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9873  002EE0  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9874  002EE2  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9875  002EE4  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9876  002EE6  EC7E  F00B         	call	_sendCANFrame	;wreg free
  9877  002EEA                     l1092:
  9878  002EEA  0012               	return	
  9879  002EEC                     __end_of_receiveVSCPModeCanalMsg:
  9880                           	opt stack 0
  9881                           tblptru	equ	0xFF8
  9882                           tblptrh	equ	0xFF7
  9883                           tblptrl	equ	0xFF6
  9884                           tablat	equ	0xFF5
  9885                           prodh	equ	0xFF4
  9886                           prodl	equ	0xFF3
  9887                           intcon	equ	0xFF2
  9888                           indf0	equ	0xFEF
  9889                           postinc0	equ	0xFEE
  9890                           fsr0h	equ	0xFEA
  9891                           fsr0l	equ	0xFE9
  9892                           wreg	equ	0xFE8
  9893                           indf1	equ	0xFE7
  9894                           postinc1	equ	0xFE6
  9895                           postdec1	equ	0xFE5
  9896                           fsr1h	equ	0xFE2
  9897                           fsr1l	equ	0xFE1
  9898                           indf2	equ	0xFDF
  9899                           postinc2	equ	0xFDE
  9900                           postdec2	equ	0xFDD
  9901                           plusw2	equ	0xFDB
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _memcpy *****************
  9907 ;; Defined at:
  9908 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  d1              2    0[BANK0 ] PTR void 
  9911 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9912 ;;  s1              2    2[BANK0 ] PTR const void 
  9913 ;;		 -> vscpData(8), cmdbuf(80), 
  9914 ;;  n               2    4[BANK0 ] unsigned int 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9917 ;;		 -> vscpData(8), cmdbuf(80), 
  9918 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9919 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9920 ;; Return value:  Size  Location     Type
  9921 ;;                  2    0[BANK0 ] PTR void 
  9922 ;; Registers used:
  9923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9924 ;; Tracked objects:
  9925 ;;		On entry : F/0
  9926 ;;		On exit  : F/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9929 ;;      Params:         0       6       0       0       0       0       0
  9930 ;;      Locals:         0       4       0       0       0       0       0
  9931 ;;      Temps:          0       0       0       0       0       0       0
  9932 ;;      Totals:         0      10       0       0       0       0       0
  9933 ;;Total ram usage:       10 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    3
  9936 ;; This function calls:
  9937 ;;		Nothing
  9938 ;; This function is called by:
  9939 ;;		_doModeSLCAN
  9940 ;;		_receiveVSCPModeCanalMsg
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text13
  9945  001870                     __ptext13:
  9946                           	opt stack 0
  9947  001870                     _memcpy:
  9948                           	opt stack 25
  9949                           
  9950                           ; BSR set to: 0
  9951                           
  9952                           ;incstack = 0
  9953                           ;incstack = 0
  9954  001870  C062  F068         	movff	memcpy@s1,memcpy@s
  9955  001874  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9956  001878  C060  F066         	movff	memcpy@d1,memcpy@d
  9957  00187C  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9958  001880  D00E               	goto	l16286
  9959  001882                     l16280:
  9960                           
  9961                           ; BSR set to: 0
  9962  001882  C068  FFD9         	movff	memcpy@s,fsr2l
  9963  001886  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9964  00188A  C066  FFE1         	movff	memcpy@d,fsr1l
  9965  00188E  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9966  001892  CFDF FFE7          	movff	indf2,indf1
  9967                           
  9968                           ; BSR set to: 0
  9969  001896  4B68               	infsnz	memcpy@s& (0+255),f,b
  9970  001898  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9971                           
  9972                           ; BSR set to: 0
  9973  00189A  4B66               	infsnz	memcpy@d& (0+255),f,b
  9974  00189C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9975  00189E                     l16286:
  9976                           
  9977                           ; BSR set to: 0
  9978  00189E  0764               	decf	memcpy@n& (0+255),f,b
  9979  0018A0  A0D8               	btfss	status,0,c
  9980  0018A2  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9981  0018A4  0100               	movlb	0	; () banked
  9982  0018A6  2964               	incf	memcpy@n& (0+255),w,b
  9983  0018A8  B4D8               	btfsc	status,2,c
  9984  0018AA  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9985  0018AC  B4D8               	btfsc	status,2,c
  9986                           
  9987                           ; BSR set to: 0
  9988  0018AE  0012               	return	
  9989  0018B0  D7E8               	goto	l16280
  9990  0018B2                     __end_of_memcpy:
  9991                           	opt stack 0
  9992                           tblptru	equ	0xFF8
  9993                           tblptrh	equ	0xFF7
  9994                           tblptrl	equ	0xFF6
  9995                           tablat	equ	0xFF5
  9996                           prodh	equ	0xFF4
  9997                           prodl	equ	0xFF3
  9998                           intcon	equ	0xFF2
  9999                           indf0	equ	0xFEF
 10000                           postinc0	equ	0xFEE
 10001                           fsr0h	equ	0xFEA
 10002                           fsr0l	equ	0xFE9
 10003                           wreg	equ	0xFE8
 10004                           indf1	equ	0xFE7
 10005                           postinc1	equ	0xFE6
 10006                           postdec1	equ	0xFE5
 10007                           fsr1h	equ	0xFE2
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           plusw2	equ	0xFDB
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function _sendVSCPDriverAck *****************
 10018 ;; Defined at:
 10019 ;;		line 1663 in file "main.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  crc             1   15[BANK0 ] unsigned char 
 10024 ;; Return value:  Size  Location     Type
 10025 ;;		None               void
 10026 ;; Registers used:
 10027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/1
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10033 ;;      Params:         0       0       0       0       0       0       0
 10034 ;;      Locals:         0       1       0       0       0       0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0
 10036 ;;      Totals:         0       1       0       0       0       0       0
 10037 ;;Total ram usage:        1 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    6
 10040 ;; This function calls:
 10041 ;;		_WriteUSART
 10042 ;;		_sendEscapedUartData
 10043 ;;		_crc8
 10044 ;; This function is called by:
 10045 ;;		_doModeVscp
 10046 ;; This function uses a non-reentrant model
 10047 ;;
 10048                           
 10049                           	psect	text14
 10050  002442                     __ptext14:
 10051                           	opt stack 0
 10052  002442                     _sendVSCPDriverAck:
 10053                           	opt stack 22
 10054                           
 10055                           ;main.c: 1664: uint8_t crc = 0;
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;incstack = 0
 10059                           ;incstack = 0
 10060  002442  0100               	movlb	0	; () banked
 10061  002444  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10062  002446                     l836:
 10063  002446  A2AC               	btfss	4012,1,c	;volatile
 10064  002448  D7FE               	goto	l836
 10065                           
 10066                           ;main.c: 1668: WriteUSART(0x10);
 10067  00244A  0E10               	movlw	16
 10068  00244C  EC7E  F00A         	call	_WriteUSART
 10069  002450                     l839:
 10070  002450  A2AC               	btfss	4012,1,c	;volatile
 10071  002452  D7FE               	goto	l839
 10072                           
 10073                           ;main.c: 1670: WriteUSART(0x02);
 10074  002454  0E02               	movlw	2
 10075  002456  EC7E  F00A         	call	_WriteUSART
 10076  00245A                     l842:
 10077  00245A  A2AC               	btfss	4012,1,c	;volatile
 10078  00245C  D7FE               	goto	l842
 10079                           
 10080                           ;main.c: 1674: WriteUSART(251);
 10081  00245E  0EFB               	movlw	251
 10082  002460  EC7E  F00A         	call	_WriteUSART
 10083                           
 10084                           ;main.c: 1675: crc8(&crc, 251);
 10085  002464  0100               	movlb	0	; () banked
 10086  002466  0E00               	movlw	high sendVSCPDriverAck@crc
 10087  002468  6F68               	movwf	(?_crc8+1)& (0+255),b
 10088  00246A  0E6F               	movlw	low sendVSCPDriverAck@crc
 10089  00246C  6F67               	movwf	?_crc8& (0+255),b
 10090  00246E  0EFB               	movlw	251
 10091  002470  6F69               	movwf	(?_crc8+2)& (0+255),b
 10092  002472  EC62  F00B         	call	_crc8	;wreg free
 10093  002476                     l845:
 10094  002476  A2AC               	btfss	4012,1,c	;volatile
 10095  002478  D7FE               	goto	l845
 10096                           
 10097                           ;main.c: 1679: WriteUSART(0);
 10098  00247A  0E00               	movlw	0
 10099  00247C  EC7E  F00A         	call	_WriteUSART
 10100                           
 10101                           ;main.c: 1680: crc8(&crc, 0);
 10102  002480  D829               	call	PL46	;call to abstracted procedure
 10103  002482  EC62  F00B         	call	_crc8	;wreg free
 10104                           
 10105                           ; BSR set to: 0
 10106                           ;main.c: 1683: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10107  002486  0E00               	movlw	high sendVSCPDriverAck@crc
 10108  002488  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10109  00248A  0E6F               	movlw	low sendVSCPDriverAck@crc
 10110  00248C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10111  00248E  0101               	movlb	1	; () banked
 10112  002490  512D               	movf	(_cmdbuf+2)& (0+255),w,b
 10113  002492  ECE6  F00D         	call	_sendEscapedUartData
 10114  002496                     l848:
 10115  002496  A2AC               	btfss	4012,1,c	;volatile
 10116  002498  D7FE               	goto	l848
 10117                           
 10118                           ;main.c: 1687: WriteUSART(0);
 10119  00249A  0E00               	movlw	0
 10120  00249C  EC7E  F00A         	call	_WriteUSART
 10121                           
 10122                           ;main.c: 1688: crc8(&crc, 0);
 10123  0024A0  D819               	call	PL46	;call to abstracted procedure
 10124  0024A2  EC62  F00B         	call	_crc8	;wreg free
 10125  0024A6                     l851:
 10126  0024A6  A2AC               	btfss	4012,1,c	;volatile
 10127  0024A8  D7FE               	goto	l851
 10128                           
 10129                           ;main.c: 1690: WriteUSART(0);
 10130  0024AA  0E00               	movlw	0
 10131  0024AC  EC7E  F00A         	call	_WriteUSART
 10132                           
 10133                           ;main.c: 1691: crc8(&crc, 0);
 10134  0024B0  D811               	call	PL46	;call to abstracted procedure
 10135  0024B2  EC62  F00B         	call	_crc8	;wreg free
 10136                           
 10137                           ; BSR set to: 0
 10138                           ;main.c: 1694: sendEscapedUartData(crc, (0));
 10139  0024B6  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10140  0024B8  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10141  0024BA  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10142  0024BC  ECE6  F00D         	call	_sendEscapedUartData
 10143  0024C0                     l854:
 10144  0024C0  A2AC               	btfss	4012,1,c	;volatile
 10145  0024C2  D7FE               	goto	l854
 10146                           
 10147                           ;main.c: 1698: WriteUSART(0x10);
 10148  0024C4  0E10               	movlw	16
 10149  0024C6  EC7E  F00A         	call	_WriteUSART
 10150  0024CA                     l857:
 10151  0024CA  A2AC               	btfss	4012,1,c	;volatile
 10152  0024CC  D7FE               	goto	l857
 10153                           
 10154                           ;main.c: 1700: WriteUSART(0x03);
 10155  0024CE  0E03               	movlw	3
 10156  0024D0  EF7E  F00A         	goto	_WriteUSART
 10157  0024D4                     __end_of_sendVSCPDriverAck:
 10158                           	opt stack 0
 10159  0024D4                     PL46:
 10160                           	opt stack 22
 10161  0024D4  0100               	movlb	0	; () banked
 10162  0024D6  0E00               	movlw	high sendVSCPDriverAck@crc
 10163  0024D8  6F68               	movwf	(?_crc8+1)& (0+255),b
 10164  0024DA  0E6F               	movlw	low sendVSCPDriverAck@crc
 10165  0024DC  6F67               	movwf	?_crc8& (0+255),b
 10166  0024DE  6B69               	clrf	(?_crc8+2)& (0+255),b
 10167  0024E0  0C00               	retlw	0
 10168  0024E2                     __end_ofPL46:
 10169                           	opt stack 0
 10170                           tblptru	equ	0xFF8
 10171                           tblptrh	equ	0xFF7
 10172                           tblptrl	equ	0xFF6
 10173                           tablat	equ	0xFF5
 10174                           prodh	equ	0xFF4
 10175                           prodl	equ	0xFF3
 10176                           intcon	equ	0xFF2
 10177                           indf0	equ	0xFEF
 10178                           postinc0	equ	0xFEE
 10179                           fsr0h	equ	0xFEA
 10180                           fsr0l	equ	0xFE9
 10181                           wreg	equ	0xFE8
 10182                           indf1	equ	0xFE7
 10183                           postinc1	equ	0xFE6
 10184                           postdec1	equ	0xFE5
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           indf2	equ	0xFDF
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           plusw2	equ	0xFDB
 10191                           fsr2h	equ	0xFDA
 10192                           fsr2l	equ	0xFD9
 10193                           status	equ	0xFD8
 10194                           
 10195 ;; *************** function _sendVSCPDriverNack *****************
 10196 ;; Defined at:
 10197 ;;		line 1707 in file "main.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  crc             1   15[BANK0 ] unsigned char 
 10202 ;; Return value:  Size  Location     Type
 10203 ;;		None               void
 10204 ;; Registers used:
 10205 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10211 ;;      Params:         0       0       0       0       0       0       0
 10212 ;;      Locals:         0       1       0       0       0       0       0
 10213 ;;      Temps:          0       0       0       0       0       0       0
 10214 ;;      Totals:         0       1       0       0       0       0       0
 10215 ;;Total ram usage:        1 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    6
 10218 ;; This function calls:
 10219 ;;		_WriteUSART
 10220 ;;		_sendEscapedUartData
 10221 ;;		_crc8
 10222 ;; This function is called by:
 10223 ;;		_doModeVscp
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text15
 10228  0023A2                     __ptext15:
 10229                           	opt stack 0
 10230  0023A2                     _sendVSCPDriverNack:
 10231                           	opt stack 22
 10232                           
 10233                           ;main.c: 1708: uint8_t crc = 0;
 10234                           
 10235                           ;incstack = 0
 10236                           ;incstack = 0
 10237  0023A2  0100               	movlb	0	; () banked
 10238  0023A4  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10239  0023A6                     l863:
 10240  0023A6  A2AC               	btfss	4012,1,c	;volatile
 10241  0023A8  D7FE               	goto	l863
 10242                           
 10243                           ;main.c: 1712: WriteUSART(0x10);
 10244  0023AA  0E10               	movlw	16
 10245  0023AC  EC7E  F00A         	call	_WriteUSART
 10246  0023B0                     l866:
 10247  0023B0  A2AC               	btfss	4012,1,c	;volatile
 10248  0023B2  D7FE               	goto	l866
 10249                           
 10250                           ;main.c: 1714: WriteUSART(0x02);
 10251  0023B4  0E02               	movlw	2
 10252  0023B6  EC7E  F00A         	call	_WriteUSART
 10253  0023BA                     l869:
 10254  0023BA  A2AC               	btfss	4012,1,c	;volatile
 10255  0023BC  D7FE               	goto	l869
 10256                           
 10257                           ;main.c: 1718: WriteUSART(252);
 10258  0023BE  0EFC               	movlw	252
 10259  0023C0  EC7E  F00A         	call	_WriteUSART
 10260                           
 10261                           ;main.c: 1719: crc8(&crc, 252);
 10262  0023C4  0100               	movlb	0	; () banked
 10263  0023C6  0E00               	movlw	high sendVSCPDriverNack@crc
 10264  0023C8  6F68               	movwf	(?_crc8+1)& (0+255),b
 10265  0023CA  0E6F               	movlw	low sendVSCPDriverNack@crc
 10266  0023CC  6F67               	movwf	?_crc8& (0+255),b
 10267  0023CE  0EFC               	movlw	252
 10268  0023D0  6F69               	movwf	(?_crc8+2)& (0+255),b
 10269  0023D2  EC62  F00B         	call	_crc8	;wreg free
 10270  0023D6                     l872:
 10271  0023D6  A2AC               	btfss	4012,1,c	;volatile
 10272  0023D8  D7FE               	goto	l872
 10273                           
 10274                           ;main.c: 1723: WriteUSART(0);
 10275  0023DA  0E00               	movlw	0
 10276  0023DC  EC7E  F00A         	call	_WriteUSART
 10277                           
 10278                           ;main.c: 1724: crc8(&crc, 0);
 10279  0023E0  D829               	call	PL44	;call to abstracted procedure
 10280  0023E2  EC62  F00B         	call	_crc8	;wreg free
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;main.c: 1727: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10284  0023E6  0E00               	movlw	high sendVSCPDriverNack@crc
 10285  0023E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10286  0023EA  0E6F               	movlw	low sendVSCPDriverNack@crc
 10287  0023EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10288  0023EE  0101               	movlb	1	; () banked
 10289  0023F0  512D               	movf	(_cmdbuf+2)& (0+255),w,b
 10290  0023F2  ECE6  F00D         	call	_sendEscapedUartData
 10291  0023F6                     l875:
 10292  0023F6  A2AC               	btfss	4012,1,c	;volatile
 10293  0023F8  D7FE               	goto	l875
 10294                           
 10295                           ;main.c: 1731: WriteUSART(0);
 10296  0023FA  0E00               	movlw	0
 10297  0023FC  EC7E  F00A         	call	_WriteUSART
 10298                           
 10299                           ;main.c: 1732: crc8(&crc, 0);
 10300  002400  D819               	call	PL44	;call to abstracted procedure
 10301  002402  EC62  F00B         	call	_crc8	;wreg free
 10302  002406                     l878:
 10303  002406  A2AC               	btfss	4012,1,c	;volatile
 10304  002408  D7FE               	goto	l878
 10305                           
 10306                           ;main.c: 1734: WriteUSART(0);
 10307  00240A  0E00               	movlw	0
 10308  00240C  EC7E  F00A         	call	_WriteUSART
 10309                           
 10310                           ;main.c: 1735: crc8(&crc, 0);
 10311  002410  D811               	call	PL44	;call to abstracted procedure
 10312  002412  EC62  F00B         	call	_crc8	;wreg free
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;main.c: 1738: sendEscapedUartData(crc, (0));
 10316  002416  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10317  002418  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10318  00241A  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10319  00241C  ECE6  F00D         	call	_sendEscapedUartData
 10320  002420                     l881:
 10321  002420  A2AC               	btfss	4012,1,c	;volatile
 10322  002422  D7FE               	goto	l881
 10323                           
 10324                           ;main.c: 1742: WriteUSART(0x10);
 10325  002424  0E10               	movlw	16
 10326  002426  EC7E  F00A         	call	_WriteUSART
 10327  00242A                     l884:
 10328  00242A  A2AC               	btfss	4012,1,c	;volatile
 10329  00242C  D7FE               	goto	l884
 10330                           
 10331                           ;main.c: 1744: WriteUSART(0x03);
 10332  00242E  0E03               	movlw	3
 10333  002430  EF7E  F00A         	goto	_WriteUSART
 10334  002434                     __end_of_sendVSCPDriverNack:
 10335                           	opt stack 0
 10336  002434                     PL44:
 10337                           	opt stack 22
 10338  002434  0100               	movlb	0	; () banked
 10339  002436  0E00               	movlw	high sendVSCPDriverNack@crc
 10340  002438  6F68               	movwf	(?_crc8+1)& (0+255),b
 10341  00243A  0E6F               	movlw	low sendVSCPDriverNack@crc
 10342  00243C  6F67               	movwf	?_crc8& (0+255),b
 10343  00243E  6B69               	clrf	(?_crc8+2)& (0+255),b
 10344  002440  0C00               	retlw	0
 10345  002442                     __end_ofPL44:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           indf0	equ	0xFEF
 10355                           postinc0	equ	0xFEE
 10356                           fsr0h	equ	0xFEA
 10357                           fsr0l	equ	0xFE9
 10358                           wreg	equ	0xFE8
 10359                           indf1	equ	0xFE7
 10360                           postinc1	equ	0xFE6
 10361                           postdec1	equ	0xFE5
 10362                           fsr1h	equ	0xFE2
 10363                           fsr1l	equ	0xFE1
 10364                           indf2	equ	0xFDF
 10365                           postinc2	equ	0xFDE
 10366                           postdec2	equ	0xFDD
 10367                           plusw2	equ	0xFDB
 10368                           fsr2h	equ	0xFDA
 10369                           fsr2l	equ	0xFD9
 10370                           status	equ	0xFD8
 10371                           
 10372 ;; *************** function _calcCRC *****************
 10373 ;; Defined at:
 10374 ;;		line 2467 in file "main.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10377 ;;		 -> cmdbuf(80), 
 10378 ;;  len             1   14[BANK0 ] unsigned char 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;  crc             1   16[BANK0 ] unsigned char 
 10381 ;;  j               1   15[BANK0 ] unsigned char 
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      unsigned char 
 10384 ;; Registers used:
 10385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10386 ;; Tracked objects:
 10387 ;;		On entry : F/0
 10388 ;;		On exit  : F/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10391 ;;      Params:         0       3       0       0       0       0       0
 10392 ;;      Locals:         0       2       0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0
 10394 ;;      Totals:         0       5       0       0       0       0       0
 10395 ;;Total ram usage:        5 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    5
 10398 ;; This function calls:
 10399 ;;		_crc8
 10400 ;; This function is called by:
 10401 ;;		_doModeVscp
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text16
 10406  0015F8                     __ptext16:
 10407                           	opt stack 0
 10408  0015F8                     _calcCRC:
 10409                           	opt stack 23
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;main.c: 2468: uint8_t j;
 10413                           ;main.c: 2469: uint8_t crc = 0;
 10414                           
 10415                           ;incstack = 0
 10416                           ;incstack = 0
 10417  0015F8  6B70               	clrf	calcCRC@crc& (0+255),b
 10418                           
 10419                           ;main.c: 2471: for (j = 0; j < len; j++) {
 10420  0015FA  6B6F               	clrf	calcCRC@j& (0+255),b
 10421  0015FC  D00F               	goto	l16002
 10422  0015FE                     l15998:
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;main.c: 2472: crc8(&crc, p[j]);
 10426  0015FE  0E00               	movlw	high calcCRC@crc
 10427  001600  6F68               	movwf	(?_crc8+1)& (0+255),b
 10428  001602  0E70               	movlw	low calcCRC@crc
 10429  001604  6F67               	movwf	?_crc8& (0+255),b
 10430  001606  516F               	movf	calcCRC@j& (0+255),w,b
 10431  001608  256C               	addwf	calcCRC@p& (0+255),w,b
 10432  00160A  6ED9               	movwf	fsr2l,c
 10433  00160C  0E00               	movlw	0
 10434  00160E  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10435  001610  6EDA               	movwf	fsr2h,c
 10436  001612  50DF               	movf	indf2,w,c
 10437  001614  6F69               	movwf	(?_crc8+2)& (0+255),b
 10438  001616  EC62  F00B         	call	_crc8	;wreg free
 10439                           
 10440                           ; BSR set to: 0
 10441  00161A  2B6F               	incf	calcCRC@j& (0+255),f,b
 10442  00161C                     l16002:
 10443                           
 10444                           ; BSR set to: 0
 10445  00161C  516E               	movf	calcCRC@len& (0+255),w,b
 10446  00161E  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10447  001620  E3EE               	bnc	l15998
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;main.c: 2473: }
 10451                           ;main.c: 2475: return crc;
 10452  001622  5170               	movf	calcCRC@crc& (0+255),w,b
 10453                           
 10454                           ; BSR set to: 0
 10455  001624  0012               	return	
 10456  001626                     __end_of_calcCRC:
 10457                           	opt stack 0
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           indf0	equ	0xFEF
 10466                           postinc0	equ	0xFEE
 10467                           fsr0h	equ	0xFEA
 10468                           fsr0l	equ	0xFE9
 10469                           wreg	equ	0xFE8
 10470                           indf1	equ	0xFE7
 10471                           postinc1	equ	0xFE6
 10472                           postdec1	equ	0xFE5
 10473                           fsr1h	equ	0xFE2
 10474                           fsr1l	equ	0xFE1
 10475                           indf2	equ	0xFDF
 10476                           postinc2	equ	0xFDE
 10477                           postdec2	equ	0xFDD
 10478                           plusw2	equ	0xFDB
 10479                           fsr2h	equ	0xFDA
 10480                           fsr2l	equ	0xFD9
 10481                           status	equ	0xFD8
 10482                           
 10483 ;; *************** function _receiveSendEventCANAL *****************
 10484 ;; Defined at:
 10485 ;;		line 1859 in file "main.c"
 10486 ;; Parameters:    Size  Location     Type
 10487 ;;		None
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  crc             1   33[BANK0 ] unsigned char 
 10490 ;;  data            8   19[BANK0 ] unsigned char [8]
 10491 ;;  id              4   28[BANK0 ] unsigned long 
 10492 ;;  dlc             1   32[BANK0 ] unsigned char 
 10493 ;;  i               1   27[BANK0 ] unsigned char 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      enum E15660
 10496 ;; Registers used:
 10497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : F/1
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10503 ;;      Params:         0       0       0       0       0       0       0
 10504 ;;      Locals:         0      15       0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0
 10506 ;;      Totals:         0      15       0       0       0       0       0
 10507 ;;Total ram usage:       15 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    6
 10510 ;; This function calls:
 10511 ;;		_WriteUSART
 10512 ;;		_sendEscapedUartData
 10513 ;;		_crc8
 10514 ;;		_getCANFrame
 10515 ;; This function is called by:
 10516 ;;		_doModeVscp
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           	psect	text17
 10521  003648                     __ptext17:
 10522                           	opt stack 0
 10523  003648                     _receiveSendEventCANAL:
 10524                           	opt stack 22
 10525                           
 10526                           ; BSR set to: 1
 10527                           ;main.c: 1860: uint8_t i;
 10528                           ;main.c: 1861: uint32_t id;
 10529                           ;main.c: 1862: uint8_t dlc;
 10530                           ;main.c: 1863: uint8_t data[8];
 10531                           ;main.c: 1865: if ( getCANFrame( &id, &dlc, &data ) ) {
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;incstack = 0
 10535                           ;incstack = 0
 10536  003648  0100               	movlb	0	; () banked
 10537  00364A  0E00               	movlw	high receiveSendEventCANAL@dlc
 10538  00364C  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10539  00364E  0E80               	movlw	low receiveSendEventCANAL@dlc
 10540  003650  6F6E               	movwf	?_getCANFrame& (0+255),b
 10541  003652  0E00               	movlw	high receiveSendEventCANAL@data
 10542  003654  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 10543  003656  0E73               	movlw	low receiveSendEventCANAL@data
 10544  003658  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10545  00365A  0E7C               	movlw	receiveSendEventCANAL@id& (0+255)
 10546  00365C  ECC5  F012         	call	_getCANFrame
 10547  003660  0900               	iorlw	0
 10548  003662  E101 D092          	bz	l979
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;main.c: 1867: uint8_t crc = 0;
 10552  003666  6B81               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;main.c: 1870: cntRxFrames++;
 10556  003668  0101               	movlb	1	; () banked
 10557  00366A  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10558  00366C  0E00               	movlw	0
 10559  00366E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10560  003670  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10561  003672  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10562                           
 10563                           ;main.c: 1871: cntRxBytes += dlc;
 10564  003674  0100               	movlb	0	; () banked
 10565  003676  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10566  003678  0101               	movlb	1	; () banked
 10567  00367A  2708               	addwf	_cntRxBytes& (0+255),f,b
 10568  00367C  0E00               	movlw	0
 10569  00367E  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10570  003680  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10571  003682  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10572  003684                     l958:
 10573                           
 10574                           ; BSR set to: 1
 10575  003684  A2AC               	btfss	4012,1,c	;volatile
 10576  003686  D7FE               	goto	l958
 10577                           
 10578                           ; BSR set to: 1
 10579                           ;main.c: 1875: WriteUSART(0x10);
 10580  003688  0E10               	movlw	16
 10581  00368A  EC7E  F00A         	call	_WriteUSART
 10582  00368E                     l961:
 10583  00368E  A2AC               	btfss	4012,1,c	;volatile
 10584  003690  D7FE               	goto	l961
 10585                           
 10586                           ;main.c: 1877: WriteUSART(0x02);
 10587  003692  0E02               	movlw	2
 10588  003694  EC7E  F00A         	call	_WriteUSART
 10589  003698                     l964:
 10590  003698  A2AC               	btfss	4012,1,c	;volatile
 10591  00369A  D7FE               	goto	l964
 10592                           
 10593                           ;main.c: 1881: WriteUSART(2);
 10594  00369C  0E02               	movlw	2
 10595  00369E  EC7E  F00A         	call	_WriteUSART
 10596                           
 10597                           ;main.c: 1882: crc8(&crc, 2);
 10598  0036A2  0100               	movlb	0	; () banked
 10599  0036A4  0E00               	movlw	high receiveSendEventCANAL@crc
 10600  0036A6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10601  0036A8  0E81               	movlw	low receiveSendEventCANAL@crc
 10602  0036AA  6F67               	movwf	?_crc8& (0+255),b
 10603  0036AC  0E02               	movlw	2
 10604  0036AE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10605  0036B0  EC62  F00B         	call	_crc8	;wreg free
 10606  0036B4                     l967:
 10607  0036B4  A2AC               	btfss	4012,1,c	;volatile
 10608  0036B6  D7FE               	goto	l967
 10609                           
 10610                           ;main.c: 1886: WriteUSART(0);
 10611  0036B8  0E00               	movlw	0
 10612  0036BA  EC7E  F00A         	call	_WriteUSART
 10613                           
 10614                           ;main.c: 1887: crc8(&crc, 0);
 10615  0036BE  0100               	movlb	0	; () banked
 10616  0036C0  0E00               	movlw	high receiveSendEventCANAL@crc
 10617  0036C2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10618  0036C4  0E81               	movlw	low receiveSendEventCANAL@crc
 10619  0036C6  6F67               	movwf	?_crc8& (0+255),b
 10620  0036C8  0E00               	movlw	0
 10621  0036CA  6B69               	clrf	(?_crc8+2)& (0+255),b
 10622  0036CC  EC62  F00B         	call	_crc8	;wreg free
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;main.c: 1890: sendEscapedUartData(sequencyno, &crc);
 10626  0036D0  0E00               	movlw	high receiveSendEventCANAL@crc
 10627  0036D2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10628  0036D4  0E81               	movlw	low receiveSendEventCANAL@crc
 10629  0036D6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10630  0036D8  5036               	movf	_sequencyno,w,c
 10631  0036DA  ECE6  F00D         	call	_sendEscapedUartData
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;main.c: 1891: sequencyno++;
 10635  0036DE  2A36               	incf	_sequencyno,f,c
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;main.c: 1894: sendEscapedUartData(0, &crc);
 10639  0036E0  0E00               	movlw	high receiveSendEventCANAL@crc
 10640  0036E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10641  0036E4  0E81               	movlw	low receiveSendEventCANAL@crc
 10642  0036E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10643  0036E8  0E00               	movlw	0
 10644  0036EA  ECE6  F00D         	call	_sendEscapedUartData
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;main.c: 1895: sendEscapedUartData(5 + dlc, &crc);
 10648  0036EE  0E00               	movlw	high receiveSendEventCANAL@crc
 10649  0036F0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10650  0036F2  0E81               	movlw	low receiveSendEventCANAL@crc
 10651  0036F4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10652  0036F6  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10653  0036F8  0F05               	addlw	5
 10654  0036FA  ECE6  F00D         	call	_sendEscapedUartData
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;main.c: 1901: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10658  0036FE  0E00               	movlw	high receiveSendEventCANAL@crc
 10659  003700  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10660  003702  0E81               	movlw	low receiveSendEventCANAL@crc
 10661  003704  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10662  003706  0100               	movlb	0	; () banked
 10663  003708  517F               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10664  00370A  ECE6  F00D         	call	_sendEscapedUartData
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;main.c: 1902: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10668  00370E  0E00               	movlw	high receiveSendEventCANAL@crc
 10669  003710  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10670  003712  0E81               	movlw	low receiveSendEventCANAL@crc
 10671  003714  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10672  003716  0100               	movlb	0	; () banked
 10673  003718  517E               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10674  00371A  ECE6  F00D         	call	_sendEscapedUartData
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;main.c: 1903: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10678  00371E  0E00               	movlw	high receiveSendEventCANAL@crc
 10679  003720  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10680  003722  0E81               	movlw	low receiveSendEventCANAL@crc
 10681  003724  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10682  003726  0100               	movlb	0	; () banked
 10683  003728  517D               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10684  00372A  ECE6  F00D         	call	_sendEscapedUartData
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;main.c: 1904: sendEscapedUartData((id & 0xff), &crc);
 10688  00372E  0E00               	movlw	high receiveSendEventCANAL@crc
 10689  003730  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10690  003732  0E81               	movlw	low receiveSendEventCANAL@crc
 10691  003734  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10692  003736  517C               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10693  003738  ECE6  F00D         	call	_sendEscapedUartData
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;main.c: 1907: sendEscapedUartData(dlc, &crc);
 10697  00373C  0E00               	movlw	high receiveSendEventCANAL@crc
 10698  00373E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10699  003740  0E81               	movlw	low receiveSendEventCANAL@crc
 10700  003742  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10701  003744  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10702  003746  ECE6  F00D         	call	_sendEscapedUartData
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;main.c: 1910: for (i = 0; i < dlc; i++) {
 10706  00374A  6B7B               	clrf	receiveSendEventCANAL@i& (0+255),b
 10707  00374C  D00C               	goto	l15986
 10708  00374E                     l15982:
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;main.c: 1911: sendEscapedUartData( data[ i ], &crc );
 10712  00374E  0E00               	movlw	high receiveSendEventCANAL@crc
 10713  003750  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10714  003752  0E81               	movlw	low receiveSendEventCANAL@crc
 10715  003754  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10716  003756  517B               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10717  003758  0F73               	addlw	low receiveSendEventCANAL@data
 10718  00375A  6ED9               	movwf	fsr2l,c
 10719  00375C  6ADA               	clrf	fsr2h,c
 10720  00375E  50DF               	movf	indf2,w,c
 10721  003760  ECE6  F00D         	call	_sendEscapedUartData
 10722                           
 10723                           ; BSR set to: 0
 10724  003764  2B7B               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10725  003766                     l15986:
 10726                           
 10727                           ; BSR set to: 0
 10728  003766  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10729  003768  5D7B               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10730  00376A  E3F1               	bnc	l15982
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;main.c: 1912: }
 10734                           ;main.c: 1917: sendEscapedUartData(crc, (0));
 10735  00376C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10736  00376E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10737  003770  5181               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10738  003772  ECE6  F00D         	call	_sendEscapedUartData
 10739  003776                     l973:
 10740  003776  A2AC               	btfss	4012,1,c	;volatile
 10741  003778  D7FE               	goto	l973
 10742                           
 10743                           ;main.c: 1921: WriteUSART(0x10);
 10744  00377A  0E10               	movlw	16
 10745  00377C  EC7E  F00A         	call	_WriteUSART
 10746  003780                     l976:
 10747  003780  A2AC               	btfss	4012,1,c	;volatile
 10748  003782  D7FE               	goto	l976
 10749                           
 10750                           ;main.c: 1923: WriteUSART(0x03);
 10751  003784  0E03               	movlw	3
 10752  003786  EC7E  F00A         	call	_WriteUSART
 10753  00378A                     l979:
 10754  00378A  0012               	return	
 10755  00378C                     __end_of_receiveSendEventCANAL:
 10756                           	opt stack 0
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           prodh	equ	0xFF4
 10762                           prodl	equ	0xFF3
 10763                           intcon	equ	0xFF2
 10764                           indf0	equ	0xFEF
 10765                           postinc0	equ	0xFEE
 10766                           fsr0h	equ	0xFEA
 10767                           fsr0l	equ	0xFE9
 10768                           wreg	equ	0xFE8
 10769                           indf1	equ	0xFE7
 10770                           postinc1	equ	0xFE6
 10771                           postdec1	equ	0xFE5
 10772                           fsr1h	equ	0xFE2
 10773                           fsr1l	equ	0xFE1
 10774                           indf2	equ	0xFDF
 10775                           postinc2	equ	0xFDE
 10776                           postdec2	equ	0xFDD
 10777                           plusw2	equ	0xFDB
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function _receiveSendMultiEventCANAL *****************
 10783 ;; Defined at:
 10784 ;;		line 1936 in file "main.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  crc             1   34[BANK0 ] unsigned char 
 10789 ;;  data            8   19[BANK0 ] unsigned char [8]
 10790 ;;  id              4   29[BANK0 ] unsigned long 
 10791 ;;  pos             1   35[BANK0 ] unsigned char 
 10792 ;;  dlc             1   33[BANK0 ] unsigned char 
 10793 ;;  i               1   28[BANK0 ] unsigned char 
 10794 ;;  msgcount        1   27[BANK0 ] unsigned char 
 10795 ;; Return value:  Size  Location     Type
 10796 ;;                  1    wreg      enum E15660
 10797 ;; Registers used:
 10798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10799 ;; Tracked objects:
 10800 ;;		On entry : F/1
 10801 ;;		On exit  : 0/0
 10802 ;;		Unchanged: 0/0
 10803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10804 ;;      Params:         0       0       0       0       0       0       0
 10805 ;;      Locals:         0      17       0       0       0       0       0
 10806 ;;      Temps:          0       0       0       0       0       0       0
 10807 ;;      Totals:         0      17       0       0       0       0       0
 10808 ;;Total ram usage:       17 bytes
 10809 ;; Hardware stack levels used:    1
 10810 ;; Hardware stack levels required when called:    6
 10811 ;; This function calls:
 10812 ;;		_WriteUSART
 10813 ;;		_sendEscapedUartData
 10814 ;;		_crc8
 10815 ;;		_getCANFrame
 10816 ;; This function is called by:
 10817 ;;		_doModeVscp
 10818 ;; This function uses a non-reentrant model
 10819 ;;
 10820                           
 10821                           	psect	text18
 10822  0038FA                     __ptext18:
 10823                           	opt stack 0
 10824  0038FA                     _receiveSendMultiEventCANAL:
 10825                           	opt stack 22
 10826                           
 10827                           ; BSR set to: 1
 10828                           ;main.c: 1937: uint8_t i;
 10829                           ;main.c: 1938: uint8_t pos=0;
 10830                           
 10831                           ;incstack = 0
 10832                           ;incstack = 0
 10833  0038FA  0100               	movlb	0	; () banked
 10834  0038FC  6B83               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10835                           
 10836                           ;main.c: 1939: uint8_t msgcount=0;
 10837  0038FE  6B7B               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1940: uint32_t id;
 10841                           ;main.c: 1941: uint8_t dlc;
 10842                           ;main.c: 1942: uint8_t data[8];
 10843                           ;main.c: 1944: if ( getCANFrame( &id, &dlc, &data ) ) {
 10844  003900  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10845  003902  D8B6               	call	PL74	;call to abstracted procedure
 10846  003904  ECC5  F012         	call	_getCANFrame
 10847  003908  0900               	iorlw	0
 10848  00390A  E101 D0A8          	bz	l1011
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;main.c: 1946: uint8_t crc = 0;
 10852  00390E  6B82               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;main.c: 1949: cntRxFrames++;
 10856  003910  0101               	movlb	1	; () banked
 10857  003912  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10858  003914  0E00               	movlw	0
 10859  003916  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10860  003918  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10861  00391A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10862                           
 10863                           ;main.c: 1950: cntRxBytes += dlc;
 10864  00391C  0100               	movlb	0	; () banked
 10865  00391E  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10866  003920  0101               	movlb	1	; () banked
 10867  003922  2708               	addwf	_cntRxBytes& (0+255),f,b
 10868  003924  0E00               	movlw	0
 10869  003926  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10870  003928  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10871  00392A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10872  00392C                     l983:
 10873                           
 10874                           ; BSR set to: 1
 10875  00392C  A2AC               	btfss	4012,1,c	;volatile
 10876  00392E  D7FE               	goto	l983
 10877                           
 10878                           ; BSR set to: 1
 10879                           ;main.c: 1954: WriteUSART(0x10);
 10880  003930  0E10               	movlw	16
 10881  003932  EC7E  F00A         	call	_WriteUSART
 10882  003936                     l986:
 10883  003936  A2AC               	btfss	4012,1,c	;volatile
 10884  003938  D7FE               	goto	l986
 10885                           
 10886                           ;main.c: 1956: WriteUSART(0x02);
 10887  00393A  0E02               	movlw	2
 10888  00393C  EC7E  F00A         	call	_WriteUSART
 10889  003940                     l989:
 10890  003940  A2AC               	btfss	4012,1,c	;volatile
 10891  003942  D7FE               	goto	l989
 10892                           
 10893                           ;main.c: 1960: WriteUSART(6);
 10894  003944  0E06               	movlw	6
 10895  003946  EC7E  F00A         	call	_WriteUSART
 10896                           
 10897                           ;main.c: 1961: crc8(&crc, 6);
 10898  00394A  0100               	movlb	0	; () banked
 10899  00394C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10900  00394E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10901  003950  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 10902  003952  6F67               	movwf	?_crc8& (0+255),b
 10903  003954  0E06               	movlw	6
 10904  003956  6F69               	movwf	(?_crc8+2)& (0+255),b
 10905  003958  EC62  F00B         	call	_crc8	;wreg free
 10906  00395C                     l992:
 10907  00395C  A2AC               	btfss	4012,1,c	;volatile
 10908  00395E  D7FE               	goto	l992
 10909                           
 10910                           ;main.c: 1965: WriteUSART(0);
 10911  003960  0E00               	movlw	0
 10912  003962  EC7E  F00A         	call	_WriteUSART
 10913                           
 10914                           ;main.c: 1966: crc8(&crc, 0);
 10915  003966  0100               	movlb	0	; () banked
 10916  003968  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10917  00396A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10918  00396C  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 10919  00396E  6F67               	movwf	?_crc8& (0+255),b
 10920  003970  0E00               	movlw	0
 10921  003972  6B69               	clrf	(?_crc8+2)& (0+255),b
 10922  003974  EC62  F00B         	call	_crc8	;wreg free
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 1969: sendEscapedUartData(sequencyno, &crc);
 10926  003978  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10927  00397A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10928  00397C  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 10929  00397E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10930  003980  5036               	movf	_sequencyno,w,c
 10931  003982  ECE6  F00D         	call	_sendEscapedUartData
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;main.c: 1970: sequencyno++;
 10935  003986  2A36               	incf	_sequencyno,f,c
 10936  003988                     l15888:
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;main.c: 1980: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10940  003988  0E7B               	movlw	low _wrkbuf
 10941  00398A  0100               	movlb	0	; () banked
 10942  00398C  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10943  00398E  6ED9               	movwf	fsr2l,c
 10944  003990  6ADA               	clrf	fsr2h,c
 10945  003992  0E01               	movlw	high _wrkbuf
 10946  003994  22DA               	addwfc	fsr2h,f,c
 10947  003996  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;main.c: 1981: pos++;
 10951                           
 10952                           ; BSR set to: 0
 10953                           ;main.c: 1982: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10954  00399A  D862               	call	PL26	;call to abstracted procedure
 10955  00399C  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;main.c: 1983: pos++;
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;main.c: 1984: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10962  0039A0  D85F               	call	PL26	;call to abstracted procedure
 10963  0039A2  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;main.c: 1985: pos++;
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;main.c: 1986: wrkbuf[ pos ] = id & 0xff;
 10970  0039A6  D85C               	call	PL26	;call to abstracted procedure
 10971  0039A8  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 1987: pos++;
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;main.c: 1990: wrkbuf[ pos ] = dlc;
 10978  0039AC  D859               	call	PL26	;call to abstracted procedure
 10979  0039AE  C081  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 1991: pos++;
 10983  0039B2  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;main.c: 1994: for (i = 0; i < dlc; i++) {
 10987  0039B4  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10988  0039B6  D00F               	goto	l15916
 10989  0039B8                     l15910:
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;main.c: 1995: wrkbuf[ pos ] = data[ i ];
 10993  0039B8  517C               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10994  0039BA  0F73               	addlw	low receiveSendMultiEventCANAL@data
 10995  0039BC  6ED9               	movwf	fsr2l,c
 10996  0039BE  6ADA               	clrf	fsr2h,c
 10997  0039C0  0E7B               	movlw	low _wrkbuf
 10998  0039C2  0100               	movlb	0	; () banked
 10999  0039C4  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11000  0039C6  6EE1               	movwf	fsr1l,c
 11001  0039C8  6AE2               	clrf	fsr1h,c
 11002  0039CA  0E01               	movlw	high _wrkbuf
 11003  0039CC  22E2               	addwfc	fsr1h,f,c
 11004  0039CE  CFDF FFE7          	movff	indf2,indf1
 11005                           
 11006                           ; BSR set to: 1
 11007                           ;main.c: 1996: pos++;
 11008  0039D2  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11009                           
 11010                           ; BSR set to: 0
 11011  0039D4  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11012  0039D6                     l15916:
 11013                           
 11014                           ; BSR set to: 0
 11015  0039D6  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11016  0039D8  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11017  0039DA  E3EE               	bnc	l15910
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;main.c: 1997: }
 11021                           ;main.c: 1999: msgcount++;
 11022  0039DC  2B7B               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;main.c: 2001: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11026                           ;main.c: 2002: ( msgcount < 5 ) &&
 11027                           ;main.c: 2003: getCANFrame( &id, &dlc, &data ) );
 11028  0039DE  0101               	movlb	1	; () banked
 11029  0039E0  51F0               	movf	(_caps+1)& (0+255),w,b
 11030  0039E2  0100               	movlb	0	; () banked
 11031  0039E4  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11032  0039E6  D009               	goto	l15926
 11033                           
 11034                           ; BSR set to: 0
 11035  0039E8  0E05               	movlw	5
 11036  0039EA  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11037  0039EC  D006               	goto	l15926
 11038                           
 11039                           ; BSR set to: 0
 11040  0039EE  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11041  0039F0  D83F               	call	PL74	;call to abstracted procedure
 11042  0039F2  ECC5  F012         	call	_getCANFrame
 11043  0039F6  0900               	iorlw	0
 11044  0039F8  E1C7               	bnz	l15888
 11045  0039FA                     l15926:
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;main.c: 2008: sendEscapedUartData(0, &crc);
 11049  0039FA  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11050  0039FC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11051  0039FE  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11052  003A00  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11053  003A02  0E00               	movlw	0
 11054  003A04  ECE6  F00D         	call	_sendEscapedUartData
 11055                           
 11056                           ;main.c: 2009: sendEscapedUartData(pos, &crc);
 11057  003A08  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11058  003A0A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11059  003A0C  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11060  003A0E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11061  003A10  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11062  003A12  ECE6  F00D         	call	_sendEscapedUartData
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;main.c: 2012: for (i = 0; i < pos; i++) {
 11066  003A16  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11067  003A18  D010               	goto	l15934
 11068  003A1A                     l15930:
 11069                           
 11070                           ; BSR set to: 0
 11071                           ;main.c: 2013: sendEscapedUartData( wrkbuf[ i ], &crc);
 11072  003A1A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11073  003A1C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11074  003A1E  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11075  003A20  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11076  003A22  0E7B               	movlw	low _wrkbuf
 11077  003A24  0100               	movlb	0	; () banked
 11078  003A26  257C               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11079  003A28  6ED9               	movwf	fsr2l,c
 11080  003A2A  6ADA               	clrf	fsr2h,c
 11081  003A2C  0101               	movlb	1	; () banked
 11082  003A2E  0E01               	movlw	high _wrkbuf
 11083  003A30  22DA               	addwfc	fsr2h,f,c
 11084  003A32  50DF               	movf	indf2,w,c
 11085  003A34  ECE6  F00D         	call	_sendEscapedUartData
 11086                           
 11087                           ; BSR set to: 0
 11088  003A38  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11089  003A3A                     l15934:
 11090                           
 11091                           ; BSR set to: 0
 11092  003A3A  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11093  003A3C  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11094  003A3E  E3ED               	bnc	l15930
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;main.c: 2014: }
 11098                           ;main.c: 2017: sendEscapedUartData(crc, (0));
 11099  003A40  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11100  003A42  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11101  003A44  5182               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11102  003A46  ECE6  F00D         	call	_sendEscapedUartData
 11103  003A4A                     l1005:
 11104  003A4A  A2AC               	btfss	4012,1,c	;volatile
 11105  003A4C  D7FE               	goto	l1005
 11106                           
 11107                           ;main.c: 2021: WriteUSART(0x10);
 11108  003A4E  0E10               	movlw	16
 11109  003A50  EC7E  F00A         	call	_WriteUSART
 11110  003A54                     l1008:
 11111  003A54  A2AC               	btfss	4012,1,c	;volatile
 11112  003A56  D7FE               	goto	l1008
 11113                           
 11114                           ;main.c: 2023: WriteUSART(0x03);
 11115  003A58  0E03               	movlw	3
 11116  003A5A  EC7E  F00A         	call	_WriteUSART
 11117  003A5E                     l1011:
 11118  003A5E  0012               	return	
 11119  003A60                     __end_of_receiveSendMultiEventCANAL:
 11120                           	opt stack 0
 11121  003A60                     PL26:
 11122                           	opt stack 22
 11123  003A60  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11124  003A62  0E7B               	movlw	low _wrkbuf
 11125  003A64  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11126  003A66  6ED9               	movwf	fsr2l,c
 11127  003A68  6ADA               	clrf	fsr2h,c
 11128  003A6A  0E01               	movlw	high _wrkbuf
 11129  003A6C  22DA               	addwfc	fsr2h,f,c
 11130  003A6E  0012               	return	
 11131  003A70                     __end_ofPL26:
 11132                           	opt stack 0
 11133  003A70                     PL74:
 11134                           	opt stack 22
 11135  003A70  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11136  003A72  0E81               	movlw	low receiveSendMultiEventCANAL@dlc
 11137  003A74  6F6E               	movwf	?_getCANFrame& (0+255),b
 11138  003A76  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11139  003A78  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 11140  003A7A  0E73               	movlw	low receiveSendMultiEventCANAL@data
 11141  003A7C  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11142  003A7E  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11143  003A80  0012               	return	
 11144  003A82                     __end_ofPL74:
 11145                           	opt stack 0
 11146                           tblptru	equ	0xFF8
 11147                           tblptrh	equ	0xFF7
 11148                           tblptrl	equ	0xFF6
 11149                           tablat	equ	0xFF5
 11150                           prodh	equ	0xFF4
 11151                           prodl	equ	0xFF3
 11152                           intcon	equ	0xFF2
 11153                           indf0	equ	0xFEF
 11154                           postinc0	equ	0xFEE
 11155                           fsr0h	equ	0xFEA
 11156                           fsr0l	equ	0xFE9
 11157                           wreg	equ	0xFE8
 11158                           indf1	equ	0xFE7
 11159                           postinc1	equ	0xFE6
 11160                           postdec1	equ	0xFE5
 11161                           fsr1h	equ	0xFE2
 11162                           fsr1l	equ	0xFE1
 11163                           indf2	equ	0xFDF
 11164                           postinc2	equ	0xFDE
 11165                           postdec2	equ	0xFDD
 11166                           plusw2	equ	0xFDB
 11167                           fsr2h	equ	0xFDA
 11168                           fsr2l	equ	0xFD9
 11169                           status	equ	0xFD8
 11170                           
 11171 ;; *************** function _sendEscapedUartData *****************
 11172 ;; Defined at:
 11173 ;;		line 1589 in file "main.c"
 11174 ;; Parameters:    Size  Location     Type
 11175 ;;  c               1    wreg     unsigned char 
 11176 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11177 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11178 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11179 ;;		 -> NULL(0), 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;  c               1   14[BANK0 ] unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;		None               void
 11184 ;; Registers used:
 11185 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : E/1
 11188 ;;		On exit  : F/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11191 ;;      Params:         0       2       0       0       0       0       0
 11192 ;;      Locals:         0       1       0       0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0
 11194 ;;      Totals:         0       3       0       0       0       0       0
 11195 ;;Total ram usage:        3 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    5
 11198 ;; This function calls:
 11199 ;;		_WriteUSART
 11200 ;;		_crc8
 11201 ;; This function is called by:
 11202 ;;		_sendVSCPDriverErrorFrame
 11203 ;;		_sendVSCPDriverAck
 11204 ;;		_sendVSCPDriverNack
 11205 ;;		_sendVSCPDriverCommandReply
 11206 ;;		_receiveSendEventCANAL
 11207 ;;		_receiveSendMultiEventCANAL
 11208 ;;		_sendVSCPModeCapabilities
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           	psect	text19
 11213  001BCC                     __ptext19:
 11214                           	opt stack 0
 11215  001BCC                     _sendEscapedUartData:
 11216                           	opt stack 22
 11217                           
 11218                           ;incstack = 0
 11219                           ;incstack = 0
 11220                           ;sendEscapedUartData@c stored from wreg
 11221  001BCC  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11222                           
 11223                           ;main.c: 1590: if (0x10 == c) {
 11224  001BD0  0100               	movlb	0	; () banked
 11225  001BD2  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11226  001BD4  0A10               	xorlw	16
 11227  001BD6  E117               	bnz	l802
 11228  001BD8                     l794:
 11229  001BD8  A2AC               	btfss	4012,1,c	;volatile
 11230  001BDA  D7FE               	goto	l794
 11231                           
 11232                           ;main.c: 1593: WriteUSART(0x10);
 11233  001BDC  0E10               	movlw	16
 11234  001BDE  EC7E  F00A         	call	_WriteUSART
 11235  001BE2                     l797:
 11236  001BE2  A2AC               	btfss	4012,1,c	;volatile
 11237  001BE4  D7FE               	goto	l797
 11238                           
 11239                           ;main.c: 1597: WriteUSART(0x10);
 11240  001BE6  0E10               	movlw	16
 11241  001BE8  EC7E  F00A         	call	_WriteUSART
 11242                           
 11243                           ;main.c: 1598: if ((0) != pcrc) crc8(pcrc, 0x10);
 11244  001BEC  0100               	movlb	0	; () banked
 11245  001BEE  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11246  001BF0  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11247  001BF2  E01B               	bz	l806
 11248                           
 11249                           ; BSR set to: 0
 11250  001BF4  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11251  001BF8  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11252  001BFC  0E10               	movlw	16
 11253  001BFE  6F69               	movwf	(?_crc8+2)& (0+255),b
 11254  001C00  EC62  F00B         	call	_crc8	;wreg free
 11255  001C04  D012               	goto	l806
 11256  001C06                     l802:
 11257  001C06  A2AC               	btfss	4012,1,c	;volatile
 11258  001C08  D7FE               	goto	l802
 11259                           
 11260                           ;main.c: 1604: WriteUSART(c);
 11261  001C0A  0100               	movlb	0	; () banked
 11262  001C0C  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11263  001C0E  EC7E  F00A         	call	_WriteUSART
 11264                           
 11265                           ;main.c: 1605: if ((0) != pcrc) crc8(pcrc, c);
 11266  001C12  0100               	movlb	0	; () banked
 11267  001C14  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11268  001C16  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11269  001C18  E008               	bz	l806
 11270                           
 11271                           ; BSR set to: 0
 11272  001C1A  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11273  001C1E  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11274  001C22  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11275  001C26  EC62  F00B         	call	_crc8	;wreg free
 11276  001C2A                     l806:
 11277                           
 11278                           ; BSR set to: 0
 11279  001C2A  0012               	return	
 11280  001C2C                     __end_of_sendEscapedUartData:
 11281                           	opt stack 0
 11282                           tblptru	equ	0xFF8
 11283                           tblptrh	equ	0xFF7
 11284                           tblptrl	equ	0xFF6
 11285                           tablat	equ	0xFF5
 11286                           prodh	equ	0xFF4
 11287                           prodl	equ	0xFF3
 11288                           intcon	equ	0xFF2
 11289                           indf0	equ	0xFEF
 11290                           postinc0	equ	0xFEE
 11291                           fsr0h	equ	0xFEA
 11292                           fsr0l	equ	0xFE9
 11293                           wreg	equ	0xFE8
 11294                           indf1	equ	0xFE7
 11295                           postinc1	equ	0xFE6
 11296                           postdec1	equ	0xFE5
 11297                           fsr1h	equ	0xFE2
 11298                           fsr1l	equ	0xFE1
 11299                           indf2	equ	0xFDF
 11300                           postinc2	equ	0xFDE
 11301                           postdec2	equ	0xFDD
 11302                           plusw2	equ	0xFDB
 11303                           fsr2h	equ	0xFDA
 11304                           fsr2l	equ	0xFD9
 11305                           status	equ	0xFD8
 11306                           
 11307 ;; *************** function _crc8 *****************
 11308 ;; Defined at:
 11309 ;;		line 47 in file "crc8.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11312 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11313 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11314 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11315 ;;  m               1    9[BANK0 ] unsigned char 
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;		None               void
 11320 ;; Registers used:
 11321 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : F/0
 11324 ;;		On exit  : F/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11327 ;;      Params:         0       3       0       0       0       0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0
 11329 ;;      Temps:          0       2       0       0       0       0       0
 11330 ;;      Totals:         0       5       0       0       0       0       0
 11331 ;;Total ram usage:        5 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    4
 11334 ;; This function calls:
 11335 ;;		_init_crc8
 11336 ;; This function is called by:
 11337 ;;		_sendEscapedUartData
 11338 ;;		_sendVSCPDriverErrorFrame
 11339 ;;		_sendVSCPDriverAck
 11340 ;;		_sendVSCPDriverNack
 11341 ;;		_sendVSCPDriverCommandReply
 11342 ;;		_receiveSendEventCANAL
 11343 ;;		_receiveSendMultiEventCANAL
 11344 ;;		_sendVSCPModeCapabilities
 11345 ;;		_calcCRC
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           	psect	text20
 11350  0016C4                     __ptext20:
 11351                           	opt stack 0
 11352  0016C4                     _crc8:
 11353                           	opt stack 23
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;crc8.c: 48: if ( !made_table ) {
 11357                           
 11358                           ; BSR set to: 0
 11359                           ;incstack = 0
 11360                           ;incstack = 0
 11361  0016C4  0101               	movlb	1	; () banked
 11362  0016C6  5125               	movf	(_made_table+1)& (0+255),w,b
 11363  0016C8  1124               	iorwf	_made_table& (0+255),w,b
 11364  0016CA  B4D8               	btfsc	status,2,c
 11365                           
 11366                           ; BSR set to: 1
 11367                           ;crc8.c: 49: init_crc8();
 11368  0016CC  ECAB  F00E         	call	_init_crc8	;wreg free
 11369                           
 11370                           ; BSR set to: 1
 11371                           ;crc8.c: 50: }
 11372                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11373  0016D0  C067  FFD9         	movff	crc8@crc,fsr2l
 11374  0016D4  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11375  0016D8  50DF               	movf	indf2,w,c
 11376  0016DA  0100               	movlb	0	; () banked
 11377  0016DC  1969               	xorwf	crc8@m& (0+255),w,b
 11378  0016DE  6F6A               	movwf	??_crc8& (0+255),b
 11379  0016E0  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11380  0016E2  0E00               	movlw	low _crc8_table
 11381  0016E4  256A               	addwf	??_crc8& (0+255),w,b
 11382  0016E6  6ED9               	movwf	fsr2l,c
 11383  0016E8  0E03               	movlw	high _crc8_table
 11384  0016EA  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11385  0016EC  6EDA               	movwf	fsr2h,c
 11386  0016EE  C067  FFE1         	movff	crc8@crc,fsr1l
 11387  0016F2  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11388  0016F6  CFDF FFE7          	movff	indf2,indf1
 11389                           
 11390                           ; BSR set to: 0
 11391  0016FA  0012               	return	
 11392  0016FC                     __end_of_crc8:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           indf0	equ	0xFEF
 11402                           postinc0	equ	0xFEE
 11403                           fsr0h	equ	0xFEA
 11404                           fsr0l	equ	0xFE9
 11405                           wreg	equ	0xFE8
 11406                           indf1	equ	0xFE7
 11407                           postinc1	equ	0xFE6
 11408                           postdec1	equ	0xFE5
 11409                           fsr1h	equ	0xFE2
 11410                           fsr1l	equ	0xFE1
 11411                           indf2	equ	0xFDF
 11412                           postinc2	equ	0xFDE
 11413                           postdec2	equ	0xFDD
 11414                           plusw2	equ	0xFDB
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _init_crc8 *****************
 11420 ;; Defined at:
 11421 ;;		line 25 in file "crc8.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;  i               2    5[BANK0 ] int 
 11426 ;;  j               2    2[BANK0 ] int 
 11427 ;;  crc             1    4[BANK0 ] unsigned char 
 11428 ;; Return value:  Size  Location     Type
 11429 ;;		None               void
 11430 ;; Registers used:
 11431 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11432 ;; Tracked objects:
 11433 ;;		On entry : E/0
 11434 ;;		On exit  : F/1
 11435 ;;		Unchanged: 0/0
 11436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11437 ;;      Params:         0       0       0       0       0       0       0
 11438 ;;      Locals:         0       7       0       0       0       0       0
 11439 ;;      Temps:          0       0       0       0       0       0       0
 11440 ;;      Totals:         0       7       0       0       0       0       0
 11441 ;;Total ram usage:        7 bytes
 11442 ;; Hardware stack levels used:    1
 11443 ;; Hardware stack levels required when called:    3
 11444 ;; This function calls:
 11445 ;;		Nothing
 11446 ;; This function is called by:
 11447 ;;		_main
 11448 ;;		_crc8
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           	psect	text21
 11453  001D56                     __ptext21:
 11454                           	opt stack 0
 11455  001D56                     _init_crc8:
 11456                           	opt stack 23
 11457                           
 11458                           ;crc8.c: 26: int i,j;
 11459                           ;crc8.c: 27: unsigned char crc;
 11460                           ;crc8.c: 29: if (!made_table) {
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;incstack = 0
 11464                           ;incstack = 0
 11465  001D56  0101               	movlb	1	; () banked
 11466  001D58  5125               	movf	(_made_table+1)& (0+255),w,b
 11467  001D5A  1124               	iorwf	_made_table& (0+255),w,b
 11468  001D5C  E133               	bnz	l1591
 11469                           
 11470                           ; BSR set to: 1
 11471                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11472  001D5E  0100               	movlb	0	; () banked
 11473  001D60  6B65               	clrf	init_crc8@i& (0+255),b
 11474  001D62  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11475  001D64                     l1583:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;crc8.c: 31: crc = i;
 11479  001D64  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11480                           
 11481                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11482  001D68  6B62               	clrf	init_crc8@j& (0+255),b
 11483  001D6A  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11484  001D6C                     l1585:
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11488  001D6C  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11489  001D6E  D003               	goto	l13620
 11490                           
 11491                           ; BSR set to: 0
 11492  001D70  6B60               	clrf	_init_crc8$2046& (0+255),b
 11493  001D72  6B61               	clrf	(_init_crc8$2046+1)& (0+255),b
 11494  001D74  D003               	goto	l13622
 11495  001D76                     l13620:
 11496                           
 11497                           ; BSR set to: 0
 11498  001D76  6B61               	clrf	(_init_crc8$2046+1)& (0+255),b
 11499  001D78  0E07               	movlw	7
 11500  001D7A  6F60               	movwf	_init_crc8$2046& (0+255),b
 11501  001D7C                     l13622:
 11502                           
 11503                           ; BSR set to: 0
 11504  001D7C  5164               	movf	init_crc8@crc& (0+255),w,b
 11505  001D7E  2564               	addwf	init_crc8@crc& (0+255),w,b
 11506  001D80  1960               	xorwf	_init_crc8$2046& (0+255),w,b
 11507  001D82  6F64               	movwf	init_crc8@crc& (0+255),b
 11508                           
 11509                           ; BSR set to: 0
 11510  001D84  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11511  001D86  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11512                           
 11513                           ; BSR set to: 0
 11514  001D88  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11515  001D8A  0A80               	xorlw	128
 11516  001D8C  0F80               	addlw	-128
 11517  001D8E  0E08               	movlw	8
 11518  001D90  B4D8               	btfsc	status,2,c
 11519  001D92  5D62               	subwf	init_crc8@j& (0+255),w,b
 11520  001D94  E3EB               	bnc	l1585
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;crc8.c: 34: }
 11524                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11525  001D96  0E00               	movlw	low _crc8_table
 11526  001D98  0100               	movlb	0	; () banked
 11527  001D9A  2565               	addwf	init_crc8@i& (0+255),w,b
 11528  001D9C  6ED9               	movwf	fsr2l,c
 11529  001D9E  0E03               	movlw	high _crc8_table
 11530  001DA0  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11531  001DA2  6EDA               	movwf	fsr2h,c
 11532  001DA4  C064  FFDF         	movff	init_crc8@crc,indf2
 11533                           
 11534                           ; BSR set to: 0
 11535  001DA8  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11536  001DAA  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11537                           
 11538                           ; BSR set to: 0
 11539  001DAC  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11540  001DAE  0A80               	xorlw	128
 11541  001DB0  0F7F               	addlw	-129
 11542  001DB2  0E00               	movlw	0
 11543  001DB4  B4D8               	btfsc	status,2,c
 11544  001DB6  5D65               	subwf	init_crc8@i& (0+255),w,b
 11545  001DB8  E3D5               	bnc	l1583
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;crc8.c: 37: }
 11549                           ;crc8.c: 38: made_table=1;
 11550  001DBA  0E00               	movlw	0
 11551  001DBC  0101               	movlb	1	; () banked
 11552  001DBE  6F25               	movwf	(_made_table+1)& (0+255),b
 11553  001DC0  0E01               	movlw	1
 11554  001DC2  6F24               	movwf	_made_table& (0+255),b
 11555  001DC4                     l1591:
 11556                           
 11557                           ; BSR set to: 1
 11558  001DC4  0012               	return	
 11559  001DC6                     __end_of_init_crc8:
 11560                           	opt stack 0
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           indf0	equ	0xFEF
 11569                           postinc0	equ	0xFEE
 11570                           fsr0h	equ	0xFEA
 11571                           fsr0l	equ	0xFE9
 11572                           wreg	equ	0xFE8
 11573                           indf1	equ	0xFE7
 11574                           postinc1	equ	0xFE6
 11575                           postdec1	equ	0xFE5
 11576                           fsr1h	equ	0xFE2
 11577                           fsr1l	equ	0xFE1
 11578                           indf2	equ	0xFDF
 11579                           postinc2	equ	0xFDE
 11580                           postdec2	equ	0xFDD
 11581                           plusw2	equ	0xFDB
 11582                           fsr2h	equ	0xFDA
 11583                           fsr2l	equ	0xFD9
 11584                           status	equ	0xFD8
 11585                           
 11586 ;; *************** function _doModeVerbose *****************
 11587 ;; Defined at:
 11588 ;;		line 517 in file "main.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;		None
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11593 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 11594 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 11595 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 11596 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11597 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11598 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11599 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11600 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 11601 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 11602 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 11603 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11604 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11605 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11606 ;;  id              4   41[BANK2 ] unsigned long 
 11607 ;;  p               2   67[BANK2 ] PTR unsigned char 
 11608 ;;		 -> NULL(0), cmdbuf(80), 
 11609 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11610 ;;  maskno          1   46[BANK2 ] unsigned char 
 11611 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 11612 ;;  mask_type       1   16[BANK2 ] unsigned char 
 11613 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 11614 ;;  id              4    0[BANK2 ] unsigned long 
 11615 ;;  p               2   65[BANK2 ] PTR unsigned char 
 11616 ;;		 -> NULL(0), cmdbuf(80), 
 11617 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11618 ;;  filterno        1   45[BANK2 ] unsigned char 
 11619 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 11620 ;;  filter_type     1   13[BANK2 ] unsigned char 
 11621 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 11622 ;;  nodeid          1   54[BANK2 ] unsigned char 
 11623 ;;  p               2   60[BANK2 ] PTR unsigned char 
 11624 ;;		 -> NULL(0), cmdbuf(80), 
 11625 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11626 ;;  value           1   48[BANK2 ] unsigned char 
 11627 ;;  reg             1   40[BANK2 ] unsigned char 
 11628 ;;  page            1   39[BANK2 ] unsigned char 
 11629 ;;  p               2   58[BANK2 ] PTR unsigned char 
 11630 ;;		 -> NULL(0), cmdbuf(80), 
 11631 ;;  value           1   57[BANK2 ] unsigned char 
 11632 ;;  i               1   56[BANK2 ] unsigned char 
 11633 ;;  reg             1   53[BANK2 ] unsigned char 
 11634 ;;  page            1   52[BANK2 ] unsigned char 
 11635 ;;  nodeid          1   50[BANK2 ] unsigned char 
 11636 ;;  count           1   49[BANK2 ] unsigned char 
 11637 ;;  rv              1   38[BANK2 ] enum E15660
 11638 ;;  p               2   63[BANK2 ] PTR unsigned char 
 11639 ;;		 -> NULL(0), cmdbuf(80), 
 11640 ;;  ifmode          1   62[BANK2 ] enum E16371
 11641 ;;  c               1   55[BANK2 ] unsigned char 
 11642 ;;  i               1   47[BANK2 ] unsigned char 
 11643 ;; Return value:  Size  Location     Type
 11644 ;;		None               void
 11645 ;; Registers used:
 11646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11652 ;;      Params:         0       0       0       0       0       0       0
 11653 ;;      Locals:         0       0       0      69       0       0       0
 11654 ;;      Temps:          0      20       0       0       0       0       0
 11655 ;;      Totals:         0      20       0      69       0       0       0
 11656 ;;Total ram usage:       89 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:   10
 11659 ;; This function calls:
 11660 ;;		_putsUSART
 11661 ;;		_printFirmwareVersion
 11662 ;;		_fifo_read
 11663 ;;		_Busy_eep
 11664 ;;		_Write_b_eep
 11665 ;;		_receivePrintEventVerbose
 11666 ;;		_WriteUSART
 11667 ;;		_stristr
 11668 ;;		_ECANSetOperationMode
 11669 ;;		_strtok
 11670 ;;		_atoi
 11671 ;;		_memset
 11672 ;;		_sendVSCPFrame
 11673 ;;		_printStatistics
 11674 ;;		_printErrors
 11675 ;;		_printHelp
 11676 ;;		_findNodes
 11677 ;;		_strcpy
 11678 ;;		_strchr
 11679 ;;		_readRegisterExtended
 11680 ;;		_sprintf
 11681 ;;		_printBinary
 11682 ;;		_writeRegisterExtended
 11683 ;;		_printNodeFirmwareVersion
 11684 ;;		_printGUID
 11685 ;;		_printMDF
 11686 ;;		_setFilter
 11687 ;;		__CANIDToRegs
 11688 ;; This function is called by:
 11689 ;;		_main
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           	psect	text22
 11694  0056EE                     __ptext22:
 11695                           	opt stack 0
 11696  0056EE                     _doModeVerbose:
 11697                           	opt stack 19
 11698                           
 11699                           ;main.c: 518: uint8_t c;
 11700                           ;main.c: 519: uint8_t i;
 11701                           ;main.c: 522: if (!bSilent) {
 11702                           
 11703                           ; BSR set to: 1
 11704                           ;incstack = 0
 11705                           ;incstack = 0
 11706  0056EE  662F               	tstfsz	_bSilent,c
 11707  0056F0  D002               	goto	l13732
 11708                           
 11709                           ;main.c: 523: receivePrintEventVerbose();
 11710  0056F2  EC4B  F023         	call	_receivePrintEventVerbose	;wreg free
 11711  0056F6                     l13732:
 11712                           
 11713                           ;main.c: 524: }
 11714                           ;main.c: 527: (INTCONbits.GIE = 0);
 11715  0056F6  9EF2               	bcf	intcon,7,c	;volatile
 11716                           
 11717                           ;main.c: 529: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11718  0056F8  0E01               	movlw	high _serialInputFifo
 11719  0056FA  0100               	movlb	0	; () banked
 11720  0056FC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11721  0056FE  0EDB               	movlw	low _serialInputFifo
 11722  005700  6F60               	movwf	?_fifo_read& (0+255),b
 11723  005702  0E02               	movlw	high doModeVerbose@c
 11724  005704  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11725  005706  0EB7               	movlw	low doModeVerbose@c
 11726  005708  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11727  00570A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11728  00570C  0E01               	movlw	1
 11729  00570E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11730  005710  EC4B  F015         	call	_fifo_read	;wreg free
 11731  005714  0560               	decf	?_fifo_read& (0+255),w,b
 11732  005716  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11733  005718  E002 EF94  F035    	bnz	l14394
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;main.c: 532: (INTCONbits.GIE = 1);
 11737  00571E  8EF2               	bsf	intcon,7,c	;volatile
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;main.c: 535: WriteUSART( c );
 11741  005720  0102               	movlb	2	; () banked
 11742  005722  51B7               	movf	doModeVerbose@c& (0+255),w,b
 11743  005724  EC7E  F00A         	call	_WriteUSART
 11744  005728                     l480:
 11745  005728  A2AC               	btfss	4012,1,c	;volatile
 11746  00572A  D7FE               	goto	l480
 11747                           
 11748                           ;main.c: 539: cmdbuf[ pos++ ] = c;
 11749  00572C  0E2B               	movlw	low _cmdbuf
 11750  00572E  2434               	addwf	_pos,w,c
 11751  005730  6ED9               	movwf	fsr2l,c
 11752  005732  6ADA               	clrf	fsr2h,c
 11753  005734  0E01               	movlw	high _cmdbuf
 11754  005736  22DA               	addwfc	fsr2h,f,c
 11755  005738  0102               	movlb	2	; () banked
 11756  00573A  C2B7  FFDF         	movff	doModeVerbose@c,indf2
 11757                           
 11758                           ; BSR set to: 2
 11759  00573E  2A34               	incf	_pos,f,c
 11760                           
 11761                           ; BSR set to: 2
 11762                           ;main.c: 540: if (pos >= sizeof( cmdbuf ) ) {
 11763  005740  0E4F               	movlw	79
 11764  005742  6434               	cpfsgt	_pos,c
 11765  005744  D001               	goto	l13748
 11766                           
 11767                           ; BSR set to: 2
 11768                           ;main.c: 543: pos = 0;
 11769  005746  6A34               	clrf	_pos,c
 11770  005748                     l13748:
 11771                           
 11772                           ; BSR set to: 2
 11773                           ;main.c: 544: }
 11774                           ;main.c: 547: if (0x0d == c) {
 11775  005748  51B7               	movf	doModeVerbose@c& (0+255),w,b
 11776  00574A  0A0D               	xorlw	13
 11777  00574C  E002 EF94  F035    	bnz	l14394
 11778                           
 11779                           ; BSR set to: 2
 11780                           ;main.c: 549: cmdbuf[ pos ] = 0;
 11781  005752  0E2B               	movlw	low _cmdbuf
 11782  005754  2434               	addwf	_pos,w,c
 11783  005756  6ED9               	movwf	fsr2l,c
 11784  005758  6ADA               	clrf	fsr2h,c
 11785  00575A  0E01               	movlw	high _cmdbuf
 11786  00575C  22DA               	addwfc	fsr2h,f,c
 11787  00575E  6ADF               	clrf	indf2,c
 11788                           
 11789                           ; BSR set to: 1
 11790                           ;main.c: 552: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11791  005760  0100               	movlb	0	; () banked
 11792  005762  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11793  005764  0E2B               	movlw	low _cmdbuf
 11794  005766  6F6D               	movwf	?_stristr& (0+255),b
 11795  005768  0E7C               	movlw	high STR_6
 11796  00576A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11797  00576C  0EC4               	movlw	low STR_6
 11798  00576E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11799  005770  EC59  F00F         	call	_stristr	;wreg free
 11800  005774  0E2B               	movlw	low _cmdbuf
 11801  005776  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11802  005778  0E01               	movlw	high _cmdbuf
 11803  00577A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11804  00577C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11805  00577E  E102               	bnz	u18205
 11806  005780  516D               	movf	?_stristr& (0+255),w,b
 11807  005782  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11808  005784                     u18205:
 11809  005784  E112               	bnz	l13760
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;main.c: 553: putsUSART((char *) "Will enter bootloader now...\r\n");
 11813  005786  0E77               	movlw	high STR_7
 11814  005788  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11815  00578A  0E91               	movlw	low STR_7
 11816  00578C  6F61               	movwf	?_putsUSART& (0+255),b
 11817  00578E  EC33  F00D         	call	_putsUSART	;wreg free
 11818                           
 11819                           ;main.c: 554: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11820  005792  EC5C  F00A         	call	_Busy_eep	;wreg free
 11821  005796  0100               	movlb	0	; () banked
 11822  005798  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11823  00579A  6B60               	clrf	?_Write_b_eep& (0+255),b
 11824  00579C  0EFF               	movlw	255
 11825  00579E  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11826  0057A0  EC2C  F00B         	call	_Write_b_eep	;wreg free
 11827  0057A4  00FF               	reset		;# 
 11828                           
 11829                           ;main.c: 556: }
 11830  0057A6  EF87  F035         	goto	l14390
 11831  0057AA                     l13760:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 558: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11835  0057AA  0E01               	movlw	high _cmdbuf
 11836  0057AC  0100               	movlb	0	; () banked
 11837  0057AE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11838  0057B0  0E2B               	movlw	low _cmdbuf
 11839  0057B2  6F6D               	movwf	?_stristr& (0+255),b
 11840  0057B4  0E7C               	movlw	high STR_8
 11841  0057B6  6F70               	movwf	(?_stristr+3)& (0+255),b
 11842  0057B8  0EAB               	movlw	low STR_8
 11843  0057BA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11844  0057BC  EC59  F00F         	call	_stristr	;wreg free
 11845  0057C0  0E2B               	movlw	low _cmdbuf
 11846  0057C2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11847  0057C4  0E01               	movlw	high _cmdbuf
 11848  0057C6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11849  0057C8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11850  0057CA  E102               	bnz	u18215
 11851  0057CC  516D               	movf	?_stristr& (0+255),w,b
 11852  0057CE  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11853  0057D0                     u18215:
 11854  0057D0  E10C               	bnz	l13768
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;main.c: 559: bSilent = 0;
 11858  0057D2  6A2F               	clrf	_bSilent,c
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;main.c: 560: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11862  0057D4  0E00               	movlw	0
 11863  0057D6  EC93  F00A         	call	_ECANSetOperationMode
 11864                           
 11865                           ; BSR set to: 0
 11866                           ;main.c: 561: putsUSART((char *) "+OK\r\n");
 11867  0057DA  0E7C               	movlw	high STR_9
 11868  0057DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11869  0057DE  0E6E               	movlw	low STR_9
 11870  0057E0  6F61               	movwf	?_putsUSART& (0+255),b
 11871  0057E2  EC33  F00D         	call	_putsUSART	;wreg free
 11872                           
 11873                           ;main.c: 562: }
 11874  0057E6  EF87  F035         	goto	l14390
 11875  0057EA                     l13768:
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;main.c: 564: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11879  0057EA  0E01               	movlw	high _cmdbuf
 11880  0057EC  0100               	movlb	0	; () banked
 11881  0057EE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11882  0057F0  0E2B               	movlw	low _cmdbuf
 11883  0057F2  6F6D               	movwf	?_stristr& (0+255),b
 11884  0057F4  0E7C               	movlw	high STR_10
 11885  0057F6  6F70               	movwf	(?_stristr+3)& (0+255),b
 11886  0057F8  0E4C               	movlw	low STR_10
 11887  0057FA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11888  0057FC  EC59  F00F         	call	_stristr	;wreg free
 11889  005800  0E2B               	movlw	low _cmdbuf
 11890  005802  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11891  005804  0E01               	movlw	high _cmdbuf
 11892  005806  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11893  005808  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11894  00580A  E102               	bnz	u18225
 11895  00580C  516D               	movf	?_stristr& (0+255),w,b
 11896  00580E  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11897  005810                     u18225:
 11898  005810  E10D               	bnz	l13776
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;main.c: 565: bSilent = 1;
 11902  005812  0E01               	movlw	1
 11903  005814  6E2F               	movwf	_bSilent,c
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;main.c: 566: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11907  005816  0E00               	movlw	0
 11908  005818  EC93  F00A         	call	_ECANSetOperationMode
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;main.c: 567: putsUSART((char *) "+OK\r\n");
 11912  00581C  0E7C               	movlw	high STR_9
 11913  00581E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11914  005820  0E6E               	movlw	low STR_9
 11915  005822  6F61               	movwf	?_putsUSART& (0+255),b
 11916  005824  EC33  F00D         	call	_putsUSART	;wreg free
 11917                           
 11918                           ;main.c: 568: }
 11919  005828  EF87  F035         	goto	l14390
 11920  00582C                     l13776:
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;main.c: 570: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11924  00582C  0E01               	movlw	high _cmdbuf
 11925  00582E  0100               	movlb	0	; () banked
 11926  005830  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11927  005832  0E2B               	movlw	low _cmdbuf
 11928  005834  6F6D               	movwf	?_stristr& (0+255),b
 11929  005836  0E7C               	movlw	high STR_12
 11930  005838  6F70               	movwf	(?_stristr+3)& (0+255),b
 11931  00583A  0E86               	movlw	low STR_12
 11932  00583C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11933  00583E  EC59  F00F         	call	_stristr	;wreg free
 11934  005842  0E2B               	movlw	low _cmdbuf
 11935  005844  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11936  005846  0E01               	movlw	high _cmdbuf
 11937  005848  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11938  00584A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11939  00584C  E102               	bnz	u18235
 11940  00584E  516D               	movf	?_stristr& (0+255),w,b
 11941  005850  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11942  005852                     u18235:
 11943  005852  E10D               	bnz	l13784
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;main.c: 571: bSilent = 1;
 11947  005854  0E01               	movlw	1
 11948  005856  6E2F               	movwf	_bSilent,c
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;main.c: 572: ECANSetOperationMode(0x20);
 11952  005858  0E20               	movlw	32
 11953  00585A  EC93  F00A         	call	_ECANSetOperationMode
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;main.c: 573: putsUSART((char *) "+OK\r\n");
 11957  00585E  0E7C               	movlw	high STR_9
 11958  005860  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11959  005862  0E6E               	movlw	low STR_9
 11960  005864  6F61               	movwf	?_putsUSART& (0+255),b
 11961  005866  EC33  F00D         	call	_putsUSART	;wreg free
 11962                           
 11963                           ;main.c: 574: }
 11964  00586A  EF87  F035         	goto	l14390
 11965  00586E                     l13784:
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;main.c: 576: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11969  00586E  0E01               	movlw	high _cmdbuf
 11970  005870  0100               	movlb	0	; () banked
 11971  005872  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11972  005874  0E2B               	movlw	low _cmdbuf
 11973  005876  6F6D               	movwf	?_stristr& (0+255),b
 11974  005878  0E7B               	movlw	high STR_14
 11975  00587A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11976  00587C  0EB3               	movlw	low STR_14
 11977  00587E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11978  005880  EC59  F00F         	call	_stristr	;wreg free
 11979  005884  0E2B               	movlw	low _cmdbuf
 11980  005886  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11981  005888  0E01               	movlw	high _cmdbuf
 11982  00588A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11983  00588C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11984  00588E  E102               	bnz	u18245
 11985  005890  516D               	movf	?_stristr& (0+255),w,b
 11986  005892  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11987  005894                     u18245:
 11988  005894  E10C               	bnz	l13792
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;main.c: 577: bSilent = 0;
 11992  005896  6A2F               	clrf	_bSilent,c
 11993                           
 11994                           ; BSR set to: 0
 11995                           ;main.c: 578: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11996  005898  0E40               	movlw	64
 11997  00589A  EC93  F00A         	call	_ECANSetOperationMode
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;main.c: 579: putsUSART((char *) "+OK\r\n");
 12001  00589E  0E7C               	movlw	high STR_9
 12002  0058A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12003  0058A2  0E6E               	movlw	low STR_9
 12004  0058A4  6F61               	movwf	?_putsUSART& (0+255),b
 12005  0058A6  EC33  F00D         	call	_putsUSART	;wreg free
 12006                           
 12007                           ;main.c: 580: }
 12008  0058AA  EF87  F035         	goto	l14390
 12009  0058AE                     l13792:
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;main.c: 582: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12013  0058AE  0E01               	movlw	high _cmdbuf
 12014  0058B0  0100               	movlb	0	; () banked
 12015  0058B2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12016  0058B4  0E2B               	movlw	low _cmdbuf
 12017  0058B6  6F6D               	movwf	?_stristr& (0+255),b
 12018  0058B8  0E7C               	movlw	high STR_16
 12019  0058BA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12020  0058BC  0E3E               	movlw	low STR_16
 12021  0058BE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12022  0058C0  EC59  F00F         	call	_stristr	;wreg free
 12023  0058C4  0E2B               	movlw	low _cmdbuf
 12024  0058C6  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12025  0058C8  0E01               	movlw	high _cmdbuf
 12026  0058CA  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12027  0058CC  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12028  0058CE  E102               	bnz	u18255
 12029  0058D0  516D               	movf	?_stristr& (0+255),w,b
 12030  0058D2  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12031  0058D4                     u18255:
 12032  0058D4  E10C               	bnz	l13800
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 583: bSilent = 0;
 12036  0058D6  6A2F               	clrf	_bSilent,c
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;main.c: 584: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12040  0058D8  0E60               	movlw	96
 12041  0058DA  EC93  F00A         	call	_ECANSetOperationMode
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;main.c: 585: putsUSART((char *) "+OK\r\n");
 12045  0058DE  0E7C               	movlw	high STR_9
 12046  0058E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12047  0058E2  0E6E               	movlw	low STR_9
 12048  0058E4  6F61               	movwf	?_putsUSART& (0+255),b
 12049  0058E6  EC33  F00D         	call	_putsUSART	;wreg free
 12050                           
 12051                           ;main.c: 586: }
 12052  0058EA  EF87  F035         	goto	l14390
 12053  0058EE                     l13800:
 12054                           
 12055                           ; BSR set to: 0
 12056                           ;main.c: 588: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12057  0058EE  0E01               	movlw	high _cmdbuf
 12058  0058F0  0100               	movlb	0	; () banked
 12059  0058F2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12060  0058F4  0E2B               	movlw	low _cmdbuf
 12061  0058F6  6F6D               	movwf	?_stristr& (0+255),b
 12062  0058F8  0E7B               	movlw	high STR_18
 12063  0058FA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12064  0058FC  0EFC               	movlw	low STR_18
 12065  0058FE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12066  005900  EC59  F00F         	call	_stristr	;wreg free
 12067  005904  0E2B               	movlw	low _cmdbuf
 12068  005906  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12069  005908  0E01               	movlw	high _cmdbuf
 12070  00590A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12071  00590C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12072  00590E  E102               	bnz	u18265
 12073  005910  516D               	movf	?_stristr& (0+255),w,b
 12074  005912  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12075  005914                     u18265:
 12076  005914  E10B               	bnz	l13806
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;main.c: 589: printFirmwareVersion();
 12080  005916  EC58  F010         	call	_printFirmwareVersion	;wreg free
 12081                           
 12082                           ;main.c: 590: putsUSART((char *) "+OK\r\n");
 12083  00591A  0E7C               	movlw	high STR_9
 12084  00591C  0100               	movlb	0	; () banked
 12085  00591E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12086  005920  0E6E               	movlw	low STR_9
 12087  005922  6F61               	movwf	?_putsUSART& (0+255),b
 12088  005924  EC33  F00D         	call	_putsUSART	;wreg free
 12089                           
 12090                           ;main.c: 591: }
 12091  005928  EF87  F035         	goto	l14390
 12092  00592C                     l13806:
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;main.c: 593: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12096  00592C  0E01               	movlw	high _cmdbuf
 12097  00592E  0100               	movlb	0	; () banked
 12098  005930  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12099  005932  0E2B               	movlw	low _cmdbuf
 12100  005934  6F6D               	movwf	?_stristr& (0+255),b
 12101  005936  0E7C               	movlw	high STR_20
 12102  005938  6F70               	movwf	(?_stristr+3)& (0+255),b
 12103  00593A  0E37               	movlw	low STR_20
 12104  00593C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12105  00593E  EC59  F00F         	call	_stristr	;wreg free
 12106  005942  0E2B               	movlw	low _cmdbuf
 12107  005944  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12108  005946  0E01               	movlw	high _cmdbuf
 12109  005948  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12110  00594A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12111  00594C  E102               	bnz	u18275
 12112  00594E  516D               	movf	?_stristr& (0+255),w,b
 12113  005950  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12114  005952                     u18275:
 12115  005952  E165               	bnz	l13842
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;main.c: 594: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12119  005954  506F               	movf	3951,w,c	;volatile
 12120  005956  0BE0               	andlw	224
 12121  005958  0102               	movlb	2	; () banked
 12122  00595A  6FBE               	movwf	doModeVerbose@ifmode& (0+255),b
 12123                           
 12124                           ; BSR set to: 2
 12125                           ;main.c: 595: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12126  00595C  67BE               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12127  00595E  D00B               	goto	l13816
 12128                           
 12129                           ; BSR set to: 2
 12130  005960  662F               	tstfsz	_bSilent,c
 12131  005962  D009               	goto	l13816
 12132                           
 12133                           ; BSR set to: 2
 12134                           ;main.c: 596: putsUSART((char *) "+OK - Normal mode\r\n");
 12135  005964  0E7A               	movlw	high STR_21
 12136  005966  0100               	movlb	0	; () banked
 12137  005968  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12138  00596A  0E40               	movlw	low STR_21
 12139  00596C  6F61               	movwf	?_putsUSART& (0+255),b
 12140  00596E  EC33  F00D         	call	_putsUSART	;wreg free
 12141                           
 12142                           ;main.c: 597: }
 12143  005972  EF87  F035         	goto	l14390
 12144  005976                     l13816:
 12145                           
 12146                           ; BSR set to: 2
 12147                           ;main.c: 598: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12148  005976  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12149  005978  0E01               	movlw	1
 12150  00597A  A4D8               	btfss	status,2,c
 12151  00597C  0E00               	movlw	0
 12152  00597E  142F               	andwf	_bSilent,w,c
 12153  005980  E009               	bz	l13820
 12154                           
 12155                           ; BSR set to: 2
 12156                           ;main.c: 599: putsUSART((char *) "+OK - Silent mode\r\n");
 12157  005982  0E7A               	movlw	high STR_22
 12158  005984  0100               	movlb	0	; () banked
 12159  005986  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12160  005988  0E54               	movlw	low STR_22
 12161  00598A  6F61               	movwf	?_putsUSART& (0+255),b
 12162  00598C  EC33  F00D         	call	_putsUSART	;wreg free
 12163                           
 12164                           ;main.c: 600: }
 12165  005990  EF87  F035         	goto	l14390
 12166  005994                     l13820:
 12167                           
 12168                           ; BSR set to: 2
 12169                           ;main.c: 601: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12170  005994  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12171  005996  0A20               	xorlw	32
 12172  005998  E109               	bnz	l13824
 12173                           
 12174                           ; BSR set to: 2
 12175                           ;main.c: 602: putsUSART((char *) "+OK - Sleep mode\r\n");
 12176  00599A  0E7A               	movlw	high STR_23
 12177  00599C  0100               	movlb	0	; () banked
 12178  00599E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12179  0059A0  0E90               	movlw	low STR_23
 12180  0059A2  6F61               	movwf	?_putsUSART& (0+255),b
 12181  0059A4  EC33  F00D         	call	_putsUSART	;wreg free
 12182                           
 12183                           ;main.c: 603: }
 12184  0059A8  EF87  F035         	goto	l14390
 12185  0059AC                     l13824:
 12186                           
 12187                           ; BSR set to: 2
 12188                           ;main.c: 604: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12189  0059AC  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12190  0059AE  0A40               	xorlw	64
 12191  0059B0  E109               	bnz	l13828
 12192                           
 12193                           ; BSR set to: 2
 12194                           ;main.c: 605: putsUSART((char *) "+OK - Loopback mode\r\n");
 12195  0059B2  0E79               	movlw	high STR_24
 12196  0059B4  0100               	movlb	0	; () banked
 12197  0059B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12198  0059B8  0EC3               	movlw	low STR_24
 12199  0059BA  6F61               	movwf	?_putsUSART& (0+255),b
 12200  0059BC  EC33  F00D         	call	_putsUSART	;wreg free
 12201                           
 12202                           ;main.c: 606: }
 12203  0059C0  EF87  F035         	goto	l14390
 12204  0059C4                     l13828:
 12205                           
 12206                           ; BSR set to: 2
 12207                           ;main.c: 607: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12208  0059C4  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12209  0059C6  0A60               	xorlw	96
 12210  0059C8  E109               	bnz	l13832
 12211                           
 12212                           ; BSR set to: 2
 12213                           ;main.c: 608: putsUSART((char *) "+OK - Listen only mode\r\n");
 12214  0059CA  0E78               	movlw	high STR_25
 12215  0059CC  0100               	movlb	0	; () banked
 12216  0059CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12217  0059D0  0E73               	movlw	low STR_25
 12218  0059D2  6F61               	movwf	?_putsUSART& (0+255),b
 12219  0059D4  EC33  F00D         	call	_putsUSART	;wreg free
 12220                           
 12221                           ;main.c: 609: }
 12222  0059D8  EF87  F035         	goto	l14390
 12223  0059DC                     l13832:
 12224                           
 12225                           ; BSR set to: 2
 12226                           ;main.c: 610: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12227  0059DC  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12228  0059DE  0A80               	xorlw	128
 12229  0059E0  E109               	bnz	l13836
 12230                           
 12231                           ; BSR set to: 2
 12232                           ;main.c: 611: putsUSART((char *) "+OK - Closed mode\r\n");
 12233  0059E2  0E7A               	movlw	high STR_26
 12234  0059E4  0100               	movlb	0	; () banked
 12235  0059E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12236  0059E8  0E2C               	movlw	low STR_26
 12237  0059EA  6F61               	movwf	?_putsUSART& (0+255),b
 12238  0059EC  EC33  F00D         	call	_putsUSART	;wreg free
 12239                           
 12240                           ;main.c: 612: }
 12241  0059F0  EF87  F035         	goto	l14390
 12242  0059F4                     l13836:
 12243                           
 12244                           ; BSR set to: 2
 12245                           ;main.c: 613: else if (ECAN_OP_MODE_BITS == ifmode) {
 12246  0059F4  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12247  0059F6  0AE0               	xorlw	224
 12248  0059F8  E109               	bnz	l13840
 12249                           
 12250                           ; BSR set to: 2
 12251                           ;main.c: 614: putsUSART((char *) "+OK - Bits mode\r\n");
 12252  0059FA  0E7A               	movlw	high STR_27
 12253  0059FC  0100               	movlb	0	; () banked
 12254  0059FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12255  005A00  0EA3               	movlw	low STR_27
 12256  005A02  6F61               	movwf	?_putsUSART& (0+255),b
 12257  005A04  EC33  F00D         	call	_putsUSART	;wreg free
 12258                           
 12259                           ;main.c: 615: }
 12260  005A08  EF87  F035         	goto	l14390
 12261  005A0C                     l13840:
 12262                           
 12263                           ; BSR set to: 2
 12264                           ;main.c: 616: else {
 12265                           ;main.c: 617: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12266  005A0C  0E79               	movlw	high STR_28
 12267  005A0E  0100               	movlb	0	; () banked
 12268  005A10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12269  005A12  0E06               	movlw	low STR_28
 12270  005A14  6F61               	movwf	?_putsUSART& (0+255),b
 12271  005A16  EC33  F00D         	call	_putsUSART	;wreg free
 12272  005A1A  EF87  F035         	goto	l14390
 12273  005A1E                     l13842:
 12274                           
 12275                           ; BSR set to: 0
 12276                           ;main.c: 622: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12277  005A1E  0E01               	movlw	high _cmdbuf
 12278  005A20  0100               	movlb	0	; () banked
 12279  005A22  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12280  005A24  0E2B               	movlw	low _cmdbuf
 12281  005A26  6F6D               	movwf	?_stristr& (0+255),b
 12282  005A28  0E7C               	movlw	high STR_29
 12283  005A2A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12284  005A2C  0EEA               	movlw	low STR_29
 12285  005A2E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12286  005A30  EC59  F00F         	call	_stristr	;wreg free
 12287  005A34  0E2B               	movlw	low _cmdbuf
 12288  005A36  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12289  005A38  0E01               	movlw	high _cmdbuf
 12290  005A3A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12291  005A3C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12292  005A3E  E102               	bnz	u18375
 12293  005A40  516D               	movf	?_stristr& (0+255),w,b
 12294  005A42  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12295  005A44                     u18375:
 12296  005A44  E001 D0CF          	bnz	l13896
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;main.c: 624: char *p = strtok(cmdbuf, ",");
 12300  005A48  ECED  F035         	call	PL30	;call to abstracted procedure
 12301  005A4C  ECA1  F010         	call	_strtok	;wreg free
 12302  005A50  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12303  005A54  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;main.c: 627: vscpPriority = 3;
 12307  005A58  0E03               	movlw	3
 12308  005A5A  6E3D               	movwf	_vscpPriority,c
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;main.c: 628: if ((0) != p) {
 12312  005A5C  0102               	movlb	2	; () banked
 12313  005A5E  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12314  005A60  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12315  005A62  E008               	bz	l13852
 12316                           
 12317                           ; BSR set to: 2
 12318                           ;main.c: 629: vscpPriority = atoi(p);
 12319  005A64  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12320  005A68  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12321  005A6C  ECE4  F018         	call	_atoi	;wreg free
 12322  005A70  5166               	movf	?_atoi& (0+255),w,b
 12323  005A72  6E3D               	movwf	_vscpPriority,c
 12324  005A74                     l13852:
 12325                           
 12326                           ;main.c: 630: }
 12327                           ;main.c: 633: vscpClass = 0;
 12328  005A74  6A38               	clrf	_vscpClass,c
 12329  005A76  6A39               	clrf	_vscpClass+1,c
 12330                           
 12331                           ;main.c: 634: if ((0) != (p = strtok((0), ","))) {
 12332  005A78  EC96  F035         	call	PL2	;call to abstracted procedure
 12333  005A7C  ECA1  F010         	call	_strtok	;wreg free
 12334  005A80  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12335  005A84  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12336  005A88  0102               	movlb	2	; () banked
 12337  005A8A  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12338  005A8C  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12339  005A8E  E00A               	bz	l13858
 12340                           
 12341                           ; BSR set to: 2
 12342                           ;main.c: 635: vscpClass = atoi(p);
 12343  005A90  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12344  005A94  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12345  005A98  ECE4  F018         	call	_atoi	;wreg free
 12346  005A9C  C066  F038         	movff	?_atoi,_vscpClass
 12347  005AA0  C067  F039         	movff	?_atoi+1,_vscpClass+1
 12348  005AA4                     l13858:
 12349                           
 12350                           ;main.c: 636: }
 12351                           ;main.c: 639: vscpType = 0;
 12352  005AA4  6A3F               	clrf	_vscpType,c
 12353                           
 12354                           ;main.c: 640: if ((0) != (p = strtok((0), ","))) {
 12355  005AA6  EC96  F035         	call	PL2	;call to abstracted procedure
 12356  005AAA  ECA1  F010         	call	_strtok	;wreg free
 12357  005AAE  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12358  005AB2  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12359  005AB6  0102               	movlb	2	; () banked
 12360  005AB8  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12361  005ABA  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12362  005ABC  E008               	bz	l13864
 12363                           
 12364                           ; BSR set to: 2
 12365                           ;main.c: 641: vscpType = atoi(p);
 12366  005ABE  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12367  005AC2  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12368  005AC6  ECE4  F018         	call	_atoi	;wreg free
 12369  005ACA  5166               	movf	?_atoi& (0+255),w,b
 12370  005ACC  6E3F               	movwf	_vscpType,c
 12371  005ACE                     l13864:
 12372                           
 12373                           ;main.c: 642: }
 12374                           ;main.c: 645: vscpNodeId = 0;
 12375  005ACE  6A3C               	clrf	_vscpNodeId,c
 12376                           
 12377                           ;main.c: 646: if ((0) != (p = strtok((0), ","))) {
 12378  005AD0  EC96  F035         	call	PL2	;call to abstracted procedure
 12379  005AD4  ECA1  F010         	call	_strtok	;wreg free
 12380  005AD8  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12381  005ADC  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12382  005AE0  0102               	movlb	2	; () banked
 12383  005AE2  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12384  005AE4  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12385  005AE6  E008               	bz	l13870
 12386                           
 12387                           ; BSR set to: 2
 12388                           ;main.c: 647: vscpNodeId = atoi(p);
 12389  005AE8  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12390  005AEC  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12391  005AF0  ECE4  F018         	call	_atoi	;wreg free
 12392  005AF4  5166               	movf	?_atoi& (0+255),w,b
 12393  005AF6  6E3C               	movwf	_vscpNodeId,c
 12394  005AF8                     l13870:
 12395                           
 12396                           ;main.c: 648: }
 12397                           ;main.c: 651: vscpSize = 0;
 12398  005AF8  6A3E               	clrf	_vscpSize,c
 12399                           
 12400                           ;main.c: 652: if ((0) != (p = strtok((0), ","))) {
 12401  005AFA  EC96  F035         	call	PL2	;call to abstracted procedure
 12402  005AFE  ECA1  F010         	call	_strtok	;wreg free
 12403  005B02  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12404  005B06  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12405  005B0A  0102               	movlb	2	; () banked
 12406  005B0C  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12407  005B0E  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12408  005B10  E008               	bz	l13876
 12409                           
 12410                           ; BSR set to: 2
 12411                           ;main.c: 653: vscpSize = atoi(p);
 12412  005B12  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12413  005B16  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12414  005B1A  ECE4  F018         	call	_atoi	;wreg free
 12415  005B1E  5166               	movf	?_atoi& (0+255),w,b
 12416  005B20  6E3E               	movwf	_vscpSize,c
 12417  005B22                     l13876:
 12418                           
 12419                           ;main.c: 654: }
 12420                           ;main.c: 656: memset( vscpData, 0, 8 );
 12421  005B22  0E01               	movlw	high _vscpData
 12422  005B24  0100               	movlb	0	; () banked
 12423  005B26  6F61               	movwf	(?_memset+1)& (0+255),b
 12424  005B28  0EE3               	movlw	low _vscpData
 12425  005B2A  6F60               	movwf	?_memset& (0+255),b
 12426  005B2C  6B63               	clrf	(?_memset+3)& (0+255),b
 12427  005B2E  6B62               	clrf	(?_memset+2)& (0+255),b
 12428  005B30  6B65               	clrf	(?_memset+5)& (0+255),b
 12429  005B32  0E08               	movlw	8
 12430  005B34  6F64               	movwf	(?_memset+4)& (0+255),b
 12431  005B36  ECCE  F00A         	call	_memset	;wreg free
 12432                           
 12433                           ; BSR set to: 0
 12434                           ;main.c: 657: for (i = 0; i < vscpSize; i++) {
 12435  005B3A  0102               	movlb	2	; () banked
 12436  005B3C  6BAF               	clrf	doModeVerbose@i& (0+255),b
 12437  005B3E  D01D               	goto	l13886
 12438  005B40                     l13880:
 12439                           
 12440                           ; BSR set to: 2
 12441                           ;main.c: 658: if ((0) != (p = strtok((0), ","))) {
 12442  005B40  EC96  F035         	call	PL2	;call to abstracted procedure
 12443  005B44  ECA1  F010         	call	_strtok	;wreg free
 12444  005B48  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12445  005B4C  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12446  005B50  0102               	movlb	2	; () banked
 12447  005B52  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12448  005B54  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12449  005B56  E014               	bz	l13888
 12450                           
 12451                           ; BSR set to: 2
 12452                           ;main.c: 659: vscpData[ i ] = atoi(p);
 12453  005B58  0EE3               	movlw	low _vscpData
 12454  005B5A  25AF               	addwf	doModeVerbose@i& (0+255),w,b
 12455  005B5C  6ED9               	movwf	fsr2l,c
 12456  005B5E  6ADA               	clrf	fsr2h,c
 12457  005B60  0101               	movlb	1	; () banked
 12458  005B62  0E01               	movlw	high _vscpData
 12459  005B64  22DA               	addwfc	fsr2h,f,c
 12460  005B66  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12461  005B6A  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12462  005B6E  ECE4  F018         	call	_atoi	;wreg free
 12463  005B72  5166               	movf	?_atoi& (0+255),w,b
 12464  005B74  6EDF               	movwf	indf2,c
 12465                           
 12466                           ; BSR set to: 0
 12467                           
 12468                           ;main.c: 660: }
 12469  005B76  0102               	movlb	2	; () banked
 12470  005B78  2BAF               	incf	doModeVerbose@i& (0+255),f,b
 12471  005B7A                     l13886:
 12472                           
 12473                           ; BSR set to: 2
 12474  005B7A  503E               	movf	_vscpSize,w,c
 12475  005B7C  5DAF               	subwf	doModeVerbose@i& (0+255),w,b
 12476  005B7E  E3E0               	bnc	l13880
 12477  005B80                     l13888:
 12478                           
 12479                           ; BSR set to: 2
 12480                           ;main.c: 663: }
 12481                           ;main.c: 664: }
 12482                           ;main.c: 666: if ( sendVSCPFrame(vscpClass,
 12483                           ;main.c: 667: vscpType,
 12484                           ;main.c: 668: vscpNodeId,
 12485                           ;main.c: 669: vscpPriority,
 12486                           ;main.c: 670: vscpSize,
 12487                           ;main.c: 671: vscpData ) ) {
 12488  005B80  C038  F096         	movff	_vscpClass,?_sendVSCPFrame
 12489  005B84  C039  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12490  005B88  C03F  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12491  005B8C  C03C  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12492  005B90  C03D  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12493  005B94  C03E  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12494  005B98  0E01               	movlw	high _vscpData
 12495  005B9A  0100               	movlb	0	; () banked
 12496  005B9C  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12497  005B9E  0EE3               	movlw	low _vscpData
 12498  005BA0  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12499  005BA2  EC73  F013         	call	_sendVSCPFrame	;wreg free
 12500  005BA6  0900               	iorlw	0
 12501  005BA8  E015               	bz	l13894
 12502                           
 12503                           ;main.c: 673: cntTxFrames++;
 12504  005BAA  0101               	movlb	1	; () banked
 12505  005BAC  2B14               	incf	_cntTxFrames& (0+255),f,b
 12506  005BAE  0E00               	movlw	0
 12507  005BB0  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12508  005BB2  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12509  005BB4  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12510                           
 12511                           ;main.c: 674: cntTxBytes += vscpSize;
 12512  005BB6  503E               	movf	_vscpSize,w,c
 12513  005BB8  2710               	addwf	_cntTxBytes& (0+255),f,b
 12514  005BBA  0E00               	movlw	0
 12515  005BBC  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12516  005BBE  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12517  005BC0  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12518                           
 12519                           ; BSR set to: 1
 12520                           ;main.c: 675: putsUSART((char *) "+OK\r\n");
 12521  005BC2  0E7C               	movlw	high STR_9
 12522  005BC4  0100               	movlb	0	; () banked
 12523  005BC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12524  005BC8  0E6E               	movlw	low STR_9
 12525  005BCA  6F61               	movwf	?_putsUSART& (0+255),b
 12526  005BCC  EC33  F00D         	call	_putsUSART	;wreg free
 12527                           
 12528                           ;main.c: 676: }
 12529  005BD0  EF87  F035         	goto	l14390
 12530  005BD4                     l13894:
 12531                           
 12532                           ;main.c: 677: else {
 12533                           ;main.c: 678: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12534  005BD4  0E77               	movlw	high STR_37
 12535  005BD6  0100               	movlb	0	; () banked
 12536  005BD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12537  005BDA  0E0E               	movlw	low STR_37
 12538  005BDC  6F61               	movwf	?_putsUSART& (0+255),b
 12539  005BDE  EC33  F00D         	call	_putsUSART	;wreg free
 12540  005BE2  EF87  F035         	goto	l14390
 12541  005BE6                     l13896:
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;main.c: 682: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12545  005BE6  0E01               	movlw	high _cmdbuf
 12546  005BE8  0100               	movlb	0	; () banked
 12547  005BEA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12548  005BEC  0E2B               	movlw	low _cmdbuf
 12549  005BEE  6F6D               	movwf	?_stristr& (0+255),b
 12550  005BF0  0E7C               	movlw	high STR_38
 12551  005BF2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12552  005BF4  0EE7               	movlw	low STR_38
 12553  005BF6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12554  005BF8  EC59  F00F         	call	_stristr	;wreg free
 12555  005BFC  0E2B               	movlw	low _cmdbuf
 12556  005BFE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12557  005C00  0E01               	movlw	high _cmdbuf
 12558  005C02  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12559  005C04  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12560  005C06  E102               	bnz	u18465
 12561  005C08  516D               	movf	?_stristr& (0+255),w,b
 12562  005C0A  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12563  005C0C                     u18465:
 12564  005C0C  E116               	bnz	l13904
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;main.c: 683: if (receivePrintEventVerbose()) {
 12568  005C0E  EC4B  F023         	call	_receivePrintEventVerbose	;wreg free
 12569  005C12  0900               	iorlw	0
 12570  005C14  E009               	bz	l13902
 12571                           
 12572                           ;main.c: 684: putsUSART((char *) "+OK\r\n");
 12573  005C16  0E7C               	movlw	high STR_9
 12574  005C18  0100               	movlb	0	; () banked
 12575  005C1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12576  005C1C  0E6E               	movlw	low STR_9
 12577  005C1E  6F61               	movwf	?_putsUSART& (0+255),b
 12578  005C20  EC33  F00D         	call	_putsUSART	;wreg free
 12579                           
 12580                           ;main.c: 685: }
 12581  005C24  EF87  F035         	goto	l14390
 12582  005C28                     l13902:
 12583                           
 12584                           ;main.c: 686: else {
 12585                           ;main.c: 687: putsUSART((char *) "+OK - no events\r\n");
 12586  005C28  0E7A               	movlw	high STR_40
 12587  005C2A  0100               	movlb	0	; () banked
 12588  005C2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12589  005C2E  0EB5               	movlw	low STR_40
 12590  005C30  6F61               	movwf	?_putsUSART& (0+255),b
 12591  005C32  EC33  F00D         	call	_putsUSART	;wreg free
 12592  005C36  EF87  F035         	goto	l14390
 12593  005C3A                     l13904:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;main.c: 691: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12597  005C3A  0E01               	movlw	high _cmdbuf
 12598  005C3C  0100               	movlb	0	; () banked
 12599  005C3E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12600  005C40  0E2B               	movlw	low _cmdbuf
 12601  005C42  6F6D               	movwf	?_stristr& (0+255),b
 12602  005C44  0E7C               	movlw	high STR_41
 12603  005C46  6F70               	movwf	(?_stristr+3)& (0+255),b
 12604  005C48  0EBF               	movlw	low STR_41
 12605  005C4A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12606  005C4C  EC59  F00F         	call	_stristr	;wreg free
 12607  005C50  0E2B               	movlw	low _cmdbuf
 12608  005C52  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12609  005C54  0E01               	movlw	high _cmdbuf
 12610  005C56  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12611  005C58  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12612  005C5A  E102               	bnz	u18485
 12613  005C5C  516D               	movf	?_stristr& (0+255),w,b
 12614  005C5E  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12615  005C60                     u18485:
 12616  005C60  E10B               	bnz	l13910
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;main.c: 692: printStatistics();
 12620  005C62  ECCD  F01E         	call	_printStatistics	;wreg free
 12621                           
 12622                           ;main.c: 693: putsUSART((char *) "+OK\r\n");
 12623  005C66  0E7C               	movlw	high STR_9
 12624  005C68  0100               	movlb	0	; () banked
 12625  005C6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12626  005C6C  0E6E               	movlw	low STR_9
 12627  005C6E  6F61               	movwf	?_putsUSART& (0+255),b
 12628  005C70  EC33  F00D         	call	_putsUSART	;wreg free
 12629                           
 12630                           ;main.c: 694: }
 12631  005C74  EF87  F035         	goto	l14390
 12632  005C78                     l13910:
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;main.c: 696: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12636  005C78  0E01               	movlw	high _cmdbuf
 12637  005C7A  0100               	movlb	0	; () banked
 12638  005C7C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12639  005C7E  0E2B               	movlw	low _cmdbuf
 12640  005C80  6F6D               	movwf	?_stristr& (0+255),b
 12641  005C82  0E7C               	movlw	high STR_43
 12642  005C84  6F70               	movwf	(?_stristr+3)& (0+255),b
 12643  005C86  0ED5               	movlw	low STR_43
 12644  005C88  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12645  005C8A  EC59  F00F         	call	_stristr	;wreg free
 12646  005C8E  0E2B               	movlw	low _cmdbuf
 12647  005C90  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12648  005C92  0E01               	movlw	high _cmdbuf
 12649  005C94  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12650  005C96  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12651  005C98  E102               	bnz	u18495
 12652  005C9A  516D               	movf	?_stristr& (0+255),w,b
 12653  005C9C  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12654  005C9E                     u18495:
 12655  005C9E  E10B               	bnz	l13916
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;main.c: 697: printErrors();
 12659  005CA0  EC90  F024         	call	_printErrors	;wreg free
 12660                           
 12661                           ;main.c: 698: putsUSART((char *) "+OK\r\n");
 12662  005CA4  0E7C               	movlw	high STR_9
 12663  005CA6  0100               	movlb	0	; () banked
 12664  005CA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12665  005CAA  0E6E               	movlw	low STR_9
 12666  005CAC  6F61               	movwf	?_putsUSART& (0+255),b
 12667  005CAE  EC33  F00D         	call	_putsUSART	;wreg free
 12668                           
 12669                           ;main.c: 699: }
 12670  005CB2  EF87  F035         	goto	l14390
 12671  005CB6                     l13916:
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;main.c: 701: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12675  005CB6  0E01               	movlw	high _cmdbuf
 12676  005CB8  0100               	movlb	0	; () banked
 12677  005CBA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12678  005CBC  0E2B               	movlw	low _cmdbuf
 12679  005CBE  6F6D               	movwf	?_stristr& (0+255),b
 12680  005CC0  0E7C               	movlw	high STR_45
 12681  005CC2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12682  005CC4  0EBA               	movlw	low STR_45
 12683  005CC6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12684  005CC8  EC59  F00F         	call	_stristr	;wreg free
 12685  005CCC  0E2B               	movlw	low _cmdbuf
 12686  005CCE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12687  005CD0  0E01               	movlw	high _cmdbuf
 12688  005CD2  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12689  005CD4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12690  005CD6  E102               	bnz	u18505
 12691  005CD8  516D               	movf	?_stristr& (0+255),w,b
 12692  005CDA  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12693  005CDC                     u18505:
 12694  005CDC  E10B               	bnz	l13920
 12695                           
 12696                           ; BSR set to: 0
 12697                           ;main.c: 702: printHelp();
 12698  005CDE  EC98  F01F         	call	_printHelp	;wreg free
 12699                           
 12700                           ;main.c: 703: putsUSART((char *) "+OK\r\n");
 12701  005CE2  0E7C               	movlw	high STR_9
 12702  005CE4  0100               	movlb	0	; () banked
 12703  005CE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12704  005CE8  0E6E               	movlw	low STR_9
 12705  005CEA  6F61               	movwf	?_putsUSART& (0+255),b
 12706  005CEC  EC33  F00D         	call	_putsUSART	;wreg free
 12707                           
 12708                           ;main.c: 704: }
 12709  005CF0  EF87  F035         	goto	l14390
 12710  005CF4                     l13920:
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;main.c: 706: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12714  005CF4  0E01               	movlw	high _cmdbuf
 12715  005CF6  0100               	movlb	0	; () banked
 12716  005CF8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12717  005CFA  0E2B               	movlw	low _cmdbuf
 12718  005CFC  6F6D               	movwf	?_stristr& (0+255),b
 12719  005CFE  0E7C               	movlw	high STR_47
 12720  005D00  6F70               	movwf	(?_stristr+3)& (0+255),b
 12721  005D02  0E97               	movlw	low STR_47
 12722  005D04  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12723  005D06  EC59  F00F         	call	_stristr	;wreg free
 12724  005D0A  0E2B               	movlw	low _cmdbuf
 12725  005D0C  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12726  005D0E  0E01               	movlw	high _cmdbuf
 12727  005D10  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12728  005D12  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12729  005D14  E102               	bnz	u18515
 12730  005D16  516D               	movf	?_stristr& (0+255),w,b
 12731  005D18  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12732  005D1A                     u18515:
 12733  005D1A  E10B               	bnz	l13926
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;main.c: 707: findNodes();
 12737  005D1C  ECEC  F017         	call	_findNodes	;wreg free
 12738                           
 12739                           ;main.c: 708: putsUSART((char *) "+OK\r\n");
 12740  005D20  0E7C               	movlw	high STR_9
 12741  005D22  0100               	movlb	0	; () banked
 12742  005D24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12743  005D26  0E6E               	movlw	low STR_9
 12744  005D28  6F61               	movwf	?_putsUSART& (0+255),b
 12745  005D2A  EC33  F00D         	call	_putsUSART	;wreg free
 12746                           
 12747                           ;main.c: 709: }
 12748  005D2E  EF87  F035         	goto	l14390
 12749  005D32                     l13926:
 12750                           
 12751                           ; BSR set to: 0
 12752                           ;main.c: 712: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12753  005D32  0E01               	movlw	high _cmdbuf
 12754  005D34  0100               	movlb	0	; () banked
 12755  005D36  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12756  005D38  0E2B               	movlw	low _cmdbuf
 12757  005D3A  6F6D               	movwf	?_stristr& (0+255),b
 12758  005D3C  0E7C               	movlw	high STR_49
 12759  005D3E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12760  005D40  0E9C               	movlw	low STR_49
 12761  005D42  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12762  005D44  EC59  F00F         	call	_stristr	;wreg free
 12763  005D48  0E2B               	movlw	low _cmdbuf
 12764  005D4A  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12765  005D4C  0E01               	movlw	high _cmdbuf
 12766  005D4E  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12767  005D50  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12768  005D52  E102               	bnz	u18525
 12769  005D54  516D               	movf	?_stristr& (0+255),w,b
 12770  005D56  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12771  005D58                     u18525:
 12772  005D58  E001 D20C          	bnz	l14076
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;main.c: 714: uint8_t i;
 12776                           ;main.c: 715: uint8_t nodeid;
 12777                           ;main.c: 716: uint8_t page = 0;
 12778  005D5C  0102               	movlb	2	; () banked
 12779  005D5E  6BB4               	clrf	doModeVerbose@page& (0+255),b
 12780                           
 12781                           ; BSR set to: 2
 12782                           ;main.c: 717: uint8_t reg;
 12783                           ;main.c: 718: uint8_t value;
 12784                           ;main.c: 719: uint8_t count = 1;
 12785  005D60  0E01               	movlw	1
 12786  005D62  6FB1               	movwf	doModeVerbose@count& (0+255),b
 12787                           
 12788                           ; BSR set to: 2
 12789                           ;main.c: 721: strcpy(cmdbuf, cmdbuf + 5);
 12790  005D64  EC9E  F035         	call	PL4	;call to abstracted procedure
 12791  005D68  ECE5  F00A         	call	_strcpy	;wreg free
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;main.c: 722: char *p = strtok(cmdbuf, " ");
 12795  005D6C  0E01               	movlw	high _cmdbuf
 12796  005D6E  ECF7  F035         	call	PL32	;call to abstracted procedure
 12797  005D72  ECA1  F010         	call	_strtok	;wreg free
 12798  005D76  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1187
 12799  005D7A  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1187+1
 12800                           
 12801                           ; BSR set to: 0
 12802                           ;main.c: 723: if ((0) != p) {
 12803  005D7E  0102               	movlb	2	; () banked
 12804  005D80  51BB               	movf	(doModeVerbose@p_1187+1)& (0+255),w,b
 12805  005D82  11BA               	iorwf	doModeVerbose@p_1187& (0+255),w,b
 12806  005D84  E00A               	bz	l13940
 12807                           
 12808                           ; BSR set to: 2
 12809                           ;main.c: 724: nodeid = atoi(p);
 12810  005D86  C2BA  F066         	movff	doModeVerbose@p_1187,?_atoi
 12811  005D8A  C2BB  F067         	movff	doModeVerbose@p_1187+1,?_atoi+1
 12812  005D8E  ECE4  F018         	call	_atoi	;wreg free
 12813  005D92  5166               	movf	?_atoi& (0+255),w,b
 12814  005D94  0102               	movlb	2	; () banked
 12815  005D96  6FB2               	movwf	doModeVerbose@nodeid& (0+255),b
 12816                           
 12817                           ;main.c: 725: }
 12818  005D98  D009               	goto	l13944
 12819  005D9A                     l13940:
 12820                           
 12821                           ; BSR set to: 2
 12822                           ;main.c: 726: else {
 12823                           ;main.c: 727: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12824  005D9A  0E78               	movlw	high STR_51
 12825  005D9C  0100               	movlb	0	; () banked
 12826  005D9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12827  005DA0  0EEE               	movlw	low STR_51
 12828  005DA2  6F61               	movwf	?_putsUSART& (0+255),b
 12829  005DA4  EC33  F00D         	call	_putsUSART	;wreg free
 12830  005DA8  EF95  F035         	goto	l544
 12831  005DAC                     l13944:
 12832                           
 12833                           ; BSR set to: 2
 12834                           ;main.c: 729: }
 12835                           ;main.c: 731: if ((0) != (p = strtok((0), " "))) {
 12836  005DAC  ECE5  F035         	call	PL24	;call to abstracted procedure
 12837  005DB0  ECA1  F010         	call	_strtok	;wreg free
 12838  005DB4  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1187
 12839  005DB8  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1187+1
 12840  005DBC  0102               	movlb	2	; () banked
 12841  005DBE  51BB               	movf	(doModeVerbose@p_1187+1)& (0+255),w,b
 12842  005DC0  11BA               	iorwf	doModeVerbose@p_1187& (0+255),w,b
 12843  005DC2  E034               	bz	l13952
 12844                           
 12845                           ; BSR set to: 2
 12846                           ;main.c: 733: char *preg;
 12847                           ;main.c: 734: if (preg = strchr(p, ':')) {
 12848  005DC4  C2BA  F060         	movff	doModeVerbose@p_1187,?_strchr
 12849  005DC8  C2BB  F061         	movff	doModeVerbose@p_1187+1,?_strchr+1
 12850  005DCC  0100               	movlb	0	; () banked
 12851  005DCE  6B63               	clrf	(?_strchr+3)& (0+255),b
 12852  005DD0  0E3A               	movlw	58
 12853  005DD2  6F62               	movwf	(?_strchr+2)& (0+255),b
 12854  005DD4  EC47  F00E         	call	_strchr	;wreg free
 12855  005DD8  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12856  005DDC  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12857  005DE0  0102               	movlb	2	; () banked
 12858  005DE2  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12859  005DE4  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12860  005DE6  E018               	bz	l13950
 12861                           
 12862                           ; BSR set to: 2
 12863                           ;main.c: 735: page = atoi(p);
 12864  005DE8  C2BA  F066         	movff	doModeVerbose@p_1187,?_atoi
 12865  005DEC  C2BB  F067         	movff	doModeVerbose@p_1187+1,?_atoi+1
 12866  005DF0  ECE4  F018         	call	_atoi	;wreg free
 12867  005DF4  5166               	movf	?_atoi& (0+255),w,b
 12868  005DF6  0102               	movlb	2	; () banked
 12869  005DF8  6FB4               	movwf	doModeVerbose@page& (0+255),b
 12870                           
 12871                           ;main.c: 736: reg = atoi(preg + 1);
 12872  005DFA  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12873  005DFC  0100               	movlb	0	; () banked
 12874  005DFE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12875  005E00  0E00               	movlw	0
 12876  005E02  0102               	movlb	2	; () banked
 12877  005E04  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12878  005E06  0100               	movlb	0	; () banked
 12879  005E08  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12880  005E0A  C0CA  F066         	movff	??_doModeVerbose,?_atoi
 12881  005E0E  C0CB  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12882  005E12  ECE4  F018         	call	_atoi	;wreg free
 12883  005E16  D006               	goto	L6
 12884  005E18                     l13950:
 12885                           
 12886                           ; BSR set to: 2
 12887                           ;main.c: 738: else {
 12888                           ;main.c: 739: reg = atoi(p);
 12889  005E18  C2BA  F066         	movff	doModeVerbose@p_1187,?_atoi
 12890  005E1C  C2BB  F067         	movff	doModeVerbose@p_1187+1,?_atoi+1
 12891  005E20  ECE4  F018         	call	_atoi	;wreg free
 12892  005E24                     L6:
 12893  005E24  5166               	movf	?_atoi& (0+255),w,b
 12894  005E26  0102               	movlb	2	; () banked
 12895  005E28  6FB5               	movwf	doModeVerbose@reg& (0+255),b
 12896  005E2A  D009               	goto	l13956
 12897  005E2C                     l13952:
 12898                           
 12899                           ; BSR set to: 2
 12900                           ;main.c: 743: else {
 12901                           ;main.c: 744: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12902  005E2C  0E77               	movlw	high STR_53
 12903  005E2E  0100               	movlb	0	; () banked
 12904  005E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12905  005E32  0E50               	movlw	low STR_53
 12906  005E34  6F61               	movwf	?_putsUSART& (0+255),b
 12907  005E36  EC33  F00D         	call	_putsUSART	;wreg free
 12908  005E3A  EF95  F035         	goto	l544
 12909  005E3E                     l13956:
 12910                           
 12911                           ; BSR set to: 2
 12912                           ;main.c: 746: }
 12913                           ;main.c: 749: if ((0) != (p = strtok((0), " "))) {
 12914  005E3E  ECE5  F035         	call	PL24	;call to abstracted procedure
 12915  005E42  ECA1  F010         	call	_strtok	;wreg free
 12916  005E46  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1187
 12917  005E4A  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1187+1
 12918  005E4E  0102               	movlb	2	; () banked
 12919  005E50  51BB               	movf	(doModeVerbose@p_1187+1)& (0+255),w,b
 12920  005E52  11BA               	iorwf	doModeVerbose@p_1187& (0+255),w,b
 12921  005E54  E00D               	bz	l549
 12922                           
 12923                           ; BSR set to: 2
 12924                           ;main.c: 750: count = atoi(p);
 12925  005E56  C2BA  F066         	movff	doModeVerbose@p_1187,?_atoi
 12926  005E5A  C2BB  F067         	movff	doModeVerbose@p_1187+1,?_atoi+1
 12927  005E5E  ECE4  F018         	call	_atoi	;wreg free
 12928  005E62  5166               	movf	?_atoi& (0+255),w,b
 12929  005E64  0102               	movlb	2	; () banked
 12930  005E66  6FB1               	movwf	doModeVerbose@count& (0+255),b
 12931                           
 12932                           ; BSR set to: 2
 12933                           ;main.c: 751: if (0 == count) count = 1;
 12934  005E68  67B1               	tstfsz	doModeVerbose@count& (0+255),b
 12935  005E6A  D002               	goto	l549
 12936                           
 12937                           ; BSR set to: 2
 12938  005E6C  0E01               	movlw	1
 12939  005E6E  6FB1               	movwf	doModeVerbose@count& (0+255),b
 12940  005E70                     l549:
 12941                           
 12942                           ; BSR set to: 2
 12943                           ;main.c: 752: }
 12944                           ;main.c: 754: BOOL rv = 1;
 12945  005E70  0E01               	movlw	1
 12946  005E72  6FA6               	movwf	doModeVerbose@rv& (0+255),b
 12947                           
 12948                           ; BSR set to: 2
 12949                           ;main.c: 755: for (i = 0; i < count; i++) {
 12950  005E74  6BB8               	clrf	doModeVerbose@i_1181& (0+255),b
 12951  005E76  D166               	goto	l14068
 12952  005E78                     l13966:
 12953                           
 12954                           ; BSR set to: 2
 12955                           ;main.c: 757: if (readRegisterExtended(nodeid,
 12956                           ;main.c: 758: page,
 12957                           ;main.c: 759: (reg + i) & 0xff,
 12958                           ;main.c: 760: rwtimeout,
 12959                           ;main.c: 761: &value)) {
 12960  005E78  0100               	movlb	0	; () banked
 12961  005E7A  C2B4  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12962  005E7E  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12963  005E80  0102               	movlb	2	; () banked
 12964  005E82  51B5               	movf	doModeVerbose@reg& (0+255),w,b
 12965  005E84  25B8               	addwf	doModeVerbose@i_1181& (0+255),w,b
 12966  005E86  0100               	movlb	0	; () banked
 12967  005E88  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12968  005E8A  C035  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12969  005E8E  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12970  005E90  0E02               	movlw	high doModeVerbose@value
 12971  005E92  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12972  005E94  0EB9               	movlw	low doModeVerbose@value
 12973  005E96  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12974  005E98  0102               	movlb	2	; () banked
 12975  005E9A  51B2               	movf	doModeVerbose@nodeid& (0+255),w,b
 12976  005E9C  EC1D  F016         	call	_readRegisterExtended
 12977  005EA0  0900               	iorlw	0
 12978  005EA2  E101 D0CC          	bz	l553
 12979                           
 12980                           ;main.c: 762: putsUSART((char *) "+OK - nodeid=");
 12981  005EA6  0E7B               	movlw	high STR_55
 12982  005EA8  0100               	movlb	0	; () banked
 12983  005EAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12984  005EAC  0E49               	movlw	low STR_55
 12985  005EAE  6F61               	movwf	?_putsUSART& (0+255),b
 12986  005EB0  EC33  F00D         	call	_putsUSART	;wreg free
 12987                           
 12988                           ;main.c: 763: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 12989  005EB4  0100               	movlb	0	; () banked
 12990  005EB6  67E5               	tstfsz	_bHex& (0+255),b
 12991  005EB8  D005               	goto	l13974
 12992                           
 12993                           ; BSR set to: 0
 12994  005EBA  0E7C               	movlw	high STR_57
 12995  005EBC  0102               	movlb	2	; () banked
 12996  005EBE  6F93               	movwf	(_doModeVerbose$1199+1)& (0+255),b
 12997  005EC0  0E74               	movlw	low STR_57
 12998  005EC2  D004               	goto	L7
 12999  005EC4                     l13974:
 13000                           
 13001                           ; BSR set to: 0
 13002  005EC4  0E7B               	movlw	high STR_56
 13003  005EC6  0102               	movlb	2	; () banked
 13004  005EC8  6F93               	movwf	(_doModeVerbose$1199+1)& (0+255),b
 13005  005ECA  0E79               	movlw	low STR_56
 13006  005ECC                     L7:
 13007  005ECC  6F92               	movwf	_doModeVerbose$1199& (0+255),b
 13008                           
 13009                           ; BSR set to: 2
 13010  005ECE  0E01               	movlw	high _wrkbuf
 13011  005ED0  0100               	movlb	0	; () banked
 13012  005ED2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13013  005ED4  0E7B               	movlw	low _wrkbuf
 13014  005ED6  6F76               	movwf	?_sprintf& (0+255),b
 13015  005ED8  C292  F078         	movff	_doModeVerbose$1199,?_sprintf+2
 13016  005EDC  C293  F079         	movff	_doModeVerbose$1199+1,?_sprintf+3
 13017  005EE0  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13018  005EE4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13019  005EE6  ECD7  F027         	call	_sprintf	;wreg free
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;main.c: 764: putsUSART(wrkbuf);
 13023  005EEA  0E01               	movlw	high _wrkbuf
 13024  005EEC  0100               	movlb	0	; () banked
 13025  005EEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13026  005EF0  0E7B               	movlw	low _wrkbuf
 13027  005EF2  6F61               	movwf	?_putsUSART& (0+255),b
 13028  005EF4  EC33  F00D         	call	_putsUSART	;wreg free
 13029                           
 13030                           ;main.c: 765: putsUSART((char *) "Value for reg ");
 13031  005EF8  0E7B               	movlw	high STR_58
 13032  005EFA  0100               	movlb	0	; () banked
 13033  005EFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13034  005EFE  0E2C               	movlw	low STR_58
 13035  005F00  6F61               	movwf	?_putsUSART& (0+255),b
 13036  005F02  EC33  F00D         	call	_putsUSART	;wreg free
 13037                           
 13038                           ;main.c: 766: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13039  005F06  0100               	movlb	0	; () banked
 13040  005F08  67E5               	tstfsz	_bHex& (0+255),b
 13041  005F0A  D005               	goto	l13986
 13042                           
 13043                           ; BSR set to: 0
 13044  005F0C  0E7C               	movlw	high STR_60
 13045  005F0E  0102               	movlb	2	; () banked
 13046  005F10  6F95               	movwf	(_doModeVerbose$1204+1)& (0+255),b
 13047  005F12  0EED               	movlw	low STR_60
 13048  005F14  D004               	goto	L8
 13049  005F16                     l13986:
 13050                           
 13051                           ; BSR set to: 0
 13052  005F16  0E7C               	movlw	high STR_59
 13053  005F18  0102               	movlb	2	; () banked
 13054  005F1A  6F95               	movwf	(_doModeVerbose$1204+1)& (0+255),b
 13055  005F1C  0E53               	movlw	low STR_59
 13056  005F1E                     L8:
 13057  005F1E  6F94               	movwf	_doModeVerbose$1204& (0+255),b
 13058                           
 13059                           ; BSR set to: 2
 13060  005F20  0E01               	movlw	high _wrkbuf
 13061  005F22  0100               	movlb	0	; () banked
 13062  005F24  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13063  005F26  0E7B               	movlw	low _wrkbuf
 13064  005F28  6F76               	movwf	?_sprintf& (0+255),b
 13065  005F2A  C294  F078         	movff	_doModeVerbose$1204,?_sprintf+2
 13066  005F2E  C295  F079         	movff	_doModeVerbose$1204+1,?_sprintf+3
 13067  005F32  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13068  005F36  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13069  005F38  ECD7  F027         	call	_sprintf	;wreg free
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;main.c: 767: putsUSART(wrkbuf);
 13073  005F3C  0E01               	movlw	high _wrkbuf
 13074  005F3E  0100               	movlb	0	; () banked
 13075  005F40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13076  005F42  0E7B               	movlw	low _wrkbuf
 13077  005F44  6F61               	movwf	?_putsUSART& (0+255),b
 13078  005F46  EC33  F00D         	call	_putsUSART	;wreg free
 13079                           
 13080                           ;main.c: 768: WriteUSART(':');
 13081  005F4A  0E3A               	movlw	58
 13082  005F4C  EC7E  F00A         	call	_WriteUSART
 13083  005F50                     l562:
 13084  005F50  A2AC               	btfss	4012,1,c	;volatile
 13085  005F52  D7FE               	goto	l562
 13086                           
 13087                           ;main.c: 770: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13088  005F54  0100               	movlb	0	; () banked
 13089  005F56  67E5               	tstfsz	_bHex& (0+255),b
 13090  005F58  D005               	goto	l13996
 13091                           
 13092                           ; BSR set to: 0
 13093  005F5A  0E7C               	movlw	high STR_60
 13094  005F5C  0102               	movlb	2	; () banked
 13095  005F5E  6F97               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 13096  005F60  0EED               	movlw	low STR_60
 13097  005F62  D004               	goto	L9
 13098  005F64                     l13996:
 13099                           
 13100                           ; BSR set to: 0
 13101  005F64  0E7C               	movlw	high STR_59
 13102  005F66  0102               	movlb	2	; () banked
 13103  005F68  6F97               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 13104  005F6A  0E53               	movlw	low STR_59
 13105  005F6C                     L9:
 13106  005F6C  6F96               	movwf	_doModeVerbose$1208& (0+255),b
 13107                           
 13108                           ; BSR set to: 2
 13109  005F6E  0E01               	movlw	high _wrkbuf
 13110  005F70  0100               	movlb	0	; () banked
 13111  005F72  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13112  005F74  0E7B               	movlw	low _wrkbuf
 13113  005F76  6F76               	movwf	?_sprintf& (0+255),b
 13114  005F78  C296  F078         	movff	_doModeVerbose$1208,?_sprintf+2
 13115  005F7C  C297  F079         	movff	_doModeVerbose$1208+1,?_sprintf+3
 13116  005F80  EC00  F036         	call	PL36	;call to abstracted procedure
 13117  005F84  ECD7  F027         	call	_sprintf	;wreg free
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;main.c: 771: putsUSART(wrkbuf);
 13121  005F88  0E01               	movlw	high _wrkbuf
 13122  005F8A  0100               	movlb	0	; () banked
 13123  005F8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13124  005F8E  0E7B               	movlw	low _wrkbuf
 13125  005F90  6F61               	movwf	?_putsUSART& (0+255),b
 13126  005F92  EC33  F00D         	call	_putsUSART	;wreg free
 13127                           
 13128                           ;main.c: 772: putsUSART((char *) " = ");
 13129  005F96  0E7B               	movlw	high (STR_257+4)
 13130  005F98  0100               	movlb	0	; () banked
 13131  005F9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13132  005F9C  0ED8               	movlw	low (STR_257+4)
 13133  005F9E  6F61               	movwf	?_putsUSART& (0+255),b
 13134  005FA0  EC33  F00D         	call	_putsUSART	;wreg free
 13135                           
 13136                           ;main.c: 773: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13137  005FA4  0100               	movlb	0	; () banked
 13138  005FA6  67E5               	tstfsz	_bHex& (0+255),b
 13139  005FA8  D005               	goto	l14008
 13140                           
 13141                           ; BSR set to: 0
 13142  005FAA  0E7C               	movlw	high STR_60
 13143  005FAC  0102               	movlb	2	; () banked
 13144  005FAE  6F99               	movwf	(_doModeVerbose$1213+1)& (0+255),b
 13145  005FB0  0EED               	movlw	low STR_60
 13146  005FB2  D004               	goto	L10
 13147  005FB4                     l14008:
 13148                           
 13149                           ; BSR set to: 0
 13150  005FB4  0E7C               	movlw	high STR_59
 13151  005FB6  0102               	movlb	2	; () banked
 13152  005FB8  6F99               	movwf	(_doModeVerbose$1213+1)& (0+255),b
 13153  005FBA  0E53               	movlw	low STR_59
 13154  005FBC                     L10:
 13155  005FBC  6F98               	movwf	_doModeVerbose$1213& (0+255),b
 13156                           
 13157                           ; BSR set to: 2
 13158  005FBE  0E01               	movlw	high _wrkbuf
 13159  005FC0  0100               	movlb	0	; () banked
 13160  005FC2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13161  005FC4  0E7B               	movlw	low _wrkbuf
 13162  005FC6  6F76               	movwf	?_sprintf& (0+255),b
 13163  005FC8  C298  F078         	movff	_doModeVerbose$1213,?_sprintf+2
 13164  005FCC  C299  F079         	movff	_doModeVerbose$1213+1,?_sprintf+3
 13165  005FD0  C2B9  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13166  005FD4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13167  005FD6  ECD7  F027         	call	_sprintf	;wreg free
 13168                           
 13169                           ; BSR set to: 0
 13170                           ;main.c: 774: putsUSART(wrkbuf);
 13171  005FDA  0E01               	movlw	high _wrkbuf
 13172  005FDC  0100               	movlb	0	; () banked
 13173  005FDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13174  005FE0  0E7B               	movlw	low _wrkbuf
 13175  005FE2  6F61               	movwf	?_putsUSART& (0+255),b
 13176  005FE4  EC33  F00D         	call	_putsUSART	;wreg free
 13177  005FE8                     l573:
 13178  005FE8  A2AC               	btfss	4012,1,c	;volatile
 13179  005FEA  D7FE               	goto	l573
 13180                           
 13181                           ;main.c: 776: putsUSART("\t\'");
 13182  005FEC  0E7C               	movlw	high STR_66
 13183  005FEE  0100               	movlb	0	; () banked
 13184  005FF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13185  005FF2  0EE1               	movlw	low STR_66
 13186  005FF4  6F61               	movwf	?_putsUSART& (0+255),b
 13187  005FF6  EC33  F00D         	call	_putsUSART	;wreg free
 13188                           
 13189                           ;main.c: 777: if ((value > 32) && (value < 127)) {
 13190  005FFA  0E20               	movlw	32
 13191  005FFC  0102               	movlb	2	; () banked
 13192  005FFE  65B9               	cpfsgt	doModeVerbose@value& (0+255),b
 13193  006000  D007               	goto	l14022
 13194                           
 13195                           ; BSR set to: 2
 13196  006002  0E7F               	movlw	127
 13197  006004  61B9               	cpfslt	doModeVerbose@value& (0+255),b
 13198  006006  D004               	goto	l14022
 13199                           
 13200                           ; BSR set to: 2
 13201                           ;main.c: 778: WriteUSART(value);
 13202  006008  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13203  00600A  EC7E  F00A         	call	_WriteUSART
 13204                           
 13205                           ;main.c: 779: }
 13206  00600E  D003               	goto	l578
 13207  006010                     l14022:
 13208                           
 13209                           ; BSR set to: 2
 13210                           ;main.c: 780: else {
 13211                           ;main.c: 781: WriteUSART('.');
 13212  006010  0E2E               	movlw	46
 13213  006012  EC7E  F00A         	call	_WriteUSART
 13214  006016                     l578:
 13215  006016  A2AC               	btfss	4012,1,c	;volatile
 13216  006018  D7FE               	goto	l578
 13217                           
 13218                           ;main.c: 784: putsUSART("\' \t");
 13219  00601A  0E7C               	movlw	high STR_67
 13220  00601C  0100               	movlb	0	; () banked
 13221  00601E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13222  006020  0EC9               	movlw	low STR_67
 13223  006022  6F61               	movwf	?_putsUSART& (0+255),b
 13224  006024  EC33  F00D         	call	_putsUSART	;wreg free
 13225                           
 13226                           ;main.c: 785: printBinary(value);
 13227  006028  0102               	movlb	2	; () banked
 13228  00602A  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13229  00602C  ECE7  F00C         	call	_printBinary
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;main.c: 786: putsUSART((char *) "\r\n");
 13233  006030  0E71               	movlw	high (STR_211+50)
 13234  006032  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13235  006034  0E80               	movlw	low (STR_211+50)
 13236  006036  6F61               	movwf	?_putsUSART& (0+255),b
 13237  006038  EC33  F00D         	call	_putsUSART	;wreg free
 13238                           
 13239                           ;main.c: 787: }
 13240  00603C  D081               	goto	l14066
 13241  00603E                     l553:
 13242                           
 13243                           ;main.c: 788: else {
 13244                           ;main.c: 789: rv = 0;
 13245  00603E  0102               	movlb	2	; () banked
 13246  006040  6BA6               	clrf	doModeVerbose@rv& (0+255),b
 13247                           
 13248                           ; BSR set to: 2
 13249                           ;main.c: 790: putsUSART((char *) "-ERROR - nodeid=");
 13250  006042  0E7B               	movlw	high STR_69
 13251  006044  0100               	movlb	0	; () banked
 13252  006046  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13253  006048  0E0C               	movlw	low STR_69
 13254  00604A  6F61               	movwf	?_putsUSART& (0+255),b
 13255  00604C  EC33  F00D         	call	_putsUSART	;wreg free
 13256                           
 13257                           ;main.c: 791: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13258  006050  0100               	movlb	0	; () banked
 13259  006052  67E5               	tstfsz	_bHex& (0+255),b
 13260  006054  D005               	goto	l14036
 13261                           
 13262                           ; BSR set to: 0
 13263  006056  0E7C               	movlw	high STR_57
 13264  006058  0102               	movlb	2	; () banked
 13265  00605A  6F9B               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13266  00605C  0E74               	movlw	low STR_57
 13267  00605E  D004               	goto	L11
 13268  006060                     l14036:
 13269                           
 13270                           ; BSR set to: 0
 13271  006060  0E7B               	movlw	high STR_56
 13272  006062  0102               	movlb	2	; () banked
 13273  006064  6F9B               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13274  006066  0E79               	movlw	low STR_56
 13275  006068                     L11:
 13276  006068  6F9A               	movwf	_doModeVerbose$1221& (0+255),b
 13277                           
 13278                           ; BSR set to: 2
 13279  00606A  0E01               	movlw	high _wrkbuf
 13280  00606C  0100               	movlb	0	; () banked
 13281  00606E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13282  006070  0E7B               	movlw	low _wrkbuf
 13283  006072  6F76               	movwf	?_sprintf& (0+255),b
 13284  006074  C29A  F078         	movff	_doModeVerbose$1221,?_sprintf+2
 13285  006078  C29B  F079         	movff	_doModeVerbose$1221+1,?_sprintf+3
 13286  00607C  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13287  006080  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13288  006082  ECD7  F027         	call	_sprintf	;wreg free
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;main.c: 792: putsUSART(wrkbuf);
 13292  006086  0E01               	movlw	high _wrkbuf
 13293  006088  0100               	movlb	0	; () banked
 13294  00608A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13295  00608C  0E7B               	movlw	low _wrkbuf
 13296  00608E  6F61               	movwf	?_putsUSART& (0+255),b
 13297  006090  EC33  F00D         	call	_putsUSART	;wreg free
 13298                           
 13299                           ;main.c: 793: putsUSART((char *) "Unable to read register ");
 13300  006094  0E78               	movlw	high STR_72
 13301  006096  0100               	movlb	0	; () banked
 13302  006098  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13303  00609A  0EA5               	movlw	low STR_72
 13304  00609C  6F61               	movwf	?_putsUSART& (0+255),b
 13305  00609E  EC33  F00D         	call	_putsUSART	;wreg free
 13306  0060A2                     l586:
 13307  0060A2  A2AC               	btfss	4012,1,c	;volatile
 13308  0060A4  D7FE               	goto	l586
 13309                           
 13310                           ;main.c: 795: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13311  0060A6  0100               	movlb	0	; () banked
 13312  0060A8  67E5               	tstfsz	_bHex& (0+255),b
 13313  0060AA  D005               	goto	l14046
 13314                           
 13315                           ; BSR set to: 0
 13316  0060AC  0E7C               	movlw	high STR_60
 13317  0060AE  0102               	movlb	2	; () banked
 13318  0060B0  6F9D               	movwf	(_doModeVerbose$1226+1)& (0+255),b
 13319  0060B2  0EED               	movlw	low STR_60
 13320  0060B4  D004               	goto	L12
 13321  0060B6                     l14046:
 13322                           
 13323                           ; BSR set to: 0
 13324  0060B6  0E7C               	movlw	high STR_59
 13325  0060B8  0102               	movlb	2	; () banked
 13326  0060BA  6F9D               	movwf	(_doModeVerbose$1226+1)& (0+255),b
 13327  0060BC  0E53               	movlw	low STR_59
 13328  0060BE                     L12:
 13329  0060BE  6F9C               	movwf	_doModeVerbose$1226& (0+255),b
 13330                           
 13331                           ; BSR set to: 2
 13332  0060C0  0E01               	movlw	high _wrkbuf
 13333  0060C2  0100               	movlb	0	; () banked
 13334  0060C4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13335  0060C6  0E7B               	movlw	low _wrkbuf
 13336  0060C8  6F76               	movwf	?_sprintf& (0+255),b
 13337  0060CA  C29C  F078         	movff	_doModeVerbose$1226,?_sprintf+2
 13338  0060CE  C29D  F079         	movff	_doModeVerbose$1226+1,?_sprintf+3
 13339  0060D2  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13340  0060D6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13341  0060D8  ECD7  F027         	call	_sprintf	;wreg free
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;main.c: 796: putsUSART(wrkbuf);
 13345  0060DC  0E01               	movlw	high _wrkbuf
 13346  0060DE  0100               	movlb	0	; () banked
 13347  0060E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13348  0060E2  0E7B               	movlw	low _wrkbuf
 13349  0060E4  6F61               	movwf	?_putsUSART& (0+255),b
 13350  0060E6  EC33  F00D         	call	_putsUSART	;wreg free
 13351                           
 13352                           ;main.c: 797: WriteUSART(':');
 13353  0060EA  0E3A               	movlw	58
 13354  0060EC  EC7E  F00A         	call	_WriteUSART
 13355                           
 13356                           ;main.c: 798: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13357  0060F0  0100               	movlb	0	; () banked
 13358  0060F2  67E5               	tstfsz	_bHex& (0+255),b
 13359  0060F4  D005               	goto	l14058
 13360                           
 13361                           ; BSR set to: 0
 13362  0060F6  0E7C               	movlw	high STR_60
 13363  0060F8  0102               	movlb	2	; () banked
 13364  0060FA  6F9F               	movwf	(_doModeVerbose$1230+1)& (0+255),b
 13365  0060FC  0EED               	movlw	low STR_60
 13366  0060FE  D004               	goto	L13
 13367  006100                     l14058:
 13368                           
 13369                           ; BSR set to: 0
 13370  006100  0E7C               	movlw	high STR_59
 13371  006102  0102               	movlb	2	; () banked
 13372  006104  6F9F               	movwf	(_doModeVerbose$1230+1)& (0+255),b
 13373  006106  0E53               	movlw	low STR_59
 13374  006108                     L13:
 13375  006108  6F9E               	movwf	_doModeVerbose$1230& (0+255),b
 13376                           
 13377                           ; BSR set to: 2
 13378  00610A  0E01               	movlw	high _wrkbuf
 13379  00610C  0100               	movlb	0	; () banked
 13380  00610E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13381  006110  0E7B               	movlw	low _wrkbuf
 13382  006112  6F76               	movwf	?_sprintf& (0+255),b
 13383  006114  C29E  F078         	movff	_doModeVerbose$1230,?_sprintf+2
 13384  006118  C29F  F079         	movff	_doModeVerbose$1230+1,?_sprintf+3
 13385  00611C  EC00  F036         	call	PL36	;call to abstracted procedure
 13386  006120  ECD7  F027         	call	_sprintf	;wreg free
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;main.c: 799: putsUSART(wrkbuf);
 13390  006124  0E01               	movlw	high _wrkbuf
 13391  006126  0100               	movlb	0	; () banked
 13392  006128  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13393  00612A  0E7B               	movlw	low _wrkbuf
 13394  00612C  6F61               	movwf	?_putsUSART& (0+255),b
 13395  00612E  EC33  F00D         	call	_putsUSART	;wreg free
 13396                           
 13397                           ;main.c: 801: putsUSART((char *) "\r\n");
 13398  006132  0E71               	movlw	high (STR_211+50)
 13399  006134  0100               	movlb	0	; () banked
 13400  006136  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13401  006138  0E80               	movlw	low (STR_211+50)
 13402  00613A  6F61               	movwf	?_putsUSART& (0+255),b
 13403  00613C  EC33  F00D         	call	_putsUSART	;wreg free
 13404  006140                     l14066:
 13405  006140  0102               	movlb	2	; () banked
 13406  006142  2BB8               	incf	doModeVerbose@i_1181& (0+255),f,b
 13407  006144                     l14068:
 13408                           
 13409                           ; BSR set to: 2
 13410  006144  51B1               	movf	doModeVerbose@count& (0+255),w,b
 13411  006146  5DB8               	subwf	doModeVerbose@i_1181& (0+255),w,b
 13412  006148  E201 D696          	bnc	l13966
 13413                           
 13414                           ; BSR set to: 2
 13415                           ;main.c: 802: }
 13416                           ;main.c: 803: }
 13417                           ;main.c: 805: if (rv) {
 13418  00614C  51A6               	movf	doModeVerbose@rv& (0+255),w,b
 13419  00614E  E009               	bz	l14074
 13420                           
 13421                           ; BSR set to: 2
 13422                           ;main.c: 806: putsUSART((char *) "+OK\r\n");
 13423  006150  0E7C               	movlw	high STR_9
 13424  006152  0100               	movlb	0	; () banked
 13425  006154  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13426  006156  0E6E               	movlw	low STR_9
 13427  006158  6F61               	movwf	?_putsUSART& (0+255),b
 13428  00615A  EC33  F00D         	call	_putsUSART	;wreg free
 13429                           
 13430                           ;main.c: 807: }
 13431  00615E  EF87  F035         	goto	l14390
 13432  006162                     l14074:
 13433                           
 13434                           ; BSR set to: 2
 13435                           ;main.c: 808: else {
 13436                           ;main.c: 809: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13437  006162  0E71               	movlw	high STR_79
 13438  006164  0100               	movlb	0	; () banked
 13439  006166  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13440  006168  0E18               	movlw	low STR_79
 13441  00616A  6F61               	movwf	?_putsUSART& (0+255),b
 13442  00616C  EC33  F00D         	call	_putsUSART	;wreg free
 13443  006170  EF87  F035         	goto	l14390
 13444  006174                     l14076:
 13445                           
 13446                           ; BSR set to: 0
 13447                           ;main.c: 815: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13448  006174  0E01               	movlw	high _cmdbuf
 13449  006176  0100               	movlb	0	; () banked
 13450  006178  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13451  00617A  0E2B               	movlw	low _cmdbuf
 13452  00617C  6F6D               	movwf	?_stristr& (0+255),b
 13453  00617E  0E7C               	movlw	high STR_80
 13454  006180  6F70               	movwf	(?_stristr+3)& (0+255),b
 13455  006182  0EA1               	movlw	low STR_80
 13456  006184  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13457  006186  EC59  F00F         	call	_stristr	;wreg free
 13458  00618A  0E2B               	movlw	low _cmdbuf
 13459  00618C  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13460  00618E  0E01               	movlw	high _cmdbuf
 13461  006190  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13462  006192  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13463  006194  E102               	bnz	u18745
 13464  006196  516D               	movf	?_stristr& (0+255),w,b
 13465  006198  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13466  00619A                     u18745:
 13467  00619A  E001 D0FC          	bnz	l14136
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;main.c: 817: uint8_t nodeid;
 13471                           ;main.c: 818: uint8_t page = 0;
 13472  00619E  0102               	movlb	2	; () banked
 13473  0061A0  6BA7               	clrf	doModeVerbose@page_1236& (0+255),b
 13474                           
 13475                           ; BSR set to: 2
 13476                           ;main.c: 819: uint8_t reg;
 13477                           ;main.c: 820: uint8_t value;
 13478                           ;main.c: 822: strcpy(cmdbuf, cmdbuf + 5);
 13479  0061A2  EC9E  F035         	call	PL4	;call to abstracted procedure
 13480  0061A6  ECE5  F00A         	call	_strcpy	;wreg free
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;main.c: 823: char *p = strtok(cmdbuf, " ");
 13484  0061AA  0E01               	movlw	high _cmdbuf
 13485  0061AC  ECF7  F035         	call	PL32	;call to abstracted procedure
 13486  0061B0  ECA1  F010         	call	_strtok	;wreg free
 13487  0061B4  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1239
 13488  0061B8  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;main.c: 824: if ((0) != p) {
 13492  0061BC  0102               	movlb	2	; () banked
 13493  0061BE  51BD               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13494  0061C0  11BC               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13495  0061C2  E00A               	bz	l14088
 13496                           
 13497                           ; BSR set to: 2
 13498                           ;main.c: 825: nodeid = atoi(p);
 13499  0061C4  C2BC  F066         	movff	doModeVerbose@p_1239,?_atoi
 13500  0061C8  C2BD  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13501  0061CC  ECE4  F018         	call	_atoi	;wreg free
 13502  0061D0  5166               	movf	?_atoi& (0+255),w,b
 13503  0061D2  0102               	movlb	2	; () banked
 13504  0061D4  6FB3               	movwf	doModeVerbose@nodeid_1235& (0+255),b
 13505                           
 13506                           ;main.c: 826: }
 13507  0061D6  D009               	goto	l14092
 13508  0061D8                     l14088:
 13509                           
 13510                           ; BSR set to: 2
 13511                           ;main.c: 827: else {
 13512                           ;main.c: 828: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13513  0061D8  0E78               	movlw	high STR_51
 13514  0061DA  0100               	movlb	0	; () banked
 13515  0061DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13516  0061DE  0EEE               	movlw	low STR_51
 13517  0061E0  6F61               	movwf	?_putsUSART& (0+255),b
 13518  0061E2  EC33  F00D         	call	_putsUSART	;wreg free
 13519  0061E6  EF95  F035         	goto	l544
 13520  0061EA                     l14092:
 13521                           
 13522                           ; BSR set to: 2
 13523                           ;main.c: 830: }
 13524                           ;main.c: 832: if ( (0) != ( p = strtok((0), " ") ) ) {
 13525  0061EA  ECE5  F035         	call	PL24	;call to abstracted procedure
 13526  0061EE  ECA1  F010         	call	_strtok	;wreg free
 13527  0061F2  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1239
 13528  0061F6  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13529  0061FA  0102               	movlb	2	; () banked
 13530  0061FC  51BD               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13531  0061FE  11BC               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13532  006200  E034               	bz	l14100
 13533                           
 13534                           ; BSR set to: 2
 13535                           ;main.c: 834: char *preg;
 13536                           ;main.c: 835: if (preg = strchr(p, ':')) {
 13537  006202  C2BC  F060         	movff	doModeVerbose@p_1239,?_strchr
 13538  006206  C2BD  F061         	movff	doModeVerbose@p_1239+1,?_strchr+1
 13539  00620A  0100               	movlb	0	; () banked
 13540  00620C  6B63               	clrf	(?_strchr+3)& (0+255),b
 13541  00620E  0E3A               	movlw	58
 13542  006210  6F62               	movwf	(?_strchr+2)& (0+255),b
 13543  006212  EC47  F00E         	call	_strchr	;wreg free
 13544  006216  C060  F286         	movff	?_strchr,doModeVerbose@preg_1243
 13545  00621A  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1243+1
 13546  00621E  0102               	movlb	2	; () banked
 13547  006220  5187               	movf	(doModeVerbose@preg_1243+1)& (0+255),w,b
 13548  006222  1186               	iorwf	doModeVerbose@preg_1243& (0+255),w,b
 13549  006224  E018               	bz	l14098
 13550                           
 13551                           ; BSR set to: 2
 13552                           ;main.c: 836: page = atoi(p);
 13553  006226  C2BC  F066         	movff	doModeVerbose@p_1239,?_atoi
 13554  00622A  C2BD  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13555  00622E  ECE4  F018         	call	_atoi	;wreg free
 13556  006232  5166               	movf	?_atoi& (0+255),w,b
 13557  006234  0102               	movlb	2	; () banked
 13558  006236  6FA7               	movwf	doModeVerbose@page_1236& (0+255),b
 13559                           
 13560                           ;main.c: 837: reg = atoi(preg + 1);
 13561  006238  2986               	incf	doModeVerbose@preg_1243& (0+255),w,b
 13562  00623A  0100               	movlb	0	; () banked
 13563  00623C  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13564  00623E  0E00               	movlw	0
 13565  006240  0102               	movlb	2	; () banked
 13566  006242  2187               	addwfc	(doModeVerbose@preg_1243+1)& (0+255),w,b
 13567  006244  0100               	movlb	0	; () banked
 13568  006246  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13569  006248  C0CA  F066         	movff	??_doModeVerbose,?_atoi
 13570  00624C  C0CB  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13571  006250  ECE4  F018         	call	_atoi	;wreg free
 13572  006254  D006               	goto	L14
 13573  006256                     l14098:
 13574                           
 13575                           ; BSR set to: 2
 13576                           ;main.c: 839: else {
 13577                           ;main.c: 840: reg = atoi(p);
 13578  006256  C2BC  F066         	movff	doModeVerbose@p_1239,?_atoi
 13579  00625A  C2BD  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13580  00625E  ECE4  F018         	call	_atoi	;wreg free
 13581  006262                     L14:
 13582  006262  5166               	movf	?_atoi& (0+255),w,b
 13583  006264  0102               	movlb	2	; () banked
 13584  006266  6FA8               	movwf	doModeVerbose@reg_1237& (0+255),b
 13585  006268  D009               	goto	l14104
 13586  00626A                     l14100:
 13587                           
 13588                           ; BSR set to: 2
 13589                           ;main.c: 844: else {
 13590                           ;main.c: 845: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13591  00626A  0E77               	movlw	high STR_53
 13592  00626C  0100               	movlb	0	; () banked
 13593  00626E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13594  006270  0E50               	movlw	low STR_53
 13595  006272  6F61               	movwf	?_putsUSART& (0+255),b
 13596  006274  EC33  F00D         	call	_putsUSART	;wreg free
 13597  006278  EF95  F035         	goto	l544
 13598  00627C                     l14104:
 13599                           
 13600                           ; BSR set to: 2
 13601                           ;main.c: 847: }
 13602                           ;main.c: 850: if ((0) != (p = strtok((0), " "))) {
 13603  00627C  ECE5  F035         	call	PL24	;call to abstracted procedure
 13604  006280  ECA1  F010         	call	_strtok	;wreg free
 13605  006284  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1239
 13606  006288  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13607  00628C  0102               	movlb	2	; () banked
 13608  00628E  51BD               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13609  006290  11BC               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13610  006292  E00A               	bz	l14108
 13611                           
 13612                           ; BSR set to: 2
 13613                           ;main.c: 851: value = atoi(p);
 13614  006294  C2BC  F066         	movff	doModeVerbose@p_1239,?_atoi
 13615  006298  C2BD  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13616  00629C  ECE4  F018         	call	_atoi	;wreg free
 13617  0062A0  5166               	movf	?_atoi& (0+255),w,b
 13618  0062A2  0102               	movlb	2	; () banked
 13619  0062A4  6FB0               	movwf	doModeVerbose@value_1238& (0+255),b
 13620                           
 13621                           ;main.c: 852: }
 13622  0062A6  D009               	goto	l14112
 13623  0062A8                     l14108:
 13624                           
 13625                           ; BSR set to: 2
 13626                           ;main.c: 853: else {
 13627                           ;main.c: 854: putsUSART((char *) "-ERROR - Need a value\r\n");
 13628  0062A8  0E79               	movlw	high STR_86
 13629  0062AA  0100               	movlb	0	; () banked
 13630  0062AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13631  0062AE  0E1E               	movlw	low STR_86
 13632  0062B0  6F61               	movwf	?_putsUSART& (0+255),b
 13633  0062B2  EC33  F00D         	call	_putsUSART	;wreg free
 13634  0062B6  EF95  F035         	goto	l544
 13635  0062BA                     l14112:
 13636                           
 13637                           ; BSR set to: 2
 13638                           ;main.c: 856: }
 13639                           ;main.c: 858: if (writeRegisterExtended(nodeid,
 13640                           ;main.c: 859: page,
 13641                           ;main.c: 860: reg,
 13642                           ;main.c: 861: rwtimeout,
 13643                           ;main.c: 862: &value)) {
 13644  0062BA  0100               	movlb	0	; () banked
 13645  0062BC  C2A7  F0B6         	movff	doModeVerbose@page_1236,?_writeRegisterExtended
 13646  0062C0  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13647  0062C2  C2A8  F0B8         	movff	doModeVerbose@reg_1237,?_writeRegisterExtended+2
 13648  0062C6  C035  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13649  0062CA  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13650  0062CC  0E02               	movlw	high doModeVerbose@value_1238
 13651  0062CE  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13652  0062D0  0EB0               	movlw	low doModeVerbose@value_1238
 13653  0062D2  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13654  0062D4  0102               	movlb	2	; () banked
 13655  0062D6  51B3               	movf	doModeVerbose@nodeid_1235& (0+255),w,b
 13656  0062D8  EC76  F017         	call	_writeRegisterExtended
 13657  0062DC  0900               	iorlw	0
 13658  0062DE  E031               	bz	l14126
 13659                           
 13660                           ;main.c: 863: putsUSART((char *) "+OK - Value written successfully for ");
 13661  0062E0  0E75               	movlw	high STR_87
 13662  0062E2  0100               	movlb	0	; () banked
 13663  0062E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13664  0062E6  0ECB               	movlw	low STR_87
 13665  0062E8  6F61               	movwf	?_putsUSART& (0+255),b
 13666  0062EA  EC33  F00D         	call	_putsUSART	;wreg free
 13667                           
 13668                           ;main.c: 864: putsUSART((char *) "nodeid=");
 13669  0062EE  0E7B               	movlw	high (STR_55+6)
 13670  0062F0  0100               	movlb	0	; () banked
 13671  0062F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13672  0062F4  0E4F               	movlw	low (STR_55+6)
 13673  0062F6  6F61               	movwf	?_putsUSART& (0+255),b
 13674  0062F8  EC33  F00D         	call	_putsUSART	;wreg free
 13675                           
 13676                           ;main.c: 865: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13677  0062FC  0100               	movlb	0	; () banked
 13678  0062FE  67E5               	tstfsz	_bHex& (0+255),b
 13679  006300  D005               	goto	l14120
 13680                           
 13681                           ; BSR set to: 0
 13682  006302  0E7C               	movlw	high STR_90
 13683  006304  0102               	movlb	2	; () banked
 13684  006306  6FA1               	movwf	(_doModeVerbose$1252+1)& (0+255),b
 13685  006308  0ED1               	movlw	low STR_90
 13686  00630A  D004               	goto	L15
 13687  00630C                     l14120:
 13688                           
 13689                           ; BSR set to: 0
 13690  00630C  0E7B               	movlw	high STR_89
 13691  00630E  0102               	movlb	2	; () banked
 13692  006310  6FA1               	movwf	(_doModeVerbose$1252+1)& (0+255),b
 13693  006312  0ECC               	movlw	low STR_89
 13694  006314                     L15:
 13695  006314  6FA0               	movwf	_doModeVerbose$1252& (0+255),b
 13696                           
 13697                           ; BSR set to: 2
 13698  006316  0E01               	movlw	high _wrkbuf
 13699  006318  0100               	movlb	0	; () banked
 13700  00631A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13701  00631C  0E7B               	movlw	low _wrkbuf
 13702  00631E  6F76               	movwf	?_sprintf& (0+255),b
 13703  006320  C2A0  F078         	movff	_doModeVerbose$1252,?_sprintf+2
 13704  006324  C2A1  F079         	movff	_doModeVerbose$1252+1,?_sprintf+3
 13705  006328  C2B3  F07A         	movff	doModeVerbose@nodeid_1235,?_sprintf+4
 13706  00632C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13707  00632E  ECD7  F027         	call	_sprintf	;wreg free
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;main.c: 866: putsUSART(wrkbuf);
 13711  006332  0E01               	movlw	high _wrkbuf
 13712  006334  0100               	movlb	0	; () banked
 13713  006336  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13714  006338  0E7B               	movlw	low _wrkbuf
 13715  00633A  6F61               	movwf	?_putsUSART& (0+255),b
 13716  00633C  EC33  F00D         	call	_putsUSART	;wreg free
 13717                           
 13718                           ;main.c: 867: }
 13719  006340  D3E6               	goto	l14390
 13720  006342                     l14126:
 13721                           
 13722                           ;main.c: 868: else {
 13723                           ;main.c: 869: putsUSART((char *) "-ERROR - Failed to write value for ");
 13724  006342  0E76               	movlw	high STR_91
 13725  006344  0100               	movlb	0	; () banked
 13726  006346  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13727  006348  0E84               	movlw	low STR_91
 13728  00634A  6F61               	movwf	?_putsUSART& (0+255),b
 13729  00634C  EC33  F00D         	call	_putsUSART	;wreg free
 13730                           
 13731                           ;main.c: 870: putsUSART((char *) "nodeid=");
 13732  006350  0E7B               	movlw	high (STR_55+6)
 13733  006352  0100               	movlb	0	; () banked
 13734  006354  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13735  006356  0E4F               	movlw	low (STR_55+6)
 13736  006358  6F61               	movwf	?_putsUSART& (0+255),b
 13737  00635A  EC33  F00D         	call	_putsUSART	;wreg free
 13738                           
 13739                           ;main.c: 871: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13740  00635E  0100               	movlb	0	; () banked
 13741  006360  67E5               	tstfsz	_bHex& (0+255),b
 13742  006362  D005               	goto	l14132
 13743                           
 13744                           ; BSR set to: 0
 13745  006364  0E7C               	movlw	high STR_90
 13746  006366  0102               	movlb	2	; () banked
 13747  006368  6FA3               	movwf	(_doModeVerbose$1258+1)& (0+255),b
 13748  00636A  0ED1               	movlw	low STR_90
 13749  00636C  D004               	goto	L16
 13750  00636E                     l14132:
 13751                           
 13752                           ; BSR set to: 0
 13753  00636E  0E7B               	movlw	high STR_89
 13754  006370  0102               	movlb	2	; () banked
 13755  006372  6FA3               	movwf	(_doModeVerbose$1258+1)& (0+255),b
 13756  006374  0ECC               	movlw	low STR_89
 13757  006376                     L16:
 13758  006376  6FA2               	movwf	_doModeVerbose$1258& (0+255),b
 13759                           
 13760                           ; BSR set to: 2
 13761  006378  0E01               	movlw	high _wrkbuf
 13762  00637A  0100               	movlb	0	; () banked
 13763  00637C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13764  00637E  0E7B               	movlw	low _wrkbuf
 13765  006380  6F76               	movwf	?_sprintf& (0+255),b
 13766  006382  C2A2  F078         	movff	_doModeVerbose$1258,?_sprintf+2
 13767  006386  C2A3  F079         	movff	_doModeVerbose$1258+1,?_sprintf+3
 13768  00638A  C2B3  F07A         	movff	doModeVerbose@nodeid_1235,?_sprintf+4
 13769  00638E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13770  006390  ECD7  F027         	call	_sprintf	;wreg free
 13771  006394  D3BC               	goto	l14390
 13772  006396                     l14136:
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;main.c: 877: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13776  006396  0E01               	movlw	high _cmdbuf
 13777  006398  0100               	movlb	0	; () banked
 13778  00639A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13779  00639C  0E2B               	movlw	low _cmdbuf
 13780  00639E  6F6D               	movwf	?_stristr& (0+255),b
 13781  0063A0  0E7C               	movlw	high STR_95
 13782  0063A2  6F70               	movwf	(?_stristr+3)& (0+255),b
 13783  0063A4  0EB0               	movlw	low STR_95
 13784  0063A6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13785  0063A8  EC59  F00F         	call	_stristr	;wreg free
 13786  0063AC  0E2B               	movlw	low _cmdbuf
 13787  0063AE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13788  0063B0  0E01               	movlw	high _cmdbuf
 13789  0063B2  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13790  0063B4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13791  0063B6  E102               	bnz	u18825
 13792  0063B8  516D               	movf	?_stristr& (0+255),w,b
 13793  0063BA  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13794  0063BC                     u18825:
 13795  0063BC  E151               	bnz	l14164
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;main.c: 878: uint8_t nodeid;
 13799                           ;main.c: 880: strcpy(cmdbuf, cmdbuf + 5);
 13800  0063BE  DBBE               	call	PL4	;call to abstracted procedure
 13801  0063C0  ECE5  F00A         	call	_strcpy	;wreg free
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;main.c: 881: nodeid = atoi(cmdbuf);
 13805  0063C4  0E01               	movlw	high _cmdbuf
 13806  0063C6  0100               	movlb	0	; () banked
 13807  0063C8  6F67               	movwf	(?_atoi+1)& (0+255),b
 13808  0063CA  0E2B               	movlw	low _cmdbuf
 13809  0063CC  6F66               	movwf	?_atoi& (0+255),b
 13810  0063CE  ECE4  F018         	call	_atoi	;wreg free
 13811  0063D2  5166               	movf	?_atoi& (0+255),w,b
 13812  0063D4  0102               	movlb	2	; () banked
 13813  0063D6  6FB6               	movwf	doModeVerbose@nodeid_1260& (0+255),b
 13814                           
 13815                           ; BSR set to: 2
 13816                           ;main.c: 883: putsUSART((char *) "Info for node id = ");
 13817  0063D8  0E7A               	movlw	high STR_96
 13818  0063DA  0100               	movlb	0	; () banked
 13819  0063DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13820  0063DE  0E68               	movlw	low STR_96
 13821  0063E0  6F61               	movwf	?_putsUSART& (0+255),b
 13822  0063E2  EC33  F00D         	call	_putsUSART	;wreg free
 13823                           
 13824                           ;main.c: 884: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13825  0063E6  0100               	movlb	0	; () banked
 13826  0063E8  67E5               	tstfsz	_bHex& (0+255),b
 13827  0063EA  D005               	goto	l14148
 13828                           
 13829                           ; BSR set to: 0
 13830  0063EC  0E7C               	movlw	high STR_60
 13831  0063EE  0102               	movlb	2	; () banked
 13832  0063F0  6FA5               	movwf	(_doModeVerbose$1265+1)& (0+255),b
 13833  0063F2  0EED               	movlw	low STR_60
 13834  0063F4  D004               	goto	L17
 13835  0063F6                     l14148:
 13836                           
 13837                           ; BSR set to: 0
 13838  0063F6  0E7C               	movlw	high STR_59
 13839  0063F8  0102               	movlb	2	; () banked
 13840  0063FA  6FA5               	movwf	(_doModeVerbose$1265+1)& (0+255),b
 13841  0063FC  0E53               	movlw	low STR_59
 13842  0063FE                     L17:
 13843  0063FE  6FA4               	movwf	_doModeVerbose$1265& (0+255),b
 13844                           
 13845                           ; BSR set to: 2
 13846  006400  0E01               	movlw	high _wrkbuf
 13847  006402  0100               	movlb	0	; () banked
 13848  006404  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13849  006406  0E7B               	movlw	low _wrkbuf
 13850  006408  6F76               	movwf	?_sprintf& (0+255),b
 13851  00640A  C2A4  F078         	movff	_doModeVerbose$1265,?_sprintf+2
 13852  00640E  C2A5  F079         	movff	_doModeVerbose$1265+1,?_sprintf+3
 13853  006412  C2B6  F07A         	movff	doModeVerbose@nodeid_1260,?_sprintf+4
 13854  006416  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13855  006418  ECD7  F027         	call	_sprintf	;wreg free
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;main.c: 885: putsUSART(wrkbuf);
 13859  00641C  0E01               	movlw	high _wrkbuf
 13860  00641E  0100               	movlb	0	; () banked
 13861  006420  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13862  006422  0E7B               	movlw	low _wrkbuf
 13863  006424  6F61               	movwf	?_putsUSART& (0+255),b
 13864  006426  EC33  F00D         	call	_putsUSART	;wreg free
 13865                           
 13866                           ;main.c: 886: putsUSART((char *) "\r\n");
 13867  00642A  0E71               	movlw	high (STR_211+50)
 13868  00642C  0100               	movlb	0	; () banked
 13869  00642E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13870  006430  0E80               	movlw	low (STR_211+50)
 13871  006432  6F61               	movwf	?_putsUSART& (0+255),b
 13872  006434  EC33  F00D         	call	_putsUSART	;wreg free
 13873                           
 13874                           ;main.c: 887: printNodeFirmwareVersion(nodeid);
 13875  006438  0102               	movlb	2	; () banked
 13876  00643A  51B6               	movf	doModeVerbose@nodeid_1260& (0+255),w,b
 13877  00643C  ECE4  F014         	call	_printNodeFirmwareVersion
 13878                           
 13879                           ;main.c: 888: printGUID(nodeid);
 13880  006440  0102               	movlb	2	; () banked
 13881  006442  51B6               	movf	doModeVerbose@nodeid_1260& (0+255),w,b
 13882  006444  EC63  F018         	call	_printGUID
 13883                           
 13884                           ;main.c: 889: printMDF(nodeid);
 13885  006448  0102               	movlb	2	; () banked
 13886  00644A  51B6               	movf	doModeVerbose@nodeid_1260& (0+255),w,b
 13887  00644C  ECEA  F010         	call	_printMDF
 13888                           
 13889                           ;main.c: 890: putsUSART((char *) "+OK\r\n");
 13890  006450  0E7C               	movlw	high STR_9
 13891  006452  0100               	movlb	0	; () banked
 13892  006454  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13893  006456  0E6E               	movlw	low STR_9
 13894  006458  6F61               	movwf	?_putsUSART& (0+255),b
 13895  00645A  EC33  F00D         	call	_putsUSART	;wreg free
 13896                           
 13897                           ;main.c: 891: }
 13898  00645E  D357               	goto	l14390
 13899  006460                     l14164:
 13900                           
 13901                           ; BSR set to: 0
 13902                           ;main.c: 895: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13903  006460  0E01               	movlw	high _cmdbuf
 13904  006462  0100               	movlb	0	; () banked
 13905  006464  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13906  006466  0E2B               	movlw	low _cmdbuf
 13907  006468  6F6D               	movwf	?_stristr& (0+255),b
 13908  00646A  0E7C               	movlw	high STR_101
 13909  00646C  6F70               	movwf	(?_stristr+3)& (0+255),b
 13910  00646E  0E45               	movlw	low STR_101
 13911  006470  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13912  006472  EC59  F00F         	call	_stristr	;wreg free
 13913  006476  0E2B               	movlw	low _cmdbuf
 13914  006478  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13915  00647A  0E01               	movlw	high _cmdbuf
 13916  00647C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13917  00647E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13918  006480  E102               	bnz	u18845
 13919  006482  516D               	movf	?_stristr& (0+255),w,b
 13920  006484  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13921  006486                     u18845:
 13922  006486  E001 D0D2          	bnz	l14232
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;main.c: 897: uint8_t filterno;
 13926                           ;main.c: 898: uint8_t filter_priority;
 13927                           ;main.c: 899: uint16_t filter_class;
 13928                           ;main.c: 900: uint8_t filter_type;
 13929                           ;main.c: 901: uint8_t filter_nodeid;
 13930                           ;main.c: 903: strcpy(cmdbuf, cmdbuf + 8);
 13931  00648A  0E01               	movlw	high _cmdbuf
 13932  00648C  DB6C               	call	PL8	;call to abstracted procedure
 13933  00648E  ECE5  F00A         	call	_strcpy	;wreg free
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;main.c: 904: char *p = strtok(cmdbuf, ",");
 13937  006492  DBA3               	call	PL30	;call to abstracted procedure
 13938  006494  ECA1  F010         	call	_strtok	;wreg free
 13939  006498  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1274
 13940  00649C  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1274+1
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;main.c: 905: if ((0) != p) {
 13944  0064A0  0102               	movlb	2	; () banked
 13945  0064A2  51C2               	movf	(doModeVerbose@p_1274+1)& (0+255),w,b
 13946  0064A4  11C1               	iorwf	doModeVerbose@p_1274& (0+255),w,b
 13947  0064A6  E014               	bz	l14180
 13948                           
 13949                           ; BSR set to: 2
 13950                           ;main.c: 906: filterno = atoi(p);
 13951  0064A8  C2C1  F066         	movff	doModeVerbose@p_1274,?_atoi
 13952  0064AC  C2C2  F067         	movff	doModeVerbose@p_1274+1,?_atoi+1
 13953  0064B0  ECE4  F018         	call	_atoi	;wreg free
 13954  0064B4  5166               	movf	?_atoi& (0+255),w,b
 13955  0064B6  0102               	movlb	2	; () banked
 13956  0064B8  6FAD               	movwf	doModeVerbose@filterno& (0+255),b
 13957                           
 13958                           ; BSR set to: 2
 13959                           ;main.c: 907: if (filterno > 15) {
 13960  0064BA  0E0F               	movlw	15
 13961  0064BC  65AD               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13962  0064BE  D010               	goto	l14184
 13963                           
 13964                           ; BSR set to: 2
 13965                           ;main.c: 908: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13966  0064C0  0E6E               	movlw	high STR_103
 13967  0064C2  0100               	movlb	0	; () banked
 13968  0064C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13969  0064C6  0ED8               	movlw	low STR_103
 13970  0064C8  6F61               	movwf	?_putsUSART& (0+255),b
 13971  0064CA  EC33  F00D         	call	_putsUSART	;wreg free
 13972  0064CE  D32D               	goto	l544
 13973  0064D0                     l14180:
 13974                           
 13975                           ; BSR set to: 2
 13976                           ;main.c: 912: else {
 13977                           ;main.c: 913: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13978  0064D0  0E74               	movlw	high STR_104
 13979  0064D2  0100               	movlb	0	; () banked
 13980  0064D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13981  0064D6  0EBB               	movlw	low STR_104
 13982  0064D8  6F61               	movwf	?_putsUSART& (0+255),b
 13983  0064DA  EC33  F00D         	call	_putsUSART	;wreg free
 13984  0064DE  D325               	goto	l544
 13985  0064E0                     l14184:
 13986                           
 13987                           ; BSR set to: 2
 13988                           ;main.c: 915: }
 13989                           ;main.c: 918: p = strtok((0), ",");
 13990  0064E0  DB25               	call	PL2	;call to abstracted procedure
 13991  0064E2  ECA1  F010         	call	_strtok	;wreg free
 13992  0064E6  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1274
 13993  0064EA  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1274+1
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;main.c: 919: if ((0) != p) {
 13997  0064EE  0102               	movlb	2	; () banked
 13998  0064F0  51C2               	movf	(doModeVerbose@p_1274+1)& (0+255),w,b
 13999  0064F2  11C1               	iorwf	doModeVerbose@p_1274& (0+255),w,b
 14000  0064F4  E00A               	bz	l14190
 14001                           
 14002                           ; BSR set to: 2
 14003                           ;main.c: 920: filter_priority = atoi(p);
 14004  0064F6  C2C1  F066         	movff	doModeVerbose@p_1274,?_atoi
 14005  0064FA  C2C2  F067         	movff	doModeVerbose@p_1274+1,?_atoi+1
 14006  0064FE  ECE4  F018         	call	_atoi	;wreg free
 14007  006502  5166               	movf	?_atoi& (0+255),w,b
 14008  006504  0102               	movlb	2	; () banked
 14009  006506  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14010                           
 14011                           ;main.c: 921: }
 14012  006508  D008               	goto	l14194
 14013  00650A                     l14190:
 14014                           
 14015                           ; BSR set to: 2
 14016                           ;main.c: 922: else {
 14017                           ;main.c: 923: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14018  00650A  0E73               	movlw	high STR_106
 14019  00650C  0100               	movlb	0	; () banked
 14020  00650E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14021  006510  0EF0               	movlw	low STR_106
 14022  006512  6F61               	movwf	?_putsUSART& (0+255),b
 14023  006514  EC33  F00D         	call	_putsUSART	;wreg free
 14024  006518  D308               	goto	l544
 14025  00651A                     l14194:
 14026                           
 14027                           ; BSR set to: 2
 14028                           ;main.c: 925: }
 14029                           ;main.c: 928: p = strtok((0), ",");
 14030  00651A  DB08               	call	PL2	;call to abstracted procedure
 14031  00651C  ECA1  F010         	call	_strtok	;wreg free
 14032  006520  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1274
 14033  006524  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1274+1
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;main.c: 929: if ((0) != p) {
 14037  006528  0102               	movlb	2	; () banked
 14038  00652A  51C2               	movf	(doModeVerbose@p_1274+1)& (0+255),w,b
 14039  00652C  11C1               	iorwf	doModeVerbose@p_1274& (0+255),w,b
 14040  00652E  E00B               	bz	l14200
 14041                           
 14042                           ; BSR set to: 2
 14043                           ;main.c: 930: filter_class = atoi(p);
 14044  006530  C2C1  F066         	movff	doModeVerbose@p_1274,?_atoi
 14045  006534  C2C2  F067         	movff	doModeVerbose@p_1274+1,?_atoi+1
 14046  006538  ECE4  F018         	call	_atoi	;wreg free
 14047  00653C  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14048  006540  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14049                           
 14050                           ;main.c: 931: }
 14051  006544  D008               	goto	l14204
 14052  006546                     l14200:
 14053                           
 14054                           ; BSR set to: 2
 14055                           ;main.c: 932: else {
 14056                           ;main.c: 933: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14057  006546  0E75               	movlw	high STR_108
 14058  006548  0100               	movlb	0	; () banked
 14059  00654A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14060  00654C  0E57               	movlw	low STR_108
 14061  00654E  6F61               	movwf	?_putsUSART& (0+255),b
 14062  006550  EC33  F00D         	call	_putsUSART	;wreg free
 14063  006554  D2EA               	goto	l544
 14064  006556                     l14204:
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;main.c: 935: }
 14068                           ;main.c: 938: p = strtok((0), ",");
 14069  006556  DB00               	call	PL6	;call to abstracted procedure
 14070  006558  ECA1  F010         	call	_strtok	;wreg free
 14071  00655C  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1274
 14072  006560  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1274+1
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;main.c: 939: if ((0) != p) {
 14076  006564  0102               	movlb	2	; () banked
 14077  006566  51C2               	movf	(doModeVerbose@p_1274+1)& (0+255),w,b
 14078  006568  11C1               	iorwf	doModeVerbose@p_1274& (0+255),w,b
 14079  00656A  E00A               	bz	l14210
 14080                           
 14081                           ; BSR set to: 2
 14082                           ;main.c: 940: filter_type = atoi(p);
 14083  00656C  C2C1  F066         	movff	doModeVerbose@p_1274,?_atoi
 14084  006570  C2C2  F067         	movff	doModeVerbose@p_1274+1,?_atoi+1
 14085  006574  ECE4  F018         	call	_atoi	;wreg free
 14086  006578  5166               	movf	?_atoi& (0+255),w,b
 14087  00657A  0102               	movlb	2	; () banked
 14088  00657C  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14089                           
 14090                           ;main.c: 941: }
 14091  00657E  D008               	goto	l14214
 14092  006580                     l14210:
 14093                           
 14094                           ; BSR set to: 2
 14095                           ;main.c: 942: else {
 14096                           ;main.c: 943: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14097  006580  0E75               	movlw	high STR_110
 14098  006582  0100               	movlb	0	; () banked
 14099  006584  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14100  006586  0EA5               	movlw	low STR_110
 14101  006588  6F61               	movwf	?_putsUSART& (0+255),b
 14102  00658A  EC33  F00D         	call	_putsUSART	;wreg free
 14103  00658E  D2CD               	goto	l544
 14104  006590                     l14214:
 14105                           
 14106                           ; BSR set to: 2
 14107                           ;main.c: 945: }
 14108                           ;main.c: 948: p = strtok((0), ",");
 14109  006590  DACD               	call	PL2	;call to abstracted procedure
 14110  006592  ECA1  F010         	call	_strtok	;wreg free
 14111  006596  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1274
 14112  00659A  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1274+1
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;main.c: 949: if ((0) != p) {
 14116  00659E  0102               	movlb	2	; () banked
 14117  0065A0  51C2               	movf	(doModeVerbose@p_1274+1)& (0+255),w,b
 14118  0065A2  11C1               	iorwf	doModeVerbose@p_1274& (0+255),w,b
 14119  0065A4  E00A               	bz	l14220
 14120                           
 14121                           ; BSR set to: 2
 14122                           ;main.c: 950: filter_nodeid = atoi(p);
 14123  0065A6  C2C1  F066         	movff	doModeVerbose@p_1274,?_atoi
 14124  0065AA  C2C2  F067         	movff	doModeVerbose@p_1274+1,?_atoi+1
 14125  0065AE  ECE4  F018         	call	_atoi	;wreg free
 14126  0065B2  5166               	movf	?_atoi& (0+255),w,b
 14127  0065B4  0102               	movlb	2	; () banked
 14128  0065B6  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14129                           
 14130                           ;main.c: 951: }
 14131  0065B8  D008               	goto	l14224
 14132  0065BA                     l14220:
 14133                           
 14134                           ; BSR set to: 2
 14135                           ;main.c: 952: else {
 14136                           ;main.c: 953: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14137  0065BA  0E74               	movlw	high STR_112
 14138  0065BC  0100               	movlb	0	; () banked
 14139  0065BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14140  0065C0  0E1A               	movlw	low STR_112
 14141  0065C2  6F61               	movwf	?_putsUSART& (0+255),b
 14142  0065C4  EC33  F00D         	call	_putsUSART	;wreg free
 14143  0065C8  D2B0               	goto	l544
 14144  0065CA                     l14224:
 14145                           
 14146                           ; BSR set to: 2
 14147                           ;main.c: 955: }
 14148                           ;main.c: 958: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14149  0065CA  0E80               	movlw	128
 14150  0065CC  EC93  F00A         	call	_ECANSetOperationMode
 14151                           
 14152                           ; BSR set to: 0
 14153                           ;main.c: 960: uint32_t id = ((uint32_t) filter_priority << 26) |
 14154                           ;main.c: 961: ((uint32_t) filter_class << 16) |
 14155                           ;main.c: 962: ((uint32_t) filter_type << 8) |
 14156                           ;main.c: 963: filter_nodeid;
 14157  0065D0  C28D  F0CA         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14158  0065D4  DB22               	call	PL38	;call to abstracted procedure
 14159  0065D6  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14160  0065D8  0100               	movlb	0	; () banked
 14161  0065DA  6FCE               	movwf	(??_doModeVerbose+4)& (0+255),b
 14162  0065DC  0102               	movlb	2	; () banked
 14163  0065DE  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14164  0065E0  DB35               	call	PL56	;call to abstracted procedure
 14165  0065E2  C28C  F0D2         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14166  0065E6  DACC               	call	PL10	;call to abstracted procedure
 14167  0065E8  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14168  0065EA  0100               	movlb	0	; () banked
 14169  0065EC  11DA               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14170  0065EE  0102               	movlb	2	; () banked
 14171  0065F0  6F80               	movwf	doModeVerbose@id& (0+255),b
 14172  0065F2  0100               	movlb	0	; () banked
 14173  0065F4  51DB               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14174  0065F6  0102               	movlb	2	; () banked
 14175  0065F8  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14176  0065FA  0100               	movlb	0	; () banked
 14177  0065FC  51DC               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14178  0065FE  0102               	movlb	2	; () banked
 14179  006600  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14180  006602  0100               	movlb	0	; () banked
 14181  006604  51DD               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14182  006606  0102               	movlb	2	; () banked
 14183  006608  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14184                           
 14185                           ; BSR set to: 2
 14186                           ;main.c: 964: setFilter(filterno, id);
 14187  00660A  C280  F060         	movff	doModeVerbose@id,?_setFilter
 14188  00660E  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 14189  006612  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 14190  006616  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 14191  00661A  51AD               	movf	doModeVerbose@filterno& (0+255),w,b
 14192  00661C  EC56  F021         	call	_setFilter
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;main.c: 965: putsUSART((char *) "+OK\r\n");
 14196  006620  0E7C               	movlw	high STR_9
 14197  006622  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14198  006624  0E6E               	movlw	low STR_9
 14199  006626  6F61               	movwf	?_putsUSART& (0+255),b
 14200  006628  EC33  F00D         	call	_putsUSART	;wreg free
 14201                           
 14202                           ;main.c: 966: }
 14203  00662C  D270               	goto	l14390
 14204  00662E                     l14232:
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;main.c: 970: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14208  00662E  0E01               	movlw	high _cmdbuf
 14209  006630  0100               	movlb	0	; () banked
 14210  006632  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14211  006634  0E2B               	movlw	low _cmdbuf
 14212  006636  6F6D               	movwf	?_stristr& (0+255),b
 14213  006638  0E7C               	movlw	high STR_114
 14214  00663A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14215  00663C  0EA6               	movlw	low STR_114
 14216  00663E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14217  006640  EC59  F00F         	call	_stristr	;wreg free
 14218  006644  0E2B               	movlw	low _cmdbuf
 14219  006646  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14220  006648  0E01               	movlw	high _cmdbuf
 14221  00664A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14222  00664C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14223  00664E  E102               	bnz	u18925
 14224  006650  516D               	movf	?_stristr& (0+255),w,b
 14225  006652  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14226  006654                     u18925:
 14227  006654  E001 D0D9          	bnz	l14304
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;main.c: 972: uint8_t maskno;
 14231                           ;main.c: 973: uint8_t mask_priority;
 14232                           ;main.c: 974: uint16_t mask_class;
 14233                           ;main.c: 975: uint8_t mask_type;
 14234                           ;main.c: 976: uint8_t mask_nodeid;
 14235                           ;main.c: 978: strcpy(cmdbuf, cmdbuf + 8);
 14236  006658  0E01               	movlw	high _cmdbuf
 14237  00665A  DA85               	call	PL8	;call to abstracted procedure
 14238  00665C  ECE5  F00A         	call	_strcpy	;wreg free
 14239                           
 14240                           ; BSR set to: 0
 14241                           ;main.c: 979: char *p = strtok(cmdbuf, ",");
 14242  006660  DABC               	call	PL30	;call to abstracted procedure
 14243  006662  ECA1  F010         	call	_strtok	;wreg free
 14244  006666  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1294
 14245  00666A  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1294+1
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;main.c: 980: if ((0) != p) {
 14249  00666E  0102               	movlb	2	; () banked
 14250  006670  51C4               	movf	(doModeVerbose@p_1294+1)& (0+255),w,b
 14251  006672  11C3               	iorwf	doModeVerbose@p_1294& (0+255),w,b
 14252  006674  E014               	bz	l14248
 14253                           
 14254                           ; BSR set to: 2
 14255                           ;main.c: 981: maskno = atoi(p);
 14256  006676  C2C3  F066         	movff	doModeVerbose@p_1294,?_atoi
 14257  00667A  C2C4  F067         	movff	doModeVerbose@p_1294+1,?_atoi+1
 14258  00667E  ECE4  F018         	call	_atoi	;wreg free
 14259  006682  5166               	movf	?_atoi& (0+255),w,b
 14260  006684  0102               	movlb	2	; () banked
 14261  006686  6FAE               	movwf	doModeVerbose@maskno& (0+255),b
 14262                           
 14263                           ; BSR set to: 2
 14264                           ;main.c: 982: if (maskno > 1) {
 14265  006688  0E01               	movlw	1
 14266  00668A  65AE               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14267  00668C  D010               	goto	l14252
 14268                           
 14269                           ; BSR set to: 2
 14270                           ;main.c: 983: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14271  00668E  0E71               	movlw	high STR_116
 14272  006690  0100               	movlb	0	; () banked
 14273  006692  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14274  006694  0EEA               	movlw	low STR_116
 14275  006696  6F61               	movwf	?_putsUSART& (0+255),b
 14276  006698  EC33  F00D         	call	_putsUSART	;wreg free
 14277  00669C  D246               	goto	l544
 14278  00669E                     l14248:
 14279                           
 14280                           ; BSR set to: 2
 14281                           ;main.c: 987: else {
 14282                           ;main.c: 988: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14283  00669E  0E75               	movlw	high STR_117
 14284  0066A0  0100               	movlb	0	; () banked
 14285  0066A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14286  0066A4  0EF1               	movlw	low STR_117
 14287  0066A6  6F61               	movwf	?_putsUSART& (0+255),b
 14288  0066A8  EC33  F00D         	call	_putsUSART	;wreg free
 14289  0066AC  D23E               	goto	l544
 14290  0066AE                     l14252:
 14291                           
 14292                           ; BSR set to: 2
 14293                           ;main.c: 990: }
 14294                           ;main.c: 993: p = strtok((0), ",");
 14295  0066AE  DA3E               	call	PL2	;call to abstracted procedure
 14296  0066B0  ECA1  F010         	call	_strtok	;wreg free
 14297  0066B4  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1294
 14298  0066B8  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1294+1
 14299                           
 14300                           ; BSR set to: 0
 14301                           ;main.c: 994: if ((0) != p) {
 14302  0066BC  0102               	movlb	2	; () banked
 14303  0066BE  51C4               	movf	(doModeVerbose@p_1294+1)& (0+255),w,b
 14304  0066C0  11C3               	iorwf	doModeVerbose@p_1294& (0+255),w,b
 14305  0066C2  E00A               	bz	l14258
 14306                           
 14307                           ; BSR set to: 2
 14308                           ;main.c: 995: mask_priority = atoi(p);
 14309  0066C4  C2C3  F066         	movff	doModeVerbose@p_1294,?_atoi
 14310  0066C8  C2C4  F067         	movff	doModeVerbose@p_1294+1,?_atoi+1
 14311  0066CC  ECE4  F018         	call	_atoi	;wreg free
 14312  0066D0  5166               	movf	?_atoi& (0+255),w,b
 14313  0066D2  0102               	movlb	2	; () banked
 14314  0066D4  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 14315                           
 14316                           ;main.c: 996: }
 14317  0066D6  D008               	goto	l14262
 14318  0066D8                     l14258:
 14319                           
 14320                           ; BSR set to: 2
 14321                           ;main.c: 997: else {
 14322                           ;main.c: 998: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14323  0066D8  0E74               	movlw	high STR_119
 14324  0066DA  0100               	movlb	0	; () banked
 14325  0066DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14326  0066DE  0E6B               	movlw	low STR_119
 14327  0066E0  6F61               	movwf	?_putsUSART& (0+255),b
 14328  0066E2  EC33  F00D         	call	_putsUSART	;wreg free
 14329  0066E6  D221               	goto	l544
 14330  0066E8                     l14262:
 14331                           
 14332                           ; BSR set to: 2
 14333                           ;main.c: 1000: }
 14334                           ;main.c: 1003: p = strtok((0), ",");
 14335  0066E8  DA21               	call	PL2	;call to abstracted procedure
 14336  0066EA  ECA1  F010         	call	_strtok	;wreg free
 14337  0066EE  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1294
 14338  0066F2  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1294+1
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;main.c: 1004: if ((0) != p) {
 14342  0066F6  0102               	movlb	2	; () banked
 14343  0066F8  51C4               	movf	(doModeVerbose@p_1294+1)& (0+255),w,b
 14344  0066FA  11C3               	iorwf	doModeVerbose@p_1294& (0+255),w,b
 14345  0066FC  E00B               	bz	l14268
 14346                           
 14347                           ; BSR set to: 2
 14348                           ;main.c: 1005: mask_class = atoi(p);
 14349  0066FE  C2C3  F066         	movff	doModeVerbose@p_1294,?_atoi
 14350  006702  C2C4  F067         	movff	doModeVerbose@p_1294+1,?_atoi+1
 14351  006706  ECE4  F018         	call	_atoi	;wreg free
 14352  00670A  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14353  00670E  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14354                           
 14355                           ;main.c: 1006: }
 14356  006712  D008               	goto	l14272
 14357  006714                     l14268:
 14358                           
 14359                           ; BSR set to: 2
 14360                           ;main.c: 1007: else {
 14361                           ;main.c: 1008: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14362  006714  0E76               	movlw	high STR_121
 14363  006716  0100               	movlb	0	; () banked
 14364  006718  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14365  00671A  0E3B               	movlw	low STR_121
 14366  00671C  6F61               	movwf	?_putsUSART& (0+255),b
 14367  00671E  EC33  F00D         	call	_putsUSART	;wreg free
 14368  006722  D203               	goto	l544
 14369  006724                     l14272:
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;main.c: 1010: }
 14373                           ;main.c: 1013: p = strtok((0), ",");
 14374  006724  DA19               	call	PL6	;call to abstracted procedure
 14375  006726  ECA1  F010         	call	_strtok	;wreg free
 14376  00672A  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1294
 14377  00672E  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1294+1
 14378                           
 14379                           ; BSR set to: 0
 14380                           ;main.c: 1014: if ((0) != p) {
 14381  006732  0102               	movlb	2	; () banked
 14382  006734  51C4               	movf	(doModeVerbose@p_1294+1)& (0+255),w,b
 14383  006736  11C3               	iorwf	doModeVerbose@p_1294& (0+255),w,b
 14384  006738  E00A               	bz	l14278
 14385                           
 14386                           ; BSR set to: 2
 14387                           ;main.c: 1015: mask_type = atoi(p);
 14388  00673A  C2C3  F066         	movff	doModeVerbose@p_1294,?_atoi
 14389  00673E  C2C4  F067         	movff	doModeVerbose@p_1294+1,?_atoi+1
 14390  006742  ECE4  F018         	call	_atoi	;wreg free
 14391  006746  5166               	movf	?_atoi& (0+255),w,b
 14392  006748  0102               	movlb	2	; () banked
 14393  00674A  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 14394                           
 14395                           ;main.c: 1016: }
 14396  00674C  D008               	goto	l14282
 14397  00674E                     l14278:
 14398                           
 14399                           ; BSR set to: 2
 14400                           ;main.c: 1017: else {
 14401                           ;main.c: 1018: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14402  00674E  0E76               	movlw	high STR_123
 14403  006750  0100               	movlb	0	; () banked
 14404  006752  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14405  006754  0E60               	movlw	low STR_123
 14406  006756  6F61               	movwf	?_putsUSART& (0+255),b
 14407  006758  EC33  F00D         	call	_putsUSART	;wreg free
 14408  00675C  D1E6               	goto	l544
 14409  00675E                     l14282:
 14410                           
 14411                           ; BSR set to: 2
 14412                           ;main.c: 1020: }
 14413                           ;main.c: 1023: p = strtok((0), ",");
 14414  00675E  D9E6               	call	PL2	;call to abstracted procedure
 14415  006760  ECA1  F010         	call	_strtok	;wreg free
 14416  006764  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1294
 14417  006768  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1294+1
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;main.c: 1024: if ((0) != p) {
 14421  00676C  0102               	movlb	2	; () banked
 14422  00676E  51C4               	movf	(doModeVerbose@p_1294+1)& (0+255),w,b
 14423  006770  11C3               	iorwf	doModeVerbose@p_1294& (0+255),w,b
 14424  006772  E00A               	bz	l14288
 14425                           
 14426                           ; BSR set to: 2
 14427                           ;main.c: 1025: mask_nodeid = atoi(p);
 14428  006774  C2C3  F066         	movff	doModeVerbose@p_1294,?_atoi
 14429  006778  C2C4  F067         	movff	doModeVerbose@p_1294+1,?_atoi+1
 14430  00677C  ECE4  F018         	call	_atoi	;wreg free
 14431  006780  5166               	movf	?_atoi& (0+255),w,b
 14432  006782  0102               	movlb	2	; () banked
 14433  006784  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14434                           
 14435                           ;main.c: 1026: }
 14436  006786  D008               	goto	l14292
 14437  006788                     l14288:
 14438                           
 14439                           ; BSR set to: 2
 14440                           ;main.c: 1027: else {
 14441                           ;main.c: 1028: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14442  006788  0E75               	movlw	high STR_125
 14443  00678A  0100               	movlb	0	; () banked
 14444  00678C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14445  00678E  0E30               	movlw	low STR_125
 14446  006790  6F61               	movwf	?_putsUSART& (0+255),b
 14447  006792  EC33  F00D         	call	_putsUSART	;wreg free
 14448  006796  D1C9               	goto	l544
 14449  006798                     l14292:
 14450                           
 14451                           ; BSR set to: 2
 14452                           ;main.c: 1030: }
 14453                           ;main.c: 1032: uint32_t id = ((uint32_t) mask_priority << 26) |
 14454                           ;main.c: 1033: ((uint32_t) mask_class << 16) |
 14455                           ;main.c: 1034: ((uint32_t) mask_type << 8) |
 14456                           ;main.c: 1035: mask_nodeid;
 14457  006798  C290  F0CA         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14458  00679C  DA3E               	call	PL38	;call to abstracted procedure
 14459  00679E  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14460  0067A0  0100               	movlb	0	; () banked
 14461  0067A2  6FCE               	movwf	(??_doModeVerbose+4)& (0+255),b
 14462  0067A4  0102               	movlb	2	; () banked
 14463  0067A6  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14464  0067A8  DA51               	call	PL56	;call to abstracted procedure
 14465  0067AA  C28F  F0D2         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14466  0067AE  D9E8               	call	PL10	;call to abstracted procedure
 14467  0067B0  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14468  0067B2  0100               	movlb	0	; () banked
 14469  0067B4  11DA               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14470  0067B6  0102               	movlb	2	; () banked
 14471  0067B8  6FA9               	movwf	doModeVerbose@id_1306& (0+255),b
 14472  0067BA  0100               	movlb	0	; () banked
 14473  0067BC  51DB               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14474  0067BE  0102               	movlb	2	; () banked
 14475  0067C0  6FAA               	movwf	(doModeVerbose@id_1306+1)& (0+255),b
 14476  0067C2  0100               	movlb	0	; () banked
 14477  0067C4  51DC               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14478  0067C6  0102               	movlb	2	; () banked
 14479  0067C8  6FAB               	movwf	(doModeVerbose@id_1306+2)& (0+255),b
 14480  0067CA  0100               	movlb	0	; () banked
 14481  0067CC  51DD               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14482  0067CE  0102               	movlb	2	; () banked
 14483  0067D0  6FAC               	movwf	(doModeVerbose@id_1306+3)& (0+255),b
 14484                           
 14485                           ; BSR set to: 2
 14486                           ;main.c: 1038: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14487  0067D2  0E80               	movlw	128
 14488  0067D4  EC93  F00A         	call	_ECANSetOperationMode
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;main.c: 1040: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14492                           ;main.c: 1041: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14493  0067D8  0102               	movlb	2	; () banked
 14494  0067DA  51AE               	movf	doModeVerbose@maskno& (0+255),w,b
 14495  0067DC  E008               	bz	l14300
 14496                           
 14497                           ; BSR set to: 2
 14498  0067DE  0E0F               	movlw	15	;volatile
 14499  0067E0  0100               	movlb	0	; () banked
 14500  0067E2  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14501  0067E4  0E18               	movlw	24	;volatile
 14502  0067E6  DA26               	call	PL50	;call to abstracted procedure
 14503  0067E8  EC67  F019         	call	__CANIDToRegs	;wreg free
 14504  0067EC  D007               	goto	l14302
 14505  0067EE                     l14300:
 14506                           
 14507                           ; BSR set to: 2
 14508  0067EE  0E0F               	movlw	15	;volatile
 14509  0067F0  0100               	movlb	0	; () banked
 14510  0067F2  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14511  0067F4  0E1C               	movlw	28	;volatile
 14512  0067F6  DA1E               	call	PL50	;call to abstracted procedure
 14513  0067F8  EC67  F019         	call	__CANIDToRegs	;wreg free
 14514  0067FC                     l14302:
 14515                           
 14516                           ; BSR set to: 0
 14517                           ;main.c: 1042: putsUSART((char *) "+OK\r\n");
 14518  0067FC  0E7C               	movlw	high STR_9
 14519  0067FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14520  006800  0E6E               	movlw	low STR_9
 14521  006802  6F61               	movwf	?_putsUSART& (0+255),b
 14522  006804  EC33  F00D         	call	_putsUSART	;wreg free
 14523                           
 14524                           ;main.c: 1043: }
 14525  006808  D182               	goto	l14390
 14526  00680A                     l14304:
 14527                           
 14528                           ; BSR set to: 0
 14529                           ;main.c: 1050: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14530  00680A  0E01               	movlw	high _cmdbuf
 14531  00680C  0100               	movlb	0	; () banked
 14532  00680E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14533  006810  0E2B               	movlw	low _cmdbuf
 14534  006812  6F6D               	movwf	?_stristr& (0+255),b
 14535  006814  0E7C               	movlw	high STR_127
 14536  006816  6F70               	movwf	(?_stristr+3)& (0+255),b
 14537  006818  0E92               	movlw	low STR_127
 14538  00681A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14539  00681C  EC59  F00F         	call	_stristr	;wreg free
 14540  006820  0E2B               	movlw	low _cmdbuf
 14541  006822  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14542  006824  0E01               	movlw	high _cmdbuf
 14543  006826  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14544  006828  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14545  00682A  E102               	bnz	u19015
 14546  00682C  516D               	movf	?_stristr& (0+255),w,b
 14547  00682E  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14548  006830                     u19015:
 14549  006830  E001 D15A          	bnz	l14384
 14550                           
 14551                           ; BSR set to: 0
 14552                           ;main.c: 1053: strcpy(cmdbuf, cmdbuf + 4);
 14553  006834  0E01               	movlw	high _cmdbuf
 14554  006836  0100               	movlb	0	; () banked
 14555  006838  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14556  00683A  0E2B               	movlw	low _cmdbuf
 14557  00683C  6F60               	movwf	?_strcpy& (0+255),b
 14558  00683E  0E2F               	movlw	low (_cmdbuf+4)
 14559  006840  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14560  006842  0E01               	movlw	high (_cmdbuf+4)
 14561  006844  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14562  006846  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14563  00684A  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14564  00684E  ECE5  F00A         	call	_strcpy	;wreg free
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;main.c: 1056: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14568  006852  0E01               	movlw	high _cmdbuf
 14569  006854  0100               	movlb	0	; () banked
 14570  006856  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14571  006858  0E2B               	movlw	low _cmdbuf
 14572  00685A  6F6D               	movwf	?_stristr& (0+255),b
 14573  00685C  0E7C               	movlw	high STR_128
 14574  00685E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14575  006860  0ED9               	movlw	low STR_128
 14576  006862  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14577  006864  EC59  F00F         	call	_stristr	;wreg free
 14578  006868  0E2B               	movlw	low _cmdbuf
 14579  00686A  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14580  00686C  0E01               	movlw	high _cmdbuf
 14581  00686E  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14582  006870  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14583  006872  E102               	bnz	u19025
 14584  006874  516D               	movf	?_stristr& (0+255),w,b
 14585  006876  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14586  006878                     u19025:
 14587  006878  E114               	bnz	l14316
 14588                           
 14589                           ; BSR set to: 0
 14590                           ;main.c: 1057: bHex = 1;
 14591  00687A  0E01               	movlw	1
 14592  00687C  6FE5               	movwf	_bHex& (0+255),b
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;main.c: 1058: (Busy_eep(), Write_b_eep(0x06,1));
 14596  00687E  EC5C  F00A         	call	_Busy_eep	;wreg free
 14597  006882  0100               	movlb	0	; () banked
 14598  006884  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14599  006886  0E06               	movlw	6
 14600  006888  6F60               	movwf	?_Write_b_eep& (0+255),b
 14601  00688A  0E01               	movlw	1
 14602  00688C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14603  00688E  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14604                           
 14605                           ;main.c: 1059: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14606  006892  0E73               	movlw	high STR_129
 14607  006894  0100               	movlb	0	; () banked
 14608  006896  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14609  006898  0EC4               	movlw	low STR_129
 14610  00689A  6F61               	movwf	?_putsUSART& (0+255),b
 14611  00689C  EC33  F00D         	call	_putsUSART	;wreg free
 14612                           
 14613                           ;main.c: 1060: }
 14614  0068A0  D136               	goto	l14390
 14615  0068A2                     l14316:
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;main.c: 1062: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14619  0068A2  0E01               	movlw	high _cmdbuf
 14620  0068A4  0100               	movlb	0	; () banked
 14621  0068A6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14622  0068A8  0E2B               	movlw	low _cmdbuf
 14623  0068AA  6F6D               	movwf	?_stristr& (0+255),b
 14624  0068AC  0E7B               	movlw	high STR_130
 14625  0068AE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14626  0068B0  0EF4               	movlw	low STR_130
 14627  0068B2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14628  0068B4  EC59  F00F         	call	_stristr	;wreg free
 14629  0068B8  0E2B               	movlw	low _cmdbuf
 14630  0068BA  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14631  0068BC  0E01               	movlw	high _cmdbuf
 14632  0068BE  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14633  0068C0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14634  0068C2  E102               	bnz	u19035
 14635  0068C4  516D               	movf	?_stristr& (0+255),w,b
 14636  0068C6  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14637  0068C8                     u19035:
 14638  0068C8  E113               	bnz	l14326
 14639                           
 14640                           ; BSR set to: 0
 14641                           ;main.c: 1063: bHex = 0;
 14642  0068CA  6BE5               	clrf	_bHex& (0+255),b
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;main.c: 1064: (Busy_eep(), Write_b_eep(0x06,0));
 14646  0068CC  EC5C  F00A         	call	_Busy_eep	;wreg free
 14647  0068D0  0100               	movlb	0	; () banked
 14648  0068D2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14649  0068D4  0E06               	movlw	6
 14650  0068D6  6F60               	movwf	?_Write_b_eep& (0+255),b
 14651  0068D8  0E00               	movlw	0
 14652  0068DA  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14653  0068DC  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14654                           
 14655                           ;main.c: 1065: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14656  0068E0  0E74               	movlw	high STR_131
 14657  0068E2  0100               	movlb	0	; () banked
 14658  0068E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14659  0068E6  0E93               	movlw	low STR_131
 14660  0068E8  6F61               	movwf	?_putsUSART& (0+255),b
 14661  0068EA  EC33  F00D         	call	_putsUSART	;wreg free
 14662                           
 14663                           ;main.c: 1066: }
 14664  0068EE  D10F               	goto	l14390
 14665  0068F0                     l14326:
 14666                           
 14667                           ; BSR set to: 0
 14668                           ;main.c: 1067: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14669  0068F0  0E01               	movlw	high _cmdbuf
 14670  0068F2  0100               	movlb	0	; () banked
 14671  0068F4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14672  0068F6  0E2B               	movlw	low _cmdbuf
 14673  0068F8  6F6D               	movwf	?_stristr& (0+255),b
 14674  0068FA  0E7B               	movlw	high STR_132
 14675  0068FC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14676  0068FE  0E63               	movlw	low STR_132
 14677  006900  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14678  006902  EC59  F00F         	call	_stristr	;wreg free
 14679  006906  516E               	movf	(?_stristr+1)& (0+255),w,b
 14680  006908  116D               	iorwf	?_stristr& (0+255),w,b
 14681  00690A  E02E               	bz	l14340
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;main.c: 1068: strcpy(cmdbuf, cmdbuf + 10);
 14685  00690C  0E01               	movlw	high _cmdbuf
 14686  00690E  0100               	movlb	0	; () banked
 14687  006910  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14688  006912  0E2B               	movlw	low _cmdbuf
 14689  006914  6F60               	movwf	?_strcpy& (0+255),b
 14690  006916  0E35               	movlw	low (_cmdbuf+10)
 14691  006918  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14692  00691A  0E01               	movlw	high (_cmdbuf+10)
 14693  00691C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14694  00691E  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14695  006922  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14696  006926  ECE5  F00A         	call	_strcpy	;wreg free
 14697                           
 14698                           ; BSR set to: 0
 14699                           ;main.c: 1069: rwtimeout = atoi(cmdbuf);
 14700  00692A  0E01               	movlw	high _cmdbuf
 14701  00692C  0100               	movlb	0	; () banked
 14702  00692E  6F67               	movwf	(?_atoi+1)& (0+255),b
 14703  006930  0E2B               	movlw	low _cmdbuf
 14704  006932  6F66               	movwf	?_atoi& (0+255),b
 14705  006934  ECE4  F018         	call	_atoi	;wreg free
 14706  006938  5166               	movf	?_atoi& (0+255),w,b
 14707  00693A  6E35               	movwf	_rwtimeout,c
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;main.c: 1070: if (rwtimeout < 20u) {
 14711  00693C  0E14               	movlw	20
 14712  00693E  6035               	cpfslt	_rwtimeout,c
 14713  006940  D001               	goto	l14336
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;main.c: 1071: rwtimeout = 20u;
 14717  006942  6E35               	movwf	_rwtimeout,c
 14718  006944                     l14336:
 14719                           
 14720                           ; BSR set to: 0
 14721                           ;main.c: 1072: }
 14722                           ;main.c: 1073: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14723  006944  EC5C  F00A         	call	_Busy_eep	;wreg free
 14724  006948  0100               	movlb	0	; () banked
 14725  00694A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14726  00694C  0E09               	movlw	9
 14727  00694E  6F60               	movwf	?_Write_b_eep& (0+255),b
 14728  006950  C035  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14729  006954  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14730                           
 14731                           ;main.c: 1074: putsUSART((char *) "+OK\r\n");
 14732  006958  0E7C               	movlw	high STR_9
 14733  00695A  0100               	movlb	0	; () banked
 14734  00695C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14735  00695E  0E6E               	movlw	low STR_9
 14736  006960  6F61               	movwf	?_putsUSART& (0+255),b
 14737  006962  EC33  F00D         	call	_putsUSART	;wreg free
 14738                           
 14739                           ;main.c: 1075: }
 14740  006966  D0D3               	goto	l14390
 14741  006968                     l14340:
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;main.c: 1076: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14745  006968  0E01               	movlw	high _cmdbuf
 14746  00696A  0100               	movlb	0	; () banked
 14747  00696C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14748  00696E  0E2B               	movlw	low _cmdbuf
 14749  006970  6F6D               	movwf	?_stristr& (0+255),b
 14750  006972  0E7B               	movlw	high STR_134
 14751  006974  6F70               	movwf	(?_stristr+3)& (0+255),b
 14752  006976  0EA1               	movlw	low STR_134
 14753  006978  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14754  00697A  EC59  F00F         	call	_stristr	;wreg free
 14755  00697E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14756  006980  116D               	iorwf	?_stristr& (0+255),w,b
 14757  006982  E005               	bz	l14344
 14758                           
 14759                           ; BSR set to: 0
 14760                           ;main.c: 1077: strcpy(cmdbuf, cmdbuf + 8);
 14761  006984  0E01               	movlw	high _cmdbuf
 14762  006986  D8EF               	call	PL8	;call to abstracted procedure
 14763  006988  ECE5  F00A         	call	_strcpy	;wreg free
 14764                           
 14765                           ;main.c: 1078: }
 14766  00698C  D0C0               	goto	l14390
 14767  00698E                     l14344:
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;main.c: 1079: else if (0 != stristr(cmdbuf, "MODE ")) {
 14771  00698E  0E01               	movlw	high _cmdbuf
 14772  006990  0100               	movlb	0	; () banked
 14773  006992  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14774  006994  0E2B               	movlw	low _cmdbuf
 14775  006996  6F6D               	movwf	?_stristr& (0+255),b
 14776  006998  0E7C               	movlw	high STR_135
 14777  00699A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14778  00699C  0E7A               	movlw	low STR_135
 14779  00699E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14780  0069A0  EC59  F00F         	call	_stristr	;wreg free
 14781  0069A4  516E               	movf	(?_stristr+1)& (0+255),w,b
 14782  0069A6  116D               	iorwf	?_stristr& (0+255),w,b
 14783  0069A8  E068               	bz	l14374
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;main.c: 1080: strcpy(cmdbuf, cmdbuf + 5);
 14787  0069AA  D8C8               	call	PL4	;call to abstracted procedure
 14788  0069AC  ECE5  F00A         	call	_strcpy	;wreg free
 14789                           
 14790                           ; BSR set to: 0
 14791                           ;main.c: 1081: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14792  0069B0  0E01               	movlw	high _cmdbuf
 14793  0069B2  0100               	movlb	0	; () banked
 14794  0069B4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14795  0069B6  0E2B               	movlw	low _cmdbuf
 14796  0069B8  6F6D               	movwf	?_stristr& (0+255),b
 14797  0069BA  0E7B               	movlw	high STR_136
 14798  0069BC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14799  0069BE  0EEC               	movlw	low STR_136
 14800  0069C0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14801  0069C2  EC59  F00F         	call	_stristr	;wreg free
 14802  0069C6  516E               	movf	(?_stristr+1)& (0+255),w,b
 14803  0069C8  116D               	iorwf	?_stristr& (0+255),w,b
 14804  0069CA  E013               	bz	l14358
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;main.c: 1082: mode = 0;
 14808  0069CC  6A32               	clrf	_mode,c
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;main.c: 1083: (Busy_eep(), Write_b_eep(0x03,0));
 14812  0069CE  EC5C  F00A         	call	_Busy_eep	;wreg free
 14813  0069D2  0100               	movlb	0	; () banked
 14814  0069D4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14815  0069D6  0E03               	movlw	3
 14816  0069D8  6F60               	movwf	?_Write_b_eep& (0+255),b
 14817  0069DA  0E00               	movlw	0
 14818  0069DC  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14819  0069DE  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14820                           
 14821                           ;main.c: 1084: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14822  0069E2  0E77               	movlw	high STR_137
 14823  0069E4  0100               	movlb	0	; () banked
 14824  0069E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14825  0069E8  0EEC               	movlw	low STR_137
 14826  0069EA  6F61               	movwf	?_putsUSART& (0+255),b
 14827  0069EC  EC33  F00D         	call	_putsUSART	;wreg free
 14828                           
 14829                           ;main.c: 1085: }
 14830  0069F0  D08E               	goto	l14390
 14831  0069F2                     l14358:
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;main.c: 1086: else if (0 != stristr(cmdbuf, "VSCP")) {
 14835  0069F2  0E01               	movlw	high _cmdbuf
 14836  0069F4  0100               	movlb	0	; () banked
 14837  0069F6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14838  0069F8  0E2B               	movlw	low _cmdbuf
 14839  0069FA  6F6D               	movwf	?_stristr& (0+255),b
 14840  0069FC  0E7C               	movlw	high STR_138
 14841  0069FE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14842  006A00  0EB5               	movlw	low STR_138
 14843  006A02  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14844  006A04  EC59  F00F         	call	_stristr	;wreg free
 14845  006A08  516E               	movf	(?_stristr+1)& (0+255),w,b
 14846  006A0A  116D               	iorwf	?_stristr& (0+255),w,b
 14847  006A0C  E014               	bz	l14366
 14848                           
 14849                           ; BSR set to: 0
 14850                           ;main.c: 1087: mode = 1;
 14851  006A0E  0E01               	movlw	1
 14852  006A10  6E32               	movwf	_mode,c
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;main.c: 1088: (Busy_eep(), Write_b_eep(0x03,1));
 14856  006A12  EC5C  F00A         	call	_Busy_eep	;wreg free
 14857  006A16  0100               	movlb	0	; () banked
 14858  006A18  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14859  006A1A  0E03               	movlw	3
 14860  006A1C  6F60               	movwf	?_Write_b_eep& (0+255),b
 14861  006A1E  0E01               	movlw	1
 14862  006A20  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14863  006A22  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14864                           
 14865                           ;main.c: 1089: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14866  006A26  0E77               	movlw	high STR_139
 14867  006A28  0100               	movlb	0	; () banked
 14868  006A2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14869  006A2C  0E71               	movlw	low STR_139
 14870  006A2E  6F61               	movwf	?_putsUSART& (0+255),b
 14871  006A30  EC33  F00D         	call	_putsUSART	;wreg free
 14872                           
 14873                           ;main.c: 1090: }
 14874  006A34  D06C               	goto	l14390
 14875  006A36                     l14366:
 14876                           
 14877                           ; BSR set to: 0
 14878                           ;main.c: 1091: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14879  006A36  0E01               	movlw	high _cmdbuf
 14880  006A38  0100               	movlb	0	; () banked
 14881  006A3A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14882  006A3C  0E2B               	movlw	low _cmdbuf
 14883  006A3E  6F6D               	movwf	?_stristr& (0+255),b
 14884  006A40  0E7C               	movlw	high STR_140
 14885  006A42  6F70               	movwf	(?_stristr+3)& (0+255),b
 14886  006A44  0E8C               	movlw	low STR_140
 14887  006A46  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14888  006A48  EC59  F00F         	call	_stristr	;wreg free
 14889  006A4C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14890  006A4E  116D               	iorwf	?_stristr& (0+255),w,b
 14891  006A50  E05E               	bz	l14390
 14892                           
 14893                           ; BSR set to: 0
 14894                           ;main.c: 1092: mode = 2;
 14895  006A52  0E02               	movlw	2
 14896  006A54  6E32               	movwf	_mode,c
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;main.c: 1093: (Busy_eep(), Write_b_eep(0x03,2));
 14900  006A56  EC5C  F00A         	call	_Busy_eep	;wreg free
 14901  006A5A  0100               	movlb	0	; () banked
 14902  006A5C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14903  006A5E  0E03               	movlw	3
 14904  006A60  6F60               	movwf	?_Write_b_eep& (0+255),b
 14905  006A62  0E02               	movlw	2
 14906  006A64  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14907  006A66  EC2C  F00B         	call	_Write_b_eep	;wreg free
 14908                           
 14909                           ;main.c: 1094: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14910  006A6A  0E78               	movlw	high STR_141
 14911  006A6C  0100               	movlb	0	; () banked
 14912  006A6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14913  006A70  0E59               	movlw	low STR_141
 14914  006A72  6F61               	movwf	?_putsUSART& (0+255),b
 14915  006A74  EC33  F00D         	call	_putsUSART	;wreg free
 14916  006A78  D04A               	goto	l14390
 14917  006A7A                     l14374:
 14918                           
 14919                           ; BSR set to: 0
 14920                           ;main.c: 1098: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14921  006A7A  0E01               	movlw	high _cmdbuf
 14922  006A7C  0100               	movlb	0	; () banked
 14923  006A7E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14924  006A80  0E2B               	movlw	low _cmdbuf
 14925  006A82  6F6D               	movwf	?_stristr& (0+255),b
 14926  006A84  0E7B               	movlw	high STR_142
 14927  006A86  6F70               	movwf	(?_stristr+3)& (0+255),b
 14928  006A88  0EDC               	movlw	low STR_142
 14929  006A8A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14930  006A8C  EC59  F00F         	call	_stristr	;wreg free
 14931  006A90  516E               	movf	(?_stristr+1)& (0+255),w,b
 14932  006A92  116D               	iorwf	?_stristr& (0+255),w,b
 14933  006A94  E010               	bz	l14378
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;main.c: 1099: strcpy(cmdbuf, cmdbuf + 7);
 14937  006A96  0E01               	movlw	high _cmdbuf
 14938  006A98  0100               	movlb	0	; () banked
 14939  006A9A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14940  006A9C  0E2B               	movlw	low _cmdbuf
 14941  006A9E  6F60               	movwf	?_strcpy& (0+255),b
 14942  006AA0  0E32               	movlw	low (_cmdbuf+7)
 14943  006AA2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14944  006AA4  0E01               	movlw	high (_cmdbuf+7)
 14945  006AA6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14946  006AA8  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14947  006AAC  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14948  006AB0  ECE5  F00A         	call	_strcpy	;wreg free
 14949                           
 14950                           ;main.c: 1100: }
 14951  006AB4  D02C               	goto	l14390
 14952  006AB6                     l14378:
 14953                           
 14954                           ; BSR set to: 0
 14955                           ;main.c: 1102: else if (0 != stristr(cmdbuf, "MASK ")) {
 14956  006AB6  0E01               	movlw	high _cmdbuf
 14957  006AB8  0100               	movlb	0	; () banked
 14958  006ABA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14959  006ABC  0E2B               	movlw	low _cmdbuf
 14960  006ABE  6F6D               	movwf	?_stristr& (0+255),b
 14961  006AC0  0E7C               	movlw	high STR_143
 14962  006AC2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14963  006AC4  0E80               	movlw	low STR_143
 14964  006AC6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14965  006AC8  EC59  F00F         	call	_stristr	;wreg free
 14966  006ACC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14967  006ACE  116D               	iorwf	?_stristr& (0+255),w,b
 14968  006AD0  E004               	bz	l14382
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 1103: strcpy(cmdbuf, cmdbuf + 5);
 14972  006AD2  D834               	call	PL4	;call to abstracted procedure
 14973  006AD4  ECE5  F00A         	call	_strcpy	;wreg free
 14974                           
 14975                           ;main.c: 1104: }
 14976  006AD8  D01A               	goto	l14390
 14977  006ADA                     l14382:
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;main.c: 1105: else {
 14981                           ;main.c: 1106: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14982  006ADA  0E77               	movlw	high STR_144
 14983  006ADC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14984  006ADE  0E2F               	movlw	low STR_144
 14985  006AE0  6F61               	movwf	?_putsUSART& (0+255),b
 14986  006AE2  EC33  F00D         	call	_putsUSART	;wreg free
 14987  006AE6  D013               	goto	l14390
 14988  006AE8                     l14384:
 14989                           
 14990                           ; BSR set to: 0
 14991                           ;main.c: 1110: else {
 14992                           ;main.c: 1111: if ( 0x0d == cmdbuf[ 0 ] ) {
 14993  006AE8  0101               	movlb	1	; () banked
 14994  006AEA  512B               	movf	_cmdbuf& (0+255),w,b
 14995  006AEC  0A0D               	xorlw	13
 14996  006AEE  E108               	bnz	l14388
 14997                           
 14998                           ; BSR set to: 1
 14999                           ;main.c: 1112: putsUSART((char *) "+OK\r\n");
 15000  006AF0  0E7C               	movlw	high STR_9
 15001  006AF2  0100               	movlb	0	; () banked
 15002  006AF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15003  006AF6  0E6E               	movlw	low STR_9
 15004  006AF8  6F61               	movwf	?_putsUSART& (0+255),b
 15005  006AFA  EC33  F00D         	call	_putsUSART	;wreg free
 15006                           
 15007                           ;main.c: 1113: }
 15008  006AFE  D007               	goto	l14390
 15009  006B00                     l14388:
 15010                           
 15011                           ; BSR set to: 1
 15012                           ;main.c: 1114: else {
 15013                           ;main.c: 1115: putsUSART((char *) "-ERROR - Unknown command\r\n");
 15014  006B00  0E78               	movlw	high STR_146
 15015  006B02  0100               	movlb	0	; () banked
 15016  006B04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15017  006B06  0E23               	movlw	low STR_146
 15018  006B08  6F61               	movwf	?_putsUSART& (0+255),b
 15019  006B0A  EC33  F00D         	call	_putsUSART	;wreg free
 15020  006B0E                     l14390:
 15021                           
 15022                           ;main.c: 1116: }
 15023                           ;main.c: 1117: }
 15024                           ;main.c: 1119: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 15025  006B0E  0E01               	movlw	high _cmdbuf
 15026  006B10  0100               	movlb	0	; () banked
 15027  006B12  6F61               	movwf	(?_memset+1)& (0+255),b
 15028  006B14  0E2B               	movlw	low _cmdbuf
 15029  006B16  6F60               	movwf	?_memset& (0+255),b
 15030  006B18  6B63               	clrf	(?_memset+3)& (0+255),b
 15031  006B1A  6B62               	clrf	(?_memset+2)& (0+255),b
 15032  006B1C  6B65               	clrf	(?_memset+5)& (0+255),b
 15033  006B1E  0E50               	movlw	80
 15034  006B20  6F64               	movwf	(?_memset+4)& (0+255),b
 15035  006B22  ECCE  F00A         	call	_memset	;wreg free
 15036                           
 15037                           ; BSR set to: 0
 15038                           ;main.c: 1120: pos = 0;
 15039  006B26  6A34               	clrf	_pos,c
 15040  006B28                     l14394:
 15041                           
 15042                           ;main.c: 1121: }
 15043                           ;main.c: 1122: }
 15044                           ;main.c: 1125: (INTCONbits.GIE = 1);
 15045  006B28  8EF2               	bsf	intcon,7,c	;volatile
 15046  006B2A                     l544:
 15047  006B2A  0012               	return	
 15048  006B2C                     __end_of_doModeVerbose:
 15049                           	opt stack 0
 15050  006B2C                     PL2:
 15051                           	opt stack 19
 15052  006B2C  0100               	movlb	0	; () banked
 15053  006B2E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15054  006B30  6B6C               	clrf	?_strtok& (0+255),b
 15055  006B32  0E7C               	movlw	high STR_30
 15056  006B34  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15057  006B36  0EF4               	movlw	low STR_30
 15058  006B38  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15059  006B3A  0012               	return	
 15060  006B3C                     __end_ofPL2:
 15061                           	opt stack 0
 15062  006B3C                     PL4:
 15063                           	opt stack 19
 15064  006B3C  0E01               	movlw	high _cmdbuf
 15065  006B3E  0100               	movlb	0	; () banked
 15066  006B40  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15067  006B42  0E2B               	movlw	low _cmdbuf
 15068  006B44  6F60               	movwf	?_strcpy& (0+255),b
 15069  006B46  0E30               	movlw	low (_cmdbuf+5)
 15070  006B48  6FCA               	movwf	??_doModeVerbose& (0+255),b
 15071  006B4A  0E01               	movlw	high (_cmdbuf+5)
 15072  006B4C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 15073  006B4E  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 15074  006B52  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15075  006B56  0012               	return	
 15076  006B58                     __end_ofPL4:
 15077                           	opt stack 0
 15078  006B58                     PL6:
 15079                           	opt stack 19
 15080  006B58  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15081  006B5A  6B6C               	clrf	?_strtok& (0+255),b
 15082  006B5C  0E7C               	movlw	high STR_30
 15083  006B5E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15084  006B60  0EF4               	movlw	low STR_30
 15085  006B62  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15086  006B64  0012               	return	
 15087  006B66                     __end_ofPL6:
 15088                           	opt stack 0
 15089  006B66                     PL8:
 15090                           	opt stack 19
 15091  006B66  0100               	movlb	0	; () banked
 15092  006B68  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15093  006B6A  0E2B               	movlw	low _cmdbuf
 15094  006B6C  6F60               	movwf	?_strcpy& (0+255),b
 15095  006B6E  0E33               	movlw	low (_cmdbuf+8)
 15096  006B70  6FCA               	movwf	??_doModeVerbose& (0+255),b
 15097  006B72  0E01               	movlw	high (_cmdbuf+8)
 15098  006B74  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 15099  006B76  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 15100  006B7A  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15101  006B7E  0012               	return	
 15102  006B80                     __end_ofPL8:
 15103                           	opt stack 0
 15104  006B80                     PL10:
 15105                           	opt stack 19
 15106  006B80  6BD3               	clrf	(??_doModeVerbose+9)& (0+255),b
 15107  006B82  6BD4               	clrf	(??_doModeVerbose+10)& (0+255),b
 15108  006B84  6BD5               	clrf	(??_doModeVerbose+11)& (0+255),b
 15109  006B86  0E1A               	movlw	26
 15110  006B88                     u18915:
 15111  006B88  90D8               	bcf	status,0,c
 15112  006B8A  37D2               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 15113  006B8C  37D3               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 15114  006B8E  37D4               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 15115  006B90  37D5               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 15116  006B92  2EE8               	decfsz	wreg,f,c
 15117  006B94  D7F9               	goto	u18915
 15118  006B96  51CE               	movf	(??_doModeVerbose+4)& (0+255),w,b
 15119  006B98  11D2               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 15120  006B9A  6FD6               	movwf	(??_doModeVerbose+12)& (0+255),b
 15121  006B9C  51CF               	movf	(??_doModeVerbose+5)& (0+255),w,b
 15122  006B9E  11D3               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 15123  006BA0  6FD7               	movwf	(??_doModeVerbose+13)& (0+255),b
 15124  006BA2  51D0               	movf	(??_doModeVerbose+6)& (0+255),w,b
 15125  006BA4  11D4               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 15126  006BA6  6FD8               	movwf	(??_doModeVerbose+14)& (0+255),b
 15127  006BA8  51D1               	movf	(??_doModeVerbose+7)& (0+255),w,b
 15128  006BAA  11D5               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 15129  006BAC  6FD9               	movwf	(??_doModeVerbose+15)& (0+255),b
 15130  006BAE  51CA               	movf	??_doModeVerbose& (0+255),w,b
 15131  006BB0  11D6               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 15132  006BB2  6FDA               	movwf	(??_doModeVerbose+16)& (0+255),b
 15133  006BB4  51CB               	movf	(??_doModeVerbose+1)& (0+255),w,b
 15134  006BB6  11D7               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 15135  006BB8  6FDB               	movwf	(??_doModeVerbose+17)& (0+255),b
 15136  006BBA  51CC               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15137  006BBC  11D8               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15138  006BBE  6FDC               	movwf	(??_doModeVerbose+18)& (0+255),b
 15139  006BC0  51CD               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15140  006BC2  11D9               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15141  006BC4  6FDD               	movwf	(??_doModeVerbose+19)& (0+255),b
 15142  006BC6  0102               	movlb	2	; () banked
 15143  006BC8  0012               	return	
 15144  006BCA                     __end_ofPL10:
 15145                           	opt stack 0
 15146  006BCA                     PL24:
 15147                           	opt stack 19
 15148  006BCA  0100               	movlb	0	; () banked
 15149  006BCC  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15150  006BCE  6B6C               	clrf	?_strtok& (0+255),b
 15151  006BD0  0E7B               	movlw	high (STR_56+8)
 15152  006BD2  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15153  006BD4  0E81               	movlw	low (STR_56+8)
 15154  006BD6  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15155  006BD8  0012               	return	
 15156  006BDA                     __end_ofPL24:
 15157                           	opt stack 0
 15158  006BDA                     PL30:
 15159                           	opt stack 19
 15160  006BDA  0E01               	movlw	high _cmdbuf
 15161  006BDC  0100               	movlb	0	; () banked
 15162  006BDE  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15163  006BE0  0E2B               	movlw	low _cmdbuf
 15164  006BE2  6F6C               	movwf	?_strtok& (0+255),b
 15165  006BE4  0E7C               	movlw	high STR_30
 15166  006BE6  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15167  006BE8  0EF4               	movlw	low STR_30
 15168  006BEA  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15169  006BEC  0012               	return	
 15170  006BEE                     __end_ofPL30:
 15171                           	opt stack 0
 15172  006BEE                     PL32:
 15173                           	opt stack 19
 15174  006BEE  0100               	movlb	0	; () banked
 15175  006BF0  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15176  006BF2  0E2B               	movlw	low _cmdbuf
 15177  006BF4  6F6C               	movwf	?_strtok& (0+255),b
 15178  006BF6  0E7B               	movlw	high (STR_56+8)
 15179  006BF8  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15180  006BFA  0E81               	movlw	low (STR_56+8)
 15181  006BFC  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15182  006BFE  0012               	return	
 15183  006C00                     __end_ofPL32:
 15184                           	opt stack 0
 15185  006C00                     PL36:
 15186                           	opt stack 19
 15187  006C00  0102               	movlb	2	; () banked
 15188  006C02  51B8               	movf	doModeVerbose@i_1181& (0+255),w,b
 15189  006C04  C2B5  F0CA         	movff	doModeVerbose@reg,??_doModeVerbose
 15190  006C08  0100               	movlb	0	; () banked
 15191  006C0A  6BCB               	clrf	(??_doModeVerbose+1)& (0+255),b
 15192  006C0C  27CA               	addwf	??_doModeVerbose& (0+255),f,b
 15193  006C0E  0E00               	movlw	0
 15194  006C10  23CB               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15195  006C12  51CA               	movf	??_doModeVerbose& (0+255),w,b
 15196  006C14  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15197  006C16  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15198  006C18  0012               	return	
 15199  006C1A                     __end_ofPL36:
 15200                           	opt stack 0
 15201  006C1A                     PL38:
 15202                           	opt stack 19
 15203  006C1A  0100               	movlb	0	; () banked
 15204  006C1C  6BCB               	clrf	(??_doModeVerbose+1)& (0+255),b
 15205  006C1E  6BCC               	clrf	(??_doModeVerbose+2)& (0+255),b
 15206  006C20  6BCD               	clrf	(??_doModeVerbose+3)& (0+255),b
 15207  006C22  C0CC  F0CD         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15208  006C26  C0CB  F0CC         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15209  006C2A  C0CA  F0CB         	movff	??_doModeVerbose,??_doModeVerbose+1
 15210  006C2E  6BCA               	clrf	??_doModeVerbose& (0+255),b
 15211  006C30  0102               	movlb	2	; () banked
 15212  006C32  0012               	return	
 15213  006C34                     __end_ofPL38:
 15214                           	opt stack 0
 15215  006C34                     PL50:
 15216                           	opt stack 19
 15217  006C34  6F60               	movwf	?__CANIDToRegs& (0+255),b
 15218  006C36  C2A9  F062         	movff	doModeVerbose@id_1306,?__CANIDToRegs+2
 15219  006C3A  C2AA  F063         	movff	doModeVerbose@id_1306+1,?__CANIDToRegs+3
 15220  006C3E  C2AB  F064         	movff	doModeVerbose@id_1306+2,?__CANIDToRegs+4
 15221  006C42  C2AC  F065         	movff	doModeVerbose@id_1306+3,?__CANIDToRegs+5
 15222  006C46  0E01               	movlw	1
 15223  006C48  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15224  006C4A  0C01               	retlw	1
 15225  006C4C                     __end_ofPL50:
 15226                           	opt stack 0
 15227  006C4C                     PL56:
 15228                           	opt stack 19
 15229  006C4C  0100               	movlb	0	; () banked
 15230  006C4E  6FCF               	movwf	(??_doModeVerbose+5)& (0+255),b
 15231  006C50  6BD0               	clrf	(??_doModeVerbose+6)& (0+255),b
 15232  006C52  6BD1               	clrf	(??_doModeVerbose+7)& (0+255),b
 15233  006C54  C0CF  F0D1         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15234  006C58  C0CE  F0D0         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15235  006C5C  6BCF               	clrf	(??_doModeVerbose+5)& (0+255),b
 15236  006C5E  6BCE               	clrf	(??_doModeVerbose+4)& (0+255),b
 15237  006C60  0012               	return	
 15238  006C62                     __end_ofPL56:
 15239                           	opt stack 0
 15240                           tblptru	equ	0xFF8
 15241                           tblptrh	equ	0xFF7
 15242                           tblptrl	equ	0xFF6
 15243                           tablat	equ	0xFF5
 15244                           prodh	equ	0xFF4
 15245                           prodl	equ	0xFF3
 15246                           intcon	equ	0xFF2
 15247                           indf0	equ	0xFEF
 15248                           postinc0	equ	0xFEE
 15249                           fsr0h	equ	0xFEA
 15250                           fsr0l	equ	0xFE9
 15251                           wreg	equ	0xFE8
 15252                           indf1	equ	0xFE7
 15253                           postinc1	equ	0xFE6
 15254                           postdec1	equ	0xFE5
 15255                           fsr1h	equ	0xFE2
 15256                           fsr1l	equ	0xFE1
 15257                           indf2	equ	0xFDF
 15258                           postinc2	equ	0xFDE
 15259                           postdec2	equ	0xFDD
 15260                           plusw2	equ	0xFDB
 15261                           fsr2h	equ	0xFDA
 15262                           fsr2l	equ	0xFD9
 15263                           status	equ	0xFD8
 15264                           
 15265 ;; *************** function _setFilter *****************
 15266 ;; Defined at:
 15267 ;;		line 2853 in file "main.c"
 15268 ;; Parameters:    Size  Location     Type
 15269 ;;  filter          1    wreg     unsigned char 
 15270 ;;  val             4    0[BANK0 ] unsigned long 
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;  filter          1   10[BANK0 ] unsigned char 
 15273 ;;  eidl            1   14[BANK0 ] unsigned char 
 15274 ;;  eidh            1   13[BANK0 ] unsigned char 
 15275 ;;  sidl            1   12[BANK0 ] unsigned char 
 15276 ;;  sidh            1   11[BANK0 ] unsigned char 
 15277 ;; Return value:  Size  Location     Type
 15278 ;;		None               void
 15279 ;; Registers used:
 15280 ;;		wreg, status,2, status,0
 15281 ;; Tracked objects:
 15282 ;;		On entry : F/2
 15283 ;;		On exit  : F/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15286 ;;      Params:         0       4       0       0       0       0       0
 15287 ;;      Locals:         0       5       0       0       0       0       0
 15288 ;;      Temps:          0       6       0       0       0       0       0
 15289 ;;      Totals:         0      15       0       0       0       0       0
 15290 ;;Total ram usage:       15 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; Hardware stack levels required when called:    3
 15293 ;; This function calls:
 15294 ;;		Nothing
 15295 ;; This function is called by:
 15296 ;;		_doModeVerbose
 15297 ;; This function uses a non-reentrant model
 15298 ;;
 15299                           
 15300                           	psect	text23
 15301  0042AC                     __ptext23:
 15302                           	opt stack 0
 15303  0042AC                     _setFilter:
 15304                           	opt stack 25
 15305                           
 15306                           ;incstack = 0
 15307                           ;incstack = 0
 15308                           ;setFilter@filter stored from wreg
 15309  0042AC  CFE8 F06A          	movff	wreg,setFilter@filter
 15310                           
 15311                           ; BSR set to: 2
 15312                           ;main.c: 2854: uint8_t sidh = (long) val >> 21L;
 15313  0042B0  0E15               	movlw	21
 15314  0042B2  0100               	movlb	0	; () banked
 15315  0042B4  6F64               	movwf	??_setFilter& (0+255),b
 15316  0042B6  C060  F065         	movff	setFilter@val,??_setFilter+1
 15317  0042BA  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 15318  0042BE  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 15319  0042C2  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 15320  0042C6                     u15985:
 15321  0042C6  6764               	tstfsz	??_setFilter& (0+255),b
 15322  0042C8  D001               	goto	u15986
 15323  0042CA  D007               	goto	u15987
 15324  0042CC                     u15986:
 15325  0042CC  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 15326  0042CE  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15327  0042D0  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15328  0042D2  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15329  0042D4  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 15330  0042D6  2F64               	decfsz	??_setFilter& (0+255),f,b
 15331  0042D8  D7F6               	goto	u15985
 15332  0042DA                     u15987:
 15333  0042DA  5165               	movf	(??_setFilter+1)& (0+255),w,b
 15334  0042DC  6F6B               	movwf	setFilter@sidh& (0+255),b
 15335                           
 15336                           ;main.c: 2855: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 15337                           ;main.c: 2856: ((long) (val) & 0x03L) |
 15338                           ;main.c: 2857: 0x08;
 15339  0042DE  C060  F064         	movff	setFilter@val,??_setFilter
 15340  0042E2  0E03               	movlw	3
 15341  0042E4  1764               	andwf	??_setFilter& (0+255),f,b
 15342  0042E6  0E0D               	movlw	13
 15343  0042E8  6F65               	movwf	(??_setFilter+1)& (0+255),b
 15344  0042EA  C060  F066         	movff	setFilter@val,??_setFilter+2
 15345  0042EE  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 15346  0042F2  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 15347  0042F6  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 15348  0042FA                     u15995:
 15349  0042FA  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 15350  0042FC  D001               	goto	u15996
 15351  0042FE  D007               	goto	u15997
 15352  004300                     u15996:
 15353  004300  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 15354  004302  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 15355  004304  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15356  004306  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15357  004308  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15358  00430A  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 15359  00430C  D7F6               	goto	u15995
 15360  00430E                     u15997:
 15361  00430E  5166               	movf	(??_setFilter+2)& (0+255),w,b
 15362  004310  0BE0               	andlw	224
 15363  004312  1164               	iorwf	??_setFilter& (0+255),w,b
 15364  004314  0908               	iorlw	8
 15365  004316  6F6C               	movwf	setFilter@sidl& (0+255),b
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;main.c: 2858: uint8_t eidh = (long) val >> 8L;
 15369  004318  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15370                           
 15371                           ; BSR set to: 0
 15372                           ;main.c: 2859: uint8_t eidl = val;
 15373  00431C  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15374                           
 15375                           ;main.c: 2861: switch (filter) {
 15376  004320  D090               	goto	l12490
 15377  004322                     l1270:
 15378                           
 15379                           ; BSR set to: 0
 15380                           ;main.c: 2864: RXF0SIDH = sidh;
 15381  004322  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15382                           
 15383                           ;main.c: 2865: RXF0SIDL = sidl;
 15384  004326  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15385                           
 15386                           ;main.c: 2866: RXF0EIDH = eidh;
 15387  00432A  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15388                           
 15389                           ;main.c: 2867: RXF0EIDL = eidl;
 15390  00432E  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15391                           
 15392                           ;main.c: 2868: break;
 15393  004332  D0AA               	goto	l1287
 15394  004334                     l1272:
 15395                           
 15396                           ; BSR set to: 0
 15397                           ;main.c: 2871: RXF1SIDH = sidh;
 15398  004334  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15399                           
 15400                           ;main.c: 2872: RXF1SIDL = sidl;
 15401  004338  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15402                           
 15403                           ;main.c: 2873: RXF1EIDH = eidh;
 15404  00433C  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15405                           
 15406                           ;main.c: 2874: RXF1EIDL = eidl;
 15407  004340  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15408                           
 15409                           ;main.c: 2875: break;
 15410  004344  D0A1               	goto	l1287
 15411  004346                     l1273:
 15412                           
 15413                           ; BSR set to: 0
 15414                           ;main.c: 2878: RXF2SIDH = sidh;
 15415  004346  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15416                           
 15417                           ;main.c: 2879: RXF2SIDL = sidl;
 15418  00434A  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15419                           
 15420                           ;main.c: 2880: RXF2EIDH = eidh;
 15421  00434E  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15422                           
 15423                           ;main.c: 2881: RXF2EIDL = eidl;
 15424  004352  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15425                           
 15426                           ;main.c: 2882: break;
 15427  004356  D098               	goto	l1287
 15428  004358                     l1274:
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;main.c: 2885: RXF3SIDH = sidh;
 15432  004358  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15433                           
 15434                           ;main.c: 2886: RXF3SIDL = sidl;
 15435  00435C  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15436                           
 15437                           ;main.c: 2887: RXF3EIDH = eidh;
 15438  004360  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15439                           
 15440                           ;main.c: 2888: RXF3EIDL = eidl;
 15441  004364  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15442                           
 15443                           ;main.c: 2889: break;
 15444  004368  D08F               	goto	l1287
 15445  00436A                     l1275:
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;main.c: 2892: RXF4SIDH = sidh;
 15449  00436A  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15450                           
 15451                           ;main.c: 2893: RXF4SIDL = sidl;
 15452  00436E  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15453                           
 15454                           ;main.c: 2894: RXF4EIDH = eidh;
 15455  004372  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15456                           
 15457                           ;main.c: 2895: RXF4EIDL = eidl;
 15458  004376  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15459                           
 15460                           ;main.c: 2896: break;
 15461  00437A  D086               	goto	l1287
 15462  00437C                     l1276:
 15463                           
 15464                           ; BSR set to: 0
 15465                           ;main.c: 2899: RXF5SIDH = sidh;
 15466  00437C  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15467                           
 15468                           ;main.c: 2900: RXF5SIDL = sidl;
 15469  004380  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15470                           
 15471                           ;main.c: 2901: RXF5EIDH = eidh;
 15472  004384  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15473                           
 15474                           ;main.c: 2902: RXF5EIDL = eidl;
 15475  004388  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15476                           
 15477                           ;main.c: 2903: break;
 15478  00438C  D07D               	goto	l1287
 15479  00438E                     l1277:
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;main.c: 2906: RXF6SIDH = sidh;
 15483  00438E  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15484                           
 15485                           ;main.c: 2907: RXF6SIDL = sidl;
 15486  004392  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15487                           
 15488                           ;main.c: 2908: RXF6EIDH = eidh;
 15489  004396  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15490                           
 15491                           ;main.c: 2909: RXF6EIDL = eidl;
 15492  00439A  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15493                           
 15494                           ;main.c: 2910: break;
 15495  00439E  D074               	goto	l1287
 15496  0043A0                     l1278:
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;main.c: 2913: RXF7SIDH = sidh;
 15500  0043A0  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15501                           
 15502                           ;main.c: 2914: RXF7SIDL = sidl;
 15503  0043A4  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15504                           
 15505                           ;main.c: 2915: RXF7EIDH = eidh;
 15506  0043A8  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15507                           
 15508                           ;main.c: 2916: RXF7EIDL = eidl;
 15509  0043AC  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15510                           
 15511                           ;main.c: 2917: break;
 15512  0043B0  D06B               	goto	l1287
 15513  0043B2                     l1279:
 15514                           
 15515                           ; BSR set to: 0
 15516                           ;main.c: 2920: RXF8SIDH = sidh;
 15517  0043B2  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15518                           
 15519                           ;main.c: 2921: RXF8SIDL = sidl;
 15520  0043B6  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15521                           
 15522                           ;main.c: 2922: RXF8EIDH = eidh;
 15523  0043BA  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15524                           
 15525                           ;main.c: 2923: RXF8EIDL = eidl;
 15526  0043BE  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15527                           
 15528                           ;main.c: 2924: break;
 15529  0043C2  D062               	goto	l1287
 15530  0043C4                     l1280:
 15531                           
 15532                           ; BSR set to: 0
 15533                           ;main.c: 2927: RXF9SIDH = sidh;
 15534  0043C4  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15535                           
 15536                           ;main.c: 2928: RXF9SIDL = sidl;
 15537  0043C8  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15538                           
 15539                           ;main.c: 2929: RXF9EIDH = eidh;
 15540  0043CC  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15541                           
 15542                           ;main.c: 2930: RXF9EIDL = eidl;
 15543  0043D0  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15544                           
 15545                           ;main.c: 2931: break;
 15546  0043D4  D059               	goto	l1287
 15547  0043D6                     l1281:
 15548                           
 15549                           ; BSR set to: 0
 15550                           ;main.c: 2934: RXF10SIDH = sidh;
 15551  0043D6  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15552                           
 15553                           ;main.c: 2935: RXF10SIDL = sidl;
 15554  0043DA  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15555                           
 15556                           ;main.c: 2936: RXF10EIDH = eidh;
 15557  0043DE  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15558                           
 15559                           ;main.c: 2937: RXF10EIDL = eidl;
 15560  0043E2  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15561                           
 15562                           ;main.c: 2938: break;
 15563  0043E6  D050               	goto	l1287
 15564  0043E8                     l1282:
 15565                           
 15566                           ; BSR set to: 0
 15567                           ;main.c: 2941: RXF11SIDH = sidh;
 15568  0043E8  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15569                           
 15570                           ;main.c: 2942: RXF11SIDL = sidl;
 15571  0043EC  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15572                           
 15573                           ;main.c: 2943: RXF11EIDH = eidh;
 15574  0043F0  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15575                           
 15576                           ;main.c: 2944: RXF11EIDL = eidl;
 15577  0043F4  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15578                           
 15579                           ;main.c: 2945: break;
 15580  0043F8  D047               	goto	l1287
 15581  0043FA                     l1283:
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;main.c: 2948: RXF12SIDH = sidh;
 15585  0043FA  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15586                           
 15587                           ;main.c: 2949: RXF12SIDL = sidl;
 15588  0043FE  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15589                           
 15590                           ;main.c: 2950: RXF12EIDH = eidh;
 15591  004402  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15592                           
 15593                           ;main.c: 2951: RXF12EIDL = eidl;
 15594  004406  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15595                           
 15596                           ;main.c: 2952: break;
 15597  00440A  D03E               	goto	l1287
 15598  00440C                     l1284:
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;main.c: 2955: RXF13SIDH = sidh;
 15602  00440C  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15603                           
 15604                           ;main.c: 2956: RXF13SIDL = sidl;
 15605  004410  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15606                           
 15607                           ;main.c: 2957: RXF13EIDH = eidh;
 15608  004414  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15609                           
 15610                           ;main.c: 2958: RXF13EIDL = eidl;
 15611  004418  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15612                           
 15613                           ;main.c: 2959: break;
 15614  00441C  D035               	goto	l1287
 15615  00441E                     l1285:
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;main.c: 2962: RXF14SIDH = sidh;
 15619  00441E  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15620                           
 15621                           ;main.c: 2963: RXF14SIDL = sidl;
 15622  004422  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15623                           
 15624                           ;main.c: 2964: RXF14EIDH = eidh;
 15625  004426  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15626                           
 15627                           ;main.c: 2965: RXF14EIDL = eidl;
 15628  00442A  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15629                           
 15630                           ;main.c: 2966: break;
 15631  00442E  D02C               	goto	l1287
 15632  004430                     l1286:
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;main.c: 2969: RXF15SIDH = sidh;
 15636  004430  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15637                           
 15638                           ;main.c: 2970: RXF15SIDL = sidl;
 15639  004434  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15640                           
 15641                           ;main.c: 2971: RXF15EIDH = eidh;
 15642  004438  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15643                           
 15644                           ;main.c: 2972: RXF15EIDL = eidl;
 15645  00443C  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15646                           
 15647                           ;main.c: 2973: break;
 15648  004440  D023               	goto	l1287
 15649  004442                     l12490:
 15650                           
 15651                           ; BSR set to: 0
 15652  004442  516A               	movf	setFilter@filter& (0+255),w,b
 15653                           
 15654                           ; Switch size 1, requested type "space"
 15655                           ; Number of cases is 16, Range of values is 0 to 15
 15656                           ; switch strategies available:
 15657                           ; Name         Instructions Cycles
 15658                           ; simple_byte           49    25 (average)
 15659                           ;	Chosen strategy is simple_byte
 15660  004444  E101 D76D          	bz	l1270
 15661  004448  0A01               	xorlw	1	; case 1
 15662  00444A  E101 D773          	bz	l1272
 15663  00444E  0A03               	xorlw	3	; case 2
 15664  004450  E101 D779          	bz	l1273
 15665  004454  0A01               	xorlw	1	; case 3
 15666  004456  E080               	bz	l1274
 15667  004458  0A07               	xorlw	7	; case 4
 15668  00445A  E087               	bz	l1275
 15669  00445C  0A01               	xorlw	1	; case 5
 15670  00445E  E08E               	bz	l1276
 15671  004460  0A03               	xorlw	3	; case 6
 15672  004462  E095               	bz	l1277
 15673  004464  0A01               	xorlw	1	; case 7
 15674  004466  E09C               	bz	l1278
 15675  004468  0A0F               	xorlw	15	; case 8
 15676  00446A  E0A3               	bz	l1279
 15677  00446C  0A01               	xorlw	1	; case 9
 15678  00446E  E0AA               	bz	l1280
 15679  004470  0A03               	xorlw	3	; case 10
 15680  004472  E0B1               	bz	l1281
 15681  004474  0A01               	xorlw	1	; case 11
 15682  004476  E0B8               	bz	l1282
 15683  004478  0A07               	xorlw	7	; case 12
 15684  00447A  E0BF               	bz	l1283
 15685  00447C  0A01               	xorlw	1	; case 13
 15686  00447E  E0C6               	bz	l1284
 15687  004480  0A03               	xorlw	3	; case 14
 15688  004482  E0CD               	bz	l1285
 15689  004484  0A01               	xorlw	1	; case 15
 15690  004486  E0D4               	bz	l1286
 15691  004488                     l1287:
 15692                           
 15693                           ; BSR set to: 0
 15694  004488  0012               	return	
 15695  00448A                     __end_of_setFilter:
 15696                           	opt stack 0
 15697                           tblptru	equ	0xFF8
 15698                           tblptrh	equ	0xFF7
 15699                           tblptrl	equ	0xFF6
 15700                           tablat	equ	0xFF5
 15701                           prodh	equ	0xFF4
 15702                           prodl	equ	0xFF3
 15703                           intcon	equ	0xFF2
 15704                           indf0	equ	0xFEF
 15705                           postinc0	equ	0xFEE
 15706                           fsr0h	equ	0xFEA
 15707                           fsr0l	equ	0xFE9
 15708                           wreg	equ	0xFE8
 15709                           indf1	equ	0xFE7
 15710                           postinc1	equ	0xFE6
 15711                           postdec1	equ	0xFE5
 15712                           fsr1h	equ	0xFE2
 15713                           fsr1l	equ	0xFE1
 15714                           indf2	equ	0xFDF
 15715                           postinc2	equ	0xFDE
 15716                           postdec2	equ	0xFDD
 15717                           plusw2	equ	0xFDB
 15718                           fsr2h	equ	0xFDA
 15719                           fsr2l	equ	0xFD9
 15720                           status	equ	0xFD8
 15721                           
 15722 ;; *************** function _writeRegisterExtended *****************
 15723 ;; Defined at:
 15724 ;;		line 2416 in file "main.c"
 15725 ;; Parameters:    Size  Location     Type
 15726 ;;  nodeid          1    wreg     unsigned char 
 15727 ;;  page            2   86[BANK0 ] unsigned short 
 15728 ;;  reg             1   88[BANK0 ] unsigned char 
 15729 ;;  timeout         2   89[BANK0 ] unsigned short 
 15730 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15731 ;;		 -> doModeVerbose@value_1238(1), 
 15732 ;; Auto vars:     Size  Location     Type
 15733 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15734 ;; Return value:  Size  Location     Type
 15735 ;;                  1    wreg      enum E15660
 15736 ;; Registers used:
 15737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15738 ;; Tracked objects:
 15739 ;;		On entry : F/2
 15740 ;;		On exit  : E/0
 15741 ;;		Unchanged: 0/0
 15742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15743 ;;      Params:         0       7       0       0       0       0       0
 15744 ;;      Locals:         0       1       0       0       0       0       0
 15745 ;;      Temps:          0       4       0       0       0       0       0
 15746 ;;      Totals:         0      12       0       0       0       0       0
 15747 ;;Total ram usage:       12 bytes
 15748 ;; Hardware stack levels used:    1
 15749 ;; Hardware stack levels required when called:    7
 15750 ;; This function calls:
 15751 ;;		_sendVSCPFrame
 15752 ;;		_getVSCPFrame
 15753 ;; This function is called by:
 15754 ;;		_doModeVerbose
 15755 ;; This function uses a non-reentrant model
 15756 ;;
 15757                           
 15758                           	psect	text24
 15759  002EEC                     __ptext24:
 15760                           	opt stack 0
 15761  002EEC                     _writeRegisterExtended:
 15762                           	opt stack 21
 15763                           
 15764                           ; BSR set to: 0
 15765                           ;incstack = 0
 15766                           ;incstack = 0
 15767                           ;writeRegisterExtended@nodeid stored from wreg
 15768  002EEC  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15769                           
 15770                           ; BSR set to: 2
 15771                           ;main.c: 2417: vscpData[ 0 ] = nodeid;
 15772  002EF0  C0C1  F1E3         	movff	writeRegisterExtended@nodeid,_vscpData
 15773                           
 15774                           ; BSR set to: 2
 15775                           ;main.c: 2418: vscpData[ 1 ] = page >> 8;
 15776  002EF4  0100               	movlb	0	; () banked
 15777  002EF6  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15778  002EF8  0101               	movlb	1	; () banked
 15779  002EFA  6FE4               	movwf	(_vscpData+1)& (0+255),b
 15780                           
 15781                           ; BSR set to: 1
 15782                           ;main.c: 2419: vscpData[ 2 ] = page & 0xff;
 15783  002EFC  C0B6  F1E5         	movff	writeRegisterExtended@page,_vscpData+2
 15784                           
 15785                           ; BSR set to: 1
 15786                           ;main.c: 2420: vscpData[ 3 ] = reg;
 15787  002F00  C0B8  F1E6         	movff	writeRegisterExtended@reg,_vscpData+3
 15788                           
 15789                           ; BSR set to: 1
 15790                           ;main.c: 2421: vscpData[ 4 ] = *value;
 15791  002F04  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15792  002F08  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15793  002F0C  50DF               	movf	indf2,w,c
 15794  002F0E  6FE7               	movwf	(_vscpData+4)& (0+255),b
 15795                           
 15796                           ; BSR set to: 1
 15797                           ;main.c: 2423: if (sendVSCPFrame(0,
 15798                           ;main.c: 2424: 38,
 15799                           ;main.c: 2425: 0,
 15800                           ;main.c: 2426: 0,
 15801                           ;main.c: 2427: 5,
 15802                           ;main.c: 2428: vscpData)) {
 15803  002F10  0100               	movlb	0	; () banked
 15804  002F12  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15805  002F14  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15806  002F16  0E26               	movlw	38
 15807  002F18  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15808  002F1A  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15809  002F1C  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15810  002F1E  0E05               	movlw	5
 15811  002F20  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15812  002F22  0E01               	movlw	high _vscpData
 15813  002F24  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15814  002F26  0EE3               	movlw	low _vscpData
 15815  002F28  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15816  002F2A  EC73  F013         	call	_sendVSCPFrame	;wreg free
 15817  002F2E  0900               	iorlw	0
 15818  002F30  E051               	bz	l15772
 15819                           
 15820                           ;main.c: 2430: timekeeper = 0;
 15821  002F32  6A22               	clrf	_timekeeper,c	;volatile
 15822  002F34  6A23               	clrf	_timekeeper+1,c	;volatile
 15823  002F36  6A24               	clrf	_timekeeper+2,c	;volatile
 15824  002F38  6A25               	clrf	_timekeeper+3,c	;volatile
 15825                           
 15826                           ;main.c: 2431: while (timekeeper < timeout) {
 15827  002F3A  D03C               	goto	l15770
 15828  002F3C                     l1127:
 15829                           
 15830                           ; BSR set to: 0
 15831  002F3C  0004               	clrwdt		;# 
 15832                           
 15833                           ;main.c: 2435: if (getVSCPFrame(&vscpClass,
 15834                           ;main.c: 2436: &vscpType,
 15835                           ;main.c: 2437: &vscpNodeId,
 15836                           ;main.c: 2438: &vscpPriority,
 15837                           ;main.c: 2439: &vscpSize,
 15838                           ;main.c: 2440: vscpData)) {
 15839  002F3E  0E3F               	movlw	low _vscpType
 15840  002F40  0100               	movlb	0	; () banked
 15841  002F42  6F73               	movwf	?_getVSCPFrame& (0+255),b
 15842  002F44  0E3C               	movlw	low _vscpNodeId
 15843  002F46  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15844  002F48  0E3D               	movlw	low _vscpPriority
 15845  002F4A  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15846  002F4C  0E3E               	movlw	low _vscpSize
 15847  002F4E  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15848  002F50  0E01               	movlw	high _vscpData
 15849  002F52  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15850  002F54  0EE3               	movlw	low _vscpData
 15851  002F56  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15852  002F58  0E38               	movlw	_vscpClass& (0+255)
 15853  002F5A  EC14  F010         	call	_getVSCPFrame
 15854  002F5E  0900               	iorlw	0
 15855  002F60  E029               	bz	l15770
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;main.c: 2442: if ((nodeid == vscpNodeId) &&
 15859                           ;main.c: 2443: (5 == vscpSize) &&
 15860                           ;main.c: 2444: (0 == vscpData[ 0 ]) &&
 15861                           ;main.c: 2445: ((page >> 8) == vscpData[ 1 ]) &&
 15862                           ;main.c: 2446: ((page & 0xff) == vscpData[ 2 ]) &&
 15863                           ;main.c: 2447: (reg == vscpData[ 3 ]) &&
 15864                           ;main.c: 2448: (*value == vscpData[ 4 ])) {
 15865  002F62  503C               	movf	_vscpNodeId,w,c
 15866  002F64  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15867  002F66  D026               	goto	l15770
 15868                           
 15869                           ; BSR set to: 0
 15870  002F68  503E               	movf	_vscpSize,w,c
 15871  002F6A  0A05               	xorlw	5
 15872  002F6C  E123               	bnz	l15770
 15873                           
 15874                           ; BSR set to: 0
 15875  002F6E  0101               	movlb	1	; () banked
 15876  002F70  67E3               	tstfsz	_vscpData& (0+255),b
 15877  002F72  D020               	goto	l15770
 15878                           
 15879                           ; BSR set to: 1
 15880  002F74  0100               	movlb	0	; () banked
 15881  002F76  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15882  002F78  0101               	movlb	1	; () banked
 15883  002F7A  19E4               	xorwf	(_vscpData+1)& (0+255),w,b
 15884  002F7C  E11B               	bnz	l15770
 15885                           
 15886                           ; BSR set to: 1
 15887  002F7E  0100               	movlb	0	; () banked
 15888  002F80  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15889  002F82  EE21  F0E5         	lfsr	2,_vscpData+2
 15890  002F86  62DF               	cpfseq	indf2,c
 15891  002F88  D015               	goto	l15770
 15892                           
 15893                           ; BSR set to: 1
 15894  002F8A  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15895  002F8C  0101               	movlb	1	; () banked
 15896  002F8E  EE21  F0E6         	lfsr	2,_vscpData+3
 15897  002F92  62DF               	cpfseq	indf2,c
 15898  002F94  D00F               	goto	l15770
 15899                           
 15900                           ; BSR set to: 1
 15901  002F96  51E7               	movf	(_vscpData+4)& (0+255),w,b
 15902  002F98  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15903  002F9C  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15904  002FA0  62DF               	cpfseq	indf2,c
 15905  002FA2  D008               	goto	l15770
 15906                           
 15907                           ; BSR set to: 1
 15908                           ;main.c: 2449: *value = vscpData[ 1 ];
 15909  002FA4  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15910  002FA8  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15911  002FAC  C1E4  FFDF         	movff	_vscpData+1,indf2
 15912                           
 15913                           ; BSR set to: 1
 15914                           ;main.c: 2450: return 1;
 15915  002FB0  0E01               	movlw	1
 15916  002FB2  D011               	goto	l1130
 15917  002FB4                     l15770:
 15918  002FB4  0100               	movlb	0	; () banked
 15919  002FB6  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15920  002FB8  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15921  002FBA  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15922  002FBC  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15923  002FBE  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15924  002FC0  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15925  002FC2  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15926  002FC4  5C22               	subwf	_timekeeper,w,c	;volatile
 15927  002FC6  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15928  002FC8  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15929  002FCA  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15930  002FCC  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15931  002FCE  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15932  002FD0  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15933  002FD2  E3B4               	bnc	l1127
 15934  002FD4                     l15772:
 15935                           
 15936                           ;main.c: 2451: }
 15937                           ;main.c: 2453: }
 15938                           ;main.c: 2455: }
 15939                           ;main.c: 2457: }
 15940                           ;main.c: 2459: return 0;
 15941  002FD4  0E00               	movlw	0
 15942  002FD6                     l1130:
 15943  002FD6  0012               	return	
 15944  002FD8                     __end_of_writeRegisterExtended:
 15945                           	opt stack 0
 15946                           tblptru	equ	0xFF8
 15947                           tblptrh	equ	0xFF7
 15948                           tblptrl	equ	0xFF6
 15949                           tablat	equ	0xFF5
 15950                           prodh	equ	0xFF4
 15951                           prodl	equ	0xFF3
 15952                           intcon	equ	0xFF2
 15953                           indf0	equ	0xFEF
 15954                           postinc0	equ	0xFEE
 15955                           fsr0h	equ	0xFEA
 15956                           fsr0l	equ	0xFE9
 15957                           wreg	equ	0xFE8
 15958                           indf1	equ	0xFE7
 15959                           postinc1	equ	0xFE6
 15960                           postdec1	equ	0xFE5
 15961                           fsr1h	equ	0xFE2
 15962                           fsr1l	equ	0xFE1
 15963                           indf2	equ	0xFDF
 15964                           postinc2	equ	0xFDE
 15965                           postdec2	equ	0xFDD
 15966                           plusw2	equ	0xFDB
 15967                           fsr2h	equ	0xFDA
 15968                           fsr2l	equ	0xFD9
 15969                           status	equ	0xFD8
 15970                           
 15971 ;; *************** function _printBinary *****************
 15972 ;; Defined at:
 15973 ;;		line 2503 in file "main.c"
 15974 ;; Parameters:    Size  Location     Type
 15975 ;;  value           1    wreg     unsigned char 
 15976 ;; Auto vars:     Size  Location     Type
 15977 ;;  value           1    3[BANK0 ] unsigned char 
 15978 ;;  i               2    4[BANK0 ] int 
 15979 ;; Return value:  Size  Location     Type
 15980 ;;		None               void
 15981 ;; Registers used:
 15982 ;;		wreg, status,2, status,0, cstack
 15983 ;; Tracked objects:
 15984 ;;		On entry : F/2
 15985 ;;		On exit  : F/0
 15986 ;;		Unchanged: 0/0
 15987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15988 ;;      Params:         0       0       0       0       0       0       0
 15989 ;;      Locals:         0       3       0       0       0       0       0
 15990 ;;      Temps:          0       2       0       0       0       0       0
 15991 ;;      Totals:         0       5       0       0       0       0       0
 15992 ;;Total ram usage:        5 bytes
 15993 ;; Hardware stack levels used:    1
 15994 ;; Hardware stack levels required when called:    4
 15995 ;; This function calls:
 15996 ;;		_WriteUSART
 15997 ;; This function is called by:
 15998 ;;		_doModeVerbose
 15999 ;; This function uses a non-reentrant model
 16000 ;;
 16001                           
 16002                           	psect	text25
 16003  0019CE                     __ptext25:
 16004                           	opt stack 0
 16005  0019CE                     _printBinary:
 16006                           	opt stack 24
 16007                           
 16008                           ;incstack = 0
 16009                           ;incstack = 0
 16010                           ;printBinary@value stored from wreg
 16011  0019CE  CFE8 F063          	movff	wreg,printBinary@value
 16012                           
 16013                           ; BSR set to: 2
 16014                           ;main.c: 2504: int i;
 16015                           ;main.c: 2506: for (i = 7; i >= 0; i--) {
 16016  0019D2  0100               	movlb	0	; () banked
 16017  0019D4  6B65               	clrf	(printBinary@i+1)& (0+255),b
 16018  0019D6  0E07               	movlw	7
 16019  0019D8  6F64               	movwf	printBinary@i& (0+255),b
 16020  0019DA                     l15722:
 16021                           
 16022                           ; BSR set to: 0
 16023                           ;main.c: 2507: if (value & (1 << i)) {
 16024  0019DA  C064  F061         	movff	printBinary@i,??_printBinary
 16025  0019DE  0E01               	movlw	1
 16026  0019E0  6F62               	movwf	(??_printBinary+1)& (0+255),b
 16027  0019E2  2B61               	incf	??_printBinary& (0+255),f,b
 16028  0019E4  D002               	goto	u21234
 16029  0019E6                     u21235:
 16030  0019E6  90D8               	bcf	status,0,c
 16031  0019E8  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 16032  0019EA                     u21234:
 16033  0019EA  2F61               	decfsz	??_printBinary& (0+255),f,b
 16034  0019EC  D7FC               	goto	u21235
 16035  0019EE  5162               	movf	(??_printBinary+1)& (0+255),w,b
 16036  0019F0  1563               	andwf	printBinary@value& (0+255),w,b
 16037  0019F2  E006               	bz	l1150
 16038  0019F4                     l1146:
 16039  0019F4  A2AC               	btfss	4012,1,c	;volatile
 16040  0019F6  D7FE               	goto	l1146
 16041                           
 16042                           ;main.c: 2509: WriteUSART('1');
 16043  0019F8  0E31               	movlw	49
 16044  0019FA  EC7E  F00A         	call	_WriteUSART
 16045                           
 16046                           ;main.c: 2510: } else {
 16047  0019FE  D005               	goto	l15730
 16048  001A00                     l1150:
 16049  001A00  A2AC               	btfss	4012,1,c	;volatile
 16050  001A02  D7FE               	goto	l1150
 16051                           
 16052                           ;main.c: 2512: WriteUSART('0');
 16053  001A04  0E30               	movlw	48
 16054  001A06  EC7E  F00A         	call	_WriteUSART
 16055  001A0A                     l15730:
 16056  001A0A  0100               	movlb	0	; () banked
 16057  001A0C  0764               	decf	printBinary@i& (0+255),f,b
 16058  001A0E  A0D8               	btfss	status,0,c
 16059  001A10  0765               	decf	(printBinary@i+1)& (0+255),f,b
 16060                           
 16061                           ; BSR set to: 0
 16062  001A12  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 16063                           
 16064                           ; BSR set to: 0
 16065  001A14  0012               	return	
 16066  001A16  D7E1               	goto	l15722
 16067  001A18                     __end_of_printBinary:
 16068                           	opt stack 0
 16069                           tblptru	equ	0xFF8
 16070                           tblptrh	equ	0xFF7
 16071                           tblptrl	equ	0xFF6
 16072                           tablat	equ	0xFF5
 16073                           prodh	equ	0xFF4
 16074                           prodl	equ	0xFF3
 16075                           intcon	equ	0xFF2
 16076                           indf0	equ	0xFEF
 16077                           postinc0	equ	0xFEE
 16078                           fsr0h	equ	0xFEA
 16079                           fsr0l	equ	0xFE9
 16080                           wreg	equ	0xFE8
 16081                           indf1	equ	0xFE7
 16082                           postinc1	equ	0xFE6
 16083                           postdec1	equ	0xFE5
 16084                           fsr1h	equ	0xFE2
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           plusw2	equ	0xFDB
 16090                           fsr2h	equ	0xFDA
 16091                           fsr2l	equ	0xFD9
 16092                           status	equ	0xFD8
 16093                           
 16094 ;; *************** function _readRegisterExtended *****************
 16095 ;; Defined at:
 16096 ;;		line 2315 in file "main.c"
 16097 ;; Parameters:    Size  Location     Type
 16098 ;;  nodeid          1    wreg     unsigned char 
 16099 ;;  page            2   86[BANK0 ] unsigned short 
 16100 ;;  reg             1   88[BANK0 ] unsigned char 
 16101 ;;  timeout         2   89[BANK0 ] unsigned short 
 16102 ;;  value           2   91[BANK0 ] PTR unsigned char 
 16103 ;;		 -> doModeVerbose@value(1), 
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;                  1    wreg      enum E15660
 16108 ;; Registers used:
 16109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16110 ;; Tracked objects:
 16111 ;;		On entry : F/2
 16112 ;;		On exit  : E/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16115 ;;      Params:         0       7       0       0       0       0       0
 16116 ;;      Locals:         0       1       0       0       0       0       0
 16117 ;;      Temps:          0       4       0       0       0       0       0
 16118 ;;      Totals:         0      12       0       0       0       0       0
 16119 ;;Total ram usage:       12 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    7
 16122 ;; This function calls:
 16123 ;;		_sendVSCPFrame
 16124 ;;		_getVSCPFrame
 16125 ;; This function is called by:
 16126 ;;		_doModeVerbose
 16127 ;; This function uses a non-reentrant model
 16128 ;;
 16129                           
 16130                           	psect	text26
 16131  002C3A                     __ptext26:
 16132                           	opt stack 0
 16133  002C3A                     _readRegisterExtended:
 16134                           	opt stack 21
 16135                           
 16136                           ; BSR set to: 0
 16137                           ;incstack = 0
 16138                           ;incstack = 0
 16139                           ;readRegisterExtended@nodeid stored from wreg
 16140  002C3A  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 16141                           
 16142                           ; BSR set to: 2
 16143                           ;main.c: 2316: vscpData[ 0 ] = nodeid;
 16144  002C3E  C0C1  F1E3         	movff	readRegisterExtended@nodeid,_vscpData
 16145                           
 16146                           ; BSR set to: 2
 16147                           ;main.c: 2317: vscpData[ 1 ] = page >> 8;
 16148  002C42  0100               	movlb	0	; () banked
 16149  002C44  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16150  002C46  0101               	movlb	1	; () banked
 16151  002C48  6FE4               	movwf	(_vscpData+1)& (0+255),b
 16152                           
 16153                           ; BSR set to: 1
 16154                           ;main.c: 2318: vscpData[ 2 ] = page & 0xff;
 16155  002C4A  C0B6  F1E5         	movff	readRegisterExtended@page,_vscpData+2
 16156                           
 16157                           ; BSR set to: 1
 16158                           ;main.c: 2319: vscpData[ 3 ] = reg;
 16159  002C4E  C0B8  F1E6         	movff	readRegisterExtended@reg,_vscpData+3
 16160                           
 16161                           ; BSR set to: 1
 16162                           ;main.c: 2320: vscpData[ 4 ] = 1;
 16163  002C52  0E01               	movlw	1
 16164  002C54  6FE7               	movwf	(_vscpData+4)& (0+255),b
 16165                           
 16166                           ; BSR set to: 1
 16167                           ;main.c: 2322: if (sendVSCPFrame(0,
 16168                           ;main.c: 2323: 37,
 16169                           ;main.c: 2324: 0,
 16170                           ;main.c: 2325: 0,
 16171                           ;main.c: 2326: 5,
 16172                           ;main.c: 2327: vscpData)) {
 16173  002C56  0100               	movlb	0	; () banked
 16174  002C58  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16175  002C5A  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 16176  002C5C  0E25               	movlw	37
 16177  002C5E  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16178  002C60  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16179  002C62  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16180  002C64  0E05               	movlw	5
 16181  002C66  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16182  002C68  0E01               	movlw	high _vscpData
 16183  002C6A  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16184  002C6C  0EE3               	movlw	low _vscpData
 16185  002C6E  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16186  002C70  EC73  F013         	call	_sendVSCPFrame	;wreg free
 16187  002C74  0900               	iorlw	0
 16188  002C76  E050               	bz	l15370
 16189                           
 16190                           ;main.c: 2329: timekeeper = 0;
 16191  002C78  6A22               	clrf	_timekeeper,c	;volatile
 16192  002C7A  6A23               	clrf	_timekeeper+1,c	;volatile
 16193  002C7C  6A24               	clrf	_timekeeper+2,c	;volatile
 16194  002C7E  6A25               	clrf	_timekeeper+3,c	;volatile
 16195                           
 16196                           ;main.c: 2330: while (timekeeper < timeout) {
 16197  002C80  D03B               	goto	l15368
 16198  002C82                     l1109:
 16199                           
 16200                           ; BSR set to: 0
 16201  002C82  0004               	clrwdt		;# 
 16202                           
 16203                           ;main.c: 2334: if (getVSCPFrame(&vscpClass,
 16204                           ;main.c: 2335: &vscpType,
 16205                           ;main.c: 2336: &vscpNodeId,
 16206                           ;main.c: 2337: &vscpPriority,
 16207                           ;main.c: 2338: &vscpSize,
 16208                           ;main.c: 2339: vscpData)) {
 16209  002C84  0E3F               	movlw	low _vscpType
 16210  002C86  0100               	movlb	0	; () banked
 16211  002C88  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16212  002C8A  0E3C               	movlw	low _vscpNodeId
 16213  002C8C  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16214  002C8E  0E3D               	movlw	low _vscpPriority
 16215  002C90  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16216  002C92  0E3E               	movlw	low _vscpSize
 16217  002C94  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16218  002C96  0E01               	movlw	high _vscpData
 16219  002C98  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16220  002C9A  0EE3               	movlw	low _vscpData
 16221  002C9C  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16222  002C9E  0E38               	movlw	_vscpClass& (0+255)
 16223  002CA0  EC14  F010         	call	_getVSCPFrame
 16224  002CA4  0900               	iorlw	0
 16225  002CA6  E028               	bz	l15368
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;main.c: 2340: if ((nodeid == vscpNodeId) &&
 16229                           ;main.c: 2341: (0 == vscpClass) &&
 16230                           ;main.c: 2342: (39 == vscpType) &&
 16231                           ;main.c: 2343: (5 == vscpSize) &&
 16232                           ;main.c: 2344: (0 == vscpData[ 0 ]) &&
 16233                           ;main.c: 2345: ((page >> 8) == vscpData[ 1 ]) &&
 16234                           ;main.c: 2346: ((page & 0xff) == vscpData[ 2 ]) &&
 16235                           ;main.c: 2347: (reg == vscpData[ 3 ])) {
 16236  002CA8  503C               	movf	_vscpNodeId,w,c
 16237  002CAA  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16238  002CAC  D025               	goto	l15368
 16239                           
 16240                           ; BSR set to: 0
 16241  002CAE  5039               	movf	_vscpClass+1,w,c
 16242  002CB0  1038               	iorwf	_vscpClass,w,c
 16243  002CB2  E122               	bnz	l15368
 16244                           
 16245                           ; BSR set to: 0
 16246  002CB4  503F               	movf	_vscpType,w,c
 16247  002CB6  0A27               	xorlw	39
 16248  002CB8  E11F               	bnz	l15368
 16249                           
 16250                           ; BSR set to: 0
 16251  002CBA  503E               	movf	_vscpSize,w,c
 16252  002CBC  0A05               	xorlw	5
 16253  002CBE  E11C               	bnz	l15368
 16254                           
 16255                           ; BSR set to: 0
 16256  002CC0  0101               	movlb	1	; () banked
 16257  002CC2  67E3               	tstfsz	_vscpData& (0+255),b
 16258  002CC4  D019               	goto	l15368
 16259                           
 16260                           ; BSR set to: 1
 16261  002CC6  0100               	movlb	0	; () banked
 16262  002CC8  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16263  002CCA  0101               	movlb	1	; () banked
 16264  002CCC  19E4               	xorwf	(_vscpData+1)& (0+255),w,b
 16265  002CCE  E114               	bnz	l15368
 16266                           
 16267                           ; BSR set to: 1
 16268  002CD0  0100               	movlb	0	; () banked
 16269  002CD2  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 16270  002CD4  EE21  F0E5         	lfsr	2,_vscpData+2
 16271  002CD8  62DF               	cpfseq	indf2,c
 16272  002CDA  D00E               	goto	l15368
 16273                           
 16274                           ; BSR set to: 1
 16275  002CDC  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 16276  002CDE  0101               	movlb	1	; () banked
 16277  002CE0  EE21  F0E6         	lfsr	2,_vscpData+3
 16278  002CE4  62DF               	cpfseq	indf2,c
 16279  002CE6  D008               	goto	l15368
 16280                           
 16281                           ; BSR set to: 1
 16282                           ;main.c: 2348: *value = vscpData[ 4 ];
 16283  002CE8  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 16284  002CEC  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16285  002CF0  C1E7  FFDF         	movff	_vscpData+4,indf2
 16286                           
 16287                           ; BSR set to: 1
 16288                           ;main.c: 2349: return 1;
 16289  002CF4  0E01               	movlw	1
 16290  002CF6  D011               	goto	l1112
 16291  002CF8                     l15368:
 16292  002CF8  0100               	movlb	0	; () banked
 16293  002CFA  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 16294  002CFC  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 16295  002CFE  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16296  002D00  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16297  002D02  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16298  002D04  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16299  002D06  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 16300  002D08  5C22               	subwf	_timekeeper,w,c	;volatile
 16301  002D0A  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16302  002D0C  5823               	subwfb	_timekeeper+1,w,c	;volatile
 16303  002D0E  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16304  002D10  5824               	subwfb	_timekeeper+2,w,c	;volatile
 16305  002D12  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16306  002D14  5825               	subwfb	_timekeeper+3,w,c	;volatile
 16307  002D16  E3B5               	bnc	l1109
 16308  002D18                     l15370:
 16309                           
 16310                           ;main.c: 2350: }
 16311                           ;main.c: 2351: }
 16312                           ;main.c: 2352: }
 16313                           ;main.c: 2353: }
 16314                           ;main.c: 2355: return 0;
 16315  002D18  0E00               	movlw	0
 16316  002D1A                     l1112:
 16317  002D1A  0012               	return	
 16318  002D1C                     __end_of_readRegisterExtended:
 16319                           	opt stack 0
 16320                           tblptru	equ	0xFF8
 16321                           tblptrh	equ	0xFF7
 16322                           tblptrl	equ	0xFF6
 16323                           tablat	equ	0xFF5
 16324                           prodh	equ	0xFF4
 16325                           prodl	equ	0xFF3
 16326                           intcon	equ	0xFF2
 16327                           indf0	equ	0xFEF
 16328                           postinc0	equ	0xFEE
 16329                           fsr0h	equ	0xFEA
 16330                           fsr0l	equ	0xFE9
 16331                           wreg	equ	0xFE8
 16332                           indf1	equ	0xFE7
 16333                           postinc1	equ	0xFE6
 16334                           postdec1	equ	0xFE5
 16335                           fsr1h	equ	0xFE2
 16336                           fsr1l	equ	0xFE1
 16337                           indf2	equ	0xFDF
 16338                           postinc2	equ	0xFDE
 16339                           postdec2	equ	0xFDD
 16340                           plusw2	equ	0xFDB
 16341                           fsr2h	equ	0xFDA
 16342                           fsr2l	equ	0xFD9
 16343                           status	equ	0xFD8
 16344                           
 16345 ;; *************** function _strcpy *****************
 16346 ;; Defined at:
 16347 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16348 ;; Parameters:    Size  Location     Type
 16349 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16350 ;;		 -> cmdbuf(80), 
 16351 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16352 ;;		 -> cmdbuf(80), 
 16353 ;; Auto vars:     Size  Location     Type
 16354 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16355 ;;		 -> cmdbuf(80), 
 16356 ;; Return value:  Size  Location     Type
 16357 ;;                  2    0[BANK0 ] PTR unsigned char 
 16358 ;; Registers used:
 16359 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16360 ;; Tracked objects:
 16361 ;;		On entry : F/0
 16362 ;;		On exit  : F/0
 16363 ;;		Unchanged: 0/0
 16364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16365 ;;      Params:         0       4       0       0       0       0       0
 16366 ;;      Locals:         0       2       0       0       0       0       0
 16367 ;;      Temps:          0       0       0       0       0       0       0
 16368 ;;      Totals:         0       6       0       0       0       0       0
 16369 ;;Total ram usage:        6 bytes
 16370 ;; Hardware stack levels used:    1
 16371 ;; Hardware stack levels required when called:    3
 16372 ;; This function calls:
 16373 ;;		Nothing
 16374 ;; This function is called by:
 16375 ;;		_doModeVerbose
 16376 ;; This function uses a non-reentrant model
 16377 ;;
 16378                           
 16379                           	psect	text27
 16380  0015CA                     __ptext27:
 16381                           	opt stack 0
 16382  0015CA                     _strcpy:
 16383                           	opt stack 25
 16384                           
 16385                           ; BSR set to: 0
 16386                           
 16387                           ;incstack = 0
 16388                           ;incstack = 0
 16389  0015CA  C060  F064         	movff	strcpy@to,strcpy@cp
 16390  0015CE  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16391  0015D2  D004               	goto	l15328
 16392  0015D4                     l15326:
 16393                           
 16394                           ; BSR set to: 0
 16395  0015D4  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16396  0015D6  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16397  0015D8  4B62               	infsnz	strcpy@from& (0+255),f,b
 16398  0015DA  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16399  0015DC                     l15328:
 16400                           
 16401                           ; BSR set to: 0
 16402  0015DC  C062  FFD9         	movff	strcpy@from,fsr2l
 16403  0015E0  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16404  0015E4  C064  FFE1         	movff	strcpy@cp,fsr1l
 16405  0015E8  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16406  0015EC  CFDF FFE7          	movff	indf2,indf1
 16407  0015F0  50E7               	movf	indf1,w,c
 16408  0015F2  B4D8               	btfsc	status,2,c
 16409                           
 16410                           ; BSR set to: 0
 16411  0015F4  0012               	return	
 16412  0015F6  D7EE               	goto	l15326
 16413  0015F8                     __end_of_strcpy:
 16414                           	opt stack 0
 16415                           tblptru	equ	0xFF8
 16416                           tblptrh	equ	0xFF7
 16417                           tblptrl	equ	0xFF6
 16418                           tablat	equ	0xFF5
 16419                           prodh	equ	0xFF4
 16420                           prodl	equ	0xFF3
 16421                           intcon	equ	0xFF2
 16422                           indf0	equ	0xFEF
 16423                           postinc0	equ	0xFEE
 16424                           fsr0h	equ	0xFEA
 16425                           fsr0l	equ	0xFE9
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postinc1	equ	0xFE6
 16429                           postdec1	equ	0xFE5
 16430                           fsr1h	equ	0xFE2
 16431                           fsr1l	equ	0xFE1
 16432                           indf2	equ	0xFDF
 16433                           postinc2	equ	0xFDE
 16434                           postdec2	equ	0xFDD
 16435                           plusw2	equ	0xFDB
 16436                           fsr2h	equ	0xFDA
 16437                           fsr2l	equ	0xFD9
 16438                           status	equ	0xFD8
 16439                           
 16440 ;; *************** function _findNodes *****************
 16441 ;; Defined at:
 16442 ;;		line 2654 in file "main.c"
 16443 ;; Parameters:    Size  Location     Type
 16444 ;;		None
 16445 ;; Auto vars:     Size  Location     Type
 16446 ;;  i               1  105[BANK0 ] unsigned char 
 16447 ;;  value           1  104[BANK0 ] unsigned char 
 16448 ;;  nFound          1  103[BANK0 ] unsigned char 
 16449 ;; Return value:  Size  Location     Type
 16450 ;;		None               void
 16451 ;; Registers used:
 16452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16453 ;; Tracked objects:
 16454 ;;		On entry : F/0
 16455 ;;		On exit  : 0/0
 16456 ;;		Unchanged: 0/0
 16457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16458 ;;      Params:         0       0       0       0       0       0       0
 16459 ;;      Locals:         0       5       0       0       0       0       0
 16460 ;;      Temps:          0       0       0       0       0       0       0
 16461 ;;      Totals:         0       5       0       0       0       0       0
 16462 ;;Total ram usage:        5 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; Hardware stack levels required when called:    9
 16465 ;; This function calls:
 16466 ;;		_putsUSART
 16467 ;;		_printNodeFirmwareVersion
 16468 ;;		_printGUID
 16469 ;;		_printMDF
 16470 ;;		_itoa
 16471 ;;		_readRegister
 16472 ;; This function is called by:
 16473 ;;		_doModeVerbose
 16474 ;; This function uses a non-reentrant model
 16475 ;;
 16476                           
 16477                           	psect	text28
 16478  002FD8                     __ptext28:
 16479                           	opt stack 0
 16480  002FD8                     _findNodes:
 16481                           	opt stack 19
 16482                           
 16483                           ; BSR set to: 0
 16484                           ;main.c: 2655: uint8_t nFound = 0;
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;incstack = 0
 16488                           ;incstack = 0
 16489  002FD8  6BC7               	clrf	findNodes@nFound& (0+255),b
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;main.c: 2656: uint8_t i;
 16493                           ;main.c: 2657: uint8_t value;
 16494                           ;main.c: 2659: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16495  002FDA  0E6E               	movlw	high STR_252
 16496  002FDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16497  002FDE  0E52               	movlw	low STR_252
 16498  002FE0  6F61               	movwf	?_putsUSART& (0+255),b
 16499  002FE2  EC33  F00D         	call	_putsUSART	;wreg free
 16500                           
 16501                           ;main.c: 2661: for (i = 1; i != 0; i++) {
 16502  002FE6  0E01               	movlw	1
 16503  002FE8  0100               	movlb	0	; () banked
 16504  002FEA  6FC9               	movwf	findNodes@i& (0+255),b
 16505  002FEC                     l1211:
 16506                           
 16507                           ; BSR set to: 0
 16508  002FEC  0004               	clrwdt		;# 
 16509                           
 16510                           ;main.c: 2665: if (readRegister(i,
 16511                           ;main.c: 2666: 0xE0,
 16512                           ;main.c: 2667: rwtimeout,
 16513                           ;main.c: 2668: &value)) {
 16514  002FEE  0EE0               	movlw	224
 16515  002FF0  0100               	movlb	0	; () banked
 16516  002FF2  6FB6               	movwf	?_readRegister& (0+255),b
 16517  002FF4  C035  F0B7         	movff	_rwtimeout,?_readRegister+1
 16518  002FF8  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16519  002FFA  0EC8               	movlw	low findNodes@value
 16520  002FFC  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16521  002FFE  51C9               	movf	findNodes@i& (0+255),w,b
 16522  003000  EC19  F013         	call	_readRegister
 16523  003004  0900               	iorlw	0
 16524  003006  E041               	bz	l15314
 16525                           
 16526                           ;main.c: 2669: putsUSART((char *) "Node found with node id = ");
 16527  003008  0E78               	movlw	high STR_253
 16528  00300A  0100               	movlb	0	; () banked
 16529  00300C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16530  00300E  0E3E               	movlw	low STR_253
 16531  003010  6F61               	movwf	?_putsUSART& (0+255),b
 16532  003012  EC33  F00D         	call	_putsUSART	;wreg free
 16533                           
 16534                           ;main.c: 2670: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16535  003016  0100               	movlb	0	; () banked
 16536  003018  67E5               	tstfsz	_bHex& (0+255),b
 16537  00301A  D003               	goto	l15296
 16538                           
 16539                           ; BSR set to: 0
 16540  00301C  6BC6               	clrf	(_findNodes$1557+1)& (0+255),b
 16541  00301E  0E0A               	movlw	10
 16542  003020  D002               	goto	L18
 16543  003022                     l15296:
 16544                           
 16545                           ; BSR set to: 0
 16546  003022  6BC6               	clrf	(_findNodes$1557+1)& (0+255),b
 16547  003024  0E10               	movlw	16
 16548  003026                     L18:
 16549  003026  6FC5               	movwf	_findNodes$1557& (0+255),b
 16550                           
 16551                           ; BSR set to: 0
 16552  003028  0E01               	movlw	high _wrkbuf
 16553  00302A  0100               	movlb	0	; () banked
 16554  00302C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16555  00302E  0E7B               	movlw	low _wrkbuf
 16556  003030  6F70               	movwf	?_itoa& (0+255),b
 16557  003032  C03C  F072         	movff	_vscpNodeId,?_itoa+2
 16558  003036  6B73               	clrf	(?_itoa+3)& (0+255),b
 16559  003038  C0C5  F074         	movff	_findNodes$1557,?_itoa+4
 16560  00303C  C0C6  F075         	movff	_findNodes$1557+1,?_itoa+5
 16561  003040  EC46  F00B         	call	_itoa	;wreg free
 16562                           
 16563                           ; BSR set to: 0
 16564                           ;main.c: 2671: putsUSART(wrkbuf);
 16565  003044  0E01               	movlw	high _wrkbuf
 16566  003046  0100               	movlb	0	; () banked
 16567  003048  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16568  00304A  0E7B               	movlw	low _wrkbuf
 16569  00304C  6F61               	movwf	?_putsUSART& (0+255),b
 16570  00304E  EC33  F00D         	call	_putsUSART	;wreg free
 16571                           
 16572                           ;main.c: 2672: putsUSART((char *) "\r\n");
 16573  003052  0E71               	movlw	high (STR_211+50)
 16574  003054  0100               	movlb	0	; () banked
 16575  003056  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16576  003058  0E80               	movlw	low (STR_211+50)
 16577  00305A  6F61               	movwf	?_putsUSART& (0+255),b
 16578  00305C  EC33  F00D         	call	_putsUSART	;wreg free
 16579                           
 16580                           ;main.c: 2673: printNodeFirmwareVersion(i);
 16581  003060  0100               	movlb	0	; () banked
 16582  003062  51C9               	movf	findNodes@i& (0+255),w,b
 16583  003064  ECE4  F014         	call	_printNodeFirmwareVersion
 16584                           
 16585                           ;main.c: 2674: printGUID(i);
 16586  003068  0100               	movlb	0	; () banked
 16587  00306A  51C9               	movf	findNodes@i& (0+255),w,b
 16588  00306C  EC63  F018         	call	_printGUID
 16589                           
 16590                           ;main.c: 2675: printMDF(i);
 16591  003070  0100               	movlb	0	; () banked
 16592  003072  51C9               	movf	findNodes@i& (0+255),w,b
 16593  003074  ECEA  F010         	call	_printMDF
 16594                           
 16595                           ;main.c: 2676: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16596  003078  0E6E               	movlw	high STR_252
 16597  00307A  0100               	movlb	0	; () banked
 16598  00307C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16599  00307E  0E52               	movlw	low STR_252
 16600  003080  6F61               	movwf	?_putsUSART& (0+255),b
 16601  003082  EC33  F00D         	call	_putsUSART	;wreg free
 16602                           
 16603                           ;main.c: 2677: nFound++;
 16604  003086  0100               	movlb	0	; () banked
 16605  003088  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16606  00308A                     l15314:
 16607  00308A  0100               	movlb	0	; () banked
 16608  00308C  2BC9               	incf	findNodes@i& (0+255),f,b
 16609                           
 16610                           ; BSR set to: 0
 16611  00308E  67C9               	tstfsz	findNodes@i& (0+255),b
 16612  003090  D7AD               	goto	l1211
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;main.c: 2678: }
 16616                           ;main.c: 2680: }
 16617                           ;main.c: 2682: itoa(wrkbuf, nFound, 10);
 16618  003092  0E01               	movlw	high _wrkbuf
 16619  003094  6F71               	movwf	(?_itoa+1)& (0+255),b
 16620  003096  0E7B               	movlw	low _wrkbuf
 16621  003098  6F70               	movwf	?_itoa& (0+255),b
 16622  00309A  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16623  00309E  6B73               	clrf	(?_itoa+3)& (0+255),b
 16624  0030A0  6B75               	clrf	(?_itoa+5)& (0+255),b
 16625  0030A2  0E0A               	movlw	10
 16626  0030A4  6F74               	movwf	(?_itoa+4)& (0+255),b
 16627  0030A6  EC46  F00B         	call	_itoa	;wreg free
 16628                           
 16629                           ; BSR set to: 0
 16630                           ;main.c: 2683: putsUSART(wrkbuf);
 16631  0030AA  0E01               	movlw	high _wrkbuf
 16632  0030AC  0100               	movlb	0	; () banked
 16633  0030AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16634  0030B0  0E7B               	movlw	low _wrkbuf
 16635  0030B2  6F61               	movwf	?_putsUSART& (0+255),b
 16636  0030B4  EC33  F00D         	call	_putsUSART	;wreg free
 16637                           
 16638                           ;main.c: 2684: putsUSART((char *) " nodes found\r\n");
 16639  0030B8  0E7B               	movlw	high STR_256
 16640  0030BA  0100               	movlb	0	; () banked
 16641  0030BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16642  0030BE  0E1D               	movlw	low STR_256
 16643  0030C0  6F61               	movwf	?_putsUSART& (0+255),b
 16644  0030C2  EF33  F00D         	goto	_putsUSART	;wreg free
 16645  0030C6                     __end_of_findNodes:
 16646                           	opt stack 0
 16647                           tblptru	equ	0xFF8
 16648                           tblptrh	equ	0xFF7
 16649                           tblptrl	equ	0xFF6
 16650                           tablat	equ	0xFF5
 16651                           prodh	equ	0xFF4
 16652                           prodl	equ	0xFF3
 16653                           intcon	equ	0xFF2
 16654                           indf0	equ	0xFEF
 16655                           postinc0	equ	0xFEE
 16656                           fsr0h	equ	0xFEA
 16657                           fsr0l	equ	0xFE9
 16658                           wreg	equ	0xFE8
 16659                           indf1	equ	0xFE7
 16660                           postinc1	equ	0xFE6
 16661                           postdec1	equ	0xFE5
 16662                           fsr1h	equ	0xFE2
 16663                           fsr1l	equ	0xFE1
 16664                           indf2	equ	0xFDF
 16665                           postinc2	equ	0xFDE
 16666                           postdec2	equ	0xFDD
 16667                           plusw2	equ	0xFDB
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function _printMDF *****************
 16673 ;; Defined at:
 16674 ;;		line 2735 in file "main.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;  nodeid          1    wreg     unsigned char 
 16677 ;; Auto vars:     Size  Location     Type
 16678 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16679 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16680 ;;		 -> wrkbuf(80), 
 16681 ;;  i               1   99[BANK0 ] unsigned char 
 16682 ;;  value           1   96[BANK0 ] unsigned char 
 16683 ;; Return value:  Size  Location     Type
 16684 ;;		None               void
 16685 ;; Registers used:
 16686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16687 ;; Tracked objects:
 16688 ;;		On entry : D/2
 16689 ;;		On exit  : 0/0
 16690 ;;		Unchanged: 0/0
 16691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16692 ;;      Params:         0       0       0       0       0       0       0
 16693 ;;      Locals:         0       5       0       0       0       0       0
 16694 ;;      Temps:          0       0       0       0       0       0       0
 16695 ;;      Totals:         0       5       0       0       0       0       0
 16696 ;;Total ram usage:        5 bytes
 16697 ;; Hardware stack levels used:    1
 16698 ;; Hardware stack levels required when called:    8
 16699 ;; This function calls:
 16700 ;;		_putsUSART
 16701 ;;		_memset
 16702 ;;		_readRegister
 16703 ;; This function is called by:
 16704 ;;		_doModeVerbose
 16705 ;;		_findNodes
 16706 ;; This function uses a non-reentrant model
 16707 ;;
 16708                           
 16709                           	psect	text29
 16710  0021D4                     __ptext29:
 16711                           	opt stack 0
 16712  0021D4                     _printMDF:
 16713                           	opt stack 20
 16714                           
 16715                           ;incstack = 0
 16716                           ;incstack = 0
 16717                           ;printMDF@nodeid stored from wreg
 16718  0021D4  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16719                           
 16720                           ;main.c: 2736: uint8_t i;
 16721                           ;main.c: 2737: uint8_t value;
 16722                           ;main.c: 2738: char *p = wrkbuf;
 16723  0021D8  0E01               	movlw	high _wrkbuf
 16724  0021DA  0100               	movlb	0	; () banked
 16725  0021DC  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16726  0021DE  0E7B               	movlw	low _wrkbuf
 16727  0021E0  6FC1               	movwf	printMDF@p& (0+255),b
 16728                           
 16729                           ; BSR set to: 0
 16730                           ;main.c: 2739: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16731  0021E2  0E01               	movlw	high _wrkbuf
 16732  0021E4  6F61               	movwf	(?_memset+1)& (0+255),b
 16733  0021E6  0E7B               	movlw	low _wrkbuf
 16734  0021E8  6F60               	movwf	?_memset& (0+255),b
 16735  0021EA  6B63               	clrf	(?_memset+3)& (0+255),b
 16736  0021EC  6B62               	clrf	(?_memset+2)& (0+255),b
 16737  0021EE  6B65               	clrf	(?_memset+5)& (0+255),b
 16738  0021F0  0E50               	movlw	80
 16739  0021F2  6F64               	movwf	(?_memset+4)& (0+255),b
 16740  0021F4  ECCE  F00A         	call	_memset	;wreg free
 16741                           
 16742                           ; BSR set to: 0
 16743                           ;main.c: 2740: putsUSART((char *) "MDF = http://");
 16744  0021F8  0E7B               	movlw	high STR_262
 16745  0021FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16746  0021FC  0E3B               	movlw	low STR_262
 16747  0021FE  6F61               	movwf	?_putsUSART& (0+255),b
 16748  002200  EC33  F00D         	call	_putsUSART	;wreg free
 16749                           
 16750                           ;main.c: 2742: for (i = 0; i < 32; i++) {
 16751  002204  0100               	movlb	0	; () banked
 16752  002206  6BC3               	clrf	printMDF@i& (0+255),b
 16753  002208                     l15848:
 16754                           
 16755                           ; BSR set to: 0
 16756                           ;main.c: 2743: if (readRegister(nodeid,
 16757                           ;main.c: 2744: 0xE0 + i,
 16758                           ;main.c: 2745: rwtimeout,
 16759                           ;main.c: 2746: &value)) {
 16760  002208  51C3               	movf	printMDF@i& (0+255),w,b
 16761  00220A  0FE0               	addlw	224
 16762  00220C  6FB6               	movwf	?_readRegister& (0+255),b
 16763  00220E  C035  F0B7         	movff	_rwtimeout,?_readRegister+1
 16764  002212  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16765  002214  0EC0               	movlw	low printMDF@value
 16766  002216  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16767  002218  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16768  00221A  EC19  F013         	call	_readRegister
 16769  00221E  0900               	iorlw	0
 16770  002220  E00A               	bz	l15854
 16771                           
 16772                           ;main.c: 2747: *p = value;
 16773  002222  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16774  002226  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16775  00222A  C0C0  FFDF         	movff	printMDF@value,indf2
 16776  00222E                     l15852:
 16777                           
 16778                           ;main.c: 2748: p++;
 16779  00222E  0100               	movlb	0	; () banked
 16780  002230  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16781  002232  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16782                           
 16783                           ;main.c: 2750: }
 16784  002234  D007               	goto	l15858
 16785  002236                     l15854:
 16786                           
 16787                           ;main.c: 2751: else {
 16788                           ;main.c: 2752: *p = '?';
 16789  002236  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16790  00223A  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16791  00223E  0E3F               	movlw	63
 16792  002240  6EDF               	movwf	indf2,c
 16793  002242  D7F5               	goto	l15852
 16794  002244                     l15858:
 16795                           
 16796                           ; BSR set to: 0
 16797  002244  2BC3               	incf	printMDF@i& (0+255),f,b
 16798                           
 16799                           ; BSR set to: 0
 16800  002246  0E1F               	movlw	31
 16801  002248  65C3               	cpfsgt	printMDF@i& (0+255),b
 16802  00224A  D7DE               	goto	l15848
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;main.c: 2754: }
 16806                           ;main.c: 2755: }
 16807                           ;main.c: 2757: putsUSART(wrkbuf);
 16808  00224C  0E01               	movlw	high _wrkbuf
 16809  00224E  0100               	movlb	0	; () banked
 16810  002250  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16811  002252  0E7B               	movlw	low _wrkbuf
 16812  002254  6F61               	movwf	?_putsUSART& (0+255),b
 16813  002256  EC33  F00D         	call	_putsUSART	;wreg free
 16814                           
 16815                           ;main.c: 2758: putsUSART((char *) "\r\n");
 16816  00225A  0E71               	movlw	high (STR_211+50)
 16817  00225C  0100               	movlb	0	; () banked
 16818  00225E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16819  002260  0E80               	movlw	low (STR_211+50)
 16820  002262  6F61               	movwf	?_putsUSART& (0+255),b
 16821  002264  EF33  F00D         	goto	_putsUSART	;wreg free
 16822  002268                     __end_of_printMDF:
 16823                           	opt stack 0
 16824                           tblptru	equ	0xFF8
 16825                           tblptrh	equ	0xFF7
 16826                           tblptrl	equ	0xFF6
 16827                           tablat	equ	0xFF5
 16828                           prodh	equ	0xFF4
 16829                           prodl	equ	0xFF3
 16830                           intcon	equ	0xFF2
 16831                           indf0	equ	0xFEF
 16832                           postinc0	equ	0xFEE
 16833                           fsr0h	equ	0xFEA
 16834                           fsr0l	equ	0xFE9
 16835                           wreg	equ	0xFE8
 16836                           indf1	equ	0xFE7
 16837                           postinc1	equ	0xFE6
 16838                           postdec1	equ	0xFE5
 16839                           fsr1h	equ	0xFE2
 16840                           fsr1l	equ	0xFE1
 16841                           indf2	equ	0xFDF
 16842                           postinc2	equ	0xFDE
 16843                           postdec2	equ	0xFDD
 16844                           plusw2	equ	0xFDB
 16845                           fsr2h	equ	0xFDA
 16846                           fsr2l	equ	0xFD9
 16847                           status	equ	0xFD8
 16848                           
 16849 ;; *************** function _printGUID *****************
 16850 ;; Defined at:
 16851 ;;		line 2694 in file "main.c"
 16852 ;; Parameters:    Size  Location     Type
 16853 ;;  nodeid          1    wreg     unsigned char 
 16854 ;; Auto vars:     Size  Location     Type
 16855 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16856 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16857 ;;  i               1  100[BANK0 ] unsigned char 
 16858 ;;  value           1   99[BANK0 ] unsigned char 
 16859 ;; Return value:  Size  Location     Type
 16860 ;;		None               void
 16861 ;; Registers used:
 16862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16863 ;; Tracked objects:
 16864 ;;		On entry : D/2
 16865 ;;		On exit  : 0/0
 16866 ;;		Unchanged: 0/0
 16867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16868 ;;      Params:         0       0       0       0       0       0       0
 16869 ;;      Locals:         0       6       0       0       0       0       0
 16870 ;;      Temps:          0       0       0       0       0       0       0
 16871 ;;      Totals:         0       6       0       0       0       0       0
 16872 ;;Total ram usage:        6 bytes
 16873 ;; Hardware stack levels used:    1
 16874 ;; Hardware stack levels required when called:    8
 16875 ;; This function calls:
 16876 ;;		_putsUSART
 16877 ;;		_memset
 16878 ;;		_strlen
 16879 ;;		_itoa
 16880 ;;		_readRegister
 16881 ;;		_strcat
 16882 ;; This function is called by:
 16883 ;;		_doModeVerbose
 16884 ;;		_findNodes
 16885 ;; This function uses a non-reentrant model
 16886 ;;
 16887                           
 16888                           	psect	text30
 16889  0030C6                     __ptext30:
 16890                           	opt stack 0
 16891  0030C6                     _printGUID:
 16892                           	opt stack 20
 16893                           
 16894                           ;incstack = 0
 16895                           ;incstack = 0
 16896                           ;printGUID@nodeid stored from wreg
 16897  0030C6  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16898                           
 16899                           ;main.c: 2695: uint8_t i;
 16900                           ;main.c: 2696: uint8_t value;
 16901                           ;main.c: 2697: char buf[3];
 16902                           ;main.c: 2699: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16903  0030CA  0E01               	movlw	high _wrkbuf
 16904  0030CC  0100               	movlb	0	; () banked
 16905  0030CE  6F61               	movwf	(?_memset+1)& (0+255),b
 16906  0030D0  0E7B               	movlw	low _wrkbuf
 16907  0030D2  6F60               	movwf	?_memset& (0+255),b
 16908  0030D4  6B63               	clrf	(?_memset+3)& (0+255),b
 16909  0030D6  6B62               	clrf	(?_memset+2)& (0+255),b
 16910  0030D8  6B65               	clrf	(?_memset+5)& (0+255),b
 16911  0030DA  0E50               	movlw	80
 16912  0030DC  6F64               	movwf	(?_memset+4)& (0+255),b
 16913  0030DE  ECCE  F00A         	call	_memset	;wreg free
 16914                           
 16915                           ; BSR set to: 0
 16916                           ;main.c: 2700: putsUSART((char *) "GUID = ");
 16917  0030E2  0E7B               	movlw	high STR_257
 16918  0030E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16919  0030E6  0ED4               	movlw	low STR_257
 16920  0030E8  6F61               	movwf	?_putsUSART& (0+255),b
 16921  0030EA  EC33  F00D         	call	_putsUSART	;wreg free
 16922                           
 16923                           ;main.c: 2702: for (i = 0; i < 16; i++) {
 16924  0030EE  0100               	movlb	0	; () banked
 16925  0030F0  6BC4               	clrf	printGUID@i& (0+255),b
 16926  0030F2                     l15814:
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;main.c: 2703: if (readRegister(nodeid,
 16930                           ;main.c: 2704: 0xD0 + i,
 16931                           ;main.c: 2705: rwtimeout,
 16932                           ;main.c: 2706: &value)) {
 16933  0030F2  51C4               	movf	printGUID@i& (0+255),w,b
 16934  0030F4  0FD0               	addlw	208
 16935  0030F6  6FB6               	movwf	?_readRegister& (0+255),b
 16936  0030F8  C035  F0B7         	movff	_rwtimeout,?_readRegister+1
 16937  0030FC  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16938  0030FE  0EC3               	movlw	low printGUID@value
 16939  003100  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16940  003102  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16941  003104  EC19  F013         	call	_readRegister
 16942  003108  0900               	iorlw	0
 16943  00310A  E029               	bz	l15824
 16944                           
 16945                           ;main.c: 2707: itoa(buf, value, 16);
 16946  00310C  0100               	movlb	0	; () banked
 16947  00310E  0E00               	movlw	high printGUID@buf
 16948  003110  6F71               	movwf	(?_itoa+1)& (0+255),b
 16949  003112  0EC0               	movlw	low printGUID@buf
 16950  003114  6F70               	movwf	?_itoa& (0+255),b
 16951  003116  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16952  00311A  6B73               	clrf	(?_itoa+3)& (0+255),b
 16953  00311C  6B75               	clrf	(?_itoa+5)& (0+255),b
 16954  00311E  0E10               	movlw	16
 16955  003120  6F74               	movwf	(?_itoa+4)& (0+255),b
 16956  003122  EC46  F00B         	call	_itoa	;wreg free
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;main.c: 2708: if (1 == strlen(buf)) {
 16960  003126  0E00               	movlw	high printGUID@buf
 16961  003128  6F61               	movwf	(?_strlen+1)& (0+255),b
 16962  00312A  0EC0               	movlw	low printGUID@buf
 16963  00312C  6F60               	movwf	?_strlen& (0+255),b
 16964  00312E  EC18  F00C         	call	_strlen	;wreg free
 16965  003132  0560               	decf	?_strlen& (0+255),w,b
 16966  003134  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16967  003136  E10F               	bnz	l15822
 16968                           
 16969                           ; BSR set to: 0
 16970                           ;main.c: 2709: strcat(wrkbuf, "0");
 16971  003138  0E01               	movlw	high _wrkbuf
 16972  00313A  0100               	movlb	0	; () banked
 16973  00313C  6F61               	movwf	(?_strcat+1)& (0+255),b
 16974  00313E  0E7B               	movlw	low _wrkbuf
 16975  003140  6F60               	movwf	?_strcat& (0+255),b
 16976  003142  0E7C               	movlw	high STR_258
 16977  003144  6F63               	movwf	(?_strcat+3)& (0+255),b
 16978  003146  0EF8               	movlw	low STR_258
 16979  003148  6F62               	movwf	(?_strcat+2)& (0+255),b
 16980  00314A  EC5F  F00D         	call	_strcat	;wreg free
 16981                           
 16982                           ;main.c: 2710: strcat(wrkbuf, buf);
 16983  00314E  D832               	call	PL70	;call to abstracted procedure
 16984  003150  EC5F  F00D         	call	_strcat	;wreg free
 16985                           
 16986                           ;main.c: 2711: } else {
 16987  003154  D00F               	goto	l15826
 16988  003156                     l15822:
 16989                           
 16990                           ; BSR set to: 0
 16991                           ;main.c: 2712: strcat(wrkbuf, buf);
 16992  003156  D82E               	call	PL70	;call to abstracted procedure
 16993  003158  EC5F  F00D         	call	_strcat	;wreg free
 16994  00315C  D00B               	goto	l15826
 16995  00315E                     l15824:
 16996                           
 16997                           ;main.c: 2716: strcat(wrkbuf, "--");
 16998  00315E  0E01               	movlw	high _wrkbuf
 16999  003160  0100               	movlb	0	; () banked
 17000  003162  6F61               	movwf	(?_strcat+1)& (0+255),b
 17001  003164  0E7B               	movlw	low _wrkbuf
 17002  003166  6F60               	movwf	?_strcat& (0+255),b
 17003  003168  0E7C               	movlw	high STR_259
 17004  00316A  6F63               	movwf	(?_strcat+3)& (0+255),b
 17005  00316C  0EE4               	movlw	low STR_259
 17006  00316E  6F62               	movwf	(?_strcat+2)& (0+255),b
 17007  003170  EC5F  F00D         	call	_strcat	;wreg free
 17008  003174                     l15826:
 17009                           
 17010                           ;main.c: 2717: }
 17011                           ;main.c: 2719: if (i < 15) {
 17012  003174  0E0F               	movlw	15
 17013  003176  0100               	movlb	0	; () banked
 17014  003178  61C4               	cpfslt	printGUID@i& (0+255),b
 17015  00317A  D00A               	goto	l15830
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;main.c: 2720: strcat(wrkbuf, ":");
 17019  00317C  0E01               	movlw	high _wrkbuf
 17020  00317E  6F61               	movwf	(?_strcat+1)& (0+255),b
 17021  003180  0E7B               	movlw	low _wrkbuf
 17022  003182  6F60               	movwf	?_strcat& (0+255),b
 17023  003184  0E7C               	movlw	high STR_260
 17024  003186  6F63               	movwf	(?_strcat+3)& (0+255),b
 17025  003188  0EFA               	movlw	low STR_260
 17026  00318A  6F62               	movwf	(?_strcat+2)& (0+255),b
 17027  00318C  EC5F  F00D         	call	_strcat	;wreg free
 17028  003190                     l15830:
 17029  003190  0100               	movlb	0	; () banked
 17030  003192  2BC4               	incf	printGUID@i& (0+255),f,b
 17031                           
 17032                           ; BSR set to: 0
 17033  003194  0E0F               	movlw	15
 17034  003196  65C4               	cpfsgt	printGUID@i& (0+255),b
 17035  003198  D7AC               	goto	l15814
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;main.c: 2721: }
 17039                           ;main.c: 2723: }
 17040                           ;main.c: 2725: putsUSART(wrkbuf);
 17041  00319A  0E01               	movlw	high _wrkbuf
 17042  00319C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17043  00319E  0E7B               	movlw	low _wrkbuf
 17044  0031A0  6F61               	movwf	?_putsUSART& (0+255),b
 17045  0031A2  EC33  F00D         	call	_putsUSART	;wreg free
 17046                           
 17047                           ;main.c: 2726: putsUSART((char *) "\r\n");
 17048  0031A6  0E71               	movlw	high (STR_211+50)
 17049  0031A8  0100               	movlb	0	; () banked
 17050  0031AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17051  0031AC  0E80               	movlw	low (STR_211+50)
 17052  0031AE  6F61               	movwf	?_putsUSART& (0+255),b
 17053  0031B0  EF33  F00D         	goto	_putsUSART	;wreg free
 17054  0031B4                     __end_of_printGUID:
 17055                           	opt stack 0
 17056  0031B4                     PL70:
 17057                           	opt stack 20
 17058  0031B4  0E01               	movlw	high _wrkbuf
 17059  0031B6  0100               	movlb	0	; () banked
 17060  0031B8  6F61               	movwf	(?_strcat+1)& (0+255),b
 17061  0031BA  0E7B               	movlw	low _wrkbuf
 17062  0031BC  6F60               	movwf	?_strcat& (0+255),b
 17063  0031BE  0E00               	movlw	high printGUID@buf
 17064  0031C0  6F63               	movwf	(?_strcat+3)& (0+255),b
 17065  0031C2  0EC0               	movlw	low printGUID@buf
 17066  0031C4  6F62               	movwf	(?_strcat+2)& (0+255),b
 17067  0031C6  0012               	return	
 17068  0031C8                     __end_ofPL70:
 17069                           	opt stack 0
 17070                           tblptru	equ	0xFF8
 17071                           tblptrh	equ	0xFF7
 17072                           tblptrl	equ	0xFF6
 17073                           tablat	equ	0xFF5
 17074                           prodh	equ	0xFF4
 17075                           prodl	equ	0xFF3
 17076                           intcon	equ	0xFF2
 17077                           indf0	equ	0xFEF
 17078                           postinc0	equ	0xFEE
 17079                           fsr0h	equ	0xFEA
 17080                           fsr0l	equ	0xFE9
 17081                           wreg	equ	0xFE8
 17082                           indf1	equ	0xFE7
 17083                           postinc1	equ	0xFE6
 17084                           postdec1	equ	0xFE5
 17085                           fsr1h	equ	0xFE2
 17086                           fsr1l	equ	0xFE1
 17087                           indf2	equ	0xFDF
 17088                           postinc2	equ	0xFDE
 17089                           postdec2	equ	0xFDD
 17090                           plusw2	equ	0xFDB
 17091                           fsr2h	equ	0xFDA
 17092                           fsr2l	equ	0xFD9
 17093                           status	equ	0xFD8
 17094                           
 17095 ;; *************** function _printNodeFirmwareVersion *****************
 17096 ;; Defined at:
 17097 ;;		line 2766 in file "main.c"
 17098 ;; Parameters:    Size  Location     Type
 17099 ;;  nodeid          1    wreg     unsigned char 
 17100 ;; Auto vars:     Size  Location     Type
 17101 ;;  nodeid          1   95[BANK0 ] unsigned char 
 17102 ;;  buf             3   96[BANK0 ] unsigned char [3]
 17103 ;;  i               1  100[BANK0 ] unsigned char 
 17104 ;;  value           1   99[BANK0 ] unsigned char 
 17105 ;; Return value:  Size  Location     Type
 17106 ;;		None               void
 17107 ;; Registers used:
 17108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17109 ;; Tracked objects:
 17110 ;;		On entry : D/2
 17111 ;;		On exit  : 0/0
 17112 ;;		Unchanged: 0/0
 17113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17114 ;;      Params:         0       0       0       0       0       0       0
 17115 ;;      Locals:         0       6       0       0       0       0       0
 17116 ;;      Temps:          0       0       0       0       0       0       0
 17117 ;;      Totals:         0       6       0       0       0       0       0
 17118 ;;Total ram usage:        6 bytes
 17119 ;; Hardware stack levels used:    1
 17120 ;; Hardware stack levels required when called:    8
 17121 ;; This function calls:
 17122 ;;		_putsUSART
 17123 ;;		_memset
 17124 ;;		_itoa
 17125 ;;		_readRegister
 17126 ;;		_strcat
 17127 ;; This function is called by:
 17128 ;;		_doModeVerbose
 17129 ;;		_findNodes
 17130 ;; This function uses a non-reentrant model
 17131 ;;
 17132                           
 17133                           	psect	text31
 17134  0029C8                     __ptext31:
 17135                           	opt stack 0
 17136  0029C8                     _printNodeFirmwareVersion:
 17137                           	opt stack 20
 17138                           
 17139                           ;incstack = 0
 17140                           ;incstack = 0
 17141                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17142  0029C8  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 17143                           
 17144                           ;main.c: 2767: uint8_t i;
 17145                           ;main.c: 2768: uint8_t value;
 17146                           ;main.c: 2769: char buf[3];
 17147                           ;main.c: 2771: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17148  0029CC  0E01               	movlw	high _wrkbuf
 17149  0029CE  0100               	movlb	0	; () banked
 17150  0029D0  6F61               	movwf	(?_memset+1)& (0+255),b
 17151  0029D2  0E7B               	movlw	low _wrkbuf
 17152  0029D4  6F60               	movwf	?_memset& (0+255),b
 17153  0029D6  6B63               	clrf	(?_memset+3)& (0+255),b
 17154  0029D8  6B62               	clrf	(?_memset+2)& (0+255),b
 17155  0029DA  6B65               	clrf	(?_memset+5)& (0+255),b
 17156  0029DC  0E50               	movlw	80
 17157  0029DE  6F64               	movwf	(?_memset+4)& (0+255),b
 17158  0029E0  ECCE  F00A         	call	_memset	;wreg free
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;main.c: 2772: putsUSART((char *) "Firmware version = ");
 17162  0029E4  0E7A               	movlw	high STR_264
 17163  0029E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17164  0029E8  0E7C               	movlw	low STR_264
 17165  0029EA  6F61               	movwf	?_putsUSART& (0+255),b
 17166  0029EC  EC33  F00D         	call	_putsUSART	;wreg free
 17167                           
 17168                           ;main.c: 2774: for (i = 0; i < 3; i++) {
 17169  0029F0  0100               	movlb	0	; () banked
 17170  0029F2  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17171  0029F4                     l15786:
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;main.c: 2775: if (readRegister(nodeid,
 17175                           ;main.c: 2776: 0x94 + i,
 17176                           ;main.c: 2777: rwtimeout,
 17177                           ;main.c: 2778: &value)) {
 17178  0029F4  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17179  0029F6  0F94               	addlw	148
 17180  0029F8  6FB6               	movwf	?_readRegister& (0+255),b
 17181  0029FA  C035  F0B7         	movff	_rwtimeout,?_readRegister+1
 17182  0029FE  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 17183  002A00  0EC3               	movlw	low printNodeFirmwareVersion@value
 17184  002A02  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 17185  002A04  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17186  002A06  EC19  F013         	call	_readRegister
 17187  002A0A  0900               	iorlw	0
 17188  002A0C  E019               	bz	l15792
 17189                           
 17190                           ;main.c: 2779: itoa(buf, value, 16);
 17191  002A0E  0100               	movlb	0	; () banked
 17192  002A10  0E00               	movlw	high printNodeFirmwareVersion@buf
 17193  002A12  6F71               	movwf	(?_itoa+1)& (0+255),b
 17194  002A14  0EC0               	movlw	low printNodeFirmwareVersion@buf
 17195  002A16  6F70               	movwf	?_itoa& (0+255),b
 17196  002A18  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17197  002A1C  6B73               	clrf	(?_itoa+3)& (0+255),b
 17198  002A1E  6B75               	clrf	(?_itoa+5)& (0+255),b
 17199  002A20  0E10               	movlw	16
 17200  002A22  6F74               	movwf	(?_itoa+4)& (0+255),b
 17201  002A24  EC46  F00B         	call	_itoa	;wreg free
 17202                           
 17203                           ; BSR set to: 0
 17204                           ;main.c: 2780: strcat(wrkbuf, buf);
 17205  002A28  0E01               	movlw	high _wrkbuf
 17206  002A2A  0100               	movlb	0	; () banked
 17207  002A2C  6F61               	movwf	(?_strcat+1)& (0+255),b
 17208  002A2E  0E7B               	movlw	low _wrkbuf
 17209  002A30  6F60               	movwf	?_strcat& (0+255),b
 17210  002A32  0E00               	movlw	high printNodeFirmwareVersion@buf
 17211  002A34  6F63               	movwf	(?_strcat+3)& (0+255),b
 17212  002A36  0EC0               	movlw	low printNodeFirmwareVersion@buf
 17213  002A38  6F62               	movwf	(?_strcat+2)& (0+255),b
 17214  002A3A  EC5F  F00D         	call	_strcat	;wreg free
 17215                           
 17216                           ;main.c: 2781: }
 17217  002A3E  D00B               	goto	l15794
 17218  002A40                     l15792:
 17219                           
 17220                           ;main.c: 2782: else {
 17221                           ;main.c: 2783: strcat(wrkbuf, "?");
 17222  002A40  0E01               	movlw	high _wrkbuf
 17223  002A42  0100               	movlb	0	; () banked
 17224  002A44  6F61               	movwf	(?_strcat+1)& (0+255),b
 17225  002A46  0E7B               	movlw	low _wrkbuf
 17226  002A48  6F60               	movwf	?_strcat& (0+255),b
 17227  002A4A  0E7C               	movlw	high STR_265
 17228  002A4C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17229  002A4E  0EFC               	movlw	low STR_265
 17230  002A50  6F62               	movwf	(?_strcat+2)& (0+255),b
 17231  002A52  EC5F  F00D         	call	_strcat	;wreg free
 17232  002A56                     l15794:
 17233                           
 17234                           ;main.c: 2784: }
 17235                           ;main.c: 2786: if (i < 2) {
 17236  002A56  0E02               	movlw	2
 17237  002A58  0100               	movlb	0	; () banked
 17238  002A5A  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17239  002A5C  D00A               	goto	l15798
 17240                           
 17241                           ; BSR set to: 0
 17242                           ;main.c: 2787: strcat(wrkbuf, ".");
 17243  002A5E  0E01               	movlw	high _wrkbuf
 17244  002A60  6F61               	movwf	(?_strcat+1)& (0+255),b
 17245  002A62  0E7B               	movlw	low _wrkbuf
 17246  002A64  6F60               	movwf	?_strcat& (0+255),b
 17247  002A66  0E7C               	movlw	high STR_266
 17248  002A68  6F63               	movwf	(?_strcat+3)& (0+255),b
 17249  002A6A  0EF6               	movlw	low STR_266
 17250  002A6C  6F62               	movwf	(?_strcat+2)& (0+255),b
 17251  002A6E  EC5F  F00D         	call	_strcat	;wreg free
 17252  002A72                     l15798:
 17253  002A72  0100               	movlb	0	; () banked
 17254  002A74  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17255                           
 17256                           ; BSR set to: 0
 17257  002A76  0E02               	movlw	2
 17258  002A78  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17259  002A7A  D7BC               	goto	l15786
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;main.c: 2788: }
 17263                           ;main.c: 2790: }
 17264                           ;main.c: 2792: putsUSART(wrkbuf);
 17265  002A7C  0E01               	movlw	high _wrkbuf
 17266  002A7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17267  002A80  0E7B               	movlw	low _wrkbuf
 17268  002A82  6F61               	movwf	?_putsUSART& (0+255),b
 17269  002A84  EC33  F00D         	call	_putsUSART	;wreg free
 17270                           
 17271                           ;main.c: 2793: putsUSART((char *) "\r\n");
 17272  002A88  0E71               	movlw	high (STR_211+50)
 17273  002A8A  0100               	movlb	0	; () banked
 17274  002A8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17275  002A8E  0E80               	movlw	low (STR_211+50)
 17276  002A90  6F61               	movwf	?_putsUSART& (0+255),b
 17277  002A92  EF33  F00D         	goto	_putsUSART	;wreg free
 17278  002A96                     __end_of_printNodeFirmwareVersion:
 17279                           	opt stack 0
 17280                           tblptru	equ	0xFF8
 17281                           tblptrh	equ	0xFF7
 17282                           tblptrl	equ	0xFF6
 17283                           tablat	equ	0xFF5
 17284                           prodh	equ	0xFF4
 17285                           prodl	equ	0xFF3
 17286                           intcon	equ	0xFF2
 17287                           indf0	equ	0xFEF
 17288                           postinc0	equ	0xFEE
 17289                           fsr0h	equ	0xFEA
 17290                           fsr0l	equ	0xFE9
 17291                           wreg	equ	0xFE8
 17292                           indf1	equ	0xFE7
 17293                           postinc1	equ	0xFE6
 17294                           postdec1	equ	0xFE5
 17295                           fsr1h	equ	0xFE2
 17296                           fsr1l	equ	0xFE1
 17297                           indf2	equ	0xFDF
 17298                           postinc2	equ	0xFDE
 17299                           postdec2	equ	0xFDD
 17300                           plusw2	equ	0xFDB
 17301                           fsr2h	equ	0xFDA
 17302                           fsr2l	equ	0xFD9
 17303                           status	equ	0xFD8
 17304                           
 17305 ;; *************** function _strcat *****************
 17306 ;; Defined at:
 17307 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17308 ;; Parameters:    Size  Location     Type
 17309 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17310 ;;		 -> wrkbuf(80), 
 17311 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17312 ;;		 -> STR_266(2), STR_265(2), printNodeFirmwareVersion@buf(3), STR_260(2), 
 17313 ;;		 -> STR_259(3), STR_258(2), printGUID@buf(3), 
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17316 ;;		 -> wrkbuf(80), 
 17317 ;; Return value:  Size  Location     Type
 17318 ;;                  2    0[BANK0 ] PTR unsigned char 
 17319 ;; Registers used:
 17320 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17321 ;; Tracked objects:
 17322 ;;		On entry : F/0
 17323 ;;		On exit  : 0/0
 17324 ;;		Unchanged: 0/0
 17325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17326 ;;      Params:         0       4       0       0       0       0       0
 17327 ;;      Locals:         0       2       0       0       0       0       0
 17328 ;;      Temps:          0       0       0       0       0       0       0
 17329 ;;      Totals:         0       6       0       0       0       0       0
 17330 ;;Total ram usage:        6 bytes
 17331 ;; Hardware stack levels used:    1
 17332 ;; Hardware stack levels required when called:    3
 17333 ;; This function calls:
 17334 ;;		Nothing
 17335 ;; This function is called by:
 17336 ;;		_printGUID
 17337 ;;		_printNodeFirmwareVersion
 17338 ;; This function uses a non-reentrant model
 17339 ;;
 17340                           
 17341                           	psect	text32
 17342  001ABE                     __ptext32:
 17343                           	opt stack 0
 17344  001ABE                     _strcat:
 17345                           	opt stack 24
 17346                           
 17347                           ; BSR set to: 0
 17348                           
 17349                           ;incstack = 0
 17350                           ;incstack = 0
 17351  001ABE  C060  F064         	movff	strcat@to,strcat@cp
 17352  001AC2  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17353  001AC6  D002               	goto	l16458
 17354  001AC8                     l16456:
 17355                           
 17356                           ; BSR set to: 0
 17357  001AC8  4B64               	infsnz	strcat@cp& (0+255),f,b
 17358  001ACA  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17359  001ACC                     l16458:
 17360                           
 17361                           ; BSR set to: 0
 17362  001ACC  C064  FFD9         	movff	strcat@cp,fsr2l
 17363  001AD0  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17364  001AD4  50DF               	movf	indf2,w,c
 17365  001AD6  E006               	bz	l16462
 17366  001AD8  D7F7               	goto	l16456
 17367  001ADA                     l16460:
 17368  001ADA  0100               	movlb	0	; () banked
 17369  001ADC  4B64               	infsnz	strcat@cp& (0+255),f,b
 17370  001ADE  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17371  001AE0  4B62               	infsnz	strcat@from& (0+255),f,b
 17372  001AE2  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17373  001AE4                     l16462:
 17374                           
 17375                           ; BSR set to: 0
 17376  001AE4  C062  FFF6         	movff	strcat@from,tblptrl
 17377  001AE8  C063  FFF7         	movff	strcat@from+1,tblptrh
 17378  001AEC  6AF8               	clrf	tblptru,c
 17379  001AEE  C064  FFD9         	movff	strcat@cp,fsr2l
 17380  001AF2  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17381  001AF6  0E05               	movlw	(high __ramtop+-1)
 17382  001AF8  64F7               	cpfsgt	tblptrh,c
 17383  001AFA  D003               	bra	u22567
 17384  001AFC  0008               	tblrd		*
 17385  001AFE  50F5               	movf	tablat,w,c
 17386  001B00  D005               	bra	u22560
 17387  001B02                     u22567:
 17388  001B02  CFF6 FFE9          	movff	tblptrl,fsr0l
 17389  001B06  CFF7 FFEA          	movff	tblptrh,fsr0h
 17390  001B0A  50EF               	movf	indf0,w,c
 17391  001B0C                     u22560:
 17392  001B0C  6EDF               	movwf	indf2,c
 17393  001B0E  50DF               	movf	indf2,w,c
 17394  001B10  B4D8               	btfsc	status,2,c
 17395  001B12  0012               	return	
 17396  001B14  D7E2               	goto	l16460
 17397  001B16                     __end_of_strcat:
 17398                           	opt stack 0
 17399                           tblptru	equ	0xFF8
 17400                           tblptrh	equ	0xFF7
 17401                           tblptrl	equ	0xFF6
 17402                           tablat	equ	0xFF5
 17403                           prodh	equ	0xFF4
 17404                           prodl	equ	0xFF3
 17405                           intcon	equ	0xFF2
 17406                           indf0	equ	0xFEF
 17407                           postinc0	equ	0xFEE
 17408                           fsr0h	equ	0xFEA
 17409                           fsr0l	equ	0xFE9
 17410                           wreg	equ	0xFE8
 17411                           indf1	equ	0xFE7
 17412                           postinc1	equ	0xFE6
 17413                           postdec1	equ	0xFE5
 17414                           fsr1h	equ	0xFE2
 17415                           fsr1l	equ	0xFE1
 17416                           indf2	equ	0xFDF
 17417                           postinc2	equ	0xFDE
 17418                           postdec2	equ	0xFDD
 17419                           plusw2	equ	0xFDB
 17420                           fsr2h	equ	0xFDA
 17421                           fsr2l	equ	0xFD9
 17422                           status	equ	0xFD8
 17423                           
 17424 ;; *************** function _readRegister *****************
 17425 ;; Defined at:
 17426 ;;		line 2269 in file "main.c"
 17427 ;; Parameters:    Size  Location     Type
 17428 ;;  nodeid          1    wreg     unsigned char 
 17429 ;;  reg             1   86[BANK0 ] unsigned char 
 17430 ;;  timeout         2   87[BANK0 ] unsigned short 
 17431 ;;  value           1   89[BANK0 ] PTR unsigned char 
 17432 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17433 ;; Auto vars:     Size  Location     Type
 17434 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17435 ;; Return value:  Size  Location     Type
 17436 ;;                  1    wreg      enum E15660
 17437 ;; Registers used:
 17438 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17439 ;; Tracked objects:
 17440 ;;		On entry : F/0
 17441 ;;		On exit  : E/0
 17442 ;;		Unchanged: 0/0
 17443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17444 ;;      Params:         0       4       0       0       0       0       0
 17445 ;;      Locals:         0       1       0       0       0       0       0
 17446 ;;      Temps:          0       4       0       0       0       0       0
 17447 ;;      Totals:         0       9       0       0       0       0       0
 17448 ;;Total ram usage:        9 bytes
 17449 ;; Hardware stack levels used:    1
 17450 ;; Hardware stack levels required when called:    7
 17451 ;; This function calls:
 17452 ;;		_sendVSCPFrame
 17453 ;;		_getVSCPFrame
 17454 ;; This function is called by:
 17455 ;;		_findNodes
 17456 ;;		_printGUID
 17457 ;;		_printMDF
 17458 ;;		_printNodeFirmwareVersion
 17459 ;; This function uses a non-reentrant model
 17460 ;;
 17461                           
 17462                           	psect	text33
 17463  002632                     __ptext33:
 17464                           	opt stack 0
 17465  002632                     _readRegister:
 17466                           	opt stack 20
 17467                           
 17468                           ;incstack = 0
 17469                           ;incstack = 0
 17470                           ;readRegister@nodeid stored from wreg
 17471  002632  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17472                           
 17473                           ; BSR set to: 0
 17474                           ;main.c: 2270: vscpData[ 0 ] = nodeid;
 17475  002636  C0BE  F1E3         	movff	readRegister@nodeid,_vscpData
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;main.c: 2271: vscpData[ 1 ] = reg;
 17479  00263A  C0B6  F1E4         	movff	readRegister@reg,_vscpData+1
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;main.c: 2273: if (sendVSCPFrame(0,
 17483                           ;main.c: 2274: 9,
 17484                           ;main.c: 2275: 0,
 17485                           ;main.c: 2276: 0,
 17486                           ;main.c: 2277: 2,
 17487                           ;main.c: 2278: vscpData)) {
 17488  00263E  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17489  002640  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17490  002642  0E09               	movlw	9
 17491  002644  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17492  002646  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17493  002648  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17494  00264A  0E02               	movlw	2
 17495  00264C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17496  00264E  0E01               	movlw	high _vscpData
 17497  002650  0100               	movlb	0	; () banked
 17498  002652  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17499  002654  0EE3               	movlw	low _vscpData
 17500  002656  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17501  002658  EC73  F013         	call	_sendVSCPFrame	;wreg free
 17502  00265C  0900               	iorlw	0
 17503  00265E  E041               	bz	l16450
 17504                           
 17505                           ;main.c: 2280: timekeeper = 0;
 17506  002660  6A22               	clrf	_timekeeper,c	;volatile
 17507  002662  6A23               	clrf	_timekeeper+1,c	;volatile
 17508  002664  6A24               	clrf	_timekeeper+2,c	;volatile
 17509  002666  6A25               	clrf	_timekeeper+3,c	;volatile
 17510                           
 17511                           ;main.c: 2281: while (timekeeper < timeout) {
 17512  002668  D02C               	goto	l16448
 17513  00266A                     l1100:
 17514                           
 17515                           ; BSR set to: 0
 17516  00266A  0004               	clrwdt		;# 
 17517                           
 17518                           ;main.c: 2285: if (getVSCPFrame(&vscpClass,
 17519                           ;main.c: 2286: &vscpType,
 17520                           ;main.c: 2287: &vscpNodeId,
 17521                           ;main.c: 2288: &vscpPriority,
 17522                           ;main.c: 2289: &vscpSize,
 17523                           ;main.c: 2290: vscpData)) {
 17524  00266C  0E3F               	movlw	low _vscpType
 17525  00266E  0100               	movlb	0	; () banked
 17526  002670  6F73               	movwf	?_getVSCPFrame& (0+255),b
 17527  002672  0E3C               	movlw	low _vscpNodeId
 17528  002674  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17529  002676  0E3D               	movlw	low _vscpPriority
 17530  002678  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17531  00267A  0E3E               	movlw	low _vscpSize
 17532  00267C  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17533  00267E  0E01               	movlw	high _vscpData
 17534  002680  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17535  002682  0EE3               	movlw	low _vscpData
 17536  002684  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17537  002686  0E38               	movlw	_vscpClass& (0+255)
 17538  002688  EC14  F010         	call	_getVSCPFrame
 17539  00268C  0900               	iorlw	0
 17540  00268E  E019               	bz	l16448
 17541                           
 17542                           ; BSR set to: 0
 17543                           ;main.c: 2291: if ((nodeid == vscpNodeId) &&
 17544                           ;main.c: 2292: (0 == vscpClass) &&
 17545                           ;main.c: 2293: (10 == vscpType) &&
 17546                           ;main.c: 2294: (2 == vscpSize) &&
 17547                           ;main.c: 2295: (reg == vscpData[ 0 ])) {
 17548  002690  503C               	movf	_vscpNodeId,w,c
 17549  002692  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17550  002694  D016               	goto	l16448
 17551                           
 17552                           ; BSR set to: 0
 17553  002696  5039               	movf	_vscpClass+1,w,c
 17554  002698  1038               	iorwf	_vscpClass,w,c
 17555  00269A  E113               	bnz	l16448
 17556                           
 17557                           ; BSR set to: 0
 17558  00269C  503F               	movf	_vscpType,w,c
 17559  00269E  0A0A               	xorlw	10
 17560  0026A0  E110               	bnz	l16448
 17561                           
 17562                           ; BSR set to: 0
 17563  0026A2  503E               	movf	_vscpSize,w,c
 17564  0026A4  0A02               	xorlw	2
 17565  0026A6  E10D               	bnz	l16448
 17566                           
 17567                           ; BSR set to: 0
 17568  0026A8  0101               	movlb	1	; () banked
 17569  0026AA  51E3               	movf	_vscpData& (0+255),w,b
 17570  0026AC  0100               	movlb	0	; () banked
 17571  0026AE  63B6               	cpfseq	readRegister@reg& (0+255),b
 17572  0026B0  D008               	goto	l16448
 17573                           
 17574                           ; BSR set to: 0
 17575                           ;main.c: 2296: *value = vscpData[ 1 ];
 17576  0026B2  51B9               	movf	readRegister@value& (0+255),w,b
 17577  0026B4  6ED9               	movwf	fsr2l,c
 17578  0026B6  6ADA               	clrf	fsr2h,c
 17579  0026B8  0101               	movlb	1	; () banked
 17580  0026BA  C1E4  FFDF         	movff	_vscpData+1,indf2
 17581                           
 17582                           ; BSR set to: 1
 17583                           ;main.c: 2297: return 1;
 17584  0026BE  0E01               	movlw	1
 17585  0026C0  D011               	goto	l1103
 17586  0026C2                     l16448:
 17587  0026C2  0100               	movlb	0	; () banked
 17588  0026C4  51B7               	movf	readRegister@timeout& (0+255),w,b
 17589  0026C6  6FBA               	movwf	??_readRegister& (0+255),b
 17590  0026C8  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17591  0026CA  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17592  0026CC  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17593  0026CE  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17594  0026D0  51BA               	movf	??_readRegister& (0+255),w,b
 17595  0026D2  5C22               	subwf	_timekeeper,w,c	;volatile
 17596  0026D4  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17597  0026D6  5823               	subwfb	_timekeeper+1,w,c	;volatile
 17598  0026D8  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17599  0026DA  5824               	subwfb	_timekeeper+2,w,c	;volatile
 17600  0026DC  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17601  0026DE  5825               	subwfb	_timekeeper+3,w,c	;volatile
 17602  0026E0  E3C4               	bnc	l1100
 17603  0026E2                     l16450:
 17604                           
 17605                           ;main.c: 2298: }
 17606                           ;main.c: 2299: }
 17607                           ;main.c: 2300: }
 17608                           ;main.c: 2301: }
 17609                           ;main.c: 2303: return 0;
 17610  0026E2  0E00               	movlw	0
 17611  0026E4                     l1103:
 17612  0026E4  0012               	return	
 17613  0026E6                     __end_of_readRegister:
 17614                           	opt stack 0
 17615                           tblptru	equ	0xFF8
 17616                           tblptrh	equ	0xFF7
 17617                           tblptrl	equ	0xFF6
 17618                           tablat	equ	0xFF5
 17619                           prodh	equ	0xFF4
 17620                           prodl	equ	0xFF3
 17621                           intcon	equ	0xFF2
 17622                           indf0	equ	0xFEF
 17623                           postinc0	equ	0xFEE
 17624                           fsr0h	equ	0xFEA
 17625                           fsr0l	equ	0xFE9
 17626                           wreg	equ	0xFE8
 17627                           indf1	equ	0xFE7
 17628                           postinc1	equ	0xFE6
 17629                           postdec1	equ	0xFE5
 17630                           fsr1h	equ	0xFE2
 17631                           fsr1l	equ	0xFE1
 17632                           indf2	equ	0xFDF
 17633                           postinc2	equ	0xFDE
 17634                           postdec2	equ	0xFDD
 17635                           plusw2	equ	0xFDB
 17636                           fsr2h	equ	0xFDA
 17637                           fsr2l	equ	0xFD9
 17638                           status	equ	0xFD8
 17639                           
 17640 ;; *************** function _sendVSCPFrame *****************
 17641 ;; Defined at:
 17642 ;;		line 2990 in file "main.c"
 17643 ;; Parameters:    Size  Location     Type
 17644 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17645 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17646 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17647 ;;  priority        1   58[BANK0 ] unsigned char 
 17648 ;;  size            1   59[BANK0 ] unsigned char 
 17649 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17650 ;;		 -> vscpData(8), 
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;  id              4   82[BANK0 ] unsigned long 
 17653 ;; Return value:  Size  Location     Type
 17654 ;;                  1    wreg      unsigned char 
 17655 ;; Registers used:
 17656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17657 ;; Tracked objects:
 17658 ;;		On entry : F/0
 17659 ;;		On exit  : E/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17662 ;;      Params:         0       8       0       0       0       0       0
 17663 ;;      Locals:         0       4       0       0       0       0       0
 17664 ;;      Temps:          0      20       0       0       0       0       0
 17665 ;;      Totals:         0      32       0       0       0       0       0
 17666 ;;Total ram usage:       32 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    6
 17669 ;; This function calls:
 17670 ;;		_sendCANFrame
 17671 ;; This function is called by:
 17672 ;;		_doModeVerbose
 17673 ;;		_readRegister
 17674 ;;		_readRegisterExtended
 17675 ;;		_writeRegisterExtended
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           	psect	text34
 17680  0026E6                     __ptext34:
 17681                           	opt stack 0
 17682  0026E6                     _sendVSCPFrame:
 17683                           	opt stack 20
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;main.c: 2991: uint32_t id = ((uint32_t) priority << 26) |
 17687                           ;main.c: 2992: ((uint32_t) vscpclass << 16) |
 17688                           ;main.c: 2993: ((uint32_t) vscptype << 8) |
 17689                           ;main.c: 2994: nodeid;
 17690                           
 17691                           ;incstack = 0
 17692                           ;incstack = 0
 17693  0026E6  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17694  0026EA  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17695  0026EC  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17696  0026EE  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17697  0026F0  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17698  0026F4  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17699  0026F8  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17700  0026FC  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17701  0026FE  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17702  002700  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17703  002702  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17704  002704  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17705  002706  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17706  002708  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17707  00270A  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17708  00270E  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17709  002712  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17710  002714  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17711  002716  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17712  00271A  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17713  00271C  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17714  00271E  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17715  002720  0E1A               	movlw	26
 17716  002722                     u20305:
 17717  002722  90D8               	bcf	status,0,c
 17718  002724  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17719  002726  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17720  002728  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17721  00272A  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17722  00272C  2EE8               	decfsz	wreg,f,c
 17723  00272E  D7F9               	goto	u20305
 17724  002730  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17725  002732  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17726  002734  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17727  002736  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17728  002738  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17729  00273A  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17730  00273C  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17731  00273E  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17732  002740  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17733  002742  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17734  002744  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17735  002746  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17736  002748  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17737  00274A  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17738  00274C  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17739  00274E  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17740  002750  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17741  002752  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17742  002754  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17743  002756  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17744  002758  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17745  00275A  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17746  00275C  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17747  00275E  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17748  002760  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17749  002762  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17750  002764  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17751  002766  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17752  002768  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17753  00276A  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17754  00276C  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17755  00276E  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17756  002770  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17757                           
 17758                           ; BSR set to: 0
 17759                           ;main.c: 2996: if (!sendCANFrame(id, size, pData)) {
 17760  002772  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17761  002776  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17762  00277A  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17763  00277E  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17764  002782  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17765  002786  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17766  00278A  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17767  00278E  EC7E  F00B         	call	_sendCANFrame	;wreg free
 17768  002792  0900               	iorlw	0
 17769                           
 17770                           ;main.c: 2998: return 0;
 17771  002794  0E00               	movlw	0
 17772  002796  A4D8               	btfss	status,2,c
 17773                           
 17774                           ;main.c: 2999: }
 17775                           ;main.c: 3001: return 1;
 17776  002798  0E01               	movlw	1
 17777  00279A  0012               	return	
 17778  00279C                     __end_of_sendVSCPFrame:
 17779                           	opt stack 0
 17780                           tblptru	equ	0xFF8
 17781                           tblptrh	equ	0xFF7
 17782                           tblptrl	equ	0xFF6
 17783                           tablat	equ	0xFF5
 17784                           prodh	equ	0xFF4
 17785                           prodl	equ	0xFF3
 17786                           intcon	equ	0xFF2
 17787                           indf0	equ	0xFEF
 17788                           postinc0	equ	0xFEE
 17789                           fsr0h	equ	0xFEA
 17790                           fsr0l	equ	0xFE9
 17791                           wreg	equ	0xFE8
 17792                           indf1	equ	0xFE7
 17793                           postinc1	equ	0xFE6
 17794                           postdec1	equ	0xFE5
 17795                           fsr1h	equ	0xFE2
 17796                           fsr1l	equ	0xFE1
 17797                           indf2	equ	0xFDF
 17798                           postinc2	equ	0xFDE
 17799                           postdec2	equ	0xFDD
 17800                           plusw2	equ	0xFDB
 17801                           fsr2h	equ	0xFDA
 17802                           fsr2l	equ	0xFD9
 17803                           status	equ	0xFD8
 17804                           
 17805 ;; *************** function _sendCANFrame *****************
 17806 ;; Defined at:
 17807 ;;		line 3036 in file "main.c"
 17808 ;; Parameters:    Size  Location     Type
 17809 ;;  id              4   47[BANK0 ] unsigned long 
 17810 ;;  dlc             1   51[BANK0 ] unsigned char 
 17811 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17812 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;		None
 17815 ;; Return value:  Size  Location     Type
 17816 ;;                  1    wreg      unsigned char 
 17817 ;; Registers used:
 17818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17819 ;; Tracked objects:
 17820 ;;		On entry : F/0
 17821 ;;		On exit  : E/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17824 ;;      Params:         0       7       0       0       0       0       0
 17825 ;;      Locals:         0       0       0       0       0       0       0
 17826 ;;      Temps:          0       0       0       0       0       0       0
 17827 ;;      Totals:         0       7       0       0       0       0       0
 17828 ;;Total ram usage:        7 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    5
 17831 ;; This function calls:
 17832 ;;		_ECANSendMessage
 17833 ;; This function is called by:
 17834 ;;		_doModeSLCAN
 17835 ;;		_receiveVSCPModeCanalMsg
 17836 ;;		_sendVSCPFrame
 17837 ;; This function uses a non-reentrant model
 17838 ;;
 17839                           
 17840                           	psect	text35
 17841  0016FC                     __ptext35:
 17842                           	opt stack 0
 17843  0016FC                     _sendCANFrame:
 17844                           	opt stack 23
 17845                           
 17846                           ; BSR set to: 0
 17847                           ;main.c: 3037: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17848                           
 17849                           ;incstack = 0
 17850                           ;incstack = 0
 17851  0016FC  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17852  001700  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17853  001704  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17854  001708  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17855  00170C  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17856  001710  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17857  001714  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17858  001718  0E20               	movlw	32
 17859  00171A  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17860  00171C  ECC6  F01B         	call	_ECANSendMessage	;wreg free
 17861  001720  0900               	iorlw	0
 17862  001722  E107               	bnz	l16296
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;main.c: 3039: can_transmitOverruns++;
 17866  001724  0101               	movlb	1	; () banked
 17867  001726  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17868  001728  0E00               	movlw	0
 17869  00172A  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17870  00172C  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17871  00172E  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17872                           
 17873                           ; BSR set to: 1
 17874                           ;main.c: 3040: return 0;
 17875  001730  D001               	goto	l1299
 17876  001732                     l16296:
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;main.c: 3041: }
 17880                           ;main.c: 3043: return 1;
 17881  001732  0E01               	movlw	1
 17882  001734                     l1299:
 17883  001734  0012               	return	
 17884  001736                     __end_of_sendCANFrame:
 17885                           	opt stack 0
 17886                           tblptru	equ	0xFF8
 17887                           tblptrh	equ	0xFF7
 17888                           tblptrl	equ	0xFF6
 17889                           tablat	equ	0xFF5
 17890                           prodh	equ	0xFF4
 17891                           prodl	equ	0xFF3
 17892                           intcon	equ	0xFF2
 17893                           indf0	equ	0xFEF
 17894                           postinc0	equ	0xFEE
 17895                           fsr0h	equ	0xFEA
 17896                           fsr0l	equ	0xFE9
 17897                           wreg	equ	0xFE8
 17898                           indf1	equ	0xFE7
 17899                           postinc1	equ	0xFE6
 17900                           postdec1	equ	0xFE5
 17901                           fsr1h	equ	0xFE2
 17902                           fsr1l	equ	0xFE1
 17903                           indf2	equ	0xFDF
 17904                           postinc2	equ	0xFDE
 17905                           postdec2	equ	0xFDD
 17906                           plusw2	equ	0xFDB
 17907                           fsr2h	equ	0xFDA
 17908                           fsr2l	equ	0xFD9
 17909                           status	equ	0xFD8
 17910                           
 17911 ;; *************** function _ECANSendMessage *****************
 17912 ;; Defined at:
 17913 ;;		line 617 in file "ECAN.c"
 17914 ;; Parameters:    Size  Location     Type
 17915 ;;  id              4   10[BANK0 ] unsigned long 
 17916 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17917 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17918 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17919 ;;  msgFlags        1   17[BANK0 ] enum E16315
 17920 ;; Auto vars:     Size  Location     Type
 17921 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17922 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17923 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17924 ;;		 -> B0CON(1), 
 17925 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17926 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17927 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17928 ;;		 -> B0CON(1), 
 17929 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17930 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17931 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17932 ;;		 -> B0CON(1), 
 17933 ;;  i               1   44[BANK0 ] unsigned char 
 17934 ;;  temp            1   43[BANK0 ] unsigned char 
 17935 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17936 ;;  j               1   39[BANK0 ] unsigned char 
 17937 ;;  buffers         1   38[BANK0 ] unsigned char 
 17938 ;;  mode            1   37[BANK0 ] unsigned char 
 17939 ;; Return value:  Size  Location     Type
 17940 ;;                  1    wreg      enum E15660
 17941 ;; Registers used:
 17942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17943 ;; Tracked objects:
 17944 ;;		On entry : F/0
 17945 ;;		On exit  : F/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17948 ;;      Params:         0       8       0       0       0       0       0
 17949 ;;      Locals:         0      28       0       0       0       0       0
 17950 ;;      Temps:          0       1       0       0       0       0       0
 17951 ;;      Totals:         0      37       0       0       0       0       0
 17952 ;;Total ram usage:       37 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    4
 17955 ;; This function calls:
 17956 ;;		__CANIDToRegs
 17957 ;; This function is called by:
 17958 ;;		_sendCANFrame
 17959 ;; This function uses a non-reentrant model
 17960 ;;
 17961                           
 17962                           	psect	text36
 17963  00378C                     __ptext36:
 17964                           	opt stack 0
 17965  00378C                     _ECANSendMessage:
 17966                           	opt stack 23
 17967                           
 17968                           ; BSR set to: 0
 17969                           ;ECAN.c: 619: BYTE mode;
 17970                           ;ECAN.c: 620: BYTE buffers;
 17971                           ;ECAN.c: 628: BYTE i,j;
 17972                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17973                           ;ECAN.c: 630: BYTE* pb[9];
 17974                           ;ECAN.c: 631: BYTE temp;
 17975                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17976                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17977                           
 17978                           ;incstack = 0
 17979                           ;incstack = 0
 17980  00378C  0E0F               	movlw	15	;volatile
 17981  00378E  0100               	movlb	0	; () banked
 17982  003790  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17983  003792  0E40               	movlw	64	;volatile
 17984  003794  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17985                           
 17986                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17987  003796  0E0F               	movlw	15	;volatile
 17988  003798  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17989  00379A  0E30               	movlw	48	;volatile
 17990  00379C  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17991                           
 17992                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17993  00379E  0E0F               	movlw	15	;volatile
 17994  0037A0  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17995  0037A2  0E20               	movlw	32	;volatile
 17996  0037A4  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17997                           
 17998                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17999  0037A6  0E0E               	movlw	14	;volatile
 18000  0037A8  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 18001  0037AA  0E20               	movlw	32	;volatile
 18002  0037AC  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 18003                           
 18004                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 18005  0037AE  0E0E               	movlw	14	;volatile
 18006  0037B0  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 18007  0037B2  0E30               	movlw	48	;volatile
 18008  0037B4  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 18009                           
 18010                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 18011  0037B6  0E0E               	movlw	14	;volatile
 18012  0037B8  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 18013  0037BA  0E40               	movlw	64	;volatile
 18014  0037BC  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 18015                           
 18016                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 18017  0037BE  0E0E               	movlw	14	;volatile
 18018  0037C0  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 18019  0037C2  0E50               	movlw	80	;volatile
 18020  0037C4  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 18021                           
 18022                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 18023  0037C6  0E0E               	movlw	14	;volatile
 18024  0037C8  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 18025  0037CA  0E60               	movlw	96	;volatile
 18026  0037CC  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 18027                           
 18028                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 18029  0037CE  0E0E               	movlw	14	;volatile
 18030  0037D0  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 18031  0037D2  0E70               	movlw	112	;volatile
 18032  0037D4  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 18036  0037D6  5077               	movf	3959,w,c	;volatile
 18037  0037D8  0BC0               	andlw	192
 18038  0037DA  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;ECAN.c: 660: if ( mode == 0x00 )
 18042  0037DC  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 18043  0037DE  D002               	goto	l13126
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;ECAN.c: 661: buffers = 2;
 18047  0037E0  0E02               	movlw	2
 18048  0037E2  D001               	goto	L19
 18049  0037E4                     l13126:
 18050                           
 18051                           ; BSR set to: 0
 18052                           ;ECAN.c: 662: else
 18053                           ;ECAN.c: 663: buffers = 8;
 18054  0037E4  0E08               	movlw	8
 18055  0037E6                     L19:
 18056  0037E6  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 18060  0037E8  010D               	movlb	13	; () banked
 18061  0037EA  90D8               	bcf	status,0,c
 18062  0037EC  31F8               	rrcf	248,w,b	;volatile
 18063  0037EE  0100               	movlb	0	; () banked
 18064  0037F0  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 18068  0037F2  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 18069  0037F4  D07D               	goto	l13186
 18070  0037F6                     l13132:
 18071                           
 18072                           ; BSR set to: 0
 18073                           ;ECAN.c: 688: {
 18074                           ;ECAN.c: 693: ptr = pb[i];
 18075  0037F6  518C               	movf	ECANSendMessage@i& (0+255),w,b
 18076  0037F8  0D02               	mullw	2
 18077  0037FA  50F3               	movf	prodl,w,c
 18078  0037FC  0F73               	addlw	low ECANSendMessage@pb
 18079  0037FE  6ED9               	movwf	fsr2l,c
 18080  003800  6ADA               	clrf	fsr2h,c
 18081  003802  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 18082  003806  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 18083                           
 18084                           ; BSR set to: 0
 18085                           ;ECAN.c: 694: tempPtr = ptr;
 18086  00380A  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 18087  00380E  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 18088                           
 18089                           ; BSR set to: 0
 18090                           ;ECAN.c: 702: if ( i > 2 )
 18091  003812  0E02               	movlw	2
 18092  003814  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 18093  003816  D004               	goto	l13144
 18094                           
 18095                           ; BSR set to: 0
 18096                           ;ECAN.c: 703: {
 18097                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 18098  003818  90D8               	bcf	status,0,c
 18099  00381A  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 18100                           
 18101                           ; BSR set to: 0
 18102                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 18103  00381C  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 18104  00381E  D067               	goto	l13184
 18105  003820                     l13144:
 18106                           
 18107                           ; BSR set to: 0
 18108                           ;ECAN.c: 714: }
 18109                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18110  003820  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18111  003824  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18112  003828  50DF               	movf	indf2,w,c
 18113  00382A  6F72               	movwf	??_ECANSendMessage& (0+255),b
 18114  00382C  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 18115  00382E  D05F               	goto	l13184
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;ECAN.c: 721: {
 18119                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18120  003830  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18121  003834  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18122  003838  0EFC               	movlw	252
 18123  00383A  16DF               	andwf	indf2,f,c
 18124                           
 18125                           ; BSR set to: 0
 18126                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18127  00383C  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18128  003840  0E03               	movlw	3
 18129  003842  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 18130  003844  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18131  003848  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18132  00384C  5172               	movf	??_ECANSendMessage& (0+255),w,b
 18133  00384E  12DF               	iorwf	indf2,f,c
 18134                           
 18135                           ; BSR set to: 0
 18136                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18137  003850  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18138  003852  D004               	goto	l1467
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18142  003854  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18143  003856  0940               	iorlw	64
 18144  003858  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 18145  00385A  D002               	goto	l13154
 18146  00385C                     l1467:
 18147                           
 18148                           ; BSR set to: 0
 18149                           ;ECAN.c: 729: else
 18150                           ;ECAN.c: 730: temp = dataLen;
 18151  00385C  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18152  003860                     l13154:
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;ECAN.c: 732: *(ptr+5) = temp;
 18156  003860  EE20 F005          	lfsr	2,5
 18157  003864  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 18158  003866  26D9               	addwf	fsr2l,f,c
 18159  003868  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18160  00386A  22DA               	addwfc	fsr2h,f,c
 18161  00386C  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 18162                           
 18163                           ; BSR set to: 0
 18164                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18165  003870  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18166  003872  D003               	goto	l1469
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;ECAN.c: 736: temp = 1;
 18170  003874  0E01               	movlw	1
 18171  003876  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 18172  003878  D001               	goto	l13160
 18173  00387A                     l1469:
 18174                           
 18175                           ; BSR set to: 0
 18176                           ;ECAN.c: 738: else
 18177                           ;ECAN.c: 739: temp = 0;
 18178  00387A  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 18179  00387C                     l13160:
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18183  00387C  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 18184  00387E  6F60               	movwf	?__CANIDToRegs& (0+255),b
 18185  003880  0E00               	movlw	0
 18186  003882  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18187  003884  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18188  003886  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18189  00388A  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18190  00388E  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18191  003892  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18192  003896  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18193  00389A  EC67  F019         	call	__CANIDToRegs	;wreg free
 18194                           
 18195                           ; BSR set to: 0
 18196                           ;ECAN.c: 745: ptr += 6;
 18197  00389E  0E06               	movlw	6
 18198  0038A0  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18199  0038A2  0E00               	movlw	0
 18200  0038A4  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18201                           
 18202                           ; BSR set to: 0
 18203                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18204  0038A6  6B87               	clrf	ECANSendMessage@j& (0+255),b
 18205  0038A8  D00F               	goto	l13174
 18206  0038AA                     l13166:
 18207                           
 18208                           ; BSR set to: 0
 18209                           ;ECAN.c: 748: *ptr++ = *data++;
 18210  0038AA  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 18211  0038AE  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18212  0038B2  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18213  0038B6  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18214  0038BA  CFDF FFE7          	movff	indf2,indf1
 18215                           
 18216                           ; BSR set to: 0
 18217  0038BE  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 18218  0038C0  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18219                           
 18220                           ; BSR set to: 0
 18221  0038C2  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18222  0038C4  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18223                           
 18224                           ; BSR set to: 0
 18225  0038C6  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 18226  0038C8                     l13174:
 18227                           
 18228                           ; BSR set to: 0
 18229  0038C8  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18230  0038CA  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 18231  0038CC  E3EE               	bnc	l13166
 18232                           
 18233                           ; BSR set to: 0
 18234                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18235  0038CE  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18236  0038D2  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18237  0038D6  50DF               	movf	indf2,w,c
 18238  0038D8  6F72               	movwf	??_ECANSendMessage& (0+255),b
 18239  0038DA  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 18240  0038DC  D006               	goto	l13180
 18241                           
 18242                           ; BSR set to: 0
 18243                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18244  0038DE  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18245  0038E2  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18246  0038E6  0E00               	movlw	0
 18247  0038E8  86DB               	bsf	plusw2,3,c
 18248  0038EA                     l13180:
 18249                           
 18250                           ; BSR set to: 0
 18251                           ;ECAN.c: 755: return TRUE;
 18252  0038EA  0E01               	movlw	1
 18253  0038EC  D005               	goto	l1475
 18254  0038EE                     l13184:
 18255                           
 18256                           ; BSR set to: 0
 18257  0038EE  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 18258  0038F0                     l13186:
 18259                           
 18260                           ; BSR set to: 0
 18261  0038F0  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 18262  0038F2  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 18263  0038F4  E380               	bnc	l13132
 18264                           
 18265                           ; BSR set to: 0
 18266                           ;ECAN.c: 756: }
 18267                           ;ECAN.c: 757: }
 18268                           ;ECAN.c: 760: return FALSE;
 18269  0038F6  0E00               	movlw	0
 18270  0038F8                     l1475:
 18271                           
 18272                           ; BSR set to: 0
 18273  0038F8  0012               	return	
 18274  0038FA                     __end_of_ECANSendMessage:
 18275                           	opt stack 0
 18276                           tblptru	equ	0xFF8
 18277                           tblptrh	equ	0xFF7
 18278                           tblptrl	equ	0xFF6
 18279                           tablat	equ	0xFF5
 18280                           prodh	equ	0xFF4
 18281                           prodl	equ	0xFF3
 18282                           intcon	equ	0xFF2
 18283                           indf0	equ	0xFEF
 18284                           postinc0	equ	0xFEE
 18285                           fsr0h	equ	0xFEA
 18286                           fsr0l	equ	0xFE9
 18287                           wreg	equ	0xFE8
 18288                           indf1	equ	0xFE7
 18289                           postinc1	equ	0xFE6
 18290                           postdec1	equ	0xFE5
 18291                           fsr1h	equ	0xFE2
 18292                           fsr1l	equ	0xFE1
 18293                           indf2	equ	0xFDF
 18294                           postinc2	equ	0xFDE
 18295                           postdec2	equ	0xFDD
 18296                           plusw2	equ	0xFDB
 18297                           fsr2h	equ	0xFDA
 18298                           fsr2l	equ	0xFD9
 18299                           status	equ	0xFD8
 18300                           
 18301 ;; *************** function __CANIDToRegs *****************
 18302 ;; Defined at:
 18303 ;;		line 1101 in file "ECAN.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 18306 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18307 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18308 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 18309 ;;  val             4    2[BANK0 ] unsigned long 
 18310 ;;  type            1    6[BANK0 ] unsigned char 
 18311 ;; Auto vars:     Size  Location     Type
 18312 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 18313 ;;		 -> _CANIDToRegs@val(4), 
 18314 ;; Return value:  Size  Location     Type
 18315 ;;		None               void
 18316 ;; Registers used:
 18317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 18318 ;; Tracked objects:
 18319 ;;		On entry : F/0
 18320 ;;		On exit  : F/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18323 ;;      Params:         0       7       0       0       0       0       0
 18324 ;;      Locals:         0       1       0       0       0       0       0
 18325 ;;      Temps:          0       2       0       0       0       0       0
 18326 ;;      Totals:         0      10       0       0       0       0       0
 18327 ;;Total ram usage:       10 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    3
 18330 ;; This function calls:
 18331 ;;		Nothing
 18332 ;; This function is called by:
 18333 ;;		_doModeVerbose
 18334 ;;		_ECANSendMessage
 18335 ;; This function uses a non-reentrant model
 18336 ;;
 18337                           
 18338                           	psect	text37
 18339  0032CE                     __ptext37:
 18340                           	opt stack 0
 18341  0032CE                     __CANIDToRegs:
 18342                           	opt stack 23
 18343                           
 18344                           ; BSR set to: 0
 18345                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18346                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;incstack = 0
 18350                           ;incstack = 0
 18351  0032CE  0E62               	movlw	low __CANIDToRegs@val
 18352  0032D0  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;ECAN.c: 1106: if ( type == 0 )
 18356  0032D2  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18357  0032D4  D022               	goto	l12502
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;ECAN.c: 1107: {
 18361                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18362  0032D6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18363  0032D8  6ED9               	movwf	fsr2l,c
 18364  0032DA  6ADA               	clrf	fsr2h,c
 18365  0032DC  50DF               	movf	indf2,w,c
 18366  0032DE  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18367  0032E0  90D8               	bcf	status,0,c
 18368  0032E2  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18369  0032E4  90D8               	bcf	status,0,c
 18370  0032E6  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18371  0032E8  90D8               	bcf	status,0,c
 18372  0032EA  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18373                           
 18374                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18375  0032EC  D862               	call	PL52	;call to abstracted procedure
 18376  0032EE  2AD9               	incf	fsr2l,f,c
 18377  0032F0  6ADA               	clrf	fsr2h,c
 18378  0032F2  D872               	call	PL96	;call to abstracted procedure
 18379  0032F4                     u16015:
 18380  0032F4  90D8               	bcf	status,0,c
 18381  0032F6  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18382  0032F8  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18383  0032FA  D7FC               	goto	u16015
 18384  0032FC  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18385                           
 18386                           ; BSR set to: 0
 18387                           ;ECAN.c: 1111: ptr++;
 18388                           
 18389                           ; BSR set to: 0
 18390                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18391  003300  D846               	call	PL28	;call to abstracted procedure
 18392  003302  D86A               	call	PL96	;call to abstracted procedure
 18393  003304                     u16025:
 18394  003304  90D8               	bcf	status,0,c
 18395  003306  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18396  003308  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18397  00330A  D7FC               	goto	u16025
 18398  00330C  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18399  00330E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18400  003312  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18401  003316  6EDF               	movwf	indf2,c
 18402                           
 18403                           ;ECAN.c: 1113: }
 18404  003318  D039               	goto	l1529
 18405  00331A                     l12502:
 18406                           
 18407                           ; BSR set to: 0
 18408                           ;ECAN.c: 1114: else
 18409                           ;ECAN.c: 1115: {
 18410                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18411  00331A  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18412  00331C  D842               	call	PL42	;call to abstracted procedure
 18413  00331E  0E05               	movlw	5
 18414  003320  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18415  003322                     u16035:
 18416  003322  90D8               	bcf	status,0,c
 18417  003324  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18418  003326  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18419  003328  D7FC               	goto	u16035
 18420  00332A  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18421                           
 18422                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18423  00332C  D842               	call	PL52	;call to abstracted procedure
 18424  00332E  0E03               	movlw	3
 18425  003330  D849               	call	PL72	;call to abstracted procedure
 18426  003332  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18427  003334  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18428                           
 18429                           ; BSR set to: 0
 18430                           ;ECAN.c: 1119: ptr++;
 18431                           
 18432                           ; BSR set to: 0
 18433                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18434  003338  D82A               	call	PL28	;call to abstracted procedure
 18435  00333A  0E02               	movlw	2
 18436  00333C  D843               	call	PL72	;call to abstracted procedure
 18437  00333E  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18438  003340  0BE0               	andlw	224
 18439  003342  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18440  003346  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18441  00334A  6EDF               	movwf	indf2,c
 18442                           
 18443                           ; BSR set to: 0
 18444                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18445  00334C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18446  003350  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18447  003354  0E00               	movlw	0
 18448  003356  86DB               	bsf	plusw2,3,c
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18452  003358  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18453  00335A  D823               	call	PL42	;call to abstracted procedure
 18454  00335C  0E03               	movlw	3
 18455  00335E  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18456  003360  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18457                           
 18458                           ;ECAN.c: 1124: ptr++;
 18459                           
 18460                           ; BSR set to: 0
 18461                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18462  003364  D814               	call	PL28	;call to abstracted procedure
 18463  003366  2AD9               	incf	fsr2l,f,c
 18464  003368  6ADA               	clrf	fsr2h,c
 18465  00336A  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18466  00336E  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18467  003372  CFDF FFE7          	movff	indf2,indf1
 18468                           
 18469                           ; BSR set to: 0
 18470                           ;ECAN.c: 1126: ptr++;
 18471  003376  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18472  003378  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18473                           
 18474                           ; BSR set to: 0
 18475                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18476  00337A  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18477  00337C  6ED9               	movwf	fsr2l,c
 18478  00337E  6ADA               	clrf	fsr2h,c
 18479  003380  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18480  003384  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18481  003388  CFDF FFE7          	movff	indf2,indf1
 18482  00338C                     l1529:
 18483                           
 18484                           ; BSR set to: 0
 18485  00338C  0012               	return	
 18486  00338E                     __end_of__CANIDToRegs:
 18487                           	opt stack 0
 18488  00338E                     PL28:
 18489                           	opt stack 23
 18490  00338E  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18491  003392  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18492  003394  12DF               	iorwf	indf2,f,c
 18493  003396  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18494  003398  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18495  00339A  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18496  00339C  6ED9               	movwf	fsr2l,c
 18497  00339E  6ADA               	clrf	fsr2h,c
 18498  0033A0  0012               	return	
 18499  0033A2                     __end_ofPL28:
 18500                           	opt stack 0
 18501  0033A2                     PL42:
 18502                           	opt stack 23
 18503  0033A2  6ED9               	movwf	fsr2l,c
 18504  0033A4  6ADA               	clrf	fsr2h,c
 18505  0033A6  0E02               	movlw	2
 18506  0033A8  26D9               	addwf	fsr2l,f,c
 18507  0033AA  6ADA               	clrf	fsr2h,c
 18508  0033AC  50DF               	movf	indf2,w,c
 18509  0033AE  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18510  0033B0  0012               	return	
 18511  0033B2                     __end_ofPL42:
 18512                           	opt stack 0
 18513  0033B2                     PL52:
 18514                           	opt stack 23
 18515  0033B2  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18516  0033B6  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18517  0033BA  6EDF               	movwf	indf2,c
 18518  0033BC  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18519  0033BE  6ED9               	movwf	fsr2l,c
 18520  0033C0  6ADA               	clrf	fsr2h,c
 18521  0033C2  0012               	return	
 18522  0033C4                     __end_ofPL52:
 18523                           	opt stack 0
 18524  0033C4                     PL72:
 18525                           	opt stack 23
 18526  0033C4  26D9               	addwf	fsr2l,f,c
 18527  0033C6  6ADA               	clrf	fsr2h,c
 18528  0033C8  50DF               	movf	indf2,w,c
 18529  0033CA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18530  0033CC  90D8               	bcf	status,0,c
 18531  0033CE  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18532  0033D0  90D8               	bcf	status,0,c
 18533  0033D2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18534  0033D4  90D8               	bcf	status,0,c
 18535  0033D6  0012               	return	
 18536  0033D8                     __end_ofPL72:
 18537                           	opt stack 0
 18538  0033D8                     PL96:
 18539                           	opt stack 23
 18540  0033D8  50DF               	movf	indf2,w,c
 18541  0033DA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18542  0033DC  0E05               	movlw	5
 18543  0033DE  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18544  0033E0  0C05               	retlw	5
 18545  0033E2                     __end_ofPL96:
 18546                           	opt stack 0
 18547                           tblptru	equ	0xFF8
 18548                           tblptrh	equ	0xFF7
 18549                           tblptrl	equ	0xFF6
 18550                           tablat	equ	0xFF5
 18551                           prodh	equ	0xFF4
 18552                           prodl	equ	0xFF3
 18553                           intcon	equ	0xFF2
 18554                           indf0	equ	0xFEF
 18555                           postinc0	equ	0xFEE
 18556                           fsr0h	equ	0xFEA
 18557                           fsr0l	equ	0xFE9
 18558                           wreg	equ	0xFE8
 18559                           indf1	equ	0xFE7
 18560                           postinc1	equ	0xFE6
 18561                           postdec1	equ	0xFE5
 18562                           fsr1h	equ	0xFE2
 18563                           fsr1l	equ	0xFE1
 18564                           indf2	equ	0xFDF
 18565                           postinc2	equ	0xFDE
 18566                           postdec2	equ	0xFDD
 18567                           plusw2	equ	0xFDB
 18568                           fsr2h	equ	0xFDA
 18569                           fsr2l	equ	0xFD9
 18570                           status	equ	0xFD8
 18571                           
 18572 ;; *************** function _memset *****************
 18573 ;; Defined at:
 18574 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18575 ;; Parameters:    Size  Location     Type
 18576 ;;  p1              2    0[BANK0 ] PTR void 
 18577 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18578 ;;  c               2    2[BANK0 ] int 
 18579 ;;  n               2    4[BANK0 ] unsigned int 
 18580 ;; Auto vars:     Size  Location     Type
 18581 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18582 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18583 ;; Return value:  Size  Location     Type
 18584 ;;                  2    0[BANK0 ] PTR void 
 18585 ;; Registers used:
 18586 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18587 ;; Tracked objects:
 18588 ;;		On entry : F/0
 18589 ;;		On exit  : F/0
 18590 ;;		Unchanged: 0/0
 18591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18592 ;;      Params:         0       6       0       0       0       0       0
 18593 ;;      Locals:         0       2       0       0       0       0       0
 18594 ;;      Temps:          0       0       0       0       0       0       0
 18595 ;;      Totals:         0       8       0       0       0       0       0
 18596 ;;Total ram usage:        8 bytes
 18597 ;; Hardware stack levels used:    1
 18598 ;; Hardware stack levels required when called:    3
 18599 ;; This function calls:
 18600 ;;		Nothing
 18601 ;; This function is called by:
 18602 ;;		_doModeVerbose
 18603 ;;		_doModeSLCAN
 18604 ;;		_printGUID
 18605 ;;		_printMDF
 18606 ;;		_printNodeFirmwareVersion
 18607 ;; This function uses a non-reentrant model
 18608 ;;
 18609                           
 18610                           	psect	text38
 18611  00159C                     __ptext38:
 18612                           	opt stack 0
 18613  00159C                     _memset:
 18614                           	opt stack 25
 18615                           
 18616                           ; BSR set to: 0
 18617                           
 18618                           ; BSR set to: 0
 18619                           ;incstack = 0
 18620                           ;incstack = 0
 18621  00159C  C060  F066         	movff	memset@p1,memset@p
 18622  0015A0  C061  F067         	movff	memset@p1+1,memset@p+1
 18623  0015A4  D008               	goto	l15100
 18624  0015A6                     l15096:
 18625                           
 18626                           ; BSR set to: 0
 18627  0015A6  C066  FFD9         	movff	memset@p,fsr2l
 18628  0015AA  C067  FFDA         	movff	memset@p+1,fsr2h
 18629  0015AE  C062  FFDF         	movff	memset@c,indf2
 18630                           
 18631                           ; BSR set to: 0
 18632  0015B2  4B66               	infsnz	memset@p& (0+255),f,b
 18633  0015B4  2B67               	incf	(memset@p+1)& (0+255),f,b
 18634  0015B6                     l15100:
 18635                           
 18636                           ; BSR set to: 0
 18637  0015B6  0764               	decf	memset@n& (0+255),f,b
 18638  0015B8  A0D8               	btfss	status,0,c
 18639  0015BA  0765               	decf	(memset@n+1)& (0+255),f,b
 18640  0015BC  0100               	movlb	0	; () banked
 18641  0015BE  2964               	incf	memset@n& (0+255),w,b
 18642  0015C0  B4D8               	btfsc	status,2,c
 18643  0015C2  2965               	incf	(memset@n+1)& (0+255),w,b
 18644  0015C4  B4D8               	btfsc	status,2,c
 18645                           
 18646                           ; BSR set to: 0
 18647  0015C6  0012               	return	
 18648  0015C8  D7EE               	goto	l15096
 18649  0015CA                     __end_of_memset:
 18650                           	opt stack 0
 18651                           tblptru	equ	0xFF8
 18652                           tblptrh	equ	0xFF7
 18653                           tblptrl	equ	0xFF6
 18654                           tablat	equ	0xFF5
 18655                           prodh	equ	0xFF4
 18656                           prodl	equ	0xFF3
 18657                           intcon	equ	0xFF2
 18658                           indf0	equ	0xFEF
 18659                           postinc0	equ	0xFEE
 18660                           fsr0h	equ	0xFEA
 18661                           fsr0l	equ	0xFE9
 18662                           wreg	equ	0xFE8
 18663                           indf1	equ	0xFE7
 18664                           postinc1	equ	0xFE6
 18665                           postdec1	equ	0xFE5
 18666                           fsr1h	equ	0xFE2
 18667                           fsr1l	equ	0xFE1
 18668                           indf2	equ	0xFDF
 18669                           postinc2	equ	0xFDE
 18670                           postdec2	equ	0xFDD
 18671                           plusw2	equ	0xFDB
 18672                           fsr2h	equ	0xFDA
 18673                           fsr2l	equ	0xFD9
 18674                           status	equ	0xFD8
 18675                           
 18676 ;; *************** function _printHelp *****************
 18677 ;; Defined at:
 18678 ;;		line 2613 in file "main.c"
 18679 ;; Parameters:    Size  Location     Type
 18680 ;;		None
 18681 ;; Auto vars:     Size  Location     Type
 18682 ;;		None
 18683 ;; Return value:  Size  Location     Type
 18684 ;;		None               void
 18685 ;; Registers used:
 18686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18687 ;; Tracked objects:
 18688 ;;		On entry : F/0
 18689 ;;		On exit  : 0/0
 18690 ;;		Unchanged: 0/0
 18691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18692 ;;      Params:         0       0       0       0       0       0       0
 18693 ;;      Locals:         0       0       0       0       0       0       0
 18694 ;;      Temps:          0       0       0       0       0       0       0
 18695 ;;      Totals:         0       0       0       0       0       0       0
 18696 ;;Total ram usage:        0 bytes
 18697 ;; Hardware stack levels used:    1
 18698 ;; Hardware stack levels required when called:    5
 18699 ;; This function calls:
 18700 ;;		_putsUSART
 18701 ;; This function is called by:
 18702 ;;		_doModeVerbose
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           	psect	text39
 18707  003F30                     __ptext39:
 18708                           	opt stack 0
 18709  003F30                     _printHelp:
 18710                           	opt stack 23
 18711                           
 18712                           ; BSR set to: 0
 18713                           ;main.c: 2614: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18714                           
 18715                           ; BSR set to: 0
 18716                           ;incstack = 0
 18717                           ;incstack = 0
 18718  003F30  0E75               	movlw	high STR_220
 18719  003F32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18720  003F34  0E09               	movlw	low STR_220
 18721  003F36  6F61               	movwf	?_putsUSART& (0+255),b
 18722  003F38  EC33  F00D         	call	_putsUSART	;wreg free
 18723                           
 18724                           ;main.c: 2615: putsUSART((char *) "------------------------------------\r\n");
 18725  003F3C  0E6E               	movlw	high (STR_252+28)
 18726  003F3E  0100               	movlb	0	; () banked
 18727  003F40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18728  003F42  0E6E               	movlw	low (STR_252+28)
 18729  003F44  6F61               	movwf	?_putsUSART& (0+255),b
 18730  003F46  EC33  F00D         	call	_putsUSART	;wreg free
 18731                           
 18732                           ;main.c: 2616: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18733  003F4A  0E78               	movlw	high STR_222
 18734  003F4C  0100               	movlb	0	; () banked
 18735  003F4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18736  003F50  0E08               	movlw	low STR_222
 18737  003F52  6F61               	movwf	?_putsUSART& (0+255),b
 18738  003F54  EC33  F00D         	call	_putsUSART	;wreg free
 18739                           
 18740                           ;main.c: 2617: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18741  003F58  0E73               	movlw	high STR_223
 18742  003F5A  0100               	movlb	0	; () banked
 18743  003F5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18744  003F5E  0E98               	movlw	low STR_223
 18745  003F60  6F61               	movwf	?_putsUSART& (0+255),b
 18746  003F62  EC33  F00D         	call	_putsUSART	;wreg free
 18747                           
 18748                           ;main.c: 2618: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18749  003F66  0E73               	movlw	high STR_224
 18750  003F68  0100               	movlb	0	; () banked
 18751  003F6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18752  003F6C  0E3E               	movlw	low STR_224
 18753  003F6E  6F61               	movwf	?_putsUSART& (0+255),b
 18754  003F70  EC33  F00D         	call	_putsUSART	;wreg free
 18755                           
 18756                           ;main.c: 2619: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18757  003F74  0E71               	movlw	high STR_225
 18758  003F76  0100               	movlb	0	; () banked
 18759  003F78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18760  003F7A  0EB7               	movlw	low STR_225
 18761  003F7C  6F61               	movwf	?_putsUSART& (0+255),b
 18762  003F7E  EC33  F00D         	call	_putsUSART	;wreg free
 18763                           
 18764                           ;main.c: 2620: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18765  003F82  0E72               	movlw	high STR_226
 18766  003F84  0100               	movlb	0	; () banked
 18767  003F86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18768  003F88  0E1C               	movlw	low STR_226
 18769  003F8A  6F61               	movwf	?_putsUSART& (0+255),b
 18770  003F8C  EC33  F00D         	call	_putsUSART	;wreg free
 18771                           
 18772                           ;main.c: 2621: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18773  003F90  0E77               	movlw	high STR_227
 18774  003F92  0100               	movlb	0	; () banked
 18775  003F94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18776  003F96  0EB0               	movlw	low STR_227
 18777  003F98  6F61               	movwf	?_putsUSART& (0+255),b
 18778  003F9A  EC33  F00D         	call	_putsUSART	;wreg free
 18779                           
 18780                           ;main.c: 2622: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18781  003F9E  0E72               	movlw	high STR_228
 18782  003FA0  0100               	movlb	0	; () banked
 18783  003FA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18784  003FA4  0E4E               	movlw	low STR_228
 18785  003FA6  6F61               	movwf	?_putsUSART& (0+255),b
 18786  003FA8  EC33  F00D         	call	_putsUSART	;wreg free
 18787                           
 18788                           ;main.c: 2623: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18789  003FAC  0E73               	movlw	high STR_229
 18790  003FAE  0100               	movlb	0	; () banked
 18791  003FB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18792  003FB2  0E6C               	movlw	low STR_229
 18793  003FB4  6F61               	movwf	?_putsUSART& (0+255),b
 18794  003FB6  EC33  F00D         	call	_putsUSART	;wreg free
 18795                           
 18796                           ;main.c: 2624: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18797  003FBA  0E78               	movlw	high STR_230
 18798  003FBC  0100               	movlb	0	; () banked
 18799  003FBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18800  003FC0  0EBE               	movlw	low STR_230
 18801  003FC2  6F61               	movwf	?_putsUSART& (0+255),b
 18802  003FC4  EC33  F00D         	call	_putsUSART	;wreg free
 18803                           
 18804                           ;main.c: 2625: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18805  003FC8  0E70               	movlw	high STR_231
 18806  003FCA  0100               	movlb	0	; () banked
 18807  003FCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18808  003FCE  0E05               	movlw	low STR_231
 18809  003FD0  6F61               	movwf	?_putsUSART& (0+255),b
 18810  003FD2  EC33  F00D         	call	_putsUSART	;wreg free
 18811                           
 18812                           ;main.c: 2626: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18813  003FD6  0E79               	movlw	high STR_232
 18814  003FD8  0100               	movlb	0	; () banked
 18815  003FDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18816  003FDC  0E7E               	movlw	low STR_232
 18817  003FDE  6F61               	movwf	?_putsUSART& (0+255),b
 18818  003FE0  EC33  F00D         	call	_putsUSART	;wreg free
 18819                           
 18820                           ;main.c: 2627: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18821  003FE4  0E76               	movlw	high STR_233
 18822  003FE6  0100               	movlb	0	; () banked
 18823  003FE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18824  003FEA  0EED               	movlw	low STR_233
 18825  003FEC  6F61               	movwf	?_putsUSART& (0+255),b
 18826  003FEE  EC33  F00D         	call	_putsUSART	;wreg free
 18827                           
 18828                           ;main.c: 2628: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18829  003FF2  0E74               	movlw	high STR_234
 18830  003FF4  0100               	movlb	0	; () banked
 18831  003FF6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18832  003FF8  0EE2               	movlw	low STR_234
 18833  003FFA  6F61               	movwf	?_putsUSART& (0+255),b
 18834  003FFC  EC33  F00D         	call	_putsUSART	;wreg free
 18835                           
 18836                           ;main.c: 2629: putsUSART((char *) "HELP - Display this help information.\r\n");
 18837  004000  0E74               	movlw	high STR_235
 18838  004002  0100               	movlb	0	; () banked
 18839  004004  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18840  004006  0E43               	movlw	low STR_235
 18841  004008  6F61               	movwf	?_putsUSART& (0+255),b
 18842  00400A  EC33  F00D         	call	_putsUSART	;wreg free
 18843                           
 18844                           ;main.c: 2630: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18845  00400E  0E73               	movlw	high STR_236
 18846  004010  0100               	movlb	0	; () banked
 18847  004012  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18848  004014  0E0F               	movlw	low STR_236
 18849  004016  6F61               	movwf	?_putsUSART& (0+255),b
 18850  004018  EC33  F00D         	call	_putsUSART	;wreg free
 18851                           
 18852                           ;main.c: 2631: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18853  00401C  0E6D               	movlw	high STR_237
 18854  00401E  0100               	movlb	0	; () banked
 18855  004020  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18856  004022  0E75               	movlw	low STR_237
 18857  004024  6F61               	movwf	?_putsUSART& (0+255),b
 18858  004026  EC33  F00D         	call	_putsUSART	;wreg free
 18859                           
 18860                           ;main.c: 2632: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18861  00402A  0E6D               	movlw	high STR_238
 18862  00402C  0100               	movlb	0	; () banked
 18863  00402E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18864  004030  0EC1               	movlw	low STR_238
 18865  004032  6F61               	movwf	?_putsUSART& (0+255),b
 18866  004034  EC33  F00D         	call	_putsUSART	;wreg free
 18867                           
 18868                           ;main.c: 2633: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18869  004038  0E6D               	movlw	high STR_239
 18870  00403A  0100               	movlb	0	; () banked
 18871  00403C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18872  00403E  0E28               	movlw	low STR_239
 18873  004040  6F61               	movwf	?_putsUSART& (0+255),b
 18874  004042  EC33  F00D         	call	_putsUSART	;wreg free
 18875                           
 18876                           ;main.c: 2634: putsUSART((char *) "FILTER - Set filter .\r\n");
 18877  004046  0E78               	movlw	high STR_240
 18878  004048  0100               	movlb	0	; () banked
 18879  00404A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18880  00404C  0ED6               	movlw	low STR_240
 18881  00404E  6F61               	movwf	?_putsUSART& (0+255),b
 18882  004050  EC33  F00D         	call	_putsUSART	;wreg free
 18883                           
 18884                           ;main.c: 2635: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18885  004054  0E6C               	movlw	high STR_241
 18886  004056  0100               	movlb	0	; () banked
 18887  004058  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18888  00405A  0EDA               	movlw	low STR_241
 18889  00405C  6F61               	movwf	?_putsUSART& (0+255),b
 18890  00405E  EC33  F00D         	call	_putsUSART	;wreg free
 18891                           
 18892                           ;main.c: 2636: putsUSART((char *) "MASK - Set mask .\r\n");
 18893  004062  0E7A               	movlw	high STR_242
 18894  004064  0100               	movlb	0	; () banked
 18895  004066  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18896  004068  0E04               	movlw	low STR_242
 18897  00406A  6F61               	movwf	?_putsUSART& (0+255),b
 18898  00406C  EC33  F00D         	call	_putsUSART	;wreg free
 18899                           
 18900                           ;main.c: 2637: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18901  004070  0E6E               	movlw	high STR_243
 18902  004072  0100               	movlb	0	; () banked
 18903  004074  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18904  004076  0E0B               	movlw	low STR_243
 18905  004078  6F61               	movwf	?_putsUSART& (0+255),b
 18906  00407A  EC33  F00D         	call	_putsUSART	;wreg free
 18907                           
 18908                           ;main.c: 2638: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18909  00407E  0E76               	movlw	high STR_244
 18910  004080  0100               	movlb	0	; () banked
 18911  004082  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18912  004084  0ECB               	movlw	low STR_244
 18913  004086  6F61               	movwf	?_putsUSART& (0+255),b
 18914  004088  EC33  F00D         	call	_putsUSART	;wreg free
 18915                           
 18916                           ;main.c: 2639: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18917  00408C  0E72               	movlw	high STR_245
 18918  00408E  0100               	movlb	0	; () banked
 18919  004090  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18920  004092  0EE0               	movlw	low STR_245
 18921  004094  6F61               	movwf	?_putsUSART& (0+255),b
 18922  004096  EC33  F00D         	call	_putsUSART	;wreg free
 18923                           
 18924                           ;main.c: 2640: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18925  00409A  0E72               	movlw	high STR_246
 18926  00409C  0100               	movlb	0	; () banked
 18927  00409E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18928  0040A0  0EB1               	movlw	low STR_246
 18929  0040A2  6F61               	movwf	?_putsUSART& (0+255),b
 18930  0040A4  EC33  F00D         	call	_putsUSART	;wreg free
 18931                           
 18932                           ;main.c: 2641: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 18933  0040A8  0E6E               	movlw	high STR_247
 18934  0040AA  0100               	movlb	0	; () banked
 18935  0040AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18936  0040AE  0E95               	movlw	low STR_247
 18937  0040B0  6F61               	movwf	?_putsUSART& (0+255),b
 18938  0040B2  EC33  F00D         	call	_putsUSART	;wreg free
 18939                           
 18940                           ;main.c: 2642: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18941  0040B6  0E72               	movlw	high STR_248
 18942  0040B8  0100               	movlb	0	; () banked
 18943  0040BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18944  0040BC  0E80               	movlw	low STR_248
 18945  0040BE  6F61               	movwf	?_putsUSART& (0+255),b
 18946  0040C0  EC33  F00D         	call	_putsUSART	;wreg free
 18947                           
 18948                           ;main.c: 2643: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18949  0040C4  0E70               	movlw	high STR_249
 18950  0040C6  0100               	movlb	0	; () banked
 18951  0040C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18952  0040CA  0E74               	movlw	low STR_249
 18953  0040CC  6F61               	movwf	?_putsUSART& (0+255),b
 18954  0040CE  EC33  F00D         	call	_putsUSART	;wreg free
 18955                           
 18956                           ;main.c: 2644: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18957  0040D2  0E6F               	movlw	high STR_250
 18958  0040D4  0100               	movlb	0	; () banked
 18959  0040D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18960  0040D8  0E1A               	movlw	low STR_250
 18961  0040DA  6F61               	movwf	?_putsUSART& (0+255),b
 18962  0040DC  EC33  F00D         	call	_putsUSART	;wreg free
 18963                           
 18964                           ;main.c: 2645: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18965  0040E0  0E75               	movlw	high STR_251
 18966  0040E2  0100               	movlb	0	; () banked
 18967  0040E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18968  0040E6  0E7E               	movlw	low STR_251
 18969  0040E8  6F61               	movwf	?_putsUSART& (0+255),b
 18970  0040EA  EF33  F00D         	goto	_putsUSART	;wreg free
 18971  0040EE                     __end_of_printHelp:
 18972                           	opt stack 0
 18973                           tblptru	equ	0xFF8
 18974                           tblptrh	equ	0xFF7
 18975                           tblptrl	equ	0xFF6
 18976                           tablat	equ	0xFF5
 18977                           prodh	equ	0xFF4
 18978                           prodl	equ	0xFF3
 18979                           intcon	equ	0xFF2
 18980                           indf0	equ	0xFEF
 18981                           postinc0	equ	0xFEE
 18982                           fsr0h	equ	0xFEA
 18983                           fsr0l	equ	0xFE9
 18984                           wreg	equ	0xFE8
 18985                           indf1	equ	0xFE7
 18986                           postinc1	equ	0xFE6
 18987                           postdec1	equ	0xFE5
 18988                           fsr1h	equ	0xFE2
 18989                           fsr1l	equ	0xFE1
 18990                           indf2	equ	0xFDF
 18991                           postinc2	equ	0xFDE
 18992                           postdec2	equ	0xFDD
 18993                           plusw2	equ	0xFDB
 18994                           fsr2h	equ	0xFDA
 18995                           fsr2l	equ	0xFD9
 18996                           status	equ	0xFD8
 18997                           
 18998 ;; *************** function _printErrors *****************
 18999 ;; Defined at:
 19000 ;;		line 2549 in file "main.c"
 19001 ;; Parameters:    Size  Location     Type
 19002 ;;		None
 19003 ;; Auto vars:     Size  Location     Type
 19004 ;;		None
 19005 ;; Return value:  Size  Location     Type
 19006 ;;		None               void
 19007 ;; Registers used:
 19008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19009 ;; Tracked objects:
 19010 ;;		On entry : F/0
 19011 ;;		On exit  : 0/0
 19012 ;;		Unchanged: 0/0
 19013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19014 ;;      Params:         0       0       0       0       0       0       0
 19015 ;;      Locals:         0      12       0       0       0       0       0
 19016 ;;      Temps:          0       0       0       0       0       0       0
 19017 ;;      Totals:         0      12       0       0       0       0       0
 19018 ;;Total ram usage:       12 bytes
 19019 ;; Hardware stack levels used:    1
 19020 ;; Hardware stack levels required when called:    5
 19021 ;; This function calls:
 19022 ;;		_putsUSART
 19023 ;;		_sprintf
 19024 ;; This function is called by:
 19025 ;;		_doModeVerbose
 19026 ;; This function uses a non-reentrant model
 19027 ;;
 19028                           
 19029                           	psect	text40
 19030  004920                     __ptext40:
 19031                           	opt stack 0
 19032  004920                     _printErrors:
 19033                           	opt stack 23
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;main.c: 2550: putsUSART((char *) "CAN Receive overruns: ");
 19037                           
 19038                           ;incstack = 0
 19039                           ;incstack = 0
 19040  004920  0E79               	movlw	high STR_190
 19041  004922  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19042  004924  0E95               	movlw	low STR_190
 19043  004926  6F61               	movwf	?_putsUSART& (0+255),b
 19044  004928  EC33  F00D         	call	_putsUSART	;wreg free
 19045                           
 19046                           ;main.c: 2551: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 19047  00492C  0100               	movlb	0	; () banked
 19048  00492E  67E5               	tstfsz	_bHex& (0+255),b
 19049  004930  D004               	goto	l15176
 19050                           
 19051                           ; BSR set to: 0
 19052  004932  0E7C               	movlw	high STR_176
 19053  004934  6F95               	movwf	(_printErrors$1480+1)& (0+255),b
 19054  004936  0EDD               	movlw	low STR_176
 19055  004938  D003               	goto	L20
 19056  00493A                     l15176:
 19057                           
 19058                           ; BSR set to: 0
 19059  00493A  0E7C               	movlw	high STR_191
 19060  00493C  6F95               	movwf	(_printErrors$1480+1)& (0+255),b
 19061  00493E  0E04               	movlw	low STR_191
 19062  004940                     L20:
 19063  004940  6F94               	movwf	_printErrors$1480& (0+255),b
 19064                           
 19065                           ; BSR set to: 0
 19066  004942  0E01               	movlw	high _wrkbuf
 19067  004944  0100               	movlb	0	; () banked
 19068  004946  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19069  004948  0E7B               	movlw	low _wrkbuf
 19070  00494A  6F76               	movwf	?_sprintf& (0+255),b
 19071  00494C  C094  F078         	movff	_printErrors$1480,?_sprintf+2
 19072  004950  C095  F079         	movff	_printErrors$1480+1,?_sprintf+3
 19073  004954  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 19074  004958  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 19075  00495C  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 19076  004960  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 19077  004964  ECD7  F027         	call	_sprintf	;wreg free
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;main.c: 2552: putsUSART(wrkbuf);
 19081  004968  0E01               	movlw	high _wrkbuf
 19082  00496A  0100               	movlb	0	; () banked
 19083  00496C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19084  00496E  0E7B               	movlw	low _wrkbuf
 19085  004970  6F61               	movwf	?_putsUSART& (0+255),b
 19086  004972  EC33  F00D         	call	_putsUSART	;wreg free
 19087                           
 19088                           ;main.c: 2553: putsUSART((char *) "\r\n");
 19089  004976  0E71               	movlw	high (STR_211+50)
 19090  004978  0100               	movlb	0	; () banked
 19091  00497A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19092  00497C  0E80               	movlw	low (STR_211+50)
 19093  00497E  6F61               	movwf	?_putsUSART& (0+255),b
 19094  004980  EC33  F00D         	call	_putsUSART	;wreg free
 19095                           
 19096                           ;main.c: 2555: putsUSART((char *) "CAN Transmit overruns: ");
 19097  004984  0E79               	movlw	high STR_194
 19098  004986  0100               	movlb	0	; () banked
 19099  004988  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19100  00498A  0E66               	movlw	low STR_194
 19101  00498C  6F61               	movwf	?_putsUSART& (0+255),b
 19102  00498E  EC33  F00D         	call	_putsUSART	;wreg free
 19103                           
 19104                           ;main.c: 2556: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 19105  004992  0100               	movlb	0	; () banked
 19106  004994  67E5               	tstfsz	_bHex& (0+255),b
 19107  004996  D004               	goto	l15190
 19108                           
 19109                           ; BSR set to: 0
 19110  004998  0E7C               	movlw	high STR_176
 19111  00499A  6F97               	movwf	(_printErrors$1486+1)& (0+255),b
 19112  00499C  0EDD               	movlw	low STR_176
 19113  00499E  D003               	goto	L21
 19114  0049A0                     l15190:
 19115                           
 19116                           ; BSR set to: 0
 19117  0049A0  0E7C               	movlw	high STR_191
 19118  0049A2  6F97               	movwf	(_printErrors$1486+1)& (0+255),b
 19119  0049A4  0E04               	movlw	low STR_191
 19120  0049A6                     L21:
 19121  0049A6  6F96               	movwf	_printErrors$1486& (0+255),b
 19122                           
 19123                           ; BSR set to: 0
 19124  0049A8  0E01               	movlw	high _wrkbuf
 19125  0049AA  0100               	movlb	0	; () banked
 19126  0049AC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19127  0049AE  0E7B               	movlw	low _wrkbuf
 19128  0049B0  6F76               	movwf	?_sprintf& (0+255),b
 19129  0049B2  C096  F078         	movff	_printErrors$1486,?_sprintf+2
 19130  0049B6  C097  F079         	movff	_printErrors$1486+1,?_sprintf+3
 19131  0049BA  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 19132  0049BE  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 19133  0049C2  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 19134  0049C6  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 19135  0049CA  ECD7  F027         	call	_sprintf	;wreg free
 19136                           
 19137                           ; BSR set to: 0
 19138                           ;main.c: 2557: putsUSART(wrkbuf);
 19139  0049CE  0E01               	movlw	high _wrkbuf
 19140  0049D0  0100               	movlb	0	; () banked
 19141  0049D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19142  0049D4  0E7B               	movlw	low _wrkbuf
 19143  0049D6  6F61               	movwf	?_putsUSART& (0+255),b
 19144  0049D8  EC33  F00D         	call	_putsUSART	;wreg free
 19145                           
 19146                           ;main.c: 2558: putsUSART((char *) "\r\n");
 19147  0049DC  0E71               	movlw	high (STR_211+50)
 19148  0049DE  0100               	movlb	0	; () banked
 19149  0049E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19150  0049E2  0E80               	movlw	low (STR_211+50)
 19151  0049E4  6F61               	movwf	?_putsUSART& (0+255),b
 19152  0049E6  EC33  F00D         	call	_putsUSART	;wreg free
 19153                           
 19154                           ;main.c: 2560: putsUSART((char *) "UART Receive overruns: ");
 19155  0049EA  0E79               	movlw	high STR_198
 19156  0049EC  0100               	movlb	0	; () banked
 19157  0049EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19158  0049F0  0E4E               	movlw	low STR_198
 19159  0049F2  6F61               	movwf	?_putsUSART& (0+255),b
 19160  0049F4  EC33  F00D         	call	_putsUSART	;wreg free
 19161                           
 19162                           ;main.c: 2561: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19163  0049F8  0100               	movlb	0	; () banked
 19164  0049FA  67E5               	tstfsz	_bHex& (0+255),b
 19165  0049FC  D004               	goto	l15204
 19166                           
 19167                           ; BSR set to: 0
 19168  0049FE  0E7C               	movlw	high STR_176
 19169  004A00  6F99               	movwf	(_printErrors$1492+1)& (0+255),b
 19170  004A02  0EDD               	movlw	low STR_176
 19171  004A04  D003               	goto	L22
 19172  004A06                     l15204:
 19173                           
 19174                           ; BSR set to: 0
 19175  004A06  0E7C               	movlw	high STR_191
 19176  004A08  6F99               	movwf	(_printErrors$1492+1)& (0+255),b
 19177  004A0A  0E04               	movlw	low STR_191
 19178  004A0C                     L22:
 19179  004A0C  6F98               	movwf	_printErrors$1492& (0+255),b
 19180                           
 19181                           ; BSR set to: 0
 19182  004A0E  0E01               	movlw	high _wrkbuf
 19183  004A10  0100               	movlb	0	; () banked
 19184  004A12  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19185  004A14  0E7B               	movlw	low _wrkbuf
 19186  004A16  6F76               	movwf	?_sprintf& (0+255),b
 19187  004A18  C098  F078         	movff	_printErrors$1492,?_sprintf+2
 19188  004A1C  C099  F079         	movff	_printErrors$1492+1,?_sprintf+3
 19189  004A20  C11C  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 19190  004A24  C11D  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19191  004A28  C11E  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19192  004A2C  C11F  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19193  004A30  ECD7  F027         	call	_sprintf	;wreg free
 19194                           
 19195                           ; BSR set to: 0
 19196                           ;main.c: 2562: putsUSART(wrkbuf);
 19197  004A34  0E01               	movlw	high _wrkbuf
 19198  004A36  0100               	movlb	0	; () banked
 19199  004A38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19200  004A3A  0E7B               	movlw	low _wrkbuf
 19201  004A3C  6F61               	movwf	?_putsUSART& (0+255),b
 19202  004A3E  EC33  F00D         	call	_putsUSART	;wreg free
 19203                           
 19204                           ;main.c: 2563: putsUSART((char *) "\r\n");
 19205  004A42  0E71               	movlw	high (STR_211+50)
 19206  004A44  0100               	movlb	0	; () banked
 19207  004A46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19208  004A48  0E80               	movlw	low (STR_211+50)
 19209  004A4A  6F61               	movwf	?_putsUSART& (0+255),b
 19210  004A4C  EC33  F00D         	call	_putsUSART	;wreg free
 19211                           
 19212                           ;main.c: 2565: putsUSART((char *) "UART Receive overruns: ");
 19213  004A50  0E79               	movlw	high STR_198
 19214  004A52  0100               	movlb	0	; () banked
 19215  004A54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19216  004A56  0E4E               	movlw	low STR_198
 19217  004A58  6F61               	movwf	?_putsUSART& (0+255),b
 19218  004A5A  EC33  F00D         	call	_putsUSART	;wreg free
 19219                           
 19220                           ;main.c: 2566: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19221  004A5E  0100               	movlb	0	; () banked
 19222  004A60  67E5               	tstfsz	_bHex& (0+255),b
 19223  004A62  D004               	goto	l15218
 19224                           
 19225                           ; BSR set to: 0
 19226  004A64  0E7C               	movlw	high STR_176
 19227  004A66  6F9B               	movwf	(_printErrors$1498+1)& (0+255),b
 19228  004A68  0EDD               	movlw	low STR_176
 19229  004A6A  D003               	goto	L23
 19230  004A6C                     l15218:
 19231                           
 19232                           ; BSR set to: 0
 19233  004A6C  0E7C               	movlw	high STR_191
 19234  004A6E  6F9B               	movwf	(_printErrors$1498+1)& (0+255),b
 19235  004A70  0E04               	movlw	low STR_191
 19236  004A72                     L23:
 19237  004A72  6F9A               	movwf	_printErrors$1498& (0+255),b
 19238                           
 19239                           ; BSR set to: 0
 19240  004A74  0E01               	movlw	high _wrkbuf
 19241  004A76  0100               	movlb	0	; () banked
 19242  004A78  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19243  004A7A  0E7B               	movlw	low _wrkbuf
 19244  004A7C  6F76               	movwf	?_sprintf& (0+255),b
 19245  004A7E  C09A  F078         	movff	_printErrors$1498,?_sprintf+2
 19246  004A82  C09B  F079         	movff	_printErrors$1498+1,?_sprintf+3
 19247  004A86  C120  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 19248  004A8A  C121  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19249  004A8E  C122  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19250  004A92  C123  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19251  004A96  ECD7  F027         	call	_sprintf	;wreg free
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;main.c: 2567: putsUSART(wrkbuf);
 19255  004A9A  0E01               	movlw	high _wrkbuf
 19256  004A9C  0100               	movlb	0	; () banked
 19257  004A9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19258  004AA0  0E7B               	movlw	low _wrkbuf
 19259  004AA2  6F61               	movwf	?_putsUSART& (0+255),b
 19260  004AA4  EC33  F00D         	call	_putsUSART	;wreg free
 19261                           
 19262                           ;main.c: 2568: putsUSART((char *) "\r\n");
 19263  004AA8  0E71               	movlw	high (STR_211+50)
 19264  004AAA  0100               	movlb	0	; () banked
 19265  004AAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19266  004AAE  0E80               	movlw	low (STR_211+50)
 19267  004AB0  6F61               	movwf	?_putsUSART& (0+255),b
 19268  004AB2  EC33  F00D         	call	_putsUSART	;wreg free
 19269                           
 19270                           ;main.c: 2570: putsUSART((char *) "Transmit Error Counter: ");
 19271  004AB6  0E78               	movlw	high STR_206
 19272  004AB8  0100               	movlb	0	; () banked
 19273  004ABA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19274  004ABC  0E8C               	movlw	low STR_206
 19275  004ABE  6F61               	movwf	?_putsUSART& (0+255),b
 19276  004AC0  EC33  F00D         	call	_putsUSART	;wreg free
 19277                           
 19278                           ;main.c: 2571: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19279  004AC4  0100               	movlb	0	; () banked
 19280  004AC6  67E5               	tstfsz	_bHex& (0+255),b
 19281  004AC8  D004               	goto	l15232
 19282                           
 19283                           ; BSR set to: 0
 19284  004ACA  0E7C               	movlw	high STR_60
 19285  004ACC  6F9D               	movwf	(_printErrors$1504+1)& (0+255),b
 19286  004ACE  0EED               	movlw	low STR_60
 19287  004AD0  D003               	goto	L24
 19288  004AD2                     l15232:
 19289                           
 19290                           ; BSR set to: 0
 19291  004AD2  0E7C               	movlw	high STR_59
 19292  004AD4  6F9D               	movwf	(_printErrors$1504+1)& (0+255),b
 19293  004AD6  0E53               	movlw	low STR_59
 19294  004AD8                     L24:
 19295  004AD8  6F9C               	movwf	_printErrors$1504& (0+255),b
 19296                           
 19297                           ; BSR set to: 0
 19298  004ADA  0E01               	movlw	high _wrkbuf
 19299  004ADC  0100               	movlb	0	; () banked
 19300  004ADE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19301  004AE0  0E7B               	movlw	low _wrkbuf
 19302  004AE2  6F76               	movwf	?_sprintf& (0+255),b
 19303  004AE4  C09C  F078         	movff	_printErrors$1504,?_sprintf+2
 19304  004AE8  C09D  F079         	movff	_printErrors$1504+1,?_sprintf+3
 19305  004AEC  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19306  004AF0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19307  004AF2  ECD7  F027         	call	_sprintf	;wreg free
 19308                           
 19309                           ; BSR set to: 0
 19310                           ;main.c: 2572: putsUSART(wrkbuf);
 19311  004AF6  0E01               	movlw	high _wrkbuf
 19312  004AF8  0100               	movlb	0	; () banked
 19313  004AFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19314  004AFC  0E7B               	movlw	low _wrkbuf
 19315  004AFE  6F61               	movwf	?_putsUSART& (0+255),b
 19316  004B00  EC33  F00D         	call	_putsUSART	;wreg free
 19317                           
 19318                           ;main.c: 2573: putsUSART((char *) "\r\n");
 19319  004B04  0E71               	movlw	high (STR_211+50)
 19320  004B06  0100               	movlb	0	; () banked
 19321  004B08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19322  004B0A  0E80               	movlw	low (STR_211+50)
 19323  004B0C  6F61               	movwf	?_putsUSART& (0+255),b
 19324  004B0E  EC33  F00D         	call	_putsUSART	;wreg free
 19325                           
 19326                           ;main.c: 2575: if (COMSTATbits.TXWARN) {
 19327  004B12  A474               	btfss	3956,2,c	;volatile
 19328  004B14  D007               	goto	l15244
 19329                           
 19330                           ;main.c: 2576: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19331  004B16  0E6F               	movlw	high STR_210
 19332  004B18  0100               	movlb	0	; () banked
 19333  004B1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19334  004B1C  0E58               	movlw	low STR_210
 19335  004B1E  6F61               	movwf	?_putsUSART& (0+255),b
 19336  004B20  EC33  F00D         	call	_putsUSART	;wreg free
 19337  004B24                     l15244:
 19338                           
 19339                           ;main.c: 2577: }
 19340                           ;main.c: 2579: if (COMSTATbits.TXBO) {
 19341  004B24  AA74               	btfss	3956,5,c	;volatile
 19342  004B26  D007               	goto	l15248
 19343                           
 19344                           ;main.c: 2580: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19345  004B28  0E71               	movlw	high STR_211
 19346  004B2A  0100               	movlb	0	; () banked
 19347  004B2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19348  004B2E  0E4E               	movlw	low STR_211
 19349  004B30  6F61               	movwf	?_putsUSART& (0+255),b
 19350  004B32  EC33  F00D         	call	_putsUSART	;wreg free
 19351  004B36                     l15248:
 19352                           
 19353                           ;main.c: 2581: }
 19354                           ;main.c: 2583: if (COMSTATbits.TXBP) {
 19355  004B36  A874               	btfss	3956,4,c	;volatile
 19356  004B38  D007               	goto	l1197
 19357                           
 19358                           ;main.c: 2584: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19359  004B3A  0E6F               	movlw	high STR_212
 19360  004B3C  0100               	movlb	0	; () banked
 19361  004B3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19362  004B40  0ECC               	movlw	low STR_212
 19363  004B42  6F61               	movwf	?_putsUSART& (0+255),b
 19364  004B44  EC33  F00D         	call	_putsUSART	;wreg free
 19365  004B48                     l1197:
 19366                           
 19367                           ;main.c: 2585: }
 19368                           ;main.c: 2588: putsUSART((char *) "Receive Error Counter: ");
 19369  004B48  0E79               	movlw	high STR_213
 19370  004B4A  0100               	movlb	0	; () banked
 19371  004B4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19372  004B4E  0E36               	movlw	low STR_213
 19373  004B50  6F61               	movwf	?_putsUSART& (0+255),b
 19374  004B52  EC33  F00D         	call	_putsUSART	;wreg free
 19375                           
 19376                           ;main.c: 2589: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19377  004B56  0100               	movlb	0	; () banked
 19378  004B58  67E5               	tstfsz	_bHex& (0+255),b
 19379  004B5A  D004               	goto	l15256
 19380                           
 19381                           ; BSR set to: 0
 19382  004B5C  0E7C               	movlw	high STR_60
 19383  004B5E  6F9F               	movwf	(_printErrors$1513+1)& (0+255),b
 19384  004B60  0EED               	movlw	low STR_60
 19385  004B62  D003               	goto	L25
 19386  004B64                     l15256:
 19387                           
 19388                           ; BSR set to: 0
 19389  004B64  0E7C               	movlw	high STR_59
 19390  004B66  6F9F               	movwf	(_printErrors$1513+1)& (0+255),b
 19391  004B68  0E53               	movlw	low STR_59
 19392  004B6A                     L25:
 19393  004B6A  6F9E               	movwf	_printErrors$1513& (0+255),b
 19394                           
 19395                           ; BSR set to: 0
 19396  004B6C  0E01               	movlw	high _wrkbuf
 19397  004B6E  0100               	movlb	0	; () banked
 19398  004B70  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19399  004B72  0E7B               	movlw	low _wrkbuf
 19400  004B74  6F76               	movwf	?_sprintf& (0+255),b
 19401  004B76  C09E  F078         	movff	_printErrors$1513,?_sprintf+2
 19402  004B7A  C09F  F079         	movff	_printErrors$1513+1,?_sprintf+3
 19403  004B7E  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19404  004B82  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19405  004B84  ECD7  F027         	call	_sprintf	;wreg free
 19406                           
 19407                           ; BSR set to: 0
 19408                           ;main.c: 2590: putsUSART(wrkbuf);
 19409  004B88  0E01               	movlw	high _wrkbuf
 19410  004B8A  0100               	movlb	0	; () banked
 19411  004B8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19412  004B8E  0E7B               	movlw	low _wrkbuf
 19413  004B90  6F61               	movwf	?_putsUSART& (0+255),b
 19414  004B92  EC33  F00D         	call	_putsUSART	;wreg free
 19415                           
 19416                           ;main.c: 2591: putsUSART((char *) "\r\n");
 19417  004B96  0E71               	movlw	high (STR_211+50)
 19418  004B98  0100               	movlb	0	; () banked
 19419  004B9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19420  004B9C  0E80               	movlw	low (STR_211+50)
 19421  004B9E  6F61               	movwf	?_putsUSART& (0+255),b
 19422  004BA0  EC33  F00D         	call	_putsUSART	;wreg free
 19423                           
 19424                           ;main.c: 2593: if (COMSTATbits.RXWARN) {
 19425  004BA4  A274               	btfss	3956,1,c	;volatile
 19426  004BA6  D007               	goto	l15268
 19427                           
 19428                           ;main.c: 2594: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19429  004BA8  0E70               	movlw	high STR_217
 19430  004BAA  0100               	movlb	0	; () banked
 19431  004BAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19432  004BAE  0E3D               	movlw	low STR_217
 19433  004BB0  6F61               	movwf	?_putsUSART& (0+255),b
 19434  004BB2  EC33  F00D         	call	_putsUSART	;wreg free
 19435  004BB6                     l15268:
 19436                           
 19437                           ;main.c: 2595: }
 19438                           ;main.c: 2597: if (COMSTATbits.RXBP) {
 19439  004BB6  A674               	btfss	3956,3,c	;volatile
 19440  004BB8  D007               	goto	l15272
 19441                           
 19442                           ;main.c: 2598: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19443  004BBA  0E70               	movlw	high STR_218
 19444  004BBC  0100               	movlb	0	; () banked
 19445  004BBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19446  004BC0  0EE2               	movlw	low STR_218
 19447  004BC2  6F61               	movwf	?_putsUSART& (0+255),b
 19448  004BC4  EC33  F00D         	call	_putsUSART	;wreg free
 19449  004BC8                     l15272:
 19450                           
 19451                           ;main.c: 2599: }
 19452                           ;main.c: 2601: if (COMSTATbits.EWARN) {
 19453  004BC8  A074               	btfss	3956,0,c	;volatile
 19454  004BCA  D007               	goto	l1205
 19455                           
 19456                           ;main.c: 2602: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19457  004BCC  0E71               	movlw	high STR_219
 19458  004BCE  0100               	movlb	0	; () banked
 19459  004BD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19460  004BD2  0E83               	movlw	low STR_219
 19461  004BD4  6F61               	movwf	?_putsUSART& (0+255),b
 19462  004BD6  EC33  F00D         	call	_putsUSART	;wreg free
 19463  004BDA                     l1205:
 19464  004BDA  0012               	return	
 19465  004BDC                     __end_of_printErrors:
 19466                           	opt stack 0
 19467                           tblptru	equ	0xFF8
 19468                           tblptrh	equ	0xFF7
 19469                           tblptrl	equ	0xFF6
 19470                           tablat	equ	0xFF5
 19471                           prodh	equ	0xFF4
 19472                           prodl	equ	0xFF3
 19473                           intcon	equ	0xFF2
 19474                           indf0	equ	0xFEF
 19475                           postinc0	equ	0xFEE
 19476                           fsr0h	equ	0xFEA
 19477                           fsr0l	equ	0xFE9
 19478                           wreg	equ	0xFE8
 19479                           indf1	equ	0xFE7
 19480                           postinc1	equ	0xFE6
 19481                           postdec1	equ	0xFE5
 19482                           fsr1h	equ	0xFE2
 19483                           fsr1l	equ	0xFE1
 19484                           indf2	equ	0xFDF
 19485                           postinc2	equ	0xFDE
 19486                           postdec2	equ	0xFDD
 19487                           plusw2	equ	0xFDB
 19488                           fsr2h	equ	0xFDA
 19489                           fsr2l	equ	0xFD9
 19490                           status	equ	0xFD8
 19491                           
 19492 ;; *************** function _printStatistics *****************
 19493 ;; Defined at:
 19494 ;;		line 2522 in file "main.c"
 19495 ;; Parameters:    Size  Location     Type
 19496 ;;		None
 19497 ;; Auto vars:     Size  Location     Type
 19498 ;;		None
 19499 ;; Return value:  Size  Location     Type
 19500 ;;		None               void
 19501 ;; Registers used:
 19502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19503 ;; Tracked objects:
 19504 ;;		On entry : F/0
 19505 ;;		On exit  : 0/0
 19506 ;;		Unchanged: 0/0
 19507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19508 ;;      Params:         0       0       0       0       0       0       0
 19509 ;;      Locals:         0       8       0       0       0       0       0
 19510 ;;      Temps:          0       0       0       0       0       0       0
 19511 ;;      Totals:         0       8       0       0       0       0       0
 19512 ;;Total ram usage:        8 bytes
 19513 ;; Hardware stack levels used:    1
 19514 ;; Hardware stack levels required when called:    5
 19515 ;; This function calls:
 19516 ;;		_putsUSART
 19517 ;;		_sprintf
 19518 ;; This function is called by:
 19519 ;;		_doModeVerbose
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523                           	psect	text41
 19524  003D9A                     __ptext41:
 19525                           	opt stack 0
 19526  003D9A                     _printStatistics:
 19527                           	opt stack 23
 19528                           
 19529                           ; BSR set to: 0
 19530                           ;main.c: 2523: putsUSART((char *) "Sent CAN frames: ");
 19531                           
 19532                           ;incstack = 0
 19533                           ;incstack = 0
 19534  003D9A  0E7A               	movlw	high STR_174
 19535  003D9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19536  003D9E  0EC7               	movlw	low STR_174
 19537  003DA0  6F61               	movwf	?_putsUSART& (0+255),b
 19538  003DA2  EC33  F00D         	call	_putsUSART	;wreg free
 19539                           
 19540                           ;main.c: 2524: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19541  003DA6  0100               	movlb	0	; () banked
 19542  003DA8  67E5               	tstfsz	_bHex& (0+255),b
 19543  003DAA  D004               	goto	l15120
 19544                           
 19545                           ; BSR set to: 0
 19546  003DAC  0E7C               	movlw	high STR_176
 19547  003DAE  6F95               	movwf	(_printStatistics$1455+1)& (0+255),b
 19548  003DB0  0EDD               	movlw	low STR_176
 19549  003DB2  D003               	goto	L26
 19550  003DB4                     l15120:
 19551                           
 19552                           ; BSR set to: 0
 19553  003DB4  0E7C               	movlw	high STR_175
 19554  003DB6  6F95               	movwf	(_printStatistics$1455+1)& (0+255),b
 19555  003DB8  0E61               	movlw	low STR_175
 19556  003DBA                     L26:
 19557  003DBA  6F94               	movwf	_printStatistics$1455& (0+255),b
 19558                           
 19559                           ; BSR set to: 0
 19560  003DBC  0E01               	movlw	high _wrkbuf
 19561  003DBE  0100               	movlb	0	; () banked
 19562  003DC0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19563  003DC2  0E7B               	movlw	low _wrkbuf
 19564  003DC4  6F76               	movwf	?_sprintf& (0+255),b
 19565  003DC6  C094  F078         	movff	_printStatistics$1455,?_sprintf+2
 19566  003DCA  C095  F079         	movff	_printStatistics$1455+1,?_sprintf+3
 19567  003DCE  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19568  003DD2  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19569  003DD6  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19570  003DDA  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19571  003DDE  ECD7  F027         	call	_sprintf	;wreg free
 19572                           
 19573                           ; BSR set to: 0
 19574                           ;main.c: 2525: putsUSART(wrkbuf);
 19575  003DE2  0E01               	movlw	high _wrkbuf
 19576  003DE4  0100               	movlb	0	; () banked
 19577  003DE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19578  003DE8  0E7B               	movlw	low _wrkbuf
 19579  003DEA  6F61               	movwf	?_putsUSART& (0+255),b
 19580  003DEC  EC33  F00D         	call	_putsUSART	;wreg free
 19581                           
 19582                           ;main.c: 2526: putsUSART((char *) "\r\n");
 19583  003DF0  0E71               	movlw	high (STR_211+50)
 19584  003DF2  0100               	movlb	0	; () banked
 19585  003DF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19586  003DF6  0E80               	movlw	low (STR_211+50)
 19587  003DF8  6F61               	movwf	?_putsUSART& (0+255),b
 19588  003DFA  EC33  F00D         	call	_putsUSART	;wreg free
 19589                           
 19590                           ;main.c: 2528: putsUSART((char *) "Sent CAN bytes: ");
 19591  003DFE  0E7A               	movlw	high STR_178
 19592  003E00  0100               	movlb	0	; () banked
 19593  003E02  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19594  003E04  0EFB               	movlw	low STR_178
 19595  003E06  6F61               	movwf	?_putsUSART& (0+255),b
 19596  003E08  EC33  F00D         	call	_putsUSART	;wreg free
 19597                           
 19598                           ;main.c: 2529: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19599  003E0C  0100               	movlb	0	; () banked
 19600  003E0E  67E5               	tstfsz	_bHex& (0+255),b
 19601  003E10  D004               	goto	l15134
 19602                           
 19603                           ; BSR set to: 0
 19604  003E12  0E7C               	movlw	high STR_176
 19605  003E14  6F97               	movwf	(_printStatistics$1461+1)& (0+255),b
 19606  003E16  0EDD               	movlw	low STR_176
 19607  003E18  D003               	goto	L27
 19608  003E1A                     l15134:
 19609                           
 19610                           ; BSR set to: 0
 19611  003E1A  0E7C               	movlw	high STR_175
 19612  003E1C  6F97               	movwf	(_printStatistics$1461+1)& (0+255),b
 19613  003E1E  0E61               	movlw	low STR_175
 19614  003E20                     L27:
 19615  003E20  6F96               	movwf	_printStatistics$1461& (0+255),b
 19616                           
 19617                           ; BSR set to: 0
 19618  003E22  0E01               	movlw	high _wrkbuf
 19619  003E24  0100               	movlb	0	; () banked
 19620  003E26  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19621  003E28  0E7B               	movlw	low _wrkbuf
 19622  003E2A  6F76               	movwf	?_sprintf& (0+255),b
 19623  003E2C  C096  F078         	movff	_printStatistics$1461,?_sprintf+2
 19624  003E30  C097  F079         	movff	_printStatistics$1461+1,?_sprintf+3
 19625  003E34  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19626  003E38  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19627  003E3C  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19628  003E40  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19629  003E44  ECD7  F027         	call	_sprintf	;wreg free
 19630                           
 19631                           ; BSR set to: 0
 19632                           ;main.c: 2530: putsUSART(wrkbuf);
 19633  003E48  0E01               	movlw	high _wrkbuf
 19634  003E4A  0100               	movlb	0	; () banked
 19635  003E4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19636  003E4E  0E7B               	movlw	low _wrkbuf
 19637  003E50  6F61               	movwf	?_putsUSART& (0+255),b
 19638  003E52  EC33  F00D         	call	_putsUSART	;wreg free
 19639                           
 19640                           ;main.c: 2531: putsUSART((char *) "\r\n");
 19641  003E56  0E71               	movlw	high (STR_211+50)
 19642  003E58  0100               	movlb	0	; () banked
 19643  003E5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19644  003E5C  0E80               	movlw	low (STR_211+50)
 19645  003E5E  6F61               	movwf	?_putsUSART& (0+255),b
 19646  003E60  EC33  F00D         	call	_putsUSART	;wreg free
 19647                           
 19648                           ;main.c: 2533: putsUSART((char *) "Received CAN frames: ");
 19649  003E64  0E79               	movlw	high STR_182
 19650  003E66  0100               	movlb	0	; () banked
 19651  003E68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19652  003E6A  0ED9               	movlw	low STR_182
 19653  003E6C  6F61               	movwf	?_putsUSART& (0+255),b
 19654  003E6E  EC33  F00D         	call	_putsUSART	;wreg free
 19655                           
 19656                           ;main.c: 2534: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19657  003E72  0100               	movlb	0	; () banked
 19658  003E74  67E5               	tstfsz	_bHex& (0+255),b
 19659  003E76  D004               	goto	l15148
 19660                           
 19661                           ; BSR set to: 0
 19662  003E78  0E7C               	movlw	high STR_176
 19663  003E7A  6F99               	movwf	(_printStatistics$1467+1)& (0+255),b
 19664  003E7C  0EDD               	movlw	low STR_176
 19665  003E7E  D003               	goto	L28
 19666  003E80                     l15148:
 19667                           
 19668                           ; BSR set to: 0
 19669  003E80  0E7C               	movlw	high STR_175
 19670  003E82  6F99               	movwf	(_printStatistics$1467+1)& (0+255),b
 19671  003E84  0E61               	movlw	low STR_175
 19672  003E86                     L28:
 19673  003E86  6F98               	movwf	_printStatistics$1467& (0+255),b
 19674                           
 19675                           ; BSR set to: 0
 19676  003E88  0E01               	movlw	high _wrkbuf
 19677  003E8A  0100               	movlb	0	; () banked
 19678  003E8C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19679  003E8E  0E7B               	movlw	low _wrkbuf
 19680  003E90  6F76               	movwf	?_sprintf& (0+255),b
 19681  003E92  C098  F078         	movff	_printStatistics$1467,?_sprintf+2
 19682  003E96  C099  F079         	movff	_printStatistics$1467+1,?_sprintf+3
 19683  003E9A  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19684  003E9E  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19685  003EA2  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19686  003EA6  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19687  003EAA  ECD7  F027         	call	_sprintf	;wreg free
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;main.c: 2535: putsUSART(wrkbuf);
 19691  003EAE  0E01               	movlw	high _wrkbuf
 19692  003EB0  0100               	movlb	0	; () banked
 19693  003EB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19694  003EB4  0E7B               	movlw	low _wrkbuf
 19695  003EB6  6F61               	movwf	?_putsUSART& (0+255),b
 19696  003EB8  EC33  F00D         	call	_putsUSART	;wreg free
 19697                           
 19698                           ;main.c: 2536: putsUSART((char *) "\r\n");
 19699  003EBC  0E71               	movlw	high (STR_211+50)
 19700  003EBE  0100               	movlb	0	; () banked
 19701  003EC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19702  003EC2  0E80               	movlw	low (STR_211+50)
 19703  003EC4  6F61               	movwf	?_putsUSART& (0+255),b
 19704  003EC6  EC33  F00D         	call	_putsUSART	;wreg free
 19705                           
 19706                           ;main.c: 2538: putsUSART((char *) "Received CAN bytes: ");
 19707  003ECA  0E79               	movlw	high STR_186
 19708  003ECC  0100               	movlb	0	; () banked
 19709  003ECE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19710  003ED0  0EEF               	movlw	low STR_186
 19711  003ED2  6F61               	movwf	?_putsUSART& (0+255),b
 19712  003ED4  EC33  F00D         	call	_putsUSART	;wreg free
 19713                           
 19714                           ;main.c: 2539: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19715  003ED8  0100               	movlb	0	; () banked
 19716  003EDA  67E5               	tstfsz	_bHex& (0+255),b
 19717  003EDC  D004               	goto	l15162
 19718                           
 19719                           ; BSR set to: 0
 19720  003EDE  0E7C               	movlw	high STR_176
 19721  003EE0  6F9B               	movwf	(_printStatistics$1473+1)& (0+255),b
 19722  003EE2  0EDD               	movlw	low STR_176
 19723  003EE4  D003               	goto	L29
 19724  003EE6                     l15162:
 19725                           
 19726                           ; BSR set to: 0
 19727  003EE6  0E7C               	movlw	high STR_175
 19728  003EE8  6F9B               	movwf	(_printStatistics$1473+1)& (0+255),b
 19729  003EEA  0E61               	movlw	low STR_175
 19730  003EEC                     L29:
 19731  003EEC  6F9A               	movwf	_printStatistics$1473& (0+255),b
 19732                           
 19733                           ; BSR set to: 0
 19734  003EEE  0E01               	movlw	high _wrkbuf
 19735  003EF0  0100               	movlb	0	; () banked
 19736  003EF2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19737  003EF4  0E7B               	movlw	low _wrkbuf
 19738  003EF6  6F76               	movwf	?_sprintf& (0+255),b
 19739  003EF8  C09A  F078         	movff	_printStatistics$1473,?_sprintf+2
 19740  003EFC  C09B  F079         	movff	_printStatistics$1473+1,?_sprintf+3
 19741  003F00  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19742  003F04  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19743  003F08  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19744  003F0C  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19745  003F10  ECD7  F027         	call	_sprintf	;wreg free
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;main.c: 2540: putsUSART(wrkbuf);
 19749  003F14  0E01               	movlw	high _wrkbuf
 19750  003F16  0100               	movlb	0	; () banked
 19751  003F18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19752  003F1A  0E7B               	movlw	low _wrkbuf
 19753  003F1C  6F61               	movwf	?_putsUSART& (0+255),b
 19754  003F1E  EC33  F00D         	call	_putsUSART	;wreg free
 19755                           
 19756                           ;main.c: 2541: putsUSART((char *) "\r\n");
 19757  003F22  0E71               	movlw	high (STR_211+50)
 19758  003F24  0100               	movlb	0	; () banked
 19759  003F26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19760  003F28  0E80               	movlw	low (STR_211+50)
 19761  003F2A  6F61               	movwf	?_putsUSART& (0+255),b
 19762  003F2C  EF33  F00D         	goto	_putsUSART	;wreg free
 19763  003F30                     __end_of_printStatistics:
 19764                           	opt stack 0
 19765                           tblptru	equ	0xFF8
 19766                           tblptrh	equ	0xFF7
 19767                           tblptrl	equ	0xFF6
 19768                           tablat	equ	0xFF5
 19769                           prodh	equ	0xFF4
 19770                           prodl	equ	0xFF3
 19771                           intcon	equ	0xFF2
 19772                           indf0	equ	0xFEF
 19773                           postinc0	equ	0xFEE
 19774                           fsr0h	equ	0xFEA
 19775                           fsr0l	equ	0xFE9
 19776                           wreg	equ	0xFE8
 19777                           indf1	equ	0xFE7
 19778                           postinc1	equ	0xFE6
 19779                           postdec1	equ	0xFE5
 19780                           fsr1h	equ	0xFE2
 19781                           fsr1l	equ	0xFE1
 19782                           indf2	equ	0xFDF
 19783                           postinc2	equ	0xFDE
 19784                           postdec2	equ	0xFDD
 19785                           plusw2	equ	0xFDB
 19786                           fsr2h	equ	0xFDA
 19787                           fsr2l	equ	0xFD9
 19788                           status	equ	0xFD8
 19789                           
 19790 ;; *************** function _atoi *****************
 19791 ;; Defined at:
 19792 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19793 ;; Parameters:    Size  Location     Type
 19794 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19795 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 19796 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 19797 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 19798 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19799 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19800 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19801 ;; Auto vars:     Size  Location     Type
 19802 ;;  a               2   11[BANK0 ] int 
 19803 ;;  sign            1   10[BANK0 ] unsigned char 
 19804 ;; Return value:  Size  Location     Type
 19805 ;;                  2    6[BANK0 ] int 
 19806 ;; Registers used:
 19807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19808 ;; Tracked objects:
 19809 ;;		On entry : C/2
 19810 ;;		On exit  : F/0
 19811 ;;		Unchanged: 0/0
 19812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19813 ;;      Params:         0       2       0       0       0       0       0
 19814 ;;      Locals:         0       3       0       0       0       0       0
 19815 ;;      Temps:          0       2       0       0       0       0       0
 19816 ;;      Totals:         0       7       0       0       0       0       0
 19817 ;;Total ram usage:        7 bytes
 19818 ;; Hardware stack levels used:    1
 19819 ;; Hardware stack levels required when called:    4
 19820 ;; This function calls:
 19821 ;;		_isdigit
 19822 ;;		___wmul
 19823 ;; This function is called by:
 19824 ;;		_doModeVerbose
 19825 ;; This function uses a non-reentrant model
 19826 ;;
 19827                           
 19828                           	psect	text42
 19829  0031C8                     __ptext42:
 19830                           	opt stack 0
 19831  0031C8                     _atoi:
 19832                           	opt stack 24
 19833                           
 19834                           ;incstack = 0
 19835                           ;incstack = 0
 19836  0031C8  D003               	goto	l15072
 19837  0031CA                     l15070:
 19838  0031CA  0100               	movlb	0	; () banked
 19839  0031CC  4B66               	infsnz	atoi@s& (0+255),f,b
 19840  0031CE  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19841  0031D0                     l15072:
 19842  0031D0  0100               	movlb	0	; () banked
 19843  0031D2  D876               	call	PL18	;call to abstracted procedure
 19844  0031D4  64EA               	cpfsgt	fsr0h,c
 19845  0031D6  D003               	bra	u20177
 19846  0031D8  6EEA               	movwf	fsr0h,c
 19847  0031DA  50EF               	movf	indf0,w,c
 19848  0031DC  D003               	bra	u20170
 19849  0031DE                     u20177:
 19850  0031DE  6EF7               	movwf	tblptrh,c
 19851  0031E0  0008               	tblrd		*
 19852  0031E2  50F5               	movf	tablat,w,c
 19853  0031E4                     u20170:
 19854  0031E4  0A20               	xorlw	32
 19855  0031E6  E0F1               	bz	l15070
 19856  0031E8  0100               	movlb	0	; () banked
 19857  0031EA  D86A               	call	PL18	;call to abstracted procedure
 19858  0031EC  64EA               	cpfsgt	fsr0h,c
 19859  0031EE  D003               	bra	u20197
 19860  0031F0  6EEA               	movwf	fsr0h,c
 19861  0031F2  50EF               	movf	indf0,w,c
 19862  0031F4  D003               	bra	u20190
 19863  0031F6                     u20197:
 19864  0031F6  6EF7               	movwf	tblptrh,c
 19865  0031F8  0008               	tblrd		*
 19866  0031FA  50F5               	movf	tablat,w,c
 19867  0031FC                     u20190:
 19868  0031FC  0A09               	xorlw	9
 19869  0031FE  E0E5               	bz	l15070
 19870  003200  0100               	movlb	0	; () banked
 19871  003202  6B6B               	clrf	atoi@a& (0+255),b
 19872  003204  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19873  003206  6B6A               	clrf	atoi@sign& (0+255),b
 19874                           
 19875                           ; BSR set to: 0
 19876  003208  D85B               	call	PL18	;call to abstracted procedure
 19877  00320A  64EA               	cpfsgt	fsr0h,c
 19878  00320C  D003               	bra	u20217
 19879  00320E  6EEA               	movwf	fsr0h,c
 19880  003210  50EF               	movf	indf0,w,c
 19881  003212  D003               	bra	u20210
 19882  003214                     u20217:
 19883  003214  6EF7               	movwf	tblptrh,c
 19884  003216  0008               	tblrd		*
 19885  003218  50F5               	movf	tablat,w,c
 19886  00321A                     u20210:
 19887  00321A  0A2D               	xorlw	45
 19888  00321C  E103               	bnz	l15080
 19889  00321E  0100               	movlb	0	; () banked
 19890  003220  2B6A               	incf	atoi@sign& (0+255),f,b
 19891  003222  D00D               	goto	L30
 19892  003224                     l15080:
 19893  003224  0100               	movlb	0	; () banked
 19894  003226  D84C               	call	PL18	;call to abstracted procedure
 19895  003228  64EA               	cpfsgt	fsr0h,c
 19896  00322A  D003               	bra	u20237
 19897  00322C  6EEA               	movwf	fsr0h,c
 19898  00322E  50EF               	movf	indf0,w,c
 19899  003230  D003               	bra	u20230
 19900  003232                     u20237:
 19901  003232  6EF7               	movwf	tblptrh,c
 19902  003234  0008               	tblrd		*
 19903  003236  50F5               	movf	tablat,w,c
 19904  003238                     u20230:
 19905  003238  0A2B               	xorlw	43
 19906  00323A  E121               	bnz	l15088
 19907  00323C                     l15082:
 19908  00323C  0100               	movlb	0	; () banked
 19909  00323E                     L30:
 19910  00323E  4B66               	infsnz	atoi@s& (0+255),f,b
 19911  003240  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19912  003242  D01D               	goto	l15088
 19913  003244                     l15084:
 19914                           
 19915                           ; BSR set to: 0
 19916  003244  C06B  F060         	movff	atoi@a,?___wmul
 19917  003248  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19918  00324C  6B63               	clrf	(?___wmul+3)& (0+255),b
 19919  00324E  0E0A               	movlw	10
 19920  003250  6F62               	movwf	(?___wmul+2)& (0+255),b
 19921  003252  EC13  F00B         	call	___wmul	;wreg free
 19922  003256  D834               	call	PL18	;call to abstracted procedure
 19923  003258  64EA               	cpfsgt	fsr0h,c
 19924  00325A  D003               	bra	u20257
 19925  00325C  6EEA               	movwf	fsr0h,c
 19926  00325E  50EF               	movf	indf0,w,c
 19927  003260  D003               	bra	u20250
 19928  003262                     u20257:
 19929  003262  6EF7               	movwf	tblptrh,c
 19930  003264  0008               	tblrd		*
 19931  003266  50F5               	movf	tablat,w,c
 19932  003268                     u20250:
 19933  003268  0100               	movlb	0	; () banked
 19934  00326A  2760               	addwf	?___wmul& (0+255),f,b
 19935  00326C  0E00               	movlw	0
 19936  00326E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19937  003270  0ED0               	movlw	208
 19938  003272  2560               	addwf	?___wmul& (0+255),w,b
 19939  003274  6F6B               	movwf	atoi@a& (0+255),b
 19940  003276  0EFF               	movlw	255
 19941  003278  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19942  00327A  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19943  00327C  D7DF               	goto	l15082
 19944  00327E                     l15088:
 19945  00327E  0100               	movlb	0	; () banked
 19946  003280  D81F               	call	PL18	;call to abstracted procedure
 19947  003282  64EA               	cpfsgt	fsr0h,c
 19948  003284  D003               	bra	u20267
 19949  003286  6EEA               	movwf	fsr0h,c
 19950  003288  50EF               	movf	indf0,w,c
 19951  00328A  D003               	bra	u20260
 19952  00328C                     u20267:
 19953  00328C  6EF7               	movwf	tblptrh,c
 19954  00328E  0008               	tblrd		*
 19955  003290  50F5               	movf	tablat,w,c
 19956  003292                     u20260:
 19957  003292  ECBE  F00A         	call	_isdigit
 19958  003296  E2D6               	bc	l15084
 19959                           
 19960                           ; BSR set to: 0
 19961  003298  516A               	movf	atoi@sign& (0+255),w,b
 19962  00329A  E00D               	bz	l2080
 19963                           
 19964                           ; BSR set to: 0
 19965  00329C  C06B  F068         	movff	atoi@a,??_atoi
 19966  0032A0  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19967  0032A4  1F68               	comf	??_atoi& (0+255),f,b
 19968  0032A6  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19969  0032A8  4B68               	infsnz	??_atoi& (0+255),f,b
 19970  0032AA  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19971  0032AC  C068  F066         	movff	??_atoi,?_atoi
 19972  0032B0  C069  F067         	movff	??_atoi+1,?_atoi+1
 19973  0032B4  D004               	goto	l2081
 19974  0032B6                     l2080:
 19975                           
 19976                           ; BSR set to: 0
 19977  0032B6  C06B  F066         	movff	atoi@a,?_atoi
 19978  0032BA  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19979  0032BE                     l2081:
 19980                           
 19981                           ; BSR set to: 0
 19982  0032BE  0012               	return	
 19983  0032C0                     __end_of_atoi:
 19984                           	opt stack 0
 19985  0032C0                     PL18:
 19986                           	opt stack 24
 19987  0032C0  5166               	movf	atoi@s& (0+255),w,b
 19988  0032C2  6EF6               	movwf	tblptrl,c
 19989  0032C4  6EE9               	movwf	fsr0l,c
 19990  0032C6  0E05               	movlw	(high __ramtop+-1)
 19991  0032C8  6EEA               	movwf	fsr0h,c
 19992  0032CA  5167               	movf	(atoi@s+1)& (0+255),w,b
 19993  0032CC  0012               	return	
 19994  0032CE                     __end_ofPL18:
 19995                           	opt stack 0
 19996                           tblptru	equ	0xFF8
 19997                           tblptrh	equ	0xFF7
 19998                           tblptrl	equ	0xFF6
 19999                           tablat	equ	0xFF5
 20000                           prodh	equ	0xFF4
 20001                           prodl	equ	0xFF3
 20002                           intcon	equ	0xFF2
 20003                           indf0	equ	0xFEF
 20004                           postinc0	equ	0xFEE
 20005                           fsr0h	equ	0xFEA
 20006                           fsr0l	equ	0xFE9
 20007                           wreg	equ	0xFE8
 20008                           indf1	equ	0xFE7
 20009                           postinc1	equ	0xFE6
 20010                           postdec1	equ	0xFE5
 20011                           fsr1h	equ	0xFE2
 20012                           fsr1l	equ	0xFE1
 20013                           indf2	equ	0xFDF
 20014                           postinc2	equ	0xFDE
 20015                           postdec2	equ	0xFDD
 20016                           plusw2	equ	0xFDB
 20017                           fsr2h	equ	0xFDA
 20018                           fsr2l	equ	0xFD9
 20019                           status	equ	0xFD8
 20020                           
 20021 ;; *************** function _strtok *****************
 20022 ;; Defined at:
 20023 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 20024 ;; Parameters:    Size  Location     Type
 20025 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 20026 ;;		 -> NULL(0), cmdbuf(80), 
 20027 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 20028 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 20029 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 20030 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 20031 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20032 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20033 ;;		 -> STR_31(2), STR_30(2), 
 20034 ;; Auto vars:     Size  Location     Type
 20035 ;;		None
 20036 ;; Return value:  Size  Location     Type
 20037 ;;                  2   12[BANK0 ] PTR unsigned char 
 20038 ;; Registers used:
 20039 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20040 ;; Tracked objects:
 20041 ;;		On entry : F/0
 20042 ;;		On exit  : F/0
 20043 ;;		Unchanged: 0/0
 20044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20045 ;;      Params:         0       4       0       0       0       0       0
 20046 ;;      Locals:         0       0       0       0       0       0       0
 20047 ;;      Temps:          0       0       0       0       0       0       0
 20048 ;;      Totals:         0       4       0       0       0       0       0
 20049 ;;Total ram usage:        4 bytes
 20050 ;; Hardware stack levels used:    1
 20051 ;; Hardware stack levels required when called:    5
 20052 ;; This function calls:
 20053 ;;		_strspn
 20054 ;;		_strcspn
 20055 ;; This function is called by:
 20056 ;;		_doModeVerbose
 20057 ;; This function uses a non-reentrant model
 20058 ;;
 20059                           
 20060                           	psect	text43
 20061  002142                     __ptext43:
 20062                           	opt stack 0
 20063  002142                     _strtok:
 20064                           	opt stack 23
 20065                           
 20066                           ; BSR set to: 0
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;incstack = 0
 20070                           ;incstack = 0
 20071  002142  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20072  002144  116C               	iorwf	strtok@s1& (0+255),w,b
 20073  002146  E104               	bnz	l15050
 20074                           
 20075                           ; BSR set to: 0
 20076  002148  C028  F06C         	movff	strtok@sp,strtok@s1
 20077  00214C  C029  F06D         	movff	strtok@sp+1,strtok@s1+1
 20078  002150                     l15050:
 20079                           
 20080                           ; BSR set to: 0
 20081  002150  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20082  002152  116C               	iorwf	strtok@s1& (0+255),w,b
 20083  002154  E016               	bz	L31
 20084                           
 20085                           ; BSR set to: 0
 20086                           
 20087                           ; BSR set to: 0
 20088  002156  C06C  F066         	movff	strtok@s1,?_strspn
 20089  00215A  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 20090  00215E  C06E  F068         	movff	strtok@s2,?_strspn+2
 20091  002162  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 20092  002166  EC59  F00C         	call	_strspn	;wreg free
 20093  00216A  5166               	movf	?_strspn& (0+255),w,b
 20094  00216C  276C               	addwf	strtok@s1& (0+255),f,b
 20095  00216E  5167               	movf	(?_strspn+1)& (0+255),w,b
 20096  002170  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 20097                           
 20098                           ; BSR set to: 0
 20099  002172  C06C  FFD9         	movff	strtok@s1,fsr2l
 20100  002176  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 20101  00217A  50DF               	movf	indf2,w,c
 20102  00217C  E105               	bnz	l15060
 20103                           
 20104                           ; BSR set to: 0
 20105  00217E  6A28               	clrf	strtok@sp,c
 20106  002180  6A29               	clrf	strtok@sp+1,c
 20107  002182                     L31:
 20108  002182  6B6C               	clrf	?_strtok& (0+255),b
 20109  002184  6B6D               	clrf	(?_strtok+1)& (0+255),b
 20110  002186  D025               	goto	l2573
 20111  002188                     l15060:
 20112                           
 20113                           ; BSR set to: 0
 20114  002188  C06C  F066         	movff	strtok@s1,?_strcspn
 20115  00218C  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 20116  002190  C06E  F068         	movff	strtok@s2,?_strcspn+2
 20117  002194  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 20118  002198  EC7B  F00C         	call	_strcspn	;wreg free
 20119  00219C  5166               	movf	?_strcspn& (0+255),w,b
 20120  00219E  256C               	addwf	strtok@s1& (0+255),w,b
 20121  0021A0  6E28               	movwf	strtok@sp,c
 20122  0021A2  5167               	movf	(?_strcspn+1)& (0+255),w,b
 20123  0021A4  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 20124  0021A6  6E29               	movwf	strtok@sp+1,c
 20125                           
 20126                           ; BSR set to: 0
 20127  0021A8  C028  FFD9         	movff	strtok@sp,fsr2l
 20128  0021AC  C029  FFDA         	movff	strtok@sp+1,fsr2h
 20129  0021B0  50DF               	movf	indf2,w,c
 20130  0021B2  E009               	bz	l2575
 20131                           
 20132                           ; BSR set to: 0
 20133  0021B4  C028  FFD9         	movff	strtok@sp,fsr2l
 20134  0021B8  C029  FFDA         	movff	strtok@sp+1,fsr2h
 20135  0021BC  0E00               	movlw	0
 20136  0021BE  6EDF               	movwf	indf2,c
 20137                           
 20138                           ; BSR set to: 0
 20139  0021C0  4A28               	infsnz	strtok@sp,f,c
 20140  0021C2  2A29               	incf	strtok@sp+1,f,c
 20141  0021C4  D002               	goto	l2576
 20142  0021C6                     l2575:
 20143                           
 20144                           ; BSR set to: 0
 20145  0021C6  6A28               	clrf	strtok@sp,c
 20146  0021C8  6A29               	clrf	strtok@sp+1,c
 20147  0021CA                     l2576:
 20148                           
 20149                           ; BSR set to: 0
 20150  0021CA  C06C  F06C         	movff	strtok@s1,?_strtok
 20151  0021CE  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 20152  0021D2                     l2573:
 20153                           
 20154                           ; BSR set to: 0
 20155  0021D2  0012               	return	
 20156  0021D4                     __end_of_strtok:
 20157                           	opt stack 0
 20158                           tblptru	equ	0xFF8
 20159                           tblptrh	equ	0xFF7
 20160                           tblptrl	equ	0xFF6
 20161                           tablat	equ	0xFF5
 20162                           prodh	equ	0xFF4
 20163                           prodl	equ	0xFF3
 20164                           intcon	equ	0xFF2
 20165                           indf0	equ	0xFEF
 20166                           postinc0	equ	0xFEE
 20167                           fsr0h	equ	0xFEA
 20168                           fsr0l	equ	0xFE9
 20169                           wreg	equ	0xFE8
 20170                           indf1	equ	0xFE7
 20171                           postinc1	equ	0xFE6
 20172                           postdec1	equ	0xFE5
 20173                           fsr1h	equ	0xFE2
 20174                           fsr1l	equ	0xFE1
 20175                           indf2	equ	0xFDF
 20176                           postinc2	equ	0xFDE
 20177                           postdec2	equ	0xFDD
 20178                           plusw2	equ	0xFDB
 20179                           fsr2h	equ	0xFDA
 20180                           fsr2l	equ	0xFD9
 20181                           status	equ	0xFD8
 20182                           
 20183 ;; *************** function _strcspn *****************
 20184 ;; Defined at:
 20185 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20186 ;; Parameters:    Size  Location     Type
 20187 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20188 ;;		 -> NULL(0), cmdbuf(80), 
 20189 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20190 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 20191 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 20192 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 20193 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20194 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20195 ;;		 -> STR_31(2), STR_30(2), 
 20196 ;; Auto vars:     Size  Location     Type
 20197 ;;  i               2   10[BANK0 ] unsigned int 
 20198 ;; Return value:  Size  Location     Type
 20199 ;;                  2    6[BANK0 ] unsigned int 
 20200 ;; Registers used:
 20201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20202 ;; Tracked objects:
 20203 ;;		On entry : F/0
 20204 ;;		On exit  : F/0
 20205 ;;		Unchanged: 0/0
 20206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20207 ;;      Params:         0       4       0       0       0       0       0
 20208 ;;      Locals:         0       2       0       0       0       0       0
 20209 ;;      Temps:          0       0       0       0       0       0       0
 20210 ;;      Totals:         0       6       0       0       0       0       0
 20211 ;;Total ram usage:        6 bytes
 20212 ;; Hardware stack levels used:    1
 20213 ;; Hardware stack levels required when called:    4
 20214 ;; This function calls:
 20215 ;;		_strchr
 20216 ;; This function is called by:
 20217 ;;		_strtok
 20218 ;; This function uses a non-reentrant model
 20219 ;;
 20220                           
 20221                           	psect	text44
 20222  0018F6                     __ptext44:
 20223                           	opt stack 0
 20224  0018F6                     _strcspn:
 20225                           	opt stack 23
 20226                           
 20227                           ; BSR set to: 0
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;incstack = 0
 20231                           ;incstack = 0
 20232  0018F6  6B6A               	clrf	strcspn@i& (0+255),b
 20233  0018F8  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 20234  0018FA  D004               	goto	l16644
 20235  0018FC                     l16642:
 20236                           
 20237                           ; BSR set to: 0
 20238  0018FC  4B66               	infsnz	strcspn@s1& (0+255),f,b
 20239  0018FE  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 20240  001900  4B6A               	infsnz	strcspn@i& (0+255),f,b
 20241  001902  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 20242  001904                     l16644:
 20243                           
 20244                           ; BSR set to: 0
 20245  001904  C066  FFD9         	movff	strcspn@s1,fsr2l
 20246  001908  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20247  00190C  50DF               	movf	indf2,w,c
 20248  00190E  E010               	bz	l2600
 20249                           
 20250                           ; BSR set to: 0
 20251  001910  C068  F060         	movff	strcspn@s2,?_strchr
 20252  001914  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 20253  001918  C066  FFD9         	movff	strcspn@s1,fsr2l
 20254  00191C  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20255  001920  50DF               	movf	indf2,w,c
 20256  001922  6F62               	movwf	(?_strchr+2)& (0+255),b
 20257  001924  6B63               	clrf	(?_strchr+3)& (0+255),b
 20258  001926  EC47  F00E         	call	_strchr	;wreg free
 20259  00192A  5161               	movf	(?_strchr+1)& (0+255),w,b
 20260  00192C  1160               	iorwf	?_strchr& (0+255),w,b
 20261  00192E  E0E6               	bz	l16642
 20262  001930                     l2600:
 20263                           
 20264                           ; BSR set to: 0
 20265  001930  C06A  F066         	movff	strcspn@i,?_strcspn
 20266  001934  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 20267                           
 20268                           ; BSR set to: 0
 20269  001938  0012               	return	
 20270  00193A                     __end_of_strcspn:
 20271                           	opt stack 0
 20272                           tblptru	equ	0xFF8
 20273                           tblptrh	equ	0xFF7
 20274                           tblptrl	equ	0xFF6
 20275                           tablat	equ	0xFF5
 20276                           prodh	equ	0xFF4
 20277                           prodl	equ	0xFF3
 20278                           intcon	equ	0xFF2
 20279                           indf0	equ	0xFEF
 20280                           postinc0	equ	0xFEE
 20281                           fsr0h	equ	0xFEA
 20282                           fsr0l	equ	0xFE9
 20283                           wreg	equ	0xFE8
 20284                           indf1	equ	0xFE7
 20285                           postinc1	equ	0xFE6
 20286                           postdec1	equ	0xFE5
 20287                           fsr1h	equ	0xFE2
 20288                           fsr1l	equ	0xFE1
 20289                           indf2	equ	0xFDF
 20290                           postinc2	equ	0xFDE
 20291                           postdec2	equ	0xFDD
 20292                           plusw2	equ	0xFDB
 20293                           fsr2h	equ	0xFDA
 20294                           fsr2l	equ	0xFD9
 20295                           status	equ	0xFD8
 20296                           
 20297 ;; *************** function _strspn *****************
 20298 ;; Defined at:
 20299 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20300 ;; Parameters:    Size  Location     Type
 20301 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20302 ;;		 -> NULL(0), cmdbuf(80), 
 20303 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20304 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 20305 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 20306 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 20307 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20308 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20309 ;;		 -> STR_31(2), STR_30(2), 
 20310 ;; Auto vars:     Size  Location     Type
 20311 ;;  i               2   10[BANK0 ] unsigned int 
 20312 ;; Return value:  Size  Location     Type
 20313 ;;                  2    6[BANK0 ] unsigned int 
 20314 ;; Registers used:
 20315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20316 ;; Tracked objects:
 20317 ;;		On entry : F/0
 20318 ;;		On exit  : F/0
 20319 ;;		Unchanged: 0/0
 20320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20321 ;;      Params:         0       4       0       0       0       0       0
 20322 ;;      Locals:         0       2       0       0       0       0       0
 20323 ;;      Temps:          0       0       0       0       0       0       0
 20324 ;;      Totals:         0       6       0       0       0       0       0
 20325 ;;Total ram usage:        6 bytes
 20326 ;; Hardware stack levels used:    1
 20327 ;; Hardware stack levels required when called:    4
 20328 ;; This function calls:
 20329 ;;		_strchr
 20330 ;; This function is called by:
 20331 ;;		_strtok
 20332 ;; This function uses a non-reentrant model
 20333 ;;
 20334                           
 20335                           	psect	text45
 20336  0018B2                     __ptext45:
 20337                           	opt stack 0
 20338  0018B2                     _strspn:
 20339                           	opt stack 23
 20340                           
 20341                           ; BSR set to: 0
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;incstack = 0
 20345                           ;incstack = 0
 20346  0018B2  6B6A               	clrf	strspn@i& (0+255),b
 20347  0018B4  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20348  0018B6  D004               	goto	l16636
 20349  0018B8                     l16634:
 20350                           
 20351                           ; BSR set to: 0
 20352  0018B8  4B66               	infsnz	strspn@s1& (0+255),f,b
 20353  0018BA  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20354  0018BC  4B6A               	infsnz	strspn@i& (0+255),f,b
 20355  0018BE  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20356  0018C0                     l16636:
 20357                           
 20358                           ; BSR set to: 0
 20359  0018C0  C066  FFD9         	movff	strspn@s1,fsr2l
 20360  0018C4  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20361  0018C8  50DF               	movf	indf2,w,c
 20362  0018CA  E010               	bz	l2619
 20363                           
 20364                           ; BSR set to: 0
 20365  0018CC  C068  F060         	movff	strspn@s2,?_strchr
 20366  0018D0  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20367  0018D4  C066  FFD9         	movff	strspn@s1,fsr2l
 20368  0018D8  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20369  0018DC  50DF               	movf	indf2,w,c
 20370  0018DE  6F62               	movwf	(?_strchr+2)& (0+255),b
 20371  0018E0  6B63               	clrf	(?_strchr+3)& (0+255),b
 20372  0018E2  EC47  F00E         	call	_strchr	;wreg free
 20373  0018E6  5161               	movf	(?_strchr+1)& (0+255),w,b
 20374  0018E8  1160               	iorwf	?_strchr& (0+255),w,b
 20375  0018EA  E1E6               	bnz	l16634
 20376  0018EC                     l2619:
 20377                           
 20378                           ; BSR set to: 0
 20379  0018EC  C06A  F066         	movff	strspn@i,?_strspn
 20380  0018F0  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20381                           
 20382                           ; BSR set to: 0
 20383  0018F4  0012               	return	
 20384  0018F6                     __end_of_strspn:
 20385                           	opt stack 0
 20386                           tblptru	equ	0xFF8
 20387                           tblptrh	equ	0xFF7
 20388                           tblptrl	equ	0xFF6
 20389                           tablat	equ	0xFF5
 20390                           prodh	equ	0xFF4
 20391                           prodl	equ	0xFF3
 20392                           intcon	equ	0xFF2
 20393                           indf0	equ	0xFEF
 20394                           postinc0	equ	0xFEE
 20395                           fsr0h	equ	0xFEA
 20396                           fsr0l	equ	0xFE9
 20397                           wreg	equ	0xFE8
 20398                           indf1	equ	0xFE7
 20399                           postinc1	equ	0xFE6
 20400                           postdec1	equ	0xFE5
 20401                           fsr1h	equ	0xFE2
 20402                           fsr1l	equ	0xFE1
 20403                           indf2	equ	0xFDF
 20404                           postinc2	equ	0xFDE
 20405                           postdec2	equ	0xFDD
 20406                           plusw2	equ	0xFDB
 20407                           fsr2h	equ	0xFDA
 20408                           fsr2l	equ	0xFD9
 20409                           status	equ	0xFD8
 20410                           
 20411 ;; *************** function _strchr *****************
 20412 ;; Defined at:
 20413 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20414 ;; Parameters:    Size  Location     Type
 20415 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20416 ;;		 -> STR_124(2), STR_122(2), STR_120(2), STR_118(2), 
 20417 ;;		 -> STR_115(2), STR_111(2), STR_109(2), STR_107(2), 
 20418 ;;		 -> STR_105(2), STR_102(2), STR_85(2), STR_83(2), 
 20419 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20420 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20421 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20422 ;;  chr             2    2[BANK0 ] int 
 20423 ;; Auto vars:     Size  Location     Type
 20424 ;;		None
 20425 ;; Return value:  Size  Location     Type
 20426 ;;                  2    0[BANK0 ] PTR unsigned char 
 20427 ;; Registers used:
 20428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20429 ;; Tracked objects:
 20430 ;;		On entry : F/0
 20431 ;;		On exit  : F/0
 20432 ;;		Unchanged: 0/0
 20433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20434 ;;      Params:         0       4       0       0       0       0       0
 20435 ;;      Locals:         0       0       0       0       0       0       0
 20436 ;;      Temps:          0       2       0       0       0       0       0
 20437 ;;      Totals:         0       6       0       0       0       0       0
 20438 ;;Total ram usage:        6 bytes
 20439 ;; Hardware stack levels used:    1
 20440 ;; Hardware stack levels required when called:    3
 20441 ;; This function calls:
 20442 ;;		Nothing
 20443 ;; This function is called by:
 20444 ;;		_doModeVerbose
 20445 ;;		_strcspn
 20446 ;;		_strspn
 20447 ;; This function uses a non-reentrant model
 20448 ;;
 20449                           
 20450                           	psect	text46
 20451  001C8E                     __ptext46:
 20452                           	opt stack 0
 20453  001C8E                     _strchr:
 20454                           	opt stack 25
 20455  001C8E                     l2521:
 20456                           
 20457                           ; BSR set to: 0
 20458  001C8E  0100               	movlb	0	; () banked
 20459  001C90  5160               	movf	strchr@ptr& (0+255),w,b
 20460  001C92  6EF6               	movwf	tblptrl,c
 20461  001C94  6EE9               	movwf	fsr0l,c
 20462  001C96  0E05               	movlw	(high __ramtop+-1)
 20463  001C98  6EEA               	movwf	fsr0h,c
 20464  001C9A  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20465  001C9C  64EA               	cpfsgt	fsr0h,c
 20466  001C9E  D003               	bra	u14997
 20467  001CA0  6EEA               	movwf	fsr0h,c
 20468  001CA2  50EF               	movf	indf0,w,c
 20469  001CA4  D003               	bra	u14990
 20470  001CA6                     u14997:
 20471  001CA6  6EF7               	movwf	tblptrh,c
 20472  001CA8  0008               	tblrd		*
 20473  001CAA  50F5               	movf	tablat,w,c
 20474  001CAC                     u14990:
 20475  001CAC  0100               	movlb	0	; () banked
 20476  001CAE  1962               	xorwf	strchr@chr& (0+255),w,b
 20477  001CB0  E105               	bnz	l11946
 20478                           
 20479                           ; BSR set to: 0
 20480  001CB2  C060  F060         	movff	strchr@ptr,?_strchr
 20481  001CB6  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20482  001CBA  D019               	goto	l2523
 20483  001CBC                     l11946:
 20484                           
 20485                           ; BSR set to: 0
 20486  001CBC  5160               	movf	strchr@ptr& (0+255),w,b
 20487  001CBE  6F64               	movwf	??_strchr& (0+255),b
 20488  001CC0  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20489  001CC2  6F65               	movwf	(??_strchr+1)& (0+255),b
 20490  001CC4  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20491  001CC6  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20492  001CC8  5164               	movf	??_strchr& (0+255),w,b
 20493  001CCA  6EF6               	movwf	tblptrl,c
 20494  001CCC  6EE9               	movwf	fsr0l,c
 20495  001CCE  0E05               	movlw	(high __ramtop+-1)
 20496  001CD0  6EEA               	movwf	fsr0h,c
 20497  001CD2  5165               	movf	(??_strchr+1)& (0+255),w,b
 20498  001CD4  64EA               	cpfsgt	fsr0h,c
 20499  001CD6  D003               	bra	u15017
 20500  001CD8  6EEA               	movwf	fsr0h,c
 20501  001CDA  50EF               	movf	indf0,w,c
 20502  001CDC  D003               	bra	u15010
 20503  001CDE                     u15017:
 20504  001CDE  6EF7               	movwf	tblptrh,c
 20505  001CE0  0008               	tblrd		*
 20506  001CE2  50F5               	movf	tablat,w,c
 20507  001CE4                     u15010:
 20508  001CE4  0900               	iorlw	0
 20509  001CE6  E1D3               	bnz	l2521
 20510  001CE8  0100               	movlb	0	; () banked
 20511  001CEA  6B60               	clrf	?_strchr& (0+255),b
 20512  001CEC  6B61               	clrf	(?_strchr+1)& (0+255),b
 20513  001CEE                     l2523:
 20514                           
 20515                           ; BSR set to: 0
 20516  001CEE  0012               	return	
 20517  001CF0                     __end_of_strchr:
 20518                           	opt stack 0
 20519                           tblptru	equ	0xFF8
 20520                           tblptrh	equ	0xFF7
 20521                           tblptrl	equ	0xFF6
 20522                           tablat	equ	0xFF5
 20523                           prodh	equ	0xFF4
 20524                           prodl	equ	0xFF3
 20525                           intcon	equ	0xFF2
 20526                           indf0	equ	0xFEF
 20527                           postinc0	equ	0xFEE
 20528                           fsr0h	equ	0xFEA
 20529                           fsr0l	equ	0xFE9
 20530                           wreg	equ	0xFE8
 20531                           indf1	equ	0xFE7
 20532                           postinc1	equ	0xFE6
 20533                           postdec1	equ	0xFE5
 20534                           fsr1h	equ	0xFE2
 20535                           fsr1l	equ	0xFE1
 20536                           indf2	equ	0xFDF
 20537                           postinc2	equ	0xFDE
 20538                           postdec2	equ	0xFDD
 20539                           plusw2	equ	0xFDB
 20540                           fsr2h	equ	0xFDA
 20541                           fsr2l	equ	0xFD9
 20542                           status	equ	0xFD8
 20543                           
 20544 ;; *************** function _stristr *****************
 20545 ;; Defined at:
 20546 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20547 ;; Parameters:    Size  Location     Type
 20548 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20549 ;;		 -> NULL(0), cmdbuf(80), 
 20550 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20551 ;;		 -> STR_143(6), STR_142(8), STR_140(6), STR_138(5), 
 20552 ;;		 -> STR_136(8), STR_135(6), STR_134(9), STR_132(11), 
 20553 ;;		 -> STR_130(8), STR_128(4), STR_127(5), STR_114(5), 
 20554 ;;		 -> STR_101(7), STR_95(5), STR_80(5), STR_49(5), 
 20555 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20556 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20557 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20558 ;;		 -> STR_8(5), STR_6(5), 
 20559 ;; Auto vars:     Size  Location     Type
 20560 ;;		None
 20561 ;; Return value:  Size  Location     Type
 20562 ;;                  2   13[BANK0 ] PTR unsigned char 
 20563 ;; Registers used:
 20564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20565 ;; Tracked objects:
 20566 ;;		On entry : F/0
 20567 ;;		On exit  : F/0
 20568 ;;		Unchanged: 0/0
 20569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20570 ;;      Params:         0       4       0       0       0       0       0
 20571 ;;      Locals:         0       0       0       0       0       0       0
 20572 ;;      Temps:          0       0       0       0       0       0       0
 20573 ;;      Totals:         0       4       0       0       0       0       0
 20574 ;;Total ram usage:        4 bytes
 20575 ;; Hardware stack levels used:    1
 20576 ;; Hardware stack levels required when called:    5
 20577 ;; This function calls:
 20578 ;;		_strlen
 20579 ;;		_strnicmp
 20580 ;;		_strichr
 20581 ;; This function is called by:
 20582 ;;		_doModeVerbose
 20583 ;; This function uses a non-reentrant model
 20584 ;;
 20585                           
 20586                           	psect	text47
 20587  001EB2                     __ptext47:
 20588                           	opt stack 0
 20589  001EB2                     _stristr:
 20590                           	opt stack 23
 20591                           
 20592                           ; BSR set to: 0
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;incstack = 0
 20596                           ;incstack = 0
 20597  001EB2  D02F               	goto	l15038
 20598  001EB4                     l15032:
 20599                           
 20600                           ; BSR set to: 0
 20601  001EB4  C06D  F064         	movff	stristr@s1,?_strnicmp
 20602  001EB8  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20603  001EBC  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20604  001EC0  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20605  001EC4  C06F  F060         	movff	stristr@s2,?_strlen
 20606  001EC8  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20607  001ECC  EC18  F00C         	call	_strlen	;wreg free
 20608  001ED0  C060  F068         	movff	?_strlen,?_strnicmp+4
 20609  001ED4  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20610  001ED8  EC78  F00E         	call	_strnicmp	;wreg free
 20611  001EDC  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20612  001EDE  1164               	iorwf	?_strnicmp& (0+255),w,b
 20613  001EE0  E105               	bnz	l15036
 20614                           
 20615                           ; BSR set to: 0
 20616  001EE2  C06D  F06D         	movff	stristr@s1,?_stristr
 20617  001EE6  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20618  001EEA  D01E               	goto	l2542
 20619  001EEC                     l15036:
 20620                           
 20621                           ; BSR set to: 0
 20622  001EEC  296D               	incf	stristr@s1& (0+255),w,b
 20623  001EEE  6F61               	movwf	?_strichr& (0+255),b
 20624  001EF0  0E00               	movlw	0
 20625  001EF2  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20626  001EF4  6F62               	movwf	(?_strichr+1)& (0+255),b
 20627  001EF6  C06F  FFF6         	movff	stristr@s2,tblptrl
 20628  001EFA  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20629  001EFE  0008               	tblrd		*
 20630  001F00  50F5               	movf	tablat,w,c
 20631  001F02  6F63               	movwf	(?_strichr+2)& (0+255),b
 20632  001F04  6B64               	clrf	(?_strichr+3)& (0+255),b
 20633  001F06  ECBA  F00B         	call	_strichr	;wreg free
 20634  001F0A  C061  F06D         	movff	?_strichr,stristr@s1
 20635  001F0E  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20636  001F12                     l15038:
 20637                           
 20638                           ; BSR set to: 0
 20639  001F12  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20640  001F14  116D               	iorwf	stristr@s1& (0+255),w,b
 20641  001F16  E006               	bz	l2545
 20642                           
 20643                           ; BSR set to: 0
 20644  001F18  C06D  FFD9         	movff	stristr@s1,fsr2l
 20645  001F1C  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20646  001F20  50DF               	movf	indf2,w,c
 20647  001F22  E1C8               	bnz	l15032
 20648  001F24                     l2545:
 20649                           
 20650                           ; BSR set to: 0
 20651  001F24  6B6D               	clrf	?_stristr& (0+255),b
 20652  001F26  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20653  001F28                     l2542:
 20654                           
 20655                           ; BSR set to: 0
 20656  001F28  0012               	return	
 20657  001F2A                     __end_of_stristr:
 20658                           	opt stack 0
 20659                           tblptru	equ	0xFF8
 20660                           tblptrh	equ	0xFF7
 20661                           tblptrl	equ	0xFF6
 20662                           tablat	equ	0xFF5
 20663                           prodh	equ	0xFF4
 20664                           prodl	equ	0xFF3
 20665                           intcon	equ	0xFF2
 20666                           indf0	equ	0xFEF
 20667                           postinc0	equ	0xFEE
 20668                           fsr0h	equ	0xFEA
 20669                           fsr0l	equ	0xFE9
 20670                           wreg	equ	0xFE8
 20671                           indf1	equ	0xFE7
 20672                           postinc1	equ	0xFE6
 20673                           postdec1	equ	0xFE5
 20674                           fsr1h	equ	0xFE2
 20675                           fsr1l	equ	0xFE1
 20676                           indf2	equ	0xFDF
 20677                           postinc2	equ	0xFDE
 20678                           postdec2	equ	0xFDD
 20679                           plusw2	equ	0xFDB
 20680                           fsr2h	equ	0xFDA
 20681                           fsr2l	equ	0xFD9
 20682                           status	equ	0xFD8
 20683                           
 20684 ;; *************** function _strichr *****************
 20685 ;; Defined at:
 20686 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20687 ;; Parameters:    Size  Location     Type
 20688 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20689 ;;		 -> NULL(0), cmdbuf(80), 
 20690 ;;  chr             2    3[BANK0 ] int 
 20691 ;; Auto vars:     Size  Location     Type
 20692 ;;		None
 20693 ;; Return value:  Size  Location     Type
 20694 ;;                  2    1[BANK0 ] PTR unsigned char 
 20695 ;; Registers used:
 20696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20697 ;; Tracked objects:
 20698 ;;		On entry : F/0
 20699 ;;		On exit  : F/0
 20700 ;;		Unchanged: 0/0
 20701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20702 ;;      Params:         0       4       0       0       0       0       0
 20703 ;;      Locals:         0       0       0       0       0       0       0
 20704 ;;      Temps:          0       0       0       0       0       0       0
 20705 ;;      Totals:         0       4       0       0       0       0       0
 20706 ;;Total ram usage:        4 bytes
 20707 ;; Hardware stack levels used:    1
 20708 ;; Hardware stack levels required when called:    4
 20709 ;; This function calls:
 20710 ;;		_toupper
 20711 ;; This function is called by:
 20712 ;;		_stristr
 20713 ;; This function uses a non-reentrant model
 20714 ;;
 20715                           
 20716                           	psect	text48
 20717  001774                     __ptext48:
 20718                           	opt stack 0
 20719  001774                     _strichr:
 20720                           	opt stack 23
 20721                           
 20722                           ; BSR set to: 0
 20723                           
 20724                           ; BSR set to: 0
 20725                           ;incstack = 0
 20726                           ;incstack = 0
 20727  001774  5163               	movf	strichr@chr& (0+255),w,b
 20728  001776  EC88  F00A         	call	_toupper
 20729  00177A  6F63               	movwf	strichr@chr& (0+255),b
 20730  00177C  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20731  00177E  D010               	goto	l16620
 20732  001780                     l16614:
 20733                           
 20734                           ; BSR set to: 0
 20735  001780  C061  FFD9         	movff	strichr@ptr,fsr2l
 20736  001784  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20737  001788  50DF               	movf	indf2,w,c
 20738  00178A  EC88  F00A         	call	_toupper
 20739  00178E  1963               	xorwf	strichr@chr& (0+255),w,b
 20740  001790  E105               	bnz	l16618
 20741                           
 20742                           ; BSR set to: 0
 20743  001792  C061  F061         	movff	strichr@ptr,?_strichr
 20744  001796  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20745  00179A  D00A               	goto	l2609
 20746  00179C                     l16618:
 20747                           
 20748                           ; BSR set to: 0
 20749  00179C  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20750  00179E  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20751  0017A0                     l16620:
 20752                           
 20753                           ; BSR set to: 0
 20754  0017A0  C061  FFD9         	movff	strichr@ptr,fsr2l
 20755  0017A4  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20756  0017A8  50DF               	movf	indf2,w,c
 20757  0017AA  E1EA               	bnz	l16614
 20758                           
 20759                           ; BSR set to: 0
 20760  0017AC  6B61               	clrf	?_strichr& (0+255),b
 20761  0017AE  6B62               	clrf	(?_strichr+1)& (0+255),b
 20762  0017B0                     l2609:
 20763                           
 20764                           ; BSR set to: 0
 20765  0017B0  0012               	return	
 20766  0017B2                     __end_of_strichr:
 20767                           	opt stack 0
 20768                           tblptru	equ	0xFF8
 20769                           tblptrh	equ	0xFF7
 20770                           tblptrl	equ	0xFF6
 20771                           tablat	equ	0xFF5
 20772                           prodh	equ	0xFF4
 20773                           prodl	equ	0xFF3
 20774                           intcon	equ	0xFF2
 20775                           indf0	equ	0xFEF
 20776                           postinc0	equ	0xFEE
 20777                           fsr0h	equ	0xFEA
 20778                           fsr0l	equ	0xFE9
 20779                           wreg	equ	0xFE8
 20780                           indf1	equ	0xFE7
 20781                           postinc1	equ	0xFE6
 20782                           postdec1	equ	0xFE5
 20783                           fsr1h	equ	0xFE2
 20784                           fsr1l	equ	0xFE1
 20785                           indf2	equ	0xFDF
 20786                           postinc2	equ	0xFDE
 20787                           postdec2	equ	0xFDD
 20788                           plusw2	equ	0xFDB
 20789                           fsr2h	equ	0xFDA
 20790                           fsr2l	equ	0xFD9
 20791                           status	equ	0xFD8
 20792                           
 20793 ;; *************** function _strnicmp *****************
 20794 ;; Defined at:
 20795 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20796 ;; Parameters:    Size  Location     Type
 20797 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20798 ;;		 -> NULL(0), cmdbuf(80), 
 20799 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20800 ;;		 -> STR_143(6), STR_142(8), STR_140(6), STR_138(5), 
 20801 ;;		 -> STR_136(8), STR_135(6), STR_134(9), STR_132(11), 
 20802 ;;		 -> STR_130(8), STR_128(4), STR_127(5), STR_114(5), 
 20803 ;;		 -> STR_101(7), STR_95(5), STR_80(5), STR_49(5), 
 20804 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20805 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20806 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20807 ;;		 -> STR_8(5), STR_6(5), 
 20808 ;;  len             2    8[BANK0 ] unsigned int 
 20809 ;; Auto vars:     Size  Location     Type
 20810 ;;  r               1   12[BANK0 ] char 
 20811 ;; Return value:  Size  Location     Type
 20812 ;;                  2    4[BANK0 ] int 
 20813 ;; Registers used:
 20814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20815 ;; Tracked objects:
 20816 ;;		On entry : F/0
 20817 ;;		On exit  : F/0
 20818 ;;		Unchanged: 0/0
 20819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20820 ;;      Params:         0       6       0       0       0       0       0
 20821 ;;      Locals:         0       1       0       0       0       0       0
 20822 ;;      Temps:          0       2       0       0       0       0       0
 20823 ;;      Totals:         0       9       0       0       0       0       0
 20824 ;;Total ram usage:        9 bytes
 20825 ;; Hardware stack levels used:    1
 20826 ;; Hardware stack levels required when called:    4
 20827 ;; This function calls:
 20828 ;;		_toupper
 20829 ;; This function is called by:
 20830 ;;		_stristr
 20831 ;; This function uses a non-reentrant model
 20832 ;;
 20833                           
 20834                           	psect	text49
 20835  001CF0                     __ptext49:
 20836                           	opt stack 0
 20837  001CF0                     _strnicmp:
 20838                           	opt stack 23
 20839                           
 20840                           ; BSR set to: 0
 20841                           
 20842                           ; BSR set to: 0
 20843                           ;incstack = 0
 20844                           ;incstack = 0
 20845  001CF0  D027               	goto	l16610
 20846  001CF2                     l16600:
 20847                           
 20848                           ; BSR set to: 0
 20849  001CF2  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20850  001CF6  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20851  001CFA  0008               	tblrd		*
 20852  001CFC  50F5               	movf	tablat,w,c
 20853  001CFE  EC88  F00A         	call	_toupper
 20854  001D02  6F6A               	movwf	??_strnicmp& (0+255),b
 20855  001D04  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20856  001D08  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20857  001D0C  50DF               	movf	indf2,w,c
 20858  001D0E  EC88  F00A         	call	_toupper
 20859  001D12  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20860  001D14  516A               	movf	??_strnicmp& (0+255),w,b
 20861  001D16  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20862  001D18  6F6C               	movwf	strnicmp@r& (0+255),b
 20863  001D1A  0100               	movlb	0	; () banked
 20864  001D1C  676C               	tstfsz	strnicmp@r& (0+255),b
 20865  001D1E  D006               	goto	l16604
 20866                           
 20867                           ; BSR set to: 0
 20868  001D20  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20869  001D24  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20870  001D28  50DF               	movf	indf2,w,c
 20871  001D2A  E106               	bnz	l16608
 20872  001D2C                     l16604:
 20873                           
 20874                           ; BSR set to: 0
 20875  001D2C  516C               	movf	strnicmp@r& (0+255),w,b
 20876  001D2E  6F64               	movwf	?_strnicmp& (0+255),b
 20877  001D30  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20878  001D32  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20879  001D34  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20880  001D36  D00E               	goto	l2561
 20881  001D38                     l16608:
 20882                           
 20883                           ; BSR set to: 0
 20884  001D38  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20885  001D3A  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20886  001D3C  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20887  001D3E  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20888  001D40                     l16610:
 20889                           
 20890                           ; BSR set to: 0
 20891  001D40  0768               	decf	strnicmp@len& (0+255),f,b
 20892  001D42  A0D8               	btfss	status,0,c
 20893  001D44  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20894  001D46  0100               	movlb	0	; () banked
 20895  001D48  2968               	incf	strnicmp@len& (0+255),w,b
 20896  001D4A  B4D8               	btfsc	status,2,c
 20897  001D4C  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20898  001D4E  E1D1               	bnz	l16600
 20899                           
 20900                           ; BSR set to: 0
 20901  001D50  6B64               	clrf	?_strnicmp& (0+255),b
 20902  001D52  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20903  001D54                     l2561:
 20904                           
 20905                           ; BSR set to: 0
 20906  001D54  0012               	return	
 20907  001D56                     __end_of_strnicmp:
 20908                           	opt stack 0
 20909                           tblptru	equ	0xFF8
 20910                           tblptrh	equ	0xFF7
 20911                           tblptrl	equ	0xFF6
 20912                           tablat	equ	0xFF5
 20913                           prodh	equ	0xFF4
 20914                           prodl	equ	0xFF3
 20915                           intcon	equ	0xFF2
 20916                           indf0	equ	0xFEF
 20917                           postinc0	equ	0xFEE
 20918                           fsr0h	equ	0xFEA
 20919                           fsr0l	equ	0xFE9
 20920                           wreg	equ	0xFE8
 20921                           indf1	equ	0xFE7
 20922                           postinc1	equ	0xFE6
 20923                           postdec1	equ	0xFE5
 20924                           fsr1h	equ	0xFE2
 20925                           fsr1l	equ	0xFE1
 20926                           indf2	equ	0xFDF
 20927                           postinc2	equ	0xFDE
 20928                           postdec2	equ	0xFDD
 20929                           plusw2	equ	0xFDB
 20930                           fsr2h	equ	0xFDA
 20931                           fsr2l	equ	0xFD9
 20932                           status	equ	0xFD8
 20933                           
 20934 ;; *************** function _toupper *****************
 20935 ;; Defined at:
 20936 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20937 ;; Parameters:    Size  Location     Type
 20938 ;;  c               1    wreg     unsigned char 
 20939 ;; Auto vars:     Size  Location     Type
 20940 ;;  c               1    0[BANK0 ] unsigned char 
 20941 ;; Return value:  Size  Location     Type
 20942 ;;                  1    wreg      unsigned char 
 20943 ;; Registers used:
 20944 ;;		wreg, status,2, status,0
 20945 ;; Tracked objects:
 20946 ;;		On entry : F/0
 20947 ;;		On exit  : F/0
 20948 ;;		Unchanged: 0/0
 20949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20950 ;;      Params:         0       0       0       0       0       0       0
 20951 ;;      Locals:         0       1       0       0       0       0       0
 20952 ;;      Temps:          0       0       0       0       0       0       0
 20953 ;;      Totals:         0       1       0       0       0       0       0
 20954 ;;Total ram usage:        1 bytes
 20955 ;; Hardware stack levels used:    1
 20956 ;; Hardware stack levels required when called:    3
 20957 ;; This function calls:
 20958 ;;		Nothing
 20959 ;; This function is called by:
 20960 ;;		_strnicmp
 20961 ;;		_strichr
 20962 ;; This function uses a non-reentrant model
 20963 ;;
 20964                           
 20965                           	psect	text50
 20966  001510                     __ptext50:
 20967                           	opt stack 0
 20968  001510                     _toupper:
 20969                           	opt stack 23
 20970                           
 20971                           ; BSR set to: 0
 20972                           ;incstack = 0
 20973                           ;incstack = 0
 20974                           ;toupper@c stored from wreg
 20975  001510  CFE8 F060          	movff	wreg,toupper@c
 20976                           
 20977                           ; BSR set to: 0
 20978  001514  0E7B               	movlw	123
 20979  001516  6160               	cpfslt	toupper@c& (0+255),b
 20980  001518  D004               	goto	l16628
 20981                           
 20982                           ; BSR set to: 0
 20983  00151A  0E60               	movlw	96
 20984  00151C  6560               	cpfsgt	toupper@c& (0+255),b
 20985  00151E  D001               	goto	l16628
 20986                           
 20987                           ; BSR set to: 0
 20988  001520  9B60               	bcf	toupper@c& (0+255),5,b
 20989  001522                     l16628:
 20990                           
 20991                           ; BSR set to: 0
 20992  001522  5160               	movf	toupper@c& (0+255),w,b
 20993                           
 20994                           ; BSR set to: 0
 20995  001524  0012               	return	
 20996  001526                     __end_of_toupper:
 20997                           	opt stack 0
 20998                           tblptru	equ	0xFF8
 20999                           tblptrh	equ	0xFF7
 21000                           tblptrl	equ	0xFF6
 21001                           tablat	equ	0xFF5
 21002                           prodh	equ	0xFF4
 21003                           prodl	equ	0xFF3
 21004                           intcon	equ	0xFF2
 21005                           indf0	equ	0xFEF
 21006                           postinc0	equ	0xFEE
 21007                           fsr0h	equ	0xFEA
 21008                           fsr0l	equ	0xFE9
 21009                           wreg	equ	0xFE8
 21010                           indf1	equ	0xFE7
 21011                           postinc1	equ	0xFE6
 21012                           postdec1	equ	0xFE5
 21013                           fsr1h	equ	0xFE2
 21014                           fsr1l	equ	0xFE1
 21015                           indf2	equ	0xFDF
 21016                           postinc2	equ	0xFDE
 21017                           postdec2	equ	0xFDD
 21018                           plusw2	equ	0xFDB
 21019                           fsr2h	equ	0xFDA
 21020                           fsr2l	equ	0xFD9
 21021                           status	equ	0xFD8
 21022                           
 21023 ;; *************** function _strlen *****************
 21024 ;; Defined at:
 21025 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 21026 ;; Parameters:    Size  Location     Type
 21027 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 21028 ;;		 -> printGUID@buf(3), STR_143(6), STR_142(8), STR_140(6), 
 21029 ;;		 -> STR_138(5), STR_136(8), STR_135(6), STR_134(9), 
 21030 ;;		 -> STR_132(11), STR_130(8), STR_128(4), STR_127(5), 
 21031 ;;		 -> STR_114(5), STR_101(7), STR_95(5), STR_80(5), 
 21032 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 21033 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 21034 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 21035 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 21036 ;;		 -> cmdbuf(80), 
 21037 ;; Auto vars:     Size  Location     Type
 21038 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 21039 ;;		 -> printGUID@buf(3), STR_143(6), STR_142(8), STR_140(6), 
 21040 ;;		 -> STR_138(5), STR_136(8), STR_135(6), STR_134(9), 
 21041 ;;		 -> STR_132(11), STR_130(8), STR_128(4), STR_127(5), 
 21042 ;;		 -> STR_114(5), STR_101(7), STR_95(5), STR_80(5), 
 21043 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 21044 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 21045 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 21046 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 21047 ;;		 -> cmdbuf(80), 
 21048 ;; Return value:  Size  Location     Type
 21049 ;;                  2    0[BANK0 ] unsigned int 
 21050 ;; Registers used:
 21051 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21052 ;; Tracked objects:
 21053 ;;		On entry : F/0
 21054 ;;		On exit  : F/0
 21055 ;;		Unchanged: 0/0
 21056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21057 ;;      Params:         0       2       0       0       0       0       0
 21058 ;;      Locals:         0       2       0       0       0       0       0
 21059 ;;      Temps:          0       0       0       0       0       0       0
 21060 ;;      Totals:         0       4       0       0       0       0       0
 21061 ;;Total ram usage:        4 bytes
 21062 ;; Hardware stack levels used:    1
 21063 ;; Hardware stack levels required when called:    3
 21064 ;; This function calls:
 21065 ;;		Nothing
 21066 ;; This function is called by:
 21067 ;;		_doModeSLCAN
 21068 ;;		_receiveSendEventSLCAN
 21069 ;;		_printGUID
 21070 ;;		_hexStringToBytes
 21071 ;;		_stristr
 21072 ;; This function uses a non-reentrant model
 21073 ;;
 21074                           
 21075                           	psect	text51
 21076  001830                     __ptext51:
 21077                           	opt stack 0
 21078  001830                     _strlen:
 21079                           	opt stack 24
 21080                           
 21081                           ; BSR set to: 0
 21082                           
 21083                           ; BSR set to: 0
 21084                           ;incstack = 0
 21085                           ;incstack = 0
 21086  001830  C060  F062         	movff	strlen@s,strlen@cp
 21087  001834  C061  F063         	movff	strlen@s+1,strlen@cp+1
 21088  001838  D003               	goto	l16252
 21089  00183A                     l16250:
 21090  00183A  0100               	movlb	0	; () banked
 21091  00183C  4B62               	infsnz	strlen@cp& (0+255),f,b
 21092  00183E  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21093  001840                     l16252:
 21094                           
 21095                           ; BSR set to: 0
 21096  001840  5162               	movf	strlen@cp& (0+255),w,b
 21097  001842  6EF6               	movwf	tblptrl,c
 21098  001844  6EE9               	movwf	fsr0l,c
 21099  001846  0E05               	movlw	(high __ramtop+-1)
 21100  001848  6EEA               	movwf	fsr0h,c
 21101  00184A  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21102  00184C  64EA               	cpfsgt	fsr0h,c
 21103  00184E  D003               	bra	u22227
 21104  001850  6EEA               	movwf	fsr0h,c
 21105  001852  50EF               	movf	indf0,w,c
 21106  001854  D003               	bra	u22220
 21107  001856                     u22227:
 21108  001856  6EF7               	movwf	tblptrh,c
 21109  001858  0008               	tblrd		*
 21110  00185A  50F5               	movf	tablat,w,c
 21111  00185C                     u22220:
 21112  00185C  0900               	iorlw	0
 21113  00185E  E1ED               	bnz	l16250
 21114  001860  0100               	movlb	0	; () banked
 21115  001862  5160               	movf	strlen@s& (0+255),w,b
 21116  001864  5D62               	subwf	strlen@cp& (0+255),w,b
 21117  001866  6F60               	movwf	?_strlen& (0+255),b
 21118  001868  5161               	movf	(strlen@s+1)& (0+255),w,b
 21119  00186A  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 21120  00186C  6F61               	movwf	(?_strlen+1)& (0+255),b
 21121                           
 21122                           ; BSR set to: 0
 21123  00186E  0012               	return	
 21124  001870                     __end_of_strlen:
 21125                           	opt stack 0
 21126                           tblptru	equ	0xFF8
 21127                           tblptrh	equ	0xFF7
 21128                           tblptrl	equ	0xFF6
 21129                           tablat	equ	0xFF5
 21130                           prodh	equ	0xFF4
 21131                           prodl	equ	0xFF3
 21132                           intcon	equ	0xFF2
 21133                           indf0	equ	0xFEF
 21134                           postinc0	equ	0xFEE
 21135                           fsr0h	equ	0xFEA
 21136                           fsr0l	equ	0xFE9
 21137                           wreg	equ	0xFE8
 21138                           indf1	equ	0xFE7
 21139                           postinc1	equ	0xFE6
 21140                           postdec1	equ	0xFE5
 21141                           fsr1h	equ	0xFE2
 21142                           fsr1l	equ	0xFE1
 21143                           indf2	equ	0xFDF
 21144                           postinc2	equ	0xFDE
 21145                           postdec2	equ	0xFDD
 21146                           plusw2	equ	0xFDB
 21147                           fsr2h	equ	0xFDA
 21148                           fsr2l	equ	0xFD9
 21149                           status	equ	0xFD8
 21150                           
 21151 ;; *************** function _receivePrintEventVerbose *****************
 21152 ;; Defined at:
 21153 ;;		line 1805 in file "main.c"
 21154 ;; Parameters:    Size  Location     Type
 21155 ;;		None
 21156 ;; Auto vars:     Size  Location     Type
 21157 ;;  i               1   69[BANK0 ] unsigned char 
 21158 ;; Return value:  Size  Location     Type
 21159 ;;                  1    wreg      enum E15660
 21160 ;; Registers used:
 21161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21162 ;; Tracked objects:
 21163 ;;		On entry : 0/0
 21164 ;;		On exit  : 0/0
 21165 ;;		Unchanged: 0/0
 21166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21167 ;;      Params:         0       0       0       0       0       0       0
 21168 ;;      Locals:         0      13       0       0       0       0       0
 21169 ;;      Temps:          0       5       0       0       0       0       0
 21170 ;;      Totals:         0      18       0       0       0       0       0
 21171 ;;Total ram usage:       18 bytes
 21172 ;; Hardware stack levels used:    1
 21173 ;; Hardware stack levels required when called:    6
 21174 ;; This function calls:
 21175 ;;		_putsUSART
 21176 ;;		_sprintf
 21177 ;;		_getVSCPFrame
 21178 ;; This function is called by:
 21179 ;;		_doModeVerbose
 21180 ;; This function uses a non-reentrant model
 21181 ;;
 21182                           
 21183                           	psect	text52
 21184  004696                     __ptext52:
 21185                           	opt stack 0
 21186  004696                     _receivePrintEventVerbose:
 21187                           	opt stack 22
 21188                           
 21189                           ;main.c: 1806: uint8_t i;
 21190                           ;main.c: 1808: if (getVSCPFrame(&vscpClass,
 21191                           ;main.c: 1809: &vscpType,
 21192                           ;main.c: 1810: &vscpNodeId,
 21193                           ;main.c: 1811: &vscpPriority,
 21194                           ;main.c: 1812: &vscpSize,
 21195                           ;main.c: 1813: vscpData)) {
 21196                           
 21197                           ; BSR set to: 0
 21198                           ;incstack = 0
 21199                           ;incstack = 0
 21200  004696  0E3F               	movlw	low _vscpType
 21201  004698  0100               	movlb	0	; () banked
 21202  00469A  6F73               	movwf	?_getVSCPFrame& (0+255),b
 21203  00469C  0E3C               	movlw	low _vscpNodeId
 21204  00469E  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21205  0046A0  0E3D               	movlw	low _vscpPriority
 21206  0046A2  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21207  0046A4  0E3E               	movlw	low _vscpSize
 21208  0046A6  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21209  0046A8  0E01               	movlw	high _vscpData
 21210  0046AA  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21211  0046AC  0EE3               	movlw	low _vscpData
 21212  0046AE  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21213  0046B0  0E38               	movlw	_vscpClass& (0+255)
 21214  0046B2  EC14  F010         	call	_getVSCPFrame
 21215  0046B6  0900               	iorlw	0
 21216  0046B8  E101 D130          	bz	l15018
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;main.c: 1816: cntRxFrames++;
 21220  0046BC  0101               	movlb	1	; () banked
 21221  0046BE  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21222  0046C0  0E00               	movlw	0
 21223  0046C2  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21224  0046C4  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21225  0046C6  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21226                           
 21227                           ;main.c: 1817: cntRxBytes += vscpSize;
 21228  0046C8  503E               	movf	_vscpSize,w,c
 21229  0046CA  2708               	addwf	_cntRxBytes& (0+255),f,b
 21230  0046CC  0E00               	movlw	0
 21231  0046CE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21232  0046D0  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21233  0046D2  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21234                           
 21235                           ; BSR set to: 1
 21236                           ;main.c: 1819: putsUSART((char *) "<Prio=");
 21237  0046D4  0E7C               	movlw	high STR_153
 21238  0046D6  0100               	movlb	0	; () banked
 21239  0046D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21240  0046DA  0E30               	movlw	low STR_153
 21241  0046DC  6F61               	movwf	?_putsUSART& (0+255),b
 21242  0046DE  EC33  F00D         	call	_putsUSART	;wreg free
 21243                           
 21244                           ;main.c: 1820: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21245  0046E2  0100               	movlb	0	; () banked
 21246  0046E4  67E5               	tstfsz	_bHex& (0+255),b
 21247  0046E6  D004               	goto	l14936
 21248                           
 21249                           ; BSR set to: 0
 21250  0046E8  0E7C               	movlw	high STR_60
 21251  0046EA  6F9A               	movwf	(_receivePrintEventVerbose$1362+1)& (0+255),b
 21252  0046EC  0EED               	movlw	low STR_60
 21253  0046EE  D003               	goto	L32
 21254  0046F0                     l14936:
 21255                           
 21256                           ; BSR set to: 0
 21257  0046F0  0E7C               	movlw	high STR_59
 21258  0046F2  6F9A               	movwf	(_receivePrintEventVerbose$1362+1)& (0+255),b
 21259  0046F4  0E53               	movlw	low STR_59
 21260  0046F6                     L32:
 21261  0046F6  6F99               	movwf	_receivePrintEventVerbose$1362& (0+255),b
 21262                           
 21263                           ; BSR set to: 0
 21264  0046F8  0E01               	movlw	high _wrkbuf
 21265  0046FA  0100               	movlb	0	; () banked
 21266  0046FC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21267  0046FE  0E7B               	movlw	low _wrkbuf
 21268  004700  6F76               	movwf	?_sprintf& (0+255),b
 21269  004702  C099  F078         	movff	_receivePrintEventVerbose$1362,?_sprintf+2
 21270  004706  C09A  F079         	movff	_receivePrintEventVerbose$1362+1,?_sprintf+3
 21271  00470A  C03D  F07A         	movff	_vscpPriority,?_sprintf+4
 21272  00470E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21273  004710  ECD7  F027         	call	_sprintf	;wreg free
 21274                           
 21275                           ; BSR set to: 0
 21276                           ;main.c: 1821: putsUSART(wrkbuf);
 21277  004714  0E01               	movlw	high _wrkbuf
 21278  004716  0100               	movlb	0	; () banked
 21279  004718  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21280  00471A  0E7B               	movlw	low _wrkbuf
 21281  00471C  6F61               	movwf	?_putsUSART& (0+255),b
 21282  00471E  EC33  F00D         	call	_putsUSART	;wreg free
 21283                           
 21284                           ;main.c: 1822: putsUSART((char *) ",class=");
 21285  004722  0E7B               	movlw	high STR_156
 21286  004724  0100               	movlb	0	; () banked
 21287  004726  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21288  004728  0EE4               	movlw	low STR_156
 21289  00472A  6F61               	movwf	?_putsUSART& (0+255),b
 21290  00472C  EC33  F00D         	call	_putsUSART	;wreg free
 21291                           
 21292                           ;main.c: 1823: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21293  004730  0100               	movlb	0	; () banked
 21294  004732  67E5               	tstfsz	_bHex& (0+255),b
 21295  004734  D004               	goto	l14948
 21296                           
 21297                           ; BSR set to: 0
 21298  004736  0E7C               	movlw	high STR_60
 21299  004738  6F9C               	movwf	(_receivePrintEventVerbose$1367+1)& (0+255),b
 21300  00473A  0EED               	movlw	low STR_60
 21301  00473C  D003               	goto	L33
 21302  00473E                     l14948:
 21303                           
 21304                           ; BSR set to: 0
 21305  00473E  0E7C               	movlw	high STR_157
 21306  004740  6F9C               	movwf	(_receivePrintEventVerbose$1367+1)& (0+255),b
 21307  004742  0E5A               	movlw	low STR_157
 21308  004744                     L33:
 21309  004744  6F9B               	movwf	_receivePrintEventVerbose$1367& (0+255),b
 21310                           
 21311                           ; BSR set to: 0
 21312  004746  0E01               	movlw	high _wrkbuf
 21313  004748  0100               	movlb	0	; () banked
 21314  00474A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21315  00474C  0E7B               	movlw	low _wrkbuf
 21316  00474E  6F76               	movwf	?_sprintf& (0+255),b
 21317  004750  C09B  F078         	movff	_receivePrintEventVerbose$1367,?_sprintf+2
 21318  004754  C09C  F079         	movff	_receivePrintEventVerbose$1367+1,?_sprintf+3
 21319  004758  C038  F07A         	movff	_vscpClass,?_sprintf+4
 21320  00475C  C039  F07B         	movff	_vscpClass+1,?_sprintf+5
 21321  004760  ECD7  F027         	call	_sprintf	;wreg free
 21322                           
 21323                           ; BSR set to: 0
 21324                           ;main.c: 1824: putsUSART(wrkbuf);
 21325  004764  0E01               	movlw	high _wrkbuf
 21326  004766  0100               	movlb	0	; () banked
 21327  004768  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21328  00476A  0E7B               	movlw	low _wrkbuf
 21329  00476C  6F61               	movwf	?_putsUSART& (0+255),b
 21330  00476E  EC33  F00D         	call	_putsUSART	;wreg free
 21331                           
 21332                           ;main.c: 1825: putsUSART((char *) ",type=");
 21333  004772  0E7C               	movlw	high STR_159
 21334  004774  0100               	movlb	0	; () banked
 21335  004776  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21336  004778  0E22               	movlw	low STR_159
 21337  00477A  6F61               	movwf	?_putsUSART& (0+255),b
 21338  00477C  EC33  F00D         	call	_putsUSART	;wreg free
 21339                           
 21340                           ;main.c: 1826: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21341  004780  0100               	movlb	0	; () banked
 21342  004782  67E5               	tstfsz	_bHex& (0+255),b
 21343  004784  D004               	goto	l14960
 21344                           
 21345                           ; BSR set to: 0
 21346  004786  0E7C               	movlw	high STR_60
 21347  004788  6F9E               	movwf	(_receivePrintEventVerbose$1372+1)& (0+255),b
 21348  00478A  0EED               	movlw	low STR_60
 21349  00478C  D003               	goto	L34
 21350  00478E                     l14960:
 21351                           
 21352                           ; BSR set to: 0
 21353  00478E  0E7C               	movlw	high STR_59
 21354  004790  6F9E               	movwf	(_receivePrintEventVerbose$1372+1)& (0+255),b
 21355  004792  0E53               	movlw	low STR_59
 21356  004794                     L34:
 21357  004794  6F9D               	movwf	_receivePrintEventVerbose$1372& (0+255),b
 21358                           
 21359                           ; BSR set to: 0
 21360  004796  0E01               	movlw	high _wrkbuf
 21361  004798  0100               	movlb	0	; () banked
 21362  00479A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21363  00479C  0E7B               	movlw	low _wrkbuf
 21364  00479E  6F76               	movwf	?_sprintf& (0+255),b
 21365  0047A0  C09D  F078         	movff	_receivePrintEventVerbose$1372,?_sprintf+2
 21366  0047A4  C09E  F079         	movff	_receivePrintEventVerbose$1372+1,?_sprintf+3
 21367  0047A8  C03F  F07A         	movff	_vscpType,?_sprintf+4
 21368  0047AC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21369  0047AE  ECD7  F027         	call	_sprintf	;wreg free
 21370                           
 21371                           ; BSR set to: 0
 21372                           ;main.c: 1827: putsUSART(wrkbuf);
 21373  0047B2  0E01               	movlw	high _wrkbuf
 21374  0047B4  0100               	movlb	0	; () banked
 21375  0047B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21376  0047B8  0E7B               	movlw	low _wrkbuf
 21377  0047BA  6F61               	movwf	?_putsUSART& (0+255),b
 21378  0047BC  EC33  F00D         	call	_putsUSART	;wreg free
 21379                           
 21380                           ;main.c: 1828: putsUSART((char *) ",nodeid=");
 21381  0047C0  0E7B               	movlw	high STR_162
 21382  0047C2  0100               	movlb	0	; () banked
 21383  0047C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21384  0047C6  0EAA               	movlw	low STR_162
 21385  0047C8  6F61               	movwf	?_putsUSART& (0+255),b
 21386  0047CA  EC33  F00D         	call	_putsUSART	;wreg free
 21387                           
 21388                           ;main.c: 1829: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21389  0047CE  0100               	movlb	0	; () banked
 21390  0047D0  67E5               	tstfsz	_bHex& (0+255),b
 21391  0047D2  D004               	goto	l14972
 21392                           
 21393                           ; BSR set to: 0
 21394  0047D4  0E7C               	movlw	high STR_60
 21395  0047D6  6FA0               	movwf	(_receivePrintEventVerbose$1377+1)& (0+255),b
 21396  0047D8  0EED               	movlw	low STR_60
 21397  0047DA  D003               	goto	L35
 21398  0047DC                     l14972:
 21399                           
 21400                           ; BSR set to: 0
 21401  0047DC  0E7C               	movlw	high STR_59
 21402  0047DE  6FA0               	movwf	(_receivePrintEventVerbose$1377+1)& (0+255),b
 21403  0047E0  0E53               	movlw	low STR_59
 21404  0047E2                     L35:
 21405  0047E2  6F9F               	movwf	_receivePrintEventVerbose$1377& (0+255),b
 21406                           
 21407                           ; BSR set to: 0
 21408  0047E4  0E01               	movlw	high _wrkbuf
 21409  0047E6  0100               	movlb	0	; () banked
 21410  0047E8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21411  0047EA  0E7B               	movlw	low _wrkbuf
 21412  0047EC  6F76               	movwf	?_sprintf& (0+255),b
 21413  0047EE  C09F  F078         	movff	_receivePrintEventVerbose$1377,?_sprintf+2
 21414  0047F2  C0A0  F079         	movff	_receivePrintEventVerbose$1377+1,?_sprintf+3
 21415  0047F6  C03C  F07A         	movff	_vscpNodeId,?_sprintf+4
 21416  0047FA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21417  0047FC  ECD7  F027         	call	_sprintf	;wreg free
 21418                           
 21419                           ; BSR set to: 0
 21420                           ;main.c: 1830: putsUSART(wrkbuf);
 21421  004800  0E01               	movlw	high _wrkbuf
 21422  004802  0100               	movlb	0	; () banked
 21423  004804  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21424  004806  0E7B               	movlw	low _wrkbuf
 21425  004808  6F61               	movwf	?_putsUSART& (0+255),b
 21426  00480A  EC33  F00D         	call	_putsUSART	;wreg free
 21427                           
 21428                           ;main.c: 1831: putsUSART((char *) ",size=");
 21429  00480E  0E7C               	movlw	high STR_165
 21430  004810  0100               	movlb	0	; () banked
 21431  004812  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21432  004814  0E29               	movlw	low STR_165
 21433  004816  6F61               	movwf	?_putsUSART& (0+255),b
 21434  004818  EC33  F00D         	call	_putsUSART	;wreg free
 21435                           
 21436                           ;main.c: 1832: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21437  00481C  0100               	movlb	0	; () banked
 21438  00481E  67E5               	tstfsz	_bHex& (0+255),b
 21439  004820  D004               	goto	l14984
 21440                           
 21441                           ; BSR set to: 0
 21442  004822  0E7C               	movlw	high STR_60
 21443  004824  6FA2               	movwf	(_receivePrintEventVerbose$1382+1)& (0+255),b
 21444  004826  0EED               	movlw	low STR_60
 21445  004828  D003               	goto	L36
 21446  00482A                     l14984:
 21447                           
 21448                           ; BSR set to: 0
 21449  00482A  0E7C               	movlw	high STR_59
 21450  00482C  6FA2               	movwf	(_receivePrintEventVerbose$1382+1)& (0+255),b
 21451  00482E  0E53               	movlw	low STR_59
 21452  004830                     L36:
 21453  004830  6FA1               	movwf	_receivePrintEventVerbose$1382& (0+255),b
 21454                           
 21455                           ; BSR set to: 0
 21456  004832  0E01               	movlw	high _wrkbuf
 21457  004834  0100               	movlb	0	; () banked
 21458  004836  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21459  004838  0E7B               	movlw	low _wrkbuf
 21460  00483A  6F76               	movwf	?_sprintf& (0+255),b
 21461  00483C  C0A1  F078         	movff	_receivePrintEventVerbose$1382,?_sprintf+2
 21462  004840  C0A2  F079         	movff	_receivePrintEventVerbose$1382+1,?_sprintf+3
 21463  004844  C03E  F07A         	movff	_vscpSize,?_sprintf+4
 21464  004848  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21465  00484A  ECD7  F027         	call	_sprintf	;wreg free
 21466                           
 21467                           ; BSR set to: 0
 21468                           ;main.c: 1833: putsUSART(wrkbuf);
 21469  00484E  0E01               	movlw	high _wrkbuf
 21470  004850  0100               	movlb	0	; () banked
 21471  004852  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21472  004854  0E7B               	movlw	low _wrkbuf
 21473  004856  6F61               	movwf	?_putsUSART& (0+255),b
 21474  004858  EC33  F00D         	call	_putsUSART	;wreg free
 21475                           
 21476                           ;main.c: 1834: if (vscpSize > 0) {
 21477  00485C  503E               	movf	_vscpSize,w,c
 21478  00485E  E04E               	bz	l15012
 21479                           
 21480                           ;main.c: 1835: putsUSART((char *) ",Data=");
 21481  004860  0E7C               	movlw	high STR_168
 21482  004862  0100               	movlb	0	; () banked
 21483  004864  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21484  004866  0E1B               	movlw	low STR_168
 21485  004868  6F61               	movwf	?_putsUSART& (0+255),b
 21486  00486A  EC33  F00D         	call	_putsUSART	;wreg free
 21487                           
 21488                           ;main.c: 1836: for (i = 0; i < vscpSize; i++) {
 21489  00486E  0100               	movlb	0	; () banked
 21490  004870  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21491  004872  D040               	goto	l15010
 21492  004874                     l946:
 21493                           
 21494                           ; BSR set to: 0
 21495                           ;main.c: 1838: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21496  004874  67E5               	tstfsz	_bHex& (0+255),b
 21497  004876  D004               	goto	l14998
 21498                           
 21499                           ; BSR set to: 0
 21500  004878  0E7C               	movlw	high STR_60
 21501  00487A  6FA4               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21502  00487C  0EED               	movlw	low STR_60
 21503  00487E  D003               	goto	L37
 21504  004880                     l14998:
 21505                           
 21506                           ; BSR set to: 0
 21507  004880  0E7C               	movlw	high STR_59
 21508  004882  6FA4               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21509  004884  0E53               	movlw	low STR_59
 21510  004886                     L37:
 21511  004886  6FA3               	movwf	_receivePrintEventVerbose$1387& (0+255),b
 21512                           
 21513                           ; BSR set to: 0
 21514  004888  0E01               	movlw	high _wrkbuf
 21515  00488A  0100               	movlb	0	; () banked
 21516  00488C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21517  00488E  0E7B               	movlw	low _wrkbuf
 21518  004890  6F76               	movwf	?_sprintf& (0+255),b
 21519  004892  C0A3  F078         	movff	_receivePrintEventVerbose$1387,?_sprintf+2
 21520  004896  C0A4  F079         	movff	_receivePrintEventVerbose$1387+1,?_sprintf+3
 21521  00489A  0EE3               	movlw	low _vscpData
 21522  00489C  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21523  00489E  6ED9               	movwf	fsr2l,c
 21524  0048A0  6ADA               	clrf	fsr2h,c
 21525  0048A2  0E01               	movlw	high _vscpData
 21526  0048A4  22DA               	addwfc	fsr2h,f,c
 21527  0048A6  50DF               	movf	indf2,w,c
 21528  0048A8  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21529  0048AA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21530  0048AC  ECD7  F027         	call	_sprintf	;wreg free
 21531                           
 21532                           ; BSR set to: 0
 21533                           ;main.c: 1839: putsUSART(wrkbuf);
 21534  0048B0  0E01               	movlw	high _wrkbuf
 21535  0048B2  0100               	movlb	0	; () banked
 21536  0048B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21537  0048B6  0E7B               	movlw	low _wrkbuf
 21538  0048B8  6F61               	movwf	?_putsUSART& (0+255),b
 21539  0048BA  EC33  F00D         	call	_putsUSART	;wreg free
 21540                           
 21541                           ;main.c: 1840: if (i < (vscpSize - 1)) {
 21542  0048BE  0EFF               	movlw	255
 21543  0048C0  243E               	addwf	_vscpSize,w,c
 21544  0048C2  0100               	movlb	0	; () banked
 21545  0048C4  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21546  0048C6  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21547  0048C8  0EFF               	movlw	255
 21548  0048CA  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21549  0048CC  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21550  0048CE  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21551  0048D0  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21552  0048D2  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21553  0048D4  0A80               	xorlw	128
 21554  0048D6  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21555  0048D8  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21556  0048DA  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21557  0048DC  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21558  0048DE  0A80               	xorlw	128
 21559  0048E0  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21560  0048E2  E206               	bc	l15008
 21561                           
 21562                           ; BSR set to: 0
 21563                           ;main.c: 1841: putsUSART((char *) ",");
 21564  0048E4  0E7C               	movlw	high STR_30
 21565  0048E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21566  0048E8  0EF4               	movlw	low STR_30
 21567  0048EA  6F61               	movwf	?_putsUSART& (0+255),b
 21568  0048EC  EC33  F00D         	call	_putsUSART	;wreg free
 21569  0048F0                     l15008:
 21570  0048F0  0100               	movlb	0	; () banked
 21571  0048F2  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21572  0048F4                     l15010:
 21573                           
 21574                           ; BSR set to: 0
 21575  0048F4  503E               	movf	_vscpSize,w,c
 21576  0048F6  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21577  0048F8  E208               	bc	l953
 21578  0048FA  D7BC               	goto	l946
 21579  0048FC                     l15012:
 21580                           
 21581                           ;main.c: 1845: putsUSART((char *) ",Data=none");
 21582  0048FC  0E7B               	movlw	high STR_172
 21583  0048FE  0100               	movlb	0	; () banked
 21584  004900  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21585  004902  0E6E               	movlw	low STR_172
 21586  004904  6F61               	movwf	?_putsUSART& (0+255),b
 21587  004906  EC33  F00D         	call	_putsUSART	;wreg free
 21588  00490A                     l953:
 21589                           
 21590                           ;main.c: 1846: }
 21591                           ;main.c: 1847: putsUSART((char *) ">\r\n");
 21592  00490A  0E7C               	movlw	high STR_173
 21593  00490C  0100               	movlb	0	; () banked
 21594  00490E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21595  004910  0ECD               	movlw	low STR_173
 21596  004912  6F61               	movwf	?_putsUSART& (0+255),b
 21597  004914  EC33  F00D         	call	_putsUSART	;wreg free
 21598                           
 21599                           ;main.c: 1848: return 1;
 21600  004918  0E01               	movlw	1
 21601  00491A  D001               	goto	l954
 21602  00491C                     l15018:
 21603                           
 21604                           ; BSR set to: 0
 21605                           ;main.c: 1849: }
 21606                           ;main.c: 1851: return 0;
 21607  00491C  0E00               	movlw	0
 21608  00491E                     l954:
 21609  00491E  0012               	return	
 21610  004920                     __end_of_receivePrintEventVerbose:
 21611                           	opt stack 0
 21612                           tblptru	equ	0xFF8
 21613                           tblptrh	equ	0xFF7
 21614                           tblptrl	equ	0xFF6
 21615                           tablat	equ	0xFF5
 21616                           prodh	equ	0xFF4
 21617                           prodl	equ	0xFF3
 21618                           intcon	equ	0xFF2
 21619                           indf0	equ	0xFEF
 21620                           postinc0	equ	0xFEE
 21621                           fsr0h	equ	0xFEA
 21622                           fsr0l	equ	0xFE9
 21623                           wreg	equ	0xFE8
 21624                           indf1	equ	0xFE7
 21625                           postinc1	equ	0xFE6
 21626                           postdec1	equ	0xFE5
 21627                           fsr1h	equ	0xFE2
 21628                           fsr1l	equ	0xFE1
 21629                           indf2	equ	0xFDF
 21630                           postinc2	equ	0xFDE
 21631                           postdec2	equ	0xFDD
 21632                           plusw2	equ	0xFDB
 21633                           fsr2h	equ	0xFDA
 21634                           fsr2l	equ	0xFD9
 21635                           status	equ	0xFD8
 21636                           
 21637 ;; *************** function _getVSCPFrame *****************
 21638 ;; Defined at:
 21639 ;;		line 3015 in file "main.c"
 21640 ;; Parameters:    Size  Location     Type
 21641 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21642 ;;		 -> vscpClass(2), 
 21643 ;;  pvscptype       1   19[BANK0 ] PTR unsigned char 
 21644 ;;		 -> vscpType(1), 
 21645 ;;  pNodeId         1   20[BANK0 ] PTR unsigned char 
 21646 ;;		 -> vscpNodeId(1), 
 21647 ;;  pPriority       1   21[BANK0 ] PTR unsigned char 
 21648 ;;		 -> vscpPriority(1), 
 21649 ;;  pSize           1   22[BANK0 ] PTR unsigned char 
 21650 ;;		 -> vscpSize(1), 
 21651 ;;  pData           2   23[BANK0 ] PTR unsigned char 
 21652 ;;		 -> vscpData(8), 
 21653 ;; Auto vars:     Size  Location     Type
 21654 ;;  pvscpclass      1   29[BANK0 ] PTR unsigned short 
 21655 ;;		 -> vscpClass(2), 
 21656 ;;  id              4   30[BANK0 ] unsigned long 
 21657 ;; Return value:  Size  Location     Type
 21658 ;;                  1    wreg      unsigned char 
 21659 ;; Registers used:
 21660 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21661 ;; Tracked objects:
 21662 ;;		On entry : F/0
 21663 ;;		On exit  : F/0
 21664 ;;		Unchanged: 0/0
 21665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21666 ;;      Params:         0       6       0       0       0       0       0
 21667 ;;      Locals:         0       5       0       0       0       0       0
 21668 ;;      Temps:          0       4       0       0       0       0       0
 21669 ;;      Totals:         0      15       0       0       0       0       0
 21670 ;;Total ram usage:       15 bytes
 21671 ;; Hardware stack levels used:    1
 21672 ;; Hardware stack levels required when called:    5
 21673 ;; This function calls:
 21674 ;;		_getCANFrame
 21675 ;; This function is called by:
 21676 ;;		_receivePrintEventVerbose
 21677 ;;		_readRegister
 21678 ;;		_readRegisterExtended
 21679 ;;		_writeRegisterExtended
 21680 ;; This function uses a non-reentrant model
 21681 ;;
 21682                           
 21683                           	psect	text53
 21684  002028                     __ptext53:
 21685                           	opt stack 0
 21686  002028                     _getVSCPFrame:
 21687                           	opt stack 21
 21688                           
 21689                           ;incstack = 0
 21690                           ;incstack = 0
 21691                           ;getVSCPFrame@pvscpclass stored from wreg
 21692  002028  CFE8 F07D          	movff	wreg,getVSCPFrame@pvscpclass
 21693                           
 21694                           ; BSR set to: 0
 21695                           ;main.c: 3016: uint32_t id;
 21696                           ;main.c: 3018: if (!getCANFrame(&id, pSize, pData)) {
 21697  00202C  C076  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21698  002030  0E0F               	movlw	15
 21699  002032  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 21700  002034  0E5F               	movlw	__accesstop+-1
 21701  002036  656E               	cpfsgt	?_getCANFrame& (0+255),b
 21702  002038  6B6F               	clrf	(?_getCANFrame+1)& (0+255),b
 21703  00203A  C077  F070         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21704  00203E  C078  F071         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21705  002042  0E7E               	movlw	getVSCPFrame@id& (0+255)
 21706  002044  ECC5  F012         	call	_getCANFrame
 21707  002048  0900               	iorlw	0
 21708  00204A  E102               	bnz	l16330
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;main.c: 3019: return 0;
 21712  00204C  0E00               	movlw	0
 21713  00204E  D02F               	goto	l1295
 21714  002050                     l16330:
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;main.c: 3020: }
 21718                           ;main.c: 3022: *pNodeId = id & 0x0ff;
 21719  002050  5174               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21720  002052  6ED9               	movwf	fsr2l,c
 21721  002054  6ADA               	clrf	fsr2h,c
 21722  002056  C07E  FFDF         	movff	getVSCPFrame@id,indf2
 21723                           
 21724                           ;main.c: 3023: *pvscptype = (id >> 8) & 0xff;
 21725  00205A  5173               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21726  00205C  6ED9               	movwf	fsr2l,c
 21727  00205E  6ADA               	clrf	fsr2h,c
 21728  002060  C07F  FFDF         	movff	getVSCPFrame@id+1,indf2
 21729                           
 21730                           ; BSR set to: 0
 21731                           ;main.c: 3024: *pvscpclass = (id >> 16) & 0x1ff;
 21732  002064  0100               	movlb	0	; () banked
 21733  002066  5180               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21734  002068  6F79               	movwf	??_getVSCPFrame& (0+255),b
 21735  00206A  0E01               	movlw	1
 21736  00206C  1581               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21737  00206E  6F7A               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21738  002070  517D               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21739  002072  6ED9               	movwf	fsr2l,c
 21740  002074  6ADA               	clrf	fsr2h,c
 21741  002076  C079  FFDE         	movff	??_getVSCPFrame,postinc2
 21742  00207A  C07A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21743                           
 21744                           ; BSR set to: 0
 21745                           ;main.c: 3025: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21746  00207E  5175               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21747  002080  6ED9               	movwf	fsr2l,c
 21748  002082  6ADA               	clrf	fsr2h,c
 21749  002084  C07E  F079         	movff	getVSCPFrame@id,??_getVSCPFrame
 21750  002088  C07F  F07A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21751  00208C  C080  F07B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21752  002090  C081  F07C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21753  002094  0E1B               	movlw	27
 21754  002096  D005               	goto	u22370
 21755  002098                     u22375:
 21756  002098  90D8               	bcf	status,0,c
 21757  00209A  337C               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21758  00209C  337B               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21759  00209E  337A               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21760  0020A0  3379               	rrcf	??_getVSCPFrame& (0+255),f,b
 21761  0020A2                     u22370:
 21762  0020A2  2EE8               	decfsz	wreg,f,c
 21763  0020A4  D7F9               	goto	u22375
 21764  0020A6  5179               	movf	??_getVSCPFrame& (0+255),w,b
 21765  0020A8  0B07               	andlw	7
 21766  0020AA  6EDF               	movwf	indf2,c
 21767                           
 21768                           ; BSR set to: 0
 21769                           ;main.c: 3027: return 1;
 21770  0020AC  0E01               	movlw	1
 21771  0020AE                     l1295:
 21772                           
 21773                           ; BSR set to: 0
 21774  0020AE  0012               	return	
 21775  0020B0                     __end_of_getVSCPFrame:
 21776                           	opt stack 0
 21777                           tblptru	equ	0xFF8
 21778                           tblptrh	equ	0xFF7
 21779                           tblptrl	equ	0xFF6
 21780                           tablat	equ	0xFF5
 21781                           prodh	equ	0xFF4
 21782                           prodl	equ	0xFF3
 21783                           intcon	equ	0xFF2
 21784                           indf0	equ	0xFEF
 21785                           postinc0	equ	0xFEE
 21786                           fsr0h	equ	0xFEA
 21787                           fsr0l	equ	0xFE9
 21788                           wreg	equ	0xFE8
 21789                           indf1	equ	0xFE7
 21790                           postinc1	equ	0xFE6
 21791                           postdec1	equ	0xFE5
 21792                           fsr1h	equ	0xFE2
 21793                           fsr1l	equ	0xFE1
 21794                           indf2	equ	0xFDF
 21795                           postinc2	equ	0xFDE
 21796                           postdec2	equ	0xFDD
 21797                           plusw2	equ	0xFDB
 21798                           fsr2h	equ	0xFDA
 21799                           fsr2l	equ	0xFD9
 21800                           status	equ	0xFD8
 21801                           
 21802 ;; *************** function _getCANFrame *****************
 21803 ;; Defined at:
 21804 ;;		line 3051 in file "main.c"
 21805 ;; Parameters:    Size  Location     Type
 21806 ;;  pid             1    wreg     PTR unsigned long 
 21807 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21808 ;;  pdlc            2   14[BANK0 ] PTR unsigned char 
 21809 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21810 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
 21811 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21812 ;; Auto vars:     Size  Location     Type
 21813 ;;  pid             1   18[BANK0 ] PTR unsigned long 
 21814 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21815 ;; Return value:  Size  Location     Type
 21816 ;;                  1    wreg      unsigned char 
 21817 ;; Registers used:
 21818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21819 ;; Tracked objects:
 21820 ;;		On entry : F/0
 21821 ;;		On exit  : F/0
 21822 ;;		Unchanged: 0/0
 21823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21824 ;;      Params:         0       4       0       0       0       0       0
 21825 ;;      Locals:         0       1       0       0       0       0       0
 21826 ;;      Temps:          0       0       0       0       0       0       0
 21827 ;;      Totals:         0       5       0       0       0       0       0
 21828 ;;Total ram usage:        5 bytes
 21829 ;; Hardware stack levels used:    1
 21830 ;; Hardware stack levels required when called:    4
 21831 ;; This function calls:
 21832 ;;		_fifo_read
 21833 ;; This function is called by:
 21834 ;;		_receiveSendEventCANAL
 21835 ;;		_receiveSendMultiEventCANAL
 21836 ;;		_receiveSendEventSLCAN
 21837 ;;		_getVSCPFrame
 21838 ;; This function uses a non-reentrant model
 21839 ;;
 21840                           
 21841                           	psect	text54
 21842  00258A                     __ptext54:
 21843                           	opt stack 0
 21844  00258A                     _getCANFrame:
 21845                           	opt stack 23
 21846                           
 21847                           ; BSR set to: 0
 21848                           ;incstack = 0
 21849                           ;incstack = 0
 21850                           ;getCANFrame@pid stored from wreg
 21851  00258A  CFE8 F072          	movff	wreg,getCANFrame@pid
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;main.c: 3072: if ( fifo_canrxcount ) {
 21855  00258E  5030               	movf	_fifo_canrxcount,w,c	;volatile
 21856  002590  E013               	bz	l16348
 21857                           
 21858                           ; BSR set to: 0
 21859                           ;main.c: 3075: (INTCONbits.GIE = 0);
 21860  002592  9EF2               	bcf	intcon,7,c	;volatile
 21861                           
 21862                           ; BSR set to: 0
 21863                           ;main.c: 3076: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21864  002594  0E01               	movlw	high _canInputFifo
 21865  002596  0100               	movlb	0	; () banked
 21866  002598  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21867  00259A  0ECB               	movlw	low _canInputFifo
 21868  00259C  6F60               	movwf	?_fifo_read& (0+255),b
 21869  00259E  C072  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21870  0025A2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21871  0025A4  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21872  0025A6  0E04               	movlw	4
 21873  0025A8  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21874  0025AA  EC4B  F015         	call	_fifo_read	;wreg free
 21875  0025AE  5160               	movf	?_fifo_read& (0+255),w,b
 21876  0025B0  0A04               	xorlw	4
 21877  0025B2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21878  0025B4  E003               	bz	l16352
 21879  0025B6                     l16346:
 21880                           
 21881                           ; BSR set to: 0
 21882                           ;main.c: 3077: (INTCONbits.GIE = 1);
 21883  0025B6  8EF2               	bsf	intcon,7,c	;volatile
 21884  0025B8                     l16348:
 21885                           
 21886                           ; BSR set to: 0
 21887                           ;main.c: 3078: return 0;
 21888  0025B8  0E00               	movlw	0
 21889  0025BA  D03A               	goto	l1304
 21890  0025BC                     l16352:
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;main.c: 3079: }
 21894                           ;main.c: 3082: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21895  0025BC  0E01               	movlw	high _canInputFifo
 21896  0025BE  0100               	movlb	0	; () banked
 21897  0025C0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21898  0025C2  0ECB               	movlw	low _canInputFifo
 21899  0025C4  6F60               	movwf	?_fifo_read& (0+255),b
 21900  0025C6  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21901  0025CA  C06F  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 21902  0025CE  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21903  0025D0  0E01               	movlw	1
 21904  0025D2  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21905  0025D4  EC4B  F015         	call	_fifo_read	;wreg free
 21906  0025D8  0560               	decf	?_fifo_read& (0+255),w,b
 21907  0025DA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21908  0025DC  E1EC               	bnz	l16346
 21909                           
 21910                           ; BSR set to: 0
 21911                           ;main.c: 3085: }
 21912                           ;main.c: 3088: if ( *pdlc > 8 ) {
 21913  0025DE  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21914  0025E2  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21915  0025E6  0E08               	movlw	8
 21916  0025E8  64DF               	cpfsgt	indf2,c
 21917  0025EA  D005               	goto	l16364
 21918                           
 21919                           ; BSR set to: 0
 21920                           ;main.c: 3089: *pdlc = 0;
 21921  0025EC  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21922  0025F0  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21923  0025F4  6ADF               	clrf	indf2,c
 21924  0025F6                     l16364:
 21925                           
 21926                           ; BSR set to: 0
 21927                           ;main.c: 3090: }
 21928                           ;main.c: 3093: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21929  0025F6  0E01               	movlw	high _canInputFifo
 21930  0025F8  0100               	movlb	0	; () banked
 21931  0025FA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21932  0025FC  0ECB               	movlw	low _canInputFifo
 21933  0025FE  6F60               	movwf	?_fifo_read& (0+255),b
 21934  002600  C070  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21935  002604  C071  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21936  002608  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21937  00260C  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21938  002610  50DF               	movf	indf2,w,c
 21939  002612  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21940  002614  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21941  002616  EC4B  F015         	call	_fifo_read	;wreg free
 21942  00261A  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21943  00261E  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21944  002622  50DF               	movf	indf2,w,c
 21945  002624  1960               	xorwf	?_fifo_read& (0+255),w,b
 21946  002626  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21947  002628  E1C6               	bnz	l16346
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;main.c: 3096: }
 21951                           ;main.c: 3098: fifo_canrxcount--;
 21952  00262A  0630               	decf	_fifo_canrxcount,f,c	;volatile
 21953                           
 21954                           ; BSR set to: 0
 21955                           ;main.c: 3100: (INTCONbits.GIE = 1);
 21956  00262C  8EF2               	bsf	intcon,7,c	;volatile
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;main.c: 3102: return 1;
 21960  00262E  0E01               	movlw	1
 21961  002630                     l1304:
 21962                           
 21963                           ; BSR set to: 0
 21964  002630  0012               	return	
 21965  002632                     __end_of_getCANFrame:
 21966                           	opt stack 0
 21967                           tblptru	equ	0xFF8
 21968                           tblptrh	equ	0xFF7
 21969                           tblptrl	equ	0xFF6
 21970                           tablat	equ	0xFF5
 21971                           prodh	equ	0xFF4
 21972                           prodl	equ	0xFF3
 21973                           intcon	equ	0xFF2
 21974                           indf0	equ	0xFEF
 21975                           postinc0	equ	0xFEE
 21976                           fsr0h	equ	0xFEA
 21977                           fsr0l	equ	0xFE9
 21978                           wreg	equ	0xFE8
 21979                           indf1	equ	0xFE7
 21980                           postinc1	equ	0xFE6
 21981                           postdec1	equ	0xFE5
 21982                           fsr1h	equ	0xFE2
 21983                           fsr1l	equ	0xFE1
 21984                           indf2	equ	0xFDF
 21985                           postinc2	equ	0xFDE
 21986                           postdec2	equ	0xFDD
 21987                           plusw2	equ	0xFDB
 21988                           fsr2h	equ	0xFDA
 21989                           fsr2l	equ	0xFD9
 21990                           status	equ	0xFD8
 21991                           
 21992 ;; *************** function _fifo_read *****************
 21993 ;; Defined at:
 21994 ;;		line 29 in file "fifo.c"
 21995 ;; Parameters:    Size  Location     Type
 21996 ;;  f               2    0[BANK0 ] PTR struct .
 21997 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21998 ;;  buf             2    2[BANK0 ] PTR const void 
 21999 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 22000 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 22001 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 22002 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 22003 ;;  nbytes          2    4[BANK0 ] unsigned short 
 22004 ;; Auto vars:     Size  Location     Type
 22005 ;;  i               2   12[BANK0 ] unsigned short 
 22006 ;;  p               2   10[BANK0 ] PTR unsigned char 
 22007 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 22008 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 22009 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 22010 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 22011 ;; Return value:  Size  Location     Type
 22012 ;;                  2    0[BANK0 ] unsigned short 
 22013 ;; Registers used:
 22014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 22015 ;; Tracked objects:
 22016 ;;		On entry : F/0
 22017 ;;		On exit  : F/0
 22018 ;;		Unchanged: 0/0
 22019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22020 ;;      Params:         0       6       0       0       0       0       0
 22021 ;;      Locals:         0       4       0       0       0       0       0
 22022 ;;      Temps:          0       4       0       0       0       0       0
 22023 ;;      Totals:         0      14       0       0       0       0       0
 22024 ;;Total ram usage:       14 bytes
 22025 ;; Hardware stack levels used:    1
 22026 ;; Hardware stack levels required when called:    3
 22027 ;; This function calls:
 22028 ;;		Nothing
 22029 ;; This function is called by:
 22030 ;;		_main
 22031 ;;		_doModeVerbose
 22032 ;;		_doModeVscp
 22033 ;;		_doModeSLCAN
 22034 ;;		_getCANFrame
 22035 ;; This function uses a non-reentrant model
 22036 ;;
 22037                           
 22038                           	psect	text55
 22039  002A96                     __ptext55:
 22040                           	opt stack 0
 22041  002A96                     _fifo_read:
 22042                           	opt stack 23
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;fifo.c: 30: uint16_t i;
 22046                           ;fifo.c: 31: uint8_t *p;
 22047                           ;fifo.c: 32: p = buf;
 22048                           
 22049                           ; BSR set to: 0
 22050                           ;incstack = 0
 22051                           ;incstack = 0
 22052  002A96  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 22053  002A9A  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 22054                           
 22055                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22056  002A9E  6B6C               	clrf	fifo_read@i& (0+255),b
 22057  002AA0  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 22058  002AA2  D04A               	goto	l10336
 22059  002AA4                     l10322:
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;fifo.c: 36: if ( f->tail != f->head ) {
 22063  002AA4  EE20 F002          	lfsr	2,2
 22064  002AA8  D851               	call	PL34	;call to abstracted procedure
 22065  002AAA  18E5               	xorwf	postdec1,w,c
 22066  002AAC  CFDF FFE8          	movff	indf2,wreg
 22067  002AB0  B4D8               	btfsc	status,2,c
 22068  002AB2  18E7               	xorwf	indf1,w,c
 22069  002AB4  E03A               	bz	l1555
 22070                           
 22071                           ; BSR set to: 0
 22072                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22073  002AB6  EE20 F004          	lfsr	2,4
 22074  002ABA  5160               	movf	fifo_read@f& (0+255),w,b
 22075  002ABC  26D9               	addwf	fsr2l,f,c
 22076  002ABE  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22077  002AC0  22DA               	addwfc	fsr2h,f,c
 22078  002AC2  CFDE F066          	movff	postinc2,??_fifo_read
 22079  002AC6  CFDD F067          	movff	postdec2,??_fifo_read+1
 22080  002ACA  C060  FFD9         	movff	fifo_read@f,fsr2l
 22081  002ACE  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 22082  002AD2  CFDE F068          	movff	postinc2,??_fifo_read+2
 22083  002AD6  CFDD F069          	movff	postdec2,??_fifo_read+3
 22084  002ADA  5166               	movf	??_fifo_read& (0+255),w,b
 22085  002ADC  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 22086  002ADE  6ED9               	movwf	fsr2l,c
 22087  002AE0  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 22088  002AE2  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 22089  002AE4  6EDA               	movwf	fsr2h,c
 22090  002AE6  C06A  FFE1         	movff	fifo_read@p,fsr1l
 22091  002AEA  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 22092  002AEE  CFDF FFE7          	movff	indf2,indf1
 22093                           
 22094                           ; BSR set to: 0
 22095  002AF2  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 22096  002AF4  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;fifo.c: 38: f->tail++;
 22100  002AF6  EE20 F004          	lfsr	2,4
 22101  002AFA  5160               	movf	fifo_read@f& (0+255),w,b
 22102  002AFC  26D9               	addwf	fsr2l,f,c
 22103  002AFE  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22104  002B00  22DA               	addwfc	fsr2h,f,c
 22105  002B02  2ADE               	incf	postinc2,f,c
 22106  002B04  0E00               	movlw	0
 22107  002B06  22DD               	addwfc	postdec2,f,c
 22108                           
 22109                           ; BSR set to: 0
 22110                           ;fifo.c: 39: if (f->tail >= f->size) {
 22111  002B08  EE20 F006          	lfsr	2,6
 22112  002B0C  D81F               	call	PL34	;call to abstracted procedure
 22113  002B0E  5CE5               	subwf	postdec1,w,c
 22114  002B10  E102               	bnz	u12605
 22115  002B12  50DF               	movf	indf2,w,c
 22116  002B14  5CE7               	subwf	indf1,w,c
 22117  002B16                     u12605:
 22118  002B16  E30E               	bnc	l10334
 22119                           
 22120                           ; BSR set to: 0
 22121                           ;fifo.c: 40: f->tail = 0;
 22122  002B18  EE20 F004          	lfsr	2,4
 22123  002B1C  5160               	movf	fifo_read@f& (0+255),w,b
 22124  002B1E  26D9               	addwf	fsr2l,f,c
 22125  002B20  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22126  002B22  22DA               	addwfc	fsr2h,f,c
 22127  002B24  6ADE               	clrf	postinc2,c
 22128  002B26  6ADD               	clrf	postdec2,c
 22129  002B28  D005               	goto	l10334
 22130  002B2A                     l1555:
 22131                           
 22132                           ; BSR set to: 0
 22133                           ;fifo.c: 43: else {
 22134                           ;fifo.c: 44: return i;
 22135  002B2A  C06C  F060         	movff	fifo_read@i,?_fifo_read
 22136  002B2E  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22137  002B32  D00B               	goto	l1558
 22138  002B34                     l10334:
 22139                           
 22140                           ; BSR set to: 0
 22141  002B34  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 22142  002B36  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 22143  002B38                     l10336:
 22144                           
 22145                           ; BSR set to: 0
 22146  002B38  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22147  002B3A  5D6C               	subwf	fifo_read@i& (0+255),w,b
 22148  002B3C  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22149  002B3E  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22150  002B40  E3B1               	bnc	l10322
 22151                           
 22152                           ; BSR set to: 0
 22153                           ;fifo.c: 45: }
 22154                           ;fifo.c: 47: }
 22155                           ;fifo.c: 49: return nbytes;
 22156  002B42  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22157  002B46  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22158  002B4A                     l1558:
 22159                           
 22160                           ; BSR set to: 0
 22161  002B4A  0012               	return	
 22162  002B4C                     __end_of_fifo_read:
 22163                           	opt stack 0
 22164  002B4C                     PL34:
 22165                           	opt stack 23
 22166  002B4C  5160               	movf	fifo_read@f& (0+255),w,b
 22167  002B4E  26D9               	addwf	fsr2l,f,c
 22168  002B50  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22169  002B52  22DA               	addwfc	fsr2h,f,c
 22170  002B54  EE10 F004          	lfsr	1,4
 22171  002B58  5160               	movf	fifo_read@f& (0+255),w,b
 22172  002B5A  26E1               	addwf	fsr1l,f,c
 22173  002B5C  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22174  002B5E  22E2               	addwfc	fsr1h,f,c
 22175  002B60  52E6               	movf	postinc1,f,c
 22176  002B62  52DE               	movf	postinc2,f,c
 22177  002B64  50DD               	movf	postdec2,w,c
 22178  002B66  0012               	return	
 22179  002B68                     __end_ofPL34:
 22180                           	opt stack 0
 22181                           tblptru	equ	0xFF8
 22182                           tblptrh	equ	0xFF7
 22183                           tblptrl	equ	0xFF6
 22184                           tablat	equ	0xFF5
 22185                           prodh	equ	0xFF4
 22186                           prodl	equ	0xFF3
 22187                           intcon	equ	0xFF2
 22188                           indf0	equ	0xFEF
 22189                           postinc0	equ	0xFEE
 22190                           fsr0h	equ	0xFEA
 22191                           fsr0l	equ	0xFE9
 22192                           wreg	equ	0xFE8
 22193                           indf1	equ	0xFE7
 22194                           postinc1	equ	0xFE6
 22195                           postdec1	equ	0xFE5
 22196                           fsr1h	equ	0xFE2
 22197                           fsr1l	equ	0xFE1
 22198                           indf2	equ	0xFDF
 22199                           postinc2	equ	0xFDE
 22200                           postdec2	equ	0xFDD
 22201                           plusw2	equ	0xFDB
 22202                           fsr2h	equ	0xFDA
 22203                           fsr2l	equ	0xFD9
 22204                           status	equ	0xFD8
 22205                           
 22206 ;; *************** function _sprintf *****************
 22207 ;; Defined at:
 22208 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22209 ;; Parameters:    Size  Location     Type
 22210 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 22211 ;;		 -> wrkbuf(80), 
 22212 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 22213 ;;		 -> STR_215(3), STR_214(7), STR_208(3), STR_207(7), 
 22214 ;;		 -> STR_204(4), STR_203(8), STR_200(4), STR_199(8), 
 22215 ;;		 -> STR_196(4), STR_195(8), STR_192(4), STR_191(8), 
 22216 ;;		 -> STR_188(4), STR_187(7), STR_184(4), STR_183(7), 
 22217 ;;		 -> STR_180(4), STR_179(7), STR_176(4), STR_175(7), 
 22218 ;;		 -> STR_170(3), STR_169(7), STR_167(3), STR_166(7), 
 22219 ;;		 -> STR_164(3), STR_163(7), STR_161(3), STR_160(7), 
 22220 ;;		 -> STR_158(3), STR_157(7), STR_155(3), STR_154(7), 
 22221 ;;		 -> STR_98(3), STR_97(7), STR_94(4), STR_93(8), 
 22222 ;;		 -> STR_90(4), STR_89(8), STR_76(3), STR_75(7), 
 22223 ;;		 -> STR_74(3), STR_73(7), STR_71(6), STR_70(10), 
 22224 ;;		 -> STR_65(3), STR_64(7), STR_62(3), STR_61(7), 
 22225 ;;		 -> STR_60(3), STR_59(7), STR_57(6), STR_56(10), 
 22226 ;; Auto vars:     Size  Location     Type
 22227 ;;  idx             1   33[BANK0 ] unsigned char 
 22228 ;;  _val            4   45[BANK0 ] struct .
 22229 ;;  flag            2   50[BANK0 ] unsigned short 
 22230 ;;  width           2   43[BANK0 ] int 
 22231 ;;  prec            2   41[BANK0 ] int 
 22232 ;;  c               1   49[BANK0 ] char 
 22233 ;;  ap              1   40[BANK0 ] PTR void [1]
 22234 ;;		 -> ?_sprintf(2), 
 22235 ;; Return value:  Size  Location     Type
 22236 ;;                  2   22[BANK0 ] int 
 22237 ;; Registers used:
 22238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22239 ;; Tracked objects:
 22240 ;;		On entry : F/0
 22241 ;;		On exit  : F/0
 22242 ;;		Unchanged: 0/0
 22243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22244 ;;      Params:         0       8       0       0       0       0       0
 22245 ;;      Locals:         0      19       0       0       0       0       0
 22246 ;;      Temps:          0       3       0       0       0       0       0
 22247 ;;      Totals:         0      30       0       0       0       0       0
 22248 ;;Total ram usage:       30 bytes
 22249 ;; Hardware stack levels used:    1
 22250 ;; Hardware stack levels required when called:    4
 22251 ;; This function calls:
 22252 ;;		_isdigit
 22253 ;;		___lldiv
 22254 ;;		___llmod
 22255 ;;		___wmul
 22256 ;; This function is called by:
 22257 ;;		_doModeVerbose
 22258 ;;		_receivePrintEventVerbose
 22259 ;;		_printStatistics
 22260 ;;		_printErrors
 22261 ;; This function uses a non-reentrant model
 22262 ;;
 22263                           
 22264                           	psect	text56
 22265  004FAE                     __ptext56:
 22266                           	opt stack 0
 22267  004FAE                     _sprintf:
 22268                           	opt stack 24
 22269                           
 22270                           ; BSR set to: 0
 22271                           ;doprnt.c: 494: va_list ap;
 22272                           ;doprnt.c: 499: signed char c;
 22273                           ;doprnt.c: 501: int width;
 22274                           ;doprnt.c: 504: int prec;
 22275                           ;doprnt.c: 508: unsigned short flag;
 22276                           ;doprnt.c: 527: union {
 22277                           ;doprnt.c: 528: unsigned long _val;
 22278                           ;doprnt.c: 529: struct {
 22279                           ;doprnt.c: 530: const char * _cp;
 22280                           ;doprnt.c: 531: unsigned _len;
 22281                           ;doprnt.c: 532: } _str;
 22282                           ;doprnt.c: 533: } _val;
 22283                           ;doprnt.c: 542: *ap = __va_start();
 22284                           
 22285                           ; BSR set to: 0
 22286                           ;incstack = 0
 22287                           ;incstack = 0
 22288  004FAE  0E7A               	movlw	low (?_sprintf+4)
 22289  004FB0  6F88               	movwf	sprintf@ap& (0+255),b
 22290                           
 22291                           ;doprnt.c: 545: while(c = *f++) {
 22292  004FB2  D32C               	goto	l15710
 22293  004FB4                     l15376:
 22294                           
 22295                           ; BSR set to: 0
 22296                           ;doprnt.c: 547: if(c != '%')
 22297  004FB4  5191               	movf	sprintf@c& (0+255),w,b
 22298  004FB6  0A25               	xorlw	37
 22299  004FB8  E009               	bz	l1642
 22300                           
 22301                           ; BSR set to: 0
 22302                           ;doprnt.c: 549: {
 22303                           ;doprnt.c: 550: ((*sp++ = (c)));
 22304  004FBA  C076  FFD9         	movff	sprintf@sp,fsr2l
 22305  004FBE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22306  004FC2  C091  FFDF         	movff	sprintf@c,indf2
 22307                           
 22308                           ; BSR set to: 0
 22309  004FC6  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22310  004FC8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22311                           
 22312                           ;doprnt.c: 551: continue;
 22313  004FCA  D320               	goto	l15710
 22314  004FCC                     l1642:
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;doprnt.c: 552: }
 22318                           ;doprnt.c: 555: width = 0;
 22319  004FCC  6B8B               	clrf	sprintf@width& (0+255),b
 22320  004FCE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22321                           
 22322                           ;doprnt.c: 557: flag = 0;
 22323  004FD0  6B92               	clrf	sprintf@flag& (0+255),b
 22324  004FD2  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22325  004FD4  D009               	goto	l15392
 22326  004FD6                     l15382:
 22327                           
 22328                           ; BSR set to: 0
 22329                           ;doprnt.c: 563: flag |= 0x08;
 22330  004FD6  8792               	bsf	sprintf@flag& (0+255),3,b
 22331  004FD8  D005               	goto	L38
 22332  004FDA                     l15384:
 22333                           
 22334                           ; BSR set to: 0
 22335                           ;doprnt.c: 570: flag |= 0x01;
 22336  004FDA  8192               	bsf	sprintf@flag& (0+255),0,b
 22337  004FDC  D003               	goto	L38
 22338  004FDE                     l15386:
 22339                           
 22340                           ; BSR set to: 0
 22341                           ;doprnt.c: 583: flag |= 0x800;
 22342  004FDE  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22343  004FE0  D001               	goto	L38
 22344  004FE2                     l15388:
 22345                           
 22346                           ; BSR set to: 0
 22347                           ;doprnt.c: 589: flag |= 0x04;
 22348  004FE2  8592               	bsf	sprintf@flag& (0+255),2,b
 22349  004FE4                     L38:
 22350                           
 22351                           ;doprnt.c: 590: f++;
 22352  004FE4  4B78               	infsnz	sprintf@f& (0+255),f,b
 22353  004FE6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22354  004FE8                     l15392:
 22355                           
 22356                           ; BSR set to: 0
 22357  004FE8  C078  FFF6         	movff	sprintf@f,tblptrl
 22358  004FEC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22359  004FF0  0008               	tblrd		*
 22360  004FF2  50F5               	movf	tablat,w,c
 22361                           
 22362                           ; Switch size 1, requested type "space"
 22363                           ; Number of cases is 4, Range of values is 32 to 48
 22364                           ; switch strategies available:
 22365                           ; Name         Instructions Cycles
 22366                           ; simple_byte           13     7 (average)
 22367                           ;	Chosen strategy is simple_byte
 22368  004FF4  0A20               	xorlw	32	; case 32
 22369  004FF6  E0F1               	bz	l15384
 22370  004FF8  0A03               	xorlw	3	; case 35
 22371  004FFA  E0F1               	bz	l15386
 22372  004FFC  0A0E               	xorlw	14	; case 45
 22373  004FFE  E0EB               	bz	l15382
 22374  005000  0A1D               	xorlw	29	; case 48
 22375  005002  E0EF               	bz	l15388
 22376                           
 22377                           ; BSR set to: 0
 22378                           ;doprnt.c: 602: if(flag & 0x08)
 22379  005004  B792               	btfsc	sprintf@flag& (0+255),3,b
 22380                           
 22381                           ; BSR set to: 0
 22382                           ;doprnt.c: 603: flag &= ~0x04;
 22383  005006  9592               	bcf	sprintf@flag& (0+255),2,b
 22384                           
 22385                           ; BSR set to: 0
 22386                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22387  005008  C078  FFF6         	movff	sprintf@f,tblptrl
 22388  00500C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22389  005010  0008               	tblrd		*
 22390  005012  50F5               	movf	tablat,w,c
 22391  005014  ECBE  F00A         	call	_isdigit
 22392  005018  E325               	bnc	l15408
 22393                           
 22394                           ; BSR set to: 0
 22395                           ;doprnt.c: 607: width = 0;
 22396  00501A  6B8B               	clrf	sprintf@width& (0+255),b
 22397  00501C  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22398  00501E                     l15400:
 22399                           
 22400                           ; BSR set to: 0
 22401                           ;doprnt.c: 609: width *= 10;
 22402  00501E  C08B  F060         	movff	sprintf@width,?___wmul
 22403  005022  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22404  005026  6B63               	clrf	(?___wmul+3)& (0+255),b
 22405  005028  0E0A               	movlw	10
 22406  00502A  6F62               	movwf	(?___wmul+2)& (0+255),b
 22407  00502C  EC13  F00B         	call	___wmul	;wreg free
 22408  005030  C060  F08B         	movff	?___wmul,sprintf@width
 22409  005034  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;doprnt.c: 610: width += *f++ - '0';
 22413  005038  C078  FFF6         	movff	sprintf@f,tblptrl
 22414  00503C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22415  005040  0008               	tblrd		*
 22416  005042  CFF5 F07E          	movff	tablat,??_sprintf
 22417  005046  0ED0               	movlw	208
 22418  005048  257E               	addwf	??_sprintf& (0+255),w,b
 22419  00504A  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22420  00504C  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22421  00504E  0EFF               	movlw	255
 22422  005050  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22423  005052  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22424  005054  278B               	addwf	sprintf@width& (0+255),f,b
 22425  005056  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22426  005058  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22427                           
 22428                           ; BSR set to: 0
 22429                           
 22430                           ; BSR set to: 0
 22431                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22432  00505A  DB36               	call	PL78	;call to abstracted procedure
 22433  00505C  ECBE  F00A         	call	_isdigit
 22434  005060  E314               	bnc	l15416
 22435  005062  D7DD               	goto	l15400
 22436  005064                     l15408:
 22437                           
 22438                           ; BSR set to: 0
 22439  005064  C078  FFF6         	movff	sprintf@f,tblptrl
 22440  005068  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22441  00506C  0008               	tblrd		*
 22442  00506E  50F5               	movf	tablat,w,c
 22443  005070  0A2A               	xorlw	42
 22444  005072  E10B               	bnz	l15416
 22445                           
 22446                           ; BSR set to: 0
 22447                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22448  005074  5188               	movf	sprintf@ap& (0+255),w,b
 22449  005076  6ED9               	movwf	fsr2l,c
 22450  005078  6ADA               	clrf	fsr2h,c
 22451  00507A  CFDE F08B          	movff	postinc2,sprintf@width
 22452  00507E  CFDD F08C          	movff	postdec2,sprintf@width+1
 22453                           
 22454                           ; BSR set to: 0
 22455  005082  0E02               	movlw	2
 22456  005084  2788               	addwf	sprintf@ap& (0+255),f,b
 22457                           
 22458                           ; BSR set to: 0
 22459                           ;doprnt.c: 615: f++;
 22460  005086  4B78               	infsnz	sprintf@f& (0+255),f,b
 22461  005088  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22462  00508A                     l15416:
 22463                           
 22464                           ; BSR set to: 0
 22465                           ;doprnt.c: 617: }
 22466                           ;doprnt.c: 620: if(*f == '.') {
 22467  00508A  C078  FFF6         	movff	sprintf@f,tblptrl
 22468  00508E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22469  005092  0008               	tblrd		*
 22470  005094  50F5               	movf	tablat,w,c
 22471  005096  0A2E               	xorlw	46
 22472  005098  E137               	bnz	l1658
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;doprnt.c: 621: flag |= 0x4000;
 22476  00509A  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22477                           
 22478                           ;doprnt.c: 622: f++;
 22479                           
 22480                           ; BSR set to: 0
 22481                           ;doprnt.c: 624: if(*f == '*') {
 22482  00509C  DB15               	call	PL78	;call to abstracted procedure
 22483  00509E  0A2A               	xorlw	42
 22484  0050A0  E10C               	bnz	l1659
 22485                           
 22486                           ; BSR set to: 0
 22487                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22488  0050A2  5188               	movf	sprintf@ap& (0+255),w,b
 22489  0050A4  6ED9               	movwf	fsr2l,c
 22490  0050A6  6ADA               	clrf	fsr2h,c
 22491  0050A8  CFDE F089          	movff	postinc2,sprintf@prec
 22492  0050AC  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22493                           
 22494                           ; BSR set to: 0
 22495  0050B0  0E02               	movlw	2
 22496  0050B2  2788               	addwf	sprintf@ap& (0+255),f,b
 22497                           
 22498                           ; BSR set to: 0
 22499                           ;doprnt.c: 626: f++;
 22500  0050B4  4B78               	infsnz	sprintf@f& (0+255),f,b
 22501  0050B6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22502                           
 22503                           ;doprnt.c: 627: } else
 22504  0050B8  D088               	goto	l15486
 22505  0050BA                     l1659:
 22506                           
 22507                           ; BSR set to: 0
 22508                           ;doprnt.c: 629: {
 22509                           ;doprnt.c: 630: prec = 0;
 22510  0050BA  6B89               	clrf	sprintf@prec& (0+255),b
 22511  0050BC  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22512                           
 22513                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22514  0050BE  D01A               	goto	l15432
 22515  0050C0                     l15428:
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22519  0050C0  C089  F060         	movff	sprintf@prec,?___wmul
 22520  0050C4  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22521  0050C8  6B63               	clrf	(?___wmul+3)& (0+255),b
 22522  0050CA  0E0A               	movlw	10
 22523  0050CC  6F62               	movwf	(?___wmul+2)& (0+255),b
 22524  0050CE  EC13  F00B         	call	___wmul	;wreg free
 22525  0050D2  C078  FFF6         	movff	sprintf@f,tblptrl
 22526  0050D6  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22527  0050DA  0008               	tblrd		*
 22528  0050DC  50F5               	movf	tablat,w,c
 22529  0050DE  2760               	addwf	?___wmul& (0+255),f,b
 22530  0050E0  0E00               	movlw	0
 22531  0050E2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22532  0050E4  0ED0               	movlw	208
 22533  0050E6  2560               	addwf	?___wmul& (0+255),w,b
 22534  0050E8  6F89               	movwf	sprintf@prec& (0+255),b
 22535  0050EA  0EFF               	movlw	255
 22536  0050EC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22537  0050EE  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22538                           
 22539                           ; BSR set to: 0
 22540  0050F0  4B78               	infsnz	sprintf@f& (0+255),f,b
 22541  0050F2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22542  0050F4                     l15432:
 22543                           
 22544                           ; BSR set to: 0
 22545  0050F4  C078  FFF6         	movff	sprintf@f,tblptrl
 22546  0050F8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22547  0050FC  0008               	tblrd		*
 22548  0050FE  50F5               	movf	tablat,w,c
 22549  005100  ECBE  F00A         	call	_isdigit
 22550  005104  E362               	bnc	l15486
 22551  005106  D7DC               	goto	l15428
 22552  005108                     l1658:
 22553                           
 22554                           ; BSR set to: 0
 22555                           ;doprnt.c: 635: prec = 0;
 22556  005108  6B89               	clrf	sprintf@prec& (0+255),b
 22557  00510A  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22558  00510C  D05E               	goto	l15486
 22559  00510E                     l15434:
 22560                           
 22561                           ; BSR set to: 0
 22562                           ;doprnt.c: 652: flag |= 0x10;
 22563  00510E  8992               	bsf	sprintf@flag& (0+255),4,b
 22564                           
 22565                           ;doprnt.c: 653: goto loop;
 22566  005110  D05C               	goto	l15486
 22567  005112                     l15436:
 22568                           
 22569                           ; BSR set to: 0
 22570                           ;doprnt.c: 700: flag |= 0x40;
 22571  005112  8D92               	bsf	sprintf@flag& (0+255),6,b
 22572                           
 22573                           ;doprnt.c: 702: break;
 22574  005114  D06F               	goto	l15488
 22575  005116                     l15438:
 22576                           
 22577                           ; BSR set to: 0
 22578                           ;doprnt.c: 723: flag |= 0x20;
 22579  005116  8B92               	bsf	sprintf@flag& (0+255),5,b
 22580  005118                     l1675:
 22581                           
 22582                           ; BSR set to: 0
 22583                           ;doprnt.c: 730: flag |= 0x80;
 22584  005118  8F92               	bsf	sprintf@flag& (0+255),7,b
 22585                           
 22586                           ;doprnt.c: 732: break;
 22587  00511A  D06C               	goto	l15488
 22588  00511C                     l15440:
 22589                           
 22590                           ; BSR set to: 0
 22591                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22592  00511C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22593  00511E  1189               	iorwf	sprintf@prec& (0+255),w,b
 22594  005120  E009               	bz	l15446
 22595                           
 22596                           ; BSR set to: 0
 22597  005122  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22598  005124  5D89               	subwf	sprintf@prec& (0+255),w,b
 22599  005126  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22600  005128  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22601  00512A  E204               	bc	l15446
 22602                           
 22603                           ; BSR set to: 0
 22604                           ;doprnt.c: 763: _val._str._len = prec;
 22605  00512C  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22606  005130  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22607  005134                     l15446:
 22608                           
 22609                           ; BSR set to: 0
 22610                           ;doprnt.c: 766: if(width > _val._str._len)
 22611  005134  518B               	movf	sprintf@width& (0+255),w,b
 22612  005136  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22613  005138  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22614  00513A  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22615  00513C  E207               	bc	l1678
 22616                           
 22617                           ; BSR set to: 0
 22618                           ;doprnt.c: 767: width -= _val._str._len;
 22619  00513E  EE20  F08E         	lfsr	2,sprintf@_val+1
 22620  005142  50DE               	movf	postinc2,w,c
 22621  005144  5F8B               	subwf	sprintf@width& (0+255),f,b
 22622  005146  50DD               	movf	postdec2,w,c
 22623  005148  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22624  00514A  D002               	goto	l1679
 22625  00514C                     l1678:
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;doprnt.c: 768: else
 22629                           ;doprnt.c: 769: width = 0;
 22630  00514C  6B8B               	clrf	sprintf@width& (0+255),b
 22631  00514E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22632  005150                     l1679:
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;doprnt.c: 771: if(!(flag & 0x08))
 22636  005150  A792               	btfss	sprintf@flag& (0+255),3,b
 22637  005152  D004               	goto	l15456
 22638  005154  D015               	goto	l15464
 22639  005156                     l15452:
 22640                           
 22641                           ; BSR set to: 0
 22642                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22643  005156  DAB1               	call	PL62	;call to abstracted procedure
 22644                           
 22645                           ; BSR set to: 0
 22646  005158  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22647  00515A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22648  00515C                     l15456:
 22649                           
 22650                           ; BSR set to: 0
 22651  00515C  078B               	decf	sprintf@width& (0+255),f,b
 22652  00515E  DAC2               	call	PL98	;call to abstracted procedure
 22653  005160  B4D8               	btfsc	status,2,c
 22654  005162  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22655  005164  E00D               	bz	l15464
 22656  005166  D7F7               	goto	l15452
 22657  005168                     l15458:
 22658                           
 22659                           ; BSR set to: 0
 22660                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22661  005168  518D               	movf	sprintf@_val& (0+255),w,b
 22662  00516A  6ED9               	movwf	fsr2l,c
 22663  00516C  6ADA               	clrf	fsr2h,c
 22664  00516E  C076  FFE1         	movff	sprintf@sp,fsr1l
 22665  005172  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22666  005176  CFDF FFE7          	movff	indf2,indf1
 22667                           
 22668                           ; BSR set to: 0
 22669  00517A  2B8D               	incf	sprintf@_val& (0+255),f,b
 22670                           
 22671                           ; BSR set to: 0
 22672  00517C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22673  00517E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22674  005180                     l15464:
 22675                           
 22676                           ; BSR set to: 0
 22677  005180  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22678  005182  A0D8               	btfss	status,0,c
 22679  005184  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22680  005186  0100               	movlb	0	; () banked
 22681  005188  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22682  00518A  B4D8               	btfsc	status,2,c
 22683  00518C  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22684  00518E  E1EC               	bnz	l15458
 22685                           
 22686                           ; BSR set to: 0
 22687                           ;doprnt.c: 779: if(flag & 0x08)
 22688  005190  B792               	btfsc	sprintf@flag& (0+255),3,b
 22689  005192  D004               	goto	l15472
 22690  005194  D23B               	goto	l15710
 22691  005196                     l15468:
 22692                           
 22693                           ; BSR set to: 0
 22694                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22695  005196  DA91               	call	PL62	;call to abstracted procedure
 22696                           
 22697                           ; BSR set to: 0
 22698  005198  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22699  00519A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22700  00519C                     l15472:
 22701                           
 22702                           ; BSR set to: 0
 22703  00519C  078B               	decf	sprintf@width& (0+255),f,b
 22704  00519E  DAA2               	call	PL98	;call to abstracted procedure
 22705  0051A0  B4D8               	btfsc	status,2,c
 22706  0051A2  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22707  0051A4  E101 D232          	bz	l15710
 22708  0051A8  D7F6               	goto	l15468
 22709  0051AA                     l15474:
 22710                           
 22711                           ; BSR set to: 0
 22712                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22713  0051AA  5188               	movf	sprintf@ap& (0+255),w,b
 22714  0051AC  6ED9               	movwf	fsr2l,c
 22715  0051AE  6ADA               	clrf	fsr2h,c
 22716  0051B0  50DF               	movf	indf2,w,c
 22717  0051B2  6F91               	movwf	sprintf@c& (0+255),b
 22718                           
 22719                           ; BSR set to: 0
 22720  0051B4  0E02               	movlw	2
 22721  0051B6  2788               	addwf	sprintf@ap& (0+255),f,b
 22722  0051B8                     l15478:
 22723                           
 22724                           ; BSR set to: 0
 22725                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22726  0051B8  0E91               	movlw	low sprintf@c
 22727  0051BA  6F8D               	movwf	sprintf@_val& (0+255),b
 22728                           
 22729                           ; BSR set to: 0
 22730                           ;doprnt.c: 815: _val._str._len = 1;
 22731  0051BC  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22732  0051BE  0E01               	movlw	1
 22733  0051C0  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22734                           
 22735                           ;doprnt.c: 816: goto dostring;
 22736  0051C2  D7AC               	goto	l15440
 22737  0051C4                     l15482:
 22738                           
 22739                           ; BSR set to: 0
 22740                           ;doprnt.c: 827: flag |= 0xC0;
 22741  0051C4  0EC0               	movlw	192
 22742  0051C6  1392               	iorwf	sprintf@flag& (0+255),f,b
 22743                           
 22744                           ;doprnt.c: 828: break;
 22745  0051C8  D015               	goto	l15488
 22746  0051CA                     l15486:
 22747                           
 22748                           ; BSR set to: 0
 22749  0051CA  DA6C               	call	PL54	;call to abstracted procedure
 22750  0051CC  5191               	movf	sprintf@c& (0+255),w,b
 22751                           
 22752                           ; Switch size 1, requested type "space"
 22753                           ; Number of cases is 9, Range of values is 0 to 120
 22754                           ; switch strategies available:
 22755                           ; Name         Instructions Cycles
 22756                           ; simple_byte           28    15 (average)
 22757                           ;	Chosen strategy is simple_byte
 22758  0051CE  E101 D220          	bz	l15712
 22759  0051D2  0A58               	xorlw	88	; case 88
 22760  0051D4  E0A0               	bz	l15438
 22761  0051D6  0A3B               	xorlw	59	; case 99
 22762  0051D8  E0E8               	bz	l15474
 22763  0051DA  0A07               	xorlw	7	; case 100
 22764  0051DC  E00B               	bz	l15488
 22765  0051DE  0A0D               	xorlw	13	; case 105
 22766  0051E0  E009               	bz	l15488
 22767  0051E2  0A05               	xorlw	5	; case 108
 22768  0051E4  E094               	bz	l15434
 22769  0051E6  0A03               	xorlw	3	; case 111
 22770  0051E8  E094               	bz	l15436
 22771  0051EA  0A1A               	xorlw	26	; case 117
 22772  0051EC  E0EB               	bz	l15482
 22773  0051EE  0A0D               	xorlw	13	; case 120
 22774  0051F0  E093               	bz	l1675
 22775  0051F2  D7E2               	goto	l15478
 22776  0051F4                     l15488:
 22777                           
 22778                           ; BSR set to: 0
 22779                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22780  0051F4  5192               	movf	sprintf@flag& (0+255),w,b
 22781  0051F6  0BC0               	andlw	192
 22782  0051F8  E120               	bnz	l1694
 22783                           
 22784                           ; BSR set to: 0
 22785                           ;doprnt.c: 1260: {
 22786                           ;doprnt.c: 1262: if(flag & 0x10)
 22787  0051FA  A992               	btfss	sprintf@flag& (0+255),4,b
 22788  0051FC  D003               	goto	l15496
 22789                           
 22790                           ; BSR set to: 0
 22791                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22792  0051FE  5188               	movf	sprintf@ap& (0+255),w,b
 22793                           
 22794                           ; BSR set to: 0
 22795  005200  DA46               	call	PL48	;call to abstracted procedure
 22796  005202  D00D               	goto	L39
 22797  005204                     l15496:
 22798                           
 22799                           ; BSR set to: 0
 22800                           ;doprnt.c: 1264: else
 22801                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22802  005204  5188               	movf	sprintf@ap& (0+255),w,b
 22803  005206  6ED9               	movwf	fsr2l,c
 22804  005208  6ADA               	clrf	fsr2h,c
 22805  00520A  CFDE F08D          	movff	postinc2,sprintf@_val
 22806  00520E  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22807  005212  0E00               	movlw	0
 22808  005214  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22809  005216  0EFF               	movlw	-1
 22810  005218  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22811  00521A  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22812                           
 22813                           ; BSR set to: 0
 22814  00521C  0E02               	movlw	2
 22815  00521E                     L39:
 22816  00521E  2788               	addwf	sprintf@ap& (0+255),f,b
 22817                           
 22818                           ; BSR set to: 0
 22819                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22820  005220  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22821  005222  D01F               	goto	l15514
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;doprnt.c: 1269: flag |= 0x03;
 22825  005224  0E03               	movlw	3
 22826  005226  1392               	iorwf	sprintf@flag& (0+255),f,b
 22827                           
 22828                           ; BSR set to: 0
 22829                           ;doprnt.c: 1270: _val._val = -_val._val;
 22830  005228  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22831  00522A  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22832  00522C  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22833  00522E  6D8D               	negf	sprintf@_val& (0+255),b
 22834  005230  0E00               	movlw	0
 22835  005232  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22836  005234  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22837  005236  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22838  005238  D014               	goto	l15514
 22839  00523A                     l1694:
 22840                           
 22841                           ; BSR set to: 0
 22842                           ;doprnt.c: 1275: else
 22843                           ;doprnt.c: 1280: {
 22844                           ;doprnt.c: 1288: if(flag & 0x10)
 22845  00523A  A992               	btfss	sprintf@flag& (0+255),4,b
 22846  00523C  D003               	goto	l15510
 22847                           
 22848                           ; BSR set to: 0
 22849                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22850  00523E  5188               	movf	sprintf@ap& (0+255),w,b
 22851                           
 22852                           ; BSR set to: 0
 22853  005240  DA26               	call	PL48	;call to abstracted procedure
 22854  005242  D00E               	goto	L40
 22855  005244                     l15510:
 22856                           
 22857                           ; BSR set to: 0
 22858                           ;doprnt.c: 1290: else
 22859                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22860  005244  5188               	movf	sprintf@ap& (0+255),w,b
 22861  005246  6ED9               	movwf	fsr2l,c
 22862  005248  6ADA               	clrf	fsr2h,c
 22863  00524A  CFDE F07E          	movff	postinc2,??_sprintf
 22864  00524E  CFDD F07F          	movff	postdec2,??_sprintf+1
 22865  005252  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22866  005256  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22867  00525A  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22868  00525C  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22869                           
 22870                           ; BSR set to: 0
 22871  00525E  0E02               	movlw	2
 22872  005260                     L40:
 22873  005260  2788               	addwf	sprintf@ap& (0+255),f,b
 22874  005262                     l15514:
 22875                           
 22876                           ; BSR set to: 0
 22877                           ;doprnt.c: 1294: }
 22878                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22879  005262  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22880  005264  1189               	iorwf	sprintf@prec& (0+255),w,b
 22881  005266  E15C               	bnz	l15564
 22882                           
 22883                           ; BSR set to: 0
 22884  005268  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22885  00526A  118D               	iorwf	sprintf@_val& (0+255),w,b
 22886  00526C  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22887  00526E  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22888  005270  E157               	bnz	l15564
 22889                           
 22890                           ; BSR set to: 0
 22891                           ;doprnt.c: 1298: prec++;
 22892  005272  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22893  005274  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22894  005276  D054               	goto	l15564
 22895  005278                     l15520:
 22896                           
 22897                           ; BSR set to: 0
 22898                           ;doprnt.c: 1309: case 0xC0:
 22899                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22900  005278  0E01               	movlw	1
 22901  00527A  6F91               	movwf	sprintf@c& (0+255),b
 22902  00527C                     l15522:
 22903                           
 22904                           ; BSR set to: 0
 22905  00527C  5191               	movf	sprintf@c& (0+255),w,b
 22906  00527E  0A0A               	xorlw	10
 22907  005280  E058               	bz	l15566
 22908                           
 22909                           ; BSR set to: 0
 22910                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22911  005282  5191               	movf	sprintf@c& (0+255),w,b
 22912  005284  0D04               	mullw	4
 22913  005286  0E92               	movlw	low _dpowers
 22914  005288  24F3               	addwf	prodl,w,c
 22915  00528A  6EF6               	movwf	tblptrl,c
 22916  00528C  0E6C               	movlw	high _dpowers
 22917  00528E  20F4               	addwfc	prodh,w,c
 22918  005290  6EF7               	movwf	tblptrh,c
 22919  005292  0009               	tblrd		*+
 22920  005294  50F5               	movf	tablat,w,c
 22921  005296  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22922  005298  0009               	tblrd		*+
 22923  00529A  50F5               	movf	tablat,w,c
 22924  00529C  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22925  00529E  0009               	tblrd		*+
 22926  0052A0  50F5               	movf	tablat,w,c
 22927  0052A2  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22928  0052A4  0009               	tblrd		*+
 22929  0052A6  50F5               	movf	tablat,w,c
 22930  0052A8  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22931  0052AA  E343               	bnc	l15566
 22932                           
 22933                           ; BSR set to: 0
 22934  0052AC  2B91               	incf	sprintf@c& (0+255),f,b
 22935  0052AE  D7E6               	goto	l15522
 22936  0052B0                     l15534:
 22937                           
 22938                           ; BSR set to: 0
 22939                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22940  0052B0  0E01               	movlw	1
 22941  0052B2  6F91               	movwf	sprintf@c& (0+255),b
 22942  0052B4                     l15536:
 22943                           
 22944                           ; BSR set to: 0
 22945  0052B4  5191               	movf	sprintf@c& (0+255),w,b
 22946  0052B6  0A08               	xorlw	8
 22947  0052B8  E03C               	bz	l15566
 22948                           
 22949                           ; BSR set to: 0
 22950                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22951  0052BA  5191               	movf	sprintf@c& (0+255),w,b
 22952  0052BC  0D04               	mullw	4
 22953  0052BE  0EBA               	movlw	low _hexpowers
 22954  0052C0  24F3               	addwf	prodl,w,c
 22955  0052C2  6EF6               	movwf	tblptrl,c
 22956  0052C4  0E6C               	movlw	high _hexpowers
 22957  0052C6  20F4               	addwfc	prodh,w,c
 22958  0052C8  6EF7               	movwf	tblptrh,c
 22959  0052CA  0009               	tblrd		*+
 22960  0052CC  50F5               	movf	tablat,w,c
 22961  0052CE  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22962  0052D0  0009               	tblrd		*+
 22963  0052D2  50F5               	movf	tablat,w,c
 22964  0052D4  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22965  0052D6  0009               	tblrd		*+
 22966  0052D8  50F5               	movf	tablat,w,c
 22967  0052DA  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22968  0052DC  0009               	tblrd		*+
 22969  0052DE  50F5               	movf	tablat,w,c
 22970  0052E0  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22971  0052E2  E327               	bnc	l15566
 22972                           
 22973                           ; BSR set to: 0
 22974  0052E4  2B91               	incf	sprintf@c& (0+255),f,b
 22975  0052E6  D7E6               	goto	l15536
 22976  0052E8                     l15548:
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22980  0052E8  0E01               	movlw	1
 22981  0052EA  6F91               	movwf	sprintf@c& (0+255),b
 22982  0052EC                     l15550:
 22983                           
 22984                           ; BSR set to: 0
 22985  0052EC  5191               	movf	sprintf@c& (0+255),w,b
 22986  0052EE  0A0C               	xorlw	12
 22987  0052F0  E020               	bz	l15566
 22988                           
 22989                           ; BSR set to: 0
 22990                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22991  0052F2  5191               	movf	sprintf@c& (0+255),w,b
 22992  0052F4  0D04               	mullw	4
 22993  0052F6  0E62               	movlw	low _octpowers
 22994  0052F8  24F3               	addwf	prodl,w,c
 22995  0052FA  6EF6               	movwf	tblptrl,c
 22996  0052FC  0E6C               	movlw	high _octpowers
 22997  0052FE  20F4               	addwfc	prodh,w,c
 22998  005300  6EF7               	movwf	tblptrh,c
 22999  005302  0009               	tblrd		*+
 23000  005304  50F5               	movf	tablat,w,c
 23001  005306  5D8D               	subwf	sprintf@_val& (0+255),w,b
 23002  005308  0009               	tblrd		*+
 23003  00530A  50F5               	movf	tablat,w,c
 23004  00530C  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 23005  00530E  0009               	tblrd		*+
 23006  005310  50F5               	movf	tablat,w,c
 23007  005312  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23008  005314  0009               	tblrd		*+
 23009  005316  50F5               	movf	tablat,w,c
 23010  005318  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 23011  00531A  E30B               	bnc	l15566
 23012                           
 23013                           ; BSR set to: 0
 23014  00531C  2B91               	incf	sprintf@c& (0+255),f,b
 23015  00531E  D7E6               	goto	l15550
 23016  005320                     l15564:
 23017                           
 23018                           ; BSR set to: 0
 23019  005320  5192               	movf	sprintf@flag& (0+255),w,b
 23020  005322  0BC0               	andlw	192
 23021                           
 23022                           ; Switch size 1, requested type "space"
 23023                           ; Number of cases is 4, Range of values is 0 to 192
 23024                           ; switch strategies available:
 23025                           ; Name         Instructions Cycles
 23026                           ; simple_byte           13     7 (average)
 23027                           ;	Chosen strategy is simple_byte
 23028  005324  E0A9               	bz	l15520
 23029  005326  0A40               	xorlw	64	; case 64
 23030  005328  E0DF               	bz	l15548
 23031  00532A  0AC0               	xorlw	192	; case 128
 23032  00532C  E0C1               	bz	l15534
 23033  00532E  0A40               	xorlw	64	; case 192
 23034  005330  E0A3               	bz	l15520
 23035  005332                     l15566:
 23036                           
 23037                           ; BSR set to: 0
 23038                           ;doprnt.c: 1346: if(c < prec)
 23039  005332  0E80               	movlw	128
 23040  005334  BF91               	btfsc	sprintf@c& (0+255),7,b
 23041  005336  0E7F               	movlw	127
 23042  005338  6F7E               	movwf	??_sprintf& (0+255),b
 23043  00533A  5189               	movf	sprintf@prec& (0+255),w,b
 23044  00533C  5D91               	subwf	sprintf@c& (0+255),w,b
 23045  00533E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23046  005340  0A80               	xorlw	128
 23047  005342  597E               	subwfb	??_sprintf& (0+255),w,b
 23048  005344  E203               	bc	l15570
 23049                           
 23050                           ; BSR set to: 0
 23051                           ;doprnt.c: 1347: c = prec;
 23052  005346  C089  F091         	movff	sprintf@prec,sprintf@c
 23053  00534A  D00F               	goto	l15574
 23054  00534C                     l15570:
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;doprnt.c: 1348: else if(prec < c)
 23058  00534C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23059  00534E  0A80               	xorlw	128
 23060  005350  6F7E               	movwf	??_sprintf& (0+255),b
 23061  005352  5191               	movf	sprintf@c& (0+255),w,b
 23062  005354  5D89               	subwf	sprintf@prec& (0+255),w,b
 23063  005356  0E80               	movlw	128
 23064  005358  BF91               	btfsc	sprintf@c& (0+255),7,b
 23065  00535A  0E7F               	movlw	127
 23066  00535C  597E               	subwfb	??_sprintf& (0+255),w,b
 23067  00535E  E205               	bc	l15574
 23068                           
 23069                           ; BSR set to: 0
 23070                           ;doprnt.c: 1349: prec = c;
 23071  005360  5191               	movf	sprintf@c& (0+255),w,b
 23072  005362  6F89               	movwf	sprintf@prec& (0+255),b
 23073  005364  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 23074  005366  BF89               	btfsc	sprintf@prec& (0+255),7,b
 23075  005368  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23076  00536A                     l15574:
 23077                           
 23078                           ; BSR set to: 0
 23079                           ;doprnt.c: 1352: if(width && flag & 0x03)
 23080  00536A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23081  00536C  118B               	iorwf	sprintf@width& (0+255),w,b
 23082  00536E  E006               	bz	l15580
 23083                           
 23084                           ; BSR set to: 0
 23085  005370  5192               	movf	sprintf@flag& (0+255),w,b
 23086  005372  0B03               	andlw	3
 23087  005374  E003               	bz	l15580
 23088                           
 23089                           ; BSR set to: 0
 23090                           ;doprnt.c: 1353: width--;
 23091  005376  078B               	decf	sprintf@width& (0+255),f,b
 23092  005378  A0D8               	btfss	status,0,c
 23093  00537A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23094  00537C                     l15580:
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;doprnt.c: 1355: if(flag & 0x4000) {
 23098  00537C  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 23099  00537E  D010               	goto	l15586
 23100                           
 23101                           ; BSR set to: 0
 23102                           ;doprnt.c: 1356: if(width > prec)
 23103  005380  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23104  005382  0A80               	xorlw	128
 23105  005384  6F7E               	movwf	??_sprintf& (0+255),b
 23106  005386  518B               	movf	sprintf@width& (0+255),w,b
 23107  005388  5D89               	subwf	sprintf@prec& (0+255),w,b
 23108  00538A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23109  00538C  0A80               	xorlw	128
 23110  00538E  597E               	subwfb	??_sprintf& (0+255),w,b
 23111  005390  E205               	bc	l1722
 23112                           
 23113                           ; BSR set to: 0
 23114                           ;doprnt.c: 1357: width -= prec;
 23115  005392  5189               	movf	sprintf@prec& (0+255),w,b
 23116  005394  5F8B               	subwf	sprintf@width& (0+255),f,b
 23117  005396  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23118  005398  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23119  00539A  D002               	goto	l15586
 23120  00539C                     l1722:
 23121                           
 23122                           ; BSR set to: 0
 23123                           ;doprnt.c: 1358: else
 23124                           ;doprnt.c: 1359: width = 0;
 23125  00539C  6B8B               	clrf	sprintf@width& (0+255),b
 23126  00539E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23127  0053A0                     l15586:
 23128                           
 23129                           ; BSR set to: 0
 23130                           ;doprnt.c: 1360: }
 23131                           ;doprnt.c: 1364: if((flag & (
 23132                           ;doprnt.c: 1366: 0x04|
 23133                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 23134  0053A0  0EC4               	movlw	196
 23135  0053A2  D94D               	call	PL16	;call to abstracted procedure
 23136  0053A4  0E40               	movlw	64
 23137  0053A6  B4D8               	btfsc	status,2,c
 23138  0053A8  197E               	xorwf	??_sprintf& (0+255),w,b
 23139  0053AA  E107               	bnz	l15592
 23140                           
 23141                           ; BSR set to: 0
 23142                           ;doprnt.c: 1369: if(width)
 23143  0053AC  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23144  0053AE  118B               	iorwf	sprintf@width& (0+255),w,b
 23145  0053B0  E018               	bz	l15598
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;doprnt.c: 1370: width--;
 23149  0053B2  078B               	decf	sprintf@width& (0+255),f,b
 23150  0053B4  A0D8               	btfss	status,0,c
 23151  0053B6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23152  0053B8  D014               	goto	l15598
 23153  0053BA                     l15592:
 23154                           
 23155                           ; BSR set to: 0
 23156                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23157  0053BA  0EC0               	movlw	192
 23158  0053BC  D940               	call	PL16	;call to abstracted procedure
 23159  0053BE  0E80               	movlw	128
 23160  0053C0  B4D8               	btfsc	status,2,c
 23161  0053C2  197E               	xorwf	??_sprintf& (0+255),w,b
 23162  0053C4  E10E               	bnz	l15598
 23163                           
 23164                           ; BSR set to: 0
 23165                           ;doprnt.c: 1379: if(width > 2)
 23166  0053C6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23167  0053C8  0A80               	xorlw	128
 23168  0053CA  0F80               	addlw	-128
 23169  0053CC  0E03               	movlw	3
 23170  0053CE  B4D8               	btfsc	status,2,c
 23171  0053D0  5D8B               	subwf	sprintf@width& (0+255),w,b
 23172  0053D2  E305               	bnc	l1728
 23173                           
 23174                           ; BSR set to: 0
 23175                           ;doprnt.c: 1380: width -= 2;
 23176  0053D4  0EFE               	movlw	254
 23177  0053D6  278B               	addwf	sprintf@width& (0+255),f,b
 23178  0053D8  0EFF               	movlw	255
 23179  0053DA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 23180  0053DC  D002               	goto	l15598
 23181  0053DE                     l1728:
 23182                           
 23183                           ; BSR set to: 0
 23184                           ;doprnt.c: 1381: else
 23185                           ;doprnt.c: 1382: width = 0;
 23186  0053DE  6B8B               	clrf	sprintf@width& (0+255),b
 23187  0053E0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23188  0053E2                     l15598:
 23189                           
 23190                           ; BSR set to: 0
 23191                           ;doprnt.c: 1383: }
 23192                           ;doprnt.c: 1388: if(width > c)
 23193  0053E2  0E80               	movlw	128
 23194  0053E4  BF91               	btfsc	sprintf@c& (0+255),7,b
 23195  0053E6  0E7F               	movlw	127
 23196  0053E8  6F7E               	movwf	??_sprintf& (0+255),b
 23197  0053EA  518B               	movf	sprintf@width& (0+255),w,b
 23198  0053EC  5D91               	subwf	sprintf@c& (0+255),w,b
 23199  0053EE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23200  0053F0  0A80               	xorlw	128
 23201  0053F2  597E               	subwfb	??_sprintf& (0+255),w,b
 23202  0053F4  E207               	bc	l1730
 23203                           
 23204                           ; BSR set to: 0
 23205                           ;doprnt.c: 1389: width -= c;
 23206  0053F6  5191               	movf	sprintf@c& (0+255),w,b
 23207  0053F8  5F8B               	subwf	sprintf@width& (0+255),f,b
 23208  0053FA  0E00               	movlw	0
 23209  0053FC  BF91               	btfsc	sprintf@c& (0+255),7,b
 23210  0053FE  0EFF               	movlw	255
 23211  005400  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23212  005402  D002               	goto	l1731
 23213  005404                     l1730:
 23214                           
 23215                           ; BSR set to: 0
 23216                           ;doprnt.c: 1390: else
 23217                           ;doprnt.c: 1391: width = 0;
 23218  005404  6B8B               	clrf	sprintf@width& (0+255),b
 23219  005406  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23220  005408                     l1731:
 23221                           
 23222                           ; BSR set to: 0
 23223                           ;doprnt.c: 1394: if(flag & 0x04) {
 23224  005408  A592               	btfss	sprintf@flag& (0+255),2,b
 23225  00540A  D03C               	goto	l15636
 23226                           
 23227                           ; BSR set to: 0
 23228                           ;doprnt.c: 1399: if(flag & 0x03)
 23229  00540C  5192               	movf	sprintf@flag& (0+255),w,b
 23230  00540E  0B03               	andlw	3
 23231  005410  E009               	bz	l1733
 23232                           
 23233                           ; BSR set to: 0
 23234                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23235  005412  C076  FFD9         	movff	sprintf@sp,fsr2l
 23236  005416  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23237  00541A  0E2D               	movlw	45
 23238  00541C  6EDF               	movwf	indf2,c
 23239  00541E                     l15606:
 23240                           
 23241                           ; BSR set to: 0
 23242  00541E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23243  005420  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23244  005422  D022               	goto	l15628
 23245  005424                     l1733:
 23246                           
 23247                           ; BSR set to: 0
 23248                           ;doprnt.c: 1403: else
 23249                           ;doprnt.c: 1406: if(flag & 0x01)
 23250  005424  A192               	btfss	sprintf@flag& (0+255),0,b
 23251  005426  D006               	goto	l15612
 23252                           
 23253                           ; BSR set to: 0
 23254                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23255  005428  C076  FFD9         	movff	sprintf@sp,fsr2l
 23256  00542C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23257  005430  0E20               	movlw	32
 23258  005432  D7F4               	goto	L41
 23259  005434                     l15612:
 23260                           
 23261                           ; BSR set to: 0
 23262                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23263  005434  0EC0               	movlw	192
 23264  005436  D903               	call	PL16	;call to abstracted procedure
 23265  005438  0E80               	movlw	128
 23266  00543A  B4D8               	btfsc	status,2,c
 23267  00543C  197E               	xorwf	??_sprintf& (0+255),w,b
 23268  00543E  E114               	bnz	l15628
 23269                           
 23270                           ; BSR set to: 0
 23271                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23272  005440  C076  FFD9         	movff	sprintf@sp,fsr2l
 23273  005444  D94A               	call	PL84	;call to abstracted procedure
 23274                           
 23275                           ; BSR set to: 0
 23276  005446  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23277  005448  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23278                           
 23279                           ; BSR set to: 0
 23280                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23281  00544A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23282  00544C  D003               	goto	l15622
 23283                           
 23284                           ; BSR set to: 0
 23285  00544E  6B83               	clrf	(_sprintf$2108+1)& (0+255),b
 23286  005450  0E78               	movlw	120
 23287  005452  D002               	goto	L42
 23288  005454                     l15622:
 23289                           
 23290                           ; BSR set to: 0
 23291  005454  6B83               	clrf	(_sprintf$2108+1)& (0+255),b
 23292  005456  0E58               	movlw	88
 23293  005458                     L42:
 23294  005458  6F82               	movwf	_sprintf$2108& (0+255),b
 23295                           
 23296                           ; BSR set to: 0
 23297  00545A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23298  00545E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23299  005462  C082  FFDF         	movff	_sprintf$2108,indf2
 23300  005466  D7DB               	goto	l15606
 23301  005468                     l15628:
 23302                           
 23303                           ; BSR set to: 0
 23304                           ;doprnt.c: 1419: }
 23305                           ;doprnt.c: 1422: if(width)
 23306  005468  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23307  00546A  118B               	iorwf	sprintf@width& (0+255),w,b
 23308  00546C  E101 D0B9          	bz	l15700
 23309                           
 23310                           ; BSR set to: 0
 23311                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23312  005470  C076  FFD9         	movff	sprintf@sp,fsr2l
 23313  005474  D932               	call	PL84	;call to abstracted procedure
 23314                           
 23315                           ; BSR set to: 0
 23316  005476  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23317  005478  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;doprnt.c: 1425: while(--width);
 23321  00547A  078B               	decf	sprintf@width& (0+255),f,b
 23322  00547C  A0D8               	btfss	status,0,c
 23323  00547E  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23324  005480  0100               	movlb	0	; () banked
 23325  005482  D7F2               	goto	l15628
 23326  005484                     l15636:
 23327                           
 23328                           ; BSR set to: 0
 23329                           ;doprnt.c: 1429: {
 23330                           ;doprnt.c: 1431: if(width
 23331                           ;doprnt.c: 1433: && !(flag & 0x08)
 23332                           ;doprnt.c: 1435: )
 23333  005484  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23334  005486  118B               	iorwf	sprintf@width& (0+255),w,b
 23335  005488  A4D8               	btfss	status,2,c
 23336                           
 23337                           ; BSR set to: 0
 23338  00548A  B792               	btfsc	sprintf@flag& (0+255),3,b
 23339  00548C  D004               	goto	l15646
 23340  00548E                     l15640:
 23341                           
 23342                           ; BSR set to: 0
 23343                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23344  00548E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23345                           
 23346                           ; BSR set to: 0
 23347                           
 23348                           ; BSR set to: 0
 23349                           ;doprnt.c: 1438: while(--width);
 23350  005492  D8F0               	call	PL40	;call to abstracted procedure
 23351  005494  E1FC               	bnz	l15640
 23352  005496                     l15646:
 23353                           
 23354                           ; BSR set to: 0
 23355                           ;doprnt.c: 1445: if(flag & 0x03)
 23356  005496  5192               	movf	sprintf@flag& (0+255),w,b
 23357  005498  0B03               	andlw	3
 23358  00549A  E009               	bz	l1749
 23359                           
 23360                           ; BSR set to: 0
 23361                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23362  00549C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23363  0054A0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23364  0054A4  0E2D               	movlw	45
 23365  0054A6  6EDF               	movwf	indf2,c
 23366                           
 23367                           ; BSR set to: 0
 23368  0054A8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23369  0054AA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23370  0054AC  D008               	goto	l15656
 23371  0054AE                     l1749:
 23372                           
 23373                           ; BSR set to: 0
 23374                           ;doprnt.c: 1450: else if(flag & 0x01)
 23375  0054AE  A192               	btfss	sprintf@flag& (0+255),0,b
 23376  0054B0  D006               	goto	l15656
 23377                           
 23378                           ; BSR set to: 0
 23379                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23380  0054B2  C076  FFD9         	movff	sprintf@sp,fsr2l
 23381  0054B6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23382  0054BA  0E20               	movlw	32
 23383  0054BC  D7F4               	goto	L43
 23384  0054BE                     l15656:
 23385                           
 23386                           ; BSR set to: 0
 23387                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23388  0054BE  0EC0               	movlw	192
 23389  0054C0  D8BE               	call	PL16	;call to abstracted procedure
 23390  0054C2  0E40               	movlw	64
 23391  0054C4  B4D8               	btfsc	status,2,c
 23392  0054C6  197E               	xorwf	??_sprintf& (0+255),w,b
 23393  0054C8  E106               	bnz	l15662
 23394                           
 23395                           ; BSR set to: 0
 23396                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23397  0054CA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23398  0054CE  D905               	call	PL84	;call to abstracted procedure
 23399  0054D0                     l15660:
 23400                           
 23401                           ; BSR set to: 0
 23402  0054D0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23403  0054D2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23404  0054D4  D086               	goto	l15700
 23405  0054D6                     l15662:
 23406                           
 23407                           ; BSR set to: 0
 23408                           ;doprnt.c: 1457: else
 23409                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23410  0054D6  0EC0               	movlw	192
 23411  0054D8  D8B2               	call	PL16	;call to abstracted procedure
 23412  0054DA  0E80               	movlw	128
 23413  0054DC  B4D8               	btfsc	status,2,c
 23414  0054DE  197E               	xorwf	??_sprintf& (0+255),w,b
 23415  0054E0  E001 D07F          	bnz	l15700
 23416                           
 23417                           ; BSR set to: 0
 23418                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23419  0054E4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23420  0054E8  D8F8               	call	PL84	;call to abstracted procedure
 23421                           
 23422                           ; BSR set to: 0
 23423  0054EA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23424  0054EC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23425                           
 23426                           ; BSR set to: 0
 23427                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23428  0054EE  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23429  0054F0  D003               	goto	l15672
 23430                           
 23431                           ; BSR set to: 0
 23432  0054F2  6B85               	clrf	(_sprintf$2109+1)& (0+255),b
 23433  0054F4  0E78               	movlw	120
 23434  0054F6  D002               	goto	L44
 23435  0054F8                     l15672:
 23436                           
 23437                           ; BSR set to: 0
 23438  0054F8  6B85               	clrf	(_sprintf$2109+1)& (0+255),b
 23439  0054FA  0E58               	movlw	88
 23440  0054FC                     L44:
 23441  0054FC  6F84               	movwf	_sprintf$2109& (0+255),b
 23442                           
 23443                           ; BSR set to: 0
 23444  0054FE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23445  005502  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23446  005506  C084  FFDF         	movff	_sprintf$2109,indf2
 23447  00550A  D7E2               	goto	l15660
 23448  00550C                     l15678:
 23449                           
 23450                           ; BSR set to: 0
 23451                           ;doprnt.c: 1493: case 0xC0:
 23452                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23453  00550C  C089  F07E         	movff	sprintf@prec,??_sprintf
 23454  005510  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23455  005514  90D8               	bcf	status,0,c
 23456  005516  377E               	rlcf	??_sprintf& (0+255),f,b
 23457  005518  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23458  00551A  90D8               	bcf	status,0,c
 23459  00551C  377E               	rlcf	??_sprintf& (0+255),f,b
 23460  00551E  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23461  005520  0E92               	movlw	low _dpowers
 23462  005522  257E               	addwf	??_sprintf& (0+255),w,b
 23463  005524  6EF6               	movwf	tblptrl,c
 23464  005526  0E6C               	movlw	high _dpowers
 23465  005528  D87B               	call	PL12	;call to abstracted procedure
 23466  00552A  C08D  F060         	movff	sprintf@_val,?___lldiv
 23467  00552E  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23468  005532  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23469  005536  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23470  00553A  EC1E  F00F         	call	___lldiv	;wreg free
 23471  00553E  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23472  005542  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23473  005546  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23474  00554A  C060  F06D         	movff	?___lldiv,?___llmod
 23475  00554E  0E0A               	movlw	10
 23476  005550  6F71               	movwf	(?___llmod+4)& (0+255),b
 23477  005552  0E00               	movlw	0
 23478  005554  6B72               	clrf	(?___llmod+5)& (0+255),b
 23479  005556  6B73               	clrf	(?___llmod+6)& (0+255),b
 23480  005558  6B74               	clrf	(?___llmod+7)& (0+255),b
 23481  00555A  EC16  F00E         	call	___llmod	;wreg free
 23482  00555E  516D               	movf	?___llmod& (0+255),w,b
 23483  005560  D02D               	goto	L45
 23484  005562                     l15680:
 23485                           
 23486                           ; BSR set to: 0
 23487                           ;doprnt.c: 1506: {
 23488                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23489  005562  D875               	call	PL20	;call to abstracted procedure
 23490  005564  0EBA               	movlw	low _hexpowers
 23491  005566  257E               	addwf	??_sprintf& (0+255),w,b
 23492  005568  6EF6               	movwf	tblptrl,c
 23493  00556A  0E6C               	movlw	high _hexpowers
 23494  00556C  D859               	call	PL12	;call to abstracted procedure
 23495  00556E  EC1E  F00F         	call	___lldiv	;wreg free
 23496  005572  5160               	movf	?___lldiv& (0+255),w,b
 23497  005574  0B0F               	andlw	15
 23498  005576  6F81               	movwf	sprintf@idx& (0+255),b
 23499                           
 23500                           ; BSR set to: 0
 23501                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23502  005578  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23503  00557A  D004               	goto	l15686
 23504                           
 23505                           ; BSR set to: 0
 23506  00557C  0E7A               	movlw	high STR_278
 23507  00557E  6F87               	movwf	(_sprintf$2115+1)& (0+255),b
 23508  005580  0EEA               	movlw	low STR_278
 23509  005582  D003               	goto	L46
 23510  005584                     l15686:
 23511                           
 23512                           ; BSR set to: 0
 23513  005584  0E7A               	movlw	high STR_277
 23514  005586  6F87               	movwf	(_sprintf$2115+1)& (0+255),b
 23515  005588  0ED9               	movlw	low STR_277
 23516  00558A                     L46:
 23517  00558A  6F86               	movwf	_sprintf$2115& (0+255),b
 23518                           
 23519                           ; BSR set to: 0
 23520  00558C  5181               	movf	sprintf@idx& (0+255),w,b
 23521  00558E  2586               	addwf	_sprintf$2115& (0+255),w,b
 23522  005590  6F7E               	movwf	??_sprintf& (0+255),b
 23523  005592  0E00               	movlw	0
 23524  005594  2187               	addwfc	(_sprintf$2115+1)& (0+255),w,b
 23525  005596  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23526  005598  C07E  FFF6         	movff	??_sprintf,tblptrl
 23527  00559C  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23528  0055A0  0008               	tblrd		*
 23529  0055A2  CFF5 F091          	movff	tablat,sprintf@c
 23530                           
 23531                           ;doprnt.c: 1515: }
 23532                           ;doprnt.c: 1517: break;
 23533  0055A6  D016               	goto	l15696
 23534  0055A8                     l15690:
 23535                           
 23536                           ; BSR set to: 0
 23537                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23538  0055A8  D852               	call	PL20	;call to abstracted procedure
 23539  0055AA  0E62               	movlw	low _octpowers
 23540  0055AC  257E               	addwf	??_sprintf& (0+255),w,b
 23541  0055AE  6EF6               	movwf	tblptrl,c
 23542  0055B0  0E6C               	movlw	high _octpowers
 23543  0055B2  D836               	call	PL12	;call to abstracted procedure
 23544  0055B4  EC1E  F00F         	call	___lldiv	;wreg free
 23545  0055B8  5160               	movf	?___lldiv& (0+255),w,b
 23546  0055BA  0B07               	andlw	7
 23547  0055BC                     L45:
 23548  0055BC  0F30               	addlw	48
 23549  0055BE  6F91               	movwf	sprintf@c& (0+255),b
 23550                           
 23551                           ;doprnt.c: 1527: break;
 23552  0055C0  D009               	goto	l15696
 23553  0055C2                     l15694:
 23554                           
 23555                           ; BSR set to: 0
 23556  0055C2  5192               	movf	sprintf@flag& (0+255),w,b
 23557  0055C4  0BC0               	andlw	192
 23558                           
 23559                           ; Switch size 1, requested type "space"
 23560                           ; Number of cases is 4, Range of values is 0 to 192
 23561                           ; switch strategies available:
 23562                           ; Name         Instructions Cycles
 23563                           ; simple_byte           13     7 (average)
 23564                           ;	Chosen strategy is simple_byte
 23565  0055C6  E0A2               	bz	l15678
 23566  0055C8  0A40               	xorlw	64	; case 64
 23567  0055CA  E0EE               	bz	l15690
 23568  0055CC  0AC0               	xorlw	192	; case 128
 23569  0055CE  E0C9               	bz	l15680
 23570  0055D0  0A40               	xorlw	64	; case 192
 23571  0055D2  E09C               	bz	l15678
 23572  0055D4                     l15696:
 23573                           
 23574                           ; BSR set to: 0
 23575                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23576  0055D4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23577  0055D8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23578  0055DC  C091  FFDF         	movff	sprintf@c,indf2
 23579  0055E0  D777               	goto	l15660
 23580  0055E2                     l15700:
 23581                           
 23582                           ; BSR set to: 0
 23583  0055E2  0789               	decf	sprintf@prec& (0+255),f,b
 23584  0055E4  A0D8               	btfss	status,0,c
 23585  0055E6  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23586  0055E8  0100               	movlb	0	; () banked
 23587  0055EA  2989               	incf	sprintf@prec& (0+255),w,b
 23588  0055EC  B4D8               	btfsc	status,2,c
 23589  0055EE  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23590  0055F0  E1E8               	bnz	l15694
 23591                           
 23592                           ; BSR set to: 0
 23593                           ;doprnt.c: 1532: }
 23594                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23595  0055F2  A792               	btfss	sprintf@flag& (0+255),3,b
 23596  0055F4  D00B               	goto	l15710
 23597                           
 23598                           ; BSR set to: 0
 23599  0055F6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23600  0055F8  0A80               	xorlw	128
 23601  0055FA  0F80               	addlw	-128
 23602  0055FC  0E01               	movlw	1
 23603  0055FE  B4D8               	btfsc	status,2,c
 23604  005600  5D8B               	subwf	sprintf@width& (0+255),w,b
 23605  005602  E304               	bnc	l15710
 23606  005604                     l15704:
 23607                           
 23608                           ; BSR set to: 0
 23609                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23610  005604  C076  FFD9         	movff	sprintf@sp,fsr2l
 23611                           
 23612                           ; BSR set to: 0
 23613                           
 23614                           ; BSR set to: 0
 23615                           ;doprnt.c: 1538: while(--width);
 23616  005608  D835               	call	PL40	;call to abstracted procedure
 23617  00560A  E1FC               	bnz	l15704
 23618  00560C                     l15710:
 23619                           
 23620                           ; BSR set to: 0
 23621  00560C  D84B               	call	PL54	;call to abstracted procedure
 23622  00560E  6791               	tstfsz	sprintf@c& (0+255),b
 23623  005610  D4D1               	goto	l15376
 23624  005612                     l15712:
 23625                           
 23626                           ; BSR set to: 0
 23627                           ;doprnt.c: 1545: *sp = 0;
 23628  005612  C076  FFD9         	movff	sprintf@sp,fsr2l
 23629  005616  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23630  00561A  0E00               	movlw	0
 23631  00561C  6EDF               	movwf	indf2,c
 23632                           
 23633                           ; BSR set to: 0
 23634  00561E  0C00               	retlw	0
 23635  005620                     __end_of_sprintf:
 23636                           	opt stack 0
 23637  005620                     PL12:
 23638                           	opt stack 24
 23639  005620  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23640  005622  6EF7               	movwf	tblptrh,c
 23641  005624  0009               	tblrd		*+
 23642  005626  CFF5 F064          	movff	tablat,?___lldiv+4
 23643  00562A  0009               	tblrd		*+
 23644  00562C  CFF5 F065          	movff	tablat,?___lldiv+5
 23645  005630  0009               	tblrd		*+
 23646  005632  CFF5 F066          	movff	tablat,?___lldiv+6
 23647  005636  000A               	tblrd		*-
 23648  005638  CFF5 F067          	movff	tablat,?___lldiv+7
 23649  00563C  0012               	return	
 23650  00563E                     __end_ofPL12:
 23651                           	opt stack 0
 23652  00563E                     PL16:
 23653                           	opt stack 24
 23654  00563E  1592               	andwf	sprintf@flag& (0+255),w,b
 23655  005640  6F7E               	movwf	??_sprintf& (0+255),b
 23656  005642  0E08               	movlw	8
 23657  005644  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23658  005646  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23659  005648  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23660  00564A  0A08               	xorlw	8
 23661  00564C  0012               	return	
 23662  00564E                     __end_ofPL16:
 23663                           	opt stack 0
 23664  00564E                     PL20:
 23665                           	opt stack 24
 23666  00564E  C08D  F060         	movff	sprintf@_val,?___lldiv
 23667  005652  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23668  005656  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23669  00565A  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23670  00565E  C089  F07E         	movff	sprintf@prec,??_sprintf
 23671  005662  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23672  005666  90D8               	bcf	status,0,c
 23673  005668  377E               	rlcf	??_sprintf& (0+255),f,b
 23674  00566A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23675  00566C  90D8               	bcf	status,0,c
 23676  00566E  377E               	rlcf	??_sprintf& (0+255),f,b
 23677  005670  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23678  005672  0012               	return	
 23679  005674                     __end_ofPL20:
 23680                           	opt stack 0
 23681  005674                     PL40:
 23682                           	opt stack 24
 23683  005674  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23684  005678  0E20               	movlw	32
 23685  00567A  6EDF               	movwf	indf2,c
 23686  00567C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23687  00567E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23688  005680  078B               	decf	sprintf@width& (0+255),f,b
 23689  005682  A0D8               	btfss	status,0,c
 23690  005684  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23691  005686  0100               	movlb	0	; () banked
 23692  005688  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23693  00568A  118B               	iorwf	sprintf@width& (0+255),w,b
 23694  00568C  0012               	return	
 23695  00568E                     __end_ofPL40:
 23696                           	opt stack 0
 23697  00568E                     PL48:
 23698                           	opt stack 24
 23699  00568E  6ED9               	movwf	fsr2l,c
 23700  005690  6ADA               	clrf	fsr2h,c
 23701  005692  CFDE F08D          	movff	postinc2,sprintf@_val
 23702  005696  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23703  00569A  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23704  00569E  CFDE F090          	movff	postinc2,sprintf@_val+3
 23705  0056A2  0C04               	retlw	4
 23706  0056A4                     __end_ofPL48:
 23707                           	opt stack 0
 23708  0056A4                     PL54:
 23709                           	opt stack 24
 23710  0056A4  C078  FFF6         	movff	sprintf@f,tblptrl
 23711  0056A8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23712  0056AC  4B78               	infsnz	sprintf@f& (0+255),f,b
 23713  0056AE  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23714  0056B0  0008               	tblrd		*
 23715  0056B2  CFF5 F091          	movff	tablat,sprintf@c
 23716  0056B6  0100               	movlb	0	; () banked
 23717  0056B8  0012               	return	
 23718  0056BA                     __end_ofPL54:
 23719                           	opt stack 0
 23720  0056BA                     PL62:
 23721                           	opt stack 24
 23722  0056BA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23723  0056BE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23724  0056C2  0E20               	movlw	32
 23725  0056C4  6EDF               	movwf	indf2,c
 23726  0056C6  0C20               	retlw	32
 23727  0056C8                     __end_ofPL62:
 23728                           	opt stack 0
 23729  0056C8                     PL78:
 23730                           	opt stack 24
 23731  0056C8  4B78               	infsnz	sprintf@f& (0+255),f,b
 23732  0056CA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23733  0056CC  C078  FFF6         	movff	sprintf@f,tblptrl
 23734  0056D0  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23735  0056D4  0008               	tblrd		*
 23736  0056D6  50F5               	movf	tablat,w,c
 23737  0056D8  0012               	return	
 23738  0056DA                     __end_ofPL78:
 23739                           	opt stack 0
 23740  0056DA                     PL84:
 23741                           	opt stack 24
 23742  0056DA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23743  0056DE  0E30               	movlw	48
 23744  0056E0  6EDF               	movwf	indf2,c
 23745  0056E2  0C30               	retlw	48
 23746  0056E4                     __end_ofPL84:
 23747                           	opt stack 0
 23748  0056E4                     PL98:
 23749                           	opt stack 24
 23750  0056E4  A0D8               	btfss	status,0,c
 23751  0056E6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23752  0056E8  0100               	movlb	0	; () banked
 23753  0056EA  298B               	incf	sprintf@width& (0+255),w,b
 23754  0056EC  0012               	return	
 23755  0056EE                     __end_ofPL98:
 23756                           	opt stack 0
 23757                           tblptru	equ	0xFF8
 23758                           tblptrh	equ	0xFF7
 23759                           tblptrl	equ	0xFF6
 23760                           tablat	equ	0xFF5
 23761                           prodh	equ	0xFF4
 23762                           prodl	equ	0xFF3
 23763                           intcon	equ	0xFF2
 23764                           indf0	equ	0xFEF
 23765                           postinc0	equ	0xFEE
 23766                           fsr0h	equ	0xFEA
 23767                           fsr0l	equ	0xFE9
 23768                           wreg	equ	0xFE8
 23769                           indf1	equ	0xFE7
 23770                           postinc1	equ	0xFE6
 23771                           postdec1	equ	0xFE5
 23772                           fsr1h	equ	0xFE2
 23773                           fsr1l	equ	0xFE1
 23774                           indf2	equ	0xFDF
 23775                           postinc2	equ	0xFDE
 23776                           postdec2	equ	0xFDD
 23777                           plusw2	equ	0xFDB
 23778                           fsr2h	equ	0xFDA
 23779                           fsr2l	equ	0xFD9
 23780                           status	equ	0xFD8
 23781                           
 23782 ;; *************** function ___wmul *****************
 23783 ;; Defined at:
 23784 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23785 ;; Parameters:    Size  Location     Type
 23786 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23787 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23788 ;; Auto vars:     Size  Location     Type
 23789 ;;  product         2    4[BANK0 ] unsigned int 
 23790 ;; Return value:  Size  Location     Type
 23791 ;;                  2    0[BANK0 ] unsigned int 
 23792 ;; Registers used:
 23793 ;;		wreg, status,2, status,0, prodl, prodh
 23794 ;; Tracked objects:
 23795 ;;		On entry : F/0
 23796 ;;		On exit  : F/0
 23797 ;;		Unchanged: 0/0
 23798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23799 ;;      Params:         0       4       0       0       0       0       0
 23800 ;;      Locals:         0       2       0       0       0       0       0
 23801 ;;      Temps:          0       0       0       0       0       0       0
 23802 ;;      Totals:         0       6       0       0       0       0       0
 23803 ;;Total ram usage:        6 bytes
 23804 ;; Hardware stack levels used:    1
 23805 ;; Hardware stack levels required when called:    3
 23806 ;; This function calls:
 23807 ;;		Nothing
 23808 ;; This function is called by:
 23809 ;;		_sprintf
 23810 ;;		_atoi
 23811 ;; This function uses a non-reentrant model
 23812 ;;
 23813                           
 23814                           	psect	text57
 23815  001626                     __ptext57:
 23816                           	opt stack 0
 23817  001626                     ___wmul:
 23818                           	opt stack 24
 23819                           
 23820                           ; BSR set to: 0
 23821                           
 23822                           ; BSR set to: 0
 23823                           ;incstack = 0
 23824                           ;incstack = 0
 23825  001626  5160               	movf	___wmul@multiplier& (0+255),w,b
 23826  001628  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23827  00162A  CFF3 F064          	movff	prodl,___wmul@product
 23828  00162E  CFF4 F065          	movff	prodh,___wmul@product+1
 23829  001632  5160               	movf	___wmul@multiplier& (0+255),w,b
 23830  001634  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23831  001636  D808               	call	PL86	;call to abstracted procedure
 23832  001638  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23833  00163A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23834  00163C  D805               	call	PL86	;call to abstracted procedure
 23835                           
 23836                           ; BSR set to: 0
 23837  00163E  C064  F060         	movff	___wmul@product,?___wmul
 23838  001642  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23839                           
 23840                           ; BSR set to: 0
 23841  001646  0012               	return	
 23842  001648                     __end_of___wmul:
 23843                           	opt stack 0
 23844  001648                     PL86:
 23845                           	opt stack 24
 23846  001648  CFF3 FFF4          	movff	prodl,prodh
 23847  00164C  6AF3               	clrf	prodl,c
 23848  00164E  50F3               	movf	prodl,w,c
 23849  001650  2764               	addwf	___wmul@product& (0+255),f,b
 23850  001652  50F4               	movf	prodh,w,c
 23851  001654  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23852  001656  0012               	return	
 23853  001658                     __end_ofPL86:
 23854                           	opt stack 0
 23855                           tblptru	equ	0xFF8
 23856                           tblptrh	equ	0xFF7
 23857                           tblptrl	equ	0xFF6
 23858                           tablat	equ	0xFF5
 23859                           prodh	equ	0xFF4
 23860                           prodl	equ	0xFF3
 23861                           intcon	equ	0xFF2
 23862                           indf0	equ	0xFEF
 23863                           postinc0	equ	0xFEE
 23864                           fsr0h	equ	0xFEA
 23865                           fsr0l	equ	0xFE9
 23866                           wreg	equ	0xFE8
 23867                           indf1	equ	0xFE7
 23868                           postinc1	equ	0xFE6
 23869                           postdec1	equ	0xFE5
 23870                           fsr1h	equ	0xFE2
 23871                           fsr1l	equ	0xFE1
 23872                           indf2	equ	0xFDF
 23873                           postinc2	equ	0xFDE
 23874                           postdec2	equ	0xFDD
 23875                           plusw2	equ	0xFDB
 23876                           fsr2h	equ	0xFDA
 23877                           fsr2l	equ	0xFD9
 23878                           status	equ	0xFD8
 23879                           
 23880 ;; *************** function ___llmod *****************
 23881 ;; Defined at:
 23882 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23883 ;; Parameters:    Size  Location     Type
 23884 ;;  dividend        4   13[BANK0 ] unsigned long 
 23885 ;;  divisor         4   17[BANK0 ] unsigned long 
 23886 ;; Auto vars:     Size  Location     Type
 23887 ;;  counter         1   21[BANK0 ] unsigned char 
 23888 ;; Return value:  Size  Location     Type
 23889 ;;                  4   13[BANK0 ] unsigned long 
 23890 ;; Registers used:
 23891 ;;		wreg, status,2, status,0
 23892 ;; Tracked objects:
 23893 ;;		On entry : F/0
 23894 ;;		On exit  : F/0
 23895 ;;		Unchanged: 0/0
 23896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23897 ;;      Params:         0       8       0       0       0       0       0
 23898 ;;      Locals:         0       1       0       0       0       0       0
 23899 ;;      Temps:          0       0       0       0       0       0       0
 23900 ;;      Totals:         0       9       0       0       0       0       0
 23901 ;;Total ram usage:        9 bytes
 23902 ;; Hardware stack levels used:    1
 23903 ;; Hardware stack levels required when called:    3
 23904 ;; This function calls:
 23905 ;;		Nothing
 23906 ;; This function is called by:
 23907 ;;		_sprintf
 23908 ;;		_ultoa
 23909 ;; This function uses a non-reentrant model
 23910 ;;
 23911                           
 23912                           	psect	text58
 23913  001C2C                     __ptext58:
 23914                           	opt stack 0
 23915  001C2C                     ___llmod:
 23916                           	opt stack 23
 23917                           
 23918                           ; BSR set to: 0
 23919                           
 23920                           ; BSR set to: 0
 23921                           ;incstack = 0
 23922                           ;incstack = 0
 23923  001C2C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23924  001C2E  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23925  001C30  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23926  001C32  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23927  001C34  E023               	bz	l2397
 23928                           
 23929                           ; BSR set to: 0
 23930  001C36  0E01               	movlw	1
 23931  001C38  6F75               	movwf	___llmod@counter& (0+255),b
 23932  001C3A  D006               	goto	l16550
 23933  001C3C                     l16548:
 23934                           
 23935                           ; BSR set to: 0
 23936  001C3C  90D8               	bcf	status,0,c
 23937  001C3E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23938  001C40  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23939  001C42  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23940  001C44  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23941  001C46  2B75               	incf	___llmod@counter& (0+255),f,b
 23942  001C48                     l16550:
 23943                           
 23944                           ; BSR set to: 0
 23945  001C48  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23946  001C4A  D7F8               	goto	l16548
 23947  001C4C                     l16552:
 23948                           
 23949                           ; BSR set to: 0
 23950  001C4C  5171               	movf	___llmod@divisor& (0+255),w,b
 23951  001C4E  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23952  001C50  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23953  001C52  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23954  001C54  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23955  001C56  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23956  001C58  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23957  001C5A  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23958  001C5C  E308               	bnc	l16556
 23959                           
 23960                           ; BSR set to: 0
 23961  001C5E  5171               	movf	___llmod@divisor& (0+255),w,b
 23962  001C60  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23963  001C62  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23964  001C64  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23965  001C66  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23966  001C68  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23967  001C6A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23968  001C6C  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23969  001C6E                     l16556:
 23970                           
 23971                           ; BSR set to: 0
 23972  001C6E  90D8               	bcf	status,0,c
 23973  001C70  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23974  001C72  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23975  001C74  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23976  001C76  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23977                           
 23978                           ; BSR set to: 0
 23979  001C78  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23980  001C7A  D7E8               	goto	l16552
 23981  001C7C                     l2397:
 23982                           
 23983                           ; BSR set to: 0
 23984  001C7C  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23985  001C80  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23986  001C84  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23987  001C88  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23988                           
 23989                           ; BSR set to: 0
 23990  001C8C  0012               	return	
 23991  001C8E                     __end_of___llmod:
 23992                           	opt stack 0
 23993                           tblptru	equ	0xFF8
 23994                           tblptrh	equ	0xFF7
 23995                           tblptrl	equ	0xFF6
 23996                           tablat	equ	0xFF5
 23997                           prodh	equ	0xFF4
 23998                           prodl	equ	0xFF3
 23999                           intcon	equ	0xFF2
 24000                           indf0	equ	0xFEF
 24001                           postinc0	equ	0xFEE
 24002                           fsr0h	equ	0xFEA
 24003                           fsr0l	equ	0xFE9
 24004                           wreg	equ	0xFE8
 24005                           indf1	equ	0xFE7
 24006                           postinc1	equ	0xFE6
 24007                           postdec1	equ	0xFE5
 24008                           fsr1h	equ	0xFE2
 24009                           fsr1l	equ	0xFE1
 24010                           indf2	equ	0xFDF
 24011                           postinc2	equ	0xFDE
 24012                           postdec2	equ	0xFDD
 24013                           plusw2	equ	0xFDB
 24014                           fsr2h	equ	0xFDA
 24015                           fsr2l	equ	0xFD9
 24016                           status	equ	0xFD8
 24017                           
 24018 ;; *************** function ___lldiv *****************
 24019 ;; Defined at:
 24020 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 24021 ;; Parameters:    Size  Location     Type
 24022 ;;  dividend        4    0[BANK0 ] unsigned long 
 24023 ;;  divisor         4    4[BANK0 ] unsigned long 
 24024 ;; Auto vars:     Size  Location     Type
 24025 ;;  quotient        4    9[BANK0 ] unsigned long 
 24026 ;;  counter         1    8[BANK0 ] unsigned char 
 24027 ;; Return value:  Size  Location     Type
 24028 ;;                  4    0[BANK0 ] unsigned long 
 24029 ;; Registers used:
 24030 ;;		wreg, status,2, status,0
 24031 ;; Tracked objects:
 24032 ;;		On entry : F/0
 24033 ;;		On exit  : F/0
 24034 ;;		Unchanged: 0/0
 24035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24036 ;;      Params:         0       8       0       0       0       0       0
 24037 ;;      Locals:         0       5       0       0       0       0       0
 24038 ;;      Temps:          0       0       0       0       0       0       0
 24039 ;;      Totals:         0      13       0       0       0       0       0
 24040 ;;Total ram usage:       13 bytes
 24041 ;; Hardware stack levels used:    1
 24042 ;; Hardware stack levels required when called:    3
 24043 ;; This function calls:
 24044 ;;		Nothing
 24045 ;; This function is called by:
 24046 ;;		_sprintf
 24047 ;;		_ultoa
 24048 ;; This function uses a non-reentrant model
 24049 ;;
 24050                           
 24051                           	psect	text59
 24052  001E3C                     __ptext59:
 24053                           	opt stack 0
 24054  001E3C                     ___lldiv:
 24055                           	opt stack 23
 24056                           
 24057                           ; BSR set to: 0
 24058                           
 24059                           ; BSR set to: 0
 24060                           ;incstack = 0
 24061                           ;incstack = 0
 24062  001E3C  6B69               	clrf	___lldiv@quotient& (0+255),b
 24063  001E3E  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 24064  001E40  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 24065  001E42  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 24066                           
 24067                           ; BSR set to: 0
 24068  001E44  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24069  001E46  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 24070  001E48  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 24071  001E4A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 24072  001E4C  E029               	bz	l2387
 24073                           
 24074                           ; BSR set to: 0
 24075  001E4E  0E01               	movlw	1
 24076  001E50  6F68               	movwf	___lldiv@counter& (0+255),b
 24077  001E52  D006               	goto	l16530
 24078  001E54                     l16528:
 24079                           
 24080                           ; BSR set to: 0
 24081  001E54  90D8               	bcf	status,0,c
 24082  001E56  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 24083  001E58  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 24084  001E5A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 24085  001E5C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 24086  001E5E  2B68               	incf	___lldiv@counter& (0+255),f,b
 24087  001E60                     l16530:
 24088                           
 24089                           ; BSR set to: 0
 24090  001E60  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 24091  001E62  D7F8               	goto	l16528
 24092  001E64                     l16532:
 24093                           
 24094                           ; BSR set to: 0
 24095  001E64  90D8               	bcf	status,0,c
 24096  001E66  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 24097  001E68  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 24098  001E6A  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 24099  001E6C  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 24100                           
 24101                           ; BSR set to: 0
 24102  001E6E  5164               	movf	___lldiv@divisor& (0+255),w,b
 24103  001E70  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 24104  001E72  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24105  001E74  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 24106  001E76  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24107  001E78  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 24108  001E7A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24109  001E7C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 24110  001E7E  E309               	bnc	l16540
 24111                           
 24112                           ; BSR set to: 0
 24113  001E80  5164               	movf	___lldiv@divisor& (0+255),w,b
 24114  001E82  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 24115  001E84  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24116  001E86  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 24117  001E88  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24118  001E8A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 24119  001E8C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24120  001E8E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 24121                           
 24122                           ; BSR set to: 0
 24123  001E90  8169               	bsf	___lldiv@quotient& (0+255),0,b
 24124  001E92                     l16540:
 24125                           
 24126                           ; BSR set to: 0
 24127  001E92  90D8               	bcf	status,0,c
 24128  001E94  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 24129  001E96  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 24130  001E98  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 24131  001E9A  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 24132                           
 24133                           ; BSR set to: 0
 24134  001E9C  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 24135  001E9E  D7E2               	goto	l16532
 24136  001EA0                     l2387:
 24137                           
 24138                           ; BSR set to: 0
 24139  001EA0  C069  F060         	movff	___lldiv@quotient,?___lldiv
 24140  001EA4  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24141  001EA8  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24142  001EAC  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24143                           
 24144                           ; BSR set to: 0
 24145  001EB0  0012               	return	
 24146  001EB2                     __end_of___lldiv:
 24147                           	opt stack 0
 24148                           tblptru	equ	0xFF8
 24149                           tblptrh	equ	0xFF7
 24150                           tblptrl	equ	0xFF6
 24151                           tablat	equ	0xFF5
 24152                           prodh	equ	0xFF4
 24153                           prodl	equ	0xFF3
 24154                           intcon	equ	0xFF2
 24155                           indf0	equ	0xFEF
 24156                           postinc0	equ	0xFEE
 24157                           fsr0h	equ	0xFEA
 24158                           fsr0l	equ	0xFE9
 24159                           wreg	equ	0xFE8
 24160                           indf1	equ	0xFE7
 24161                           postinc1	equ	0xFE6
 24162                           postdec1	equ	0xFE5
 24163                           fsr1h	equ	0xFE2
 24164                           fsr1l	equ	0xFE1
 24165                           indf2	equ	0xFDF
 24166                           postinc2	equ	0xFDE
 24167                           postdec2	equ	0xFDD
 24168                           plusw2	equ	0xFDB
 24169                           fsr2h	equ	0xFDA
 24170                           fsr2l	equ	0xFD9
 24171                           status	equ	0xFD8
 24172                           
 24173 ;; *************** function _isdigit *****************
 24174 ;; Defined at:
 24175 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24176 ;; Parameters:    Size  Location     Type
 24177 ;;  c               1    wreg     unsigned char 
 24178 ;; Auto vars:     Size  Location     Type
 24179 ;;  c               1    2[BANK0 ] unsigned char 
 24180 ;; Return value:  Size  Location     Type
 24181 ;;		None               void
 24182 ;; Registers used:
 24183 ;;		wreg, status,2, status,0
 24184 ;; Tracked objects:
 24185 ;;		On entry : 0/0
 24186 ;;		On exit  : F/0
 24187 ;;		Unchanged: 0/0
 24188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24189 ;;      Params:         0       0       0       0       0       0       0
 24190 ;;      Locals:         0       2       0       0       0       0       0
 24191 ;;      Temps:          0       1       0       0       0       0       0
 24192 ;;      Totals:         0       3       0       0       0       0       0
 24193 ;;Total ram usage:        3 bytes
 24194 ;; Hardware stack levels used:    1
 24195 ;; Hardware stack levels required when called:    3
 24196 ;; This function calls:
 24197 ;;		Nothing
 24198 ;; This function is called by:
 24199 ;;		_sprintf
 24200 ;;		_atoi
 24201 ;; This function uses a non-reentrant model
 24202 ;;
 24203                           
 24204                           	psect	text60
 24205  00157C                     __ptext60:
 24206                           	opt stack 0
 24207  00157C                     _isdigit:
 24208                           	opt stack 24
 24209                           
 24210                           ; BSR set to: 0
 24211                           ;incstack = 0
 24212                           ;incstack = 0
 24213                           ;isdigit@c stored from wreg
 24214  00157C  CFE8 F062          	movff	wreg,isdigit@c
 24215  001580  0100               	movlb	0	; () banked
 24216  001582  6B61               	clrf	_isdigit$2963& (0+255),b
 24217                           
 24218                           ; BSR set to: 0
 24219  001584  0E3A               	movlw	58
 24220  001586  6162               	cpfslt	isdigit@c& (0+255),b
 24221  001588  D005               	goto	l13228
 24222                           
 24223                           ; BSR set to: 0
 24224  00158A  0E2F               	movlw	47
 24225  00158C  6562               	cpfsgt	isdigit@c& (0+255),b
 24226  00158E  D002               	goto	l13228
 24227                           
 24228                           ; BSR set to: 0
 24229  001590  0E01               	movlw	1
 24230  001592  6F61               	movwf	_isdigit$2963& (0+255),b
 24231  001594                     l13228:
 24232                           
 24233                           ; BSR set to: 0
 24234  001594  C061  F060         	movff	_isdigit$2963,??_isdigit
 24235  001598  3160               	rrcf	??_isdigit& (0+255),w,b
 24236                           
 24237                           ; BSR set to: 0
 24238  00159A  0012               	return	
 24239  00159C                     __end_of_isdigit:
 24240                           	opt stack 0
 24241                           tblptru	equ	0xFF8
 24242                           tblptrh	equ	0xFF7
 24243                           tblptrl	equ	0xFF6
 24244                           tablat	equ	0xFF5
 24245                           prodh	equ	0xFF4
 24246                           prodl	equ	0xFF3
 24247                           intcon	equ	0xFF2
 24248                           indf0	equ	0xFEF
 24249                           postinc0	equ	0xFEE
 24250                           fsr0h	equ	0xFEA
 24251                           fsr0l	equ	0xFE9
 24252                           wreg	equ	0xFE8
 24253                           indf1	equ	0xFE7
 24254                           postinc1	equ	0xFE6
 24255                           postdec1	equ	0xFE5
 24256                           fsr1h	equ	0xFE2
 24257                           fsr1l	equ	0xFE1
 24258                           indf2	equ	0xFDF
 24259                           postinc2	equ	0xFDE
 24260                           postdec2	equ	0xFDD
 24261                           plusw2	equ	0xFDB
 24262                           fsr2h	equ	0xFDA
 24263                           fsr2l	equ	0xFD9
 24264                           status	equ	0xFD8
 24265                           
 24266 ;; *************** function _printFirmwareVersion *****************
 24267 ;; Defined at:
 24268 ;;		line 2811 in file "main.c"
 24269 ;; Parameters:    Size  Location     Type
 24270 ;;		None
 24271 ;; Auto vars:     Size  Location     Type
 24272 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 24273 ;; Return value:  Size  Location     Type
 24274 ;;		None               void
 24275 ;; Registers used:
 24276 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24277 ;; Tracked objects:
 24278 ;;		On entry : 0/0
 24279 ;;		On exit  : 0/0
 24280 ;;		Unchanged: 0/0
 24281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24282 ;;      Params:         0       0       0       0       0       0       0
 24283 ;;      Locals:         0      20       0       0       0       0       0
 24284 ;;      Temps:          0       0       0       0       0       0       0
 24285 ;;      Totals:         0      20       0       0       0       0       0
 24286 ;;Total ram usage:       20 bytes
 24287 ;; Hardware stack levels used:    1
 24288 ;; Hardware stack levels required when called:    6
 24289 ;; This function calls:
 24290 ;;		_putsUSART
 24291 ;;		_WriteUSART
 24292 ;;		_itoa
 24293 ;; This function is called by:
 24294 ;;		_main
 24295 ;;		_doModeVerbose
 24296 ;; This function uses a non-reentrant model
 24297 ;;
 24298                           
 24299                           	psect	text61
 24300  0020B0                     __ptext61:
 24301                           	opt stack 0
 24302  0020B0                     _printFirmwareVersion:
 24303                           	opt stack 22
 24304                           
 24305                           ;main.c: 2812: char wrkbuf[20];
 24306                           ;main.c: 2813: putsUSART((char *) "Version: ");
 24307                           
 24308                           ; BSR set to: 0
 24309                           ;incstack = 0
 24310                           ;incstack = 0
 24311  0020B0  0E7B               	movlw	high STR_268
 24312  0020B2  0100               	movlb	0	; () banked
 24313  0020B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24314  0020B6  0E83               	movlw	low STR_268
 24315  0020B8  6F61               	movwf	?_putsUSART& (0+255),b
 24316  0020BA  EC33  F00D         	call	_putsUSART	;wreg free
 24317                           
 24318                           ;main.c: 2814: itoa(wrkbuf, 1, 10);
 24319  0020BE  0100               	movlb	0	; () banked
 24320  0020C0  D835               	call	PL58	;call to abstracted procedure
 24321  0020C2  EC46  F00B         	call	_itoa	;wreg free
 24322                           
 24323                           ; BSR set to: 0
 24324                           ;main.c: 2815: putsUSART(wrkbuf);
 24325  0020C6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24326  0020C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24327  0020CA  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24328  0020CC  6F61               	movwf	?_putsUSART& (0+255),b
 24329  0020CE  EC33  F00D         	call	_putsUSART	;wreg free
 24330  0020D2                     l1249:
 24331  0020D2  A2AC               	btfss	4012,1,c	;volatile
 24332  0020D4  D7FE               	goto	l1249
 24333                           
 24334                           ;main.c: 2817: WriteUSART('.');
 24335  0020D6  0E2E               	movlw	46
 24336  0020D8  EC7E  F00A         	call	_WriteUSART
 24337                           
 24338                           ;main.c: 2818: itoa(wrkbuf, 1, 10);
 24339  0020DC  0100               	movlb	0	; () banked
 24340  0020DE  D826               	call	PL58	;call to abstracted procedure
 24341  0020E0  EC46  F00B         	call	_itoa	;wreg free
 24342                           
 24343                           ; BSR set to: 0
 24344                           ;main.c: 2819: putsUSART(wrkbuf);
 24345  0020E4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24346  0020E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24347  0020E8  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24348  0020EA  6F61               	movwf	?_putsUSART& (0+255),b
 24349  0020EC  EC33  F00D         	call	_putsUSART	;wreg free
 24350  0020F0                     l1252:
 24351  0020F0  A2AC               	btfss	4012,1,c	;volatile
 24352  0020F2  D7FE               	goto	l1252
 24353                           
 24354                           ;main.c: 2821: WriteUSART('.');
 24355  0020F4  0E2E               	movlw	46
 24356  0020F6  EC7E  F00A         	call	_WriteUSART
 24357                           
 24358                           ;main.c: 2822: itoa(wrkbuf, 0, 10);
 24359  0020FA  0100               	movlb	0	; () banked
 24360  0020FC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24361  0020FE  6F71               	movwf	(?_itoa+1)& (0+255),b
 24362  002100  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24363  002102  6F70               	movwf	?_itoa& (0+255),b
 24364  002104  6B73               	clrf	(?_itoa+3)& (0+255),b
 24365  002106  6B72               	clrf	(?_itoa+2)& (0+255),b
 24366  002108  6B75               	clrf	(?_itoa+5)& (0+255),b
 24367  00210A  0E0A               	movlw	10
 24368  00210C  6F74               	movwf	(?_itoa+4)& (0+255),b
 24369  00210E  EC46  F00B         	call	_itoa	;wreg free
 24370                           
 24371                           ; BSR set to: 0
 24372                           ;main.c: 2823: putsUSART(wrkbuf);
 24373  002112  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24374  002114  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24375  002116  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24376  002118  6F61               	movwf	?_putsUSART& (0+255),b
 24377  00211A  EC33  F00D         	call	_putsUSART	;wreg free
 24378                           
 24379                           ;main.c: 2824: putsUSART((char *) "\r\n");
 24380  00211E  0E71               	movlw	high (STR_211+50)
 24381  002120  0100               	movlb	0	; () banked
 24382  002122  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24383  002124  0E80               	movlw	low (STR_211+50)
 24384  002126  6F61               	movwf	?_putsUSART& (0+255),b
 24385  002128  EF33  F00D         	goto	_putsUSART	;wreg free
 24386  00212C                     __end_of_printFirmwareVersion:
 24387                           	opt stack 0
 24388  00212C                     PL58:
 24389                           	opt stack 22
 24390  00212C  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24391  00212E  6F71               	movwf	(?_itoa+1)& (0+255),b
 24392  002130  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24393  002132  6F70               	movwf	?_itoa& (0+255),b
 24394  002134  6B73               	clrf	(?_itoa+3)& (0+255),b
 24395  002136  0E01               	movlw	1
 24396  002138  6F72               	movwf	(?_itoa+2)& (0+255),b
 24397  00213A  6B75               	clrf	(?_itoa+5)& (0+255),b
 24398  00213C  0E0A               	movlw	10
 24399  00213E  6F74               	movwf	(?_itoa+4)& (0+255),b
 24400  002140  0C0A               	retlw	10
 24401  002142                     __end_ofPL58:
 24402                           	opt stack 0
 24403                           tblptru	equ	0xFF8
 24404                           tblptrh	equ	0xFF7
 24405                           tblptrl	equ	0xFF6
 24406                           tablat	equ	0xFF5
 24407                           prodh	equ	0xFF4
 24408                           prodl	equ	0xFF3
 24409                           intcon	equ	0xFF2
 24410                           indf0	equ	0xFEF
 24411                           postinc0	equ	0xFEE
 24412                           fsr0h	equ	0xFEA
 24413                           fsr0l	equ	0xFE9
 24414                           wreg	equ	0xFE8
 24415                           indf1	equ	0xFE7
 24416                           postinc1	equ	0xFE6
 24417                           postdec1	equ	0xFE5
 24418                           fsr1h	equ	0xFE2
 24419                           fsr1l	equ	0xFE1
 24420                           indf2	equ	0xFDF
 24421                           postinc2	equ	0xFDE
 24422                           postdec2	equ	0xFDD
 24423                           plusw2	equ	0xFDB
 24424                           fsr2h	equ	0xFDA
 24425                           fsr2l	equ	0xFD9
 24426                           status	equ	0xFD8
 24427                           
 24428 ;; *************** function _itoa *****************
 24429 ;; Defined at:
 24430 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24431 ;; Parameters:    Size  Location     Type
 24432 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24433 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24434 ;;  val             2   18[BANK0 ] int 
 24435 ;;  base            2   20[BANK0 ] int 
 24436 ;; Auto vars:     Size  Location     Type
 24437 ;;  cp              2    0        PTR unsigned char 
 24438 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24439 ;; Return value:  Size  Location     Type
 24440 ;;                  2   16[BANK0 ] PTR unsigned char 
 24441 ;; Registers used:
 24442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24443 ;; Tracked objects:
 24444 ;;		On entry : F/0
 24445 ;;		On exit  : F/0
 24446 ;;		Unchanged: 0/0
 24447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24448 ;;      Params:         0       6       0       0       0       0       0
 24449 ;;      Locals:         0       2       0       0       0       0       0
 24450 ;;      Temps:          0       0       0       0       0       0       0
 24451 ;;      Totals:         0       8       0       0       0       0       0
 24452 ;;Total ram usage:        8 bytes
 24453 ;; Hardware stack levels used:    1
 24454 ;; Hardware stack levels required when called:    5
 24455 ;; This function calls:
 24456 ;;		_utoa
 24457 ;; This function is called by:
 24458 ;;		_receiveSendEventSLCAN
 24459 ;;		_findNodes
 24460 ;;		_printGUID
 24461 ;;		_printNodeFirmwareVersion
 24462 ;;		_printFirmwareVersion
 24463 ;; This function uses a non-reentrant model
 24464 ;;
 24465                           
 24466                           	psect	text62
 24467  00168C                     __ptext62:
 24468                           	opt stack 0
 24469  00168C                     _itoa:
 24470                           	opt stack 22
 24471                           
 24472                           ; BSR set to: 0
 24473                           
 24474                           ;incstack = 0
 24475                           ;incstack = 0
 24476  00168C  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24477  00168E  D00C               	goto	l16418
 24478                           
 24479                           ; BSR set to: 0
 24480  001690  C070  FFD9         	movff	itoa@buf,fsr2l
 24481  001694  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24482  001698  0E2D               	movlw	45
 24483  00169A  6EDF               	movwf	indf2,c
 24484                           
 24485                           ; BSR set to: 0
 24486  00169C  4B70               	infsnz	itoa@buf& (0+255),f,b
 24487  00169E  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24488                           
 24489                           ; BSR set to: 0
 24490  0016A0  6D72               	negf	itoa@val& (0+255),b
 24491  0016A2  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24492  0016A4  B0D8               	btfsc	status,0,c
 24493  0016A6  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24494  0016A8                     l16418:
 24495                           
 24496                           ; BSR set to: 0
 24497  0016A8  C070  F067         	movff	itoa@buf,?_utoa
 24498  0016AC  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24499  0016B0  C072  F069         	movff	itoa@val,?_utoa+2
 24500  0016B4  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24501  0016B8  C074  F06B         	movff	itoa@base,?_utoa+4
 24502  0016BC  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24503  0016C0  EF81  F011         	goto	_utoa	;wreg free
 24504  0016C4                     __end_of_itoa:
 24505                           	opt stack 0
 24506                           tblptru	equ	0xFF8
 24507                           tblptrh	equ	0xFF7
 24508                           tblptrl	equ	0xFF6
 24509                           tablat	equ	0xFF5
 24510                           prodh	equ	0xFF4
 24511                           prodl	equ	0xFF3
 24512                           intcon	equ	0xFF2
 24513                           indf0	equ	0xFEF
 24514                           postinc0	equ	0xFEE
 24515                           fsr0h	equ	0xFEA
 24516                           fsr0l	equ	0xFE9
 24517                           wreg	equ	0xFE8
 24518                           indf1	equ	0xFE7
 24519                           postinc1	equ	0xFE6
 24520                           postdec1	equ	0xFE5
 24521                           fsr1h	equ	0xFE2
 24522                           fsr1l	equ	0xFE1
 24523                           indf2	equ	0xFDF
 24524                           postinc2	equ	0xFDE
 24525                           postdec2	equ	0xFDD
 24526                           plusw2	equ	0xFDB
 24527                           fsr2h	equ	0xFDA
 24528                           fsr2l	equ	0xFD9
 24529                           status	equ	0xFD8
 24530                           
 24531 ;; *************** function _utoa *****************
 24532 ;; Defined at:
 24533 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24534 ;; Parameters:    Size  Location     Type
 24535 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24536 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24537 ;;  val             2    9[BANK0 ] unsigned int 
 24538 ;;  base            2   11[BANK0 ] int 
 24539 ;; Auto vars:     Size  Location     Type
 24540 ;;  v               2   13[BANK0 ] unsigned int 
 24541 ;;  c               1   15[BANK0 ] unsigned char 
 24542 ;; Return value:  Size  Location     Type
 24543 ;;                  2    7[BANK0 ] PTR unsigned char 
 24544 ;; Registers used:
 24545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24546 ;; Tracked objects:
 24547 ;;		On entry : F/0
 24548 ;;		On exit  : F/0
 24549 ;;		Unchanged: 0/0
 24550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24551 ;;      Params:         0       6       0       0       0       0       0
 24552 ;;      Locals:         0       3       0       0       0       0       0
 24553 ;;      Temps:          0       0       0       0       0       0       0
 24554 ;;      Totals:         0       9       0       0       0       0       0
 24555 ;;Total ram usage:        9 bytes
 24556 ;; Hardware stack levels used:    1
 24557 ;; Hardware stack levels required when called:    4
 24558 ;; This function calls:
 24559 ;;		___lwdiv
 24560 ;;		___lwmod
 24561 ;; This function is called by:
 24562 ;;		_itoa
 24563 ;; This function uses a non-reentrant model
 24564 ;;
 24565                           
 24566                           	psect	text63
 24567  002302                     __ptext63:
 24568                           	opt stack 0
 24569  002302                     _utoa:
 24570                           	opt stack 22
 24571                           
 24572                           ; BSR set to: 0
 24573                           
 24574                           ; BSR set to: 0
 24575                           ;incstack = 0
 24576                           ;incstack = 0
 24577  002302  C069  F06D         	movff	utoa@val,utoa@v
 24578  002306  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24579  00230A                     l16494:
 24580                           
 24581                           ; BSR set to: 0
 24582  00230A  C06D  F060         	movff	utoa@v,?___lwdiv
 24583  00230E  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24584  002312  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24585  002316  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24586  00231A  ECC2  F00C         	call	___lwdiv	;wreg free
 24587  00231E  C060  F06D         	movff	?___lwdiv,utoa@v
 24588  002322  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24589                           
 24590                           ; BSR set to: 0
 24591  002326  4B67               	infsnz	utoa@buf& (0+255),f,b
 24592  002328  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24593                           
 24594                           ; BSR set to: 0
 24595  00232A  516E               	movf	(utoa@v+1)& (0+255),w,b
 24596  00232C  116D               	iorwf	utoa@v& (0+255),w,b
 24597  00232E  E1ED               	bnz	l16494
 24598                           
 24599                           ; BSR set to: 0
 24600  002330  C067  FFD9         	movff	utoa@buf,fsr2l
 24601  002334  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24602  002338  0E00               	movlw	0
 24603  00233A  6ADF               	clrf	indf2,c
 24604                           
 24605                           ; BSR set to: 0
 24606  00233C  0767               	decf	utoa@buf& (0+255),f,b
 24607  00233E  A0D8               	btfss	status,0,c
 24608  002340  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24609  002342                     l16504:
 24610                           
 24611                           ; BSR set to: 0
 24612  002342  C069  F060         	movff	utoa@val,?___lwmod
 24613  002346  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24614  00234A  C06B  F062         	movff	utoa@base,?___lwmod+2
 24615  00234E  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24616  002352  EC9B  F00B         	call	___lwmod	;wreg free
 24617  002356  5160               	movf	?___lwmod& (0+255),w,b
 24618  002358  6F6F               	movwf	utoa@c& (0+255),b
 24619                           
 24620                           ; BSR set to: 0
 24621  00235A  C069  F060         	movff	utoa@val,?___lwdiv
 24622  00235E  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24623  002362  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24624  002366  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24625  00236A  ECC2  F00C         	call	___lwdiv	;wreg free
 24626  00236E  C060  F069         	movff	?___lwdiv,utoa@val
 24627  002372  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24628                           
 24629                           ; BSR set to: 0
 24630  002376  0E09               	movlw	9
 24631  002378  656F               	cpfsgt	utoa@c& (0+255),b
 24632  00237A  D002               	goto	l2356
 24633                           
 24634                           ; BSR set to: 0
 24635  00237C  0E07               	movlw	7
 24636  00237E  276F               	addwf	utoa@c& (0+255),f,b
 24637  002380                     l2356:
 24638                           
 24639                           ; BSR set to: 0
 24640  002380  0E30               	movlw	48
 24641  002382  276F               	addwf	utoa@c& (0+255),f,b
 24642                           
 24643                           ; BSR set to: 0
 24644  002384  C067  FFD9         	movff	utoa@buf,fsr2l
 24645  002388  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24646  00238C  C06F  FFDF         	movff	utoa@c,indf2
 24647                           
 24648                           ; BSR set to: 0
 24649  002390  0767               	decf	utoa@buf& (0+255),f,b
 24650  002392  A0D8               	btfss	status,0,c
 24651  002394  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24652                           
 24653                           ; BSR set to: 0
 24654  002396  516A               	movf	(utoa@val+1)& (0+255),w,b
 24655  002398  1169               	iorwf	utoa@val& (0+255),w,b
 24656  00239A  E1D3               	bnz	l16504
 24657                           
 24658                           ; BSR set to: 0
 24659                           ;	Return value of _utoa is never used
 24660  00239C  4B67               	infsnz	utoa@buf& (0+255),f,b
 24661  00239E  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24662                           
 24663                           ; BSR set to: 0
 24664  0023A0  0012               	return	
 24665  0023A2                     __end_of_utoa:
 24666                           	opt stack 0
 24667                           tblptru	equ	0xFF8
 24668                           tblptrh	equ	0xFF7
 24669                           tblptrl	equ	0xFF6
 24670                           tablat	equ	0xFF5
 24671                           prodh	equ	0xFF4
 24672                           prodl	equ	0xFF3
 24673                           intcon	equ	0xFF2
 24674                           indf0	equ	0xFEF
 24675                           postinc0	equ	0xFEE
 24676                           fsr0h	equ	0xFEA
 24677                           fsr0l	equ	0xFE9
 24678                           wreg	equ	0xFE8
 24679                           indf1	equ	0xFE7
 24680                           postinc1	equ	0xFE6
 24681                           postdec1	equ	0xFE5
 24682                           fsr1h	equ	0xFE2
 24683                           fsr1l	equ	0xFE1
 24684                           indf2	equ	0xFDF
 24685                           postinc2	equ	0xFDE
 24686                           postdec2	equ	0xFDD
 24687                           plusw2	equ	0xFDB
 24688                           fsr2h	equ	0xFDA
 24689                           fsr2l	equ	0xFD9
 24690                           status	equ	0xFD8
 24691                           
 24692 ;; *************** function ___lwmod *****************
 24693 ;; Defined at:
 24694 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24695 ;; Parameters:    Size  Location     Type
 24696 ;;  dividend        2    0[BANK0 ] unsigned int 
 24697 ;;  divisor         2    2[BANK0 ] unsigned int 
 24698 ;; Auto vars:     Size  Location     Type
 24699 ;;  counter         1    4[BANK0 ] unsigned char 
 24700 ;; Return value:  Size  Location     Type
 24701 ;;                  2    0[BANK0 ] unsigned int 
 24702 ;; Registers used:
 24703 ;;		wreg, status,2, status,0
 24704 ;; Tracked objects:
 24705 ;;		On entry : F/0
 24706 ;;		On exit  : F/0
 24707 ;;		Unchanged: 0/0
 24708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24709 ;;      Params:         0       4       0       0       0       0       0
 24710 ;;      Locals:         0       1       0       0       0       0       0
 24711 ;;      Temps:          0       0       0       0       0       0       0
 24712 ;;      Totals:         0       5       0       0       0       0       0
 24713 ;;Total ram usage:        5 bytes
 24714 ;; Hardware stack levels used:    1
 24715 ;; Hardware stack levels required when called:    3
 24716 ;; This function calls:
 24717 ;;		Nothing
 24718 ;; This function is called by:
 24719 ;;		_utoa
 24720 ;; This function uses a non-reentrant model
 24721 ;;
 24722                           
 24723                           	psect	text64
 24724  001736                     __ptext64:
 24725                           	opt stack 0
 24726  001736                     ___lwmod:
 24727                           	opt stack 22
 24728                           
 24729                           ; BSR set to: 0
 24730                           
 24731                           ; BSR set to: 0
 24732                           ;incstack = 0
 24733                           ;incstack = 0
 24734  001736  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24735  001738  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24736  00173A  E017               	bz	l2480
 24737                           
 24738                           ; BSR set to: 0
 24739  00173C  0E01               	movlw	1
 24740  00173E  6F64               	movwf	___lwmod@counter& (0+255),b
 24741  001740  D004               	goto	l16588
 24742  001742                     l16586:
 24743                           
 24744                           ; BSR set to: 0
 24745  001742  90D8               	bcf	status,0,c
 24746  001744  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24747  001746  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24748  001748  2B64               	incf	___lwmod@counter& (0+255),f,b
 24749  00174A                     l16588:
 24750                           
 24751                           ; BSR set to: 0
 24752  00174A  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24753  00174C  D7FA               	goto	l16586
 24754  00174E                     l16590:
 24755                           
 24756                           ; BSR set to: 0
 24757  00174E  5162               	movf	___lwmod@divisor& (0+255),w,b
 24758  001750  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24759  001752  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24760  001754  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24761  001756  E304               	bnc	l16594
 24762                           
 24763                           ; BSR set to: 0
 24764  001758  5162               	movf	___lwmod@divisor& (0+255),w,b
 24765  00175A  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24766  00175C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24767  00175E  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24768  001760                     l16594:
 24769                           
 24770                           ; BSR set to: 0
 24771  001760  90D8               	bcf	status,0,c
 24772  001762  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24773  001764  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24774                           
 24775                           ; BSR set to: 0
 24776  001766  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24777  001768  D7F2               	goto	l16590
 24778  00176A                     l2480:
 24779                           
 24780                           ; BSR set to: 0
 24781  00176A  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24782  00176E  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24783                           
 24784                           ; BSR set to: 0
 24785  001772  0012               	return	
 24786  001774                     __end_of___lwmod:
 24787                           	opt stack 0
 24788                           tblptru	equ	0xFF8
 24789                           tblptrh	equ	0xFF7
 24790                           tblptrl	equ	0xFF6
 24791                           tablat	equ	0xFF5
 24792                           prodh	equ	0xFF4
 24793                           prodl	equ	0xFF3
 24794                           intcon	equ	0xFF2
 24795                           indf0	equ	0xFEF
 24796                           postinc0	equ	0xFEE
 24797                           fsr0h	equ	0xFEA
 24798                           fsr0l	equ	0xFE9
 24799                           wreg	equ	0xFE8
 24800                           indf1	equ	0xFE7
 24801                           postinc1	equ	0xFE6
 24802                           postdec1	equ	0xFE5
 24803                           fsr1h	equ	0xFE2
 24804                           fsr1l	equ	0xFE1
 24805                           indf2	equ	0xFDF
 24806                           postinc2	equ	0xFDE
 24807                           postdec2	equ	0xFDD
 24808                           plusw2	equ	0xFDB
 24809                           fsr2h	equ	0xFDA
 24810                           fsr2l	equ	0xFD9
 24811                           status	equ	0xFD8
 24812                           
 24813 ;; *************** function ___lwdiv *****************
 24814 ;; Defined at:
 24815 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24816 ;; Parameters:    Size  Location     Type
 24817 ;;  dividend        2    0[BANK0 ] unsigned int 
 24818 ;;  divisor         2    2[BANK0 ] unsigned int 
 24819 ;; Auto vars:     Size  Location     Type
 24820 ;;  quotient        2    5[BANK0 ] unsigned int 
 24821 ;;  counter         1    4[BANK0 ] unsigned char 
 24822 ;; Return value:  Size  Location     Type
 24823 ;;                  2    0[BANK0 ] unsigned int 
 24824 ;; Registers used:
 24825 ;;		wreg, status,2, status,0
 24826 ;; Tracked objects:
 24827 ;;		On entry : F/0
 24828 ;;		On exit  : F/0
 24829 ;;		Unchanged: 0/0
 24830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24831 ;;      Params:         0       4       0       0       0       0       0
 24832 ;;      Locals:         0       3       0       0       0       0       0
 24833 ;;      Temps:          0       0       0       0       0       0       0
 24834 ;;      Totals:         0       7       0       0       0       0       0
 24835 ;;Total ram usage:        7 bytes
 24836 ;; Hardware stack levels used:    1
 24837 ;; Hardware stack levels required when called:    3
 24838 ;; This function calls:
 24839 ;;		Nothing
 24840 ;; This function is called by:
 24841 ;;		_utoa
 24842 ;; This function uses a non-reentrant model
 24843 ;;
 24844                           
 24845                           	psect	text65
 24846  001984                     __ptext65:
 24847                           	opt stack 0
 24848  001984                     ___lwdiv:
 24849                           	opt stack 22
 24850                           
 24851                           ; BSR set to: 0
 24852                           
 24853                           ; BSR set to: 0
 24854                           ;incstack = 0
 24855                           ;incstack = 0
 24856  001984  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24857  001986  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24858                           
 24859                           ; BSR set to: 0
 24860  001988  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24861  00198A  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24862  00198C  E01B               	bz	l2470
 24863                           
 24864                           ; BSR set to: 0
 24865  00198E  0E01               	movlw	1
 24866  001990  6F64               	movwf	___lwdiv@counter& (0+255),b
 24867  001992  D004               	goto	l16568
 24868  001994                     l16566:
 24869                           
 24870                           ; BSR set to: 0
 24871  001994  90D8               	bcf	status,0,c
 24872  001996  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24873  001998  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24874  00199A  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24875  00199C                     l16568:
 24876                           
 24877                           ; BSR set to: 0
 24878  00199C  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24879  00199E  D7FA               	goto	l16566
 24880  0019A0                     l16570:
 24881                           
 24882                           ; BSR set to: 0
 24883  0019A0  90D8               	bcf	status,0,c
 24884  0019A2  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24885  0019A4  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24886                           
 24887                           ; BSR set to: 0
 24888  0019A6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24889  0019A8  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24890  0019AA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24891  0019AC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24892  0019AE  E305               	bnc	l16578
 24893                           
 24894                           ; BSR set to: 0
 24895  0019B0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24896  0019B2  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24897  0019B4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24898  0019B6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24899                           
 24900                           ; BSR set to: 0
 24901  0019B8  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24902  0019BA                     l16578:
 24903                           
 24904                           ; BSR set to: 0
 24905  0019BA  90D8               	bcf	status,0,c
 24906  0019BC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24907  0019BE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24908                           
 24909                           ; BSR set to: 0
 24910  0019C0  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24911  0019C2  D7EE               	goto	l16570
 24912  0019C4                     l2470:
 24913                           
 24914                           ; BSR set to: 0
 24915  0019C4  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24916  0019C8  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24917                           
 24918                           ; BSR set to: 0
 24919  0019CC  0012               	return	
 24920  0019CE                     __end_of___lwdiv:
 24921                           	opt stack 0
 24922                           tblptru	equ	0xFF8
 24923                           tblptrh	equ	0xFF7
 24924                           tblptrl	equ	0xFF6
 24925                           tablat	equ	0xFF5
 24926                           prodh	equ	0xFF4
 24927                           prodl	equ	0xFF3
 24928                           intcon	equ	0xFF2
 24929                           indf0	equ	0xFEF
 24930                           postinc0	equ	0xFEE
 24931                           fsr0h	equ	0xFEA
 24932                           fsr0l	equ	0xFE9
 24933                           wreg	equ	0xFE8
 24934                           indf1	equ	0xFE7
 24935                           postinc1	equ	0xFE6
 24936                           postdec1	equ	0xFE5
 24937                           fsr1h	equ	0xFE2
 24938                           fsr1l	equ	0xFE1
 24939                           indf2	equ	0xFDF
 24940                           postinc2	equ	0xFDE
 24941                           postdec2	equ	0xFDD
 24942                           plusw2	equ	0xFDB
 24943                           fsr2h	equ	0xFDA
 24944                           fsr2l	equ	0xFD9
 24945                           status	equ	0xFD8
 24946                           
 24947 ;; *************** function _printMode *****************
 24948 ;; Defined at:
 24949 ;;		line 2832 in file "main.c"
 24950 ;; Parameters:    Size  Location     Type
 24951 ;;		None
 24952 ;; Auto vars:     Size  Location     Type
 24953 ;;		None
 24954 ;; Return value:  Size  Location     Type
 24955 ;;		None               void
 24956 ;; Registers used:
 24957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24958 ;; Tracked objects:
 24959 ;;		On entry : 0/0
 24960 ;;		On exit  : 0/0
 24961 ;;		Unchanged: 0/0
 24962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24963 ;;      Params:         0       0       0       0       0       0       0
 24964 ;;      Locals:         0       0       0       0       0       0       0
 24965 ;;      Temps:          0       0       0       0       0       0       0
 24966 ;;      Totals:         0       0       0       0       0       0       0
 24967 ;;Total ram usage:        0 bytes
 24968 ;; Hardware stack levels used:    1
 24969 ;; Hardware stack levels required when called:    5
 24970 ;; This function calls:
 24971 ;;		_putsUSART
 24972 ;; This function is called by:
 24973 ;;		_main
 24974 ;; This function uses a non-reentrant model
 24975 ;;
 24976                           
 24977                           	psect	text66
 24978  001F2A                     __ptext66:
 24979                           	opt stack 0
 24980  001F2A                     _printMode:
 24981                           	opt stack 24
 24982                           
 24983                           ;main.c: 2833: putsUSART((char *) "Mode: ");
 24984                           
 24985                           ; BSR set to: 0
 24986                           ;incstack = 0
 24987                           ;incstack = 0
 24988  001F2A  0E7C               	movlw	high STR_270
 24989  001F2C  0100               	movlb	0	; () banked
 24990  001F2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24991  001F30  0E14               	movlw	low STR_270
 24992  001F32  6F61               	movwf	?_putsUSART& (0+255),b
 24993  001F34  EC33  F00D         	call	_putsUSART	;wreg free
 24994                           
 24995                           ;main.c: 2834: if (0 == mode) {
 24996  001F38  6632               	tstfsz	_mode,c
 24997  001F3A  D008               	goto	l13714
 24998                           
 24999                           ;main.c: 2835: putsUSART((char *) "Verbose");
 25000  001F3C  0E7C               	movlw	high STR_271
 25001  001F3E  0100               	movlb	0	; () banked
 25002  001F40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25003  001F42  0E0C               	movlw	low STR_271
 25004  001F44  6F61               	movwf	?_putsUSART& (0+255),b
 25005  001F46  EC33  F00D         	call	_putsUSART	;wreg free
 25006                           
 25007                           ;main.c: 2836: } else if (1 == mode) {
 25008  001F4A  D027               	goto	l1259
 25009  001F4C                     l13714:
 25010  001F4C  0432               	decf	_mode,w,c
 25011  001F4E  E108               	bnz	l13718
 25012                           
 25013                           ;main.c: 2837: putsUSART((char *) "VSCP Driver");
 25014  001F50  0E7B               	movlw	high STR_272
 25015  001F52  0100               	movlb	0	; () banked
 25016  001F54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25017  001F56  0E57               	movlw	low STR_272
 25018  001F58  6F61               	movwf	?_putsUSART& (0+255),b
 25019  001F5A  EC33  F00D         	call	_putsUSART	;wreg free
 25020                           
 25021                           ;main.c: 2838: } else if (2 == mode) {
 25022  001F5E  D01D               	goto	l1259
 25023  001F60                     l13718:
 25024  001F60  5032               	movf	_mode,w,c
 25025  001F62  0A02               	xorlw	2
 25026  001F64  E108               	bnz	l13722
 25027                           
 25028                           ;main.c: 2839: putsUSART((char *) "SL Driver");
 25029  001F66  0E7B               	movlw	high STR_273
 25030  001F68  0100               	movlb	0	; () banked
 25031  001F6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25032  001F6C  0E97               	movlw	low STR_273
 25033  001F6E  6F61               	movwf	?_putsUSART& (0+255),b
 25034  001F70  EC33  F00D         	call	_putsUSART	;wreg free
 25035                           
 25036                           ;main.c: 2840: } else if (3 == mode) {
 25037  001F74  D012               	goto	l1259
 25038  001F76                     l13722:
 25039  001F76  5032               	movf	_mode,w,c
 25040  001F78  0A03               	xorlw	3
 25041  001F7A  E108               	bnz	l13726
 25042                           
 25043                           ;main.c: 2841: putsUSART((char *) "VSCP Node");
 25044  001F7C  0E7B               	movlw	high STR_274
 25045  001F7E  0100               	movlb	0	; () banked
 25046  001F80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25047  001F82  0E8D               	movlw	low STR_274
 25048  001F84  6F61               	movwf	?_putsUSART& (0+255),b
 25049  001F86  EC33  F00D         	call	_putsUSART	;wreg free
 25050                           
 25051                           ;main.c: 2842: } else {
 25052  001F8A  D007               	goto	l1259
 25053  001F8C                     l13726:
 25054                           
 25055                           ;main.c: 2843: putsUSART((char *) "Unknown (Verbose used)");
 25056  001F8C  0E79               	movlw	high STR_275
 25057  001F8E  0100               	movlb	0	; () banked
 25058  001F90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25059  001F92  0EAC               	movlw	low STR_275
 25060  001F94  6F61               	movwf	?_putsUSART& (0+255),b
 25061  001F96  EC33  F00D         	call	_putsUSART	;wreg free
 25062  001F9A                     l1259:
 25063                           
 25064                           ;main.c: 2844: }
 25065                           ;main.c: 2845: putsUSART((char *) "\r\n");
 25066  001F9A  0E71               	movlw	high (STR_211+50)
 25067  001F9C  0100               	movlb	0	; () banked
 25068  001F9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25069  001FA0  0E80               	movlw	low (STR_211+50)
 25070  001FA2  6F61               	movwf	?_putsUSART& (0+255),b
 25071  001FA4  EF33  F00D         	goto	_putsUSART	;wreg free
 25072  001FA8                     __end_of_printMode:
 25073                           	opt stack 0
 25074                           tblptru	equ	0xFF8
 25075                           tblptrh	equ	0xFF7
 25076                           tblptrl	equ	0xFF6
 25077                           tablat	equ	0xFF5
 25078                           prodh	equ	0xFF4
 25079                           prodl	equ	0xFF3
 25080                           intcon	equ	0xFF2
 25081                           indf0	equ	0xFEF
 25082                           postinc0	equ	0xFEE
 25083                           fsr0h	equ	0xFEA
 25084                           fsr0l	equ	0xFE9
 25085                           wreg	equ	0xFE8
 25086                           indf1	equ	0xFE7
 25087                           postinc1	equ	0xFE6
 25088                           postdec1	equ	0xFE5
 25089                           fsr1h	equ	0xFE2
 25090                           fsr1l	equ	0xFE1
 25091                           indf2	equ	0xFDF
 25092                           postinc2	equ	0xFDE
 25093                           postdec2	equ	0xFDD
 25094                           plusw2	equ	0xFDB
 25095                           fsr2h	equ	0xFDA
 25096                           fsr2l	equ	0xFD9
 25097                           status	equ	0xFD8
 25098                           
 25099 ;; *************** function _putsUSART *****************
 25100 ;; Defined at:
 25101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25102 ;; Parameters:    Size  Location     Type
 25103 ;;  data            2    1[BANK0 ] PTR unsigned char 
 25104 ;;		 -> STR_276(3), STR_275(23), STR_274(10), STR_273(10), 
 25105 ;;		 -> STR_272(12), STR_271(8), STR_270(7), STR_269(3), 
 25106 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_268(10), STR_267(3), STR_264(20), 
 25107 ;;		 -> STR_263(3), STR_262(14), STR_261(3), STR_257(8), 
 25108 ;;		 -> STR_256(15), STR_255(67), STR_254(3), STR_253(27), 
 25109 ;;		 -> STR_252(67), STR_251(39), STR_250(62), STR_249(55), 
 25110 ;;		 -> STR_248(49), STR_247(67), STR_246(47), STR_245(47), 
 25111 ;;		 -> STR_244(34), STR_243(71), STR_242(20), STR_241(78), 
 25112 ;;		 -> STR_240(24), STR_239(77), STR_238(74), STR_237(76), 
 25113 ;;		 -> STR_236(47), STR_235(40), STR_234(39), STR_233(33), 
 25114 ;;		 -> STR_232(23), STR_231(56), STR_230(24), STR_229(44), 
 25115 ;;		 -> STR_228(50), STR_227(31), STR_226(50), STR_225(51), 
 25116 ;;		 -> STR_224(46), STR_223(44), STR_222(27), STR_221(39), 
 25117 ;;		 -> STR_220(39), STR_219(52), STR_218(54), STR_217(55), 
 25118 ;;		 -> STR_216(3), STR_213(24), STR_212(57), STR_211(53), 
 25119 ;;		 -> STR_210(58), STR_209(3), STR_206(25), STR_205(3), 
 25120 ;;		 -> STR_202(24), STR_201(3), STR_198(24), STR_197(3), 
 25121 ;;		 -> STR_194(24), STR_193(3), STR_190(23), STR_189(3), 
 25122 ;;		 -> STR_186(21), STR_185(3), STR_182(22), STR_181(3), 
 25123 ;;		 -> STR_178(17), STR_177(3), STR_174(18), STR_173(4), 
 25124 ;;		 -> STR_172(11), STR_171(2), STR_168(7), STR_165(7), 
 25125 ;;		 -> STR_162(9), STR_159(7), STR_156(8), STR_153(7), 
 25126 ;;		 -> STR_152(2), STR_151(2), STR_150(6), STR_149(8), 
 25127 ;;		 -> STR_148(8), STR_147(20), STR_146(27), STR_145(6), 
 25128 ;;		 -> STR_144(33), STR_141(26), STR_139(32), STR_137(28), 
 25129 ;;		 -> STR_133(6), STR_131(40), STR_129(44), STR_126(6), 
 25130 ;;		 -> STR_125(39), STR_123(36), STR_121(37), STR_119(40), 
 25131 ;;		 -> STR_117(37), STR_116(50), STR_113(6), STR_112(41), 
 25132 ;;		 -> STR_110(38), STR_108(39), STR_106(42), STR_104(39), 
 25133 ;;		 -> STR_103(66), STR_100(6), STR_99(3), STR_96(20), 
 25134 ;;		 -> STR_92(8), STR_91(36), STR_88(8), STR_87(38), 
 25135 ;;		 -> STR_86(24), STR_84(33), STR_82(24), STR_79(54), 
 25136 ;;		 -> STR_78(6), STR_77(3), STR_72(25), STR_69(17), 
 25137 ;;		 -> STR_68(3), STR_67(4), STR_66(3), STR_63(4), 
 25138 ;;		 -> STR_58(15), wrkbuf(80), STR_55(14), STR_53(33), 
 25139 ;;		 -> STR_51(24), STR_48(6), STR_46(6), STR_44(6), 
 25140 ;;		 -> STR_42(6), STR_40(18), STR_39(6), STR_37(33), 
 25141 ;;		 -> STR_36(6), STR_28(24), STR_27(18), STR_26(20), 
 25142 ;;		 -> STR_25(25), STR_24(22), STR_23(19), STR_22(20), 
 25143 ;;		 -> STR_21(20), STR_19(6), STR_17(6), STR_15(6), 
 25144 ;;		 -> STR_13(6), STR_11(6), STR_9(6), STR_7(31), 
 25145 ;;		 -> STR_5(29), STR_4(55), STR_3(35), STR_2(58), 
 25146 ;;		 -> STR_1(37), 
 25147 ;; Auto vars:     Size  Location     Type
 25148 ;;		None
 25149 ;; Return value:  Size  Location     Type
 25150 ;;		None               void
 25151 ;; Registers used:
 25152 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25153 ;; Tracked objects:
 25154 ;;		On entry : F/0
 25155 ;;		On exit  : 0/0
 25156 ;;		Unchanged: 0/0
 25157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25158 ;;      Params:         0       2       0       0       0       0       0
 25159 ;;      Locals:         0       0       0       0       0       0       0
 25160 ;;      Temps:          0       2       0       0       0       0       0
 25161 ;;      Totals:         0       4       0       0       0       0       0
 25162 ;;Total ram usage:        4 bytes
 25163 ;; Hardware stack levels used:    1
 25164 ;; Hardware stack levels required when called:    4
 25165 ;; This function calls:
 25166 ;;		_WriteUSART
 25167 ;; This function is called by:
 25168 ;;		_main
 25169 ;;		_doModeVerbose
 25170 ;;		_doModeSLCAN
 25171 ;;		_receivePrintEventVerbose
 25172 ;;		_receiveSendEventSLCAN
 25173 ;;		_printStatistics
 25174 ;;		_printErrors
 25175 ;;		_printHelp
 25176 ;;		_findNodes
 25177 ;;		_printGUID
 25178 ;;		_printMDF
 25179 ;;		_printNodeFirmwareVersion
 25180 ;;		_printFirmwareVersion
 25181 ;;		_printMode
 25182 ;; This function uses a non-reentrant model
 25183 ;;
 25184                           
 25185                           	psect	text67
 25186  001A66                     __ptext67:
 25187                           	opt stack 0
 25188  001A66                     _putsUSART:
 25189                           	opt stack 23
 25190  001A66                     l1872:
 25191  001A66  A2AC               	btfss	4012,1,c	;volatile
 25192  001A68  D7FE               	goto	l1872
 25193  001A6A  0100               	movlb	0	; () banked
 25194  001A6C  5161               	movf	putsUSART@data& (0+255),w,b
 25195  001A6E  6EF6               	movwf	tblptrl,c
 25196  001A70  6EE9               	movwf	fsr0l,c
 25197  001A72  0E05               	movlw	(high __ramtop+-1)
 25198  001A74  6EEA               	movwf	fsr0h,c
 25199  001A76  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25200  001A78  64EA               	cpfsgt	fsr0h,c
 25201  001A7A  D003               	bra	u18067
 25202  001A7C  6EEA               	movwf	fsr0h,c
 25203  001A7E  50EF               	movf	indf0,w,c
 25204  001A80  D003               	bra	u18060
 25205  001A82                     u18067:
 25206  001A82  6EF7               	movwf	tblptrh,c
 25207  001A84  0008               	tblrd		*
 25208  001A86  50F5               	movf	tablat,w,c
 25209  001A88                     u18060:
 25210  001A88  EC7E  F00A         	call	_WriteUSART
 25211  001A8C  0100               	movlb	0	; () banked
 25212  001A8E  5161               	movf	putsUSART@data& (0+255),w,b
 25213  001A90  6F63               	movwf	??_putsUSART& (0+255),b
 25214  001A92  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25215  001A94  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25216  001A96  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25217  001A98  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25218  001A9A  5163               	movf	??_putsUSART& (0+255),w,b
 25219  001A9C  6EF6               	movwf	tblptrl,c
 25220  001A9E  6EE9               	movwf	fsr0l,c
 25221  001AA0  0E05               	movlw	(high __ramtop+-1)
 25222  001AA2  6EEA               	movwf	fsr0h,c
 25223  001AA4  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25224  001AA6  64EA               	cpfsgt	fsr0h,c
 25225  001AA8  D003               	bra	u18077
 25226  001AAA  6EEA               	movwf	fsr0h,c
 25227  001AAC  50EF               	movf	indf0,w,c
 25228  001AAE  D003               	bra	u18070
 25229  001AB0                     u18077:
 25230  001AB0  6EF7               	movwf	tblptrh,c
 25231  001AB2  0008               	tblrd		*
 25232  001AB4  50F5               	movf	tablat,w,c
 25233  001AB6                     u18070:
 25234  001AB6  0900               	iorlw	0
 25235  001AB8  B4D8               	btfsc	status,2,c
 25236  001ABA  0012               	return	
 25237  001ABC  D7D4               	goto	l1872
 25238  001ABE                     __end_of_putsUSART:
 25239                           	opt stack 0
 25240                           tblptru	equ	0xFF8
 25241                           tblptrh	equ	0xFF7
 25242                           tblptrl	equ	0xFF6
 25243                           tablat	equ	0xFF5
 25244                           prodh	equ	0xFF4
 25245                           prodl	equ	0xFF3
 25246                           intcon	equ	0xFF2
 25247                           indf0	equ	0xFEF
 25248                           postinc0	equ	0xFEE
 25249                           fsr0h	equ	0xFEA
 25250                           fsr0l	equ	0xFE9
 25251                           wreg	equ	0xFE8
 25252                           indf1	equ	0xFE7
 25253                           postinc1	equ	0xFE6
 25254                           postdec1	equ	0xFE5
 25255                           fsr1h	equ	0xFE2
 25256                           fsr1l	equ	0xFE1
 25257                           indf2	equ	0xFDF
 25258                           postinc2	equ	0xFDE
 25259                           postdec2	equ	0xFDD
 25260                           plusw2	equ	0xFDB
 25261                           fsr2h	equ	0xFDA
 25262                           fsr2l	equ	0xFD9
 25263                           status	equ	0xFD8
 25264                           
 25265 ;; *************** function _WriteUSART *****************
 25266 ;; Defined at:
 25267 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25268 ;; Parameters:    Size  Location     Type
 25269 ;;  data            1    wreg     unsigned char 
 25270 ;; Auto vars:     Size  Location     Type
 25271 ;;  data            1    0[BANK0 ] unsigned char 
 25272 ;; Return value:  Size  Location     Type
 25273 ;;		None               void
 25274 ;; Registers used:
 25275 ;;		wreg
 25276 ;; Tracked objects:
 25277 ;;		On entry : 0/1
 25278 ;;		On exit  : 0/0
 25279 ;;		Unchanged: 0/0
 25280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25281 ;;      Params:         0       0       0       0       0       0       0
 25282 ;;      Locals:         0       1       0       0       0       0       0
 25283 ;;      Temps:          0       0       0       0       0       0       0
 25284 ;;      Totals:         0       1       0       0       0       0       0
 25285 ;;Total ram usage:        1 bytes
 25286 ;; Hardware stack levels used:    1
 25287 ;; Hardware stack levels required when called:    3
 25288 ;; This function calls:
 25289 ;;		Nothing
 25290 ;; This function is called by:
 25291 ;;		_doModeVerbose
 25292 ;;		_sendEscapedUartData
 25293 ;;		_sendVSCPDriverErrorFrame
 25294 ;;		_sendVSCPDriverAck
 25295 ;;		_sendVSCPDriverNack
 25296 ;;		_sendVSCPDriverCommandReply
 25297 ;;		_receiveSendEventCANAL
 25298 ;;		_receiveSendMultiEventCANAL
 25299 ;;		_sendVSCPModeCapabilities
 25300 ;;		_receiveSendEventSLCAN
 25301 ;;		_printBinary
 25302 ;;		_printFirmwareVersion
 25303 ;;		_putsUSART
 25304 ;; This function uses a non-reentrant model
 25305 ;;
 25306                           
 25307                           	psect	text68
 25308  0014FC                     __ptext68:
 25309                           	opt stack 0
 25310  0014FC                     _WriteUSART:
 25311                           	opt stack 24
 25312                           
 25313                           ;incstack = 0
 25314                           ;incstack = 0
 25315                           ;WriteUSART@data stored from wreg
 25316  0014FC  CFE8 F060          	movff	wreg,WriteUSART@data
 25317  001500  ACAC               	btfss	4012,6,c	;volatile
 25318  001502  D003               	goto	l15028
 25319  001504  90AC               	bcf	4012,0,c	;volatile
 25320  001506  B22A               	btfsc	_USART_Status,1,c
 25321  001508  80AC               	bsf	4012,0,c	;volatile
 25322  00150A                     l15028:
 25323  00150A  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25324  00150E  0012               	return	
 25325  001510                     __end_of_WriteUSART:
 25326                           	opt stack 0
 25327                           tblptru	equ	0xFF8
 25328                           tblptrh	equ	0xFF7
 25329                           tblptrl	equ	0xFF6
 25330                           tablat	equ	0xFF5
 25331                           prodh	equ	0xFF4
 25332                           prodl	equ	0xFF3
 25333                           intcon	equ	0xFF2
 25334                           indf0	equ	0xFEF
 25335                           postinc0	equ	0xFEE
 25336                           fsr0h	equ	0xFEA
 25337                           fsr0l	equ	0xFE9
 25338                           wreg	equ	0xFE8
 25339                           indf1	equ	0xFE7
 25340                           postinc1	equ	0xFE6
 25341                           postdec1	equ	0xFE5
 25342                           fsr1h	equ	0xFE2
 25343                           fsr1l	equ	0xFE1
 25344                           indf2	equ	0xFDF
 25345                           postinc2	equ	0xFDE
 25346                           postdec2	equ	0xFDD
 25347                           plusw2	equ	0xFDB
 25348                           fsr2h	equ	0xFDA
 25349                           fsr2l	equ	0xFD9
 25350                           status	equ	0xFD8
 25351                           
 25352 ;; *************** function _init *****************
 25353 ;; Defined at:
 25354 ;;		line 400 in file "main.c"
 25355 ;; Parameters:    Size  Location     Type
 25356 ;;		None
 25357 ;; Auto vars:     Size  Location     Type
 25358 ;;		None
 25359 ;; Return value:  Size  Location     Type
 25360 ;;		None               void
 25361 ;; Registers used:
 25362 ;;		wreg, status,2, status,0, cstack
 25363 ;; Tracked objects:
 25364 ;;		On entry : 0/1
 25365 ;;		On exit  : F/0
 25366 ;;		Unchanged: 0/0
 25367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25368 ;;      Params:         0       0       0       0       0       0       0
 25369 ;;      Locals:         0       0       0       0       0       0       0
 25370 ;;      Temps:          0       0       0       0       0       0       0
 25371 ;;      Totals:         0       0       0       0       0       0       0
 25372 ;;Total ram usage:        0 bytes
 25373 ;; Hardware stack levels used:    1
 25374 ;; Hardware stack levels required when called:    5
 25375 ;; This function calls:
 25376 ;;		_WriteTimer0
 25377 ;;		_init_app_ram
 25378 ;;		_OpenUSART
 25379 ;;		_OpenTimer0
 25380 ;;		_ECANInitialize
 25381 ;; This function is called by:
 25382 ;;		_main
 25383 ;; This function uses a non-reentrant model
 25384 ;;
 25385                           
 25386                           	psect	text69
 25387  00193A                     __ptext69:
 25388                           	opt stack 0
 25389  00193A                     _init:
 25390                           	opt stack 24
 25391                           
 25392                           ;main.c: 402: init_app_ram();
 25393                           
 25394                           ;incstack = 0
 25395                           ;incstack = 0
 25396  00193A  EC0C  F00D         	call	_init_app_ram	;wreg free
 25397                           
 25398                           ;main.c: 405: OSCCONbits.IRCF0 = 1;
 25399  00193E  88D3               	bsf	4051,4,c	;volatile
 25400                           
 25401                           ;main.c: 406: OSCCONbits.IRCF1 = 1;
 25402  001940  8AD3               	bsf	4051,5,c	;volatile
 25403                           
 25404                           ;main.c: 407: OSCCONbits.IRCF2 = 1;
 25405  001942  8CD3               	bsf	4051,6,c	;volatile
 25406                           
 25407                           ;main.c: 408: OSCTUNEbits.PLLEN = 1;
 25408  001944  8C9B               	bsf	3995,6,c	;volatile
 25409                           
 25410                           ;main.c: 410: TRISBbits.RB2 = 0;
 25411  001946  9493               	bcf	3987,2,c	;volatile
 25412                           
 25413                           ;main.c: 411: TRISBbits.RB3 = 1;
 25414  001948  8693               	bsf	3987,3,c	;volatile
 25415                           
 25416                           ;main.c: 413: TRISCbits.RC1 = 0;
 25417  00194A  9294               	bcf	3988,1,c	;volatile
 25418                           
 25419                           ;main.c: 414: TRISCbits.RC6 = 0;
 25420  00194C  9C94               	bcf	3988,6,c	;volatile
 25421                           
 25422                           ;main.c: 415: TRISCbits.RC7 = 1;
 25423  00194E  8E94               	bsf	3988,7,c	;volatile
 25424                           
 25425                           ;main.c: 419: OpenUSART( 0b01111111 &
 25426                           ;main.c: 420: 0b11111111 &
 25427                           ;main.c: 421: 0b11111110 &
 25428                           ;main.c: 422: 0b11111101 &
 25429                           ;main.c: 423: 0b11111111,
 25430                           ;main.c: 424: 21 );
 25431  001950  0100               	movlb	0	; () banked
 25432  001952  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25433  001954  0E15               	movlw	21
 25434  001956  6F60               	movwf	?_OpenUSART& (0+255),b
 25435  001958  0E7C               	movlw	124
 25436  00195A  ECB8  F00D         	call	_OpenUSART
 25437                           
 25438                           ; BSR set to: 0
 25439                           ;main.c: 426: RCIF = 0;
 25440  00195E  9A9E               	bcf	3998,5,c	;volatile
 25441                           
 25442                           ; BSR set to: 0
 25443                           ;main.c: 427: RCIP = 0;
 25444  001960  9A9F               	bcf	3999,5,c	;volatile
 25445                           
 25446                           ; BSR set to: 0
 25447                           ;main.c: 428: RCIE = 1;
 25448  001962  8A9D               	bsf	3997,5,c	;volatile
 25449                           
 25450                           ; BSR set to: 0
 25451                           ;main.c: 429: PEIE = 1;
 25452  001964  8CF2               	bsf	intcon,6,c	;volatile
 25453                           
 25454                           ; BSR set to: 0
 25455                           ;main.c: 432: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25456  001966  0E92               	movlw	146
 25457  001968  ECAF  F00A         	call	_OpenTimer0
 25458                           
 25459                           ; BSR set to: 0
 25460                           ;main.c: 433: WriteTimer0(0xfb1d);
 25461  00196C  0EFB               	movlw	251
 25462  00196E  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25463  001970  0E1D               	movlw	29
 25464  001972  6F60               	movwf	?_WriteTimer0& (0+255),b
 25465  001974  EC75  F00A         	call	_WriteTimer0	;wreg free
 25466                           
 25467                           ;main.c: 436: ECANInitialize();
 25468  001978  ECD4  F00F         	call	_ECANInitialize	;wreg free
 25469                           
 25470                           ; BSR set to: 0
 25471                           ;main.c: 460: RXBnIE = 1;
 25472  00197C  82A3               	bsf	4003,1,c	;volatile
 25473                           
 25474                           ; BSR set to: 0
 25475                           ;main.c: 461: ERRIE = 1;
 25476  00197E  8AA3               	bsf	4003,5,c	;volatile
 25477                           
 25478                           ; BSR set to: 0
 25479                           ;main.c: 463: (INTCONbits.GIE = 1);
 25480  001980  8EF2               	bsf	intcon,7,c	;volatile
 25481                           
 25482                           ; BSR set to: 0
 25483  001982  0012               	return	
 25484  001984                     __end_of_init:
 25485                           	opt stack 0
 25486                           tblptru	equ	0xFF8
 25487                           tblptrh	equ	0xFF7
 25488                           tblptrl	equ	0xFF6
 25489                           tablat	equ	0xFF5
 25490                           prodh	equ	0xFF4
 25491                           prodl	equ	0xFF3
 25492                           intcon	equ	0xFF2
 25493                           indf0	equ	0xFEF
 25494                           postinc0	equ	0xFEE
 25495                           fsr0h	equ	0xFEA
 25496                           fsr0l	equ	0xFE9
 25497                           wreg	equ	0xFE8
 25498                           indf1	equ	0xFE7
 25499                           postinc1	equ	0xFE6
 25500                           postdec1	equ	0xFE5
 25501                           fsr1h	equ	0xFE2
 25502                           fsr1l	equ	0xFE1
 25503                           indf2	equ	0xFDF
 25504                           postinc2	equ	0xFDE
 25505                           postdec2	equ	0xFDD
 25506                           plusw2	equ	0xFDB
 25507                           fsr2h	equ	0xFDA
 25508                           fsr2l	equ	0xFD9
 25509                           status	equ	0xFD8
 25510                           
 25511 ;; *************** function _ECANInitialize *****************
 25512 ;; Defined at:
 25513 ;;		line 168 in file "ECAN.c"
 25514 ;; Parameters:    Size  Location     Type
 25515 ;;		None
 25516 ;; Auto vars:     Size  Location     Type
 25517 ;;		None
 25518 ;; Return value:  Size  Location     Type
 25519 ;;		None               void
 25520 ;; Registers used:
 25521 ;;		wreg, status,2, status,0, cstack
 25522 ;; Tracked objects:
 25523 ;;		On entry : F/0
 25524 ;;		On exit  : F/0
 25525 ;;		Unchanged: 0/0
 25526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25527 ;;      Params:         0       0       0       0       0       0       0
 25528 ;;      Locals:         0       0       0       0       0       0       0
 25529 ;;      Temps:          0       0       0       0       0       0       0
 25530 ;;      Totals:         0       0       0       0       0       0       0
 25531 ;;Total ram usage:        0 bytes
 25532 ;; Hardware stack levels used:    1
 25533 ;; Hardware stack levels required when called:    4
 25534 ;; This function calls:
 25535 ;;		_ECANSetOperationMode
 25536 ;; This function is called by:
 25537 ;;		_init
 25538 ;; This function uses a non-reentrant model
 25539 ;;
 25540                           
 25541                           	psect	text70
 25542  001FA8                     __ptext70:
 25543                           	opt stack 0
 25544  001FA8                     _ECANInitialize:
 25545                           	opt stack 24
 25546                           
 25547                           ; BSR set to: 0
 25548                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25549                           
 25550                           ; BSR set to: 0
 25551                           ;incstack = 0
 25552                           ;incstack = 0
 25553  001FA8  0E80               	movlw	128
 25554  001FAA  EC93  F00A         	call	_ECANSetOperationMode
 25555                           
 25556                           ; BSR set to: 0
 25557                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25558  001FAE  0E09               	movlw	9
 25559  001FB0  6E70               	movwf	3952,c	;volatile
 25560                           
 25561                           ; BSR set to: 0
 25562                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25563  001FB2  0EFC               	movlw	252
 25564  001FB4  6E71               	movwf	3953,c	;volatile
 25565                           
 25566                           ; BSR set to: 0
 25567                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25568                           ;ECAN.c: 181: (0 << 6) |
 25569                           ;ECAN.c: 182: (2-1);
 25570  001FB6  0E01               	movlw	1
 25571  001FB8  6E72               	movwf	3954,c	;volatile
 25572                           
 25573                           ; BSR set to: 0
 25574                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25575  001FBA  0E20               	movlw	32
 25576  001FBC  6E73               	movwf	3955,c	;volatile
 25577                           
 25578                           ; BSR set to: 0
 25579                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25580  001FBE  8E77               	bsf	3959,7,c	;volatile
 25581                           
 25582                           ; BSR set to: 0
 25583                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25584  001FC0  9C77               	bcf	3959,6,c	;volatile
 25585                           
 25586                           ; BSR set to: 0
 25587                           ;ECAN.c: 205: RXB0CON = 0;
 25588  001FC2  6A60               	clrf	3936,c	;volatile
 25589                           
 25590                           ; BSR set to: 0
 25591                           ;ECAN.c: 211: RXB1CON = 0;
 25592  001FC4  010F               	movlb	15	; () banked
 25593  001FC6  6B50               	clrf	80,b	;volatile
 25594                           
 25595                           ; BSR set to: 15
 25596                           ;ECAN.c: 221: B0CON = 0;
 25597  001FC8  010E               	movlb	14	; () banked
 25598  001FCA  6B20               	clrf	32,b	;volatile
 25599                           
 25600                           ; BSR set to: 14
 25601                           ;ECAN.c: 231: B1CON = 0;
 25602  001FCC  6B30               	clrf	48,b	;volatile
 25603                           
 25604                           ; BSR set to: 14
 25605                           ;ECAN.c: 241: B2CON = 0;
 25606  001FCE  6B40               	clrf	64,b	;volatile
 25607                           
 25608                           ; BSR set to: 14
 25609                           ;ECAN.c: 251: B3CON = 0;
 25610  001FD0  6B50               	clrf	80,b	;volatile
 25611                           
 25612                           ; BSR set to: 14
 25613                           ;ECAN.c: 261: B4CON = 0;
 25614  001FD2  6B60               	clrf	96,b	;volatile
 25615                           
 25616                           ; BSR set to: 14
 25617                           ;ECAN.c: 271: B5CON = 0;
 25618  001FD4  6B70               	clrf	112,b	;volatile
 25619                           
 25620                           ; BSR set to: 14
 25621                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25622  001FD6  010D               	movlb	13	; () banked
 25623  001FD8  6BF8               	clrf	248,b	;volatile
 25624                           
 25625                           ; BSR set to: 13
 25626                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25627  001FDA  010F               	movlb	15	; () banked
 25628  001FDC  6B00               	clrf	0,b	;volatile
 25629                           
 25630                           ; BSR set to: 15
 25631  001FDE  0E08               	movlw	8
 25632  001FE0  6F01               	movwf	1,b	;volatile
 25633                           
 25634                           ; BSR set to: 15
 25635  001FE2  6B02               	clrf	2,b	;volatile
 25636                           
 25637                           ; BSR set to: 15
 25638  001FE4  6B03               	clrf	3,b	;volatile
 25639                           
 25640                           ; BSR set to: 15
 25641                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25642  001FE6  0E01               	movlw	1
 25643  001FE8  010D               	movlb	13	; () banked
 25644  001FEA  6FD4               	movwf	212,b	;volatile
 25645                           
 25646                           ; BSR set to: 13
 25647                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25648  001FEC  6BD5               	clrf	213,b	;volatile
 25649                           
 25650                           ; BSR set to: 13
 25651                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25652  001FEE  6BE0               	clrf	224,b	;volatile
 25653                           
 25654                           ; BSR set to: 13
 25655                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25656  001FF0  0E11               	movlw	17
 25657  001FF2  6FE1               	movwf	225,b	;volatile
 25658                           
 25659                           ; BSR set to: 13
 25660                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25661  001FF4  6FE2               	movwf	226,b	;volatile
 25662                           
 25663                           ; BSR set to: 13
 25664                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25665  001FF6  6BE3               	clrf	227,b	;volatile
 25666                           
 25667                           ; BSR set to: 13
 25668                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25669  001FF8  6BE4               	clrf	228,b	;volatile
 25670                           
 25671                           ; BSR set to: 13
 25672                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25673  001FFA  6BE5               	clrf	229,b	;volatile
 25674                           
 25675                           ; BSR set to: 13
 25676                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25677  001FFC  6BE6               	clrf	230,b	;volatile
 25678                           
 25679                           ; BSR set to: 13
 25680                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25681  001FFE  6BE7               	clrf	231,b	;volatile
 25682                           
 25683                           ; BSR set to: 13
 25684                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25685  002000  0E54               	movlw	84
 25686  002002  6FF0               	movwf	240,b	;volatile
 25687                           
 25688                           ; BSR set to: 13
 25689                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25690  002004  0E05               	movlw	5
 25691  002006  6FF1               	movwf	241,b	;volatile
 25692                           
 25693                           ; BSR set to: 13
 25694                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25695  002008  6BF2               	clrf	242,b	;volatile
 25696                           
 25697                           ; BSR set to: 13
 25698                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25699  00200A  6BF2               	clrf	242,b	;volatile
 25700                           
 25701                           ; BSR set to: 13
 25702                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25703  00200C  010F               	movlb	15	; () banked
 25704  00200E  6B18               	clrf	24,b	;volatile
 25705                           
 25706                           ; BSR set to: 15
 25707  002010  6B19               	clrf	25,b	;volatile
 25708                           
 25709                           ; BSR set to: 15
 25710  002012  6B1A               	clrf	26,b	;volatile
 25711                           
 25712                           ; BSR set to: 15
 25713  002014  6B1B               	clrf	27,b	;volatile
 25714                           
 25715                           ; BSR set to: 15
 25716                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25717  002016  8719               	bsf	25,3,b	;volatile
 25718                           
 25719                           ; BSR set to: 15
 25720                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25721  002018  6B1C               	clrf	28,b	;volatile
 25722                           
 25723                           ; BSR set to: 15
 25724  00201A  6B1D               	clrf	29,b	;volatile
 25725                           
 25726                           ; BSR set to: 15
 25727  00201C  6B1E               	clrf	30,b	;volatile
 25728                           
 25729                           ; BSR set to: 15
 25730  00201E  6B1F               	clrf	31,b	;volatile
 25731                           
 25732                           ; BSR set to: 15
 25733                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25734  002020  871D               	bsf	29,3,b	;volatile
 25735                           
 25736                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25737  002022  0E20               	movlw	32
 25738  002024  EF93  F00A         	goto	_ECANSetOperationMode
 25739  002028                     __end_of_ECANInitialize:
 25740                           	opt stack 0
 25741                           tblptru	equ	0xFF8
 25742                           tblptrh	equ	0xFF7
 25743                           tblptrl	equ	0xFF6
 25744                           tablat	equ	0xFF5
 25745                           prodh	equ	0xFF4
 25746                           prodl	equ	0xFF3
 25747                           intcon	equ	0xFF2
 25748                           indf0	equ	0xFEF
 25749                           postinc0	equ	0xFEE
 25750                           fsr0h	equ	0xFEA
 25751                           fsr0l	equ	0xFE9
 25752                           wreg	equ	0xFE8
 25753                           indf1	equ	0xFE7
 25754                           postinc1	equ	0xFE6
 25755                           postdec1	equ	0xFE5
 25756                           fsr1h	equ	0xFE2
 25757                           fsr1l	equ	0xFE1
 25758                           indf2	equ	0xFDF
 25759                           postinc2	equ	0xFDE
 25760                           postdec2	equ	0xFDD
 25761                           plusw2	equ	0xFDB
 25762                           fsr2h	equ	0xFDA
 25763                           fsr2l	equ	0xFD9
 25764                           status	equ	0xFD8
 25765                           
 25766 ;; *************** function _ECANSetOperationMode *****************
 25767 ;; Defined at:
 25768 ;;		line 1014 in file "ECAN.c"
 25769 ;; Parameters:    Size  Location     Type
 25770 ;;  mode            1    wreg     enum E16346
 25771 ;; Auto vars:     Size  Location     Type
 25772 ;;  mode            1    0[BANK0 ] enum E16346
 25773 ;; Return value:  Size  Location     Type
 25774 ;;		None               void
 25775 ;; Registers used:
 25776 ;;		wreg, status,2, status,0
 25777 ;; Tracked objects:
 25778 ;;		On entry : 0/0
 25779 ;;		On exit  : F/0
 25780 ;;		Unchanged: 0/0
 25781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25782 ;;      Params:         0       0       0       0       0       0       0
 25783 ;;      Locals:         0       1       0       0       0       0       0
 25784 ;;      Temps:          0       0       0       0       0       0       0
 25785 ;;      Totals:         0       1       0       0       0       0       0
 25786 ;;Total ram usage:        1 bytes
 25787 ;; Hardware stack levels used:    1
 25788 ;; Hardware stack levels required when called:    3
 25789 ;; This function calls:
 25790 ;;		Nothing
 25791 ;; This function is called by:
 25792 ;;		_doModeVerbose
 25793 ;;		_doModeVscp
 25794 ;;		_doModeSLCAN
 25795 ;;		_ECANInitialize
 25796 ;; This function uses a non-reentrant model
 25797 ;;
 25798                           
 25799                           	psect	text71
 25800  001526                     __ptext71:
 25801                           	opt stack 0
 25802  001526                     _ECANSetOperationMode:
 25803                           	opt stack 25
 25804                           
 25805                           ; BSR set to: 0
 25806                           ;incstack = 0
 25807                           ;incstack = 0
 25808                           ;ECANSetOperationMode@mode stored from wreg
 25809  001526  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25810                           
 25811                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25812  00152A  0E1F               	movlw	31
 25813  00152C  166F               	andwf	3951,f,c	;volatile
 25814                           
 25815                           ;ECAN.c: 1016: CANCON |= mode;
 25816  00152E  0100               	movlb	0	; () banked
 25817  001530  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25818  001532  126F               	iorwf	3951,f,c	;volatile
 25819  001534                     l15044:
 25820                           
 25821                           ; BSR set to: 0
 25822  001534  506F               	movf	3951,w,c	;volatile
 25823  001536  0BE0               	andlw	224
 25824  001538  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25825  00153A  B4D8               	btfsc	status,2,c
 25826                           
 25827                           ; BSR set to: 0
 25828  00153C  0012               	return	
 25829  00153E  D7FA               	goto	l15044
 25830  001540                     __end_of_ECANSetOperationMode:
 25831                           	opt stack 0
 25832                           tblptru	equ	0xFF8
 25833                           tblptrh	equ	0xFF7
 25834                           tblptrl	equ	0xFF6
 25835                           tablat	equ	0xFF5
 25836                           prodh	equ	0xFF4
 25837                           prodl	equ	0xFF3
 25838                           intcon	equ	0xFF2
 25839                           indf0	equ	0xFEF
 25840                           postinc0	equ	0xFEE
 25841                           fsr0h	equ	0xFEA
 25842                           fsr0l	equ	0xFE9
 25843                           wreg	equ	0xFE8
 25844                           indf1	equ	0xFE7
 25845                           postinc1	equ	0xFE6
 25846                           postdec1	equ	0xFE5
 25847                           fsr1h	equ	0xFE2
 25848                           fsr1l	equ	0xFE1
 25849                           indf2	equ	0xFDF
 25850                           postinc2	equ	0xFDE
 25851                           postdec2	equ	0xFDD
 25852                           plusw2	equ	0xFDB
 25853                           fsr2h	equ	0xFDA
 25854                           fsr2l	equ	0xFD9
 25855                           status	equ	0xFD8
 25856                           
 25857 ;; *************** function _OpenTimer0 *****************
 25858 ;; Defined at:
 25859 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25860 ;; Parameters:    Size  Location     Type
 25861 ;;  config          1    wreg     unsigned char 
 25862 ;; Auto vars:     Size  Location     Type
 25863 ;;  config          1    0[BANK0 ] unsigned char 
 25864 ;; Return value:  Size  Location     Type
 25865 ;;		None               void
 25866 ;; Registers used:
 25867 ;;		wreg, status,2, status,0
 25868 ;; Tracked objects:
 25869 ;;		On entry : F/0
 25870 ;;		On exit  : F/0
 25871 ;;		Unchanged: 0/0
 25872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25873 ;;      Params:         0       0       0       0       0       0       0
 25874 ;;      Locals:         0       1       0       0       0       0       0
 25875 ;;      Temps:          0       0       0       0       0       0       0
 25876 ;;      Totals:         0       1       0       0       0       0       0
 25877 ;;Total ram usage:        1 bytes
 25878 ;; Hardware stack levels used:    1
 25879 ;; Hardware stack levels required when called:    3
 25880 ;; This function calls:
 25881 ;;		Nothing
 25882 ;; This function is called by:
 25883 ;;		_init
 25884 ;; This function uses a non-reentrant model
 25885 ;;
 25886                           
 25887                           	psect	text72
 25888  00155E                     __ptext72:
 25889                           	opt stack 0
 25890  00155E                     _OpenTimer0:
 25891                           	opt stack 25
 25892                           
 25893                           ; BSR set to: 0
 25894                           ;incstack = 0
 25895                           ;incstack = 0
 25896                           ;OpenTimer0@config stored from wreg
 25897  00155E  CFE8 F060          	movff	wreg,OpenTimer0@config
 25898                           
 25899                           ; BSR set to: 0
 25900  001562  5160               	movf	OpenTimer0@config& (0+255),w,b
 25901  001564  0B7F               	andlw	127
 25902  001566  6ED5               	movwf	4053,c	;volatile
 25903                           
 25904                           ; BSR set to: 0
 25905  001568  6AD7               	clrf	4055,c	;volatile
 25906                           
 25907                           ; BSR set to: 0
 25908  00156A  6AD6               	clrf	4054,c	;volatile
 25909                           
 25910                           ; BSR set to: 0
 25911  00156C  94F2               	bcf	intcon,2,c	;volatile
 25912                           
 25913                           ; BSR set to: 0
 25914  00156E  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25915  001570  D002               	goto	l1822
 25916                           
 25917                           ; BSR set to: 0
 25918  001572  8AF2               	bsf	intcon,5,c	;volatile
 25919  001574  D001               	goto	l1823
 25920  001576                     l1822:
 25921                           
 25922                           ; BSR set to: 0
 25923  001576  9AF2               	bcf	intcon,5,c	;volatile
 25924  001578                     l1823:
 25925                           
 25926                           ; BSR set to: 0
 25927  001578  8ED5               	bsf	4053,7,c	;volatile
 25928                           
 25929                           ; BSR set to: 0
 25930  00157A  0012               	return	
 25931  00157C                     __end_of_OpenTimer0:
 25932                           	opt stack 0
 25933                           tblptru	equ	0xFF8
 25934                           tblptrh	equ	0xFF7
 25935                           tblptrl	equ	0xFF6
 25936                           tablat	equ	0xFF5
 25937                           prodh	equ	0xFF4
 25938                           prodl	equ	0xFF3
 25939                           intcon	equ	0xFF2
 25940                           indf0	equ	0xFEF
 25941                           postinc0	equ	0xFEE
 25942                           fsr0h	equ	0xFEA
 25943                           fsr0l	equ	0xFE9
 25944                           wreg	equ	0xFE8
 25945                           indf1	equ	0xFE7
 25946                           postinc1	equ	0xFE6
 25947                           postdec1	equ	0xFE5
 25948                           fsr1h	equ	0xFE2
 25949                           fsr1l	equ	0xFE1
 25950                           indf2	equ	0xFDF
 25951                           postinc2	equ	0xFDE
 25952                           postdec2	equ	0xFDD
 25953                           plusw2	equ	0xFDB
 25954                           fsr2h	equ	0xFDA
 25955                           fsr2l	equ	0xFD9
 25956                           status	equ	0xFD8
 25957                           
 25958 ;; *************** function _OpenUSART *****************
 25959 ;; Defined at:
 25960 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25961 ;; Parameters:    Size  Location     Type
 25962 ;;  config          1    wreg     unsigned char 
 25963 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25964 ;; Auto vars:     Size  Location     Type
 25965 ;;  config          1    2[BANK0 ] unsigned char 
 25966 ;; Return value:  Size  Location     Type
 25967 ;;		None               void
 25968 ;; Registers used:
 25969 ;;		wreg, status,2
 25970 ;; Tracked objects:
 25971 ;;		On entry : F/0
 25972 ;;		On exit  : F/0
 25973 ;;		Unchanged: 0/0
 25974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25975 ;;      Params:         0       2       0       0       0       0       0
 25976 ;;      Locals:         0       1       0       0       0       0       0
 25977 ;;      Temps:          0       0       0       0       0       0       0
 25978 ;;      Totals:         0       3       0       0       0       0       0
 25979 ;;Total ram usage:        3 bytes
 25980 ;; Hardware stack levels used:    1
 25981 ;; Hardware stack levels required when called:    3
 25982 ;; This function calls:
 25983 ;;		Nothing
 25984 ;; This function is called by:
 25985 ;;		_init
 25986 ;; This function uses a non-reentrant model
 25987 ;;
 25988                           
 25989                           	psect	text73
 25990  001B70                     __ptext73:
 25991                           	opt stack 0
 25992  001B70                     _OpenUSART:
 25993                           	opt stack 25
 25994                           
 25995                           ; BSR set to: 0
 25996                           ;incstack = 0
 25997                           ;incstack = 0
 25998                           ;OpenUSART@config stored from wreg
 25999  001B70  CFE8 F062          	movff	wreg,OpenUSART@config
 26000                           
 26001                           ; BSR set to: 0
 26002  001B74  6AAC               	clrf	4012,c	;volatile
 26003  001B76  6AAB               	clrf	4011,c	;volatile
 26004                           
 26005                           ; BSR set to: 0
 26006  001B78  B162               	btfsc	OpenUSART@config& (0+255),0,b
 26007                           
 26008                           ; BSR set to: 0
 26009  001B7A  88AC               	bsf	4012,4,c	;volatile
 26010                           
 26011                           ; BSR set to: 0
 26012  001B7C  A362               	btfss	OpenUSART@config& (0+255),1,b
 26013  001B7E  D002               	goto	l14726
 26014                           
 26015                           ; BSR set to: 0
 26016  001B80  8CAC               	bsf	4012,6,c	;volatile
 26017  001B82  8CAB               	bsf	4011,6,c	;volatile
 26018  001B84                     l14726:
 26019                           
 26020                           ; BSR set to: 0
 26021  001B84  B562               	btfsc	OpenUSART@config& (0+255),2,b
 26022                           
 26023                           ; BSR set to: 0
 26024  001B86  8EAC               	bsf	4012,7,c	;volatile
 26025                           
 26026                           ; BSR set to: 0
 26027  001B88  A762               	btfss	OpenUSART@config& (0+255),3,b
 26028  001B8A  D002               	goto	l1855
 26029                           
 26030                           ; BSR set to: 0
 26031  001B8C  88AB               	bsf	4011,4,c	;volatile
 26032  001B8E  D001               	goto	l14734
 26033  001B90                     l1855:
 26034                           
 26035                           ; BSR set to: 0
 26036  001B90  8AAB               	bsf	4011,5,c	;volatile
 26037  001B92                     l14734:
 26038                           
 26039                           ; BSR set to: 0
 26040  001B92  B962               	btfsc	OpenUSART@config& (0+255),4,b
 26041                           
 26042                           ; BSR set to: 0
 26043  001B94  84AC               	bsf	4012,2,c	;volatile
 26044                           
 26045                           ; BSR set to: 0
 26046  001B96  989E               	bcf	3998,4,c	;volatile
 26047                           
 26048                           ; BSR set to: 0
 26049  001B98  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 26050                           
 26051                           ; BSR set to: 0
 26052  001B9A  86AB               	bsf	4011,3,c	;volatile
 26053                           
 26054                           ; BSR set to: 0
 26055  001B9C  AD62               	btfss	OpenUSART@config& (0+255),6,b
 26056  001B9E  D002               	goto	l1859
 26057                           
 26058                           ; BSR set to: 0
 26059  001BA0  8A9D               	bsf	3997,5,c	;volatile
 26060  001BA2  D001               	goto	l1860
 26061  001BA4                     l1859:
 26062                           
 26063                           ; BSR set to: 0
 26064  001BA4  9A9D               	bcf	3997,5,c	;volatile
 26065  001BA6                     l1860:
 26066                           
 26067                           ; BSR set to: 0
 26068  001BA6  9A9E               	bcf	3998,5,c	;volatile
 26069                           
 26070                           ; BSR set to: 0
 26071  001BA8  AF62               	btfss	OpenUSART@config& (0+255),7,b
 26072  001BAA  D002               	goto	l1861
 26073                           
 26074                           ; BSR set to: 0
 26075  001BAC  889D               	bsf	3997,4,c	;volatile
 26076  001BAE  D001               	goto	l1862
 26077  001BB0                     l1861:
 26078                           
 26079                           ; BSR set to: 0
 26080  001BB0  989D               	bcf	3997,4,c	;volatile
 26081  001BB2                     l1862:
 26082                           
 26083                           ; BSR set to: 0
 26084  001BB2  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26085                           
 26086                           ; BSR set to: 0
 26087  001BB6  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 26088  001BB8  6EB0               	movwf	4016,c	;volatile
 26089                           
 26090                           ; BSR set to: 0
 26091  001BBA  8AAC               	bsf	4012,5,c	;volatile
 26092                           
 26093                           ; BSR set to: 0
 26094  001BBC  8EAB               	bsf	4011,7,c	;volatile
 26095                           
 26096                           ; BSR set to: 0
 26097  001BBE  9C94               	bcf	3988,6,c	;volatile
 26098                           
 26099                           ; BSR set to: 0
 26100  001BC0  8E94               	bsf	3988,7,c	;volatile
 26101                           
 26102                           ; BSR set to: 0
 26103  001BC2  B8AC               	btfsc	4012,4,c	;volatile
 26104                           
 26105                           ; BSR set to: 0
 26106  001BC4  BEAC               	btfsc	4012,7,c	;volatile
 26107  001BC6  D001               	goto	l1864
 26108                           
 26109                           ; BSR set to: 0
 26110  001BC8  8C94               	bsf	3988,6,c	;volatile
 26111  001BCA                     l1864:
 26112                           
 26113                           ; BSR set to: 0
 26114  001BCA  0012               	return	
 26115  001BCC                     __end_of_OpenUSART:
 26116                           	opt stack 0
 26117                           tblptru	equ	0xFF8
 26118                           tblptrh	equ	0xFF7
 26119                           tblptrl	equ	0xFF6
 26120                           tablat	equ	0xFF5
 26121                           prodh	equ	0xFF4
 26122                           prodl	equ	0xFF3
 26123                           intcon	equ	0xFF2
 26124                           indf0	equ	0xFEF
 26125                           postinc0	equ	0xFEE
 26126                           fsr0h	equ	0xFEA
 26127                           fsr0l	equ	0xFE9
 26128                           wreg	equ	0xFE8
 26129                           indf1	equ	0xFE7
 26130                           postinc1	equ	0xFE6
 26131                           postdec1	equ	0xFE5
 26132                           fsr1h	equ	0xFE2
 26133                           fsr1l	equ	0xFE1
 26134                           indf2	equ	0xFDF
 26135                           postinc2	equ	0xFDE
 26136                           postdec2	equ	0xFDD
 26137                           plusw2	equ	0xFDB
 26138                           fsr2h	equ	0xFDA
 26139                           fsr2l	equ	0xFD9
 26140                           status	equ	0xFD8
 26141                           
 26142 ;; *************** function _WriteTimer0 *****************
 26143 ;; Defined at:
 26144 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26145 ;; Parameters:    Size  Location     Type
 26146 ;;  timer0          2    0[BANK0 ] unsigned int 
 26147 ;; Auto vars:     Size  Location     Type
 26148 ;;  timer           2    2[BANK0 ] struct Timers
 26149 ;; Return value:  Size  Location     Type
 26150 ;;		None               void
 26151 ;; Registers used:
 26152 ;;		None
 26153 ;; Tracked objects:
 26154 ;;		On entry : F/0
 26155 ;;		On exit  : F/0
 26156 ;;		Unchanged: F/0
 26157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26158 ;;      Params:         0       2       0       0       0       0       0
 26159 ;;      Locals:         0       2       0       0       0       0       0
 26160 ;;      Temps:          0       0       0       0       0       0       0
 26161 ;;      Totals:         0       4       0       0       0       0       0
 26162 ;;Total ram usage:        4 bytes
 26163 ;; Hardware stack levels used:    1
 26164 ;; Hardware stack levels required when called:    3
 26165 ;; This function calls:
 26166 ;;		Nothing
 26167 ;; This function is called by:
 26168 ;;		_init
 26169 ;; This function uses a non-reentrant model
 26170 ;;
 26171                           
 26172                           	psect	text74
 26173  0014EA                     __ptext74:
 26174                           	opt stack 0
 26175  0014EA                     _WriteTimer0:
 26176                           	opt stack 25
 26177                           
 26178                           ; BSR set to: 0
 26179                           
 26180                           ; BSR set to: 0
 26181                           ;incstack = 0
 26182                           ;incstack = 0
 26183  0014EA  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 26184  0014EE  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 26185  0014F2  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 26186  0014F6  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 26187                           
 26188                           ; BSR set to: 0
 26189  0014FA  0012               	return	
 26190  0014FC                     __end_of_WriteTimer0:
 26191                           	opt stack 0
 26192                           tblptru	equ	0xFF8
 26193                           tblptrh	equ	0xFF7
 26194                           tblptrl	equ	0xFF6
 26195                           tablat	equ	0xFF5
 26196                           prodh	equ	0xFF4
 26197                           prodl	equ	0xFF3
 26198                           intcon	equ	0xFF2
 26199                           indf0	equ	0xFEF
 26200                           postinc0	equ	0xFEE
 26201                           fsr0h	equ	0xFEA
 26202                           fsr0l	equ	0xFE9
 26203                           wreg	equ	0xFE8
 26204                           indf1	equ	0xFE7
 26205                           postinc1	equ	0xFE6
 26206                           postdec1	equ	0xFE5
 26207                           fsr1h	equ	0xFE2
 26208                           fsr1l	equ	0xFE1
 26209                           indf2	equ	0xFDF
 26210                           postinc2	equ	0xFDE
 26211                           postdec2	equ	0xFDD
 26212                           plusw2	equ	0xFDB
 26213                           fsr2h	equ	0xFDA
 26214                           fsr2l	equ	0xFD9
 26215                           status	equ	0xFD8
 26216                           
 26217 ;; *************** function _vscp_restoreDefaults *****************
 26218 ;; Defined at:
 26219 ;;		line 2801 in file "main.c"
 26220 ;; Parameters:    Size  Location     Type
 26221 ;;		None
 26222 ;; Auto vars:     Size  Location     Type
 26223 ;;		None
 26224 ;; Return value:  Size  Location     Type
 26225 ;;		None               void
 26226 ;; Registers used:
 26227 ;;		wreg, status,2, status,0, cstack
 26228 ;; Tracked objects:
 26229 ;;		On entry : 0/1
 26230 ;;		On exit  : 0/0
 26231 ;;		Unchanged: 0/0
 26232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26233 ;;      Params:         0       0       0       0       0       0       0
 26234 ;;      Locals:         0       0       0       0       0       0       0
 26235 ;;      Temps:          0       0       0       0       0       0       0
 26236 ;;      Totals:         0       0       0       0       0       0       0
 26237 ;;Total ram usage:        0 bytes
 26238 ;; Hardware stack levels used:    1
 26239 ;; Hardware stack levels required when called:    5
 26240 ;; This function calls:
 26241 ;;		_init_app_ram
 26242 ;;		_init_app_eeprom
 26243 ;; This function is called by:
 26244 ;;		_main
 26245 ;; This function uses a non-reentrant model
 26246 ;;
 26247                           
 26248                           	psect	text75
 26249  0014BE                     __ptext75:
 26250                           	opt stack 0
 26251  0014BE                     _vscp_restoreDefaults:
 26252                           	opt stack 24
 26253                           
 26254                           ;main.c: 2802: init_app_eeprom();
 26255                           
 26256                           ; BSR set to: 0
 26257                           ;incstack = 0
 26258                           ;incstack = 0
 26259  0014BE  EC29  F014         	call	_init_app_eeprom	;wreg free
 26260                           
 26261                           ; BSR set to: 0
 26262                           ;main.c: 2803: init_app_ram();
 26263  0014C2  EF0C  F00D         	goto	_init_app_ram	;wreg free
 26264  0014C6                     __end_of_vscp_restoreDefaults:
 26265                           	opt stack 0
 26266                           tblptru	equ	0xFF8
 26267                           tblptrh	equ	0xFF7
 26268                           tblptrl	equ	0xFF6
 26269                           tablat	equ	0xFF5
 26270                           prodh	equ	0xFF4
 26271                           prodl	equ	0xFF3
 26272                           intcon	equ	0xFF2
 26273                           indf0	equ	0xFEF
 26274                           postinc0	equ	0xFEE
 26275                           fsr0h	equ	0xFEA
 26276                           fsr0l	equ	0xFE9
 26277                           wreg	equ	0xFE8
 26278                           indf1	equ	0xFE7
 26279                           postinc1	equ	0xFE6
 26280                           postdec1	equ	0xFE5
 26281                           fsr1h	equ	0xFE2
 26282                           fsr1l	equ	0xFE1
 26283                           indf2	equ	0xFDF
 26284                           postinc2	equ	0xFDE
 26285                           postdec2	equ	0xFDD
 26286                           plusw2	equ	0xFDB
 26287                           fsr2h	equ	0xFDA
 26288                           fsr2l	equ	0xFD9
 26289                           status	equ	0xFD8
 26290                           
 26291 ;; *************** function _init_app_eeprom *****************
 26292 ;; Defined at:
 26293 ;;		line 490 in file "main.c"
 26294 ;; Parameters:    Size  Location     Type
 26295 ;;		None
 26296 ;; Auto vars:     Size  Location     Type
 26297 ;;  i               1    4[BANK0 ] unsigned char 
 26298 ;; Return value:  Size  Location     Type
 26299 ;;		None               void
 26300 ;; Registers used:
 26301 ;;		wreg, status,2, status,0, cstack
 26302 ;; Tracked objects:
 26303 ;;		On entry : 0/1
 26304 ;;		On exit  : F/0
 26305 ;;		Unchanged: 0/0
 26306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26307 ;;      Params:         0       0       0       0       0       0       0
 26308 ;;      Locals:         0       1       0       0       0       0       0
 26309 ;;      Temps:          0       0       0       0       0       0       0
 26310 ;;      Totals:         0       1       0       0       0       0       0
 26311 ;;Total ram usage:        1 bytes
 26312 ;; Hardware stack levels used:    1
 26313 ;; Hardware stack levels required when called:    4
 26314 ;; This function calls:
 26315 ;;		_Busy_eep
 26316 ;;		_Write_b_eep
 26317 ;; This function is called by:
 26318 ;;		_vscp_restoreDefaults
 26319 ;; This function uses a non-reentrant model
 26320 ;;
 26321                           
 26322                           	psect	text76
 26323  002852                     __ptext76:
 26324                           	opt stack 0
 26325  002852                     _init_app_eeprom:
 26326                           	opt stack 24
 26327                           
 26328                           ;main.c: 491: uint8_t i;
 26329                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x01,0x55));
 26330                           
 26331                           ;incstack = 0
 26332                           ;incstack = 0
 26333  002852  EC5C  F00A         	call	_Busy_eep	;wreg free
 26334  002856  0100               	movlb	0	; () banked
 26335  002858  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26336  00285A  0E01               	movlw	1
 26337  00285C  6F60               	movwf	?_Write_b_eep& (0+255),b
 26338  00285E  0E55               	movlw	85
 26339  002860  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26340  002862  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26341                           
 26342                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26343  002866  EC5C  F00A         	call	_Busy_eep	;wreg free
 26344  00286A  0100               	movlb	0	; () banked
 26345  00286C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26346  00286E  0E02               	movlw	2
 26347  002870  6F60               	movwf	?_Write_b_eep& (0+255),b
 26348  002872  0EAA               	movlw	170
 26349  002874  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26350  002876  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26351                           
 26352                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x03,0));
 26353  00287A  EC5C  F00A         	call	_Busy_eep	;wreg free
 26354  00287E  0100               	movlb	0	; () banked
 26355  002880  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26356  002882  0E03               	movlw	3
 26357  002884  6F60               	movwf	?_Write_b_eep& (0+255),b
 26358  002886  0E00               	movlw	0
 26359  002888  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26360  00288A  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26361                           
 26362                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x05,0));
 26363  00288E  EC5C  F00A         	call	_Busy_eep	;wreg free
 26364  002892  0100               	movlb	0	; () banked
 26365  002894  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26366  002896  0E05               	movlw	5
 26367  002898  6F60               	movwf	?_Write_b_eep& (0+255),b
 26368  00289A  0E00               	movlw	0
 26369  00289C  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26370  00289E  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26371                           
 26372                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x06,0));
 26373  0028A2  EC5C  F00A         	call	_Busy_eep	;wreg free
 26374  0028A6  0100               	movlb	0	; () banked
 26375  0028A8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26376  0028AA  0E06               	movlw	6
 26377  0028AC  6F60               	movwf	?_Write_b_eep& (0+255),b
 26378  0028AE  0E00               	movlw	0
 26379  0028B0  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26380  0028B2  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26381                           
 26382                           ;main.c: 498: (Busy_eep(), Write_b_eep(0x09,20u));
 26383  0028B6  EC5C  F00A         	call	_Busy_eep	;wreg free
 26384  0028BA  0100               	movlb	0	; () banked
 26385  0028BC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26386  0028BE  0E09               	movlw	9
 26387  0028C0  6F60               	movwf	?_Write_b_eep& (0+255),b
 26388  0028C2  0E14               	movlw	20
 26389  0028C4  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26390  0028C6  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26391                           
 26392                           ;main.c: 501: for (i = 0x20; i < (0x5C + 4); i++) {
 26393  0028CA  0E20               	movlw	32
 26394  0028CC  0100               	movlb	0	; () banked
 26395  0028CE  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26396  0028D0                     l14890:
 26397                           
 26398                           ; BSR set to: 0
 26399                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26400  0028D0  EC5C  F00A         	call	_Busy_eep	;wreg free
 26401  0028D4  D814               	call	PL60	;call to abstracted procedure
 26402  0028D6  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26403  0028DA  0100               	movlb	0	; () banked
 26404  0028DC  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26405                           
 26406                           ; BSR set to: 0
 26407  0028DE  0E5F               	movlw	95
 26408  0028E0  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26409  0028E2  D7F6               	goto	l14890
 26410                           
 26411                           ; BSR set to: 0
 26412                           ;main.c: 503: }
 26413                           ;main.c: 506: for (i = 0x60; i < (0x64 + 4); i++) {
 26414  0028E4  0E60               	movlw	96
 26415  0028E6  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26416  0028E8                     l14904:
 26417                           
 26418                           ; BSR set to: 0
 26419                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26420  0028E8  EC5C  F00A         	call	_Busy_eep	;wreg free
 26421  0028EC  D808               	call	PL60	;call to abstracted procedure
 26422  0028EE  EC2C  F00B         	call	_Write_b_eep	;wreg free
 26423  0028F2  0100               	movlb	0	; () banked
 26424  0028F4  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26425                           
 26426                           ; BSR set to: 0
 26427  0028F6  0E67               	movlw	103
 26428  0028F8  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26429  0028FA  D7F6               	goto	l14904
 26430                           
 26431                           ; BSR set to: 0
 26432  0028FC  0C67               	retlw	103
 26433  0028FE                     __end_of_init_app_eeprom:
 26434                           	opt stack 0
 26435  0028FE                     PL60:
 26436                           	opt stack 24
 26437  0028FE  0100               	movlb	0	; () banked
 26438  002900  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26439  002902  0E01               	movlw	1
 26440  002904  6F60               	movwf	?_Write_b_eep& (0+255),b
 26441  002906  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26442  002908  0CFF               	retlw	255
 26443  00290A                     __end_ofPL60:
 26444                           	opt stack 0
 26445                           tblptru	equ	0xFF8
 26446                           tblptrh	equ	0xFF7
 26447                           tblptrl	equ	0xFF6
 26448                           tablat	equ	0xFF5
 26449                           prodh	equ	0xFF4
 26450                           prodl	equ	0xFF3
 26451                           intcon	equ	0xFF2
 26452                           indf0	equ	0xFEF
 26453                           postinc0	equ	0xFEE
 26454                           fsr0h	equ	0xFEA
 26455                           fsr0l	equ	0xFE9
 26456                           wreg	equ	0xFE8
 26457                           indf1	equ	0xFE7
 26458                           postinc1	equ	0xFE6
 26459                           postdec1	equ	0xFE5
 26460                           fsr1h	equ	0xFE2
 26461                           fsr1l	equ	0xFE1
 26462                           indf2	equ	0xFDF
 26463                           postinc2	equ	0xFDE
 26464                           postdec2	equ	0xFDD
 26465                           plusw2	equ	0xFDB
 26466                           fsr2h	equ	0xFDA
 26467                           fsr2l	equ	0xFD9
 26468                           status	equ	0xFD8
 26469                           
 26470 ;; *************** function _Write_b_eep *****************
 26471 ;; Defined at:
 26472 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26473 ;; Parameters:    Size  Location     Type
 26474 ;;  badd            2    0[BANK0 ] unsigned int 
 26475 ;;  bdat            1    2[BANK0 ] unsigned char 
 26476 ;; Auto vars:     Size  Location     Type
 26477 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 26478 ;; Return value:  Size  Location     Type
 26479 ;;		None               void
 26480 ;; Registers used:
 26481 ;;		wreg, status,2
 26482 ;; Tracked objects:
 26483 ;;		On entry : F/0
 26484 ;;		On exit  : 0/0
 26485 ;;		Unchanged: 0/0
 26486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26487 ;;      Params:         0       3       0       0       0       0       0
 26488 ;;      Locals:         0       1       0       0       0       0       0
 26489 ;;      Temps:          0       0       0       0       0       0       0
 26490 ;;      Totals:         0       4       0       0       0       0       0
 26491 ;;Total ram usage:        4 bytes
 26492 ;; Hardware stack levels used:    1
 26493 ;; Hardware stack levels required when called:    3
 26494 ;; This function calls:
 26495 ;;		Nothing
 26496 ;; This function is called by:
 26497 ;;		_init_app_eeprom
 26498 ;;		_doModeVerbose
 26499 ;;		_doModeSLCAN
 26500 ;; This function uses a non-reentrant model
 26501 ;;
 26502                           
 26503                           	psect	text77
 26504  001658                     __ptext77:
 26505                           	opt stack 0
 26506  001658                     _Write_b_eep:
 26507                           	opt stack 25
 26508                           
 26509                           ; BSR set to: 0
 26510                           
 26511                           ; BSR set to: 0
 26512                           ;incstack = 0
 26513                           ;incstack = 0
 26514  001658  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26515  00165C  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26516  001660  9EA6               	bcf	4006,7,c	;volatile
 26517  001662  9CA6               	bcf	4006,6,c	;volatile
 26518  001664  84A6               	bsf	4006,2,c	;volatile
 26519                           
 26520                           ; BSR set to: 0
 26521  001666  0E00               	movlw	0
 26522  001668  BEF2               	btfsc	intcon,7,c	;volatile
 26523  00166A  0E01               	movlw	1
 26524  00166C  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 26525                           
 26526                           ; BSR set to: 0
 26527  00166E  9EF2               	bcf	intcon,7,c	;volatile
 26528                           
 26529                           ; BSR set to: 0
 26530  001670  0E55               	movlw	85
 26531  001672  6EA7               	movwf	4007,c	;volatile
 26532                           
 26533                           ; BSR set to: 0
 26534  001674  0EAA               	movlw	170
 26535  001676  6EA7               	movwf	4007,c	;volatile
 26536                           
 26537                           ; BSR set to: 0
 26538  001678  82A6               	bsf	4006,1,c	;volatile
 26539  00167A                     l1806:
 26540                           
 26541                           ; BSR set to: 0
 26542  00167A  B2A6               	btfsc	4006,1,c	;volatile
 26543  00167C  D7FE               	goto	l1806
 26544                           
 26545                           ; BSR set to: 0
 26546  00167E  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 26547  001680  D002               	bra	u19965
 26548  001682  9EF2               	bcf	intcon,7,c	;volatile
 26549  001684  D001               	bra	u19966
 26550  001686                     u19965:
 26551  001686  8EF2               	bsf	intcon,7,c	;volatile
 26552  001688                     u19966:
 26553  001688  94A6               	bcf	4006,2,c	;volatile
 26554  00168A  0012               	return	
 26555  00168C                     __end_of_Write_b_eep:
 26556                           	opt stack 0
 26557                           tblptru	equ	0xFF8
 26558                           tblptrh	equ	0xFF7
 26559                           tblptrl	equ	0xFF6
 26560                           tablat	equ	0xFF5
 26561                           prodh	equ	0xFF4
 26562                           prodl	equ	0xFF3
 26563                           intcon	equ	0xFF2
 26564                           indf0	equ	0xFEF
 26565                           postinc0	equ	0xFEE
 26566                           fsr0h	equ	0xFEA
 26567                           fsr0l	equ	0xFE9
 26568                           wreg	equ	0xFE8
 26569                           indf1	equ	0xFE7
 26570                           postinc1	equ	0xFE6
 26571                           postdec1	equ	0xFE5
 26572                           fsr1h	equ	0xFE2
 26573                           fsr1l	equ	0xFE1
 26574                           indf2	equ	0xFDF
 26575                           postinc2	equ	0xFDE
 26576                           postdec2	equ	0xFDD
 26577                           plusw2	equ	0xFDB
 26578                           fsr2h	equ	0xFDA
 26579                           fsr2l	equ	0xFD9
 26580                           status	equ	0xFD8
 26581                           
 26582 ;; *************** function _Busy_eep *****************
 26583 ;; Defined at:
 26584 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26585 ;; Parameters:    Size  Location     Type
 26586 ;;		None
 26587 ;; Auto vars:     Size  Location     Type
 26588 ;;		None
 26589 ;; Return value:  Size  Location     Type
 26590 ;;		None               void
 26591 ;; Registers used:
 26592 ;;		None
 26593 ;; Tracked objects:
 26594 ;;		On entry : 0/1
 26595 ;;		On exit  : 0/0
 26596 ;;		Unchanged: 0/0
 26597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26598 ;;      Params:         0       0       0       0       0       0       0
 26599 ;;      Locals:         0       0       0       0       0       0       0
 26600 ;;      Temps:          0       0       0       0       0       0       0
 26601 ;;      Totals:         0       0       0       0       0       0       0
 26602 ;;Total ram usage:        0 bytes
 26603 ;; Hardware stack levels used:    1
 26604 ;; Hardware stack levels required when called:    3
 26605 ;; This function calls:
 26606 ;;		Nothing
 26607 ;; This function is called by:
 26608 ;;		_init_app_eeprom
 26609 ;;		_doModeVerbose
 26610 ;;		_doModeSLCAN
 26611 ;; This function uses a non-reentrant model
 26612 ;;
 26613                           
 26614                           	psect	text78
 26615  0014B8                     __ptext78:
 26616                           	opt stack 0
 26617  0014B8                     _Busy_eep:
 26618                           	opt stack 25
 26619  0014B8                     l1781:
 26620  0014B8  A2A6               	btfss	4006,1,c	;volatile
 26621  0014BA  0012               	return	
 26622  0014BC  D7FD               	goto	l1781
 26623  0014BE                     __end_of_Busy_eep:
 26624                           	opt stack 0
 26625                           tblptru	equ	0xFF8
 26626                           tblptrh	equ	0xFF7
 26627                           tblptrl	equ	0xFF6
 26628                           tablat	equ	0xFF5
 26629                           prodh	equ	0xFF4
 26630                           prodl	equ	0xFF3
 26631                           intcon	equ	0xFF2
 26632                           indf0	equ	0xFEF
 26633                           postinc0	equ	0xFEE
 26634                           fsr0h	equ	0xFEA
 26635                           fsr0l	equ	0xFE9
 26636                           wreg	equ	0xFE8
 26637                           indf1	equ	0xFE7
 26638                           postinc1	equ	0xFE6
 26639                           postdec1	equ	0xFE5
 26640                           fsr1h	equ	0xFE2
 26641                           fsr1l	equ	0xFE1
 26642                           indf2	equ	0xFDF
 26643                           postinc2	equ	0xFDE
 26644                           postdec2	equ	0xFDD
 26645                           plusw2	equ	0xFDB
 26646                           fsr2h	equ	0xFDA
 26647                           fsr2l	equ	0xFD9
 26648                           status	equ	0xFD8
 26649                           
 26650 ;; *************** function _init_app_ram *****************
 26651 ;; Defined at:
 26652 ;;		line 472 in file "main.c"
 26653 ;; Parameters:    Size  Location     Type
 26654 ;;		None
 26655 ;; Auto vars:     Size  Location     Type
 26656 ;;		None
 26657 ;; Return value:  Size  Location     Type
 26658 ;;		None               void
 26659 ;; Registers used:
 26660 ;;		wreg, status,2, cstack
 26661 ;; Tracked objects:
 26662 ;;		On entry : 0/1
 26663 ;;		On exit  : 0/0
 26664 ;;		Unchanged: 0/0
 26665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26666 ;;      Params:         0       0       0       0       0       0       0
 26667 ;;      Locals:         0       0       0       0       0       0       0
 26668 ;;      Temps:          0       0       0       0       0       0       0
 26669 ;;      Totals:         0       0       0       0       0       0       0
 26670 ;;Total ram usage:        0 bytes
 26671 ;; Hardware stack levels used:    1
 26672 ;; Hardware stack levels required when called:    4
 26673 ;; This function calls:
 26674 ;;		_Read_b_eep
 26675 ;; This function is called by:
 26676 ;;		_init
 26677 ;;		_vscp_restoreDefaults
 26678 ;; This function uses a non-reentrant model
 26679 ;;
 26680                           
 26681                           	psect	text79
 26682  001A18                     __ptext79:
 26683                           	opt stack 0
 26684  001A18                     _init_app_ram:
 26685                           	opt stack 24
 26686                           
 26687                           ;main.c: 474: can_receiveOverruns = 0;
 26688                           
 26689                           ;incstack = 0
 26690                           ;incstack = 0
 26691  001A18  0101               	movlb	1	; () banked
 26692  001A1A  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26693  001A1C  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26694  001A1E  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26695  001A20  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26696                           
 26697                           ;main.c: 475: can_transmitOverruns = 0;
 26698  001A22  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26699  001A24  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26700  001A26  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26701  001A28  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26702                           
 26703                           ;main.c: 476: uart_receiveOverruns = 0;
 26704  001A2A  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26705  001A2C  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26706  001A2E  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26707  001A30  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26708                           
 26709                           ;main.c: 477: uart_transmitOverruns = 0;
 26710  001A32  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26711  001A34  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26712  001A36  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26713  001A38  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26714                           
 26715                           ; BSR set to: 1
 26716                           ;main.c: 479: bHex = Read_b_eep(0x06);
 26717  001A3A  0100               	movlb	0	; () banked
 26718  001A3C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26719  001A3E  0E06               	movlw	6
 26720  001A40  6F60               	movwf	?_Read_b_eep& (0+255),b
 26721  001A42  EC6C  F00A         	call	_Read_b_eep	;wreg free
 26722  001A46  0100               	movlb	0	; () banked
 26723  001A48  6FE5               	movwf	_bHex& (0+255),b
 26724                           
 26725                           ;main.c: 480: mode = Read_b_eep(0x03);
 26726  001A4A  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26727  001A4C  0E03               	movlw	3
 26728  001A4E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26729  001A50  EC6C  F00A         	call	_Read_b_eep	;wreg free
 26730  001A54  6E32               	movwf	_mode,c
 26731                           
 26732                           ;main.c: 482: rwtimeout = Read_b_eep(0x09);
 26733  001A56  0100               	movlb	0	; () banked
 26734  001A58  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26735  001A5A  0E09               	movlw	9
 26736  001A5C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26737  001A5E  EC6C  F00A         	call	_Read_b_eep	;wreg free
 26738  001A62  6E35               	movwf	_rwtimeout,c
 26739  001A64  0012               	return	
 26740  001A66                     __end_of_init_app_ram:
 26741                           	opt stack 0
 26742                           tblptru	equ	0xFF8
 26743                           tblptrh	equ	0xFF7
 26744                           tblptrl	equ	0xFF6
 26745                           tablat	equ	0xFF5
 26746                           prodh	equ	0xFF4
 26747                           prodl	equ	0xFF3
 26748                           intcon	equ	0xFF2
 26749                           indf0	equ	0xFEF
 26750                           postinc0	equ	0xFEE
 26751                           fsr0h	equ	0xFEA
 26752                           fsr0l	equ	0xFE9
 26753                           wreg	equ	0xFE8
 26754                           indf1	equ	0xFE7
 26755                           postinc1	equ	0xFE6
 26756                           postdec1	equ	0xFE5
 26757                           fsr1h	equ	0xFE2
 26758                           fsr1l	equ	0xFE1
 26759                           indf2	equ	0xFDF
 26760                           postinc2	equ	0xFDE
 26761                           postdec2	equ	0xFDD
 26762                           plusw2	equ	0xFDB
 26763                           fsr2h	equ	0xFDA
 26764                           fsr2l	equ	0xFD9
 26765                           status	equ	0xFD8
 26766                           
 26767 ;; *************** function _Read_b_eep *****************
 26768 ;; Defined at:
 26769 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26770 ;; Parameters:    Size  Location     Type
 26771 ;;  badd            2    0[BANK0 ] unsigned int 
 26772 ;; Auto vars:     Size  Location     Type
 26773 ;;		None
 26774 ;; Return value:  Size  Location     Type
 26775 ;;                  1    wreg      unsigned char 
 26776 ;; Registers used:
 26777 ;;		wreg, status,2
 26778 ;; Tracked objects:
 26779 ;;		On entry : F/0
 26780 ;;		On exit  : 0/0
 26781 ;;		Unchanged: 0/0
 26782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26783 ;;      Params:         0       2       0       0       0       0       0
 26784 ;;      Locals:         0       0       0       0       0       0       0
 26785 ;;      Temps:          0       0       0       0       0       0       0
 26786 ;;      Totals:         0       2       0       0       0       0       0
 26787 ;;Total ram usage:        2 bytes
 26788 ;; Hardware stack levels used:    1
 26789 ;; Hardware stack levels required when called:    3
 26790 ;; This function calls:
 26791 ;;		Nothing
 26792 ;; This function is called by:
 26793 ;;		_main
 26794 ;;		_init_app_ram
 26795 ;; This function uses a non-reentrant model
 26796 ;;
 26797                           
 26798                           	psect	text80
 26799  0014D8                     __ptext80:
 26800                           	opt stack 0
 26801  0014D8                     _Read_b_eep:
 26802                           	opt stack 24
 26803                           
 26804                           ; BSR set to: 0
 26805                           
 26806                           ;incstack = 0
 26807                           ;incstack = 0
 26808  0014D8  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26809  0014DC  9CA6               	bcf	4006,6,c	;volatile
 26810  0014DE  9EA6               	bcf	4006,7,c	;volatile
 26811  0014E0  80A6               	bsf	4006,0,c	;volatile
 26812  0014E2  F000               	nop		;# 
 26813  0014E4  F000               	nop		;# 
 26814  0014E6  50A8               	movf	4008,w,c	;volatile
 26815  0014E8  0012               	return	
 26816  0014EA                     __end_of_Read_b_eep:
 26817                           	opt stack 0
 26818                           tblptru	equ	0xFF8
 26819                           tblptrh	equ	0xFF7
 26820                           tblptrl	equ	0xFF6
 26821                           tablat	equ	0xFF5
 26822                           prodh	equ	0xFF4
 26823                           prodl	equ	0xFF3
 26824                           intcon	equ	0xFF2
 26825                           indf0	equ	0xFEF
 26826                           postinc0	equ	0xFEE
 26827                           fsr0h	equ	0xFEA
 26828                           fsr0l	equ	0xFE9
 26829                           wreg	equ	0xFE8
 26830                           indf1	equ	0xFE7
 26831                           postinc1	equ	0xFE6
 26832                           postdec1	equ	0xFE5
 26833                           fsr1h	equ	0xFE2
 26834                           fsr1l	equ	0xFE1
 26835                           indf2	equ	0xFDF
 26836                           postinc2	equ	0xFDE
 26837                           postdec2	equ	0xFDD
 26838                           plusw2	equ	0xFDB
 26839                           fsr2h	equ	0xFDA
 26840                           fsr2l	equ	0xFD9
 26841                           status	equ	0xFD8
 26842                           
 26843 ;; *************** function _fifo_init *****************
 26844 ;; Defined at:
 26845 ;;		line 14 in file "fifo.c"
 26846 ;; Parameters:    Size  Location     Type
 26847 ;;  f               2    0[BANK0 ] PTR struct .
 26848 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26849 ;;  buf             2    2[BANK0 ] PTR const void 
 26850 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26851 ;;  size            2    4[BANK0 ] unsigned short 
 26852 ;; Auto vars:     Size  Location     Type
 26853 ;;		None
 26854 ;; Return value:  Size  Location     Type
 26855 ;;		None               void
 26856 ;; Registers used:
 26857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26858 ;; Tracked objects:
 26859 ;;		On entry : F/0
 26860 ;;		On exit  : F/0
 26861 ;;		Unchanged: 0/0
 26862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26863 ;;      Params:         0       6       0       0       0       0       0
 26864 ;;      Locals:         0       0       0       0       0       0       0
 26865 ;;      Temps:          0       0       0       0       0       0       0
 26866 ;;      Totals:         0       6       0       0       0       0       0
 26867 ;;Total ram usage:        6 bytes
 26868 ;; Hardware stack levels used:    1
 26869 ;; Hardware stack levels required when called:    3
 26870 ;; This function calls:
 26871 ;;		Nothing
 26872 ;; This function is called by:
 26873 ;;		_main
 26874 ;; This function uses a non-reentrant model
 26875 ;;
 26876                           
 26877                           	psect	text81
 26878  0017F0                     __ptext81:
 26879                           	opt stack 0
 26880  0017F0                     _fifo_init:
 26881                           	opt stack 26
 26882                           
 26883                           ; BSR set to: 0
 26884                           ;fifo.c: 15: f->head = 0;
 26885                           
 26886                           ;incstack = 0
 26887                           ;incstack = 0
 26888  0017F0  EE20 F002          	lfsr	2,2
 26889  0017F4  D816               	call	PL94	;call to abstracted procedure
 26890                           
 26891                           ;fifo.c: 16: f->tail = 0;
 26892  0017F6  EE20 F004          	lfsr	2,4
 26893  0017FA  D813               	call	PL94	;call to abstracted procedure
 26894                           
 26895                           ;fifo.c: 17: f->size = size;
 26896  0017FC  EE20 F006          	lfsr	2,6
 26897  001800  5160               	movf	fifo_init@f& (0+255),w,b
 26898  001802  26D9               	addwf	fsr2l,f,c
 26899  001804  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26900  001806  22DA               	addwfc	fsr2h,f,c
 26901  001808  C064  FFDE         	movff	fifo_init@size,postinc2
 26902  00180C  C065  FFDD         	movff	fifo_init@size+1,postdec2
 26903                           
 26904                           ; BSR set to: 0
 26905                           ;fifo.c: 18: f->buf = buf;
 26906  001810  C060  FFD9         	movff	fifo_init@f,fsr2l
 26907  001814  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 26908  001818  C062  FFDE         	movff	fifo_init@buf,postinc2
 26909  00181C  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 26910                           
 26911                           ; BSR set to: 0
 26912  001820  0012               	return	
 26913  001822                     __end_of_fifo_init:
 26914                           	opt stack 0
 26915  001822                     PL94:
 26916                           	opt stack 26
 26917  001822  5160               	movf	fifo_init@f& (0+255),w,b
 26918  001824  26D9               	addwf	fsr2l,f,c
 26919  001826  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26920  001828  22DA               	addwfc	fsr2h,f,c
 26921  00182A  6ADE               	clrf	postinc2,c
 26922  00182C  6ADD               	clrf	postdec2,c
 26923  00182E  0012               	return	
 26924  001830                     __end_ofPL94:
 26925                           	opt stack 0
 26926                           tblptru	equ	0xFF8
 26927                           tblptrh	equ	0xFF7
 26928                           tblptrl	equ	0xFF6
 26929                           tablat	equ	0xFF5
 26930                           prodh	equ	0xFF4
 26931                           prodl	equ	0xFF3
 26932                           intcon	equ	0xFF2
 26933                           indf0	equ	0xFEF
 26934                           postinc0	equ	0xFEE
 26935                           fsr0h	equ	0xFEA
 26936                           fsr0l	equ	0xFE9
 26937                           wreg	equ	0xFE8
 26938                           indf1	equ	0xFE7
 26939                           postinc1	equ	0xFE6
 26940                           postdec1	equ	0xFE5
 26941                           fsr1h	equ	0xFE2
 26942                           fsr1l	equ	0xFE1
 26943                           indf2	equ	0xFDF
 26944                           postinc2	equ	0xFDE
 26945                           postdec2	equ	0xFDD
 26946                           plusw2	equ	0xFDB
 26947                           fsr2h	equ	0xFDA
 26948                           fsr2l	equ	0xFD9
 26949                           status	equ	0xFD8
 26950                           
 26951 ;; *************** function _Interrupt *****************
 26952 ;; Defined at:
 26953 ;;		line 144 in file "main.c"
 26954 ;; Parameters:    Size  Location     Type
 26955 ;;		None
 26956 ;; Auto vars:     Size  Location     Type
 26957 ;;  fail            1   32[COMRAM] unsigned char 
 26958 ;;  c               1   31[COMRAM] unsigned char 
 26959 ;; Return value:  Size  Location     Type
 26960 ;;		None               void
 26961 ;; Registers used:
 26962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26963 ;; Tracked objects:
 26964 ;;		On entry : 0/0
 26965 ;;		On exit  : 0/0
 26966 ;;		Unchanged: 0/0
 26967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26968 ;;      Params:         0       0       0       0       0       0       0
 26969 ;;      Locals:         2       0       0       0       0       0       0
 26970 ;;      Temps:          9       0       0       0       0       0       0
 26971 ;;      Totals:        11       0       0       0       0       0       0
 26972 ;;Total ram usage:       11 bytes
 26973 ;; Hardware stack levels used:    1
 26974 ;; Hardware stack levels required when called:    2
 26975 ;; This function calls:
 26976 ;;		_ReadUSART
 26977 ;;		_fifo_write
 26978 ;;		_ECANReceiveMessage
 26979 ;;		_fifo_getFree
 26980 ;;		i1_WriteTimer0
 26981 ;; This function is called by:
 26982 ;;		Interrupt level 1
 26983 ;; This function uses a non-reentrant model
 26984 ;;
 26985                           
 26986                           	psect	intcodelo
 26987  000018                     __pintcodelo:
 26988                           	opt stack 0
 26989  000018                     _Interrupt:
 26990                           	opt stack 19
 26991                           
 26992                           ; BSR set to: 0
 26993                           ;incstack = 0
 26994  000018  CFD8 F019          	movff	status,??_Interrupt+2
 26995  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 26996  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 26997  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 26998  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 26999  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 27000  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 27001  000034                     
 27002                           ;main.c: 145: uint8_t c;
 27003                           ;main.c: 148: if ( 1 == PIR1bits.RCIF ) {
 27004  000034  AA9E               	btfss	3998,5,c	;volatile
 27005  000036  D001               	goto	i1u1758_21
 27006  000038  D001               	goto	i1u1758_20
 27007  00003A                     i1u1758_21:
 27008  00003A  D02B               	goto	i1l399
 27009  00003C                     i1u1758_20:
 27010  00003C                     
 27011                           ;main.c: 150: c = ReadUSART();
 27012  00003C  ECA0  F00A         	call	_ReadUSART	;wreg free
 27013  000040  6E20               	movwf	Interrupt@c,c
 27014  000042                     
 27015                           ;main.c: 152: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 27016  000042  0101               	movlb	1	; () banked
 27017  000044  0E01               	movlw	high _serialInputFifo
 27018  000046  6E02               	movwf	?_fifo_write+1,c
 27019  000048  0EDB               	movlw	low _serialInputFifo
 27020  00004A  6E01               	movwf	?_fifo_write,c
 27021  00004C  0E20               	movlw	low Interrupt@c
 27022  00004E  6E03               	movwf	?_fifo_write+2,c
 27023  000050  0E00               	movlw	high Interrupt@c
 27024  000052  6E04               	movwf	?_fifo_write+3,c
 27025  000054  0E0F               	movlw	15
 27026  000056  6E04               	movwf	?_fifo_write+3,c
 27027  000058  0E5F               	movlw	__accesstop+-1
 27028  00005A  6403               	cpfsgt	?_fifo_write+2,c
 27029  00005C  6A04               	clrf	?_fifo_write+3,c
 27030  00005E  0E01               	movlw	1
 27031  000060  6E05               	movwf	?_fifo_write+4,c
 27032  000062  0E00               	movlw	0
 27033  000064  6E06               	movwf	?_fifo_write+5,c
 27034  000066  0E00               	movlw	0
 27035  000068  6E07               	movwf	?_fifo_write+6,c
 27036  00006A  0E00               	movlw	0
 27037  00006C  6E08               	movwf	?_fifo_write+7,c
 27038  00006E  ECF1  F019         	call	_fifo_write	;wreg free
 27039  000072  0401               	decf	?_fifo_write,w,c
 27040  000074  1002               	iorwf	?_fifo_write+1,w,c
 27041  000076  B4D8               	btfsc	status,2,c
 27042  000078  D001               	goto	i1u1759_21
 27043  00007A  D001               	goto	i1u1759_20
 27044  00007C                     i1u1759_21:
 27045  00007C  D008               	goto	i1l13404
 27046  00007E                     i1u1759_20:
 27047  00007E                     
 27048                           ; BSR set to: 1
 27049                           ;main.c: 154: uart_receiveOverruns++;
 27050  00007E  0E01               	movlw	1
 27051  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 27052  000082  0E00               	movlw	0
 27053  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 27054  000086  0E00               	movlw	0
 27055  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 27056  00008A  0E00               	movlw	0
 27057  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 27058  00008E                     i1l13404:
 27059                           
 27060                           ; BSR set to: 1
 27061                           ;main.c: 155: }
 27062                           ;main.c: 158: PIR1bits.RCIF = 0;
 27063  00008E  9A9E               	bcf	3998,5,c	;volatile
 27064                           
 27065                           ;main.c: 160: }
 27066  000090  D07D               	goto	i1l401
 27067  000092                     i1l399:
 27068                           
 27069                           ;main.c: 162: else if (1 == INTCONbits.TMR0IF) {
 27070  000092  A4F2               	btfss	intcon,2,c	;volatile
 27071  000094  D001               	goto	i1u1760_21
 27072  000096  D001               	goto	i1u1760_20
 27073  000098                     i1u1760_21:
 27074  000098  D079               	goto	i1l401
 27075  00009A                     i1u1760_20:
 27076  00009A                     
 27077                           ;main.c: 164: WriteTimer0(0xfb1d);
 27078  00009A  0EFB               	movlw	251
 27079  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 27080  00009E  0E1D               	movlw	29
 27081  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 27082  0000A2  EC63  F00A         	call	i1_WriteTimer0	;wreg free
 27083  0000A6                     
 27084                           ;main.c: 166: timer++;
 27085  0000A6  0E01               	movlw	1
 27086  0000A8  0101               	movlb	1	; () banked
 27087  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 27088  0000AC  0E00               	movlw	0
 27089  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 27090  0000B0  0E00               	movlw	0
 27091  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 27092  0000B4  0E00               	movlw	0
 27093  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 27094  0000B8                     
 27095                           ; BSR set to: 1
 27096                           ;main.c: 167: timekeeper++;
 27097  0000B8  0E01               	movlw	1
 27098  0000BA  2622               	addwf	_timekeeper,f,c	;volatile
 27099  0000BC  0E00               	movlw	0
 27100  0000BE  2223               	addwfc	_timekeeper+1,f,c	;volatile
 27101  0000C0  0E00               	movlw	0
 27102  0000C2  2224               	addwfc	_timekeeper+2,f,c	;volatile
 27103  0000C4  0E00               	movlw	0
 27104  0000C6  2225               	addwfc	_timekeeper+3,f,c	;volatile
 27105  0000C8                     
 27106                           ; BSR set to: 1
 27107                           ;main.c: 170: status_led_cnt++;
 27108  0000C8  4A26               	infsnz	_status_led_cnt,f,c	;volatile
 27109  0000CA  2A27               	incf	_status_led_cnt+1,f,c	;volatile
 27110  0000CC                     
 27111                           ; BSR set to: 1
 27112                           ;main.c: 171: if ((2 == ledFunctionality) &&
 27113                           ;main.c: 172: (status_led_cnt > 1000)) {
 27114  0000CC  5031               	movf	_ledFunctionality,w,c
 27115  0000CE  0A02               	xorlw	2
 27116  0000D0  A4D8               	btfss	status,2,c
 27117  0000D2  D001               	goto	i1u1761_21
 27118  0000D4  D001               	goto	i1u1761_20
 27119  0000D6                     i1u1761_21:
 27120  0000D6  D00C               	goto	i1l13420
 27121  0000D8                     i1u1761_20:
 27122  0000D8                     
 27123                           ; BSR set to: 1
 27124  0000D8  0EE9               	movlw	233
 27125  0000DA  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27126  0000DC  0E03               	movlw	3
 27127  0000DE  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27128  0000E0  A0D8               	btfss	status,0,c
 27129  0000E2  D001               	goto	i1u1762_21
 27130  0000E4  D001               	goto	i1u1762_20
 27131  0000E6                     i1u1762_21:
 27132  0000E6  D004               	goto	i1l13420
 27133  0000E8                     i1u1762_20:
 27134  0000E8                     i1l13418:
 27135                           
 27136                           ; BSR set to: 1
 27137                           ;main.c: 173: LATC1 = ~LATC1;
 27138  0000E8  728B               	btg	3979,1,c	;volatile
 27139                           
 27140                           ;main.c: 174: status_led_cnt = 0;
 27141  0000EA  6A26               	clrf	_status_led_cnt,c	;volatile
 27142  0000EC  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27143                           
 27144                           ;main.c: 175: }
 27145  0000EE  D04D               	goto	i1l404
 27146  0000F0                     i1l13420:
 27147                           
 27148                           ; BSR set to: 1
 27149                           ;main.c: 176: else if ((3 == ledFunctionality) &&
 27150                           ;main.c: 177: (status_led_cnt > 400)) {
 27151  0000F0  5031               	movf	_ledFunctionality,w,c
 27152  0000F2  0A03               	xorlw	3
 27153  0000F4  A4D8               	btfss	status,2,c
 27154  0000F6  D001               	goto	i1u1763_21
 27155  0000F8  D001               	goto	i1u1763_20
 27156  0000FA                     i1u1763_21:
 27157  0000FA  D009               	goto	i1l13426
 27158  0000FC                     i1u1763_20:
 27159  0000FC                     
 27160                           ; BSR set to: 1
 27161  0000FC  0E91               	movlw	145
 27162  0000FE  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27163  000100  0E01               	movlw	1
 27164  000102  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27165  000104  A0D8               	btfss	status,0,c
 27166  000106  D001               	goto	i1u1764_21
 27167  000108  D001               	goto	i1u1764_20
 27168  00010A                     i1u1764_21:
 27169  00010A  D001               	goto	i1l13426
 27170  00010C                     i1u1764_20:
 27171  00010C  D7ED               	goto	i1l13418
 27172  00010E                     i1l13426:
 27173                           
 27174                           ; BSR set to: 1
 27175                           ;main.c: 181: else if ((4 == ledFunctionality) &&
 27176                           ;main.c: 182: (status_led_cnt > 100)) {
 27177  00010E  5031               	movf	_ledFunctionality,w,c
 27178  000110  0A04               	xorlw	4
 27179  000112  A4D8               	btfss	status,2,c
 27180  000114  D001               	goto	i1u1765_21
 27181  000116  D001               	goto	i1u1765_20
 27182  000118                     i1u1765_21:
 27183  000118  D009               	goto	i1l13432
 27184  00011A                     i1u1765_20:
 27185  00011A                     
 27186                           ; BSR set to: 1
 27187  00011A  0E65               	movlw	101
 27188  00011C  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27189  00011E  0E00               	movlw	0
 27190  000120  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27191  000122  A0D8               	btfss	status,0,c
 27192  000124  D001               	goto	i1u1766_21
 27193  000126  D001               	goto	i1u1766_20
 27194  000128                     i1u1766_21:
 27195  000128  D001               	goto	i1l13432
 27196  00012A                     i1u1766_20:
 27197  00012A  D7DE               	goto	i1l13418
 27198  00012C                     i1l13432:
 27199                           
 27200                           ; BSR set to: 1
 27201                           ;main.c: 186: else if ((5 == ledFunctionality) &&
 27202                           ;main.c: 187: (status_led_cnt > 70)) {
 27203  00012C  5031               	movf	_ledFunctionality,w,c
 27204  00012E  0A05               	xorlw	5
 27205  000130  A4D8               	btfss	status,2,c
 27206  000132  D001               	goto	i1u1767_21
 27207  000134  D001               	goto	i1u1767_20
 27208  000136                     i1u1767_21:
 27209  000136  D009               	goto	i1l13438
 27210  000138                     i1u1767_20:
 27211  000138                     
 27212                           ; BSR set to: 1
 27213  000138  0E47               	movlw	71
 27214  00013A  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27215  00013C  0E00               	movlw	0
 27216  00013E  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27217  000140  A0D8               	btfss	status,0,c
 27218  000142  D001               	goto	i1u1768_21
 27219  000144  D001               	goto	i1u1768_20
 27220  000146                     i1u1768_21:
 27221  000146  D001               	goto	i1l13438
 27222  000148                     i1u1768_20:
 27223  000148  D7CF               	goto	i1l13418
 27224  00014A                     i1l13438:
 27225                           
 27226                           ; BSR set to: 1
 27227                           ;main.c: 191: else if ((6 == ledFunctionality) &&
 27228                           ;main.c: 192: (status_led_cnt > 40)) {
 27229  00014A  5031               	movf	_ledFunctionality,w,c
 27230  00014C  0A06               	xorlw	6
 27231  00014E  A4D8               	btfss	status,2,c
 27232  000150  D001               	goto	i1u1769_21
 27233  000152  D001               	goto	i1u1769_20
 27234  000154                     i1u1769_21:
 27235  000154  D009               	goto	i1l13444
 27236  000156                     i1u1769_20:
 27237  000156                     
 27238                           ; BSR set to: 1
 27239  000156  0E29               	movlw	41
 27240  000158  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27241  00015A  0E00               	movlw	0
 27242  00015C  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27243  00015E  A0D8               	btfss	status,0,c
 27244  000160  D001               	goto	i1u1770_21
 27245  000162  D001               	goto	i1u1770_20
 27246  000164                     i1u1770_21:
 27247  000164  D001               	goto	i1l13444
 27248  000166                     i1u1770_20:
 27249  000166  D7C0               	goto	i1l13418
 27250  000168                     i1l13444:
 27251                           
 27252                           ; BSR set to: 1
 27253                           ;main.c: 196: else if (1 == ledFunctionality) {
 27254  000168  0431               	decf	_ledFunctionality,w,c
 27255  00016A  A4D8               	btfss	status,2,c
 27256  00016C  D001               	goto	i1u1771_21
 27257  00016E  D001               	goto	i1u1771_20
 27258  000170                     i1u1771_21:
 27259  000170  D004               	goto	i1l413
 27260  000172                     i1u1771_20:
 27261  000172                     
 27262                           ; BSR set to: 1
 27263                           ;main.c: 197: LATC1 = 1;
 27264  000172  828B               	bsf	3979,1,c	;volatile
 27265                           
 27266                           ;main.c: 198: status_led_cnt = 0;
 27267  000174  6A26               	clrf	_status_led_cnt,c	;volatile
 27268  000176  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27269                           
 27270                           ;main.c: 199: }
 27271  000178  D008               	goto	i1l404
 27272  00017A                     i1l413:
 27273                           
 27274                           ; BSR set to: 1
 27275                           ;main.c: 200: else if (0 == ledFunctionality) {
 27276  00017A  6631               	tstfsz	_ledFunctionality,c
 27277  00017C  D001               	goto	i1u1772_21
 27278  00017E  D001               	goto	i1u1772_20
 27279  000180                     i1u1772_21:
 27280  000180  D004               	goto	i1l410
 27281  000182                     i1u1772_20:
 27282  000182                     
 27283                           ; BSR set to: 1
 27284                           ;main.c: 201: LATC1 = 0;
 27285  000182  928B               	bcf	3979,1,c	;volatile
 27286                           
 27287                           ;main.c: 202: status_led_cnt = 0;
 27288  000184  6A26               	clrf	_status_led_cnt,c	;volatile
 27289  000186  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27290  000188  D000               	goto	i1l404
 27291  00018A                     i1l410:
 27292  00018A                     i1l404:
 27293                           
 27294                           ; BSR set to: 1
 27295                           ;main.c: 203: }
 27296                           ;main.c: 205: INTCONbits.TMR0IF = 0;
 27297  00018A  94F2               	bcf	intcon,2,c	;volatile
 27298  00018C                     i1l401:
 27299                           
 27300                           ;main.c: 206: }
 27301                           ;main.c: 209: if ( 1 == IRXIF ) {
 27302  00018C  AEA4               	btfss	4004,7,c	;volatile
 27303  00018E  D001               	goto	i1u1773_21
 27304  000190  D001               	goto	i1u1773_20
 27305  000192                     i1u1773_21:
 27306  000192  D001               	goto	i1l416
 27307  000194                     i1u1773_20:
 27308  000194                     
 27309                           ;main.c: 211: IRXIF = 0;
 27310  000194  9EA4               	bcf	4004,7,c	;volatile
 27311  000196                     i1l416:
 27312                           
 27313                           ;main.c: 212: }
 27314                           ;main.c: 215: if ( RXBnIF ) {
 27315  000196  A2A4               	btfss	4004,1,c	;volatile
 27316  000198  D001               	goto	i1u1774_21
 27317  00019A  D001               	goto	i1u1774_20
 27318  00019C                     i1u1774_21:
 27319  00019C  D09F               	goto	i1l429
 27320  00019E                     i1u1774_20:
 27321  00019E                     
 27322                           ;main.c: 217: if ( ECANReceiveMessage((unsigned long *)&id,
 27323                           ;main.c: 218: (BYTE*)&data,
 27324                           ;main.c: 219: (BYTE*)&dlc,
 27325                           ;main.c: 220: &flags) ) {
 27326  00019E  0101               	movlb	1	; () banked
 27327  0001A0  0E01               	movlw	high _id
 27328  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 27329  0001A4  0EEB               	movlw	low _id
 27330  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 27331  0001A8  0E01               	movlw	high _data
 27332  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 27333  0001AC  0ED3               	movlw	low _data
 27334  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 27335  0001B0  0E3A               	movlw	low _dlc
 27336  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 27337  0001B4  0E3B               	movlw	low _flags
 27338  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 27339  0001B8  EC45  F022         	call	_ECANReceiveMessage	;wreg free
 27340  0001BC  0900               	iorlw	0
 27341  0001BE  B4D8               	btfsc	status,2,c
 27342  0001C0  D001               	goto	i1u1775_21
 27343  0001C2  D001               	goto	i1u1775_20
 27344  0001C4                     i1u1775_21:
 27345  0001C4  D08A               	goto	i1l13486
 27346  0001C6                     i1u1775_20:
 27347  0001C6                     
 27348                           ;main.c: 223: if ( flags & ECAN_RX_OVERFLOW ) {
 27349  0001C6  A63B               	btfss	_flags,3,c
 27350  0001C8  D001               	goto	i1u1776_21
 27351  0001CA  D001               	goto	i1u1776_20
 27352  0001CC                     i1u1776_21:
 27353  0001CC  D00E               	goto	i1l419
 27354  0001CE                     i1u1776_20:
 27355  0001CE                     
 27356                           ;main.c: 224: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27357  0001CE  AA3B               	btfss	_flags,5,c
 27358  0001D0  D001               	goto	i1u1777_21
 27359  0001D2  D001               	goto	i1u1777_20
 27360  0001D4                     i1u1777_21:
 27361  0001D4  D082               	goto	i1l13486
 27362  0001D6                     i1u1777_20:
 27363  0001D6                     i1l13458:
 27364  0001D6  0E01               	movlw	1
 27365  0001D8  0101               	movlb	1	; () banked
 27366  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 27367  0001DC  0E00               	movlw	0
 27368  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27369  0001E0  0E00               	movlw	0
 27370  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27371  0001E4  0E00               	movlw	0
 27372  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27373  0001E8  D078               	goto	i1l13486
 27374  0001EA                     i1l419:
 27375                           
 27376                           ;main.c: 226: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27377                           ;main.c: 227: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27378  0001EA  BC3B               	btfsc	_flags,6,c
 27379  0001EC  D001               	goto	i1u1778_21
 27380  0001EE  D001               	goto	i1u1778_20
 27381  0001F0                     i1u1778_21:
 27382  0001F0  D074               	goto	i1l13486
 27383  0001F2                     i1u1778_20:
 27384  0001F2  AA3B               	btfss	_flags,5,c
 27385  0001F4  D001               	goto	i1u1779_21
 27386  0001F6  D001               	goto	i1u1779_20
 27387  0001F8                     i1u1779_21:
 27388  0001F8  D070               	goto	i1l13486
 27389  0001FA                     i1u1779_20:
 27390  0001FA                     
 27391                           ;main.c: 229: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27392  0001FA  503A               	movf	_dlc,w,c
 27393  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 27394  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 27395  000200  0E05               	movlw	5
 27396  000202  2617               	addwf	??_Interrupt,f,c
 27397  000204  0E00               	movlw	0
 27398  000206  2218               	addwfc	??_Interrupt+1,f,c
 27399  000208  0101               	movlb	1	; () banked
 27400  00020A  0E01               	movlw	high _canInputFifo
 27401  00020C  6E02               	movwf	?_fifo_getFree+1,c
 27402  00020E  0ECB               	movlw	low _canInputFifo
 27403  000210  6E01               	movwf	?_fifo_getFree,c
 27404  000212  EC71  F012         	call	_fifo_getFree	;wreg free
 27405  000216  5017               	movf	??_Interrupt,w,c
 27406  000218  5C01               	subwf	?_fifo_getFree,w,c
 27407  00021A  5018               	movf	??_Interrupt+1,w,c
 27408  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 27409  00021E  A0D8               	btfss	status,0,c
 27410  000220  D001               	goto	i1u1780_21
 27411  000222  D001               	goto	i1u1780_20
 27412  000224                     i1u1780_21:
 27413  000224  D7D8               	goto	i1l13458
 27414  000226                     i1u1780_20:
 27415  000226                     
 27416                           ; BSR set to: 1
 27417                           ;main.c: 230: uint8_t fail = 0;
 27418  000226  6A21               	clrf	Interrupt@fail,c
 27419  000228                     
 27420                           ; BSR set to: 1
 27421                           ;main.c: 231: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 27422  000228  0E01               	movlw	high _canInputFifo
 27423  00022A  6E02               	movwf	?_fifo_write+1,c
 27424  00022C  0ECB               	movlw	low _canInputFifo
 27425  00022E  6E01               	movwf	?_fifo_write,c
 27426  000230  0E01               	movlw	high _id
 27427  000232  6E04               	movwf	?_fifo_write+3,c
 27428  000234  0EEB               	movlw	low _id
 27429  000236  6E03               	movwf	?_fifo_write+2,c
 27430  000238  0E04               	movlw	4
 27431  00023A  6E05               	movwf	?_fifo_write+4,c
 27432  00023C  0E00               	movlw	0
 27433  00023E  6E06               	movwf	?_fifo_write+5,c
 27434  000240  0E00               	movlw	0
 27435  000242  6E07               	movwf	?_fifo_write+6,c
 27436  000244  0E00               	movlw	0
 27437  000246  6E08               	movwf	?_fifo_write+7,c
 27438  000248  ECF1  F019         	call	_fifo_write	;wreg free
 27439  00024C  5001               	movf	?_fifo_write,w,c
 27440  00024E  0A04               	xorlw	4
 27441  000250  1002               	iorwf	?_fifo_write+1,w,c
 27442  000252  B4D8               	btfsc	status,2,c
 27443  000254  D001               	goto	i1u1781_21
 27444  000256  D001               	goto	i1u1781_20
 27445  000258                     i1u1781_21:
 27446  000258  D002               	goto	i1l13470
 27447  00025A                     i1u1781_20:
 27448  00025A                     
 27449                           ; BSR set to: 1
 27450                           ;main.c: 232: fail = 1;
 27451  00025A  0E01               	movlw	1
 27452  00025C  6E21               	movwf	Interrupt@fail,c
 27453  00025E                     i1l13470:
 27454                           
 27455                           ; BSR set to: 1
 27456                           ;main.c: 233: }
 27457                           ;main.c: 234: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 27458  00025E  0E01               	movlw	high _canInputFifo
 27459  000260  6E02               	movwf	?_fifo_write+1,c
 27460  000262  0ECB               	movlw	low _canInputFifo
 27461  000264  6E01               	movwf	?_fifo_write,c
 27462  000266  0E3A               	movlw	low _dlc
 27463  000268  6E03               	movwf	?_fifo_write+2,c
 27464  00026A  0E00               	movlw	high _dlc
 27465  00026C  6E04               	movwf	?_fifo_write+3,c
 27466  00026E  0E0F               	movlw	15
 27467  000270  6E04               	movwf	?_fifo_write+3,c
 27468  000272  0E5F               	movlw	__accesstop+-1
 27469  000274  6403               	cpfsgt	?_fifo_write+2,c
 27470  000276  6A04               	clrf	?_fifo_write+3,c
 27471  000278  0E01               	movlw	1
 27472  00027A  6E05               	movwf	?_fifo_write+4,c
 27473  00027C  0E00               	movlw	0
 27474  00027E  6E06               	movwf	?_fifo_write+5,c
 27475  000280  0E00               	movlw	0
 27476  000282  6E07               	movwf	?_fifo_write+6,c
 27477  000284  0E00               	movlw	0
 27478  000286  6E08               	movwf	?_fifo_write+7,c
 27479  000288  ECF1  F019         	call	_fifo_write	;wreg free
 27480  00028C  0401               	decf	?_fifo_write,w,c
 27481  00028E  1002               	iorwf	?_fifo_write+1,w,c
 27482  000290  B4D8               	btfsc	status,2,c
 27483  000292  D001               	goto	i1u1782_21
 27484  000294  D001               	goto	i1u1782_20
 27485  000296                     i1u1782_21:
 27486  000296  D002               	goto	i1l13474
 27487  000298                     i1u1782_20:
 27488  000298                     
 27489                           ; BSR set to: 1
 27490                           ;main.c: 235: fail = 1;
 27491  000298  0E01               	movlw	1
 27492  00029A  6E21               	movwf	Interrupt@fail,c
 27493  00029C                     i1l13474:
 27494                           
 27495                           ; BSR set to: 1
 27496                           ;main.c: 236: }
 27497                           ;main.c: 237: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 27498  00029C  0E01               	movlw	high _canInputFifo
 27499  00029E  6E02               	movwf	?_fifo_write+1,c
 27500  0002A0  0ECB               	movlw	low _canInputFifo
 27501  0002A2  6E01               	movwf	?_fifo_write,c
 27502  0002A4  0E01               	movlw	high _data
 27503  0002A6  6E04               	movwf	?_fifo_write+3,c
 27504  0002A8  0ED3               	movlw	low _data
 27505  0002AA  6E03               	movwf	?_fifo_write+2,c
 27506  0002AC  503A               	movf	_dlc,w,c
 27507  0002AE  6E05               	movwf	?_fifo_write+4,c
 27508  0002B0  6A06               	clrf	?_fifo_write+5,c
 27509  0002B2  6A07               	clrf	?_fifo_write+6,c
 27510  0002B4  6A08               	clrf	?_fifo_write+7,c
 27511  0002B6  ECF1  F019         	call	_fifo_write	;wreg free
 27512  0002BA  503A               	movf	_dlc,w,c
 27513  0002BC  1801               	xorwf	?_fifo_write,w,c
 27514  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 27515  0002C0  B4D8               	btfsc	status,2,c
 27516  0002C2  D001               	goto	i1u1783_21
 27517  0002C4  D001               	goto	i1u1783_20
 27518  0002C6                     i1u1783_21:
 27519  0002C6  D002               	goto	i1l13478
 27520  0002C8                     i1u1783_20:
 27521  0002C8                     
 27522                           ; BSR set to: 1
 27523                           ;main.c: 238: fail = 1;
 27524  0002C8  0E01               	movlw	1
 27525  0002CA  6E21               	movwf	Interrupt@fail,c
 27526  0002CC                     i1l13478:
 27527                           
 27528                           ; BSR set to: 1
 27529                           ;main.c: 239: }
 27530                           ;main.c: 241: fifo_canrxcount++;
 27531  0002CC  2A30               	incf	_fifo_canrxcount,f,c	;volatile
 27532  0002CE                     
 27533                           ; BSR set to: 1
 27534                           ;main.c: 243: if ( fail ) {
 27535  0002CE  5021               	movf	Interrupt@fail,w,c
 27536  0002D0  B4D8               	btfsc	status,2,c
 27537  0002D2  D001               	goto	i1u1784_21
 27538  0002D4  D001               	goto	i1u1784_20
 27539  0002D6                     i1u1784_21:
 27540  0002D6  D001               	goto	i1l13486
 27541  0002D8                     i1u1784_20:
 27542  0002D8  D77E               	goto	i1l13458
 27543  0002DA                     i1l13486:
 27544                           
 27545                           ;main.c: 250: }
 27546                           ;main.c: 252: }
 27547                           ;main.c: 254: }
 27548                           ;main.c: 257: RXBnIF = 0;
 27549  0002DA  92A4               	bcf	4004,1,c	;volatile
 27550  0002DC                     i1l429:
 27551  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 27552  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 27553  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 27554  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 27555  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 27556  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 27557  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 27558  0002F8  0010               	retfie	
 27559  0002FA                     __end_of_Interrupt:
 27560                           	opt stack 0
 27561                           tblptru	equ	0xFF8
 27562                           tblptrh	equ	0xFF7
 27563                           tblptrl	equ	0xFF6
 27564                           tablat	equ	0xFF5
 27565                           prodh	equ	0xFF4
 27566                           prodl	equ	0xFF3
 27567                           intcon	equ	0xFF2
 27568                           indf0	equ	0xFEF
 27569                           postinc0	equ	0xFEE
 27570                           fsr0h	equ	0xFEA
 27571                           fsr0l	equ	0xFE9
 27572                           wreg	equ	0xFE8
 27573                           indf1	equ	0xFE7
 27574                           postinc1	equ	0xFE6
 27575                           postdec1	equ	0xFE5
 27576                           fsr1h	equ	0xFE2
 27577                           fsr1l	equ	0xFE1
 27578                           bsr	equ	0xFE0
 27579                           indf2	equ	0xFDF
 27580                           postinc2	equ	0xFDE
 27581                           postdec2	equ	0xFDD
 27582                           plusw2	equ	0xFDB
 27583                           fsr2h	equ	0xFDA
 27584                           fsr2l	equ	0xFD9
 27585                           status	equ	0xFD8
 27586                           
 27587 ;; *************** function i1_WriteTimer0 *****************
 27588 ;; Defined at:
 27589 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27590 ;; Parameters:    Size  Location     Type
 27591 ;;  timer0          2    0[COMRAM] unsigned int 
 27592 ;; Auto vars:     Size  Location     Type
 27593 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27594 ;; Return value:  Size  Location     Type
 27595 ;;		None               void
 27596 ;; Registers used:
 27597 ;;		None
 27598 ;; Tracked objects:
 27599 ;;		On entry : 0/0
 27600 ;;		On exit  : 0/0
 27601 ;;		Unchanged: 0/0
 27602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27603 ;;      Params:         2       0       0       0       0       0       0
 27604 ;;      Locals:         2       0       0       0       0       0       0
 27605 ;;      Temps:          0       0       0       0       0       0       0
 27606 ;;      Totals:         4       0       0       0       0       0       0
 27607 ;;Total ram usage:        4 bytes
 27608 ;; Hardware stack levels used:    1
 27609 ;; This function calls:
 27610 ;;		Nothing
 27611 ;; This function is called by:
 27612 ;;		_Interrupt
 27613 ;; This function uses a non-reentrant model
 27614 ;;
 27615                           
 27616                           	psect	text83
 27617  0014C6                     __ptext83:
 27618                           	opt stack 0
 27619  0014C6                     i1_WriteTimer0:
 27620                           	opt stack 20
 27621                           
 27622                           ;incstack = 0
 27623                           ;incstack = 0
 27624  0014C6  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27625  0014CA  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27626  0014CE  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27627  0014D2  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27628  0014D6  0012               	return	
 27629  0014D8                     __end_ofi1_WriteTimer0:
 27630                           	opt stack 0
 27631                           tblptru	equ	0xFF8
 27632                           tblptrh	equ	0xFF7
 27633                           tblptrl	equ	0xFF6
 27634                           tablat	equ	0xFF5
 27635                           prodh	equ	0xFF4
 27636                           prodl	equ	0xFF3
 27637                           intcon	equ	0xFF2
 27638                           indf0	equ	0xFEF
 27639                           postinc0	equ	0xFEE
 27640                           fsr0h	equ	0xFEA
 27641                           fsr0l	equ	0xFE9
 27642                           wreg	equ	0xFE8
 27643                           indf1	equ	0xFE7
 27644                           postinc1	equ	0xFE6
 27645                           postdec1	equ	0xFE5
 27646                           fsr1h	equ	0xFE2
 27647                           fsr1l	equ	0xFE1
 27648                           bsr	equ	0xFE0
 27649                           indf2	equ	0xFDF
 27650                           postinc2	equ	0xFDE
 27651                           postdec2	equ	0xFDD
 27652                           plusw2	equ	0xFDB
 27653                           fsr2h	equ	0xFDA
 27654                           fsr2l	equ	0xFD9
 27655                           status	equ	0xFD8
 27656                           
 27657 ;; *************** function _fifo_getFree *****************
 27658 ;; Defined at:
 27659 ;;		line 97 in file "fifo.c"
 27660 ;; Parameters:    Size  Location     Type
 27661 ;;  f               2    0[COMRAM] PTR struct .
 27662 ;;		 -> canInputFifo(8), 
 27663 ;; Auto vars:     Size  Location     Type
 27664 ;;		None
 27665 ;; Return value:  Size  Location     Type
 27666 ;;                  2    0[COMRAM] unsigned short 
 27667 ;; Registers used:
 27668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27669 ;; Tracked objects:
 27670 ;;		On entry : F/1
 27671 ;;		On exit  : F/1
 27672 ;;		Unchanged: F/0
 27673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27674 ;;      Params:         2       0       0       0       0       0       0
 27675 ;;      Locals:         0       0       0       0       0       0       0
 27676 ;;      Temps:          8       0       0       0       0       0       0
 27677 ;;      Totals:        10       0       0       0       0       0       0
 27678 ;;Total ram usage:       10 bytes
 27679 ;; Hardware stack levels used:    1
 27680 ;; This function calls:
 27681 ;;		Nothing
 27682 ;; This function is called by:
 27683 ;;		_Interrupt
 27684 ;; This function uses a non-reentrant model
 27685 ;;
 27686                           
 27687                           	psect	text84
 27688  0024E2                     __ptext84:
 27689                           	opt stack 0
 27690  0024E2                     _fifo_getFree:
 27691                           	opt stack 20
 27692                           
 27693                           ; BSR set to: 1
 27694                           ;fifo.c: 98: if (f->head < f->tail) {
 27695                           
 27696                           ;incstack = 0
 27697                           ;incstack = 0
 27698  0024E2  EE20 F004          	lfsr	2,4
 27699  0024E6  5001               	movf	fifo_getFree@f,w,c
 27700  0024E8  26D9               	addwf	fsr2l,f,c
 27701  0024EA  5002               	movf	fifo_getFree@f+1,w,c
 27702  0024EC  22DA               	addwfc	fsr2h,f,c
 27703  0024EE  EE10 F002          	lfsr	1,2
 27704  0024F2  5001               	movf	fifo_getFree@f,w,c
 27705  0024F4  26E1               	addwf	fsr1l,f,c
 27706  0024F6  5002               	movf	fifo_getFree@f+1,w,c
 27707  0024F8  22E2               	addwfc	fsr1h,f,c
 27708  0024FA  52E6               	movf	postinc1,f,c
 27709  0024FC  52DE               	movf	postinc2,f,c
 27710  0024FE  50DD               	movf	postdec2,w,c
 27711  002500  5CE5               	subwf	postdec1,w,c
 27712  002502  E102               	bnz	i1u639_25
 27713  002504  50DF               	movf	indf2,w,c
 27714  002506  5CE7               	subwf	indf1,w,c
 27715  002508                     i1u639_25:
 27716  002508  E213               	bc	i1l6508
 27717                           
 27718                           ; BSR set to: 1
 27719                           ;fifo.c: 99: return (f->tail - f->head);
 27720  00250A  EE20 F002          	lfsr	2,2
 27721  00250E  D834               	call	PL76	;call to abstracted procedure
 27722  002510  EE20 F004          	lfsr	2,4
 27723  002514  5001               	movf	fifo_getFree@f,w,c
 27724  002516  26D9               	addwf	fsr2l,f,c
 27725  002518  5002               	movf	fifo_getFree@f+1,w,c
 27726  00251A  22DA               	addwfc	fsr2h,f,c
 27727  00251C  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27728  002520  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27729  002524  5003               	movf	??_fifo_getFree,w,c
 27730  002526  5C05               	subwf	??_fifo_getFree+2,w,c
 27731  002528  6E01               	movwf	?_fifo_getFree,c
 27732  00252A  5004               	movf	??_fifo_getFree+1,w,c
 27733  00252C  5806               	subwfb	??_fifo_getFree+3,w,c
 27734  00252E  D022               	goto	L47
 27735  002530                     i1l6508:
 27736                           
 27737                           ; BSR set to: 1
 27738                           ;fifo.c: 101: else {
 27739                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27740  002530  EE20 F004          	lfsr	2,4
 27741  002534  D821               	call	PL76	;call to abstracted procedure
 27742  002536  EE20 F002          	lfsr	2,2
 27743  00253A  5001               	movf	fifo_getFree@f,w,c
 27744  00253C  26D9               	addwf	fsr2l,f,c
 27745  00253E  5002               	movf	fifo_getFree@f+1,w,c
 27746  002540  22DA               	addwfc	fsr2h,f,c
 27747  002542  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27748  002546  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27749  00254A  EE20 F006          	lfsr	2,6
 27750  00254E  5001               	movf	fifo_getFree@f,w,c
 27751  002550  26D9               	addwf	fsr2l,f,c
 27752  002552  5002               	movf	fifo_getFree@f+1,w,c
 27753  002554  22DA               	addwfc	fsr2h,f,c
 27754  002556  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27755  00255A  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27756  00255E  5005               	movf	??_fifo_getFree+2,w,c
 27757  002560  5C07               	subwf	??_fifo_getFree+4,w,c
 27758  002562  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27759  002564  5006               	movf	??_fifo_getFree+3,w,c
 27760  002566  5808               	subwfb	??_fifo_getFree+5,w,c
 27761  002568  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27762  00256A  5003               	movf	??_fifo_getFree,w,c
 27763  00256C  2409               	addwf	??_fifo_getFree+6,w,c
 27764  00256E  6E01               	movwf	?_fifo_getFree,c
 27765  002570  5004               	movf	??_fifo_getFree+1,w,c
 27766  002572  200A               	addwfc	??_fifo_getFree+7,w,c
 27767  002574                     L47:
 27768  002574  6E02               	movwf	?_fifo_getFree+1,c
 27769                           
 27770                           ; BSR set to: 1
 27771  002576  0012               	return	
 27772  002578                     __end_of_fifo_getFree:
 27773                           	opt stack 0
 27774  002578                     PL76:
 27775                           	opt stack 20
 27776  002578  5001               	movf	fifo_getFree@f,w,c
 27777  00257A  26D9               	addwf	fsr2l,f,c
 27778  00257C  5002               	movf	fifo_getFree@f+1,w,c
 27779  00257E  22DA               	addwfc	fsr2h,f,c
 27780  002580  CFDE F003          	movff	postinc2,??_fifo_getFree
 27781  002584  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27782  002588  0012               	return	
 27783  00258A                     __end_ofPL76:
 27784                           	opt stack 0
 27785                           tblptru	equ	0xFF8
 27786                           tblptrh	equ	0xFF7
 27787                           tblptrl	equ	0xFF6
 27788                           tablat	equ	0xFF5
 27789                           prodh	equ	0xFF4
 27790                           prodl	equ	0xFF3
 27791                           intcon	equ	0xFF2
 27792                           indf0	equ	0xFEF
 27793                           postinc0	equ	0xFEE
 27794                           fsr0h	equ	0xFEA
 27795                           fsr0l	equ	0xFE9
 27796                           wreg	equ	0xFE8
 27797                           indf1	equ	0xFE7
 27798                           postinc1	equ	0xFE6
 27799                           postdec1	equ	0xFE5
 27800                           fsr1h	equ	0xFE2
 27801                           fsr1l	equ	0xFE1
 27802                           bsr	equ	0xFE0
 27803                           indf2	equ	0xFDF
 27804                           postinc2	equ	0xFDE
 27805                           postdec2	equ	0xFDD
 27806                           plusw2	equ	0xFDB
 27807                           fsr2h	equ	0xFDA
 27808                           fsr2l	equ	0xFD9
 27809                           status	equ	0xFD8
 27810                           
 27811 ;; *************** function _ECANReceiveMessage *****************
 27812 ;; Defined at:
 27813 ;;		line 803 in file "ECAN.c"
 27814 ;; Parameters:    Size  Location     Type
 27815 ;;  id              2    9[COMRAM] PTR unsigned long 
 27816 ;;		 -> id(4), 
 27817 ;;  data            2   11[COMRAM] PTR unsigned char 
 27818 ;;		 -> data(8), 
 27819 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 27820 ;;		 -> dlc(1), 
 27821 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 27822 ;;		 -> flags(1), 
 27823 ;; Auto vars:     Size  Location     Type
 27824 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 27825 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27826 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27827 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 27828 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27829 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27830 ;;  temp            1   19[COMRAM] struct .
 27831 ;;  mode            1   18[COMRAM] unsigned char 
 27832 ;;  i               1   17[COMRAM] unsigned char 
 27833 ;; Return value:  Size  Location     Type
 27834 ;;                  1    wreg      enum E15660
 27835 ;; Registers used:
 27836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27837 ;; Tracked objects:
 27838 ;;		On entry : F/1
 27839 ;;		On exit  : 0/0
 27840 ;;		Unchanged: 0/0
 27841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27842 ;;      Params:         6       0       0       0       0       0       0
 27843 ;;      Locals:         7       0       0       0       0       0       0
 27844 ;;      Temps:          0       0       0       0       0       0       0
 27845 ;;      Totals:        13       0       0       0       0       0       0
 27846 ;;Total ram usage:       13 bytes
 27847 ;; Hardware stack levels used:    1
 27848 ;; Hardware stack levels required when called:    1
 27849 ;; This function calls:
 27850 ;;		__ECANPointBuffer
 27851 ;;		__RegsToCANID
 27852 ;; This function is called by:
 27853 ;;		_Interrupt
 27854 ;; This function uses a non-reentrant model
 27855 ;;
 27856                           
 27857                           	psect	text85
 27858  00448A                     __ptext85:
 27859                           	opt stack 0
 27860  00448A                     _ECANReceiveMessage:
 27861                           	opt stack 19
 27862                           
 27863                           ; BSR set to: 1
 27864                           ;ECAN.c: 805: BYTE mode;
 27865                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27866                           ;ECAN.c: 809: char i;
 27867                           ;ECAN.c: 810: BYTE_VAL temp;
 27868                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27869                           
 27870                           ; BSR set to: 1
 27871                           ;incstack = 0
 27872                           ;incstack = 0
 27873  00448A  6A2B               	clrf	__ECANRxFilterHitInfo,c
 27874                           
 27875                           ; BSR set to: 1
 27876                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27877  00448C  5077               	movf	3959,w,c	;volatile
 27878  00448E  0BC0               	andlw	192
 27879  004490  6E13               	movwf	ECANReceiveMessage@mode,c
 27880                           
 27881                           ; BSR set to: 1
 27882                           ;ECAN.c: 816: if ( mode == 0x00 )
 27883  004492  6613               	tstfsz	ECANReceiveMessage@mode,c
 27884  004494  D032               	goto	i1l9884
 27885                           
 27886                           ; BSR set to: 1
 27887                           ;ECAN.c: 822: {
 27888                           ;ECAN.c: 824: if ( RXB0FUL )
 27889  004496  AE60               	btfss	3936,7,c	;volatile
 27890  004498  D012               	goto	i1l1480
 27891                           
 27892                           ; BSR set to: 1
 27893                           ;ECAN.c: 825: {
 27894                           ;ECAN.c: 827: RXB0IF = 0;
 27895  00449A  90A4               	bcf	4004,0,c	;volatile
 27896                           
 27897                           ;ECAN.c: 830: if ( RXB0OVFL )
 27898  00449C  AE74               	btfss	3956,7,c	;volatile
 27899  00449E  D006               	goto	i1l9860
 27900                           
 27901                           ; BSR set to: 1
 27902                           ;ECAN.c: 831: {
 27903                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27904  0044A0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27905  0044A2  6ED9               	movwf	fsr2l,c
 27906  0044A4  6ADA               	clrf	fsr2h,c
 27907  0044A6  0E00               	movlw	0
 27908  0044A8  86DB               	bsf	plusw2,3,c
 27909                           
 27910                           ; BSR set to: 1
 27911                           ;ECAN.c: 833: RXB0OVFL = 0;
 27912  0044AA  9E74               	bcf	3956,7,c	;volatile
 27913  0044AC                     i1l9860:
 27914                           
 27915                           ; BSR set to: 1
 27916                           ;ECAN.c: 834: }
 27917                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27918  0044AC  A060               	btfss	3936,0,c	;volatile
 27919  0044AE  D002               	bra	i1u1176_25
 27920  0044B0  802B               	bsf	__ECANRxFilterHitInfo,0,c
 27921  0044B2  D001               	bra	i1u1176_27
 27922  0044B4                     i1u1176_25:
 27923  0044B4  902B               	bcf	__ECANRxFilterHitInfo,0,c
 27924  0044B6                     i1u1176_27:
 27925                           
 27926                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27927  0044B6  0E0F               	movlw	15	;volatile
 27928  0044B8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27929  0044BA  0E60               	movlw	96	;volatile
 27930  0044BC  D01A               	goto	L48
 27931  0044BE                     i1l1480:
 27932                           
 27933                           ; BSR set to: 1
 27934                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27935  0044BE  010F               	movlb	15	; () banked
 27936  0044C0  AF50               	btfss	80,7,b	;volatile
 27937  0044C2  D019               	goto	i1l9878
 27938                           
 27939                           ; BSR set to: 15
 27940                           ;ECAN.c: 842: {
 27941                           ;ECAN.c: 844: RXB1IF = 0;
 27942  0044C4  92A4               	bcf	4004,1,c	;volatile
 27943                           
 27944                           ;ECAN.c: 847: if ( RXB1OVFL )
 27945  0044C6  AC74               	btfss	3956,6,c	;volatile
 27946  0044C8  D006               	goto	i1l9870
 27947                           
 27948                           ; BSR set to: 15
 27949                           ;ECAN.c: 848: {
 27950                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27951  0044CA  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27952  0044CC  6ED9               	movwf	fsr2l,c
 27953  0044CE  6ADA               	clrf	fsr2h,c
 27954  0044D0  0E00               	movlw	0
 27955  0044D2  86DB               	bsf	plusw2,3,c
 27956                           
 27957                           ; BSR set to: 15
 27958                           ;ECAN.c: 850: RXB1OVFL = 0;
 27959  0044D4  9C74               	bcf	3956,6,c	;volatile
 27960  0044D6                     i1l9870:
 27961                           
 27962                           ; BSR set to: 15
 27963                           ;ECAN.c: 851: }
 27964                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27965  0044D6  5150               	movf	80,w,b	;volatile
 27966  0044D8  0B07               	andlw	7
 27967  0044DA  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27968                           
 27969                           ; BSR set to: 15
 27970                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27971  0044DC  0E02               	movlw	2
 27972  0044DE  602B               	cpfslt	__ECANRxFilterHitInfo,c
 27973  0044E0  D005               	goto	i1l9876
 27974                           
 27975                           ; BSR set to: 15
 27976                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27977  0044E2  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27978  0044E4  6ED9               	movwf	fsr2l,c
 27979  0044E6  6ADA               	clrf	fsr2h,c
 27980  0044E8  0E00               	movlw	0
 27981  0044EA  8EDB               	bsf	plusw2,7,c
 27982  0044EC                     i1l9876:
 27983                           
 27984                           ; BSR set to: 15
 27985                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27986  0044EC  0E0F               	movlw	15	;volatile
 27987  0044EE  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27988  0044F0  0E50               	movlw	80	;volatile
 27989  0044F2                     L48:
 27990  0044F2  6E15               	movwf	ECANReceiveMessage@ptr,c
 27991                           
 27992                           ;ECAN.c: 860: }
 27993  0044F4  D065               	goto	i1l9938
 27994  0044F6                     i1l9878:
 27995                           
 27996                           ;ECAN.c: 861: else
 27997                           ;ECAN.c: 862: return FALSE;
 27998  0044F6  0E00               	movlw	0
 27999  0044F8  D0C6               	goto	i1l1487
 28000  0044FA                     i1l9884:
 28001                           
 28002                           ; BSR set to: 1
 28003                           ;ECAN.c: 869: else if ( mode == 0x40 )
 28004  0044FA  5013               	movf	ECANReceiveMessage@mode,w,c
 28005  0044FC  0A40               	xorlw	64
 28006  0044FE  E146               	bnz	i1l1490
 28007                           
 28008                           ; BSR set to: 1
 28009                           ;ECAN.c: 875: {
 28010                           ;ECAN.c: 876: if ( RXB0FUL )
 28011  004500  AE60               	btfss	3936,7,c	;volatile
 28012  004502  D004               	goto	i1l1491
 28013                           
 28014                           ; BSR set to: 1
 28015                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 28016  004504  0E0F               	movlw	15	;volatile
 28017  004506  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28018  004508  0E60               	movlw	96	;volatile
 28019  00450A  D03E               	goto	L55
 28020  00450C                     i1l1491:
 28021                           
 28022                           ; BSR set to: 1
 28023                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 28024  00450C  010F               	movlb	15	; () banked
 28025  00450E  AF50               	btfss	80,7,b	;volatile
 28026  004510  D004               	goto	i1l1493
 28027                           
 28028                           ; BSR set to: 15
 28029                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 28030  004512  0E0F               	movlw	15	;volatile
 28031  004514  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28032  004516  0E50               	movlw	80	;volatile
 28033  004518  D037               	goto	L55
 28034  00451A                     i1l1493:
 28035                           
 28036                           ; BSR set to: 15
 28037                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 28038  00451A  010D               	movlb	13
 28039  00451C  B5F8               	btfsc	248,2,b	;volatile
 28040  00451E  D007               	goto	i1l1495
 28041  004520  010E               	movlb	14
 28042  004522  AF20               	btfss	32,7,b	;volatile
 28043  004524  D004               	goto	i1l1495
 28044                           
 28045                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 28046  004526  0E0E               	movlw	14	;volatile
 28047  004528  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28048  00452A  0E20               	movlw	32	;volatile
 28049  00452C  D02D               	goto	L55
 28050  00452E                     i1l1495:
 28051                           
 28052                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 28053  00452E  010D               	movlb	13
 28054  004530  B7F8               	btfsc	248,3,b	;volatile
 28055  004532  D007               	goto	i1l1497
 28056  004534  010E               	movlb	14
 28057  004536  AF30               	btfss	48,7,b	;volatile
 28058  004538  D004               	goto	i1l1497
 28059                           
 28060                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 28061  00453A  0E0E               	movlw	14	;volatile
 28062  00453C  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28063  00453E  0E30               	movlw	48	;volatile
 28064  004540  D023               	goto	L55
 28065  004542                     i1l1497:
 28066                           
 28067                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 28068  004542  010D               	movlb	13
 28069  004544  B9F8               	btfsc	248,4,b	;volatile
 28070  004546  D007               	goto	i1l1499
 28071  004548  010E               	movlb	14
 28072  00454A  AF40               	btfss	64,7,b	;volatile
 28073  00454C  D004               	goto	i1l1499
 28074                           
 28075                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 28076  00454E  0E0E               	movlw	14	;volatile
 28077  004550  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28078  004552  0E40               	movlw	64	;volatile
 28079  004554  D019               	goto	L55
 28080  004556                     i1l1499:
 28081                           
 28082                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 28083  004556  010D               	movlb	13
 28084  004558  BBF8               	btfsc	248,5,b	;volatile
 28085  00455A  D005               	goto	i1l1501
 28086  00455C  010E               	movlb	14
 28087  00455E  AF50               	btfss	80,7,b	;volatile
 28088  004560  D002               	goto	i1l1501
 28089                           
 28090                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 28091  004562  0E0E               	movlw	14	;volatile
 28092  004564  D7D7               	goto	L56
 28093  004566                     i1l1501:
 28094                           
 28095                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 28096  004566  010D               	movlb	13
 28097  004568  BDF8               	btfsc	248,6,b	;volatile
 28098  00456A  D005               	goto	i1l1503
 28099  00456C  010E               	movlb	14
 28100  00456E  AF60               	btfss	96,7,b	;volatile
 28101  004570  D002               	goto	i1l1503
 28102                           
 28103                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 28104  004572  0E0E               	movlw	14	;volatile
 28105  004574  D7C8               	goto	L57
 28106  004576                     i1l1503:
 28107                           
 28108                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 28109  004576  010D               	movlb	13
 28110  004578  BFF8               	btfsc	248,7,b	;volatile
 28111  00457A  D7BD               	goto	i1l9878
 28112  00457C  010E               	movlb	14
 28113  00457E  AF70               	btfss	112,7,b	;volatile
 28114  004580  D7BA               	goto	i1l9878
 28115                           
 28116                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 28117  004582  0E0E               	movlw	14	;volatile
 28118  004584  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28119  004586  0E70               	movlw	112	;volatile
 28120  004588                     L55:
 28121  004588  6E15               	movwf	ECANReceiveMessage@ptr,c
 28122  00458A  D00A               	goto	i1l9928
 28123  00458C                     i1l1490:
 28124                           
 28125                           ; BSR set to: 1
 28126                           ;ECAN.c: 910: else
 28127                           ;ECAN.c: 915: {
 28128                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 28129  00458C  AE74               	btfss	3956,7,c	;volatile
 28130  00458E  D7B3               	goto	i1l9878
 28131                           
 28132                           ; BSR set to: 1
 28133                           ;ECAN.c: 919: {
 28134                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 28135  004590  506F               	movf	3951,w,c	;volatile
 28136  004592  0B07               	andlw	7
 28137  004594  ECE3  F00E         	call	__ECANPointBuffer
 28138  004598  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 28139  00459C  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 28140  0045A0                     i1l9928:
 28141                           
 28142                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 28143  0045A0  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 28144  0045A4  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 28145  0045A8  50DF               	movf	indf2,w,c
 28146  0045AA  0B1F               	andlw	31
 28147  0045AC  6E2B               	movwf	__ECANRxFilterHitInfo,c
 28148                           
 28149                           ;ECAN.c: 934: RXB1IF = 0;
 28150  0045AE  92A4               	bcf	4004,1,c	;volatile
 28151                           
 28152                           ;ECAN.c: 936: if ( RXB1OVFL )
 28153  0045B0  AC74               	btfss	3956,6,c	;volatile
 28154  0045B2  D006               	goto	i1l9938
 28155                           
 28156                           ;ECAN.c: 937: {
 28157                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 28158  0045B4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28159  0045B6  6ED9               	movwf	fsr2l,c
 28160  0045B8  6ADA               	clrf	fsr2h,c
 28161  0045BA  0E00               	movlw	0
 28162  0045BC  86DB               	bsf	plusw2,3,c
 28163                           
 28164                           ;ECAN.c: 939: RXB1OVFL = 0;
 28165  0045BE  9C74               	bcf	3956,6,c	;volatile
 28166  0045C0                     i1l9938:
 28167                           
 28168                           ;ECAN.c: 944: savedPtr = ptr;
 28169  0045C0  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 28170  0045C4  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 28171                           
 28172                           ;ECAN.c: 945: *msgFlags = 0;
 28173  0045C8  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28174  0045CA  6ED9               	movwf	fsr2l,c
 28175  0045CC  6ADA               	clrf	fsr2h,c
 28176  0045CE  6ADF               	clrf	indf2,c
 28177                           
 28178                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 28179  0045D0  EE20 F005          	lfsr	2,5
 28180  0045D4  D859               	call	PL92	;call to abstracted procedure
 28181                           
 28182                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 28183  0045D6  500E               	movf	ECANReceiveMessage@dataLen,w,c
 28184  0045D8  6ED9               	movwf	fsr2l,c
 28185  0045DA  6ADA               	clrf	fsr2h,c
 28186  0045DC  5014               	movf	ECANReceiveMessage@temp,w,c
 28187  0045DE  0B0F               	andlw	15
 28188  0045E0  6EDF               	movwf	indf2,c
 28189                           
 28190                           ;ECAN.c: 952: if ( temp.bits.b6 )
 28191  0045E2  AC14               	btfss	ECANReceiveMessage@temp,6,c
 28192  0045E4  D005               	goto	i1l1511
 28193                           
 28194                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 28195  0045E6  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28196  0045E8  6ED9               	movwf	fsr2l,c
 28197  0045EA  6ADA               	clrf	fsr2h,c
 28198  0045EC  0E00               	movlw	0
 28199  0045EE  8CDB               	bsf	plusw2,6,c
 28200  0045F0                     i1l1511:
 28201                           
 28202                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 28203  0045F0  EE20 F002          	lfsr	2,2
 28204  0045F4  D849               	call	PL92	;call to abstracted procedure
 28205                           
 28206                           ;ECAN.c: 957: if ( temp.bits.b3 )
 28207  0045F6  A614               	btfss	ECANReceiveMessage@temp,3,c
 28208  0045F8  D008               	goto	i1l1512
 28209                           
 28210                           ;ECAN.c: 958: {
 28211                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 28212  0045FA  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28213  0045FC  6ED9               	movwf	fsr2l,c
 28214  0045FE  6ADA               	clrf	fsr2h,c
 28215  004600  0E00               	movlw	0
 28216  004602  8ADB               	bsf	plusw2,5,c
 28217                           
 28218                           ;ECAN.c: 960: temp.Val = 1;
 28219  004604  0E01               	movlw	1
 28220  004606  6E14               	movwf	ECANReceiveMessage@temp,c
 28221                           
 28222                           ;ECAN.c: 961: }
 28223  004608  D001               	goto	i1l9956
 28224  00460A                     i1l1512:
 28225                           
 28226                           ;ECAN.c: 962: else
 28227                           ;ECAN.c: 963: temp.Val = 0;
 28228  00460A  6A14               	clrf	ECANReceiveMessage@temp,c
 28229  00460C                     i1l9956:
 28230                           
 28231                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 28232  00460C  2815               	incf	ECANReceiveMessage@ptr,w,c
 28233  00460E  6E01               	movwf	?__RegsToCANID,c
 28234  004610  0E00               	movlw	0
 28235  004612  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 28236  004614  6E02               	movwf	?__RegsToCANID+1,c
 28237  004616  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 28238  00461A  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 28239  00461E  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 28240  004622  EC87  F01A         	call	__RegsToCANID	;wreg free
 28241                           
 28242                           ;ECAN.c: 968: ptr += 6;
 28243  004626  0E06               	movlw	6
 28244  004628  2615               	addwf	ECANReceiveMessage@ptr,f,c
 28245  00462A  0E00               	movlw	0
 28246  00462C  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 28247                           
 28248                           ;ECAN.c: 969: temp.Val = *dataLen;
 28249  00462E  500E               	movf	ECANReceiveMessage@dataLen,w,c
 28250  004630  6ED9               	movwf	fsr2l,c
 28251  004632  6ADA               	clrf	fsr2h,c
 28252  004634  50DF               	movf	indf2,w,c
 28253  004636  6E14               	movwf	ECANReceiveMessage@temp,c
 28254                           
 28255                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 28256  004638  6A12               	clrf	ECANReceiveMessage@i,c
 28257  00463A  D00F               	goto	i1l9972
 28258  00463C                     i1l9964:
 28259                           
 28260                           ;ECAN.c: 971: *data++ = *ptr++;
 28261  00463C  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 28262  004640  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 28263  004644  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 28264  004648  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 28265  00464C  CFDF FFE7          	movff	indf2,indf1
 28266  004650  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 28267  004652  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 28268  004654  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 28269  004656  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 28270  004658  2A12               	incf	ECANReceiveMessage@i,f,c
 28271  00465A                     i1l9972:
 28272  00465A  5014               	movf	ECANReceiveMessage@temp,w,c
 28273  00465C  5C12               	subwf	ECANReceiveMessage@i,w,c
 28274  00465E  E3EE               	bnc	i1l9964
 28275                           
 28276                           ;ECAN.c: 974: if ( IRXIF )
 28277  004660  AEA4               	btfss	4004,7,c	;volatile
 28278  004662  D006               	goto	i1l9978
 28279                           
 28280                           ;ECAN.c: 975: {
 28281                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 28282  004664  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28283  004666  6ED9               	movwf	fsr2l,c
 28284  004668  6ADA               	clrf	fsr2h,c
 28285  00466A  0E00               	movlw	0
 28286  00466C  88DB               	bsf	plusw2,4,c
 28287                           
 28288                           ;ECAN.c: 977: IRXIF = 0;
 28289  00466E  9EA4               	bcf	4004,7,c	;volatile
 28290  004670                     i1l9978:
 28291                           
 28292                           ;ECAN.c: 978: }
 28293                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 28294  004670  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 28295  004674  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 28296  004678  0E7F               	movlw	127
 28297  00467A  16DF               	andwf	indf2,f,c
 28298                           
 28299                           ;ECAN.c: 985: if ( mode == 0x80 )
 28300  00467C  5013               	movf	ECANReceiveMessage@mode,w,c
 28301  00467E  0A80               	xorlw	128
 28302  004680  B4D8               	btfsc	status,2,c
 28303                           
 28304                           ;ECAN.c: 986: FIFOEMPTY = 0;
 28305  004682  9E74               	bcf	3956,7,c	;volatile
 28306                           
 28307                           ;ECAN.c: 992: return TRUE;
 28308  004684  0E01               	movlw	1
 28309  004686                     i1l1487:
 28310  004686  0012               	return	
 28311  004688                     __end_of_ECANReceiveMessage:
 28312                           	opt stack 0
 28313  004688                     PL92:
 28314                           	opt stack 19
 28315  004688  5015               	movf	ECANReceiveMessage@ptr,w,c
 28316  00468A  26D9               	addwf	fsr2l,f,c
 28317  00468C  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 28318  00468E  22DA               	addwfc	fsr2h,f,c
 28319  004690  50DF               	movf	indf2,w,c
 28320  004692  6E14               	movwf	ECANReceiveMessage@temp,c
 28321  004694  0012               	return	
 28322  004696                     __end_ofPL92:
 28323                           	opt stack 0
 28324                           tblptru	equ	0xFF8
 28325                           tblptrh	equ	0xFF7
 28326                           tblptrl	equ	0xFF6
 28327                           tablat	equ	0xFF5
 28328                           prodh	equ	0xFF4
 28329                           prodl	equ	0xFF3
 28330                           intcon	equ	0xFF2
 28331                           indf0	equ	0xFEF
 28332                           postinc0	equ	0xFEE
 28333                           fsr0h	equ	0xFEA
 28334                           fsr0l	equ	0xFE9
 28335                           wreg	equ	0xFE8
 28336                           indf1	equ	0xFE7
 28337                           postinc1	equ	0xFE6
 28338                           postdec1	equ	0xFE5
 28339                           fsr1h	equ	0xFE2
 28340                           fsr1l	equ	0xFE1
 28341                           bsr	equ	0xFE0
 28342                           indf2	equ	0xFDF
 28343                           postinc2	equ	0xFDE
 28344                           postdec2	equ	0xFDD
 28345                           plusw2	equ	0xFDB
 28346                           fsr2h	equ	0xFDA
 28347                           fsr2l	equ	0xFD9
 28348                           status	equ	0xFD8
 28349                           
 28350 ;; *************** function __RegsToCANID *****************
 28351 ;; Defined at:
 28352 ;;		line 1158 in file "ECAN.c"
 28353 ;; Parameters:    Size  Location     Type
 28354 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 28355 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28356 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28357 ;;  val             2    2[COMRAM] PTR unsigned long 
 28358 ;;		 -> id(4), 
 28359 ;;  type            1    4[COMRAM] unsigned char 
 28360 ;; Auto vars:     Size  Location     Type
 28361 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 28362 ;;		 -> id(4), 
 28363 ;; Return value:  Size  Location     Type
 28364 ;;		None               void
 28365 ;; Registers used:
 28366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28367 ;; Tracked objects:
 28368 ;;		On entry : 0/1
 28369 ;;		On exit  : 0/0
 28370 ;;		Unchanged: 0/0
 28371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28372 ;;      Params:         5       0       0       0       0       0       0
 28373 ;;      Locals:         2       0       0       0       0       0       0
 28374 ;;      Temps:          2       0       0       0       0       0       0
 28375 ;;      Totals:         9       0       0       0       0       0       0
 28376 ;;Total ram usage:        9 bytes
 28377 ;; Hardware stack levels used:    1
 28378 ;; This function calls:
 28379 ;;		Nothing
 28380 ;; This function is called by:
 28381 ;;		_ECANReceiveMessage
 28382 ;; This function uses a non-reentrant model
 28383 ;;
 28384                           
 28385                           	psect	text86
 28386  00350E                     __ptext86:
 28387                           	opt stack 0
 28388  00350E                     __RegsToCANID:
 28389                           	opt stack 19
 28390                           
 28391                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28392                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28393                           
 28394                           ;incstack = 0
 28395                           ;incstack = 0
 28396  00350E  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28397  003512  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 28398                           
 28399                           ;ECAN.c: 1163: if ( type == 0 )
 28400  003516  6605               	tstfsz	__RegsToCANID@type,c
 28401  003518  D038               	goto	i1l9628
 28402                           
 28403                           ;ECAN.c: 1164: {
 28404                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28405  00351A  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28406  00351E  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28407  003522  50DF               	movf	indf2,w,c
 28408  003524  6E06               	movwf	??__RegsToCANID& (0+255),c
 28409  003526  90D8               	bcf	status,0,c
 28410  003528  3606               	rlcf	??__RegsToCANID,f,c
 28411  00352A  90D8               	bcf	status,0,c
 28412  00352C  3606               	rlcf	??__RegsToCANID,f,c
 28413  00352E  90D8               	bcf	status,0,c
 28414  003530  3406               	rlcf	??__RegsToCANID,w,c
 28415  003532  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28416  003536  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28417  00353A  6EDF               	movwf	indf2,c
 28418                           
 28419                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28420  00353C  EE20 F001          	lfsr	2,1
 28421  003540  D864               	call	PL22	;call to abstracted procedure
 28422  003542  0E05               	movlw	5
 28423  003544  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28424  003546                     i1u1136_25:
 28425  003546  90D8               	bcf	status,0,c
 28426  003548  3206               	rrcf	??__RegsToCANID,f,c
 28427  00354A  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28428  00354C  D7FC               	goto	i1u1136_25
 28429  00354E  5006               	movf	??__RegsToCANID,w,c
 28430                           
 28431                           ;ECAN.c: 1168: ptr++;
 28432                           
 28433                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28434  003550  D871               	call	PL66	;call to abstracted procedure
 28435  003552  0E05               	movlw	5
 28436  003554  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28437  003556                     i1u1137_25:
 28438  003556  90D8               	bcf	status,0,c
 28439  003558  3206               	rrcf	??__RegsToCANID,f,c
 28440  00355A  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28441  00355C  D7FC               	goto	i1u1137_25
 28442  00355E  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28443  003562  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28444  003566  5006               	movf	??__RegsToCANID,w,c
 28445  003568  12DF               	iorwf	indf2,f,c
 28446                           
 28447                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28448  00356A  EE20 F002          	lfsr	2,2
 28449  00356E  5008               	movf	__RegsToCANID@Value,w,c
 28450  003570  26D9               	addwf	fsr2l,f,c
 28451  003572  5009               	movf	__RegsToCANID@Value+1,w,c
 28452  003574  22DA               	addwfc	fsr2h,f,c
 28453  003576  6ADF               	clrf	indf2,c
 28454                           
 28455                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28456  003578  EE20 F003          	lfsr	2,3
 28457  00357C  5008               	movf	__RegsToCANID@Value,w,c
 28458  00357E  26D9               	addwf	fsr2l,f,c
 28459  003580  5009               	movf	__RegsToCANID@Value+1,w,c
 28460  003582  22DA               	addwfc	fsr2h,f,c
 28461  003584  0E00               	movlw	0
 28462  003586  6EDF               	movwf	indf2,c
 28463                           
 28464                           ;ECAN.c: 1172: }
 28465  003588  D03F               	goto	i1l1534
 28466  00358A                     i1l9628:
 28467                           
 28468                           ;ECAN.c: 1173: else
 28469                           ;ECAN.c: 1174: {
 28470                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28471  00358A  EE20 F002          	lfsr	2,2
 28472  00358E  D83D               	call	PL22	;call to abstracted procedure
 28473  003590  0E05               	movlw	5
 28474  003592  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28475  003594                     i1u1138_25:
 28476  003594  90D8               	bcf	status,0,c
 28477  003596  3606               	rlcf	??__RegsToCANID,f,c
 28478  003598  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28479  00359A  D7FC               	goto	i1u1138_25
 28480  00359C  5006               	movf	??__RegsToCANID,w,c
 28481  00359E  6EDF               	movwf	indf2,c
 28482                           
 28483                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28484  0035A0  EE20 F003          	lfsr	2,3
 28485  0035A4  D832               	call	PL22	;call to abstracted procedure
 28486  0035A6  90D8               	bcf	status,0,c
 28487  0035A8  3206               	rrcf	??__RegsToCANID,f,c
 28488  0035AA  90D8               	bcf	status,0,c
 28489  0035AC  3206               	rrcf	??__RegsToCANID,f,c
 28490  0035AE  90D8               	bcf	status,0,c
 28491  0035B0  3006               	rrcf	??__RegsToCANID,w,c
 28492                           
 28493                           ;ECAN.c: 1178: ptr++;
 28494                           
 28495                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28496  0035B2  D840               	call	PL66	;call to abstracted procedure
 28497  0035B4  0E03               	movlw	3
 28498  0035B6  D834               	call	PL64	;call to abstracted procedure
 28499                           
 28500                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28501  0035B8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28502  0035BC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28503  0035C0  50DF               	movf	indf2,w,c
 28504  0035C2  6E06               	movwf	??__RegsToCANID& (0+255),c
 28505  0035C4  90D8               	bcf	status,0,c
 28506  0035C6  3206               	rrcf	??__RegsToCANID,f,c
 28507  0035C8  90D8               	bcf	status,0,c
 28508  0035CA  3206               	rrcf	??__RegsToCANID,f,c
 28509  0035CC  90D8               	bcf	status,0,c
 28510  0035CE  3206               	rrcf	??__RegsToCANID,f,c
 28511  0035D0  0E1C               	movlw	28
 28512  0035D2  D826               	call	PL64	;call to abstracted procedure
 28513                           
 28514                           ;ECAN.c: 1182: ptr++;
 28515  0035D4  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28516  0035D6  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28517                           
 28518                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28519  0035D8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28520  0035DC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28521  0035E0  EE10 F001          	lfsr	1,1
 28522  0035E4  5008               	movf	__RegsToCANID@Value,w,c
 28523  0035E6  26E1               	addwf	fsr1l,f,c
 28524  0035E8  5009               	movf	__RegsToCANID@Value+1,w,c
 28525  0035EA  22E2               	addwfc	fsr1h,f,c
 28526  0035EC  CFDF FFE7          	movff	indf2,indf1
 28527                           
 28528                           ;ECAN.c: 1184: ptr++;
 28529  0035F0  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28530  0035F2  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28531                           
 28532                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28533  0035F4  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28534  0035F8  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28535  0035FC  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 28536  003600  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 28537  003604  CFDF FFE7          	movff	indf2,indf1
 28538  003608                     i1l1534:
 28539  003608  0012               	return	
 28540  00360A                     __end_of__RegsToCANID:
 28541                           	opt stack 0
 28542  00360A                     PL22:
 28543                           	opt stack 19
 28544  00360A  5008               	movf	__RegsToCANID@Value,w,c
 28545  00360C  26D9               	addwf	fsr2l,f,c
 28546  00360E  5009               	movf	__RegsToCANID@Value+1,w,c
 28547  003610  22DA               	addwfc	fsr2h,f,c
 28548  003612  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28549  003616  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28550  00361A  50E7               	movf	indf1,w,c
 28551  00361C  6E06               	movwf	??__RegsToCANID& (0+255),c
 28552  00361E  0012               	return	
 28553  003620                     __end_ofPL22:
 28554                           	opt stack 0
 28555  003620                     PL64:
 28556                           	opt stack 19
 28557  003620  1606               	andwf	??__RegsToCANID,f,c
 28558  003622  EE20 F002          	lfsr	2,2
 28559  003626  5008               	movf	__RegsToCANID@Value,w,c
 28560  003628  26D9               	addwf	fsr2l,f,c
 28561  00362A  5009               	movf	__RegsToCANID@Value+1,w,c
 28562  00362C  22DA               	addwfc	fsr2h,f,c
 28563  00362E  5006               	movf	??__RegsToCANID,w,c
 28564  003630  12DF               	iorwf	indf2,f,c
 28565  003632  0012               	return	
 28566  003634                     __end_ofPL64:
 28567                           	opt stack 0
 28568  003634                     PL66:
 28569                           	opt stack 19
 28570  003634  6EDF               	movwf	indf2,c
 28571  003636  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28572  003638  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28573  00363A  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28574  00363E  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28575  003642  50DF               	movf	indf2,w,c
 28576  003644  6E06               	movwf	??__RegsToCANID& (0+255),c
 28577  003646  0012               	return	
 28578  003648                     __end_ofPL66:
 28579                           	opt stack 0
 28580                           tblptru	equ	0xFF8
 28581                           tblptrh	equ	0xFF7
 28582                           tblptrl	equ	0xFF6
 28583                           tablat	equ	0xFF5
 28584                           prodh	equ	0xFF4
 28585                           prodl	equ	0xFF3
 28586                           intcon	equ	0xFF2
 28587                           indf0	equ	0xFEF
 28588                           postinc0	equ	0xFEE
 28589                           fsr0h	equ	0xFEA
 28590                           fsr0l	equ	0xFE9
 28591                           wreg	equ	0xFE8
 28592                           indf1	equ	0xFE7
 28593                           postinc1	equ	0xFE6
 28594                           postdec1	equ	0xFE5
 28595                           fsr1h	equ	0xFE2
 28596                           fsr1l	equ	0xFE1
 28597                           bsr	equ	0xFE0
 28598                           indf2	equ	0xFDF
 28599                           postinc2	equ	0xFDE
 28600                           postdec2	equ	0xFDD
 28601                           plusw2	equ	0xFDB
 28602                           fsr2h	equ	0xFDA
 28603                           fsr2l	equ	0xFD9
 28604                           status	equ	0xFD8
 28605                           
 28606 ;; *************** function __ECANPointBuffer *****************
 28607 ;; Defined at:
 28608 ;;		line 1209 in file "ECAN.c"
 28609 ;; Parameters:    Size  Location     Type
 28610 ;;  b               1    wreg     unsigned char 
 28611 ;; Auto vars:     Size  Location     Type
 28612 ;;  b               1    3[COMRAM] unsigned char 
 28613 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28614 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28615 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28616 ;; Return value:  Size  Location     Type
 28617 ;;                  2    0[COMRAM] PTR unsigned char 
 28618 ;; Registers used:
 28619 ;;		wreg, status,2, status,0
 28620 ;; Tracked objects:
 28621 ;;		On entry : F/1
 28622 ;;		On exit  : 0/0
 28623 ;;		Unchanged: 0/0
 28624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28625 ;;      Params:         3       0       0       0       0       0       0
 28626 ;;      Locals:         3       0       0       0       0       0       0
 28627 ;;      Temps:          0       0       0       0       0       0       0
 28628 ;;      Totals:         6       0       0       0       0       0       0
 28629 ;;Total ram usage:        6 bytes
 28630 ;; Hardware stack levels used:    1
 28631 ;; This function calls:
 28632 ;;		Nothing
 28633 ;; This function is called by:
 28634 ;;		_ECANReceiveMessage
 28635 ;; This function uses a non-reentrant model
 28636 ;;
 28637                           
 28638                           	psect	text87
 28639  001DC6                     __ptext87:
 28640                           	opt stack 0
 28641  001DC6                     __ECANPointBuffer:
 28642                           	opt stack 19
 28643                           
 28644                           ;incstack = 0
 28645                           ;incstack = 0
 28646                           ;__ECANPointBuffer@b stored from wreg
 28647  001DC6  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28648                           
 28649                           ; BSR set to: 1
 28650                           ;ECAN.c: 1210: BYTE* pt;
 28651                           ;ECAN.c: 1212: switch(b)
 28652  001DCA  D024               	goto	i1l9612
 28653  001DCC                     i1l9594:
 28654                           
 28655                           ; BSR set to: 1
 28656                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28657  001DCC  0E0F               	movlw	15	;volatile
 28658  001DCE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28659  001DD0  0E60               	movlw	96	;volatile
 28660  001DD2  D01E               	goto	L64
 28661  001DD4                     i1l9596:
 28662                           
 28663                           ; BSR set to: 1
 28664                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28665  001DD4  010F               	movlb	15	; () banked
 28666  001DD6  0E0F               	movlw	15	;volatile
 28667  001DD8  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28668  001DDA  0E50               	movlw	80	;volatile
 28669  001DDC  D019               	goto	L64
 28670  001DDE                     i1l9598:
 28671                           
 28672                           ; BSR set to: 1
 28673                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28674  001DDE  010E               	movlb	14	; () banked
 28675  001DE0  0E0E               	movlw	14	;volatile
 28676  001DE2  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28677  001DE4  0E20               	movlw	32	;volatile
 28678  001DE6  D014               	goto	L64
 28679  001DE8                     i1l9600:
 28680                           
 28681                           ; BSR set to: 1
 28682                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28683  001DE8  010E               	movlb	14	; () banked
 28684  001DEA  0E0E               	movlw	14	;volatile
 28685  001DEC  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28686  001DEE  0E30               	movlw	48	;volatile
 28687  001DF0  D00F               	goto	L64
 28688  001DF2                     i1l9602:
 28689                           
 28690                           ; BSR set to: 1
 28691                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28692  001DF2  010E               	movlb	14	; () banked
 28693  001DF4  0E0E               	movlw	14	;volatile
 28694  001DF6  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28695  001DF8  0E40               	movlw	64	;volatile
 28696  001DFA  D00A               	goto	L64
 28697  001DFC                     i1l9604:
 28698                           
 28699                           ; BSR set to: 1
 28700                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28701  001DFC  010E               	movlb	14	; () banked
 28702  001DFE  0E0E               	movlw	14	;volatile
 28703  001E00  D7EB               	goto	L65
 28704  001E02                     i1l9606:
 28705                           
 28706                           ; BSR set to: 1
 28707                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28708  001E02  010E               	movlb	14	; () banked
 28709  001E04  0E0E               	movlw	14	;volatile
 28710  001E06  D7E3               	goto	L66
 28711  001E08                     i1l9608:
 28712                           
 28713                           ; BSR set to: 1
 28714                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28715  001E08  010E               	movlb	14	; () banked
 28716  001E0A  0E0E               	movlw	14	;volatile
 28717  001E0C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28718  001E0E  0E70               	movlw	112	;volatile
 28719  001E10                     L64:
 28720  001E10  6E05               	movwf	__ECANPointBuffer@pt,c
 28721                           
 28722                           ;ECAN.c: 1237: break;
 28723  001E12  D00F               	goto	i1l1539
 28724  001E14                     i1l9612:
 28725                           
 28726                           ; BSR set to: 1
 28727  001E14  5004               	movf	__ECANPointBuffer@b,w,c
 28728                           
 28729                           ; Switch size 1, requested type "space"
 28730                           ; Number of cases is 7, Range of values is 0 to 6
 28731                           ; switch strategies available:
 28732                           ; Name         Instructions Cycles
 28733                           ; simple_byte           22    12 (average)
 28734                           ;	Chosen strategy is simple_byte
 28735  001E16  E0DA               	bz	i1l9594
 28736  001E18  0A01               	xorlw	1	; case 1
 28737  001E1A  E0DC               	bz	i1l9596
 28738  001E1C  0A03               	xorlw	3	; case 2
 28739  001E1E  E0DF               	bz	i1l9598
 28740  001E20  0A01               	xorlw	1	; case 3
 28741  001E22  E0E2               	bz	i1l9600
 28742  001E24  0A07               	xorlw	7	; case 4
 28743  001E26  E0E5               	bz	i1l9602
 28744  001E28  0A01               	xorlw	1	; case 5
 28745  001E2A  E0E8               	bz	i1l9604
 28746  001E2C  0A03               	xorlw	3	; case 6
 28747  001E2E  E0E9               	bz	i1l9606
 28748  001E30  D7EB               	goto	i1l9608
 28749  001E32                     i1l1539:
 28750                           
 28751                           ;ECAN.c: 1239: return (pt);
 28752  001E32  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28753  001E36  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28754  001E3A  0012               	return	
 28755  001E3C                     __end_of__ECANPointBuffer:
 28756                           	opt stack 0
 28757                           tblptru	equ	0xFF8
 28758                           tblptrh	equ	0xFF7
 28759                           tblptrl	equ	0xFF6
 28760                           tablat	equ	0xFF5
 28761                           prodh	equ	0xFF4
 28762                           prodl	equ	0xFF3
 28763                           intcon	equ	0xFF2
 28764                           indf0	equ	0xFEF
 28765                           postinc0	equ	0xFEE
 28766                           fsr0h	equ	0xFEA
 28767                           fsr0l	equ	0xFE9
 28768                           wreg	equ	0xFE8
 28769                           indf1	equ	0xFE7
 28770                           postinc1	equ	0xFE6
 28771                           postdec1	equ	0xFE5
 28772                           fsr1h	equ	0xFE2
 28773                           fsr1l	equ	0xFE1
 28774                           bsr	equ	0xFE0
 28775                           indf2	equ	0xFDF
 28776                           postinc2	equ	0xFDE
 28777                           postdec2	equ	0xFDD
 28778                           plusw2	equ	0xFDB
 28779                           fsr2h	equ	0xFDA
 28780                           fsr2l	equ	0xFD9
 28781                           status	equ	0xFD8
 28782                           
 28783 ;; *************** function _fifo_write *****************
 28784 ;; Defined at:
 28785 ;;		line 61 in file "fifo.c"
 28786 ;; Parameters:    Size  Location     Type
 28787 ;;  f               2    0[COMRAM] PTR struct .
 28788 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28789 ;;  buf             2    2[COMRAM] PTR const void 
 28790 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28791 ;;  nbytes          4    4[COMRAM] unsigned long 
 28792 ;; Auto vars:     Size  Location     Type
 28793 ;;  i               4   14[COMRAM] unsigned long 
 28794 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28795 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28796 ;; Return value:  Size  Location     Type
 28797 ;;                  2    0[COMRAM] unsigned short 
 28798 ;; Registers used:
 28799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28800 ;; Tracked objects:
 28801 ;;		On entry : F/1
 28802 ;;		On exit  : F/1
 28803 ;;		Unchanged: F/0
 28804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28805 ;;      Params:         8       0       0       0       0       0       0
 28806 ;;      Locals:         6       0       0       0       0       0       0
 28807 ;;      Temps:          4       0       0       0       0       0       0
 28808 ;;      Totals:        18       0       0       0       0       0       0
 28809 ;;Total ram usage:       18 bytes
 28810 ;; Hardware stack levels used:    1
 28811 ;; This function calls:
 28812 ;;		Nothing
 28813 ;; This function is called by:
 28814 ;;		_Interrupt
 28815 ;; This function uses a non-reentrant model
 28816 ;;
 28817                           
 28818                           	psect	text88
 28819  0033E2                     __ptext88:
 28820                           	opt stack 0
 28821  0033E2                     _fifo_write:
 28822                           	opt stack 20
 28823                           
 28824                           ; BSR set to: 1
 28825                           ;fifo.c: 62: uint32_t i;
 28826                           ;fifo.c: 63: const uint8_t *p;
 28827                           ;fifo.c: 64: p = buf;
 28828                           
 28829                           ;incstack = 0
 28830                           ;incstack = 0
 28831  0033E2  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28832  0033E6  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28833                           
 28834                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28835  0033EA  6A0F               	clrf	fifo_write@i,c
 28836  0033EC  6A10               	clrf	fifo_write@i+1,c
 28837  0033EE  6A11               	clrf	fifo_write@i+2,c
 28838  0033F0  6A12               	clrf	fifo_write@i+3,c
 28839  0033F2  D068               	goto	i1l6496
 28840  0033F4                     i1l6476:
 28841                           
 28842                           ; BSR set to: 1
 28843                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28844                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28845  0033F4  EE20 F004          	lfsr	2,4
 28846  0033F8  5001               	movf	fifo_write@f,w,c
 28847  0033FA  D872               	call	PL14	;call to abstracted procedure
 28848  0033FC  E102               	bnz	i1u634_25
 28849  0033FE  5009               	movf	??_fifo_write,w,c
 28850  003400  180B               	xorwf	??_fifo_write+2,w,c
 28851  003402                     i1u634_25:
 28852  003402  E011               	bz	i1l1566
 28853                           
 28854                           ; BSR set to: 1
 28855  003404  EE20 F006          	lfsr	2,6
 28856  003408  5001               	movf	fifo_write@f,w,c
 28857  00340A  D86A               	call	PL14	;call to abstracted procedure
 28858  00340C  E102               	bnz	i1u635_25
 28859  00340E  5009               	movf	??_fifo_write,w,c
 28860  003410  180B               	xorwf	??_fifo_write+2,w,c
 28861  003412                     i1u635_25:
 28862  003412  E10E               	bnz	i1l6484
 28863                           
 28864                           ; BSR set to: 1
 28865  003414  EE20 F004          	lfsr	2,4
 28866  003418  5001               	movf	fifo_write@f,w,c
 28867  00341A  26D9               	addwf	fsr2l,f,c
 28868  00341C  5002               	movf	fifo_write@f+1,w,c
 28869  00341E  22DA               	addwfc	fsr2h,f,c
 28870  003420  50DE               	movf	postinc2,w,c
 28871  003422  10DD               	iorwf	postdec2,w,c
 28872  003424  E105               	bnz	i1l6484
 28873  003426                     i1l1566:
 28874                           
 28875                           ; BSR set to: 1
 28876                           ;fifo.c: 71: return i;
 28877  003426  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28878  00342A  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28879  00342E  D057               	goto	i1l1567
 28880  003430                     i1l6484:
 28881                           
 28882                           ; BSR set to: 1
 28883                           ;fifo.c: 73: else {
 28884                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28885  003430  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28886  003434  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28887  003438  EE10 F002          	lfsr	1,2
 28888  00343C  5001               	movf	fifo_write@f,w,c
 28889  00343E  26E1               	addwf	fsr1l,f,c
 28890  003440  5002               	movf	fifo_write@f+1,w,c
 28891  003442  22E2               	addwfc	fsr1h,f,c
 28892  003444  CFE6 F009          	movff	postinc1,??_fifo_write
 28893  003448  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28894  00344C  C001  FFE1         	movff	fifo_write@f,fsr1l
 28895  003450  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28896  003454  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28897  003458  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28898  00345C  5009               	movf	??_fifo_write,w,c
 28899  00345E  240B               	addwf	??_fifo_write+2,w,c
 28900  003460  6EE1               	movwf	fsr1l,c
 28901  003462  500A               	movf	??_fifo_write+1,w,c
 28902  003464  200C               	addwfc	??_fifo_write+3,w,c
 28903  003466  6EE2               	movwf	fsr1h,c
 28904  003468  CFDF FFE7          	movff	indf2,indf1
 28905                           
 28906                           ; BSR set to: 1
 28907  00346C  4A0D               	infsnz	fifo_write@p,f,c
 28908  00346E  2A0E               	incf	fifo_write@p+1,f,c
 28909                           
 28910                           ; BSR set to: 1
 28911                           ;fifo.c: 75: f->head++;
 28912  003470  EE20 F002          	lfsr	2,2
 28913  003474  5001               	movf	fifo_write@f,w,c
 28914  003476  26D9               	addwf	fsr2l,f,c
 28915  003478  5002               	movf	fifo_write@f+1,w,c
 28916  00347A  22DA               	addwfc	fsr2h,f,c
 28917  00347C  2ADE               	incf	postinc2,f,c
 28918  00347E  0E00               	movlw	0
 28919  003480  22DD               	addwfc	postdec2,f,c
 28920                           
 28921                           ; BSR set to: 1
 28922                           ;fifo.c: 77: if (f->head >= f->size) {
 28923  003482  EE20 F006          	lfsr	2,6
 28924  003486  5001               	movf	fifo_write@f,w,c
 28925  003488  26D9               	addwf	fsr2l,f,c
 28926  00348A  5002               	movf	fifo_write@f+1,w,c
 28927  00348C  22DA               	addwfc	fsr2h,f,c
 28928  00348E  EE10 F002          	lfsr	1,2
 28929  003492  5001               	movf	fifo_write@f,w,c
 28930  003494  26E1               	addwf	fsr1l,f,c
 28931  003496  5002               	movf	fifo_write@f+1,w,c
 28932  003498  22E2               	addwfc	fsr1h,f,c
 28933  00349A  52E6               	movf	postinc1,f,c
 28934  00349C  52DE               	movf	postinc2,f,c
 28935  00349E  50DD               	movf	postdec2,w,c
 28936  0034A0  5CE5               	subwf	postdec1,w,c
 28937  0034A2  E102               	bnz	i1u637_25
 28938  0034A4  50DF               	movf	indf2,w,c
 28939  0034A6  5CE7               	subwf	indf1,w,c
 28940  0034A8                     i1u637_25:
 28941  0034A8  E308               	bnc	i1l6494
 28942                           
 28943                           ; BSR set to: 1
 28944                           ;fifo.c: 78: f->head = 0;
 28945  0034AA  EE20 F002          	lfsr	2,2
 28946  0034AE  5001               	movf	fifo_write@f,w,c
 28947  0034B0  26D9               	addwf	fsr2l,f,c
 28948  0034B2  5002               	movf	fifo_write@f+1,w,c
 28949  0034B4  22DA               	addwfc	fsr2h,f,c
 28950  0034B6  6ADE               	clrf	postinc2,c
 28951  0034B8  6ADD               	clrf	postdec2,c
 28952  0034BA                     i1l6494:
 28953                           
 28954                           ; BSR set to: 1
 28955  0034BA  2A0F               	incf	fifo_write@i,f,c
 28956  0034BC  0E00               	movlw	0
 28957  0034BE  2210               	addwfc	fifo_write@i+1,f,c
 28958  0034C0  2211               	addwfc	fifo_write@i+2,f,c
 28959  0034C2  2212               	addwfc	fifo_write@i+3,f,c
 28960  0034C4                     i1l6496:
 28961                           
 28962                           ; BSR set to: 1
 28963  0034C4  5005               	movf	fifo_write@nbytes,w,c
 28964  0034C6  5C0F               	subwf	fifo_write@i,w,c
 28965  0034C8  5006               	movf	fifo_write@nbytes+1,w,c
 28966  0034CA  5810               	subwfb	fifo_write@i+1,w,c
 28967  0034CC  5007               	movf	fifo_write@nbytes+2,w,c
 28968  0034CE  5811               	subwfb	fifo_write@i+2,w,c
 28969  0034D0  5008               	movf	fifo_write@nbytes+3,w,c
 28970  0034D2  5812               	subwfb	fifo_write@i+3,w,c
 28971  0034D4  E38F               	bnc	i1l6476
 28972                           
 28973                           ; BSR set to: 1
 28974                           ;fifo.c: 79: }
 28975                           ;fifo.c: 80: }
 28976                           ;fifo.c: 82: }
 28977                           ;fifo.c: 84: return nbytes;
 28978  0034D6  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28979  0034DA  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28980  0034DE                     i1l1567:
 28981                           
 28982                           ; BSR set to: 1
 28983  0034DE  0012               	return	
 28984  0034E0                     __end_of_fifo_write:
 28985                           	opt stack 0
 28986  0034E0                     PL14:
 28987                           	opt stack 20
 28988  0034E0  26D9               	addwf	fsr2l,f,c
 28989  0034E2  5002               	movf	fifo_write@f+1,w,c
 28990  0034E4  22DA               	addwfc	fsr2h,f,c
 28991  0034E6  CFDE F009          	movff	postinc2,??_fifo_write
 28992  0034EA  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28993  0034EE  EE20 F002          	lfsr	2,2
 28994  0034F2  5001               	movf	fifo_write@f,w,c
 28995  0034F4  26D9               	addwf	fsr2l,f,c
 28996  0034F6  5002               	movf	fifo_write@f+1,w,c
 28997  0034F8  22DA               	addwfc	fsr2h,f,c
 28998  0034FA  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28999  0034FE  CFDD F00C          	movff	postdec2,??_fifo_write+3
 29000  003502  2A0B               	incf	??_fifo_write+2,f,c
 29001  003504  0E00               	movlw	0
 29002  003506  220C               	addwfc	??_fifo_write+3,f,c
 29003  003508  500A               	movf	??_fifo_write+1,w,c
 29004  00350A  180C               	xorwf	??_fifo_write+3,w,c
 29005  00350C  0012               	return	
 29006  00350E                     __end_ofPL14:
 29007                           	opt stack 0
 29008                           tblptru	equ	0xFF8
 29009                           tblptrh	equ	0xFF7
 29010                           tblptrl	equ	0xFF6
 29011                           tablat	equ	0xFF5
 29012                           prodh	equ	0xFF4
 29013                           prodl	equ	0xFF3
 29014                           intcon	equ	0xFF2
 29015                           indf0	equ	0xFEF
 29016                           postinc0	equ	0xFEE
 29017                           fsr0h	equ	0xFEA
 29018                           fsr0l	equ	0xFE9
 29019                           wreg	equ	0xFE8
 29020                           indf1	equ	0xFE7
 29021                           postinc1	equ	0xFE6
 29022                           postdec1	equ	0xFE5
 29023                           fsr1h	equ	0xFE2
 29024                           fsr1l	equ	0xFE1
 29025                           bsr	equ	0xFE0
 29026                           indf2	equ	0xFDF
 29027                           postinc2	equ	0xFDE
 29028                           postdec2	equ	0xFDD
 29029                           plusw2	equ	0xFDB
 29030                           fsr2h	equ	0xFDA
 29031                           fsr2l	equ	0xFD9
 29032                           status	equ	0xFD8
 29033                           
 29034 ;; *************** function _ReadUSART *****************
 29035 ;; Defined at:
 29036 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 29037 ;; Parameters:    Size  Location     Type
 29038 ;;		None
 29039 ;; Auto vars:     Size  Location     Type
 29040 ;;  data            1    0[COMRAM] unsigned char 
 29041 ;; Return value:  Size  Location     Type
 29042 ;;                  1    wreg      unsigned char 
 29043 ;; Registers used:
 29044 ;;		wreg, status,2, status,0
 29045 ;; Tracked objects:
 29046 ;;		On entry : 0/0
 29047 ;;		On exit  : 0/0
 29048 ;;		Unchanged: 0/0
 29049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29050 ;;      Params:         0       0       0       0       0       0       0
 29051 ;;      Locals:         1       0       0       0       0       0       0
 29052 ;;      Temps:          0       0       0       0       0       0       0
 29053 ;;      Totals:         1       0       0       0       0       0       0
 29054 ;;Total ram usage:        1 bytes
 29055 ;; Hardware stack levels used:    1
 29056 ;; This function calls:
 29057 ;;		Nothing
 29058 ;; This function is called by:
 29059 ;;		_Interrupt
 29060 ;; This function uses a non-reentrant model
 29061 ;;
 29062                           
 29063                           	psect	text89
 29064  001540                     __ptext89:
 29065                           	opt stack 0
 29066  001540                     _ReadUSART:
 29067                           	opt stack 20
 29068                           
 29069                           ; BSR set to: 1
 29070                           ;incstack = 0
 29071                           ;incstack = 0
 29072  001540  0EF2               	movlw	242
 29073  001542  162A               	andwf	_USART_Status,f,c
 29074  001544  ACAB               	btfss	4011,6,c	;volatile
 29075  001546  D003               	goto	i1l1885
 29076  001548  902A               	bcf	_USART_Status,0,c
 29077  00154A  B0AB               	btfsc	4011,0,c	;volatile
 29078  00154C  802A               	bsf	_USART_Status,0,c
 29079  00154E                     i1l1885:
 29080  00154E  B4AB               	btfsc	4011,2,c	;volatile
 29081  001550  842A               	bsf	_USART_Status,2,c
 29082  001552  B2AB               	btfsc	4011,1,c	;volatile
 29083  001554  862A               	bsf	_USART_Status,3,c
 29084  001556  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 29085  00155A  5001               	movf	ReadUSART@data,w,c
 29086  00155C  0012               	return	
 29087  00155E                     __end_of_ReadUSART:
 29088                           	opt stack 0
 29089                           tblptru	equ	0xFF8
 29090                           tblptrh	equ	0xFF7
 29091                           tblptrl	equ	0xFF6
 29092                           tablat	equ	0xFF5
 29093                           prodh	equ	0xFF4
 29094                           prodl	equ	0xFF3
 29095                           intcon	equ	0xFF2
 29096                           indf0	equ	0xFEF
 29097                           postinc0	equ	0xFEE
 29098                           fsr0h	equ	0xFEA
 29099                           fsr0l	equ	0xFE9
 29100                           wreg	equ	0xFE8
 29101                           indf1	equ	0xFE7
 29102                           postinc1	equ	0xFE6
 29103                           postdec1	equ	0xFE5
 29104                           fsr1h	equ	0xFE2
 29105                           fsr1l	equ	0xFE1
 29106                           bsr	equ	0xFE0
 29107                           indf2	equ	0xFDF
 29108                           postinc2	equ	0xFDE
 29109                           postdec2	equ	0xFDD
 29110                           plusw2	equ	0xFDB
 29111                           fsr2h	equ	0xFDA
 29112                           fsr2l	equ	0xFD9
 29113                           status	equ	0xFD8
 29114                           tblptru	equ	0xFF8
 29115                           tblptrh	equ	0xFF7
 29116                           tblptrl	equ	0xFF6
 29117                           tablat	equ	0xFF5
 29118                           prodh	equ	0xFF4
 29119                           prodl	equ	0xFF3
 29120                           intcon	equ	0xFF2
 29121                           indf0	equ	0xFEF
 29122                           postinc0	equ	0xFEE
 29123                           fsr0h	equ	0xFEA
 29124                           fsr0l	equ	0xFE9
 29125                           wreg	equ	0xFE8
 29126                           indf1	equ	0xFE7
 29127                           postinc1	equ	0xFE6
 29128                           postdec1	equ	0xFE5
 29129                           fsr1h	equ	0xFE2
 29130                           fsr1l	equ	0xFE1
 29131                           bsr	equ	0xFE0
 29132                           indf2	equ	0xFDF
 29133                           postinc2	equ	0xFDE
 29134                           postdec2	equ	0xFDD
 29135                           plusw2	equ	0xFDB
 29136                           fsr2h	equ	0xFDA
 29137                           fsr2l	equ	0xFD9
 29138                           status	equ	0xFD8
 29139                           
 29140                           	psect	rparam
 29141  0000                     tblptru	equ	0xFF8
 29142                           tblptrh	equ	0xFF7
 29143                           tblptrl	equ	0xFF6
 29144                           tablat	equ	0xFF5
 29145                           prodh	equ	0xFF4
 29146                           prodl	equ	0xFF3
 29147                           intcon	equ	0xFF2
 29148                           indf0	equ	0xFEF
 29149                           postinc0	equ	0xFEE
 29150                           fsr0h	equ	0xFEA
 29151                           fsr0l	equ	0xFE9
 29152                           wreg	equ	0xFE8
 29153                           indf1	equ	0xFE7
 29154                           postinc1	equ	0xFE6
 29155                           postdec1	equ	0xFE5
 29156                           fsr1h	equ	0xFE2
 29157                           fsr1l	equ	0xFE1
 29158                           bsr	equ	0xFE0
 29159                           indf2	equ	0xFDF
 29160                           postinc2	equ	0xFDE
 29161                           postdec2	equ	0xFDD
 29162                           plusw2	equ	0xFDB
 29163                           fsr2h	equ	0xFDA
 29164                           fsr2l	equ	0xFD9
 29165                           status	equ	0xFD8
 29166                           tblptru	equ	0xFF8
 29167                           tblptrh	equ	0xFF7
 29168                           tblptrl	equ	0xFF6
 29169                           tablat	equ	0xFF5
 29170                           prodh	equ	0xFF4
 29171                           prodl	equ	0xFF3
 29172                           intcon	equ	0xFF2
 29173                           indf0	equ	0xFEF
 29174                           postinc0	equ	0xFEE
 29175                           fsr0h	equ	0xFEA
 29176                           fsr0l	equ	0xFE9
 29177                           wreg	equ	0xFE8
 29178                           indf1	equ	0xFE7
 29179                           postinc1	equ	0xFE6
 29180                           postdec1	equ	0xFE5
 29181                           fsr1h	equ	0xFE2
 29182                           fsr1l	equ	0xFE1
 29183                           bsr	equ	0xFE0
 29184                           indf2	equ	0xFDF
 29185                           postinc2	equ	0xFDE
 29186                           postdec2	equ	0xFDD
 29187                           plusw2	equ	0xFDB
 29188                           fsr2h	equ	0xFDA
 29189                           fsr2l	equ	0xFD9
 29190                           status	equ	0xFD8


Data Sizes:
    Strings     4132
    Constant    120
    Data        0
    BSS         1148
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    133     134
    BANK1           256      0     242
    BANK2           256     69     197
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_143(CODE[6]), STR_142(CODE[8]), STR_140(CODE[6]), 
		 -> STR_138(CODE[5]), STR_136(CODE[8]), STR_135(CODE[6]), STR_134(CODE[9]), 
		 -> STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), 
		 -> STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_143(CODE[6]), STR_142(CODE[8]), STR_140(CODE[6]), STR_138(CODE[5]), 
		 -> STR_136(CODE[8]), STR_135(CODE[6]), STR_134(CODE[9]), STR_132(CODE[11]), 
		 -> STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), STR_114(CODE[5]), 
		 -> STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_143(CODE[6]), STR_142(CODE[8]), STR_140(CODE[6]), 
		 -> STR_138(CODE[5]), STR_136(CODE[8]), STR_135(CODE[6]), STR_134(CODE[9]), 
		 -> STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), 
		 -> STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_143(CODE[6]), STR_142(CODE[8]), STR_140(CODE[6]), 
		 -> STR_138(CODE[5]), STR_136(CODE[8]), STR_135(CODE[6]), STR_134(CODE[9]), 
		 -> STR_132(CODE[11]), STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), 
		 -> STR_114(CODE[5]), STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_143(CODE[6]), STR_142(CODE[8]), STR_140(CODE[6]), STR_138(CODE[5]), 
		 -> STR_136(CODE[8]), STR_135(CODE[6]), STR_134(CODE[9]), STR_132(CODE[11]), 
		 -> STR_130(CODE[8]), STR_128(CODE[4]), STR_127(CODE[5]), STR_114(CODE[5]), 
		 -> STR_101(CODE[7]), STR_95(CODE[5]), STR_80(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_266(CODE[2]), STR_265(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_260(CODE[2]), 
		 -> STR_259(CODE[3]), STR_258(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_276(CODE[3]), STR_275(CODE[23]), STR_274(CODE[10]), STR_273(CODE[10]), 
		 -> STR_272(CODE[12]), STR_271(CODE[8]), STR_270(CODE[7]), STR_269(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_268(CODE[10]), STR_267(CODE[3]), STR_264(CODE[20]), 
		 -> STR_263(CODE[3]), STR_262(CODE[14]), STR_261(CODE[3]), STR_257(CODE[8]), 
		 -> STR_256(CODE[15]), STR_255(CODE[67]), STR_254(CODE[3]), STR_253(CODE[27]), 
		 -> STR_252(CODE[67]), STR_251(CODE[39]), STR_250(CODE[62]), STR_249(CODE[55]), 
		 -> STR_248(CODE[49]), STR_247(CODE[67]), STR_246(CODE[47]), STR_245(CODE[47]), 
		 -> STR_244(CODE[34]), STR_243(CODE[71]), STR_242(CODE[20]), STR_241(CODE[78]), 
		 -> STR_240(CODE[24]), STR_239(CODE[77]), STR_238(CODE[74]), STR_237(CODE[76]), 
		 -> STR_236(CODE[47]), STR_235(CODE[40]), STR_234(CODE[39]), STR_233(CODE[33]), 
		 -> STR_232(CODE[23]), STR_231(CODE[56]), STR_230(CODE[24]), STR_229(CODE[44]), 
		 -> STR_228(CODE[50]), STR_227(CODE[31]), STR_226(CODE[50]), STR_225(CODE[51]), 
		 -> STR_224(CODE[46]), STR_223(CODE[44]), STR_222(CODE[27]), STR_221(CODE[39]), 
		 -> STR_220(CODE[39]), STR_219(CODE[52]), STR_218(CODE[54]), STR_217(CODE[55]), 
		 -> STR_216(CODE[3]), STR_213(CODE[24]), STR_212(CODE[57]), STR_211(CODE[53]), 
		 -> STR_210(CODE[58]), STR_209(CODE[3]), STR_206(CODE[25]), STR_205(CODE[3]), 
		 -> STR_202(CODE[24]), STR_201(CODE[3]), STR_198(CODE[24]), STR_197(CODE[3]), 
		 -> STR_194(CODE[24]), STR_193(CODE[3]), STR_190(CODE[23]), STR_189(CODE[3]), 
		 -> STR_186(CODE[21]), STR_185(CODE[3]), STR_182(CODE[22]), STR_181(CODE[3]), 
		 -> STR_178(CODE[17]), STR_177(CODE[3]), STR_174(CODE[18]), STR_173(CODE[4]), 
		 -> STR_172(CODE[11]), STR_171(CODE[2]), STR_168(CODE[7]), STR_165(CODE[7]), 
		 -> STR_162(CODE[9]), STR_159(CODE[7]), STR_156(CODE[8]), STR_153(CODE[7]), 
		 -> STR_152(CODE[2]), STR_151(CODE[2]), STR_150(CODE[6]), STR_149(CODE[8]), 
		 -> STR_148(CODE[8]), STR_147(CODE[20]), STR_146(CODE[27]), STR_145(CODE[6]), 
		 -> STR_144(CODE[33]), STR_141(CODE[26]), STR_139(CODE[32]), STR_137(CODE[28]), 
		 -> STR_133(CODE[6]), STR_131(CODE[40]), STR_129(CODE[44]), STR_126(CODE[6]), 
		 -> STR_125(CODE[39]), STR_123(CODE[36]), STR_121(CODE[37]), STR_119(CODE[40]), 
		 -> STR_117(CODE[37]), STR_116(CODE[50]), STR_113(CODE[6]), STR_112(CODE[41]), 
		 -> STR_110(CODE[38]), STR_108(CODE[39]), STR_106(CODE[42]), STR_104(CODE[39]), 
		 -> STR_103(CODE[66]), STR_100(CODE[6]), STR_99(CODE[3]), STR_96(CODE[20]), 
		 -> STR_92(CODE[8]), STR_91(CODE[36]), STR_88(CODE[8]), STR_87(CODE[38]), 
		 -> STR_86(CODE[24]), STR_84(CODE[33]), STR_82(CODE[24]), STR_79(CODE[54]), 
		 -> STR_78(CODE[6]), STR_77(CODE[3]), STR_72(CODE[25]), STR_69(CODE[17]), 
		 -> STR_68(CODE[3]), STR_67(CODE[4]), STR_66(CODE[3]), STR_63(CODE[4]), 
		 -> STR_58(CODE[15]), wrkbuf(BANK1[80]), STR_55(CODE[14]), STR_53(CODE[33]), 
		 -> STR_51(CODE[24]), STR_48(CODE[6]), STR_46(CODE[6]), STR_44(CODE[6]), 
		 -> STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), 
		 -> STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), 
		 -> STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), 
		 -> STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), 
		 -> STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), 
		 -> STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[58]), 
		 -> STR_1(CODE[37]), 

    sprintf$2115	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_278(CODE[17]), STR_277(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_215(CODE[3]), STR_214(CODE[7]), STR_208(CODE[3]), STR_207(CODE[7]), 
		 -> STR_204(CODE[4]), STR_203(CODE[8]), STR_200(CODE[4]), STR_199(CODE[8]), 
		 -> STR_196(CODE[4]), STR_195(CODE[8]), STR_192(CODE[4]), STR_191(CODE[8]), 
		 -> STR_188(CODE[4]), STR_187(CODE[7]), STR_184(CODE[4]), STR_183(CODE[7]), 
		 -> STR_180(CODE[4]), STR_179(CODE[7]), STR_176(CODE[4]), STR_175(CODE[7]), 
		 -> STR_170(CODE[3]), STR_169(CODE[7]), STR_167(CODE[3]), STR_166(CODE[7]), 
		 -> STR_164(CODE[3]), STR_163(CODE[7]), STR_161(CODE[3]), STR_160(CODE[7]), 
		 -> STR_158(CODE[3]), STR_157(CODE[7]), STR_155(CODE[3]), STR_154(CODE[7]), 
		 -> STR_98(CODE[3]), STR_97(CODE[7]), STR_94(CODE[4]), STR_93(CODE[8]), 
		 -> STR_90(CODE[4]), STR_89(CODE[8]), STR_76(CODE[3]), STR_75(CODE[7]), 
		 -> STR_74(CODE[3]), STR_73(CODE[7]), STR_71(CODE[6]), STR_70(CODE[10]), 
		 -> STR_65(CODE[3]), STR_64(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_60(CODE[3]), STR_59(CODE[7]), STR_57(CODE[6]), STR_56(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2095$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1513	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_215(CODE[3]), STR_214(CODE[7]), 

    printErrors$1504	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_208(CODE[3]), STR_207(CODE[7]), 

    printErrors$1498	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_204(CODE[4]), STR_203(CODE[8]), 

    printErrors$1492	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_200(CODE[4]), STR_199(CODE[8]), 

    printErrors$1486	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_196(CODE[4]), STR_195(CODE[8]), 

    printErrors$1480	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_192(CODE[4]), STR_191(CODE[8]), 

    printStatistics$1473	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_188(CODE[4]), STR_187(CODE[7]), 

    printStatistics$1467	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_184(CODE[4]), STR_183(CODE[7]), 

    printStatistics$1461	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_180(CODE[4]), STR_179(CODE[7]), 

    printStatistics$1455	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_176(CODE[4]), STR_175(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1238(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1387	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[3]), STR_169(CODE[7]), 

    receivePrintEventVerbose$1382	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_167(CODE[3]), STR_166(CODE[7]), 

    receivePrintEventVerbose$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_164(CODE[3]), STR_163(CODE[7]), 

    receivePrintEventVerbose$1372	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[3]), STR_160(CODE[7]), 

    receivePrintEventVerbose$1367	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_158(CODE[3]), STR_157(CODE[7]), 

    receivePrintEventVerbose$1362	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_155(CODE[3]), STR_154(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1294	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1274	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1265	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_98(CODE[3]), STR_97(CODE[7]), 

    doModeVerbose$1258	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_94(CODE[4]), STR_93(CODE[8]), 

    doModeVerbose$1252	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_90(CODE[4]), STR_89(CODE[8]), 

    doModeVerbose@preg_1243	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1239	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1230	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_76(CODE[3]), STR_75(CODE[7]), 

    doModeVerbose$1226	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_74(CODE[3]), STR_73(CODE[7]), 

    doModeVerbose$1221	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_71(CODE[6]), STR_70(CODE[10]), 

    doModeVerbose$1213	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_65(CODE[3]), STR_64(CODE[7]), 

    doModeVerbose$1208	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1204	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_60(CODE[3]), STR_59(CODE[7]), 

    doModeVerbose$1199	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_57(CODE[6]), STR_56(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_124(CODE[2]), STR_122(CODE[2]), STR_120(CODE[2]), STR_118(CODE[2]), 
		 -> STR_115(CODE[2]), STR_111(CODE[2]), STR_109(CODE[2]), STR_107(CODE[2]), 
		 -> STR_105(CODE[2]), STR_102(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1187	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  132507
                                            126 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             19 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             19 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       89    89      0   96922
                                            106 BANK0     20    20      0
                                              0 BANK2     69    69      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23342
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2312
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1214
                                             19 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     740
                                             14 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     777
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     372
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     45      C5       8       77.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F2       6       94.5%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     85      86       4       83.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     37C      15        0.0%
DATA                 0      0     578      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 05 23:36:39 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6B2C  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 279C  
            doModeVerbose@filter_nodeid 028E                                      PL2 6B2C  
                                    PL4 6B3C                                      PL6 6B58  
                                    PL8 6B66                                      _id 01EB  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 14B8  
                                   PL10 6B80                                     PL20 564E  
                                   PL12 5620                                     PL30 6BDA  
                                   PL22 360A                                     PL14 34E0  
                                   PL40 5674                                     PL32 6BEE  
                                   PL24 6BCA                                     PL16 563E  
                                   PL50 6C34                                     PL42 33A2  
                                   PL34 2B4C                                     PL26 3A60  
                                   PL18 32C0                                     PL60 28FE  
                                   PL52 33B2                                     PL44 2434  
                                   PL36 6C00                                     PL28 338E  
                                   PL70 31B4                                     PL62 56BA  
                                   PL54 56A4                                     PL46 24D4  
                                   PL38 6C1A                                     PL80 4FA2  
                                   PL72 33C4                                     PL64 3620  
                                   PL56 6C4C                                     PL48 568E  
                                   PL90 29BA                                     PL82 2C2C  
                                   PL74 3A70                                     PL66 3634  
                                   PL58 212C                                     PL92 4688  
                                   PL84 56DA                                     PL76 2578  
                                   PL68 2DEE                                     PL94 1822  
                                   PL86 1648                                     PL78 56C8  
                                   PL96 33D8                                     PL88 3D8C  
                                   PL98 56E4                 sendEscapedUartData@pcrc 006C  
                                   l441 3BA8                                     l442 3BB2  
                                   l451 3BE0                                     l444 3BBE  
                                   l437 3B52                                     l438 3B90  
                                   l544 6B2A                                     l480 5728  
                                   l704 41C2                                     l553 603E  
                                   l562 5F50                                     l802 1C06  
                                   l812 291C                                     l573 5FE8  
                                   l549 5E70                                     l821 2962  
                                   l806 1C2A                                     l902 2BBE  
                                   l830 29B0                                     l742 4FA0  
                                   l911 2BFC                                     l815 2926  
                                   l824 2972                                     l752 4C9E  
                                   l905 2BCE                                     l809 2912  
                                   l586 60A2                                     l578 6016  
                                   l842 245A                                     l914 2C18  
                                   l818 2942                                     l851 24A6  
                                   l827 29A6                                     l691 42AA  
                                   l836 2446                                     l908 2BEA  
                                   l845 2476                                     l917 2C22  
                                   l854 24C0                                     l686 4138  
                                   l863 23A6                                     l839 2450  
                                   l872 23D6                                     l848 2496  
                                   l953 490A                                     l961 368E  
                                   l881 2420                                     l857 24CA  
                                   l777 4E9C                                     l954 491E  
                                   l946 4874                                     l794 1BD8  
                                   l866 23B0                                     l890 2B6E  
                                   l875 23F6                                     l964 3698  
                                   l884 242A                                     l797 1BE2  
                                   l973 3776                                     l869 23BA  
                                   l893 2B78                                     l958 3684  
                                   l878 2406                                     l983 392C  
                                   l967 36B4                                     l992 395C  
                                   l976 3780                                     l896 2B82  
                                   l986 3936                                     l979 378A  
                                   l899 2B9E                                     l989 3940  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 007E  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _dlc 003A  
                                   _pos 0034                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00EC                                     wreg 000FE8  
         __end_of_writeRegisterExtended 2FD8                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1011 3A5E  
                                  l1100 266A                                    l1005 3A4A  
                                  l1103 26E4                                    l1112 2D1A  
                                  l1008 3A54                                    l1130 2FD6  
                                  l1042 27AA                                    l1211 2FEC  
                                  l1051 283E                                    l1205 4BDA  
                                  l1109 2C82                                    l1045 27B4  
                                  l1061 3C46                                    l1150 1A00  
                                  l1054 2848                                    l1127 2F3C  
                                  l1039 27A0                                    l1304 2630  
                                  l1048 27D0                                    l1146 19F4  
                                  l1082 3D62                                    l1066 3C78  
                                  l1075 3D00                                    l1252 20F0  
                                  l1092 2EEA                                    l1085 3D80  
                                  l1069 3CB0                                    l1270 4322  
                                  l2080 32B6                                    l1280 43C4  
                                  l1272 4334                                    l1088 3D8A  
                                  l1249 20D2                                    l2081 32BE  
                                  l1281 43D6                                    l1273 4346  
                                  l1282 43E8                                    l1274 4358  
                                  l1610 229A                                    l1259 1F9A  
                                  l1283 43FA                                    l1275 436A  
                                  l1611 2300                                    l1284 440C  
                                  l1276 437C                                    l1197 4B48  
                                  l1285 441E                                    l1277 438E  
                                  l1605 17EE                                    l1286 4430  
                                  l1278 43A0                                    l1295 20AE  
                                  l1279 43B2                                    l1287 4488  
                                  l2600 1930                                    l2521 1C8E  
                                  l1529 338C                                    l1730 5404  
                                  l1722 539C                                    l1642 4FCC  
                                  l1731 5408                                    l1555 2B2A  
                                  l2523 1CEE                                    l1475 38F8  
                                  l1467 385C                                    l1299 1734  
                                  l2356 2380                                    l1733 5424  
                                  l1469 387A                                    l1806 167A  
                                  l1822 1576                                    l2470 19C4  
                                  l1558 2B4A                                    l2542 1F28  
                                  l1823 1578                                    l1583 1D64  
                                  l1591 1DC4                                    l2455 2DCA  
                                  l2480 176A                                    l1728 53DE  
                                  l2561 1D54                                    l2609 17B0  
                                  l2545 1F24                                    l1585 1D6C  
                                  l1658 5108                                    l2387 1EA0  
                                  l1675 5118                                    l1659 50BA  
                                  l2619 18EC                                    l1860 1BA6  
                                  l1781 14B8                                    l1861 1BB0  
                                  l2397 1C7C                                    l1749 54AE  
                                  l2573 21D2                                    l1862 1BB2  
                                  l1694 523A                                    l1678 514C  
                                  l1855 1B90                                    l1679 5150  
                                  l2575 21C6                                    l1864 1BCA  
                                  l1872 1A66                                    l2576 21CA  
                                  l1859 1BA4                                    STR_1 7616  
                                  STR_2 6F92                                    STR_3 76A8  
                                  STR_4 70AB                                    STR_5 77CF  
                                  STR_6 7CC4                                    STR_7 7791  
                                  STR_8 7CAB                                    STR_9 7C6E  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 002C                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 2434  
                                  _bHex 00E5            doModeVerbose@filter_priority 028C  
                                  _crc8 16C4                                    _data 01D3  
                                  _caps 01EF                                    _atoi 31C8  
                                  _main 3A82                                    _init 193A  
                                  _mode 0032                                    _itoa 168C  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 2302  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 02FA  
                          _sprintf$2115 0086                            _sprintf$2108 0082  
                          _sprintf$2109 0084            receiveSendMultiEventCANAL@id 007D  
             ECANReceiveMessage@dataLen 000E      __end_of_receiveSendMultiEventCANAL 3A60  
            _receiveSendMultiEventCANAL 38FA                      doModeVerbose@count 02B1  
                 getVSCPFrame@pPriority 0075                      doModeVerbose@value 02B9  
                  __end_of_getVSCPFrame 20B0                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 00A8  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 l10322 2AA4                                   l10334 2B34  
                                 l10336 2B38                                   _B0CON 000E20  
                                 _B1CON 000E30                                   l13132 37F6  
                                 l14100 626A                                   l12502 331A  
                                 l13126 37E4                                   l14022 6010  
                                 l13160 387C                                   l13144 3820  
                                 l14200 6546                                   l14120 630C  
                                 l14112 62BA                                   l14104 627C  
                                 l14008 5FB4                                   _B2CON 000E40  
                                 l15010 48F4                                   l13154 3860  
                                 l14210 6580                                   l13228 1594  
                                 l15012 48FC                                   l15100 15B6  
                                 l13180 38EA                                   l14300 67EE  
                                 l14220 65BA                                   l14204 6556  
                                 l14132 636E                                   l14108 62A8  
                                 l14036 6060                                   l13166 38AA  
                                 l13174 38C8                                   l14302 67FC  
                                 l14214 6590                                   l14126 6342  
                                 l14046 60B6                                   l15008 48F0  
                                 l15032 1EB4                                   l15120 3DB4  
                                 l13184 38EE                                   l14304 680A  
                                 l14224 65CA                                   l14232 662E  
                                 l14136 6396                                   l14400 4100  
                                 _B3CON 000E50                                   l15018 491C  
                                 l15050 2150                                   l13186 38F0  
                                 l12490 4442                                   l14074 6162  
                                 l14058 6100                                   l14066 6140  
                                 l16002 161C                                   l14402 4104  
                                 l15044 1534                                   l15028 150A  
                                 l15036 1EEC                                   l15060 2188  
                                 l15204 4A06                                   l14340 6968  
                                 l14316 68A2                                   l14252 66AE  
                                 l14180 64D0                                   l14148 63F6  
                                 l14164 6460                                   l14092 61EA  
                                 l14068 6144                                   l14076 6174  
                                 l13620 1D76                                   l14420 4150  
                                 l15038 1F12                                   l15070 31CA  
                                 l15134 3E1A                                   l14326 68F0  
                                 l14262 66E8                                   l14190 650A  
                                 l13622 1D7C                                   l14510 421A  
                                 l15400 501E                                   l15080 3224  
                                 l15072 31D0                                   l15232 4AD2  
                                 l14344 698E                                   l14336 6944  
                                 l14272 6724                                   l14248 669E  
                                 l14184 64E0                                   l14088 61D8  
                                 l13800 58EE                                   l14424 4156  
                                 l13560 3B92                                   l13528 3AE8  
                                 _B4CON 000E60                                   l13722 1F76  
                                 l13714 1F4C                                   l11946 1CBC  
                                 l15082 323C                                   l15162 3EE6  
                                 l15218 4A6C                                   l15314 308A  
                                 l14282 675E                                   l14258 66D8  
                                 l14194 651A                                   l14098 6256  
                                 l14522 4244                                   l14434 416C  
                                 l13570 3BBA                                   l13562 3BA4  
                                 l15084 3244                                   l15148 3E80  
                                 l15244 4B24                                   l14292 6798  
                                 l14268 6714                                   l13820 5994  
                                 l13732 56F6                                   l14540 428C  
                                 l14516 422E                                   l14444 4194  
                                 l14460 419C                                   l16220 3D0A  
                                 l16212 3CC4                                   l14604 4CD4  
                                 l14700 4F64                                   l13726 1F8C  
                                 l13718 1F60                                   l15510 5244  
                                 l15190 49A0                                   l15326 15D4  
                                 l14382 6ADA                                   l14366 6A36  
                                 l14358 69F2                                   l14374 6A7A  
                                 l14278 674E                                   l13910 5C78  
                                 l13902 5C28                                   l13806 592C  
                                 l14390 6B0E                                   l14534 4274  
                                 l14470 41C8                                   l14550 42A8  
                                 l14630 4D9A                                   l14614 4CF8  
                                 l14710 4F9E                                   l13590 3BEE  
                                 l13582 3BD8                                   l15520 5278  
                                 l15440 511C                                   l15432 50F4  
                                 l15416 508A                                   l15408 5064  
                                 l15088 327E                                   l15272 4BC8  
                                 l15256 4B64                                   l15248 4B36  
                                 l15176 493A                                   l15096 15A6  
                                 l15328 15DC                                   l14384 6AE8  
                                 l14288 6788                                   l13920 5CF4  
                                 l13904 5C3A                                   l13840 5A0C  
                                 l13832 59DC                                   l13824 59AC  
                                 l13816 5976                                   l13760 57AA  
                                 l14528 425C                                   l14544 429E  
                                 l14472 41CE                                   l16224 3D1E  
                                 l14704 4F78                                   l13592 3BF4  
                                 _B5CON 000E70                                   l15522 527C  
                                 l15514 5262                                   l15434 510E  
                                 l16330 2050                                   l16250 183A  
                                 l15370 2D18                                   l14378 6AB6  
                                 l13842 5A1E                                   l14394 6B28  
                                 l14474 41D2                                   l14546 42A4  
                                 l14706 4F84                                   l14570 4C2A  
                                 l15700 55E2                                   l15612 5434  
                                 l15452 5156                                   l15436 5112  
                                 l15428 50C0                                   l16252 1840  
                                 l15268 4BB6                                   l14388 6B00  
                                 l13940 5D9A                                   l13916 5CB6  
                                 l13852 5A74                                   l13836 59F4  
                                 l13828 59C4                                   l13748 5748  
                                 l16076 2EA8                                   l14492 41F4  
                                 l14484 41E8                                   l14476 41D8  
                                 l14660 4E7C                                   l13596 3C00  
                                 l13588 3BEA                                   l14734 1B92  
                                 l14726 1B84                                   l15622 5454  
                                 l15606 541E                                   l15550 52EC  
                                 l15534 52B0                                   l15446 5134  
                                 l15438 5116                                   l15382 4FD6  
                                 l15710 560C                                   l13950 5E18  
                                 l13926 5D32                                   l13870 5AF8  
                                 l14638 4E12                                   l14582 4C74  
                                 l14574 4C4C                                   l14904 28E8  
                                 l16504 2342                                   l15704 5604  
                                 l15640 548E                                   l15536 52B4  
                                 l15712 5612                                   l15472 519C  
                                 l15456 515C                                   l15464 5180  
                                 l15384 4FDA                                   l15392 4FE8  
                                 l15376 4FB4                                   l16352 25BC  
                                 l16600 1CF2                                   l15296 3022  
                                 l15368 2CF8                                   l13952 5E2C  
                                 l13944 5DAC                                   l13880 5B40  
                                 l13864 5ACE                                   l13792 58AE  
                                 l13784 586E                                   l13776 582C  
                                 l13768 57EA                                   l16280 1882  
                                 l16272 22EC                                   l14672 4EB2  
                                 l14648 4E3C                                   l14592 4CA8  
                                 l14576 4C50                                   l16418 16A8  
                                 l16530 1E60                                   l15570 534C  
                                 l15482 51C4                                   l15474 51AA  
                                 l15458 5168                                   l15386 4FDE  
                                 l16346 25B6                                   l16610 1D40  
                                 l16450 26E2                                   l15730 1A0A  
                                 l15722 19DA                                   l13858 5AA4  
                                 l16266 22A8                                   l14682 4ED2  
                                 l16540 1E92                                   l16532 1E64  
                                 l15660 54D0                                   l15628 5468  
                                 l15636 5484                                   l15580 537C  
                                 l15548 52E8                                   l15564 5320  
                                 l15468 5196                                   l15388 4FE2  
                                 l16364 25F6                                   l16348 25B8  
                                 l16604 1D2C                                   l16620 17A0  
                                 l16460 1ADA                                   l13956 5E3E  
                                 l13876 5B22                                   l14692 4EEE  
                                 l14668 4EA2                                   l14588 4C98  
                                 l16550 1C48                                   l15662 54D6  
                                 l15646 5496                                   l15574 536A  
                                 l15566 5332                                   l15478 51B8  
                                 l15486 51CA                                   l16614 1780  
                                 l16462 1AE4                                   l15830 3190  
                                 l15822 3156                                   l15814 30F2  
                                 l13974 5EC4                                   l13966 5E78  
                                 l13894 5BD4                                   l13886 5B7A  
                                 l15910 39B8                                   l16286 189E  
                                 ?_crc8 0067                                   l16528 1E54  
                                 l16552 1C4C                                   l15680 5562  
                                 l15672 54F8                                   l15656 54BE  
                                 l15592 53BA                                   l15496 5204  
                                 l15488 51F4                                   l14960 478E  
                                 l14936 46F0                                   l16608 1D38  
                                 l16296 1732                                   l16448 26C2  
                                 l16456 1AC8                                   l15824 315E  
                                 l13888 5B80                                   l13896 5BE6  
                                 l16480 17DA                                   l16472 17C8  
                                 l14890 28D0                                   l16570 19A0  
                                 l15690 55A8                                   l15586 53A0  
                                 l16618 179C                                   l16634 18B8  
                                 l16642 18FC                                   l16458 1ACC  
                                 l15826 3174                                   l15770 2FB4  
                                 l13986 5F16                                   l15930 3A1A  
                                 l16386 2D2C                                   l14698 4F06  
                                 l16556 1C6E                                   l16548 1C3C  
                                 l14972 47DC                                   l14948 473E  
                                 l16628 1522                                   l16636 18C0  
                                 l16644 1904                                   l15852 222E  
                                 l15772 2FD4                                   l13996 5F64  
                                 l15916 39D6                                   l16396 2D70  
                                 l16566 1994                                   l16590 174E  
                                 l16494 230A                                   l15694 55C2  
                                 l15686 5584                                   l15678 550C  
                                 l15598 53E2                                   l15854 2236  
                                 l15934 3A3A                                   l15926 39FA  
                                 l16568 199C                                   l15696 55D4  
                                 l14984 482A                                   l15792 2A40  
                                 l15848 2208                                   l16488 17EC  
                                 l16578 19BA                                   l16594 1760  
                                 l16586 1742                                   l15794 2A56  
                                 l15786 29F4                                   l15858 2244  
                                 l16588 174A                                   l14998 4880  
                                 l15798 2A72                                   l15982 374E  
                                 l15888 3988                                   l15986 3766  
                  __size_of_doModeSLCAN 03C6                                   l15998 15FE  
                                 ?_atoi 0066                                   ?_main 00DE  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 14C6                                   _EEADR 000FA9  
                                 STR_10 7C4C                                   STR_11 7C6E  
                                 STR_12 7C86                                   STR_20 7C37  
                                 STR_13 7C6E                                   STR_21 7A40  
                                 STR_30 7CF4                                   STR_14 7BB3  
                                 STR_22 7A54                                   STR_15 7C6E  
                                 STR_31 7CF4                                   STR_23 7A90  
                                 STR_32 7CF4                                   STR_16 7C3E  
                                 STR_40 7AB5                                   STR_24 79C3  
                                 STR_17 7C6E                                   STR_33 7CF4  
                                 STR_41 7CBF                                   STR_25 7873  
                                 STR_42 7C6E                                   STR_50 7B81  
                                 STR_34 7CF4                                   STR_18 7BFC  
                                 STR_26 7A2C                                   STR_19 7C6E  
                                 STR_35 7CF4                                   STR_43 7CD5  
                                 STR_27 7AA3                                   STR_51 78EE  
                                 STR_44 7C6E                                   STR_36 7C6E  
                                 STR_52 7B81                                   STR_60 7CED  
                                 STR_28 7906                                   STR_61 7C53  
                                 STR_29 7CEA                                   STR_45 7CBA  
                                 STR_53 7750                                   STR_37 770E  
                                 STR_46 7C6E                                   STR_54 7B81  
                                 STR_70 7B79                                   STR_62 7CED  
                                 STR_38 7CE7                                   STR_39 7C6E  
                                 STR_71 7C74                                   STR_63 7BD8  
                                 STR_47 7C97                                   STR_55 7B49  
                                 STR_48 7C6E                                   STR_64 7C53  
                                 STR_80 7CA1                                   STR_56 7B79  
                                 STR_72 78A5                                   STR_81 7B81  
                                 STR_73 7C53                                   STR_65 7CED  
                                 STR_49 7C9C                                   STR_57 7C74  
                                 STR_82 78EE                                   STR_74 7CED  
                                 STR_66 7CE1                                   STR_90 7CD1  
                                 STR_58 7B2C                                   STR_83 7B81  
                                 STR_75 7C53                                   STR_67 7CC9  
                                 STR_59 7C53                                   STR_91 7684  
                                 STR_68 7180                                   STR_84 7750  
                                 STR_92 7B4F                                   STR_76 7CED  
                                 STR_77 7180                                   STR_93 7BCC  
                                 STR_85 7B81                                   STR_69 7B0C  
                                 STR_78 7C6E                                   STR_94 7CD1  
                                 STR_86 791E                                   STR_95 7CB0  
                                 STR_87 75CB                                   STR_79 7118  
                                 STR_88 7B4F                                   STR_96 7A68  
                                 STR_97 7C53                                   STR_89 7BCC  
                                 STR_98 7CED                                   STR_99 7180  
          __end_of_printFirmwareVersion 212C                                   _BSEL0 000DF8  
                       __end_of___lldiv 1EB2                                   ?_utoa 0067  
                       __end_of_calcCRC 1626                                   _T0CON 000FD5  
                                 u20210 321A                                   u20230 3238  
                       __end_of___llmod 1C8E                                   u20217 3214  
                                 u20305 2722                                   u20250 3268  
                                 u20170 31E4                                   u20260 3292  
                                 u20237 3232                                   u20190 31FC  
                                 u20257 3262                                   u20177 31DE  
                                 u15010 1CE4                                   u21234 19EA  
                                 u20267 328C                                   u21235 19E6  
                                 u22220 185C                                   u12605 2B16  
                                 u20197 31F6                                   _LATC1 007C59  
                                 u15017 1CDE                                   u22227 1856  
                                 u16015 32F4                                   u16025 3304  
                                 u22370 20A2                                   u16035 3322  
                                 u22375 2098                                   u22560 1B0C  
                                 u21845 2E3E                                   u22567 1B02  
                                 u22907 3AF6                                   u18060 1A88  
                                 u18205 5784                                   u18070 1AB6  
                                 u19015 6830                                   u18215 57D0  
                                 u19025 6878                                   u18225 5810  
                                 u18067 1A82                                   u19035 68C8  
                                 u18235 5852                                   u18077 1AB0  
                                 u18245 5894                                   u14990 1CAC  
                                 u19230 4172                                   u18255 58D4  
                                 u18505 5CDC                                   u18265 5914  
                       __end_of___lwdiv 19CE                                   u18515 5D1A  
                                 u18275 5952                                   u14997 1CA6  
                                 u18525 5D58                                   u18375 5A44  
                                 _ERRIE 007D1D                                   u19600 4D66  
                                 u15985 42C6                                   u18465 5C0C  
                                 u15986 42CC                                   u19610 4D70  
                                 u15995 42FA                                   u15987 42DA  
                                 u15996 4300                                   u19620 4D7A  
                                 u15997 430E                                   u18485 5C60  
                                 u19605 4D64                                   u18495 5C9E  
                                 u19615 4D6E                                   u18825 63BC  
                                 u18745 619A                                   u19625 4D78  
                                 u18915 6B88                                   u18925 6654  
                                 u18845 6486                            _vscpPriority 003D  
                                 i1l401 018C                                   i1l410 018A  
                                 i1l404 018A                                   i1l413 017A  
                                 i1l416 0196                         __end_of___lwmod 1774  
                                 i1l419 01EA                                   i1l429 02DC  
                                 u19965 1686                                   u19966 1688  
                                 i1l399 0092                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 002E  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0060                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 2268                                   crc8@m 0069  
                                 _flags 003B                         __end_of_dpowers 6CBA  
                Write_b_eep@GIE_BIT_VAL 0063                         __end_of_isdigit 159C  
                                 _timer 0118                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00E4  
                                 _ultoa 2D1C                              Interrupt@c 0020  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1504 009C  
                      _printErrors$1513 009E                        _printErrors$1480 0094  
                                 tablat 000FF5                        _printErrors$1492 0098  
                      _printErrors$1486 0096                        _printErrors$1498 009A  
               ??_receiveSendEventCANAL 0073             __end_of_sendEscapedUartData 1C2C  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 5620                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 17B2                         __end_of_strcspn 193A  
                       __end_of_toupper 1526                         __end_of_stristr 1F2A  
     __size_of_receivePrintEventVerbose 028A                     doModeVerbose@i_1181 02B8  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1239 02BC  
                   doModeVerbose@p_1274 02C1                     doModeVerbose@p_1187 02BA  
                   doModeVerbose@p_1294 02C3                          WriteUSART@data 0060  
                  _ECANSetOperationMode 1526                            _canInputFifo 01CB  
                       __initialization 1B16                  doModeVerbose@page_1236 02A7  
         receiveSendMultiEventCANAL@dlc 0081                            __end_of_crc8 16FC  
         receiveSendMultiEventCANAL@crc 0082                            __end_of_atoi 32C0  
         receiveSendMultiEventCANAL@pos 0083                            __end_of_main 3C0C  
                          __end_of_init 1984                            __end_of_itoa 16C4  
                          __end_of_utoa 23A2                     doModeVerbose@ifmode 02BE  
                            _Read_b_eep 14D8                     doModeVerbose@maskno 02AE  
                      __end_of_Busy_eep 14BE                     doModeVerbose@nodeid 02B2  
                         doModeSLCAN@id 009D                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A3                       ??_ECANSendMessage 0072  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BB  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0073  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 0065  
                                ??_main 00E3                       readRegister@value 00B9  
                                ??_init 0064                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0290  
                         __activetblptr 000002                         _stateVscpDriver 0037  
                     __RegsToCANID@type 0005                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000F                           ?_readRegister 00B6  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1243 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B9              ECANReceiveMessage@savedPtr 0010  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7C6E                                  STR_101 7C45  
                                STR_102 7CF4                                  STR_110 75A5  
                                STR_111 7CF4                                  STR_103 6ED8  
                                STR_120 7CF4                                  STR_200 7CDD  
                                STR_104 74BB                                  STR_112 741A  
                                STR_201 7180                                  STR_113 7C6E  
                                STR_105 7CF4                                  STR_121 763B  
                                STR_202 794E                                  STR_122 7CF4  
                                STR_114 7CA6                                  STR_130 7BF4  
                                STR_106 73F0                                  STR_210 6F58  
                                STR_115 7CF4                                  STR_107 7CF4  
                                STR_203 7C04                                  STR_123 7660  
                                STR_131 7493                                  STR_211 714E  
                                STR_124 7CF4                                  STR_204 7CDD  
                                STR_140 7C8C                                  STR_132 7B63  
                                STR_108 7557                                  STR_220 7509  
                                STR_116 71EA                                  STR_212 6FCC  
                                STR_205 7180                                  STR_221 6E6E  
                                STR_133 7C6E                                  STR_109 7CF4  
                                STR_213 7936                                  STR_141 7859  
                                STR_117 75F1                                  STR_125 7530  
                                STR_126 7C6E                                  STR_118 7CF4  
                                STR_214 7C53                                  STR_150 7C68  
                                STR_142 7BDC                                  STR_134 7BA1  
                                STR_230 78BE                                  STR_206 788C  
                                STR_222 7808                                  STR_207 7C53  
                                STR_215 7CED                                  STR_151 7CF2  
                                STR_127 7C92                                  STR_143 7C80  
                                STR_135 7C7A                                  STR_119 746B  
                                STR_223 7398                                  STR_231 7005  
                                STR_216 7180                                  STR_160 7C53  
                                STR_208 7CED                                  STR_152 7CF0  
                                STR_128 7CD9                                  STR_136 7BEC  
                                STR_232 797E                                  STR_240 78D6  
                                STR_144 772F                                  STR_224 733E  
                                STR_209 7180                                  STR_145 7C6E  
                                STR_161 7CED                                  STR_153 7C30  
                                STR_137 77EC                                  STR_233 76ED  
                                STR_129 73C4                                  STR_225 71B7  
                                STR_217 703D                                  STR_241 6CDA  
                                STR_154 7C53                                  STR_170 7CED  
                                STR_138 7CB5                                  STR_162 7BAA  
                                STR_242 7A04                                  STR_146 7823  
                                STR_234 74E2                                  STR_226 721C  
                                STR_218 70E2                                  STR_250 6F1A  
                                STR_171 7CF4                                  STR_163 7C53  
                                STR_155 7CED                                  STR_147 7A18  
                                STR_227 77B0                                  STR_139 7771  
                                STR_251 757E                                  STR_235 7443  
                                STR_219 7183                                  STR_243 6E0B  
                                STR_164 7CED                                  STR_180 7CDD  
                                STR_260 7CFA                                  STR_156 7BE4  
                                STR_148 7BBC                                  STR_172 7B6E  
                                STR_244 76CB                                  STR_236 730F  
                                STR_228 724E                                  STR_252 6E52  
                                STR_261 7180                                  STR_181 7180  
                                STR_173 7CCD                                  STR_157 7C5A  
                                STR_165 7C29                                  STR_149 7BC4  
                                STR_253 783E                                  STR_229 736C  
                                STR_245 72E0                                  STR_237 6D75  
                                _EEDATA 000FA8                                  STR_254 7180  
                                STR_166 7C53                                  STR_158 7CED  
                                STR_270 7C14                                  STR_262 7B3B  
                                STR_174 7AC7                                  STR_182 79D9  
                                STR_190 7995                                  STR_246 72B1  
                                STR_238 6DC1                                  STR_263 7180  
                                STR_255 6E52                                  STR_183 7C61  
                                STR_167 7CED                                  STR_175 7C61  
                                STR_159 7C22                                  STR_271 7C0C  
                                STR_191 7C04                                  STR_247 6E95  
                                STR_239 6D28                                  STR_192 7CDD  
                                STR_184 7CDD                                  STR_176 7CDD  
                                STR_168 7C1B                                  STR_272 7B57  
                                STR_256 7B1D                                  STR_264 7A7C  
                                STR_248 7280                                  STR_193 7180  
                                STR_185 7180                                  STR_177 7180  
                                STR_169 7C53                                  STR_265 7CFC  
                                STR_257 7BD4                                  STR_273 7B97  
                                STR_249 7074                                  STR_258 7CF8  
                                STR_266 7CF6                                  STR_274 7B8D  
                                STR_178 7AFB                                  STR_186 79EF  
                                STR_194 7966                                  STR_267 7180  
                                STR_187 7C61                                  STR_179 7C61  
                                STR_195 7C04                                  STR_259 7CE4  
                                STR_275 79AC                                  STR_276 7180  
                                STR_196 7CDD                                  STR_188 7CDD  
                                STR_268 7B83                                  STR_269 7180  
                                STR_197 7180                                  STR_189 7180  
                                STR_277 7AD9                                  STR_278 7AEA  
                                STR_198 794E                                  STR_199 7C04  
                                _EECON2 000FA7            __end_of_readRegisterExtended 2D1C  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 2578  
                                i1l1501 4566                                  i1l1511 45F0  
                                i1l1503 4576                                  i1l1512 460A  
                         ?_init_app_ram 0001                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1534 3608  
                                i1l1480 44BE                                  i1l1490 458C  
                                i1l1539 1E32                                  i1l1491 450C  
                                i1l1493 451A                                  i1l1566 3426  
                                i1l1567 34DE                                  i1l1495 452E  
                                i1l1487 4686                                  i1l1497 4542  
                                i1l1499 4556                                  i1l1885 154E  
                            _OpenTimer0 155E                                  i1l6508 2530  
                                i1l6484 3430                                  i1l6476 33F4  
                                i1l6494 34BA                                  i1l6496 34C4  
                                i1l9600 1DE8                                  i1l9602 1DF2  
                                i1l9604 1DFC                                  i1l9612 1E14  
                                i1l9606 1E02                                  i1l9608 1E08  
                                i1l9628 358A                                  i1l9594 1DCC  
                                i1l9596 1DD4                                  i1l9860 44AC  
                                i1l9598 1DDE                                  i1l9870 44D6  
                                i1l9928 45A0                                  i1l9938 45C0  
                                i1l9964 463C                                  i1l9972 465A  
                                i1l9956 460C                                  i1l9876 44EC  
                                i1l9884 44FA                                  i1l9878 44F6  
                                i1l9978 4670                         _init_app_eeprom 2852  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 000C                  ECANReceiveMessage@mode 0013  
                ECANReceiveMessage@temp 0014                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0077  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 0076  
                    _doModeVerbose$1204 0294                      _doModeVerbose$1221 029A  
                    _doModeVerbose$1213 0298                      _doModeVerbose$1230 029E  
                    _doModeVerbose$1208 0296                      _doModeVerbose$1226 029C  
                    _doModeVerbose$1252 02A0                      _doModeVerbose$1265 02A4  
                    _doModeVerbose$1258 02A2                      _doModeVerbose$1199 0292  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 02E2                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0005  
                        getCANFrame@pid 0072                                  ___wmul 1626  
                            _bInitiated 002D                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 012B                               ??___llmod 0075  
                      OpenTimer0@config 0060                  receiveSendEventCANAL@i 007B  
                             ??___lwdiv 0064                               ??___lwmod 0064  
         _receivePrintEventVerbose$1362 0099           _receivePrintEventVerbose$1372 009D  
         _receivePrintEventVerbose$1382 00A1           _receivePrintEventVerbose$1367 009B  
         _receivePrintEventVerbose$1377 009F           _receivePrintEventVerbose$1387 00A3  
                                _memcpy 1870                                  _memset 159C  
                                clear_0 1B1E                                  clear_1 1B32  
                                clear_2 1B44                                  clear_3 1B50  
                                clear_4 1B60                           ?_sendCANFrame 008F  
                                _strcat 1ABE                                  _strchr 1C8E  
                                _strcpy 15CA                                  _strlen 1830  
                                _wrkbuf 017B                                  _strtok 2142  
                                _strspn 18B2     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 2268                            __mediumconst 6C62  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0062  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 028F                        __end_of_strnicmp 1D56  
                            __accesstop 0060                 __end_of__initialization 1B66  
                  _printFirmwareVersion 20B0                   __size_of_getVSCPFrame 0088  
             receiveSendEventCANAL@data 0073                    doModeVerbose@id_1306 02A9  
                            _WriteUSART 14FC                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0196                    _printStatistics$1461 0096  
                  _printStatistics$1455 0094                    _printStatistics$1473 009A  
                  _printStatistics$1467 0098                   _uart_transmitOverruns 0120  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 2DEE                              __end_ofPL2 6B3C  
                            __end_ofPL4 6B58                              __end_ofPL6 6B66  
                            __end_ofPL8 6B80                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 155E                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00EE                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007D                         _fifo_canrxcount 0030  
               __end_of_init_app_eeprom 28FE                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00BE  
                        _status_led_cnt 0026                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 1BCC  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 2A96                              _doModeVscp 40EE  
                               ??_ultoa 007E                            _getVSCPFrame 2028  
                            __pbssBANK0 00E5                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                            __IT_INT_MASK 0126  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                          __IT_SAVE_BSR 0127                           setFilter@sidh 006B  
                         setFilter@sidl 006C                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0033             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 2302                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 002B                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 23A2                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 2C3A                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0063                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00EE  
                               i1l13400 0042                     ?_sendVSCPDriverNack 0001  
                               i1l13410 00B8                                 i1l13402 007E  
                               i1l13420 00F0                                 i1l13412 00C8  
                               i1l13404 008E                                 i1l13422 00FC  
                               i1l13414 00CC                                 i1l13406 009A  
                               i1l13440 0156                                 i1l13432 012C  
                               i1l13416 00D8                                 i1l13408 00A6  
                               i1l13450 0194                                 i1l13434 0138  
                               i1l13426 010E                                 i1l13418 00E8  
                               i1l13460 01F2                                 i1l13452 019E  
                               i1l13444 0168                                 i1l13428 011A  
                               i1l13470 025E                                 i1l13462 01FA  
                               i1l13454 01C6                                 i1l13446 0172  
                               i1l13438 014A                                 i1l13480 02CE  
                               i1l13472 0298                                 i1l13464 0226  
                               i1l13456 01CE                                 i1l13448 0182  
                               i1l13474 029C                                 i1l13466 0228  
                               i1l13458 01D6                                 i1l13476 02C8  
                               i1l13468 025A                                 i1l13396 0034  
                               i1l13478 02CC                                 i1l13486 02DA  
                               i1l13398 003C                              _fifo_write 33E2  
                    __size_of_printHelp 01BE                      __size_of_printMode 007E  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1238 02B0                       sendCANFrame@pdata 0094  
                            _made_table 0124                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 1DC6                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2C2C  
            _sendVSCPDriverCommandReply 2B68                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2EEC  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 143E  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 29BA          __size_of_receiveSendEventCANAL 0144  
         __end_of_receiveSendEventCANAL 378C                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 0180  
                       _ECANSendMessage 378C           __end_of_receiveSendEventSLCAN 3D8C  
                               __Hparam 0000                       __end_of_findNodes 30C6  
                               __Lparam 0000                       __end_of_fifo_init 1822  
                     __end_of_fifo_read 2B4C                           ??_getCANFrame 0072  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 26E6                               ?_printMDF 0001  
                               _bSilent 002F               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 1E3C  
                       __size_of___wmul 0022                                 _calcCRC 15F8  
                       getCANFrame@pdlc 006E                                 ___llmod 1C2C  
                               ___lwdiv 1984                               _FIFOEMPTY 007BA7  
                               ___lwmod 1736                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 1A66  
                          _fifo_getFree 24E2                            init_crc8@crc 0064  
                               __pcinit 1B16                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3A82                                 __ptext1 14B6  
                               __ptext2 4BDC                                 __ptext3 2268  
                               __ptext4 17B2                 receiveSendEventCANAL@id 007C  
                               __ptext5 3C0C                                 __ptext6 2D1C  
                               __ptext7 40EE                                 __ptext8 290A  
                               __ptext9 2B68                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6CDA  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6C92                       __end_of_init_crc8 1DC6  
                               _isdigit 157C          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 14FC                          _nibbleFromChar 17B2  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 168C  
                               _sprintf 4FAE        __end_of_sendVSCPModeCapabilities 2852  
                     __end_of_setFilter 448A                                 _strichr 1774  
                        doModeVerbose@c 02B7                          doModeVerbose@i 02AF  
                        doModeVerbose@p 02BF                                 _strcspn 18F6  
                               _toupper 1510                             ?_doModeVscp 0001  
                               _stristr 1EB2                    __size_of_printBinary 004A  
                  end_of_initialization 1B66                       __end_of_octpowers 6C92  
                  __size_of_printErrors 02BC                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                             i1u1136_25 3546                               i1u1137_25 3556  
                         __Lmediumconst 6C62                               i1u1138_25 3594  
                  __end_of_sendCANFrame 1736                               i1u1176_25 44B4  
                             i1u1176_27 44B6                               i1u1760_20 009A  
                             i1u1760_21 0098                               i1u1761_20 00D8  
                             i1u1761_21 00D6                               i1u1770_20 0166  
                             i1u1762_20 00E8                               i1u1770_21 0164  
                             i1u1762_21 00E6                               i1u1771_20 0172  
                             i1u1763_20 00FC                               i1u1771_21 0170  
                             i1u1763_21 00FA                               i1u1780_20 0226  
                             i1u1772_20 0182                               i1u1764_20 010C  
                             i1u1780_21 0224                               i1u1772_21 0180  
                             i1u1764_21 010A                               i1u1781_20 025A  
                             i1u1773_20 0194                               i1u1765_20 011A  
                             i1u1781_21 0258                               i1u1773_21 0192  
                             i1u1765_21 0118                               i1u1782_20 0298  
                             i1u1774_20 019E                               i1u1766_20 012A  
                             i1u1758_20 003C                               i1u1782_21 0296  
                             i1u1774_21 019C                               i1u1766_21 0128  
                             i1u1758_21 003A                               i1u1783_20 02C8  
                             i1u1775_20 01C6                               i1u1767_20 0138  
                             i1u1759_20 007E                               i1u1783_21 02C6  
                             i1u1775_21 01C4                               i1u1767_21 0136  
                             i1u1759_21 007C                               i1u1784_20 02D8  
                             i1u1776_20 01CE                               i1u1768_20 0148  
                             i1u1784_21 02D6                               i1u1776_21 01CC  
                             i1u1768_21 0146                               i1u1777_20 01D6  
                             i1u1769_20 0156                               i1u1777_21 01D4  
                             i1u1769_21 0154                               i1u1778_20 01F2  
                             i1u1778_21 01F0                               i1u1779_20 01FA  
                             i1u1779_21 01F8                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 31B4  
                       ___lldiv@divisor 0064                       __end_of_printHelp 40EE  
                       ___lldiv@counter 0068                       __end_of_printMode 1FA8  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1ABE  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 56EE  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 26E6                                 strlen@s 0060  
                            _sequencyno 0036                              _timekeeper 0022  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 2632  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 17F0  
                   __end_of_doModeSLCAN 4FA2                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 38FA  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 4696  
                            _vscpNodeId 003C                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 360A                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B4  
                     doModeVerbose@preg 0284                          _init_crc8$2046 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0096  
                        __end_of___wmul 1648                     __size_of_doModeVscp 01BE  
                           _WriteTimer0 14EA                             _Write_b_eep 1658  
                        __end_of_memcpy 18B2                          __end_of_memset 15CA  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01F1  
                        __end_of_strcat 1B16                          __end_of_strchr 1CF0  
                        __end_of_strcpy 15F8                          __end_of_strlen 1870  
              doModeVerbose@filter_type 028D                          __end_of_strtok 21D4  
                        __end_of_strspn 18F6                             __end_ofPL10 6BCA  
                           __end_ofPL20 5674                             __end_ofPL12 563E  
                           __end_ofPL30 6BEE                             __end_ofPL22 3620  
                           __end_ofPL14 350E                             __end_ofPL40 568E  
                           __end_ofPL32 6C00                             __end_ofPL24 6BDA  
                           __end_ofPL16 564E                             __end_ofPL50 6C4C  
                           __end_ofPL42 33B2                             __end_ofPL34 2B68  
                           __end_ofPL26 3A70                             __end_ofPL18 32CE  
                           __end_ofPL60 290A                             __end_ofPL52 33C4  
                           __end_ofPL44 2442                             __end_ofPL36 6C1A  
                           __end_ofPL28 33A2                             __end_ofPL70 31C8  
                           __end_ofPL62 56C8                             __end_ofPL54 56BA  
                           __end_ofPL46 24E2                             __end_ofPL38 6C34  
                           __end_ofPL80 4FAE                             __end_ofPL72 33D8  
                           __end_ofPL64 3634                             __end_ofPL56 6C62  
                           __end_ofPL48 56A4                             __end_ofPL90 29C8  
                           __end_ofPL82 2C3A                             __end_ofPL74 3A82  
                           __end_ofPL66 3648                             __end_ofPL58 2142  
                           __end_ofPL92 4696                             __end_ofPL84 56E4  
                           __end_ofPL76 258A                             __end_ofPL68 2E02  
                           __end_ofPL94 1830                             __end_ofPL86 1658  
                           __end_ofPL78 56DA                             __end_ofPL96 33E2  
                           __end_ofPL88 3D9A                             __end_ofPL98 56EE  
                   start_initialization 1B16                               _ReadUSART 1540  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1237 02A8  
                 doModeVerbose@filterno 02AD                 _receiveVSCPModeCanalMsg 2E02  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 1B70  
                    __end_of_Read_b_eep 14EA                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00B4  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 004E                          _findNodes$1557 00C5  
              __end_of__ECANPointBuffer 1E3C                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 258A                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 4BDC               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 4688                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0291  
                 __end_ofi1_WriteTimer0 14D8                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 157C                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 0128                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFE  
                          _readRegister 2632                   __size_of_sendCANFrame 003A  
                          _isdigit$2963 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 1A18  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01EF  
                         __IT_SAVE_WREG 0129                        _ledFunctionality 0031  
              doModeVerbose@nodeid_1235 02B3                doModeVerbose@nodeid_1260 02B6  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00CA           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 3D9A                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 1FA8  
                     _sendVSCPDriverAck 2442                           __pmediumconst 6C62  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 2FD8  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 17F0                               _fifo_read 2A96  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 16FC  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 1BCC  
                             _hexpowers 6CBA                        ___lwdiv@quotient 0065  
                             _init_crc8 1D56                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 010C  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 1510                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 42AC                             strnicmp@len 0068  
                             _octpowers 6C62                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 2028  
             __end_of_sendVSCPDriverAck 24D4                                i1u634_25 3402  
                              i1u635_25 3412                                i1u637_25 34A8  
                              i1u639_25 2508                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 3648                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3C0C                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007C                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 30C6                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C4  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 3F30  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 1F2A                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 42AC                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 338E                               _putsUSART 1A66  
                           __stringdata 6CDA                       ___wmul@multiplier 0060  
                          __RegsToCANID 350E                               _vscpClass 0038  
               ??_writeRegisterExtended 00BD                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0074  
                         ??_printBinary 0061                        doModeVerbose@reg 02B5  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0035  
             writeRegisterExtended@page 00B6                                ___DCByte 012A  
  __end_of_receiveVSCPModeMultiCanalMsg 14B6   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 14B4                             ??_Interrupt 0017  
               __end_of_printStatistics 3F30                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                                _Busy_eep 14B8  
              __size_of_init_app_eeprom 00AC                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 14C6                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 2EEC  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 34E0                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 0070  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 279C  
                              __ptext11 14B4                                __ptext20 16C4  
                              __ptext12 2E02                                __ptext21 1D56  
                              __ptext13 1870                                __ptext30 30C6  
                              __ptext22 56EE                                __ptext14 2442  
                              __ptext31 29C8                                __ptext23 42AC  
                              __ptext15 23A2                                __ptext40 4920  
                              __ptext32 1ABE                                __ptext24 2EEC  
                              __ptext16 15F8                                __ptext41 3D9A  
                              __ptext33 2632                                __ptext25 19CE  
                              __ptext17 3648                                __ptext50 1510  
                              __ptext42 31C8                                __ptext34 26E6  
                              __ptext26 2C3A                                __ptext18 38FA  
                              __ptext51 1830                                __ptext43 2142  
                              __ptext35 16FC                                __ptext27 15CA  
                              __ptext19 1BCC                                __ptext60 157C  
                              __ptext52 4696                                __ptext44 18F6  
                              __ptext36 378C                                __ptext28 2FD8  
                              __ptext61 20B0                                __ptext53 2028  
                              __ptext45 18B2                                __ptext37 32CE  
                              __ptext29 21D4                                __ptext70 1FA8  
                              __ptext62 168C                                __ptext54 258A  
                              __ptext46 1C8E                                __ptext38 159C  
                              __ptext71 1526                                __ptext63 2302  
                              __ptext55 2A96                                __ptext47 1EB2  
                              __ptext39 3F30                                __ptext80 14D8  
                              __ptext72 155E                                __ptext64 1736  
                              __ptext56 4FAE                                __ptext48 1774  
                              __ptext81 17F0                                __ptext73 1B70  
                              __ptext65 1984                                __ptext57 1626  
                              __ptext49 1CF0                                __ptext74 14EA  
                              __ptext66 1F2A                                __ptext58 1C2C  
                              __ptext83 14C6                                __ptext75 14BE  
                              __ptext67 1A66                                __ptext59 1E3C  
                              __ptext84 24E2                                __ptext76 2852  
                              __ptext68 14FC                                __ptext85 448A  
                              __ptext77 1658                                __ptext69 193A  
                              __ptext86 350E                                __ptext78 14B8  
                              __ptext87 1DC6                                __ptext79 1A18  
                              __ptext88 33E2                                __ptext89 1540  
              receiveSendEventCANAL@dlc 0080                receiveSendEventCANAL@crc 0081  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0073  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 1A18  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 018A                           __size_of_init 004A  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 4BDC                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0073                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 29C8                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 21D4  
                             printMDF@i 00C3                               printMDF@p 00C1  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0073                                atoi@sign 006A  
                           ??_findNodes 00C5                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0066                             ??_fifo_read 0066  
                              _vscpData 01E3           __size_of_readRegisterExtended 00E2  
                              main@argc 00DE                                main@argv 00E0  
                              _vscpSize 003E                      ??__ECANPointBuffer 0004  
                              _vscpType 003F                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A6                                _strnicmp 1CF0  
                      init_app_eeprom@i 0064             writeRegisterExtended@nodeid 00C1  
                         Interrupt@fail 0021                         _serialInputFifo 01DB  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 448A                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 0079               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B2                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007B                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0064  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BF  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 290A                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 14B6  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 4920  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0069  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 1540  
                  _vscp_restoreDefaults 14BE                            printGUID@buf 00C0  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 19CE                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0028                  ECANSendMessage@tempPtr 0089  
                           _printErrors 4920                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 32CE                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002A               readRegisterExtended@value 00BB  
              _sendVSCPModeCapabilities 279C                __size_of_ECANSendMessage 016E  
