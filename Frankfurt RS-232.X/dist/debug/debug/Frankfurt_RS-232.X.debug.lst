

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Oct 02 14:01:51 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006CB0                     __pmediumconst:
   136                           	opt stack 0
   137  006CB0                     _octpowers:
   138                           	opt stack 0
   139  006CB0  0001               	dw	1
   140  006CB2  0000               	dw	0
   141  006CB4  0008               	dw	8
   142  006CB6  0000               	dw	0
   143  006CB8  0040               	dw	64
   144  006CBA  0000               	dw	0
   145  006CBC  0200               	dw	512
   146  006CBE  0000               	dw	0
   147  006CC0  1000               	dw	4096
   148  006CC2  0000               	dw	0
   149  006CC4  8000               	dw	32768
   150  006CC6  0000               	dw	0
   151  006CC8  0000               	dw	0
   152  006CCA  0004               	dw	4
   153  006CCC  0000               	dw	0
   154  006CCE  0020               	dw	32
   155  006CD0  0000               	dw	0
   156  006CD2  0100               	dw	256
   157  006CD4  0000               	dw	0
   158  006CD6  0800               	dw	2048
   159  006CD8  0000               	dw	0
   160  006CDA  4000               	dw	16384
   161  006CDC  0000               	dw	0
   162  006CDE  0000               	dw	0
   163  006CE0                     __end_of_octpowers:
   164                           	opt stack 0
   165  006CE0                     _dpowers:
   166                           	opt stack 0
   167  006CE0  0001               	dw	1
   168  006CE2  0000               	dw	0
   169  006CE4  000A               	dw	10
   170  006CE6  0000               	dw	0
   171  006CE8  0064               	dw	100
   172  006CEA  0000               	dw	0
   173  006CEC  03E8               	dw	1000
   174  006CEE  0000               	dw	0
   175  006CF0  2710               	dw	10000
   176  006CF2  0000               	dw	0
   177  006CF4  86A0               	dw	34464
   178  006CF6  0001               	dw	1
   179  006CF8  4240               	dw	16960
   180  006CFA  000F               	dw	15
   181  006CFC  9680               	dw	38528
   182  006CFE  0098               	dw	152
   183  006D00  E100               	dw	57600
   184  006D02  05F5               	dw	1525
   185  006D04  CA00               	dw	51712
   186  006D06  3B9A               	dw	15258
   187  006D08                     __end_of_dpowers:
   188                           	opt stack 0
   189  006D08                     _hexpowers:
   190                           	opt stack 0
   191  006D08  0001               	dw	1
   192  006D0A  0000               	dw	0
   193  006D0C  0010               	dw	16
   194  006D0E  0000               	dw	0
   195  006D10  0100               	dw	256
   196  006D12  0000               	dw	0
   197  006D14  1000               	dw	4096
   198  006D16  0000               	dw	0
   199  006D18  0000               	dw	0
   200  006D1A  0001               	dw	1
   201  006D1C  0000               	dw	0
   202  006D1E  0010               	dw	16
   203  006D20  0000               	dw	0
   204  006D22  0100               	dw	256
   205  006D24  0000               	dw	0
   206  006D26  1000               	dw	4096
   207  006D28                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  006D28                     __stringdata:
   372                           	opt stack 0
   373  006D28                     STR_227:
   374  006D28  20                 	db	32
   375  006D29  20                 	db	32
   376  006D2A  20                 	db	32
   377  006D2B  20                 	db	32
   378  006D2C  20                 	db	32
   379  006D2D  20                 	db	32
   380  006D2E  20                 	db	32
   381  006D2F  20                 	db	32
   382  006D30  20                 	db	32
   383  006D31  46                 	db	70	;'F'
   384  006D32  6F                 	db	111	;'o'
   385  006D33  72                 	db	114	;'r'
   386  006D34  6D                 	db	109	;'m'
   387  006D35  61                 	db	97	;'a'
   388  006D36  74                 	db	116	;'t'
   389  006D37  3A                 	db	58	;':'
   390  006D38  20                 	db	32
   391  006D39  66                 	db	102	;'f'
   392  006D3A  69                 	db	105	;'i'
   393  006D3B  6C                 	db	108	;'l'
   394  006D3C  74                 	db	116	;'t'
   395  006D3D  65                 	db	101	;'e'
   396  006D3E  72                 	db	114	;'r'
   397  006D3F  20                 	db	32
   398  006D40  66                 	db	102	;'f'
   399  006D41  69                 	db	105	;'i'
   400  006D42  6C                 	db	108	;'l'
   401  006D43  74                 	db	116	;'t'
   402  006D44  65                 	db	101	;'e'
   403  006D45  72                 	db	114	;'r'
   404  006D46  6E                 	db	110	;'n'
   405  006D47  6F                 	db	111	;'o'
   406  006D48  2C                 	db	44
   407  006D49  70                 	db	112	;'p'
   408  006D4A  72                 	db	114	;'r'
   409  006D4B  69                 	db	105	;'i'
   410  006D4C  6F                 	db	111	;'o'
   411  006D4D  2C                 	db	44
   412  006D4E  63                 	db	99	;'c'
   413  006D4F  6C                 	db	108	;'l'
   414  006D50  61                 	db	97	;'a'
   415  006D51  73                 	db	115	;'s'
   416  006D52  73                 	db	115	;'s'
   417  006D53  2C                 	db	44
   418  006D54  74                 	db	116	;'t'
   419  006D55  79                 	db	121	;'y'
   420  006D56  70                 	db	112	;'p'
   421  006D57  65                 	db	101	;'e'
   422  006D58  2C                 	db	44
   423  006D59  6E                 	db	110	;'n'
   424  006D5A  6F                 	db	111	;'o'
   425  006D5B  64                 	db	100	;'d'
   426  006D5C  65                 	db	101	;'e'
   427  006D5D  69                 	db	105	;'i'
   428  006D5E  64                 	db	100	;'d'
   429  006D5F  20                 	db	32
   430  006D60  20                 	db	32
   431  006D61  28                 	db	40
   432  006D62  66                 	db	102	;'f'
   433  006D63  69                 	db	105	;'i'
   434  006D64  6C                 	db	108	;'l'
   435  006D65  74                 	db	116	;'t'
   436  006D66  65                 	db	101	;'e'
   437  006D67  72                 	db	114	;'r'
   438  006D68  6E                 	db	110	;'n'
   439  006D69  6F                 	db	111	;'o'
   440  006D6A  20                 	db	32
   441  006D6B  3D                 	db	61	;'='
   442  006D6C  20                 	db	32
   443  006D6D  30                 	db	48	;'0'
   444  006D6E  2D                 	db	45
   445  006D6F  31                 	db	49	;'1'
   446  006D70  35                 	db	53	;'5'
   447  006D71  29                 	db	41
   448  006D72  2E                 	db	46
   449  006D73  0D                 	db	13
   450  006D74  0A                 	db	10
   451  006D75  00                 	db	0
   452  006D76                     STR_225:
   453  006D76  49                 	db	73	;'I'
   454  006D77  4E                 	db	78	;'N'
   455  006D78  46                 	db	70	;'F'
   456  006D79  4F                 	db	79	;'O'
   457  006D7A  20                 	db	32
   458  006D7B  2D                 	db	45
   459  006D7C  20                 	db	32
   460  006D7D  47                 	db	71	;'G'
   461  006D7E  65                 	db	101	;'e'
   462  006D7F  74                 	db	116	;'t'
   463  006D80  20                 	db	32
   464  006D81  69                 	db	105	;'i'
   465  006D82  6E                 	db	110	;'n'
   466  006D83  66                 	db	102	;'f'
   467  006D84  6F                 	db	111	;'o'
   468  006D85  20                 	db	32
   469  006D86  61                 	db	97	;'a'
   470  006D87  62                 	db	98	;'b'
   471  006D88  6F                 	db	111	;'o'
   472  006D89  75                 	db	117	;'u'
   473  006D8A  74                 	db	116	;'t'
   474  006D8B  20                 	db	32
   475  006D8C  61                 	db	97	;'a'
   476  006D8D  6E                 	db	110	;'n'
   477  006D8E  20                 	db	32
   478  006D8F  65                 	db	101	;'e'
   479  006D90  78                 	db	120	;'x'
   480  006D91  69                 	db	105	;'i'
   481  006D92  73                 	db	115	;'s'
   482  006D93  74                 	db	116	;'t'
   483  006D94  65                 	db	101	;'e'
   484  006D95  6E                 	db	110	;'n'
   485  006D96  74                 	db	116	;'t'
   486  006D97  20                 	db	32
   487  006D98  6E                 	db	110	;'n'
   488  006D99  6F                 	db	111	;'o'
   489  006D9A  64                 	db	100	;'d'
   490  006D9B  65                 	db	101	;'e'
   491  006D9C  20                 	db	32
   492  006D9D  6F                 	db	111	;'o'
   493  006D9E  6E                 	db	110	;'n'
   494  006D9F  20                 	db	32
   495  006DA0  74                 	db	116	;'t'
   496  006DA1  68                 	db	104	;'h'
   497  006DA2  65                 	db	101	;'e'
   498  006DA3  20                 	db	32
   499  006DA4  62                 	db	98	;'b'
   500  006DA5  75                 	db	117	;'u'
   501  006DA6  73                 	db	115	;'s'
   502  006DA7  20                 	db	32
   503  006DA8  28                 	db	40
   504  006DA9  46                 	db	70	;'F'
   505  006DAA  6F                 	db	111	;'o'
   506  006DAB  72                 	db	114	;'r'
   507  006DAC  6D                 	db	109	;'m'
   508  006DAD  61                 	db	97	;'a'
   509  006DAE  74                 	db	116	;'t'
   510  006DAF  3A                 	db	58	;':'
   511  006DB0  20                 	db	32
   512  006DB1  69                 	db	105	;'i'
   513  006DB2  6E                 	db	110	;'n'
   514  006DB3  66                 	db	102	;'f'
   515  006DB4  6F                 	db	111	;'o'
   516  006DB5  20                 	db	32
   517  006DB6  6E                 	db	110	;'n'
   518  006DB7  69                 	db	105	;'i'
   519  006DB8  63                 	db	99	;'c'
   520  006DB9  6B                 	db	107	;'k'
   521  006DBA  6E                 	db	110	;'n'
   522  006DBB  61                 	db	97	;'a'
   523  006DBC  6D                 	db	109	;'m'
   524  006DBD  65                 	db	101	;'e'
   525  006DBE  29                 	db	41
   526  006DBF  2E                 	db	46
   527  006DC0  0D                 	db	13
   528  006DC1  0A                 	db	10
   529  006DC2  00                 	db	0
   530  006DC3                     STR_229:
   531  006DC3  20                 	db	32
   532  006DC4  20                 	db	32
   533  006DC5  20                 	db	32
   534  006DC6  20                 	db	32
   535  006DC7  20                 	db	32
   536  006DC8  20                 	db	32
   537  006DC9  20                 	db	32
   538  006DCA  46                 	db	70	;'F'
   539  006DCB  6F                 	db	111	;'o'
   540  006DCC  72                 	db	114	;'r'
   541  006DCD  6D                 	db	109	;'m'
   542  006DCE  61                 	db	97	;'a'
   543  006DCF  74                 	db	116	;'t'
   544  006DD0  3A                 	db	58	;':'
   545  006DD1  20                 	db	32
   546  006DD2  6D                 	db	109	;'m'
   547  006DD3  61                 	db	97	;'a'
   548  006DD4  73                 	db	115	;'s'
   549  006DD5  6B                 	db	107	;'k'
   550  006DD6  20                 	db	32
   551  006DD7  6D                 	db	109	;'m'
   552  006DD8  61                 	db	97	;'a'
   553  006DD9  73                 	db	115	;'s'
   554  006DDA  6B                 	db	107	;'k'
   555  006DDB  6E                 	db	110	;'n'
   556  006DDC  6F                 	db	111	;'o'
   557  006DDD  2C                 	db	44
   558  006DDE  70                 	db	112	;'p'
   559  006DDF  72                 	db	114	;'r'
   560  006DE0  69                 	db	105	;'i'
   561  006DE1  6F                 	db	111	;'o'
   562  006DE2  2C                 	db	44
   563  006DE3  63                 	db	99	;'c'
   564  006DE4  6C                 	db	108	;'l'
   565  006DE5  61                 	db	97	;'a'
   566  006DE6  73                 	db	115	;'s'
   567  006DE7  73                 	db	115	;'s'
   568  006DE8  2C                 	db	44
   569  006DE9  74                 	db	116	;'t'
   570  006DEA  79                 	db	121	;'y'
   571  006DEB  70                 	db	112	;'p'
   572  006DEC  65                 	db	101	;'e'
   573  006DED  2C                 	db	44
   574  006DEE  6E                 	db	110	;'n'
   575  006DEF  6F                 	db	111	;'o'
   576  006DF0  64                 	db	100	;'d'
   577  006DF1  65                 	db	101	;'e'
   578  006DF2  69                 	db	105	;'i'
   579  006DF3  64                 	db	100	;'d'
   580  006DF4  20                 	db	32
   581  006DF5  28                 	db	40
   582  006DF6  6D                 	db	109	;'m'
   583  006DF7  61                 	db	97	;'a'
   584  006DF8  73                 	db	115	;'s'
   585  006DF9  6B                 	db	107	;'k'
   586  006DFA  6E                 	db	110	;'n'
   587  006DFB  6F                 	db	111	;'o'
   588  006DFC  20                 	db	32
   589  006DFD  3D                 	db	61	;'='
   590  006DFE  20                 	db	32
   591  006DFF  30                 	db	48	;'0'
   592  006E00  20                 	db	32
   593  006E01  6F                 	db	111	;'o'
   594  006E02  72                 	db	114	;'r'
   595  006E03  20                 	db	32
   596  006E04  31                 	db	49	;'1'
   597  006E05  29                 	db	41
   598  006E06  2E                 	db	46
   599  006E07  0D                 	db	13
   600  006E08  0A                 	db	10
   601  006E09  00                 	db	0
   602  006E0A                     STR_223:
   603  006E0A  52                 	db	82	;'R'
   604  006E0B  52                 	db	82	;'R'
   605  006E0C  45                 	db	69	;'E'
   606  006E0D  47                 	db	71	;'G'
   607  006E0E  20                 	db	32
   608  006E0F  2D                 	db	45
   609  006E10  20                 	db	32
   610  006E11  52                 	db	82	;'R'
   611  006E12  65                 	db	101	;'e'
   612  006E13  61                 	db	97	;'a'
   613  006E14  64                 	db	100	;'d'
   614  006E15  20                 	db	32
   615  006E16  72                 	db	114	;'r'
   616  006E17  65                 	db	101	;'e'
   617  006E18  67                 	db	103	;'g'
   618  006E19  69                 	db	105	;'i'
   619  006E1A  73                 	db	115	;'s'
   620  006E1B  74                 	db	116	;'t'
   621  006E1C  65                 	db	101	;'e'
   622  006E1D  72                 	db	114	;'r'
   623  006E1E  28                 	db	40
   624  006E1F  73                 	db	115	;'s'
   625  006E20  29                 	db	41
   626  006E21  20                 	db	32
   627  006E22  6F                 	db	111	;'o'
   628  006E23  66                 	db	102	;'f'
   629  006E24  20                 	db	32
   630  006E25  6E                 	db	110	;'n'
   631  006E26  6F                 	db	111	;'o'
   632  006E27  64                 	db	100	;'d'
   633  006E28  65                 	db	101	;'e'
   634  006E29  20                 	db	32
   635  006E2A  28                 	db	40
   636  006E2B  46                 	db	70	;'F'
   637  006E2C  6F                 	db	111	;'o'
   638  006E2D  72                 	db	114	;'r'
   639  006E2E  6D                 	db	109	;'m'
   640  006E2F  61                 	db	97	;'a'
   641  006E30  74                 	db	116	;'t'
   642  006E31  3A                 	db	58	;':'
   643  006E32  20                 	db	32
   644  006E33  72                 	db	114	;'r'
   645  006E34  72                 	db	114	;'r'
   646  006E35  65                 	db	101	;'e'
   647  006E36  67                 	db	103	;'g'
   648  006E37  20                 	db	32
   649  006E38  5B                 	db	91	;'['
   650  006E39  70                 	db	112	;'p'
   651  006E3A  61                 	db	97	;'a'
   652  006E3B  67                 	db	103	;'g'
   653  006E3C  65                 	db	101	;'e'
   654  006E3D  3A                 	db	58	;':'
   655  006E3E  5D                 	db	93	;']'
   656  006E3F  72                 	db	114	;'r'
   657  006E40  65                 	db	101	;'e'
   658  006E41  67                 	db	103	;'g'
   659  006E42  20                 	db	32
   660  006E43  5B                 	db	91	;'['
   661  006E44  63                 	db	99	;'c'
   662  006E45  6F                 	db	111	;'o'
   663  006E46  75                 	db	117	;'u'
   664  006E47  6E                 	db	110	;'n'
   665  006E48  74                 	db	116	;'t'
   666  006E49  5D                 	db	93	;']'
   667  006E4A  29                 	db	41
   668  006E4B  2E                 	db	46
   669  006E4C  0D                 	db	13
   670  006E4D  0A                 	db	10
   671  006E4E  00                 	db	0
   672  006E4F                     STR_238:
   673  006E4F  2D                 	db	45
   674  006E50  2D                 	db	45
   675  006E51  2D                 	db	45
   676  006E52  2D                 	db	45
   677  006E53  2D                 	db	45
   678  006E54  2D                 	db	45
   679  006E55  2D                 	db	45
   680  006E56  2D                 	db	45
   681  006E57  2D                 	db	45
   682  006E58  2D                 	db	45
   683  006E59  2D                 	db	45
   684  006E5A  2D                 	db	45
   685  006E5B  2D                 	db	45
   686  006E5C  2D                 	db	45
   687  006E5D  2D                 	db	45
   688  006E5E  2D                 	db	45
   689  006E5F  2D                 	db	45
   690  006E60  2D                 	db	45
   691  006E61  2D                 	db	45
   692  006E62  2D                 	db	45
   693  006E63  2D                 	db	45
   694  006E64  2D                 	db	45
   695  006E65  2D                 	db	45
   696  006E66  2D                 	db	45
   697  006E67  2D                 	db	45
   698  006E68  2D                 	db	45
   699  006E69  2D                 	db	45
   700  006E6A  2D                 	db	45
   701  006E6B  2D                 	db	45
   702  006E6C  2D                 	db	45
   703  006E6D  2D                 	db	45
   704  006E6E  2D                 	db	45
   705  006E6F  2D                 	db	45
   706  006E70  2D                 	db	45
   707  006E71  2D                 	db	45
   708  006E72  2D                 	db	45
   709  006E73  2D                 	db	45
   710  006E74  2D                 	db	45
   711  006E75  2D                 	db	45
   712  006E76  2D                 	db	45
   713  006E77  2D                 	db	45
   714  006E78  2D                 	db	45
   715  006E79  2D                 	db	45
   716  006E7A  2D                 	db	45
   717  006E7B  2D                 	db	45
   718  006E7C  2D                 	db	45
   719  006E7D  2D                 	db	45
   720  006E7E  2D                 	db	45
   721  006E7F  2D                 	db	45
   722  006E80  2D                 	db	45
   723  006E81  2D                 	db	45
   724  006E82  2D                 	db	45
   725  006E83  2D                 	db	45
   726  006E84  2D                 	db	45
   727  006E85  2D                 	db	45
   728  006E86  2D                 	db	45
   729  006E87  2D                 	db	45
   730  006E88  2D                 	db	45
   731  006E89  2D                 	db	45
   732  006E8A  2D                 	db	45
   733  006E8B  2D                 	db	45
   734  006E8C  2D                 	db	45
   735  006E8D  2D                 	db	45
   736  006E8E  2D                 	db	45
   737  006E8F  0D                 	db	13
   738  006E90  0A                 	db	10
   739  006E91  00                 	db	0
   740  006E92                     STR_233:
   741  006E92  20                 	db	32
   742  006E93  20                 	db	32
   743  006E94  20                 	db	32
   744  006E95  20                 	db	32
   745  006E96  52                 	db	82	;'R'
   746  006E97  57                 	db	87	;'W'
   747  006E98  54                 	db	84	;'T'
   748  006E99  49                 	db	73	;'I'
   749  006E9A  4D                 	db	77	;'M'
   750  006E9B  45                 	db	69	;'E'
   751  006E9C  4F                 	db	79	;'O'
   752  006E9D  55                 	db	85	;'U'
   753  006E9E  54                 	db	84	;'T'
   754  006E9F  20                 	db	32
   755  006EA0  2D                 	db	45
   756  006EA1  20                 	db	32
   757  006EA2  53                 	db	83	;'S'
   758  006EA3  65                 	db	101	;'e'
   759  006EA4  74                 	db	116	;'t'
   760  006EA5  20                 	db	32
   761  006EA6  72                 	db	114	;'r'
   762  006EA7  65                 	db	101	;'e'
   763  006EA8  67                 	db	103	;'g'
   764  006EA9  69                 	db	105	;'i'
   765  006EAA  73                 	db	115	;'s'
   766  006EAB  74                 	db	116	;'t'
   767  006EAC  65                 	db	101	;'e'
   768  006EAD  72                 	db	114	;'r'
   769  006EAE  20                 	db	32
   770  006EAF  72                 	db	114	;'r'
   771  006EB0  65                 	db	101	;'e'
   772  006EB1  61                 	db	97	;'a'
   773  006EB2  64                 	db	100	;'d'
   774  006EB3  2F                 	db	47
   775  006EB4  77                 	db	119	;'w'
   776  006EB5  72                 	db	114	;'r'
   777  006EB6  69                 	db	105	;'i'
   778  006EB7  74                 	db	116	;'t'
   779  006EB8  65                 	db	101	;'e'
   780  006EB9  20                 	db	32
   781  006EBA  74                 	db	116	;'t'
   782  006EBB  69                 	db	105	;'i'
   783  006EBC  6D                 	db	109	;'m'
   784  006EBD  65                 	db	101	;'e'
   785  006EBE  6F                 	db	111	;'o'
   786  006EBF  75                 	db	117	;'u'
   787  006EC0  74                 	db	116	;'t'
   788  006EC1  2E                 	db	46
   789  006EC2  20                 	db	32
   790  006EC3  44                 	db	68	;'D'
   791  006EC4  65                 	db	101	;'e'
   792  006EC5  66                 	db	102	;'f'
   793  006EC6  61                 	db	97	;'a'
   794  006EC7  75                 	db	117	;'u'
   795  006EC8  6C                 	db	108	;'l'
   796  006EC9  74                 	db	116	;'t'
   797  006ECA  3D                 	db	61	;'='
   798  006ECB  31                 	db	49	;'1'
   799  006ECC  30                 	db	48	;'0'
   800  006ECD  20                 	db	32
   801  006ECE  6D                 	db	109	;'m'
   802  006ECF  73                 	db	115	;'s'
   803  006ED0  20                 	db	32
   804  006ED1  2E                 	db	46
   805  006ED2  0D                 	db	13
   806  006ED3  0A                 	db	10
   807  006ED4  00                 	db	0
   808  006ED5                     STR_224:
   809  006ED5  57                 	db	87	;'W'
   810  006ED6  52                 	db	82	;'R'
   811  006ED7  45                 	db	69	;'E'
   812  006ED8  47                 	db	71	;'G'
   813  006ED9  20                 	db	32
   814  006EDA  2D                 	db	45
   815  006EDB  20                 	db	32
   816  006EDC  57                 	db	87	;'W'
   817  006EDD  72                 	db	114	;'r'
   818  006EDE  69                 	db	105	;'i'
   819  006EDF  74                 	db	116	;'t'
   820  006EE0  65                 	db	101	;'e'
   821  006EE1  20                 	db	32
   822  006EE2  72                 	db	114	;'r'
   823  006EE3  65                 	db	101	;'e'
   824  006EE4  67                 	db	103	;'g'
   825  006EE5  69                 	db	105	;'i'
   826  006EE6  73                 	db	115	;'s'
   827  006EE7  74                 	db	116	;'t'
   828  006EE8  65                 	db	101	;'e'
   829  006EE9  72                 	db	114	;'r'
   830  006EEA  20                 	db	32
   831  006EEB  6F                 	db	111	;'o'
   832  006EEC  66                 	db	102	;'f'
   833  006EED  20                 	db	32
   834  006EEE  6E                 	db	110	;'n'
   835  006EEF  6F                 	db	111	;'o'
   836  006EF0  64                 	db	100	;'d'
   837  006EF1  65                 	db	101	;'e'
   838  006EF2  20                 	db	32
   839  006EF3  28                 	db	40
   840  006EF4  46                 	db	70	;'F'
   841  006EF5  6F                 	db	111	;'o'
   842  006EF6  72                 	db	114	;'r'
   843  006EF7  6D                 	db	109	;'m'
   844  006EF8  61                 	db	97	;'a'
   845  006EF9  74                 	db	116	;'t'
   846  006EFA  3A                 	db	58	;':'
   847  006EFB  20                 	db	32
   848  006EFC  77                 	db	119	;'w'
   849  006EFD  72                 	db	114	;'r'
   850  006EFE  65                 	db	101	;'e'
   851  006EFF  67                 	db	103	;'g'
   852  006F00  20                 	db	32
   853  006F01  5B                 	db	91	;'['
   854  006F02  70                 	db	112	;'p'
   855  006F03  61                 	db	97	;'a'
   856  006F04  67                 	db	103	;'g'
   857  006F05  65                 	db	101	;'e'
   858  006F06  3A                 	db	58	;':'
   859  006F07  5D                 	db	93	;']'
   860  006F08  72                 	db	114	;'r'
   861  006F09  65                 	db	101	;'e'
   862  006F0A  67                 	db	103	;'g'
   863  006F0B  20                 	db	32
   864  006F0C  63                 	db	99	;'c'
   865  006F0D  6F                 	db	111	;'o'
   866  006F0E  6E                 	db	110	;'n'
   867  006F0F  74                 	db	116	;'t'
   868  006F10  65                 	db	101	;'e'
   869  006F11  6E                 	db	110	;'n'
   870  006F12  74                 	db	116	;'t'
   871  006F13  29                 	db	41
   872  006F14  2E                 	db	46
   873  006F15  0D                 	db	13
   874  006F16  0A                 	db	10
   875  006F17  00                 	db	0
   876  006F18                     STR_89:
   877  006F18  2D                 	db	45
   878  006F19  45                 	db	69	;'E'
   879  006F1A  52                 	db	82	;'R'
   880  006F1B  52                 	db	82	;'R'
   881  006F1C  4F                 	db	79	;'O'
   882  006F1D  52                 	db	82	;'R'
   883  006F1E  20                 	db	32
   884  006F1F  2D                 	db	45
   885  006F20  20                 	db	32
   886  006F21  46                 	db	70	;'F'
   887  006F22  69                 	db	105	;'i'
   888  006F23  6C                 	db	108	;'l'
   889  006F24  74                 	db	116	;'t'
   890  006F25  65                 	db	101	;'e'
   891  006F26  72                 	db	114	;'r'
   892  006F27  20                 	db	32
   893  006F28  6E                 	db	110	;'n'
   894  006F29  75                 	db	117	;'u'
   895  006F2A  6D                 	db	109	;'m'
   896  006F2B  62                 	db	98	;'b'
   897  006F2C  65                 	db	101	;'e'
   898  006F2D  72                 	db	114	;'r'
   899  006F2E  20                 	db	32
   900  006F2F  63                 	db	99	;'c'
   901  006F30  61                 	db	97	;'a'
   902  006F31  6E                 	db	110	;'n'
   903  006F32  20                 	db	32
   904  006F33  6F                 	db	111	;'o'
   905  006F34  6E                 	db	110	;'n'
   906  006F35  6C                 	db	108	;'l'
   907  006F36  79                 	db	121	;'y'
   908  006F37  20                 	db	32
   909  006F38  62                 	db	98	;'b'
   910  006F39  65                 	db	101	;'e'
   911  006F3A  20                 	db	32
   912  006F3B  73                 	db	115	;'s'
   913  006F3C  65                 	db	101	;'e'
   914  006F3D  74                 	db	116	;'t'
   915  006F3E  20                 	db	32
   916  006F3F  74                 	db	116	;'t'
   917  006F40  6F                 	db	111	;'o'
   918  006F41  20                 	db	32
   919  006F42  61                 	db	97	;'a'
   920  006F43  20                 	db	32
   921  006F44  76                 	db	118	;'v'
   922  006F45  61                 	db	97	;'a'
   923  006F46  6C                 	db	108	;'l'
   924  006F47  75                 	db	117	;'u'
   925  006F48  65                 	db	101	;'e'
   926  006F49  20                 	db	32
   927  006F4A  62                 	db	98	;'b'
   928  006F4B  65                 	db	101	;'e'
   929  006F4C  74                 	db	116	;'t'
   930  006F4D  77                 	db	119	;'w'
   931  006F4E  65                 	db	101	;'e'
   932  006F4F  65                 	db	101	;'e'
   933  006F50  6E                 	db	110	;'n'
   934  006F51  20                 	db	32
   935  006F52  30                 	db	48	;'0'
   936  006F53  2D                 	db	45
   937  006F54  31                 	db	49	;'1'
   938  006F55  35                 	db	53	;'5'
   939  006F56  2E                 	db	46
   940  006F57  0D                 	db	13
   941  006F58  0A                 	db	10
   942  006F59  00                 	db	0
   943  006F5A                     STR_236:
   944  006F5A  20                 	db	32
   945  006F5B  20                 	db	32
   946  006F5C  20                 	db	32
   947  006F5D  20                 	db	32
   948  006F5E  4D                 	db	77	;'M'
   949  006F5F  4F                 	db	79	;'O'
   950  006F60  44                 	db	68	;'D'
   951  006F61  45                 	db	69	;'E'
   952  006F62  20                 	db	32
   953  006F63  2D                 	db	45
   954  006F64  20                 	db	32
   955  006F65  53                 	db	83	;'S'
   956  006F66  65                 	db	101	;'e'
   957  006F67  74                 	db	116	;'t'
   958  006F68  20                 	db	32
   959  006F69  61                 	db	97	;'a'
   960  006F6A  64                 	db	100	;'d'
   961  006F6B  61                 	db	97	;'a'
   962  006F6C  70                 	db	112	;'p'
   963  006F6D  74                 	db	116	;'t'
   964  006F6E  65                 	db	101	;'e'
   965  006F6F  72                 	db	114	;'r'
   966  006F70  20                 	db	32
   967  006F71  6D                 	db	109	;'m'
   968  006F72  6F                 	db	111	;'o'
   969  006F73  64                 	db	100	;'d'
   970  006F74  65                 	db	101	;'e'
   971  006F75  20                 	db	32
   972  006F76  74                 	db	116	;'t'
   973  006F77  68                 	db	104	;'h'
   974  006F78  61                 	db	97	;'a'
   975  006F79  74                 	db	116	;'t'
   976  006F7A  20                 	db	32
   977  006F7B  73                 	db	115	;'s'
   978  006F7C  68                 	db	104	;'h'
   979  006F7D  6F                 	db	111	;'o'
   980  006F7E  75                 	db	117	;'u'
   981  006F7F  6C                 	db	108	;'l'
   982  006F80  64                 	db	100	;'d'
   983  006F81  20                 	db	32
   984  006F82  62                 	db	98	;'b'
   985  006F83  65                 	db	101	;'e'
   986  006F84  20                 	db	32
   987  006F85  75                 	db	117	;'u'
   988  006F86  73                 	db	115	;'s'
   989  006F87  65                 	db	101	;'e'
   990  006F88  64                 	db	100	;'d'
   991  006F89  20                 	db	32
   992  006F8A  6F                 	db	111	;'o'
   993  006F8B  6E                 	db	110	;'n'
   994  006F8C  20                 	db	32
   995  006F8D  73                 	db	115	;'s'
   996  006F8E  74                 	db	116	;'t'
   997  006F8F  61                 	db	97	;'a'
   998  006F90  72                 	db	114	;'r'
   999  006F91  74                 	db	116	;'t'
  1000  006F92  75                 	db	117	;'u'
  1001  006F93  70                 	db	112	;'p'
  1002  006F94  2E                 	db	46
  1003  006F95  0D                 	db	13
  1004  006F96  0A                 	db	10
  1005  006F97  00                 	db	0
  1006  006F98                     STR_196:
  1007  006F98  54                 	db	84	;'T'
  1008  006F99  72                 	db	114	;'r'
  1009  006F9A  61                 	db	97	;'a'
  1010  006F9B  6E                 	db	110	;'n'
  1011  006F9C  73                 	db	115	;'s'
  1012  006F9D  6D                 	db	109	;'m'
  1013  006F9E  69                 	db	105	;'i'
  1014  006F9F  74                 	db	116	;'t'
  1015  006FA0  74                 	db	116	;'t'
  1016  006FA1  65                 	db	101	;'e'
  1017  006FA2  72                 	db	114	;'r'
  1018  006FA3  20                 	db	32
  1019  006FA4  69                 	db	105	;'i'
  1020  006FA5  6E                 	db	110	;'n'
  1021  006FA6  20                 	db	32
  1022  006FA7  45                 	db	69	;'E'
  1023  006FA8  72                 	db	114	;'r'
  1024  006FA9  72                 	db	114	;'r'
  1025  006FAA  6F                 	db	111	;'o'
  1026  006FAB  72                 	db	114	;'r'
  1027  006FAC  20                 	db	32
  1028  006FAD  53                 	db	83	;'S'
  1029  006FAE  74                 	db	116	;'t'
  1030  006FAF  61                 	db	97	;'a'
  1031  006FB0  74                 	db	116	;'t'
  1032  006FB1  65                 	db	101	;'e'
  1033  006FB2  20                 	db	32
  1034  006FB3  57                 	db	87	;'W'
  1035  006FB4  61                 	db	97	;'a'
  1036  006FB5  72                 	db	114	;'r'
  1037  006FB6  6E                 	db	110	;'n'
  1038  006FB7  69                 	db	105	;'i'
  1039  006FB8  6E                 	db	110	;'n'
  1040  006FB9  67                 	db	103	;'g'
  1041  006FBA  20                 	db	32
  1042  006FBB  28                 	db	40
  1043  006FBC  31                 	db	49	;'1'
  1044  006FBD  32                 	db	50	;'2'
  1045  006FBE  38                 	db	56	;'8'
  1046  006FBF  20                 	db	32
  1047  006FC0  3E                 	db	62	;'>'
  1048  006FC1  20                 	db	32
  1049  006FC2  54                 	db	84	;'T'
  1050  006FC3  45                 	db	69	;'E'
  1051  006FC4  52                 	db	82	;'R'
  1052  006FC5  52                 	db	82	;'R'
  1053  006FC6  43                 	db	67	;'C'
  1054  006FC7  4E                 	db	78	;'N'
  1055  006FC8  54                 	db	84	;'T'
  1056  006FC9  20                 	db	32
  1057  006FCA  3F                 	db	63	;'?'
  1058  006FCB  20                 	db	32
  1059  006FCC  39                 	db	57	;'9'
  1060  006FCD  36                 	db	54	;'6'
  1061  006FCE  29                 	db	41
  1062  006FCF  0D                 	db	13
  1063  006FD0  0A                 	db	10
  1064  006FD1  00                 	db	0
  1065  006FD2                     STR_2:
  1066  006FD2  43                 	db	67	;'C'
  1067  006FD3  6F                 	db	111	;'o'
  1068  006FD4  70                 	db	112	;'p'
  1069  006FD5  79                 	db	121	;'y'
  1070  006FD6  72                 	db	114	;'r'
  1071  006FD7  69                 	db	105	;'i'
  1072  006FD8  67                 	db	103	;'g'
  1073  006FD9  68                 	db	104	;'h'
  1074  006FDA  74                 	db	116	;'t'
  1075  006FDB  20                 	db	32
  1076  006FDC  28                 	db	40
  1077  006FDD  43                 	db	67	;'C'
  1078  006FDE  29                 	db	41
  1079  006FDF  20                 	db	32
  1080  006FE0  32                 	db	50	;'2'
  1081  006FE1  30                 	db	48	;'0'
  1082  006FE2  31                 	db	49	;'1'
  1083  006FE3  34                 	db	52	;'4'
  1084  006FE4  2D                 	db	45
  1085  006FE5  32                 	db	50	;'2'
  1086  006FE6  30                 	db	48	;'0'
  1087  006FE7  31                 	db	49	;'1'
  1088  006FE8  35                 	db	53	;'5'
  1089  006FE9  20                 	db	32
  1090  006FEA  50                 	db	80	;'P'
  1091  006FEB  61                 	db	97	;'a'
  1092  006FEC  72                 	db	114	;'r'
  1093  006FED  61                 	db	97	;'a'
  1094  006FEE  64                 	db	100	;'d'
  1095  006FEF  69                 	db	105	;'i'
  1096  006FF0  73                 	db	115	;'s'
  1097  006FF1  65                 	db	101	;'e'
  1098  006FF2  20                 	db	32
  1099  006FF3  6F                 	db	111	;'o'
  1100  006FF4  66                 	db	102	;'f'
  1101  006FF5  20                 	db	32
  1102  006FF6  74                 	db	116	;'t'
  1103  006FF7  68                 	db	104	;'h'
  1104  006FF8  65                 	db	101	;'e'
  1105  006FF9  20                 	db	32
  1106  006FFA  46                 	db	70	;'F'
  1107  006FFB  72                 	db	114	;'r'
  1108  006FFC  6F                 	db	111	;'o'
  1109  006FFD  67                 	db	103	;'g'
  1110  006FFE  20                 	db	32
  1111  006FFF  41                 	db	65	;'A'
  1112  007000  42                 	db	66	;'B'
  1113  007001  2C                 	db	44
  1114  007002  20                 	db	32
  1115  007003  53                 	db	83	;'S'
  1116  007004  77                 	db	119	;'w'
  1117  007005  65                 	db	101	;'e'
  1118  007006  64                 	db	100	;'d'
  1119  007007  65                 	db	101	;'e'
  1120  007008  6E                 	db	110	;'n'
  1121  007009  0D                 	db	13
  1122  00700A  0A                 	db	10
  1123  00700B  00                 	db	0
  1124  00700C                     STR_198:
  1125  00700C  54                 	db	84	;'T'
  1126  00700D  72                 	db	114	;'r'
  1127  00700E  61                 	db	97	;'a'
  1128  00700F  6E                 	db	110	;'n'
  1129  007010  73                 	db	115	;'s'
  1130  007011  6D                 	db	109	;'m'
  1131  007012  69                 	db	105	;'i'
  1132  007013  74                 	db	116	;'t'
  1133  007014  74                 	db	116	;'t'
  1134  007015  65                 	db	101	;'e'
  1135  007016  72                 	db	114	;'r'
  1136  007017  20                 	db	32
  1137  007018  69                 	db	105	;'i'
  1138  007019  6E                 	db	110	;'n'
  1139  00701A  20                 	db	32
  1140  00701B  45                 	db	69	;'E'
  1141  00701C  72                 	db	114	;'r'
  1142  00701D  72                 	db	114	;'r'
  1143  00701E  6F                 	db	111	;'o'
  1144  00701F  72                 	db	114	;'r'
  1145  007020  20                 	db	32
  1146  007021  53                 	db	83	;'S'
  1147  007022  74                 	db	116	;'t'
  1148  007023  61                 	db	97	;'a'
  1149  007024  74                 	db	116	;'t'
  1150  007025  65                 	db	101	;'e'
  1151  007026  20                 	db	32
  1152  007027  42                 	db	66	;'B'
  1153  007028  75                 	db	117	;'u'
  1154  007029  73                 	db	115	;'s'
  1155  00702A  20                 	db	32
  1156  00702B  50                 	db	80	;'P'
  1157  00702C  61                 	db	97	;'a'
  1158  00702D  73                 	db	115	;'s'
  1159  00702E  73                 	db	115	;'s'
  1160  00702F  69                 	db	105	;'i'
  1161  007030  76                 	db	118	;'v'
  1162  007031  65                 	db	101	;'e'
  1163  007032  20                 	db	32
  1164  007033  28                 	db	40
  1165  007034  54                 	db	84	;'T'
  1166  007035  45                 	db	69	;'E'
  1167  007036  52                 	db	82	;'R'
  1168  007037  52                 	db	82	;'R'
  1169  007038  43                 	db	67	;'C'
  1170  007039  4E                 	db	78	;'N'
  1171  00703A  54                 	db	84	;'T'
  1172  00703B  20                 	db	32
  1173  00703C  3F                 	db	63	;'?'
  1174  00703D  20                 	db	32
  1175  00703E  31                 	db	49	;'1'
  1176  00703F  32                 	db	50	;'2'
  1177  007040  38                 	db	56	;'8'
  1178  007041  29                 	db	41
  1179  007042  0D                 	db	13
  1180  007043  0A                 	db	10
  1181  007044  00                 	db	0
  1182  007045                     STR_217:
  1183  007045  20                 	db	32
  1184  007046  20                 	db	32
  1185  007047  20                 	db	32
  1186  007048  20                 	db	32
  1187  007049  20                 	db	32
  1188  00704A  46                 	db	70	;'F'
  1189  00704B  6F                 	db	111	;'o'
  1190  00704C  72                 	db	114	;'r'
  1191  00704D  6D                 	db	109	;'m'
  1192  00704E  61                 	db	97	;'a'
  1193  00704F  74                 	db	116	;'t'
  1194  007050  3A                 	db	58	;':'
  1195  007051  20                 	db	32
  1196  007052  70                 	db	112	;'p'
  1197  007053  72                 	db	114	;'r'
  1198  007054  69                 	db	105	;'i'
  1199  007055  6F                 	db	111	;'o'
  1200  007056  72                 	db	114	;'r'
  1201  007057  69                 	db	105	;'i'
  1202  007058  74                 	db	116	;'t'
  1203  007059  79                 	db	121	;'y'
  1204  00705A  2C                 	db	44
  1205  00705B  63                 	db	99	;'c'
  1206  00705C  6C                 	db	108	;'l'
  1207  00705D  61                 	db	97	;'a'
  1208  00705E  73                 	db	115	;'s'
  1209  00705F  73                 	db	115	;'s'
  1210  007060  2C                 	db	44
  1211  007061  74                 	db	116	;'t'
  1212  007062  79                 	db	121	;'y'
  1213  007063  70                 	db	112	;'p'
  1214  007064  65                 	db	101	;'e'
  1215  007065  2C                 	db	44
  1216  007066  6E                 	db	110	;'n'
  1217  007067  6F                 	db	111	;'o'
  1218  007068  64                 	db	100	;'d'
  1219  007069  65                 	db	101	;'e'
  1220  00706A  69                 	db	105	;'i'
  1221  00706B  64                 	db	100	;'d'
  1222  00706C  2C                 	db	44
  1223  00706D  63                 	db	99	;'c'
  1224  00706E  6F                 	db	111	;'o'
  1225  00706F  75                 	db	117	;'u'
  1226  007070  6E                 	db	110	;'n'
  1227  007071  74                 	db	116	;'t'
  1228  007072  2C                 	db	44
  1229  007073  64                 	db	100	;'d'
  1230  007074  61                 	db	97	;'a'
  1231  007075  74                 	db	116	;'t'
  1232  007076  61                 	db	97	;'a'
  1233  007077  2C                 	db	44
  1234  007078  2C                 	db	44
  1235  007079  2C                 	db	44
  1236  00707A  0D                 	db	13
  1237  00707B  0A                 	db	10
  1238  00707C  00                 	db	0
  1239  00707D                     STR_203:
  1240  00707D  52                 	db	82	;'R'
  1241  00707E  65                 	db	101	;'e'
  1242  00707F  63                 	db	99	;'c'
  1243  007080  65                 	db	101	;'e'
  1244  007081  69                 	db	105	;'i'
  1245  007082  76                 	db	118	;'v'
  1246  007083  65                 	db	101	;'e'
  1247  007084  72                 	db	114	;'r'
  1248  007085  20                 	db	32
  1249  007086  69                 	db	105	;'i'
  1250  007087  6E                 	db	110	;'n'
  1251  007088  20                 	db	32
  1252  007089  45                 	db	69	;'E'
  1253  00708A  72                 	db	114	;'r'
  1254  00708B  72                 	db	114	;'r'
  1255  00708C  6F                 	db	111	;'o'
  1256  00708D  72                 	db	114	;'r'
  1257  00708E  20                 	db	32
  1258  00708F  53                 	db	83	;'S'
  1259  007090  74                 	db	116	;'t'
  1260  007091  61                 	db	97	;'a'
  1261  007092  74                 	db	116	;'t'
  1262  007093  65                 	db	101	;'e'
  1263  007094  20                 	db	32
  1264  007095  57                 	db	87	;'W'
  1265  007096  61                 	db	97	;'a'
  1266  007097  72                 	db	114	;'r'
  1267  007098  6E                 	db	110	;'n'
  1268  007099  69                 	db	105	;'i'
  1269  00709A  6E                 	db	110	;'n'
  1270  00709B  67                 	db	103	;'g'
  1271  00709C  20                 	db	32
  1272  00709D  28                 	db	40
  1273  00709E  31                 	db	49	;'1'
  1274  00709F  32                 	db	50	;'2'
  1275  0070A0  38                 	db	56	;'8'
  1276  0070A1  20                 	db	32
  1277  0070A2  3E                 	db	62	;'>'
  1278  0070A3  20                 	db	32
  1279  0070A4  52                 	db	82	;'R'
  1280  0070A5  45                 	db	69	;'E'
  1281  0070A6  52                 	db	82	;'R'
  1282  0070A7  52                 	db	82	;'R'
  1283  0070A8  43                 	db	67	;'C'
  1284  0070A9  4E                 	db	78	;'N'
  1285  0070AA  54                 	db	84	;'T'
  1286  0070AB  20                 	db	32
  1287  0070AC  3F                 	db	63	;'?'
  1288  0070AD  20                 	db	32
  1289  0070AE  39                 	db	57	;'9'
  1290  0070AF  36                 	db	54	;'6'
  1291  0070B0  29                 	db	41
  1292  0070B1  0D                 	db	13
  1293  0070B2  0A                 	db	10
  1294  0070B3  00                 	db	0
  1295  0070B4                     STR_235:
  1296  0070B4  20                 	db	32
  1297  0070B5  20                 	db	32
  1298  0070B6  20                 	db	32
  1299  0070B7  20                 	db	32
  1300  0070B8  53                 	db	83	;'S'
  1301  0070B9  54                 	db	84	;'T'
  1302  0070BA  41                 	db	65	;'A'
  1303  0070BB  52                 	db	82	;'R'
  1304  0070BC  54                 	db	84	;'T'
  1305  0070BD  49                 	db	73	;'I'
  1306  0070BE  46                 	db	70	;'F'
  1307  0070BF  20                 	db	32
  1308  0070C0  2D                 	db	45
  1309  0070C1  20                 	db	32
  1310  0070C2  53                 	db	83	;'S'
  1311  0070C3  65                 	db	101	;'e'
  1312  0070C4  74                 	db	116	;'t'
  1313  0070C5  20                 	db	32
  1314  0070C6  69                 	db	105	;'i'
  1315  0070C7  6E                 	db	110	;'n'
  1316  0070C8  74                 	db	116	;'t'
  1317  0070C9  65                 	db	101	;'e'
  1318  0070CA  72                 	db	114	;'r'
  1319  0070CB  66                 	db	102	;'f'
  1320  0070CC  61                 	db	97	;'a'
  1321  0070CD  63                 	db	99	;'c'
  1322  0070CE  65                 	db	101	;'e'
  1323  0070CF  20                 	db	32
  1324  0070D0  73                 	db	115	;'s'
  1325  0070D1  74                 	db	116	;'t'
  1326  0070D2  61                 	db	97	;'a'
  1327  0070D3  74                 	db	116	;'t'
  1328  0070D4  65                 	db	101	;'e'
  1329  0070D5  20                 	db	32
  1330  0070D6  74                 	db	116	;'t'
  1331  0070D7  6F                 	db	111	;'o'
  1332  0070D8  20                 	db	32
  1333  0070D9  75                 	db	117	;'u'
  1334  0070DA  73                 	db	115	;'s'
  1335  0070DB  65                 	db	101	;'e'
  1336  0070DC  20                 	db	32
  1337  0070DD  6F                 	db	111	;'o'
  1338  0070DE  6E                 	db	110	;'n'
  1339  0070DF  20                 	db	32
  1340  0070E0  73                 	db	115	;'s'
  1341  0070E1  74                 	db	116	;'t'
  1342  0070E2  61                 	db	97	;'a'
  1343  0070E3  72                 	db	114	;'r'
  1344  0070E4  74                 	db	116	;'t'
  1345  0070E5  75                 	db	117	;'u'
  1346  0070E6  70                 	db	112	;'p'
  1347  0070E7  2E                 	db	46
  1348  0070E8  0D                 	db	13
  1349  0070E9  0A                 	db	10
  1350  0070EA  00                 	db	0
  1351  0070EB                     STR_4:
  1352  0070EB  50                 	db	80	;'P'
  1353  0070EC  72                 	db	114	;'r'
  1354  0070ED  65                 	db	101	;'e'
  1355  0070EE  73                 	db	115	;'s'
  1356  0070EF  73                 	db	115	;'s'
  1357  0070F0  20                 	db	32
  1358  0070F1  27                 	db	39
  1359  0070F2  76                 	db	118	;'v'
  1360  0070F3  27                 	db	39
  1361  0070F4  20                 	db	32
  1362  0070F5  77                 	db	119	;'w'
  1363  0070F6  69                 	db	105	;'i'
  1364  0070F7  74                 	db	116	;'t'
  1365  0070F8  68                 	db	104	;'h'
  1366  0070F9  69                 	db	105	;'i'
  1367  0070FA  6E                 	db	110	;'n'
  1368  0070FB  20                 	db	32
  1369  0070FC  74                 	db	116	;'t'
  1370  0070FD  68                 	db	104	;'h'
  1371  0070FE  72                 	db	114	;'r'
  1372  0070FF  65                 	db	101	;'e'
  1373  007100  65                 	db	101	;'e'
  1374  007101  20                 	db	32
  1375  007102  73                 	db	115	;'s'
  1376  007103  65                 	db	101	;'e'
  1377  007104  63                 	db	99	;'c'
  1378  007105  6F                 	db	111	;'o'
  1379  007106  6E                 	db	110	;'n'
  1380  007107  64                 	db	100	;'d'
  1381  007108  73                 	db	115	;'s'
  1382  007109  20                 	db	32
  1383  00710A  74                 	db	116	;'t'
  1384  00710B  6F                 	db	111	;'o'
  1385  00710C  20                 	db	32
  1386  00710D  65                 	db	101	;'e'
  1387  00710E  6E                 	db	110	;'n'
  1388  00710F  74                 	db	116	;'t'
  1389  007110  65                 	db	101	;'e'
  1390  007111  72                 	db	114	;'r'
  1391  007112  20                 	db	32
  1392  007113  76                 	db	118	;'v'
  1393  007114  65                 	db	101	;'e'
  1394  007115  72                 	db	114	;'r'
  1395  007116  62                 	db	98	;'b'
  1396  007117  6F                 	db	111	;'o'
  1397  007118  73                 	db	115	;'s'
  1398  007119  65                 	db	101	;'e'
  1399  00711A  20                 	db	32
  1400  00711B  6D                 	db	109	;'m'
  1401  00711C  6F                 	db	111	;'o'
  1402  00711D  64                 	db	100	;'d'
  1403  00711E  65                 	db	101	;'e'
  1404  00711F  0D                 	db	13
  1405  007120  0A                 	db	10
  1406  007121  00                 	db	0
  1407  007122                     STR_204:
  1408  007122  52                 	db	82	;'R'
  1409  007123  65                 	db	101	;'e'
  1410  007124  63                 	db	99	;'c'
  1411  007125  65                 	db	101	;'e'
  1412  007126  69                 	db	105	;'i'
  1413  007127  76                 	db	118	;'v'
  1414  007128  65                 	db	101	;'e'
  1415  007129  72                 	db	114	;'r'
  1416  00712A  20                 	db	32
  1417  00712B  69                 	db	105	;'i'
  1418  00712C  6E                 	db	110	;'n'
  1419  00712D  20                 	db	32
  1420  00712E  45                 	db	69	;'E'
  1421  00712F  72                 	db	114	;'r'
  1422  007130  72                 	db	114	;'r'
  1423  007131  6F                 	db	111	;'o'
  1424  007132  72                 	db	114	;'r'
  1425  007133  20                 	db	32
  1426  007134  53                 	db	83	;'S'
  1427  007135  74                 	db	116	;'t'
  1428  007136  61                 	db	97	;'a'
  1429  007137  74                 	db	116	;'t'
  1430  007138  65                 	db	101	;'e'
  1431  007139  20                 	db	32
  1432  00713A  42                 	db	66	;'B'
  1433  00713B  75                 	db	117	;'u'
  1434  00713C  73                 	db	115	;'s'
  1435  00713D  20                 	db	32
  1436  00713E  50                 	db	80	;'P'
  1437  00713F  61                 	db	97	;'a'
  1438  007140  73                 	db	115	;'s'
  1439  007141  73                 	db	115	;'s'
  1440  007142  69                 	db	105	;'i'
  1441  007143  76                 	db	118	;'v'
  1442  007144  65                 	db	101	;'e'
  1443  007145  20                 	db	32
  1444  007146  28                 	db	40
  1445  007147  52                 	db	82	;'R'
  1446  007148  45                 	db	69	;'E'
  1447  007149  52                 	db	82	;'R'
  1448  00714A  52                 	db	82	;'R'
  1449  00714B  43                 	db	67	;'C'
  1450  00714C  4E                 	db	78	;'N'
  1451  00714D  54                 	db	84	;'T'
  1452  00714E  20                 	db	32
  1453  00714F  3F                 	db	63	;'?'
  1454  007150  20                 	db	32
  1455  007151  31                 	db	49	;'1'
  1456  007152  32                 	db	50	;'2'
  1457  007153  38                 	db	56	;'8'
  1458  007154  29                 	db	41
  1459  007155  0D                 	db	13
  1460  007156  0A                 	db	10
  1461  007157  00                 	db	0
  1462  007158                     STR_71:
  1463  007158  2D                 	db	45
  1464  007159  45                 	db	69	;'E'
  1465  00715A  52                 	db	82	;'R'
  1466  00715B  52                 	db	82	;'R'
  1467  00715C  4F                 	db	79	;'O'
  1468  00715D  52                 	db	82	;'R'
  1469  00715E  20                 	db	32
  1470  00715F  2D                 	db	45
  1471  007160  20                 	db	32
  1472  007161  4F                 	db	79	;'O'
  1473  007162  6E                 	db	110	;'n'
  1474  007163  65                 	db	101	;'e'
  1475  007164  20                 	db	32
  1476  007165  6F                 	db	111	;'o'
  1477  007166  72                 	db	114	;'r'
  1478  007167  20                 	db	32
  1479  007168  6D                 	db	109	;'m'
  1480  007169  6F                 	db	111	;'o'
  1481  00716A  72                 	db	114	;'r'
  1482  00716B  65                 	db	101	;'e'
  1483  00716C  20                 	db	32
  1484  00716D  72                 	db	114	;'r'
  1485  00716E  65                 	db	101	;'e'
  1486  00716F  67                 	db	103	;'g'
  1487  007170  69                 	db	105	;'i'
  1488  007171  73                 	db	115	;'s'
  1489  007172  74                 	db	116	;'t'
  1490  007173  65                 	db	101	;'e'
  1491  007174  72                 	db	114	;'r'
  1492  007175  28                 	db	40
  1493  007176  73                 	db	115	;'s'
  1494  007177  29                 	db	41
  1495  007178  20                 	db	32
  1496  007179  63                 	db	99	;'c'
  1497  00717A  6F                 	db	111	;'o'
  1498  00717B  75                 	db	117	;'u'
  1499  00717C  6C                 	db	108	;'l'
  1500  00717D  64                 	db	100	;'d'
  1501  00717E  20                 	db	32
  1502  00717F  6E                 	db	110	;'n'
  1503  007180  6F                 	db	111	;'o'
  1504  007181  74                 	db	116	;'t'
  1505  007182  20                 	db	32
  1506  007183  62                 	db	98	;'b'
  1507  007184  65                 	db	101	;'e'
  1508  007185  20                 	db	32
  1509  007186  72                 	db	114	;'r'
  1510  007187  65                 	db	101	;'e'
  1511  007188  61                 	db	97	;'a'
  1512  007189  64                 	db	100	;'d'
  1513  00718A  2E                 	db	46
  1514  00718B  0D                 	db	13
  1515  00718C  0A                 	db	10
  1516  00718D  00                 	db	0
  1517  00718E                     STR_197:
  1518  00718E  54                 	db	84	;'T'
  1519  00718F  72                 	db	114	;'r'
  1520  007190  61                 	db	97	;'a'
  1521  007191  6E                 	db	110	;'n'
  1522  007192  73                 	db	115	;'s'
  1523  007193  6D                 	db	109	;'m'
  1524  007194  69                 	db	105	;'i'
  1525  007195  74                 	db	116	;'t'
  1526  007196  74                 	db	116	;'t'
  1527  007197  65                 	db	101	;'e'
  1528  007198  72                 	db	114	;'r'
  1529  007199  20                 	db	32
  1530  00719A  69                 	db	105	;'i'
  1531  00719B  6E                 	db	110	;'n'
  1532  00719C  20                 	db	32
  1533  00719D  45                 	db	69	;'E'
  1534  00719E  72                 	db	114	;'r'
  1535  00719F  72                 	db	114	;'r'
  1536  0071A0  6F                 	db	111	;'o'
  1537  0071A1  72                 	db	114	;'r'
  1538  0071A2  20                 	db	32
  1539  0071A3  53                 	db	83	;'S'
  1540  0071A4  74                 	db	116	;'t'
  1541  0071A5  61                 	db	97	;'a'
  1542  0071A6  74                 	db	116	;'t'
  1543  0071A7  65                 	db	101	;'e'
  1544  0071A8  20                 	db	32
  1545  0071A9  42                 	db	66	;'B'
  1546  0071AA  75                 	db	117	;'u'
  1547  0071AB  73                 	db	115	;'s'
  1548  0071AC  20                 	db	32
  1549  0071AD  4F                 	db	79	;'O'
  1550  0071AE  46                 	db	70	;'F'
  1551  0071AF  46                 	db	70	;'F'
  1552  0071B0  20                 	db	32
  1553  0071B1  28                 	db	40
  1554  0071B2  54                 	db	84	;'T'
  1555  0071B3  45                 	db	69	;'E'
  1556  0071B4  52                 	db	82	;'R'
  1557  0071B5  52                 	db	82	;'R'
  1558  0071B6  43                 	db	67	;'C'
  1559  0071B7  4E                 	db	78	;'N'
  1560  0071B8  54                 	db	84	;'T'
  1561  0071B9  20                 	db	32
  1562  0071BA  3F                 	db	63	;'?'
  1563  0071BB  20                 	db	32
  1564  0071BC  32                 	db	50	;'2'
  1565  0071BD  35                 	db	53	;'5'
  1566  0071BE  36                 	db	54	;'6'
  1567  0071BF  29                 	db	41
  1568  0071C0  0D                 	db	13
  1569  0071C1  0A                 	db	10
  1570  0071C2  00                 	db	0
  1571  0071C3                     STR_205:
  1572  0071C3  54                 	db	84	;'T'
  1573  0071C4  72                 	db	114	;'r'
  1574  0071C5  61                 	db	97	;'a'
  1575  0071C6  6E                 	db	110	;'n'
  1576  0071C7  73                 	db	115	;'s'
  1577  0071C8  6D                 	db	109	;'m'
  1578  0071C9  69                 	db	105	;'i'
  1579  0071CA  74                 	db	116	;'t'
  1580  0071CB  74                 	db	116	;'t'
  1581  0071CC  65                 	db	101	;'e'
  1582  0071CD  72                 	db	114	;'r'
  1583  0071CE  20                 	db	32
  1584  0071CF  6F                 	db	111	;'o'
  1585  0071D0  72                 	db	114	;'r'
  1586  0071D1  20                 	db	32
  1587  0071D2  52                 	db	82	;'R'
  1588  0071D3  65                 	db	101	;'e'
  1589  0071D4  63                 	db	99	;'c'
  1590  0071D5  65                 	db	101	;'e'
  1591  0071D6  69                 	db	105	;'i'
  1592  0071D7  76                 	db	118	;'v'
  1593  0071D8  65                 	db	101	;'e'
  1594  0071D9  72                 	db	114	;'r'
  1595  0071DA  20                 	db	32
  1596  0071DB  69                 	db	105	;'i'
  1597  0071DC  73                 	db	115	;'s'
  1598  0071DD  20                 	db	32
  1599  0071DE  69                 	db	105	;'i'
  1600  0071DF  6E                 	db	110	;'n'
  1601  0071E0  20                 	db	32
  1602  0071E1  45                 	db	69	;'E'
  1603  0071E2  72                 	db	114	;'r'
  1604  0071E3  72                 	db	114	;'r'
  1605  0071E4  6F                 	db	111	;'o'
  1606  0071E5  72                 	db	114	;'r'
  1607  0071E6  20                 	db	32
  1608  0071E7  53                 	db	83	;'S'
  1609  0071E8  74                 	db	116	;'t'
  1610  0071E9  61                 	db	97	;'a'
  1611  0071EA  74                 	db	116	;'t'
  1612  0071EB  65                 	db	101	;'e'
  1613  0071EC  20                 	db	32
  1614  0071ED  57                 	db	87	;'W'
  1615  0071EE  61                 	db	97	;'a'
  1616  0071EF  72                 	db	114	;'r'
  1617  0071F0  6E                 	db	110	;'n'
  1618  0071F1  69                 	db	105	;'i'
  1619  0071F2  6E                 	db	110	;'n'
  1620  0071F3  67                 	db	103	;'g'
  1621  0071F4  0D                 	db	13
  1622  0071F5  0A                 	db	10
  1623  0071F6  00                 	db	0
  1624  0071F7                     STR_211:
  1625  0071F7  4C                 	db	76	;'L'
  1626  0071F8  49                 	db	73	;'I'
  1627  0071F9  53                 	db	83	;'S'
  1628  0071FA  54                 	db	84	;'T'
  1629  0071FB  45                 	db	69	;'E'
  1630  0071FC  4E                 	db	78	;'N'
  1631  0071FD  20                 	db	32
  1632  0071FE  2D                 	db	45
  1633  0071FF  20                 	db	32
  1634  007200  4F                 	db	79	;'O'
  1635  007201  70                 	db	112	;'p'
  1636  007202  65                 	db	101	;'e'
  1637  007203  6E                 	db	110	;'n'
  1638  007204  20                 	db	32
  1639  007205  43                 	db	67	;'C'
  1640  007206  41                 	db	65	;'A'
  1641  007207  4E                 	db	78	;'N'
  1642  007208  20                 	db	32
  1643  007209  69                 	db	105	;'i'
  1644  00720A  6E                 	db	110	;'n'
  1645  00720B  74                 	db	116	;'t'
  1646  00720C  65                 	db	101	;'e'
  1647  00720D  72                 	db	114	;'r'
  1648  00720E  66                 	db	102	;'f'
  1649  00720F  61                 	db	97	;'a'
  1650  007210  63                 	db	99	;'c'
  1651  007211  65                 	db	101	;'e'
  1652  007212  20                 	db	32
  1653  007213  69                 	db	105	;'i'
  1654  007214  6E                 	db	110	;'n'
  1655  007215  20                 	db	32
  1656  007216  6C                 	db	108	;'l'
  1657  007217  69                 	db	105	;'i'
  1658  007218  73                 	db	115	;'s'
  1659  007219  74                 	db	116	;'t'
  1660  00721A  65                 	db	101	;'e'
  1661  00721B  6E                 	db	110	;'n'
  1662  00721C  20                 	db	32
  1663  00721D  6F                 	db	111	;'o'
  1664  00721E  6E                 	db	110	;'n'
  1665  00721F  6C                 	db	108	;'l'
  1666  007220  79                 	db	121	;'y'
  1667  007221  20                 	db	32
  1668  007222  6D                 	db	109	;'m'
  1669  007223  6F                 	db	111	;'o'
  1670  007224  64                 	db	100	;'d'
  1671  007225  65                 	db	101	;'e'
  1672  007226  2E                 	db	46
  1673  007227  0D                 	db	13
  1674  007228  0A                 	db	10
  1675  007229  00                 	db	0
  1676  00722A                     STR_102:
  1677  00722A  2D                 	db	45
  1678  00722B  45                 	db	69	;'E'
  1679  00722C  52                 	db	82	;'R'
  1680  00722D  52                 	db	82	;'R'
  1681  00722E  4F                 	db	79	;'O'
  1682  00722F  52                 	db	82	;'R'
  1683  007230  20                 	db	32
  1684  007231  2D                 	db	45
  1685  007232  20                 	db	32
  1686  007233  4D                 	db	77	;'M'
  1687  007234  61                 	db	97	;'a'
  1688  007235  73                 	db	115	;'s'
  1689  007236  6B                 	db	107	;'k'
  1690  007237  20                 	db	32
  1691  007238  6E                 	db	110	;'n'
  1692  007239  75                 	db	117	;'u'
  1693  00723A  6D                 	db	109	;'m'
  1694  00723B  62                 	db	98	;'b'
  1695  00723C  65                 	db	101	;'e'
  1696  00723D  72                 	db	114	;'r'
  1697  00723E  20                 	db	32
  1698  00723F  63                 	db	99	;'c'
  1699  007240  61                 	db	97	;'a'
  1700  007241  6E                 	db	110	;'n'
  1701  007242  20                 	db	32
  1702  007243  6F                 	db	111	;'o'
  1703  007244  6E                 	db	110	;'n'
  1704  007245  6C                 	db	108	;'l'
  1705  007246  79                 	db	121	;'y'
  1706  007247  20                 	db	32
  1707  007248  62                 	db	98	;'b'
  1708  007249  65                 	db	101	;'e'
  1709  00724A  20                 	db	32
  1710  00724B  73                 	db	115	;'s'
  1711  00724C  65                 	db	101	;'e'
  1712  00724D  74                 	db	116	;'t'
  1713  00724E  20                 	db	32
  1714  00724F  61                 	db	97	;'a'
  1715  007250  73                 	db	115	;'s'
  1716  007251  20                 	db	32
  1717  007252  30                 	db	48	;'0'
  1718  007253  20                 	db	32
  1719  007254  6F                 	db	111	;'o'
  1720  007255  72                 	db	114	;'r'
  1721  007256  20                 	db	32
  1722  007257  31                 	db	49	;'1'
  1723  007258  2E                 	db	46
  1724  007259  0D                 	db	13
  1725  00725A  0A                 	db	10
  1726  00725B  00                 	db	0
  1727  00725C                     STR_212:
  1728  00725C  4C                 	db	76	;'L'
  1729  00725D  4F                 	db	79	;'O'
  1730  00725E  4F                 	db	79	;'O'
  1731  00725F  50                 	db	80	;'P'
  1732  007260  42                 	db	66	;'B'
  1733  007261  41                 	db	65	;'A'
  1734  007262  43                 	db	67	;'C'
  1735  007263  4B                 	db	75	;'K'
  1736  007264  20                 	db	32
  1737  007265  2D                 	db	45
  1738  007266  20                 	db	32
  1739  007267  4F                 	db	79	;'O'
  1740  007268  70                 	db	112	;'p'
  1741  007269  65                 	db	101	;'e'
  1742  00726A  6E                 	db	110	;'n'
  1743  00726B  20                 	db	32
  1744  00726C  43                 	db	67	;'C'
  1745  00726D  41                 	db	65	;'A'
  1746  00726E  4E                 	db	78	;'N'
  1747  00726F  20                 	db	32
  1748  007270  69                 	db	105	;'i'
  1749  007271  6E                 	db	110	;'n'
  1750  007272  74                 	db	116	;'t'
  1751  007273  65                 	db	101	;'e'
  1752  007274  72                 	db	114	;'r'
  1753  007275  66                 	db	102	;'f'
  1754  007276  61                 	db	97	;'a'
  1755  007277  63                 	db	99	;'c'
  1756  007278  65                 	db	101	;'e'
  1757  007279  20                 	db	32
  1758  00727A  69                 	db	105	;'i'
  1759  00727B  6E                 	db	110	;'n'
  1760  00727C  20                 	db	32
  1761  00727D  6C                 	db	108	;'l'
  1762  00727E  6F                 	db	111	;'o'
  1763  00727F  6F                 	db	111	;'o'
  1764  007280  70                 	db	112	;'p'
  1765  007281  62                 	db	98	;'b'
  1766  007282  61                 	db	97	;'a'
  1767  007283  63                 	db	99	;'c'
  1768  007284  6B                 	db	107	;'k'
  1769  007285  20                 	db	32
  1770  007286  6D                 	db	109	;'m'
  1771  007287  6F                 	db	111	;'o'
  1772  007288  64                 	db	100	;'d'
  1773  007289  65                 	db	101	;'e'
  1774  00728A  2E                 	db	46
  1775  00728B  0D                 	db	13
  1776  00728C  0A                 	db	10
  1777  00728D  00                 	db	0
  1778  00728E                     STR_214:
  1779  00728E  56                 	db	86	;'V'
  1780  00728F  45                 	db	69	;'E'
  1781  007290  52                 	db	82	;'R'
  1782  007291  53                 	db	83	;'S'
  1783  007292  49                 	db	73	;'I'
  1784  007293  4F                 	db	79	;'O'
  1785  007294  4E                 	db	78	;'N'
  1786  007295  20                 	db	32
  1787  007296  2D                 	db	45
  1788  007297  20                 	db	32
  1789  007298  44                 	db	68	;'D'
  1790  007299  69                 	db	105	;'i'
  1791  00729A  73                 	db	115	;'s'
  1792  00729B  70                 	db	112	;'p'
  1793  00729C  6C                 	db	108	;'l'
  1794  00729D  61                 	db	97	;'a'
  1795  00729E  79                 	db	121	;'y'
  1796  00729F  20                 	db	32
  1797  0072A0  66                 	db	102	;'f'
  1798  0072A1  69                 	db	105	;'i'
  1799  0072A2  72                 	db	114	;'r'
  1800  0072A3  6D                 	db	109	;'m'
  1801  0072A4  77                 	db	119	;'w'
  1802  0072A5  61                 	db	97	;'a'
  1803  0072A6  72                 	db	114	;'r'
  1804  0072A7  65                 	db	101	;'e'
  1805  0072A8  20                 	db	32
  1806  0072A9  76                 	db	118	;'v'
  1807  0072AA  65                 	db	101	;'e'
  1808  0072AB  72                 	db	114	;'r'
  1809  0072AC  73                 	db	115	;'s'
  1810  0072AD  69                 	db	105	;'i'
  1811  0072AE  6F                 	db	111	;'o'
  1812  0072AF  6E                 	db	110	;'n'
  1813  0072B0  20                 	db	32
  1814  0072B1  69                 	db	105	;'i'
  1815  0072B2  6E                 	db	110	;'n'
  1816  0072B3  66                 	db	102	;'f'
  1817  0072B4  6F                 	db	111	;'o'
  1818  0072B5  72                 	db	114	;'r'
  1819  0072B6  6D                 	db	109	;'m'
  1820  0072B7  61                 	db	97	;'a'
  1821  0072B8  74                 	db	116	;'t'
  1822  0072B9  69                 	db	105	;'i'
  1823  0072BA  6F                 	db	111	;'o'
  1824  0072BB  6E                 	db	110	;'n'
  1825  0072BC  2E                 	db	46
  1826  0072BD  0D                 	db	13
  1827  0072BE  0A                 	db	10
  1828  0072BF  00                 	db	0
  1829  0072C0                     STR_234:
  1830  0072C0  20                 	db	32
  1831  0072C1  20                 	db	32
  1832  0072C2  20                 	db	32
  1833  0072C3  20                 	db	32
  1834  0072C4  20                 	db	32
  1835  0072C5  20                 	db	32
  1836  0072C6  20                 	db	32
  1837  0072C7  20                 	db	32
  1838  0072C8  20                 	db	32
  1839  0072C9  20                 	db	32
  1840  0072CA  20                 	db	32
  1841  0072CB  20                 	db	32
  1842  0072CC  20                 	db	32
  1843  0072CD  20                 	db	32
  1844  0072CE  20                 	db	32
  1845  0072CF  20                 	db	32
  1846  0072D0  46                 	db	70	;'F'
  1847  0072D1  6F                 	db	111	;'o'
  1848  0072D2  72                 	db	114	;'r'
  1849  0072D3  6D                 	db	109	;'m'
  1850  0072D4  61                 	db	97	;'a'
  1851  0072D5  74                 	db	116	;'t'
  1852  0072D6  3A                 	db	58	;':'
  1853  0072D7  20                 	db	32
  1854  0072D8  73                 	db	115	;'s'
  1855  0072D9  65                 	db	101	;'e'
  1856  0072DA  74                 	db	116	;'t'
  1857  0072DB  20                 	db	32
  1858  0072DC  72                 	db	114	;'r'
  1859  0072DD  77                 	db	119	;'w'
  1860  0072DE  74                 	db	116	;'t'
  1861  0072DF  69                 	db	105	;'i'
  1862  0072E0  6D                 	db	109	;'m'
  1863  0072E1  65                 	db	101	;'e'
  1864  0072E2  6F                 	db	111	;'o'
  1865  0072E3  75                 	db	117	;'u'
  1866  0072E4  74                 	db	116	;'t'
  1867  0072E5  20                 	db	32
  1868  0072E6  74                 	db	116	;'t'
  1869  0072E7  69                 	db	105	;'i'
  1870  0072E8  6D                 	db	109	;'m'
  1871  0072E9  65                 	db	101	;'e'
  1872  0072EA  6F                 	db	111	;'o'
  1873  0072EB  75                 	db	117	;'u'
  1874  0072EC  74                 	db	116	;'t'
  1875  0072ED  2E                 	db	46
  1876  0072EE  0D                 	db	13
  1877  0072EF  0A                 	db	10
  1878  0072F0  00                 	db	0
  1879  0072F1                     STR_232:
  1880  0072F1  20                 	db	32
  1881  0072F2  20                 	db	32
  1882  0072F3  20                 	db	32
  1883  0072F4  20                 	db	32
  1884  0072F5  44                 	db	68	;'D'
  1885  0072F6  45                 	db	69	;'E'
  1886  0072F7  43                 	db	67	;'C'
  1887  0072F8  49                 	db	73	;'I'
  1888  0072F9  4D                 	db	77	;'M'
  1889  0072FA  41                 	db	65	;'A'
  1890  0072FB  4C                 	db	76	;'L'
  1891  0072FC  20                 	db	32
  1892  0072FD  2D                 	db	45
  1893  0072FE  20                 	db	32
  1894  0072FF  44                 	db	68	;'D'
  1895  007300  69                 	db	105	;'i'
  1896  007301  73                 	db	115	;'s'
  1897  007302  70                 	db	112	;'p'
  1898  007303  6C                 	db	108	;'l'
  1899  007304  61                 	db	97	;'a'
  1900  007305  79                 	db	121	;'y'
  1901  007306  20                 	db	32
  1902  007307  6E                 	db	110	;'n'
  1903  007308  75                 	db	117	;'u'
  1904  007309  6D                 	db	109	;'m'
  1905  00730A  65                 	db	101	;'e'
  1906  00730B  72                 	db	114	;'r'
  1907  00730C  69                 	db	105	;'i'
  1908  00730D  63                 	db	99	;'c'
  1909  00730E  61                 	db	97	;'a'
  1910  00730F  6C                 	db	108	;'l'
  1911  007310  73                 	db	115	;'s'
  1912  007311  20                 	db	32
  1913  007312  69                 	db	105	;'i'
  1914  007313  6E                 	db	110	;'n'
  1915  007314  20                 	db	32
  1916  007315  64                 	db	100	;'d'
  1917  007316  65                 	db	101	;'e'
  1918  007317  63                 	db	99	;'c'
  1919  007318  69                 	db	105	;'i'
  1920  007319  6D                 	db	109	;'m'
  1921  00731A  61                 	db	97	;'a'
  1922  00731B  6C                 	db	108	;'l'
  1923  00731C  2E                 	db	46
  1924  00731D  0D                 	db	13
  1925  00731E  0A                 	db	10
  1926  00731F  00                 	db	0
  1927  007320                     STR_231:
  1928  007320  20                 	db	32
  1929  007321  20                 	db	32
  1930  007322  20                 	db	32
  1931  007323  20                 	db	32
  1932  007324  48                 	db	72	;'H'
  1933  007325  45                 	db	69	;'E'
  1934  007326  58                 	db	88	;'X'
  1935  007327  20                 	db	32
  1936  007328  2D                 	db	45
  1937  007329  20                 	db	32
  1938  00732A  44                 	db	68	;'D'
  1939  00732B  69                 	db	105	;'i'
  1940  00732C  73                 	db	115	;'s'
  1941  00732D  70                 	db	112	;'p'
  1942  00732E  6C                 	db	108	;'l'
  1943  00732F  61                 	db	97	;'a'
  1944  007330  79                 	db	121	;'y'
  1945  007331  20                 	db	32
  1946  007332  6E                 	db	110	;'n'
  1947  007333  75                 	db	117	;'u'
  1948  007334  6D                 	db	109	;'m'
  1949  007335  65                 	db	101	;'e'
  1950  007336  72                 	db	114	;'r'
  1951  007337  69                 	db	105	;'i'
  1952  007338  63                 	db	99	;'c'
  1953  007339  61                 	db	97	;'a'
  1954  00733A  6C                 	db	108	;'l'
  1955  00733B  73                 	db	115	;'s'
  1956  00733C  20                 	db	32
  1957  00733D  69                 	db	105	;'i'
  1958  00733E  6E                 	db	110	;'n'
  1959  00733F  20                 	db	32
  1960  007340  68                 	db	104	;'h'
  1961  007341  65                 	db	101	;'e'
  1962  007342  78                 	db	120	;'x'
  1963  007343  61                 	db	97	;'a'
  1964  007344  64                 	db	100	;'d'
  1965  007345  65                 	db	101	;'e'
  1966  007346  63                 	db	99	;'c'
  1967  007347  69                 	db	105	;'i'
  1968  007348  6D                 	db	109	;'m'
  1969  007349  61                 	db	97	;'a'
  1970  00734A  6C                 	db	108	;'l'
  1971  00734B  2E                 	db	46
  1972  00734C  0D                 	db	13
  1973  00734D  0A                 	db	10
  1974  00734E  00                 	db	0
  1975  00734F                     STR_222:
  1976  00734F  46                 	db	70	;'F'
  1977  007350  49                 	db	73	;'I'
  1978  007351  4E                 	db	78	;'N'
  1979  007352  44                 	db	68	;'D'
  1980  007353  20                 	db	32
  1981  007354  2D                 	db	45
  1982  007355  20                 	db	32
  1983  007356  46                 	db	70	;'F'
  1984  007357  69                 	db	105	;'i'
  1985  007358  6E                 	db	110	;'n'
  1986  007359  64                 	db	100	;'d'
  1987  00735A  20                 	db	32
  1988  00735B  61                 	db	97	;'a'
  1989  00735C  76                 	db	118	;'v'
  1990  00735D  61                 	db	97	;'a'
  1991  00735E  69                 	db	105	;'i'
  1992  00735F  6C                 	db	108	;'l'
  1993  007360  61                 	db	97	;'a'
  1994  007361  62                 	db	98	;'b'
  1995  007362  6C                 	db	108	;'l'
  1996  007363  65                 	db	101	;'e'
  1997  007364  20                 	db	32
  1998  007365  43                 	db	67	;'C'
  1999  007366  41                 	db	65	;'A'
  2000  007367  4E                 	db	78	;'N'
  2001  007368  34                 	db	52	;'4'
  2002  007369  56                 	db	86	;'V'
  2003  00736A  53                 	db	83	;'S'
  2004  00736B  43                 	db	67	;'C'
  2005  00736C  50                 	db	80	;'P'
  2006  00736D  20                 	db	32
  2007  00736E  6E                 	db	110	;'n'
  2008  00736F  6F                 	db	111	;'o'
  2009  007370  64                 	db	100	;'d'
  2010  007371  65                 	db	101	;'e'
  2011  007372  73                 	db	115	;'s'
  2012  007373  20                 	db	32
  2013  007374  6F                 	db	111	;'o'
  2014  007375  6E                 	db	110	;'n'
  2015  007376  20                 	db	32
  2016  007377  62                 	db	98	;'b'
  2017  007378  75                 	db	117	;'u'
  2018  007379  73                 	db	115	;'s'
  2019  00737A  2E                 	db	46
  2020  00737B  0D                 	db	13
  2021  00737C  0A                 	db	10
  2022  00737D  00                 	db	0
  2023  00737E                     STR_210:
  2024  00737E  53                 	db	83	;'S'
  2025  00737F  49                 	db	73	;'I'
  2026  007380  4C                 	db	76	;'L'
  2027  007381  45                 	db	69	;'E'
  2028  007382  4E                 	db	78	;'N'
  2029  007383  54                 	db	84	;'T'
  2030  007384  20                 	db	32
  2031  007385  2D                 	db	45
  2032  007386  20                 	db	32
  2033  007387  4F                 	db	79	;'O'
  2034  007388  70                 	db	112	;'p'
  2035  007389  65                 	db	101	;'e'
  2036  00738A  6E                 	db	110	;'n'
  2037  00738B  20                 	db	32
  2038  00738C  43                 	db	67	;'C'
  2039  00738D  41                 	db	65	;'A'
  2040  00738E  4E                 	db	78	;'N'
  2041  00738F  20                 	db	32
  2042  007390  69                 	db	105	;'i'
  2043  007391  6E                 	db	110	;'n'
  2044  007392  74                 	db	116	;'t'
  2045  007393  65                 	db	101	;'e'
  2046  007394  72                 	db	114	;'r'
  2047  007395  66                 	db	102	;'f'
  2048  007396  61                 	db	97	;'a'
  2049  007397  63                 	db	99	;'c'
  2050  007398  65                 	db	101	;'e'
  2051  007399  20                 	db	32
  2052  00739A  69                 	db	105	;'i'
  2053  00739B  6E                 	db	110	;'n'
  2054  00739C  20                 	db	32
  2055  00739D  73                 	db	115	;'s'
  2056  00739E  69                 	db	105	;'i'
  2057  00739F  6C                 	db	108	;'l'
  2058  0073A0  65                 	db	101	;'e'
  2059  0073A1  6E                 	db	110	;'n'
  2060  0073A2  74                 	db	116	;'t'
  2061  0073A3  20                 	db	32
  2062  0073A4  6D                 	db	109	;'m'
  2063  0073A5  6F                 	db	111	;'o'
  2064  0073A6  64                 	db	100	;'d'
  2065  0073A7  65                 	db	101	;'e'
  2066  0073A8  2E                 	db	46
  2067  0073A9  0D                 	db	13
  2068  0073AA  0A                 	db	10
  2069  0073AB  00                 	db	0
  2070  0073AC                     STR_215:
  2071  0073AC  49                 	db	73	;'I'
  2072  0073AD  46                 	db	70	;'F'
  2073  0073AE  4D                 	db	77	;'M'
  2074  0073AF  4F                 	db	79	;'O'
  2075  0073B0  44                 	db	68	;'D'
  2076  0073B1  45                 	db	69	;'E'
  2077  0073B2  20                 	db	32
  2078  0073B3  2D                 	db	45
  2079  0073B4  20                 	db	32
  2080  0073B5  44                 	db	68	;'D'
  2081  0073B6  69                 	db	105	;'i'
  2082  0073B7  73                 	db	115	;'s'
  2083  0073B8  70                 	db	112	;'p'
  2084  0073B9  6C                 	db	108	;'l'
  2085  0073BA  61                 	db	97	;'a'
  2086  0073BB  79                 	db	121	;'y'
  2087  0073BC  20                 	db	32
  2088  0073BD  73                 	db	115	;'s'
  2089  0073BE  65                 	db	101	;'e'
  2090  0073BF  6C                 	db	108	;'l'
  2091  0073C0  65                 	db	101	;'e'
  2092  0073C1  63                 	db	99	;'c'
  2093  0073C2  74                 	db	116	;'t'
  2094  0073C3  65                 	db	101	;'e'
  2095  0073C4  64                 	db	100	;'d'
  2096  0073C5  20                 	db	32
  2097  0073C6  69                 	db	105	;'i'
  2098  0073C7  6E                 	db	110	;'n'
  2099  0073C8  74                 	db	116	;'t'
  2100  0073C9  65                 	db	101	;'e'
  2101  0073CA  72                 	db	114	;'r'
  2102  0073CB  66                 	db	102	;'f'
  2103  0073CC  61                 	db	97	;'a'
  2104  0073CD  63                 	db	99	;'c'
  2105  0073CE  65                 	db	101	;'e'
  2106  0073CF  20                 	db	32
  2107  0073D0  6D                 	db	109	;'m'
  2108  0073D1  6F                 	db	111	;'o'
  2109  0073D2  64                 	db	100	;'d'
  2110  0073D3  65                 	db	101	;'e'
  2111  0073D4  2E                 	db	46
  2112  0073D5  0D                 	db	13
  2113  0073D6  0A                 	db	10
  2114  0073D7  00                 	db	0
  2115  0073D8                     STR_209:
  2116  0073D8  4F                 	db	79	;'O'
  2117  0073D9  50                 	db	80	;'P'
  2118  0073DA  45                 	db	69	;'E'
  2119  0073DB  4E                 	db	78	;'N'
  2120  0073DC  20                 	db	32
  2121  0073DD  2D                 	db	45
  2122  0073DE  20                 	db	32
  2123  0073DF  4F                 	db	79	;'O'
  2124  0073E0  70                 	db	112	;'p'
  2125  0073E1  65                 	db	101	;'e'
  2126  0073E2  6E                 	db	110	;'n'
  2127  0073E3  20                 	db	32
  2128  0073E4  43                 	db	67	;'C'
  2129  0073E5  41                 	db	65	;'A'
  2130  0073E6  4E                 	db	78	;'N'
  2131  0073E7  20                 	db	32
  2132  0073E8  69                 	db	105	;'i'
  2133  0073E9  6E                 	db	110	;'n'
  2134  0073EA  74                 	db	116	;'t'
  2135  0073EB  65                 	db	101	;'e'
  2136  0073EC  72                 	db	114	;'r'
  2137  0073ED  66                 	db	102	;'f'
  2138  0073EE  61                 	db	97	;'a'
  2139  0073EF  63                 	db	99	;'c'
  2140  0073F0  65                 	db	101	;'e'
  2141  0073F1  20                 	db	32
  2142  0073F2  69                 	db	105	;'i'
  2143  0073F3  6E                 	db	110	;'n'
  2144  0073F4  20                 	db	32
  2145  0073F5  6E                 	db	110	;'n'
  2146  0073F6  6F                 	db	111	;'o'
  2147  0073F7  72                 	db	114	;'r'
  2148  0073F8  6D                 	db	109	;'m'
  2149  0073F9  61                 	db	97	;'a'
  2150  0073FA  6C                 	db	108	;'l'
  2151  0073FB  20                 	db	32
  2152  0073FC  6D                 	db	109	;'m'
  2153  0073FD  6F                 	db	111	;'o'
  2154  0073FE  64                 	db	100	;'d'
  2155  0073FF  65                 	db	101	;'e'
  2156  007400  2E                 	db	46
  2157  007401  0D                 	db	13
  2158  007402  0A                 	db	10
  2159  007403  00                 	db	0
  2160  007404                     STR_115:
  2161  007404  2B                 	db	43
  2162  007405  4F                 	db	79	;'O'
  2163  007406  4B                 	db	75	;'K'
  2164  007407  20                 	db	32
  2165  007408  2D                 	db	45
  2166  007409  20                 	db	32
  2167  00740A  4E                 	db	78	;'N'
  2168  00740B  75                 	db	117	;'u'
  2169  00740C  6D                 	db	109	;'m'
  2170  00740D  65                 	db	101	;'e'
  2171  00740E  72                 	db	114	;'r'
  2172  00740F  69                 	db	105	;'i'
  2173  007410  63                 	db	99	;'c'
  2174  007411  61                 	db	97	;'a'
  2175  007412  6C                 	db	108	;'l'
  2176  007413  20                 	db	32
  2177  007414  6F                 	db	111	;'o'
  2178  007415  75                 	db	117	;'u'
  2179  007416  74                 	db	116	;'t'
  2180  007417  70                 	db	112	;'p'
  2181  007418  75                 	db	117	;'u'
  2182  007419  74                 	db	116	;'t'
  2183  00741A  20                 	db	32
  2184  00741B  6E                 	db	110	;'n'
  2185  00741C  6F                 	db	111	;'o'
  2186  00741D  77                 	db	119	;'w'
  2187  00741E  20                 	db	32
  2188  00741F  69                 	db	105	;'i'
  2189  007420  6E                 	db	110	;'n'
  2190  007421  20                 	db	32
  2191  007422  68                 	db	104	;'h'
  2192  007423  65                 	db	101	;'e'
  2193  007424  78                 	db	120	;'x'
  2194  007425  61                 	db	97	;'a'
  2195  007426  64                 	db	100	;'d'
  2196  007427  65                 	db	101	;'e'
  2197  007428  63                 	db	99	;'c'
  2198  007429  69                 	db	105	;'i'
  2199  00742A  6D                 	db	109	;'m'
  2200  00742B  61                 	db	97	;'a'
  2201  00742C  6C                 	db	108	;'l'
  2202  00742D  0D                 	db	13
  2203  00742E  0A                 	db	10
  2204  00742F  00                 	db	0
  2205  007430                     STR_92:
  2206  007430  2D                 	db	45
  2207  007431  45                 	db	69	;'E'
  2208  007432  52                 	db	82	;'R'
  2209  007433  52                 	db	82	;'R'
  2210  007434  4F                 	db	79	;'O'
  2211  007435  52                 	db	82	;'R'
  2212  007436  20                 	db	32
  2213  007437  2D                 	db	45
  2214  007438  20                 	db	32
  2215  007439  66                 	db	102	;'f'
  2216  00743A  69                 	db	105	;'i'
  2217  00743B  6C                 	db	108	;'l'
  2218  00743C  74                 	db	116	;'t'
  2219  00743D  65                 	db	101	;'e'
  2220  00743E  72                 	db	114	;'r'
  2221  00743F  20                 	db	32
  2222  007440  66                 	db	102	;'f'
  2223  007441  6F                 	db	111	;'o'
  2224  007442  72                 	db	114	;'r'
  2225  007443  20                 	db	32
  2226  007444  70                 	db	112	;'p'
  2227  007445  72                 	db	114	;'r'
  2228  007446  69                 	db	105	;'i'
  2229  007447  6F                 	db	111	;'o'
  2230  007448  72                 	db	114	;'r'
  2231  007449  69                 	db	105	;'i'
  2232  00744A  74                 	db	116	;'t'
  2233  00744B  79                 	db	121	;'y'
  2234  00744C  20                 	db	32
  2235  00744D  69                 	db	105	;'i'
  2236  00744E  73                 	db	115	;'s'
  2237  00744F  20                 	db	32
  2238  007450  6D                 	db	109	;'m'
  2239  007451  69                 	db	105	;'i'
  2240  007452  73                 	db	115	;'s'
  2241  007453  73                 	db	115	;'s'
  2242  007454  69                 	db	105	;'i'
  2243  007455  6E                 	db	110	;'n'
  2244  007456  67                 	db	103	;'g'
  2245  007457  0D                 	db	13
  2246  007458  0A                 	db	10
  2247  007459  00                 	db	0
  2248  00745A                     STR_98:
  2249  00745A  2D                 	db	45
  2250  00745B  45                 	db	69	;'E'
  2251  00745C  52                 	db	82	;'R'
  2252  00745D  52                 	db	82	;'R'
  2253  00745E  4F                 	db	79	;'O'
  2254  00745F  52                 	db	82	;'R'
  2255  007460  20                 	db	32
  2256  007461  2D                 	db	45
  2257  007462  20                 	db	32
  2258  007463  66                 	db	102	;'f'
  2259  007464  69                 	db	105	;'i'
  2260  007465  6C                 	db	108	;'l'
  2261  007466  74                 	db	116	;'t'
  2262  007467  65                 	db	101	;'e'
  2263  007468  72                 	db	114	;'r'
  2264  007469  20                 	db	32
  2265  00746A  66                 	db	102	;'f'
  2266  00746B  6F                 	db	111	;'o'
  2267  00746C  72                 	db	114	;'r'
  2268  00746D  20                 	db	32
  2269  00746E  6E                 	db	110	;'n'
  2270  00746F  69                 	db	105	;'i'
  2271  007470  64                 	db	100	;'d'
  2272  007471  65                 	db	101	;'e'
  2273  007472  20                 	db	32
  2274  007473  69                 	db	105	;'i'
  2275  007474  64                 	db	100	;'d'
  2276  007475  20                 	db	32
  2277  007476  69                 	db	105	;'i'
  2278  007477  73                 	db	115	;'s'
  2279  007478  20                 	db	32
  2280  007479  6D                 	db	109	;'m'
  2281  00747A  69                 	db	105	;'i'
  2282  00747B  73                 	db	115	;'s'
  2283  00747C  73                 	db	115	;'s'
  2284  00747D  69                 	db	105	;'i'
  2285  00747E  6E                 	db	110	;'n'
  2286  00747F  67                 	db	103	;'g'
  2287  007480  0D                 	db	13
  2288  007481  0A                 	db	10
  2289  007482  00                 	db	0
  2290  007483                     STR_221:
  2291  007483  48                 	db	72	;'H'
  2292  007484  45                 	db	69	;'E'
  2293  007485  4C                 	db	76	;'L'
  2294  007486  50                 	db	80	;'P'
  2295  007487  20                 	db	32
  2296  007488  2D                 	db	45
  2297  007489  20                 	db	32
  2298  00748A  44                 	db	68	;'D'
  2299  00748B  69                 	db	105	;'i'
  2300  00748C  73                 	db	115	;'s'
  2301  00748D  70                 	db	112	;'p'
  2302  00748E  6C                 	db	108	;'l'
  2303  00748F  61                 	db	97	;'a'
  2304  007490  79                 	db	121	;'y'
  2305  007491  20                 	db	32
  2306  007492  74                 	db	116	;'t'
  2307  007493  68                 	db	104	;'h'
  2308  007494  69                 	db	105	;'i'
  2309  007495  73                 	db	115	;'s'
  2310  007496  20                 	db	32
  2311  007497  68                 	db	104	;'h'
  2312  007498  65                 	db	101	;'e'
  2313  007499  6C                 	db	108	;'l'
  2314  00749A  70                 	db	112	;'p'
  2315  00749B  20                 	db	32
  2316  00749C  69                 	db	105	;'i'
  2317  00749D  6E                 	db	110	;'n'
  2318  00749E  66                 	db	102	;'f'
  2319  00749F  6F                 	db	111	;'o'
  2320  0074A0  72                 	db	114	;'r'
  2321  0074A1  6D                 	db	109	;'m'
  2322  0074A2  61                 	db	97	;'a'
  2323  0074A3  74                 	db	116	;'t'
  2324  0074A4  69                 	db	105	;'i'
  2325  0074A5  6F                 	db	111	;'o'
  2326  0074A6  6E                 	db	110	;'n'
  2327  0074A7  2E                 	db	46
  2328  0074A8  0D                 	db	13
  2329  0074A9  0A                 	db	10
  2330  0074AA  00                 	db	0
  2331  0074AB                     STR_105:
  2332  0074AB  2D                 	db	45
  2333  0074AC  45                 	db	69	;'E'
  2334  0074AD  52                 	db	82	;'R'
  2335  0074AE  52                 	db	82	;'R'
  2336  0074AF  4F                 	db	79	;'O'
  2337  0074B0  52                 	db	82	;'R'
  2338  0074B1  20                 	db	32
  2339  0074B2  2D                 	db	45
  2340  0074B3  20                 	db	32
  2341  0074B4  6D                 	db	109	;'m'
  2342  0074B5  61                 	db	97	;'a'
  2343  0074B6  73                 	db	115	;'s'
  2344  0074B7  6B                 	db	107	;'k'
  2345  0074B8  20                 	db	32
  2346  0074B9  66                 	db	102	;'f'
  2347  0074BA  6F                 	db	111	;'o'
  2348  0074BB  72                 	db	114	;'r'
  2349  0074BC  20                 	db	32
  2350  0074BD  70                 	db	112	;'p'
  2351  0074BE  72                 	db	114	;'r'
  2352  0074BF  69                 	db	105	;'i'
  2353  0074C0  6F                 	db	111	;'o'
  2354  0074C1  72                 	db	114	;'r'
  2355  0074C2  69                 	db	105	;'i'
  2356  0074C3  74                 	db	116	;'t'
  2357  0074C4  79                 	db	121	;'y'
  2358  0074C5  20                 	db	32
  2359  0074C6  69                 	db	105	;'i'
  2360  0074C7  73                 	db	115	;'s'
  2361  0074C8  20                 	db	32
  2362  0074C9  6D                 	db	109	;'m'
  2363  0074CA  69                 	db	105	;'i'
  2364  0074CB  73                 	db	115	;'s'
  2365  0074CC  73                 	db	115	;'s'
  2366  0074CD  69                 	db	105	;'i'
  2367  0074CE  6E                 	db	110	;'n'
  2368  0074CF  67                 	db	103	;'g'
  2369  0074D0  0D                 	db	13
  2370  0074D1  0A                 	db	10
  2371  0074D2  00                 	db	0
  2372  0074D3                     STR_117:
  2373  0074D3  2B                 	db	43
  2374  0074D4  4F                 	db	79	;'O'
  2375  0074D5  4B                 	db	75	;'K'
  2376  0074D6  20                 	db	32
  2377  0074D7  2D                 	db	45
  2378  0074D8  20                 	db	32
  2379  0074D9  4E                 	db	78	;'N'
  2380  0074DA  75                 	db	117	;'u'
  2381  0074DB  6D                 	db	109	;'m'
  2382  0074DC  65                 	db	101	;'e'
  2383  0074DD  72                 	db	114	;'r'
  2384  0074DE  69                 	db	105	;'i'
  2385  0074DF  63                 	db	99	;'c'
  2386  0074E0  61                 	db	97	;'a'
  2387  0074E1  6C                 	db	108	;'l'
  2388  0074E2  20                 	db	32
  2389  0074E3  6F                 	db	111	;'o'
  2390  0074E4  75                 	db	117	;'u'
  2391  0074E5  74                 	db	116	;'t'
  2392  0074E6  70                 	db	112	;'p'
  2393  0074E7  75                 	db	117	;'u'
  2394  0074E8  74                 	db	116	;'t'
  2395  0074E9  20                 	db	32
  2396  0074EA  6E                 	db	110	;'n'
  2397  0074EB  6F                 	db	111	;'o'
  2398  0074EC  77                 	db	119	;'w'
  2399  0074ED  20                 	db	32
  2400  0074EE  69                 	db	105	;'i'
  2401  0074EF  6E                 	db	110	;'n'
  2402  0074F0  20                 	db	32
  2403  0074F1  64                 	db	100	;'d'
  2404  0074F2  65                 	db	101	;'e'
  2405  0074F3  63                 	db	99	;'c'
  2406  0074F4  69                 	db	105	;'i'
  2407  0074F5  6D                 	db	109	;'m'
  2408  0074F6  61                 	db	97	;'a'
  2409  0074F7  6C                 	db	108	;'l'
  2410  0074F8  0D                 	db	13
  2411  0074F9  0A                 	db	10
  2412  0074FA  00                 	db	0
  2413  0074FB                     STR_90:
  2414  0074FB  2D                 	db	45
  2415  0074FC  45                 	db	69	;'E'
  2416  0074FD  52                 	db	82	;'R'
  2417  0074FE  52                 	db	82	;'R'
  2418  0074FF  4F                 	db	79	;'O'
  2419  007500  52                 	db	82	;'R'
  2420  007501  20                 	db	32
  2421  007502  2D                 	db	45
  2422  007503  20                 	db	32
  2423  007504  4E                 	db	78	;'N'
  2424  007505  6F                 	db	111	;'o'
  2425  007506  20                 	db	32
  2426  007507  66                 	db	102	;'f'
  2427  007508  69                 	db	105	;'i'
  2428  007509  6C                 	db	108	;'l'
  2429  00750A  74                 	db	116	;'t'
  2430  00750B  65                 	db	101	;'e'
  2431  00750C  72                 	db	114	;'r'
  2432  00750D  20                 	db	32
  2433  00750E  6E                 	db	110	;'n'
  2434  00750F  75                 	db	117	;'u'
  2435  007510  6D                 	db	109	;'m'
  2436  007511  62                 	db	98	;'b'
  2437  007512  65                 	db	101	;'e'
  2438  007513  72                 	db	114	;'r'
  2439  007514  20                 	db	32
  2440  007515  73                 	db	115	;'s'
  2441  007516  70                 	db	112	;'p'
  2442  007517  65                 	db	101	;'e'
  2443  007518  63                 	db	99	;'c'
  2444  007519  69                 	db	105	;'i'
  2445  00751A  66                 	db	102	;'f'
  2446  00751B  69                 	db	105	;'i'
  2447  00751C  65                 	db	101	;'e'
  2448  00751D  64                 	db	100	;'d'
  2449  00751E  2E                 	db	46
  2450  00751F  0D                 	db	13
  2451  007520  0A                 	db	10
  2452  007521  00                 	db	0
  2453  007522                     STR_220:
  2454  007522  45                 	db	69	;'E'
  2455  007523  52                 	db	82	;'R'
  2456  007524  52                 	db	82	;'R'
  2457  007525  20                 	db	32
  2458  007526  2D                 	db	45
  2459  007527  20                 	db	32
  2460  007528  44                 	db	68	;'D'
  2461  007529  69                 	db	105	;'i'
  2462  00752A  73                 	db	115	;'s'
  2463  00752B  70                 	db	112	;'p'
  2464  00752C  6C                 	db	108	;'l'
  2465  00752D  61                 	db	97	;'a'
  2466  00752E  79                 	db	121	;'y'
  2467  00752F  20                 	db	32
  2468  007530  43                 	db	67	;'C'
  2469  007531  41                 	db	65	;'A'
  2470  007532  4E                 	db	78	;'N'
  2471  007533  20                 	db	32
  2472  007534  65                 	db	101	;'e'
  2473  007535  72                 	db	114	;'r'
  2474  007536  72                 	db	114	;'r'
  2475  007537  6F                 	db	111	;'o'
  2476  007538  72                 	db	114	;'r'
  2477  007539  20                 	db	32
  2478  00753A  69                 	db	105	;'i'
  2479  00753B  6E                 	db	110	;'n'
  2480  00753C  66                 	db	102	;'f'
  2481  00753D  6F                 	db	111	;'o'
  2482  00753E  72                 	db	114	;'r'
  2483  00753F  6D                 	db	109	;'m'
  2484  007540  61                 	db	97	;'a'
  2485  007541  74                 	db	116	;'t'
  2486  007542  69                 	db	105	;'i'
  2487  007543  6F                 	db	111	;'o'
  2488  007544  6E                 	db	110	;'n'
  2489  007545  2E                 	db	46
  2490  007546  0D                 	db	13
  2491  007547  0A                 	db	10
  2492  007548  00                 	db	0
  2493  007549                     STR_206:
  2494  007549  48                 	db	72	;'H'
  2495  00754A  65                 	db	101	;'e'
  2496  00754B  6C                 	db	108	;'l'
  2497  00754C  70                 	db	112	;'p'
  2498  00754D  20                 	db	32
  2499  00754E  66                 	db	102	;'f'
  2500  00754F  6F                 	db	111	;'o'
  2501  007550  72                 	db	114	;'r'
  2502  007551  20                 	db	32
  2503  007552  74                 	db	116	;'t'
  2504  007553  68                 	db	104	;'h'
  2505  007554  65                 	db	101	;'e'
  2506  007555  20                 	db	32
  2507  007556  46                 	db	70	;'F'
  2508  007557  72                 	db	114	;'r'
  2509  007558  61                 	db	97	;'a'
  2510  007559  6E                 	db	110	;'n'
  2511  00755A  6B                 	db	107	;'k'
  2512  00755B  66                 	db	102	;'f'
  2513  00755C  75                 	db	117	;'u'
  2514  00755D  72                 	db	114	;'r'
  2515  00755E  74                 	db	116	;'t'
  2516  00755F  20                 	db	32
  2517  007560  52                 	db	82	;'R'
  2518  007561  53                 	db	83	;'S'
  2519  007562  2D                 	db	45
  2520  007563  32                 	db	50	;'2'
  2521  007564  33                 	db	51	;'3'
  2522  007565  32                 	db	50	;'2'
  2523  007566  20                 	db	32
  2524  007567  6D                 	db	109	;'m'
  2525  007568  6F                 	db	111	;'o'
  2526  007569  64                 	db	100	;'d'
  2527  00756A  75                 	db	117	;'u'
  2528  00756B  6C                 	db	108	;'l'
  2529  00756C  65                 	db	101	;'e'
  2530  00756D  0D                 	db	13
  2531  00756E  0A                 	db	10
  2532  00756F  00                 	db	0
  2533  007570                     STR_111:
  2534  007570  2D                 	db	45
  2535  007571  45                 	db	69	;'E'
  2536  007572  52                 	db	82	;'R'
  2537  007573  52                 	db	82	;'R'
  2538  007574  4F                 	db	79	;'O'
  2539  007575  52                 	db	82	;'R'
  2540  007576  20                 	db	32
  2541  007577  2D                 	db	45
  2542  007578  20                 	db	32
  2543  007579  6D                 	db	109	;'m'
  2544  00757A  61                 	db	97	;'a'
  2545  00757B  73                 	db	115	;'s'
  2546  00757C  6B                 	db	107	;'k'
  2547  00757D  20                 	db	32
  2548  00757E  66                 	db	102	;'f'
  2549  00757F  6F                 	db	111	;'o'
  2550  007580  72                 	db	114	;'r'
  2551  007581  20                 	db	32
  2552  007582  6E                 	db	110	;'n'
  2553  007583  69                 	db	105	;'i'
  2554  007584  64                 	db	100	;'d'
  2555  007585  65                 	db	101	;'e'
  2556  007586  20                 	db	32
  2557  007587  69                 	db	105	;'i'
  2558  007588  64                 	db	100	;'d'
  2559  007589  20                 	db	32
  2560  00758A  69                 	db	105	;'i'
  2561  00758B  73                 	db	115	;'s'
  2562  00758C  20                 	db	32
  2563  00758D  6D                 	db	109	;'m'
  2564  00758E  69                 	db	105	;'i'
  2565  00758F  73                 	db	115	;'s'
  2566  007590  73                 	db	115	;'s'
  2567  007591  69                 	db	105	;'i'
  2568  007592  6E                 	db	110	;'n'
  2569  007593  67                 	db	103	;'g'
  2570  007594  0D                 	db	13
  2571  007595  0A                 	db	10
  2572  007596  00                 	db	0
  2573  007597                     STR_94:
  2574  007597  2D                 	db	45
  2575  007598  45                 	db	69	;'E'
  2576  007599  52                 	db	82	;'R'
  2577  00759A  52                 	db	82	;'R'
  2578  00759B  4F                 	db	79	;'O'
  2579  00759C  52                 	db	82	;'R'
  2580  00759D  20                 	db	32
  2581  00759E  2D                 	db	45
  2582  00759F  20                 	db	32
  2583  0075A0  66                 	db	102	;'f'
  2584  0075A1  69                 	db	105	;'i'
  2585  0075A2  6C                 	db	108	;'l'
  2586  0075A3  74                 	db	116	;'t'
  2587  0075A4  65                 	db	101	;'e'
  2588  0075A5  72                 	db	114	;'r'
  2589  0075A6  20                 	db	32
  2590  0075A7  66                 	db	102	;'f'
  2591  0075A8  6F                 	db	111	;'o'
  2592  0075A9  72                 	db	114	;'r'
  2593  0075AA  20                 	db	32
  2594  0075AB  63                 	db	99	;'c'
  2595  0075AC  6C                 	db	108	;'l'
  2596  0075AD  61                 	db	97	;'a'
  2597  0075AE  73                 	db	115	;'s'
  2598  0075AF  73                 	db	115	;'s'
  2599  0075B0  20                 	db	32
  2600  0075B1  69                 	db	105	;'i'
  2601  0075B2  73                 	db	115	;'s'
  2602  0075B3  20                 	db	32
  2603  0075B4  6D                 	db	109	;'m'
  2604  0075B5  69                 	db	105	;'i'
  2605  0075B6  73                 	db	115	;'s'
  2606  0075B7  73                 	db	115	;'s'
  2607  0075B8  69                 	db	105	;'i'
  2608  0075B9  6E                 	db	110	;'n'
  2609  0075BA  67                 	db	103	;'g'
  2610  0075BB  0D                 	db	13
  2611  0075BC  0A                 	db	10
  2612  0075BD  00                 	db	0
  2613  0075BE                     STR_237:
  2614  0075BE  20                 	db	32
  2615  0075BF  20                 	db	32
  2616  0075C0  20                 	db	32
  2617  0075C1  20                 	db	32
  2618  0075C2  20                 	db	32
  2619  0075C3  20                 	db	32
  2620  0075C4  20                 	db	32
  2621  0075C5  20                 	db	32
  2622  0075C6  20                 	db	32
  2623  0075C7  20                 	db	32
  2624  0075C8  20                 	db	32
  2625  0075C9  4D                 	db	77	;'M'
  2626  0075CA  6F                 	db	111	;'o'
  2627  0075CB  64                 	db	100	;'d'
  2628  0075CC  65                 	db	101	;'e'
  2629  0075CD  73                 	db	115	;'s'
  2630  0075CE  3A                 	db	58	;':'
  2631  0075CF  20                 	db	32
  2632  0075D0  76                 	db	118	;'v'
  2633  0075D1  65                 	db	101	;'e'
  2634  0075D2  72                 	db	114	;'r'
  2635  0075D3  62                 	db	98	;'b'
  2636  0075D4  6F                 	db	111	;'o'
  2637  0075D5  73                 	db	115	;'s'
  2638  0075D6  65                 	db	101	;'e'
  2639  0075D7  7C                 	db	124
  2640  0075D8  76                 	db	118	;'v'
  2641  0075D9  73                 	db	115	;'s'
  2642  0075DA  63                 	db	99	;'c'
  2643  0075DB  70                 	db	112	;'p'
  2644  0075DC  7C                 	db	124
  2645  0075DD  73                 	db	115	;'s'
  2646  0075DE  6C                 	db	108	;'l'
  2647  0075DF  63                 	db	99	;'c'
  2648  0075E0  61                 	db	97	;'a'
  2649  0075E1  6E                 	db	110	;'n'
  2650  0075E2  0D                 	db	13
  2651  0075E3  0A                 	db	10
  2652  0075E4  00                 	db	0
  2653  0075E5                     STR_96:
  2654  0075E5  2D                 	db	45
  2655  0075E6  45                 	db	69	;'E'
  2656  0075E7  52                 	db	82	;'R'
  2657  0075E8  52                 	db	82	;'R'
  2658  0075E9  4F                 	db	79	;'O'
  2659  0075EA  52                 	db	82	;'R'
  2660  0075EB  20                 	db	32
  2661  0075EC  2D                 	db	45
  2662  0075ED  20                 	db	32
  2663  0075EE  66                 	db	102	;'f'
  2664  0075EF  69                 	db	105	;'i'
  2665  0075F0  6C                 	db	108	;'l'
  2666  0075F1  74                 	db	116	;'t'
  2667  0075F2  65                 	db	101	;'e'
  2668  0075F3  72                 	db	114	;'r'
  2669  0075F4  20                 	db	32
  2670  0075F5  66                 	db	102	;'f'
  2671  0075F6  6F                 	db	111	;'o'
  2672  0075F7  72                 	db	114	;'r'
  2673  0075F8  20                 	db	32
  2674  0075F9  74                 	db	116	;'t'
  2675  0075FA  79                 	db	121	;'y'
  2676  0075FB  70                 	db	112	;'p'
  2677  0075FC  65                 	db	101	;'e'
  2678  0075FD  20                 	db	32
  2679  0075FE  69                 	db	105	;'i'
  2680  0075FF  73                 	db	115	;'s'
  2681  007600  20                 	db	32
  2682  007601  6D                 	db	109	;'m'
  2683  007602  69                 	db	105	;'i'
  2684  007603  73                 	db	115	;'s'
  2685  007604  73                 	db	115	;'s'
  2686  007605  69                 	db	105	;'i'
  2687  007606  6E                 	db	110	;'n'
  2688  007607  67                 	db	103	;'g'
  2689  007608  0D                 	db	13
  2690  007609  0A                 	db	10
  2691  00760A  00                 	db	0
  2692  00760B                     STR_103:
  2693  00760B  2D                 	db	45
  2694  00760C  45                 	db	69	;'E'
  2695  00760D  52                 	db	82	;'R'
  2696  00760E  52                 	db	82	;'R'
  2697  00760F  4F                 	db	79	;'O'
  2698  007610  52                 	db	82	;'R'
  2699  007611  20                 	db	32
  2700  007612  2D                 	db	45
  2701  007613  20                 	db	32
  2702  007614  4E                 	db	78	;'N'
  2703  007615  6F                 	db	111	;'o'
  2704  007616  20                 	db	32
  2705  007617  6D                 	db	109	;'m'
  2706  007618  61                 	db	97	;'a'
  2707  007619  73                 	db	115	;'s'
  2708  00761A  6B                 	db	107	;'k'
  2709  00761B  20                 	db	32
  2710  00761C  6E                 	db	110	;'n'
  2711  00761D  75                 	db	117	;'u'
  2712  00761E  6D                 	db	109	;'m'
  2713  00761F  62                 	db	98	;'b'
  2714  007620  65                 	db	101	;'e'
  2715  007621  72                 	db	114	;'r'
  2716  007622  20                 	db	32
  2717  007623  73                 	db	115	;'s'
  2718  007624  70                 	db	112	;'p'
  2719  007625  65                 	db	101	;'e'
  2720  007626  63                 	db	99	;'c'
  2721  007627  69                 	db	105	;'i'
  2722  007628  66                 	db	102	;'f'
  2723  007629  69                 	db	105	;'i'
  2724  00762A  65                 	db	101	;'e'
  2725  00762B  64                 	db	100	;'d'
  2726  00762C  2E                 	db	46
  2727  00762D  0D                 	db	13
  2728  00762E  0A                 	db	10
  2729  00762F  00                 	db	0
  2730  007630                     STR_1:
  2731  007630  0D                 	db	13
  2732  007631  0A                 	db	10
  2733  007632  46                 	db	70	;'F'
  2734  007633  72                 	db	114	;'r'
  2735  007634  61                 	db	97	;'a'
  2736  007635  6E                 	db	110	;'n'
  2737  007636  6B                 	db	107	;'k'
  2738  007637  66                 	db	102	;'f'
  2739  007638  75                 	db	117	;'u'
  2740  007639  72                 	db	114	;'r'
  2741  00763A  74                 	db	116	;'t'
  2742  00763B  20                 	db	32
  2743  00763C  52                 	db	82	;'R'
  2744  00763D  53                 	db	83	;'S'
  2745  00763E  2D                 	db	45
  2746  00763F  32                 	db	50	;'2'
  2747  007640  33                 	db	51	;'3'
  2748  007641  32                 	db	50	;'2'
  2749  007642  20                 	db	32
  2750  007643  43                 	db	67	;'C'
  2751  007644  41                 	db	65	;'A'
  2752  007645  4E                 	db	78	;'N'
  2753  007646  34                 	db	52	;'4'
  2754  007647  56                 	db	86	;'V'
  2755  007648  53                 	db	83	;'S'
  2756  007649  43                 	db	67	;'C'
  2757  00764A  50                 	db	80	;'P'
  2758  00764B  20                 	db	32
  2759  00764C  6D                 	db	109	;'m'
  2760  00764D  6F                 	db	111	;'o'
  2761  00764E  64                 	db	100	;'d'
  2762  00764F  75                 	db	117	;'u'
  2763  007650  6C                 	db	108	;'l'
  2764  007651  65                 	db	101	;'e'
  2765  007652  0D                 	db	13
  2766  007653  0A                 	db	10
  2767  007654  00                 	db	0
  2768  007655                     STR_107:
  2769  007655  2D                 	db	45
  2770  007656  45                 	db	69	;'E'
  2771  007657  52                 	db	82	;'R'
  2772  007658  52                 	db	82	;'R'
  2773  007659  4F                 	db	79	;'O'
  2774  00765A  52                 	db	82	;'R'
  2775  00765B  20                 	db	32
  2776  00765C  2D                 	db	45
  2777  00765D  20                 	db	32
  2778  00765E  6D                 	db	109	;'m'
  2779  00765F  61                 	db	97	;'a'
  2780  007660  73                 	db	115	;'s'
  2781  007661  6B                 	db	107	;'k'
  2782  007662  20                 	db	32
  2783  007663  66                 	db	102	;'f'
  2784  007664  6F                 	db	111	;'o'
  2785  007665  72                 	db	114	;'r'
  2786  007666  20                 	db	32
  2787  007667  63                 	db	99	;'c'
  2788  007668  6C                 	db	108	;'l'
  2789  007669  61                 	db	97	;'a'
  2790  00766A  73                 	db	115	;'s'
  2791  00766B  73                 	db	115	;'s'
  2792  00766C  20                 	db	32
  2793  00766D  69                 	db	105	;'i'
  2794  00766E  73                 	db	115	;'s'
  2795  00766F  20                 	db	32
  2796  007670  6D                 	db	109	;'m'
  2797  007671  69                 	db	105	;'i'
  2798  007672  73                 	db	115	;'s'
  2799  007673  73                 	db	115	;'s'
  2800  007674  69                 	db	105	;'i'
  2801  007675  6E                 	db	110	;'n'
  2802  007676  67                 	db	103	;'g'
  2803  007677  0D                 	db	13
  2804  007678  0A                 	db	10
  2805  007679  00                 	db	0
  2806  00767A                     STR_109:
  2807  00767A  2D                 	db	45
  2808  00767B  45                 	db	69	;'E'
  2809  00767C  52                 	db	82	;'R'
  2810  00767D  52                 	db	82	;'R'
  2811  00767E  4F                 	db	79	;'O'
  2812  00767F  52                 	db	82	;'R'
  2813  007680  20                 	db	32
  2814  007681  2D                 	db	45
  2815  007682  20                 	db	32
  2816  007683  6D                 	db	109	;'m'
  2817  007684  61                 	db	97	;'a'
  2818  007685  73                 	db	115	;'s'
  2819  007686  6B                 	db	107	;'k'
  2820  007687  20                 	db	32
  2821  007688  66                 	db	102	;'f'
  2822  007689  6F                 	db	111	;'o'
  2823  00768A  72                 	db	114	;'r'
  2824  00768B  20                 	db	32
  2825  00768C  74                 	db	116	;'t'
  2826  00768D  79                 	db	121	;'y'
  2827  00768E  70                 	db	112	;'p'
  2828  00768F  65                 	db	101	;'e'
  2829  007690  20                 	db	32
  2830  007691  69                 	db	105	;'i'
  2831  007692  73                 	db	115	;'s'
  2832  007693  20                 	db	32
  2833  007694  6D                 	db	109	;'m'
  2834  007695  69                 	db	105	;'i'
  2835  007696  73                 	db	115	;'s'
  2836  007697  73                 	db	115	;'s'
  2837  007698  69                 	db	105	;'i'
  2838  007699  6E                 	db	110	;'n'
  2839  00769A  67                 	db	103	;'g'
  2840  00769B  0D                 	db	13
  2841  00769C  0A                 	db	10
  2842  00769D  00                 	db	0
  2843  00769E                     STR_3:
  2844  00769E  68                 	db	104	;'h'
  2845  00769F  74                 	db	116	;'t'
  2846  0076A0  74                 	db	116	;'t'
  2847  0076A1  70                 	db	112	;'p'
  2848  0076A2  3A                 	db	58	;':'
  2849  0076A3  2F                 	db	47
  2850  0076A4  2F                 	db	47
  2851  0076A5  77                 	db	119	;'w'
  2852  0076A6  77                 	db	119	;'w'
  2853  0076A7  77                 	db	119	;'w'
  2854  0076A8  2E                 	db	46
  2855  0076A9  70                 	db	112	;'p'
  2856  0076AA  61                 	db	97	;'a'
  2857  0076AB  72                 	db	114	;'r'
  2858  0076AC  61                 	db	97	;'a'
  2859  0076AD  64                 	db	100	;'d'
  2860  0076AE  69                 	db	105	;'i'
  2861  0076AF  73                 	db	115	;'s'
  2862  0076B0  65                 	db	101	;'e'
  2863  0076B1  6F                 	db	111	;'o'
  2864  0076B2  66                 	db	102	;'f'
  2865  0076B3  74                 	db	116	;'t'
  2866  0076B4  68                 	db	104	;'h'
  2867  0076B5  65                 	db	101	;'e'
  2868  0076B6  66                 	db	102	;'f'
  2869  0076B7  72                 	db	114	;'r'
  2870  0076B8  6F                 	db	111	;'o'
  2871  0076B9  67                 	db	103	;'g'
  2872  0076BA  2E                 	db	46
  2873  0076BB  63                 	db	99	;'c'
  2874  0076BC  6F                 	db	111	;'o'
  2875  0076BD  6D                 	db	109	;'m'
  2876  0076BE  0D                 	db	13
  2877  0076BF  0A                 	db	10
  2878  0076C0  00                 	db	0
  2879  0076C1                     STR_79:
  2880  0076C1  2B                 	db	43
  2881  0076C2  4F                 	db	79	;'O'
  2882  0076C3  4B                 	db	75	;'K'
  2883  0076C4  20                 	db	32
  2884  0076C5  2D                 	db	45
  2885  0076C6  20                 	db	32
  2886  0076C7  56                 	db	86	;'V'
  2887  0076C8  61                 	db	97	;'a'
  2888  0076C9  6C                 	db	108	;'l'
  2889  0076CA  75                 	db	117	;'u'
  2890  0076CB  65                 	db	101	;'e'
  2891  0076CC  20                 	db	32
  2892  0076CD  77                 	db	119	;'w'
  2893  0076CE  72                 	db	114	;'r'
  2894  0076CF  69                 	db	105	;'i'
  2895  0076D0  74                 	db	116	;'t'
  2896  0076D1  74                 	db	116	;'t'
  2897  0076D2  65                 	db	101	;'e'
  2898  0076D3  6E                 	db	110	;'n'
  2899  0076D4  20                 	db	32
  2900  0076D5  73                 	db	115	;'s'
  2901  0076D6  75                 	db	117	;'u'
  2902  0076D7  63                 	db	99	;'c'
  2903  0076D8  63                 	db	99	;'c'
  2904  0076D9  65                 	db	101	;'e'
  2905  0076DA  73                 	db	115	;'s'
  2906  0076DB  73                 	db	115	;'s'
  2907  0076DC  66                 	db	102	;'f'
  2908  0076DD  75                 	db	117	;'u'
  2909  0076DE  6C                 	db	108	;'l'
  2910  0076DF  6C                 	db	108	;'l'
  2911  0076E0  79                 	db	121	;'y'
  2912  0076E1  0D                 	db	13
  2913  0076E2  0A                 	db	10
  2914  0076E3  00                 	db	0
  2915  0076E4                     STR_230:
  2916  0076E4  53                 	db	83	;'S'
  2917  0076E5  45                 	db	69	;'E'
  2918  0076E6  54                 	db	84	;'T'
  2919  0076E7  20                 	db	32
  2920  0076E8  2D                 	db	45
  2921  0076E9  20                 	db	32
  2922  0076EA  50                 	db	80	;'P'
  2923  0076EB  65                 	db	101	;'e'
  2924  0076EC  72                 	db	114	;'r'
  2925  0076ED  73                 	db	115	;'s'
  2926  0076EE  69                 	db	105	;'i'
  2927  0076EF  73                 	db	115	;'s'
  2928  0076F0  74                 	db	116	;'t'
  2929  0076F1  65                 	db	101	;'e'
  2930  0076F2  6E                 	db	110	;'n'
  2931  0076F3  74                 	db	116	;'t'
  2932  0076F4  20                 	db	32
  2933  0076F5  66                 	db	102	;'f'
  2934  0076F6  75                 	db	117	;'u'
  2935  0076F7  6E                 	db	110	;'n'
  2936  0076F8  63                 	db	99	;'c'
  2937  0076F9  74                 	db	116	;'t'
  2938  0076FA  69                 	db	105	;'i'
  2939  0076FB  6F                 	db	111	;'o'
  2940  0076FC  6E                 	db	110	;'n'
  2941  0076FD  61                 	db	97	;'a'
  2942  0076FE  6C                 	db	108	;'l'
  2943  0076FF  69                 	db	105	;'i'
  2944  007700  74                 	db	116	;'t'
  2945  007701  79                 	db	121	;'y'
  2946  007702  2E                 	db	46
  2947  007703  0D                 	db	13
  2948  007704  0A                 	db	10
  2949  007705  00                 	db	0
  2950  007706                     STR_64:
  2951  007706  2D                 	db	45
  2952  007707  45                 	db	69	;'E'
  2953  007708  52                 	db	82	;'R'
  2954  007709  52                 	db	82	;'R'
  2955  00770A  4F                 	db	79	;'O'
  2956  00770B  52                 	db	82	;'R'
  2957  00770C  20                 	db	32
  2958  00770D  2D                 	db	45
  2959  00770E  20                 	db	32
  2960  00770F  55                 	db	85	;'U'
  2961  007710  6E                 	db	110	;'n'
  2962  007711  61                 	db	97	;'a'
  2963  007712  62                 	db	98	;'b'
  2964  007713  6C                 	db	108	;'l'
  2965  007714  65                 	db	101	;'e'
  2966  007715  20                 	db	32
  2967  007716  74                 	db	116	;'t'
  2968  007717  6F                 	db	111	;'o'
  2969  007718  20                 	db	32
  2970  007719  72                 	db	114	;'r'
  2971  00771A  65                 	db	101	;'e'
  2972  00771B  61                 	db	97	;'a'
  2973  00771C  64                 	db	100	;'d'
  2974  00771D  20                 	db	32
  2975  00771E  72                 	db	114	;'r'
  2976  00771F  65                 	db	101	;'e'
  2977  007720  67                 	db	103	;'g'
  2978  007721  69                 	db	105	;'i'
  2979  007722  73                 	db	115	;'s'
  2980  007723  74                 	db	116	;'t'
  2981  007724  65                 	db	101	;'e'
  2982  007725  72                 	db	114	;'r'
  2983  007726  20                 	db	32
  2984  007727  00                 	db	0
  2985  007728                     STR_219:
  2986  007728  53                 	db	83	;'S'
  2987  007729  54                 	db	84	;'T'
  2988  00772A  41                 	db	65	;'A'
  2989  00772B  54                 	db	84	;'T'
  2990  00772C  20                 	db	32
  2991  00772D  2D                 	db	45
  2992  00772E  20                 	db	32
  2993  00772F  44                 	db	68	;'D'
  2994  007730  69                 	db	105	;'i'
  2995  007731  73                 	db	115	;'s'
  2996  007732  70                 	db	112	;'p'
  2997  007733  6C                 	db	108	;'l'
  2998  007734  61                 	db	97	;'a'
  2999  007735  79                 	db	121	;'y'
  3000  007736  20                 	db	32
  3001  007737  43                 	db	67	;'C'
  3002  007738  41                 	db	65	;'A'
  3003  007739  4E                 	db	78	;'N'
  3004  00773A  20                 	db	32
  3005  00773B  73                 	db	115	;'s'
  3006  00773C  74                 	db	116	;'t'
  3007  00773D  61                 	db	97	;'a'
  3008  00773E  74                 	db	116	;'t'
  3009  00773F  69                 	db	105	;'i'
  3010  007740  73                 	db	115	;'s'
  3011  007741  74                 	db	116	;'t'
  3012  007742  69                 	db	105	;'i'
  3013  007743  63                 	db	99	;'c'
  3014  007744  73                 	db	115	;'s'
  3015  007745  2E                 	db	46
  3016  007746  0D                 	db	13
  3017  007747  0A                 	db	10
  3018  007748  00                 	db	0
  3019  007749                     STR_37:
  3020  007749  2D                 	db	45
  3021  00774A  45                 	db	69	;'E'
  3022  00774B  52                 	db	82	;'R'
  3023  00774C  52                 	db	82	;'R'
  3024  00774D  4F                 	db	79	;'O'
  3025  00774E  52                 	db	82	;'R'
  3026  00774F  20                 	db	32
  3027  007750  2D                 	db	45
  3028  007751  20                 	db	32
  3029  007752  46                 	db	70	;'F'
  3030  007753  61                 	db	97	;'a'
  3031  007754  69                 	db	105	;'i'
  3032  007755  6C                 	db	108	;'l'
  3033  007756  65                 	db	101	;'e'
  3034  007757  64                 	db	100	;'d'
  3035  007758  20                 	db	32
  3036  007759  74                 	db	116	;'t'
  3037  00775A  6F                 	db	111	;'o'
  3038  00775B  20                 	db	32
  3039  00775C  73                 	db	115	;'s'
  3040  00775D  65                 	db	101	;'e'
  3041  00775E  6E                 	db	110	;'n'
  3042  00775F  64                 	db	100	;'d'
  3043  007760  20                 	db	32
  3044  007761  65                 	db	101	;'e'
  3045  007762  76                 	db	118	;'v'
  3046  007763  65                 	db	101	;'e'
  3047  007764  6E                 	db	110	;'n'
  3048  007765  74                 	db	116	;'t'
  3049  007766  2E                 	db	46
  3050  007767  0D                 	db	13
  3051  007768  0A                 	db	10
  3052  007769  00                 	db	0
  3053  00776A                     STR_130:
  3054  00776A  2D                 	db	45
  3055  00776B  45                 	db	69	;'E'
  3056  00776C  52                 	db	82	;'R'
  3057  00776D  52                 	db	82	;'R'
  3058  00776E  4F                 	db	79	;'O'
  3059  00776F  52                 	db	82	;'R'
  3060  007770  20                 	db	32
  3061  007771  2D                 	db	45
  3062  007772  20                 	db	32
  3063  007773  55                 	db	85	;'U'
  3064  007774  6E                 	db	110	;'n'
  3065  007775  6B                 	db	107	;'k'
  3066  007776  6E                 	db	110	;'n'
  3067  007777  6F                 	db	111	;'o'
  3068  007778  77                 	db	119	;'w'
  3069  007779  6E                 	db	110	;'n'
  3070  00777A  20                 	db	32
  3071  00777B  27                 	db	39
  3072  00777C  53                 	db	83	;'S'
  3073  00777D  45                 	db	69	;'E'
  3074  00777E  54                 	db	84	;'T'
  3075  00777F  27                 	db	39
  3076  007780  20                 	db	32
  3077  007781  63                 	db	99	;'c'
  3078  007782  6F                 	db	111	;'o'
  3079  007783  6D                 	db	109	;'m'
  3080  007784  6D                 	db	109	;'m'
  3081  007785  61                 	db	97	;'a'
  3082  007786  6E                 	db	110	;'n'
  3083  007787  64                 	db	100	;'d'
  3084  007788  0D                 	db	13
  3085  007789  0A                 	db	10
  3086  00778A  00                 	db	0
  3087  00778B                     STR_80:
  3088  00778B  2D                 	db	45
  3089  00778C  45                 	db	69	;'E'
  3090  00778D  52                 	db	82	;'R'
  3091  00778E  52                 	db	82	;'R'
  3092  00778F  4F                 	db	79	;'O'
  3093  007790  52                 	db	82	;'R'
  3094  007791  20                 	db	32
  3095  007792  2D                 	db	45
  3096  007793  20                 	db	32
  3097  007794  46                 	db	70	;'F'
  3098  007795  61                 	db	97	;'a'
  3099  007796  69                 	db	105	;'i'
  3100  007797  6C                 	db	108	;'l'
  3101  007798  65                 	db	101	;'e'
  3102  007799  64                 	db	100	;'d'
  3103  00779A  20                 	db	32
  3104  00779B  74                 	db	116	;'t'
  3105  00779C  6F                 	db	111	;'o'
  3106  00779D  20                 	db	32
  3107  00779E  77                 	db	119	;'w'
  3108  00779F  72                 	db	114	;'r'
  3109  0077A0  69                 	db	105	;'i'
  3110  0077A1  74                 	db	116	;'t'
  3111  0077A2  65                 	db	101	;'e'
  3112  0077A3  20                 	db	32
  3113  0077A4  76                 	db	118	;'v'
  3114  0077A5  61                 	db	97	;'a'
  3115  0077A6  6C                 	db	108	;'l'
  3116  0077A7  75                 	db	117	;'u'
  3117  0077A8  65                 	db	101	;'e'
  3118  0077A9  0D                 	db	13
  3119  0077AA  0A                 	db	10
  3120  0077AB  00                 	db	0
  3121  0077AC                     STR_53:
  3122  0077AC  2D                 	db	45
  3123  0077AD  45                 	db	69	;'E'
  3124  0077AE  52                 	db	82	;'R'
  3125  0077AF  52                 	db	82	;'R'
  3126  0077B0  4F                 	db	79	;'O'
  3127  0077B1  52                 	db	82	;'R'
  3128  0077B2  20                 	db	32
  3129  0077B3  2D                 	db	45
  3130  0077B4  20                 	db	32
  3131  0077B5  4E                 	db	78	;'N'
  3132  0077B6  65                 	db	101	;'e'
  3133  0077B7  65                 	db	101	;'e'
  3134  0077B8  64                 	db	100	;'d'
  3135  0077B9  73                 	db	115	;'s'
  3136  0077BA  20                 	db	32
  3137  0077BB  5B                 	db	91	;'['
  3138  0077BC  70                 	db	112	;'p'
  3139  0077BD  61                 	db	97	;'a'
  3140  0077BE  67                 	db	103	;'g'
  3141  0077BF  65                 	db	101	;'e'
  3142  0077C0  3A                 	db	58	;':'
  3143  0077C1  5D                 	db	93	;']'
  3144  0077C2  72                 	db	114	;'r'
  3145  0077C3  65                 	db	101	;'e'
  3146  0077C4  67                 	db	103	;'g'
  3147  0077C5  69                 	db	105	;'i'
  3148  0077C6  73                 	db	115	;'s'
  3149  0077C7  74                 	db	116	;'t'
  3150  0077C8  65                 	db	101	;'e'
  3151  0077C9  72                 	db	114	;'r'
  3152  0077CA  0D                 	db	13
  3153  0077CB  0A                 	db	10
  3154  0077CC  00                 	db	0
  3155  0077CD                     STR_125:
  3156  0077CD  2B                 	db	43
  3157  0077CE  4F                 	db	79	;'O'
  3158  0077CF  4B                 	db	75	;'K'
  3159  0077D0  20                 	db	32
  3160  0077D1  2D                 	db	45
  3161  0077D2  20                 	db	32
  3162  0077D3  4D                 	db	77	;'M'
  3163  0077D4  6F                 	db	111	;'o'
  3164  0077D5  64                 	db	100	;'d'
  3165  0077D6  65                 	db	101	;'e'
  3166  0077D7  20                 	db	32
  3167  0077D8  69                 	db	105	;'i'
  3168  0077D9  73                 	db	115	;'s'
  3169  0077DA  20                 	db	32
  3170  0077DB  6E                 	db	110	;'n'
  3171  0077DC  6F                 	db	111	;'o'
  3172  0077DD  77                 	db	119	;'w'
  3173  0077DE  20                 	db	32
  3174  0077DF  56                 	db	86	;'V'
  3175  0077E0  53                 	db	83	;'S'
  3176  0077E1  43                 	db	67	;'C'
  3177  0077E2  50                 	db	80	;'P'
  3178  0077E3  20                 	db	32
  3179  0077E4  44                 	db	68	;'D'
  3180  0077E5  72                 	db	114	;'r'
  3181  0077E6  69                 	db	105	;'i'
  3182  0077E7  76                 	db	118	;'v'
  3183  0077E8  65                 	db	101	;'e'
  3184  0077E9  72                 	db	114	;'r'
  3185  0077EA  0D                 	db	13
  3186  0077EB  0A                 	db	10
  3187  0077EC  00                 	db	0
  3188  0077ED                     STR_7:
  3189  0077ED  57                 	db	87	;'W'
  3190  0077EE  69                 	db	105	;'i'
  3191  0077EF  6C                 	db	108	;'l'
  3192  0077F0  6C                 	db	108	;'l'
  3193  0077F1  20                 	db	32
  3194  0077F2  65                 	db	101	;'e'
  3195  0077F3  6E                 	db	110	;'n'
  3196  0077F4  74                 	db	116	;'t'
  3197  0077F5  65                 	db	101	;'e'
  3198  0077F6  72                 	db	114	;'r'
  3199  0077F7  20                 	db	32
  3200  0077F8  62                 	db	98	;'b'
  3201  0077F9  6F                 	db	111	;'o'
  3202  0077FA  6F                 	db	111	;'o'
  3203  0077FB  74                 	db	116	;'t'
  3204  0077FC  6C                 	db	108	;'l'
  3205  0077FD  6F                 	db	111	;'o'
  3206  0077FE  61                 	db	97	;'a'
  3207  0077FF  64                 	db	100	;'d'
  3208  007800  65                 	db	101	;'e'
  3209  007801  72                 	db	114	;'r'
  3210  007802  20                 	db	32
  3211  007803  6E                 	db	110	;'n'
  3212  007804  6F                 	db	111	;'o'
  3213  007805  77                 	db	119	;'w'
  3214  007806  2E                 	db	46
  3215  007807  2E                 	db	46
  3216  007808  2E                 	db	46
  3217  007809  0D                 	db	13
  3218  00780A  0A                 	db	10
  3219  00780B  00                 	db	0
  3220  00780C                     STR_213:
  3221  00780C  43                 	db	67	;'C'
  3222  00780D  4C                 	db	76	;'L'
  3223  00780E  4F                 	db	79	;'O'
  3224  00780F  53                 	db	83	;'S'
  3225  007810  45                 	db	69	;'E'
  3226  007811  20                 	db	32
  3227  007812  2D                 	db	45
  3228  007813  20                 	db	32
  3229  007814  43                 	db	67	;'C'
  3230  007815  6C                 	db	108	;'l'
  3231  007816  6F                 	db	111	;'o'
  3232  007817  73                 	db	115	;'s'
  3233  007818  65                 	db	101	;'e'
  3234  007819  20                 	db	32
  3235  00781A  43                 	db	67	;'C'
  3236  00781B  41                 	db	65	;'A'
  3237  00781C  4E                 	db	78	;'N'
  3238  00781D  20                 	db	32
  3239  00781E  69                 	db	105	;'i'
  3240  00781F  6E                 	db	110	;'n'
  3241  007820  74                 	db	116	;'t'
  3242  007821  65                 	db	101	;'e'
  3243  007822  72                 	db	114	;'r'
  3244  007823  66                 	db	102	;'f'
  3245  007824  61                 	db	97	;'a'
  3246  007825  63                 	db	99	;'c'
  3247  007826  65                 	db	101	;'e'
  3248  007827  2E                 	db	46
  3249  007828  0D                 	db	13
  3250  007829  0A                 	db	10
  3251  00782A  00                 	db	0
  3252  00782B                     STR_5:
  3253  00782B  54                 	db	84	;'T'
  3254  00782C  65                 	db	101	;'e'
  3255  00782D  6D                 	db	109	;'m'
  3256  00782E  70                 	db	112	;'p'
  3257  00782F  6F                 	db	111	;'o'
  3258  007830  72                 	db	114	;'r'
  3259  007831  61                 	db	97	;'a'
  3260  007832  72                 	db	114	;'r'
  3261  007833  79                 	db	121	;'y'
  3262  007834  20                 	db	32
  3263  007835  76                 	db	118	;'v'
  3264  007836  65                 	db	101	;'e'
  3265  007837  72                 	db	114	;'r'
  3266  007838  62                 	db	98	;'b'
  3267  007839  6F                 	db	111	;'o'
  3268  00783A  73                 	db	115	;'s'
  3269  00783B  65                 	db	101	;'e'
  3270  00783C  20                 	db	32
  3271  00783D  6D                 	db	109	;'m'
  3272  00783E  6F                 	db	111	;'o'
  3273  00783F  64                 	db	100	;'d'
  3274  007840  65                 	db	101	;'e'
  3275  007841  20                 	db	32
  3276  007842  73                 	db	115	;'s'
  3277  007843  65                 	db	101	;'e'
  3278  007844  74                 	db	116	;'t'
  3279  007845  0D                 	db	13
  3280  007846  0A                 	db	10
  3281  007847  00                 	db	0
  3282  007848                     STR_123:
  3283  007848  2B                 	db	43
  3284  007849  4F                 	db	79	;'O'
  3285  00784A  4B                 	db	75	;'K'
  3286  00784B  20                 	db	32
  3287  00784C  2D                 	db	45
  3288  00784D  20                 	db	32
  3289  00784E  4D                 	db	77	;'M'
  3290  00784F  6F                 	db	111	;'o'
  3291  007850  64                 	db	100	;'d'
  3292  007851  65                 	db	101	;'e'
  3293  007852  20                 	db	32
  3294  007853  69                 	db	105	;'i'
  3295  007854  73                 	db	115	;'s'
  3296  007855  20                 	db	32
  3297  007856  6E                 	db	110	;'n'
  3298  007857  6F                 	db	111	;'o'
  3299  007858  77                 	db	119	;'w'
  3300  007859  20                 	db	32
  3301  00785A  76                 	db	118	;'v'
  3302  00785B  65                 	db	101	;'e'
  3303  00785C  72                 	db	114	;'r'
  3304  00785D  62                 	db	98	;'b'
  3305  00785E  6F                 	db	111	;'o'
  3306  00785F  73                 	db	115	;'s'
  3307  007860  65                 	db	101	;'e'
  3308  007861  0D                 	db	13
  3309  007862  0A                 	db	10
  3310  007863  00                 	db	0
  3311  007864                     STR_208:
  3312  007864  42                 	db	66	;'B'
  3313  007865  4F                 	db	79	;'O'
  3314  007866  4F                 	db	79	;'O'
  3315  007867  54                 	db	84	;'T'
  3316  007868  20                 	db	32
  3317  007869  2D                 	db	45
  3318  00786A  20                 	db	32
  3319  00786B  45                 	db	69	;'E'
  3320  00786C  6E                 	db	110	;'n'
  3321  00786D  74                 	db	116	;'t'
  3322  00786E  65                 	db	101	;'e'
  3323  00786F  72                 	db	114	;'r'
  3324  007870  20                 	db	32
  3325  007871  62                 	db	98	;'b'
  3326  007872  6F                 	db	111	;'o'
  3327  007873  6F                 	db	111	;'o'
  3328  007874  74                 	db	116	;'t'
  3329  007875  6C                 	db	108	;'l'
  3330  007876  6F                 	db	111	;'o'
  3331  007877  61                 	db	97	;'a'
  3332  007878  64                 	db	100	;'d'
  3333  007879  65                 	db	101	;'e'
  3334  00787A  72                 	db	114	;'r'
  3335  00787B  2E                 	db	46
  3336  00787C  0D                 	db	13
  3337  00787D  0A                 	db	10
  3338  00787E  00                 	db	0
  3339  00787F                     STR_132:
  3340  00787F  2D                 	db	45
  3341  007880  45                 	db	69	;'E'
  3342  007881  52                 	db	82	;'R'
  3343  007882  52                 	db	82	;'R'
  3344  007883  4F                 	db	79	;'O'
  3345  007884  52                 	db	82	;'R'
  3346  007885  20                 	db	32
  3347  007886  2D                 	db	45
  3348  007887  20                 	db	32
  3349  007888  55                 	db	85	;'U'
  3350  007889  6E                 	db	110	;'n'
  3351  00788A  6B                 	db	107	;'k'
  3352  00788B  6E                 	db	110	;'n'
  3353  00788C  6F                 	db	111	;'o'
  3354  00788D  77                 	db	119	;'w'
  3355  00788E  6E                 	db	110	;'n'
  3356  00788F  20                 	db	32
  3357  007890  63                 	db	99	;'c'
  3358  007891  6F                 	db	111	;'o'
  3359  007892  6D                 	db	109	;'m'
  3360  007893  6D                 	db	109	;'m'
  3361  007894  61                 	db	97	;'a'
  3362  007895  6E                 	db	110	;'n'
  3363  007896  64                 	db	100	;'d'
  3364  007897  0D                 	db	13
  3365  007898  0A                 	db	10
  3366  007899  00                 	db	0
  3367  00789A                     STR_239:
  3368  00789A  4E                 	db	78	;'N'
  3369  00789B  6F                 	db	111	;'o'
  3370  00789C  64                 	db	100	;'d'
  3371  00789D  65                 	db	101	;'e'
  3372  00789E  20                 	db	32
  3373  00789F  66                 	db	102	;'f'
  3374  0078A0  6F                 	db	111	;'o'
  3375  0078A1  75                 	db	117	;'u'
  3376  0078A2  6E                 	db	110	;'n'
  3377  0078A3  64                 	db	100	;'d'
  3378  0078A4  20                 	db	32
  3379  0078A5  77                 	db	119	;'w'
  3380  0078A6  69                 	db	105	;'i'
  3381  0078A7  74                 	db	116	;'t'
  3382  0078A8  68                 	db	104	;'h'
  3383  0078A9  20                 	db	32
  3384  0078AA  6E                 	db	110	;'n'
  3385  0078AB  6F                 	db	111	;'o'
  3386  0078AC  64                 	db	100	;'d'
  3387  0078AD  65                 	db	101	;'e'
  3388  0078AE  20                 	db	32
  3389  0078AF  69                 	db	105	;'i'
  3390  0078B0  64                 	db	100	;'d'
  3391  0078B1  20                 	db	32
  3392  0078B2  3D                 	db	61	;'='
  3393  0078B3  20                 	db	32
  3394  0078B4  00                 	db	0
  3395  0078B5                     STR_127:
  3396  0078B5  2B                 	db	43
  3397  0078B6  4F                 	db	79	;'O'
  3398  0078B7  4B                 	db	75	;'K'
  3399  0078B8  20                 	db	32
  3400  0078B9  2D                 	db	45
  3401  0078BA  20                 	db	32
  3402  0078BB  4D                 	db	77	;'M'
  3403  0078BC  6F                 	db	111	;'o'
  3404  0078BD  64                 	db	100	;'d'
  3405  0078BE  65                 	db	101	;'e'
  3406  0078BF  20                 	db	32
  3407  0078C0  69                 	db	105	;'i'
  3408  0078C1  73                 	db	115	;'s'
  3409  0078C2  20                 	db	32
  3410  0078C3  6E                 	db	110	;'n'
  3411  0078C4  6F                 	db	111	;'o'
  3412  0078C5  77                 	db	119	;'w'
  3413  0078C6  20                 	db	32
  3414  0078C7  53                 	db	83	;'S'
  3415  0078C8  4C                 	db	76	;'L'
  3416  0078C9  43                 	db	67	;'C'
  3417  0078CA  41                 	db	65	;'A'
  3418  0078CB  4E                 	db	78	;'N'
  3419  0078CC  0D                 	db	13
  3420  0078CD  0A                 	db	10
  3421  0078CE  00                 	db	0
  3422  0078CF                     STR_25:
  3423  0078CF  2B                 	db	43
  3424  0078D0  4F                 	db	79	;'O'
  3425  0078D1  4B                 	db	75	;'K'
  3426  0078D2  20                 	db	32
  3427  0078D3  2D                 	db	45
  3428  0078D4  20                 	db	32
  3429  0078D5  4C                 	db	76	;'L'
  3430  0078D6  69                 	db	105	;'i'
  3431  0078D7  73                 	db	115	;'s'
  3432  0078D8  74                 	db	116	;'t'
  3433  0078D9  65                 	db	101	;'e'
  3434  0078DA  6E                 	db	110	;'n'
  3435  0078DB  20                 	db	32
  3436  0078DC  6F                 	db	111	;'o'
  3437  0078DD  6E                 	db	110	;'n'
  3438  0078DE  6C                 	db	108	;'l'
  3439  0078DF  79                 	db	121	;'y'
  3440  0078E0  20                 	db	32
  3441  0078E1  6D                 	db	109	;'m'
  3442  0078E2  6F                 	db	111	;'o'
  3443  0078E3  64                 	db	100	;'d'
  3444  0078E4  65                 	db	101	;'e'
  3445  0078E5  0D                 	db	13
  3446  0078E6  0A                 	db	10
  3447  0078E7  00                 	db	0
  3448  0078E8                     STR_192:
  3449  0078E8  54                 	db	84	;'T'
  3450  0078E9  72                 	db	114	;'r'
  3451  0078EA  61                 	db	97	;'a'
  3452  0078EB  6E                 	db	110	;'n'
  3453  0078EC  73                 	db	115	;'s'
  3454  0078ED  6D                 	db	109	;'m'
  3455  0078EE  69                 	db	105	;'i'
  3456  0078EF  74                 	db	116	;'t'
  3457  0078F0  20                 	db	32
  3458  0078F1  45                 	db	69	;'E'
  3459  0078F2  72                 	db	114	;'r'
  3460  0078F3  72                 	db	114	;'r'
  3461  0078F4  6F                 	db	111	;'o'
  3462  0078F5  72                 	db	114	;'r'
  3463  0078F6  20                 	db	32
  3464  0078F7  43                 	db	67	;'C'
  3465  0078F8  6F                 	db	111	;'o'
  3466  0078F9  75                 	db	117	;'u'
  3467  0078FA  6E                 	db	110	;'n'
  3468  0078FB  74                 	db	116	;'t'
  3469  0078FC  65                 	db	101	;'e'
  3470  0078FD  72                 	db	114	;'r'
  3471  0078FE  3A                 	db	58	;':'
  3472  0078FF  20                 	db	32
  3473  007900  00                 	db	0
  3474  007901                     STR_216:
  3475  007901  54                 	db	84	;'T'
  3476  007902  58                 	db	88	;'X'
  3477  007903  20                 	db	32
  3478  007904  2D                 	db	45
  3479  007905  20                 	db	32
  3480  007906  53                 	db	83	;'S'
  3481  007907  65                 	db	101	;'e'
  3482  007908  6E                 	db	110	;'n'
  3483  007909  64                 	db	100	;'d'
  3484  00790A  20                 	db	32
  3485  00790B  43                 	db	67	;'C'
  3486  00790C  41                 	db	65	;'A'
  3487  00790D  4E                 	db	78	;'N'
  3488  00790E  20                 	db	32
  3489  00790F  66                 	db	102	;'f'
  3490  007910  72                 	db	114	;'r'
  3491  007911  61                 	db	97	;'a'
  3492  007912  6D                 	db	109	;'m'
  3493  007913  65                 	db	101	;'e'
  3494  007914  20                 	db	32
  3495  007915  2E                 	db	46
  3496  007916  0D                 	db	13
  3497  007917  0A                 	db	10
  3498  007918  00                 	db	0
  3499  007919                     STR_226:
  3500  007919  46                 	db	70	;'F'
  3501  00791A  49                 	db	73	;'I'
  3502  00791B  4C                 	db	76	;'L'
  3503  00791C  54                 	db	84	;'T'
  3504  00791D  45                 	db	69	;'E'
  3505  00791E  52                 	db	82	;'R'
  3506  00791F  20                 	db	32
  3507  007920  2D                 	db	45
  3508  007921  20                 	db	32
  3509  007922  53                 	db	83	;'S'
  3510  007923  65                 	db	101	;'e'
  3511  007924  74                 	db	116	;'t'
  3512  007925  20                 	db	32
  3513  007926  66                 	db	102	;'f'
  3514  007927  69                 	db	105	;'i'
  3515  007928  6C                 	db	108	;'l'
  3516  007929  74                 	db	116	;'t'
  3517  00792A  65                 	db	101	;'e'
  3518  00792B  72                 	db	114	;'r'
  3519  00792C  20                 	db	32
  3520  00792D  2E                 	db	46
  3521  00792E  0D                 	db	13
  3522  00792F  0A                 	db	10
  3523  007930  00                 	db	0
  3524  007931                     STR_51:
  3525  007931  2D                 	db	45
  3526  007932  45                 	db	69	;'E'
  3527  007933  52                 	db	82	;'R'
  3528  007934  52                 	db	82	;'R'
  3529  007935  4F                 	db	79	;'O'
  3530  007936  52                 	db	82	;'R'
  3531  007937  20                 	db	32
  3532  007938  2D                 	db	45
  3533  007939  20                 	db	32
  3534  00793A  4E                 	db	78	;'N'
  3535  00793B  65                 	db	101	;'e'
  3536  00793C  65                 	db	101	;'e'
  3537  00793D  64                 	db	100	;'d'
  3538  00793E  73                 	db	115	;'s'
  3539  00793F  20                 	db	32
  3540  007940  6E                 	db	110	;'n'
  3541  007941  6F                 	db	111	;'o'
  3542  007942  64                 	db	100	;'d'
  3543  007943  65                 	db	101	;'e'
  3544  007944  69                 	db	105	;'i'
  3545  007945  64                 	db	100	;'d'
  3546  007946  0D                 	db	13
  3547  007947  0A                 	db	10
  3548  007948  00                 	db	0
  3549  007949                     STR_28:
  3550  007949  2D                 	db	45
  3551  00794A  45                 	db	69	;'E'
  3552  00794B  52                 	db	82	;'R'
  3553  00794C  52                 	db	82	;'R'
  3554  00794D  4F                 	db	79	;'O'
  3555  00794E  52                 	db	82	;'R'
  3556  00794F  20                 	db	32
  3557  007950  2D                 	db	45
  3558  007951  20                 	db	32
  3559  007952  55                 	db	85	;'U'
  3560  007953  6E                 	db	110	;'n'
  3561  007954  6B                 	db	107	;'k'
  3562  007955  6E                 	db	110	;'n'
  3563  007956  6F                 	db	111	;'o'
  3564  007957  77                 	db	119	;'w'
  3565  007958  6E                 	db	110	;'n'
  3566  007959  20                 	db	32
  3567  00795A  6D                 	db	109	;'m'
  3568  00795B  6F                 	db	111	;'o'
  3569  00795C  64                 	db	100	;'d'
  3570  00795D  65                 	db	101	;'e'
  3571  00795E  0D                 	db	13
  3572  00795F  0A                 	db	10
  3573  007960  00                 	db	0
  3574  007961                     STR_78:
  3575  007961  2D                 	db	45
  3576  007962  45                 	db	69	;'E'
  3577  007963  52                 	db	82	;'R'
  3578  007964  52                 	db	82	;'R'
  3579  007965  4F                 	db	79	;'O'
  3580  007966  52                 	db	82	;'R'
  3581  007967  20                 	db	32
  3582  007968  2D                 	db	45
  3583  007969  20                 	db	32
  3584  00796A  4E                 	db	78	;'N'
  3585  00796B  65                 	db	101	;'e'
  3586  00796C  65                 	db	101	;'e'
  3587  00796D  64                 	db	100	;'d'
  3588  00796E  20                 	db	32
  3589  00796F  61                 	db	97	;'a'
  3590  007970  20                 	db	32
  3591  007971  76                 	db	118	;'v'
  3592  007972  61                 	db	97	;'a'
  3593  007973  6C                 	db	108	;'l'
  3594  007974  75                 	db	117	;'u'
  3595  007975  65                 	db	101	;'e'
  3596  007976  0D                 	db	13
  3597  007977  0A                 	db	10
  3598  007978  00                 	db	0
  3599  007979                     STR_199:
  3600  007979  52                 	db	82	;'R'
  3601  00797A  65                 	db	101	;'e'
  3602  00797B  63                 	db	99	;'c'
  3603  00797C  65                 	db	101	;'e'
  3604  00797D  69                 	db	105	;'i'
  3605  00797E  76                 	db	118	;'v'
  3606  00797F  65                 	db	101	;'e'
  3607  007980  20                 	db	32
  3608  007981  45                 	db	69	;'E'
  3609  007982  72                 	db	114	;'r'
  3610  007983  72                 	db	114	;'r'
  3611  007984  6F                 	db	111	;'o'
  3612  007985  72                 	db	114	;'r'
  3613  007986  20                 	db	32
  3614  007987  43                 	db	67	;'C'
  3615  007988  6F                 	db	111	;'o'
  3616  007989  75                 	db	117	;'u'
  3617  00798A  6E                 	db	110	;'n'
  3618  00798B  74                 	db	116	;'t'
  3619  00798C  65                 	db	101	;'e'
  3620  00798D  72                 	db	114	;'r'
  3621  00798E  3A                 	db	58	;':'
  3622  00798F  20                 	db	32
  3623  007990  00                 	db	0
  3624  007991                     STR_184:
  3625  007991  55                 	db	85	;'U'
  3626  007992  41                 	db	65	;'A'
  3627  007993  52                 	db	82	;'R'
  3628  007994  54                 	db	84	;'T'
  3629  007995  20                 	db	32
  3630  007996  52                 	db	82	;'R'
  3631  007997  65                 	db	101	;'e'
  3632  007998  63                 	db	99	;'c'
  3633  007999  65                 	db	101	;'e'
  3634  00799A  69                 	db	105	;'i'
  3635  00799B  76                 	db	118	;'v'
  3636  00799C  65                 	db	101	;'e'
  3637  00799D  20                 	db	32
  3638  00799E  6F                 	db	111	;'o'
  3639  00799F  76                 	db	118	;'v'
  3640  0079A0  65                 	db	101	;'e'
  3641  0079A1  72                 	db	114	;'r'
  3642  0079A2  72                 	db	114	;'r'
  3643  0079A3  75                 	db	117	;'u'
  3644  0079A4  6E                 	db	110	;'n'
  3645  0079A5  73                 	db	115	;'s'
  3646  0079A6  3A                 	db	58	;':'
  3647  0079A7  20                 	db	32
  3648  0079A8  00                 	db	0
  3649  0079A9                     STR_180:
  3650  0079A9  43                 	db	67	;'C'
  3651  0079AA  41                 	db	65	;'A'
  3652  0079AB  4E                 	db	78	;'N'
  3653  0079AC  20                 	db	32
  3654  0079AD  54                 	db	84	;'T'
  3655  0079AE  72                 	db	114	;'r'
  3656  0079AF  61                 	db	97	;'a'
  3657  0079B0  6E                 	db	110	;'n'
  3658  0079B1  73                 	db	115	;'s'
  3659  0079B2  6D                 	db	109	;'m'
  3660  0079B3  69                 	db	105	;'i'
  3661  0079B4  74                 	db	116	;'t'
  3662  0079B5  20                 	db	32
  3663  0079B6  6F                 	db	111	;'o'
  3664  0079B7  76                 	db	118	;'v'
  3665  0079B8  65                 	db	101	;'e'
  3666  0079B9  72                 	db	114	;'r'
  3667  0079BA  72                 	db	114	;'r'
  3668  0079BB  75                 	db	117	;'u'
  3669  0079BC  6E                 	db	110	;'n'
  3670  0079BD  73                 	db	115	;'s'
  3671  0079BE  3A                 	db	58	;':'
  3672  0079BF  20                 	db	32
  3673  0079C0  00                 	db	0
  3674  0079C1                     STR_218:
  3675  0079C1  52                 	db	82	;'R'
  3676  0079C2  58                 	db	88	;'X'
  3677  0079C3  20                 	db	32
  3678  0079C4  2D                 	db	45
  3679  0079C5  20                 	db	32
  3680  0079C6  52                 	db	82	;'R'
  3681  0079C7  65                 	db	101	;'e'
  3682  0079C8  61                 	db	97	;'a'
  3683  0079C9  64                 	db	100	;'d'
  3684  0079CA  20                 	db	32
  3685  0079CB  43                 	db	67	;'C'
  3686  0079CC  41                 	db	65	;'A'
  3687  0079CD  4E                 	db	78	;'N'
  3688  0079CE  20                 	db	32
  3689  0079CF  66                 	db	102	;'f'
  3690  0079D0  72                 	db	114	;'r'
  3691  0079D1  61                 	db	97	;'a'
  3692  0079D2  6D                 	db	109	;'m'
  3693  0079D3  65                 	db	101	;'e'
  3694  0079D4  2E                 	db	46
  3695  0079D5  0D                 	db	13
  3696  0079D6  0A                 	db	10
  3697  0079D7  00                 	db	0
  3698  0079D8                     STR_176:
  3699  0079D8  43                 	db	67	;'C'
  3700  0079D9  41                 	db	65	;'A'
  3701  0079DA  4E                 	db	78	;'N'
  3702  0079DB  20                 	db	32
  3703  0079DC  52                 	db	82	;'R'
  3704  0079DD  65                 	db	101	;'e'
  3705  0079DE  63                 	db	99	;'c'
  3706  0079DF  65                 	db	101	;'e'
  3707  0079E0  69                 	db	105	;'i'
  3708  0079E1  76                 	db	118	;'v'
  3709  0079E2  65                 	db	101	;'e'
  3710  0079E3  20                 	db	32
  3711  0079E4  6F                 	db	111	;'o'
  3712  0079E5  76                 	db	118	;'v'
  3713  0079E6  65                 	db	101	;'e'
  3714  0079E7  72                 	db	114	;'r'
  3715  0079E8  72                 	db	114	;'r'
  3716  0079E9  75                 	db	117	;'u'
  3717  0079EA  6E                 	db	110	;'n'
  3718  0079EB  73                 	db	115	;'s'
  3719  0079EC  3A                 	db	58	;':'
  3720  0079ED  20                 	db	32
  3721  0079EE  00                 	db	0
  3722  0079EF                     STR_261:
  3723  0079EF  55                 	db	85	;'U'
  3724  0079F0  6E                 	db	110	;'n'
  3725  0079F1  6B                 	db	107	;'k'
  3726  0079F2  6E                 	db	110	;'n'
  3727  0079F3  6F                 	db	111	;'o'
  3728  0079F4  77                 	db	119	;'w'
  3729  0079F5  6E                 	db	110	;'n'
  3730  0079F6  20                 	db	32
  3731  0079F7  28                 	db	40
  3732  0079F8  56                 	db	86	;'V'
  3733  0079F9  65                 	db	101	;'e'
  3734  0079FA  72                 	db	114	;'r'
  3735  0079FB  62                 	db	98	;'b'
  3736  0079FC  6F                 	db	111	;'o'
  3737  0079FD  73                 	db	115	;'s'
  3738  0079FE  65                 	db	101	;'e'
  3739  0079FF  20                 	db	32
  3740  007A00  75                 	db	117	;'u'
  3741  007A01  73                 	db	115	;'s'
  3742  007A02  65                 	db	101	;'e'
  3743  007A03  64                 	db	100	;'d'
  3744  007A04  29                 	db	41
  3745  007A05  00                 	db	0
  3746  007A06                     STR_24:
  3747  007A06  2B                 	db	43
  3748  007A07  4F                 	db	79	;'O'
  3749  007A08  4B                 	db	75	;'K'
  3750  007A09  20                 	db	32
  3751  007A0A  2D                 	db	45
  3752  007A0B  20                 	db	32
  3753  007A0C  4C                 	db	76	;'L'
  3754  007A0D  6F                 	db	111	;'o'
  3755  007A0E  6F                 	db	111	;'o'
  3756  007A0F  70                 	db	112	;'p'
  3757  007A10  62                 	db	98	;'b'
  3758  007A11  61                 	db	97	;'a'
  3759  007A12  63                 	db	99	;'c'
  3760  007A13  6B                 	db	107	;'k'
  3761  007A14  20                 	db	32
  3762  007A15  6D                 	db	109	;'m'
  3763  007A16  6F                 	db	111	;'o'
  3764  007A17  64                 	db	100	;'d'
  3765  007A18  65                 	db	101	;'e'
  3766  007A19  0D                 	db	13
  3767  007A1A  0A                 	db	10
  3768  007A1B  00                 	db	0
  3769  007A1C                     STR_168:
  3770  007A1C  52                 	db	82	;'R'
  3771  007A1D  65                 	db	101	;'e'
  3772  007A1E  63                 	db	99	;'c'
  3773  007A1F  65                 	db	101	;'e'
  3774  007A20  69                 	db	105	;'i'
  3775  007A21  76                 	db	118	;'v'
  3776  007A22  65                 	db	101	;'e'
  3777  007A23  64                 	db	100	;'d'
  3778  007A24  20                 	db	32
  3779  007A25  43                 	db	67	;'C'
  3780  007A26  41                 	db	65	;'A'
  3781  007A27  4E                 	db	78	;'N'
  3782  007A28  20                 	db	32
  3783  007A29  66                 	db	102	;'f'
  3784  007A2A  72                 	db	114	;'r'
  3785  007A2B  61                 	db	97	;'a'
  3786  007A2C  6D                 	db	109	;'m'
  3787  007A2D  65                 	db	101	;'e'
  3788  007A2E  73                 	db	115	;'s'
  3789  007A2F  3A                 	db	58	;':'
  3790  007A30  20                 	db	32
  3791  007A31  00                 	db	0
  3792  007A32                     STR_172:
  3793  007A32  52                 	db	82	;'R'
  3794  007A33  65                 	db	101	;'e'
  3795  007A34  63                 	db	99	;'c'
  3796  007A35  65                 	db	101	;'e'
  3797  007A36  69                 	db	105	;'i'
  3798  007A37  76                 	db	118	;'v'
  3799  007A38  65                 	db	101	;'e'
  3800  007A39  64                 	db	100	;'d'
  3801  007A3A  20                 	db	32
  3802  007A3B  43                 	db	67	;'C'
  3803  007A3C  41                 	db	65	;'A'
  3804  007A3D  4E                 	db	78	;'N'
  3805  007A3E  20                 	db	32
  3806  007A3F  62                 	db	98	;'b'
  3807  007A40  79                 	db	121	;'y'
  3808  007A41  74                 	db	116	;'t'
  3809  007A42  65                 	db	101	;'e'
  3810  007A43  73                 	db	115	;'s'
  3811  007A44  3A                 	db	58	;':'
  3812  007A45  20                 	db	32
  3813  007A46  00                 	db	0
  3814  007A47                     STR_228:
  3815  007A47  4D                 	db	77	;'M'
  3816  007A48  41                 	db	65	;'A'
  3817  007A49  53                 	db	83	;'S'
  3818  007A4A  4B                 	db	75	;'K'
  3819  007A4B  20                 	db	32
  3820  007A4C  2D                 	db	45
  3821  007A4D  20                 	db	32
  3822  007A4E  53                 	db	83	;'S'
  3823  007A4F  65                 	db	101	;'e'
  3824  007A50  74                 	db	116	;'t'
  3825  007A51  20                 	db	32
  3826  007A52  6D                 	db	109	;'m'
  3827  007A53  61                 	db	97	;'a'
  3828  007A54  73                 	db	115	;'s'
  3829  007A55  6B                 	db	107	;'k'
  3830  007A56  20                 	db	32
  3831  007A57  2E                 	db	46
  3832  007A58  0D                 	db	13
  3833  007A59  0A                 	db	10
  3834  007A5A  00                 	db	0
  3835  007A5B                     STR_133:
  3836  007A5B  4A                 	db	74	;'J'
  3837  007A5C  46                 	db	70	;'F'
  3838  007A5D  72                 	db	114	;'r'
  3839  007A5E  61                 	db	97	;'a'
  3840  007A5F  6E                 	db	110	;'n'
  3841  007A60  6B                 	db	107	;'k'
  3842  007A61  66                 	db	102	;'f'
  3843  007A62  75                 	db	117	;'u'
  3844  007A63  72                 	db	114	;'r'
  3845  007A64  74                 	db	116	;'t'
  3846  007A65  20                 	db	32
  3847  007A66  52                 	db	82	;'R'
  3848  007A67  53                 	db	83	;'S'
  3849  007A68  2D                 	db	45
  3850  007A69  32                 	db	50	;'2'
  3851  007A6A  33                 	db	51	;'3'
  3852  007A6B  32                 	db	50	;'2'
  3853  007A6C  0D                 	db	13
  3854  007A6D  0A                 	db	10
  3855  007A6E  00                 	db	0
  3856  007A6F                     STR_26:
  3857  007A6F  2B                 	db	43
  3858  007A70  4F                 	db	79	;'O'
  3859  007A71  4B                 	db	75	;'K'
  3860  007A72  20                 	db	32
  3861  007A73  2D                 	db	45
  3862  007A74  20                 	db	32
  3863  007A75  43                 	db	67	;'C'
  3864  007A76  6C                 	db	108	;'l'
  3865  007A77  6F                 	db	111	;'o'
  3866  007A78  73                 	db	115	;'s'
  3867  007A79  65                 	db	101	;'e'
  3868  007A7A  64                 	db	100	;'d'
  3869  007A7B  20                 	db	32
  3870  007A7C  6D                 	db	109	;'m'
  3871  007A7D  6F                 	db	111	;'o'
  3872  007A7E  64                 	db	100	;'d'
  3873  007A7F  65                 	db	101	;'e'
  3874  007A80  0D                 	db	13
  3875  007A81  0A                 	db	10
  3876  007A82  00                 	db	0
  3877  007A83                     STR_21:
  3878  007A83  2B                 	db	43
  3879  007A84  4F                 	db	79	;'O'
  3880  007A85  4B                 	db	75	;'K'
  3881  007A86  20                 	db	32
  3882  007A87  2D                 	db	45
  3883  007A88  20                 	db	32
  3884  007A89  4E                 	db	78	;'N'
  3885  007A8A  6F                 	db	111	;'o'
  3886  007A8B  72                 	db	114	;'r'
  3887  007A8C  6D                 	db	109	;'m'
  3888  007A8D  61                 	db	97	;'a'
  3889  007A8E  6C                 	db	108	;'l'
  3890  007A8F  20                 	db	32
  3891  007A90  6D                 	db	109	;'m'
  3892  007A91  6F                 	db	111	;'o'
  3893  007A92  64                 	db	100	;'d'
  3894  007A93  65                 	db	101	;'e'
  3895  007A94  0D                 	db	13
  3896  007A95  0A                 	db	10
  3897  007A96  00                 	db	0
  3898  007A97                     STR_22:
  3899  007A97  2B                 	db	43
  3900  007A98  4F                 	db	79	;'O'
  3901  007A99  4B                 	db	75	;'K'
  3902  007A9A  20                 	db	32
  3903  007A9B  2D                 	db	45
  3904  007A9C  20                 	db	32
  3905  007A9D  53                 	db	83	;'S'
  3906  007A9E  69                 	db	105	;'i'
  3907  007A9F  6C                 	db	108	;'l'
  3908  007AA0  65                 	db	101	;'e'
  3909  007AA1  6E                 	db	110	;'n'
  3910  007AA2  74                 	db	116	;'t'
  3911  007AA3  20                 	db	32
  3912  007AA4  6D                 	db	109	;'m'
  3913  007AA5  6F                 	db	111	;'o'
  3914  007AA6  64                 	db	100	;'d'
  3915  007AA7  65                 	db	101	;'e'
  3916  007AA8  0D                 	db	13
  3917  007AA9  0A                 	db	10
  3918  007AAA  00                 	db	0
  3919  007AAB                     STR_82:
  3920  007AAB  49                 	db	73	;'I'
  3921  007AAC  6E                 	db	110	;'n'
  3922  007AAD  66                 	db	102	;'f'
  3923  007AAE  6F                 	db	111	;'o'
  3924  007AAF  20                 	db	32
  3925  007AB0  66                 	db	102	;'f'
  3926  007AB1  6F                 	db	111	;'o'
  3927  007AB2  72                 	db	114	;'r'
  3928  007AB3  20                 	db	32
  3929  007AB4  6E                 	db	110	;'n'
  3930  007AB5  6F                 	db	111	;'o'
  3931  007AB6  64                 	db	100	;'d'
  3932  007AB7  65                 	db	101	;'e'
  3933  007AB8  20                 	db	32
  3934  007AB9  69                 	db	105	;'i'
  3935  007ABA  64                 	db	100	;'d'
  3936  007ABB  20                 	db	32
  3937  007ABC  3D                 	db	61	;'='
  3938  007ABD  20                 	db	32
  3939  007ABE  00                 	db	0
  3940  007ABF                     STR_250:
  3941  007ABF  46                 	db	70	;'F'
  3942  007AC0  69                 	db	105	;'i'
  3943  007AC1  72                 	db	114	;'r'
  3944  007AC2  6D                 	db	109	;'m'
  3945  007AC3  77                 	db	119	;'w'
  3946  007AC4  61                 	db	97	;'a'
  3947  007AC5  72                 	db	114	;'r'
  3948  007AC6  65                 	db	101	;'e'
  3949  007AC7  20                 	db	32
  3950  007AC8  76                 	db	118	;'v'
  3951  007AC9  65                 	db	101	;'e'
  3952  007ACA  72                 	db	114	;'r'
  3953  007ACB  73                 	db	115	;'s'
  3954  007ACC  69                 	db	105	;'i'
  3955  007ACD  6F                 	db	111	;'o'
  3956  007ACE  6E                 	db	110	;'n'
  3957  007ACF  20                 	db	32
  3958  007AD0  3D                 	db	61	;'='
  3959  007AD1  20                 	db	32
  3960  007AD2  00                 	db	0
  3961  007AD3                     STR_23:
  3962  007AD3  2B                 	db	43
  3963  007AD4  4F                 	db	79	;'O'
  3964  007AD5  4B                 	db	75	;'K'
  3965  007AD6  20                 	db	32
  3966  007AD7  2D                 	db	45
  3967  007AD8  20                 	db	32
  3968  007AD9  53                 	db	83	;'S'
  3969  007ADA  6C                 	db	108	;'l'
  3970  007ADB  65                 	db	101	;'e'
  3971  007ADC  65                 	db	101	;'e'
  3972  007ADD  70                 	db	112	;'p'
  3973  007ADE  20                 	db	32
  3974  007ADF  6D                 	db	109	;'m'
  3975  007AE0  6F                 	db	111	;'o'
  3976  007AE1  64                 	db	100	;'d'
  3977  007AE2  65                 	db	101	;'e'
  3978  007AE3  0D                 	db	13
  3979  007AE4  0A                 	db	10
  3980  007AE5  00                 	db	0
  3981  007AE6                     STR_27:
  3982  007AE6  2B                 	db	43
  3983  007AE7  4F                 	db	79	;'O'
  3984  007AE8  4B                 	db	75	;'K'
  3985  007AE9  20                 	db	32
  3986  007AEA  2D                 	db	45
  3987  007AEB  20                 	db	32
  3988  007AEC  42                 	db	66	;'B'
  3989  007AED  69                 	db	105	;'i'
  3990  007AEE  74                 	db	116	;'t'
  3991  007AEF  73                 	db	115	;'s'
  3992  007AF0  20                 	db	32
  3993  007AF1  6D                 	db	109	;'m'
  3994  007AF2  6F                 	db	111	;'o'
  3995  007AF3  64                 	db	100	;'d'
  3996  007AF4  65                 	db	101	;'e'
  3997  007AF5  0D                 	db	13
  3998  007AF6  0A                 	db	10
  3999  007AF7  00                 	db	0
  4000  007AF8                     STR_40:
  4001  007AF8  2B                 	db	43
  4002  007AF9  4F                 	db	79	;'O'
  4003  007AFA  4B                 	db	75	;'K'
  4004  007AFB  20                 	db	32
  4005  007AFC  2D                 	db	45
  4006  007AFD  20                 	db	32
  4007  007AFE  6E                 	db	110	;'n'
  4008  007AFF  6F                 	db	111	;'o'
  4009  007B00  20                 	db	32
  4010  007B01  65                 	db	101	;'e'
  4011  007B02  76                 	db	118	;'v'
  4012  007B03  65                 	db	101	;'e'
  4013  007B04  6E                 	db	110	;'n'
  4014  007B05  74                 	db	116	;'t'
  4015  007B06  73                 	db	115	;'s'
  4016  007B07  0D                 	db	13
  4017  007B08  0A                 	db	10
  4018  007B09  00                 	db	0
  4019  007B0A                     STR_160:
  4020  007B0A  53                 	db	83	;'S'
  4021  007B0B  65                 	db	101	;'e'
  4022  007B0C  6E                 	db	110	;'n'
  4023  007B0D  74                 	db	116	;'t'
  4024  007B0E  20                 	db	32
  4025  007B0F  43                 	db	67	;'C'
  4026  007B10  41                 	db	65	;'A'
  4027  007B11  4E                 	db	78	;'N'
  4028  007B12  20                 	db	32
  4029  007B13  66                 	db	102	;'f'
  4030  007B14  72                 	db	114	;'r'
  4031  007B15  61                 	db	97	;'a'
  4032  007B16  6D                 	db	109	;'m'
  4033  007B17  65                 	db	101	;'e'
  4034  007B18  73                 	db	115	;'s'
  4035  007B19  3A                 	db	58	;':'
  4036  007B1A  20                 	db	32
  4037  007B1B  00                 	db	0
  4038  007B1C                     STR_263:
  4039  007B1C  30                 	db	48	;'0'
  4040  007B1D  31                 	db	49	;'1'
  4041  007B1E  32                 	db	50	;'2'
  4042  007B1F  33                 	db	51	;'3'
  4043  007B20  34                 	db	52	;'4'
  4044  007B21  35                 	db	53	;'5'
  4045  007B22  36                 	db	54	;'6'
  4046  007B23  37                 	db	55	;'7'
  4047  007B24  38                 	db	56	;'8'
  4048  007B25  39                 	db	57	;'9'
  4049  007B26  41                 	db	65	;'A'
  4050  007B27  42                 	db	66	;'B'
  4051  007B28  43                 	db	67	;'C'
  4052  007B29  44                 	db	68	;'D'
  4053  007B2A  45                 	db	69	;'E'
  4054  007B2B  46                 	db	70	;'F'
  4055  007B2C  00                 	db	0
  4056  007B2D                     STR_264:
  4057  007B2D  30                 	db	48	;'0'
  4058  007B2E  31                 	db	49	;'1'
  4059  007B2F  32                 	db	50	;'2'
  4060  007B30  33                 	db	51	;'3'
  4061  007B31  34                 	db	52	;'4'
  4062  007B32  35                 	db	53	;'5'
  4063  007B33  36                 	db	54	;'6'
  4064  007B34  37                 	db	55	;'7'
  4065  007B35  38                 	db	56	;'8'
  4066  007B36  39                 	db	57	;'9'
  4067  007B37  61                 	db	97	;'a'
  4068  007B38  62                 	db	98	;'b'
  4069  007B39  63                 	db	99	;'c'
  4070  007B3A  64                 	db	100	;'d'
  4071  007B3B  65                 	db	101	;'e'
  4072  007B3C  66                 	db	102	;'f'
  4073  007B3D  00                 	db	0
  4074  007B3E                     STR_164:
  4075  007B3E  53                 	db	83	;'S'
  4076  007B3F  65                 	db	101	;'e'
  4077  007B40  6E                 	db	110	;'n'
  4078  007B41  74                 	db	116	;'t'
  4079  007B42  20                 	db	32
  4080  007B43  43                 	db	67	;'C'
  4081  007B44  41                 	db	65	;'A'
  4082  007B45  4E                 	db	78	;'N'
  4083  007B46  20                 	db	32
  4084  007B47  62                 	db	98	;'b'
  4085  007B48  79                 	db	121	;'y'
  4086  007B49  74                 	db	116	;'t'
  4087  007B4A  65                 	db	101	;'e'
  4088  007B4B  73                 	db	115	;'s'
  4089  007B4C  3A                 	db	58	;':'
  4090  007B4D  20                 	db	32
  4091  007B4E  00                 	db	0
  4092  007B4F                     STR_242:
  4093  007B4F  20                 	db	32
  4094  007B50  6E                 	db	110	;'n'
  4095  007B51  6F                 	db	111	;'o'
  4096  007B52  64                 	db	100	;'d'
  4097  007B53  65                 	db	101	;'e'
  4098  007B54  73                 	db	115	;'s'
  4099  007B55  20                 	db	32
  4100  007B56  66                 	db	102	;'f'
  4101  007B57  6F                 	db	111	;'o'
  4102  007B58  75                 	db	117	;'u'
  4103  007B59  6E                 	db	110	;'n'
  4104  007B5A  64                 	db	100	;'d'
  4105  007B5B  0D                 	db	13
  4106  007B5C  0A                 	db	10
  4107  007B5D  00                 	db	0
  4108  007B5E                     STR_55:
  4109  007B5E  56                 	db	86	;'V'
  4110  007B5F  61                 	db	97	;'a'
  4111  007B60  6C                 	db	108	;'l'
  4112  007B61  75                 	db	117	;'u'
  4113  007B62  65                 	db	101	;'e'
  4114  007B63  20                 	db	32
  4115  007B64  66                 	db	102	;'f'
  4116  007B65  6F                 	db	111	;'o'
  4117  007B66  72                 	db	114	;'r'
  4118  007B67  20                 	db	32
  4119  007B68  72                 	db	114	;'r'
  4120  007B69  65                 	db	101	;'e'
  4121  007B6A  67                 	db	103	;'g'
  4122  007B6B  20                 	db	32
  4123  007B6C  00                 	db	0
  4124  007B6D                     STR_248:
  4125  007B6D  4D                 	db	77	;'M'
  4126  007B6E  44                 	db	68	;'D'
  4127  007B6F  46                 	db	70	;'F'
  4128  007B70  20                 	db	32
  4129  007B71  3D                 	db	61	;'='
  4130  007B72  20                 	db	32
  4131  007B73  68                 	db	104	;'h'
  4132  007B74  74                 	db	116	;'t'
  4133  007B75  74                 	db	116	;'t'
  4134  007B76  70                 	db	112	;'p'
  4135  007B77  3A                 	db	58	;':'
  4136  007B78  2F                 	db	47
  4137  007B79  2F                 	db	47
  4138  007B7A  00                 	db	0
  4139  007B7B                     STR_258:
  4140  007B7B  56                 	db	86	;'V'
  4141  007B7C  53                 	db	83	;'S'
  4142  007B7D  43                 	db	67	;'C'
  4143  007B7E  50                 	db	80	;'P'
  4144  007B7F  20                 	db	32
  4145  007B80  44                 	db	68	;'D'
  4146  007B81  72                 	db	114	;'r'
  4147  007B82  69                 	db	105	;'i'
  4148  007B83  76                 	db	118	;'v'
  4149  007B84  65                 	db	101	;'e'
  4150  007B85  72                 	db	114	;'r'
  4151  007B86  00                 	db	0
  4152  007B87                     STR_118:
  4153  007B87  52                 	db	82	;'R'
  4154  007B88  57                 	db	87	;'W'
  4155  007B89  54                 	db	84	;'T'
  4156  007B8A  49                 	db	73	;'I'
  4157  007B8B  4D                 	db	77	;'M'
  4158  007B8C  45                 	db	69	;'E'
  4159  007B8D  4F                 	db	79	;'O'
  4160  007B8E  55                 	db	85	;'U'
  4161  007B8F  54                 	db	84	;'T'
  4162  007B90  20                 	db	32
  4163  007B91  00                 	db	0
  4164  007B92                     STR_158:
  4165  007B92  2C                 	db	44
  4166  007B93  44                 	db	68	;'D'
  4167  007B94  61                 	db	97	;'a'
  4168  007B95  74                 	db	116	;'t'
  4169  007B96  61                 	db	97	;'a'
  4170  007B97  3D                 	db	61	;'='
  4171  007B98  6E                 	db	110	;'n'
  4172  007B99  6F                 	db	111	;'o'
  4173  007B9A  6E                 	db	110	;'n'
  4174  007B9B  65                 	db	101	;'e'
  4175  007B9C  00                 	db	0
  4176  007B9D                     STR_254:
  4177  007B9D  56                 	db	86	;'V'
  4178  007B9E  65                 	db	101	;'e'
  4179  007B9F  72                 	db	114	;'r'
  4180  007BA0  73                 	db	115	;'s'
  4181  007BA1  69                 	db	105	;'i'
  4182  007BA2  6F                 	db	111	;'o'
  4183  007BA3  6E                 	db	110	;'n'
  4184  007BA4  3A                 	db	58	;':'
  4185  007BA5  20                 	db	32
  4186  007BA6  00                 	db	0
  4187  007BA7                     STR_260:
  4188  007BA7  56                 	db	86	;'V'
  4189  007BA8  53                 	db	83	;'S'
  4190  007BA9  43                 	db	67	;'C'
  4191  007BAA  50                 	db	80	;'P'
  4192  007BAB  20                 	db	32
  4193  007BAC  4E                 	db	78	;'N'
  4194  007BAD  6F                 	db	111	;'o'
  4195  007BAE  64                 	db	100	;'d'
  4196  007BAF  65                 	db	101	;'e'
  4197  007BB0  00                 	db	0
  4198  007BB1                     STR_259:
  4199  007BB1  53                 	db	83	;'S'
  4200  007BB2  4C                 	db	76	;'L'
  4201  007BB3  20                 	db	32
  4202  007BB4  44                 	db	68	;'D'
  4203  007BB5  72                 	db	114	;'r'
  4204  007BB6  69                 	db	105	;'i'
  4205  007BB7  76                 	db	118	;'v'
  4206  007BB8  65                 	db	101	;'e'
  4207  007BB9  72                 	db	114	;'r'
  4208  007BBA  00                 	db	0
  4209  007BBB                     STR_120:
  4210  007BBB  53                 	db	83	;'S'
  4211  007BBC  54                 	db	84	;'T'
  4212  007BBD  41                 	db	65	;'A'
  4213  007BBE  52                 	db	82	;'R'
  4214  007BBF  54                 	db	84	;'T'
  4215  007BC0  49                 	db	73	;'I'
  4216  007BC1  46                 	db	70	;'F'
  4217  007BC2  20                 	db	32
  4218  007BC3  00                 	db	0
  4219  007BC4                     STR_148:
  4220  007BC4  2C                 	db	44
  4221  007BC5  6E                 	db	110	;'n'
  4222  007BC6  6F                 	db	111	;'o'
  4223  007BC7  64                 	db	100	;'d'
  4224  007BC8  65                 	db	101	;'e'
  4225  007BC9  69                 	db	105	;'i'
  4226  007BCA  64                 	db	100	;'d'
  4227  007BCB  3D                 	db	61	;'='
  4228  007BCC  00                 	db	0
  4229  007BCD                     STR_14:
  4230  007BCD  4C                 	db	76	;'L'
  4231  007BCE  4F                 	db	79	;'O'
  4232  007BCF  4F                 	db	79	;'O'
  4233  007BD0  50                 	db	80	;'P'
  4234  007BD1  42                 	db	66	;'B'
  4235  007BD2  41                 	db	65	;'A'
  4236  007BD3  43                 	db	67	;'C'
  4237  007BD4  4B                 	db	75	;'K'
  4238  007BD5  00                 	db	0
  4239  007BD6                     STR_134:
  4240  007BD6  56                 	db	86	;'V'
  4241  007BD7  31                 	db	49	;'1'
  4242  007BD8  30                 	db	48	;'0'
  4243  007BD9  31                 	db	49	;'1'
  4244  007BDA  31                 	db	49	;'1'
  4245  007BDB  0D                 	db	13
  4246  007BDC  0A                 	db	10
  4247  007BDD  00                 	db	0
  4248  007BDE                     STR_135:
  4249  007BDE  4E                 	db	78	;'N'
  4250  007BDF  31                 	db	49	;'1'
  4251  007BE0  39                 	db	57	;'9'
  4252  007BE1  37                 	db	55	;'7'
  4253  007BE2  37                 	db	55	;'7'
  4254  007BE3  0D                 	db	13
  4255  007BE4  0A                 	db	10
  4256  007BE5  00                 	db	0
  4257  007BE6                     STR_243:
  4258  007BE6  47                 	db	71	;'G'
  4259  007BE7  55                 	db	85	;'U'
  4260  007BE8  49                 	db	73	;'I'
  4261  007BE9  44                 	db	68	;'D'
  4262  007BEA  20                 	db	32
  4263  007BEB  3D                 	db	61	;'='
  4264  007BEC  20                 	db	32
  4265  007BED  00                 	db	0
  4266  007BEE                     STR_128:
  4267  007BEE  46                 	db	70	;'F'
  4268  007BEF  49                 	db	73	;'I'
  4269  007BF0  4C                 	db	76	;'L'
  4270  007BF1  54                 	db	84	;'T'
  4271  007BF2  45                 	db	69	;'E'
  4272  007BF3  52                 	db	82	;'R'
  4273  007BF4  20                 	db	32
  4274  007BF5  00                 	db	0
  4275  007BF6                     STR_142:
  4276  007BF6  2C                 	db	44
  4277  007BF7  63                 	db	99	;'c'
  4278  007BF8  6C                 	db	108	;'l'
  4279  007BF9  61                 	db	97	;'a'
  4280  007BFA  73                 	db	115	;'s'
  4281  007BFB  73                 	db	115	;'s'
  4282  007BFC  3D                 	db	61	;'='
  4283  007BFD  00                 	db	0
  4284  007BFE                     STR_122:
  4285  007BFE  56                 	db	86	;'V'
  4286  007BFF  45                 	db	69	;'E'
  4287  007C00  52                 	db	82	;'R'
  4288  007C01  42                 	db	66	;'B'
  4289  007C02  4F                 	db	79	;'O'
  4290  007C03  53                 	db	83	;'S'
  4291  007C04  45                 	db	69	;'E'
  4292  007C05  00                 	db	0
  4293  007C06                     STR_116:
  4294  007C06  44                 	db	68	;'D'
  4295  007C07  45                 	db	69	;'E'
  4296  007C08  43                 	db	67	;'C'
  4297  007C09  49                 	db	73	;'I'
  4298  007C0A  4D                 	db	77	;'M'
  4299  007C0B  41                 	db	65	;'A'
  4300  007C0C  4C                 	db	76	;'L'
  4301  007C0D  00                 	db	0
  4302  007C0E                     STR_18:
  4303  007C0E  56                 	db	86	;'V'
  4304  007C0F  45                 	db	69	;'E'
  4305  007C10  52                 	db	82	;'R'
  4306  007C11  53                 	db	83	;'S'
  4307  007C12  49                 	db	73	;'I'
  4308  007C13  4F                 	db	79	;'O'
  4309  007C14  4E                 	db	78	;'N'
  4310  007C15  00                 	db	0
  4311  007C16                     STR_177:
  4312  007C16  30                 	db	48	;'0'
  4313  007C17  78                 	db	120	;'x'
  4314  007C18  25                 	db	37
  4315  007C19  30                 	db	48	;'0'
  4316  007C1A  38                 	db	56	;'8'
  4317  007C1B  6C                 	db	108	;'l'
  4318  007C1C  58                 	db	88	;'X'
  4319  007C1D  00                 	db	0
  4320  007C1E                     STR_257:
  4321  007C1E  56                 	db	86	;'V'
  4322  007C1F  65                 	db	101	;'e'
  4323  007C20  72                 	db	114	;'r'
  4324  007C21  62                 	db	98	;'b'
  4325  007C22  6F                 	db	111	;'o'
  4326  007C23  73                 	db	115	;'s'
  4327  007C24  65                 	db	101	;'e'
  4328  007C25  00                 	db	0
  4329  007C26                     STR_256:
  4330  007C26  4D                 	db	77	;'M'
  4331  007C27  6F                 	db	111	;'o'
  4332  007C28  64                 	db	100	;'d'
  4333  007C29  65                 	db	101	;'e'
  4334  007C2A  3A                 	db	58	;':'
  4335  007C2B  20                 	db	32
  4336  007C2C  00                 	db	0
  4337  007C2D                     STR_154:
  4338  007C2D  2C                 	db	44
  4339  007C2E  44                 	db	68	;'D'
  4340  007C2F  61                 	db	97	;'a'
  4341  007C30  74                 	db	116	;'t'
  4342  007C31  61                 	db	97	;'a'
  4343  007C32  3D                 	db	61	;'='
  4344  007C33  00                 	db	0
  4345  007C34                     STR_145:
  4346  007C34  2C                 	db	44
  4347  007C35  74                 	db	116	;'t'
  4348  007C36  79                 	db	121	;'y'
  4349  007C37  70                 	db	112	;'p'
  4350  007C38  65                 	db	101	;'e'
  4351  007C39  3D                 	db	61	;'='
  4352  007C3A  00                 	db	0
  4353  007C3B                     STR_151:
  4354  007C3B  2C                 	db	44
  4355  007C3C  73                 	db	115	;'s'
  4356  007C3D  69                 	db	105	;'i'
  4357  007C3E  7A                 	db	122	;'z'
  4358  007C3F  65                 	db	101	;'e'
  4359  007C40  3D                 	db	61	;'='
  4360  007C41  00                 	db	0
  4361  007C42                     STR_139:
  4362  007C42  3C                 	db	60	;'<'
  4363  007C43  50                 	db	80	;'P'
  4364  007C44  72                 	db	114	;'r'
  4365  007C45  69                 	db	105	;'i'
  4366  007C46  6F                 	db	111	;'o'
  4367  007C47  3D                 	db	61	;'='
  4368  007C48  00                 	db	0
  4369  007C49                     STR_20:
  4370  007C49  49                 	db	73	;'I'
  4371  007C4A  46                 	db	70	;'F'
  4372  007C4B  4D                 	db	77	;'M'
  4373  007C4C  4F                 	db	79	;'O'
  4374  007C4D  44                 	db	68	;'D'
  4375  007C4E  45                 	db	69	;'E'
  4376  007C4F  00                 	db	0
  4377  007C50                     STR_16:
  4378  007C50  4C                 	db	76	;'L'
  4379  007C51  49                 	db	73	;'I'
  4380  007C52  53                 	db	83	;'S'
  4381  007C53  54                 	db	84	;'T'
  4382  007C54  45                 	db	69	;'E'
  4383  007C55  4E                 	db	78	;'N'
  4384  007C56  00                 	db	0
  4385  007C57                     STR_87:
  4386  007C57  46                 	db	70	;'F'
  4387  007C58  49                 	db	73	;'I'
  4388  007C59  4C                 	db	76	;'L'
  4389  007C5A  54                 	db	84	;'T'
  4390  007C5B  45                 	db	69	;'E'
  4391  007C5C  52                 	db	82	;'R'
  4392  007C5D  00                 	db	0
  4393  007C5E                     STR_10:
  4394  007C5E  53                 	db	83	;'S'
  4395  007C5F  49                 	db	73	;'I'
  4396  007C60  4C                 	db	76	;'L'
  4397  007C61  45                 	db	69	;'E'
  4398  007C62  4E                 	db	78	;'N'
  4399  007C63  54                 	db	84	;'T'
  4400  007C64  00                 	db	0
  4401  007C65                     STR_56:
  4402  007C65  30                 	db	48	;'0'
  4403  007C66  78                 	db	120	;'x'
  4404  007C67  25                 	db	37
  4405  007C68  30                 	db	48	;'0'
  4406  007C69  32                 	db	50	;'2'
  4407  007C6A  58                 	db	88	;'X'
  4408  007C6B  00                 	db	0
  4409  007C6C                     STR_143:
  4410  007C6C  30                 	db	48	;'0'
  4411  007C6D  78                 	db	120	;'x'
  4412  007C6E  25                 	db	37
  4413  007C6F  30                 	db	48	;'0'
  4414  007C70  34                 	db	52	;'4'
  4415  007C71  58                 	db	88	;'X'
  4416  007C72  00                 	db	0
  4417  007C73                     STR_161:
  4418  007C73  30                 	db	48	;'0'
  4419  007C74  78                 	db	120	;'x'
  4420  007C75  25                 	db	37
  4421  007C76  30                 	db	48	;'0'
  4422  007C77  38                 	db	56	;'8'
  4423  007C78  58                 	db	88	;'X'
  4424  007C79  00                 	db	0
  4425  007C7A                     STR_136:
  4426  007C7A  46                 	db	70	;'F'
  4427  007C7B  30                 	db	48	;'0'
  4428  007C7C  30                 	db	48	;'0'
  4429  007C7D  0D                 	db	13
  4430  007C7E  0A                 	db	10
  4431  007C7F  00                 	db	0
  4432  007C80                     STR_9:
  4433  007C80  2B                 	db	43
  4434  007C81  4F                 	db	79	;'O'
  4435  007C82  4B                 	db	75	;'K'
  4436  007C83  0D                 	db	13
  4437  007C84  0A                 	db	10
  4438  007C85  00                 	db	0
  4439  007C86                     STR_121:
  4440  007C86  4D                 	db	77	;'M'
  4441  007C87  4F                 	db	79	;'O'
  4442  007C88  44                 	db	68	;'D'
  4443  007C89  45                 	db	69	;'E'
  4444  007C8A  20                 	db	32
  4445  007C8B  00                 	db	0
  4446  007C8C                     STR_129:
  4447  007C8C  4D                 	db	77	;'M'
  4448  007C8D  41                 	db	65	;'A'
  4449  007C8E  53                 	db	83	;'S'
  4450  007C8F  4B                 	db	75	;'K'
  4451  007C90  20                 	db	32
  4452  007C91  00                 	db	0
  4453  007C92                     STR_12:
  4454  007C92  43                 	db	67	;'C'
  4455  007C93  4C                 	db	76	;'L'
  4456  007C94  4F                 	db	79	;'O'
  4457  007C95  53                 	db	83	;'S'
  4458  007C96  45                 	db	69	;'E'
  4459  007C97  00                 	db	0
  4460  007C98                     STR_126:
  4461  007C98  53                 	db	83	;'S'
  4462  007C99  4C                 	db	76	;'L'
  4463  007C9A  43                 	db	67	;'C'
  4464  007C9B  41                 	db	65	;'A'
  4465  007C9C  4E                 	db	78	;'N'
  4466  007C9D  00                 	db	0
  4467  007C9E                     STR_113:
  4468  007C9E  53                 	db	83	;'S'
  4469  007C9F  45                 	db	69	;'E'
  4470  007CA0  54                 	db	84	;'T'
  4471  007CA1  20                 	db	32
  4472  007CA2  00                 	db	0
  4473  007CA3                     STR_47:
  4474  007CA3  46                 	db	70	;'F'
  4475  007CA4  49                 	db	73	;'I'
  4476  007CA5  4E                 	db	78	;'N'
  4477  007CA6  44                 	db	68	;'D'
  4478  007CA7  00                 	db	0
  4479  007CA8                     STR_49:
  4480  007CA8  52                 	db	82	;'R'
  4481  007CA9  52                 	db	82	;'R'
  4482  007CAA  45                 	db	69	;'E'
  4483  007CAB  47                 	db	71	;'G'
  4484  007CAC  00                 	db	0
  4485  007CAD                     STR_72:
  4486  007CAD  57                 	db	87	;'W'
  4487  007CAE  52                 	db	82	;'R'
  4488  007CAF  45                 	db	69	;'E'
  4489  007CB0  47                 	db	71	;'G'
  4490  007CB1  00                 	db	0
  4491  007CB2                     STR_100:
  4492  007CB2  4D                 	db	77	;'M'
  4493  007CB3  41                 	db	65	;'A'
  4494  007CB4  53                 	db	83	;'S'
  4495  007CB5  4B                 	db	75	;'K'
  4496  007CB6  00                 	db	0
  4497  007CB7                     STR_8:
  4498  007CB7  4F                 	db	79	;'O'
  4499  007CB8  50                 	db	80	;'P'
  4500  007CB9  45                 	db	69	;'E'
  4501  007CBA  4E                 	db	78	;'N'
  4502  007CBB  00                 	db	0
  4503  007CBC                     STR_81:
  4504  007CBC  49                 	db	73	;'I'
  4505  007CBD  4E                 	db	78	;'N'
  4506  007CBE  46                 	db	70	;'F'
  4507  007CBF  4F                 	db	79	;'O'
  4508  007CC0  00                 	db	0
  4509  007CC1                     STR_124:
  4510  007CC1  56                 	db	86	;'V'
  4511  007CC2  53                 	db	83	;'S'
  4512  007CC3  43                 	db	67	;'C'
  4513  007CC4  50                 	db	80	;'P'
  4514  007CC5  00                 	db	0
  4515  007CC6                     STR_45:
  4516  007CC6  48                 	db	72	;'H'
  4517  007CC7  45                 	db	69	;'E'
  4518  007CC8  4C                 	db	76	;'L'
  4519  007CC9  50                 	db	80	;'P'
  4520  007CCA  00                 	db	0
  4521  007CCB                     STR_41:
  4522  007CCB  53                 	db	83	;'S'
  4523  007CCC  54                 	db	84	;'T'
  4524  007CCD  41                 	db	65	;'A'
  4525  007CCE  54                 	db	84	;'T'
  4526  007CCF  00                 	db	0
  4527  007CD0                     STR_6:
  4528  007CD0  42                 	db	66	;'B'
  4529  007CD1  4F                 	db	79	;'O'
  4530  007CD2  4F                 	db	79	;'O'
  4531  007CD3  54                 	db	84	;'T'
  4532  007CD4  00                 	db	0
  4533  007CD5                     STR_159:
  4534  007CD5  3E                 	db	62	;'>'
  4535  007CD6  0D                 	db	13
  4536  007CD7  0A                 	db	10
  4537  007CD8  00                 	db	0
  4538  007CD9                     STR_43:
  4539  007CD9  45                 	db	69	;'E'
  4540  007CDA  52                 	db	82	;'R'
  4541  007CDB  52                 	db	82	;'R'
  4542  007CDC  00                 	db	0
  4543  007CDD                     STR_114:
  4544  007CDD  48                 	db	72	;'H'
  4545  007CDE  45                 	db	69	;'E'
  4546  007CDF  58                 	db	88	;'X'
  4547  007CE0  00                 	db	0
  4548  007CE1                     STR_162:
  4549  007CE1  25                 	db	37
  4550  007CE2  6C                 	db	108	;'l'
  4551  007CE3  75                 	db	117	;'u'
  4552  007CE4  00                 	db	0
  4553  007CE5                     STR_245:
  4554  007CE5  2D                 	db	45
  4555  007CE6  2D                 	db	45
  4556  007CE7  00                 	db	0
  4557  007CE8                     STR_38:
  4558  007CE8  52                 	db	82	;'R'
  4559  007CE9  58                 	db	88	;'X'
  4560  007CEA  00                 	db	0
  4561  007CEB                     STR_29:
  4562  007CEB  54                 	db	84	;'T'
  4563  007CEC  58                 	db	88	;'X'
  4564  007CED  00                 	db	0
  4565  007CEE                     STR_57:
  4566  007CEE  25                 	db	37
  4567  007CEF  64                 	db	100	;'d'
  4568  007CF0  00                 	db	0
  4569  007CF1                     STR_138:
  4570  007CF1  07                 	db	7
  4571  007CF2  00                 	db	0
  4572  007CF3                     STR_137:
  4573  007CF3  0D                 	db	13
  4574  007CF4  00                 	db	0
  4575  007CF5                     STR_30:
  4576  007CF5  2C                 	db	44
  4577  007CF6  00                 	db	0
  4578  007CF7                     STR_252:
  4579  007CF7  2E                 	db	46
  4580  007CF8  00                 	db	0
  4581  007CF9                     STR_244:
  4582  007CF9  30                 	db	48	;'0'
  4583  007CFA  00                 	db	0
  4584  007CFB                     STR_246:
  4585  007CFB  3A                 	db	58	;':'
  4586  007CFC  00                 	db	0
  4587  007CFD                     STR_251:
  4588  007CFD  3F                 	db	63	;'?'
  4589  007CFE  00                 	db	0
  4590  007CFF                     __end_of__stringdata:
  4591                           	opt stack 0
  4592                           
  4593                           ; #config settings
  4594  007CFF  00                 	db	0	; dummy byte at the end
  4595  0000                     tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           indf0	equ	0xFEF
  4603                           fsr0h	equ	0xFEA
  4604                           fsr0l	equ	0xFE9
  4605                           wreg	equ	0xFE8
  4606                           indf1	equ	0xFE7
  4607                           postinc1	equ	0xFE6
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619                           	psect	nvBANK1
  4620  0001E8                     __pnvBANK1:
  4621                           	opt stack 0
  4622  0001E8                     _caps:
  4623                           	opt stack 0
  4624  0001E8                     	ds	2
  4625  0001EA                     ___DCDelay:
  4626                           	opt stack 0
  4627  0001EA                     	ds	1
  4628                           tblptru	equ	0xFF8
  4629                           tblptrh	equ	0xFF7
  4630                           tblptrl	equ	0xFF6
  4631                           tablat	equ	0xFF5
  4632                           prodh	equ	0xFF4
  4633                           prodl	equ	0xFF3
  4634                           intcon	equ	0xFF2
  4635                           indf0	equ	0xFEF
  4636                           fsr0h	equ	0xFEA
  4637                           fsr0l	equ	0xFE9
  4638                           wreg	equ	0xFE8
  4639                           indf1	equ	0xFE7
  4640                           postinc1	equ	0xFE6
  4641                           postdec1	equ	0xFE5
  4642                           fsr1h	equ	0xFE2
  4643                           fsr1l	equ	0xFE1
  4644                           indf2	equ	0xFDF
  4645                           postinc2	equ	0xFDE
  4646                           postdec2	equ	0xFDD
  4647                           plusw2	equ	0xFDB
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652                           	psect	cinit
  4653  001E2E                     __pcinit:
  4654                           	opt stack 0
  4655  001E2E                     start_initialization:
  4656                           	opt stack 0
  4657  001E2E                     __initialization:
  4658                           	opt stack 0
  4659                           
  4660                           ; Clear objects allocated to BIGRAM (494 bytes)
  4661  001E2E  EE04  F000         	lfsr	0,__pbssBIGRAM
  4662  001E32  EE11 F0EE          	lfsr	1,494
  4663  001E36                     clear_0:
  4664  001E36  6AEE               	clrf	postinc0,c
  4665  001E38  50E5               	movf	postdec1,w,c
  4666  001E3A  50E1               	movf	fsr1l,w,c
  4667  001E3C  E1FC               	bnz	clear_0
  4668  001E3E  50E2               	movf	fsr1h,w,c
  4669  001E40  E1FA               	bnz	clear_0
  4670                           
  4671                           ; Clear objects allocated to BANK3 (256 bytes)
  4672  001E42  EE03  F000         	lfsr	0,__pbssBANK3
  4673  001E46  EE11 F000          	lfsr	1,256
  4674  001E4A                     clear_1:
  4675  001E4A  6AEE               	clrf	postinc0,c
  4676  001E4C  50E5               	movf	postdec1,w,c
  4677  001E4E  50E1               	movf	fsr1l,w,c
  4678  001E50  E1FC               	bnz	clear_1
  4679  001E52  50E2               	movf	fsr1h,w,c
  4680  001E54  E1FA               	bnz	clear_1
  4681                           
  4682                           ; Clear objects allocated to BANK2 (128 bytes)
  4683  001E56  EE02  F000         	lfsr	0,__pbssBANK2
  4684  001E5A  0E80               	movlw	128
  4685  001E5C                     clear_2:
  4686  001E5C  6AEE               	clrf	postinc0,c
  4687  001E5E  06E8               	decf	wreg,f,c
  4688  001E60  E1FD               	bnz	clear_2
  4689                           
  4690                           ; Clear objects allocated to BANK1 (232 bytes)
  4691  001E62  EE01  F000         	lfsr	0,__pbssBANK1
  4692  001E66  0EE8               	movlw	232
  4693  001E68                     clear_3:
  4694  001E68  6AEE               	clrf	postinc0,c
  4695  001E6A  06E8               	decf	wreg,f,c
  4696  001E6C  E1FD               	bnz	clear_3
  4697                           
  4698                           ; Clear objects allocated to BANK0 (10 bytes)
  4699  001E6E  EE00  F0E3         	lfsr	0,__pbssBANK0
  4700  001E72  0E0A               	movlw	10
  4701  001E74                     clear_4:
  4702  001E74  6AEE               	clrf	postinc0,c
  4703  001E76  06E8               	decf	wreg,f,c
  4704  001E78  E1FD               	bnz	clear_4
  4705                           
  4706                           ; Clear objects allocated to COMRAM (29 bytes)
  4707  001E7A  EE00  F023         	lfsr	0,__pbssCOMRAM
  4708  001E7E  0E1D               	movlw	29
  4709  001E80                     clear_5:
  4710  001E80  6AEE               	clrf	postinc0,c
  4711  001E82  06E8               	decf	wreg,f,c
  4712  001E84  E1FD               	bnz	clear_5
  4713  001E86                     end_of_initialization:
  4714                           	opt stack 0
  4715  001E86                     __end_of__initialization:
  4716                           	opt stack 0
  4717  001E86  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4718  001E88  6EF8               	movwf	tblptru,c
  4719  001E8A  0100               	movlb	0
  4720  001E8C  EF45  F01D         	goto	_main	;jump to C main() function
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           indf0	equ	0xFEF
  4729                           postinc0	equ	0xFEE
  4730                           fsr0h	equ	0xFEA
  4731                           fsr0l	equ	0xFE9
  4732                           wreg	equ	0xFE8
  4733                           indf1	equ	0xFE7
  4734                           postinc1	equ	0xFE6
  4735                           postdec1	equ	0xFE5
  4736                           fsr1h	equ	0xFE2
  4737                           fsr1l	equ	0xFE1
  4738                           indf2	equ	0xFDF
  4739                           postinc2	equ	0xFDE
  4740                           postdec2	equ	0xFDD
  4741                           plusw2	equ	0xFDB
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746                           	psect	bssCOMRAM
  4747  000023                     __pbssCOMRAM:
  4748                           	opt stack 0
  4749  000023                     _timekeeper:
  4750                           	opt stack 0
  4751  000023                     	ds	4
  4752  000027                     _made_table:
  4753                           	opt stack 0
  4754  000027                     	ds	2
  4755  000029                     _status_led_cnt:
  4756                           	opt stack 0
  4757  000029                     	ds	2
  4758  00002B                     strtok@sp:
  4759                           	opt stack 0
  4760  00002B                     	ds	2
  4761  00002D                     _USART_Status:
  4762                           	opt stack 0
  4763  00002D                     	ds	1
  4764  00002E                     __ECANRxFilterHitInfo:
  4765                           	opt stack 0
  4766  00002E                     	ds	1
  4767  00002F                     __IT_INT_MASK:
  4768                           	opt stack 0
  4769  00002F                     	ds	1
  4770  000030                     __IT_SAVE_BSR:
  4771                           	opt stack 0
  4772  000030                     	ds	1
  4773  000031                     __IT_SAVE_STATUS:
  4774                           	opt stack 0
  4775  000031                     	ds	1
  4776  000032                     __IT_SAVE_WREG:
  4777                           	opt stack 0
  4778  000032                     	ds	1
  4779  000033                     ___DCByte:
  4780                           	opt stack 0
  4781  000033                     	ds	1
  4782  000034                     _bDLE:
  4783                           	opt stack 0
  4784  000034                     	ds	1
  4785  000035                     _bInitiated:
  4786                           	opt stack 0
  4787  000035                     	ds	1
  4788  000036                     _fifo_canrxcount:
  4789                           	opt stack 0
  4790  000036                     	ds	1
  4791  000037                     _ledFunctionality:
  4792                           	opt stack 0
  4793  000037                     	ds	1
  4794  000038                     _nTimeStamp:
  4795                           	opt stack 0
  4796  000038                     	ds	1
  4797  000039                     _sequencyno:
  4798                           	opt stack 0
  4799  000039                     	ds	1
  4800  00003A                     _stateVscpDriver:
  4801                           	opt stack 0
  4802  00003A                     	ds	1
  4803  00003B                     _vscpClass:
  4804                           	opt stack 0
  4805  00003B                     	ds	2
  4806  00003D                     _c:
  4807                           	opt stack 0
  4808  00003D                     	ds	1
  4809  00003E                     _dlc:
  4810                           	opt stack 0
  4811  00003E                     	ds	1
  4812  00003F                     _flags:
  4813                           	opt stack 0
  4814  00003F                     	ds	1
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           indf0	equ	0xFEF
  4823                           postinc0	equ	0xFEE
  4824                           fsr0h	equ	0xFEA
  4825                           fsr0l	equ	0xFE9
  4826                           wreg	equ	0xFE8
  4827                           indf1	equ	0xFE7
  4828                           postinc1	equ	0xFE6
  4829                           postdec1	equ	0xFE5
  4830                           fsr1h	equ	0xFE2
  4831                           fsr1l	equ	0xFE1
  4832                           indf2	equ	0xFDF
  4833                           postinc2	equ	0xFDE
  4834                           postdec2	equ	0xFDD
  4835                           plusw2	equ	0xFDB
  4836                           fsr2h	equ	0xFDA
  4837                           fsr2l	equ	0xFD9
  4838                           status	equ	0xFD8
  4839                           
  4840                           	psect	bssBANK0
  4841  0000E3                     __pbssBANK0:
  4842                           	opt stack 0
  4843  0000E3                     _bHex:
  4844                           	opt stack 0
  4845  0000E3                     	ds	1
  4846  0000E4                     _bOpen:
  4847                           	opt stack 0
  4848  0000E4                     	ds	1
  4849  0000E5                     _bSilent:
  4850                           	opt stack 0
  4851  0000E5                     	ds	1
  4852  0000E6                     _mode:
  4853                           	opt stack 0
  4854  0000E6                     	ds	1
  4855  0000E7                     _pos:
  4856                           	opt stack 0
  4857  0000E7                     	ds	1
  4858  0000E8                     _rwtimeout:
  4859                           	opt stack 0
  4860  0000E8                     	ds	1
  4861  0000E9                     _vscpNodeId:
  4862                           	opt stack 0
  4863  0000E9                     	ds	1
  4864  0000EA                     _vscpPriority:
  4865                           	opt stack 0
  4866  0000EA                     	ds	1
  4867  0000EB                     _vscpSize:
  4868                           	opt stack 0
  4869  0000EB                     	ds	1
  4870  0000EC                     _vscpType:
  4871                           	opt stack 0
  4872  0000EC                     	ds	1
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           intcon	equ	0xFF2
  4880                           indf0	equ	0xFEF
  4881                           postinc0	equ	0xFEE
  4882                           fsr0h	equ	0xFEA
  4883                           fsr0l	equ	0xFE9
  4884                           wreg	equ	0xFE8
  4885                           indf1	equ	0xFE7
  4886                           postinc1	equ	0xFE6
  4887                           postdec1	equ	0xFE5
  4888                           fsr1h	equ	0xFE2
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           plusw2	equ	0xFDB
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898                           	psect	bssBANK1
  4899  000100                     __pbssBANK1:
  4900                           	opt stack 0
  4901  000100                     _can_receiveOverruns:
  4902                           	opt stack 0
  4903  000100                     	ds	4
  4904  000104                     _can_transmitOverruns:
  4905                           	opt stack 0
  4906  000104                     	ds	4
  4907  000108                     _cntRxBytes:
  4908                           	opt stack 0
  4909  000108                     	ds	4
  4910  00010C                     _cntRxFrames:
  4911                           	opt stack 0
  4912  00010C                     	ds	4
  4913  000110                     _cntTxBytes:
  4914                           	opt stack 0
  4915  000110                     	ds	4
  4916  000114                     _cntTxFrames:
  4917                           	opt stack 0
  4918  000114                     	ds	4
  4919  000118                     _timer:
  4920                           	opt stack 0
  4921  000118                     	ds	4
  4922  00011C                     _uart_receiveOverruns:
  4923                           	opt stack 0
  4924  00011C                     	ds	4
  4925  000120                     _uart_transmitOverruns:
  4926                           	opt stack 0
  4927  000120                     	ds	4
  4928  000124                     _cmdbuf:
  4929                           	opt stack 0
  4930  000124                     	ds	80
  4931  000174                     _wrkbuf:
  4932                           	opt stack 0
  4933  000174                     	ds	80
  4934  0001C4                     _canInputFifo:
  4935                           	opt stack 0
  4936  0001C4                     	ds	8
  4937  0001CC                     _data:
  4938                           	opt stack 0
  4939  0001CC                     	ds	8
  4940  0001D4                     _serialInputFifo:
  4941                           	opt stack 0
  4942  0001D4                     	ds	8
  4943  0001DC                     _vscpData:
  4944                           	opt stack 0
  4945  0001DC                     	ds	8
  4946  0001E4                     _id:
  4947                           	opt stack 0
  4948  0001E4                     	ds	4
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           intcon	equ	0xFF2
  4956                           indf0	equ	0xFEF
  4957                           postinc0	equ	0xFEE
  4958                           fsr0h	equ	0xFEA
  4959                           fsr0l	equ	0xFE9
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           postinc1	equ	0xFE6
  4963                           postdec1	equ	0xFE5
  4964                           fsr1h	equ	0xFE2
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           plusw2	equ	0xFDB
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974                           	psect	bssBANK2
  4975  000200                     __pbssBANK2:
  4976                           	opt stack 0
  4977  000200                     _serial_inputBuffer:
  4978                           	opt stack 0
  4979  000200                     	ds	128
  4980                           tblptru	equ	0xFF8
  4981                           tblptrh	equ	0xFF7
  4982                           tblptrl	equ	0xFF6
  4983                           tablat	equ	0xFF5
  4984                           prodh	equ	0xFF4
  4985                           prodl	equ	0xFF3
  4986                           intcon	equ	0xFF2
  4987                           indf0	equ	0xFEF
  4988                           postinc0	equ	0xFEE
  4989                           fsr0h	equ	0xFEA
  4990                           fsr0l	equ	0xFE9
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postinc1	equ	0xFE6
  4994                           postdec1	equ	0xFE5
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           indf2	equ	0xFDF
  4998                           postinc2	equ	0xFDE
  4999                           postdec2	equ	0xFDD
  5000                           plusw2	equ	0xFDB
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005                           	psect	bssBANK3
  5006  000300                     __pbssBANK3:
  5007                           	opt stack 0
  5008  000300                     _crc8_table:
  5009                           	opt stack 0
  5010  000300                     	ds	256
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           intcon	equ	0xFF2
  5018                           indf0	equ	0xFEF
  5019                           postinc0	equ	0xFEE
  5020                           fsr0h	equ	0xFEA
  5021                           fsr0l	equ	0xFE9
  5022                           wreg	equ	0xFE8
  5023                           indf1	equ	0xFE7
  5024                           postinc1	equ	0xFE6
  5025                           postdec1	equ	0xFE5
  5026                           fsr1h	equ	0xFE2
  5027                           fsr1l	equ	0xFE1
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           plusw2	equ	0xFDB
  5032                           fsr2h	equ	0xFDA
  5033                           fsr2l	equ	0xFD9
  5034                           status	equ	0xFD8
  5035                           
  5036                           	psect	bssBIGRAM
  5037  000400                     __pbssBIGRAM:
  5038                           	opt stack 0
  5039  000400                     _can_inputBuffer:
  5040                           	opt stack 0
  5041  000400                     	ds	494
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           indf0	equ	0xFEF
  5050                           postinc0	equ	0xFEE
  5051                           fsr0h	equ	0xFEA
  5052                           fsr0l	equ	0xFE9
  5053                           wreg	equ	0xFE8
  5054                           indf1	equ	0xFE7
  5055                           postinc1	equ	0xFE6
  5056                           postdec1	equ	0xFE5
  5057                           fsr1h	equ	0xFE2
  5058                           fsr1l	equ	0xFE1
  5059                           indf2	equ	0xFDF
  5060                           postinc2	equ	0xFDE
  5061                           postdec2	equ	0xFDD
  5062                           plusw2	equ	0xFDB
  5063                           fsr2h	equ	0xFDA
  5064                           fsr2l	equ	0xFD9
  5065                           status	equ	0xFD8
  5066                           
  5067                           	psect	cstackBANK2
  5068  000280                     __pcstackBANK2:
  5069                           	opt stack 0
  5070  000280                     doModeVerbose@id:
  5071                           	opt stack 0
  5072                           
  5073                           ; 4 bytes @ 0x0
  5074  000280                     	ds	4
  5075  000284                     doModeVerbose@preg:
  5076                           	opt stack 0
  5077                           
  5078                           ; 2 bytes @ 0x4
  5079  000284                     	ds	2
  5080  000286                     doModeVerbose@preg_1169:
  5081                           	opt stack 0
  5082                           
  5083                           ; 2 bytes @ 0x6
  5084  000286                     	ds	2
  5085  000288                     doModeVerbose@filter_class:
  5086                           	opt stack 0
  5087                           
  5088                           ; 2 bytes @ 0x8
  5089  000288                     	ds	2
  5090  00028A                     doModeVerbose@mask_class:
  5091                           	opt stack 0
  5092                           
  5093                           ; 2 bytes @ 0xA
  5094  00028A                     	ds	2
  5095  00028C                     doModeVerbose@nodeid:
  5096                           	opt stack 0
  5097                           
  5098                           ; 1 bytes @ 0xC
  5099  00028C                     	ds	1
  5100  00028D                     doModeVerbose@nodeid_1161:
  5101                           	opt stack 0
  5102                           
  5103                           ; 1 bytes @ 0xD
  5104  00028D                     	ds	1
  5105  00028E                     doModeVerbose@filter_priority:
  5106                           	opt stack 0
  5107                           
  5108                           ; 1 bytes @ 0xE
  5109  00028E                     	ds	1
  5110  00028F                     doModeVerbose@filter_type:
  5111                           	opt stack 0
  5112                           
  5113                           ; 1 bytes @ 0xF
  5114  00028F                     	ds	1
  5115  000290                     doModeVerbose@filter_nodeid:
  5116                           	opt stack 0
  5117                           
  5118                           ; 1 bytes @ 0x10
  5119  000290                     	ds	1
  5120  000291                     doModeVerbose@mask_priority:
  5121                           	opt stack 0
  5122                           
  5123                           ; 1 bytes @ 0x11
  5124  000291                     	ds	1
  5125  000292                     doModeVerbose@mask_type:
  5126                           	opt stack 0
  5127                           
  5128                           ; 1 bytes @ 0x12
  5129  000292                     	ds	1
  5130  000293                     doModeVerbose@mask_nodeid:
  5131                           	opt stack 0
  5132                           
  5133                           ; 1 bytes @ 0x13
  5134  000293                     	ds	1
  5135  000294                     _doModeVerbose$1129:
  5136                           	opt stack 0
  5137                           
  5138                           ; 2 bytes @ 0x14
  5139  000294                     	ds	2
  5140  000296                     _doModeVerbose$1141:
  5141                           	opt stack 0
  5142                           
  5143                           ; 2 bytes @ 0x16
  5144  000296                     	ds	2
  5145  000298                     _doModeVerbose$1146:
  5146                           	opt stack 0
  5147                           
  5148                           ; 2 bytes @ 0x18
  5149  000298                     	ds	2
  5150  00029A                     _doModeVerbose$1152:
  5151                           	opt stack 0
  5152                           
  5153                           ; 2 bytes @ 0x1A
  5154  00029A                     	ds	2
  5155  00029C                     _doModeVerbose$1156:
  5156                           	opt stack 0
  5157                           
  5158                           ; 2 bytes @ 0x1C
  5159  00029C                     	ds	2
  5160  00029E                     _doModeVerbose$1181:
  5161                           	opt stack 0
  5162                           
  5163                           ; 2 bytes @ 0x1E
  5164  00029E                     	ds	2
  5165  0002A0                     doModeVerbose@rv:
  5166                           	opt stack 0
  5167                           
  5168                           ; 1 bytes @ 0x20
  5169  0002A0                     	ds	1
  5170  0002A1                     doModeVerbose@page_1162:
  5171                           	opt stack 0
  5172                           
  5173                           ; 1 bytes @ 0x21
  5174  0002A1                     	ds	1
  5175  0002A2                     doModeVerbose@reg_1163:
  5176                           	opt stack 0
  5177                           
  5178                           ; 1 bytes @ 0x22
  5179  0002A2                     	ds	1
  5180  0002A3                     doModeVerbose@id_1222:
  5181                           	opt stack 0
  5182                           
  5183                           ; 4 bytes @ 0x23
  5184  0002A3                     	ds	4
  5185  0002A7                     doModeVerbose@filterno:
  5186                           	opt stack 0
  5187                           
  5188                           ; 1 bytes @ 0x27
  5189  0002A7                     	ds	1
  5190  0002A8                     doModeVerbose@maskno:
  5191                           	opt stack 0
  5192                           
  5193                           ; 1 bytes @ 0x28
  5194  0002A8                     	ds	1
  5195  0002A9                     doModeVerbose@i:
  5196                           	opt stack 0
  5197                           
  5198                           ; 1 bytes @ 0x29
  5199  0002A9                     	ds	1
  5200  0002AA                     doModeVerbose@value_1164:
  5201                           	opt stack 0
  5202                           
  5203                           ; 1 bytes @ 0x2A
  5204  0002AA                     	ds	1
  5205  0002AB                     doModeVerbose@count:
  5206                           	opt stack 0
  5207                           
  5208                           ; 1 bytes @ 0x2B
  5209  0002AB                     	ds	1
  5210  0002AC                     doModeVerbose@c:
  5211                           	opt stack 0
  5212                           
  5213                           ; 1 bytes @ 0x2C
  5214  0002AC                     	ds	1
  5215  0002AD                     doModeVerbose@page:
  5216                           	opt stack 0
  5217                           
  5218                           ; 1 bytes @ 0x2D
  5219  0002AD                     	ds	1
  5220  0002AE                     doModeVerbose@reg:
  5221                           	opt stack 0
  5222                           
  5223                           ; 1 bytes @ 0x2E
  5224  0002AE                     	ds	1
  5225  0002AF                     doModeVerbose@nodeid_1176:
  5226                           	opt stack 0
  5227                           
  5228                           ; 1 bytes @ 0x2F
  5229  0002AF                     	ds	1
  5230  0002B0                     doModeVerbose@i_1111:
  5231                           	opt stack 0
  5232                           
  5233                           ; 1 bytes @ 0x30
  5234  0002B0                     	ds	1
  5235  0002B1                     doModeVerbose@value:
  5236                           	opt stack 0
  5237                           
  5238                           ; 1 bytes @ 0x31
  5239  0002B1                     	ds	1
  5240  0002B2                     doModeVerbose@p_1117:
  5241                           	opt stack 0
  5242                           
  5243                           ; 2 bytes @ 0x32
  5244  0002B2                     	ds	2
  5245  0002B4                     doModeVerbose@p_1165:
  5246                           	opt stack 0
  5247                           
  5248                           ; 2 bytes @ 0x34
  5249  0002B4                     	ds	2
  5250  0002B6                     doModeVerbose@ifmode:
  5251                           	opt stack 0
  5252                           
  5253                           ; 1 bytes @ 0x36
  5254  0002B6                     	ds	1
  5255  0002B7                     doModeVerbose@p:
  5256                           	opt stack 0
  5257                           
  5258                           ; 2 bytes @ 0x37
  5259  0002B7                     	ds	2
  5260  0002B9                     doModeVerbose@p_1190:
  5261                           	opt stack 0
  5262                           
  5263                           ; 2 bytes @ 0x39
  5264  0002B9                     	ds	2
  5265  0002BB                     doModeVerbose@p_1210:
  5266                           	opt stack 0
  5267                           
  5268                           ; 2 bytes @ 0x3B
  5269  0002BB                     	ds	2
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           indf0	equ	0xFEF
  5278                           postinc0	equ	0xFEE
  5279                           fsr0h	equ	0xFEA
  5280                           fsr0l	equ	0xFE9
  5281                           wreg	equ	0xFE8
  5282                           indf1	equ	0xFE7
  5283                           postinc1	equ	0xFE6
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           plusw2	equ	0xFDB
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295                           	psect	cstackBANK0
  5296  000060                     __pcstackBANK0:
  5297                           	opt stack 0
  5298  000060                     ?_fifo_init:
  5299                           	opt stack 0
  5300  000060                     ?_putsUSART:
  5301                           	opt stack 0
  5302  000060                     ?_Write_b_eep:
  5303                           	opt stack 0
  5304  000060                     ??_printBinary:
  5305  000060                     ?_setFilter:
  5306                           	opt stack 0
  5307  000060                     ?__CANIDToRegs:
  5308                           	opt stack 0
  5309  000060                     ?_fifo_read:
  5310                           	opt stack 0
  5311  000060                     ?_memset:
  5312                           	opt stack 0
  5313  000060                     ?_strcpy:
  5314                           	opt stack 0
  5315  000060                     ?_strchr:
  5316                           	opt stack 0
  5317  000060                     ?_memcpy:
  5318                           	opt stack 0
  5319  000060                     ?_strcat:
  5320                           	opt stack 0
  5321  000060                     ?_strichr:
  5322                           	opt stack 0
  5323  000060                     ?___lwdiv:
  5324                           	opt stack 0
  5325  000060                     ?___lwmod:
  5326                           	opt stack 0
  5327  000060                     ?___wmul:
  5328                           	opt stack 0
  5329  000060                     ?___lldiv:
  5330                           	opt stack 0
  5331  000060                     OpenUSART@config:
  5332                           	opt stack 0
  5333  000060                     _isdigit$2910:
  5334                           	opt stack 0
  5335  000060                     __CANIDToRegs@ptr:
  5336                           	opt stack 0
  5337  000060                     fifo_init@f:
  5338                           	opt stack 0
  5339  000060                     fifo_read@f:
  5340                           	opt stack 0
  5341  000060                     _init_crc8$1962:
  5342                           	opt stack 0
  5343  000060                     Write_b_eep@badd:
  5344                           	opt stack 0
  5345  000060                     WriteTimer0@timer:
  5346                           	opt stack 0
  5347  000060                     putsUSART@data:
  5348                           	opt stack 0
  5349  000060                     ___lwdiv@dividend:
  5350                           	opt stack 0
  5351  000060                     ___lwmod@dividend:
  5352                           	opt stack 0
  5353  000060                     memcpy@d1:
  5354                           	opt stack 0
  5355  000060                     memset@p1:
  5356                           	opt stack 0
  5357  000060                     strcat@to:
  5358                           	opt stack 0
  5359  000060                     strchr@ptr:
  5360                           	opt stack 0
  5361  000060                     strcpy@to:
  5362                           	opt stack 0
  5363  000060                     strlen@cp:
  5364                           	opt stack 0
  5365  000060                     ___wmul@multiplier:
  5366                           	opt stack 0
  5367  000060                     strichr@ptr:
  5368                           	opt stack 0
  5369  000060                     setFilter@val:
  5370                           	opt stack 0
  5371  000060                     ___lldiv@dividend:
  5372                           	opt stack 0
  5373                           
  5374                           ; 4 bytes @ 0x0
  5375  000060                     	ds	1
  5376  000061                     isdigit@c:
  5377                           	opt stack 0
  5378                           
  5379                           ; 1 bytes @ 0x1
  5380  000061                     	ds	1
  5381  000062                     ??_putsUSART:
  5382  000062                     ?_hexStringToBytes:
  5383                           	opt stack 0
  5384  000062                     ?_strnicmp:
  5385                           	opt stack 0
  5386  000062                     printBinary@value:
  5387                           	opt stack 0
  5388  000062                     Write_b_eep@bdat:
  5389                           	opt stack 0
  5390  000062                     fifo_init@buf:
  5391                           	opt stack 0
  5392  000062                     fifo_read@buf:
  5393                           	opt stack 0
  5394  000062                     init_crc8@j:
  5395                           	opt stack 0
  5396  000062                     hexStringToBytes@buf:
  5397                           	opt stack 0
  5398  000062                     ___lwdiv@divisor:
  5399                           	opt stack 0
  5400  000062                     ___lwmod@divisor:
  5401                           	opt stack 0
  5402  000062                     memcpy@s1:
  5403                           	opt stack 0
  5404  000062                     memset@c:
  5405                           	opt stack 0
  5406  000062                     strcat@from:
  5407                           	opt stack 0
  5408  000062                     strchr@chr:
  5409                           	opt stack 0
  5410  000062                     strcpy@from:
  5411                           	opt stack 0
  5412  000062                     strnicmp@s1:
  5413                           	opt stack 0
  5414  000062                     ___wmul@multiplicand:
  5415                           	opt stack 0
  5416  000062                     strichr@chr:
  5417                           	opt stack 0
  5418  000062                     __CANIDToRegs@val:
  5419                           	opt stack 0
  5420                           
  5421                           ; 4 bytes @ 0x2
  5422  000062                     	ds	1
  5423  000063                     printBinary@i:
  5424                           	opt stack 0
  5425                           
  5426                           ; 2 bytes @ 0x3
  5427  000063                     	ds	1
  5428  000064                     ??_setFilter:
  5429  000064                     ?_atoi:
  5430                           	opt stack 0
  5431  000064                     ?_strspn:
  5432                           	opt stack 0
  5433  000064                     ?_strcspn:
  5434                           	opt stack 0
  5435  000064                     init_crc8@crc:
  5436                           	opt stack 0
  5437  000064                     hexStringToBytes@size:
  5438                           	opt stack 0
  5439  000064                     ___lwdiv@counter:
  5440                           	opt stack 0
  5441  000064                     fifo_init@size:
  5442                           	opt stack 0
  5443  000064                     fifo_read@nbytes:
  5444                           	opt stack 0
  5445  000064                     atoi@s:
  5446                           	opt stack 0
  5447  000064                     memcpy@n:
  5448                           	opt stack 0
  5449  000064                     memset@n:
  5450                           	opt stack 0
  5451  000064                     strnicmp@s2:
  5452                           	opt stack 0
  5453  000064                     strcspn@s1:
  5454                           	opt stack 0
  5455  000064                     strspn@s1:
  5456                           	opt stack 0
  5457  000064                     ___lldiv@divisor:
  5458                           	opt stack 0
  5459                           
  5460                           ; 4 bytes @ 0x4
  5461  000064                     	ds	1
  5462  000065                     init_crc8@i:
  5463                           	opt stack 0
  5464  000065                     hexStringToBytes@inhex:
  5465                           	opt stack 0
  5466  000065                     ___lwdiv@quotient:
  5467                           	opt stack 0
  5468                           
  5469                           ; 2 bytes @ 0x5
  5470  000065                     	ds	1
  5471  000066                     ??_fifo_read:
  5472  000066                     ??_atoi:
  5473  000066                     __CANIDToRegs@type:
  5474                           	opt stack 0
  5475  000066                     memcpy@d:
  5476                           	opt stack 0
  5477  000066                     strnicmp@len:
  5478                           	opt stack 0
  5479  000066                     strcspn@s2:
  5480                           	opt stack 0
  5481  000066                     strspn@s2:
  5482                           	opt stack 0
  5483                           
  5484                           ; 2 bytes @ 0x6
  5485  000066                     	ds	1
  5486  000067                     ??_hexStringToBytes:
  5487  000067                     ?_crc8:
  5488                           	opt stack 0
  5489  000067                     ?_utoa:
  5490                           	opt stack 0
  5491  000067                     __CANIDToRegs@Value:
  5492                           	opt stack 0
  5493  000067                     crc8@crc:
  5494                           	opt stack 0
  5495  000067                     utoa@buf:
  5496                           	opt stack 0
  5497                           
  5498                           ; 2 bytes @ 0x7
  5499  000067                     	ds	1
  5500  000068                     ??_strnicmp:
  5501  000068                     ?_ECANSendMessage:
  5502                           	opt stack 0
  5503  000068                     atoi@sign:
  5504                           	opt stack 0
  5505  000068                     memcpy@s:
  5506                           	opt stack 0
  5507  000068                     strcspn@i:
  5508                           	opt stack 0
  5509  000068                     strspn@i:
  5510                           	opt stack 0
  5511  000068                     ECANSendMessage@id:
  5512                           	opt stack 0
  5513  000068                     ___lldiv@quotient:
  5514                           	opt stack 0
  5515                           
  5516                           ; 4 bytes @ 0x8
  5517  000068                     	ds	1
  5518  000069                     crc8@m:
  5519                           	opt stack 0
  5520  000069                     atoi@a:
  5521                           	opt stack 0
  5522  000069                     utoa@val:
  5523                           	opt stack 0
  5524                           
  5525                           ; 2 bytes @ 0x9
  5526  000069                     	ds	1
  5527  00006A                     ?_sendEscapedUartData:
  5528                           	opt stack 0
  5529  00006A                     ?_calcCRC:
  5530                           	opt stack 0
  5531  00006A                     ?_strtok:
  5532                           	opt stack 0
  5533  00006A                     setFilter@filter:
  5534                           	opt stack 0
  5535  00006A                     strnicmp@r:
  5536                           	opt stack 0
  5537  00006A                     sendEscapedUartData@pcrc:
  5538                           	opt stack 0
  5539  00006A                     calcCRC@p:
  5540                           	opt stack 0
  5541  00006A                     fifo_read@p:
  5542                           	opt stack 0
  5543  00006A                     hexStringToBytes@len:
  5544                           	opt stack 0
  5545  00006A                     strtok@s1:
  5546                           	opt stack 0
  5547                           
  5548                           ; 2 bytes @ 0xA
  5549  00006A                     	ds	1
  5550  00006B                     ?_stristr:
  5551                           	opt stack 0
  5552  00006B                     setFilter@sidh:
  5553                           	opt stack 0
  5554  00006B                     utoa@base:
  5555                           	opt stack 0
  5556  00006B                     stristr@s1:
  5557                           	opt stack 0
  5558                           
  5559                           ; 2 bytes @ 0xB
  5560  00006B                     	ds	1
  5561  00006C                     sendEscapedUartData@c:
  5562                           	opt stack 0
  5563  00006C                     calcCRC@len:
  5564                           	opt stack 0
  5565  00006C                     setFilter@sidl:
  5566                           	opt stack 0
  5567  00006C                     ___lldiv@counter:
  5568                           	opt stack 0
  5569  00006C                     ECANSendMessage@data:
  5570                           	opt stack 0
  5571  00006C                     fifo_read@i:
  5572                           	opt stack 0
  5573  00006C                     hexStringToBytes@p:
  5574                           	opt stack 0
  5575  00006C                     strtok@s2:
  5576                           	opt stack 0
  5577                           
  5578                           ; 2 bytes @ 0xC
  5579  00006C                     	ds	1
  5580  00006D                     ?_sendVSCPDriverCommandReply:
  5581                           	opt stack 0
  5582  00006D                     ?___llmod:
  5583                           	opt stack 0
  5584  00006D                     sendVSCPDriverErrorFrame@errorcode:
  5585                           	opt stack 0
  5586  00006D                     sendVSCPDriverAck@crc:
  5587                           	opt stack 0
  5588  00006D                     sendVSCPDriverNack@crc:
  5589                           	opt stack 0
  5590  00006D                     sendVSCPDriverCommandReply@cmdCode:
  5591                           	opt stack 0
  5592  00006D                     sendVSCPModeCapabilities@crc:
  5593                           	opt stack 0
  5594  00006D                     calcCRC@j:
  5595                           	opt stack 0
  5596  00006D                     setFilter@eidh:
  5597                           	opt stack 0
  5598  00006D                     utoa@v:
  5599                           	opt stack 0
  5600  00006D                     stristr@s2:
  5601                           	opt stack 0
  5602  00006D                     ___llmod@dividend:
  5603                           	opt stack 0
  5604                           
  5605                           ; 4 bytes @ 0xD
  5606  00006D                     	ds	1
  5607  00006E                     ?_getCANFrame:
  5608                           	opt stack 0
  5609  00006E                     sendVSCPDriverErrorFrame@crc:
  5610                           	opt stack 0
  5611  00006E                     sendVSCPDriverCommandReply@cmdReplyCode:
  5612                           	opt stack 0
  5613  00006E                     calcCRC@crc:
  5614                           	opt stack 0
  5615  00006E                     setFilter@eidl:
  5616                           	opt stack 0
  5617  00006E                     getCANFrame@pdlc:
  5618                           	opt stack 0
  5619  00006E                     ECANSendMessage@dataLen:
  5620                           	opt stack 0
  5621  00006E                     hexStringToBytes@i:
  5622                           	opt stack 0
  5623                           
  5624                           ; 2 bytes @ 0xE
  5625  00006E                     	ds	1
  5626  00006F                     sendVSCPDriverCommandReply@crc:
  5627                           	opt stack 0
  5628  00006F                     ECANSendMessage@msgFlags:
  5629                           	opt stack 0
  5630  00006F                     utoa@c:
  5631                           	opt stack 0
  5632  00006F                     getCANFrame@pdata:
  5633                           	opt stack 0
  5634                           
  5635                           ; 2 bytes @ 0xF
  5636  00006F                     	ds	1
  5637  000070                     ??_ECANSendMessage:
  5638  000070                     ?_itoa:
  5639                           	opt stack 0
  5640  000070                     itoa@buf:
  5641                           	opt stack 0
  5642                           
  5643                           ; 2 bytes @ 0x10
  5644  000070                     	ds	1
  5645  000071                     ?_getVSCPFrame:
  5646                           	opt stack 0
  5647  000071                     getVSCPFrame@pvscptype:
  5648                           	opt stack 0
  5649  000071                     ___llmod@divisor:
  5650                           	opt stack 0
  5651  000071                     receiveSendEventCANAL@data:
  5652                           	opt stack 0
  5653  000071                     receiveSendMultiEventCANAL@data:
  5654                           	opt stack 0
  5655  000071                     ECANSendMessage@pb:
  5656                           	opt stack 0
  5657                           
  5658                           ; 18 bytes @ 0x11
  5659  000071                     	ds	1
  5660  000072                     getVSCPFrame@pNodeId:
  5661                           	opt stack 0
  5662  000072                     itoa@val:
  5663                           	opt stack 0
  5664                           
  5665                           ; 2 bytes @ 0x12
  5666  000072                     	ds	1
  5667  000073                     getVSCPFrame@pPriority:
  5668                           	opt stack 0
  5669                           
  5670                           ; 1 bytes @ 0x13
  5671  000073                     	ds	1
  5672  000074                     getVSCPFrame@pSize:
  5673                           	opt stack 0
  5674  000074                     itoa@base:
  5675                           	opt stack 0
  5676                           
  5677                           ; 2 bytes @ 0x14
  5678  000074                     	ds	1
  5679  000075                     ?_sprintf:
  5680                           	opt stack 0
  5681  000075                     ?_ultoa:
  5682                           	opt stack 0
  5683  000075                     getVSCPFrame@pData:
  5684                           	opt stack 0
  5685  000075                     sprintf@sp:
  5686                           	opt stack 0
  5687  000075                     ultoa@buf:
  5688                           	opt stack 0
  5689                           
  5690                           ; 2 bytes @ 0x15
  5691  000075                     	ds	2
  5692  000077                     ??_getVSCPFrame:
  5693  000077                     sprintf@f:
  5694                           	opt stack 0
  5695  000077                     ultoa@val:
  5696                           	opt stack 0
  5697                           
  5698                           ; 4 bytes @ 0x17
  5699  000077                     	ds	1
  5700  000078                     printFirmwareVersion@wrkbuf:
  5701                           	opt stack 0
  5702                           
  5703                           ; 20 bytes @ 0x18
  5704  000078                     	ds	1
  5705  000079                     receiveSendEventCANAL@i:
  5706                           	opt stack 0
  5707  000079                     receiveSendMultiEventCANAL@msgcount:
  5708                           	opt stack 0
  5709                           
  5710                           ; 1 bytes @ 0x19
  5711  000079                     	ds	1
  5712  00007A                     receiveSendMultiEventCANAL@i:
  5713                           	opt stack 0
  5714  00007A                     receiveSendEventCANAL@id:
  5715                           	opt stack 0
  5716                           
  5717                           ; 4 bytes @ 0x1A
  5718  00007A                     	ds	1
  5719  00007B                     getVSCPFrame@pvscpclass:
  5720                           	opt stack 0
  5721  00007B                     ultoa@base:
  5722                           	opt stack 0
  5723  00007B                     receiveSendMultiEventCANAL@id:
  5724                           	opt stack 0
  5725                           
  5726                           ; 4 bytes @ 0x1B
  5727  00007B                     	ds	1
  5728  00007C                     getVSCPFrame@id:
  5729                           	opt stack 0
  5730                           
  5731                           ; 4 bytes @ 0x1C
  5732  00007C                     	ds	1
  5733  00007D                     ??_sprintf:
  5734  00007D                     ultoa@v:
  5735                           	opt stack 0
  5736                           
  5737                           ; 4 bytes @ 0x1D
  5738  00007D                     	ds	1
  5739  00007E                     receiveSendEventCANAL@dlc:
  5740                           	opt stack 0
  5741                           
  5742                           ; 1 bytes @ 0x1E
  5743  00007E                     	ds	1
  5744  00007F                     receiveSendEventCANAL@crc:
  5745                           	opt stack 0
  5746  00007F                     receiveSendMultiEventCANAL@dlc:
  5747                           	opt stack 0
  5748                           
  5749                           ; 1 bytes @ 0x1F
  5750  00007F                     	ds	1
  5751  000080                     receiveSendMultiEventCANAL@crc:
  5752                           	opt stack 0
  5753  000080                     sprintf@idx:
  5754                           	opt stack 0
  5755                           
  5756                           ; 1 bytes @ 0x20
  5757  000080                     	ds	1
  5758  000081                     receiveSendMultiEventCANAL@pos:
  5759                           	opt stack 0
  5760  000081                     ultoa@c:
  5761                           	opt stack 0
  5762  000081                     _sprintf$2024:
  5763                           	opt stack 0
  5764                           
  5765                           ; 2 bytes @ 0x21
  5766  000081                     	ds	1
  5767  000082                     ??_receiveSendEventSLCAN:
  5768                           
  5769                           ; 0 bytes @ 0x22
  5770  000082                     	ds	1
  5771  000083                     ECANSendMessage@mode:
  5772                           	opt stack 0
  5773  000083                     _sprintf$2025:
  5774                           	opt stack 0
  5775                           
  5776                           ; 2 bytes @ 0x23
  5777  000083                     	ds	1
  5778  000084                     ECANSendMessage@buffers:
  5779                           	opt stack 0
  5780                           
  5781                           ; 1 bytes @ 0x24
  5782  000084                     	ds	1
  5783  000085                     ECANSendMessage@j:
  5784                           	opt stack 0
  5785  000085                     _sprintf$2031:
  5786                           	opt stack 0
  5787  000085                     receiveSendEventSLCAN@id:
  5788                           	opt stack 0
  5789                           
  5790                           ; 4 bytes @ 0x25
  5791  000085                     	ds	1
  5792  000086                     ECANSendMessage@tempBSEL0:
  5793                           	opt stack 0
  5794                           
  5795                           ; 1 bytes @ 0x26
  5796  000086                     	ds	1
  5797  000087                     sprintf@ap:
  5798                           	opt stack 0
  5799  000087                     ECANSendMessage@tempPtr:
  5800                           	opt stack 0
  5801                           
  5802                           ; 2 bytes @ 0x27
  5803  000087                     	ds	1
  5804  000088                     sprintf@prec:
  5805                           	opt stack 0
  5806                           
  5807                           ; 2 bytes @ 0x28
  5808  000088                     	ds	1
  5809  000089                     receiveSendEventSLCAN@dlc:
  5810                           	opt stack 0
  5811  000089                     ECANSendMessage@temp:
  5812                           	opt stack 0
  5813                           
  5814                           ; 1 bytes @ 0x29
  5815  000089                     	ds	1
  5816  00008A                     ECANSendMessage@i:
  5817                           	opt stack 0
  5818  00008A                     receiveSendEventSLCAN@i:
  5819                           	opt stack 0
  5820  00008A                     sprintf@width:
  5821                           	opt stack 0
  5822                           
  5823                           ; 2 bytes @ 0x2A
  5824  00008A                     	ds	1
  5825  00008B                     ECANSendMessage@ptr:
  5826                           	opt stack 0
  5827                           
  5828                           ; 2 bytes @ 0x2B
  5829  00008B                     	ds	1
  5830  00008C                     sprintf@_val:
  5831                           	opt stack 0
  5832                           
  5833                           ; 4 bytes @ 0x2C
  5834  00008C                     	ds	1
  5835  00008D                     ?_sendCANFrame:
  5836                           	opt stack 0
  5837  00008D                     sendCANFrame@id:
  5838                           	opt stack 0
  5839                           
  5840                           ; 4 bytes @ 0x2D
  5841  00008D                     	ds	3
  5842  000090                     sprintf@c:
  5843                           	opt stack 0
  5844                           
  5845                           ; 1 bytes @ 0x30
  5846  000090                     	ds	1
  5847  000091                     sendCANFrame@dlc:
  5848                           	opt stack 0
  5849  000091                     sprintf@flag:
  5850                           	opt stack 0
  5851                           
  5852                           ; 2 bytes @ 0x31
  5853  000091                     	ds	1
  5854  000092                     sendCANFrame@pdata:
  5855                           	opt stack 0
  5856                           
  5857                           ; 2 bytes @ 0x32
  5858  000092                     	ds	1
  5859  000093                     ??_receivePrintEventVerbose:
  5860  000093                     _printStatistics$1371:
  5861                           	opt stack 0
  5862  000093                     _printErrors$1396:
  5863                           	opt stack 0
  5864                           
  5865                           ; 2 bytes @ 0x33
  5866  000093                     	ds	1
  5867  000094                     ??_doModeSLCAN:
  5868  000094                     ??_receiveVSCPModeCanalMsg:
  5869  000094                     ?_sendVSCPFrame:
  5870                           	opt stack 0
  5871  000094                     sendVSCPFrame@vscpclass:
  5872                           	opt stack 0
  5873                           
  5874                           ; 2 bytes @ 0x34
  5875  000094                     	ds	1
  5876  000095                     _printStatistics$1377:
  5877                           	opt stack 0
  5878  000095                     _printErrors$1402:
  5879                           	opt stack 0
  5880                           
  5881                           ; 2 bytes @ 0x35
  5882  000095                     	ds	1
  5883  000096                     sendVSCPFrame@vscptype:
  5884                           	opt stack 0
  5885                           
  5886                           ; 1 bytes @ 0x36
  5887  000096                     	ds	1
  5888  000097                     sendVSCPFrame@nodeid:
  5889                           	opt stack 0
  5890  000097                     _printStatistics$1383:
  5891                           	opt stack 0
  5892  000097                     _printErrors$1408:
  5893                           	opt stack 0
  5894                           
  5895                           ; 2 bytes @ 0x37
  5896  000097                     	ds	1
  5897  000098                     sendVSCPFrame@priority:
  5898                           	opt stack 0
  5899  000098                     _receivePrintEventVerbose$1278:
  5900                           	opt stack 0
  5901                           
  5902                           ; 2 bytes @ 0x38
  5903  000098                     	ds	1
  5904  000099                     sendVSCPFrame@size:
  5905                           	opt stack 0
  5906  000099                     _printStatistics$1389:
  5907                           	opt stack 0
  5908  000099                     _printErrors$1414:
  5909                           	opt stack 0
  5910                           
  5911                           ; 2 bytes @ 0x39
  5912  000099                     	ds	1
  5913  00009A                     _receivePrintEventVerbose$1283:
  5914                           	opt stack 0
  5915  00009A                     sendVSCPFrame@pData:
  5916                           	opt stack 0
  5917                           
  5918                           ; 2 bytes @ 0x3A
  5919  00009A                     	ds	1
  5920  00009B                     _printErrors$1420:
  5921                           	opt stack 0
  5922  00009B                     doModeSLCAN@id:
  5923                           	opt stack 0
  5924                           
  5925                           ; 4 bytes @ 0x3B
  5926  00009B                     	ds	1
  5927  00009C                     ??_sendVSCPFrame:
  5928  00009C                     _receivePrintEventVerbose$1288:
  5929                           	opt stack 0
  5930                           
  5931                           ; 2 bytes @ 0x3C
  5932  00009C                     	ds	1
  5933  00009D                     _printErrors$1429:
  5934                           	opt stack 0
  5935                           
  5936                           ; 2 bytes @ 0x3D
  5937  00009D                     	ds	1
  5938  00009E                     _receivePrintEventVerbose$1293:
  5939                           	opt stack 0
  5940                           
  5941                           ; 2 bytes @ 0x3E
  5942  00009E                     	ds	1
  5943  00009F                     doModeSLCAN@dlc:
  5944                           	opt stack 0
  5945                           
  5946                           ; 1 bytes @ 0x3F
  5947  00009F                     	ds	1
  5948  0000A0                     doModeSLCAN@c:
  5949                           	opt stack 0
  5950  0000A0                     _receivePrintEventVerbose$1298:
  5951                           	opt stack 0
  5952                           
  5953                           ; 2 bytes @ 0x40
  5954  0000A0                     	ds	1
  5955  0000A1                     doModeSLCAN@rv:
  5956                           	opt stack 0
  5957                           
  5958                           ; 1 bytes @ 0x41
  5959  0000A1                     	ds	1
  5960  0000A2                     _receivePrintEventVerbose$1303:
  5961                           	opt stack 0
  5962                           
  5963                           ; 2 bytes @ 0x42
  5964  0000A2                     	ds	2
  5965  0000A4                     receivePrintEventVerbose@i:
  5966                           	opt stack 0
  5967                           
  5968                           ; 1 bytes @ 0x44
  5969  0000A4                     	ds	4
  5970  0000A8                     receiveVSCPModeCanalMsg@data:
  5971                           	opt stack 0
  5972                           
  5973                           ; 8 bytes @ 0x48
  5974  0000A8                     	ds	8
  5975  0000B0                     receiveVSCPModeCanalMsg@id:
  5976                           	opt stack 0
  5977  0000B0                     sendVSCPFrame@id:
  5978                           	opt stack 0
  5979                           
  5980                           ; 4 bytes @ 0x50
  5981  0000B0                     	ds	4
  5982  0000B4                     ?_readRegisterExtended:
  5983                           	opt stack 0
  5984  0000B4                     ?_writeRegisterExtended:
  5985                           	opt stack 0
  5986  0000B4                     ?_readRegister:
  5987                           	opt stack 0
  5988  0000B4                     receiveVSCPModeCanalMsg@dlc:
  5989                           	opt stack 0
  5990  0000B4                     readRegister@reg:
  5991                           	opt stack 0
  5992  0000B4                     readRegisterExtended@page:
  5993                           	opt stack 0
  5994  0000B4                     writeRegisterExtended@page:
  5995                           	opt stack 0
  5996                           
  5997                           ; 2 bytes @ 0x54
  5998  0000B4                     	ds	1
  5999  0000B5                     doModeVscp@c:
  6000                           	opt stack 0
  6001  0000B5                     readRegister@timeout:
  6002                           	opt stack 0
  6003                           
  6004                           ; 2 bytes @ 0x55
  6005  0000B5                     	ds	1
  6006  0000B6                     readRegisterExtended@reg:
  6007                           	opt stack 0
  6008  0000B6                     writeRegisterExtended@reg:
  6009                           	opt stack 0
  6010                           
  6011                           ; 1 bytes @ 0x56
  6012  0000B6                     	ds	1
  6013  0000B7                     readRegister@value:
  6014                           	opt stack 0
  6015  0000B7                     readRegisterExtended@timeout:
  6016                           	opt stack 0
  6017  0000B7                     writeRegisterExtended@timeout:
  6018                           	opt stack 0
  6019                           
  6020                           ; 2 bytes @ 0x57
  6021  0000B7                     	ds	1
  6022  0000B8                     ??_readRegister:
  6023                           
  6024                           ; 0 bytes @ 0x58
  6025  0000B8                     	ds	1
  6026  0000B9                     readRegisterExtended@value:
  6027                           	opt stack 0
  6028  0000B9                     writeRegisterExtended@value:
  6029                           	opt stack 0
  6030                           
  6031                           ; 2 bytes @ 0x59
  6032  0000B9                     	ds	2
  6033  0000BB                     ??_readRegisterExtended:
  6034  0000BB                     ??_writeRegisterExtended:
  6035                           
  6036                           ; 0 bytes @ 0x5B
  6037  0000BB                     	ds	1
  6038  0000BC                     readRegister@nodeid:
  6039                           	opt stack 0
  6040                           
  6041                           ; 1 bytes @ 0x5C
  6042  0000BC                     	ds	1
  6043  0000BD                     printGUID@nodeid:
  6044                           	opt stack 0
  6045  0000BD                     printMDF@nodeid:
  6046                           	opt stack 0
  6047  0000BD                     printNodeFirmwareVersion@nodeid:
  6048                           	opt stack 0
  6049                           
  6050                           ; 1 bytes @ 0x5D
  6051  0000BD                     	ds	1
  6052  0000BE                     printMDF@value:
  6053                           	opt stack 0
  6054  0000BE                     printGUID@buf:
  6055                           	opt stack 0
  6056  0000BE                     printNodeFirmwareVersion@buf:
  6057                           	opt stack 0
  6058                           
  6059                           ; 3 bytes @ 0x5E
  6060  0000BE                     	ds	1
  6061  0000BF                     readRegisterExtended@nodeid:
  6062                           	opt stack 0
  6063  0000BF                     writeRegisterExtended@nodeid:
  6064                           	opt stack 0
  6065  0000BF                     printMDF@p:
  6066                           	opt stack 0
  6067                           
  6068                           ; 2 bytes @ 0x5F
  6069  0000BF                     	ds	2
  6070  0000C1                     printGUID@value:
  6071                           	opt stack 0
  6072  0000C1                     printMDF@i:
  6073                           	opt stack 0
  6074  0000C1                     printNodeFirmwareVersion@value:
  6075                           	opt stack 0
  6076                           
  6077                           ; 1 bytes @ 0x61
  6078  0000C1                     	ds	1
  6079  0000C2                     printGUID@i:
  6080                           	opt stack 0
  6081  0000C2                     printNodeFirmwareVersion@i:
  6082                           	opt stack 0
  6083                           
  6084                           ; 1 bytes @ 0x62
  6085  0000C2                     	ds	1
  6086  0000C3                     _findNodes$1473:
  6087                           	opt stack 0
  6088                           
  6089                           ; 2 bytes @ 0x63
  6090  0000C3                     	ds	2
  6091  0000C5                     findNodes@nFound:
  6092                           	opt stack 0
  6093                           
  6094                           ; 1 bytes @ 0x65
  6095  0000C5                     	ds	1
  6096  0000C6                     findNodes@value:
  6097                           	opt stack 0
  6098                           
  6099                           ; 1 bytes @ 0x66
  6100  0000C6                     	ds	1
  6101  0000C7                     findNodes@i:
  6102                           	opt stack 0
  6103                           
  6104                           ; 1 bytes @ 0x67
  6105  0000C7                     	ds	1
  6106  0000C8                     ??_doModeVerbose:
  6107                           
  6108                           ; 0 bytes @ 0x68
  6109  0000C8                     	ds	20
  6110  0000DC                     
  6111                           ; 2 bytes @ 0x7C
  6112  0000DC                     	ds	2
  6113  0000DE                     
  6114                           ; 3 bytes @ 0x7E
  6115  0000DE                     	ds	3
  6116  0000E1                     ??_main:
  6117                           
  6118                           ; 0 bytes @ 0x81
  6119  0000E1                     	ds	1
  6120  0000E2                     main@c:
  6121                           	opt stack 0
  6122                           
  6123                           ; 1 bytes @ 0x82
  6124  0000E2                     	ds	1
  6125                           tblptru	equ	0xFF8
  6126                           tblptrh	equ	0xFF7
  6127                           tblptrl	equ	0xFF6
  6128                           tablat	equ	0xFF5
  6129                           prodh	equ	0xFF4
  6130                           prodl	equ	0xFF3
  6131                           intcon	equ	0xFF2
  6132                           indf0	equ	0xFEF
  6133                           postinc0	equ	0xFEE
  6134                           fsr0h	equ	0xFEA
  6135                           fsr0l	equ	0xFE9
  6136                           wreg	equ	0xFE8
  6137                           indf1	equ	0xFE7
  6138                           postinc1	equ	0xFE6
  6139                           postdec1	equ	0xFE5
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           plusw2	equ	0xFDB
  6146                           fsr2h	equ	0xFDA
  6147                           fsr2l	equ	0xFD9
  6148                           status	equ	0xFD8
  6149                           
  6150                           	psect	cstackCOMRAM
  6151  000001                     __pcstackCOMRAM:
  6152                           	opt stack 0
  6153  000001                     ?__RegsToCANID:
  6154                           	opt stack 0
  6155  000001                     ?i1_WriteTimer0:
  6156                           	opt stack 0
  6157  000001                     ?_fifo_write:
  6158                           	opt stack 0
  6159  000001                     ?_fifo_getFree:
  6160                           	opt stack 0
  6161  000001                     ?__ECANPointBuffer:
  6162                           	opt stack 0
  6163  000001                     ReadUSART@data:
  6164                           	opt stack 0
  6165  000001                     __RegsToCANID@ptr:
  6166                           	opt stack 0
  6167  000001                     fifo_write@f:
  6168                           	opt stack 0
  6169  000001                     fifo_getFree@f:
  6170                           	opt stack 0
  6171  000001                     i1WriteTimer0@timer0:
  6172                           	opt stack 0
  6173                           
  6174                           ; 2 bytes @ 0x0
  6175  000001                     	ds	2
  6176  000003                     ??_fifo_getFree:
  6177  000003                     __RegsToCANID@val:
  6178                           	opt stack 0
  6179  000003                     fifo_write@buf:
  6180                           	opt stack 0
  6181  000003                     i1WriteTimer0@timer:
  6182                           	opt stack 0
  6183                           
  6184                           ; 2 bytes @ 0x2
  6185  000003                     	ds	1
  6186  000004                     __ECANPointBuffer@b:
  6187                           	opt stack 0
  6188                           
  6189                           ; 1 bytes @ 0x3
  6190  000004                     	ds	1
  6191  000005                     __RegsToCANID@type:
  6192                           	opt stack 0
  6193  000005                     __ECANPointBuffer@pt:
  6194                           	opt stack 0
  6195  000005                     fifo_write@nbytes:
  6196                           	opt stack 0
  6197                           
  6198                           ; 4 bytes @ 0x4
  6199  000005                     	ds	1
  6200  000006                     ??__RegsToCANID:
  6201                           
  6202                           ; 0 bytes @ 0x5
  6203  000006                     	ds	2
  6204  000008                     __RegsToCANID@Value:
  6205                           	opt stack 0
  6206                           
  6207                           ; 2 bytes @ 0x7
  6208  000008                     	ds	1
  6209  000009                     ??_fifo_write:
  6210                           
  6211                           ; 0 bytes @ 0x8
  6212  000009                     	ds	1
  6213  00000A                     ?_ECANReceiveMessage:
  6214                           	opt stack 0
  6215  00000A                     ECANReceiveMessage@id:
  6216                           	opt stack 0
  6217                           
  6218                           ; 2 bytes @ 0x9
  6219  00000A                     	ds	2
  6220  00000C                     ECANReceiveMessage@data:
  6221                           	opt stack 0
  6222                           
  6223                           ; 2 bytes @ 0xB
  6224  00000C                     	ds	1
  6225  00000D                     fifo_write@p:
  6226                           	opt stack 0
  6227                           
  6228                           ; 2 bytes @ 0xC
  6229  00000D                     	ds	1
  6230  00000E                     ECANReceiveMessage@dataLen:
  6231                           	opt stack 0
  6232                           
  6233                           ; 1 bytes @ 0xD
  6234  00000E                     	ds	1
  6235  00000F                     ECANReceiveMessage@msgFlags:
  6236                           	opt stack 0
  6237  00000F                     fifo_write@i:
  6238                           	opt stack 0
  6239                           
  6240                           ; 4 bytes @ 0xE
  6241  00000F                     	ds	1
  6242  000010                     ECANReceiveMessage@savedPtr:
  6243                           	opt stack 0
  6244                           
  6245                           ; 2 bytes @ 0xF
  6246  000010                     	ds	2
  6247  000012                     ECANReceiveMessage@i:
  6248                           	opt stack 0
  6249                           
  6250                           ; 1 bytes @ 0x11
  6251  000012                     	ds	1
  6252  000013                     ECANReceiveMessage@mode:
  6253                           	opt stack 0
  6254                           
  6255                           ; 1 bytes @ 0x12
  6256  000013                     	ds	1
  6257  000014                     ECANReceiveMessage@temp:
  6258                           	opt stack 0
  6259                           
  6260                           ; 1 bytes @ 0x13
  6261  000014                     	ds	1
  6262  000015                     ECANReceiveMessage@ptr:
  6263                           	opt stack 0
  6264                           
  6265                           ; 2 bytes @ 0x14
  6266  000015                     	ds	2
  6267  000017                     ??_Interrupt:
  6268                           
  6269                           ; 0 bytes @ 0x16
  6270  000017                     	ds	9
  6271  000020                     Interrupt@fail:
  6272                           	opt stack 0
  6273                           
  6274                           ; 1 bytes @ 0x1F
  6275  000020                     	ds	1
  6276  000021                     ?_WriteTimer0:
  6277                           	opt stack 0
  6278  000021                     ?_OpenUSART:
  6279                           	opt stack 0
  6280  000021                     ??_strchr:
  6281  000021                     ??__CANIDToRegs:
  6282  000021                     ??_crc8:
  6283  000021                     ??_isdigit:
  6284  000021                     ?_Read_b_eep:
  6285                           	opt stack 0
  6286  000021                     ?_strlen:
  6287                           	opt stack 0
  6288  000021                     getCANFrame@pid:
  6289                           	opt stack 0
  6290  000021                     ECANSetOperationMode@mode:
  6291                           	opt stack 0
  6292  000021                     nibbleFromChar@c:
  6293                           	opt stack 0
  6294  000021                     Write_b_eep@GIE_BIT_VAL:
  6295                           	opt stack 0
  6296  000021                     OpenTimer0@config:
  6297                           	opt stack 0
  6298  000021                     WriteUSART@data:
  6299                           	opt stack 0
  6300  000021                     ___llmod@counter:
  6301                           	opt stack 0
  6302  000021                     ___lwmod@counter:
  6303                           	opt stack 0
  6304  000021                     toupper@c:
  6305                           	opt stack 0
  6306  000021                     Read_b_eep@badd:
  6307                           	opt stack 0
  6308  000021                     WriteTimer0@timer0:
  6309                           	opt stack 0
  6310  000021                     OpenUSART@spbrg:
  6311                           	opt stack 0
  6312  000021                     memset@p:
  6313                           	opt stack 0
  6314  000021                     strcat@cp:
  6315                           	opt stack 0
  6316  000021                     strcpy@cp:
  6317                           	opt stack 0
  6318  000021                     strlen@s:
  6319                           	opt stack 0
  6320  000021                     ___wmul@product:
  6321                           	opt stack 0
  6322                           
  6323                           ; 2 bytes @ 0x20
  6324  000021                     	ds	1
  6325  000022                     init_app_eeprom@i:
  6326                           	opt stack 0
  6327                           
  6328                           ; 1 bytes @ 0x21
  6329  000022                     	ds	1
  6330  000023                     tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           indf0	equ	0xFEF
  6338                           postinc0	equ	0xFEE
  6339                           fsr0h	equ	0xFEA
  6340                           fsr0l	equ	0xFE9
  6341                           wreg	equ	0xFE8
  6342                           indf1	equ	0xFE7
  6343                           postinc1	equ	0xFE6
  6344                           postdec1	equ	0xFE5
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           plusw2	equ	0xFDB
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355                           ; 0 bytes @ 0x22
  6356 ;;
  6357 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6358 ;;
  6359 ;; *************** function _main *****************
  6360 ;; Defined at:
  6361 ;;		line 275 in file "main.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  argc            2  124[BANK0 ] int 
  6364 ;;  argv            3  126[BANK0 ] PTR PTR unsigned char 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  c               1  130[BANK0 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  2  124[BANK0 ] int 
  6369 ;; Registers used:
  6370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/0
  6373 ;;		On exit  : F/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6376 ;;      Params:         0       5       0       0       0       0       0
  6377 ;;      Locals:         0       1       0       0       0       0       0
  6378 ;;      Temps:          0       1       0       0       0       0       0
  6379 ;;      Totals:         0       7       0       0       0       0       0
  6380 ;;Total ram usage:        7 bytes
  6381 ;; Hardware stack levels required when called:   11
  6382 ;; This function calls:
  6383 ;;		_fifo_init
  6384 ;;		_init_crc8
  6385 ;;		_Read_b_eep
  6386 ;;		_vscp_restoreDefaults
  6387 ;;		_init
  6388 ;;		_putsUSART
  6389 ;;		_printFirmwareVersion
  6390 ;;		_printMode
  6391 ;;		_fifo_read
  6392 ;;		_doModeVerbose
  6393 ;;		_doModeVscp
  6394 ;;		_doModeSLCAN
  6395 ;;		_doModeVscpNode
  6396 ;; This function is called by:
  6397 ;;		Startup code after reset
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text0
  6402  003A8A                     __ptext0:
  6403                           	opt stack 0
  6404  003A8A                     _main:
  6405                           	opt stack 19
  6406                           
  6407                           ;main.c: 277: caps.maxVscpFrames = 1;
  6408                           
  6409                           ;incstack = 0
  6410                           ;incstack = 0
  6411  003A8A  0E01               	movlw	1
  6412  003A8C  0101               	movlb	1	; () banked
  6413  003A8E  6FE8               	movwf	_caps& (0+255),b
  6414                           
  6415                           ;main.c: 278: caps.maxCanalFrames = 1;
  6416  003A90  6FE9               	movwf	(_caps+1)& (0+255),b
  6417                           
  6418                           ; BSR set to: 1
  6419                           ;main.c: 283: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6420  003A92  0E01               	movlw	high _serialInputFifo
  6421  003A94  0100               	movlb	0	; () banked
  6422  003A96  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6423  003A98  0ED4               	movlw	low _serialInputFifo
  6424  003A9A  6F60               	movwf	?_fifo_init& (0+255),b
  6425  003A9C  0E02               	movlw	high _serial_inputBuffer
  6426  003A9E  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6427  003AA0  0E00               	movlw	low _serial_inputBuffer
  6428  003AA2  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6429  003AA4  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6430  003AA6  0E80               	movlw	128
  6431  003AA8  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6432  003AAA  ECC4  F00C         	call	_fifo_init	;wreg free
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;main.c: 284: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6436  003AAE  0E01               	movlw	high _canInputFifo
  6437  003AB0  0100               	movlb	0	; () banked
  6438  003AB2  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6439  003AB4  0EC4               	movlw	low _canInputFifo
  6440  003AB6  6F60               	movwf	?_fifo_init& (0+255),b
  6441  003AB8  0E04               	movlw	high _can_inputBuffer
  6442  003ABA  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6443  003ABC  0E00               	movlw	low _can_inputBuffer
  6444  003ABE  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6445  003AC0  0E01               	movlw	1
  6446  003AC2  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6447  003AC4  0EEE               	movlw	238
  6448  003AC6  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6449  003AC8  ECC4  F00C         	call	_fifo_init	;wreg free
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;main.c: 287: init_crc8();
  6453  003ACC  EC7B  F00F         	call	_init_crc8	;wreg free
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;main.c: 291: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6457                           ;main.c: 292: ( 0xaa != Read_b_eep(0x02) ) ) {
  6458  003AD0  6A22               	clrf	?_Read_b_eep+1,c
  6459  003AD2  0E01               	movlw	1
  6460  003AD4  6E21               	movwf	?_Read_b_eep,c
  6461  003AD6  EC39  F00B         	call	_Read_b_eep	;wreg free
  6462  003ADA  0A55               	xorlw	85
  6463  003ADC  E107               	bnz	l13301
  6464  003ADE  6A22               	clrf	?_Read_b_eep+1,c
  6465  003AE0  0E02               	movlw	2
  6466  003AE2  6E21               	movwf	?_Read_b_eep,c
  6467  003AE4  EC39  F00B         	call	_Read_b_eep	;wreg free
  6468  003AE8  0AAA               	xorlw	170
  6469  003AEA  A4D8               	btfss	status,2,c
  6470  003AEC                     l13301:
  6471                           
  6472                           ;main.c: 293: vscp_restoreDefaults();
  6473  003AEC  EC2C  F00B         	call	_vscp_restoreDefaults	;wreg free
  6474                           
  6475                           ;main.c: 294: }
  6476                           ;main.c: 297: init();
  6477  003AF0  EC6A  F00D         	call	_init	;wreg free
  6478                           
  6479                           ;main.c: 301: _delay((unsigned long)((10)*(40000000/4000.0)));
  6480  003AF4  0E82               	movlw	130
  6481  003AF6  0100               	movlb	0	; () banked
  6482  003AF8  6FE1               	movwf	??_main& (0+255),b
  6483  003AFA  0EDD               	movlw	221
  6484  003AFC                     u22307:
  6485  003AFC  2EE8               	decfsz	wreg,f,c
  6486  003AFE  D7FE               	goto	u22307
  6487  003B00  2FE1               	decfsz	??_main& (0+255),f,b
  6488  003B02  D7FC               	goto	u22307
  6489  003B04  D000               	nop2	
  6490                           
  6491                           ;main.c: 305: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6492  003B06  0E76               	movlw	high STR_1
  6493  003B08  0100               	movlb	0	; () banked
  6494  003B0A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6495  003B0C  0E30               	movlw	low STR_1
  6496  003B0E  6F60               	movwf	?_putsUSART& (0+255),b
  6497  003B10  ECFF  F00D         	call	_putsUSART	;wreg free
  6498                           
  6499                           ;main.c: 306: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6500  003B14  0E6F               	movlw	high STR_2
  6501  003B16  0100               	movlb	0	; () banked
  6502  003B18  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6503  003B1A  0ED2               	movlw	low STR_2
  6504  003B1C  6F60               	movwf	?_putsUSART& (0+255),b
  6505  003B1E  ECFF  F00D         	call	_putsUSART	;wreg free
  6506                           
  6507                           ;main.c: 307: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6508  003B22  0E76               	movlw	high STR_3
  6509  003B24  0100               	movlb	0	; () banked
  6510  003B26  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6511  003B28  0E9E               	movlw	low STR_3
  6512  003B2A  6F60               	movwf	?_putsUSART& (0+255),b
  6513  003B2C  ECFF  F00D         	call	_putsUSART	;wreg free
  6514                           
  6515                           ;main.c: 308: printFirmwareVersion();
  6516  003B30  EC1C  F011         	call	_printFirmwareVersion	;wreg free
  6517                           
  6518                           ;main.c: 309: printMode();
  6519  003B34  ECEB  F00F         	call	_printMode	;wreg free
  6520                           
  6521                           ;main.c: 313: if ( 0 != mode ) {
  6522  003B38  0100               	movlb	0	; () banked
  6523  003B3A  51E6               	movf	_mode& (0+255),w,b
  6524  003B3C  E036               	bz	l13335
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 315: uint8_t c;
  6528                           ;main.c: 317: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6529  003B3E  0E70               	movlw	high STR_4
  6530  003B40  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6531  003B42  0EEB               	movlw	low STR_4
  6532  003B44  6F60               	movwf	?_putsUSART& (0+255),b
  6533  003B46  ECFF  F00D         	call	_putsUSART	;wreg free
  6534                           
  6535                           ;main.c: 319: timekeeper = 0;
  6536  003B4A  6A23               	clrf	_timekeeper,c	;volatile
  6537  003B4C  6A24               	clrf	_timekeeper+1,c	;volatile
  6538  003B4E  6A25               	clrf	_timekeeper+2,c	;volatile
  6539  003B50  6A26               	clrf	_timekeeper+3,c	;volatile
  6540                           
  6541                           ;main.c: 320: ledFunctionality = 6;
  6542  003B52  0E06               	movlw	6
  6543  003B54  6E37               	movwf	_ledFunctionality,c
  6544                           
  6545                           ;main.c: 321: while (timekeeper < 3000) {
  6546  003B56  D020               	goto	l13333
  6547  003B58                     l437:
  6548  003B58  0004               	clrwdt		;# 
  6549                           
  6550                           ;main.c: 323: (INTCONbits.GIE = 0);
  6551  003B5A  9EF2               	bcf	intcon,7,c	;volatile
  6552                           
  6553                           ;main.c: 324: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6554  003B5C  0E01               	movlw	high _serialInputFifo
  6555  003B5E  0100               	movlb	0	; () banked
  6556  003B60  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6557  003B62  0ED4               	movlw	low _serialInputFifo
  6558  003B64  6F60               	movwf	?_fifo_read& (0+255),b
  6559  003B66  0E00               	movlw	high main@c
  6560  003B68  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6561  003B6A  0EE2               	movlw	low main@c
  6562  003B6C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6563  003B6E  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6564  003B70  0E01               	movlw	1
  6565  003B72  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6566  003B74  EC0E  F016         	call	_fifo_read	;wreg free
  6567  003B78  0560               	decf	?_fifo_read& (0+255),w,b
  6568  003B7A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6569  003B7C  E10C               	bnz	l438
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;main.c: 325: (INTCONbits.GIE = 1);
  6573  003B7E  8EF2               	bsf	intcon,7,c	;volatile
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;main.c: 326: if ('v' == c) {
  6577  003B80  51E2               	movf	main@c& (0+255),w,b
  6578  003B82  0A76               	xorlw	118
  6579  003B84  E108               	bnz	l438
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;main.c: 327: mode = 0;
  6583  003B86  6BE6               	clrf	_mode& (0+255),b
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;main.c: 328: putsUSART((char *) "Temporary verbose mode set\r\n");
  6587  003B88  0E78               	movlw	high STR_5
  6588  003B8A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6589  003B8C  0E2B               	movlw	low STR_5
  6590  003B8E  6F60               	movwf	?_putsUSART& (0+255),b
  6591  003B90  ECFF  F00D         	call	_putsUSART	;wreg free
  6592                           
  6593                           ;main.c: 329: break;
  6594  003B94  D00A               	goto	l13335
  6595  003B96                     l438:
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;main.c: 330: }
  6599                           ;main.c: 331: }
  6600                           ;main.c: 332: (INTCONbits.GIE = 1);
  6601  003B96  8EF2               	bsf	intcon,7,c	;volatile
  6602  003B98                     l13333:
  6603  003B98  0EB8               	movlw	184
  6604  003B9A  5C23               	subwf	_timekeeper,w,c	;volatile
  6605  003B9C  0E0B               	movlw	11
  6606  003B9E  5824               	subwfb	_timekeeper+1,w,c	;volatile
  6607  003BA0  0E00               	movlw	0
  6608  003BA2  5825               	subwfb	_timekeeper+2,w,c	;volatile
  6609  003BA4  0E00               	movlw	0
  6610  003BA6  5826               	subwfb	_timekeeper+3,w,c	;volatile
  6611  003BA8  E3D7               	bnc	l437
  6612  003BAA                     l13335:
  6613                           
  6614                           ;main.c: 333: }
  6615                           ;main.c: 334: }
  6616                           ;main.c: 336: ledFunctionality = 1;
  6617  003BAA  0E01               	movlw	1
  6618  003BAC  6E37               	movwf	_ledFunctionality,c
  6619  003BAE                     l441:
  6620  003BAE  0004               	clrwdt		;# 
  6621                           
  6622                           ;main.c: 347: if (COMSTATbits.TXBO) {
  6623  003BB0  AA74               	btfss	3956,5,c	;volatile
  6624  003BB2  D002               	goto	l442
  6625                           
  6626                           ;main.c: 349: ledFunctionality = 6;
  6627  003BB4  0E06               	movlw	6
  6628  003BB6  D009               	goto	L1
  6629  003BB8                     l442:
  6630                           
  6631                           ;main.c: 351: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6632  003BB8  B874               	btfsc	3956,4,c	;volatile
  6633  003BBA  D002               	goto	l13343
  6634  003BBC  A674               	btfss	3956,3,c	;volatile
  6635  003BBE  D002               	goto	l444
  6636  003BC0                     l13343:
  6637                           
  6638                           ;main.c: 353: ledFunctionality = 5;
  6639  003BC0  0E05               	movlw	5
  6640  003BC2  D003               	goto	L1
  6641  003BC4                     l444:
  6642                           
  6643                           ;main.c: 357: ledFunctionality = 4;
  6644  003BC4  0E04               	movlw	4
  6645                           
  6646                           ;main.c: 355: else if (COMSTATbits.EWARN) {
  6647  003BC6  A074               	btfss	3956,0,c	;volatile
  6648                           
  6649                           ;main.c: 359: else {
  6650                           ;main.c: 361: ledFunctionality = 1;
  6651                           
  6652                           ;main.c: 358: }
  6653  003BC8  0E01               	movlw	1
  6654  003BCA                     L1:
  6655  003BCA  6E37               	movwf	_ledFunctionality,c
  6656                           
  6657                           ;main.c: 362: }
  6658                           ;main.c: 365: if (COMSTATbits.RXBnOVFL) {
  6659  003BCC  AC74               	btfss	3956,6,c	;volatile
  6660  003BCE  D007               	goto	l13355
  6661                           
  6662                           ;main.c: 366: can_receiveOverruns++;
  6663  003BD0  0101               	movlb	1	; () banked
  6664  003BD2  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6665  003BD4  0E00               	movlw	0
  6666  003BD6  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6667  003BD8  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6668  003BDA  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6669                           
  6670                           ; BSR set to: 1
  6671                           ;main.c: 367: COMSTATbits.RXBnOVFL = 0;
  6672  003BDC  9C74               	bcf	3956,6,c	;volatile
  6673  003BDE                     l13355:
  6674                           
  6675                           ;main.c: 368: }
  6676                           ;main.c: 370: if (0 == mode) {
  6677  003BDE  0100               	movlb	0	; () banked
  6678  003BE0  67E6               	tstfsz	_mode& (0+255),b
  6679  003BE2  D003               	goto	l13359
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;main.c: 371: doModeVerbose();
  6683  003BE4  EC43  F02C         	call	_doModeVerbose	;wreg free
  6684                           
  6685                           ;main.c: 372: }
  6686  003BE8  D7E2               	goto	l441
  6687  003BEA                     l13359:
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;main.c: 373: else if (1 == mode) {
  6691  003BEA  05E6               	decf	_mode& (0+255),w,b
  6692  003BEC  E103               	bnz	l13363
  6693  003BEE                     l13361:
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;main.c: 374: doModeVscp();
  6697  003BEE  EC3B  F021         	call	_doModeVscp	;wreg free
  6698                           
  6699                           ;main.c: 375: }
  6700  003BF2  D7DD               	goto	l441
  6701  003BF4                     l13363:
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;main.c: 376: else if (2 == mode) {
  6705  003BF4  51E6               	movf	_mode& (0+255),w,b
  6706  003BF6  0A02               	xorlw	2
  6707  003BF8  E103               	bnz	l13367
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;main.c: 377: doModeSLCAN();
  6711  003BFA  ECBC  F026         	call	_doModeSLCAN	;wreg free
  6712                           
  6713                           ;main.c: 378: }
  6714  003BFE  D7D7               	goto	l441
  6715  003C00                     l13367:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 379: else if (3 == mode) {
  6719  003C00  51E6               	movf	_mode& (0+255),w,b
  6720  003C02  0A03               	xorlw	3
  6721  003C04  E1F4               	bnz	l13361
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;main.c: 380: doModeVscpNode();
  6725  003C06  EC28  F00B         	call	_doModeVscpNode	;wreg free
  6726                           
  6727                           ;main.c: 381: }
  6728  003C0A  D7D1               	goto	l441
  6729  003C0C                     __end_of_main:
  6730                           	opt stack 0
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           indf0	equ	0xFEF
  6739                           postinc0	equ	0xFEE
  6740                           fsr0h	equ	0xFEA
  6741                           fsr0l	equ	0xFE9
  6742                           wreg	equ	0xFE8
  6743                           indf1	equ	0xFE7
  6744                           postinc1	equ	0xFE6
  6745                           postdec1	equ	0xFE5
  6746                           fsr1h	equ	0xFE2
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           postinc2	equ	0xFDE
  6750                           postdec2	equ	0xFDD
  6751                           plusw2	equ	0xFDB
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _doModeVscpNode *****************
  6757 ;; Defined at:
  6758 ;;		line 1564 in file "main.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;		None               void
  6765 ;; Registers used:
  6766 ;;		None
  6767 ;; Tracked objects:
  6768 ;;		On entry : F/0
  6769 ;;		On exit  : F/0
  6770 ;;		Unchanged: F/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6772 ;;      Params:         0       0       0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0
  6774 ;;      Temps:          0       0       0       0       0       0       0
  6775 ;;      Totals:         0       0       0       0       0       0       0
  6776 ;;Total ram usage:        0 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    3
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_main
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text1
  6787  001650                     __ptext1:
  6788                           	opt stack 0
  6789  001650                     _doModeVscpNode:
  6790                           	opt stack 26
  6791                           
  6792                           ; BSR set to: 0
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;incstack = 0
  6796                           ;incstack = 0
  6797  001650  0012               	return	
  6798  001652                     __end_of_doModeVscpNode:
  6799                           	opt stack 0
  6800                           tblptru	equ	0xFF8
  6801                           tblptrh	equ	0xFF7
  6802                           tblptrl	equ	0xFF6
  6803                           tablat	equ	0xFF5
  6804                           prodh	equ	0xFF4
  6805                           prodl	equ	0xFF3
  6806                           intcon	equ	0xFF2
  6807                           indf0	equ	0xFEF
  6808                           postinc0	equ	0xFEE
  6809                           fsr0h	equ	0xFEA
  6810                           fsr0l	equ	0xFE9
  6811                           wreg	equ	0xFE8
  6812                           indf1	equ	0xFE7
  6813                           postinc1	equ	0xFE6
  6814                           postdec1	equ	0xFE5
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           postinc2	equ	0xFDE
  6819                           postdec2	equ	0xFDD
  6820                           plusw2	equ	0xFDB
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _doModeSLCAN *****************
  6826 ;; Defined at:
  6827 ;;		line 1346 in file "main.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  id              4   59[BANK0 ] unsigned long 
  6832 ;;  dlc             1   63[BANK0 ] unsigned char 
  6833 ;;  rv              1   65[BANK0 ] enum E15660
  6834 ;;  c               1   64[BANK0 ] unsigned char 
  6835 ;; Return value:  Size  Location     Type
  6836 ;;		None               void
  6837 ;; Registers used:
  6838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6839 ;; Tracked objects:
  6840 ;;		On entry : F/0
  6841 ;;		On exit  : F/0
  6842 ;;		Unchanged: 0/0
  6843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6844 ;;      Params:         0       0       0       0       0       0       0
  6845 ;;      Locals:         0       7       0       0       0       0       0
  6846 ;;      Temps:          0       7       0       0       0       0       0
  6847 ;;      Totals:         0      14       0       0       0       0       0
  6848 ;;Total ram usage:       14 bytes
  6849 ;; Hardware stack levels used:    1
  6850 ;; Hardware stack levels required when called:    7
  6851 ;; This function calls:
  6852 ;;		_putsUSART
  6853 ;;		_fifo_read
  6854 ;;		_Busy_eep
  6855 ;;		_Write_b_eep
  6856 ;;		_ECANSetOperationMode
  6857 ;;		_memset
  6858 ;;		_receiveSendEventSLCAN
  6859 ;;		_strlen
  6860 ;;		_hexStringToBytes
  6861 ;;		_memcpy
  6862 ;;		_sendCANFrame
  6863 ;; This function is called by:
  6864 ;;		_main
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text2
  6869  004D78                     __ptext2:
  6870                           	opt stack 0
  6871  004D78                     _doModeSLCAN:
  6872                           	opt stack 22
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;main.c: 1347: uint8_t c;
  6876                           ;main.c: 1348: BOOL rv = 0;
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;incstack = 0
  6880                           ;incstack = 0
  6881  004D78  6BA1               	clrf	doModeSLCAN@rv& (0+255),b
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;main.c: 1351: receiveSendEventSLCAN();
  6885  004D7A  EC06  F01E         	call	_receiveSendEventSLCAN	;wreg free
  6886                           
  6887                           ;main.c: 1354: (INTCONbits.GIE = 0);
  6888  004D7E  9EF2               	bcf	intcon,7,c	;volatile
  6889                           
  6890                           ;main.c: 1356: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6891  004D80  0E01               	movlw	high _serialInputFifo
  6892  004D82  0100               	movlb	0	; () banked
  6893  004D84  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6894  004D86  0ED4               	movlw	low _serialInputFifo
  6895  004D88  6F60               	movwf	?_fifo_read& (0+255),b
  6896  004D8A  0E00               	movlw	high doModeSLCAN@c
  6897  004D8C  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6898  004D8E  0EA0               	movlw	low doModeSLCAN@c
  6899  004D90  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6900  004D92  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6901  004D94  0E01               	movlw	1
  6902  004D96  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6903  004D98  EC0E  F016         	call	_fifo_read	;wreg free
  6904  004D9C  0560               	decf	?_fifo_read& (0+255),w,b
  6905  004D9E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6906  004DA0  E001 D1C9          	bnz	l14419
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;main.c: 1359: (INTCONbits.GIE = 1);
  6910  004DA4  8EF2               	bsf	intcon,7,c	;volatile
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;main.c: 1361: if (0x0d != c) {
  6914  004DA6  51A0               	movf	doModeSLCAN@c& (0+255),w,b
  6915  004DA8  0A0D               	xorlw	13
  6916  004DAA  E101 D178          	bz	l14407
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 1362: cmdbuf[ pos ] = c;
  6920  004DAE  EC1B  F022         	call	PL24	;call to abstracted procedure
  6921  004DB2  C0A0  FFDF         	movff	doModeSLCAN@c,indf2
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 1363: pos++;
  6925  004DB6  2BE7               	incf	_pos& (0+255),f,b
  6926  004DB8  D1BF               	goto	l725
  6927  004DBA                     l14279:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;main.c: 1371: if (1 == strlen(cmdbuf)) {
  6931  004DBA  0101               	movlb	1	; () banked
  6932  004DBC  0E01               	movlw	high _cmdbuf
  6933  004DBE  6E22               	movwf	?_strlen+1,c
  6934  004DC0  0E24               	movlw	low _cmdbuf
  6935  004DC2  6E21               	movwf	?_strlen,c
  6936  004DC4  ECE4  F00C         	call	_strlen	;wreg free
  6937  004DC8  0421               	decf	?_strlen,w,c
  6938  004DCA  1022               	iorwf	?_strlen+1,w,c
  6939  004DCC  E001 D196          	bnz	l14409
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;main.c: 1372: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6943  004DD0  0E7A               	movlw	high STR_133
  6944  004DD2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6945  004DD4  0E5B               	movlw	low STR_133
  6946  004DD6  6F60               	movwf	?_putsUSART& (0+255),b
  6947  004DD8  ECFF  F00D         	call	_putsUSART	;wreg free
  6948  004DDC                     l14283:
  6949                           
  6950                           ;main.c: 1373: rv = 1;
  6951  004DDC  0E01               	movlw	1
  6952  004DDE  D116               	goto	L4
  6953  004DE0                     l14285:
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;main.c: 1379: if (1 == strlen(cmdbuf)) {
  6957  004DE0  0101               	movlb	1	; () banked
  6958  004DE2  0E01               	movlw	high _cmdbuf
  6959  004DE4  6E22               	movwf	?_strlen+1,c
  6960  004DE6  0E24               	movlw	low _cmdbuf
  6961  004DE8  6E21               	movwf	?_strlen,c
  6962  004DEA  ECE4  F00C         	call	_strlen	;wreg free
  6963  004DEE  0421               	decf	?_strlen,w,c
  6964  004DF0  1022               	iorwf	?_strlen+1,w,c
  6965  004DF2  E001 D183          	bnz	l14409
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;main.c: 1380: putsUSART((char *) "V1011\r\n");
  6969  004DF6  0E7B               	movlw	high STR_134
  6970  004DF8  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6971  004DFA  0ED6               	movlw	low STR_134
  6972  004DFC  6F60               	movwf	?_putsUSART& (0+255),b
  6973  004DFE  ECFF  F00D         	call	_putsUSART	;wreg free
  6974  004E02  D7EC               	goto	l14283
  6975  004E04                     l14291:
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;main.c: 1387: if (1 == strlen(cmdbuf)) {
  6979  004E04  0101               	movlb	1	; () banked
  6980  004E06  0E01               	movlw	high _cmdbuf
  6981  004E08  6E22               	movwf	?_strlen+1,c
  6982  004E0A  0E24               	movlw	low _cmdbuf
  6983  004E0C  6E21               	movwf	?_strlen,c
  6984  004E0E  ECE4  F00C         	call	_strlen	;wreg free
  6985  004E12  0421               	decf	?_strlen,w,c
  6986  004E14  1022               	iorwf	?_strlen+1,w,c
  6987  004E16  E001 D171          	bnz	l14409
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;main.c: 1388: putsUSART((char *) "N1977\r\n");
  6991  004E1A  0E7B               	movlw	high STR_135
  6992  004E1C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  6993  004E1E  0EDE               	movlw	low STR_135
  6994  004E20  6F60               	movwf	?_putsUSART& (0+255),b
  6995  004E22  ECFF  F00D         	call	_putsUSART	;wreg free
  6996  004E26  D7DA               	goto	l14283
  6997  004E28                     l14297:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;main.c: 1397: bInitiated = 1;
  7001  004E28  0E01               	movlw	1
  7002  004E2A  6E35               	movwf	_bInitiated,c
  7003                           
  7004                           ;main.c: 1398: rv = 1;
  7005  004E2C  D0BA               	goto	L3
  7006  004E2E                     l735:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;main.c: 1403: if (!bOpen) {
  7010  004E2E  67E4               	tstfsz	_bOpen& (0+255),b
  7011  004E30  D003               	goto	l14301
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 1404: bInitiated = 1;
  7015  004E32  0E01               	movlw	1
  7016  004E34  6E35               	movwf	_bInitiated,c
  7017                           
  7018                           ;main.c: 1405: rv = 1;
  7019  004E36  6FA1               	movwf	doModeSLCAN@rv& (0+255),b
  7020  004E38                     l14301:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;main.c: 1410: if (1 == strlen(cmdbuf)) {
  7024  004E38  0101               	movlb	1	; () banked
  7025  004E3A  0E01               	movlw	high _cmdbuf
  7026  004E3C  6E22               	movwf	?_strlen+1,c
  7027  004E3E  0E24               	movlw	low _cmdbuf
  7028  004E40  6E21               	movwf	?_strlen,c
  7029  004E42  ECE4  F00C         	call	_strlen	;wreg free
  7030  004E46  0421               	decf	?_strlen,w,c
  7031  004E48  1022               	iorwf	?_strlen+1,w,c
  7032  004E4A  E001 D157          	bnz	l14409
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;main.c: 1411: if (!bOpen && bInitiated) {
  7036  004E4E  67E4               	tstfsz	_bOpen& (0+255),b
  7037  004E50  D155               	goto	l14409
  7038                           
  7039                           ; BSR set to: 0
  7040  004E52  5035               	movf	_bInitiated,w,c
  7041  004E54  E101 D152          	bz	l14409
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;main.c: 1412: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7045  004E58  0E00               	movlw	0
  7046  004E5A  EC60  F00B         	call	_ECANSetOperationMode
  7047                           
  7048                           ;main.c: 1413: bOpen = 1;
  7049  004E5E  0E01               	movlw	1
  7050  004E60  0100               	movlb	0	; () banked
  7051  004E62  6FE4               	movwf	_bOpen& (0+255),b
  7052  004E64  D7BB               	goto	l14283
  7053  004E66                     l14313:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;main.c: 1421: if (1 == strlen(cmdbuf)) {
  7057  004E66  0101               	movlb	1	; () banked
  7058  004E68  0E01               	movlw	high _cmdbuf
  7059  004E6A  6E22               	movwf	?_strlen+1,c
  7060  004E6C  0E24               	movlw	low _cmdbuf
  7061  004E6E  6E21               	movwf	?_strlen,c
  7062  004E70  ECE4  F00C         	call	_strlen	;wreg free
  7063  004E74  0421               	decf	?_strlen,w,c
  7064  004E76  1022               	iorwf	?_strlen+1,w,c
  7065  004E78  E001 D140          	bnz	l14409
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;main.c: 1422: if (bOpen) {
  7069  004E7C  51E4               	movf	_bOpen& (0+255),w,b
  7070  004E7E  E0AE               	bz	l14283
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;main.c: 1423: ECANSetOperationMode(0x20);
  7074  004E80  0E20               	movlw	32
  7075  004E82  EC60  F00B         	call	_ECANSetOperationMode
  7076                           
  7077                           ;main.c: 1424: bOpen = 0;
  7078  004E86  0100               	movlb	0	; () banked
  7079  004E88  6BE4               	clrf	_bOpen& (0+255),b
  7080  004E8A  D7A8               	goto	l14283
  7081  004E8C                     l14323:
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;main.c: 1437: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7085  004E8C  51E4               	movf	_bOpen& (0+255),w,b
  7086  004E8E  E101 D135          	bz	l14409
  7087                           
  7088                           ; BSR set to: 0
  7089  004E92  0101               	movlb	1	; () banked
  7090  004E94  0E01               	movlw	high _cmdbuf
  7091  004E96  6E22               	movwf	?_strlen+1,c
  7092  004E98  0E24               	movlw	low _cmdbuf
  7093  004E9A  6E21               	movwf	?_strlen,c
  7094  004E9C  ECE4  F00C         	call	_strlen	;wreg free
  7095  004EA0  0E0A               	movlw	10
  7096  004EA2  5C21               	subwf	?_strlen,w,c
  7097  004EA4  0E00               	movlw	0
  7098  004EA6  5822               	subwfb	?_strlen+1,w,c
  7099  004EA8  E201 D128          	bnc	l14409
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;main.c: 1439: uint32_t id;
  7103                           ;main.c: 1440: uint8_t dlc;
  7104                           ;main.c: 1442: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7105  004EAC  0E01               	movlw	high _wrkbuf
  7106  004EAE  0100               	movlb	0	; () banked
  7107  004EB0  6F63               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7108  004EB2  0E74               	movlw	low _wrkbuf
  7109  004EB4  6F62               	movwf	?_hexStringToBytes& (0+255),b
  7110  004EB6  0E50               	movlw	80
  7111  004EB8  6F64               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7112  004EBA  0E01               	movlw	high _cmdbuf
  7113  004EBC  6F66               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7114  004EBE  0E24               	movlw	low _cmdbuf
  7115  004EC0  6F65               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7116  004EC2  ECF6  F011         	call	_hexStringToBytes	;wreg free
  7117  004EC6  6F94               	movwf	??_doModeSLCAN& (0+255),b
  7118  004EC8  0E05               	movlw	5
  7119  004ECA  5D94               	subwf	??_doModeSLCAN& (0+255),w,b
  7120  004ECC  E201 D116          	bnc	l14409
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;main.c: 1444: }
  7124                           ;main.c: 1446: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7125  004ED0  C177  F094         	movff	_wrkbuf+3,??_doModeSLCAN
  7126  004ED4  0E08               	movlw	8
  7127  004ED6  2794               	addwf	??_doModeSLCAN& (0+255),f,b
  7128  004ED8  C176  F095         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7129  004EDC  0E10               	movlw	16
  7130  004EDE  2795               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7131  004EE0  C175  F096         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7132  004EE4  0E18               	movlw	24
  7133  004EE6  2796               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7134  004EE8  C174  F097         	movff	_wrkbuf,??_doModeSLCAN+3
  7135  004EEC  0100               	movlb	0	; () banked
  7136  004EEE  6B98               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7137  004EF0  6B99               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7138  004EF2  6B9A               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7139  004EF4  2B96               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7140  004EF6  D001               	goto	u19260
  7141  004EF8                     u19265:
  7142  004EF8  D920               	call	PL78	;call to abstracted procedure
  7143  004EFA                     u19260:
  7144  004EFA  2F96               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7145  004EFC  D7FD               	goto	u19265
  7146  004EFE  2B95               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7147  004F00  D001               	goto	u19270
  7148  004F02                     u19275:
  7149  004F02  D91B               	call	PL78	;call to abstracted procedure
  7150  004F04                     u19270:
  7151  004F04  2F95               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7152  004F06  D7FD               	goto	u19275
  7153  004F08  2B94               	incf	??_doModeSLCAN& (0+255),f,b
  7154  004F0A  D001               	goto	u19280
  7155  004F0C                     u19285:
  7156  004F0C  D916               	call	PL78	;call to abstracted procedure
  7157  004F0E                     u19280:
  7158  004F0E  2F94               	decfsz	??_doModeSLCAN& (0+255),f,b
  7159  004F10  D7FD               	goto	u19285
  7160  004F12  C09A  F09E         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7161  004F16  C099  F09D         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7162  004F1A  C098  F09C         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7163  004F1E  C097  F09B         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;main.c: 1447: dlc = vscpData[4];
  7167  004F22  C1E0  F09F         	movff	_vscpData+4,doModeSLCAN@dlc
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;main.c: 1450: if (dlc > 8) break;
  7171  004F26  0E08               	movlw	8
  7172  004F28  659F               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7173  004F2A  D001               	goto	l14339
  7174  004F2C  D0E7               	goto	l14409
  7175  004F2E                     l14339:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;main.c: 1451: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7179  004F2E  90D8               	bcf	status,0,c
  7180  004F30  359F               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7181  004F32  6F94               	movwf	??_doModeSLCAN& (0+255),b
  7182  004F34  6B95               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7183  004F36  3795               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7184  004F38  0E0A               	movlw	10
  7185  004F3A  2794               	addwf	??_doModeSLCAN& (0+255),f,b
  7186  004F3C  0E00               	movlw	0
  7187  004F3E  2395               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7188  004F40  0101               	movlb	1	; () banked
  7189  004F42  0E01               	movlw	high _cmdbuf
  7190  004F44  6E22               	movwf	?_strlen+1,c
  7191  004F46  0E24               	movlw	low _cmdbuf
  7192  004F48  6E21               	movwf	?_strlen,c
  7193  004F4A  ECE4  F00C         	call	_strlen	;wreg free
  7194  004F4E  5194               	movf	??_doModeSLCAN& (0+255),w,b
  7195  004F50  5C21               	subwf	?_strlen,w,c
  7196  004F52  5195               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7197  004F54  5822               	subwfb	?_strlen+1,w,c
  7198  004F56  E201 D0D1          	bnc	l14409
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;main.c: 1453: memcpy(vscpData, vscpData + 5, dlc);
  7202  004F5A  0E01               	movlw	high _vscpData
  7203  004F5C  0100               	movlb	0	; () banked
  7204  004F5E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7205  004F60  0EDC               	movlw	low _vscpData
  7206  004F62  6F60               	movwf	?_memcpy& (0+255),b
  7207  004F64  0EE1               	movlw	low (_vscpData+5)
  7208  004F66  6F94               	movwf	??_doModeSLCAN& (0+255),b
  7209  004F68  0E01               	movlw	high (_vscpData+5)
  7210  004F6A  6F95               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7211  004F6C  C094  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7212  004F70  C095  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7213  004F74  C09F  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7214  004F78  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7215  004F7A  EC05  F00D         	call	_memcpy	;wreg free
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;main.c: 1455: rv = sendCANFrame(id, dlc, vscpData);
  7219  004F7E  C09B  F08D         	movff	doModeSLCAN@id,?_sendCANFrame
  7220  004F82  C09C  F08E         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7221  004F86  C09D  F08F         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7222  004F8A  C09E  F090         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7223  004F8E  C09F  F091         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7224  004F92  0E01               	movlw	high _vscpData
  7225  004F94  0100               	movlb	0	; () banked
  7226  004F96  6F93               	movwf	(?_sendCANFrame+6)& (0+255),b
  7227  004F98  0EDC               	movlw	low _vscpData
  7228  004F9A  6F92               	movwf	(?_sendCANFrame+5)& (0+255),b
  7229  004F9C  EC4A  F00C         	call	_sendCANFrame	;wreg free
  7230  004FA0  D035               	goto	L4
  7231  004FA2                     L3:
  7232  004FA2  6FA1               	movwf	doModeSLCAN@rv& (0+255),b
  7233  004FA4  D0AB               	goto	l14409
  7234  004FA6                     l14347:
  7235                           
  7236                           ; BSR set to: 0
  7237                           ;main.c: 1470: if (bOpen && (strlen(cmdbuf) == 1)) {
  7238  004FA6  51E4               	movf	_bOpen& (0+255),w,b
  7239  004FA8  E101 D0A8          	bz	l14409
  7240                           
  7241                           ; BSR set to: 0
  7242  004FAC  0101               	movlb	1	; () banked
  7243  004FAE  0E01               	movlw	high _cmdbuf
  7244  004FB0  6E22               	movwf	?_strlen+1,c
  7245  004FB2  0E24               	movlw	low _cmdbuf
  7246  004FB4  6E21               	movwf	?_strlen,c
  7247  004FB6  ECE4  F00C         	call	_strlen	;wreg free
  7248  004FBA  0421               	decf	?_strlen,w,c
  7249  004FBC  1022               	iorwf	?_strlen+1,w,c
  7250  004FBE  E001 D09D          	bnz	l14409
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;main.c: 1471: putsUSART((char *) "F00\r\n");
  7254  004FC2  0E7C               	movlw	high STR_136
  7255  004FC4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  7256  004FC6  0E7A               	movlw	low STR_136
  7257  004FC8  6F60               	movwf	?_putsUSART& (0+255),b
  7258  004FCA  ECFF  F00D         	call	_putsUSART	;wreg free
  7259  004FCE  D096               	goto	l14409
  7260  004FD0                     l14357:
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;main.c: 1487: if (2 == strlen(cmdbuf)) {
  7264  004FD0  0101               	movlb	1	; () banked
  7265  004FD2  0E01               	movlw	high _cmdbuf
  7266  004FD4  6E22               	movwf	?_strlen+1,c
  7267  004FD6  0E24               	movlw	low _cmdbuf
  7268  004FD8  6E21               	movwf	?_strlen,c
  7269  004FDA  ECE4  F00C         	call	_strlen	;wreg free
  7270  004FDE  5021               	movf	?_strlen,w,c
  7271  004FE0  0A02               	xorlw	2
  7272  004FE2  1022               	iorwf	?_strlen+1,w,c
  7273  004FE4  E001 D08A          	bnz	l14409
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;main.c: 1488: if (!bOpen) {
  7277  004FE8  67E4               	tstfsz	_bOpen& (0+255),b
  7278  004FEA  D088               	goto	l14409
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 1489: if ('0' == cmdbuf[1]) {
  7282  004FEC  0101               	movlb	1	; () banked
  7283  004FEE  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7284  004FF0  0A30               	xorlw	48
  7285  004FF2  E10E               	bnz	l14369
  7286                           
  7287                           ; BSR set to: 1
  7288                           ;main.c: 1490: nTimeStamp = 0;
  7289  004FF4  6A38               	clrf	_nTimeStamp,c
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;main.c: 1492: (Busy_eep(), Write_b_eep(0x05,0));
  7293  004FF6  EC29  F00B         	call	_Busy_eep	;wreg free
  7294  004FFA  0100               	movlb	0	; () banked
  7295  004FFC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7296  004FFE  0E05               	movlw	5
  7297  005000  6F60               	movwf	?_Write_b_eep& (0+255),b
  7298  005002  0E00               	movlw	0
  7299  005004  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7300  005006  ECF9  F00B         	call	_Write_b_eep	;wreg free
  7301  00500A  D6E8               	goto	l14283
  7302  00500C                     L4:
  7303  00500C  0100               	movlb	0	; () banked
  7304  00500E  D7C9               	goto	L3
  7305  005010                     l14369:
  7306                           
  7307                           ; BSR set to: 1
  7308  005010  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7309  005012  0A31               	xorlw	49
  7310  005014  E10D               	bnz	l760
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;main.c: 1495: nTimeStamp = 1;
  7314  005016  0E01               	movlw	1
  7315  005018  6E38               	movwf	_nTimeStamp,c
  7316                           
  7317                           ; BSR set to: 1
  7318                           ;main.c: 1497: (Busy_eep(), Write_b_eep(0x05,1));
  7319  00501A  EC29  F00B         	call	_Busy_eep	;wreg free
  7320  00501E  0100               	movlb	0	; () banked
  7321  005020  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7322  005022  0E05               	movlw	5
  7323  005024  6F60               	movwf	?_Write_b_eep& (0+255),b
  7324  005026  0E01               	movlw	1
  7325  005028  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7326  00502A  ECF9  F00B         	call	_Write_b_eep	;wreg free
  7327  00502E  D6D6               	goto	l14283
  7328  005030                     l760:
  7329                           
  7330                           ; BSR set to: 1
  7331                           ;main.c: 1501: rv = 0;
  7332  005030  0100               	movlb	0	; () banked
  7333  005032  6BA1               	clrf	doModeSLCAN@rv& (0+255),b
  7334  005034  D063               	goto	l14409
  7335  005036                     l14377:
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;main.c: 1509: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7339  005036  EC29  F00B         	call	_Busy_eep	;wreg free
  7340  00503A  EC2D  F014         	call	PL62	;call to abstracted procedure
  7341  00503E  ECF9  F00B         	call	_Write_b_eep	;wreg free
  7342  005042  00FF               	reset		;# 
  7343                           
  7344                           ;main.c: 1511: break;
  7345  005044  D05B               	goto	l14409
  7346  005046                     l14381:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;main.c: 1515: if ( 'v' == cmdbuf[1] &&
  7350                           ;main.c: 1516: 's' == cmdbuf[2] &&
  7351                           ;main.c: 1517: 'c' == cmdbuf[3] &&
  7352                           ;main.c: 1518: 'p' == cmdbuf[4] ) {
  7353  005046  0101               	movlb	1	; () banked
  7354  005048  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7355  00504A  0A76               	xorlw	118
  7356  00504C  E10D               	bnz	l14391
  7357                           
  7358                           ; BSR set to: 1
  7359  00504E  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  7360  005050  0A73               	xorlw	115
  7361  005052  E10A               	bnz	l14391
  7362                           
  7363                           ; BSR set to: 1
  7364  005054  5127               	movf	(_cmdbuf+3)& (0+255),w,b
  7365  005056  0A63               	xorlw	99
  7366  005058  E107               	bnz	l14391
  7367                           
  7368                           ; BSR set to: 1
  7369  00505A  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  7370  00505C  0A70               	xorlw	112
  7371  00505E  E104               	bnz	l14391
  7372                           
  7373                           ; BSR set to: 1
  7374                           ;main.c: 1519: mode = 1;
  7375  005060  0E01               	movlw	1
  7376  005062  0100               	movlb	0	; () banked
  7377  005064  6FE6               	movwf	_mode& (0+255),b
  7378                           
  7379                           ;main.c: 1520: }
  7380  005066  D04A               	goto	l14409
  7381  005068                     l14391:
  7382                           
  7383                           ; BSR set to: 1
  7384                           ;main.c: 1521: else if ( 'v' == cmdbuf[1] &&
  7385                           ;main.c: 1522: 'e' == cmdbuf[2] &&
  7386                           ;main.c: 1523: 'r' == cmdbuf[3] &&
  7387                           ;main.c: 1524: 'b' == cmdbuf[4] ) {
  7388  005068  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7389  00506A  0A76               	xorlw	118
  7390  00506C  E147               	bnz	l14409
  7391                           
  7392                           ; BSR set to: 1
  7393  00506E  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  7394  005070  0A65               	xorlw	101
  7395  005072  E144               	bnz	l14409
  7396                           
  7397                           ; BSR set to: 1
  7398  005074  5127               	movf	(_cmdbuf+3)& (0+255),w,b
  7399  005076  0A72               	xorlw	114
  7400  005078  E141               	bnz	l14409
  7401                           
  7402                           ; BSR set to: 1
  7403  00507A  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  7404  00507C  0A62               	xorlw	98
  7405  00507E  E13E               	bnz	l14409
  7406                           
  7407                           ; BSR set to: 1
  7408                           ;main.c: 1525: mode = 0;
  7409  005080  0100               	movlb	0	; () banked
  7410  005082  6BE6               	clrf	_mode& (0+255),b
  7411  005084  D03B               	goto	l14409
  7412  005086                     l14401:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;main.c: 1530: {
  7416                           ;main.c: 1532: if (0 == strlen(cmdbuf)) {
  7417  005086  0101               	movlb	1	; () banked
  7418  005088  0E01               	movlw	high _cmdbuf
  7419  00508A  6E22               	movwf	?_strlen+1,c
  7420  00508C  0E24               	movlw	low _cmdbuf
  7421  00508E  6E21               	movwf	?_strlen,c
  7422  005090  ECE4  F00C         	call	_strlen	;wreg free
  7423  005094  5022               	movf	?_strlen+1,w,c
  7424  005096  1021               	iorwf	?_strlen,w,c
  7425  005098  E101 D6A0          	bz	l14283
  7426  00509C  D02F               	goto	l14409
  7427  00509E                     l14407:
  7428                           
  7429                           ; BSR set to: 0
  7430  00509E  51A0               	movf	doModeSLCAN@c& (0+255),w,b
  7431                           
  7432                           ; Switch size 1, requested type "space"
  7433                           ; Number of cases is 17, Range of values is 64 to 116
  7434                           ; switch strategies available:
  7435                           ; Name         Instructions Cycles
  7436                           ; simple_byte           52    27 (average)
  7437                           ;	Chosen strategy is simple_byte
  7438  0050A0  0A40               	xorlw	64	; case 64
  7439  0050A2  E0D1               	bz	l14381
  7440  0050A4  0A02               	xorlw	2	; case 66
  7441  0050A6  E0C7               	bz	l14377
  7442  0050A8  0A01               	xorlw	1	; case 67
  7443  0050AA  E101 D6DC          	bz	l14313
  7444  0050AE  0A05               	xorlw	5	; case 70
  7445  0050B0  E101 D779          	bz	l14347
  7446  0050B4  0A0C               	xorlw	12	; case 74
  7447  0050B6  E101 D680          	bz	l14279
  7448  0050BA  0A07               	xorlw	7	; case 77
  7449  0050BC  E101 D68E          	bz	l14283
  7450  0050C0  0A03               	xorlw	3	; case 78
  7451  0050C2  E101 D69F          	bz	l14291
  7452  0050C6  0A01               	xorlw	1	; case 79
  7453  0050C8  E101 D6B6          	bz	l14301
  7454  0050CC  0A1D               	xorlw	29	; case 82
  7455  0050CE  E016               	bz	l14409
  7456  0050D0  0A01               	xorlw	1	; case 83
  7457  0050D2  E101 D6A9          	bz	l14297
  7458  0050D6  0A07               	xorlw	7	; case 84
  7459  0050D8  E101 D6D8          	bz	l14323
  7460  0050DC  0A02               	xorlw	2	; case 86
  7461  0050DE  E101 D67F          	bz	l14285
  7462  0050E2  0A0C               	xorlw	12	; case 90
  7463  0050E4  E101 D774          	bz	l14357
  7464  0050E8  0A37               	xorlw	55	; case 109
  7465  0050EA  E101 D677          	bz	l14283
  7466  0050EE  0A1F               	xorlw	31	; case 114
  7467  0050F0  E005               	bz	l14409
  7468  0050F2  0A01               	xorlw	1	; case 115
  7469  0050F4  E101 D69B          	bz	l735
  7470  0050F8  0A07               	xorlw	7	; case 116
  7471  0050FA  E1C5               	bnz	l14401
  7472  0050FC                     l14409:
  7473                           
  7474                           ;main.c: 1540: if (rv) {
  7475  0050FC  0100               	movlb	0	; () banked
  7476  0050FE  51A1               	movf	doModeSLCAN@rv& (0+255),w,b
  7477  005100  E007               	bz	l14413
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;main.c: 1542: putsUSART((char *) "\r");
  7481  005102  0E7C               	movlw	high STR_137
  7482  005104  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  7483  005106  0EF3               	movlw	low STR_137
  7484  005108  6F60               	movwf	?_putsUSART& (0+255),b
  7485  00510A  ECFF  F00D         	call	_putsUSART	;wreg free
  7486                           
  7487                           ;main.c: 1543: }
  7488  00510E  D006               	goto	l14415
  7489  005110                     l14413:
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;main.c: 1544: else {
  7493                           ;main.c: 1546: putsUSART((char *) "\a");
  7494  005110  0E7C               	movlw	high STR_138
  7495  005112  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  7496  005114  0EF1               	movlw	low STR_138
  7497  005116  6F60               	movwf	?_putsUSART& (0+255),b
  7498  005118  ECFF  F00D         	call	_putsUSART	;wreg free
  7499  00511C                     l14415:
  7500                           
  7501                           ;main.c: 1547: }
  7502                           ;main.c: 1550: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7503  00511C  0E01               	movlw	high _cmdbuf
  7504  00511E  0100               	movlb	0	; () banked
  7505  005120  6F61               	movwf	(?_memset+1)& (0+255),b
  7506  005122  0E24               	movlw	low _cmdbuf
  7507  005124  6F60               	movwf	?_memset& (0+255),b
  7508  005126  6B63               	clrf	(?_memset+3)& (0+255),b
  7509  005128  6B62               	clrf	(?_memset+2)& (0+255),b
  7510  00512A  6B65               	clrf	(?_memset+5)& (0+255),b
  7511  00512C  0E50               	movlw	80
  7512  00512E  6F64               	movwf	(?_memset+4)& (0+255),b
  7513  005130  EC9A  F00B         	call	_memset	;wreg free
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;main.c: 1551: pos = 0;
  7517  005134  6BE7               	clrf	_pos& (0+255),b
  7518  005136                     l14419:
  7519                           
  7520                           ; BSR set to: 0
  7521                           ;main.c: 1553: }
  7522                           ;main.c: 1556: (INTCONbits.GIE = 1);
  7523  005136  8EF2               	bsf	intcon,7,c	;volatile
  7524  005138                     l725:
  7525                           
  7526                           ; BSR set to: 0
  7527  005138  0012               	return	
  7528  00513A                     __end_of_doModeSLCAN:
  7529                           	opt stack 0
  7530  00513A                     PL78:
  7531                           	opt stack 22
  7532  00513A  90D8               	bcf	status,0,c
  7533  00513C  3797               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7534  00513E  3798               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7535  005140  3799               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7536  005142  379A               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7537  005144  0012               	return	
  7538  005146                     __end_ofPL78:
  7539                           	opt stack 0
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           indf0	equ	0xFEF
  7548                           postinc0	equ	0xFEE
  7549                           fsr0h	equ	0xFEA
  7550                           fsr0l	equ	0xFE9
  7551                           wreg	equ	0xFE8
  7552                           indf1	equ	0xFE7
  7553                           postinc1	equ	0xFE6
  7554                           postdec1	equ	0xFE5
  7555                           fsr1h	equ	0xFE2
  7556                           fsr1l	equ	0xFE1
  7557                           indf2	equ	0xFDF
  7558                           postinc2	equ	0xFDE
  7559                           postdec2	equ	0xFDD
  7560                           plusw2	equ	0xFDB
  7561                           fsr2h	equ	0xFDA
  7562                           fsr2l	equ	0xFD9
  7563                           status	equ	0xFD8
  7564                           
  7565 ;; *************** function _hexStringToBytes *****************
  7566 ;; Defined at:
  7567 ;;		line 35 in file "hexutils.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  buf             2    2[BANK0 ] PTR unsigned char 
  7570 ;;		 -> wrkbuf(80), 
  7571 ;;  size            1    4[BANK0 ] unsigned char 
  7572 ;;  inhex           2    5[BANK0 ] PTR unsigned char 
  7573 ;;		 -> cmdbuf(80), 
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;  i               2   14[BANK0 ] int 
  7576 ;;  p               2   12[BANK0 ] PTR unsigned char 
  7577 ;;		 -> cmdbuf(80), 
  7578 ;;  len             2   10[BANK0 ] int 
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      unsigned char 
  7581 ;; Registers used:
  7582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : F/0
  7585 ;;		On exit  : F/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7588 ;;      Params:         0       5       0       0       0       0       0
  7589 ;;      Locals:         0       6       0       0       0       0       0
  7590 ;;      Temps:          0       3       0       0       0       0       0
  7591 ;;      Totals:         0      14       0       0       0       0       0
  7592 ;;Total ram usage:       14 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    4
  7595 ;; This function calls:
  7596 ;;		_strlen
  7597 ;;		_nibbleFromChar
  7598 ;; This function is called by:
  7599 ;;		_doModeSLCAN
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text3
  7604  0023EC                     __ptext3:
  7605                           	opt stack 0
  7606  0023EC                     _hexStringToBytes:
  7607                           	opt stack 24
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;hexutils.c: 36: uint8_t *p;
  7611                           ;hexutils.c: 37: int len, i;
  7612                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;incstack = 0
  7616                           ;incstack = 0
  7617  0023EC  C065  F021         	movff	hexStringToBytes@inhex,?_strlen
  7618  0023F0  C066  F022         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7619  0023F4  ECE4  F00C         	call	_strlen	;wreg free
  7620  0023F8  90D8               	bcf	status,0,c
  7621  0023FA  3022               	rrcf	?_strlen+1,w,c
  7622  0023FC  6F6B               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7623  0023FE  3021               	rrcf	?_strlen,w,c
  7624  002400  6F6A               	movwf	hexStringToBytes@len& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;hexutils.c: 40: if (len > size) return 0;
  7628  002402  5164               	movf	hexStringToBytes@size& (0+255),w,b
  7629  002404  6F67               	movwf	??_hexStringToBytes& (0+255),b
  7630  002406  6B68               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7631  002408  5168               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7632  00240A  0A80               	xorlw	128
  7633  00240C  6F69               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7634  00240E  516A               	movf	hexStringToBytes@len& (0+255),w,b
  7635  002410  5D67               	subwf	??_hexStringToBytes& (0+255),w,b
  7636  002412  516B               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7637  002414  0A80               	xorlw	128
  7638  002416  5969               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7639  002418  E202               	bc	l1593
  7640                           
  7641                           ; BSR set to: 0
  7642  00241A  0E00               	movlw	0
  7643  00241C  D033               	goto	l1594
  7644  00241E                     l1593:
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7648  00241E  6B6E               	clrf	hexStringToBytes@i& (0+255),b
  7649  002420  6B6F               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7650  002422  C065  F06C         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7651  002426  C066  F06D         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7652  00242A  D022               	goto	l12707
  7653  00242C                     l12701:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7657  00242C  516E               	movf	hexStringToBytes@i& (0+255),w,b
  7658  00242E  2562               	addwf	hexStringToBytes@buf& (0+255),w,b
  7659  002430  6ED9               	movwf	fsr2l,c
  7660  002432  516F               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7661  002434  2163               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7662  002436  6EDA               	movwf	fsr2h,c
  7663  002438  EE10 F001          	lfsr	1,1
  7664  00243C  516C               	movf	hexStringToBytes@p& (0+255),w,b
  7665  00243E  26E1               	addwf	fsr1l,f,c
  7666  002440  516D               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7667  002442  22E2               	addwfc	fsr1h,f,c
  7668  002444  50E7               	movf	indf1,w,c
  7669  002446  ECA5  F00C         	call	_nibbleFromChar
  7670  00244A  6F67               	movwf	??_hexStringToBytes& (0+255),b
  7671  00244C  C06C  FFE1         	movff	hexStringToBytes@p,fsr1l
  7672  002450  C06D  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7673  002454  50E7               	movf	indf1,w,c
  7674  002456  ECA5  F00C         	call	_nibbleFromChar
  7675  00245A  6F68               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7676  00245C  3968               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7677  00245E  0BF0               	andlw	240
  7678  002460  1167               	iorwf	??_hexStringToBytes& (0+255),w,b
  7679  002462  6EDF               	movwf	indf2,c
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;hexutils.c: 43: p += 2;
  7683  002464  0E02               	movlw	2
  7684  002466  276C               	addwf	hexStringToBytes@p& (0+255),f,b
  7685  002468  0E00               	movlw	0
  7686  00246A  236D               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7687                           
  7688                           ; BSR set to: 0
  7689  00246C  4B6E               	infsnz	hexStringToBytes@i& (0+255),f,b
  7690  00246E  2B6F               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7691  002470                     l12707:
  7692                           
  7693                           ; BSR set to: 0
  7694  002470  516F               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7695  002472  0A80               	xorlw	128
  7696  002474  6F67               	movwf	??_hexStringToBytes& (0+255),b
  7697  002476  516A               	movf	hexStringToBytes@len& (0+255),w,b
  7698  002478  5D6E               	subwf	hexStringToBytes@i& (0+255),w,b
  7699  00247A  516B               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7700  00247C  0A80               	xorlw	128
  7701  00247E  5967               	subwfb	??_hexStringToBytes& (0+255),w,b
  7702  002480  E3D5               	bnc	l12701
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;hexutils.c: 44: }
  7706                           ;hexutils.c: 46: return i;
  7707  002482  516E               	movf	hexStringToBytes@i& (0+255),w,b
  7708  002484                     l1594:
  7709                           
  7710                           ; BSR set to: 0
  7711  002484  0012               	return	
  7712  002486                     __end_of_hexStringToBytes:
  7713                           	opt stack 0
  7714                           tblptru	equ	0xFF8
  7715                           tblptrh	equ	0xFF7
  7716                           tblptrl	equ	0xFF6
  7717                           tablat	equ	0xFF5
  7718                           prodh	equ	0xFF4
  7719                           prodl	equ	0xFF3
  7720                           intcon	equ	0xFF2
  7721                           indf0	equ	0xFEF
  7722                           postinc0	equ	0xFEE
  7723                           fsr0h	equ	0xFEA
  7724                           fsr0l	equ	0xFE9
  7725                           wreg	equ	0xFE8
  7726                           indf1	equ	0xFE7
  7727                           postinc1	equ	0xFE6
  7728                           postdec1	equ	0xFE5
  7729                           fsr1h	equ	0xFE2
  7730                           fsr1l	equ	0xFE1
  7731                           indf2	equ	0xFDF
  7732                           postinc2	equ	0xFDE
  7733                           postdec2	equ	0xFDD
  7734                           plusw2	equ	0xFDB
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function _nibbleFromChar *****************
  7740 ;; Defined at:
  7741 ;;		line 20 in file "hexutils.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  c               1    wreg     unsigned char 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  c               1   32[COMRAM] unsigned char 
  7746 ;; Return value:  Size  Location     Type
  7747 ;;                  1    wreg      unsigned char 
  7748 ;; Registers used:
  7749 ;;		wreg, status,2, status,0
  7750 ;; Tracked objects:
  7751 ;;		On entry : F/0
  7752 ;;		On exit  : F/0
  7753 ;;		Unchanged: F/0
  7754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7755 ;;      Params:         0       0       0       0       0       0       0
  7756 ;;      Locals:         1       0       0       0       0       0       0
  7757 ;;      Temps:          0       0       0       0       0       0       0
  7758 ;;      Totals:         1       0       0       0       0       0       0
  7759 ;;Total ram usage:        1 bytes
  7760 ;; Hardware stack levels used:    1
  7761 ;; Hardware stack levels required when called:    3
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_hexStringToBytes
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text4
  7770  00194A                     __ptext4:
  7771                           	opt stack 0
  7772  00194A                     _nibbleFromChar:
  7773                           	opt stack 24
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;incstack = 0
  7777                           ;incstack = 0
  7778                           ;nibbleFromChar@c stored from wreg
  7779  00194A  CFE8 F021          	movff	wreg,nibbleFromChar@c
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7783  00194E  0E2F               	movlw	47
  7784  001950  6421               	cpfsgt	nibbleFromChar@c,c
  7785  001952  D006               	goto	l12981
  7786                           
  7787                           ; BSR set to: 0
  7788  001954  0E3A               	movlw	58
  7789  001956  6021               	cpfslt	nibbleFromChar@c,c
  7790  001958  D003               	goto	l12981
  7791                           
  7792                           ; BSR set to: 0
  7793  00195A  5021               	movf	nibbleFromChar@c,w,c
  7794  00195C  0FD0               	addlw	208
  7795  00195E  D013               	goto	l1588
  7796  001960                     l12981:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7800  001960  0E60               	movlw	96
  7801  001962  6421               	cpfsgt	nibbleFromChar@c,c
  7802  001964  D006               	goto	l12989
  7803                           
  7804                           ; BSR set to: 0
  7805  001966  0E67               	movlw	103
  7806  001968  6021               	cpfslt	nibbleFromChar@c,c
  7807  00196A  D003               	goto	l12989
  7808                           
  7809                           ; BSR set to: 0
  7810  00196C  5021               	movf	nibbleFromChar@c,w,c
  7811  00196E  0FA9               	addlw	169
  7812  001970  D00A               	goto	l1588
  7813  001972                     l12989:
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7817  001972  0E40               	movlw	64
  7818  001974  6421               	cpfsgt	nibbleFromChar@c,c
  7819  001976  D006               	goto	l12997
  7820                           
  7821                           ; BSR set to: 0
  7822  001978  0E47               	movlw	71
  7823  00197A  6021               	cpfslt	nibbleFromChar@c,c
  7824  00197C  D003               	goto	l12997
  7825                           
  7826                           ; BSR set to: 0
  7827  00197E  5021               	movf	nibbleFromChar@c,w,c
  7828  001980  0FC9               	addlw	201
  7829  001982  D001               	goto	l1588
  7830  001984                     l12997:
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;hexutils.c: 24: return 255;
  7834  001984  0EFF               	movlw	255
  7835  001986                     l1588:
  7836                           
  7837                           ; BSR set to: 0
  7838  001986  0012               	return	
  7839  001988                     __end_of_nibbleFromChar:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           indf0	equ	0xFEF
  7849                           postinc0	equ	0xFEE
  7850                           fsr0h	equ	0xFEA
  7851                           fsr0l	equ	0xFE9
  7852                           wreg	equ	0xFE8
  7853                           indf1	equ	0xFE7
  7854                           postinc1	equ	0xFE6
  7855                           postdec1	equ	0xFE5
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           plusw2	equ	0xFDB
  7862                           fsr2h	equ	0xFDA
  7863                           fsr2l	equ	0xFD9
  7864                           status	equ	0xFD8
  7865                           
  7866 ;; *************** function _receiveSendEventSLCAN *****************
  7867 ;; Defined at:
  7868 ;;		line 2153 in file "main.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;		None
  7871 ;; Auto vars:     Size  Location     Type
  7872 ;;  id              4   37[BANK0 ] unsigned long 
  7873 ;;  i               2   42[BANK0 ] int 
  7874 ;;  dlc             1   41[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      enum E15660
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : F/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7884 ;;      Params:         0       0       0       0       0       0       0
  7885 ;;      Locals:         0       7       0       0       0       0       0
  7886 ;;      Temps:          0       3       0       0       0       0       0
  7887 ;;      Totals:         0      10       0       0       0       0       0
  7888 ;;Total ram usage:       10 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    6
  7891 ;; This function calls:
  7892 ;;		_putsUSART
  7893 ;;		_WriteUSART
  7894 ;;		_strlen
  7895 ;;		_getCANFrame
  7896 ;;		_ultoa
  7897 ;;		_itoa
  7898 ;; This function is called by:
  7899 ;;		_doModeSLCAN
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           	psect	text5
  7904  003C0C                     __ptext5:
  7905                           	opt stack 0
  7906  003C0C                     _receiveSendEventSLCAN:
  7907                           	opt stack 22
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;main.c: 2154: int i;
  7911                           ;main.c: 2155: uint8_t dlc;
  7912                           ;main.c: 2156: uint32_t id;
  7913                           ;main.c: 2158: if (getCANFrame(&id, &dlc, vscpData)) {
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;incstack = 0
  7917                           ;incstack = 0
  7918  003C0C  0E89               	movlw	low receiveSendEventSLCAN@dlc
  7919  003C0E  6F6E               	movwf	?_getCANFrame& (0+255),b
  7920  003C10  0E01               	movlw	high _vscpData
  7921  003C12  0100               	movlb	0	; () banked
  7922  003C14  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7923  003C16  0EDC               	movlw	low _vscpData
  7924  003C18  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  7925  003C1A  0E85               	movlw	receiveSendEventSLCAN@id& (0+255)
  7926  003C1C  EC43  F012         	call	_getCANFrame
  7927  003C20  0900               	iorlw	0
  7928  003C22  E101 D0B0          	bz	l1071
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;main.c: 2161: cntRxFrames++;
  7932  003C26  0101               	movlb	1	; () banked
  7933  003C28  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7934  003C2A  0E00               	movlw	0
  7935  003C2C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7936  003C2E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7937  003C30  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7938                           
  7939                           ;main.c: 2162: cntRxBytes += dlc;
  7940  003C32  0100               	movlb	0	; () banked
  7941  003C34  5189               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7942  003C36  0101               	movlb	1	; () banked
  7943  003C38  2708               	addwf	_cntRxBytes& (0+255),f,b
  7944  003C3A  0E00               	movlw	0
  7945  003C3C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7946  003C3E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7947  003C40  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7948  003C42                     l1044:
  7949  003C42  A2AC               	btfss	4012,1,c	;volatile
  7950  003C44  D7FE               	goto	l1044
  7951                           
  7952                           ;main.c: 2165: WriteUSART('T');
  7953  003C46  0E54               	movlw	84
  7954  003C48  EC4B  F00B         	call	_WriteUSART
  7955                           
  7956                           ;main.c: 2167: ultoa(wrkbuf, id, 16);
  7957  003C4C  0E01               	movlw	high _wrkbuf
  7958  003C4E  0100               	movlb	0	; () banked
  7959  003C50  6F76               	movwf	(?_ultoa+1)& (0+255),b
  7960  003C52  0E74               	movlw	low _wrkbuf
  7961  003C54  6F75               	movwf	?_ultoa& (0+255),b
  7962  003C56  C085  F077         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7963  003C5A  C086  F078         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7964  003C5E  C087  F079         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7965  003C62  C088  F07A         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7966  003C66  6B7C               	clrf	(?_ultoa+7)& (0+255),b
  7967  003C68  0E10               	movlw	16
  7968  003C6A  6F7B               	movwf	(?_ultoa+6)& (0+255),b
  7969  003C6C  EC55  F017         	call	_ultoa	;wreg free
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 2169: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7973  003C70  6B8A               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7974  003C72  6B8B               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7975  003C74                     l1049:
  7976                           
  7977                           ; BSR set to: 0
  7978  003C74  A2AC               	btfss	4012,1,c	;volatile
  7979  003C76  D7FE               	goto	l1049
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 2171: WriteUSART('0');
  7983  003C78  0E30               	movlw	48
  7984  003C7A  EC4B  F00B         	call	_WriteUSART
  7985                           
  7986                           ; BSR set to: 0
  7987  003C7E  D884               	call	PL86	;call to abstracted procedure
  7988  003C80  B4D8               	btfsc	status,2,c
  7989  003C82  5D8A               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7990  003C84  E3F7               	bnc	l1049
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;main.c: 2172: }
  7994                           ;main.c: 2173: putsUSART(wrkbuf);
  7995  003C86  0E01               	movlw	high _wrkbuf
  7996  003C88  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  7997  003C8A  0E74               	movlw	low _wrkbuf
  7998  003C8C  6F60               	movwf	?_putsUSART& (0+255),b
  7999  003C8E  ECFF  F00D         	call	_putsUSART	;wreg free
  8000                           
  8001                           ;main.c: 2176: itoa(wrkbuf, dlc, 16);
  8002  003C92  0E01               	movlw	high _wrkbuf
  8003  003C94  0100               	movlb	0	; () banked
  8004  003C96  6F71               	movwf	(?_itoa+1)& (0+255),b
  8005  003C98  0E74               	movlw	low _wrkbuf
  8006  003C9A  6F70               	movwf	?_itoa& (0+255),b
  8007  003C9C  C089  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8008  003CA0  6B73               	clrf	(?_itoa+3)& (0+255),b
  8009  003CA2  6B75               	clrf	(?_itoa+5)& (0+255),b
  8010  003CA4  0E10               	movlw	16
  8011  003CA6  6F74               	movwf	(?_itoa+4)& (0+255),b
  8012  003CA8  EC2E  F00C         	call	_itoa	;wreg free
  8013  003CAC                     l1052:
  8014                           
  8015                           ; BSR set to: 0
  8016  003CAC  A2AC               	btfss	4012,1,c	;volatile
  8017  003CAE  D7FE               	goto	l1052
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;main.c: 2178: WriteUSART(wrkbuf[0]);
  8021  003CB0  0101               	movlb	1	; () banked
  8022  003CB2  5174               	movf	_wrkbuf& (0+255),w,b
  8023  003CB4  EC4B  F00B         	call	_WriteUSART
  8024                           
  8025                           ;main.c: 2181: for (i = 0; i < dlc; i++) {
  8026  003CB8  0100               	movlb	0	; () banked
  8027  003CBA  6B8A               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8028  003CBC  6B8B               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8029  003CBE  D02D               	goto	l15803
  8030  003CC0                     l15791:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;main.c: 2182: itoa(wrkbuf, vscpData[i], 16);
  8034  003CC0  0E01               	movlw	high _wrkbuf
  8035  003CC2  0100               	movlb	0	; () banked
  8036  003CC4  6F71               	movwf	(?_itoa+1)& (0+255),b
  8037  003CC6  0E74               	movlw	low _wrkbuf
  8038  003CC8  6F70               	movwf	?_itoa& (0+255),b
  8039  003CCA  0EDC               	movlw	low _vscpData
  8040  003CCC  258A               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8041  003CCE  6ED9               	movwf	fsr2l,c
  8042  003CD0  0E01               	movlw	high _vscpData
  8043  003CD2  218B               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8044  003CD4  6EDA               	movwf	fsr2h,c
  8045  003CD6  50DF               	movf	indf2,w,c
  8046  003CD8  6F72               	movwf	(?_itoa+2)& (0+255),b
  8047  003CDA  6B73               	clrf	(?_itoa+3)& (0+255),b
  8048  003CDC  6B75               	clrf	(?_itoa+5)& (0+255),b
  8049  003CDE  0E10               	movlw	16
  8050  003CE0  6F74               	movwf	(?_itoa+4)& (0+255),b
  8051  003CE2  EC2E  F00C         	call	_itoa	;wreg free
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;main.c: 2184: if (2 != strlen(wrkbuf)) {
  8055  003CE6  0101               	movlb	1	; () banked
  8056  003CE8  0E01               	movlw	high _wrkbuf
  8057  003CEA  6E22               	movwf	?_strlen+1,c
  8058  003CEC  0E74               	movlw	low _wrkbuf
  8059  003CEE  6E21               	movwf	?_strlen,c
  8060  003CF0  ECE4  F00C         	call	_strlen	;wreg free
  8061  003CF4  5021               	movf	?_strlen,w,c
  8062  003CF6  0A02               	xorlw	2
  8063  003CF8  1022               	iorwf	?_strlen+1,w,c
  8064  003CFA  E005               	bz	l15799
  8065  003CFC                     l1058:
  8066                           
  8067                           ; BSR set to: 0
  8068  003CFC  A2AC               	btfss	4012,1,c	;volatile
  8069  003CFE  D7FE               	goto	l1058
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;main.c: 2186: WriteUSART('0');
  8073  003D00  0E30               	movlw	48
  8074  003D02  EC4B  F00B         	call	_WriteUSART
  8075  003D06                     l15799:
  8076                           
  8077                           ;main.c: 2187: }
  8078                           ;main.c: 2189: putsUSART(wrkbuf);
  8079  003D06  0E01               	movlw	high _wrkbuf
  8080  003D08  0100               	movlb	0	; () banked
  8081  003D0A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  8082  003D0C  0E74               	movlw	low _wrkbuf
  8083  003D0E  6F60               	movwf	?_putsUSART& (0+255),b
  8084  003D10  ECFF  F00D         	call	_putsUSART	;wreg free
  8085  003D14  0100               	movlb	0	; () banked
  8086  003D16  4B8A               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8087  003D18  2B8B               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8088  003D1A                     l15803:
  8089                           
  8090                           ; BSR set to: 0
  8091  003D1A  5189               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8092  003D1C  6F82               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8093  003D1E  6B83               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8094  003D20  518B               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8095  003D22  0A80               	xorlw	128
  8096  003D24  6F84               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8097  003D26  5182               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8098  003D28  5D8A               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8099  003D2A  5183               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8100  003D2C  0A80               	xorlw	128
  8101  003D2E  5984               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8102  003D30  E3C7               	bnc	l15791
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 2190: }
  8106                           ;main.c: 2193: if (nTimeStamp) {
  8107  003D32  5038               	movf	_nTimeStamp,w,c
  8108  003D34  E023               	bz	l1068
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 2194: ultoa(wrkbuf, timer, 16);
  8112  003D36  0E01               	movlw	high _wrkbuf
  8113  003D38  0100               	movlb	0	; () banked
  8114  003D3A  6F76               	movwf	(?_ultoa+1)& (0+255),b
  8115  003D3C  0E74               	movlw	low _wrkbuf
  8116  003D3E  6F75               	movwf	?_ultoa& (0+255),b
  8117  003D40  C118  F077         	movff	_timer,?_ultoa+2	;volatile
  8118  003D44  C119  F078         	movff	_timer+1,?_ultoa+3	;volatile
  8119  003D48  C11A  F079         	movff	_timer+2,?_ultoa+4	;volatile
  8120  003D4C  C11B  F07A         	movff	_timer+3,?_ultoa+5	;volatile
  8121  003D50  6B7C               	clrf	(?_ultoa+7)& (0+255),b
  8122  003D52  0E10               	movlw	16
  8123  003D54  6F7B               	movwf	(?_ultoa+6)& (0+255),b
  8124  003D56  EC55  F017         	call	_ultoa	;wreg free
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;main.c: 2196: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8128  003D5A  6B8A               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8129  003D5C  6B8B               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8130  003D5E                     l1065:
  8131                           
  8132                           ; BSR set to: 0
  8133  003D5E  A2AC               	btfss	4012,1,c	;volatile
  8134  003D60  D7FE               	goto	l1065
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;main.c: 2198: WriteUSART('0');
  8138  003D62  0E30               	movlw	48
  8139  003D64  EC4B  F00B         	call	_WriteUSART
  8140                           
  8141                           ; BSR set to: 0
  8142  003D68  D80F               	call	PL86	;call to abstracted procedure
  8143  003D6A  B4D8               	btfsc	status,2,c
  8144  003D6C  5D8A               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8145  003D6E  E3F7               	bnc	l1065
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;main.c: 2199: }
  8149                           ;main.c: 2200: putsUSART(wrkbuf);
  8150  003D70  0E01               	movlw	high _wrkbuf
  8151  003D72  6F61               	movwf	(?_putsUSART+1)& (0+255),b
  8152  003D74  0E74               	movlw	low _wrkbuf
  8153  003D76  6F60               	movwf	?_putsUSART& (0+255),b
  8154  003D78  ECFF  F00D         	call	_putsUSART	;wreg free
  8155  003D7C                     l1068:
  8156  003D7C  A2AC               	btfss	4012,1,c	;volatile
  8157  003D7E  D7FE               	goto	l1068
  8158                           
  8159                           ;main.c: 2204: WriteUSART(0x0d);
  8160  003D80  0E0D               	movlw	13
  8161  003D82  EC4B  F00B         	call	_WriteUSART
  8162  003D86                     l1071:
  8163  003D86  0012               	return	
  8164  003D88                     __end_of_receiveSendEventSLCAN:
  8165                           	opt stack 0
  8166  003D88                     PL86:
  8167                           	opt stack 22
  8168  003D88  0100               	movlb	0	; () banked
  8169  003D8A  4B8A               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8170  003D8C  2B8B               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8171  003D8E  518B               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8172  003D90  0A80               	xorlw	128
  8173  003D92  0F80               	addlw	-128
  8174  003D94  0CB8               	retlw	184
  8175  003D96                     __end_ofPL86:
  8176                           	opt stack 0
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           indf0	equ	0xFEF
  8185                           postinc0	equ	0xFEE
  8186                           fsr0h	equ	0xFEA
  8187                           fsr0l	equ	0xFE9
  8188                           wreg	equ	0xFE8
  8189                           indf1	equ	0xFE7
  8190                           postinc1	equ	0xFE6
  8191                           postdec1	equ	0xFE5
  8192                           fsr1h	equ	0xFE2
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           plusw2	equ	0xFDB
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _ultoa *****************
  8203 ;; Defined at:
  8204 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  buf             2   21[BANK0 ] PTR unsigned char 
  8207 ;;		 -> wrkbuf(80), 
  8208 ;;  val             4   23[BANK0 ] unsigned long 
  8209 ;;  base            2   27[BANK0 ] int 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  v               4   29[BANK0 ] unsigned long 
  8212 ;;  c               1   33[BANK0 ] unsigned char 
  8213 ;; Return value:  Size  Location     Type
  8214 ;;                  2   21[BANK0 ] PTR unsigned char 
  8215 ;; Registers used:
  8216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8217 ;; Tracked objects:
  8218 ;;		On entry : F/0
  8219 ;;		On exit  : F/0
  8220 ;;		Unchanged: 0/0
  8221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8222 ;;      Params:         0       8       0       0       0       0       0
  8223 ;;      Locals:         0       5       0       0       0       0       0
  8224 ;;      Temps:          0       0       0       0       0       0       0
  8225 ;;      Totals:         0      13       0       0       0       0       0
  8226 ;;Total ram usage:       13 bytes
  8227 ;; Hardware stack levels used:    1
  8228 ;; Hardware stack levels required when called:    4
  8229 ;; This function calls:
  8230 ;;		___lldiv
  8231 ;;		___llmod
  8232 ;; This function is called by:
  8233 ;;		_receiveSendEventSLCAN
  8234 ;; This function uses a non-reentrant model
  8235 ;;
  8236                           
  8237                           	psect	text6
  8238  002EAA                     __ptext6:
  8239                           	opt stack 0
  8240  002EAA                     _ultoa:
  8241                           	opt stack 23
  8242                           
  8243                           ; BSR set to: 0
  8244                           
  8245                           ;incstack = 0
  8246                           ;incstack = 0
  8247  002EAA  C077  F07D         	movff	ultoa@val,ultoa@v
  8248  002EAE  C078  F07E         	movff	ultoa@val+1,ultoa@v+1
  8249  002EB2  C079  F07F         	movff	ultoa@val+2,ultoa@v+2
  8250  002EB6  C07A  F080         	movff	ultoa@val+3,ultoa@v+3
  8251  002EBA                     l12821:
  8252                           
  8253                           ; BSR set to: 0
  8254  002EBA  C07D  F060         	movff	ultoa@v,?___lldiv
  8255  002EBE  C07E  F061         	movff	ultoa@v+1,?___lldiv+1
  8256  002EC2  C07F  F062         	movff	ultoa@v+2,?___lldiv+2
  8257  002EC6  C080  F063         	movff	ultoa@v+3,?___lldiv+3
  8258  002ECA  D858               	call	PL72	;call to abstracted procedure
  8259  002ECC  EC26  F010         	call	___lldiv	;wreg free
  8260  002ED0  C063  F080         	movff	?___lldiv+3,ultoa@v+3
  8261  002ED4  C062  F07F         	movff	?___lldiv+2,ultoa@v+2
  8262  002ED8  C061  F07E         	movff	?___lldiv+1,ultoa@v+1
  8263  002EDC  C060  F07D         	movff	?___lldiv,ultoa@v
  8264                           
  8265                           ; BSR set to: 0
  8266  002EE0  4B75               	infsnz	ultoa@buf& (0+255),f,b
  8267  002EE2  2B76               	incf	(ultoa@buf+1)& (0+255),f,b
  8268                           
  8269                           ; BSR set to: 0
  8270  002EE4  5180               	movf	(ultoa@v+3)& (0+255),w,b
  8271  002EE6  117D               	iorwf	ultoa@v& (0+255),w,b
  8272  002EE8  117E               	iorwf	(ultoa@v+1)& (0+255),w,b
  8273  002EEA  117F               	iorwf	(ultoa@v+2)& (0+255),w,b
  8274  002EEC  E1E6               	bnz	l12821
  8275                           
  8276                           ; BSR set to: 0
  8277  002EEE  C075  FFD9         	movff	ultoa@buf,fsr2l
  8278  002EF2  C076  FFDA         	movff	ultoa@buf+1,fsr2h
  8279  002EF6  6ADF               	clrf	indf2,c
  8280                           
  8281                           ; BSR set to: 0
  8282  002EF8  0775               	decf	ultoa@buf& (0+255),f,b
  8283  002EFA  A0D8               	btfss	status,0,c
  8284  002EFC  0776               	decf	(ultoa@buf+1)& (0+255),f,b
  8285  002EFE                     l12831:
  8286                           
  8287                           ; BSR set to: 0
  8288  002EFE  C077  F06D         	movff	ultoa@val,?___llmod
  8289  002F02  C078  F06E         	movff	ultoa@val+1,?___llmod+1
  8290  002F06  C079  F06F         	movff	ultoa@val+2,?___llmod+2
  8291  002F0A  C07A  F070         	movff	ultoa@val+3,?___llmod+3
  8292  002F0E  C07B  F071         	movff	ultoa@base,?___llmod+4
  8293  002F12  C07C  F072         	movff	ultoa@base+1,?___llmod+5
  8294  002F16  0E00               	movlw	0
  8295  002F18  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8296  002F1A  0EFF               	movlw	-1
  8297  002F1C  6F73               	movwf	(?___llmod+6)& (0+255),b
  8298  002F1E  6F74               	movwf	(?___llmod+7)& (0+255),b
  8299  002F20  ECB5  F00E         	call	___llmod	;wreg free
  8300  002F24  516D               	movf	?___llmod& (0+255),w,b
  8301  002F26  6F81               	movwf	ultoa@c& (0+255),b
  8302                           
  8303                           ; BSR set to: 0
  8304  002F28  C077  F060         	movff	ultoa@val,?___lldiv
  8305  002F2C  C078  F061         	movff	ultoa@val+1,?___lldiv+1
  8306  002F30  C079  F062         	movff	ultoa@val+2,?___lldiv+2
  8307  002F34  C07A  F063         	movff	ultoa@val+3,?___lldiv+3
  8308  002F38  D821               	call	PL72	;call to abstracted procedure
  8309  002F3A  EC26  F010         	call	___lldiv	;wreg free
  8310  002F3E  C063  F07A         	movff	?___lldiv+3,ultoa@val+3
  8311  002F42  C062  F079         	movff	?___lldiv+2,ultoa@val+2
  8312  002F46  C061  F078         	movff	?___lldiv+1,ultoa@val+1
  8313  002F4A  C060  F077         	movff	?___lldiv,ultoa@val
  8314                           
  8315                           ; BSR set to: 0
  8316  002F4E  0E09               	movlw	9
  8317  002F50  6581               	cpfsgt	ultoa@c& (0+255),b
  8318  002F52  D002               	goto	l2438
  8319                           
  8320                           ; BSR set to: 0
  8321  002F54  0E07               	movlw	7
  8322  002F56  2781               	addwf	ultoa@c& (0+255),f,b
  8323  002F58                     l2438:
  8324                           
  8325                           ; BSR set to: 0
  8326  002F58  0E30               	movlw	48
  8327  002F5A  2781               	addwf	ultoa@c& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 0
  8330  002F5C  C075  FFD9         	movff	ultoa@buf,fsr2l
  8331  002F60  C076  FFDA         	movff	ultoa@buf+1,fsr2h
  8332  002F64  C081  FFDF         	movff	ultoa@c,indf2
  8333                           
  8334                           ; BSR set to: 0
  8335  002F68  0775               	decf	ultoa@buf& (0+255),f,b
  8336  002F6A  A0D8               	btfss	status,0,c
  8337  002F6C  0776               	decf	(ultoa@buf+1)& (0+255),f,b
  8338                           
  8339                           ; BSR set to: 0
  8340  002F6E  517A               	movf	(ultoa@val+3)& (0+255),w,b
  8341  002F70  1177               	iorwf	ultoa@val& (0+255),w,b
  8342  002F72  1178               	iorwf	(ultoa@val+1)& (0+255),w,b
  8343  002F74  1179               	iorwf	(ultoa@val+2)& (0+255),w,b
  8344  002F76  B4D8               	btfsc	status,2,c
  8345                           
  8346                           ; BSR set to: 0
  8347  002F78  0012               	return	
  8348  002F7A  D7C1               	goto	l12831
  8349  002F7C                     __end_of_ultoa:
  8350                           	opt stack 0
  8351  002F7C                     PL72:
  8352                           	opt stack 23
  8353  002F7C  C07B  F064         	movff	ultoa@base,?___lldiv+4
  8354  002F80  C07C  F065         	movff	ultoa@base+1,?___lldiv+5
  8355  002F84  0E00               	movlw	0
  8356  002F86  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8357  002F88  0EFF               	movlw	-1
  8358  002F8A  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8359  002F8C  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8360  002F8E  0012               	return	
  8361  002F90                     __end_ofPL72:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           intcon	equ	0xFF2
  8370                           indf0	equ	0xFEF
  8371                           postinc0	equ	0xFEE
  8372                           fsr0h	equ	0xFEA
  8373                           fsr0l	equ	0xFE9
  8374                           wreg	equ	0xFE8
  8375                           indf1	equ	0xFE7
  8376                           postinc1	equ	0xFE6
  8377                           postdec1	equ	0xFE5
  8378                           fsr1h	equ	0xFE2
  8379                           fsr1l	equ	0xFE1
  8380                           indf2	equ	0xFDF
  8381                           postinc2	equ	0xFDE
  8382                           postdec2	equ	0xFDD
  8383                           plusw2	equ	0xFDB
  8384                           fsr2h	equ	0xFDA
  8385                           fsr2l	equ	0xFD9
  8386                           status	equ	0xFD8
  8387                           
  8388 ;; *************** function _doModeVscp *****************
  8389 ;; Defined at:
  8390 ;;		line 1117 in file "main.c"
  8391 ;; Parameters:    Size  Location     Type
  8392 ;;		None
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  c               1   85[BANK0 ] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;		None               void
  8397 ;; Registers used:
  8398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : F/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8404 ;;      Params:         0       0       0       0       0       0       0
  8405 ;;      Locals:         0       1       0       0       0       0       0
  8406 ;;      Temps:          0       0       0       0       0       0       0
  8407 ;;      Totals:         0       1       0       0       0       0       0
  8408 ;;Total ram usage:        1 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; Hardware stack levels required when called:    7
  8411 ;; This function calls:
  8412 ;;		_fifo_read
  8413 ;;		_ECANSetOperationMode
  8414 ;;		_receiveSendMultiEventCANAL
  8415 ;;		_receiveSendEventCANAL
  8416 ;;		_calcCRC
  8417 ;;		_sendVSCPDriverNack
  8418 ;;		_sendVSCPDriverErrorFrame
  8419 ;;		_sendVSCPDriverAck
  8420 ;;		_receiveVSCPModeCanalMsg
  8421 ;;		_receiveVSCPModeMultiCanalMsg
  8422 ;;		_sendVSCPModeCapabilities
  8423 ;;		_sendVSCPDriverCommandReply
  8424 ;; This function is called by:
  8425 ;;		_main
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           	psect	text7
  8430  004276                     __ptext7:
  8431                           	opt stack 0
  8432  004276                     _doModeVscp:
  8433                           	opt stack 22
  8434                           
  8435                           ;main.c: 1118: uint8_t c;
  8436                           ;main.c: 1121: if ( caps.maxCanalFrames > 1 ) {
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;incstack = 0
  8440                           ;incstack = 0
  8441  004276  0101               	movlb	1	; () banked
  8442  004278  EE21  F0E9         	lfsr	2,_caps+1
  8443  00427C  0E01               	movlw	1
  8444  00427E  64DF               	cpfsgt	indf2,c
  8445  004280  D003               	goto	l14109
  8446                           
  8447                           ; BSR set to: 1
  8448                           ;main.c: 1124: receiveSendMultiEventCANAL();
  8449  004282  ECCB  F01E         	call	_receiveSendMultiEventCANAL	;wreg free
  8450                           
  8451                           ;main.c: 1125: }
  8452  004286  D002               	goto	l14111
  8453  004288                     l14109:
  8454                           
  8455                           ; BSR set to: 1
  8456                           ;main.c: 1126: else {
  8457                           ;main.c: 1129: receiveSendEventCANAL();
  8458  004288  ECEA  F01B         	call	_receiveSendEventCANAL	;wreg free
  8459  00428C                     l14111:
  8460                           
  8461                           ;main.c: 1130: }
  8462                           ;main.c: 1133: (INTCONbits.GIE = 0);
  8463  00428C  9EF2               	bcf	intcon,7,c	;volatile
  8464                           
  8465                           ;main.c: 1135: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8466  00428E  0E01               	movlw	high _serialInputFifo
  8467  004290  0100               	movlb	0	; () banked
  8468  004292  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8469  004294  0ED4               	movlw	low _serialInputFifo
  8470  004296  6F60               	movwf	?_fifo_read& (0+255),b
  8471  004298  0E00               	movlw	high doModeVscp@c
  8472  00429A  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8473  00429C  0EB5               	movlw	low doModeVscp@c
  8474  00429E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8475  0042A0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8476  0042A2  0E01               	movlw	1
  8477  0042A4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8478  0042A6  EC0E  F016         	call	_fifo_read	;wreg free
  8479  0042AA  0560               	decf	?_fifo_read& (0+255),w,b
  8480  0042AC  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8481  0042AE  E001 D0C0          	bnz	l14259
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;main.c: 1138: (INTCONbits.GIE = 1);
  8485  0042B2  8EF2               	bsf	intcon,7,c	;volatile
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;main.c: 1141: if ( pos >= sizeof( cmdbuf ) ) {
  8489  0042B4  0E4F               	movlw	79
  8490  0042B6  65E7               	cpfsgt	_pos& (0+255),b
  8491  0042B8  D003               	goto	l669
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;main.c: 1143: pos = 0;
  8495  0042BA  6BE7               	clrf	_pos& (0+255),b
  8496                           
  8497                           ;main.c: 1144: bDLE = 0;
  8498  0042BC  6A34               	clrf	_bDLE,c
  8499                           
  8500                           ;main.c: 1145: stateVscpDriver = 0;
  8501  0042BE  6A3A               	clrf	_stateVscpDriver,c
  8502  0042C0                     l669:
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;main.c: 1146: }
  8506                           ;main.c: 1148: if ( 0 == stateVscpDriver ) {
  8507  0042C0  663A               	tstfsz	_stateVscpDriver,c
  8508  0042C2  D00D               	goto	l14133
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;main.c: 1149: if ( bDLE ) {
  8512  0042C4  5034               	movf	_bDLE,w,c
  8513  0042C6  E008               	bz	l14129
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;main.c: 1150: bDLE = 0;
  8517  0042C8  6A34               	clrf	_bDLE,c
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;main.c: 1153: if ( 0x02 == c ) {
  8521  0042CA  51B5               	movf	doModeVscp@c& (0+255),w,b
  8522  0042CC  0A02               	xorlw	2
  8523  0042CE  E124               	bnz	l14169
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;main.c: 1154: stateVscpDriver = 1;
  8527  0042D0  0E01               	movlw	1
  8528  0042D2  6E3A               	movwf	_stateVscpDriver,c
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 1155: pos = 0;
  8532  0042D4  6BE7               	clrf	_pos& (0+255),b
  8533  0042D6  D020               	goto	l14169
  8534  0042D8                     l14129:
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;main.c: 1158: else {
  8538                           ;main.c: 1159: bDLE = 1;
  8539  0042D8  0E01               	movlw	1
  8540  0042DA  6E34               	movwf	_bDLE,c
  8541  0042DC  D0AB               	goto	l674
  8542  0042DE                     l14133:
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;main.c: 1163: else if ( 1 == stateVscpDriver ) {
  8546  0042DE  043A               	decf	_stateVscpDriver,w,c
  8547  0042E0  E11B               	bnz	l14169
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;main.c: 1166: if (bDLE) {
  8551  0042E2  5034               	movf	_bDLE,w,c
  8552  0042E4  E015               	bz	l14153
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;main.c: 1169: bDLE = 0;
  8556  0042E6  6A34               	clrf	_bDLE,c
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;main.c: 1172: if (0x03 == c) {
  8560  0042E8  51B5               	movf	doModeVscp@c& (0+255),w,b
  8561  0042EA  0A03               	xorlw	3
  8562  0042EC  E103               	bnz	l14143
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;main.c: 1173: stateVscpDriver = 2;
  8566  0042EE  0E02               	movlw	2
  8567  0042F0  6E3A               	movwf	_stateVscpDriver,c
  8568                           
  8569                           ;main.c: 1174: }
  8570  0042F2  D012               	goto	l14169
  8571  0042F4                     l14143:
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;main.c: 1176: else if (0x10 == c) {
  8575  0042F4  51B5               	movf	doModeVscp@c& (0+255),w,b
  8576  0042F6  0A10               	xorlw	16
  8577  0042F8  E10F               	bnz	l14169
  8578  0042FA                     u18890:
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;main.c: 1178: cmdbuf[ pos++ ] = c;
  8582  0042FA  D89D               	call	PL24	;call to abstracted procedure
  8583  0042FC  C0B5  FFDF         	movff	doModeVscp@c,indf2
  8584                           
  8585                           ; BSR set to: 0
  8586  004300  2BE7               	incf	_pos& (0+255),f,b
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 1179: if ( pos >= sizeof( cmdbuf ) ) {
  8590  004302  0E4F               	movlw	79
  8591  004304  65E7               	cpfsgt	_pos& (0+255),b
  8592  004306  D096               	goto	l674
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;main.c: 1182: bDLE = 0;
  8596  004308  6A34               	clrf	_bDLE,c
  8597                           
  8598                           ;main.c: 1183: pos = 0;
  8599  00430A  6BE7               	clrf	_pos& (0+255),b
  8600                           
  8601                           ;main.c: 1184: stateVscpDriver = 0;
  8602  00430C  6A3A               	clrf	_stateVscpDriver,c
  8603  00430E  D092               	goto	l674
  8604  004310                     l14153:
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;main.c: 1190: else {
  8608                           ;main.c: 1191: if (0x10 == c) {
  8609  004310  51B5               	movf	doModeVscp@c& (0+255),w,b
  8610  004312  0A10               	xorlw	16
  8611  004314  E0E1               	bz	l14129
  8612  004316  D7F1               	goto	u18890
  8613  004318                     l14169:
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;main.c: 1207: }
  8617                           ;main.c: 1208: }
  8618                           ;main.c: 1209: }
  8619                           ;main.c: 1211: if (2 == stateVscpDriver) {
  8620  004318  503A               	movf	_stateVscpDriver,w,c
  8621  00431A  0A02               	xorlw	2
  8622  00431C  E001 D089          	bnz	l14259
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;main.c: 1214: stateVscpDriver = 0;
  8626  004320  6A3A               	clrf	_stateVscpDriver,c
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;main.c: 1227: if (calcCRC(cmdbuf, pos)) {
  8630  004322  0E01               	movlw	high _cmdbuf
  8631  004324  0100               	movlb	0	; () banked
  8632  004326  6F6B               	movwf	(?_calcCRC+1)& (0+255),b
  8633  004328  0E24               	movlw	low _cmdbuf
  8634  00432A  6F6A               	movwf	?_calcCRC& (0+255),b
  8635  00432C  C0E7  F06C         	movff	_pos,?_calcCRC+2
  8636  004330  ECC8  F00B         	call	_calcCRC	;wreg free
  8637  004334  0900               	iorlw	0
  8638  004336  E005               	bz	l14177
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1228: sendVSCPDriverNack();
  8642  004338  ECE2  F012         	call	_sendVSCPDriverNack	;wreg free
  8643                           
  8644                           ;main.c: 1229: sendVSCPDriverErrorFrame(1);
  8645  00433C  0E01               	movlw	1
  8646  00433E  EC45  F015         	call	_sendVSCPDriverErrorFrame
  8647  004342                     l14177:
  8648                           
  8649                           ;main.c: 1230: }
  8650                           ;main.c: 1233: if (0 ==
  8651                           ;main.c: 1234: cmdbuf[ 0 ]) {
  8652  004342  0101               	movlb	1	; () banked
  8653  004344  6724               	tstfsz	_cmdbuf& (0+255),b
  8654  004346  D003               	goto	l14181
  8655  004348                     l14179:
  8656                           
  8657                           ;main.c: 1235: sendVSCPDriverAck();
  8658  004348  EC34  F013         	call	_sendVSCPDriverAck	;wreg free
  8659                           
  8660                           ;main.c: 1236: }
  8661  00434C  D06F               	goto	l14255
  8662  00434E                     l14181:
  8663                           
  8664                           ; BSR set to: 1
  8665                           ;main.c: 1238: else if (1 ==
  8666                           ;main.c: 1239: cmdbuf[ 0 ]) {
  8667  00434E  0524               	decf	_cmdbuf& (0+255),w,b
  8668  004350  E103               	bnz	l14185
  8669  004352                     l14183:
  8670                           
  8671                           ;main.c: 1240: sendVSCPDriverNack();
  8672  004352  ECE2  F012         	call	_sendVSCPDriverNack	;wreg free
  8673                           
  8674                           ;main.c: 1241: }
  8675  004356  D06A               	goto	l14255
  8676  004358                     l14185:
  8677                           
  8678                           ; BSR set to: 1
  8679                           ;main.c: 1243: else if (2 ==
  8680                           ;main.c: 1244: cmdbuf[ 0 ]) {
  8681  004358  5124               	movf	_cmdbuf& (0+255),w,b
  8682  00435A  0A02               	xorlw	2
  8683  00435C  E105               	bnz	l14193
  8684                           
  8685                           ; BSR set to: 1
  8686                           ;main.c: 1245: if ( receiveVSCPModeCanalMsg() ) {
  8687  00435E  ECC8  F017         	call	_receiveVSCPModeCanalMsg	;wreg free
  8688  004362  0900               	iorlw	0
  8689  004364  E1F1               	bnz	l14179
  8690  004366  D7F5               	goto	l14183
  8691  004368                     l14193:
  8692                           
  8693                           ; BSR set to: 1
  8694                           ;main.c: 1253: else if (6 ==
  8695                           ;main.c: 1254: cmdbuf[ 0 ]) {
  8696  004368  5124               	movf	_cmdbuf& (0+255),w,b
  8697  00436A  0A06               	xorlw	6
  8698  00436C  E103               	bnz	l14201
  8699                           
  8700                           ; BSR set to: 1
  8701                           ;main.c: 1255: if (receiveVSCPModeMultiCanalMsg()) {
  8702  00436E  EC27  F00B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8703  004372  D7F7               	goto	L5
  8704  004374                     l14201:
  8705                           
  8706                           ; BSR set to: 1
  8707                           ;main.c: 1263: else if (6 ==
  8708                           ;main.c: 1264: cmdbuf[ 0 ]) {
  8709  004374  5124               	movf	_cmdbuf& (0+255),w,b
  8710  004376  0A06               	xorlw	6
  8711  004378  E0EC               	bz	l14183
  8712                           
  8713                           ; BSR set to: 1
  8714                           ;main.c: 1268: else if (3 ==
  8715                           ;main.c: 1269: cmdbuf[ 0 ]) {
  8716  00437A  5124               	movf	_cmdbuf& (0+255),w,b
  8717  00437C  0A03               	xorlw	3
  8718  00437E  E0E9               	bz	l14183
  8719                           
  8720                           ; BSR set to: 1
  8721                           ;main.c: 1273: else if (4 ==
  8722                           ;main.c: 1274: cmdbuf[ 0 ]) {
  8723  004380  5124               	movf	_cmdbuf& (0+255),w,b
  8724  004382  0A04               	xorlw	4
  8725  004384  E0E6               	bz	l14183
  8726                           
  8727                           ; BSR set to: 1
  8728                           ;main.c: 1278: else if (8 ==
  8729                           ;main.c: 1279: cmdbuf[ 0 ]) {
  8730  004386  5124               	movf	_cmdbuf& (0+255),w,b
  8731  004388  0A08               	xorlw	8
  8732  00438A  E107               	bnz	l14219
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;main.c: 1280: caps.maxVscpFrames = cmdbuf[ 5 ];
  8736  00438C  C129  F1E8         	movff	_cmdbuf+5,_caps
  8737                           
  8738                           ;main.c: 1281: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8739  004390  C12A  F1E9         	movff	_cmdbuf+6,_caps+1
  8740                           
  8741                           ; BSR set to: 1
  8742                           ;main.c: 1282: sendVSCPModeCapabilities();
  8743  004394  ECE8  F014         	call	_sendVSCPModeCapabilities	;wreg free
  8744                           
  8745                           ;main.c: 1283: }
  8746  004398  D049               	goto	l14255
  8747  00439A                     l14219:
  8748                           
  8749                           ; BSR set to: 1
  8750                           ;main.c: 1285: else if (255 ==
  8751                           ;main.c: 1286: cmdbuf[ 0 ]) {
  8752  00439A  2924               	incf	_cmdbuf& (0+255),w,b
  8753  00439C  E144               	bnz	l14253
  8754                           
  8755                           ; BSR set to: 1
  8756                           ;main.c: 1288: if (cmdbuf[ 5 ] ==
  8757                           ;main.c: 1289: 0) {
  8758  00439E  6729               	tstfsz	(_cmdbuf+5)& (0+255),b
  8759  0043A0  D006               	goto	l14225
  8760                           
  8761                           ; BSR set to: 1
  8762                           ;main.c: 1290: sendVSCPDriverCommandReply(0, 0);
  8763  0043A2  0E00               	movlw	0
  8764  0043A4  0100               	movlb	0	; () banked
  8765  0043A6  6B6D               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8766  0043A8  EC77  F016         	call	_sendVSCPDriverCommandReply
  8767                           
  8768                           ;main.c: 1291: }
  8769  0043AC  D03F               	goto	l14255
  8770  0043AE                     l14225:
  8771                           
  8772                           ; BSR set to: 1
  8773                           ;main.c: 1293: else if (cmdbuf[ 5 ] ==
  8774                           ;main.c: 1294: 1) {
  8775  0043AE  0529               	decf	(_cmdbuf+5)& (0+255),w,b
  8776  0043B0  E10A               	bnz	l14231
  8777                           
  8778                           ; BSR set to: 1
  8779                           ;main.c: 1295: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8780  0043B2  0E00               	movlw	0
  8781  0043B4  EC60  F00B         	call	_ECANSetOperationMode
  8782                           
  8783                           ;main.c: 1296: sendVSCPDriverCommandReply(0, 1);
  8784  0043B8  0E01               	movlw	1
  8785  0043BA  0100               	movlb	0	; () banked
  8786  0043BC  6F6D               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8787  0043BE  0E00               	movlw	0
  8788  0043C0  EC77  F016         	call	_sendVSCPDriverCommandReply
  8789                           
  8790                           ;main.c: 1297: }
  8791  0043C4  D033               	goto	l14255
  8792  0043C6                     l14231:
  8793                           
  8794                           ; BSR set to: 1
  8795                           ;main.c: 1299: else if (cmdbuf[ 5 ] ==
  8796                           ;main.c: 1300: 2) {
  8797  0043C6  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8798  0043C8  0A02               	xorlw	2
  8799  0043CA  E10A               	bnz	l14237
  8800                           
  8801                           ; BSR set to: 1
  8802                           ;main.c: 1301: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8803  0043CC  0E40               	movlw	64
  8804  0043CE  EC60  F00B         	call	_ECANSetOperationMode
  8805                           
  8806                           ;main.c: 1302: sendVSCPDriverCommandReply(0, 2);
  8807  0043D2  0E02               	movlw	2
  8808  0043D4  0100               	movlb	0	; () banked
  8809  0043D6  6F6D               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8810  0043D8  0E00               	movlw	0
  8811  0043DA  EC77  F016         	call	_sendVSCPDriverCommandReply
  8812                           
  8813                           ;main.c: 1303: }
  8814  0043DE  D026               	goto	l14255
  8815  0043E0                     l14237:
  8816                           
  8817                           ; BSR set to: 1
  8818                           ;main.c: 1305: else if (cmdbuf[ 5 ] ==
  8819                           ;main.c: 1306: 3) {
  8820  0043E0  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8821  0043E2  0A03               	xorlw	3
  8822  0043E4  E10A               	bnz	l14243
  8823                           
  8824                           ; BSR set to: 1
  8825                           ;main.c: 1307: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8826  0043E6  0E60               	movlw	96
  8827  0043E8  EC60  F00B         	call	_ECANSetOperationMode
  8828                           
  8829                           ;main.c: 1308: sendVSCPDriverCommandReply(0, 3);
  8830  0043EC  0E03               	movlw	3
  8831  0043EE  0100               	movlb	0	; () banked
  8832  0043F0  6F6D               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8833  0043F2  0E00               	movlw	0
  8834  0043F4  EC77  F016         	call	_sendVSCPDriverCommandReply
  8835                           
  8836                           ;main.c: 1309: }
  8837  0043F8  D019               	goto	l14255
  8838  0043FA                     l14243:
  8839                           
  8840                           ; BSR set to: 1
  8841                           ;main.c: 1311: else if (cmdbuf[ 5 ] ==
  8842                           ;main.c: 1312: 4) {
  8843  0043FA  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8844  0043FC  0A04               	xorlw	4
  8845  0043FE  E10A               	bnz	l14249
  8846                           
  8847                           ; BSR set to: 1
  8848                           ;main.c: 1313: ECANSetOperationMode(0x20);
  8849  004400  0E20               	movlw	32
  8850  004402  EC60  F00B         	call	_ECANSetOperationMode
  8851                           
  8852                           ;main.c: 1314: sendVSCPDriverCommandReply(0, 4);
  8853  004406  0E04               	movlw	4
  8854  004408  0100               	movlb	0	; () banked
  8855  00440A  6F6D               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8856  00440C  0E00               	movlw	0
  8857  00440E  EC77  F016         	call	_sendVSCPDriverCommandReply
  8858                           
  8859                           ;main.c: 1315: }
  8860  004412  D00C               	goto	l14255
  8861  004414                     l14249:
  8862                           
  8863                           ; BSR set to: 1
  8864                           ;main.c: 1317: else if (cmdbuf[ 5 ] ==
  8865                           ;main.c: 1318: 5) {
  8866  004414  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8867  004416  0A05               	xorlw	5
  8868  004418  E109               	bnz	l14255
  8869                           
  8870                           ; BSR set to: 1
  8871                           ;main.c: 1319: sendVSCPDriverCommandReply(0, 0);
  8872  00441A  0E00               	movlw	0
  8873  00441C  0100               	movlb	0	; () banked
  8874  00441E  6B6D               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8875  004420  EC77  F016         	call	_sendVSCPDriverCommandReply
  8876  004424  D003               	goto	l14255
  8877  004426                     l14253:
  8878                           
  8879                           ; BSR set to: 1
  8880                           ;main.c: 1324: else {
  8881                           ;main.c: 1326: sendVSCPDriverErrorFrame(2);
  8882  004426  0E02               	movlw	2
  8883  004428  EC45  F015         	call	_sendVSCPDriverErrorFrame
  8884  00442C                     l14255:
  8885                           
  8886                           ;main.c: 1327: }
  8887                           ;main.c: 1330: pos = 0;
  8888  00442C  0100               	movlb	0	; () banked
  8889  00442E  6BE7               	clrf	_pos& (0+255),b
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;main.c: 1331: stateVscpDriver = 0;
  8893  004430  6A3A               	clrf	_stateVscpDriver,c
  8894  004432                     l14259:
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;main.c: 1333: }
  8898                           ;main.c: 1335: }
  8899                           ;main.c: 1338: (INTCONbits.GIE = 1);
  8900  004432  8EF2               	bsf	intcon,7,c	;volatile
  8901  004434                     l674:
  8902                           
  8903                           ; BSR set to: 0
  8904  004434  0012               	return	
  8905  004436                     __end_of_doModeVscp:
  8906                           	opt stack 0
  8907  004436                     PL24:
  8908                           	opt stack 19
  8909  004436  0E24               	movlw	low _cmdbuf
  8910  004438  0100               	movlb	0	; () banked
  8911  00443A  25E7               	addwf	_pos& (0+255),w,b
  8912  00443C  6ED9               	movwf	fsr2l,c
  8913  00443E  6ADA               	clrf	fsr2h,c
  8914  004440  0E01               	movlw	high _cmdbuf
  8915  004442  22DA               	addwfc	fsr2h,f,c
  8916  004444  0012               	return	
  8917  004446                     __end_ofPL24:
  8918                           	opt stack 0
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           indf0	equ	0xFEF
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           indf1	equ	0xFE7
  8932                           postinc1	equ	0xFE6
  8933                           postdec1	equ	0xFE5
  8934                           fsr1h	equ	0xFE2
  8935                           fsr1l	equ	0xFE1
  8936                           indf2	equ	0xFDF
  8937                           postinc2	equ	0xFDE
  8938                           postdec2	equ	0xFDD
  8939                           plusw2	equ	0xFDB
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _sendVSCPDriverCommandReply *****************
  8945 ;; Defined at:
  8946 ;;		line 1736 in file "main.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  cmdReplyCode    1    wreg     unsigned char 
  8949 ;;  cmdCode         1   13[BANK0 ] unsigned char 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;  cmdReplyCode    1   14[BANK0 ] unsigned char 
  8952 ;;  crc             1   15[BANK0 ] unsigned char 
  8953 ;; Return value:  Size  Location     Type
  8954 ;;		None               void
  8955 ;; Registers used:
  8956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8957 ;; Tracked objects:
  8958 ;;		On entry : F/0
  8959 ;;		On exit  : 0/0
  8960 ;;		Unchanged: 0/0
  8961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8962 ;;      Params:         0       1       0       0       0       0       0
  8963 ;;      Locals:         0       2       0       0       0       0       0
  8964 ;;      Temps:          0       0       0       0       0       0       0
  8965 ;;      Totals:         0       3       0       0       0       0       0
  8966 ;;Total ram usage:        3 bytes
  8967 ;; Hardware stack levels used:    1
  8968 ;; Hardware stack levels required when called:    6
  8969 ;; This function calls:
  8970 ;;		_WriteUSART
  8971 ;;		_sendEscapedUartData
  8972 ;;		_crc8
  8973 ;; This function is called by:
  8974 ;;		_doModeVscp
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           	psect	text8
  8979  002CEE                     __ptext8:
  8980                           	opt stack 0
  8981  002CEE                     _sendVSCPDriverCommandReply:
  8982                           	opt stack 22
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;incstack = 0
  8986                           ;incstack = 0
  8987                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8988  002CEE  CFE8 F06E          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 1737: uint8_t crc = 0;
  8992  002CF2  6B6F               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8993  002CF4                     l873:
  8994                           
  8995                           ; BSR set to: 0
  8996  002CF4  A2AC               	btfss	4012,1,c	;volatile
  8997  002CF6  D7FE               	goto	l873
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;main.c: 1741: WriteUSART(0x10);
  9001  002CF8  0E10               	movlw	16
  9002  002CFA  EC4B  F00B         	call	_WriteUSART
  9003  002CFE                     l876:
  9004  002CFE  A2AC               	btfss	4012,1,c	;volatile
  9005  002D00  D7FE               	goto	l876
  9006                           
  9007                           ;main.c: 1743: WriteUSART(0x02);
  9008  002D02  0E02               	movlw	2
  9009  002D04  EC4B  F00B         	call	_WriteUSART
  9010  002D08                     l879:
  9011  002D08  A2AC               	btfss	4012,1,c	;volatile
  9012  002D0A  D7FE               	goto	l879
  9013                           
  9014                           ;main.c: 1747: WriteUSART(254);
  9015  002D0C  0EFE               	movlw	254
  9016  002D0E  EC4B  F00B         	call	_WriteUSART
  9017                           
  9018                           ;main.c: 1748: crc8(&crc, 254);
  9019  002D12  0100               	movlb	0	; () banked
  9020  002D14  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9021  002D16  6F68               	movwf	(?_crc8+1)& (0+255),b
  9022  002D18  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9023  002D1A  6F67               	movwf	?_crc8& (0+255),b
  9024  002D1C  0EFE               	movlw	254
  9025  002D1E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9026  002D20  EC13  F00C         	call	_crc8	;wreg free
  9027  002D24                     l882:
  9028  002D24  A2AC               	btfss	4012,1,c	;volatile
  9029  002D26  D7FE               	goto	l882
  9030                           
  9031                           ;main.c: 1752: WriteUSART(0);
  9032  002D28  0E00               	movlw	0
  9033  002D2A  EC4B  F00B         	call	_WriteUSART
  9034                           
  9035                           ;main.c: 1753: crc8(&crc, 0);
  9036  002D2E  D845               	call	PL80	;call to abstracted procedure
  9037  002D30  EC13  F00C         	call	_crc8	;wreg free
  9038                           
  9039                           ; BSR set to: 3
  9040                           ;main.c: 1756: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9041  002D34  0100               	movlb	0	; () banked
  9042  002D36  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9043  002D38  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9044  002D3A  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9045  002D3C  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9046  002D3E  0101               	movlb	1	; () banked
  9047  002D40  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9048  002D42  EC85  F00E         	call	_sendEscapedUartData
  9049  002D46                     l885:
  9050  002D46  A2AC               	btfss	4012,1,c	;volatile
  9051  002D48  D7FE               	goto	l885
  9052                           
  9053                           ;main.c: 1760: WriteUSART(0);
  9054  002D4A  0E00               	movlw	0
  9055  002D4C  EC4B  F00B         	call	_WriteUSART
  9056                           
  9057                           ;main.c: 1761: crc8(&crc, 0);
  9058  002D50  D834               	call	PL80	;call to abstracted procedure
  9059  002D52  EC13  F00C         	call	_crc8	;wreg free
  9060  002D56                     l888:
  9061  002D56  A2AC               	btfss	4012,1,c	;volatile
  9062  002D58  D7FE               	goto	l888
  9063                           
  9064                           ;main.c: 1763: WriteUSART(2);
  9065  002D5A  0E02               	movlw	2
  9066  002D5C  EC4B  F00B         	call	_WriteUSART
  9067                           
  9068                           ;main.c: 1764: crc8(&crc, 2);
  9069  002D60  0100               	movlb	0	; () banked
  9070  002D62  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9071  002D64  6F68               	movwf	(?_crc8+1)& (0+255),b
  9072  002D66  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9073  002D68  6F67               	movwf	?_crc8& (0+255),b
  9074  002D6A  0E02               	movlw	2
  9075  002D6C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9076  002D6E  EC13  F00C         	call	_crc8	;wreg free
  9077  002D72                     l891:
  9078  002D72  A2AC               	btfss	4012,1,c	;volatile
  9079  002D74  D7FE               	goto	l891
  9080                           
  9081                           ;main.c: 1768: sendEscapedUartData(cmdReplyCode, &crc);
  9082  002D76  0100               	movlb	0	; () banked
  9083  002D78  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9084  002D7A  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9085  002D7C  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9086  002D7E  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9087  002D80  516E               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9088  002D82  EC85  F00E         	call	_sendEscapedUartData
  9089  002D86                     l894:
  9090  002D86  A2AC               	btfss	4012,1,c	;volatile
  9091  002D88  D7FE               	goto	l894
  9092                           
  9093                           ;main.c: 1772: sendEscapedUartData(cmdCode, &crc);
  9094  002D8A  0100               	movlb	0	; () banked
  9095  002D8C  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9096  002D8E  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9097  002D90  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9098  002D92  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9099  002D94  516D               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9100  002D96  EC85  F00E         	call	_sendEscapedUartData
  9101                           
  9102                           ;main.c: 1775: sendEscapedUartData(crc, (0));
  9103  002D9A  0100               	movlb	0	; () banked
  9104  002D9C  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9105  002D9E  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
  9106  002DA0  516F               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9107  002DA2  EC85  F00E         	call	_sendEscapedUartData
  9108  002DA6                     l897:
  9109  002DA6  A2AC               	btfss	4012,1,c	;volatile
  9110  002DA8  D7FE               	goto	l897
  9111                           
  9112                           ;main.c: 1779: WriteUSART(0x10);
  9113  002DAA  0E10               	movlw	16
  9114  002DAC  EC4B  F00B         	call	_WriteUSART
  9115  002DB0                     l900:
  9116  002DB0  A2AC               	btfss	4012,1,c	;volatile
  9117  002DB2  D7FE               	goto	l900
  9118                           
  9119                           ;main.c: 1781: WriteUSART(0x03);
  9120  002DB4  0E03               	movlw	3
  9121  002DB6  EF4B  F00B         	goto	_WriteUSART
  9122  002DBA                     __end_of_sendVSCPDriverCommandReply:
  9123                           	opt stack 0
  9124  002DBA                     PL80:
  9125                           	opt stack 22
  9126  002DBA  0100               	movlb	0	; () banked
  9127  002DBC  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9128  002DBE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9129  002DC0  0E6F               	movlw	low sendVSCPDriverCommandReply@crc
  9130  002DC2  6F67               	movwf	?_crc8& (0+255),b
  9131  002DC4  6B69               	clrf	(?_crc8+2)& (0+255),b
  9132  002DC6  0C00               	retlw	0
  9133  002DC8                     __end_ofPL80:
  9134                           	opt stack 0
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           intcon	equ	0xFF2
  9142                           indf0	equ	0xFEF
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           plusw2	equ	0xFDB
  9156                           fsr2h	equ	0xFDA
  9157                           fsr2l	equ	0xFD9
  9158                           status	equ	0xFD8
  9159                           
  9160 ;; *************** function _sendVSCPModeCapabilities *****************
  9161 ;; Defined at:
  9162 ;;		line 2105 in file "main.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  crc             1   13[BANK0 ] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;                  1    wreg      enum E15660
  9169 ;; Registers used:
  9170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9171 ;; Tracked objects:
  9172 ;;		On entry : F/1
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9176 ;;      Params:         0       0       0       0       0       0       0
  9177 ;;      Locals:         0       1       0       0       0       0       0
  9178 ;;      Temps:          0       0       0       0       0       0       0
  9179 ;;      Totals:         0       1       0       0       0       0       0
  9180 ;;Total ram usage:        1 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    6
  9183 ;; This function calls:
  9184 ;;		_WriteUSART
  9185 ;;		_sendEscapedUartData
  9186 ;;		_crc8
  9187 ;; This function is called by:
  9188 ;;		_doModeVscp
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           	psect	text9
  9193  0029D0                     __ptext9:
  9194                           	opt stack 0
  9195  0029D0                     _sendVSCPModeCapabilities:
  9196                           	opt stack 22
  9197                           
  9198                           ; BSR set to: 1
  9199                           ;main.c: 2106: uint8_t crc = 0;
  9200                           
  9201                           ;incstack = 0
  9202                           ;incstack = 0
  9203  0029D0  0100               	movlb	0	; () banked
  9204  0029D2  6B6D               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9205  0029D4                     l1022:
  9206  0029D4  A2AC               	btfss	4012,1,c	;volatile
  9207  0029D6  D7FE               	goto	l1022
  9208                           
  9209                           ;main.c: 2110: WriteUSART(0x10);
  9210  0029D8  0E10               	movlw	16
  9211  0029DA  EC4B  F00B         	call	_WriteUSART
  9212  0029DE                     l1025:
  9213  0029DE  A2AC               	btfss	4012,1,c	;volatile
  9214  0029E0  D7FE               	goto	l1025
  9215                           
  9216                           ;main.c: 2112: WriteUSART(0x02);
  9217  0029E2  0E02               	movlw	2
  9218  0029E4  EC4B  F00B         	call	_WriteUSART
  9219  0029E8                     l1028:
  9220  0029E8  A2AC               	btfss	4012,1,c	;volatile
  9221  0029EA  D7FE               	goto	l1028
  9222                           
  9223                           ;main.c: 2116: WriteUSART(9);
  9224  0029EC  0E09               	movlw	9
  9225  0029EE  EC4B  F00B         	call	_WriteUSART
  9226                           
  9227                           ;main.c: 2117: crc8(&crc, 9);
  9228  0029F2  0100               	movlb	0	; () banked
  9229  0029F4  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9230  0029F6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9231  0029F8  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9232  0029FA  6F67               	movwf	?_crc8& (0+255),b
  9233  0029FC  0E09               	movlw	9
  9234  0029FE  6F69               	movwf	(?_crc8+2)& (0+255),b
  9235  002A00  EC13  F00C         	call	_crc8	;wreg free
  9236  002A04                     l1031:
  9237  002A04  A2AC               	btfss	4012,1,c	;volatile
  9238  002A06  D7FE               	goto	l1031
  9239                           
  9240                           ;main.c: 2121: WriteUSART(0);
  9241  002A08  0E00               	movlw	0
  9242  002A0A  EC4B  F00B         	call	_WriteUSART
  9243                           
  9244                           ;main.c: 2122: crc8(&crc, 0);
  9245  002A0E  0100               	movlb	0	; () banked
  9246  002A10  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9247  002A12  6F68               	movwf	(?_crc8+1)& (0+255),b
  9248  002A14  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9249  002A16  6F67               	movwf	?_crc8& (0+255),b
  9250  002A18  0E00               	movlw	0
  9251  002A1A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9252  002A1C  EC13  F00C         	call	_crc8	;wreg free
  9253                           
  9254                           ; BSR set to: 3
  9255                           ;main.c: 2125: sendEscapedUartData(sequencyno, &crc );
  9256  002A20  0100               	movlb	0	; () banked
  9257  002A22  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9258  002A24  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9259  002A26  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9260  002A28  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9261  002A2A  5039               	movf	_sequencyno,w,c
  9262  002A2C  EC85  F00E         	call	_sendEscapedUartData
  9263                           
  9264                           ;main.c: 2126: sequencyno++;
  9265  002A30  2A39               	incf	_sequencyno,f,c
  9266                           
  9267                           ;main.c: 2129: sendEscapedUartData( 0, &crc );
  9268  002A32  D825               	call	PL96	;call to abstracted procedure
  9269  002A34  EC85  F00E         	call	_sendEscapedUartData
  9270                           
  9271                           ;main.c: 2130: sendEscapedUartData( 2, &crc );
  9272  002A38  0100               	movlb	0	; () banked
  9273  002A3A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9274  002A3C  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9275  002A3E  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9276  002A40  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9277  002A42  0E02               	movlw	2
  9278  002A44  EC85  F00E         	call	_sendEscapedUartData
  9279                           
  9280                           ;main.c: 2133: sendEscapedUartData( 1, &crc );
  9281  002A48  0100               	movlb	0	; () banked
  9282  002A4A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9283  002A4C  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9284  002A4E  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9285  002A50  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9286  002A52  0E01               	movlw	1
  9287  002A54  EC85  F00E         	call	_sendEscapedUartData
  9288                           
  9289                           ;main.c: 2134: sendEscapedUartData( 0, &crc );
  9290  002A58  D812               	call	PL96	;call to abstracted procedure
  9291  002A5A  EC85  F00E         	call	_sendEscapedUartData
  9292                           
  9293                           ;main.c: 2137: sendEscapedUartData(crc, (0));
  9294  002A5E  0100               	movlb	0	; () banked
  9295  002A60  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9296  002A62  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
  9297  002A64  516D               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9298  002A66  EC85  F00E         	call	_sendEscapedUartData
  9299  002A6A                     l1034:
  9300  002A6A  A2AC               	btfss	4012,1,c	;volatile
  9301  002A6C  D7FE               	goto	l1034
  9302                           
  9303                           ;main.c: 2141: WriteUSART(0x10);
  9304  002A6E  0E10               	movlw	16
  9305  002A70  EC4B  F00B         	call	_WriteUSART
  9306  002A74                     l1037:
  9307  002A74  A2AC               	btfss	4012,1,c	;volatile
  9308  002A76  D7FE               	goto	l1037
  9309                           
  9310                           ;main.c: 2143: WriteUSART(0x03);
  9311  002A78  0E03               	movlw	3
  9312  002A7A  EF4B  F00B         	goto	_WriteUSART
  9313  002A7E                     __end_of_sendVSCPModeCapabilities:
  9314                           	opt stack 0
  9315  002A7E                     PL96:
  9316                           	opt stack 22
  9317  002A7E  0100               	movlb	0	; () banked
  9318  002A80  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9319  002A82  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9320  002A84  0E6D               	movlw	low sendVSCPModeCapabilities@crc
  9321  002A86  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9322  002A88  0C00               	retlw	0
  9323  002A8A                     __end_ofPL96:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           intcon	equ	0xFF2
  9332                           indf0	equ	0xFEF
  9333                           postinc0	equ	0xFEE
  9334                           fsr0h	equ	0xFEA
  9335                           fsr0l	equ	0xFE9
  9336                           wreg	equ	0xFE8
  9337                           indf1	equ	0xFE7
  9338                           postinc1	equ	0xFE6
  9339                           postdec1	equ	0xFE5
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           plusw2	equ	0xFDB
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9351 ;; Defined at:
  9352 ;;		line 2237 in file "main.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      enum E15660
  9359 ;; Registers used:
  9360 ;;		wreg
  9361 ;; Tracked objects:
  9362 ;;		On entry : F/1
  9363 ;;		On exit  : F/1
  9364 ;;		Unchanged: F/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9366 ;;      Params:         0       0       0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    3
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_doModeVscp
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text10
  9381  00164E                     __ptext10:
  9382                           	opt stack 0
  9383  00164E                     _receiveVSCPModeMultiCanalMsg:
  9384                           	opt stack 25
  9385                           
  9386                           ; BSR set to: 1
  9387                           
  9388                           ; BSR set to: 1
  9389                           ;main.c: 2239: return 0;
  9390                           
  9391                           ;incstack = 0
  9392                           ;incstack = 0
  9393  00164E  0C00               	retlw	0
  9394  001650                     __end_of_receiveVSCPModeMultiCanalMsg:
  9395                           	opt stack 0
  9396                           tblptru	equ	0xFF8
  9397                           tblptrh	equ	0xFF7
  9398                           tblptrl	equ	0xFF6
  9399                           tablat	equ	0xFF5
  9400                           prodh	equ	0xFF4
  9401                           prodl	equ	0xFF3
  9402                           intcon	equ	0xFF2
  9403                           indf0	equ	0xFEF
  9404                           postinc0	equ	0xFEE
  9405                           fsr0h	equ	0xFEA
  9406                           fsr0l	equ	0xFE9
  9407                           wreg	equ	0xFE8
  9408                           indf1	equ	0xFE7
  9409                           postinc1	equ	0xFE6
  9410                           postdec1	equ	0xFE5
  9411                           fsr1h	equ	0xFE2
  9412                           fsr1l	equ	0xFE1
  9413                           indf2	equ	0xFDF
  9414                           postinc2	equ	0xFDE
  9415                           postdec2	equ	0xFDD
  9416                           plusw2	equ	0xFDB
  9417                           fsr2h	equ	0xFDA
  9418                           fsr2l	equ	0xFD9
  9419                           status	equ	0xFD8
  9420                           
  9421 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9422 ;; Defined at:
  9423 ;;		line 2215 in file "main.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;  data            8   72[BANK0 ] unsigned char [8]
  9428 ;;  id              4   80[BANK0 ] unsigned long 
  9429 ;;  dlc             1   84[BANK0 ] unsigned char 
  9430 ;; Return value:  Size  Location     Type
  9431 ;;                  1    wreg      enum E15660
  9432 ;; Registers used:
  9433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : F/1
  9436 ;;		On exit  : E/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9439 ;;      Params:         0       0       0       0       0       0       0
  9440 ;;      Locals:         0      13       0       0       0       0       0
  9441 ;;      Temps:          0      20       0       0       0       0       0
  9442 ;;      Totals:         0      33       0       0       0       0       0
  9443 ;;Total ram usage:       33 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    6
  9446 ;; This function calls:
  9447 ;;		_memcpy
  9448 ;;		_sendCANFrame
  9449 ;; This function is called by:
  9450 ;;		_doModeVscp
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           	psect	text11
  9455  002F90                     __ptext11:
  9456                           	opt stack 0
  9457  002F90                     _receiveVSCPModeCanalMsg:
  9458                           	opt stack 22
  9459                           
  9460                           ; BSR set to: 1
  9461                           ;main.c: 2216: uint32_t id;
  9462                           ;main.c: 2217: uint8_t dlc;
  9463                           ;main.c: 2218: uint8_t data[8];
  9464                           ;main.c: 2220: id = ((uint32_t) cmdbuf[5] << 26) |
  9465                           ;main.c: 2221: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9466                           ;main.c: 2222: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9467                           ;main.c: 2223: cmdbuf[5 + 3];
  9468                           
  9469                           ; BSR set to: 1
  9470                           ;incstack = 0
  9471                           ;incstack = 0
  9472  002F90  C12B  F094         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9473  002F94  0100               	movlb	0	; () banked
  9474  002F96  6B95               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9475  002F98  6B96               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9476  002F9A  6B97               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9477  002F9C  C096  F097         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9478  002FA0  C095  F096         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9479  002FA4  C094  F095         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9480  002FA8  6B94               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9481  002FAA  C12A  F098         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9482  002FAE  6B99               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9483  002FB0  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9484  002FB2  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9485  002FB4  C099  F09B         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9486  002FB8  C098  F09A         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9487  002FBC  6B99               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9488  002FBE  6B98               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9489  002FC0  C129  F09C         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9490  002FC4  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9491  002FC6  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9492  002FC8  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9493  002FCA  0E1A               	movlw	26
  9494  002FCC                     u21525:
  9495  002FCC  90D8               	bcf	status,0,c
  9496  002FCE  379C               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9497  002FD0  379D               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9498  002FD2  379E               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9499  002FD4  379F               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9500  002FD6  2EE8               	decfsz	wreg,f,c
  9501  002FD8  D7F9               	goto	u21525
  9502  002FDA  5198               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9503  002FDC  119C               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9504  002FDE  6FA0               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9505  002FE0  5199               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9506  002FE2  119D               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9507  002FE4  6FA1               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9508  002FE6  519A               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9509  002FE8  119E               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9510  002FEA  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9511  002FEC  519B               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9512  002FEE  119F               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9513  002FF0  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9514  002FF2  5194               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9515  002FF4  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9516  002FF6  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9517  002FF8  5195               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9518  002FFA  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9519  002FFC  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9520  002FFE  5196               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9521  003000  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9522  003002  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9523  003004  5197               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9524  003006  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9525  003008  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9526  00300A  0101               	movlb	1	; () banked
  9527  00300C  512C               	movf	(_cmdbuf+8)& (0+255),w,b
  9528  00300E  0100               	movlb	0	; () banked
  9529  003010  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9530  003012  6FB0               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9531  003014  51A5               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9532  003016  6FB1               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9533  003018  51A6               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9534  00301A  6FB2               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9535  00301C  51A7               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9536  00301E  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9537                           
  9538                           ;main.c: 2224: dlc = cmdbuf[4] - 4;
  9539  003020  0101               	movlb	1	; () banked
  9540  003022  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  9541  003024  0FFC               	addlw	252
  9542  003026  0100               	movlb	0	; () banked
  9543  003028  6FB4               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;main.c: 2225: if ( dlc > 8 ) return 0;
  9547  00302A  0E08               	movlw	8
  9548  00302C  65B4               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9549  00302E  D002               	goto	l15691
  9550                           
  9551                           ; BSR set to: 0
  9552  003030  0E00               	movlw	0
  9553  003032  D021               	goto	l1075
  9554  003034                     l15691:
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;main.c: 2226: memcpy(data, cmdbuf + 5 + 4, dlc);
  9558  003034  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9559  003036  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9560  003038  0EA8               	movlw	low receiveVSCPModeCanalMsg@data
  9561  00303A  6F60               	movwf	?_memcpy& (0+255),b
  9562  00303C  0E2D               	movlw	low (_cmdbuf+9)
  9563  00303E  6F94               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9564  003040  0E01               	movlw	high (_cmdbuf+9)
  9565  003042  6F95               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9566  003044  C094  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9567  003048  C095  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9568  00304C  C0B4  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9569  003050  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9570  003052  EC05  F00D         	call	_memcpy	;wreg free
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;main.c: 2228: return sendCANFrame(id, dlc, data);
  9574  003056  C0B0  F08D         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9575  00305A  C0B1  F08E         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9576  00305E  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9577  003062  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9578  003066  C0B4  F091         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9579  00306A  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9580  00306C  6F93               	movwf	(?_sendCANFrame+6)& (0+255),b
  9581  00306E  0EA8               	movlw	low receiveVSCPModeCanalMsg@data
  9582  003070  6F92               	movwf	(?_sendCANFrame+5)& (0+255),b
  9583  003072  EC4A  F00C         	call	_sendCANFrame	;wreg free
  9584  003076                     l1075:
  9585  003076  0012               	return	
  9586  003078                     __end_of_receiveVSCPModeCanalMsg:
  9587                           	opt stack 0
  9588                           tblptru	equ	0xFF8
  9589                           tblptrh	equ	0xFF7
  9590                           tblptrl	equ	0xFF6
  9591                           tablat	equ	0xFF5
  9592                           prodh	equ	0xFF4
  9593                           prodl	equ	0xFF3
  9594                           intcon	equ	0xFF2
  9595                           indf0	equ	0xFEF
  9596                           postinc0	equ	0xFEE
  9597                           fsr0h	equ	0xFEA
  9598                           fsr0l	equ	0xFE9
  9599                           wreg	equ	0xFE8
  9600                           indf1	equ	0xFE7
  9601                           postinc1	equ	0xFE6
  9602                           postdec1	equ	0xFE5
  9603                           fsr1h	equ	0xFE2
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           plusw2	equ	0xFDB
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _memcpy *****************
  9614 ;; Defined at:
  9615 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  d1              2    0[BANK0 ] PTR void 
  9618 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9619 ;;  s1              2    2[BANK0 ] PTR const void 
  9620 ;;		 -> vscpData(8), cmdbuf(80), 
  9621 ;;  n               2    4[BANK0 ] unsigned int 
  9622 ;; Auto vars:     Size  Location     Type
  9623 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9624 ;;		 -> vscpData(8), cmdbuf(80), 
  9625 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9626 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9627 ;; Return value:  Size  Location     Type
  9628 ;;                  2    0[BANK0 ] PTR void 
  9629 ;; Registers used:
  9630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9631 ;; Tracked objects:
  9632 ;;		On entry : F/0
  9633 ;;		On exit  : F/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9636 ;;      Params:         0       6       0       0       0       0       0
  9637 ;;      Locals:         0       4       0       0       0       0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0
  9639 ;;      Totals:         0      10       0       0       0       0       0
  9640 ;;Total ram usage:       10 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    3
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_doModeSLCAN
  9647 ;;		_receiveVSCPModeCanalMsg
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text12
  9652  001A0A                     __ptext12:
  9653                           	opt stack 0
  9654  001A0A                     _memcpy:
  9655                           	opt stack 25
  9656                           
  9657                           ; BSR set to: 0
  9658                           
  9659                           ;incstack = 0
  9660                           ;incstack = 0
  9661  001A0A  C062  F068         	movff	memcpy@s1,memcpy@s
  9662  001A0E  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9663  001A12  C060  F066         	movff	memcpy@d1,memcpy@d
  9664  001A16  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9665  001A1A  D00E               	goto	l12721
  9666  001A1C                     l12715:
  9667                           
  9668                           ; BSR set to: 0
  9669  001A1C  C068  FFD9         	movff	memcpy@s,fsr2l
  9670  001A20  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9671  001A24  C066  FFE1         	movff	memcpy@d,fsr1l
  9672  001A28  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9673  001A2C  CFDF FFE7          	movff	indf2,indf1
  9674                           
  9675                           ; BSR set to: 0
  9676  001A30  4B68               	infsnz	memcpy@s& (0+255),f,b
  9677  001A32  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9678                           
  9679                           ; BSR set to: 0
  9680  001A34  4B66               	infsnz	memcpy@d& (0+255),f,b
  9681  001A36  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9682  001A38                     l12721:
  9683                           
  9684                           ; BSR set to: 0
  9685  001A38  0764               	decf	memcpy@n& (0+255),f,b
  9686  001A3A  A0D8               	btfss	status,0,c
  9687  001A3C  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9688  001A3E  0100               	movlb	0	; () banked
  9689  001A40  2964               	incf	memcpy@n& (0+255),w,b
  9690  001A42  B4D8               	btfsc	status,2,c
  9691  001A44  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9692  001A46  B4D8               	btfsc	status,2,c
  9693                           
  9694                           ; BSR set to: 0
  9695  001A48  0012               	return	
  9696  001A4A  D7E8               	goto	l12715
  9697  001A4C                     __end_of_memcpy:
  9698                           	opt stack 0
  9699                           tblptru	equ	0xFF8
  9700                           tblptrh	equ	0xFF7
  9701                           tblptrl	equ	0xFF6
  9702                           tablat	equ	0xFF5
  9703                           prodh	equ	0xFF4
  9704                           prodl	equ	0xFF3
  9705                           intcon	equ	0xFF2
  9706                           indf0	equ	0xFEF
  9707                           postinc0	equ	0xFEE
  9708                           fsr0h	equ	0xFEA
  9709                           fsr0l	equ	0xFE9
  9710                           wreg	equ	0xFE8
  9711                           indf1	equ	0xFE7
  9712                           postinc1	equ	0xFE6
  9713                           postdec1	equ	0xFE5
  9714                           fsr1h	equ	0xFE2
  9715                           fsr1l	equ	0xFE1
  9716                           indf2	equ	0xFDF
  9717                           postinc2	equ	0xFDE
  9718                           postdec2	equ	0xFDD
  9719                           plusw2	equ	0xFDB
  9720                           fsr2h	equ	0xFDA
  9721                           fsr2l	equ	0xFD9
  9722                           status	equ	0xFD8
  9723                           
  9724 ;; *************** function _sendVSCPDriverAck *****************
  9725 ;; Defined at:
  9726 ;;		line 1647 in file "main.c"
  9727 ;; Parameters:    Size  Location     Type
  9728 ;;		None
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;  crc             1   13[BANK0 ] unsigned char 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;		None               void
  9733 ;; Registers used:
  9734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : E/1
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9740 ;;      Params:         0       0       0       0       0       0       0
  9741 ;;      Locals:         0       1       0       0       0       0       0
  9742 ;;      Temps:          0       0       0       0       0       0       0
  9743 ;;      Totals:         0       1       0       0       0       0       0
  9744 ;;Total ram usage:        1 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:    6
  9747 ;; This function calls:
  9748 ;;		_WriteUSART
  9749 ;;		_sendEscapedUartData
  9750 ;;		_crc8
  9751 ;; This function is called by:
  9752 ;;		_doModeVscp
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           	psect	text13
  9757  002668                     __ptext13:
  9758                           	opt stack 0
  9759  002668                     _sendVSCPDriverAck:
  9760                           	opt stack 22
  9761                           
  9762                           ;main.c: 1648: uint8_t crc = 0;
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;incstack = 0
  9766                           ;incstack = 0
  9767  002668  0100               	movlb	0	; () banked
  9768  00266A  6B6D               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9769  00266C                     l819:
  9770  00266C  A2AC               	btfss	4012,1,c	;volatile
  9771  00266E  D7FE               	goto	l819
  9772                           
  9773                           ;main.c: 1652: WriteUSART(0x10);
  9774  002670  0E10               	movlw	16
  9775  002672  EC4B  F00B         	call	_WriteUSART
  9776  002676                     l822:
  9777  002676  A2AC               	btfss	4012,1,c	;volatile
  9778  002678  D7FE               	goto	l822
  9779                           
  9780                           ;main.c: 1654: WriteUSART(0x02);
  9781  00267A  0E02               	movlw	2
  9782  00267C  EC4B  F00B         	call	_WriteUSART
  9783  002680                     l825:
  9784  002680  A2AC               	btfss	4012,1,c	;volatile
  9785  002682  D7FE               	goto	l825
  9786                           
  9787                           ;main.c: 1658: WriteUSART(251);
  9788  002684  0EFB               	movlw	251
  9789  002686  EC4B  F00B         	call	_WriteUSART
  9790                           
  9791                           ;main.c: 1659: crc8(&crc, 251);
  9792  00268A  0100               	movlb	0	; () banked
  9793  00268C  0E00               	movlw	high sendVSCPDriverAck@crc
  9794  00268E  6F68               	movwf	(?_crc8+1)& (0+255),b
  9795  002690  0E6D               	movlw	low sendVSCPDriverAck@crc
  9796  002692  6F67               	movwf	?_crc8& (0+255),b
  9797  002694  0EFB               	movlw	251
  9798  002696  6F69               	movwf	(?_crc8+2)& (0+255),b
  9799  002698  EC13  F00C         	call	_crc8	;wreg free
  9800  00269C                     l828:
  9801  00269C  A2AC               	btfss	4012,1,c	;volatile
  9802  00269E  D7FE               	goto	l828
  9803                           
  9804                           ;main.c: 1663: WriteUSART(0);
  9805  0026A0  0E00               	movlw	0
  9806  0026A2  EC4B  F00B         	call	_WriteUSART
  9807                           
  9808                           ;main.c: 1664: crc8(&crc, 0);
  9809  0026A6  D82B               	call	PL42	;call to abstracted procedure
  9810  0026A8  EC13  F00C         	call	_crc8	;wreg free
  9811                           
  9812                           ; BSR set to: 3
  9813                           ;main.c: 1667: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9814  0026AC  0100               	movlb	0	; () banked
  9815  0026AE  0E00               	movlw	high sendVSCPDriverAck@crc
  9816  0026B0  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9817  0026B2  0E6D               	movlw	low sendVSCPDriverAck@crc
  9818  0026B4  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
  9819  0026B6  0101               	movlb	1	; () banked
  9820  0026B8  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9821  0026BA  EC85  F00E         	call	_sendEscapedUartData
  9822  0026BE                     l831:
  9823  0026BE  A2AC               	btfss	4012,1,c	;volatile
  9824  0026C0  D7FE               	goto	l831
  9825                           
  9826                           ;main.c: 1671: WriteUSART(0);
  9827  0026C2  0E00               	movlw	0
  9828  0026C4  EC4B  F00B         	call	_WriteUSART
  9829                           
  9830                           ;main.c: 1672: crc8(&crc, 0);
  9831  0026C8  D81A               	call	PL42	;call to abstracted procedure
  9832  0026CA  EC13  F00C         	call	_crc8	;wreg free
  9833  0026CE                     l834:
  9834  0026CE  A2AC               	btfss	4012,1,c	;volatile
  9835  0026D0  D7FE               	goto	l834
  9836                           
  9837                           ;main.c: 1674: WriteUSART(0);
  9838  0026D2  0E00               	movlw	0
  9839  0026D4  EC4B  F00B         	call	_WriteUSART
  9840                           
  9841                           ;main.c: 1675: crc8(&crc, 0);
  9842  0026D8  D812               	call	PL42	;call to abstracted procedure
  9843  0026DA  EC13  F00C         	call	_crc8	;wreg free
  9844                           
  9845                           ; BSR set to: 3
  9846                           ;main.c: 1678: sendEscapedUartData(crc, (0));
  9847  0026DE  0100               	movlb	0	; () banked
  9848  0026E0  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9849  0026E2  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
  9850  0026E4  516D               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9851  0026E6  EC85  F00E         	call	_sendEscapedUartData
  9852  0026EA                     l837:
  9853  0026EA  A2AC               	btfss	4012,1,c	;volatile
  9854  0026EC  D7FE               	goto	l837
  9855                           
  9856                           ;main.c: 1682: WriteUSART(0x10);
  9857  0026EE  0E10               	movlw	16
  9858  0026F0  EC4B  F00B         	call	_WriteUSART
  9859  0026F4                     l840:
  9860  0026F4  A2AC               	btfss	4012,1,c	;volatile
  9861  0026F6  D7FE               	goto	l840
  9862                           
  9863                           ;main.c: 1684: WriteUSART(0x03);
  9864  0026F8  0E03               	movlw	3
  9865  0026FA  EF4B  F00B         	goto	_WriteUSART
  9866  0026FE                     __end_of_sendVSCPDriverAck:
  9867                           	opt stack 0
  9868  0026FE                     PL42:
  9869                           	opt stack 22
  9870  0026FE  0100               	movlb	0	; () banked
  9871  002700  0E00               	movlw	high sendVSCPDriverAck@crc
  9872  002702  6F68               	movwf	(?_crc8+1)& (0+255),b
  9873  002704  0E6D               	movlw	low sendVSCPDriverAck@crc
  9874  002706  6F67               	movwf	?_crc8& (0+255),b
  9875  002708  6B69               	clrf	(?_crc8+2)& (0+255),b
  9876  00270A  0C00               	retlw	0
  9877  00270C                     __end_ofPL42:
  9878                           	opt stack 0
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           intcon	equ	0xFF2
  9886                           indf0	equ	0xFEF
  9887                           postinc0	equ	0xFEE
  9888                           fsr0h	equ	0xFEA
  9889                           fsr0l	equ	0xFE9
  9890                           wreg	equ	0xFE8
  9891                           indf1	equ	0xFE7
  9892                           postinc1	equ	0xFE6
  9893                           postdec1	equ	0xFE5
  9894                           fsr1h	equ	0xFE2
  9895                           fsr1l	equ	0xFE1
  9896                           indf2	equ	0xFDF
  9897                           postinc2	equ	0xFDE
  9898                           postdec2	equ	0xFDD
  9899                           plusw2	equ	0xFDB
  9900                           fsr2h	equ	0xFDA
  9901                           fsr2l	equ	0xFD9
  9902                           status	equ	0xFD8
  9903                           
  9904 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9905 ;; Defined at:
  9906 ;;		line 1599 in file "main.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;  errorcode       1    wreg     unsigned char 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  errorcode       1   13[BANK0 ] unsigned char 
  9911 ;;  crc             1   14[BANK0 ] unsigned char 
  9912 ;; Return value:  Size  Location     Type
  9913 ;;		None               void
  9914 ;; Registers used:
  9915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9916 ;; Tracked objects:
  9917 ;;		On entry : 0/0
  9918 ;;		On exit  : 0/0
  9919 ;;		Unchanged: 0/0
  9920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9921 ;;      Params:         0       0       0       0       0       0       0
  9922 ;;      Locals:         0       2       0       0       0       0       0
  9923 ;;      Temps:          0       0       0       0       0       0       0
  9924 ;;      Totals:         0       2       0       0       0       0       0
  9925 ;;Total ram usage:        2 bytes
  9926 ;; Hardware stack levels used:    1
  9927 ;; Hardware stack levels required when called:    6
  9928 ;; This function calls:
  9929 ;;		_WriteUSART
  9930 ;;		_sendEscapedUartData
  9931 ;;		_crc8
  9932 ;; This function is called by:
  9933 ;;		_doModeVscp
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           	psect	text14
  9938  002A8A                     __ptext14:
  9939                           	opt stack 0
  9940  002A8A                     _sendVSCPDriverErrorFrame:
  9941                           	opt stack 22
  9942                           
  9943                           ;incstack = 0
  9944                           ;incstack = 0
  9945                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9946  002A8A  CFE8 F06D          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9947                           
  9948                           ;main.c: 1600: uint8_t crc = 0;
  9949  002A8E  0100               	movlb	0	; () banked
  9950  002A90  6B6E               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9951  002A92                     l792:
  9952  002A92  A2AC               	btfss	4012,1,c	;volatile
  9953  002A94  D7FE               	goto	l792
  9954                           
  9955                           ;main.c: 1604: WriteUSART(0x10);
  9956  002A96  0E10               	movlw	16
  9957  002A98  EC4B  F00B         	call	_WriteUSART
  9958  002A9C                     l795:
  9959  002A9C  A2AC               	btfss	4012,1,c	;volatile
  9960  002A9E  D7FE               	goto	l795
  9961                           
  9962                           ;main.c: 1606: WriteUSART(0x02);
  9963  002AA0  0E02               	movlw	2
  9964  002AA2  EC4B  F00B         	call	_WriteUSART
  9965  002AA6                     l798:
  9966  002AA6  A2AC               	btfss	4012,1,c	;volatile
  9967  002AA8  D7FE               	goto	l798
  9968                           
  9969                           ;main.c: 1610: WriteUSART(253);
  9970  002AAA  0EFD               	movlw	253
  9971  002AAC  EC4B  F00B         	call	_WriteUSART
  9972                           
  9973                           ;main.c: 1611: crc8(&crc, 253);
  9974  002AB0  0100               	movlb	0	; () banked
  9975  002AB2  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9976  002AB4  6F68               	movwf	(?_crc8+1)& (0+255),b
  9977  002AB6  0E6E               	movlw	low sendVSCPDriverErrorFrame@crc
  9978  002AB8  6F67               	movwf	?_crc8& (0+255),b
  9979  002ABA  0EFD               	movlw	253
  9980  002ABC  6F69               	movwf	(?_crc8+2)& (0+255),b
  9981  002ABE  EC13  F00C         	call	_crc8	;wreg free
  9982  002AC2                     l801:
  9983  002AC2  A2AC               	btfss	4012,1,c	;volatile
  9984  002AC4  D7FE               	goto	l801
  9985                           
  9986                           ;main.c: 1615: WriteUSART(0);
  9987  002AC6  0E00               	movlw	0
  9988  002AC8  EC4B  F00B         	call	_WriteUSART
  9989                           
  9990                           ;main.c: 1616: crc8(&crc, 0);
  9991  002ACC  D839               	call	PL88	;call to abstracted procedure
  9992  002ACE  EC13  F00C         	call	_crc8	;wreg free
  9993                           
  9994                           ; BSR set to: 3
  9995                           ;main.c: 1619: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9996  002AD2  0100               	movlb	0	; () banked
  9997  002AD4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9998  002AD6  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9999  002AD8  0E6E               	movlw	low sendVSCPDriverErrorFrame@crc
 10000  002ADA  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10001  002ADC  0101               	movlb	1	; () banked
 10002  002ADE  5126               	movf	(_cmdbuf+2)& (0+255),w,b
 10003  002AE0  EC85  F00E         	call	_sendEscapedUartData
 10004  002AE4                     l804:
 10005  002AE4  A2AC               	btfss	4012,1,c	;volatile
 10006  002AE6  D7FE               	goto	l804
 10007                           
 10008                           ;main.c: 1623: WriteUSART(0);
 10009  002AE8  0E00               	movlw	0
 10010  002AEA  EC4B  F00B         	call	_WriteUSART
 10011                           
 10012                           ;main.c: 1624: crc8(&crc, 0);
 10013  002AEE  D828               	call	PL88	;call to abstracted procedure
 10014  002AF0  EC13  F00C         	call	_crc8	;wreg free
 10015  002AF4                     l807:
 10016  002AF4  A2AC               	btfss	4012,1,c	;volatile
 10017  002AF6  D7FE               	goto	l807
 10018                           
 10019                           ;main.c: 1626: WriteUSART(1);
 10020  002AF8  0E01               	movlw	1
 10021  002AFA  EC4B  F00B         	call	_WriteUSART
 10022                           
 10023                           ;main.c: 1627: crc8(&crc, 1);
 10024  002AFE  0100               	movlb	0	; () banked
 10025  002B00  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10026  002B02  6F68               	movwf	(?_crc8+1)& (0+255),b
 10027  002B04  0E6E               	movlw	low sendVSCPDriverErrorFrame@crc
 10028  002B06  6F67               	movwf	?_crc8& (0+255),b
 10029  002B08  0E01               	movlw	1
 10030  002B0A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10031  002B0C  EC13  F00C         	call	_crc8	;wreg free
 10032                           
 10033                           ; BSR set to: 3
 10034                           ;main.c: 1630: sendEscapedUartData(errorcode, &crc);
 10035  002B10  0100               	movlb	0	; () banked
 10036  002B12  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10037  002B14  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10038  002B16  0E6E               	movlw	low sendVSCPDriverErrorFrame@crc
 10039  002B18  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10040  002B1A  516D               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10041  002B1C  EC85  F00E         	call	_sendEscapedUartData
 10042                           
 10043                           ;main.c: 1633: sendEscapedUartData(crc, (0));
 10044  002B20  0100               	movlb	0	; () banked
 10045  002B22  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10046  002B24  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
 10047  002B26  516E               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10048  002B28  EC85  F00E         	call	_sendEscapedUartData
 10049  002B2C                     l810:
 10050  002B2C  A2AC               	btfss	4012,1,c	;volatile
 10051  002B2E  D7FE               	goto	l810
 10052                           
 10053                           ;main.c: 1637: WriteUSART(0x10);
 10054  002B30  0E10               	movlw	16
 10055  002B32  EC4B  F00B         	call	_WriteUSART
 10056  002B36                     l813:
 10057  002B36  A2AC               	btfss	4012,1,c	;volatile
 10058  002B38  D7FE               	goto	l813
 10059                           
 10060                           ;main.c: 1639: WriteUSART(0x03);
 10061  002B3A  0E03               	movlw	3
 10062  002B3C  EF4B  F00B         	goto	_WriteUSART
 10063  002B40                     __end_of_sendVSCPDriverErrorFrame:
 10064                           	opt stack 0
 10065  002B40                     PL88:
 10066                           	opt stack 22
 10067  002B40  0100               	movlb	0	; () banked
 10068  002B42  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10069  002B44  6F68               	movwf	(?_crc8+1)& (0+255),b
 10070  002B46  0E6E               	movlw	low sendVSCPDriverErrorFrame@crc
 10071  002B48  6F67               	movwf	?_crc8& (0+255),b
 10072  002B4A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10073  002B4C  0C00               	retlw	0
 10074  002B4E                     __end_ofPL88:
 10075                           	opt stack 0
 10076                           tblptru	equ	0xFF8
 10077                           tblptrh	equ	0xFF7
 10078                           tblptrl	equ	0xFF6
 10079                           tablat	equ	0xFF5
 10080                           prodh	equ	0xFF4
 10081                           prodl	equ	0xFF3
 10082                           intcon	equ	0xFF2
 10083                           indf0	equ	0xFEF
 10084                           postinc0	equ	0xFEE
 10085                           fsr0h	equ	0xFEA
 10086                           fsr0l	equ	0xFE9
 10087                           wreg	equ	0xFE8
 10088                           indf1	equ	0xFE7
 10089                           postinc1	equ	0xFE6
 10090                           postdec1	equ	0xFE5
 10091                           fsr1h	equ	0xFE2
 10092                           fsr1l	equ	0xFE1
 10093                           indf2	equ	0xFDF
 10094                           postinc2	equ	0xFDE
 10095                           postdec2	equ	0xFDD
 10096                           plusw2	equ	0xFDB
 10097                           fsr2h	equ	0xFDA
 10098                           fsr2l	equ	0xFD9
 10099                           status	equ	0xFD8
 10100                           
 10101 ;; *************** function _sendVSCPDriverNack *****************
 10102 ;; Defined at:
 10103 ;;		line 1691 in file "main.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;		None
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;  crc             1   13[BANK0 ] unsigned char 
 10108 ;; Return value:  Size  Location     Type
 10109 ;;		None               void
 10110 ;; Registers used:
 10111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10112 ;; Tracked objects:
 10113 ;;		On entry : E/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10117 ;;      Params:         0       0       0       0       0       0       0
 10118 ;;      Locals:         0       1       0       0       0       0       0
 10119 ;;      Temps:          0       0       0       0       0       0       0
 10120 ;;      Totals:         0       1       0       0       0       0       0
 10121 ;;Total ram usage:        1 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    6
 10124 ;; This function calls:
 10125 ;;		_WriteUSART
 10126 ;;		_sendEscapedUartData
 10127 ;;		_crc8
 10128 ;; This function is called by:
 10129 ;;		_doModeVscp
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           	psect	text15
 10134  0025C4                     __ptext15:
 10135                           	opt stack 0
 10136  0025C4                     _sendVSCPDriverNack:
 10137                           	opt stack 22
 10138                           
 10139                           ;main.c: 1692: uint8_t crc = 0;
 10140                           
 10141                           ;incstack = 0
 10142                           ;incstack = 0
 10143  0025C4  0100               	movlb	0	; () banked
 10144  0025C6  6B6D               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10145  0025C8                     l846:
 10146  0025C8  A2AC               	btfss	4012,1,c	;volatile
 10147  0025CA  D7FE               	goto	l846
 10148                           
 10149                           ;main.c: 1696: WriteUSART(0x10);
 10150  0025CC  0E10               	movlw	16
 10151  0025CE  EC4B  F00B         	call	_WriteUSART
 10152  0025D2                     l849:
 10153  0025D2  A2AC               	btfss	4012,1,c	;volatile
 10154  0025D4  D7FE               	goto	l849
 10155                           
 10156                           ;main.c: 1698: WriteUSART(0x02);
 10157  0025D6  0E02               	movlw	2
 10158  0025D8  EC4B  F00B         	call	_WriteUSART
 10159  0025DC                     l852:
 10160  0025DC  A2AC               	btfss	4012,1,c	;volatile
 10161  0025DE  D7FE               	goto	l852
 10162                           
 10163                           ;main.c: 1702: WriteUSART(252);
 10164  0025E0  0EFC               	movlw	252
 10165  0025E2  EC4B  F00B         	call	_WriteUSART
 10166                           
 10167                           ;main.c: 1703: crc8(&crc, 252);
 10168  0025E6  0100               	movlb	0	; () banked
 10169  0025E8  0E00               	movlw	high sendVSCPDriverNack@crc
 10170  0025EA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10171  0025EC  0E6D               	movlw	low sendVSCPDriverNack@crc
 10172  0025EE  6F67               	movwf	?_crc8& (0+255),b
 10173  0025F0  0EFC               	movlw	252
 10174  0025F2  6F69               	movwf	(?_crc8+2)& (0+255),b
 10175  0025F4  EC13  F00C         	call	_crc8	;wreg free
 10176  0025F8                     l855:
 10177  0025F8  A2AC               	btfss	4012,1,c	;volatile
 10178  0025FA  D7FE               	goto	l855
 10179                           
 10180                           ;main.c: 1707: WriteUSART(0);
 10181  0025FC  0E00               	movlw	0
 10182  0025FE  EC4B  F00B         	call	_WriteUSART
 10183                           
 10184                           ;main.c: 1708: crc8(&crc, 0);
 10185  002602  D82B               	call	PL46	;call to abstracted procedure
 10186  002604  EC13  F00C         	call	_crc8	;wreg free
 10187                           
 10188                           ; BSR set to: 3
 10189                           ;main.c: 1711: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10190  002608  0100               	movlb	0	; () banked
 10191  00260A  0E00               	movlw	high sendVSCPDriverNack@crc
 10192  00260C  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10193  00260E  0E6D               	movlw	low sendVSCPDriverNack@crc
 10194  002610  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10195  002612  0101               	movlb	1	; () banked
 10196  002614  5126               	movf	(_cmdbuf+2)& (0+255),w,b
 10197  002616  EC85  F00E         	call	_sendEscapedUartData
 10198  00261A                     l858:
 10199  00261A  A2AC               	btfss	4012,1,c	;volatile
 10200  00261C  D7FE               	goto	l858
 10201                           
 10202                           ;main.c: 1715: WriteUSART(0);
 10203  00261E  0E00               	movlw	0
 10204  002620  EC4B  F00B         	call	_WriteUSART
 10205                           
 10206                           ;main.c: 1716: crc8(&crc, 0);
 10207  002624  D81A               	call	PL46	;call to abstracted procedure
 10208  002626  EC13  F00C         	call	_crc8	;wreg free
 10209  00262A                     l861:
 10210  00262A  A2AC               	btfss	4012,1,c	;volatile
 10211  00262C  D7FE               	goto	l861
 10212                           
 10213                           ;main.c: 1718: WriteUSART(0);
 10214  00262E  0E00               	movlw	0
 10215  002630  EC4B  F00B         	call	_WriteUSART
 10216                           
 10217                           ;main.c: 1719: crc8(&crc, 0);
 10218  002634  D812               	call	PL46	;call to abstracted procedure
 10219  002636  EC13  F00C         	call	_crc8	;wreg free
 10220                           
 10221                           ; BSR set to: 3
 10222                           ;main.c: 1722: sendEscapedUartData(crc, (0));
 10223  00263A  0100               	movlb	0	; () banked
 10224  00263C  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10225  00263E  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
 10226  002640  516D               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10227  002642  EC85  F00E         	call	_sendEscapedUartData
 10228  002646                     l864:
 10229  002646  A2AC               	btfss	4012,1,c	;volatile
 10230  002648  D7FE               	goto	l864
 10231                           
 10232                           ;main.c: 1726: WriteUSART(0x10);
 10233  00264A  0E10               	movlw	16
 10234  00264C  EC4B  F00B         	call	_WriteUSART
 10235  002650                     l867:
 10236  002650  A2AC               	btfss	4012,1,c	;volatile
 10237  002652  D7FE               	goto	l867
 10238                           
 10239                           ;main.c: 1728: WriteUSART(0x03);
 10240  002654  0E03               	movlw	3
 10241  002656  EF4B  F00B         	goto	_WriteUSART
 10242  00265A                     __end_of_sendVSCPDriverNack:
 10243                           	opt stack 0
 10244  00265A                     PL46:
 10245                           	opt stack 22
 10246  00265A  0100               	movlb	0	; () banked
 10247  00265C  0E00               	movlw	high sendVSCPDriverNack@crc
 10248  00265E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10249  002660  0E6D               	movlw	low sendVSCPDriverNack@crc
 10250  002662  6F67               	movwf	?_crc8& (0+255),b
 10251  002664  6B69               	clrf	(?_crc8+2)& (0+255),b
 10252  002666  0C00               	retlw	0
 10253  002668                     __end_ofPL46:
 10254                           	opt stack 0
 10255                           tblptru	equ	0xFF8
 10256                           tblptrh	equ	0xFF7
 10257                           tblptrl	equ	0xFF6
 10258                           tablat	equ	0xFF5
 10259                           prodh	equ	0xFF4
 10260                           prodl	equ	0xFF3
 10261                           intcon	equ	0xFF2
 10262                           indf0	equ	0xFEF
 10263                           postinc0	equ	0xFEE
 10264                           fsr0h	equ	0xFEA
 10265                           fsr0l	equ	0xFE9
 10266                           wreg	equ	0xFE8
 10267                           indf1	equ	0xFE7
 10268                           postinc1	equ	0xFE6
 10269                           postdec1	equ	0xFE5
 10270                           fsr1h	equ	0xFE2
 10271                           fsr1l	equ	0xFE1
 10272                           indf2	equ	0xFDF
 10273                           postinc2	equ	0xFDE
 10274                           postdec2	equ	0xFDD
 10275                           plusw2	equ	0xFDB
 10276                           fsr2h	equ	0xFDA
 10277                           fsr2l	equ	0xFD9
 10278                           status	equ	0xFD8
 10279                           
 10280 ;; *************** function _calcCRC *****************
 10281 ;; Defined at:
 10282 ;;		line 2449 in file "main.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;  p               2   10[BANK0 ] PTR unsigned char 
 10285 ;;		 -> cmdbuf(80), 
 10286 ;;  len             1   12[BANK0 ] unsigned char 
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;  crc             1   14[BANK0 ] unsigned char 
 10289 ;;  j               1   13[BANK0 ] unsigned char 
 10290 ;; Return value:  Size  Location     Type
 10291 ;;                  1    wreg      unsigned char 
 10292 ;; Registers used:
 10293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10294 ;; Tracked objects:
 10295 ;;		On entry : F/0
 10296 ;;		On exit  : F/0
 10297 ;;		Unchanged: 0/0
 10298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10299 ;;      Params:         0       3       0       0       0       0       0
 10300 ;;      Locals:         0       2       0       0       0       0       0
 10301 ;;      Temps:          0       0       0       0       0       0       0
 10302 ;;      Totals:         0       5       0       0       0       0       0
 10303 ;;Total ram usage:        5 bytes
 10304 ;; Hardware stack levels used:    1
 10305 ;; Hardware stack levels required when called:    5
 10306 ;; This function calls:
 10307 ;;		_crc8
 10308 ;; This function is called by:
 10309 ;;		_doModeVscp
 10310 ;; This function uses a non-reentrant model
 10311 ;;
 10312                           
 10313                           	psect	text16
 10314  001790                     __ptext16:
 10315                           	opt stack 0
 10316  001790                     _calcCRC:
 10317                           	opt stack 23
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;main.c: 2450: uint8_t j;
 10321                           ;main.c: 2451: uint8_t crc = 0;
 10322                           
 10323                           ;incstack = 0
 10324                           ;incstack = 0
 10325  001790  6B6E               	clrf	calcCRC@crc& (0+255),b
 10326                           
 10327                           ;main.c: 2453: for (j = 0; j < len; j++) {
 10328  001792  6B6D               	clrf	calcCRC@j& (0+255),b
 10329  001794  D010               	goto	l15585
 10330  001796                     l15581:
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;main.c: 2454: crc8(&crc, p[j]);
 10334  001796  0E00               	movlw	high calcCRC@crc
 10335  001798  6F68               	movwf	(?_crc8+1)& (0+255),b
 10336  00179A  0E6E               	movlw	low calcCRC@crc
 10337  00179C  6F67               	movwf	?_crc8& (0+255),b
 10338  00179E  516D               	movf	calcCRC@j& (0+255),w,b
 10339  0017A0  256A               	addwf	calcCRC@p& (0+255),w,b
 10340  0017A2  6ED9               	movwf	fsr2l,c
 10341  0017A4  0E00               	movlw	0
 10342  0017A6  216B               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10343  0017A8  6EDA               	movwf	fsr2h,c
 10344  0017AA  50DF               	movf	indf2,w,c
 10345  0017AC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10346  0017AE  EC13  F00C         	call	_crc8	;wreg free
 10347                           
 10348                           ; BSR set to: 3
 10349  0017B2  0100               	movlb	0	; () banked
 10350  0017B4  2B6D               	incf	calcCRC@j& (0+255),f,b
 10351  0017B6                     l15585:
 10352                           
 10353                           ; BSR set to: 0
 10354  0017B6  516C               	movf	calcCRC@len& (0+255),w,b
 10355  0017B8  5D6D               	subwf	calcCRC@j& (0+255),w,b
 10356  0017BA  E3ED               	bnc	l15581
 10357                           
 10358                           ; BSR set to: 0
 10359                           ;main.c: 2455: }
 10360                           ;main.c: 2457: return crc;
 10361  0017BC  516E               	movf	calcCRC@crc& (0+255),w,b
 10362                           
 10363                           ; BSR set to: 0
 10364  0017BE  0012               	return	
 10365  0017C0                     __end_of_calcCRC:
 10366                           	opt stack 0
 10367                           tblptru	equ	0xFF8
 10368                           tblptrh	equ	0xFF7
 10369                           tblptrl	equ	0xFF6
 10370                           tablat	equ	0xFF5
 10371                           prodh	equ	0xFF4
 10372                           prodl	equ	0xFF3
 10373                           intcon	equ	0xFF2
 10374                           indf0	equ	0xFEF
 10375                           postinc0	equ	0xFEE
 10376                           fsr0h	equ	0xFEA
 10377                           fsr0l	equ	0xFE9
 10378                           wreg	equ	0xFE8
 10379                           indf1	equ	0xFE7
 10380                           postinc1	equ	0xFE6
 10381                           postdec1	equ	0xFE5
 10382                           fsr1h	equ	0xFE2
 10383                           fsr1l	equ	0xFE1
 10384                           indf2	equ	0xFDF
 10385                           postinc2	equ	0xFDE
 10386                           postdec2	equ	0xFDD
 10387                           plusw2	equ	0xFDB
 10388                           fsr2h	equ	0xFDA
 10389                           fsr2l	equ	0xFD9
 10390                           status	equ	0xFD8
 10391                           
 10392 ;; *************** function _receiveSendEventCANAL *****************
 10393 ;; Defined at:
 10394 ;;		line 1843 in file "main.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;		None
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;  crc             1   31[BANK0 ] unsigned char 
 10399 ;;  data            8   17[BANK0 ] unsigned char [8]
 10400 ;;  id              4   26[BANK0 ] unsigned long 
 10401 ;;  dlc             1   30[BANK0 ] unsigned char 
 10402 ;;  i               1   25[BANK0 ] unsigned char 
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      enum E15660
 10405 ;; Registers used:
 10406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10407 ;; Tracked objects:
 10408 ;;		On entry : F/1
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10412 ;;      Params:         0       0       0       0       0       0       0
 10413 ;;      Locals:         0      15       0       0       0       0       0
 10414 ;;      Temps:          0       0       0       0       0       0       0
 10415 ;;      Totals:         0      15       0       0       0       0       0
 10416 ;;Total ram usage:       15 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    6
 10419 ;; This function calls:
 10420 ;;		_WriteUSART
 10421 ;;		_sendEscapedUartData
 10422 ;;		_crc8
 10423 ;;		_getCANFrame
 10424 ;; This function is called by:
 10425 ;;		_doModeVscp
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           	psect	text17
 10430  0037D4                     __ptext17:
 10431                           	opt stack 0
 10432  0037D4                     _receiveSendEventCANAL:
 10433                           	opt stack 22
 10434                           
 10435                           ; BSR set to: 1
 10436                           ;main.c: 1844: uint8_t i;
 10437                           ;main.c: 1845: uint32_t id;
 10438                           ;main.c: 1846: uint8_t dlc;
 10439                           ;main.c: 1847: uint8_t data[8];
 10440                           ;main.c: 1849: if ( getCANFrame( &id, &dlc, &data ) ) {
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;incstack = 0
 10444                           ;incstack = 0
 10445  0037D4  0100               	movlb	0	; () banked
 10446  0037D6  0E7E               	movlw	low receiveSendEventCANAL@dlc
 10447  0037D8  6F6E               	movwf	?_getCANFrame& (0+255),b
 10448  0037DA  0E00               	movlw	high receiveSendEventCANAL@data
 10449  0037DC  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10450  0037DE  0E71               	movlw	low receiveSendEventCANAL@data
 10451  0037E0  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10452  0037E2  0E7A               	movlw	receiveSendEventCANAL@id& (0+255)
 10453  0037E4  EC43  F012         	call	_getCANFrame
 10454  0037E8  0900               	iorlw	0
 10455  0037EA  E101 D08F          	bz	l962
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;main.c: 1851: uint8_t crc = 0;
 10459  0037EE  6B7F               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;main.c: 1854: cntRxFrames++;
 10463  0037F0  0101               	movlb	1	; () banked
 10464  0037F2  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10465  0037F4  0E00               	movlw	0
 10466  0037F6  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10467  0037F8  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10468  0037FA  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10469                           
 10470                           ;main.c: 1855: cntRxBytes += dlc;
 10471  0037FC  0100               	movlb	0	; () banked
 10472  0037FE  517E               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10473  003800  0101               	movlb	1	; () banked
 10474  003802  2708               	addwf	_cntRxBytes& (0+255),f,b
 10475  003804  0E00               	movlw	0
 10476  003806  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10477  003808  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10478  00380A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10479  00380C                     l941:
 10480                           
 10481                           ; BSR set to: 1
 10482  00380C  A2AC               	btfss	4012,1,c	;volatile
 10483  00380E  D7FE               	goto	l941
 10484                           
 10485                           ; BSR set to: 1
 10486                           ;main.c: 1859: WriteUSART(0x10);
 10487  003810  0E10               	movlw	16
 10488  003812  EC4B  F00B         	call	_WriteUSART
 10489  003816                     l944:
 10490  003816  A2AC               	btfss	4012,1,c	;volatile
 10491  003818  D7FE               	goto	l944
 10492                           
 10493                           ;main.c: 1861: WriteUSART(0x02);
 10494  00381A  0E02               	movlw	2
 10495  00381C  EC4B  F00B         	call	_WriteUSART
 10496  003820                     l947:
 10497  003820  A2AC               	btfss	4012,1,c	;volatile
 10498  003822  D7FE               	goto	l947
 10499                           
 10500                           ;main.c: 1865: WriteUSART(2);
 10501  003824  0E02               	movlw	2
 10502  003826  EC4B  F00B         	call	_WriteUSART
 10503                           
 10504                           ;main.c: 1866: crc8(&crc, 2);
 10505  00382A  0100               	movlb	0	; () banked
 10506  00382C  0E00               	movlw	high receiveSendEventCANAL@crc
 10507  00382E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10508  003830  0E7F               	movlw	low receiveSendEventCANAL@crc
 10509  003832  6F67               	movwf	?_crc8& (0+255),b
 10510  003834  0E02               	movlw	2
 10511  003836  6F69               	movwf	(?_crc8+2)& (0+255),b
 10512  003838  EC13  F00C         	call	_crc8	;wreg free
 10513  00383C                     l950:
 10514  00383C  A2AC               	btfss	4012,1,c	;volatile
 10515  00383E  D7FE               	goto	l950
 10516                           
 10517                           ;main.c: 1870: WriteUSART(0);
 10518  003840  0E00               	movlw	0
 10519  003842  EC4B  F00B         	call	_WriteUSART
 10520                           
 10521                           ;main.c: 1871: crc8(&crc, 0);
 10522  003846  0100               	movlb	0	; () banked
 10523  003848  0E00               	movlw	high receiveSendEventCANAL@crc
 10524  00384A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10525  00384C  0E7F               	movlw	low receiveSendEventCANAL@crc
 10526  00384E  6F67               	movwf	?_crc8& (0+255),b
 10527  003850  0E00               	movlw	0
 10528  003852  6B69               	clrf	(?_crc8+2)& (0+255),b
 10529  003854  EC13  F00C         	call	_crc8	;wreg free
 10530                           
 10531                           ; BSR set to: 3
 10532                           ;main.c: 1874: sendEscapedUartData(sequencyno, &crc);
 10533  003858  0100               	movlb	0	; () banked
 10534  00385A  0E00               	movlw	high receiveSendEventCANAL@crc
 10535  00385C  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10536  00385E  0E7F               	movlw	low receiveSendEventCANAL@crc
 10537  003860  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10538  003862  5039               	movf	_sequencyno,w,c
 10539  003864  EC85  F00E         	call	_sendEscapedUartData
 10540                           
 10541                           ;main.c: 1875: sequencyno++;
 10542  003868  2A39               	incf	_sequencyno,f,c
 10543                           
 10544                           ;main.c: 1878: sendEscapedUartData(0, &crc);
 10545  00386A  0100               	movlb	0	; () banked
 10546  00386C  0E00               	movlw	high receiveSendEventCANAL@crc
 10547  00386E  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10548  003870  0E7F               	movlw	low receiveSendEventCANAL@crc
 10549  003872  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10550  003874  0E00               	movlw	0
 10551  003876  EC85  F00E         	call	_sendEscapedUartData
 10552                           
 10553                           ;main.c: 1879: sendEscapedUartData(5 + dlc, &crc);
 10554  00387A  D849               	call	PL90	;call to abstracted procedure
 10555  00387C  0F05               	addlw	5
 10556  00387E  EC85  F00E         	call	_sendEscapedUartData
 10557                           
 10558                           ;main.c: 1885: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10559  003882  0100               	movlb	0	; () banked
 10560  003884  0E00               	movlw	high receiveSendEventCANAL@crc
 10561  003886  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10562  003888  0E7F               	movlw	low receiveSendEventCANAL@crc
 10563  00388A  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10564  00388C  517D               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10565  00388E  EC85  F00E         	call	_sendEscapedUartData
 10566                           
 10567                           ;main.c: 1886: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10568  003892  0100               	movlb	0	; () banked
 10569  003894  0E00               	movlw	high receiveSendEventCANAL@crc
 10570  003896  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10571  003898  0E7F               	movlw	low receiveSendEventCANAL@crc
 10572  00389A  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10573  00389C  517C               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10574  00389E  EC85  F00E         	call	_sendEscapedUartData
 10575                           
 10576                           ;main.c: 1887: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10577  0038A2  0100               	movlb	0	; () banked
 10578  0038A4  0E00               	movlw	high receiveSendEventCANAL@crc
 10579  0038A6  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10580  0038A8  0E7F               	movlw	low receiveSendEventCANAL@crc
 10581  0038AA  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10582  0038AC  517B               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10583  0038AE  EC85  F00E         	call	_sendEscapedUartData
 10584                           
 10585                           ;main.c: 1888: sendEscapedUartData((id & 0xff), &crc);
 10586  0038B2  0100               	movlb	0	; () banked
 10587  0038B4  0E00               	movlw	high receiveSendEventCANAL@crc
 10588  0038B6  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10589  0038B8  0E7F               	movlw	low receiveSendEventCANAL@crc
 10590  0038BA  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10591  0038BC  517A               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10592  0038BE  EC85  F00E         	call	_sendEscapedUartData
 10593                           
 10594                           ;main.c: 1891: sendEscapedUartData(dlc, &crc);
 10595  0038C2  D825               	call	PL90	;call to abstracted procedure
 10596  0038C4  EC85  F00E         	call	_sendEscapedUartData
 10597                           
 10598                           ;main.c: 1894: for (i = 0; i < dlc; i++) {
 10599  0038C8  0100               	movlb	0	; () banked
 10600  0038CA  6B79               	clrf	receiveSendEventCANAL@i& (0+255),b
 10601  0038CC  D00D               	goto	l15569
 10602  0038CE                     l15565:
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;main.c: 1895: sendEscapedUartData( data[ i ], &crc );
 10606  0038CE  0E00               	movlw	high receiveSendEventCANAL@crc
 10607  0038D0  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10608  0038D2  0E7F               	movlw	low receiveSendEventCANAL@crc
 10609  0038D4  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10610  0038D6  5179               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10611  0038D8  0F71               	addlw	low receiveSendEventCANAL@data
 10612  0038DA  6ED9               	movwf	fsr2l,c
 10613  0038DC  6ADA               	clrf	fsr2h,c
 10614  0038DE  50DF               	movf	indf2,w,c
 10615  0038E0  EC85  F00E         	call	_sendEscapedUartData
 10616  0038E4  0100               	movlb	0	; () banked
 10617  0038E6  2B79               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10618  0038E8                     l15569:
 10619                           
 10620                           ; BSR set to: 0
 10621  0038E8  517E               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10622  0038EA  5D79               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10623  0038EC  E3F0               	bnc	l15565
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;main.c: 1896: }
 10627                           ;main.c: 1901: sendEscapedUartData(crc, (0));
 10628  0038EE  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10629  0038F0  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
 10630  0038F2  517F               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10631  0038F4  EC85  F00E         	call	_sendEscapedUartData
 10632  0038F8                     l956:
 10633  0038F8  A2AC               	btfss	4012,1,c	;volatile
 10634  0038FA  D7FE               	goto	l956
 10635                           
 10636                           ;main.c: 1905: WriteUSART(0x10);
 10637  0038FC  0E10               	movlw	16
 10638  0038FE  EC4B  F00B         	call	_WriteUSART
 10639  003902                     l959:
 10640  003902  A2AC               	btfss	4012,1,c	;volatile
 10641  003904  D7FE               	goto	l959
 10642                           
 10643                           ;main.c: 1907: WriteUSART(0x03);
 10644  003906  0E03               	movlw	3
 10645  003908  EC4B  F00B         	call	_WriteUSART
 10646  00390C                     l962:
 10647  00390C  0012               	return	
 10648  00390E                     __end_of_receiveSendEventCANAL:
 10649                           	opt stack 0
 10650  00390E                     PL90:
 10651                           	opt stack 22
 10652  00390E  0100               	movlb	0	; () banked
 10653  003910  0E00               	movlw	high receiveSendEventCANAL@crc
 10654  003912  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10655  003914  0E7F               	movlw	low receiveSendEventCANAL@crc
 10656  003916  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10657  003918  517E               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10658  00391A  0012               	return	
 10659  00391C                     __end_ofPL90:
 10660                           	opt stack 0
 10661                           tblptru	equ	0xFF8
 10662                           tblptrh	equ	0xFF7
 10663                           tblptrl	equ	0xFF6
 10664                           tablat	equ	0xFF5
 10665                           prodh	equ	0xFF4
 10666                           prodl	equ	0xFF3
 10667                           intcon	equ	0xFF2
 10668                           indf0	equ	0xFEF
 10669                           postinc0	equ	0xFEE
 10670                           fsr0h	equ	0xFEA
 10671                           fsr0l	equ	0xFE9
 10672                           wreg	equ	0xFE8
 10673                           indf1	equ	0xFE7
 10674                           postinc1	equ	0xFE6
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           plusw2	equ	0xFDB
 10682                           fsr2h	equ	0xFDA
 10683                           fsr2l	equ	0xFD9
 10684                           status	equ	0xFD8
 10685                           
 10686 ;; *************** function _receiveSendMultiEventCANAL *****************
 10687 ;; Defined at:
 10688 ;;		line 1920 in file "main.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;		None
 10691 ;; Auto vars:     Size  Location     Type
 10692 ;;  crc             1   32[BANK0 ] unsigned char 
 10693 ;;  data            8   17[BANK0 ] unsigned char [8]
 10694 ;;  id              4   27[BANK0 ] unsigned long 
 10695 ;;  pos             1   33[BANK0 ] unsigned char 
 10696 ;;  dlc             1   31[BANK0 ] unsigned char 
 10697 ;;  i               1   26[BANK0 ] unsigned char 
 10698 ;;  msgcount        1   25[BANK0 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      enum E15660
 10701 ;; Registers used:
 10702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : F/1
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10708 ;;      Params:         0       0       0       0       0       0       0
 10709 ;;      Locals:         0      17       0       0       0       0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0
 10711 ;;      Totals:         0      17       0       0       0       0       0
 10712 ;;Total ram usage:       17 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    6
 10715 ;; This function calls:
 10716 ;;		_WriteUSART
 10717 ;;		_sendEscapedUartData
 10718 ;;		_crc8
 10719 ;;		_getCANFrame
 10720 ;; This function is called by:
 10721 ;;		_doModeVscp
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           	psect	text18
 10726  003D96                     __ptext18:
 10727                           	opt stack 0
 10728  003D96                     _receiveSendMultiEventCANAL:
 10729                           	opt stack 22
 10730                           
 10731                           ; BSR set to: 1
 10732                           ;main.c: 1921: uint8_t i;
 10733                           ;main.c: 1922: uint8_t pos=0;
 10734                           
 10735                           ;incstack = 0
 10736                           ;incstack = 0
 10737  003D96  0100               	movlb	0	; () banked
 10738  003D98  6B81               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10739                           
 10740                           ;main.c: 1923: uint8_t msgcount=0;
 10741  003D9A  6B79               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;main.c: 1924: uint32_t id;
 10745                           ;main.c: 1925: uint8_t dlc;
 10746                           ;main.c: 1926: uint8_t data[8];
 10747                           ;main.c: 1928: if ( getCANFrame( &id, &dlc, &data ) ) {
 10748  003D9C  0E7F               	movlw	low receiveSendMultiEventCANAL@dlc
 10749  003D9E  D8BA               	call	PL92	;call to abstracted procedure
 10750  003DA0  EC43  F012         	call	_getCANFrame
 10751  003DA4  0900               	iorlw	0
 10752  003DA6  E101 D0AC          	bz	l994
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;main.c: 1930: uint8_t crc = 0;
 10756  003DAA  6B80               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 1933: cntRxFrames++;
 10760  003DAC  0101               	movlb	1	; () banked
 10761  003DAE  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10762  003DB0  0E00               	movlw	0
 10763  003DB2  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10764  003DB4  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10765  003DB6  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10766                           
 10767                           ;main.c: 1934: cntRxBytes += dlc;
 10768  003DB8  0100               	movlb	0	; () banked
 10769  003DBA  517F               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10770  003DBC  0101               	movlb	1	; () banked
 10771  003DBE  2708               	addwf	_cntRxBytes& (0+255),f,b
 10772  003DC0  0E00               	movlw	0
 10773  003DC2  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10774  003DC4  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10775  003DC6  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10776  003DC8                     l966:
 10777                           
 10778                           ; BSR set to: 1
 10779  003DC8  A2AC               	btfss	4012,1,c	;volatile
 10780  003DCA  D7FE               	goto	l966
 10781                           
 10782                           ; BSR set to: 1
 10783                           ;main.c: 1938: WriteUSART(0x10);
 10784  003DCC  0E10               	movlw	16
 10785  003DCE  EC4B  F00B         	call	_WriteUSART
 10786  003DD2                     l969:
 10787  003DD2  A2AC               	btfss	4012,1,c	;volatile
 10788  003DD4  D7FE               	goto	l969
 10789                           
 10790                           ;main.c: 1940: WriteUSART(0x02);
 10791  003DD6  0E02               	movlw	2
 10792  003DD8  EC4B  F00B         	call	_WriteUSART
 10793  003DDC                     l972:
 10794  003DDC  A2AC               	btfss	4012,1,c	;volatile
 10795  003DDE  D7FE               	goto	l972
 10796                           
 10797                           ;main.c: 1944: WriteUSART(6);
 10798  003DE0  0E06               	movlw	6
 10799  003DE2  EC4B  F00B         	call	_WriteUSART
 10800                           
 10801                           ;main.c: 1945: crc8(&crc, 6);
 10802  003DE6  0100               	movlb	0	; () banked
 10803  003DE8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10804  003DEA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10805  003DEC  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10806  003DEE  6F67               	movwf	?_crc8& (0+255),b
 10807  003DF0  0E06               	movlw	6
 10808  003DF2  6F69               	movwf	(?_crc8+2)& (0+255),b
 10809  003DF4  EC13  F00C         	call	_crc8	;wreg free
 10810  003DF8                     l975:
 10811  003DF8  A2AC               	btfss	4012,1,c	;volatile
 10812  003DFA  D7FE               	goto	l975
 10813                           
 10814                           ;main.c: 1949: WriteUSART(0);
 10815  003DFC  0E00               	movlw	0
 10816  003DFE  EC4B  F00B         	call	_WriteUSART
 10817                           
 10818                           ;main.c: 1950: crc8(&crc, 0);
 10819  003E02  0100               	movlb	0	; () banked
 10820  003E04  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10821  003E06  6F68               	movwf	(?_crc8+1)& (0+255),b
 10822  003E08  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10823  003E0A  6F67               	movwf	?_crc8& (0+255),b
 10824  003E0C  0E00               	movlw	0
 10825  003E0E  6B69               	clrf	(?_crc8+2)& (0+255),b
 10826  003E10  EC13  F00C         	call	_crc8	;wreg free
 10827                           
 10828                           ; BSR set to: 3
 10829                           ;main.c: 1953: sendEscapedUartData(sequencyno, &crc);
 10830  003E14  0100               	movlb	0	; () banked
 10831  003E16  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10832  003E18  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10833  003E1A  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10834  003E1C  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10835  003E1E  5039               	movf	_sequencyno,w,c
 10836  003E20  EC85  F00E         	call	_sendEscapedUartData
 10837                           
 10838                           ;main.c: 1954: sequencyno++;
 10839  003E24  2A39               	incf	_sequencyno,f,c
 10840  003E26                     l15471:
 10841                           
 10842                           ;main.c: 1964: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10843  003E26  0E74               	movlw	low _wrkbuf
 10844  003E28  0100               	movlb	0	; () banked
 10845  003E2A  2581               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10846  003E2C  6ED9               	movwf	fsr2l,c
 10847  003E2E  6ADA               	clrf	fsr2h,c
 10848  003E30  0E01               	movlw	high _wrkbuf
 10849  003E32  22DA               	addwfc	fsr2h,f,c
 10850  003E34  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;main.c: 1965: pos++;
 10854                           
 10855                           ; BSR set to: 0
 10856                           ;main.c: 1966: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10857  003E38  D865               	call	PL22	;call to abstracted procedure
 10858  003E3A  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;main.c: 1967: pos++;
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;main.c: 1968: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10865  003E3E  D862               	call	PL22	;call to abstracted procedure
 10866  003E40  C07C  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;main.c: 1969: pos++;
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 1970: wrkbuf[ pos ] = id & 0xff;
 10873  003E44  D85F               	call	PL22	;call to abstracted procedure
 10874  003E46  C07B  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;main.c: 1971: pos++;
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;main.c: 1974: wrkbuf[ pos ] = dlc;
 10881  003E4A  D85C               	call	PL22	;call to abstracted procedure
 10882  003E4C  C07F  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;main.c: 1975: pos++;
 10886  003E50  2B81               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 1978: for (i = 0; i < dlc; i++) {
 10890  003E52  6B7A               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10891  003E54  D00F               	goto	l15499
 10892  003E56                     l15493:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;main.c: 1979: wrkbuf[ pos ] = data[ i ];
 10896  003E56  517A               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10897  003E58  0F71               	addlw	low receiveSendMultiEventCANAL@data
 10898  003E5A  6ED9               	movwf	fsr2l,c
 10899  003E5C  6ADA               	clrf	fsr2h,c
 10900  003E5E  0E74               	movlw	low _wrkbuf
 10901  003E60  0100               	movlb	0	; () banked
 10902  003E62  2581               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10903  003E64  6EE1               	movwf	fsr1l,c
 10904  003E66  6AE2               	clrf	fsr1h,c
 10905  003E68  0E01               	movlw	high _wrkbuf
 10906  003E6A  22E2               	addwfc	fsr1h,f,c
 10907  003E6C  CFDF FFE7          	movff	indf2,indf1
 10908                           
 10909                           ; BSR set to: 1
 10910                           ;main.c: 1980: pos++;
 10911  003E70  2B81               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10912                           
 10913                           ; BSR set to: 0
 10914  003E72  2B7A               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10915  003E74                     l15499:
 10916                           
 10917                           ; BSR set to: 0
 10918  003E74  517F               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10919  003E76  5D7A               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10920  003E78  E3EE               	bnc	l15493
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;main.c: 1981: }
 10924                           ;main.c: 1983: msgcount++;
 10925  003E7A  2B79               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;main.c: 1985: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10929                           ;main.c: 1986: ( msgcount < 5 ) &&
 10930                           ;main.c: 1987: getCANFrame( &id, &dlc, &data ) );
 10931  003E7C  0101               	movlb	1	; () banked
 10932  003E7E  51E9               	movf	(_caps+1)& (0+255),w,b
 10933  003E80  0100               	movlb	0	; () banked
 10934  003E82  6179               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10935  003E84  D009               	goto	l15509
 10936                           
 10937                           ; BSR set to: 0
 10938  003E86  0E05               	movlw	5
 10939  003E88  6179               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10940  003E8A  D006               	goto	l15509
 10941                           
 10942                           ; BSR set to: 0
 10943  003E8C  0E7F               	movlw	low receiveSendMultiEventCANAL@dlc
 10944  003E8E  D842               	call	PL92	;call to abstracted procedure
 10945  003E90  EC43  F012         	call	_getCANFrame
 10946  003E94  0900               	iorlw	0
 10947  003E96  E1C7               	bnz	l15471
 10948  003E98                     l15509:
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;main.c: 1992: sendEscapedUartData(0, &crc);
 10952  003E98  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10953  003E9A  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10954  003E9C  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10955  003E9E  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10956  003EA0  0E00               	movlw	0
 10957  003EA2  EC85  F00E         	call	_sendEscapedUartData
 10958                           
 10959                           ;main.c: 1993: sendEscapedUartData(pos, &crc);
 10960  003EA6  0100               	movlb	0	; () banked
 10961  003EA8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10962  003EAA  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10963  003EAC  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10964  003EAE  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10965  003EB0  5181               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10966  003EB2  EC85  F00E         	call	_sendEscapedUartData
 10967                           
 10968                           ;main.c: 1996: for (i = 0; i < pos; i++) {
 10969  003EB6  0100               	movlb	0	; () banked
 10970  003EB8  6B7A               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10971  003EBA  D011               	goto	l15517
 10972  003EBC                     l15513:
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;main.c: 1997: sendEscapedUartData( wrkbuf[ i ], &crc);
 10976  003EBC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10977  003EBE  6F6B               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10978  003EC0  0E80               	movlw	low receiveSendMultiEventCANAL@crc
 10979  003EC2  6F6A               	movwf	?_sendEscapedUartData& (0+255),b
 10980  003EC4  0E74               	movlw	low _wrkbuf
 10981  003EC6  0100               	movlb	0	; () banked
 10982  003EC8  257A               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10983  003ECA  6ED9               	movwf	fsr2l,c
 10984  003ECC  6ADA               	clrf	fsr2h,c
 10985  003ECE  0101               	movlb	1	; () banked
 10986  003ED0  0E01               	movlw	high _wrkbuf
 10987  003ED2  22DA               	addwfc	fsr2h,f,c
 10988  003ED4  50DF               	movf	indf2,w,c
 10989  003ED6  EC85  F00E         	call	_sendEscapedUartData
 10990  003EDA  0100               	movlb	0	; () banked
 10991  003EDC  2B7A               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10992  003EDE                     l15517:
 10993                           
 10994                           ; BSR set to: 0
 10995  003EDE  5181               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10996  003EE0  5D7A               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10997  003EE2  E3EC               	bnc	l15513
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;main.c: 1998: }
 11001                           ;main.c: 2001: sendEscapedUartData(crc, (0));
 11002  003EE4  6B6B               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11003  003EE6  6B6A               	clrf	?_sendEscapedUartData& (0+255),b
 11004  003EE8  5180               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11005  003EEA  EC85  F00E         	call	_sendEscapedUartData
 11006  003EEE                     l988:
 11007  003EEE  A2AC               	btfss	4012,1,c	;volatile
 11008  003EF0  D7FE               	goto	l988
 11009                           
 11010                           ;main.c: 2005: WriteUSART(0x10);
 11011  003EF2  0E10               	movlw	16
 11012  003EF4  EC4B  F00B         	call	_WriteUSART
 11013  003EF8                     l991:
 11014  003EF8  A2AC               	btfss	4012,1,c	;volatile
 11015  003EFA  D7FE               	goto	l991
 11016                           
 11017                           ;main.c: 2007: WriteUSART(0x03);
 11018  003EFC  0E03               	movlw	3
 11019  003EFE  EC4B  F00B         	call	_WriteUSART
 11020  003F02                     l994:
 11021  003F02  0012               	return	
 11022  003F04                     __end_of_receiveSendMultiEventCANAL:
 11023                           	opt stack 0
 11024  003F04                     PL22:
 11025                           	opt stack 22
 11026  003F04  2B81               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11027  003F06  0E74               	movlw	low _wrkbuf
 11028  003F08  2581               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11029  003F0A  6ED9               	movwf	fsr2l,c
 11030  003F0C  6ADA               	clrf	fsr2h,c
 11031  003F0E  0E01               	movlw	high _wrkbuf
 11032  003F10  22DA               	addwfc	fsr2h,f,c
 11033  003F12  0012               	return	
 11034  003F14                     __end_ofPL22:
 11035                           	opt stack 0
 11036  003F14                     PL92:
 11037                           	opt stack 22
 11038  003F14  6F6E               	movwf	?_getCANFrame& (0+255),b
 11039  003F16  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11040  003F18  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11041  003F1A  0E71               	movlw	low receiveSendMultiEventCANAL@data
 11042  003F1C  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11043  003F1E  0E7B               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11044  003F20  0012               	return	
 11045  003F22                     __end_ofPL92:
 11046                           	opt stack 0
 11047                           tblptru	equ	0xFF8
 11048                           tblptrh	equ	0xFF7
 11049                           tblptrl	equ	0xFF6
 11050                           tablat	equ	0xFF5
 11051                           prodh	equ	0xFF4
 11052                           prodl	equ	0xFF3
 11053                           intcon	equ	0xFF2
 11054                           indf0	equ	0xFEF
 11055                           postinc0	equ	0xFEE
 11056                           fsr0h	equ	0xFEA
 11057                           fsr0l	equ	0xFE9
 11058                           wreg	equ	0xFE8
 11059                           indf1	equ	0xFE7
 11060                           postinc1	equ	0xFE6
 11061                           postdec1	equ	0xFE5
 11062                           fsr1h	equ	0xFE2
 11063                           fsr1l	equ	0xFE1
 11064                           indf2	equ	0xFDF
 11065                           postinc2	equ	0xFDE
 11066                           postdec2	equ	0xFDD
 11067                           plusw2	equ	0xFDB
 11068                           fsr2h	equ	0xFDA
 11069                           fsr2l	equ	0xFD9
 11070                           status	equ	0xFD8
 11071                           
 11072 ;; *************** function _sendEscapedUartData *****************
 11073 ;; Defined at:
 11074 ;;		line 1573 in file "main.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;  c               1    wreg     unsigned char 
 11077 ;;  pcrc            2   10[BANK0 ] PTR unsigned char 
 11078 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11079 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11080 ;;		 -> NULL(0), 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  c               1   12[BANK0 ] unsigned char 
 11083 ;; Return value:  Size  Location     Type
 11084 ;;		None               void
 11085 ;; Registers used:
 11086 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : E/1
 11089 ;;		On exit  : C/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11092 ;;      Params:         0       2       0       0       0       0       0
 11093 ;;      Locals:         0       1       0       0       0       0       0
 11094 ;;      Temps:          0       0       0       0       0       0       0
 11095 ;;      Totals:         0       3       0       0       0       0       0
 11096 ;;Total ram usage:        3 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    5
 11099 ;; This function calls:
 11100 ;;		_WriteUSART
 11101 ;;		_crc8
 11102 ;; This function is called by:
 11103 ;;		_sendVSCPDriverErrorFrame
 11104 ;;		_sendVSCPDriverAck
 11105 ;;		_sendVSCPDriverNack
 11106 ;;		_sendVSCPDriverCommandReply
 11107 ;;		_receiveSendEventCANAL
 11108 ;;		_receiveSendMultiEventCANAL
 11109 ;;		_sendVSCPModeCapabilities
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text19
 11114  001D0A                     __ptext19:
 11115                           	opt stack 0
 11116  001D0A                     _sendEscapedUartData:
 11117                           	opt stack 22
 11118                           
 11119                           ;incstack = 0
 11120                           ;incstack = 0
 11121                           ;sendEscapedUartData@c stored from wreg
 11122  001D0A  CFE8 F06C          	movff	wreg,sendEscapedUartData@c
 11123                           
 11124                           ;main.c: 1574: if (0x10 == c) {
 11125  001D0E  0100               	movlb	0	; () banked
 11126  001D10  516C               	movf	sendEscapedUartData@c& (0+255),w,b
 11127  001D12  0A10               	xorlw	16
 11128  001D14  E117               	bnz	l785
 11129  001D16                     l777:
 11130  001D16  A2AC               	btfss	4012,1,c	;volatile
 11131  001D18  D7FE               	goto	l777
 11132                           
 11133                           ;main.c: 1577: WriteUSART(0x10);
 11134  001D1A  0E10               	movlw	16
 11135  001D1C  EC4B  F00B         	call	_WriteUSART
 11136  001D20                     l780:
 11137  001D20  A2AC               	btfss	4012,1,c	;volatile
 11138  001D22  D7FE               	goto	l780
 11139                           
 11140                           ;main.c: 1581: WriteUSART(0x10);
 11141  001D24  0E10               	movlw	16
 11142  001D26  EC4B  F00B         	call	_WriteUSART
 11143                           
 11144                           ;main.c: 1582: if ((0) != pcrc) crc8(pcrc, 0x10);
 11145  001D2A  0100               	movlb	0	; () banked
 11146  001D2C  516B               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11147  001D2E  116A               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11148  001D30  E01B               	bz	l789
 11149                           
 11150                           ; BSR set to: 0
 11151  001D32  C06A  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11152  001D36  C06B  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11153  001D3A  0E10               	movlw	16
 11154  001D3C  6F69               	movwf	(?_crc8+2)& (0+255),b
 11155  001D3E  EC13  F00C         	call	_crc8	;wreg free
 11156  001D42  D012               	goto	l789
 11157  001D44                     l785:
 11158  001D44  A2AC               	btfss	4012,1,c	;volatile
 11159  001D46  D7FE               	goto	l785
 11160                           
 11161                           ;main.c: 1588: WriteUSART(c);
 11162  001D48  0100               	movlb	0	; () banked
 11163  001D4A  516C               	movf	sendEscapedUartData@c& (0+255),w,b
 11164  001D4C  EC4B  F00B         	call	_WriteUSART
 11165                           
 11166                           ;main.c: 1589: if ((0) != pcrc) crc8(pcrc, c);
 11167  001D50  0100               	movlb	0	; () banked
 11168  001D52  516B               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11169  001D54  116A               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11170  001D56  E008               	bz	l789
 11171                           
 11172                           ; BSR set to: 0
 11173  001D58  C06A  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11174  001D5C  C06B  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11175  001D60  C06C  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11176  001D64  EC13  F00C         	call	_crc8	;wreg free
 11177  001D68                     l789:
 11178  001D68  0012               	return	
 11179  001D6A                     __end_of_sendEscapedUartData:
 11180                           	opt stack 0
 11181                           tblptru	equ	0xFF8
 11182                           tblptrh	equ	0xFF7
 11183                           tblptrl	equ	0xFF6
 11184                           tablat	equ	0xFF5
 11185                           prodh	equ	0xFF4
 11186                           prodl	equ	0xFF3
 11187                           intcon	equ	0xFF2
 11188                           indf0	equ	0xFEF
 11189                           postinc0	equ	0xFEE
 11190                           fsr0h	equ	0xFEA
 11191                           fsr0l	equ	0xFE9
 11192                           wreg	equ	0xFE8
 11193                           indf1	equ	0xFE7
 11194                           postinc1	equ	0xFE6
 11195                           postdec1	equ	0xFE5
 11196                           fsr1h	equ	0xFE2
 11197                           fsr1l	equ	0xFE1
 11198                           indf2	equ	0xFDF
 11199                           postinc2	equ	0xFDE
 11200                           postdec2	equ	0xFDD
 11201                           plusw2	equ	0xFDB
 11202                           fsr2h	equ	0xFDA
 11203                           fsr2l	equ	0xFD9
 11204                           status	equ	0xFD8
 11205                           
 11206 ;; *************** function _crc8 *****************
 11207 ;; Defined at:
 11208 ;;		line 47 in file "crc8.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11211 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11212 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11213 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11214 ;;  m               1    9[BANK0 ] unsigned char 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;		None
 11217 ;; Return value:  Size  Location     Type
 11218 ;;		None               void
 11219 ;; Registers used:
 11220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : F/0
 11223 ;;		On exit  : F/3
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11226 ;;      Params:         0       3       0       0       0       0       0
 11227 ;;      Locals:         0       0       0       0       0       0       0
 11228 ;;      Temps:          2       0       0       0       0       0       0
 11229 ;;      Totals:         2       3       0       0       0       0       0
 11230 ;;Total ram usage:        5 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    4
 11233 ;; This function calls:
 11234 ;;		_init_crc8
 11235 ;; This function is called by:
 11236 ;;		_sendEscapedUartData
 11237 ;;		_sendVSCPDriverErrorFrame
 11238 ;;		_sendVSCPDriverAck
 11239 ;;		_sendVSCPDriverNack
 11240 ;;		_sendVSCPDriverCommandReply
 11241 ;;		_receiveSendEventCANAL
 11242 ;;		_receiveSendMultiEventCANAL
 11243 ;;		_sendVSCPModeCapabilities
 11244 ;;		_calcCRC
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	text20
 11249  001826                     __ptext20:
 11250                           	opt stack 0
 11251  001826                     _crc8:
 11252                           	opt stack 23
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;crc8.c: 48: if ( !made_table ) {
 11256                           
 11257                           ;incstack = 0
 11258                           ;incstack = 0
 11259  001826  5028               	movf	_made_table+1,w,c
 11260  001828  1027               	iorwf	_made_table,w,c
 11261  00182A  B4D8               	btfsc	status,2,c
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;crc8.c: 49: init_crc8();
 11265  00182C  EC7B  F00F         	call	_init_crc8	;wreg free
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;crc8.c: 50: }
 11269                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11270  001830  C067  FFD9         	movff	crc8@crc,fsr2l
 11271  001834  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11272  001838  50DF               	movf	indf2,w,c
 11273  00183A  1969               	xorwf	crc8@m& (0+255),w,b
 11274  00183C  6E21               	movwf	??_crc8& (0+255),c
 11275  00183E  6A22               	clrf	(??_crc8+1)& (0+255),c
 11276  001840  0103               	movlb	3	; () banked
 11277  001842  0E00               	movlw	low _crc8_table
 11278  001844  2421               	addwf	??_crc8,w,c
 11279  001846  6ED9               	movwf	fsr2l,c
 11280  001848  0E03               	movlw	high _crc8_table
 11281  00184A  2022               	addwfc	??_crc8+1,w,c
 11282  00184C  6EDA               	movwf	fsr2h,c
 11283  00184E  C067  FFE1         	movff	crc8@crc,fsr1l
 11284  001852  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11285  001856  CFDF FFE7          	movff	indf2,indf1
 11286                           
 11287                           ; BSR set to: 3
 11288  00185A  0012               	return	
 11289  00185C                     __end_of_crc8:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           indf0	equ	0xFEF
 11299                           postinc0	equ	0xFEE
 11300                           fsr0h	equ	0xFEA
 11301                           fsr0l	equ	0xFE9
 11302                           wreg	equ	0xFE8
 11303                           indf1	equ	0xFE7
 11304                           postinc1	equ	0xFE6
 11305                           postdec1	equ	0xFE5
 11306                           fsr1h	equ	0xFE2
 11307                           fsr1l	equ	0xFE1
 11308                           indf2	equ	0xFDF
 11309                           postinc2	equ	0xFDE
 11310                           postdec2	equ	0xFDD
 11311                           plusw2	equ	0xFDB
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function _init_crc8 *****************
 11317 ;; Defined at:
 11318 ;;		line 25 in file "crc8.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;		None
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  i               2    5[BANK0 ] int 
 11323 ;;  j               2    2[BANK0 ] int 
 11324 ;;  crc             1    4[BANK0 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;		None               void
 11327 ;; Registers used:
 11328 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11329 ;; Tracked objects:
 11330 ;;		On entry : F/0
 11331 ;;		On exit  : F/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11334 ;;      Params:         0       0       0       0       0       0       0
 11335 ;;      Locals:         0       7       0       0       0       0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0
 11337 ;;      Totals:         0       7       0       0       0       0       0
 11338 ;;Total ram usage:        7 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    3
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_main
 11345 ;;		_crc8
 11346 ;; This function uses a non-reentrant model
 11347 ;;
 11348                           
 11349                           	psect	text21
 11350  001EF6                     __ptext21:
 11351                           	opt stack 0
 11352  001EF6                     _init_crc8:
 11353                           	opt stack 23
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;crc8.c: 26: int i,j;
 11357                           ;crc8.c: 27: unsigned char crc;
 11358                           ;crc8.c: 29: if (!made_table) {
 11359                           
 11360                           ; BSR set to: 3
 11361                           ;incstack = 0
 11362                           ;incstack = 0
 11363  001EF6  5028               	movf	_made_table+1,w,c
 11364  001EF8  1027               	iorwf	_made_table,w,c
 11365  001EFA  E131               	bnz	l1574
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11369  001EFC  6B65               	clrf	init_crc8@i& (0+255),b
 11370  001EFE  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11371  001F00                     l1566:
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;crc8.c: 31: crc = i;
 11375  001F00  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11376                           
 11377                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11378  001F04  6B62               	clrf	init_crc8@j& (0+255),b
 11379  001F06  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11380  001F08                     l1568:
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11384  001F08  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11385  001F0A  D003               	goto	l10109
 11386                           
 11387                           ; BSR set to: 0
 11388  001F0C  6B60               	clrf	_init_crc8$1962& (0+255),b
 11389  001F0E  6B61               	clrf	(_init_crc8$1962+1)& (0+255),b
 11390  001F10  D003               	goto	l10111
 11391  001F12                     l10109:
 11392                           
 11393                           ; BSR set to: 0
 11394  001F12  6B61               	clrf	(_init_crc8$1962+1)& (0+255),b
 11395  001F14  0E07               	movlw	7
 11396  001F16  6F60               	movwf	_init_crc8$1962& (0+255),b
 11397  001F18                     l10111:
 11398                           
 11399                           ; BSR set to: 0
 11400  001F18  5164               	movf	init_crc8@crc& (0+255),w,b
 11401  001F1A  2564               	addwf	init_crc8@crc& (0+255),w,b
 11402  001F1C  1960               	xorwf	_init_crc8$1962& (0+255),w,b
 11403  001F1E  6F64               	movwf	init_crc8@crc& (0+255),b
 11404                           
 11405                           ; BSR set to: 0
 11406  001F20  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11407  001F22  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11408                           
 11409                           ; BSR set to: 0
 11410  001F24  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11411  001F26  0A80               	xorlw	128
 11412  001F28  0F80               	addlw	-128
 11413  001F2A  0E08               	movlw	8
 11414  001F2C  B4D8               	btfsc	status,2,c
 11415  001F2E  5D62               	subwf	init_crc8@j& (0+255),w,b
 11416  001F30  E3EB               	bnc	l1568
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;crc8.c: 34: }
 11420                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11421  001F32  0E00               	movlw	low _crc8_table
 11422  001F34  0100               	movlb	0	; () banked
 11423  001F36  2565               	addwf	init_crc8@i& (0+255),w,b
 11424  001F38  6ED9               	movwf	fsr2l,c
 11425  001F3A  0E03               	movlw	high _crc8_table
 11426  001F3C  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11427  001F3E  6EDA               	movwf	fsr2h,c
 11428  001F40  C064  FFDF         	movff	init_crc8@crc,indf2
 11429                           
 11430                           ; BSR set to: 0
 11431  001F44  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11432  001F46  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11433                           
 11434                           ; BSR set to: 0
 11435  001F48  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11436  001F4A  0A80               	xorlw	128
 11437  001F4C  0F7F               	addlw	-129
 11438  001F4E  0E00               	movlw	0
 11439  001F50  B4D8               	btfsc	status,2,c
 11440  001F52  5D65               	subwf	init_crc8@i& (0+255),w,b
 11441  001F54  E3D5               	bnc	l1566
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;crc8.c: 37: }
 11445                           ;crc8.c: 38: made_table=1;
 11446  001F56  0E00               	movlw	0
 11447  001F58  6E28               	movwf	_made_table+1,c
 11448  001F5A  0E01               	movlw	1
 11449  001F5C  6E27               	movwf	_made_table,c
 11450  001F5E                     l1574:
 11451                           
 11452                           ; BSR set to: 0
 11453  001F5E  0012               	return	
 11454  001F60                     __end_of_init_crc8:
 11455                           	opt stack 0
 11456                           tblptru	equ	0xFF8
 11457                           tblptrh	equ	0xFF7
 11458                           tblptrl	equ	0xFF6
 11459                           tablat	equ	0xFF5
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           intcon	equ	0xFF2
 11463                           indf0	equ	0xFEF
 11464                           postinc0	equ	0xFEE
 11465                           fsr0h	equ	0xFEA
 11466                           fsr0l	equ	0xFE9
 11467                           wreg	equ	0xFE8
 11468                           indf1	equ	0xFE7
 11469                           postinc1	equ	0xFE6
 11470                           postdec1	equ	0xFE5
 11471                           fsr1h	equ	0xFE2
 11472                           fsr1l	equ	0xFE1
 11473                           indf2	equ	0xFDF
 11474                           postinc2	equ	0xFDE
 11475                           postdec2	equ	0xFDD
 11476                           plusw2	equ	0xFDB
 11477                           fsr2h	equ	0xFDA
 11478                           fsr2l	equ	0xFD9
 11479                           status	equ	0xFD8
 11480                           
 11481 ;; *************** function _doModeVerbose *****************
 11482 ;; Defined at:
 11483 ;;		line 515 in file "main.c"
 11484 ;; Parameters:    Size  Location     Type
 11485 ;;		None
 11486 ;; Auto vars:     Size  Location     Type
 11487 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11488 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11489 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11490 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11491 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11492 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11493 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11494 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11495 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11496 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11497 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11498 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11499 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11500 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11501 ;;  id              4   35[BANK2 ] unsigned long 
 11502 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11503 ;;		 -> NULL(0), cmdbuf(80), 
 11504 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11505 ;;  maskno          1   40[BANK2 ] unsigned char 
 11506 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11507 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11508 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11509 ;;  id              4    0[BANK2 ] unsigned long 
 11510 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11511 ;;		 -> NULL(0), cmdbuf(80), 
 11512 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11513 ;;  filterno        1   39[BANK2 ] unsigned char 
 11514 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11515 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11516 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11517 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11518 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11519 ;;		 -> NULL(0), cmdbuf(80), 
 11520 ;;  value           1   42[BANK2 ] unsigned char 
 11521 ;;  reg             1   34[BANK2 ] unsigned char 
 11522 ;;  page            1   33[BANK2 ] unsigned char 
 11523 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11524 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11525 ;;		 -> NULL(0), cmdbuf(80), 
 11526 ;;  value           1   49[BANK2 ] unsigned char 
 11527 ;;  i               1   48[BANK2 ] unsigned char 
 11528 ;;  reg             1   46[BANK2 ] unsigned char 
 11529 ;;  page            1   45[BANK2 ] unsigned char 
 11530 ;;  count           1   43[BANK2 ] unsigned char 
 11531 ;;  rv              1   32[BANK2 ] enum E15660
 11532 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11533 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11534 ;;		 -> NULL(0), cmdbuf(80), 
 11535 ;;  ifmode          1   54[BANK2 ] enum E16371
 11536 ;;  c               1   44[BANK2 ] unsigned char 
 11537 ;;  i               1   41[BANK2 ] unsigned char 
 11538 ;; Return value:  Size  Location     Type
 11539 ;;		None               void
 11540 ;; Registers used:
 11541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11542 ;; Tracked objects:
 11543 ;;		On entry : F/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11547 ;;      Params:         0       0       0       0       0       0       0
 11548 ;;      Locals:         0       0       0      61       0       0       0
 11549 ;;      Temps:          0      20       0       0       0       0       0
 11550 ;;      Totals:         0      20       0      61       0       0       0
 11551 ;;Total ram usage:       81 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:   10
 11554 ;; This function calls:
 11555 ;;		_putsUSART
 11556 ;;		_printFirmwareVersion
 11557 ;;		_fifo_read
 11558 ;;		_Busy_eep
 11559 ;;		_Write_b_eep
 11560 ;;		_receivePrintEventVerbose
 11561 ;;		_stristr
 11562 ;;		_ECANSetOperationMode
 11563 ;;		_strtok
 11564 ;;		_atoi
 11565 ;;		_memset
 11566 ;;		_sendVSCPFrame
 11567 ;;		_printStatistics
 11568 ;;		_printErrors
 11569 ;;		_printHelp
 11570 ;;		_findNodes
 11571 ;;		_strcpy
 11572 ;;		_strchr
 11573 ;;		_readRegisterExtended
 11574 ;;		_sprintf
 11575 ;;		_WriteUSART
 11576 ;;		_printBinary
 11577 ;;		_writeRegisterExtended
 11578 ;;		_printNodeFirmwareVersion
 11579 ;;		_printGUID
 11580 ;;		_printMDF
 11581 ;;		_setFilter
 11582 ;;		__CANIDToRegs
 11583 ;; This function is called by:
 11584 ;;		_main
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           	psect	text22
 11589  005886                     __ptext22:
 11590                           	opt stack 0
 11591  005886                     _doModeVerbose:
 11592                           	opt stack 19
 11593                           
 11594                           ; BSR set to: 0
 11595                           ;main.c: 516: uint8_t c;
 11596                           ;main.c: 517: uint8_t i;
 11597                           ;main.c: 520: if (!bSilent) {
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;incstack = 0
 11601                           ;incstack = 0
 11602  005886  67E5               	tstfsz	_bSilent& (0+255),b
 11603  005888  D002               	goto	l13481
 11604                           
 11605                           ; BSR set to: 0
 11606                           ;main.c: 521: receivePrintEventVerbose();
 11607  00588A  EC18  F024         	call	_receivePrintEventVerbose	;wreg free
 11608  00588E                     l13481:
 11609                           
 11610                           ;main.c: 522: }
 11611                           ;main.c: 525: (INTCONbits.GIE = 0);
 11612  00588E  9EF2               	bcf	intcon,7,c	;volatile
 11613                           
 11614                           ;main.c: 527: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11615  005890  0E01               	movlw	high _serialInputFifo
 11616  005892  0100               	movlb	0	; () banked
 11617  005894  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11618  005896  0ED4               	movlw	low _serialInputFifo
 11619  005898  6F60               	movwf	?_fifo_read& (0+255),b
 11620  00589A  0E02               	movlw	high doModeVerbose@c
 11621  00589C  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11622  00589E  0EAC               	movlw	low doModeVerbose@c
 11623  0058A0  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11624  0058A2  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11625  0058A4  0E01               	movlw	1
 11626  0058A6  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11627  0058A8  EC0E  F016         	call	_fifo_read	;wreg free
 11628  0058AC  0560               	decf	?_fifo_read& (0+255),w,b
 11629  0058AE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11630  0058B0  E002 EFC3  F035    	bnz	l14103
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;main.c: 530: (INTCONbits.GIE = 1);
 11634  0058B6  8EF2               	bsf	intcon,7,c	;volatile
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;main.c: 533: cmdbuf[ pos++ ] = c;
 11638  0058B8  EC1B  F022         	call	PL24	;call to abstracted procedure
 11639  0058BC  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11640                           
 11641                           ; BSR set to: 2
 11642  0058C0  2BE7               	incf	_pos& (0+255),f,b
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;main.c: 534: if (pos >= sizeof( cmdbuf ) ) {
 11646  0058C2  0E4F               	movlw	79
 11647  0058C4  65E7               	cpfsgt	_pos& (0+255),b
 11648  0058C6  D001               	goto	l13495
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;main.c: 537: pos = 0;
 11652  0058C8  6BE7               	clrf	_pos& (0+255),b
 11653  0058CA                     l13495:
 11654                           
 11655                           ; BSR set to: 0
 11656                           ;main.c: 538: }
 11657                           ;main.c: 541: if (0x0d == c) {
 11658  0058CA  0102               	movlb	2	; () banked
 11659  0058CC  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11660  0058CE  0A0D               	xorlw	13
 11661  0058D0  E002 EFC3  F035    	bnz	l14103
 11662                           
 11663                           ; BSR set to: 2
 11664                           ;main.c: 543: cmdbuf[ pos ] = 0;
 11665  0058D6  EC1B  F022         	call	PL24	;call to abstracted procedure
 11666  0058DA  6ADF               	clrf	indf2,c
 11667                           
 11668                           ; BSR set to: 1
 11669                           ;main.c: 546: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11670  0058DC  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11671  0058DE  0E24               	movlw	low _cmdbuf
 11672  0058E0  6F6B               	movwf	?_stristr& (0+255),b
 11673  0058E2  0E7C               	movlw	high STR_6
 11674  0058E4  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11675  0058E6  0ED0               	movlw	low STR_6
 11676  0058E8  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11677  0058EA  EC61  F010         	call	_stristr	;wreg free
 11678  0058EE  0E24               	movlw	low _cmdbuf
 11679  0058F0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11680  0058F2  0E01               	movlw	high _cmdbuf
 11681  0058F4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11682  0058F6  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11683  0058F8  E102               	bnz	u17895
 11684  0058FA  516B               	movf	?_stristr& (0+255),w,b
 11685  0058FC  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11686  0058FE                     u17895:
 11687  0058FE  E112               	bnz	l13507
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;main.c: 547: putsUSART((char *) "Will enter bootloader now...\r\n");
 11691  005900  0E77               	movlw	high STR_7
 11692  005902  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11693  005904  0EED               	movlw	low STR_7
 11694  005906  6F60               	movwf	?_putsUSART& (0+255),b
 11695  005908  ECFF  F00D         	call	_putsUSART	;wreg free
 11696                           
 11697                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11698  00590C  EC29  F00B         	call	_Busy_eep	;wreg free
 11699  005910  0100               	movlb	0	; () banked
 11700  005912  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11701  005914  6B60               	clrf	?_Write_b_eep& (0+255),b
 11702  005916  0EFF               	movlw	255
 11703  005918  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11704  00591A  ECF9  F00B         	call	_Write_b_eep	;wreg free
 11705  00591E  00FF               	reset		;# 
 11706                           
 11707                           ;main.c: 550: }
 11708  005920  EFB6  F035         	goto	l14099
 11709  005924                     l13507:
 11710                           
 11711                           ; BSR set to: 0
 11712                           ;main.c: 552: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11713  005924  0E01               	movlw	high _cmdbuf
 11714  005926  0100               	movlb	0	; () banked
 11715  005928  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11716  00592A  0E24               	movlw	low _cmdbuf
 11717  00592C  6F6B               	movwf	?_stristr& (0+255),b
 11718  00592E  0E7C               	movlw	high STR_8
 11719  005930  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11720  005932  0EB7               	movlw	low STR_8
 11721  005934  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11722  005936  EC61  F010         	call	_stristr	;wreg free
 11723  00593A  0E24               	movlw	low _cmdbuf
 11724  00593C  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11725  00593E  0E01               	movlw	high _cmdbuf
 11726  005940  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11727  005942  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11728  005944  E102               	bnz	u17905
 11729  005946  516B               	movf	?_stristr& (0+255),w,b
 11730  005948  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11731  00594A                     u17905:
 11732  00594A  E10D               	bnz	l13515
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;main.c: 553: bSilent = 0;
 11736  00594C  6BE5               	clrf	_bSilent& (0+255),b
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;main.c: 554: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11740  00594E  0E00               	movlw	0
 11741  005950  EC60  F00B         	call	_ECANSetOperationMode
 11742                           
 11743                           ;main.c: 555: putsUSART((char *) "+OK\r\n");
 11744  005954  0E7C               	movlw	high STR_9
 11745  005956  0100               	movlb	0	; () banked
 11746  005958  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11747  00595A  0E80               	movlw	low STR_9
 11748  00595C  6F60               	movwf	?_putsUSART& (0+255),b
 11749  00595E  ECFF  F00D         	call	_putsUSART	;wreg free
 11750                           
 11751                           ;main.c: 556: }
 11752  005962  EFB6  F035         	goto	l14099
 11753  005966                     l13515:
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;main.c: 558: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11757  005966  0E01               	movlw	high _cmdbuf
 11758  005968  0100               	movlb	0	; () banked
 11759  00596A  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11760  00596C  0E24               	movlw	low _cmdbuf
 11761  00596E  6F6B               	movwf	?_stristr& (0+255),b
 11762  005970  0E7C               	movlw	high STR_10
 11763  005972  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11764  005974  0E5E               	movlw	low STR_10
 11765  005976  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11766  005978  EC61  F010         	call	_stristr	;wreg free
 11767  00597C  0E24               	movlw	low _cmdbuf
 11768  00597E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11769  005980  0E01               	movlw	high _cmdbuf
 11770  005982  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11771  005984  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11772  005986  E102               	bnz	u17915
 11773  005988  516B               	movf	?_stristr& (0+255),w,b
 11774  00598A  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11775  00598C                     u17915:
 11776  00598C  E10E               	bnz	l13523
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;main.c: 559: bSilent = 1;
 11780  00598E  0E01               	movlw	1
 11781  005990  6FE5               	movwf	_bSilent& (0+255),b
 11782                           
 11783                           ; BSR set to: 0
 11784                           ;main.c: 560: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11785  005992  0E00               	movlw	0
 11786  005994  EC60  F00B         	call	_ECANSetOperationMode
 11787                           
 11788                           ;main.c: 561: putsUSART((char *) "+OK\r\n");
 11789  005998  0E7C               	movlw	high STR_9
 11790  00599A  0100               	movlb	0	; () banked
 11791  00599C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11792  00599E  0E80               	movlw	low STR_9
 11793  0059A0  6F60               	movwf	?_putsUSART& (0+255),b
 11794  0059A2  ECFF  F00D         	call	_putsUSART	;wreg free
 11795                           
 11796                           ;main.c: 562: }
 11797  0059A6  EFB6  F035         	goto	l14099
 11798  0059AA                     l13523:
 11799                           
 11800                           ; BSR set to: 0
 11801                           ;main.c: 564: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11802  0059AA  0E01               	movlw	high _cmdbuf
 11803  0059AC  0100               	movlb	0	; () banked
 11804  0059AE  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11805  0059B0  0E24               	movlw	low _cmdbuf
 11806  0059B2  6F6B               	movwf	?_stristr& (0+255),b
 11807  0059B4  0E7C               	movlw	high STR_12
 11808  0059B6  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11809  0059B8  0E92               	movlw	low STR_12
 11810  0059BA  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11811  0059BC  EC61  F010         	call	_stristr	;wreg free
 11812  0059C0  0E24               	movlw	low _cmdbuf
 11813  0059C2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11814  0059C4  0E01               	movlw	high _cmdbuf
 11815  0059C6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11816  0059C8  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11817  0059CA  E102               	bnz	u17925
 11818  0059CC  516B               	movf	?_stristr& (0+255),w,b
 11819  0059CE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11820  0059D0                     u17925:
 11821  0059D0  E10E               	bnz	l13531
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;main.c: 565: bSilent = 1;
 11825  0059D2  0E01               	movlw	1
 11826  0059D4  6FE5               	movwf	_bSilent& (0+255),b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 566: ECANSetOperationMode(0x20);
 11830  0059D6  0E20               	movlw	32
 11831  0059D8  EC60  F00B         	call	_ECANSetOperationMode
 11832                           
 11833                           ;main.c: 567: putsUSART((char *) "+OK\r\n");
 11834  0059DC  0E7C               	movlw	high STR_9
 11835  0059DE  0100               	movlb	0	; () banked
 11836  0059E0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11837  0059E2  0E80               	movlw	low STR_9
 11838  0059E4  6F60               	movwf	?_putsUSART& (0+255),b
 11839  0059E6  ECFF  F00D         	call	_putsUSART	;wreg free
 11840                           
 11841                           ;main.c: 568: }
 11842  0059EA  EFB6  F035         	goto	l14099
 11843  0059EE                     l13531:
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;main.c: 570: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11847  0059EE  0E01               	movlw	high _cmdbuf
 11848  0059F0  0100               	movlb	0	; () banked
 11849  0059F2  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11850  0059F4  0E24               	movlw	low _cmdbuf
 11851  0059F6  6F6B               	movwf	?_stristr& (0+255),b
 11852  0059F8  0E7B               	movlw	high STR_14
 11853  0059FA  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11854  0059FC  0ECD               	movlw	low STR_14
 11855  0059FE  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11856  005A00  EC61  F010         	call	_stristr	;wreg free
 11857  005A04  0E24               	movlw	low _cmdbuf
 11858  005A06  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11859  005A08  0E01               	movlw	high _cmdbuf
 11860  005A0A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11861  005A0C  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11862  005A0E  E102               	bnz	u17935
 11863  005A10  516B               	movf	?_stristr& (0+255),w,b
 11864  005A12  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11865  005A14                     u17935:
 11866  005A14  E10D               	bnz	l13539
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;main.c: 571: bSilent = 0;
 11870  005A16  6BE5               	clrf	_bSilent& (0+255),b
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;main.c: 572: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11874  005A18  0E40               	movlw	64
 11875  005A1A  EC60  F00B         	call	_ECANSetOperationMode
 11876                           
 11877                           ;main.c: 573: putsUSART((char *) "+OK\r\n");
 11878  005A1E  0E7C               	movlw	high STR_9
 11879  005A20  0100               	movlb	0	; () banked
 11880  005A22  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11881  005A24  0E80               	movlw	low STR_9
 11882  005A26  6F60               	movwf	?_putsUSART& (0+255),b
 11883  005A28  ECFF  F00D         	call	_putsUSART	;wreg free
 11884                           
 11885                           ;main.c: 574: }
 11886  005A2C  EFB6  F035         	goto	l14099
 11887  005A30                     l13539:
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;main.c: 576: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11891  005A30  0E01               	movlw	high _cmdbuf
 11892  005A32  0100               	movlb	0	; () banked
 11893  005A34  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11894  005A36  0E24               	movlw	low _cmdbuf
 11895  005A38  6F6B               	movwf	?_stristr& (0+255),b
 11896  005A3A  0E7C               	movlw	high STR_16
 11897  005A3C  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11898  005A3E  0E50               	movlw	low STR_16
 11899  005A40  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11900  005A42  EC61  F010         	call	_stristr	;wreg free
 11901  005A46  0E24               	movlw	low _cmdbuf
 11902  005A48  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11903  005A4A  0E01               	movlw	high _cmdbuf
 11904  005A4C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11905  005A4E  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11906  005A50  E102               	bnz	u17945
 11907  005A52  516B               	movf	?_stristr& (0+255),w,b
 11908  005A54  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11909  005A56                     u17945:
 11910  005A56  E10D               	bnz	l13547
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;main.c: 577: bSilent = 0;
 11914  005A58  6BE5               	clrf	_bSilent& (0+255),b
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;main.c: 578: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11918  005A5A  0E60               	movlw	96
 11919  005A5C  EC60  F00B         	call	_ECANSetOperationMode
 11920                           
 11921                           ;main.c: 579: putsUSART((char *) "+OK\r\n");
 11922  005A60  0E7C               	movlw	high STR_9
 11923  005A62  0100               	movlb	0	; () banked
 11924  005A64  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11925  005A66  0E80               	movlw	low STR_9
 11926  005A68  6F60               	movwf	?_putsUSART& (0+255),b
 11927  005A6A  ECFF  F00D         	call	_putsUSART	;wreg free
 11928                           
 11929                           ;main.c: 580: }
 11930  005A6E  EFB6  F035         	goto	l14099
 11931  005A72                     l13547:
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;main.c: 582: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11935  005A72  0E01               	movlw	high _cmdbuf
 11936  005A74  0100               	movlb	0	; () banked
 11937  005A76  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11938  005A78  0E24               	movlw	low _cmdbuf
 11939  005A7A  6F6B               	movwf	?_stristr& (0+255),b
 11940  005A7C  0E7C               	movlw	high STR_18
 11941  005A7E  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11942  005A80  0E0E               	movlw	low STR_18
 11943  005A82  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11944  005A84  EC61  F010         	call	_stristr	;wreg free
 11945  005A88  0E24               	movlw	low _cmdbuf
 11946  005A8A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11947  005A8C  0E01               	movlw	high _cmdbuf
 11948  005A8E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11949  005A90  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11950  005A92  E102               	bnz	u17955
 11951  005A94  516B               	movf	?_stristr& (0+255),w,b
 11952  005A96  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11953  005A98                     u17955:
 11954  005A98  E10B               	bnz	l13553
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;main.c: 583: printFirmwareVersion();
 11958  005A9A  EC1C  F011         	call	_printFirmwareVersion	;wreg free
 11959                           
 11960                           ;main.c: 584: putsUSART((char *) "+OK\r\n");
 11961  005A9E  0E7C               	movlw	high STR_9
 11962  005AA0  0100               	movlb	0	; () banked
 11963  005AA2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 11964  005AA4  0E80               	movlw	low STR_9
 11965  005AA6  6F60               	movwf	?_putsUSART& (0+255),b
 11966  005AA8  ECFF  F00D         	call	_putsUSART	;wreg free
 11967                           
 11968                           ;main.c: 585: }
 11969  005AAC  EFB6  F035         	goto	l14099
 11970  005AB0                     l13553:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;main.c: 587: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11974  005AB0  0E01               	movlw	high _cmdbuf
 11975  005AB2  0100               	movlb	0	; () banked
 11976  005AB4  6F6C               	movwf	(?_stristr+1)& (0+255),b
 11977  005AB6  0E24               	movlw	low _cmdbuf
 11978  005AB8  6F6B               	movwf	?_stristr& (0+255),b
 11979  005ABA  0E7C               	movlw	high STR_20
 11980  005ABC  6F6E               	movwf	(?_stristr+3)& (0+255),b
 11981  005ABE  0E49               	movlw	low STR_20
 11982  005AC0  6F6D               	movwf	(?_stristr+2)& (0+255),b
 11983  005AC2  EC61  F010         	call	_stristr	;wreg free
 11984  005AC6  0E24               	movlw	low _cmdbuf
 11985  005AC8  6FC8               	movwf	??_doModeVerbose& (0+255),b
 11986  005ACA  0E01               	movlw	high _cmdbuf
 11987  005ACC  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 11988  005ACE  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 11989  005AD0  E102               	bnz	u17965
 11990  005AD2  516B               	movf	?_stristr& (0+255),w,b
 11991  005AD4  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 11992  005AD6                     u17965:
 11993  005AD6  E167               	bnz	l13589
 11994                           
 11995                           ; BSR set to: 0
 11996                           ;main.c: 588: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11997  005AD8  506F               	movf	3951,w,c	;volatile
 11998  005ADA  0BE0               	andlw	224
 11999  005ADC  0102               	movlb	2	; () banked
 12000  005ADE  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 12001                           
 12002                           ; BSR set to: 2
 12003                           ;main.c: 589: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12004  005AE0  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12005  005AE2  D00B               	goto	l13563
 12006                           
 12007                           ; BSR set to: 2
 12008  005AE4  0100               	movlb	0	; () banked
 12009  005AE6  67E5               	tstfsz	_bSilent& (0+255),b
 12010  005AE8  D008               	goto	l13563
 12011                           
 12012                           ; BSR set to: 0
 12013                           ;main.c: 590: putsUSART((char *) "+OK - Normal mode\r\n");
 12014  005AEA  0E7A               	movlw	high STR_21
 12015  005AEC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12016  005AEE  0E83               	movlw	low STR_21
 12017  005AF0  6F60               	movwf	?_putsUSART& (0+255),b
 12018  005AF2  ECFF  F00D         	call	_putsUSART	;wreg free
 12019                           
 12020                           ;main.c: 591: }
 12021  005AF6  EFB6  F035         	goto	l14099
 12022  005AFA                     l13563:
 12023                           
 12024                           ;main.c: 592: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12025  005AFA  0102               	movlb	2	; () banked
 12026  005AFC  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12027  005AFE  0E01               	movlw	1
 12028  005B00  A4D8               	btfss	status,2,c
 12029  005B02  0E00               	movlw	0
 12030  005B04  0100               	movlb	0	; () banked
 12031  005B06  15E5               	andwf	_bSilent& (0+255),w,b
 12032  005B08  E008               	bz	l13567
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 593: putsUSART((char *) "+OK - Silent mode\r\n");
 12036  005B0A  0E7A               	movlw	high STR_22
 12037  005B0C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12038  005B0E  0E97               	movlw	low STR_22
 12039  005B10  6F60               	movwf	?_putsUSART& (0+255),b
 12040  005B12  ECFF  F00D         	call	_putsUSART	;wreg free
 12041                           
 12042                           ;main.c: 594: }
 12043  005B16  EFB6  F035         	goto	l14099
 12044  005B1A                     l13567:
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;main.c: 595: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12048  005B1A  0102               	movlb	2	; () banked
 12049  005B1C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12050  005B1E  0A20               	xorlw	32
 12051  005B20  E109               	bnz	l13571
 12052                           
 12053                           ; BSR set to: 2
 12054                           ;main.c: 596: putsUSART((char *) "+OK - Sleep mode\r\n");
 12055  005B22  0E7A               	movlw	high STR_23
 12056  005B24  0100               	movlb	0	; () banked
 12057  005B26  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12058  005B28  0ED3               	movlw	low STR_23
 12059  005B2A  6F60               	movwf	?_putsUSART& (0+255),b
 12060  005B2C  ECFF  F00D         	call	_putsUSART	;wreg free
 12061                           
 12062                           ;main.c: 597: }
 12063  005B30  EFB6  F035         	goto	l14099
 12064  005B34                     l13571:
 12065                           
 12066                           ; BSR set to: 2
 12067                           ;main.c: 598: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12068  005B34  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12069  005B36  0A40               	xorlw	64
 12070  005B38  E109               	bnz	l13575
 12071                           
 12072                           ; BSR set to: 2
 12073                           ;main.c: 599: putsUSART((char *) "+OK - Loopback mode\r\n");
 12074  005B3A  0E7A               	movlw	high STR_24
 12075  005B3C  0100               	movlb	0	; () banked
 12076  005B3E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12077  005B40  0E06               	movlw	low STR_24
 12078  005B42  6F60               	movwf	?_putsUSART& (0+255),b
 12079  005B44  ECFF  F00D         	call	_putsUSART	;wreg free
 12080                           
 12081                           ;main.c: 600: }
 12082  005B48  EFB6  F035         	goto	l14099
 12083  005B4C                     l13575:
 12084                           
 12085                           ; BSR set to: 2
 12086                           ;main.c: 601: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12087  005B4C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12088  005B4E  0A60               	xorlw	96
 12089  005B50  E109               	bnz	l13579
 12090                           
 12091                           ; BSR set to: 2
 12092                           ;main.c: 602: putsUSART((char *) "+OK - Listen only mode\r\n");
 12093  005B52  0E78               	movlw	high STR_25
 12094  005B54  0100               	movlb	0	; () banked
 12095  005B56  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12096  005B58  0ECF               	movlw	low STR_25
 12097  005B5A  6F60               	movwf	?_putsUSART& (0+255),b
 12098  005B5C  ECFF  F00D         	call	_putsUSART	;wreg free
 12099                           
 12100                           ;main.c: 603: }
 12101  005B60  EFB6  F035         	goto	l14099
 12102  005B64                     l13579:
 12103                           
 12104                           ; BSR set to: 2
 12105                           ;main.c: 604: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12106  005B64  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12107  005B66  0A80               	xorlw	128
 12108  005B68  E109               	bnz	l13583
 12109                           
 12110                           ; BSR set to: 2
 12111                           ;main.c: 605: putsUSART((char *) "+OK - Closed mode\r\n");
 12112  005B6A  0E7A               	movlw	high STR_26
 12113  005B6C  0100               	movlb	0	; () banked
 12114  005B6E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12115  005B70  0E6F               	movlw	low STR_26
 12116  005B72  6F60               	movwf	?_putsUSART& (0+255),b
 12117  005B74  ECFF  F00D         	call	_putsUSART	;wreg free
 12118                           
 12119                           ;main.c: 606: }
 12120  005B78  EFB6  F035         	goto	l14099
 12121  005B7C                     l13583:
 12122                           
 12123                           ; BSR set to: 2
 12124                           ;main.c: 607: else if (ECAN_OP_MODE_BITS == ifmode) {
 12125  005B7C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12126  005B7E  0AE0               	xorlw	224
 12127  005B80  E109               	bnz	l13587
 12128                           
 12129                           ; BSR set to: 2
 12130                           ;main.c: 608: putsUSART((char *) "+OK - Bits mode\r\n");
 12131  005B82  0E7A               	movlw	high STR_27
 12132  005B84  0100               	movlb	0	; () banked
 12133  005B86  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12134  005B88  0EE6               	movlw	low STR_27
 12135  005B8A  6F60               	movwf	?_putsUSART& (0+255),b
 12136  005B8C  ECFF  F00D         	call	_putsUSART	;wreg free
 12137                           
 12138                           ;main.c: 609: }
 12139  005B90  EFB6  F035         	goto	l14099
 12140  005B94                     l13587:
 12141                           
 12142                           ; BSR set to: 2
 12143                           ;main.c: 610: else {
 12144                           ;main.c: 611: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12145  005B94  0E79               	movlw	high STR_28
 12146  005B96  0100               	movlb	0	; () banked
 12147  005B98  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12148  005B9A  0E49               	movlw	low STR_28
 12149  005B9C  6F60               	movwf	?_putsUSART& (0+255),b
 12150  005B9E  ECFF  F00D         	call	_putsUSART	;wreg free
 12151  005BA2  EFB6  F035         	goto	l14099
 12152  005BA6                     l13589:
 12153                           
 12154                           ; BSR set to: 0
 12155                           ;main.c: 616: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12156  005BA6  0E01               	movlw	high _cmdbuf
 12157  005BA8  0100               	movlb	0	; () banked
 12158  005BAA  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12159  005BAC  0E24               	movlw	low _cmdbuf
 12160  005BAE  6F6B               	movwf	?_stristr& (0+255),b
 12161  005BB0  0E7C               	movlw	high STR_29
 12162  005BB2  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12163  005BB4  0EEB               	movlw	low STR_29
 12164  005BB6  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12165  005BB8  EC61  F010         	call	_stristr	;wreg free
 12166  005BBC  0E24               	movlw	low _cmdbuf
 12167  005BBE  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12168  005BC0  0E01               	movlw	high _cmdbuf
 12169  005BC2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12170  005BC4  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12171  005BC6  E102               	bnz	u18065
 12172  005BC8  516B               	movf	?_stristr& (0+255),w,b
 12173  005BCA  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12174  005BCC                     u18065:
 12175  005BCC  E001 D0D8          	bnz	l13643
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;main.c: 618: char *p = strtok(cmdbuf, ",");
 12179  005BD0  EC14  F036         	call	PL30	;call to abstracted procedure
 12180  005BD4  EC63  F011         	call	_strtok	;wreg free
 12181  005BD8  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12182  005BDC  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;main.c: 621: vscpPriority = 3;
 12186  005BE0  0E03               	movlw	3
 12187  005BE2  6FEA               	movwf	_vscpPriority& (0+255),b
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;main.c: 622: if ((0) != p) {
 12191  005BE4  0102               	movlb	2	; () banked
 12192  005BE6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12193  005BE8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12194  005BEA  E008               	bz	l13599
 12195                           
 12196                           ; BSR set to: 2
 12197                           ;main.c: 623: vscpPriority = atoi(p);
 12198  005BEC  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12199  005BF0  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12200  005BF4  ECAA  F019         	call	_atoi	;wreg free
 12201  005BF8  5164               	movf	?_atoi& (0+255),w,b
 12202  005BFA  6FEA               	movwf	_vscpPriority& (0+255),b
 12203  005BFC                     l13599:
 12204                           
 12205                           ;main.c: 624: }
 12206                           ;main.c: 627: vscpClass = 0;
 12207  005BFC  6A3B               	clrf	_vscpClass,c
 12208  005BFE  6A3C               	clrf	_vscpClass+1,c
 12209                           
 12210                           ;main.c: 628: if ((0) != (p = strtok((0), ","))) {
 12211  005C00  0100               	movlb	0	; () banked
 12212  005C02  ECD3  F035         	call	PL4	;call to abstracted procedure
 12213  005C06  EC63  F011         	call	_strtok	;wreg free
 12214  005C0A  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12215  005C0E  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12216  005C12  0102               	movlb	2	; () banked
 12217  005C14  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12218  005C16  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12219  005C18  E00A               	bz	l13605
 12220                           
 12221                           ; BSR set to: 2
 12222                           ;main.c: 629: vscpClass = atoi(p);
 12223  005C1A  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12224  005C1E  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12225  005C22  ECAA  F019         	call	_atoi	;wreg free
 12226  005C26  C064  F03B         	movff	?_atoi,_vscpClass
 12227  005C2A  C065  F03C         	movff	?_atoi+1,_vscpClass+1
 12228  005C2E                     l13605:
 12229                           
 12230                           ;main.c: 630: }
 12231                           ;main.c: 633: vscpType = 0;
 12232  005C2E  0100               	movlb	0	; () banked
 12233  005C30  6BEC               	clrf	_vscpType& (0+255),b
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;main.c: 634: if ((0) != (p = strtok((0), ","))) {
 12237  005C32  ECD3  F035         	call	PL4	;call to abstracted procedure
 12238  005C36  EC63  F011         	call	_strtok	;wreg free
 12239  005C3A  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12240  005C3E  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12241  005C42  0102               	movlb	2	; () banked
 12242  005C44  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12243  005C46  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12244  005C48  E008               	bz	l13611
 12245                           
 12246                           ; BSR set to: 2
 12247                           ;main.c: 635: vscpType = atoi(p);
 12248  005C4A  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12249  005C4E  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12250  005C52  ECAA  F019         	call	_atoi	;wreg free
 12251  005C56  5164               	movf	?_atoi& (0+255),w,b
 12252  005C58  6FEC               	movwf	_vscpType& (0+255),b
 12253  005C5A                     l13611:
 12254                           
 12255                           ;main.c: 636: }
 12256                           ;main.c: 639: vscpNodeId = 0;
 12257  005C5A  0100               	movlb	0	; () banked
 12258  005C5C  6BE9               	clrf	_vscpNodeId& (0+255),b
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 640: if ((0) != (p = strtok((0), ","))) {
 12262  005C5E  ECD3  F035         	call	PL4	;call to abstracted procedure
 12263  005C62  EC63  F011         	call	_strtok	;wreg free
 12264  005C66  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12265  005C6A  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12266  005C6E  0102               	movlb	2	; () banked
 12267  005C70  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12268  005C72  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12269  005C74  E008               	bz	l13617
 12270                           
 12271                           ; BSR set to: 2
 12272                           ;main.c: 641: vscpNodeId = atoi(p);
 12273  005C76  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12274  005C7A  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12275  005C7E  ECAA  F019         	call	_atoi	;wreg free
 12276  005C82  5164               	movf	?_atoi& (0+255),w,b
 12277  005C84  6FE9               	movwf	_vscpNodeId& (0+255),b
 12278  005C86                     l13617:
 12279                           
 12280                           ;main.c: 642: }
 12281                           ;main.c: 645: vscpSize = 0;
 12282  005C86  0100               	movlb	0	; () banked
 12283  005C88  6BEB               	clrf	_vscpSize& (0+255),b
 12284                           
 12285                           ; BSR set to: 0
 12286                           ;main.c: 646: if ((0) != (p = strtok((0), ","))) {
 12287  005C8A  ECD3  F035         	call	PL4	;call to abstracted procedure
 12288  005C8E  EC63  F011         	call	_strtok	;wreg free
 12289  005C92  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12290  005C96  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12291  005C9A  0102               	movlb	2	; () banked
 12292  005C9C  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12293  005C9E  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12294  005CA0  E008               	bz	l13623
 12295                           
 12296                           ; BSR set to: 2
 12297                           ;main.c: 647: vscpSize = atoi(p);
 12298  005CA2  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12299  005CA6  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12300  005CAA  ECAA  F019         	call	_atoi	;wreg free
 12301  005CAE  5164               	movf	?_atoi& (0+255),w,b
 12302  005CB0  6FEB               	movwf	_vscpSize& (0+255),b
 12303  005CB2                     l13623:
 12304                           
 12305                           ;main.c: 648: }
 12306                           ;main.c: 650: memset( vscpData, 0, 8 );
 12307  005CB2  0E01               	movlw	high _vscpData
 12308  005CB4  0100               	movlb	0	; () banked
 12309  005CB6  6F61               	movwf	(?_memset+1)& (0+255),b
 12310  005CB8  0EDC               	movlw	low _vscpData
 12311  005CBA  6F60               	movwf	?_memset& (0+255),b
 12312  005CBC  6B63               	clrf	(?_memset+3)& (0+255),b
 12313  005CBE  6B62               	clrf	(?_memset+2)& (0+255),b
 12314  005CC0  6B65               	clrf	(?_memset+5)& (0+255),b
 12315  005CC2  0E08               	movlw	8
 12316  005CC4  6F64               	movwf	(?_memset+4)& (0+255),b
 12317  005CC6  EC9A  F00B         	call	_memset	;wreg free
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;main.c: 651: for (i = 0; i < vscpSize; i++) {
 12321  005CCA  0102               	movlb	2	; () banked
 12322  005CCC  6BA9               	clrf	doModeVerbose@i& (0+255),b
 12323  005CCE  D01E               	goto	l13633
 12324  005CD0                     l13627:
 12325                           
 12326                           ; BSR set to: 2
 12327                           ;main.c: 652: if ((0) != (p = strtok((0), ","))) {
 12328  005CD0  0100               	movlb	0	; () banked
 12329  005CD2  ECD3  F035         	call	PL4	;call to abstracted procedure
 12330  005CD6  EC63  F011         	call	_strtok	;wreg free
 12331  005CDA  C06A  F2B7         	movff	?_strtok,doModeVerbose@p
 12332  005CDE  C06B  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12333  005CE2  0102               	movlb	2	; () banked
 12334  005CE4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12335  005CE6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12336  005CE8  E016               	bz	l13635
 12337                           
 12338                           ; BSR set to: 2
 12339                           ;main.c: 653: vscpData[ i ] = atoi(p);
 12340  005CEA  0EDC               	movlw	low _vscpData
 12341  005CEC  25A9               	addwf	doModeVerbose@i& (0+255),w,b
 12342  005CEE  6ED9               	movwf	fsr2l,c
 12343  005CF0  6ADA               	clrf	fsr2h,c
 12344  005CF2  0101               	movlb	1	; () banked
 12345  005CF4  0E01               	movlw	high _vscpData
 12346  005CF6  22DA               	addwfc	fsr2h,f,c
 12347  005CF8  C2B7  F064         	movff	doModeVerbose@p,?_atoi
 12348  005CFC  C2B8  F065         	movff	doModeVerbose@p+1,?_atoi+1
 12349  005D00  ECAA  F019         	call	_atoi	;wreg free
 12350  005D04  5164               	movf	?_atoi& (0+255),w,b
 12351  005D06  6EDF               	movwf	indf2,c
 12352                           
 12353                           ; BSR set to: 0
 12354                           
 12355                           ;main.c: 654: }
 12356  005D08  0102               	movlb	2	; () banked
 12357  005D0A  2BA9               	incf	doModeVerbose@i& (0+255),f,b
 12358  005D0C                     l13633:
 12359                           
 12360                           ; BSR set to: 2
 12361  005D0C  0100               	movlb	0	; () banked
 12362  005D0E  51EB               	movf	_vscpSize& (0+255),w,b
 12363  005D10  0102               	movlb	2	; () banked
 12364  005D12  5DA9               	subwf	doModeVerbose@i& (0+255),w,b
 12365  005D14  E3DD               	bnc	l13627
 12366  005D16                     l13635:
 12367                           
 12368                           ; BSR set to: 2
 12369                           ;main.c: 657: }
 12370                           ;main.c: 658: }
 12371                           ;main.c: 660: if ( sendVSCPFrame(vscpClass,
 12372                           ;main.c: 661: vscpType,
 12373                           ;main.c: 662: vscpNodeId,
 12374                           ;main.c: 663: vscpPriority,
 12375                           ;main.c: 664: vscpSize,
 12376                           ;main.c: 665: vscpData ) ) {
 12377  005D16  C03B  F094         	movff	_vscpClass,?_sendVSCPFrame
 12378  005D1A  C03C  F095         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12379  005D1E  C0EC  F096         	movff	_vscpType,?_sendVSCPFrame+2
 12380  005D22  C0E9  F097         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12381  005D26  C0EA  F098         	movff	_vscpPriority,?_sendVSCPFrame+4
 12382  005D2A  C0EB  F099         	movff	_vscpSize,?_sendVSCPFrame+5
 12383  005D2E  0E01               	movlw	high _vscpData
 12384  005D30  0100               	movlb	0	; () banked
 12385  005D32  6F9B               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12386  005D34  0EDC               	movlw	low _vscpData
 12387  005D36  6F9A               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12388  005D38  EC8D  F014         	call	_sendVSCPFrame	;wreg free
 12389  005D3C  0900               	iorlw	0
 12390  005D3E  E017               	bz	l13641
 12391                           
 12392                           ;main.c: 667: cntTxFrames++;
 12393  005D40  0101               	movlb	1	; () banked
 12394  005D42  2B14               	incf	_cntTxFrames& (0+255),f,b
 12395  005D44  0E00               	movlw	0
 12396  005D46  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12397  005D48  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12398  005D4A  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12399                           
 12400                           ;main.c: 668: cntTxBytes += vscpSize;
 12401  005D4C  0100               	movlb	0	; () banked
 12402  005D4E  51EB               	movf	_vscpSize& (0+255),w,b
 12403  005D50  0101               	movlb	1	; () banked
 12404  005D52  2710               	addwf	_cntTxBytes& (0+255),f,b
 12405  005D54  0E00               	movlw	0
 12406  005D56  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12407  005D58  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12408  005D5A  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12409                           
 12410                           ; BSR set to: 1
 12411                           ;main.c: 669: putsUSART((char *) "+OK\r\n");
 12412  005D5C  0E7C               	movlw	high STR_9
 12413  005D5E  0100               	movlb	0	; () banked
 12414  005D60  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12415  005D62  0E80               	movlw	low STR_9
 12416  005D64  6F60               	movwf	?_putsUSART& (0+255),b
 12417  005D66  ECFF  F00D         	call	_putsUSART	;wreg free
 12418                           
 12419                           ;main.c: 670: }
 12420  005D6A  EFB6  F035         	goto	l14099
 12421  005D6E                     l13641:
 12422                           
 12423                           ;main.c: 671: else {
 12424                           ;main.c: 672: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12425  005D6E  0E77               	movlw	high STR_37
 12426  005D70  0100               	movlb	0	; () banked
 12427  005D72  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12428  005D74  0E49               	movlw	low STR_37
 12429  005D76  6F60               	movwf	?_putsUSART& (0+255),b
 12430  005D78  ECFF  F00D         	call	_putsUSART	;wreg free
 12431  005D7C  EFB6  F035         	goto	l14099
 12432  005D80                     l13643:
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;main.c: 676: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12436  005D80  0E01               	movlw	high _cmdbuf
 12437  005D82  0100               	movlb	0	; () banked
 12438  005D84  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12439  005D86  0E24               	movlw	low _cmdbuf
 12440  005D88  6F6B               	movwf	?_stristr& (0+255),b
 12441  005D8A  0E7C               	movlw	high STR_38
 12442  005D8C  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12443  005D8E  0EE8               	movlw	low STR_38
 12444  005D90  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12445  005D92  EC61  F010         	call	_stristr	;wreg free
 12446  005D96  0E24               	movlw	low _cmdbuf
 12447  005D98  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12448  005D9A  0E01               	movlw	high _cmdbuf
 12449  005D9C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12450  005D9E  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12451  005DA0  E102               	bnz	u18155
 12452  005DA2  516B               	movf	?_stristr& (0+255),w,b
 12453  005DA4  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12454  005DA6                     u18155:
 12455  005DA6  E116               	bnz	l13651
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;main.c: 677: if (receivePrintEventVerbose()) {
 12459  005DA8  EC18  F024         	call	_receivePrintEventVerbose	;wreg free
 12460  005DAC  0900               	iorlw	0
 12461  005DAE  E009               	bz	l13649
 12462                           
 12463                           ;main.c: 678: putsUSART((char *) "+OK\r\n");
 12464  005DB0  0E7C               	movlw	high STR_9
 12465  005DB2  0100               	movlb	0	; () banked
 12466  005DB4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12467  005DB6  0E80               	movlw	low STR_9
 12468  005DB8  6F60               	movwf	?_putsUSART& (0+255),b
 12469  005DBA  ECFF  F00D         	call	_putsUSART	;wreg free
 12470                           
 12471                           ;main.c: 679: }
 12472  005DBE  EFB6  F035         	goto	l14099
 12473  005DC2                     l13649:
 12474                           
 12475                           ;main.c: 680: else {
 12476                           ;main.c: 681: putsUSART((char *) "+OK - no events\r\n");
 12477  005DC2  0E7A               	movlw	high STR_40
 12478  005DC4  0100               	movlb	0	; () banked
 12479  005DC6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12480  005DC8  0EF8               	movlw	low STR_40
 12481  005DCA  6F60               	movwf	?_putsUSART& (0+255),b
 12482  005DCC  ECFF  F00D         	call	_putsUSART	;wreg free
 12483  005DD0  EFB6  F035         	goto	l14099
 12484  005DD4                     l13651:
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12488  005DD4  0E01               	movlw	high _cmdbuf
 12489  005DD6  0100               	movlb	0	; () banked
 12490  005DD8  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12491  005DDA  0E24               	movlw	low _cmdbuf
 12492  005DDC  6F6B               	movwf	?_stristr& (0+255),b
 12493  005DDE  0E7C               	movlw	high STR_41
 12494  005DE0  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12495  005DE2  0ECB               	movlw	low STR_41
 12496  005DE4  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12497  005DE6  EC61  F010         	call	_stristr	;wreg free
 12498  005DEA  0E24               	movlw	low _cmdbuf
 12499  005DEC  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12500  005DEE  0E01               	movlw	high _cmdbuf
 12501  005DF0  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12502  005DF2  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12503  005DF4  E102               	bnz	u18175
 12504  005DF6  516B               	movf	?_stristr& (0+255),w,b
 12505  005DF8  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12506  005DFA                     u18175:
 12507  005DFA  E10B               	bnz	l13657
 12508                           
 12509                           ; BSR set to: 0
 12510                           ;main.c: 686: printStatistics();
 12511  005DFC  EC91  F01F         	call	_printStatistics	;wreg free
 12512                           
 12513                           ;main.c: 687: putsUSART((char *) "+OK\r\n");
 12514  005E00  0E7C               	movlw	high STR_9
 12515  005E02  0100               	movlb	0	; () banked
 12516  005E04  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12517  005E06  0E80               	movlw	low STR_9
 12518  005E08  6F60               	movwf	?_putsUSART& (0+255),b
 12519  005E0A  ECFF  F00D         	call	_putsUSART	;wreg free
 12520                           
 12521                           ;main.c: 688: }
 12522  005E0E  EFB6  F035         	goto	l14099
 12523  005E12                     l13657:
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;main.c: 690: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12527  005E12  0E01               	movlw	high _cmdbuf
 12528  005E14  0100               	movlb	0	; () banked
 12529  005E16  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12530  005E18  0E24               	movlw	low _cmdbuf
 12531  005E1A  6F6B               	movwf	?_stristr& (0+255),b
 12532  005E1C  0E7C               	movlw	high STR_43
 12533  005E1E  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12534  005E20  0ED9               	movlw	low STR_43
 12535  005E22  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12536  005E24  EC61  F010         	call	_stristr	;wreg free
 12537  005E28  0E24               	movlw	low _cmdbuf
 12538  005E2A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12539  005E2C  0E01               	movlw	high _cmdbuf
 12540  005E2E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12541  005E30  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12542  005E32  E102               	bnz	u18185
 12543  005E34  516B               	movf	?_stristr& (0+255),w,b
 12544  005E36  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12545  005E38                     u18185:
 12546  005E38  E10B               	bnz	l13663
 12547                           
 12548                           ; BSR set to: 0
 12549                           ;main.c: 691: printErrors();
 12550  005E3A  EC5E  F025         	call	_printErrors	;wreg free
 12551                           
 12552                           ;main.c: 692: putsUSART((char *) "+OK\r\n");
 12553  005E3E  0E7C               	movlw	high STR_9
 12554  005E40  0100               	movlb	0	; () banked
 12555  005E42  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12556  005E44  0E80               	movlw	low STR_9
 12557  005E46  6F60               	movwf	?_putsUSART& (0+255),b
 12558  005E48  ECFF  F00D         	call	_putsUSART	;wreg free
 12559                           
 12560                           ;main.c: 693: }
 12561  005E4C  EFB6  F035         	goto	l14099
 12562  005E50                     l13663:
 12563                           
 12564                           ; BSR set to: 0
 12565                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12566  005E50  0E01               	movlw	high _cmdbuf
 12567  005E52  0100               	movlb	0	; () banked
 12568  005E54  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12569  005E56  0E24               	movlw	low _cmdbuf
 12570  005E58  6F6B               	movwf	?_stristr& (0+255),b
 12571  005E5A  0E7C               	movlw	high STR_45
 12572  005E5C  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12573  005E5E  0EC6               	movlw	low STR_45
 12574  005E60  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12575  005E62  EC61  F010         	call	_stristr	;wreg free
 12576  005E66  0E24               	movlw	low _cmdbuf
 12577  005E68  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12578  005E6A  0E01               	movlw	high _cmdbuf
 12579  005E6C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12580  005E6E  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12581  005E70  E102               	bnz	u18195
 12582  005E72  516B               	movf	?_stristr& (0+255),w,b
 12583  005E74  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12584  005E76                     u18195:
 12585  005E76  E10B               	bnz	l13667
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;main.c: 696: printHelp();
 12589  005E78  EC5C  F020         	call	_printHelp	;wreg free
 12590                           
 12591                           ;main.c: 697: putsUSART((char *) "+OK\r\n");
 12592  005E7C  0E7C               	movlw	high STR_9
 12593  005E7E  0100               	movlb	0	; () banked
 12594  005E80  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12595  005E82  0E80               	movlw	low STR_9
 12596  005E84  6F60               	movwf	?_putsUSART& (0+255),b
 12597  005E86  ECFF  F00D         	call	_putsUSART	;wreg free
 12598                           
 12599                           ;main.c: 698: }
 12600  005E8A  EFB6  F035         	goto	l14099
 12601  005E8E                     l13667:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;main.c: 700: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12605  005E8E  0E01               	movlw	high _cmdbuf
 12606  005E90  0100               	movlb	0	; () banked
 12607  005E92  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12608  005E94  0E24               	movlw	low _cmdbuf
 12609  005E96  6F6B               	movwf	?_stristr& (0+255),b
 12610  005E98  0E7C               	movlw	high STR_47
 12611  005E9A  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12612  005E9C  0EA3               	movlw	low STR_47
 12613  005E9E  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12614  005EA0  EC61  F010         	call	_stristr	;wreg free
 12615  005EA4  0E24               	movlw	low _cmdbuf
 12616  005EA6  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12617  005EA8  0E01               	movlw	high _cmdbuf
 12618  005EAA  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12619  005EAC  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12620  005EAE  E102               	bnz	u18205
 12621  005EB0  516B               	movf	?_stristr& (0+255),w,b
 12622  005EB2  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12623  005EB4                     u18205:
 12624  005EB4  E10B               	bnz	l13673
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;main.c: 701: findNodes();
 12628  005EB6  ECB2  F018         	call	_findNodes	;wreg free
 12629                           
 12630                           ;main.c: 702: putsUSART((char *) "+OK\r\n");
 12631  005EBA  0E7C               	movlw	high STR_9
 12632  005EBC  0100               	movlb	0	; () banked
 12633  005EBE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12634  005EC0  0E80               	movlw	low STR_9
 12635  005EC2  6F60               	movwf	?_putsUSART& (0+255),b
 12636  005EC4  ECFF  F00D         	call	_putsUSART	;wreg free
 12637                           
 12638                           ;main.c: 703: }
 12639  005EC8  EFB6  F035         	goto	l14099
 12640  005ECC                     l13673:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;main.c: 706: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12644  005ECC  0E01               	movlw	high _cmdbuf
 12645  005ECE  0100               	movlb	0	; () banked
 12646  005ED0  6F6C               	movwf	(?_stristr+1)& (0+255),b
 12647  005ED2  0E24               	movlw	low _cmdbuf
 12648  005ED4  6F6B               	movwf	?_stristr& (0+255),b
 12649  005ED6  0E7C               	movlw	high STR_49
 12650  005ED8  6F6E               	movwf	(?_stristr+3)& (0+255),b
 12651  005EDA  0EA8               	movlw	low STR_49
 12652  005EDC  6F6D               	movwf	(?_stristr+2)& (0+255),b
 12653  005EDE  EC61  F010         	call	_stristr	;wreg free
 12654  005EE2  0E24               	movlw	low _cmdbuf
 12655  005EE4  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12656  005EE6  0E01               	movlw	high _cmdbuf
 12657  005EE8  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12658  005EEA  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 12659  005EEC  E102               	bnz	u18215
 12660  005EEE  516B               	movf	?_stristr& (0+255),w,b
 12661  005EF0  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12662  005EF2                     u18215:
 12663  005EF2  E001 D1B4          	bnz	l13803
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;main.c: 708: uint8_t i;
 12667                           ;main.c: 709: uint8_t nodeid;
 12668                           ;main.c: 710: uint8_t page = 0;
 12669  005EF6  0102               	movlb	2	; () banked
 12670  005EF8  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12671                           
 12672                           ; BSR set to: 2
 12673                           ;main.c: 711: uint8_t reg;
 12674                           ;main.c: 712: uint8_t value;
 12675                           ;main.c: 713: uint8_t count = 1;
 12676  005EFA  0E01               	movlw	1
 12677  005EFC  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12678                           
 12679                           ; BSR set to: 2
 12680                           ;main.c: 715: strcpy(cmdbuf, cmdbuf + 5);
 12681  005EFE  ECC5  F035         	call	PL2	;call to abstracted procedure
 12682  005F02  ECB1  F00B         	call	_strcpy	;wreg free
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;main.c: 716: char *p = strtok(cmdbuf, " ");
 12686  005F06  0E01               	movlw	high _cmdbuf
 12687  005F08  EC1E  F036         	call	PL32	;call to abstracted procedure
 12688  005F0C  EC63  F011         	call	_strtok	;wreg free
 12689  005F10  C06A  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12690  005F14  C06B  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;main.c: 717: if ((0) != p) {
 12694  005F18  0102               	movlb	2	; () banked
 12695  005F1A  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12696  005F1C  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12697  005F1E  E00A               	bz	l13687
 12698                           
 12699                           ; BSR set to: 2
 12700                           ;main.c: 718: nodeid = atoi(p);
 12701  005F20  C2B2  F064         	movff	doModeVerbose@p_1117,?_atoi
 12702  005F24  C2B3  F065         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12703  005F28  ECAA  F019         	call	_atoi	;wreg free
 12704  005F2C  5164               	movf	?_atoi& (0+255),w,b
 12705  005F2E  0102               	movlb	2	; () banked
 12706  005F30  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12707                           
 12708                           ;main.c: 719: }
 12709  005F32  D009               	goto	l13691
 12710  005F34                     l13687:
 12711                           
 12712                           ; BSR set to: 2
 12713                           ;main.c: 720: else {
 12714                           ;main.c: 721: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12715  005F34  0E79               	movlw	high STR_51
 12716  005F36  0100               	movlb	0	; () banked
 12717  005F38  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12718  005F3A  0E31               	movlw	low STR_51
 12719  005F3C  6F60               	movwf	?_putsUSART& (0+255),b
 12720  005F3E  ECFF  F00D         	call	_putsUSART	;wreg free
 12721  005F42  EFC4  F035         	goto	l540
 12722  005F46                     l13691:
 12723                           
 12724                           ; BSR set to: 2
 12725                           ;main.c: 723: }
 12726                           ;main.c: 725: if ((0) != (p = strtok((0), " "))) {
 12727  005F46  EC0C  F036         	call	PL26	;call to abstracted procedure
 12728  005F4A  EC63  F011         	call	_strtok	;wreg free
 12729  005F4E  C06A  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12730  005F52  C06B  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12731  005F56  0102               	movlb	2	; () banked
 12732  005F58  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12733  005F5A  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12734  005F5C  E034               	bz	l13699
 12735                           
 12736                           ; BSR set to: 2
 12737                           ;main.c: 727: char *preg;
 12738                           ;main.c: 728: if (preg = strchr(p, ':')) {
 12739  005F5E  C2B2  F060         	movff	doModeVerbose@p_1117,?_strchr
 12740  005F62  C2B3  F061         	movff	doModeVerbose@p_1117+1,?_strchr+1
 12741  005F66  0100               	movlb	0	; () banked
 12742  005F68  6B63               	clrf	(?_strchr+3)& (0+255),b
 12743  005F6A  0E3A               	movlw	58
 12744  005F6C  6F62               	movwf	(?_strchr+2)& (0+255),b
 12745  005F6E  ECE6  F00E         	call	_strchr	;wreg free
 12746  005F72  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12747  005F76  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12748  005F7A  0102               	movlb	2	; () banked
 12749  005F7C  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12750  005F7E  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12751  005F80  E018               	bz	l13697
 12752                           
 12753                           ; BSR set to: 2
 12754                           ;main.c: 729: page = atoi(p);
 12755  005F82  C2B2  F064         	movff	doModeVerbose@p_1117,?_atoi
 12756  005F86  C2B3  F065         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12757  005F8A  ECAA  F019         	call	_atoi	;wreg free
 12758  005F8E  5164               	movf	?_atoi& (0+255),w,b
 12759  005F90  0102               	movlb	2	; () banked
 12760  005F92  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12761                           
 12762                           ;main.c: 730: reg = atoi(preg + 1);
 12763  005F94  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12764  005F96  0100               	movlb	0	; () banked
 12765  005F98  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12766  005F9A  0E00               	movlw	0
 12767  005F9C  0102               	movlb	2	; () banked
 12768  005F9E  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12769  005FA0  0100               	movlb	0	; () banked
 12770  005FA2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12771  005FA4  C0C8  F064         	movff	??_doModeVerbose,?_atoi
 12772  005FA8  C0C9  F065         	movff	??_doModeVerbose+1,?_atoi+1
 12773  005FAC  ECAA  F019         	call	_atoi	;wreg free
 12774  005FB0  D006               	goto	L6
 12775  005FB2                     l13697:
 12776                           
 12777                           ; BSR set to: 2
 12778                           ;main.c: 732: else {
 12779                           ;main.c: 733: reg = atoi(p);
 12780  005FB2  C2B2  F064         	movff	doModeVerbose@p_1117,?_atoi
 12781  005FB6  C2B3  F065         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12782  005FBA  ECAA  F019         	call	_atoi	;wreg free
 12783  005FBE                     L6:
 12784  005FBE  5164               	movf	?_atoi& (0+255),w,b
 12785  005FC0  0102               	movlb	2	; () banked
 12786  005FC2  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12787  005FC4  D009               	goto	l13703
 12788  005FC6                     l13699:
 12789                           
 12790                           ; BSR set to: 2
 12791                           ;main.c: 738: else {
 12792                           ;main.c: 739: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12793  005FC6  0E77               	movlw	high STR_53
 12794  005FC8  0100               	movlb	0	; () banked
 12795  005FCA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12796  005FCC  0EAC               	movlw	low STR_53
 12797  005FCE  6F60               	movwf	?_putsUSART& (0+255),b
 12798  005FD0  ECFF  F00D         	call	_putsUSART	;wreg free
 12799  005FD4  EFC4  F035         	goto	l540
 12800  005FD8                     l13703:
 12801                           
 12802                           ; BSR set to: 2
 12803                           ;main.c: 741: }
 12804                           ;main.c: 744: if ((0) != (p = strtok((0), " "))) {
 12805  005FD8  EC0C  F036         	call	PL26	;call to abstracted procedure
 12806  005FDC  EC63  F011         	call	_strtok	;wreg free
 12807  005FE0  C06A  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12808  005FE4  C06B  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12809  005FE8  0102               	movlb	2	; () banked
 12810  005FEA  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12811  005FEC  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12812  005FEE  E00D               	bz	l545
 12813                           
 12814                           ; BSR set to: 2
 12815                           ;main.c: 745: count = atoi(p);
 12816  005FF0  C2B2  F064         	movff	doModeVerbose@p_1117,?_atoi
 12817  005FF4  C2B3  F065         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12818  005FF8  ECAA  F019         	call	_atoi	;wreg free
 12819  005FFC  5164               	movf	?_atoi& (0+255),w,b
 12820  005FFE  0102               	movlb	2	; () banked
 12821  006000  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12822                           
 12823                           ; BSR set to: 2
 12824                           ;main.c: 746: if (0 == count) count = 1;
 12825  006002  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12826  006004  D002               	goto	l545
 12827                           
 12828                           ; BSR set to: 2
 12829  006006  0E01               	movlw	1
 12830  006008  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12831  00600A                     l545:
 12832                           
 12833                           ; BSR set to: 2
 12834                           ;main.c: 747: }
 12835                           ;main.c: 749: BOOL rv = 1;
 12836  00600A  0E01               	movlw	1
 12837  00600C  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12838                           
 12839                           ; BSR set to: 2
 12840                           ;main.c: 750: for (i = 0; i < count; i++) {
 12841  00600E  6BB0               	clrf	doModeVerbose@i_1111& (0+255),b
 12842  006010  D10E               	goto	l13795
 12843  006012                     l13713:
 12844                           
 12845                           ; BSR set to: 2
 12846                           ;main.c: 752: if (readRegisterExtended(nodeid,
 12847                           ;main.c: 753: page,
 12848                           ;main.c: 754: (reg + i) & 0xff,
 12849                           ;main.c: 755: rwtimeout,
 12850                           ;main.c: 756: &value)) {
 12851  006012  0100               	movlb	0	; () banked
 12852  006014  C2AD  F0B4         	movff	doModeVerbose@page,?_readRegisterExtended
 12853  006018  6BB5               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12854  00601A  0102               	movlb	2	; () banked
 12855  00601C  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12856  00601E  25B0               	addwf	doModeVerbose@i_1111& (0+255),w,b
 12857  006020  0100               	movlb	0	; () banked
 12858  006022  6FB6               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12859  006024  C0E8  F0B7         	movff	_rwtimeout,?_readRegisterExtended+3
 12860  006028  6BB8               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12861  00602A  0E02               	movlw	high doModeVerbose@value
 12862  00602C  6FBA               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12863  00602E  0EB1               	movlw	low doModeVerbose@value
 12864  006030  6FB9               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12865  006032  0102               	movlb	2	; () banked
 12866  006034  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12867  006036  ECE4  F016         	call	_readRegisterExtended
 12868  00603A  0900               	iorlw	0
 12869  00603C  E101 D09D          	bz	l549
 12870                           
 12871                           ;main.c: 757: putsUSART((char *) "Value for reg ");
 12872  006040  0E7B               	movlw	high STR_55
 12873  006042  0100               	movlb	0	; () banked
 12874  006044  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12875  006046  0E5E               	movlw	low STR_55
 12876  006048  6F60               	movwf	?_putsUSART& (0+255),b
 12877  00604A  ECFF  F00D         	call	_putsUSART	;wreg free
 12878                           
 12879                           ;main.c: 758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12880  00604E  0100               	movlb	0	; () banked
 12881  006050  67E3               	tstfsz	_bHex& (0+255),b
 12882  006052  D005               	goto	l13721
 12883                           
 12884                           ; BSR set to: 0
 12885  006054  0E7C               	movlw	high STR_57
 12886  006056  0102               	movlb	2	; () banked
 12887  006058  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12888  00605A  0EEE               	movlw	low STR_57
 12889  00605C  D004               	goto	L7
 12890  00605E                     l13721:
 12891                           
 12892                           ; BSR set to: 0
 12893  00605E  0E7C               	movlw	high STR_56
 12894  006060  0102               	movlb	2	; () banked
 12895  006062  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12896  006064  0E65               	movlw	low STR_56
 12897  006066                     L7:
 12898  006066  6F94               	movwf	_doModeVerbose$1129& (0+255),b
 12899                           
 12900                           ; BSR set to: 2
 12901  006068  0E01               	movlw	high _wrkbuf
 12902  00606A  0100               	movlb	0	; () banked
 12903  00606C  6F76               	movwf	(?_sprintf+1)& (0+255),b
 12904  00606E  0E74               	movlw	low _wrkbuf
 12905  006070  6F75               	movwf	?_sprintf& (0+255),b
 12906  006072  C294  F077         	movff	_doModeVerbose$1129,?_sprintf+2
 12907  006076  C295  F078         	movff	_doModeVerbose$1129+1,?_sprintf+3
 12908  00607A  C2AD  F079         	movff	doModeVerbose@page,?_sprintf+4
 12909  00607E  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 12910  006080  ECA3  F028         	call	_sprintf	;wreg free
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;main.c: 759: putsUSART(wrkbuf);
 12914  006084  0E01               	movlw	high _wrkbuf
 12915  006086  0100               	movlb	0	; () banked
 12916  006088  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12917  00608A  0E74               	movlw	low _wrkbuf
 12918  00608C  6F60               	movwf	?_putsUSART& (0+255),b
 12919  00608E  ECFF  F00D         	call	_putsUSART	;wreg free
 12920  006092                     l554:
 12921  006092  A2AC               	btfss	4012,1,c	;volatile
 12922  006094  D7FE               	goto	l554
 12923                           
 12924                           ;main.c: 761: WriteUSART(':');
 12925  006096  0E3A               	movlw	58
 12926  006098  EC4B  F00B         	call	_WriteUSART
 12927                           
 12928                           ;main.c: 762: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12929  00609C  0100               	movlb	0	; () banked
 12930  00609E  67E3               	tstfsz	_bHex& (0+255),b
 12931  0060A0  D005               	goto	l13733
 12932                           
 12933                           ; BSR set to: 0
 12934  0060A2  0E7C               	movlw	high STR_57
 12935  0060A4  0102               	movlb	2	; () banked
 12936  0060A6  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12937  0060A8  0EEE               	movlw	low STR_57
 12938  0060AA  D004               	goto	L8
 12939  0060AC                     l13733:
 12940                           
 12941                           ; BSR set to: 0
 12942  0060AC  0E7C               	movlw	high STR_56
 12943  0060AE  0102               	movlb	2	; () banked
 12944  0060B0  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12945  0060B2  0E65               	movlw	low STR_56
 12946  0060B4                     L8:
 12947  0060B4  6F96               	movwf	_doModeVerbose$1141& (0+255),b
 12948                           
 12949                           ; BSR set to: 2
 12950  0060B6  0E01               	movlw	high _wrkbuf
 12951  0060B8  0100               	movlb	0	; () banked
 12952  0060BA  6F76               	movwf	(?_sprintf+1)& (0+255),b
 12953  0060BC  0E74               	movlw	low _wrkbuf
 12954  0060BE  6F75               	movwf	?_sprintf& (0+255),b
 12955  0060C0  C296  F077         	movff	_doModeVerbose$1141,?_sprintf+2
 12956  0060C4  C297  F078         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12957  0060C8  EC27  F036         	call	PL38	;call to abstracted procedure
 12958  0060CC  ECA3  F028         	call	_sprintf	;wreg free
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;main.c: 763: putsUSART(wrkbuf);
 12962  0060D0  0E01               	movlw	high _wrkbuf
 12963  0060D2  0100               	movlb	0	; () banked
 12964  0060D4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12965  0060D6  0E74               	movlw	low _wrkbuf
 12966  0060D8  6F60               	movwf	?_putsUSART& (0+255),b
 12967  0060DA  ECFF  F00D         	call	_putsUSART	;wreg free
 12968                           
 12969                           ;main.c: 764: putsUSART((char *) " = ");
 12970  0060DE  0E7B               	movlw	high (STR_243+4)
 12971  0060E0  0100               	movlb	0	; () banked
 12972  0060E2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 12973  0060E4  0EEA               	movlw	low (STR_243+4)
 12974  0060E6  6F60               	movwf	?_putsUSART& (0+255),b
 12975  0060E8  ECFF  F00D         	call	_putsUSART	;wreg free
 12976                           
 12977                           ;main.c: 765: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12978  0060EC  0100               	movlb	0	; () banked
 12979  0060EE  67E3               	tstfsz	_bHex& (0+255),b
 12980  0060F0  D005               	goto	l13745
 12981                           
 12982                           ; BSR set to: 0
 12983  0060F2  0E7C               	movlw	high STR_57
 12984  0060F4  0102               	movlb	2	; () banked
 12985  0060F6  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 12986  0060F8  0EEE               	movlw	low STR_57
 12987  0060FA  D004               	goto	L9
 12988  0060FC                     l13745:
 12989                           
 12990                           ; BSR set to: 0
 12991  0060FC  0E7C               	movlw	high STR_56
 12992  0060FE  0102               	movlb	2	; () banked
 12993  006100  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 12994  006102  0E65               	movlw	low STR_56
 12995  006104                     L9:
 12996  006104  6F98               	movwf	_doModeVerbose$1146& (0+255),b
 12997                           
 12998                           ; BSR set to: 2
 12999  006106  0E01               	movlw	high _wrkbuf
 13000  006108  0100               	movlb	0	; () banked
 13001  00610A  6F76               	movwf	(?_sprintf+1)& (0+255),b
 13002  00610C  0E74               	movlw	low _wrkbuf
 13003  00610E  6F75               	movwf	?_sprintf& (0+255),b
 13004  006110  C298  F077         	movff	_doModeVerbose$1146,?_sprintf+2
 13005  006114  C299  F078         	movff	_doModeVerbose$1146+1,?_sprintf+3
 13006  006118  C2B1  F079         	movff	doModeVerbose@value,?_sprintf+4
 13007  00611C  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 13008  00611E  ECA3  F028         	call	_sprintf	;wreg free
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;main.c: 766: putsUSART(wrkbuf);
 13012  006122  0E01               	movlw	high _wrkbuf
 13013  006124  0100               	movlb	0	; () banked
 13014  006126  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13015  006128  0E74               	movlw	low _wrkbuf
 13016  00612A  6F60               	movwf	?_putsUSART& (0+255),b
 13017  00612C  ECFF  F00D         	call	_putsUSART	;wreg free
 13018  006130                     l565:
 13019  006130  A2AC               	btfss	4012,1,c	;volatile
 13020  006132  D7FE               	goto	l565
 13021                           
 13022                           ;main.c: 768: WriteUSART(' ');
 13023  006134  0E20               	movlw	32
 13024  006136  EC4B  F00B         	call	_WriteUSART
 13025  00613A                     l568:
 13026  00613A  A2AC               	btfss	4012,1,c	;volatile
 13027  00613C  D7FE               	goto	l568
 13028                           
 13029                           ;main.c: 770: if ((value > 32) && (value < 127)) {
 13030  00613E  0E20               	movlw	32
 13031  006140  0102               	movlb	2	; () banked
 13032  006142  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 13033  006144  D007               	goto	l13759
 13034                           
 13035                           ; BSR set to: 2
 13036  006146  0E7F               	movlw	127
 13037  006148  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 13038  00614A  D004               	goto	l13759
 13039                           
 13040                           ; BSR set to: 2
 13041                           ;main.c: 771: WriteUSART(value);
 13042  00614C  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13043  00614E  EC4B  F00B         	call	_WriteUSART
 13044                           
 13045                           ;main.c: 772: }
 13046  006152  D003               	goto	l573
 13047  006154                     l13759:
 13048                           
 13049                           ; BSR set to: 2
 13050                           ;main.c: 773: else {
 13051                           ;main.c: 774: WriteUSART('.');
 13052  006154  0E2E               	movlw	46
 13053  006156  EC4B  F00B         	call	_WriteUSART
 13054  00615A                     l573:
 13055  00615A  A2AC               	btfss	4012,1,c	;volatile
 13056  00615C  D7FE               	goto	l573
 13057                           
 13058                           ;main.c: 777: WriteUSART(' ');
 13059  00615E  0E20               	movlw	32
 13060  006160  EC4B  F00B         	call	_WriteUSART
 13061                           
 13062                           ;main.c: 778: printBinary(value);
 13063  006164  0102               	movlb	2	; () banked
 13064  006166  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13065  006168  ECB3  F00D         	call	_printBinary
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;main.c: 779: putsUSART((char *) "\r\n");
 13069  00616C  0E71               	movlw	high (STR_197+50)
 13070  00616E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13071  006170  0EC0               	movlw	low (STR_197+50)
 13072  006172  6F60               	movwf	?_putsUSART& (0+255),b
 13073  006174  ECFF  F00D         	call	_putsUSART	;wreg free
 13074                           
 13075                           ;main.c: 780: }
 13076  006178  D058               	goto	l13793
 13077  00617A                     l549:
 13078                           
 13079                           ;main.c: 781: else {
 13080                           ;main.c: 782: rv = 0;
 13081  00617A  0102               	movlb	2	; () banked
 13082  00617C  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 13083                           
 13084                           ; BSR set to: 2
 13085                           ;main.c: 783: putsUSART((char *) "-ERROR - Unable to read register ");
 13086  00617E  0E77               	movlw	high STR_64
 13087  006180  0100               	movlb	0	; () banked
 13088  006182  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13089  006184  0E06               	movlw	low STR_64
 13090  006186  6F60               	movwf	?_putsUSART& (0+255),b
 13091  006188  ECFF  F00D         	call	_putsUSART	;wreg free
 13092                           
 13093                           ;main.c: 784: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13094  00618C  0100               	movlb	0	; () banked
 13095  00618E  67E3               	tstfsz	_bHex& (0+255),b
 13096  006190  D005               	goto	l13773
 13097                           
 13098                           ; BSR set to: 0
 13099  006192  0E7C               	movlw	high STR_57
 13100  006194  0102               	movlb	2	; () banked
 13101  006196  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 13102  006198  0EEE               	movlw	low STR_57
 13103  00619A  D004               	goto	L10
 13104  00619C                     l13773:
 13105                           
 13106                           ; BSR set to: 0
 13107  00619C  0E7C               	movlw	high STR_56
 13108  00619E  0102               	movlb	2	; () banked
 13109  0061A0  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 13110  0061A2  0E65               	movlw	low STR_56
 13111  0061A4                     L10:
 13112  0061A4  6F9A               	movwf	_doModeVerbose$1152& (0+255),b
 13113                           
 13114                           ; BSR set to: 2
 13115  0061A6  0E01               	movlw	high _wrkbuf
 13116  0061A8  0100               	movlb	0	; () banked
 13117  0061AA  6F76               	movwf	(?_sprintf+1)& (0+255),b
 13118  0061AC  0E74               	movlw	low _wrkbuf
 13119  0061AE  6F75               	movwf	?_sprintf& (0+255),b
 13120  0061B0  C29A  F077         	movff	_doModeVerbose$1152,?_sprintf+2
 13121  0061B4  C29B  F078         	movff	_doModeVerbose$1152+1,?_sprintf+3
 13122  0061B8  C2AD  F079         	movff	doModeVerbose@page,?_sprintf+4
 13123  0061BC  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 13124  0061BE  ECA3  F028         	call	_sprintf	;wreg free
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;main.c: 785: putsUSART(wrkbuf);
 13128  0061C2  0E01               	movlw	high _wrkbuf
 13129  0061C4  0100               	movlb	0	; () banked
 13130  0061C6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13131  0061C8  0E74               	movlw	low _wrkbuf
 13132  0061CA  6F60               	movwf	?_putsUSART& (0+255),b
 13133  0061CC  ECFF  F00D         	call	_putsUSART	;wreg free
 13134  0061D0                     l581:
 13135  0061D0  A2AC               	btfss	4012,1,c	;volatile
 13136  0061D2  D7FE               	goto	l581
 13137                           
 13138                           ;main.c: 787: WriteUSART(':');
 13139  0061D4  0E3A               	movlw	58
 13140  0061D6  EC4B  F00B         	call	_WriteUSART
 13141                           
 13142                           ;main.c: 788: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13143  0061DA  0100               	movlb	0	; () banked
 13144  0061DC  67E3               	tstfsz	_bHex& (0+255),b
 13145  0061DE  D005               	goto	l13785
 13146                           
 13147                           ; BSR set to: 0
 13148  0061E0  0E7C               	movlw	high STR_57
 13149  0061E2  0102               	movlb	2	; () banked
 13150  0061E4  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13151  0061E6  0EEE               	movlw	low STR_57
 13152  0061E8  D004               	goto	L11
 13153  0061EA                     l13785:
 13154                           
 13155                           ; BSR set to: 0
 13156  0061EA  0E7C               	movlw	high STR_56
 13157  0061EC  0102               	movlb	2	; () banked
 13158  0061EE  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13159  0061F0  0E65               	movlw	low STR_56
 13160  0061F2                     L11:
 13161  0061F2  6F9C               	movwf	_doModeVerbose$1156& (0+255),b
 13162                           
 13163                           ; BSR set to: 2
 13164  0061F4  0E01               	movlw	high _wrkbuf
 13165  0061F6  0100               	movlb	0	; () banked
 13166  0061F8  6F76               	movwf	(?_sprintf+1)& (0+255),b
 13167  0061FA  0E74               	movlw	low _wrkbuf
 13168  0061FC  6F75               	movwf	?_sprintf& (0+255),b
 13169  0061FE  C29C  F077         	movff	_doModeVerbose$1156,?_sprintf+2
 13170  006202  C29D  F078         	movff	_doModeVerbose$1156+1,?_sprintf+3
 13171  006206  EC27  F036         	call	PL38	;call to abstracted procedure
 13172  00620A  ECA3  F028         	call	_sprintf	;wreg free
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;main.c: 789: putsUSART(wrkbuf);
 13176  00620E  0E01               	movlw	high _wrkbuf
 13177  006210  0100               	movlb	0	; () banked
 13178  006212  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13179  006214  0E74               	movlw	low _wrkbuf
 13180  006216  6F60               	movwf	?_putsUSART& (0+255),b
 13181  006218  ECFF  F00D         	call	_putsUSART	;wreg free
 13182                           
 13183                           ;main.c: 790: putsUSART((char *) "\r\n");
 13184  00621C  0E71               	movlw	high (STR_197+50)
 13185  00621E  0100               	movlb	0	; () banked
 13186  006220  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13187  006222  0EC0               	movlw	low (STR_197+50)
 13188  006224  6F60               	movwf	?_putsUSART& (0+255),b
 13189  006226  ECFF  F00D         	call	_putsUSART	;wreg free
 13190  00622A                     l13793:
 13191  00622A  0102               	movlb	2	; () banked
 13192  00622C  2BB0               	incf	doModeVerbose@i_1111& (0+255),f,b
 13193  00622E                     l13795:
 13194                           
 13195                           ; BSR set to: 2
 13196  00622E  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13197  006230  5DB0               	subwf	doModeVerbose@i_1111& (0+255),w,b
 13198  006232  E201 D6EE          	bnc	l13713
 13199                           
 13200                           ; BSR set to: 2
 13201                           ;main.c: 791: }
 13202                           ;main.c: 792: }
 13203                           ;main.c: 794: if (rv) {
 13204  006236  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13205  006238  E009               	bz	l13801
 13206                           
 13207                           ; BSR set to: 2
 13208                           ;main.c: 795: putsUSART((char *) "+OK\r\n");
 13209  00623A  0E7C               	movlw	high STR_9
 13210  00623C  0100               	movlb	0	; () banked
 13211  00623E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13212  006240  0E80               	movlw	low STR_9
 13213  006242  6F60               	movwf	?_putsUSART& (0+255),b
 13214  006244  ECFF  F00D         	call	_putsUSART	;wreg free
 13215                           
 13216                           ;main.c: 796: }
 13217  006248  EFB6  F035         	goto	l14099
 13218  00624C                     l13801:
 13219                           
 13220                           ; BSR set to: 2
 13221                           ;main.c: 797: else {
 13222                           ;main.c: 798: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13223  00624C  0E71               	movlw	high STR_71
 13224  00624E  0100               	movlb	0	; () banked
 13225  006250  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13226  006252  0E58               	movlw	low STR_71
 13227  006254  6F60               	movwf	?_putsUSART& (0+255),b
 13228  006256  ECFF  F00D         	call	_putsUSART	;wreg free
 13229  00625A  EFB6  F035         	goto	l14099
 13230  00625E                     l13803:
 13231                           
 13232                           ; BSR set to: 0
 13233                           ;main.c: 804: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13234  00625E  0E01               	movlw	high _cmdbuf
 13235  006260  0100               	movlb	0	; () banked
 13236  006262  6F6C               	movwf	(?_stristr+1)& (0+255),b
 13237  006264  0E24               	movlw	low _cmdbuf
 13238  006266  6F6B               	movwf	?_stristr& (0+255),b
 13239  006268  0E7C               	movlw	high STR_72
 13240  00626A  6F6E               	movwf	(?_stristr+3)& (0+255),b
 13241  00626C  0EAD               	movlw	low STR_72
 13242  00626E  6F6D               	movwf	(?_stristr+2)& (0+255),b
 13243  006270  EC61  F010         	call	_stristr	;wreg free
 13244  006274  0E24               	movlw	low _cmdbuf
 13245  006276  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13246  006278  0E01               	movlw	high _cmdbuf
 13247  00627A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13248  00627C  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 13249  00627E  E102               	bnz	u18425
 13250  006280  516B               	movf	?_stristr& (0+255),w,b
 13251  006282  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13252  006284                     u18425:
 13253  006284  E001 D0B0          	bnz	l13845
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;main.c: 806: uint8_t nodeid;
 13257                           ;main.c: 807: uint8_t page = 0;
 13258  006288  0102               	movlb	2	; () banked
 13259  00628A  6BA1               	clrf	doModeVerbose@page_1162& (0+255),b
 13260                           
 13261                           ; BSR set to: 2
 13262                           ;main.c: 808: uint8_t reg;
 13263                           ;main.c: 809: uint8_t value;
 13264                           ;main.c: 811: strcpy(cmdbuf, cmdbuf + 5);
 13265  00628C  ECC5  F035         	call	PL2	;call to abstracted procedure
 13266  006290  ECB1  F00B         	call	_strcpy	;wreg free
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;main.c: 812: char *p = strtok(cmdbuf, " ");
 13270  006294  0E01               	movlw	high _cmdbuf
 13271  006296  EC1E  F036         	call	PL32	;call to abstracted procedure
 13272  00629A  EC63  F011         	call	_strtok	;wreg free
 13273  00629E  C06A  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13274  0062A2  C06B  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;main.c: 813: if ((0) != p) {
 13278  0062A6  0102               	movlb	2	; () banked
 13279  0062A8  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13280  0062AA  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13281  0062AC  E00A               	bz	l13815
 13282                           
 13283                           ; BSR set to: 2
 13284                           ;main.c: 814: nodeid = atoi(p);
 13285  0062AE  C2B4  F064         	movff	doModeVerbose@p_1165,?_atoi
 13286  0062B2  C2B5  F065         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13287  0062B6  ECAA  F019         	call	_atoi	;wreg free
 13288  0062BA  5164               	movf	?_atoi& (0+255),w,b
 13289  0062BC  0102               	movlb	2	; () banked
 13290  0062BE  6F8D               	movwf	doModeVerbose@nodeid_1161& (0+255),b
 13291                           
 13292                           ;main.c: 815: }
 13293  0062C0  D009               	goto	l13819
 13294  0062C2                     l13815:
 13295                           
 13296                           ; BSR set to: 2
 13297                           ;main.c: 816: else {
 13298                           ;main.c: 817: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13299  0062C2  0E79               	movlw	high STR_51
 13300  0062C4  0100               	movlb	0	; () banked
 13301  0062C6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13302  0062C8  0E31               	movlw	low STR_51
 13303  0062CA  6F60               	movwf	?_putsUSART& (0+255),b
 13304  0062CC  ECFF  F00D         	call	_putsUSART	;wreg free
 13305  0062D0  EFC4  F035         	goto	l540
 13306  0062D4                     l13819:
 13307                           
 13308                           ; BSR set to: 2
 13309                           ;main.c: 819: }
 13310                           ;main.c: 821: if ( (0) != ( p = strtok((0), " ") ) ) {
 13311  0062D4  EC0C  F036         	call	PL26	;call to abstracted procedure
 13312  0062D8  EC63  F011         	call	_strtok	;wreg free
 13313  0062DC  C06A  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13314  0062E0  C06B  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13315  0062E4  0102               	movlb	2	; () banked
 13316  0062E6  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13317  0062E8  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13318  0062EA  E034               	bz	l13827
 13319                           
 13320                           ; BSR set to: 2
 13321                           ;main.c: 823: char *preg;
 13322                           ;main.c: 824: if (preg = strchr(p, ':')) {
 13323  0062EC  C2B4  F060         	movff	doModeVerbose@p_1165,?_strchr
 13324  0062F0  C2B5  F061         	movff	doModeVerbose@p_1165+1,?_strchr+1
 13325  0062F4  0100               	movlb	0	; () banked
 13326  0062F6  6B63               	clrf	(?_strchr+3)& (0+255),b
 13327  0062F8  0E3A               	movlw	58
 13328  0062FA  6F62               	movwf	(?_strchr+2)& (0+255),b
 13329  0062FC  ECE6  F00E         	call	_strchr	;wreg free
 13330  006300  C060  F286         	movff	?_strchr,doModeVerbose@preg_1169
 13331  006304  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1169+1
 13332  006308  0102               	movlb	2	; () banked
 13333  00630A  5187               	movf	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13334  00630C  1186               	iorwf	doModeVerbose@preg_1169& (0+255),w,b
 13335  00630E  E018               	bz	l13825
 13336                           
 13337                           ; BSR set to: 2
 13338                           ;main.c: 825: page = atoi(p);
 13339  006310  C2B4  F064         	movff	doModeVerbose@p_1165,?_atoi
 13340  006314  C2B5  F065         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13341  006318  ECAA  F019         	call	_atoi	;wreg free
 13342  00631C  5164               	movf	?_atoi& (0+255),w,b
 13343  00631E  0102               	movlb	2	; () banked
 13344  006320  6FA1               	movwf	doModeVerbose@page_1162& (0+255),b
 13345                           
 13346                           ;main.c: 826: reg = atoi(preg + 1);
 13347  006322  2986               	incf	doModeVerbose@preg_1169& (0+255),w,b
 13348  006324  0100               	movlb	0	; () banked
 13349  006326  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13350  006328  0E00               	movlw	0
 13351  00632A  0102               	movlb	2	; () banked
 13352  00632C  2187               	addwfc	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13353  00632E  0100               	movlb	0	; () banked
 13354  006330  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13355  006332  C0C8  F064         	movff	??_doModeVerbose,?_atoi
 13356  006336  C0C9  F065         	movff	??_doModeVerbose+1,?_atoi+1
 13357  00633A  ECAA  F019         	call	_atoi	;wreg free
 13358  00633E  D006               	goto	L12
 13359  006340                     l13825:
 13360                           
 13361                           ; BSR set to: 2
 13362                           ;main.c: 828: else {
 13363                           ;main.c: 829: reg = atoi(p);
 13364  006340  C2B4  F064         	movff	doModeVerbose@p_1165,?_atoi
 13365  006344  C2B5  F065         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13366  006348  ECAA  F019         	call	_atoi	;wreg free
 13367  00634C                     L12:
 13368  00634C  5164               	movf	?_atoi& (0+255),w,b
 13369  00634E  0102               	movlb	2	; () banked
 13370  006350  6FA2               	movwf	doModeVerbose@reg_1163& (0+255),b
 13371  006352  D009               	goto	l13831
 13372  006354                     l13827:
 13373                           
 13374                           ; BSR set to: 2
 13375                           ;main.c: 833: else {
 13376                           ;main.c: 834: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13377  006354  0E77               	movlw	high STR_53
 13378  006356  0100               	movlb	0	; () banked
 13379  006358  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13380  00635A  0EAC               	movlw	low STR_53
 13381  00635C  6F60               	movwf	?_putsUSART& (0+255),b
 13382  00635E  ECFF  F00D         	call	_putsUSART	;wreg free
 13383  006362  EFC4  F035         	goto	l540
 13384  006366                     l13831:
 13385                           
 13386                           ; BSR set to: 2
 13387                           ;main.c: 836: }
 13388                           ;main.c: 839: if ((0) != (p = strtok((0), " "))) {
 13389  006366  EC0C  F036         	call	PL26	;call to abstracted procedure
 13390  00636A  EC63  F011         	call	_strtok	;wreg free
 13391  00636E  C06A  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13392  006372  C06B  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13393  006376  0102               	movlb	2	; () banked
 13394  006378  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13395  00637A  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13396  00637C  E00A               	bz	l13835
 13397                           
 13398                           ; BSR set to: 2
 13399                           ;main.c: 840: value = atoi(p);
 13400  00637E  C2B4  F064         	movff	doModeVerbose@p_1165,?_atoi
 13401  006382  C2B5  F065         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13402  006386  ECAA  F019         	call	_atoi	;wreg free
 13403  00638A  5164               	movf	?_atoi& (0+255),w,b
 13404  00638C  0102               	movlb	2	; () banked
 13405  00638E  6FAA               	movwf	doModeVerbose@value_1164& (0+255),b
 13406                           
 13407                           ;main.c: 841: }
 13408  006390  D008               	goto	l13839
 13409  006392                     l13835:
 13410                           
 13411                           ; BSR set to: 2
 13412                           ;main.c: 842: else {
 13413                           ;main.c: 843: putsUSART((char *) "-ERROR - Need a value\r\n");
 13414  006392  0E79               	movlw	high STR_78
 13415  006394  0100               	movlb	0	; () banked
 13416  006396  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13417  006398  0E61               	movlw	low STR_78
 13418  00639A  6F60               	movwf	?_putsUSART& (0+255),b
 13419  00639C  ECFF  F00D         	call	_putsUSART	;wreg free
 13420  0063A0  D3F3               	goto	l540
 13421  0063A2                     l13839:
 13422                           
 13423                           ; BSR set to: 2
 13424                           ;main.c: 845: }
 13425                           ;main.c: 847: if (writeRegisterExtended(nodeid,
 13426                           ;main.c: 848: page,
 13427                           ;main.c: 849: reg,
 13428                           ;main.c: 850: rwtimeout,
 13429                           ;main.c: 851: &value)) {
 13430  0063A2  0100               	movlb	0	; () banked
 13431  0063A4  C2A1  F0B4         	movff	doModeVerbose@page_1162,?_writeRegisterExtended
 13432  0063A8  6BB5               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13433  0063AA  C2A2  F0B6         	movff	doModeVerbose@reg_1163,?_writeRegisterExtended+2
 13434  0063AE  C0E8  F0B7         	movff	_rwtimeout,?_writeRegisterExtended+3
 13435  0063B2  6BB8               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13436  0063B4  0E02               	movlw	high doModeVerbose@value_1164
 13437  0063B6  6FBA               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13438  0063B8  0EAA               	movlw	low doModeVerbose@value_1164
 13439  0063BA  6FB9               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13440  0063BC  0102               	movlb	2	; () banked
 13441  0063BE  518D               	movf	doModeVerbose@nodeid_1161& (0+255),w,b
 13442  0063C0  EC3C  F018         	call	_writeRegisterExtended
 13443  0063C4  0900               	iorlw	0
 13444  0063C6  E008               	bz	l13843
 13445                           
 13446                           ;main.c: 852: putsUSART((char *) "+OK - Value written successfully\r\n");
 13447  0063C8  0E76               	movlw	high STR_79
 13448  0063CA  0100               	movlb	0	; () banked
 13449  0063CC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13450  0063CE  0EC1               	movlw	low STR_79
 13451  0063D0  6F60               	movwf	?_putsUSART& (0+255),b
 13452  0063D2  ECFF  F00D         	call	_putsUSART	;wreg free
 13453                           
 13454                           ;main.c: 853: }
 13455  0063D6  D3CA               	goto	l14099
 13456  0063D8                     l13843:
 13457                           
 13458                           ;main.c: 854: else {
 13459                           ;main.c: 855: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13460  0063D8  0E77               	movlw	high STR_80
 13461  0063DA  0100               	movlb	0	; () banked
 13462  0063DC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13463  0063DE  0E8B               	movlw	low STR_80
 13464  0063E0  6F60               	movwf	?_putsUSART& (0+255),b
 13465  0063E2  ECFF  F00D         	call	_putsUSART	;wreg free
 13466  0063E6  D3C2               	goto	l14099
 13467  0063E8                     l13845:
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;main.c: 861: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13471  0063E8  0E01               	movlw	high _cmdbuf
 13472  0063EA  0100               	movlb	0	; () banked
 13473  0063EC  6F6C               	movwf	(?_stristr+1)& (0+255),b
 13474  0063EE  0E24               	movlw	low _cmdbuf
 13475  0063F0  6F6B               	movwf	?_stristr& (0+255),b
 13476  0063F2  0E7C               	movlw	high STR_81
 13477  0063F4  6F6E               	movwf	(?_stristr+3)& (0+255),b
 13478  0063F6  0EBC               	movlw	low STR_81
 13479  0063F8  6F6D               	movwf	(?_stristr+2)& (0+255),b
 13480  0063FA  EC61  F010         	call	_stristr	;wreg free
 13481  0063FE  0E24               	movlw	low _cmdbuf
 13482  006400  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13483  006402  0E01               	movlw	high _cmdbuf
 13484  006404  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13485  006406  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 13486  006408  E102               	bnz	u18485
 13487  00640A  516B               	movf	?_stristr& (0+255),w,b
 13488  00640C  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13489  00640E                     u18485:
 13490  00640E  E151               	bnz	l13873
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;main.c: 862: uint8_t nodeid;
 13494                           ;main.c: 864: strcpy(cmdbuf, cmdbuf + 5);
 13495  006410  DBBC               	call	PL2	;call to abstracted procedure
 13496  006412  ECB1  F00B         	call	_strcpy	;wreg free
 13497                           
 13498                           ; BSR set to: 0
 13499                           ;main.c: 865: nodeid = atoi(cmdbuf);
 13500  006416  0E01               	movlw	high _cmdbuf
 13501  006418  0100               	movlb	0	; () banked
 13502  00641A  6F65               	movwf	(?_atoi+1)& (0+255),b
 13503  00641C  0E24               	movlw	low _cmdbuf
 13504  00641E  6F64               	movwf	?_atoi& (0+255),b
 13505  006420  ECAA  F019         	call	_atoi	;wreg free
 13506  006424  5164               	movf	?_atoi& (0+255),w,b
 13507  006426  0102               	movlb	2	; () banked
 13508  006428  6FAF               	movwf	doModeVerbose@nodeid_1176& (0+255),b
 13509                           
 13510                           ; BSR set to: 2
 13511                           ;main.c: 867: putsUSART((char *) "Info for node id = ");
 13512  00642A  0E7A               	movlw	high STR_82
 13513  00642C  0100               	movlb	0	; () banked
 13514  00642E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13515  006430  0EAB               	movlw	low STR_82
 13516  006432  6F60               	movwf	?_putsUSART& (0+255),b
 13517  006434  ECFF  F00D         	call	_putsUSART	;wreg free
 13518                           
 13519                           ;main.c: 868: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13520  006438  0100               	movlb	0	; () banked
 13521  00643A  67E3               	tstfsz	_bHex& (0+255),b
 13522  00643C  D005               	goto	l13857
 13523                           
 13524                           ; BSR set to: 0
 13525  00643E  0E7C               	movlw	high STR_57
 13526  006440  0102               	movlb	2	; () banked
 13527  006442  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13528  006444  0EEE               	movlw	low STR_57
 13529  006446  D004               	goto	L13
 13530  006448                     l13857:
 13531                           
 13532                           ; BSR set to: 0
 13533  006448  0E7C               	movlw	high STR_56
 13534  00644A  0102               	movlb	2	; () banked
 13535  00644C  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13536  00644E  0E65               	movlw	low STR_56
 13537  006450                     L13:
 13538  006450  6F9E               	movwf	_doModeVerbose$1181& (0+255),b
 13539                           
 13540                           ; BSR set to: 2
 13541  006452  0E01               	movlw	high _wrkbuf
 13542  006454  0100               	movlb	0	; () banked
 13543  006456  6F76               	movwf	(?_sprintf+1)& (0+255),b
 13544  006458  0E74               	movlw	low _wrkbuf
 13545  00645A  6F75               	movwf	?_sprintf& (0+255),b
 13546  00645C  C29E  F077         	movff	_doModeVerbose$1181,?_sprintf+2
 13547  006460  C29F  F078         	movff	_doModeVerbose$1181+1,?_sprintf+3
 13548  006464  C2AF  F079         	movff	doModeVerbose@nodeid_1176,?_sprintf+4
 13549  006468  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 13550  00646A  ECA3  F028         	call	_sprintf	;wreg free
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;main.c: 869: putsUSART(wrkbuf);
 13554  00646E  0E01               	movlw	high _wrkbuf
 13555  006470  0100               	movlb	0	; () banked
 13556  006472  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13557  006474  0E74               	movlw	low _wrkbuf
 13558  006476  6F60               	movwf	?_putsUSART& (0+255),b
 13559  006478  ECFF  F00D         	call	_putsUSART	;wreg free
 13560                           
 13561                           ;main.c: 870: putsUSART((char *) "\r\n");
 13562  00647C  0E71               	movlw	high (STR_197+50)
 13563  00647E  0100               	movlb	0	; () banked
 13564  006480  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13565  006482  0EC0               	movlw	low (STR_197+50)
 13566  006484  6F60               	movwf	?_putsUSART& (0+255),b
 13567  006486  ECFF  F00D         	call	_putsUSART	;wreg free
 13568                           
 13569                           ;main.c: 871: printNodeFirmwareVersion(nodeid);
 13570  00648A  0102               	movlb	2	; () banked
 13571  00648C  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13572  00648E  ECA7  F015         	call	_printNodeFirmwareVersion
 13573                           
 13574                           ;main.c: 872: printGUID(nodeid);
 13575  006492  0102               	movlb	2	; () banked
 13576  006494  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13577  006496  EC29  F019         	call	_printGUID
 13578                           
 13579                           ;main.c: 873: printMDF(nodeid);
 13580  00649A  0102               	movlb	2	; () banked
 13581  00649C  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13582  00649E  ECAC  F011         	call	_printMDF
 13583                           
 13584                           ;main.c: 874: putsUSART((char *) "+OK\r\n");
 13585  0064A2  0E7C               	movlw	high STR_9
 13586  0064A4  0100               	movlb	0	; () banked
 13587  0064A6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13588  0064A8  0E80               	movlw	low STR_9
 13589  0064AA  6F60               	movwf	?_putsUSART& (0+255),b
 13590  0064AC  ECFF  F00D         	call	_putsUSART	;wreg free
 13591                           
 13592                           ;main.c: 875: }
 13593  0064B0  D35D               	goto	l14099
 13594  0064B2                     l13873:
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;main.c: 879: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13598  0064B2  0E01               	movlw	high _cmdbuf
 13599  0064B4  0100               	movlb	0	; () banked
 13600  0064B6  6F6C               	movwf	(?_stristr+1)& (0+255),b
 13601  0064B8  0E24               	movlw	low _cmdbuf
 13602  0064BA  6F6B               	movwf	?_stristr& (0+255),b
 13603  0064BC  0E7C               	movlw	high STR_87
 13604  0064BE  6F6E               	movwf	(?_stristr+3)& (0+255),b
 13605  0064C0  0E57               	movlw	low STR_87
 13606  0064C2  6F6D               	movwf	(?_stristr+2)& (0+255),b
 13607  0064C4  EC61  F010         	call	_stristr	;wreg free
 13608  0064C8  0E24               	movlw	low _cmdbuf
 13609  0064CA  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13610  0064CC  0E01               	movlw	high _cmdbuf
 13611  0064CE  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13612  0064D0  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 13613  0064D2  E102               	bnz	u18505
 13614  0064D4  516B               	movf	?_stristr& (0+255),w,b
 13615  0064D6  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13616  0064D8                     u18505:
 13617  0064D8  E001 D0D5          	bnz	l13941
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;main.c: 881: uint8_t filterno;
 13621                           ;main.c: 882: uint8_t filter_priority;
 13622                           ;main.c: 883: uint16_t filter_class;
 13623                           ;main.c: 884: uint8_t filter_type;
 13624                           ;main.c: 885: uint8_t filter_nodeid;
 13625                           ;main.c: 887: strcpy(cmdbuf, cmdbuf + 8);
 13626  0064DC  0E01               	movlw	high _cmdbuf
 13627  0064DE  DB6A               	call	PL6	;call to abstracted procedure
 13628  0064E0  ECB1  F00B         	call	_strcpy	;wreg free
 13629                           
 13630                           ; BSR set to: 0
 13631                           ;main.c: 888: char *p = strtok(cmdbuf, ",");
 13632  0064E4  DBA1               	call	PL30	;call to abstracted procedure
 13633  0064E6  EC63  F011         	call	_strtok	;wreg free
 13634  0064EA  C06A  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13635  0064EE  C06B  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13636                           
 13637                           ; BSR set to: 0
 13638                           ;main.c: 889: if ((0) != p) {
 13639  0064F2  0102               	movlb	2	; () banked
 13640  0064F4  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13641  0064F6  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13642  0064F8  E014               	bz	l13889
 13643                           
 13644                           ; BSR set to: 2
 13645                           ;main.c: 890: filterno = atoi(p);
 13646  0064FA  C2B9  F064         	movff	doModeVerbose@p_1190,?_atoi
 13647  0064FE  C2BA  F065         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13648  006502  ECAA  F019         	call	_atoi	;wreg free
 13649  006506  5164               	movf	?_atoi& (0+255),w,b
 13650  006508  0102               	movlb	2	; () banked
 13651  00650A  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13652                           
 13653                           ; BSR set to: 2
 13654                           ;main.c: 891: if (filterno > 15) {
 13655  00650C  0E0F               	movlw	15
 13656  00650E  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13657  006510  D010               	goto	l13893
 13658                           
 13659                           ; BSR set to: 2
 13660                           ;main.c: 892: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13661  006512  0E6F               	movlw	high STR_89
 13662  006514  0100               	movlb	0	; () banked
 13663  006516  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13664  006518  0E18               	movlw	low STR_89
 13665  00651A  6F60               	movwf	?_putsUSART& (0+255),b
 13666  00651C  ECFF  F00D         	call	_putsUSART	;wreg free
 13667  006520  D333               	goto	l540
 13668  006522                     l13889:
 13669                           
 13670                           ; BSR set to: 2
 13671                           ;main.c: 896: else {
 13672                           ;main.c: 897: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13673  006522  0E74               	movlw	high STR_90
 13674  006524  0100               	movlb	0	; () banked
 13675  006526  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13676  006528  0EFB               	movlw	low STR_90
 13677  00652A  6F60               	movwf	?_putsUSART& (0+255),b
 13678  00652C  ECFF  F00D         	call	_putsUSART	;wreg free
 13679  006530  D32B               	goto	l540
 13680  006532                     l13893:
 13681                           
 13682                           ; BSR set to: 2
 13683                           ;main.c: 899: }
 13684                           ;main.c: 902: p = strtok((0), ",");
 13685  006532  0100               	movlb	0	; () banked
 13686  006534  DB38               	call	PL4	;call to abstracted procedure
 13687  006536  EC63  F011         	call	_strtok	;wreg free
 13688  00653A  C06A  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13689  00653E  C06B  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13690                           
 13691                           ; BSR set to: 0
 13692                           ;main.c: 903: if ((0) != p) {
 13693  006542  0102               	movlb	2	; () banked
 13694  006544  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13695  006546  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13696  006548  E00A               	bz	l13899
 13697                           
 13698                           ; BSR set to: 2
 13699                           ;main.c: 904: filter_priority = atoi(p);
 13700  00654A  C2B9  F064         	movff	doModeVerbose@p_1190,?_atoi
 13701  00654E  C2BA  F065         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13702  006552  ECAA  F019         	call	_atoi	;wreg free
 13703  006556  5164               	movf	?_atoi& (0+255),w,b
 13704  006558  0102               	movlb	2	; () banked
 13705  00655A  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13706                           
 13707                           ;main.c: 905: }
 13708  00655C  D008               	goto	l13903
 13709  00655E                     l13899:
 13710                           
 13711                           ; BSR set to: 2
 13712                           ;main.c: 906: else {
 13713                           ;main.c: 907: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13714  00655E  0E74               	movlw	high STR_92
 13715  006560  0100               	movlb	0	; () banked
 13716  006562  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13717  006564  0E30               	movlw	low STR_92
 13718  006566  6F60               	movwf	?_putsUSART& (0+255),b
 13719  006568  ECFF  F00D         	call	_putsUSART	;wreg free
 13720  00656C  D30D               	goto	l540
 13721  00656E                     l13903:
 13722                           
 13723                           ; BSR set to: 2
 13724                           ;main.c: 909: }
 13725                           ;main.c: 912: p = strtok((0), ",");
 13726  00656E  0100               	movlb	0	; () banked
 13727  006570  DB1A               	call	PL4	;call to abstracted procedure
 13728  006572  EC63  F011         	call	_strtok	;wreg free
 13729  006576  C06A  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13730  00657A  C06B  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;main.c: 913: if ((0) != p) {
 13734  00657E  0102               	movlb	2	; () banked
 13735  006580  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13736  006582  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13737  006584  E00B               	bz	l13909
 13738                           
 13739                           ; BSR set to: 2
 13740                           ;main.c: 914: filter_class = atoi(p);
 13741  006586  C2B9  F064         	movff	doModeVerbose@p_1190,?_atoi
 13742  00658A  C2BA  F065         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13743  00658E  ECAA  F019         	call	_atoi	;wreg free
 13744  006592  C064  F288         	movff	?_atoi,doModeVerbose@filter_class
 13745  006596  C065  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13746                           
 13747                           ;main.c: 915: }
 13748  00659A  D008               	goto	l13913
 13749  00659C                     l13909:
 13750                           
 13751                           ; BSR set to: 2
 13752                           ;main.c: 916: else {
 13753                           ;main.c: 917: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13754  00659C  0E75               	movlw	high STR_94
 13755  00659E  0100               	movlb	0	; () banked
 13756  0065A0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13757  0065A2  0E97               	movlw	low STR_94
 13758  0065A4  6F60               	movwf	?_putsUSART& (0+255),b
 13759  0065A6  ECFF  F00D         	call	_putsUSART	;wreg free
 13760  0065AA  D2EE               	goto	l540
 13761  0065AC                     l13913:
 13762                           
 13763                           ; BSR set to: 0
 13764                           ;main.c: 919: }
 13765                           ;main.c: 922: p = strtok((0), ",");
 13766  0065AC  DAFC               	call	PL4	;call to abstracted procedure
 13767  0065AE  EC63  F011         	call	_strtok	;wreg free
 13768  0065B2  C06A  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13769  0065B6  C06B  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13770                           
 13771                           ; BSR set to: 0
 13772                           ;main.c: 923: if ((0) != p) {
 13773  0065BA  0102               	movlb	2	; () banked
 13774  0065BC  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13775  0065BE  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13776  0065C0  E00A               	bz	l13919
 13777                           
 13778                           ; BSR set to: 2
 13779                           ;main.c: 924: filter_type = atoi(p);
 13780  0065C2  C2B9  F064         	movff	doModeVerbose@p_1190,?_atoi
 13781  0065C6  C2BA  F065         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13782  0065CA  ECAA  F019         	call	_atoi	;wreg free
 13783  0065CE  5164               	movf	?_atoi& (0+255),w,b
 13784  0065D0  0102               	movlb	2	; () banked
 13785  0065D2  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13786                           
 13787                           ;main.c: 925: }
 13788  0065D4  D008               	goto	l13923
 13789  0065D6                     l13919:
 13790                           
 13791                           ; BSR set to: 2
 13792                           ;main.c: 926: else {
 13793                           ;main.c: 927: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13794  0065D6  0E75               	movlw	high STR_96
 13795  0065D8  0100               	movlb	0	; () banked
 13796  0065DA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13797  0065DC  0EE5               	movlw	low STR_96
 13798  0065DE  6F60               	movwf	?_putsUSART& (0+255),b
 13799  0065E0  ECFF  F00D         	call	_putsUSART	;wreg free
 13800  0065E4  D2D1               	goto	l540
 13801  0065E6                     l13923:
 13802                           
 13803                           ; BSR set to: 2
 13804                           ;main.c: 929: }
 13805                           ;main.c: 932: p = strtok((0), ",");
 13806  0065E6  0100               	movlb	0	; () banked
 13807  0065E8  DADE               	call	PL4	;call to abstracted procedure
 13808  0065EA  EC63  F011         	call	_strtok	;wreg free
 13809  0065EE  C06A  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13810  0065F2  C06B  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13811                           
 13812                           ; BSR set to: 0
 13813                           ;main.c: 933: if ((0) != p) {
 13814  0065F6  0102               	movlb	2	; () banked
 13815  0065F8  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13816  0065FA  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13817  0065FC  E00A               	bz	l13929
 13818                           
 13819                           ; BSR set to: 2
 13820                           ;main.c: 934: filter_nodeid = atoi(p);
 13821  0065FE  C2B9  F064         	movff	doModeVerbose@p_1190,?_atoi
 13822  006602  C2BA  F065         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13823  006606  ECAA  F019         	call	_atoi	;wreg free
 13824  00660A  5164               	movf	?_atoi& (0+255),w,b
 13825  00660C  0102               	movlb	2	; () banked
 13826  00660E  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13827                           
 13828                           ;main.c: 935: }
 13829  006610  D008               	goto	l13933
 13830  006612                     l13929:
 13831                           
 13832                           ; BSR set to: 2
 13833                           ;main.c: 936: else {
 13834                           ;main.c: 937: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13835  006612  0E74               	movlw	high STR_98
 13836  006614  0100               	movlb	0	; () banked
 13837  006616  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13838  006618  0E5A               	movlw	low STR_98
 13839  00661A  6F60               	movwf	?_putsUSART& (0+255),b
 13840  00661C  ECFF  F00D         	call	_putsUSART	;wreg free
 13841  006620  D2B3               	goto	l540
 13842  006622                     l13933:
 13843                           
 13844                           ; BSR set to: 2
 13845                           ;main.c: 939: }
 13846                           ;main.c: 942: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13847  006622  0E80               	movlw	128
 13848  006624  EC60  F00B         	call	_ECANSetOperationMode
 13849                           
 13850                           ;main.c: 944: uint32_t id = ((uint32_t) filter_priority << 26) |
 13851                           ;main.c: 945: ((uint32_t) filter_class << 16) |
 13852                           ;main.c: 946: ((uint32_t) filter_type << 8) |
 13853                           ;main.c: 947: filter_nodeid;
 13854  006628  C28F  F0C8         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13855  00662C  DB1D               	call	PL40	;call to abstracted procedure
 13856  00662E  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13857  006630  0100               	movlb	0	; () banked
 13858  006632  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 13859  006634  0102               	movlb	2	; () banked
 13860  006636  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13861  006638  DB30               	call	PL56	;call to abstracted procedure
 13862  00663A  C28E  F0D0         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13863  00663E  DAC7               	call	PL8	;call to abstracted procedure
 13864  006640  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13865  006642  0100               	movlb	0	; () banked
 13866  006644  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13867  006646  0102               	movlb	2	; () banked
 13868  006648  6F80               	movwf	doModeVerbose@id& (0+255),b
 13869  00664A  0100               	movlb	0	; () banked
 13870  00664C  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13871  00664E  0102               	movlb	2	; () banked
 13872  006650  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13873  006652  0100               	movlb	0	; () banked
 13874  006654  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13875  006656  0102               	movlb	2	; () banked
 13876  006658  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13877  00665A  0100               	movlb	0	; () banked
 13878  00665C  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13879  00665E  0102               	movlb	2	; () banked
 13880  006660  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13881                           
 13882                           ; BSR set to: 2
 13883                           ;main.c: 948: setFilter(filterno, id);
 13884  006662  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13885  006666  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13886  00666A  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13887  00666E  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13888  006672  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13889  006674  EC23  F022         	call	_setFilter
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;main.c: 949: putsUSART((char *) "+OK\r\n");
 13893  006678  0E7C               	movlw	high STR_9
 13894  00667A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13895  00667C  0E80               	movlw	low STR_9
 13896  00667E  6F60               	movwf	?_putsUSART& (0+255),b
 13897  006680  ECFF  F00D         	call	_putsUSART	;wreg free
 13898                           
 13899                           ;main.c: 950: }
 13900  006684  D273               	goto	l14099
 13901  006686                     l13941:
 13902                           
 13903                           ; BSR set to: 0
 13904                           ;main.c: 954: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13905  006686  0E01               	movlw	high _cmdbuf
 13906  006688  0100               	movlb	0	; () banked
 13907  00668A  6F6C               	movwf	(?_stristr+1)& (0+255),b
 13908  00668C  0E24               	movlw	low _cmdbuf
 13909  00668E  6F6B               	movwf	?_stristr& (0+255),b
 13910  006690  0E7C               	movlw	high STR_100
 13911  006692  6F6E               	movwf	(?_stristr+3)& (0+255),b
 13912  006694  0EB2               	movlw	low STR_100
 13913  006696  6F6D               	movwf	(?_stristr+2)& (0+255),b
 13914  006698  EC61  F010         	call	_stristr	;wreg free
 13915  00669C  0E24               	movlw	low _cmdbuf
 13916  00669E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13917  0066A0  0E01               	movlw	high _cmdbuf
 13918  0066A2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13919  0066A4  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 13920  0066A6  E102               	bnz	u18585
 13921  0066A8  516B               	movf	?_stristr& (0+255),w,b
 13922  0066AA  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13923  0066AC                     u18585:
 13924  0066AC  E001 D0DC          	bnz	l14013
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;main.c: 956: uint8_t maskno;
 13928                           ;main.c: 957: uint8_t mask_priority;
 13929                           ;main.c: 958: uint16_t mask_class;
 13930                           ;main.c: 959: uint8_t mask_type;
 13931                           ;main.c: 960: uint8_t mask_nodeid;
 13932                           ;main.c: 962: strcpy(cmdbuf, cmdbuf + 8);
 13933  0066B0  0E01               	movlw	high _cmdbuf
 13934  0066B2  DA80               	call	PL6	;call to abstracted procedure
 13935  0066B4  ECB1  F00B         	call	_strcpy	;wreg free
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;main.c: 963: char *p = strtok(cmdbuf, ",");
 13939  0066B8  DAB7               	call	PL30	;call to abstracted procedure
 13940  0066BA  EC63  F011         	call	_strtok	;wreg free
 13941  0066BE  C06A  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13942  0066C2  C06B  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;main.c: 964: if ((0) != p) {
 13946  0066C6  0102               	movlb	2	; () banked
 13947  0066C8  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13948  0066CA  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13949  0066CC  E014               	bz	l13957
 13950                           
 13951                           ; BSR set to: 2
 13952                           ;main.c: 965: maskno = atoi(p);
 13953  0066CE  C2BB  F064         	movff	doModeVerbose@p_1210,?_atoi
 13954  0066D2  C2BC  F065         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13955  0066D6  ECAA  F019         	call	_atoi	;wreg free
 13956  0066DA  5164               	movf	?_atoi& (0+255),w,b
 13957  0066DC  0102               	movlb	2	; () banked
 13958  0066DE  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13959                           
 13960                           ; BSR set to: 2
 13961                           ;main.c: 966: if (maskno > 1) {
 13962  0066E0  0E01               	movlw	1
 13963  0066E2  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13964  0066E4  D010               	goto	l13961
 13965                           
 13966                           ; BSR set to: 2
 13967                           ;main.c: 967: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13968  0066E6  0E72               	movlw	high STR_102
 13969  0066E8  0100               	movlb	0	; () banked
 13970  0066EA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13971  0066EC  0E2A               	movlw	low STR_102
 13972  0066EE  6F60               	movwf	?_putsUSART& (0+255),b
 13973  0066F0  ECFF  F00D         	call	_putsUSART	;wreg free
 13974  0066F4  D249               	goto	l540
 13975  0066F6                     l13957:
 13976                           
 13977                           ; BSR set to: 2
 13978                           ;main.c: 971: else {
 13979                           ;main.c: 972: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13980  0066F6  0E76               	movlw	high STR_103
 13981  0066F8  0100               	movlb	0	; () banked
 13982  0066FA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 13983  0066FC  0E0B               	movlw	low STR_103
 13984  0066FE  6F60               	movwf	?_putsUSART& (0+255),b
 13985  006700  ECFF  F00D         	call	_putsUSART	;wreg free
 13986  006704  D241               	goto	l540
 13987  006706                     l13961:
 13988                           
 13989                           ; BSR set to: 2
 13990                           ;main.c: 974: }
 13991                           ;main.c: 977: p = strtok((0), ",");
 13992  006706  0100               	movlb	0	; () banked
 13993  006708  DA4E               	call	PL4	;call to abstracted procedure
 13994  00670A  EC63  F011         	call	_strtok	;wreg free
 13995  00670E  C06A  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13996  006712  C06B  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13997                           
 13998                           ; BSR set to: 0
 13999                           ;main.c: 978: if ((0) != p) {
 14000  006716  0102               	movlb	2	; () banked
 14001  006718  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14002  00671A  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14003  00671C  E00A               	bz	l13967
 14004                           
 14005                           ; BSR set to: 2
 14006                           ;main.c: 979: mask_priority = atoi(p);
 14007  00671E  C2BB  F064         	movff	doModeVerbose@p_1210,?_atoi
 14008  006722  C2BC  F065         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14009  006726  ECAA  F019         	call	_atoi	;wreg free
 14010  00672A  5164               	movf	?_atoi& (0+255),w,b
 14011  00672C  0102               	movlb	2	; () banked
 14012  00672E  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 14013                           
 14014                           ;main.c: 980: }
 14015  006730  D008               	goto	l13971
 14016  006732                     l13967:
 14017                           
 14018                           ; BSR set to: 2
 14019                           ;main.c: 981: else {
 14020                           ;main.c: 982: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14021  006732  0E74               	movlw	high STR_105
 14022  006734  0100               	movlb	0	; () banked
 14023  006736  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14024  006738  0EAB               	movlw	low STR_105
 14025  00673A  6F60               	movwf	?_putsUSART& (0+255),b
 14026  00673C  ECFF  F00D         	call	_putsUSART	;wreg free
 14027  006740  D223               	goto	l540
 14028  006742                     l13971:
 14029                           
 14030                           ; BSR set to: 2
 14031                           ;main.c: 984: }
 14032                           ;main.c: 987: p = strtok((0), ",");
 14033  006742  0100               	movlb	0	; () banked
 14034  006744  DA30               	call	PL4	;call to abstracted procedure
 14035  006746  EC63  F011         	call	_strtok	;wreg free
 14036  00674A  C06A  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14037  00674E  C06B  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;main.c: 988: if ((0) != p) {
 14041  006752  0102               	movlb	2	; () banked
 14042  006754  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14043  006756  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14044  006758  E00B               	bz	l13977
 14045                           
 14046                           ; BSR set to: 2
 14047                           ;main.c: 989: mask_class = atoi(p);
 14048  00675A  C2BB  F064         	movff	doModeVerbose@p_1210,?_atoi
 14049  00675E  C2BC  F065         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14050  006762  ECAA  F019         	call	_atoi	;wreg free
 14051  006766  C064  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14052  00676A  C065  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14053                           
 14054                           ;main.c: 990: }
 14055  00676E  D008               	goto	l13981
 14056  006770                     l13977:
 14057                           
 14058                           ; BSR set to: 2
 14059                           ;main.c: 991: else {
 14060                           ;main.c: 992: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14061  006770  0E76               	movlw	high STR_107
 14062  006772  0100               	movlb	0	; () banked
 14063  006774  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14064  006776  0E55               	movlw	low STR_107
 14065  006778  6F60               	movwf	?_putsUSART& (0+255),b
 14066  00677A  ECFF  F00D         	call	_putsUSART	;wreg free
 14067  00677E  D204               	goto	l540
 14068  006780                     l13981:
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;main.c: 994: }
 14072                           ;main.c: 997: p = strtok((0), ",");
 14073  006780  DA12               	call	PL4	;call to abstracted procedure
 14074  006782  EC63  F011         	call	_strtok	;wreg free
 14075  006786  C06A  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14076  00678A  C06B  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;main.c: 998: if ((0) != p) {
 14080  00678E  0102               	movlb	2	; () banked
 14081  006790  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14082  006792  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14083  006794  E00A               	bz	l13987
 14084                           
 14085                           ; BSR set to: 2
 14086                           ;main.c: 999: mask_type = atoi(p);
 14087  006796  C2BB  F064         	movff	doModeVerbose@p_1210,?_atoi
 14088  00679A  C2BC  F065         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14089  00679E  ECAA  F019         	call	_atoi	;wreg free
 14090  0067A2  5164               	movf	?_atoi& (0+255),w,b
 14091  0067A4  0102               	movlb	2	; () banked
 14092  0067A6  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 14093                           
 14094                           ;main.c: 1000: }
 14095  0067A8  D008               	goto	l13991
 14096  0067AA                     l13987:
 14097                           
 14098                           ; BSR set to: 2
 14099                           ;main.c: 1001: else {
 14100                           ;main.c: 1002: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14101  0067AA  0E76               	movlw	high STR_109
 14102  0067AC  0100               	movlb	0	; () banked
 14103  0067AE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14104  0067B0  0E7A               	movlw	low STR_109
 14105  0067B2  6F60               	movwf	?_putsUSART& (0+255),b
 14106  0067B4  ECFF  F00D         	call	_putsUSART	;wreg free
 14107  0067B8  D1E7               	goto	l540
 14108  0067BA                     l13991:
 14109                           
 14110                           ; BSR set to: 2
 14111                           ;main.c: 1004: }
 14112                           ;main.c: 1007: p = strtok((0), ",");
 14113  0067BA  0100               	movlb	0	; () banked
 14114  0067BC  D9F4               	call	PL4	;call to abstracted procedure
 14115  0067BE  EC63  F011         	call	_strtok	;wreg free
 14116  0067C2  C06A  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 14117  0067C6  C06B  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;main.c: 1008: if ((0) != p) {
 14121  0067CA  0102               	movlb	2	; () banked
 14122  0067CC  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 14123  0067CE  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 14124  0067D0  E00A               	bz	l13997
 14125                           
 14126                           ; BSR set to: 2
 14127                           ;main.c: 1009: mask_nodeid = atoi(p);
 14128  0067D2  C2BB  F064         	movff	doModeVerbose@p_1210,?_atoi
 14129  0067D6  C2BC  F065         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14130  0067DA  ECAA  F019         	call	_atoi	;wreg free
 14131  0067DE  5164               	movf	?_atoi& (0+255),w,b
 14132  0067E0  0102               	movlb	2	; () banked
 14133  0067E2  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14134                           
 14135                           ;main.c: 1010: }
 14136  0067E4  D008               	goto	l14001
 14137  0067E6                     l13997:
 14138                           
 14139                           ; BSR set to: 2
 14140                           ;main.c: 1011: else {
 14141                           ;main.c: 1012: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14142  0067E6  0E75               	movlw	high STR_111
 14143  0067E8  0100               	movlb	0	; () banked
 14144  0067EA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14145  0067EC  0E70               	movlw	low STR_111
 14146  0067EE  6F60               	movwf	?_putsUSART& (0+255),b
 14147  0067F0  ECFF  F00D         	call	_putsUSART	;wreg free
 14148  0067F4  D1C9               	goto	l540
 14149  0067F6                     l14001:
 14150                           
 14151                           ; BSR set to: 2
 14152                           ;main.c: 1014: }
 14153                           ;main.c: 1016: uint32_t id = ((uint32_t) mask_priority << 26) |
 14154                           ;main.c: 1017: ((uint32_t) mask_class << 16) |
 14155                           ;main.c: 1018: ((uint32_t) mask_type << 8) |
 14156                           ;main.c: 1019: mask_nodeid;
 14157  0067F6  C292  F0C8         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14158  0067FA  DA36               	call	PL40	;call to abstracted procedure
 14159  0067FC  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14160  0067FE  0100               	movlb	0	; () banked
 14161  006800  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 14162  006802  0102               	movlb	2	; () banked
 14163  006804  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14164  006806  DA49               	call	PL56	;call to abstracted procedure
 14165  006808  C291  F0D0         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14166  00680C  D9E0               	call	PL8	;call to abstracted procedure
 14167  00680E  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14168  006810  0100               	movlb	0	; () banked
 14169  006812  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14170  006814  0102               	movlb	2	; () banked
 14171  006816  6FA3               	movwf	doModeVerbose@id_1222& (0+255),b
 14172  006818  0100               	movlb	0	; () banked
 14173  00681A  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14174  00681C  0102               	movlb	2	; () banked
 14175  00681E  6FA4               	movwf	(doModeVerbose@id_1222+1)& (0+255),b
 14176  006820  0100               	movlb	0	; () banked
 14177  006822  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14178  006824  0102               	movlb	2	; () banked
 14179  006826  6FA5               	movwf	(doModeVerbose@id_1222+2)& (0+255),b
 14180  006828  0100               	movlb	0	; () banked
 14181  00682A  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14182  00682C  0102               	movlb	2	; () banked
 14183  00682E  6FA6               	movwf	(doModeVerbose@id_1222+3)& (0+255),b
 14184                           
 14185                           ; BSR set to: 2
 14186                           ;main.c: 1022: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14187  006830  0E80               	movlw	128
 14188  006832  EC60  F00B         	call	_ECANSetOperationMode
 14189                           
 14190                           ;main.c: 1024: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14191                           ;main.c: 1025: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14192  006836  0102               	movlb	2	; () banked
 14193  006838  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14194  00683A  E008               	bz	l14009
 14195                           
 14196                           ; BSR set to: 2
 14197  00683C  0E0F               	movlw	15	;volatile
 14198  00683E  0100               	movlb	0	; () banked
 14199  006840  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14200  006842  0E18               	movlw	24	;volatile
 14201  006844  DA1E               	call	PL52	;call to abstracted procedure
 14202  006846  EC2D  F01A         	call	__CANIDToRegs	;wreg free
 14203  00684A  D007               	goto	l14011
 14204  00684C                     l14009:
 14205                           
 14206                           ; BSR set to: 2
 14207  00684C  0E0F               	movlw	15	;volatile
 14208  00684E  0100               	movlb	0	; () banked
 14209  006850  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14210  006852  0E1C               	movlw	28	;volatile
 14211  006854  DA16               	call	PL52	;call to abstracted procedure
 14212  006856  EC2D  F01A         	call	__CANIDToRegs	;wreg free
 14213  00685A                     l14011:
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;main.c: 1026: putsUSART((char *) "+OK\r\n");
 14217  00685A  0E7C               	movlw	high STR_9
 14218  00685C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14219  00685E  0E80               	movlw	low STR_9
 14220  006860  6F60               	movwf	?_putsUSART& (0+255),b
 14221  006862  ECFF  F00D         	call	_putsUSART	;wreg free
 14222                           
 14223                           ;main.c: 1027: }
 14224  006866  D182               	goto	l14099
 14225  006868                     l14013:
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;main.c: 1034: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14229  006868  0E01               	movlw	high _cmdbuf
 14230  00686A  0100               	movlb	0	; () banked
 14231  00686C  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14232  00686E  0E24               	movlw	low _cmdbuf
 14233  006870  6F6B               	movwf	?_stristr& (0+255),b
 14234  006872  0E7C               	movlw	high STR_113
 14235  006874  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14236  006876  0E9E               	movlw	low STR_113
 14237  006878  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14238  00687A  EC61  F010         	call	_stristr	;wreg free
 14239  00687E  0E24               	movlw	low _cmdbuf
 14240  006880  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14241  006882  0E01               	movlw	high _cmdbuf
 14242  006884  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14243  006886  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 14244  006888  E102               	bnz	u18675
 14245  00688A  516B               	movf	?_stristr& (0+255),w,b
 14246  00688C  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14247  00688E                     u18675:
 14248  00688E  E001 D15A          	bnz	l14093
 14249                           
 14250                           ; BSR set to: 0
 14251                           ;main.c: 1037: strcpy(cmdbuf, cmdbuf + 4);
 14252  006892  0E01               	movlw	high _cmdbuf
 14253  006894  0100               	movlb	0	; () banked
 14254  006896  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14255  006898  0E24               	movlw	low _cmdbuf
 14256  00689A  6F60               	movwf	?_strcpy& (0+255),b
 14257  00689C  0E28               	movlw	low (_cmdbuf+4)
 14258  00689E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14259  0068A0  0E01               	movlw	high (_cmdbuf+4)
 14260  0068A2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14261  0068A4  C0C8  F062         	movff	??_doModeVerbose,?_strcpy+2
 14262  0068A8  C0C9  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14263  0068AC  ECB1  F00B         	call	_strcpy	;wreg free
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;main.c: 1040: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14267  0068B0  0E01               	movlw	high _cmdbuf
 14268  0068B2  0100               	movlb	0	; () banked
 14269  0068B4  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14270  0068B6  0E24               	movlw	low _cmdbuf
 14271  0068B8  6F6B               	movwf	?_stristr& (0+255),b
 14272  0068BA  0E7C               	movlw	high STR_114
 14273  0068BC  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14274  0068BE  0EDD               	movlw	low STR_114
 14275  0068C0  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14276  0068C2  EC61  F010         	call	_stristr	;wreg free
 14277  0068C6  0E24               	movlw	low _cmdbuf
 14278  0068C8  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14279  0068CA  0E01               	movlw	high _cmdbuf
 14280  0068CC  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14281  0068CE  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 14282  0068D0  E102               	bnz	u18685
 14283  0068D2  516B               	movf	?_stristr& (0+255),w,b
 14284  0068D4  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14285  0068D6                     u18685:
 14286  0068D6  E114               	bnz	l14025
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;main.c: 1041: bHex = 1;
 14290  0068D8  0E01               	movlw	1
 14291  0068DA  6FE3               	movwf	_bHex& (0+255),b
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;main.c: 1042: (Busy_eep(), Write_b_eep(0x06,1));
 14295  0068DC  EC29  F00B         	call	_Busy_eep	;wreg free
 14296  0068E0  0100               	movlb	0	; () banked
 14297  0068E2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14298  0068E4  0E06               	movlw	6
 14299  0068E6  6F60               	movwf	?_Write_b_eep& (0+255),b
 14300  0068E8  0E01               	movlw	1
 14301  0068EA  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14302  0068EC  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14303                           
 14304                           ;main.c: 1043: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14305  0068F0  0E74               	movlw	high STR_115
 14306  0068F2  0100               	movlb	0	; () banked
 14307  0068F4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14308  0068F6  0E04               	movlw	low STR_115
 14309  0068F8  6F60               	movwf	?_putsUSART& (0+255),b
 14310  0068FA  ECFF  F00D         	call	_putsUSART	;wreg free
 14311                           
 14312                           ;main.c: 1044: }
 14313  0068FE  D136               	goto	l14099
 14314  006900                     l14025:
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;main.c: 1046: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14318  006900  0E01               	movlw	high _cmdbuf
 14319  006902  0100               	movlb	0	; () banked
 14320  006904  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14321  006906  0E24               	movlw	low _cmdbuf
 14322  006908  6F6B               	movwf	?_stristr& (0+255),b
 14323  00690A  0E7C               	movlw	high STR_116
 14324  00690C  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14325  00690E  0E06               	movlw	low STR_116
 14326  006910  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14327  006912  EC61  F010         	call	_stristr	;wreg free
 14328  006916  0E24               	movlw	low _cmdbuf
 14329  006918  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14330  00691A  0E01               	movlw	high _cmdbuf
 14331  00691C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14332  00691E  196C               	xorwf	(?_stristr+1)& (0+255),w,b
 14333  006920  E102               	bnz	u18695
 14334  006922  516B               	movf	?_stristr& (0+255),w,b
 14335  006924  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14336  006926                     u18695:
 14337  006926  E113               	bnz	l14035
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;main.c: 1047: bHex = 0;
 14341  006928  6BE3               	clrf	_bHex& (0+255),b
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;main.c: 1048: (Busy_eep(), Write_b_eep(0x06,0));
 14345  00692A  EC29  F00B         	call	_Busy_eep	;wreg free
 14346  00692E  0100               	movlb	0	; () banked
 14347  006930  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14348  006932  0E06               	movlw	6
 14349  006934  6F60               	movwf	?_Write_b_eep& (0+255),b
 14350  006936  0E00               	movlw	0
 14351  006938  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14352  00693A  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14353                           
 14354                           ;main.c: 1049: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14355  00693E  0E74               	movlw	high STR_117
 14356  006940  0100               	movlb	0	; () banked
 14357  006942  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14358  006944  0ED3               	movlw	low STR_117
 14359  006946  6F60               	movwf	?_putsUSART& (0+255),b
 14360  006948  ECFF  F00D         	call	_putsUSART	;wreg free
 14361                           
 14362                           ;main.c: 1050: }
 14363  00694C  D10F               	goto	l14099
 14364  00694E                     l14035:
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;main.c: 1051: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14368  00694E  0E01               	movlw	high _cmdbuf
 14369  006950  0100               	movlb	0	; () banked
 14370  006952  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14371  006954  0E24               	movlw	low _cmdbuf
 14372  006956  6F6B               	movwf	?_stristr& (0+255),b
 14373  006958  0E7B               	movlw	high STR_118
 14374  00695A  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14375  00695C  0E87               	movlw	low STR_118
 14376  00695E  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14377  006960  EC61  F010         	call	_stristr	;wreg free
 14378  006964  516C               	movf	(?_stristr+1)& (0+255),w,b
 14379  006966  116B               	iorwf	?_stristr& (0+255),w,b
 14380  006968  E02E               	bz	l14049
 14381                           
 14382                           ; BSR set to: 0
 14383                           ;main.c: 1052: strcpy(cmdbuf, cmdbuf + 10);
 14384  00696A  0E01               	movlw	high _cmdbuf
 14385  00696C  0100               	movlb	0	; () banked
 14386  00696E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14387  006970  0E24               	movlw	low _cmdbuf
 14388  006972  6F60               	movwf	?_strcpy& (0+255),b
 14389  006974  0E2E               	movlw	low (_cmdbuf+10)
 14390  006976  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14391  006978  0E01               	movlw	high (_cmdbuf+10)
 14392  00697A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14393  00697C  C0C8  F062         	movff	??_doModeVerbose,?_strcpy+2
 14394  006980  C0C9  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14395  006984  ECB1  F00B         	call	_strcpy	;wreg free
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1053: rwtimeout = atoi(cmdbuf);
 14399  006988  0E01               	movlw	high _cmdbuf
 14400  00698A  0100               	movlb	0	; () banked
 14401  00698C  6F65               	movwf	(?_atoi+1)& (0+255),b
 14402  00698E  0E24               	movlw	low _cmdbuf
 14403  006990  6F64               	movwf	?_atoi& (0+255),b
 14404  006992  ECAA  F019         	call	_atoi	;wreg free
 14405  006996  5164               	movf	?_atoi& (0+255),w,b
 14406  006998  6FE8               	movwf	_rwtimeout& (0+255),b
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;main.c: 1054: if (rwtimeout < 10u) {
 14410  00699A  0E0A               	movlw	10
 14411  00699C  61E8               	cpfslt	_rwtimeout& (0+255),b
 14412  00699E  D001               	goto	l14045
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;main.c: 1055: rwtimeout = 10u;
 14416  0069A0  6FE8               	movwf	_rwtimeout& (0+255),b
 14417  0069A2                     l14045:
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;main.c: 1056: }
 14421                           ;main.c: 1057: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14422  0069A2  EC29  F00B         	call	_Busy_eep	;wreg free
 14423  0069A6  0100               	movlb	0	; () banked
 14424  0069A8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14425  0069AA  0E09               	movlw	9
 14426  0069AC  6F60               	movwf	?_Write_b_eep& (0+255),b
 14427  0069AE  C0E8  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14428  0069B2  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14429                           
 14430                           ;main.c: 1058: putsUSART((char *) "+OK\r\n");
 14431  0069B6  0E7C               	movlw	high STR_9
 14432  0069B8  0100               	movlb	0	; () banked
 14433  0069BA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14434  0069BC  0E80               	movlw	low STR_9
 14435  0069BE  6F60               	movwf	?_putsUSART& (0+255),b
 14436  0069C0  ECFF  F00D         	call	_putsUSART	;wreg free
 14437                           
 14438                           ;main.c: 1059: }
 14439  0069C4  D0D3               	goto	l14099
 14440  0069C6                     l14049:
 14441                           
 14442                           ; BSR set to: 0
 14443                           ;main.c: 1060: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14444  0069C6  0E01               	movlw	high _cmdbuf
 14445  0069C8  0100               	movlb	0	; () banked
 14446  0069CA  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14447  0069CC  0E24               	movlw	low _cmdbuf
 14448  0069CE  6F6B               	movwf	?_stristr& (0+255),b
 14449  0069D0  0E7B               	movlw	high STR_120
 14450  0069D2  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14451  0069D4  0EBB               	movlw	low STR_120
 14452  0069D6  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14453  0069D8  EC61  F010         	call	_stristr	;wreg free
 14454  0069DC  516C               	movf	(?_stristr+1)& (0+255),w,b
 14455  0069DE  116B               	iorwf	?_stristr& (0+255),w,b
 14456  0069E0  E005               	bz	l14053
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;main.c: 1061: strcpy(cmdbuf, cmdbuf + 8);
 14460  0069E2  0E01               	movlw	high _cmdbuf
 14461  0069E4  D8E7               	call	PL6	;call to abstracted procedure
 14462  0069E6  ECB1  F00B         	call	_strcpy	;wreg free
 14463                           
 14464                           ;main.c: 1062: }
 14465  0069EA  D0C0               	goto	l14099
 14466  0069EC                     l14053:
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;main.c: 1063: else if (0 != stristr(cmdbuf, "MODE ")) {
 14470  0069EC  0E01               	movlw	high _cmdbuf
 14471  0069EE  0100               	movlb	0	; () banked
 14472  0069F0  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14473  0069F2  0E24               	movlw	low _cmdbuf
 14474  0069F4  6F6B               	movwf	?_stristr& (0+255),b
 14475  0069F6  0E7C               	movlw	high STR_121
 14476  0069F8  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14477  0069FA  0E86               	movlw	low STR_121
 14478  0069FC  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14479  0069FE  EC61  F010         	call	_stristr	;wreg free
 14480  006A02  516C               	movf	(?_stristr+1)& (0+255),w,b
 14481  006A04  116B               	iorwf	?_stristr& (0+255),w,b
 14482  006A06  E068               	bz	l14083
 14483                           
 14484                           ; BSR set to: 0
 14485                           ;main.c: 1064: strcpy(cmdbuf, cmdbuf + 5);
 14486  006A08  D8C0               	call	PL2	;call to abstracted procedure
 14487  006A0A  ECB1  F00B         	call	_strcpy	;wreg free
 14488                           
 14489                           ; BSR set to: 0
 14490                           ;main.c: 1065: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14491  006A0E  0E01               	movlw	high _cmdbuf
 14492  006A10  0100               	movlb	0	; () banked
 14493  006A12  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14494  006A14  0E24               	movlw	low _cmdbuf
 14495  006A16  6F6B               	movwf	?_stristr& (0+255),b
 14496  006A18  0E7B               	movlw	high STR_122
 14497  006A1A  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14498  006A1C  0EFE               	movlw	low STR_122
 14499  006A1E  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14500  006A20  EC61  F010         	call	_stristr	;wreg free
 14501  006A24  516C               	movf	(?_stristr+1)& (0+255),w,b
 14502  006A26  116B               	iorwf	?_stristr& (0+255),w,b
 14503  006A28  E013               	bz	l14067
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;main.c: 1066: mode = 0;
 14507  006A2A  6BE6               	clrf	_mode& (0+255),b
 14508                           
 14509                           ; BSR set to: 0
 14510                           ;main.c: 1067: (Busy_eep(), Write_b_eep(0x03,0));
 14511  006A2C  EC29  F00B         	call	_Busy_eep	;wreg free
 14512  006A30  0100               	movlb	0	; () banked
 14513  006A32  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14514  006A34  0E03               	movlw	3
 14515  006A36  6F60               	movwf	?_Write_b_eep& (0+255),b
 14516  006A38  0E00               	movlw	0
 14517  006A3A  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14518  006A3C  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14519                           
 14520                           ;main.c: 1068: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14521  006A40  0E78               	movlw	high STR_123
 14522  006A42  0100               	movlb	0	; () banked
 14523  006A44  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14524  006A46  0E48               	movlw	low STR_123
 14525  006A48  6F60               	movwf	?_putsUSART& (0+255),b
 14526  006A4A  ECFF  F00D         	call	_putsUSART	;wreg free
 14527                           
 14528                           ;main.c: 1069: }
 14529  006A4E  D08E               	goto	l14099
 14530  006A50                     l14067:
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;main.c: 1070: else if (0 != stristr(cmdbuf, "VSCP")) {
 14534  006A50  0E01               	movlw	high _cmdbuf
 14535  006A52  0100               	movlb	0	; () banked
 14536  006A54  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14537  006A56  0E24               	movlw	low _cmdbuf
 14538  006A58  6F6B               	movwf	?_stristr& (0+255),b
 14539  006A5A  0E7C               	movlw	high STR_124
 14540  006A5C  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14541  006A5E  0EC1               	movlw	low STR_124
 14542  006A60  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14543  006A62  EC61  F010         	call	_stristr	;wreg free
 14544  006A66  516C               	movf	(?_stristr+1)& (0+255),w,b
 14545  006A68  116B               	iorwf	?_stristr& (0+255),w,b
 14546  006A6A  E014               	bz	l14075
 14547                           
 14548                           ; BSR set to: 0
 14549                           ;main.c: 1071: mode = 1;
 14550  006A6C  0E01               	movlw	1
 14551  006A6E  6FE6               	movwf	_mode& (0+255),b
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;main.c: 1072: (Busy_eep(), Write_b_eep(0x03,1));
 14555  006A70  EC29  F00B         	call	_Busy_eep	;wreg free
 14556  006A74  0100               	movlb	0	; () banked
 14557  006A76  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14558  006A78  0E03               	movlw	3
 14559  006A7A  6F60               	movwf	?_Write_b_eep& (0+255),b
 14560  006A7C  0E01               	movlw	1
 14561  006A7E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14562  006A80  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14563                           
 14564                           ;main.c: 1073: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14565  006A84  0E77               	movlw	high STR_125
 14566  006A86  0100               	movlb	0	; () banked
 14567  006A88  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14568  006A8A  0ECD               	movlw	low STR_125
 14569  006A8C  6F60               	movwf	?_putsUSART& (0+255),b
 14570  006A8E  ECFF  F00D         	call	_putsUSART	;wreg free
 14571                           
 14572                           ;main.c: 1074: }
 14573  006A92  D06C               	goto	l14099
 14574  006A94                     l14075:
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;main.c: 1075: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14578  006A94  0E01               	movlw	high _cmdbuf
 14579  006A96  0100               	movlb	0	; () banked
 14580  006A98  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14581  006A9A  0E24               	movlw	low _cmdbuf
 14582  006A9C  6F6B               	movwf	?_stristr& (0+255),b
 14583  006A9E  0E7C               	movlw	high STR_126
 14584  006AA0  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14585  006AA2  0E98               	movlw	low STR_126
 14586  006AA4  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14587  006AA6  EC61  F010         	call	_stristr	;wreg free
 14588  006AAA  516C               	movf	(?_stristr+1)& (0+255),w,b
 14589  006AAC  116B               	iorwf	?_stristr& (0+255),w,b
 14590  006AAE  E05E               	bz	l14099
 14591                           
 14592                           ; BSR set to: 0
 14593                           ;main.c: 1076: mode = 2;
 14594  006AB0  0E02               	movlw	2
 14595  006AB2  6FE6               	movwf	_mode& (0+255),b
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;main.c: 1077: (Busy_eep(), Write_b_eep(0x03,2));
 14599  006AB4  EC29  F00B         	call	_Busy_eep	;wreg free
 14600  006AB8  0100               	movlb	0	; () banked
 14601  006ABA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14602  006ABC  0E03               	movlw	3
 14603  006ABE  6F60               	movwf	?_Write_b_eep& (0+255),b
 14604  006AC0  0E02               	movlw	2
 14605  006AC2  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14606  006AC4  ECF9  F00B         	call	_Write_b_eep	;wreg free
 14607                           
 14608                           ;main.c: 1078: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14609  006AC8  0E78               	movlw	high STR_127
 14610  006ACA  0100               	movlb	0	; () banked
 14611  006ACC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14612  006ACE  0EB5               	movlw	low STR_127
 14613  006AD0  6F60               	movwf	?_putsUSART& (0+255),b
 14614  006AD2  ECFF  F00D         	call	_putsUSART	;wreg free
 14615  006AD6  D04A               	goto	l14099
 14616  006AD8                     l14083:
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;main.c: 1082: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14620  006AD8  0E01               	movlw	high _cmdbuf
 14621  006ADA  0100               	movlb	0	; () banked
 14622  006ADC  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14623  006ADE  0E24               	movlw	low _cmdbuf
 14624  006AE0  6F6B               	movwf	?_stristr& (0+255),b
 14625  006AE2  0E7B               	movlw	high STR_128
 14626  006AE4  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14627  006AE6  0EEE               	movlw	low STR_128
 14628  006AE8  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14629  006AEA  EC61  F010         	call	_stristr	;wreg free
 14630  006AEE  516C               	movf	(?_stristr+1)& (0+255),w,b
 14631  006AF0  116B               	iorwf	?_stristr& (0+255),w,b
 14632  006AF2  E010               	bz	l14087
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;main.c: 1083: strcpy(cmdbuf, cmdbuf + 7);
 14636  006AF4  0E01               	movlw	high _cmdbuf
 14637  006AF6  0100               	movlb	0	; () banked
 14638  006AF8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14639  006AFA  0E24               	movlw	low _cmdbuf
 14640  006AFC  6F60               	movwf	?_strcpy& (0+255),b
 14641  006AFE  0E2B               	movlw	low (_cmdbuf+7)
 14642  006B00  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14643  006B02  0E01               	movlw	high (_cmdbuf+7)
 14644  006B04  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14645  006B06  C0C8  F062         	movff	??_doModeVerbose,?_strcpy+2
 14646  006B0A  C0C9  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14647  006B0E  ECB1  F00B         	call	_strcpy	;wreg free
 14648                           
 14649                           ;main.c: 1084: }
 14650  006B12  D02C               	goto	l14099
 14651  006B14                     l14087:
 14652                           
 14653                           ; BSR set to: 0
 14654                           ;main.c: 1086: else if (0 != stristr(cmdbuf, "MASK ")) {
 14655  006B14  0E01               	movlw	high _cmdbuf
 14656  006B16  0100               	movlb	0	; () banked
 14657  006B18  6F6C               	movwf	(?_stristr+1)& (0+255),b
 14658  006B1A  0E24               	movlw	low _cmdbuf
 14659  006B1C  6F6B               	movwf	?_stristr& (0+255),b
 14660  006B1E  0E7C               	movlw	high STR_129
 14661  006B20  6F6E               	movwf	(?_stristr+3)& (0+255),b
 14662  006B22  0E8C               	movlw	low STR_129
 14663  006B24  6F6D               	movwf	(?_stristr+2)& (0+255),b
 14664  006B26  EC61  F010         	call	_stristr	;wreg free
 14665  006B2A  516C               	movf	(?_stristr+1)& (0+255),w,b
 14666  006B2C  116B               	iorwf	?_stristr& (0+255),w,b
 14667  006B2E  E004               	bz	l14091
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;main.c: 1087: strcpy(cmdbuf, cmdbuf + 5);
 14671  006B30  D82C               	call	PL2	;call to abstracted procedure
 14672  006B32  ECB1  F00B         	call	_strcpy	;wreg free
 14673                           
 14674                           ;main.c: 1088: }
 14675  006B36  D01A               	goto	l14099
 14676  006B38                     l14091:
 14677                           
 14678                           ; BSR set to: 0
 14679                           ;main.c: 1089: else {
 14680                           ;main.c: 1090: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14681  006B38  0E77               	movlw	high STR_130
 14682  006B3A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14683  006B3C  0E6A               	movlw	low STR_130
 14684  006B3E  6F60               	movwf	?_putsUSART& (0+255),b
 14685  006B40  ECFF  F00D         	call	_putsUSART	;wreg free
 14686  006B44  D013               	goto	l14099
 14687  006B46                     l14093:
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;main.c: 1094: else {
 14691                           ;main.c: 1095: if ( 0x0d == cmdbuf[ 0 ] ) {
 14692  006B46  0101               	movlb	1	; () banked
 14693  006B48  5124               	movf	_cmdbuf& (0+255),w,b
 14694  006B4A  0A0D               	xorlw	13
 14695  006B4C  E108               	bnz	l14097
 14696                           
 14697                           ; BSR set to: 1
 14698                           ;main.c: 1096: putsUSART((char *) "+OK\r\n");
 14699  006B4E  0E7C               	movlw	high STR_9
 14700  006B50  0100               	movlb	0	; () banked
 14701  006B52  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14702  006B54  0E80               	movlw	low STR_9
 14703  006B56  6F60               	movwf	?_putsUSART& (0+255),b
 14704  006B58  ECFF  F00D         	call	_putsUSART	;wreg free
 14705                           
 14706                           ;main.c: 1097: }
 14707  006B5C  D007               	goto	l14099
 14708  006B5E                     l14097:
 14709                           
 14710                           ; BSR set to: 1
 14711                           ;main.c: 1098: else {
 14712                           ;main.c: 1099: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14713  006B5E  0E78               	movlw	high STR_132
 14714  006B60  0100               	movlb	0	; () banked
 14715  006B62  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 14716  006B64  0E7F               	movlw	low STR_132
 14717  006B66  6F60               	movwf	?_putsUSART& (0+255),b
 14718  006B68  ECFF  F00D         	call	_putsUSART	;wreg free
 14719  006B6C                     l14099:
 14720                           
 14721                           ;main.c: 1100: }
 14722                           ;main.c: 1101: }
 14723                           ;main.c: 1103: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 14724  006B6C  0E01               	movlw	high _cmdbuf
 14725  006B6E  0100               	movlb	0	; () banked
 14726  006B70  6F61               	movwf	(?_memset+1)& (0+255),b
 14727  006B72  0E24               	movlw	low _cmdbuf
 14728  006B74  6F60               	movwf	?_memset& (0+255),b
 14729  006B76  6B63               	clrf	(?_memset+3)& (0+255),b
 14730  006B78  6B62               	clrf	(?_memset+2)& (0+255),b
 14731  006B7A  6B65               	clrf	(?_memset+5)& (0+255),b
 14732  006B7C  0E50               	movlw	80
 14733  006B7E  6F64               	movwf	(?_memset+4)& (0+255),b
 14734  006B80  EC9A  F00B         	call	_memset	;wreg free
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;main.c: 1104: pos = 0;
 14738  006B84  6BE7               	clrf	_pos& (0+255),b
 14739  006B86                     l14103:
 14740                           
 14741                           ;main.c: 1105: }
 14742                           ;main.c: 1106: }
 14743                           ;main.c: 1109: (INTCONbits.GIE = 1);
 14744  006B86  8EF2               	bsf	intcon,7,c	;volatile
 14745  006B88                     l540:
 14746  006B88  0012               	return	
 14747  006B8A                     __end_of_doModeVerbose:
 14748                           	opt stack 0
 14749  006B8A                     PL2:
 14750                           	opt stack 19
 14751  006B8A  0E01               	movlw	high _cmdbuf
 14752  006B8C  0100               	movlb	0	; () banked
 14753  006B8E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14754  006B90  0E24               	movlw	low _cmdbuf
 14755  006B92  6F60               	movwf	?_strcpy& (0+255),b
 14756  006B94  0E29               	movlw	low (_cmdbuf+5)
 14757  006B96  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14758  006B98  0E01               	movlw	high (_cmdbuf+5)
 14759  006B9A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14760  006B9C  C0C8  F062         	movff	??_doModeVerbose,?_strcpy+2
 14761  006BA0  C0C9  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14762  006BA4  0012               	return	
 14763  006BA6                     __end_ofPL2:
 14764                           	opt stack 0
 14765  006BA6                     PL4:
 14766                           	opt stack 19
 14767  006BA6  6B6B               	clrf	(?_strtok+1)& (0+255),b
 14768  006BA8  6B6A               	clrf	?_strtok& (0+255),b
 14769  006BAA  0E7C               	movlw	high STR_30
 14770  006BAC  6F6D               	movwf	(?_strtok+3)& (0+255),b
 14771  006BAE  0EF5               	movlw	low STR_30
 14772  006BB0  6F6C               	movwf	(?_strtok+2)& (0+255),b
 14773  006BB2  0012               	return	
 14774  006BB4                     __end_ofPL4:
 14775                           	opt stack 0
 14776  006BB4                     PL6:
 14777                           	opt stack 19
 14778  006BB4  0100               	movlb	0	; () banked
 14779  006BB6  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14780  006BB8  0E24               	movlw	low _cmdbuf
 14781  006BBA  6F60               	movwf	?_strcpy& (0+255),b
 14782  006BBC  0E2C               	movlw	low (_cmdbuf+8)
 14783  006BBE  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14784  006BC0  0E01               	movlw	high (_cmdbuf+8)
 14785  006BC2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14786  006BC4  C0C8  F062         	movff	??_doModeVerbose,?_strcpy+2
 14787  006BC8  C0C9  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14788  006BCC  0012               	return	
 14789  006BCE                     __end_ofPL6:
 14790                           	opt stack 0
 14791  006BCE                     PL8:
 14792                           	opt stack 19
 14793  006BCE  6BD1               	clrf	(??_doModeVerbose+9)& (0+255),b
 14794  006BD0  6BD2               	clrf	(??_doModeVerbose+10)& (0+255),b
 14795  006BD2  6BD3               	clrf	(??_doModeVerbose+11)& (0+255),b
 14796  006BD4  0E1A               	movlw	26
 14797  006BD6                     u18575:
 14798  006BD6  90D8               	bcf	status,0,c
 14799  006BD8  37D0               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14800  006BDA  37D1               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14801  006BDC  37D2               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14802  006BDE  37D3               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14803  006BE0  2EE8               	decfsz	wreg,f,c
 14804  006BE2  D7F9               	goto	u18575
 14805  006BE4  51CC               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14806  006BE6  11D0               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14807  006BE8  6FD4               	movwf	(??_doModeVerbose+12)& (0+255),b
 14808  006BEA  51CD               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14809  006BEC  11D1               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14810  006BEE  6FD5               	movwf	(??_doModeVerbose+13)& (0+255),b
 14811  006BF0  51CE               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14812  006BF2  11D2               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14813  006BF4  6FD6               	movwf	(??_doModeVerbose+14)& (0+255),b
 14814  006BF6  51CF               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14815  006BF8  11D3               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14816  006BFA  6FD7               	movwf	(??_doModeVerbose+15)& (0+255),b
 14817  006BFC  51C8               	movf	??_doModeVerbose& (0+255),w,b
 14818  006BFE  11D4               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14819  006C00  6FD8               	movwf	(??_doModeVerbose+16)& (0+255),b
 14820  006C02  51C9               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14821  006C04  11D5               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14822  006C06  6FD9               	movwf	(??_doModeVerbose+17)& (0+255),b
 14823  006C08  51CA               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14824  006C0A  11D6               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14825  006C0C  6FDA               	movwf	(??_doModeVerbose+18)& (0+255),b
 14826  006C0E  51CB               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14827  006C10  11D7               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14828  006C12  6FDB               	movwf	(??_doModeVerbose+19)& (0+255),b
 14829  006C14  0102               	movlb	2	; () banked
 14830  006C16  0012               	return	
 14831  006C18                     __end_ofPL8:
 14832                           	opt stack 0
 14833  006C18                     PL26:
 14834                           	opt stack 19
 14835  006C18  0100               	movlb	0	; () banked
 14836  006C1A  6B6B               	clrf	(?_strtok+1)& (0+255),b
 14837  006C1C  6B6A               	clrf	?_strtok& (0+255),b
 14838  006C1E  0E7C               	movlw	high (STR_256+5)
 14839  006C20  6F6D               	movwf	(?_strtok+3)& (0+255),b
 14840  006C22  0E2B               	movlw	low (STR_256+5)
 14841  006C24  6F6C               	movwf	(?_strtok+2)& (0+255),b
 14842  006C26  0012               	return	
 14843  006C28                     __end_ofPL26:
 14844                           	opt stack 0
 14845  006C28                     PL30:
 14846                           	opt stack 19
 14847  006C28  0E01               	movlw	high _cmdbuf
 14848  006C2A  0100               	movlb	0	; () banked
 14849  006C2C  6F6B               	movwf	(?_strtok+1)& (0+255),b
 14850  006C2E  0E24               	movlw	low _cmdbuf
 14851  006C30  6F6A               	movwf	?_strtok& (0+255),b
 14852  006C32  0E7C               	movlw	high STR_30
 14853  006C34  6F6D               	movwf	(?_strtok+3)& (0+255),b
 14854  006C36  0EF5               	movlw	low STR_30
 14855  006C38  6F6C               	movwf	(?_strtok+2)& (0+255),b
 14856  006C3A  0012               	return	
 14857  006C3C                     __end_ofPL30:
 14858                           	opt stack 0
 14859  006C3C                     PL32:
 14860                           	opt stack 19
 14861  006C3C  0100               	movlb	0	; () banked
 14862  006C3E  6F6B               	movwf	(?_strtok+1)& (0+255),b
 14863  006C40  0E24               	movlw	low _cmdbuf
 14864  006C42  6F6A               	movwf	?_strtok& (0+255),b
 14865  006C44  0E7C               	movlw	high (STR_256+5)
 14866  006C46  6F6D               	movwf	(?_strtok+3)& (0+255),b
 14867  006C48  0E2B               	movlw	low (STR_256+5)
 14868  006C4A  6F6C               	movwf	(?_strtok+2)& (0+255),b
 14869  006C4C  0012               	return	
 14870  006C4E                     __end_ofPL32:
 14871                           	opt stack 0
 14872  006C4E                     PL38:
 14873                           	opt stack 19
 14874  006C4E  0102               	movlb	2	; () banked
 14875  006C50  51B0               	movf	doModeVerbose@i_1111& (0+255),w,b
 14876  006C52  C2AE  F0C8         	movff	doModeVerbose@reg,??_doModeVerbose
 14877  006C56  0100               	movlb	0	; () banked
 14878  006C58  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 14879  006C5A  27C8               	addwf	??_doModeVerbose& (0+255),f,b
 14880  006C5C  0E00               	movlw	0
 14881  006C5E  23C9               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14882  006C60  51C8               	movf	??_doModeVerbose& (0+255),w,b
 14883  006C62  6F79               	movwf	(?_sprintf+4)& (0+255),b
 14884  006C64  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 14885  006C66  0012               	return	
 14886  006C68                     __end_ofPL38:
 14887                           	opt stack 0
 14888  006C68                     PL40:
 14889                           	opt stack 19
 14890  006C68  0100               	movlb	0	; () banked
 14891  006C6A  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 14892  006C6C  6BCA               	clrf	(??_doModeVerbose+2)& (0+255),b
 14893  006C6E  6BCB               	clrf	(??_doModeVerbose+3)& (0+255),b
 14894  006C70  C0CA  F0CB         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14895  006C74  C0C9  F0CA         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14896  006C78  C0C8  F0C9         	movff	??_doModeVerbose,??_doModeVerbose+1
 14897  006C7C  6BC8               	clrf	??_doModeVerbose& (0+255),b
 14898  006C7E  0102               	movlb	2	; () banked
 14899  006C80  0012               	return	
 14900  006C82                     __end_ofPL40:
 14901                           	opt stack 0
 14902  006C82                     PL52:
 14903                           	opt stack 19
 14904  006C82  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14905  006C84  C2A3  F062         	movff	doModeVerbose@id_1222,?__CANIDToRegs+2
 14906  006C88  C2A4  F063         	movff	doModeVerbose@id_1222+1,?__CANIDToRegs+3
 14907  006C8C  C2A5  F064         	movff	doModeVerbose@id_1222+2,?__CANIDToRegs+4
 14908  006C90  C2A6  F065         	movff	doModeVerbose@id_1222+3,?__CANIDToRegs+5
 14909  006C94  0E01               	movlw	1
 14910  006C96  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14911  006C98  0C01               	retlw	1
 14912  006C9A                     __end_ofPL52:
 14913                           	opt stack 0
 14914  006C9A                     PL56:
 14915                           	opt stack 19
 14916  006C9A  0100               	movlb	0	; () banked
 14917  006C9C  6FCD               	movwf	(??_doModeVerbose+5)& (0+255),b
 14918  006C9E  6BCE               	clrf	(??_doModeVerbose+6)& (0+255),b
 14919  006CA0  6BCF               	clrf	(??_doModeVerbose+7)& (0+255),b
 14920  006CA2  C0CD  F0CF         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14921  006CA6  C0CC  F0CE         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14922  006CAA  6BCD               	clrf	(??_doModeVerbose+5)& (0+255),b
 14923  006CAC  6BCC               	clrf	(??_doModeVerbose+4)& (0+255),b
 14924  006CAE  0012               	return	
 14925  006CB0                     __end_ofPL56:
 14926                           	opt stack 0
 14927                           tblptru	equ	0xFF8
 14928                           tblptrh	equ	0xFF7
 14929                           tblptrl	equ	0xFF6
 14930                           tablat	equ	0xFF5
 14931                           prodh	equ	0xFF4
 14932                           prodl	equ	0xFF3
 14933                           intcon	equ	0xFF2
 14934                           indf0	equ	0xFEF
 14935                           postinc0	equ	0xFEE
 14936                           fsr0h	equ	0xFEA
 14937                           fsr0l	equ	0xFE9
 14938                           wreg	equ	0xFE8
 14939                           indf1	equ	0xFE7
 14940                           postinc1	equ	0xFE6
 14941                           postdec1	equ	0xFE5
 14942                           fsr1h	equ	0xFE2
 14943                           fsr1l	equ	0xFE1
 14944                           indf2	equ	0xFDF
 14945                           postinc2	equ	0xFDE
 14946                           postdec2	equ	0xFDD
 14947                           plusw2	equ	0xFDB
 14948                           fsr2h	equ	0xFDA
 14949                           fsr2l	equ	0xFD9
 14950                           status	equ	0xFD8
 14951                           
 14952 ;; *************** function _setFilter *****************
 14953 ;; Defined at:
 14954 ;;		line 2835 in file "main.c"
 14955 ;; Parameters:    Size  Location     Type
 14956 ;;  filter          1    wreg     unsigned char 
 14957 ;;  val             4    0[BANK0 ] unsigned long 
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;  filter          1   10[BANK0 ] unsigned char 
 14960 ;;  eidl            1   14[BANK0 ] unsigned char 
 14961 ;;  eidh            1   13[BANK0 ] unsigned char 
 14962 ;;  sidl            1   12[BANK0 ] unsigned char 
 14963 ;;  sidh            1   11[BANK0 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;		None               void
 14966 ;; Registers used:
 14967 ;;		wreg, status,2, status,0
 14968 ;; Tracked objects:
 14969 ;;		On entry : F/2
 14970 ;;		On exit  : F/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14973 ;;      Params:         0       4       0       0       0       0       0
 14974 ;;      Locals:         0       5       0       0       0       0       0
 14975 ;;      Temps:          0       6       0       0       0       0       0
 14976 ;;      Totals:         0      15       0       0       0       0       0
 14977 ;;Total ram usage:       15 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    3
 14980 ;; This function calls:
 14981 ;;		Nothing
 14982 ;; This function is called by:
 14983 ;;		_doModeVerbose
 14984 ;; This function uses a non-reentrant model
 14985 ;;
 14986                           
 14987                           	psect	text23
 14988  004446                     __ptext23:
 14989                           	opt stack 0
 14990  004446                     _setFilter:
 14991                           	opt stack 25
 14992                           
 14993                           ;incstack = 0
 14994                           ;incstack = 0
 14995                           ;setFilter@filter stored from wreg
 14996  004446  CFE8 F06A          	movff	wreg,setFilter@filter
 14997                           
 14998                           ; BSR set to: 2
 14999                           ;main.c: 2836: uint8_t sidh = (long) val >> 21L;
 15000  00444A  0E15               	movlw	21
 15001  00444C  0100               	movlb	0	; () banked
 15002  00444E  6F64               	movwf	??_setFilter& (0+255),b
 15003  004450  C060  F065         	movff	setFilter@val,??_setFilter+1
 15004  004454  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 15005  004458  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 15006  00445C  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 15007  004460                     u15715:
 15008  004460  6764               	tstfsz	??_setFilter& (0+255),b
 15009  004462  D001               	goto	u15716
 15010  004464  D007               	goto	u15717
 15011  004466                     u15716:
 15012  004466  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 15013  004468  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15014  00446A  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15015  00446C  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15016  00446E  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 15017  004470  2F64               	decfsz	??_setFilter& (0+255),f,b
 15018  004472  D7F6               	goto	u15715
 15019  004474                     u15717:
 15020  004474  5165               	movf	(??_setFilter+1)& (0+255),w,b
 15021  004476  6F6B               	movwf	setFilter@sidh& (0+255),b
 15022                           
 15023                           ;main.c: 2837: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 15024                           ;main.c: 2838: ((long) (val) & 0x03L) |
 15025                           ;main.c: 2839: 0x08;
 15026  004478  C060  F064         	movff	setFilter@val,??_setFilter
 15027  00447C  0E03               	movlw	3
 15028  00447E  1764               	andwf	??_setFilter& (0+255),f,b
 15029  004480  0E0D               	movlw	13
 15030  004482  6F65               	movwf	(??_setFilter+1)& (0+255),b
 15031  004484  C060  F066         	movff	setFilter@val,??_setFilter+2
 15032  004488  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 15033  00448C  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 15034  004490  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 15035  004494                     u15725:
 15036  004494  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 15037  004496  D001               	goto	u15726
 15038  004498  D007               	goto	u15727
 15039  00449A                     u15726:
 15040  00449A  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 15041  00449C  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 15042  00449E  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15043  0044A0  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15044  0044A2  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15045  0044A4  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 15046  0044A6  D7F6               	goto	u15725
 15047  0044A8                     u15727:
 15048  0044A8  5166               	movf	(??_setFilter+2)& (0+255),w,b
 15049  0044AA  0BE0               	andlw	224
 15050  0044AC  1164               	iorwf	??_setFilter& (0+255),w,b
 15051  0044AE  0908               	iorlw	8
 15052  0044B0  6F6C               	movwf	setFilter@sidl& (0+255),b
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;main.c: 2840: uint8_t eidh = (long) val >> 8L;
 15056  0044B2  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15057                           
 15058                           ; BSR set to: 0
 15059                           ;main.c: 2841: uint8_t eidl = val;
 15060  0044B6  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15061                           
 15062                           ;main.c: 2843: switch (filter) {
 15063  0044BA  D090               	goto	l12275
 15064  0044BC                     l1253:
 15065                           
 15066                           ; BSR set to: 0
 15067                           ;main.c: 2846: RXF0SIDH = sidh;
 15068  0044BC  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15069                           
 15070                           ;main.c: 2847: RXF0SIDL = sidl;
 15071  0044C0  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15072                           
 15073                           ;main.c: 2848: RXF0EIDH = eidh;
 15074  0044C4  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15075                           
 15076                           ;main.c: 2849: RXF0EIDL = eidl;
 15077  0044C8  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15078                           
 15079                           ;main.c: 2850: break;
 15080  0044CC  D0AA               	goto	l1270
 15081  0044CE                     l1255:
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;main.c: 2853: RXF1SIDH = sidh;
 15085  0044CE  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15086                           
 15087                           ;main.c: 2854: RXF1SIDL = sidl;
 15088  0044D2  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15089                           
 15090                           ;main.c: 2855: RXF1EIDH = eidh;
 15091  0044D6  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15092                           
 15093                           ;main.c: 2856: RXF1EIDL = eidl;
 15094  0044DA  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15095                           
 15096                           ;main.c: 2857: break;
 15097  0044DE  D0A1               	goto	l1270
 15098  0044E0                     l1256:
 15099                           
 15100                           ; BSR set to: 0
 15101                           ;main.c: 2860: RXF2SIDH = sidh;
 15102  0044E0  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15103                           
 15104                           ;main.c: 2861: RXF2SIDL = sidl;
 15105  0044E4  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15106                           
 15107                           ;main.c: 2862: RXF2EIDH = eidh;
 15108  0044E8  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15109                           
 15110                           ;main.c: 2863: RXF2EIDL = eidl;
 15111  0044EC  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15112                           
 15113                           ;main.c: 2864: break;
 15114  0044F0  D098               	goto	l1270
 15115  0044F2                     l1257:
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;main.c: 2867: RXF3SIDH = sidh;
 15119  0044F2  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15120                           
 15121                           ;main.c: 2868: RXF3SIDL = sidl;
 15122  0044F6  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15123                           
 15124                           ;main.c: 2869: RXF3EIDH = eidh;
 15125  0044FA  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15126                           
 15127                           ;main.c: 2870: RXF3EIDL = eidl;
 15128  0044FE  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15129                           
 15130                           ;main.c: 2871: break;
 15131  004502  D08F               	goto	l1270
 15132  004504                     l1258:
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;main.c: 2874: RXF4SIDH = sidh;
 15136  004504  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15137                           
 15138                           ;main.c: 2875: RXF4SIDL = sidl;
 15139  004508  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15140                           
 15141                           ;main.c: 2876: RXF4EIDH = eidh;
 15142  00450C  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15143                           
 15144                           ;main.c: 2877: RXF4EIDL = eidl;
 15145  004510  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15146                           
 15147                           ;main.c: 2878: break;
 15148  004514  D086               	goto	l1270
 15149  004516                     l1259:
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;main.c: 2881: RXF5SIDH = sidh;
 15153  004516  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15154                           
 15155                           ;main.c: 2882: RXF5SIDL = sidl;
 15156  00451A  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15157                           
 15158                           ;main.c: 2883: RXF5EIDH = eidh;
 15159  00451E  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15160                           
 15161                           ;main.c: 2884: RXF5EIDL = eidl;
 15162  004522  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15163                           
 15164                           ;main.c: 2885: break;
 15165  004526  D07D               	goto	l1270
 15166  004528                     l1260:
 15167                           
 15168                           ; BSR set to: 0
 15169                           ;main.c: 2888: RXF6SIDH = sidh;
 15170  004528  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15171                           
 15172                           ;main.c: 2889: RXF6SIDL = sidl;
 15173  00452C  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15174                           
 15175                           ;main.c: 2890: RXF6EIDH = eidh;
 15176  004530  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15177                           
 15178                           ;main.c: 2891: RXF6EIDL = eidl;
 15179  004534  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15180                           
 15181                           ;main.c: 2892: break;
 15182  004538  D074               	goto	l1270
 15183  00453A                     l1261:
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;main.c: 2895: RXF7SIDH = sidh;
 15187  00453A  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15188                           
 15189                           ;main.c: 2896: RXF7SIDL = sidl;
 15190  00453E  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15191                           
 15192                           ;main.c: 2897: RXF7EIDH = eidh;
 15193  004542  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15194                           
 15195                           ;main.c: 2898: RXF7EIDL = eidl;
 15196  004546  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15197                           
 15198                           ;main.c: 2899: break;
 15199  00454A  D06B               	goto	l1270
 15200  00454C                     l1262:
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;main.c: 2902: RXF8SIDH = sidh;
 15204  00454C  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15205                           
 15206                           ;main.c: 2903: RXF8SIDL = sidl;
 15207  004550  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15208                           
 15209                           ;main.c: 2904: RXF8EIDH = eidh;
 15210  004554  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15211                           
 15212                           ;main.c: 2905: RXF8EIDL = eidl;
 15213  004558  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15214                           
 15215                           ;main.c: 2906: break;
 15216  00455C  D062               	goto	l1270
 15217  00455E                     l1263:
 15218                           
 15219                           ; BSR set to: 0
 15220                           ;main.c: 2909: RXF9SIDH = sidh;
 15221  00455E  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15222                           
 15223                           ;main.c: 2910: RXF9SIDL = sidl;
 15224  004562  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15225                           
 15226                           ;main.c: 2911: RXF9EIDH = eidh;
 15227  004566  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15228                           
 15229                           ;main.c: 2912: RXF9EIDL = eidl;
 15230  00456A  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15231                           
 15232                           ;main.c: 2913: break;
 15233  00456E  D059               	goto	l1270
 15234  004570                     l1264:
 15235                           
 15236                           ; BSR set to: 0
 15237                           ;main.c: 2916: RXF10SIDH = sidh;
 15238  004570  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15239                           
 15240                           ;main.c: 2917: RXF10SIDL = sidl;
 15241  004574  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15242                           
 15243                           ;main.c: 2918: RXF10EIDH = eidh;
 15244  004578  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15245                           
 15246                           ;main.c: 2919: RXF10EIDL = eidl;
 15247  00457C  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15248                           
 15249                           ;main.c: 2920: break;
 15250  004580  D050               	goto	l1270
 15251  004582                     l1265:
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;main.c: 2923: RXF11SIDH = sidh;
 15255  004582  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15256                           
 15257                           ;main.c: 2924: RXF11SIDL = sidl;
 15258  004586  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15259                           
 15260                           ;main.c: 2925: RXF11EIDH = eidh;
 15261  00458A  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15262                           
 15263                           ;main.c: 2926: RXF11EIDL = eidl;
 15264  00458E  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15265                           
 15266                           ;main.c: 2927: break;
 15267  004592  D047               	goto	l1270
 15268  004594                     l1266:
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;main.c: 2930: RXF12SIDH = sidh;
 15272  004594  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15273                           
 15274                           ;main.c: 2931: RXF12SIDL = sidl;
 15275  004598  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15276                           
 15277                           ;main.c: 2932: RXF12EIDH = eidh;
 15278  00459C  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15279                           
 15280                           ;main.c: 2933: RXF12EIDL = eidl;
 15281  0045A0  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15282                           
 15283                           ;main.c: 2934: break;
 15284  0045A4  D03E               	goto	l1270
 15285  0045A6                     l1267:
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;main.c: 2937: RXF13SIDH = sidh;
 15289  0045A6  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15290                           
 15291                           ;main.c: 2938: RXF13SIDL = sidl;
 15292  0045AA  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15293                           
 15294                           ;main.c: 2939: RXF13EIDH = eidh;
 15295  0045AE  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15296                           
 15297                           ;main.c: 2940: RXF13EIDL = eidl;
 15298  0045B2  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15299                           
 15300                           ;main.c: 2941: break;
 15301  0045B6  D035               	goto	l1270
 15302  0045B8                     l1268:
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;main.c: 2944: RXF14SIDH = sidh;
 15306  0045B8  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15307                           
 15308                           ;main.c: 2945: RXF14SIDL = sidl;
 15309  0045BC  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15310                           
 15311                           ;main.c: 2946: RXF14EIDH = eidh;
 15312  0045C0  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15313                           
 15314                           ;main.c: 2947: RXF14EIDL = eidl;
 15315  0045C4  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15316                           
 15317                           ;main.c: 2948: break;
 15318  0045C8  D02C               	goto	l1270
 15319  0045CA                     l1269:
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;main.c: 2951: RXF15SIDH = sidh;
 15323  0045CA  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15324                           
 15325                           ;main.c: 2952: RXF15SIDL = sidl;
 15326  0045CE  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15327                           
 15328                           ;main.c: 2953: RXF15EIDH = eidh;
 15329  0045D2  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15330                           
 15331                           ;main.c: 2954: RXF15EIDL = eidl;
 15332  0045D6  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15333                           
 15334                           ;main.c: 2955: break;
 15335  0045DA  D023               	goto	l1270
 15336  0045DC                     l12275:
 15337                           
 15338                           ; BSR set to: 0
 15339  0045DC  516A               	movf	setFilter@filter& (0+255),w,b
 15340                           
 15341                           ; Switch size 1, requested type "space"
 15342                           ; Number of cases is 16, Range of values is 0 to 15
 15343                           ; switch strategies available:
 15344                           ; Name         Instructions Cycles
 15345                           ; simple_byte           49    25 (average)
 15346                           ;	Chosen strategy is simple_byte
 15347  0045DE  E101 D76D          	bz	l1253
 15348  0045E2  0A01               	xorlw	1	; case 1
 15349  0045E4  E101 D773          	bz	l1255
 15350  0045E8  0A03               	xorlw	3	; case 2
 15351  0045EA  E101 D779          	bz	l1256
 15352  0045EE  0A01               	xorlw	1	; case 3
 15353  0045F0  E080               	bz	l1257
 15354  0045F2  0A07               	xorlw	7	; case 4
 15355  0045F4  E087               	bz	l1258
 15356  0045F6  0A01               	xorlw	1	; case 5
 15357  0045F8  E08E               	bz	l1259
 15358  0045FA  0A03               	xorlw	3	; case 6
 15359  0045FC  E095               	bz	l1260
 15360  0045FE  0A01               	xorlw	1	; case 7
 15361  004600  E09C               	bz	l1261
 15362  004602  0A0F               	xorlw	15	; case 8
 15363  004604  E0A3               	bz	l1262
 15364  004606  0A01               	xorlw	1	; case 9
 15365  004608  E0AA               	bz	l1263
 15366  00460A  0A03               	xorlw	3	; case 10
 15367  00460C  E0B1               	bz	l1264
 15368  00460E  0A01               	xorlw	1	; case 11
 15369  004610  E0B8               	bz	l1265
 15370  004612  0A07               	xorlw	7	; case 12
 15371  004614  E0BF               	bz	l1266
 15372  004616  0A01               	xorlw	1	; case 13
 15373  004618  E0C6               	bz	l1267
 15374  00461A  0A03               	xorlw	3	; case 14
 15375  00461C  E0CD               	bz	l1268
 15376  00461E  0A01               	xorlw	1	; case 15
 15377  004620  E0D4               	bz	l1269
 15378  004622                     l1270:
 15379                           
 15380                           ; BSR set to: 0
 15381  004622  0012               	return	
 15382  004624                     __end_of_setFilter:
 15383                           	opt stack 0
 15384                           tblptru	equ	0xFF8
 15385                           tblptrh	equ	0xFF7
 15386                           tblptrl	equ	0xFF6
 15387                           tablat	equ	0xFF5
 15388                           prodh	equ	0xFF4
 15389                           prodl	equ	0xFF3
 15390                           intcon	equ	0xFF2
 15391                           indf0	equ	0xFEF
 15392                           postinc0	equ	0xFEE
 15393                           fsr0h	equ	0xFEA
 15394                           fsr0l	equ	0xFE9
 15395                           wreg	equ	0xFE8
 15396                           indf1	equ	0xFE7
 15397                           postinc1	equ	0xFE6
 15398                           postdec1	equ	0xFE5
 15399                           fsr1h	equ	0xFE2
 15400                           fsr1l	equ	0xFE1
 15401                           indf2	equ	0xFDF
 15402                           postinc2	equ	0xFDE
 15403                           postdec2	equ	0xFDD
 15404                           plusw2	equ	0xFDB
 15405                           fsr2h	equ	0xFDA
 15406                           fsr2l	equ	0xFD9
 15407                           status	equ	0xFD8
 15408                           
 15409 ;; *************** function _writeRegisterExtended *****************
 15410 ;; Defined at:
 15411 ;;		line 2398 in file "main.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;  nodeid          1    wreg     unsigned char 
 15414 ;;  page            2   84[BANK0 ] unsigned short 
 15415 ;;  reg             1   86[BANK0 ] unsigned char 
 15416 ;;  timeout         2   87[BANK0 ] unsigned short 
 15417 ;;  value           2   89[BANK0 ] PTR unsigned char 
 15418 ;;		 -> doModeVerbose@value_1164(1), 
 15419 ;; Auto vars:     Size  Location     Type
 15420 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15421 ;; Return value:  Size  Location     Type
 15422 ;;                  1    wreg      enum E15660
 15423 ;; Registers used:
 15424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15425 ;; Tracked objects:
 15426 ;;		On entry : F/2
 15427 ;;		On exit  : E/0
 15428 ;;		Unchanged: 0/0
 15429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15430 ;;      Params:         0       7       0       0       0       0       0
 15431 ;;      Locals:         0       1       0       0       0       0       0
 15432 ;;      Temps:          0       4       0       0       0       0       0
 15433 ;;      Totals:         0      12       0       0       0       0       0
 15434 ;;Total ram usage:       12 bytes
 15435 ;; Hardware stack levels used:    1
 15436 ;; Hardware stack levels required when called:    7
 15437 ;; This function calls:
 15438 ;;		_sendVSCPFrame
 15439 ;;		_getVSCPFrame
 15440 ;; This function is called by:
 15441 ;;		_doModeVerbose
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           	psect	text24
 15446  003078                     __ptext24:
 15447                           	opt stack 0
 15448  003078                     _writeRegisterExtended:
 15449                           	opt stack 21
 15450                           
 15451                           ; BSR set to: 0
 15452                           ;incstack = 0
 15453                           ;incstack = 0
 15454                           ;writeRegisterExtended@nodeid stored from wreg
 15455  003078  CFE8 F0BF          	movff	wreg,writeRegisterExtended@nodeid
 15456                           
 15457                           ; BSR set to: 2
 15458                           ;main.c: 2399: vscpData[ 0 ] = nodeid;
 15459  00307C  C0BF  F1DC         	movff	writeRegisterExtended@nodeid,_vscpData
 15460                           
 15461                           ; BSR set to: 2
 15462                           ;main.c: 2400: vscpData[ 1 ] = page >> 8;
 15463  003080  0100               	movlb	0	; () banked
 15464  003082  51B5               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15465  003084  0101               	movlb	1	; () banked
 15466  003086  6FDD               	movwf	(_vscpData+1)& (0+255),b
 15467                           
 15468                           ; BSR set to: 1
 15469                           ;main.c: 2401: vscpData[ 2 ] = page & 0xff;
 15470  003088  C0B4  F1DE         	movff	writeRegisterExtended@page,_vscpData+2
 15471                           
 15472                           ; BSR set to: 1
 15473                           ;main.c: 2402: vscpData[ 3 ] = reg;
 15474  00308C  C0B6  F1DF         	movff	writeRegisterExtended@reg,_vscpData+3
 15475                           
 15476                           ; BSR set to: 1
 15477                           ;main.c: 2403: vscpData[ 4 ] = *value;
 15478  003090  C0B9  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15479  003094  C0BA  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15480  003098  50DF               	movf	indf2,w,c
 15481  00309A  6FE0               	movwf	(_vscpData+4)& (0+255),b
 15482                           
 15483                           ; BSR set to: 1
 15484                           ;main.c: 2405: if (sendVSCPFrame(0,
 15485                           ;main.c: 2406: 38,
 15486                           ;main.c: 2407: 0,
 15487                           ;main.c: 2408: 0,
 15488                           ;main.c: 2409: 5,
 15489                           ;main.c: 2410: vscpData)) {
 15490  00309C  0100               	movlb	0	; () banked
 15491  00309E  6B95               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15492  0030A0  6B94               	clrf	?_sendVSCPFrame& (0+255),b
 15493  0030A2  0E26               	movlw	38
 15494  0030A4  6F96               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15495  0030A6  6B97               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15496  0030A8  6B98               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15497  0030AA  0E05               	movlw	5
 15498  0030AC  6F99               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15499  0030AE  0E01               	movlw	high _vscpData
 15500  0030B0  6F9B               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15501  0030B2  0EDC               	movlw	low _vscpData
 15502  0030B4  6F9A               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15503  0030B6  EC8D  F014         	call	_sendVSCPFrame	;wreg free
 15504  0030BA  0900               	iorlw	0
 15505  0030BC  E051               	bz	l15329
 15506                           
 15507                           ;main.c: 2412: timekeeper = 0;
 15508  0030BE  6A23               	clrf	_timekeeper,c	;volatile
 15509  0030C0  6A24               	clrf	_timekeeper+1,c	;volatile
 15510  0030C2  6A25               	clrf	_timekeeper+2,c	;volatile
 15511  0030C4  6A26               	clrf	_timekeeper+3,c	;volatile
 15512                           
 15513                           ;main.c: 2413: while (timekeeper < timeout) {
 15514  0030C6  D03C               	goto	l15327
 15515  0030C8                     l1110:
 15516                           
 15517                           ; BSR set to: 0
 15518  0030C8  0004               	clrwdt		;# 
 15519                           
 15520                           ;main.c: 2417: if (getVSCPFrame(&vscpClass,
 15521                           ;main.c: 2418: &vscpType,
 15522                           ;main.c: 2419: &vscpNodeId,
 15523                           ;main.c: 2420: &vscpPriority,
 15524                           ;main.c: 2421: &vscpSize,
 15525                           ;main.c: 2422: vscpData)) {
 15526  0030CA  0100               	movlb	0	; () banked
 15527  0030CC  0EEC               	movlw	low _vscpType
 15528  0030CE  6F71               	movwf	?_getVSCPFrame& (0+255),b
 15529  0030D0  0EE9               	movlw	low _vscpNodeId
 15530  0030D2  6F72               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15531  0030D4  0EEA               	movlw	low _vscpPriority
 15532  0030D6  6F73               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15533  0030D8  0EEB               	movlw	low _vscpSize
 15534  0030DA  6F74               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15535  0030DC  0E01               	movlw	high _vscpData
 15536  0030DE  6F76               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15537  0030E0  0EDC               	movlw	low _vscpData
 15538  0030E2  6F75               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15539  0030E4  0E3B               	movlw	_vscpClass& (0+255)
 15540  0030E6  EC9D  F010         	call	_getVSCPFrame
 15541  0030EA  0900               	iorlw	0
 15542  0030EC  E029               	bz	l15327
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;main.c: 2424: if ((nodeid == vscpNodeId) &&
 15546                           ;main.c: 2425: (5 == vscpSize) &&
 15547                           ;main.c: 2426: (0 == vscpData[ 0 ]) &&
 15548                           ;main.c: 2427: ((page >> 8) == vscpData[ 1 ]) &&
 15549                           ;main.c: 2428: ((page & 0xff) == vscpData[ 2 ]) &&
 15550                           ;main.c: 2429: (reg == vscpData[ 3 ]) &&
 15551                           ;main.c: 2430: (*value == vscpData[ 4 ])) {
 15552  0030EE  51E9               	movf	_vscpNodeId& (0+255),w,b
 15553  0030F0  63BF               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15554  0030F2  D026               	goto	l15327
 15555                           
 15556                           ; BSR set to: 0
 15557  0030F4  51EB               	movf	_vscpSize& (0+255),w,b
 15558  0030F6  0A05               	xorlw	5
 15559  0030F8  E123               	bnz	l15327
 15560                           
 15561                           ; BSR set to: 0
 15562  0030FA  0101               	movlb	1	; () banked
 15563  0030FC  67DC               	tstfsz	_vscpData& (0+255),b
 15564  0030FE  D020               	goto	l15327
 15565                           
 15566                           ; BSR set to: 1
 15567  003100  0100               	movlb	0	; () banked
 15568  003102  51B5               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15569  003104  0101               	movlb	1	; () banked
 15570  003106  19DD               	xorwf	(_vscpData+1)& (0+255),w,b
 15571  003108  E11B               	bnz	l15327
 15572                           
 15573                           ; BSR set to: 1
 15574  00310A  0100               	movlb	0	; () banked
 15575  00310C  51B4               	movf	writeRegisterExtended@page& (0+255),w,b
 15576  00310E  EE21  F0DE         	lfsr	2,_vscpData+2
 15577  003112  62DF               	cpfseq	indf2,c
 15578  003114  D015               	goto	l15327
 15579                           
 15580                           ; BSR set to: 1
 15581  003116  51B6               	movf	writeRegisterExtended@reg& (0+255),w,b
 15582  003118  0101               	movlb	1	; () banked
 15583  00311A  EE21  F0DF         	lfsr	2,_vscpData+3
 15584  00311E  62DF               	cpfseq	indf2,c
 15585  003120  D00F               	goto	l15327
 15586                           
 15587                           ; BSR set to: 1
 15588  003122  51E0               	movf	(_vscpData+4)& (0+255),w,b
 15589  003124  C0B9  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15590  003128  C0BA  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15591  00312C  62DF               	cpfseq	indf2,c
 15592  00312E  D008               	goto	l15327
 15593                           
 15594                           ; BSR set to: 1
 15595                           ;main.c: 2431: *value = vscpData[ 1 ];
 15596  003130  C0B9  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15597  003134  C0BA  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15598  003138  C1DD  FFDF         	movff	_vscpData+1,indf2
 15599                           
 15600                           ; BSR set to: 1
 15601                           ;main.c: 2432: return 1;
 15602  00313C  0E01               	movlw	1
 15603  00313E  D011               	goto	l1113
 15604  003140                     l15327:
 15605  003140  0100               	movlb	0	; () banked
 15606  003142  51B7               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15607  003144  6FBB               	movwf	??_writeRegisterExtended& (0+255),b
 15608  003146  51B8               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15609  003148  6FBC               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15610  00314A  6BBD               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15611  00314C  6BBE               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15612  00314E  51BB               	movf	??_writeRegisterExtended& (0+255),w,b
 15613  003150  5C23               	subwf	_timekeeper,w,c	;volatile
 15614  003152  51BC               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15615  003154  5824               	subwfb	_timekeeper+1,w,c	;volatile
 15616  003156  51BD               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15617  003158  5825               	subwfb	_timekeeper+2,w,c	;volatile
 15618  00315A  51BE               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15619  00315C  5826               	subwfb	_timekeeper+3,w,c	;volatile
 15620  00315E  E3B4               	bnc	l1110
 15621  003160                     l15329:
 15622                           
 15623                           ;main.c: 2433: }
 15624                           ;main.c: 2435: }
 15625                           ;main.c: 2437: }
 15626                           ;main.c: 2439: }
 15627                           ;main.c: 2441: return 0;
 15628  003160  0E00               	movlw	0
 15629  003162                     l1113:
 15630  003162  0012               	return	
 15631  003164                     __end_of_writeRegisterExtended:
 15632                           	opt stack 0
 15633                           tblptru	equ	0xFF8
 15634                           tblptrh	equ	0xFF7
 15635                           tblptrl	equ	0xFF6
 15636                           tablat	equ	0xFF5
 15637                           prodh	equ	0xFF4
 15638                           prodl	equ	0xFF3
 15639                           intcon	equ	0xFF2
 15640                           indf0	equ	0xFEF
 15641                           postinc0	equ	0xFEE
 15642                           fsr0h	equ	0xFEA
 15643                           fsr0l	equ	0xFE9
 15644                           wreg	equ	0xFE8
 15645                           indf1	equ	0xFE7
 15646                           postinc1	equ	0xFE6
 15647                           postdec1	equ	0xFE5
 15648                           fsr1h	equ	0xFE2
 15649                           fsr1l	equ	0xFE1
 15650                           indf2	equ	0xFDF
 15651                           postinc2	equ	0xFDE
 15652                           postdec2	equ	0xFDD
 15653                           plusw2	equ	0xFDB
 15654                           fsr2h	equ	0xFDA
 15655                           fsr2l	equ	0xFD9
 15656                           status	equ	0xFD8
 15657                           
 15658 ;; *************** function _printBinary *****************
 15659 ;; Defined at:
 15660 ;;		line 2485 in file "main.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;  value           1    wreg     unsigned char 
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;  value           1    2[BANK0 ] unsigned char 
 15665 ;;  i               2    3[BANK0 ] int 
 15666 ;; Return value:  Size  Location     Type
 15667 ;;		None               void
 15668 ;; Registers used:
 15669 ;;		wreg, status,2, status,0, cstack
 15670 ;; Tracked objects:
 15671 ;;		On entry : F/2
 15672 ;;		On exit  : F/0
 15673 ;;		Unchanged: 0/0
 15674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15675 ;;      Params:         0       0       0       0       0       0       0
 15676 ;;      Locals:         0       3       0       0       0       0       0
 15677 ;;      Temps:          0       2       0       0       0       0       0
 15678 ;;      Totals:         0       5       0       0       0       0       0
 15679 ;;Total ram usage:        5 bytes
 15680 ;; Hardware stack levels used:    1
 15681 ;; Hardware stack levels required when called:    4
 15682 ;; This function calls:
 15683 ;;		_WriteUSART
 15684 ;; This function is called by:
 15685 ;;		_doModeVerbose
 15686 ;; This function uses a non-reentrant model
 15687 ;;
 15688                           
 15689                           	psect	text25
 15690  001B66                     __ptext25:
 15691                           	opt stack 0
 15692  001B66                     _printBinary:
 15693                           	opt stack 24
 15694                           
 15695                           ;incstack = 0
 15696                           ;incstack = 0
 15697                           ;printBinary@value stored from wreg
 15698  001B66  CFE8 F062          	movff	wreg,printBinary@value
 15699                           
 15700                           ; BSR set to: 2
 15701                           ;main.c: 2486: int i;
 15702                           ;main.c: 2488: for (i = 7; i >= 0; i--) {
 15703  001B6A  0100               	movlb	0	; () banked
 15704  001B6C  6B64               	clrf	(printBinary@i+1)& (0+255),b
 15705  001B6E  0E07               	movlw	7
 15706  001B70  6F63               	movwf	printBinary@i& (0+255),b
 15707  001B72                     l15279:
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;main.c: 2489: if (value & (1 << i)) {
 15711  001B72  C063  F060         	movff	printBinary@i,??_printBinary
 15712  001B76  0E01               	movlw	1
 15713  001B78  6F61               	movwf	(??_printBinary+1)& (0+255),b
 15714  001B7A  2B60               	incf	??_printBinary& (0+255),f,b
 15715  001B7C  D002               	goto	u20794
 15716  001B7E                     u20795:
 15717  001B7E  90D8               	bcf	status,0,c
 15718  001B80  3761               	rlcf	(??_printBinary+1)& (0+255),f,b
 15719  001B82                     u20794:
 15720  001B82  2F60               	decfsz	??_printBinary& (0+255),f,b
 15721  001B84  D7FC               	goto	u20795
 15722  001B86  5161               	movf	(??_printBinary+1)& (0+255),w,b
 15723  001B88  1562               	andwf	printBinary@value& (0+255),w,b
 15724  001B8A  E006               	bz	l1133
 15725  001B8C                     l1129:
 15726  001B8C  A2AC               	btfss	4012,1,c	;volatile
 15727  001B8E  D7FE               	goto	l1129
 15728                           
 15729                           ;main.c: 2491: WriteUSART('1');
 15730  001B90  0E31               	movlw	49
 15731  001B92  EC4B  F00B         	call	_WriteUSART
 15732                           
 15733                           ;main.c: 2492: } else {
 15734  001B96  D005               	goto	l15287
 15735  001B98                     l1133:
 15736  001B98  A2AC               	btfss	4012,1,c	;volatile
 15737  001B9A  D7FE               	goto	l1133
 15738                           
 15739                           ;main.c: 2494: WriteUSART('0');
 15740  001B9C  0E30               	movlw	48
 15741  001B9E  EC4B  F00B         	call	_WriteUSART
 15742  001BA2                     l15287:
 15743  001BA2  0100               	movlb	0	; () banked
 15744  001BA4  0763               	decf	printBinary@i& (0+255),f,b
 15745  001BA6  A0D8               	btfss	status,0,c
 15746  001BA8  0764               	decf	(printBinary@i+1)& (0+255),f,b
 15747                           
 15748                           ; BSR set to: 0
 15749  001BAA  BF64               	btfsc	(printBinary@i+1)& (0+255),7,b
 15750                           
 15751                           ; BSR set to: 0
 15752  001BAC  0012               	return	
 15753  001BAE  D7E1               	goto	l15279
 15754  001BB0                     __end_of_printBinary:
 15755                           	opt stack 0
 15756                           tblptru	equ	0xFF8
 15757                           tblptrh	equ	0xFF7
 15758                           tblptrl	equ	0xFF6
 15759                           tablat	equ	0xFF5
 15760                           prodh	equ	0xFF4
 15761                           prodl	equ	0xFF3
 15762                           intcon	equ	0xFF2
 15763                           indf0	equ	0xFEF
 15764                           postinc0	equ	0xFEE
 15765                           fsr0h	equ	0xFEA
 15766                           fsr0l	equ	0xFE9
 15767                           wreg	equ	0xFE8
 15768                           indf1	equ	0xFE7
 15769                           postinc1	equ	0xFE6
 15770                           postdec1	equ	0xFE5
 15771                           fsr1h	equ	0xFE2
 15772                           fsr1l	equ	0xFE1
 15773                           indf2	equ	0xFDF
 15774                           postinc2	equ	0xFDE
 15775                           postdec2	equ	0xFDD
 15776                           plusw2	equ	0xFDB
 15777                           fsr2h	equ	0xFDA
 15778                           fsr2l	equ	0xFD9
 15779                           status	equ	0xFD8
 15780                           
 15781 ;; *************** function _readRegisterExtended *****************
 15782 ;; Defined at:
 15783 ;;		line 2297 in file "main.c"
 15784 ;; Parameters:    Size  Location     Type
 15785 ;;  nodeid          1    wreg     unsigned char 
 15786 ;;  page            2   84[BANK0 ] unsigned short 
 15787 ;;  reg             1   86[BANK0 ] unsigned char 
 15788 ;;  timeout         2   87[BANK0 ] unsigned short 
 15789 ;;  value           2   89[BANK0 ] PTR unsigned char 
 15790 ;;		 -> doModeVerbose@value(1), 
 15791 ;; Auto vars:     Size  Location     Type
 15792 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15793 ;; Return value:  Size  Location     Type
 15794 ;;                  1    wreg      enum E15660
 15795 ;; Registers used:
 15796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15797 ;; Tracked objects:
 15798 ;;		On entry : F/2
 15799 ;;		On exit  : E/0
 15800 ;;		Unchanged: 0/0
 15801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15802 ;;      Params:         0       7       0       0       0       0       0
 15803 ;;      Locals:         0       1       0       0       0       0       0
 15804 ;;      Temps:          0       4       0       0       0       0       0
 15805 ;;      Totals:         0      12       0       0       0       0       0
 15806 ;;Total ram usage:       12 bytes
 15807 ;; Hardware stack levels used:    1
 15808 ;; Hardware stack levels required when called:    7
 15809 ;; This function calls:
 15810 ;;		_sendVSCPFrame
 15811 ;;		_getVSCPFrame
 15812 ;; This function is called by:
 15813 ;;		_doModeVerbose
 15814 ;; This function uses a non-reentrant model
 15815 ;;
 15816                           
 15817                           	psect	text26
 15818  002DC8                     __ptext26:
 15819                           	opt stack 0
 15820  002DC8                     _readRegisterExtended:
 15821                           	opt stack 21
 15822                           
 15823                           ; BSR set to: 0
 15824                           ;incstack = 0
 15825                           ;incstack = 0
 15826                           ;readRegisterExtended@nodeid stored from wreg
 15827  002DC8  CFE8 F0BF          	movff	wreg,readRegisterExtended@nodeid
 15828                           
 15829                           ; BSR set to: 2
 15830                           ;main.c: 2298: vscpData[ 0 ] = nodeid;
 15831  002DCC  C0BF  F1DC         	movff	readRegisterExtended@nodeid,_vscpData
 15832                           
 15833                           ; BSR set to: 2
 15834                           ;main.c: 2299: vscpData[ 1 ] = page >> 8;
 15835  002DD0  0100               	movlb	0	; () banked
 15836  002DD2  51B5               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15837  002DD4  0101               	movlb	1	; () banked
 15838  002DD6  6FDD               	movwf	(_vscpData+1)& (0+255),b
 15839                           
 15840                           ; BSR set to: 1
 15841                           ;main.c: 2300: vscpData[ 2 ] = page & 0xff;
 15842  002DD8  C0B4  F1DE         	movff	readRegisterExtended@page,_vscpData+2
 15843                           
 15844                           ; BSR set to: 1
 15845                           ;main.c: 2301: vscpData[ 3 ] = reg;
 15846  002DDC  C0B6  F1DF         	movff	readRegisterExtended@reg,_vscpData+3
 15847                           
 15848                           ; BSR set to: 1
 15849                           ;main.c: 2302: vscpData[ 4 ] = 1;
 15850  002DE0  0E01               	movlw	1
 15851  002DE2  6FE0               	movwf	(_vscpData+4)& (0+255),b
 15852                           
 15853                           ; BSR set to: 1
 15854                           ;main.c: 2304: if (sendVSCPFrame(0,
 15855                           ;main.c: 2305: 37,
 15856                           ;main.c: 2306: 0,
 15857                           ;main.c: 2307: 0,
 15858                           ;main.c: 2308: 5,
 15859                           ;main.c: 2309: vscpData)) {
 15860  002DE4  0100               	movlb	0	; () banked
 15861  002DE6  6B95               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15862  002DE8  6B94               	clrf	?_sendVSCPFrame& (0+255),b
 15863  002DEA  0E25               	movlw	37
 15864  002DEC  6F96               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15865  002DEE  6B97               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15866  002DF0  6B98               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15867  002DF2  0E05               	movlw	5
 15868  002DF4  6F99               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15869  002DF6  0E01               	movlw	high _vscpData
 15870  002DF8  6F9B               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15871  002DFA  0EDC               	movlw	low _vscpData
 15872  002DFC  6F9A               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15873  002DFE  EC8D  F014         	call	_sendVSCPFrame	;wreg free
 15874  002E02  0900               	iorlw	0
 15875  002E04  E050               	bz	l14927
 15876                           
 15877                           ;main.c: 2311: timekeeper = 0;
 15878  002E06  6A23               	clrf	_timekeeper,c	;volatile
 15879  002E08  6A24               	clrf	_timekeeper+1,c	;volatile
 15880  002E0A  6A25               	clrf	_timekeeper+2,c	;volatile
 15881  002E0C  6A26               	clrf	_timekeeper+3,c	;volatile
 15882                           
 15883                           ;main.c: 2312: while (timekeeper < timeout) {
 15884  002E0E  D03B               	goto	l14925
 15885  002E10                     l1092:
 15886                           
 15887                           ; BSR set to: 0
 15888  002E10  0004               	clrwdt		;# 
 15889                           
 15890                           ;main.c: 2316: if (getVSCPFrame(&vscpClass,
 15891                           ;main.c: 2317: &vscpType,
 15892                           ;main.c: 2318: &vscpNodeId,
 15893                           ;main.c: 2319: &vscpPriority,
 15894                           ;main.c: 2320: &vscpSize,
 15895                           ;main.c: 2321: vscpData)) {
 15896  002E12  0100               	movlb	0	; () banked
 15897  002E14  0EEC               	movlw	low _vscpType
 15898  002E16  6F71               	movwf	?_getVSCPFrame& (0+255),b
 15899  002E18  0EE9               	movlw	low _vscpNodeId
 15900  002E1A  6F72               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15901  002E1C  0EEA               	movlw	low _vscpPriority
 15902  002E1E  6F73               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15903  002E20  0EEB               	movlw	low _vscpSize
 15904  002E22  6F74               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15905  002E24  0E01               	movlw	high _vscpData
 15906  002E26  6F76               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15907  002E28  0EDC               	movlw	low _vscpData
 15908  002E2A  6F75               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15909  002E2C  0E3B               	movlw	_vscpClass& (0+255)
 15910  002E2E  EC9D  F010         	call	_getVSCPFrame
 15911  002E32  0900               	iorlw	0
 15912  002E34  E028               	bz	l14925
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;main.c: 2322: if ((nodeid == vscpNodeId) &&
 15916                           ;main.c: 2323: (0 == vscpClass) &&
 15917                           ;main.c: 2324: (39 == vscpType) &&
 15918                           ;main.c: 2325: (5 == vscpSize) &&
 15919                           ;main.c: 2326: (0 == vscpData[ 0 ]) &&
 15920                           ;main.c: 2327: ((page >> 8) == vscpData[ 1 ]) &&
 15921                           ;main.c: 2328: ((page & 0xff) == vscpData[ 2 ]) &&
 15922                           ;main.c: 2329: (reg == vscpData[ 3 ])) {
 15923  002E36  51E9               	movf	_vscpNodeId& (0+255),w,b
 15924  002E38  63BF               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15925  002E3A  D025               	goto	l14925
 15926                           
 15927                           ; BSR set to: 0
 15928  002E3C  503C               	movf	_vscpClass+1,w,c
 15929  002E3E  103B               	iorwf	_vscpClass,w,c
 15930  002E40  E122               	bnz	l14925
 15931                           
 15932                           ; BSR set to: 0
 15933  002E42  51EC               	movf	_vscpType& (0+255),w,b
 15934  002E44  0A27               	xorlw	39
 15935  002E46  E11F               	bnz	l14925
 15936                           
 15937                           ; BSR set to: 0
 15938  002E48  51EB               	movf	_vscpSize& (0+255),w,b
 15939  002E4A  0A05               	xorlw	5
 15940  002E4C  E11C               	bnz	l14925
 15941                           
 15942                           ; BSR set to: 0
 15943  002E4E  0101               	movlb	1	; () banked
 15944  002E50  67DC               	tstfsz	_vscpData& (0+255),b
 15945  002E52  D019               	goto	l14925
 15946                           
 15947                           ; BSR set to: 1
 15948  002E54  0100               	movlb	0	; () banked
 15949  002E56  51B5               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15950  002E58  0101               	movlb	1	; () banked
 15951  002E5A  19DD               	xorwf	(_vscpData+1)& (0+255),w,b
 15952  002E5C  E114               	bnz	l14925
 15953                           
 15954                           ; BSR set to: 1
 15955  002E5E  0100               	movlb	0	; () banked
 15956  002E60  51B4               	movf	readRegisterExtended@page& (0+255),w,b
 15957  002E62  EE21  F0DE         	lfsr	2,_vscpData+2
 15958  002E66  62DF               	cpfseq	indf2,c
 15959  002E68  D00E               	goto	l14925
 15960                           
 15961                           ; BSR set to: 1
 15962  002E6A  51B6               	movf	readRegisterExtended@reg& (0+255),w,b
 15963  002E6C  0101               	movlb	1	; () banked
 15964  002E6E  EE21  F0DF         	lfsr	2,_vscpData+3
 15965  002E72  62DF               	cpfseq	indf2,c
 15966  002E74  D008               	goto	l14925
 15967                           
 15968                           ; BSR set to: 1
 15969                           ;main.c: 2330: *value = vscpData[ 4 ];
 15970  002E76  C0B9  FFD9         	movff	readRegisterExtended@value,fsr2l
 15971  002E7A  C0BA  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15972  002E7E  C1E0  FFDF         	movff	_vscpData+4,indf2
 15973                           
 15974                           ; BSR set to: 1
 15975                           ;main.c: 2331: return 1;
 15976  002E82  0E01               	movlw	1
 15977  002E84  D011               	goto	l1095
 15978  002E86                     l14925:
 15979  002E86  0100               	movlb	0	; () banked
 15980  002E88  51B7               	movf	readRegisterExtended@timeout& (0+255),w,b
 15981  002E8A  6FBB               	movwf	??_readRegisterExtended& (0+255),b
 15982  002E8C  51B8               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15983  002E8E  6FBC               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15984  002E90  6BBD               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15985  002E92  6BBE               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15986  002E94  51BB               	movf	??_readRegisterExtended& (0+255),w,b
 15987  002E96  5C23               	subwf	_timekeeper,w,c	;volatile
 15988  002E98  51BC               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15989  002E9A  5824               	subwfb	_timekeeper+1,w,c	;volatile
 15990  002E9C  51BD               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15991  002E9E  5825               	subwfb	_timekeeper+2,w,c	;volatile
 15992  002EA0  51BE               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15993  002EA2  5826               	subwfb	_timekeeper+3,w,c	;volatile
 15994  002EA4  E3B5               	bnc	l1092
 15995  002EA6                     l14927:
 15996                           
 15997                           ;main.c: 2332: }
 15998                           ;main.c: 2333: }
 15999                           ;main.c: 2334: }
 16000                           ;main.c: 2335: }
 16001                           ;main.c: 2337: return 0;
 16002  002EA6  0E00               	movlw	0
 16003  002EA8                     l1095:
 16004  002EA8  0012               	return	
 16005  002EAA                     __end_of_readRegisterExtended:
 16006                           	opt stack 0
 16007                           tblptru	equ	0xFF8
 16008                           tblptrh	equ	0xFF7
 16009                           tblptrl	equ	0xFF6
 16010                           tablat	equ	0xFF5
 16011                           prodh	equ	0xFF4
 16012                           prodl	equ	0xFF3
 16013                           intcon	equ	0xFF2
 16014                           indf0	equ	0xFEF
 16015                           postinc0	equ	0xFEE
 16016                           fsr0h	equ	0xFEA
 16017                           fsr0l	equ	0xFE9
 16018                           wreg	equ	0xFE8
 16019                           indf1	equ	0xFE7
 16020                           postinc1	equ	0xFE6
 16021                           postdec1	equ	0xFE5
 16022                           fsr1h	equ	0xFE2
 16023                           fsr1l	equ	0xFE1
 16024                           indf2	equ	0xFDF
 16025                           postinc2	equ	0xFDE
 16026                           postdec2	equ	0xFDD
 16027                           plusw2	equ	0xFDB
 16028                           fsr2h	equ	0xFDA
 16029                           fsr2l	equ	0xFD9
 16030                           status	equ	0xFD8
 16031                           
 16032 ;; *************** function _strcpy *****************
 16033 ;; Defined at:
 16034 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16035 ;; Parameters:    Size  Location     Type
 16036 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16037 ;;		 -> cmdbuf(80), 
 16038 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16039 ;;		 -> cmdbuf(80), 
 16040 ;; Auto vars:     Size  Location     Type
 16041 ;;  cp              2   32[COMRAM] PTR unsigned char 
 16042 ;;		 -> cmdbuf(80), 
 16043 ;; Return value:  Size  Location     Type
 16044 ;;                  2    0[BANK0 ] PTR unsigned char 
 16045 ;; Registers used:
 16046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16047 ;; Tracked objects:
 16048 ;;		On entry : F/0
 16049 ;;		On exit  : F/0
 16050 ;;		Unchanged: 0/0
 16051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16052 ;;      Params:         0       4       0       0       0       0       0
 16053 ;;      Locals:         2       0       0       0       0       0       0
 16054 ;;      Temps:          0       0       0       0       0       0       0
 16055 ;;      Totals:         2       4       0       0       0       0       0
 16056 ;;Total ram usage:        6 bytes
 16057 ;; Hardware stack levels used:    1
 16058 ;; Hardware stack levels required when called:    3
 16059 ;; This function calls:
 16060 ;;		Nothing
 16061 ;; This function is called by:
 16062 ;;		_doModeVerbose
 16063 ;; This function uses a non-reentrant model
 16064 ;;
 16065                           
 16066                           	psect	text27
 16067  001762                     __ptext27:
 16068                           	opt stack 0
 16069  001762                     _strcpy:
 16070                           	opt stack 25
 16071                           
 16072                           ; BSR set to: 0
 16073                           
 16074                           ;incstack = 0
 16075                           ;incstack = 0
 16076  001762  C060  F021         	movff	strcpy@to,strcpy@cp
 16077  001766  C061  F022         	movff	strcpy@to+1,strcpy@cp+1
 16078  00176A  D004               	goto	l11717
 16079  00176C                     l11715:
 16080                           
 16081                           ; BSR set to: 0
 16082  00176C  4A21               	infsnz	strcpy@cp,f,c
 16083  00176E  2A22               	incf	strcpy@cp+1,f,c
 16084  001770  4B62               	infsnz	strcpy@from& (0+255),f,b
 16085  001772  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16086  001774                     l11717:
 16087                           
 16088                           ; BSR set to: 0
 16089  001774  C062  FFD9         	movff	strcpy@from,fsr2l
 16090  001778  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16091  00177C  C021  FFE1         	movff	strcpy@cp,fsr1l
 16092  001780  C022  FFE2         	movff	strcpy@cp+1,fsr1h
 16093  001784  CFDF FFE7          	movff	indf2,indf1
 16094  001788  50E7               	movf	indf1,w,c
 16095  00178A  B4D8               	btfsc	status,2,c
 16096                           
 16097                           ; BSR set to: 0
 16098  00178C  0012               	return	
 16099  00178E  D7EE               	goto	l11715
 16100  001790                     __end_of_strcpy:
 16101                           	opt stack 0
 16102                           tblptru	equ	0xFF8
 16103                           tblptrh	equ	0xFF7
 16104                           tblptrl	equ	0xFF6
 16105                           tablat	equ	0xFF5
 16106                           prodh	equ	0xFF4
 16107                           prodl	equ	0xFF3
 16108                           intcon	equ	0xFF2
 16109                           indf0	equ	0xFEF
 16110                           postinc0	equ	0xFEE
 16111                           fsr0h	equ	0xFEA
 16112                           fsr0l	equ	0xFE9
 16113                           wreg	equ	0xFE8
 16114                           indf1	equ	0xFE7
 16115                           postinc1	equ	0xFE6
 16116                           postdec1	equ	0xFE5
 16117                           fsr1h	equ	0xFE2
 16118                           fsr1l	equ	0xFE1
 16119                           indf2	equ	0xFDF
 16120                           postinc2	equ	0xFDE
 16121                           postdec2	equ	0xFDD
 16122                           plusw2	equ	0xFDB
 16123                           fsr2h	equ	0xFDA
 16124                           fsr2l	equ	0xFD9
 16125                           status	equ	0xFD8
 16126                           
 16127 ;; *************** function _findNodes *****************
 16128 ;; Defined at:
 16129 ;;		line 2636 in file "main.c"
 16130 ;; Parameters:    Size  Location     Type
 16131 ;;		None
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;  i               1  103[BANK0 ] unsigned char 
 16134 ;;  value           1  102[BANK0 ] unsigned char 
 16135 ;;  nFound          1  101[BANK0 ] unsigned char 
 16136 ;; Return value:  Size  Location     Type
 16137 ;;		None               void
 16138 ;; Registers used:
 16139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16140 ;; Tracked objects:
 16141 ;;		On entry : F/0
 16142 ;;		On exit  : 0/0
 16143 ;;		Unchanged: 0/0
 16144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16145 ;;      Params:         0       0       0       0       0       0       0
 16146 ;;      Locals:         0       5       0       0       0       0       0
 16147 ;;      Temps:          0       0       0       0       0       0       0
 16148 ;;      Totals:         0       5       0       0       0       0       0
 16149 ;;Total ram usage:        5 bytes
 16150 ;; Hardware stack levels used:    1
 16151 ;; Hardware stack levels required when called:    9
 16152 ;; This function calls:
 16153 ;;		_putsUSART
 16154 ;;		_printNodeFirmwareVersion
 16155 ;;		_printGUID
 16156 ;;		_printMDF
 16157 ;;		_itoa
 16158 ;;		_readRegister
 16159 ;; This function is called by:
 16160 ;;		_doModeVerbose
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           	psect	text28
 16165  003164                     __ptext28:
 16166                           	opt stack 0
 16167  003164                     _findNodes:
 16168                           	opt stack 19
 16169                           
 16170                           ; BSR set to: 0
 16171                           ;main.c: 2637: uint8_t nFound = 0;
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;incstack = 0
 16175                           ;incstack = 0
 16176  003164  6BC5               	clrf	findNodes@nFound& (0+255),b
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;main.c: 2638: uint8_t i;
 16180                           ;main.c: 2639: uint8_t value;
 16181                           ;main.c: 2641: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16182  003166  0E6E               	movlw	high STR_238
 16183  003168  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16184  00316A  0E4F               	movlw	low STR_238
 16185  00316C  6F60               	movwf	?_putsUSART& (0+255),b
 16186  00316E  ECFF  F00D         	call	_putsUSART	;wreg free
 16187                           
 16188                           ;main.c: 2643: for (i = 1; i != 0; i++) {
 16189  003172  0E01               	movlw	1
 16190  003174  0100               	movlb	0	; () banked
 16191  003176  6FC7               	movwf	findNodes@i& (0+255),b
 16192  003178                     l1194:
 16193                           
 16194                           ; BSR set to: 0
 16195  003178  0004               	clrwdt		;# 
 16196                           
 16197                           ;main.c: 2647: if (readRegister(i,
 16198                           ;main.c: 2648: 0xE0,
 16199                           ;main.c: 2649: rwtimeout,
 16200                           ;main.c: 2650: &value)) {
 16201  00317A  0EE0               	movlw	224
 16202  00317C  0100               	movlb	0	; () banked
 16203  00317E  6FB4               	movwf	?_readRegister& (0+255),b
 16204  003180  C0E8  F0B5         	movff	_rwtimeout,?_readRegister+1
 16205  003184  6BB6               	clrf	(?_readRegister+2)& (0+255),b
 16206  003186  0EC6               	movlw	low findNodes@value
 16207  003188  6FB7               	movwf	(?_readRegister+3)& (0+255),b
 16208  00318A  51C7               	movf	findNodes@i& (0+255),w,b
 16209  00318C  EC33  F014         	call	_readRegister
 16210  003190  0900               	iorlw	0
 16211  003192  E041               	bz	l14877
 16212                           
 16213                           ;main.c: 2651: putsUSART((char *) "Node found with node id = ");
 16214  003194  0E78               	movlw	high STR_239
 16215  003196  0100               	movlb	0	; () banked
 16216  003198  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16217  00319A  0E9A               	movlw	low STR_239
 16218  00319C  6F60               	movwf	?_putsUSART& (0+255),b
 16219  00319E  ECFF  F00D         	call	_putsUSART	;wreg free
 16220                           
 16221                           ;main.c: 2652: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16222  0031A2  0100               	movlb	0	; () banked
 16223  0031A4  67E3               	tstfsz	_bHex& (0+255),b
 16224  0031A6  D003               	goto	l14859
 16225                           
 16226                           ; BSR set to: 0
 16227  0031A8  6BC4               	clrf	(_findNodes$1473+1)& (0+255),b
 16228  0031AA  0E0A               	movlw	10
 16229  0031AC  D002               	goto	L14
 16230  0031AE                     l14859:
 16231                           
 16232                           ; BSR set to: 0
 16233  0031AE  6BC4               	clrf	(_findNodes$1473+1)& (0+255),b
 16234  0031B0  0E10               	movlw	16
 16235  0031B2                     L14:
 16236  0031B2  6FC3               	movwf	_findNodes$1473& (0+255),b
 16237                           
 16238                           ; BSR set to: 0
 16239  0031B4  0E01               	movlw	high _wrkbuf
 16240  0031B6  0100               	movlb	0	; () banked
 16241  0031B8  6F71               	movwf	(?_itoa+1)& (0+255),b
 16242  0031BA  0E74               	movlw	low _wrkbuf
 16243  0031BC  6F70               	movwf	?_itoa& (0+255),b
 16244  0031BE  C0E9  F072         	movff	_vscpNodeId,?_itoa+2
 16245  0031C2  6B73               	clrf	(?_itoa+3)& (0+255),b
 16246  0031C4  C0C3  F074         	movff	_findNodes$1473,?_itoa+4
 16247  0031C8  C0C4  F075         	movff	_findNodes$1473+1,?_itoa+5
 16248  0031CC  EC2E  F00C         	call	_itoa	;wreg free
 16249                           
 16250                           ; BSR set to: 0
 16251                           ;main.c: 2653: putsUSART(wrkbuf);
 16252  0031D0  0E01               	movlw	high _wrkbuf
 16253  0031D2  0100               	movlb	0	; () banked
 16254  0031D4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16255  0031D6  0E74               	movlw	low _wrkbuf
 16256  0031D8  6F60               	movwf	?_putsUSART& (0+255),b
 16257  0031DA  ECFF  F00D         	call	_putsUSART	;wreg free
 16258                           
 16259                           ;main.c: 2654: putsUSART((char *) "\r\n");
 16260  0031DE  0E71               	movlw	high (STR_197+50)
 16261  0031E0  0100               	movlb	0	; () banked
 16262  0031E2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16263  0031E4  0EC0               	movlw	low (STR_197+50)
 16264  0031E6  6F60               	movwf	?_putsUSART& (0+255),b
 16265  0031E8  ECFF  F00D         	call	_putsUSART	;wreg free
 16266                           
 16267                           ;main.c: 2655: printNodeFirmwareVersion(i);
 16268  0031EC  0100               	movlb	0	; () banked
 16269  0031EE  51C7               	movf	findNodes@i& (0+255),w,b
 16270  0031F0  ECA7  F015         	call	_printNodeFirmwareVersion
 16271                           
 16272                           ;main.c: 2656: printGUID(i);
 16273  0031F4  0100               	movlb	0	; () banked
 16274  0031F6  51C7               	movf	findNodes@i& (0+255),w,b
 16275  0031F8  EC29  F019         	call	_printGUID
 16276                           
 16277                           ;main.c: 2657: printMDF(i);
 16278  0031FC  0100               	movlb	0	; () banked
 16279  0031FE  51C7               	movf	findNodes@i& (0+255),w,b
 16280  003200  ECAC  F011         	call	_printMDF
 16281                           
 16282                           ;main.c: 2658: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16283  003204  0E6E               	movlw	high STR_238
 16284  003206  0100               	movlb	0	; () banked
 16285  003208  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16286  00320A  0E4F               	movlw	low STR_238
 16287  00320C  6F60               	movwf	?_putsUSART& (0+255),b
 16288  00320E  ECFF  F00D         	call	_putsUSART	;wreg free
 16289                           
 16290                           ;main.c: 2659: nFound++;
 16291  003212  0100               	movlb	0	; () banked
 16292  003214  2BC5               	incf	findNodes@nFound& (0+255),f,b
 16293  003216                     l14877:
 16294  003216  0100               	movlb	0	; () banked
 16295  003218  2BC7               	incf	findNodes@i& (0+255),f,b
 16296                           
 16297                           ; BSR set to: 0
 16298  00321A  67C7               	tstfsz	findNodes@i& (0+255),b
 16299  00321C  D7AD               	goto	l1194
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;main.c: 2660: }
 16303                           ;main.c: 2662: }
 16304                           ;main.c: 2664: itoa(wrkbuf, nFound, 10);
 16305  00321E  0E01               	movlw	high _wrkbuf
 16306  003220  6F71               	movwf	(?_itoa+1)& (0+255),b
 16307  003222  0E74               	movlw	low _wrkbuf
 16308  003224  6F70               	movwf	?_itoa& (0+255),b
 16309  003226  C0C5  F072         	movff	findNodes@nFound,?_itoa+2
 16310  00322A  6B73               	clrf	(?_itoa+3)& (0+255),b
 16311  00322C  6B75               	clrf	(?_itoa+5)& (0+255),b
 16312  00322E  0E0A               	movlw	10
 16313  003230  6F74               	movwf	(?_itoa+4)& (0+255),b
 16314  003232  EC2E  F00C         	call	_itoa	;wreg free
 16315                           
 16316                           ; BSR set to: 0
 16317                           ;main.c: 2665: putsUSART(wrkbuf);
 16318  003236  0E01               	movlw	high _wrkbuf
 16319  003238  0100               	movlb	0	; () banked
 16320  00323A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16321  00323C  0E74               	movlw	low _wrkbuf
 16322  00323E  6F60               	movwf	?_putsUSART& (0+255),b
 16323  003240  ECFF  F00D         	call	_putsUSART	;wreg free
 16324                           
 16325                           ;main.c: 2666: putsUSART((char *) " nodes found\r\n");
 16326  003244  0E7B               	movlw	high STR_242
 16327  003246  0100               	movlb	0	; () banked
 16328  003248  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16329  00324A  0E4F               	movlw	low STR_242
 16330  00324C  6F60               	movwf	?_putsUSART& (0+255),b
 16331  00324E  EFFF  F00D         	goto	_putsUSART	;wreg free
 16332  003252                     __end_of_findNodes:
 16333                           	opt stack 0
 16334                           tblptru	equ	0xFF8
 16335                           tblptrh	equ	0xFF7
 16336                           tblptrl	equ	0xFF6
 16337                           tablat	equ	0xFF5
 16338                           prodh	equ	0xFF4
 16339                           prodl	equ	0xFF3
 16340                           intcon	equ	0xFF2
 16341                           indf0	equ	0xFEF
 16342                           postinc0	equ	0xFEE
 16343                           fsr0h	equ	0xFEA
 16344                           fsr0l	equ	0xFE9
 16345                           wreg	equ	0xFE8
 16346                           indf1	equ	0xFE7
 16347                           postinc1	equ	0xFE6
 16348                           postdec1	equ	0xFE5
 16349                           fsr1h	equ	0xFE2
 16350                           fsr1l	equ	0xFE1
 16351                           indf2	equ	0xFDF
 16352                           postinc2	equ	0xFDE
 16353                           postdec2	equ	0xFDD
 16354                           plusw2	equ	0xFDB
 16355                           fsr2h	equ	0xFDA
 16356                           fsr2l	equ	0xFD9
 16357                           status	equ	0xFD8
 16358                           
 16359 ;; *************** function _printMDF *****************
 16360 ;; Defined at:
 16361 ;;		line 2717 in file "main.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  nodeid          1    wreg     unsigned char 
 16364 ;; Auto vars:     Size  Location     Type
 16365 ;;  nodeid          1   93[BANK0 ] unsigned char 
 16366 ;;  p               2   95[BANK0 ] PTR unsigned char 
 16367 ;;		 -> wrkbuf(80), 
 16368 ;;  i               1   97[BANK0 ] unsigned char 
 16369 ;;  value           1   94[BANK0 ] unsigned char 
 16370 ;; Return value:  Size  Location     Type
 16371 ;;		None               void
 16372 ;; Registers used:
 16373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16374 ;; Tracked objects:
 16375 ;;		On entry : D/2
 16376 ;;		On exit  : 0/0
 16377 ;;		Unchanged: 0/0
 16378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16379 ;;      Params:         0       0       0       0       0       0       0
 16380 ;;      Locals:         0       5       0       0       0       0       0
 16381 ;;      Temps:          0       0       0       0       0       0       0
 16382 ;;      Totals:         0       5       0       0       0       0       0
 16383 ;;Total ram usage:        5 bytes
 16384 ;; Hardware stack levels used:    1
 16385 ;; Hardware stack levels required when called:    8
 16386 ;; This function calls:
 16387 ;;		_putsUSART
 16388 ;;		_memset
 16389 ;;		_readRegister
 16390 ;; This function is called by:
 16391 ;;		_doModeVerbose
 16392 ;;		_findNodes
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           	psect	text29
 16397  002358                     __ptext29:
 16398                           	opt stack 0
 16399  002358                     _printMDF:
 16400                           	opt stack 20
 16401                           
 16402                           ;incstack = 0
 16403                           ;incstack = 0
 16404                           ;printMDF@nodeid stored from wreg
 16405  002358  CFE8 F0BD          	movff	wreg,printMDF@nodeid
 16406                           
 16407                           ;main.c: 2718: uint8_t i;
 16408                           ;main.c: 2719: uint8_t value;
 16409                           ;main.c: 2720: char *p = wrkbuf;
 16410  00235C  0E01               	movlw	high _wrkbuf
 16411  00235E  0100               	movlb	0	; () banked
 16412  002360  6FC0               	movwf	(printMDF@p+1)& (0+255),b
 16413  002362  0E74               	movlw	low _wrkbuf
 16414  002364  6FBF               	movwf	printMDF@p& (0+255),b
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;main.c: 2721: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16418  002366  0E01               	movlw	high _wrkbuf
 16419  002368  6F61               	movwf	(?_memset+1)& (0+255),b
 16420  00236A  0E74               	movlw	low _wrkbuf
 16421  00236C  6F60               	movwf	?_memset& (0+255),b
 16422  00236E  6B63               	clrf	(?_memset+3)& (0+255),b
 16423  002370  6B62               	clrf	(?_memset+2)& (0+255),b
 16424  002372  6B65               	clrf	(?_memset+5)& (0+255),b
 16425  002374  0E50               	movlw	80
 16426  002376  6F64               	movwf	(?_memset+4)& (0+255),b
 16427  002378  EC9A  F00B         	call	_memset	;wreg free
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;main.c: 2722: putsUSART((char *) "MDF = http://");
 16431  00237C  0E7B               	movlw	high STR_248
 16432  00237E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16433  002380  0E6D               	movlw	low STR_248
 16434  002382  6F60               	movwf	?_putsUSART& (0+255),b
 16435  002384  ECFF  F00D         	call	_putsUSART	;wreg free
 16436                           
 16437                           ;main.c: 2724: for (i = 0; i < 32; i++) {
 16438  002388  0100               	movlb	0	; () banked
 16439  00238A  6BC1               	clrf	printMDF@i& (0+255),b
 16440  00238C                     l15405:
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;main.c: 2725: if (readRegister(nodeid,
 16444                           ;main.c: 2726: 0xE0 + i,
 16445                           ;main.c: 2727: rwtimeout,
 16446                           ;main.c: 2728: &value)) {
 16447  00238C  51C1               	movf	printMDF@i& (0+255),w,b
 16448  00238E  0FE0               	addlw	224
 16449  002390  6FB4               	movwf	?_readRegister& (0+255),b
 16450  002392  C0E8  F0B5         	movff	_rwtimeout,?_readRegister+1
 16451  002396  6BB6               	clrf	(?_readRegister+2)& (0+255),b
 16452  002398  0EBE               	movlw	low printMDF@value
 16453  00239A  6FB7               	movwf	(?_readRegister+3)& (0+255),b
 16454  00239C  51BD               	movf	printMDF@nodeid& (0+255),w,b
 16455  00239E  EC33  F014         	call	_readRegister
 16456  0023A2  0900               	iorlw	0
 16457  0023A4  E00A               	bz	l15411
 16458                           
 16459                           ;main.c: 2729: *p = value;
 16460  0023A6  C0BF  FFD9         	movff	printMDF@p,fsr2l
 16461  0023AA  C0C0  FFDA         	movff	printMDF@p+1,fsr2h
 16462  0023AE  C0BE  FFDF         	movff	printMDF@value,indf2
 16463  0023B2                     l15409:
 16464                           
 16465                           ;main.c: 2730: p++;
 16466  0023B2  0100               	movlb	0	; () banked
 16467  0023B4  4BBF               	infsnz	printMDF@p& (0+255),f,b
 16468  0023B6  2BC0               	incf	(printMDF@p+1)& (0+255),f,b
 16469                           
 16470                           ;main.c: 2732: }
 16471  0023B8  D007               	goto	l15415
 16472  0023BA                     l15411:
 16473                           
 16474                           ;main.c: 2733: else {
 16475                           ;main.c: 2734: *p = '?';
 16476  0023BA  C0BF  FFD9         	movff	printMDF@p,fsr2l
 16477  0023BE  C0C0  FFDA         	movff	printMDF@p+1,fsr2h
 16478  0023C2  0E3F               	movlw	63
 16479  0023C4  6EDF               	movwf	indf2,c
 16480  0023C6  D7F5               	goto	l15409
 16481  0023C8                     l15415:
 16482                           
 16483                           ; BSR set to: 0
 16484  0023C8  2BC1               	incf	printMDF@i& (0+255),f,b
 16485                           
 16486                           ; BSR set to: 0
 16487  0023CA  0E1F               	movlw	31
 16488  0023CC  65C1               	cpfsgt	printMDF@i& (0+255),b
 16489  0023CE  D7DE               	goto	l15405
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;main.c: 2736: }
 16493                           ;main.c: 2737: }
 16494                           ;main.c: 2739: putsUSART(wrkbuf);
 16495  0023D0  0E01               	movlw	high _wrkbuf
 16496  0023D2  0100               	movlb	0	; () banked
 16497  0023D4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16498  0023D6  0E74               	movlw	low _wrkbuf
 16499  0023D8  6F60               	movwf	?_putsUSART& (0+255),b
 16500  0023DA  ECFF  F00D         	call	_putsUSART	;wreg free
 16501                           
 16502                           ;main.c: 2740: putsUSART((char *) "\r\n");
 16503  0023DE  0E71               	movlw	high (STR_197+50)
 16504  0023E0  0100               	movlb	0	; () banked
 16505  0023E2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16506  0023E4  0EC0               	movlw	low (STR_197+50)
 16507  0023E6  6F60               	movwf	?_putsUSART& (0+255),b
 16508  0023E8  EFFF  F00D         	goto	_putsUSART	;wreg free
 16509  0023EC                     __end_of_printMDF:
 16510                           	opt stack 0
 16511                           tblptru	equ	0xFF8
 16512                           tblptrh	equ	0xFF7
 16513                           tblptrl	equ	0xFF6
 16514                           tablat	equ	0xFF5
 16515                           prodh	equ	0xFF4
 16516                           prodl	equ	0xFF3
 16517                           intcon	equ	0xFF2
 16518                           indf0	equ	0xFEF
 16519                           postinc0	equ	0xFEE
 16520                           fsr0h	equ	0xFEA
 16521                           fsr0l	equ	0xFE9
 16522                           wreg	equ	0xFE8
 16523                           indf1	equ	0xFE7
 16524                           postinc1	equ	0xFE6
 16525                           postdec1	equ	0xFE5
 16526                           fsr1h	equ	0xFE2
 16527                           fsr1l	equ	0xFE1
 16528                           indf2	equ	0xFDF
 16529                           postinc2	equ	0xFDE
 16530                           postdec2	equ	0xFDD
 16531                           plusw2	equ	0xFDB
 16532                           fsr2h	equ	0xFDA
 16533                           fsr2l	equ	0xFD9
 16534                           status	equ	0xFD8
 16535                           
 16536 ;; *************** function _printGUID *****************
 16537 ;; Defined at:
 16538 ;;		line 2676 in file "main.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  nodeid          1    wreg     unsigned char 
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;  nodeid          1   93[BANK0 ] unsigned char 
 16543 ;;  buf             3   94[BANK0 ] unsigned char [3]
 16544 ;;  i               1   98[BANK0 ] unsigned char 
 16545 ;;  value           1   97[BANK0 ] unsigned char 
 16546 ;; Return value:  Size  Location     Type
 16547 ;;		None               void
 16548 ;; Registers used:
 16549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16550 ;; Tracked objects:
 16551 ;;		On entry : D/2
 16552 ;;		On exit  : 0/0
 16553 ;;		Unchanged: 0/0
 16554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16555 ;;      Params:         0       0       0       0       0       0       0
 16556 ;;      Locals:         0       6       0       0       0       0       0
 16557 ;;      Temps:          0       0       0       0       0       0       0
 16558 ;;      Totals:         0       6       0       0       0       0       0
 16559 ;;Total ram usage:        6 bytes
 16560 ;; Hardware stack levels used:    1
 16561 ;; Hardware stack levels required when called:    8
 16562 ;; This function calls:
 16563 ;;		_putsUSART
 16564 ;;		_memset
 16565 ;;		_strlen
 16566 ;;		_itoa
 16567 ;;		_readRegister
 16568 ;;		_strcat
 16569 ;; This function is called by:
 16570 ;;		_doModeVerbose
 16571 ;;		_findNodes
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           	psect	text30
 16576  003252                     __ptext30:
 16577                           	opt stack 0
 16578  003252                     _printGUID:
 16579                           	opt stack 20
 16580                           
 16581                           ;incstack = 0
 16582                           ;incstack = 0
 16583                           ;printGUID@nodeid stored from wreg
 16584  003252  CFE8 F0BD          	movff	wreg,printGUID@nodeid
 16585                           
 16586                           ;main.c: 2677: uint8_t i;
 16587                           ;main.c: 2678: uint8_t value;
 16588                           ;main.c: 2679: char buf[3];
 16589                           ;main.c: 2681: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16590  003256  0E01               	movlw	high _wrkbuf
 16591  003258  0100               	movlb	0	; () banked
 16592  00325A  6F61               	movwf	(?_memset+1)& (0+255),b
 16593  00325C  0E74               	movlw	low _wrkbuf
 16594  00325E  6F60               	movwf	?_memset& (0+255),b
 16595  003260  6B63               	clrf	(?_memset+3)& (0+255),b
 16596  003262  6B62               	clrf	(?_memset+2)& (0+255),b
 16597  003264  6B65               	clrf	(?_memset+5)& (0+255),b
 16598  003266  0E50               	movlw	80
 16599  003268  6F64               	movwf	(?_memset+4)& (0+255),b
 16600  00326A  EC9A  F00B         	call	_memset	;wreg free
 16601                           
 16602                           ; BSR set to: 0
 16603                           ;main.c: 2682: putsUSART((char *) "GUID = ");
 16604  00326E  0E7B               	movlw	high STR_243
 16605  003270  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16606  003272  0EE6               	movlw	low STR_243
 16607  003274  6F60               	movwf	?_putsUSART& (0+255),b
 16608  003276  ECFF  F00D         	call	_putsUSART	;wreg free
 16609                           
 16610                           ;main.c: 2684: for (i = 0; i < 16; i++) {
 16611  00327A  0100               	movlb	0	; () banked
 16612  00327C  6BC2               	clrf	printGUID@i& (0+255),b
 16613  00327E                     l15371:
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;main.c: 2685: if (readRegister(nodeid,
 16617                           ;main.c: 2686: 0xD0 + i,
 16618                           ;main.c: 2687: rwtimeout,
 16619                           ;main.c: 2688: &value)) {
 16620  00327E  51C2               	movf	printGUID@i& (0+255),w,b
 16621  003280  0FD0               	addlw	208
 16622  003282  6FB4               	movwf	?_readRegister& (0+255),b
 16623  003284  C0E8  F0B5         	movff	_rwtimeout,?_readRegister+1
 16624  003288  6BB6               	clrf	(?_readRegister+2)& (0+255),b
 16625  00328A  0EC1               	movlw	low printGUID@value
 16626  00328C  6FB7               	movwf	(?_readRegister+3)& (0+255),b
 16627  00328E  51BD               	movf	printGUID@nodeid& (0+255),w,b
 16628  003290  EC33  F014         	call	_readRegister
 16629  003294  0900               	iorlw	0
 16630  003296  E029               	bz	l15381
 16631                           
 16632                           ;main.c: 2689: itoa(buf, value, 16);
 16633  003298  0100               	movlb	0	; () banked
 16634  00329A  0E00               	movlw	high printGUID@buf
 16635  00329C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16636  00329E  0EBE               	movlw	low printGUID@buf
 16637  0032A0  6F70               	movwf	?_itoa& (0+255),b
 16638  0032A2  C0C1  F072         	movff	printGUID@value,?_itoa+2
 16639  0032A6  6B73               	clrf	(?_itoa+3)& (0+255),b
 16640  0032A8  6B75               	clrf	(?_itoa+5)& (0+255),b
 16641  0032AA  0E10               	movlw	16
 16642  0032AC  6F74               	movwf	(?_itoa+4)& (0+255),b
 16643  0032AE  EC2E  F00C         	call	_itoa	;wreg free
 16644                           
 16645                           ; BSR set to: 0
 16646                           ;main.c: 2690: if (1 == strlen(buf)) {
 16647  0032B2  0E00               	movlw	high printGUID@buf
 16648  0032B4  6E22               	movwf	?_strlen+1,c
 16649  0032B6  0EBE               	movlw	low printGUID@buf
 16650  0032B8  6E21               	movwf	?_strlen,c
 16651  0032BA  ECE4  F00C         	call	_strlen	;wreg free
 16652  0032BE  0421               	decf	?_strlen,w,c
 16653  0032C0  1022               	iorwf	?_strlen+1,w,c
 16654  0032C2  E10F               	bnz	l15379
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;main.c: 2691: strcat(wrkbuf, "0");
 16658  0032C4  0E01               	movlw	high _wrkbuf
 16659  0032C6  0100               	movlb	0	; () banked
 16660  0032C8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16661  0032CA  0E74               	movlw	low _wrkbuf
 16662  0032CC  6F60               	movwf	?_strcat& (0+255),b
 16663  0032CE  0E7C               	movlw	high STR_244
 16664  0032D0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16665  0032D2  0EF9               	movlw	low STR_244
 16666  0032D4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16667  0032D6  EC2B  F00E         	call	_strcat	;wreg free
 16668                           
 16669                           ;main.c: 2692: strcat(wrkbuf, buf);
 16670  0032DA  D832               	call	PL64	;call to abstracted procedure
 16671  0032DC  EC2B  F00E         	call	_strcat	;wreg free
 16672                           
 16673                           ;main.c: 2693: } else {
 16674  0032E0  D00F               	goto	l15383
 16675  0032E2                     l15379:
 16676                           
 16677                           ; BSR set to: 0
 16678                           ;main.c: 2694: strcat(wrkbuf, buf);
 16679  0032E2  D82E               	call	PL64	;call to abstracted procedure
 16680  0032E4  EC2B  F00E         	call	_strcat	;wreg free
 16681  0032E8  D00B               	goto	l15383
 16682  0032EA                     l15381:
 16683                           
 16684                           ;main.c: 2698: strcat(wrkbuf, "--");
 16685  0032EA  0E01               	movlw	high _wrkbuf
 16686  0032EC  0100               	movlb	0	; () banked
 16687  0032EE  6F61               	movwf	(?_strcat+1)& (0+255),b
 16688  0032F0  0E74               	movlw	low _wrkbuf
 16689  0032F2  6F60               	movwf	?_strcat& (0+255),b
 16690  0032F4  0E7C               	movlw	high STR_245
 16691  0032F6  6F63               	movwf	(?_strcat+3)& (0+255),b
 16692  0032F8  0EE5               	movlw	low STR_245
 16693  0032FA  6F62               	movwf	(?_strcat+2)& (0+255),b
 16694  0032FC  EC2B  F00E         	call	_strcat	;wreg free
 16695  003300                     l15383:
 16696                           
 16697                           ;main.c: 2699: }
 16698                           ;main.c: 2701: if (i < 15) {
 16699  003300  0E0F               	movlw	15
 16700  003302  0100               	movlb	0	; () banked
 16701  003304  61C2               	cpfslt	printGUID@i& (0+255),b
 16702  003306  D00A               	goto	l15387
 16703                           
 16704                           ; BSR set to: 0
 16705                           ;main.c: 2702: strcat(wrkbuf, ":");
 16706  003308  0E01               	movlw	high _wrkbuf
 16707  00330A  6F61               	movwf	(?_strcat+1)& (0+255),b
 16708  00330C  0E74               	movlw	low _wrkbuf
 16709  00330E  6F60               	movwf	?_strcat& (0+255),b
 16710  003310  0E7C               	movlw	high STR_246
 16711  003312  6F63               	movwf	(?_strcat+3)& (0+255),b
 16712  003314  0EFB               	movlw	low STR_246
 16713  003316  6F62               	movwf	(?_strcat+2)& (0+255),b
 16714  003318  EC2B  F00E         	call	_strcat	;wreg free
 16715  00331C                     l15387:
 16716  00331C  0100               	movlb	0	; () banked
 16717  00331E  2BC2               	incf	printGUID@i& (0+255),f,b
 16718                           
 16719                           ; BSR set to: 0
 16720  003320  0E0F               	movlw	15
 16721  003322  65C2               	cpfsgt	printGUID@i& (0+255),b
 16722  003324  D7AC               	goto	l15371
 16723                           
 16724                           ; BSR set to: 0
 16725                           ;main.c: 2703: }
 16726                           ;main.c: 2705: }
 16727                           ;main.c: 2707: putsUSART(wrkbuf);
 16728  003326  0E01               	movlw	high _wrkbuf
 16729  003328  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16730  00332A  0E74               	movlw	low _wrkbuf
 16731  00332C  6F60               	movwf	?_putsUSART& (0+255),b
 16732  00332E  ECFF  F00D         	call	_putsUSART	;wreg free
 16733                           
 16734                           ;main.c: 2708: putsUSART((char *) "\r\n");
 16735  003332  0E71               	movlw	high (STR_197+50)
 16736  003334  0100               	movlb	0	; () banked
 16737  003336  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16738  003338  0EC0               	movlw	low (STR_197+50)
 16739  00333A  6F60               	movwf	?_putsUSART& (0+255),b
 16740  00333C  EFFF  F00D         	goto	_putsUSART	;wreg free
 16741  003340                     __end_of_printGUID:
 16742                           	opt stack 0
 16743  003340                     PL64:
 16744                           	opt stack 20
 16745  003340  0E01               	movlw	high _wrkbuf
 16746  003342  0100               	movlb	0	; () banked
 16747  003344  6F61               	movwf	(?_strcat+1)& (0+255),b
 16748  003346  0E74               	movlw	low _wrkbuf
 16749  003348  6F60               	movwf	?_strcat& (0+255),b
 16750  00334A  0E00               	movlw	high printGUID@buf
 16751  00334C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16752  00334E  0EBE               	movlw	low printGUID@buf
 16753  003350  6F62               	movwf	(?_strcat+2)& (0+255),b
 16754  003352  0012               	return	
 16755  003354                     __end_ofPL64:
 16756                           	opt stack 0
 16757                           tblptru	equ	0xFF8
 16758                           tblptrh	equ	0xFF7
 16759                           tblptrl	equ	0xFF6
 16760                           tablat	equ	0xFF5
 16761                           prodh	equ	0xFF4
 16762                           prodl	equ	0xFF3
 16763                           intcon	equ	0xFF2
 16764                           indf0	equ	0xFEF
 16765                           postinc0	equ	0xFEE
 16766                           fsr0h	equ	0xFEA
 16767                           fsr0l	equ	0xFE9
 16768                           wreg	equ	0xFE8
 16769                           indf1	equ	0xFE7
 16770                           postinc1	equ	0xFE6
 16771                           postdec1	equ	0xFE5
 16772                           fsr1h	equ	0xFE2
 16773                           fsr1l	equ	0xFE1
 16774                           indf2	equ	0xFDF
 16775                           postinc2	equ	0xFDE
 16776                           postdec2	equ	0xFDD
 16777                           plusw2	equ	0xFDB
 16778                           fsr2h	equ	0xFDA
 16779                           fsr2l	equ	0xFD9
 16780                           status	equ	0xFD8
 16781                           
 16782 ;; *************** function _printNodeFirmwareVersion *****************
 16783 ;; Defined at:
 16784 ;;		line 2748 in file "main.c"
 16785 ;; Parameters:    Size  Location     Type
 16786 ;;  nodeid          1    wreg     unsigned char 
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;  nodeid          1   93[BANK0 ] unsigned char 
 16789 ;;  buf             3   94[BANK0 ] unsigned char [3]
 16790 ;;  i               1   98[BANK0 ] unsigned char 
 16791 ;;  value           1   97[BANK0 ] unsigned char 
 16792 ;; Return value:  Size  Location     Type
 16793 ;;		None               void
 16794 ;; Registers used:
 16795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16796 ;; Tracked objects:
 16797 ;;		On entry : D/2
 16798 ;;		On exit  : 0/0
 16799 ;;		Unchanged: 0/0
 16800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16801 ;;      Params:         0       0       0       0       0       0       0
 16802 ;;      Locals:         0       6       0       0       0       0       0
 16803 ;;      Temps:          0       0       0       0       0       0       0
 16804 ;;      Totals:         0       6       0       0       0       0       0
 16805 ;;Total ram usage:        6 bytes
 16806 ;; Hardware stack levels used:    1
 16807 ;; Hardware stack levels required when called:    8
 16808 ;; This function calls:
 16809 ;;		_putsUSART
 16810 ;;		_memset
 16811 ;;		_itoa
 16812 ;;		_readRegister
 16813 ;;		_strcat
 16814 ;; This function is called by:
 16815 ;;		_doModeVerbose
 16816 ;;		_findNodes
 16817 ;; This function uses a non-reentrant model
 16818 ;;
 16819                           
 16820                           	psect	text31
 16821  002B4E                     __ptext31:
 16822                           	opt stack 0
 16823  002B4E                     _printNodeFirmwareVersion:
 16824                           	opt stack 20
 16825                           
 16826                           ;incstack = 0
 16827                           ;incstack = 0
 16828                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16829  002B4E  CFE8 F0BD          	movff	wreg,printNodeFirmwareVersion@nodeid
 16830                           
 16831                           ;main.c: 2749: uint8_t i;
 16832                           ;main.c: 2750: uint8_t value;
 16833                           ;main.c: 2751: char buf[3];
 16834                           ;main.c: 2753: memset( wrkbuf, 0, sizeof(wrkbuf) );
 16835  002B52  0E01               	movlw	high _wrkbuf
 16836  002B54  0100               	movlb	0	; () banked
 16837  002B56  6F61               	movwf	(?_memset+1)& (0+255),b
 16838  002B58  0E74               	movlw	low _wrkbuf
 16839  002B5A  6F60               	movwf	?_memset& (0+255),b
 16840  002B5C  6B63               	clrf	(?_memset+3)& (0+255),b
 16841  002B5E  6B62               	clrf	(?_memset+2)& (0+255),b
 16842  002B60  6B65               	clrf	(?_memset+5)& (0+255),b
 16843  002B62  0E50               	movlw	80
 16844  002B64  6F64               	movwf	(?_memset+4)& (0+255),b
 16845  002B66  EC9A  F00B         	call	_memset	;wreg free
 16846                           
 16847                           ; BSR set to: 0
 16848                           ;main.c: 2754: putsUSART((char *) "Firmware version = ");
 16849  002B6A  0E7A               	movlw	high STR_250
 16850  002B6C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16851  002B6E  0EBF               	movlw	low STR_250
 16852  002B70  6F60               	movwf	?_putsUSART& (0+255),b
 16853  002B72  ECFF  F00D         	call	_putsUSART	;wreg free
 16854                           
 16855                           ;main.c: 2756: for (i = 0; i < 3; i++) {
 16856  002B76  0100               	movlb	0	; () banked
 16857  002B78  6BC2               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16858  002B7A                     l15343:
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;main.c: 2757: if (readRegister(nodeid,
 16862                           ;main.c: 2758: 0x94 + i,
 16863                           ;main.c: 2759: rwtimeout,
 16864                           ;main.c: 2760: &value)) {
 16865  002B7A  51C2               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16866  002B7C  0F94               	addlw	148
 16867  002B7E  6FB4               	movwf	?_readRegister& (0+255),b
 16868  002B80  C0E8  F0B5         	movff	_rwtimeout,?_readRegister+1
 16869  002B84  6BB6               	clrf	(?_readRegister+2)& (0+255),b
 16870  002B86  0EC1               	movlw	low printNodeFirmwareVersion@value
 16871  002B88  6FB7               	movwf	(?_readRegister+3)& (0+255),b
 16872  002B8A  51BD               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16873  002B8C  EC33  F014         	call	_readRegister
 16874  002B90  0900               	iorlw	0
 16875  002B92  E019               	bz	l15349
 16876                           
 16877                           ;main.c: 2761: itoa(buf, value, 16);
 16878  002B94  0100               	movlb	0	; () banked
 16879  002B96  0E00               	movlw	high printNodeFirmwareVersion@buf
 16880  002B98  6F71               	movwf	(?_itoa+1)& (0+255),b
 16881  002B9A  0EBE               	movlw	low printNodeFirmwareVersion@buf
 16882  002B9C  6F70               	movwf	?_itoa& (0+255),b
 16883  002B9E  C0C1  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16884  002BA2  6B73               	clrf	(?_itoa+3)& (0+255),b
 16885  002BA4  6B75               	clrf	(?_itoa+5)& (0+255),b
 16886  002BA6  0E10               	movlw	16
 16887  002BA8  6F74               	movwf	(?_itoa+4)& (0+255),b
 16888  002BAA  EC2E  F00C         	call	_itoa	;wreg free
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;main.c: 2762: strcat(wrkbuf, buf);
 16892  002BAE  0E01               	movlw	high _wrkbuf
 16893  002BB0  0100               	movlb	0	; () banked
 16894  002BB2  6F61               	movwf	(?_strcat+1)& (0+255),b
 16895  002BB4  0E74               	movlw	low _wrkbuf
 16896  002BB6  6F60               	movwf	?_strcat& (0+255),b
 16897  002BB8  0E00               	movlw	high printNodeFirmwareVersion@buf
 16898  002BBA  6F63               	movwf	(?_strcat+3)& (0+255),b
 16899  002BBC  0EBE               	movlw	low printNodeFirmwareVersion@buf
 16900  002BBE  6F62               	movwf	(?_strcat+2)& (0+255),b
 16901  002BC0  EC2B  F00E         	call	_strcat	;wreg free
 16902                           
 16903                           ;main.c: 2763: }
 16904  002BC4  D00B               	goto	l15351
 16905  002BC6                     l15349:
 16906                           
 16907                           ;main.c: 2764: else {
 16908                           ;main.c: 2765: strcat(wrkbuf, "?");
 16909  002BC6  0E01               	movlw	high _wrkbuf
 16910  002BC8  0100               	movlb	0	; () banked
 16911  002BCA  6F61               	movwf	(?_strcat+1)& (0+255),b
 16912  002BCC  0E74               	movlw	low _wrkbuf
 16913  002BCE  6F60               	movwf	?_strcat& (0+255),b
 16914  002BD0  0E7C               	movlw	high STR_251
 16915  002BD2  6F63               	movwf	(?_strcat+3)& (0+255),b
 16916  002BD4  0EFD               	movlw	low STR_251
 16917  002BD6  6F62               	movwf	(?_strcat+2)& (0+255),b
 16918  002BD8  EC2B  F00E         	call	_strcat	;wreg free
 16919  002BDC                     l15351:
 16920                           
 16921                           ;main.c: 2766: }
 16922                           ;main.c: 2768: if (i < 2) {
 16923  002BDC  0E02               	movlw	2
 16924  002BDE  0100               	movlb	0	; () banked
 16925  002BE0  61C2               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16926  002BE2  D00A               	goto	l15355
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;main.c: 2769: strcat(wrkbuf, ".");
 16930  002BE4  0E01               	movlw	high _wrkbuf
 16931  002BE6  6F61               	movwf	(?_strcat+1)& (0+255),b
 16932  002BE8  0E74               	movlw	low _wrkbuf
 16933  002BEA  6F60               	movwf	?_strcat& (0+255),b
 16934  002BEC  0E7C               	movlw	high STR_252
 16935  002BEE  6F63               	movwf	(?_strcat+3)& (0+255),b
 16936  002BF0  0EF7               	movlw	low STR_252
 16937  002BF2  6F62               	movwf	(?_strcat+2)& (0+255),b
 16938  002BF4  EC2B  F00E         	call	_strcat	;wreg free
 16939  002BF8                     l15355:
 16940  002BF8  0100               	movlb	0	; () banked
 16941  002BFA  2BC2               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16942                           
 16943                           ; BSR set to: 0
 16944  002BFC  0E02               	movlw	2
 16945  002BFE  65C2               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16946  002C00  D7BC               	goto	l15343
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;main.c: 2770: }
 16950                           ;main.c: 2772: }
 16951                           ;main.c: 2774: putsUSART(wrkbuf);
 16952  002C02  0E01               	movlw	high _wrkbuf
 16953  002C04  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16954  002C06  0E74               	movlw	low _wrkbuf
 16955  002C08  6F60               	movwf	?_putsUSART& (0+255),b
 16956  002C0A  ECFF  F00D         	call	_putsUSART	;wreg free
 16957                           
 16958                           ;main.c: 2775: putsUSART((char *) "\r\n");
 16959  002C0E  0E71               	movlw	high (STR_197+50)
 16960  002C10  0100               	movlb	0	; () banked
 16961  002C12  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 16962  002C14  0EC0               	movlw	low (STR_197+50)
 16963  002C16  6F60               	movwf	?_putsUSART& (0+255),b
 16964  002C18  EFFF  F00D         	goto	_putsUSART	;wreg free
 16965  002C1C                     __end_of_printNodeFirmwareVersion:
 16966                           	opt stack 0
 16967                           tblptru	equ	0xFF8
 16968                           tblptrh	equ	0xFF7
 16969                           tblptrl	equ	0xFF6
 16970                           tablat	equ	0xFF5
 16971                           prodh	equ	0xFF4
 16972                           prodl	equ	0xFF3
 16973                           intcon	equ	0xFF2
 16974                           indf0	equ	0xFEF
 16975                           postinc0	equ	0xFEE
 16976                           fsr0h	equ	0xFEA
 16977                           fsr0l	equ	0xFE9
 16978                           wreg	equ	0xFE8
 16979                           indf1	equ	0xFE7
 16980                           postinc1	equ	0xFE6
 16981                           postdec1	equ	0xFE5
 16982                           fsr1h	equ	0xFE2
 16983                           fsr1l	equ	0xFE1
 16984                           indf2	equ	0xFDF
 16985                           postinc2	equ	0xFDE
 16986                           postdec2	equ	0xFDD
 16987                           plusw2	equ	0xFDB
 16988                           fsr2h	equ	0xFDA
 16989                           fsr2l	equ	0xFD9
 16990                           status	equ	0xFD8
 16991                           
 16992 ;; *************** function _strcat *****************
 16993 ;; Defined at:
 16994 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16997 ;;		 -> wrkbuf(80), 
 16998 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16999 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 17000 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 17001 ;; Auto vars:     Size  Location     Type
 17002 ;;  cp              2   32[COMRAM] PTR unsigned char 
 17003 ;;		 -> wrkbuf(80), 
 17004 ;; Return value:  Size  Location     Type
 17005 ;;                  2    0[BANK0 ] PTR unsigned char 
 17006 ;; Registers used:
 17007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17008 ;; Tracked objects:
 17009 ;;		On entry : F/0
 17010 ;;		On exit  : 0/0
 17011 ;;		Unchanged: 0/0
 17012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17013 ;;      Params:         0       4       0       0       0       0       0
 17014 ;;      Locals:         2       0       0       0       0       0       0
 17015 ;;      Temps:          0       0       0       0       0       0       0
 17016 ;;      Totals:         2       4       0       0       0       0       0
 17017 ;;Total ram usage:        6 bytes
 17018 ;; Hardware stack levels used:    1
 17019 ;; Hardware stack levels required when called:    3
 17020 ;; This function calls:
 17021 ;;		Nothing
 17022 ;; This function is called by:
 17023 ;;		_printGUID
 17024 ;;		_printNodeFirmwareVersion
 17025 ;; This function uses a non-reentrant model
 17026 ;;
 17027                           
 17028                           	psect	text32
 17029  001C56                     __ptext32:
 17030                           	opt stack 0
 17031  001C56                     _strcat:
 17032                           	opt stack 24
 17033                           
 17034                           ; BSR set to: 0
 17035                           
 17036                           ;incstack = 0
 17037                           ;incstack = 0
 17038  001C56  C060  F021         	movff	strcat@to,strcat@cp
 17039  001C5A  C061  F022         	movff	strcat@to+1,strcat@cp+1
 17040  001C5E  D002               	goto	l12893
 17041  001C60                     l12891:
 17042                           
 17043                           ; BSR set to: 0
 17044  001C60  4A21               	infsnz	strcat@cp,f,c
 17045  001C62  2A22               	incf	strcat@cp+1,f,c
 17046  001C64                     l12893:
 17047                           
 17048                           ; BSR set to: 0
 17049  001C64  C021  FFD9         	movff	strcat@cp,fsr2l
 17050  001C68  C022  FFDA         	movff	strcat@cp+1,fsr2h
 17051  001C6C  50DF               	movf	indf2,w,c
 17052  001C6E  E006               	bz	l12897
 17053  001C70  D7F7               	goto	l12891
 17054  001C72                     l12895:
 17055  001C72  4A21               	infsnz	strcat@cp,f,c
 17056  001C74  2A22               	incf	strcat@cp+1,f,c
 17057  001C76  0100               	movlb	0	; () banked
 17058  001C78  4B62               	infsnz	strcat@from& (0+255),f,b
 17059  001C7A  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17060  001C7C                     l12897:
 17061                           
 17062                           ; BSR set to: 0
 17063  001C7C  C062  FFF6         	movff	strcat@from,tblptrl
 17064  001C80  C063  FFF7         	movff	strcat@from+1,tblptrh
 17065  001C84  6AF8               	clrf	tblptru,c
 17066  001C86  C021  FFD9         	movff	strcat@cp,fsr2l
 17067  001C8A  C022  FFDA         	movff	strcat@cp+1,fsr2h
 17068  001C8E  0E05               	movlw	(high __ramtop+-1)
 17069  001C90  64F7               	cpfsgt	tblptrh,c
 17070  001C92  D003               	bra	u16857
 17071  001C94  0008               	tblrd		*
 17072  001C96  50F5               	movf	tablat,w,c
 17073  001C98  D005               	bra	u16850
 17074  001C9A                     u16857:
 17075  001C9A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17076  001C9E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17077  001CA2  50EF               	movf	indf0,w,c
 17078  001CA4                     u16850:
 17079  001CA4  6EDF               	movwf	indf2,c
 17080  001CA6  50DF               	movf	indf2,w,c
 17081  001CA8  B4D8               	btfsc	status,2,c
 17082  001CAA  0012               	return	
 17083  001CAC  D7E2               	goto	l12895
 17084  001CAE                     __end_of_strcat:
 17085                           	opt stack 0
 17086                           tblptru	equ	0xFF8
 17087                           tblptrh	equ	0xFF7
 17088                           tblptrl	equ	0xFF6
 17089                           tablat	equ	0xFF5
 17090                           prodh	equ	0xFF4
 17091                           prodl	equ	0xFF3
 17092                           intcon	equ	0xFF2
 17093                           indf0	equ	0xFEF
 17094                           postinc0	equ	0xFEE
 17095                           fsr0h	equ	0xFEA
 17096                           fsr0l	equ	0xFE9
 17097                           wreg	equ	0xFE8
 17098                           indf1	equ	0xFE7
 17099                           postinc1	equ	0xFE6
 17100                           postdec1	equ	0xFE5
 17101                           fsr1h	equ	0xFE2
 17102                           fsr1l	equ	0xFE1
 17103                           indf2	equ	0xFDF
 17104                           postinc2	equ	0xFDE
 17105                           postdec2	equ	0xFDD
 17106                           plusw2	equ	0xFDB
 17107                           fsr2h	equ	0xFDA
 17108                           fsr2l	equ	0xFD9
 17109                           status	equ	0xFD8
 17110                           
 17111 ;; *************** function _readRegister *****************
 17112 ;; Defined at:
 17113 ;;		line 2251 in file "main.c"
 17114 ;; Parameters:    Size  Location     Type
 17115 ;;  nodeid          1    wreg     unsigned char 
 17116 ;;  reg             1   84[BANK0 ] unsigned char 
 17117 ;;  timeout         2   85[BANK0 ] unsigned short 
 17118 ;;  value           1   87[BANK0 ] PTR unsigned char 
 17119 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17120 ;; Auto vars:     Size  Location     Type
 17121 ;;  nodeid          1   92[BANK0 ] unsigned char 
 17122 ;; Return value:  Size  Location     Type
 17123 ;;                  1    wreg      enum E15660
 17124 ;; Registers used:
 17125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17126 ;; Tracked objects:
 17127 ;;		On entry : F/0
 17128 ;;		On exit  : E/0
 17129 ;;		Unchanged: 0/0
 17130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17131 ;;      Params:         0       4       0       0       0       0       0
 17132 ;;      Locals:         0       1       0       0       0       0       0
 17133 ;;      Temps:          0       4       0       0       0       0       0
 17134 ;;      Totals:         0       9       0       0       0       0       0
 17135 ;;Total ram usage:        9 bytes
 17136 ;; Hardware stack levels used:    1
 17137 ;; Hardware stack levels required when called:    7
 17138 ;; This function calls:
 17139 ;;		_sendVSCPFrame
 17140 ;;		_getVSCPFrame
 17141 ;; This function is called by:
 17142 ;;		_findNodes
 17143 ;;		_printGUID
 17144 ;;		_printMDF
 17145 ;;		_printNodeFirmwareVersion
 17146 ;; This function uses a non-reentrant model
 17147 ;;
 17148                           
 17149                           	psect	text33
 17150  002866                     __ptext33:
 17151                           	opt stack 0
 17152  002866                     _readRegister:
 17153                           	opt stack 20
 17154                           
 17155                           ;incstack = 0
 17156                           ;incstack = 0
 17157                           ;readRegister@nodeid stored from wreg
 17158  002866  CFE8 F0BC          	movff	wreg,readRegister@nodeid
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;main.c: 2252: vscpData[ 0 ] = nodeid;
 17162  00286A  C0BC  F1DC         	movff	readRegister@nodeid,_vscpData
 17163                           
 17164                           ; BSR set to: 0
 17165                           ;main.c: 2253: vscpData[ 1 ] = reg;
 17166  00286E  C0B4  F1DD         	movff	readRegister@reg,_vscpData+1
 17167                           
 17168                           ; BSR set to: 0
 17169                           ;main.c: 2255: if (sendVSCPFrame(0,
 17170                           ;main.c: 2256: 9,
 17171                           ;main.c: 2257: 0,
 17172                           ;main.c: 2258: 0,
 17173                           ;main.c: 2259: 2,
 17174                           ;main.c: 2260: vscpData)) {
 17175  002872  6B95               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17176  002874  6B94               	clrf	?_sendVSCPFrame& (0+255),b
 17177  002876  0E09               	movlw	9
 17178  002878  6F96               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17179  00287A  6B97               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17180  00287C  6B98               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17181  00287E  0E02               	movlw	2
 17182  002880  6F99               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17183  002882  0E01               	movlw	high _vscpData
 17184  002884  0100               	movlb	0	; () banked
 17185  002886  6F9B               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17186  002888  0EDC               	movlw	low _vscpData
 17187  00288A  6F9A               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17188  00288C  EC8D  F014         	call	_sendVSCPFrame	;wreg free
 17189  002890  0900               	iorlw	0
 17190  002892  E041               	bz	l15963
 17191                           
 17192                           ;main.c: 2262: timekeeper = 0;
 17193  002894  6A23               	clrf	_timekeeper,c	;volatile
 17194  002896  6A24               	clrf	_timekeeper+1,c	;volatile
 17195  002898  6A25               	clrf	_timekeeper+2,c	;volatile
 17196  00289A  6A26               	clrf	_timekeeper+3,c	;volatile
 17197                           
 17198                           ;main.c: 2263: while (timekeeper < timeout) {
 17199  00289C  D02C               	goto	l15961
 17200  00289E                     l1083:
 17201                           
 17202                           ; BSR set to: 0
 17203  00289E  0004               	clrwdt		;# 
 17204                           
 17205                           ;main.c: 2267: if (getVSCPFrame(&vscpClass,
 17206                           ;main.c: 2268: &vscpType,
 17207                           ;main.c: 2269: &vscpNodeId,
 17208                           ;main.c: 2270: &vscpPriority,
 17209                           ;main.c: 2271: &vscpSize,
 17210                           ;main.c: 2272: vscpData)) {
 17211  0028A0  0100               	movlb	0	; () banked
 17212  0028A2  0EEC               	movlw	low _vscpType
 17213  0028A4  6F71               	movwf	?_getVSCPFrame& (0+255),b
 17214  0028A6  0EE9               	movlw	low _vscpNodeId
 17215  0028A8  6F72               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17216  0028AA  0EEA               	movlw	low _vscpPriority
 17217  0028AC  6F73               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17218  0028AE  0EEB               	movlw	low _vscpSize
 17219  0028B0  6F74               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17220  0028B2  0E01               	movlw	high _vscpData
 17221  0028B4  6F76               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17222  0028B6  0EDC               	movlw	low _vscpData
 17223  0028B8  6F75               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17224  0028BA  0E3B               	movlw	_vscpClass& (0+255)
 17225  0028BC  EC9D  F010         	call	_getVSCPFrame
 17226  0028C0  0900               	iorlw	0
 17227  0028C2  E019               	bz	l15961
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;main.c: 2273: if ((nodeid == vscpNodeId) &&
 17231                           ;main.c: 2274: (0 == vscpClass) &&
 17232                           ;main.c: 2275: (10 == vscpType) &&
 17233                           ;main.c: 2276: (2 == vscpSize) &&
 17234                           ;main.c: 2277: (reg == vscpData[ 0 ])) {
 17235  0028C4  51E9               	movf	_vscpNodeId& (0+255),w,b
 17236  0028C6  63BC               	cpfseq	readRegister@nodeid& (0+255),b
 17237  0028C8  D016               	goto	l15961
 17238                           
 17239                           ; BSR set to: 0
 17240  0028CA  503C               	movf	_vscpClass+1,w,c
 17241  0028CC  103B               	iorwf	_vscpClass,w,c
 17242  0028CE  E113               	bnz	l15961
 17243                           
 17244                           ; BSR set to: 0
 17245  0028D0  51EC               	movf	_vscpType& (0+255),w,b
 17246  0028D2  0A0A               	xorlw	10
 17247  0028D4  E110               	bnz	l15961
 17248                           
 17249                           ; BSR set to: 0
 17250  0028D6  51EB               	movf	_vscpSize& (0+255),w,b
 17251  0028D8  0A02               	xorlw	2
 17252  0028DA  E10D               	bnz	l15961
 17253                           
 17254                           ; BSR set to: 0
 17255  0028DC  0101               	movlb	1	; () banked
 17256  0028DE  51DC               	movf	_vscpData& (0+255),w,b
 17257  0028E0  0100               	movlb	0	; () banked
 17258  0028E2  63B4               	cpfseq	readRegister@reg& (0+255),b
 17259  0028E4  D008               	goto	l15961
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;main.c: 2278: *value = vscpData[ 1 ];
 17263  0028E6  51B7               	movf	readRegister@value& (0+255),w,b
 17264  0028E8  6ED9               	movwf	fsr2l,c
 17265  0028EA  6ADA               	clrf	fsr2h,c
 17266  0028EC  0101               	movlb	1	; () banked
 17267  0028EE  C1DD  FFDF         	movff	_vscpData+1,indf2
 17268                           
 17269                           ; BSR set to: 1
 17270                           ;main.c: 2279: return 1;
 17271  0028F2  0E01               	movlw	1
 17272  0028F4  D011               	goto	l1086
 17273  0028F6                     l15961:
 17274  0028F6  0100               	movlb	0	; () banked
 17275  0028F8  51B5               	movf	readRegister@timeout& (0+255),w,b
 17276  0028FA  6FB8               	movwf	??_readRegister& (0+255),b
 17277  0028FC  51B6               	movf	(readRegister@timeout+1)& (0+255),w,b
 17278  0028FE  6FB9               	movwf	(??_readRegister+1)& (0+255),b
 17279  002900  6BBA               	clrf	(??_readRegister+2)& (0+255),b
 17280  002902  6BBB               	clrf	(??_readRegister+3)& (0+255),b
 17281  002904  51B8               	movf	??_readRegister& (0+255),w,b
 17282  002906  5C23               	subwf	_timekeeper,w,c	;volatile
 17283  002908  51B9               	movf	(??_readRegister+1)& (0+255),w,b
 17284  00290A  5824               	subwfb	_timekeeper+1,w,c	;volatile
 17285  00290C  51BA               	movf	(??_readRegister+2)& (0+255),w,b
 17286  00290E  5825               	subwfb	_timekeeper+2,w,c	;volatile
 17287  002910  51BB               	movf	(??_readRegister+3)& (0+255),w,b
 17288  002912  5826               	subwfb	_timekeeper+3,w,c	;volatile
 17289  002914  E3C4               	bnc	l1083
 17290  002916                     l15963:
 17291                           
 17292                           ;main.c: 2280: }
 17293                           ;main.c: 2281: }
 17294                           ;main.c: 2282: }
 17295                           ;main.c: 2283: }
 17296                           ;main.c: 2285: return 0;
 17297  002916  0E00               	movlw	0
 17298  002918                     l1086:
 17299  002918  0012               	return	
 17300  00291A                     __end_of_readRegister:
 17301                           	opt stack 0
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           indf0	equ	0xFEF
 17310                           postinc0	equ	0xFEE
 17311                           fsr0h	equ	0xFEA
 17312                           fsr0l	equ	0xFE9
 17313                           wreg	equ	0xFE8
 17314                           indf1	equ	0xFE7
 17315                           postinc1	equ	0xFE6
 17316                           postdec1	equ	0xFE5
 17317                           fsr1h	equ	0xFE2
 17318                           fsr1l	equ	0xFE1
 17319                           indf2	equ	0xFDF
 17320                           postinc2	equ	0xFDE
 17321                           postdec2	equ	0xFDD
 17322                           plusw2	equ	0xFDB
 17323                           fsr2h	equ	0xFDA
 17324                           fsr2l	equ	0xFD9
 17325                           status	equ	0xFD8
 17326                           
 17327 ;; *************** function _sendVSCPFrame *****************
 17328 ;; Defined at:
 17329 ;;		line 2972 in file "main.c"
 17330 ;; Parameters:    Size  Location     Type
 17331 ;;  vscpclass       2   52[BANK0 ] unsigned short 
 17332 ;;  vscptype        1   54[BANK0 ] unsigned char 
 17333 ;;  nodeid          1   55[BANK0 ] unsigned char 
 17334 ;;  priority        1   56[BANK0 ] unsigned char 
 17335 ;;  size            1   57[BANK0 ] unsigned char 
 17336 ;;  pData           2   58[BANK0 ] PTR unsigned char 
 17337 ;;		 -> vscpData(8), 
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;  id              4   80[BANK0 ] unsigned long 
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  1    wreg      unsigned char 
 17342 ;; Registers used:
 17343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : F/0
 17346 ;;		On exit  : E/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17349 ;;      Params:         0       8       0       0       0       0       0
 17350 ;;      Locals:         0       4       0       0       0       0       0
 17351 ;;      Temps:          0      20       0       0       0       0       0
 17352 ;;      Totals:         0      32       0       0       0       0       0
 17353 ;;Total ram usage:       32 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    6
 17356 ;; This function calls:
 17357 ;;		_sendCANFrame
 17358 ;; This function is called by:
 17359 ;;		_doModeVerbose
 17360 ;;		_readRegister
 17361 ;;		_readRegisterExtended
 17362 ;;		_writeRegisterExtended
 17363 ;; This function uses a non-reentrant model
 17364 ;;
 17365                           
 17366                           	psect	text34
 17367  00291A                     __ptext34:
 17368                           	opt stack 0
 17369  00291A                     _sendVSCPFrame:
 17370                           	opt stack 20
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;main.c: 2973: uint32_t id = ((uint32_t) priority << 26) |
 17374                           ;main.c: 2974: ((uint32_t) vscpclass << 16) |
 17375                           ;main.c: 2975: ((uint32_t) vscptype << 8) |
 17376                           ;main.c: 2976: nodeid;
 17377                           
 17378                           ;incstack = 0
 17379                           ;incstack = 0
 17380  00291A  C096  F09C         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17381  00291E  6B9D               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17382  002920  6B9E               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17383  002922  6B9F               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17384  002924  C09E  F09F         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17385  002928  C09D  F09E         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17386  00292C  C09C  F09D         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17387  002930  6B9C               	clrf	??_sendVSCPFrame& (0+255),b
 17388  002932  5194               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17389  002934  6FA0               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17390  002936  5195               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17391  002938  6FA1               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17392  00293A  6BA2               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17393  00293C  6BA3               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17394  00293E  C0A1  F0A3         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17395  002942  C0A0  F0A2         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17396  002946  6BA1               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17397  002948  6BA0               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17398  00294A  C098  F0A4         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17399  00294E  6BA5               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17400  002950  6BA6               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17401  002952  6BA7               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17402  002954  0E1A               	movlw	26
 17403  002956                     u19875:
 17404  002956  90D8               	bcf	status,0,c
 17405  002958  37A4               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17406  00295A  37A5               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17407  00295C  37A6               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17408  00295E  37A7               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17409  002960  2EE8               	decfsz	wreg,f,c
 17410  002962  D7F9               	goto	u19875
 17411  002964  51A0               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17412  002966  11A4               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17413  002968  6FA8               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17414  00296A  51A1               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17415  00296C  11A5               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17416  00296E  6FA9               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17417  002970  51A2               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17418  002972  11A6               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17419  002974  6FAA               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17420  002976  51A3               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17421  002978  11A7               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17422  00297A  6FAB               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17423  00297C  519C               	movf	??_sendVSCPFrame& (0+255),w,b
 17424  00297E  11A8               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17425  002980  6FAC               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17426  002982  519D               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17427  002984  11A9               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17428  002986  6FAD               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17429  002988  519E               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17430  00298A  11AA               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17431  00298C  6FAE               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17432  00298E  519F               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17433  002990  11AB               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17434  002992  6FAF               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17435  002994  5197               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17436  002996  11AC               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17437  002998  6FB0               	movwf	sendVSCPFrame@id& (0+255),b
 17438  00299A  51AD               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17439  00299C  6FB1               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17440  00299E  51AE               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17441  0029A0  6FB2               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17442  0029A2  51AF               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17443  0029A4  6FB3               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;main.c: 2978: if (!sendCANFrame(id, size, pData)) {
 17447  0029A6  C0B0  F08D         	movff	sendVSCPFrame@id,?_sendCANFrame
 17448  0029AA  C0B1  F08E         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17449  0029AE  C0B2  F08F         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17450  0029B2  C0B3  F090         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17451  0029B6  C099  F091         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17452  0029BA  C09A  F092         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17453  0029BE  C09B  F093         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17454  0029C2  EC4A  F00C         	call	_sendCANFrame	;wreg free
 17455  0029C6  0900               	iorlw	0
 17456                           
 17457                           ;main.c: 2980: return 0;
 17458  0029C8  0E00               	movlw	0
 17459  0029CA  A4D8               	btfss	status,2,c
 17460                           
 17461                           ;main.c: 2981: }
 17462                           ;main.c: 2983: return 1;
 17463  0029CC  0E01               	movlw	1
 17464  0029CE  0012               	return	
 17465  0029D0                     __end_of_sendVSCPFrame:
 17466                           	opt stack 0
 17467                           tblptru	equ	0xFF8
 17468                           tblptrh	equ	0xFF7
 17469                           tblptrl	equ	0xFF6
 17470                           tablat	equ	0xFF5
 17471                           prodh	equ	0xFF4
 17472                           prodl	equ	0xFF3
 17473                           intcon	equ	0xFF2
 17474                           indf0	equ	0xFEF
 17475                           postinc0	equ	0xFEE
 17476                           fsr0h	equ	0xFEA
 17477                           fsr0l	equ	0xFE9
 17478                           wreg	equ	0xFE8
 17479                           indf1	equ	0xFE7
 17480                           postinc1	equ	0xFE6
 17481                           postdec1	equ	0xFE5
 17482                           fsr1h	equ	0xFE2
 17483                           fsr1l	equ	0xFE1
 17484                           indf2	equ	0xFDF
 17485                           postinc2	equ	0xFDE
 17486                           postdec2	equ	0xFDD
 17487                           plusw2	equ	0xFDB
 17488                           fsr2h	equ	0xFDA
 17489                           fsr2l	equ	0xFD9
 17490                           status	equ	0xFD8
 17491                           
 17492 ;; *************** function _sendCANFrame *****************
 17493 ;; Defined at:
 17494 ;;		line 3018 in file "main.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;  id              4   45[BANK0 ] unsigned long 
 17497 ;;  dlc             1   49[BANK0 ] unsigned char 
 17498 ;;  pdata           2   50[BANK0 ] PTR unsigned char 
 17499 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17500 ;; Auto vars:     Size  Location     Type
 17501 ;;		None
 17502 ;; Return value:  Size  Location     Type
 17503 ;;                  1    wreg      unsigned char 
 17504 ;; Registers used:
 17505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17506 ;; Tracked objects:
 17507 ;;		On entry : F/0
 17508 ;;		On exit  : E/0
 17509 ;;		Unchanged: 0/0
 17510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17511 ;;      Params:         0       7       0       0       0       0       0
 17512 ;;      Locals:         0       0       0       0       0       0       0
 17513 ;;      Temps:          0       0       0       0       0       0       0
 17514 ;;      Totals:         0       7       0       0       0       0       0
 17515 ;;Total ram usage:        7 bytes
 17516 ;; Hardware stack levels used:    1
 17517 ;; Hardware stack levels required when called:    5
 17518 ;; This function calls:
 17519 ;;		_ECANSendMessage
 17520 ;; This function is called by:
 17521 ;;		_doModeSLCAN
 17522 ;;		_receiveVSCPModeCanalMsg
 17523 ;;		_sendVSCPFrame
 17524 ;; This function uses a non-reentrant model
 17525 ;;
 17526                           
 17527                           	psect	text35
 17528  001894                     __ptext35:
 17529                           	opt stack 0
 17530  001894                     _sendCANFrame:
 17531                           	opt stack 23
 17532                           
 17533                           ; BSR set to: 0
 17534                           ;main.c: 3019: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17535                           
 17536                           ;incstack = 0
 17537                           ;incstack = 0
 17538  001894  C08D  F068         	movff	sendCANFrame@id,?_ECANSendMessage
 17539  001898  C08E  F069         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17540  00189C  C08F  F06A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17541  0018A0  C090  F06B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17542  0018A4  C092  F06C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17543  0018A8  C093  F06D         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17544  0018AC  C091  F06E         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17545  0018B0  0E20               	movlw	32
 17546  0018B2  6F6F               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17547  0018B4  EC8E  F01C         	call	_ECANSendMessage	;wreg free
 17548  0018B8  0900               	iorlw	0
 17549  0018BA  E107               	bnz	l15835
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;main.c: 3021: can_transmitOverruns++;
 17553  0018BC  0101               	movlb	1	; () banked
 17554  0018BE  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17555  0018C0  0E00               	movlw	0
 17556  0018C2  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17557  0018C4  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17558  0018C6  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17559                           
 17560                           ; BSR set to: 1
 17561                           ;main.c: 3022: return 0;
 17562  0018C8  D001               	goto	l1282
 17563  0018CA                     l15835:
 17564                           
 17565                           ; BSR set to: 0
 17566                           ;main.c: 3023: }
 17567                           ;main.c: 3025: return 1;
 17568  0018CA  0E01               	movlw	1
 17569  0018CC                     l1282:
 17570  0018CC  0012               	return	
 17571  0018CE                     __end_of_sendCANFrame:
 17572                           	opt stack 0
 17573                           tblptru	equ	0xFF8
 17574                           tblptrh	equ	0xFF7
 17575                           tblptrl	equ	0xFF6
 17576                           tablat	equ	0xFF5
 17577                           prodh	equ	0xFF4
 17578                           prodl	equ	0xFF3
 17579                           intcon	equ	0xFF2
 17580                           indf0	equ	0xFEF
 17581                           postinc0	equ	0xFEE
 17582                           fsr0h	equ	0xFEA
 17583                           fsr0l	equ	0xFE9
 17584                           wreg	equ	0xFE8
 17585                           indf1	equ	0xFE7
 17586                           postinc1	equ	0xFE6
 17587                           postdec1	equ	0xFE5
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           indf2	equ	0xFDF
 17591                           postinc2	equ	0xFDE
 17592                           postdec2	equ	0xFDD
 17593                           plusw2	equ	0xFDB
 17594                           fsr2h	equ	0xFDA
 17595                           fsr2l	equ	0xFD9
 17596                           status	equ	0xFD8
 17597                           
 17598 ;; *************** function _ECANSendMessage *****************
 17599 ;; Defined at:
 17600 ;;		line 617 in file "ECAN.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;  id              4    8[BANK0 ] unsigned long 
 17603 ;;  data            2   12[BANK0 ] PTR unsigned char 
 17604 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17605 ;;  dataLen         1   14[BANK0 ] unsigned char 
 17606 ;;  msgFlags        1   15[BANK0 ] enum E16315
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;  pb             18   17[BANK0 ] PTR unsigned char [9]
 17609 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17610 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17611 ;;		 -> B0CON(1), 
 17612 ;;  ptr             2   43[BANK0 ] PTR unsigned char 
 17613 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17614 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17615 ;;		 -> B0CON(1), 
 17616 ;;  tempPtr         2   39[BANK0 ] PTR unsigned char 
 17617 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17618 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17619 ;;		 -> B0CON(1), 
 17620 ;;  i               1   42[BANK0 ] unsigned char 
 17621 ;;  temp            1   41[BANK0 ] unsigned char 
 17622 ;;  tempBSEL0       1   38[BANK0 ] struct .
 17623 ;;  j               1   37[BANK0 ] unsigned char 
 17624 ;;  buffers         1   36[BANK0 ] unsigned char 
 17625 ;;  mode            1   35[BANK0 ] unsigned char 
 17626 ;; Return value:  Size  Location     Type
 17627 ;;                  1    wreg      enum E15660
 17628 ;; Registers used:
 17629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17630 ;; Tracked objects:
 17631 ;;		On entry : F/0
 17632 ;;		On exit  : F/0
 17633 ;;		Unchanged: 0/0
 17634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17635 ;;      Params:         0       8       0       0       0       0       0
 17636 ;;      Locals:         0      28       0       0       0       0       0
 17637 ;;      Temps:          0       1       0       0       0       0       0
 17638 ;;      Totals:         0      37       0       0       0       0       0
 17639 ;;Total ram usage:       37 bytes
 17640 ;; Hardware stack levels used:    1
 17641 ;; Hardware stack levels required when called:    4
 17642 ;; This function calls:
 17643 ;;		__CANIDToRegs
 17644 ;; This function is called by:
 17645 ;;		_sendCANFrame
 17646 ;; This function uses a non-reentrant model
 17647 ;;
 17648                           
 17649                           	psect	text36
 17650  00391C                     __ptext36:
 17651                           	opt stack 0
 17652  00391C                     _ECANSendMessage:
 17653                           	opt stack 23
 17654                           
 17655                           ; BSR set to: 0
 17656                           ;ECAN.c: 619: BYTE mode;
 17657                           ;ECAN.c: 620: BYTE buffers;
 17658                           ;ECAN.c: 628: BYTE i,j;
 17659                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17660                           ;ECAN.c: 630: BYTE* pb[9];
 17661                           ;ECAN.c: 631: BYTE temp;
 17662                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17663                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17664                           
 17665                           ;incstack = 0
 17666                           ;incstack = 0
 17667  00391C  0E0F               	movlw	15	;volatile
 17668  00391E  0100               	movlb	0	; () banked
 17669  003920  6F72               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17670  003922  0E40               	movlw	64	;volatile
 17671  003924  6F71               	movwf	ECANSendMessage@pb& (0+255),b
 17672                           
 17673                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17674  003926  0E0F               	movlw	15	;volatile
 17675  003928  6F74               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17676  00392A  0E30               	movlw	48	;volatile
 17677  00392C  6F73               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17678                           
 17679                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17680  00392E  0E0F               	movlw	15	;volatile
 17681  003930  6F76               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17682  003932  0E20               	movlw	32	;volatile
 17683  003934  6F75               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17684                           
 17685                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17686  003936  0E0E               	movlw	14	;volatile
 17687  003938  6F78               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17688  00393A  0E20               	movlw	32	;volatile
 17689  00393C  6F77               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17690                           
 17691                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17692  00393E  0E0E               	movlw	14	;volatile
 17693  003940  6F7A               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17694  003942  0E30               	movlw	48	;volatile
 17695  003944  6F79               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17696                           
 17697                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17698  003946  0E0E               	movlw	14	;volatile
 17699  003948  6F7C               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17700  00394A  0E40               	movlw	64	;volatile
 17701  00394C  6F7B               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17702                           
 17703                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17704  00394E  0E0E               	movlw	14	;volatile
 17705  003950  6F7E               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17706  003952  0E50               	movlw	80	;volatile
 17707  003954  6F7D               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17708                           
 17709                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17710  003956  0E0E               	movlw	14	;volatile
 17711  003958  6F80               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17712  00395A  0E60               	movlw	96	;volatile
 17713  00395C  6F7F               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17714                           
 17715                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17716  00395E  0E0E               	movlw	14	;volatile
 17717  003960  6F82               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17718  003962  0E70               	movlw	112	;volatile
 17719  003964  6F81               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17723  003966  5077               	movf	3959,w,c	;volatile
 17724  003968  0BC0               	andlw	192
 17725  00396A  6F83               	movwf	ECANSendMessage@mode& (0+255),b
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ECAN.c: 660: if ( mode == 0x00 )
 17729  00396C  6783               	tstfsz	ECANSendMessage@mode& (0+255),b
 17730  00396E  D002               	goto	l15975
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;ECAN.c: 661: buffers = 2;
 17734  003970  0E02               	movlw	2
 17735  003972  D001               	goto	L15
 17736  003974                     l15975:
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;ECAN.c: 662: else
 17740                           ;ECAN.c: 663: buffers = 8;
 17741  003974  0E08               	movlw	8
 17742  003976                     L15:
 17743  003976  6F84               	movwf	ECANSendMessage@buffers& (0+255),b
 17744                           
 17745                           ; BSR set to: 0
 17746                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17747  003978  010D               	movlb	13	; () banked
 17748  00397A  90D8               	bcf	status,0,c
 17749  00397C  31F8               	rrcf	248,w,b	;volatile
 17750  00397E  0100               	movlb	0	; () banked
 17751  003980  6F86               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17755  003982  6B8A               	clrf	ECANSendMessage@i& (0+255),b
 17756  003984  D07D               	goto	l16035
 17757  003986                     l15981:
 17758                           
 17759                           ; BSR set to: 0
 17760                           ;ECAN.c: 688: {
 17761                           ;ECAN.c: 693: ptr = pb[i];
 17762  003986  518A               	movf	ECANSendMessage@i& (0+255),w,b
 17763  003988  0D02               	mullw	2
 17764  00398A  50F3               	movf	prodl,w,c
 17765  00398C  0F71               	addlw	low ECANSendMessage@pb
 17766  00398E  6ED9               	movwf	fsr2l,c
 17767  003990  6ADA               	clrf	fsr2h,c
 17768  003992  CFDE F08B          	movff	postinc2,ECANSendMessage@ptr
 17769  003996  CFDD F08C          	movff	postdec2,ECANSendMessage@ptr+1
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;ECAN.c: 694: tempPtr = ptr;
 17773  00399A  C08B  F087         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17774  00399E  C08C  F088         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17775                           
 17776                           ; BSR set to: 0
 17777                           ;ECAN.c: 702: if ( i > 2 )
 17778  0039A2  0E02               	movlw	2
 17779  0039A4  658A               	cpfsgt	ECANSendMessage@i& (0+255),b
 17780  0039A6  D004               	goto	l15993
 17781                           
 17782                           ; BSR set to: 0
 17783                           ;ECAN.c: 703: {
 17784                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17785  0039A8  90D8               	bcf	status,0,c
 17786  0039AA  3386               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17787                           
 17788                           ; BSR set to: 0
 17789                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17790  0039AC  A186               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17791  0039AE  D067               	goto	l16033
 17792  0039B0                     l15993:
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;ECAN.c: 714: }
 17796                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17797  0039B0  C08B  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17798  0039B4  C08C  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17799  0039B8  50DF               	movf	indf2,w,c
 17800  0039BA  6F70               	movwf	??_ECANSendMessage& (0+255),b
 17801  0039BC  B770               	btfsc	??_ECANSendMessage& (0+255),3,b
 17802  0039BE  D05F               	goto	l16033
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;ECAN.c: 721: {
 17806                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17807  0039C0  C08B  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17808  0039C4  C08C  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17809  0039C8  0EFC               	movlw	252
 17810  0039CA  16DF               	andwf	indf2,f,c
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17814  0039CC  C06F  F070         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17815  0039D0  0E03               	movlw	3
 17816  0039D2  1770               	andwf	??_ECANSendMessage& (0+255),f,b
 17817  0039D4  C08B  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17818  0039D8  C08C  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17819  0039DC  5170               	movf	??_ECANSendMessage& (0+255),w,b
 17820  0039DE  12DF               	iorwf	indf2,f,c
 17821                           
 17822                           ; BSR set to: 0
 17823                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17824  0039E0  AD6F               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17825  0039E2  D004               	goto	l1450
 17826                           
 17827                           ; BSR set to: 0
 17828                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17829  0039E4  516E               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17830  0039E6  0940               	iorlw	64
 17831  0039E8  6F89               	movwf	ECANSendMessage@temp& (0+255),b
 17832  0039EA  D002               	goto	l16003
 17833  0039EC                     l1450:
 17834                           
 17835                           ; BSR set to: 0
 17836                           ;ECAN.c: 729: else
 17837                           ;ECAN.c: 730: temp = dataLen;
 17838  0039EC  C06E  F089         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17839  0039F0                     l16003:
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;ECAN.c: 732: *(ptr+5) = temp;
 17843  0039F0  EE20 F005          	lfsr	2,5
 17844  0039F4  518B               	movf	ECANSendMessage@ptr& (0+255),w,b
 17845  0039F6  26D9               	addwf	fsr2l,f,c
 17846  0039F8  518C               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17847  0039FA  22DA               	addwfc	fsr2h,f,c
 17848  0039FC  C089  FFDF         	movff	ECANSendMessage@temp,indf2
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17852  003A00  AB6F               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17853  003A02  D003               	goto	l1452
 17854                           
 17855                           ; BSR set to: 0
 17856                           ;ECAN.c: 736: temp = 1;
 17857  003A04  0E01               	movlw	1
 17858  003A06  6F89               	movwf	ECANSendMessage@temp& (0+255),b
 17859  003A08  D001               	goto	l16009
 17860  003A0A                     l1452:
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;ECAN.c: 738: else
 17864                           ;ECAN.c: 739: temp = 0;
 17865  003A0A  6B89               	clrf	ECANSendMessage@temp& (0+255),b
 17866  003A0C                     l16009:
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17870  003A0C  298B               	incf	ECANSendMessage@ptr& (0+255),w,b
 17871  003A0E  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17872  003A10  0E00               	movlw	0
 17873  003A12  218C               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17874  003A14  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17875  003A16  C068  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17876  003A1A  C069  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17877  003A1E  C06A  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17878  003A22  C06B  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17879  003A26  C089  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17880  003A2A  EC2D  F01A         	call	__CANIDToRegs	;wreg free
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;ECAN.c: 745: ptr += 6;
 17884  003A2E  0E06               	movlw	6
 17885  003A30  278B               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17886  003A32  0E00               	movlw	0
 17887  003A34  238C               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17891  003A36  6B85               	clrf	ECANSendMessage@j& (0+255),b
 17892  003A38  D00F               	goto	l16023
 17893  003A3A                     l16015:
 17894                           
 17895                           ; BSR set to: 0
 17896                           ;ECAN.c: 748: *ptr++ = *data++;
 17897  003A3A  C06C  FFD9         	movff	ECANSendMessage@data,fsr2l
 17898  003A3E  C06D  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17899  003A42  C08B  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17900  003A46  C08C  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17901  003A4A  CFDF FFE7          	movff	indf2,indf1
 17902                           
 17903                           ; BSR set to: 0
 17904  003A4E  4B6C               	infsnz	ECANSendMessage@data& (0+255),f,b
 17905  003A50  2B6D               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17906                           
 17907                           ; BSR set to: 0
 17908  003A52  4B8B               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17909  003A54  2B8C               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17910                           
 17911                           ; BSR set to: 0
 17912  003A56  2B85               	incf	ECANSendMessage@j& (0+255),f,b
 17913  003A58                     l16023:
 17914                           
 17915                           ; BSR set to: 0
 17916  003A58  516E               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17917  003A5A  5D85               	subwf	ECANSendMessage@j& (0+255),w,b
 17918  003A5C  E3EE               	bnc	l16015
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17922  003A5E  C087  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17923  003A62  C088  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17924  003A66  50DF               	movf	indf2,w,c
 17925  003A68  6F70               	movwf	??_ECANSendMessage& (0+255),b
 17926  003A6A  B570               	btfsc	??_ECANSendMessage& (0+255),2,b
 17927  003A6C  D006               	goto	l16029
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17931  003A6E  C087  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17932  003A72  C088  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17933  003A76  0E00               	movlw	0
 17934  003A78  86DB               	bsf	plusw2,3,c
 17935  003A7A                     l16029:
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;ECAN.c: 755: return TRUE;
 17939  003A7A  0E01               	movlw	1
 17940  003A7C  D005               	goto	l1458
 17941  003A7E                     l16033:
 17942                           
 17943                           ; BSR set to: 0
 17944  003A7E  2B8A               	incf	ECANSendMessage@i& (0+255),f,b
 17945  003A80                     l16035:
 17946                           
 17947                           ; BSR set to: 0
 17948  003A80  5184               	movf	ECANSendMessage@buffers& (0+255),w,b
 17949  003A82  5D8A               	subwf	ECANSendMessage@i& (0+255),w,b
 17950  003A84  E380               	bnc	l15981
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;ECAN.c: 756: }
 17954                           ;ECAN.c: 757: }
 17955                           ;ECAN.c: 760: return FALSE;
 17956  003A86  0E00               	movlw	0
 17957  003A88                     l1458:
 17958                           
 17959                           ; BSR set to: 0
 17960  003A88  0012               	return	
 17961  003A8A                     __end_of_ECANSendMessage:
 17962                           	opt stack 0
 17963                           tblptru	equ	0xFF8
 17964                           tblptrh	equ	0xFF7
 17965                           tblptrl	equ	0xFF6
 17966                           tablat	equ	0xFF5
 17967                           prodh	equ	0xFF4
 17968                           prodl	equ	0xFF3
 17969                           intcon	equ	0xFF2
 17970                           indf0	equ	0xFEF
 17971                           postinc0	equ	0xFEE
 17972                           fsr0h	equ	0xFEA
 17973                           fsr0l	equ	0xFE9
 17974                           wreg	equ	0xFE8
 17975                           indf1	equ	0xFE7
 17976                           postinc1	equ	0xFE6
 17977                           postdec1	equ	0xFE5
 17978                           fsr1h	equ	0xFE2
 17979                           fsr1l	equ	0xFE1
 17980                           indf2	equ	0xFDF
 17981                           postinc2	equ	0xFDE
 17982                           postdec2	equ	0xFDD
 17983                           plusw2	equ	0xFDB
 17984                           fsr2h	equ	0xFDA
 17985                           fsr2l	equ	0xFD9
 17986                           status	equ	0xFD8
 17987                           
 17988 ;; *************** function __CANIDToRegs *****************
 17989 ;; Defined at:
 17990 ;;		line 1101 in file "ECAN.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17993 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17994 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17995 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17996 ;;  val             4    2[BANK0 ] unsigned long 
 17997 ;;  type            1    6[BANK0 ] unsigned char 
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;  Value           1    7[BANK0 ] PTR struct _CAN_MESSAGE_
 18000 ;;		 -> _CANIDToRegs@val(4), 
 18001 ;; Return value:  Size  Location     Type
 18002 ;;		None               void
 18003 ;; Registers used:
 18004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 18005 ;; Tracked objects:
 18006 ;;		On entry : F/0
 18007 ;;		On exit  : F/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18010 ;;      Params:         0       7       0       0       0       0       0
 18011 ;;      Locals:         0       1       0       0       0       0       0
 18012 ;;      Temps:          2       0       0       0       0       0       0
 18013 ;;      Totals:         2       8       0       0       0       0       0
 18014 ;;Total ram usage:       10 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    3
 18017 ;; This function calls:
 18018 ;;		Nothing
 18019 ;; This function is called by:
 18020 ;;		_doModeVerbose
 18021 ;;		_ECANSendMessage
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           	psect	text37
 18026  00345A                     __ptext37:
 18027                           	opt stack 0
 18028  00345A                     __CANIDToRegs:
 18029                           	opt stack 23
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18033                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;incstack = 0
 18037                           ;incstack = 0
 18038  00345A  0E62               	movlw	low __CANIDToRegs@val
 18039  00345C  6F67               	movwf	__CANIDToRegs@Value& (0+255),b
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;ECAN.c: 1106: if ( type == 0 )
 18043  00345E  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18044  003460  D022               	goto	l15431
 18045                           
 18046                           ; BSR set to: 0
 18047                           ;ECAN.c: 1107: {
 18048                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18049  003462  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18050  003464  6ED9               	movwf	fsr2l,c
 18051  003466  6ADA               	clrf	fsr2h,c
 18052  003468  50DF               	movf	indf2,w,c
 18053  00346A  6E21               	movwf	??__CANIDToRegs& (0+255),c
 18054  00346C  90D8               	bcf	status,0,c
 18055  00346E  3221               	rrcf	??__CANIDToRegs,f,c
 18056  003470  90D8               	bcf	status,0,c
 18057  003472  3221               	rrcf	??__CANIDToRegs,f,c
 18058  003474  90D8               	bcf	status,0,c
 18059  003476  3021               	rrcf	??__CANIDToRegs,w,c
 18060                           
 18061                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18062  003478  D862               	call	PL50	;call to abstracted procedure
 18063  00347A  2AD9               	incf	fsr2l,f,c
 18064  00347C  6ADA               	clrf	fsr2h,c
 18065  00347E  D872               	call	PL100	;call to abstracted procedure
 18066  003480                     u21045:
 18067  003480  90D8               	bcf	status,0,c
 18068  003482  3621               	rlcf	??__CANIDToRegs,f,c
 18069  003484  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 18070  003486  D7FC               	goto	u21045
 18071  003488  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18072                           
 18073                           ; BSR set to: 0
 18074                           ;ECAN.c: 1111: ptr++;
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18078  00348C  D846               	call	PL28	;call to abstracted procedure
 18079  00348E  D86A               	call	PL100	;call to abstracted procedure
 18080  003490                     u21055:
 18081  003490  90D8               	bcf	status,0,c
 18082  003492  3621               	rlcf	??__CANIDToRegs,f,c
 18083  003494  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 18084  003496  D7FC               	goto	u21055
 18085  003498  5021               	movf	??__CANIDToRegs,w,c
 18086  00349A  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18087  00349E  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18088  0034A2  6EDF               	movwf	indf2,c
 18089                           
 18090                           ;ECAN.c: 1113: }
 18091  0034A4  D039               	goto	l1512
 18092  0034A6                     l15431:
 18093                           
 18094                           ; BSR set to: 0
 18095                           ;ECAN.c: 1114: else
 18096                           ;ECAN.c: 1115: {
 18097                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18098  0034A6  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18099  0034A8  D842               	call	PL44	;call to abstracted procedure
 18100  0034AA  0E05               	movlw	5
 18101  0034AC  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 18102  0034AE                     u21065:
 18103  0034AE  90D8               	bcf	status,0,c
 18104  0034B0  3221               	rrcf	??__CANIDToRegs,f,c
 18105  0034B2  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 18106  0034B4  D7FC               	goto	u21065
 18107  0034B6  5021               	movf	??__CANIDToRegs,w,c
 18108                           
 18109                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18110  0034B8  D842               	call	PL50	;call to abstracted procedure
 18111  0034BA  0E03               	movlw	3
 18112  0034BC  D849               	call	PL66	;call to abstracted procedure
 18113  0034BE  3621               	rlcf	??__CANIDToRegs,f,c
 18114  0034C0  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;ECAN.c: 1119: ptr++;
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18121  0034C4  D82A               	call	PL28	;call to abstracted procedure
 18122  0034C6  0E02               	movlw	2
 18123  0034C8  D843               	call	PL66	;call to abstracted procedure
 18124  0034CA  3421               	rlcf	??__CANIDToRegs,w,c
 18125  0034CC  0BE0               	andlw	224
 18126  0034CE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18127  0034D2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18128  0034D6  6EDF               	movwf	indf2,c
 18129                           
 18130                           ; BSR set to: 0
 18131                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18132  0034D8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18133  0034DC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18134  0034E0  0E00               	movlw	0
 18135  0034E2  86DB               	bsf	plusw2,3,c
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18139  0034E4  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18140  0034E6  D823               	call	PL44	;call to abstracted procedure
 18141  0034E8  0E03               	movlw	3
 18142  0034EA  1621               	andwf	??__CANIDToRegs,f,c
 18143  0034EC  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18144                           
 18145                           ;ECAN.c: 1124: ptr++;
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18149  0034F0  D814               	call	PL28	;call to abstracted procedure
 18150  0034F2  2AD9               	incf	fsr2l,f,c
 18151  0034F4  6ADA               	clrf	fsr2h,c
 18152  0034F6  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18153  0034FA  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18154  0034FE  CFDF FFE7          	movff	indf2,indf1
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;ECAN.c: 1126: ptr++;
 18158  003502  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18159  003504  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18160                           
 18161                           ; BSR set to: 0
 18162                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18163  003506  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18164  003508  6ED9               	movwf	fsr2l,c
 18165  00350A  6ADA               	clrf	fsr2h,c
 18166  00350C  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18167  003510  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18168  003514  CFDF FFE7          	movff	indf2,indf1
 18169  003518                     l1512:
 18170                           
 18171                           ; BSR set to: 0
 18172  003518  0012               	return	
 18173  00351A                     __end_of__CANIDToRegs:
 18174                           	opt stack 0
 18175  00351A                     PL28:
 18176                           	opt stack 23
 18177  00351A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18178  00351E  5021               	movf	??__CANIDToRegs,w,c
 18179  003520  12DF               	iorwf	indf2,f,c
 18180  003522  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18181  003524  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18182  003526  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18183  003528  6ED9               	movwf	fsr2l,c
 18184  00352A  6ADA               	clrf	fsr2h,c
 18185  00352C  0012               	return	
 18186  00352E                     __end_ofPL28:
 18187                           	opt stack 0
 18188  00352E                     PL44:
 18189                           	opt stack 23
 18190  00352E  6ED9               	movwf	fsr2l,c
 18191  003530  6ADA               	clrf	fsr2h,c
 18192  003532  0E02               	movlw	2
 18193  003534  26D9               	addwf	fsr2l,f,c
 18194  003536  6ADA               	clrf	fsr2h,c
 18195  003538  50DF               	movf	indf2,w,c
 18196  00353A  6E21               	movwf	??__CANIDToRegs& (0+255),c
 18197  00353C  0012               	return	
 18198  00353E                     __end_ofPL44:
 18199                           	opt stack 0
 18200  00353E                     PL50:
 18201                           	opt stack 23
 18202  00353E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18203  003542  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18204  003546  6EDF               	movwf	indf2,c
 18205  003548  5167               	movf	__CANIDToRegs@Value& (0+255),w,b
 18206  00354A  6ED9               	movwf	fsr2l,c
 18207  00354C  6ADA               	clrf	fsr2h,c
 18208  00354E  0012               	return	
 18209  003550                     __end_ofPL50:
 18210                           	opt stack 0
 18211  003550                     PL66:
 18212                           	opt stack 23
 18213  003550  26D9               	addwf	fsr2l,f,c
 18214  003552  6ADA               	clrf	fsr2h,c
 18215  003554  50DF               	movf	indf2,w,c
 18216  003556  6E21               	movwf	??__CANIDToRegs& (0+255),c
 18217  003558  90D8               	bcf	status,0,c
 18218  00355A  3621               	rlcf	??__CANIDToRegs,f,c
 18219  00355C  90D8               	bcf	status,0,c
 18220  00355E  3621               	rlcf	??__CANIDToRegs,f,c
 18221  003560  90D8               	bcf	status,0,c
 18222  003562  0012               	return	
 18223  003564                     __end_ofPL66:
 18224                           	opt stack 0
 18225  003564                     PL100:
 18226                           	opt stack 23
 18227  003564  50DF               	movf	indf2,w,c
 18228  003566  6E21               	movwf	??__CANIDToRegs& (0+255),c
 18229  003568  0E05               	movlw	5
 18230  00356A  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 18231  00356C  0C05               	retlw	5
 18232  00356E                     __end_ofPL100:
 18233                           	opt stack 0
 18234                           tblptru	equ	0xFF8
 18235                           tblptrh	equ	0xFF7
 18236                           tblptrl	equ	0xFF6
 18237                           tablat	equ	0xFF5
 18238                           prodh	equ	0xFF4
 18239                           prodl	equ	0xFF3
 18240                           intcon	equ	0xFF2
 18241                           indf0	equ	0xFEF
 18242                           postinc0	equ	0xFEE
 18243                           fsr0h	equ	0xFEA
 18244                           fsr0l	equ	0xFE9
 18245                           wreg	equ	0xFE8
 18246                           indf1	equ	0xFE7
 18247                           postinc1	equ	0xFE6
 18248                           postdec1	equ	0xFE5
 18249                           fsr1h	equ	0xFE2
 18250                           fsr1l	equ	0xFE1
 18251                           indf2	equ	0xFDF
 18252                           postinc2	equ	0xFDE
 18253                           postdec2	equ	0xFDD
 18254                           plusw2	equ	0xFDB
 18255                           fsr2h	equ	0xFDA
 18256                           fsr2l	equ	0xFD9
 18257                           status	equ	0xFD8
 18258                           
 18259 ;; *************** function _memset *****************
 18260 ;; Defined at:
 18261 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;  p1              2    0[BANK0 ] PTR void 
 18264 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18265 ;;  c               2    2[BANK0 ] int 
 18266 ;;  n               2    4[BANK0 ] unsigned int 
 18267 ;; Auto vars:     Size  Location     Type
 18268 ;;  p               2   32[COMRAM] PTR unsigned char 
 18269 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18270 ;; Return value:  Size  Location     Type
 18271 ;;                  2    0[BANK0 ] PTR void 
 18272 ;; Registers used:
 18273 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18274 ;; Tracked objects:
 18275 ;;		On entry : F/0
 18276 ;;		On exit  : F/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18279 ;;      Params:         0       6       0       0       0       0       0
 18280 ;;      Locals:         2       0       0       0       0       0       0
 18281 ;;      Temps:          0       0       0       0       0       0       0
 18282 ;;      Totals:         2       6       0       0       0       0       0
 18283 ;;Total ram usage:        8 bytes
 18284 ;; Hardware stack levels used:    1
 18285 ;; Hardware stack levels required when called:    3
 18286 ;; This function calls:
 18287 ;;		Nothing
 18288 ;; This function is called by:
 18289 ;;		_doModeVerbose
 18290 ;;		_doModeSLCAN
 18291 ;;		_printGUID
 18292 ;;		_printMDF
 18293 ;;		_printNodeFirmwareVersion
 18294 ;; This function uses a non-reentrant model
 18295 ;;
 18296                           
 18297                           	psect	text38
 18298  001734                     __ptext38:
 18299                           	opt stack 0
 18300  001734                     _memset:
 18301                           	opt stack 25
 18302                           
 18303                           ; BSR set to: 0
 18304                           
 18305                           ; BSR set to: 0
 18306                           ;incstack = 0
 18307                           ;incstack = 0
 18308  001734  C060  F021         	movff	memset@p1,memset@p
 18309  001738  C061  F022         	movff	memset@p1+1,memset@p+1
 18310  00173C  D008               	goto	l11489
 18311  00173E                     l11485:
 18312                           
 18313                           ; BSR set to: 0
 18314  00173E  C021  FFD9         	movff	memset@p,fsr2l
 18315  001742  C022  FFDA         	movff	memset@p+1,fsr2h
 18316  001746  C062  FFDF         	movff	memset@c,indf2
 18317                           
 18318                           ; BSR set to: 0
 18319  00174A  4A21               	infsnz	memset@p,f,c
 18320  00174C  2A22               	incf	memset@p+1,f,c
 18321  00174E                     l11489:
 18322                           
 18323                           ; BSR set to: 0
 18324  00174E  0764               	decf	memset@n& (0+255),f,b
 18325  001750  A0D8               	btfss	status,0,c
 18326  001752  0765               	decf	(memset@n+1)& (0+255),f,b
 18327  001754  0100               	movlb	0	; () banked
 18328  001756  2964               	incf	memset@n& (0+255),w,b
 18329  001758  B4D8               	btfsc	status,2,c
 18330  00175A  2965               	incf	(memset@n+1)& (0+255),w,b
 18331  00175C  B4D8               	btfsc	status,2,c
 18332                           
 18333                           ; BSR set to: 0
 18334  00175E  0012               	return	
 18335  001760  D7EE               	goto	l11485
 18336  001762                     __end_of_memset:
 18337                           	opt stack 0
 18338                           tblptru	equ	0xFF8
 18339                           tblptrh	equ	0xFF7
 18340                           tblptrl	equ	0xFF6
 18341                           tablat	equ	0xFF5
 18342                           prodh	equ	0xFF4
 18343                           prodl	equ	0xFF3
 18344                           intcon	equ	0xFF2
 18345                           indf0	equ	0xFEF
 18346                           postinc0	equ	0xFEE
 18347                           fsr0h	equ	0xFEA
 18348                           fsr0l	equ	0xFE9
 18349                           wreg	equ	0xFE8
 18350                           indf1	equ	0xFE7
 18351                           postinc1	equ	0xFE6
 18352                           postdec1	equ	0xFE5
 18353                           fsr1h	equ	0xFE2
 18354                           fsr1l	equ	0xFE1
 18355                           indf2	equ	0xFDF
 18356                           postinc2	equ	0xFDE
 18357                           postdec2	equ	0xFDD
 18358                           plusw2	equ	0xFDB
 18359                           fsr2h	equ	0xFDA
 18360                           fsr2l	equ	0xFD9
 18361                           status	equ	0xFD8
 18362                           
 18363 ;; *************** function _printHelp *****************
 18364 ;; Defined at:
 18365 ;;		line 2595 in file "main.c"
 18366 ;; Parameters:    Size  Location     Type
 18367 ;;		None
 18368 ;; Auto vars:     Size  Location     Type
 18369 ;;		None
 18370 ;; Return value:  Size  Location     Type
 18371 ;;		None               void
 18372 ;; Registers used:
 18373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18374 ;; Tracked objects:
 18375 ;;		On entry : F/0
 18376 ;;		On exit  : 0/0
 18377 ;;		Unchanged: 0/0
 18378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18379 ;;      Params:         0       0       0       0       0       0       0
 18380 ;;      Locals:         0       0       0       0       0       0       0
 18381 ;;      Temps:          0       0       0       0       0       0       0
 18382 ;;      Totals:         0       0       0       0       0       0       0
 18383 ;;Total ram usage:        0 bytes
 18384 ;; Hardware stack levels used:    1
 18385 ;; Hardware stack levels required when called:    5
 18386 ;; This function calls:
 18387 ;;		_putsUSART
 18388 ;; This function is called by:
 18389 ;;		_doModeVerbose
 18390 ;; This function uses a non-reentrant model
 18391 ;;
 18392                           
 18393                           	psect	text39
 18394  0040B8                     __ptext39:
 18395                           	opt stack 0
 18396  0040B8                     _printHelp:
 18397                           	opt stack 23
 18398                           
 18399                           ; BSR set to: 0
 18400                           ;main.c: 2596: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18401                           
 18402                           ; BSR set to: 0
 18403                           ;incstack = 0
 18404                           ;incstack = 0
 18405  0040B8  0E75               	movlw	high STR_206
 18406  0040BA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18407  0040BC  0E49               	movlw	low STR_206
 18408  0040BE  6F60               	movwf	?_putsUSART& (0+255),b
 18409  0040C0  ECFF  F00D         	call	_putsUSART	;wreg free
 18410                           
 18411                           ;main.c: 2597: putsUSART((char *) "------------------------------------\r\n");
 18412  0040C4  0E6E               	movlw	high (STR_238+28)
 18413  0040C6  0100               	movlb	0	; () banked
 18414  0040C8  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18415  0040CA  0E6B               	movlw	low (STR_238+28)
 18416  0040CC  6F60               	movwf	?_putsUSART& (0+255),b
 18417  0040CE  ECFF  F00D         	call	_putsUSART	;wreg free
 18418                           
 18419                           ;main.c: 2598: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18420  0040D2  0E78               	movlw	high STR_208
 18421  0040D4  0100               	movlb	0	; () banked
 18422  0040D6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18423  0040D8  0E64               	movlw	low STR_208
 18424  0040DA  6F60               	movwf	?_putsUSART& (0+255),b
 18425  0040DC  ECFF  F00D         	call	_putsUSART	;wreg free
 18426                           
 18427                           ;main.c: 2599: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18428  0040E0  0E73               	movlw	high STR_209
 18429  0040E2  0100               	movlb	0	; () banked
 18430  0040E4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18431  0040E6  0ED8               	movlw	low STR_209
 18432  0040E8  6F60               	movwf	?_putsUSART& (0+255),b
 18433  0040EA  ECFF  F00D         	call	_putsUSART	;wreg free
 18434                           
 18435                           ;main.c: 2600: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18436  0040EE  0E73               	movlw	high STR_210
 18437  0040F0  0100               	movlb	0	; () banked
 18438  0040F2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18439  0040F4  0E7E               	movlw	low STR_210
 18440  0040F6  6F60               	movwf	?_putsUSART& (0+255),b
 18441  0040F8  ECFF  F00D         	call	_putsUSART	;wreg free
 18442                           
 18443                           ;main.c: 2601: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18444  0040FC  0E71               	movlw	high STR_211
 18445  0040FE  0100               	movlb	0	; () banked
 18446  004100  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18447  004102  0EF7               	movlw	low STR_211
 18448  004104  6F60               	movwf	?_putsUSART& (0+255),b
 18449  004106  ECFF  F00D         	call	_putsUSART	;wreg free
 18450                           
 18451                           ;main.c: 2602: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18452  00410A  0E72               	movlw	high STR_212
 18453  00410C  0100               	movlb	0	; () banked
 18454  00410E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18455  004110  0E5C               	movlw	low STR_212
 18456  004112  6F60               	movwf	?_putsUSART& (0+255),b
 18457  004114  ECFF  F00D         	call	_putsUSART	;wreg free
 18458                           
 18459                           ;main.c: 2603: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18460  004118  0E78               	movlw	high STR_213
 18461  00411A  0100               	movlb	0	; () banked
 18462  00411C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18463  00411E  0E0C               	movlw	low STR_213
 18464  004120  6F60               	movwf	?_putsUSART& (0+255),b
 18465  004122  ECFF  F00D         	call	_putsUSART	;wreg free
 18466                           
 18467                           ;main.c: 2604: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18468  004126  0E72               	movlw	high STR_214
 18469  004128  0100               	movlb	0	; () banked
 18470  00412A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18471  00412C  0E8E               	movlw	low STR_214
 18472  00412E  6F60               	movwf	?_putsUSART& (0+255),b
 18473  004130  ECFF  F00D         	call	_putsUSART	;wreg free
 18474                           
 18475                           ;main.c: 2605: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18476  004134  0E73               	movlw	high STR_215
 18477  004136  0100               	movlb	0	; () banked
 18478  004138  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18479  00413A  0EAC               	movlw	low STR_215
 18480  00413C  6F60               	movwf	?_putsUSART& (0+255),b
 18481  00413E  ECFF  F00D         	call	_putsUSART	;wreg free
 18482                           
 18483                           ;main.c: 2606: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18484  004142  0E79               	movlw	high STR_216
 18485  004144  0100               	movlb	0	; () banked
 18486  004146  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18487  004148  0E01               	movlw	low STR_216
 18488  00414A  6F60               	movwf	?_putsUSART& (0+255),b
 18489  00414C  ECFF  F00D         	call	_putsUSART	;wreg free
 18490                           
 18491                           ;main.c: 2607: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18492  004150  0E70               	movlw	high STR_217
 18493  004152  0100               	movlb	0	; () banked
 18494  004154  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18495  004156  0E45               	movlw	low STR_217
 18496  004158  6F60               	movwf	?_putsUSART& (0+255),b
 18497  00415A  ECFF  F00D         	call	_putsUSART	;wreg free
 18498                           
 18499                           ;main.c: 2608: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18500  00415E  0E79               	movlw	high STR_218
 18501  004160  0100               	movlb	0	; () banked
 18502  004162  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18503  004164  0EC1               	movlw	low STR_218
 18504  004166  6F60               	movwf	?_putsUSART& (0+255),b
 18505  004168  ECFF  F00D         	call	_putsUSART	;wreg free
 18506                           
 18507                           ;main.c: 2609: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18508  00416C  0E77               	movlw	high STR_219
 18509  00416E  0100               	movlb	0	; () banked
 18510  004170  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18511  004172  0E28               	movlw	low STR_219
 18512  004174  6F60               	movwf	?_putsUSART& (0+255),b
 18513  004176  ECFF  F00D         	call	_putsUSART	;wreg free
 18514                           
 18515                           ;main.c: 2610: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18516  00417A  0E75               	movlw	high STR_220
 18517  00417C  0100               	movlb	0	; () banked
 18518  00417E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18519  004180  0E22               	movlw	low STR_220
 18520  004182  6F60               	movwf	?_putsUSART& (0+255),b
 18521  004184  ECFF  F00D         	call	_putsUSART	;wreg free
 18522                           
 18523                           ;main.c: 2611: putsUSART((char *) "HELP - Display this help information.\r\n");
 18524  004188  0E74               	movlw	high STR_221
 18525  00418A  0100               	movlb	0	; () banked
 18526  00418C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18527  00418E  0E83               	movlw	low STR_221
 18528  004190  6F60               	movwf	?_putsUSART& (0+255),b
 18529  004192  ECFF  F00D         	call	_putsUSART	;wreg free
 18530                           
 18531                           ;main.c: 2612: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18532  004196  0E73               	movlw	high STR_222
 18533  004198  0100               	movlb	0	; () banked
 18534  00419A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18535  00419C  0E4F               	movlw	low STR_222
 18536  00419E  6F60               	movwf	?_putsUSART& (0+255),b
 18537  0041A0  ECFF  F00D         	call	_putsUSART	;wreg free
 18538                           
 18539                           ;main.c: 2613: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18540  0041A4  0E6E               	movlw	high STR_223
 18541  0041A6  0100               	movlb	0	; () banked
 18542  0041A8  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18543  0041AA  0E0A               	movlw	low STR_223
 18544  0041AC  6F60               	movwf	?_putsUSART& (0+255),b
 18545  0041AE  ECFF  F00D         	call	_putsUSART	;wreg free
 18546                           
 18547                           ;main.c: 2614: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18548  0041B2  0E6E               	movlw	high STR_224
 18549  0041B4  0100               	movlb	0	; () banked
 18550  0041B6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18551  0041B8  0ED5               	movlw	low STR_224
 18552  0041BA  6F60               	movwf	?_putsUSART& (0+255),b
 18553  0041BC  ECFF  F00D         	call	_putsUSART	;wreg free
 18554                           
 18555                           ;main.c: 2615: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18556  0041C0  0E6D               	movlw	high STR_225
 18557  0041C2  0100               	movlb	0	; () banked
 18558  0041C4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18559  0041C6  0E76               	movlw	low STR_225
 18560  0041C8  6F60               	movwf	?_putsUSART& (0+255),b
 18561  0041CA  ECFF  F00D         	call	_putsUSART	;wreg free
 18562                           
 18563                           ;main.c: 2616: putsUSART((char *) "FILTER - Set filter .\r\n");
 18564  0041CE  0E79               	movlw	high STR_226
 18565  0041D0  0100               	movlb	0	; () banked
 18566  0041D2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18567  0041D4  0E19               	movlw	low STR_226
 18568  0041D6  6F60               	movwf	?_putsUSART& (0+255),b
 18569  0041D8  ECFF  F00D         	call	_putsUSART	;wreg free
 18570                           
 18571                           ;main.c: 2617: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18572  0041DC  0E6D               	movlw	high STR_227
 18573  0041DE  0100               	movlb	0	; () banked
 18574  0041E0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18575  0041E2  0E28               	movlw	low STR_227
 18576  0041E4  6F60               	movwf	?_putsUSART& (0+255),b
 18577  0041E6  ECFF  F00D         	call	_putsUSART	;wreg free
 18578                           
 18579                           ;main.c: 2618: putsUSART((char *) "MASK - Set mask .\r\n");
 18580  0041EA  0E7A               	movlw	high STR_228
 18581  0041EC  0100               	movlb	0	; () banked
 18582  0041EE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18583  0041F0  0E47               	movlw	low STR_228
 18584  0041F2  6F60               	movwf	?_putsUSART& (0+255),b
 18585  0041F4  ECFF  F00D         	call	_putsUSART	;wreg free
 18586                           
 18587                           ;main.c: 2619: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18588  0041F8  0E6D               	movlw	high STR_229
 18589  0041FA  0100               	movlb	0	; () banked
 18590  0041FC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18591  0041FE  0EC3               	movlw	low STR_229
 18592  004200  6F60               	movwf	?_putsUSART& (0+255),b
 18593  004202  ECFF  F00D         	call	_putsUSART	;wreg free
 18594                           
 18595                           ;main.c: 2620: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18596  004206  0E76               	movlw	high STR_230
 18597  004208  0100               	movlb	0	; () banked
 18598  00420A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18599  00420C  0EE4               	movlw	low STR_230
 18600  00420E  6F60               	movwf	?_putsUSART& (0+255),b
 18601  004210  ECFF  F00D         	call	_putsUSART	;wreg free
 18602                           
 18603                           ;main.c: 2621: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18604  004214  0E73               	movlw	high STR_231
 18605  004216  0100               	movlb	0	; () banked
 18606  004218  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18607  00421A  0E20               	movlw	low STR_231
 18608  00421C  6F60               	movwf	?_putsUSART& (0+255),b
 18609  00421E  ECFF  F00D         	call	_putsUSART	;wreg free
 18610                           
 18611                           ;main.c: 2622: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18612  004222  0E72               	movlw	high STR_232
 18613  004224  0100               	movlb	0	; () banked
 18614  004226  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18615  004228  0EF1               	movlw	low STR_232
 18616  00422A  6F60               	movwf	?_putsUSART& (0+255),b
 18617  00422C  ECFF  F00D         	call	_putsUSART	;wreg free
 18618                           
 18619                           ;main.c: 2623: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18620  004230  0E6E               	movlw	high STR_233
 18621  004232  0100               	movlb	0	; () banked
 18622  004234  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18623  004236  0E92               	movlw	low STR_233
 18624  004238  6F60               	movwf	?_putsUSART& (0+255),b
 18625  00423A  ECFF  F00D         	call	_putsUSART	;wreg free
 18626                           
 18627                           ;main.c: 2624: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18628  00423E  0E72               	movlw	high STR_234
 18629  004240  0100               	movlb	0	; () banked
 18630  004242  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18631  004244  0EC0               	movlw	low STR_234
 18632  004246  6F60               	movwf	?_putsUSART& (0+255),b
 18633  004248  ECFF  F00D         	call	_putsUSART	;wreg free
 18634                           
 18635                           ;main.c: 2625: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18636  00424C  0E70               	movlw	high STR_235
 18637  00424E  0100               	movlb	0	; () banked
 18638  004250  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18639  004252  0EB4               	movlw	low STR_235
 18640  004254  6F60               	movwf	?_putsUSART& (0+255),b
 18641  004256  ECFF  F00D         	call	_putsUSART	;wreg free
 18642                           
 18643                           ;main.c: 2626: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18644  00425A  0E6F               	movlw	high STR_236
 18645  00425C  0100               	movlb	0	; () banked
 18646  00425E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18647  004260  0E5A               	movlw	low STR_236
 18648  004262  6F60               	movwf	?_putsUSART& (0+255),b
 18649  004264  ECFF  F00D         	call	_putsUSART	;wreg free
 18650                           
 18651                           ;main.c: 2627: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18652  004268  0E75               	movlw	high STR_237
 18653  00426A  0100               	movlb	0	; () banked
 18654  00426C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18655  00426E  0EBE               	movlw	low STR_237
 18656  004270  6F60               	movwf	?_putsUSART& (0+255),b
 18657  004272  EFFF  F00D         	goto	_putsUSART	;wreg free
 18658  004276                     __end_of_printHelp:
 18659                           	opt stack 0
 18660                           tblptru	equ	0xFF8
 18661                           tblptrh	equ	0xFF7
 18662                           tblptrl	equ	0xFF6
 18663                           tablat	equ	0xFF5
 18664                           prodh	equ	0xFF4
 18665                           prodl	equ	0xFF3
 18666                           intcon	equ	0xFF2
 18667                           indf0	equ	0xFEF
 18668                           postinc0	equ	0xFEE
 18669                           fsr0h	equ	0xFEA
 18670                           fsr0l	equ	0xFE9
 18671                           wreg	equ	0xFE8
 18672                           indf1	equ	0xFE7
 18673                           postinc1	equ	0xFE6
 18674                           postdec1	equ	0xFE5
 18675                           fsr1h	equ	0xFE2
 18676                           fsr1l	equ	0xFE1
 18677                           indf2	equ	0xFDF
 18678                           postinc2	equ	0xFDE
 18679                           postdec2	equ	0xFDD
 18680                           plusw2	equ	0xFDB
 18681                           fsr2h	equ	0xFDA
 18682                           fsr2l	equ	0xFD9
 18683                           status	equ	0xFD8
 18684                           
 18685 ;; *************** function _printErrors *****************
 18686 ;; Defined at:
 18687 ;;		line 2531 in file "main.c"
 18688 ;; Parameters:    Size  Location     Type
 18689 ;;		None
 18690 ;; Auto vars:     Size  Location     Type
 18691 ;;		None
 18692 ;; Return value:  Size  Location     Type
 18693 ;;		None               void
 18694 ;; Registers used:
 18695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18696 ;; Tracked objects:
 18697 ;;		On entry : F/0
 18698 ;;		On exit  : 0/0
 18699 ;;		Unchanged: 0/0
 18700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18701 ;;      Params:         0       0       0       0       0       0       0
 18702 ;;      Locals:         0      12       0       0       0       0       0
 18703 ;;      Temps:          0       0       0       0       0       0       0
 18704 ;;      Totals:         0      12       0       0       0       0       0
 18705 ;;Total ram usage:       12 bytes
 18706 ;; Hardware stack levels used:    1
 18707 ;; Hardware stack levels required when called:    5
 18708 ;; This function calls:
 18709 ;;		_putsUSART
 18710 ;;		_sprintf
 18711 ;; This function is called by:
 18712 ;;		_doModeVerbose
 18713 ;; This function uses a non-reentrant model
 18714 ;;
 18715                           
 18716                           	psect	text40
 18717  004ABC                     __ptext40:
 18718                           	opt stack 0
 18719  004ABC                     _printErrors:
 18720                           	opt stack 23
 18721                           
 18722                           ; BSR set to: 0
 18723                           ;main.c: 2532: putsUSART((char *) "CAN Receive overruns: ");
 18724                           
 18725                           ;incstack = 0
 18726                           ;incstack = 0
 18727  004ABC  0E79               	movlw	high STR_176
 18728  004ABE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18729  004AC0  0ED8               	movlw	low STR_176
 18730  004AC2  6F60               	movwf	?_putsUSART& (0+255),b
 18731  004AC4  ECFF  F00D         	call	_putsUSART	;wreg free
 18732                           
 18733                           ;main.c: 2533: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18734  004AC8  0100               	movlb	0	; () banked
 18735  004ACA  67E3               	tstfsz	_bHex& (0+255),b
 18736  004ACC  D004               	goto	l14739
 18737                           
 18738                           ; BSR set to: 0
 18739  004ACE  0E7C               	movlw	high STR_162
 18740  004AD0  6F94               	movwf	(_printErrors$1396+1)& (0+255),b
 18741  004AD2  0EE1               	movlw	low STR_162
 18742  004AD4  D003               	goto	L16
 18743  004AD6                     l14739:
 18744                           
 18745                           ; BSR set to: 0
 18746  004AD6  0E7C               	movlw	high STR_177
 18747  004AD8  6F94               	movwf	(_printErrors$1396+1)& (0+255),b
 18748  004ADA  0E16               	movlw	low STR_177
 18749  004ADC                     L16:
 18750  004ADC  6F93               	movwf	_printErrors$1396& (0+255),b
 18751                           
 18752                           ; BSR set to: 0
 18753  004ADE  0E01               	movlw	high _wrkbuf
 18754  004AE0  0100               	movlb	0	; () banked
 18755  004AE2  6F76               	movwf	(?_sprintf+1)& (0+255),b
 18756  004AE4  0E74               	movlw	low _wrkbuf
 18757  004AE6  6F75               	movwf	?_sprintf& (0+255),b
 18758  004AE8  C093  F077         	movff	_printErrors$1396,?_sprintf+2
 18759  004AEC  C094  F078         	movff	_printErrors$1396+1,?_sprintf+3
 18760  004AF0  C100  F079         	movff	_can_receiveOverruns,?_sprintf+4
 18761  004AF4  C101  F07A         	movff	_can_receiveOverruns+1,?_sprintf+5
 18762  004AF8  C102  F07B         	movff	_can_receiveOverruns+2,?_sprintf+6
 18763  004AFC  C103  F07C         	movff	_can_receiveOverruns+3,?_sprintf+7
 18764  004B00  ECA3  F028         	call	_sprintf	;wreg free
 18765                           
 18766                           ; BSR set to: 0
 18767                           ;main.c: 2534: putsUSART(wrkbuf);
 18768  004B04  0E01               	movlw	high _wrkbuf
 18769  004B06  0100               	movlb	0	; () banked
 18770  004B08  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18771  004B0A  0E74               	movlw	low _wrkbuf
 18772  004B0C  6F60               	movwf	?_putsUSART& (0+255),b
 18773  004B0E  ECFF  F00D         	call	_putsUSART	;wreg free
 18774                           
 18775                           ;main.c: 2535: putsUSART((char *) "\r\n");
 18776  004B12  0E71               	movlw	high (STR_197+50)
 18777  004B14  0100               	movlb	0	; () banked
 18778  004B16  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18779  004B18  0EC0               	movlw	low (STR_197+50)
 18780  004B1A  6F60               	movwf	?_putsUSART& (0+255),b
 18781  004B1C  ECFF  F00D         	call	_putsUSART	;wreg free
 18782                           
 18783                           ;main.c: 2537: putsUSART((char *) "CAN Transmit overruns: ");
 18784  004B20  0E79               	movlw	high STR_180
 18785  004B22  0100               	movlb	0	; () banked
 18786  004B24  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18787  004B26  0EA9               	movlw	low STR_180
 18788  004B28  6F60               	movwf	?_putsUSART& (0+255),b
 18789  004B2A  ECFF  F00D         	call	_putsUSART	;wreg free
 18790                           
 18791                           ;main.c: 2538: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18792  004B2E  0100               	movlb	0	; () banked
 18793  004B30  67E3               	tstfsz	_bHex& (0+255),b
 18794  004B32  D004               	goto	l14753
 18795                           
 18796                           ; BSR set to: 0
 18797  004B34  0E7C               	movlw	high STR_162
 18798  004B36  6F96               	movwf	(_printErrors$1402+1)& (0+255),b
 18799  004B38  0EE1               	movlw	low STR_162
 18800  004B3A  D003               	goto	L17
 18801  004B3C                     l14753:
 18802                           
 18803                           ; BSR set to: 0
 18804  004B3C  0E7C               	movlw	high STR_177
 18805  004B3E  6F96               	movwf	(_printErrors$1402+1)& (0+255),b
 18806  004B40  0E16               	movlw	low STR_177
 18807  004B42                     L17:
 18808  004B42  6F95               	movwf	_printErrors$1402& (0+255),b
 18809                           
 18810                           ; BSR set to: 0
 18811  004B44  0E01               	movlw	high _wrkbuf
 18812  004B46  0100               	movlb	0	; () banked
 18813  004B48  6F76               	movwf	(?_sprintf+1)& (0+255),b
 18814  004B4A  0E74               	movlw	low _wrkbuf
 18815  004B4C  6F75               	movwf	?_sprintf& (0+255),b
 18816  004B4E  C095  F077         	movff	_printErrors$1402,?_sprintf+2
 18817  004B52  C096  F078         	movff	_printErrors$1402+1,?_sprintf+3
 18818  004B56  C104  F079         	movff	_can_transmitOverruns,?_sprintf+4
 18819  004B5A  C105  F07A         	movff	_can_transmitOverruns+1,?_sprintf+5
 18820  004B5E  C106  F07B         	movff	_can_transmitOverruns+2,?_sprintf+6
 18821  004B62  C107  F07C         	movff	_can_transmitOverruns+3,?_sprintf+7
 18822  004B66  ECA3  F028         	call	_sprintf	;wreg free
 18823                           
 18824                           ; BSR set to: 0
 18825                           ;main.c: 2539: putsUSART(wrkbuf);
 18826  004B6A  0E01               	movlw	high _wrkbuf
 18827  004B6C  0100               	movlb	0	; () banked
 18828  004B6E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18829  004B70  0E74               	movlw	low _wrkbuf
 18830  004B72  6F60               	movwf	?_putsUSART& (0+255),b
 18831  004B74  ECFF  F00D         	call	_putsUSART	;wreg free
 18832                           
 18833                           ;main.c: 2540: putsUSART((char *) "\r\n");
 18834  004B78  0E71               	movlw	high (STR_197+50)
 18835  004B7A  0100               	movlb	0	; () banked
 18836  004B7C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18837  004B7E  0EC0               	movlw	low (STR_197+50)
 18838  004B80  6F60               	movwf	?_putsUSART& (0+255),b
 18839  004B82  ECFF  F00D         	call	_putsUSART	;wreg free
 18840                           
 18841                           ;main.c: 2542: putsUSART((char *) "UART Receive overruns: ");
 18842  004B86  0E79               	movlw	high STR_184
 18843  004B88  0100               	movlb	0	; () banked
 18844  004B8A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18845  004B8C  0E91               	movlw	low STR_184
 18846  004B8E  6F60               	movwf	?_putsUSART& (0+255),b
 18847  004B90  ECFF  F00D         	call	_putsUSART	;wreg free
 18848                           
 18849                           ;main.c: 2543: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18850  004B94  0100               	movlb	0	; () banked
 18851  004B96  67E3               	tstfsz	_bHex& (0+255),b
 18852  004B98  D004               	goto	l14767
 18853                           
 18854                           ; BSR set to: 0
 18855  004B9A  0E7C               	movlw	high STR_162
 18856  004B9C  6F98               	movwf	(_printErrors$1408+1)& (0+255),b
 18857  004B9E  0EE1               	movlw	low STR_162
 18858  004BA0  D003               	goto	L18
 18859  004BA2                     l14767:
 18860                           
 18861                           ; BSR set to: 0
 18862  004BA2  0E7C               	movlw	high STR_177
 18863  004BA4  6F98               	movwf	(_printErrors$1408+1)& (0+255),b
 18864  004BA6  0E16               	movlw	low STR_177
 18865  004BA8                     L18:
 18866  004BA8  6F97               	movwf	_printErrors$1408& (0+255),b
 18867                           
 18868                           ; BSR set to: 0
 18869  004BAA  0E01               	movlw	high _wrkbuf
 18870  004BAC  0100               	movlb	0	; () banked
 18871  004BAE  6F76               	movwf	(?_sprintf+1)& (0+255),b
 18872  004BB0  0E74               	movlw	low _wrkbuf
 18873  004BB2  6F75               	movwf	?_sprintf& (0+255),b
 18874  004BB4  C097  F077         	movff	_printErrors$1408,?_sprintf+2
 18875  004BB8  C098  F078         	movff	_printErrors$1408+1,?_sprintf+3
 18876  004BBC  C11C  F079         	movff	_uart_receiveOverruns,?_sprintf+4
 18877  004BC0  C11D  F07A         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18878  004BC4  C11E  F07B         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18879  004BC8  C11F  F07C         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18880  004BCC  ECA3  F028         	call	_sprintf	;wreg free
 18881                           
 18882                           ; BSR set to: 0
 18883                           ;main.c: 2544: putsUSART(wrkbuf);
 18884  004BD0  0E01               	movlw	high _wrkbuf
 18885  004BD2  0100               	movlb	0	; () banked
 18886  004BD4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18887  004BD6  0E74               	movlw	low _wrkbuf
 18888  004BD8  6F60               	movwf	?_putsUSART& (0+255),b
 18889  004BDA  ECFF  F00D         	call	_putsUSART	;wreg free
 18890                           
 18891                           ;main.c: 2545: putsUSART((char *) "\r\n");
 18892  004BDE  0E71               	movlw	high (STR_197+50)
 18893  004BE0  0100               	movlb	0	; () banked
 18894  004BE2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18895  004BE4  0EC0               	movlw	low (STR_197+50)
 18896  004BE6  6F60               	movwf	?_putsUSART& (0+255),b
 18897  004BE8  ECFF  F00D         	call	_putsUSART	;wreg free
 18898                           
 18899                           ;main.c: 2547: putsUSART((char *) "UART Receive overruns: ");
 18900  004BEC  0E79               	movlw	high STR_184
 18901  004BEE  0100               	movlb	0	; () banked
 18902  004BF0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18903  004BF2  0E91               	movlw	low STR_184
 18904  004BF4  6F60               	movwf	?_putsUSART& (0+255),b
 18905  004BF6  ECFF  F00D         	call	_putsUSART	;wreg free
 18906                           
 18907                           ;main.c: 2548: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18908  004BFA  0100               	movlb	0	; () banked
 18909  004BFC  67E3               	tstfsz	_bHex& (0+255),b
 18910  004BFE  D004               	goto	l14781
 18911                           
 18912                           ; BSR set to: 0
 18913  004C00  0E7C               	movlw	high STR_162
 18914  004C02  6F9A               	movwf	(_printErrors$1414+1)& (0+255),b
 18915  004C04  0EE1               	movlw	low STR_162
 18916  004C06  D003               	goto	L19
 18917  004C08                     l14781:
 18918                           
 18919                           ; BSR set to: 0
 18920  004C08  0E7C               	movlw	high STR_177
 18921  004C0A  6F9A               	movwf	(_printErrors$1414+1)& (0+255),b
 18922  004C0C  0E16               	movlw	low STR_177
 18923  004C0E                     L19:
 18924  004C0E  6F99               	movwf	_printErrors$1414& (0+255),b
 18925                           
 18926                           ; BSR set to: 0
 18927  004C10  0E01               	movlw	high _wrkbuf
 18928  004C12  0100               	movlb	0	; () banked
 18929  004C14  6F76               	movwf	(?_sprintf+1)& (0+255),b
 18930  004C16  0E74               	movlw	low _wrkbuf
 18931  004C18  6F75               	movwf	?_sprintf& (0+255),b
 18932  004C1A  C099  F077         	movff	_printErrors$1414,?_sprintf+2
 18933  004C1E  C09A  F078         	movff	_printErrors$1414+1,?_sprintf+3
 18934  004C22  C120  F079         	movff	_uart_transmitOverruns,?_sprintf+4
 18935  004C26  C121  F07A         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18936  004C2A  C122  F07B         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18937  004C2E  C123  F07C         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18938  004C32  ECA3  F028         	call	_sprintf	;wreg free
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;main.c: 2549: putsUSART(wrkbuf);
 18942  004C36  0E01               	movlw	high _wrkbuf
 18943  004C38  0100               	movlb	0	; () banked
 18944  004C3A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18945  004C3C  0E74               	movlw	low _wrkbuf
 18946  004C3E  6F60               	movwf	?_putsUSART& (0+255),b
 18947  004C40  ECFF  F00D         	call	_putsUSART	;wreg free
 18948                           
 18949                           ;main.c: 2550: putsUSART((char *) "\r\n");
 18950  004C44  0E71               	movlw	high (STR_197+50)
 18951  004C46  0100               	movlb	0	; () banked
 18952  004C48  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18953  004C4A  0EC0               	movlw	low (STR_197+50)
 18954  004C4C  6F60               	movwf	?_putsUSART& (0+255),b
 18955  004C4E  ECFF  F00D         	call	_putsUSART	;wreg free
 18956                           
 18957                           ;main.c: 2552: putsUSART((char *) "Transmit Error Counter: ");
 18958  004C52  0E78               	movlw	high STR_192
 18959  004C54  0100               	movlb	0	; () banked
 18960  004C56  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 18961  004C58  0EE8               	movlw	low STR_192
 18962  004C5A  6F60               	movwf	?_putsUSART& (0+255),b
 18963  004C5C  ECFF  F00D         	call	_putsUSART	;wreg free
 18964                           
 18965                           ;main.c: 2553: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18966  004C60  0100               	movlb	0	; () banked
 18967  004C62  67E3               	tstfsz	_bHex& (0+255),b
 18968  004C64  D004               	goto	l14795
 18969                           
 18970                           ; BSR set to: 0
 18971  004C66  0E7C               	movlw	high STR_57
 18972  004C68  6F9C               	movwf	(_printErrors$1420+1)& (0+255),b
 18973  004C6A  0EEE               	movlw	low STR_57
 18974  004C6C  D003               	goto	L20
 18975  004C6E                     l14795:
 18976                           
 18977                           ; BSR set to: 0
 18978  004C6E  0E7C               	movlw	high STR_56
 18979  004C70  6F9C               	movwf	(_printErrors$1420+1)& (0+255),b
 18980  004C72  0E65               	movlw	low STR_56
 18981  004C74                     L20:
 18982  004C74  6F9B               	movwf	_printErrors$1420& (0+255),b
 18983                           
 18984                           ; BSR set to: 0
 18985  004C76  0E01               	movlw	high _wrkbuf
 18986  004C78  0100               	movlb	0	; () banked
 18987  004C7A  6F76               	movwf	(?_sprintf+1)& (0+255),b
 18988  004C7C  0E74               	movlw	low _wrkbuf
 18989  004C7E  6F75               	movwf	?_sprintf& (0+255),b
 18990  004C80  C09B  F077         	movff	_printErrors$1420,?_sprintf+2
 18991  004C84  C09C  F078         	movff	_printErrors$1420+1,?_sprintf+3
 18992  004C88  CF76 F079          	movff	3958,?_sprintf+4	;volatile
 18993  004C8C  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 18994  004C8E  ECA3  F028         	call	_sprintf	;wreg free
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;main.c: 2554: putsUSART(wrkbuf);
 18998  004C92  0E01               	movlw	high _wrkbuf
 18999  004C94  0100               	movlb	0	; () banked
 19000  004C96  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19001  004C98  0E74               	movlw	low _wrkbuf
 19002  004C9A  6F60               	movwf	?_putsUSART& (0+255),b
 19003  004C9C  ECFF  F00D         	call	_putsUSART	;wreg free
 19004                           
 19005                           ;main.c: 2555: putsUSART((char *) "\r\n");
 19006  004CA0  0E71               	movlw	high (STR_197+50)
 19007  004CA2  0100               	movlb	0	; () banked
 19008  004CA4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19009  004CA6  0EC0               	movlw	low (STR_197+50)
 19010  004CA8  6F60               	movwf	?_putsUSART& (0+255),b
 19011  004CAA  ECFF  F00D         	call	_putsUSART	;wreg free
 19012                           
 19013                           ;main.c: 2557: if (COMSTATbits.TXWARN) {
 19014  004CAE  A474               	btfss	3956,2,c	;volatile
 19015  004CB0  D007               	goto	l14807
 19016                           
 19017                           ;main.c: 2558: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19018  004CB2  0E6F               	movlw	high STR_196
 19019  004CB4  0100               	movlb	0	; () banked
 19020  004CB6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19021  004CB8  0E98               	movlw	low STR_196
 19022  004CBA  6F60               	movwf	?_putsUSART& (0+255),b
 19023  004CBC  ECFF  F00D         	call	_putsUSART	;wreg free
 19024  004CC0                     l14807:
 19025                           
 19026                           ;main.c: 2559: }
 19027                           ;main.c: 2561: if (COMSTATbits.TXBO) {
 19028  004CC0  AA74               	btfss	3956,5,c	;volatile
 19029  004CC2  D007               	goto	l14811
 19030                           
 19031                           ;main.c: 2562: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19032  004CC4  0E71               	movlw	high STR_197
 19033  004CC6  0100               	movlb	0	; () banked
 19034  004CC8  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19035  004CCA  0E8E               	movlw	low STR_197
 19036  004CCC  6F60               	movwf	?_putsUSART& (0+255),b
 19037  004CCE  ECFF  F00D         	call	_putsUSART	;wreg free
 19038  004CD2                     l14811:
 19039                           
 19040                           ;main.c: 2563: }
 19041                           ;main.c: 2565: if (COMSTATbits.TXBP) {
 19042  004CD2  A874               	btfss	3956,4,c	;volatile
 19043  004CD4  D007               	goto	l1180
 19044                           
 19045                           ;main.c: 2566: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19046  004CD6  0E70               	movlw	high STR_198
 19047  004CD8  0100               	movlb	0	; () banked
 19048  004CDA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19049  004CDC  0E0C               	movlw	low STR_198
 19050  004CDE  6F60               	movwf	?_putsUSART& (0+255),b
 19051  004CE0  ECFF  F00D         	call	_putsUSART	;wreg free
 19052  004CE4                     l1180:
 19053                           
 19054                           ;main.c: 2567: }
 19055                           ;main.c: 2570: putsUSART((char *) "Receive Error Counter: ");
 19056  004CE4  0E79               	movlw	high STR_199
 19057  004CE6  0100               	movlb	0	; () banked
 19058  004CE8  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19059  004CEA  0E79               	movlw	low STR_199
 19060  004CEC  6F60               	movwf	?_putsUSART& (0+255),b
 19061  004CEE  ECFF  F00D         	call	_putsUSART	;wreg free
 19062                           
 19063                           ;main.c: 2571: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19064  004CF2  0100               	movlb	0	; () banked
 19065  004CF4  67E3               	tstfsz	_bHex& (0+255),b
 19066  004CF6  D004               	goto	l14819
 19067                           
 19068                           ; BSR set to: 0
 19069  004CF8  0E7C               	movlw	high STR_57
 19070  004CFA  6F9E               	movwf	(_printErrors$1429+1)& (0+255),b
 19071  004CFC  0EEE               	movlw	low STR_57
 19072  004CFE  D003               	goto	L21
 19073  004D00                     l14819:
 19074                           
 19075                           ; BSR set to: 0
 19076  004D00  0E7C               	movlw	high STR_56
 19077  004D02  6F9E               	movwf	(_printErrors$1429+1)& (0+255),b
 19078  004D04  0E65               	movlw	low STR_56
 19079  004D06                     L21:
 19080  004D06  6F9D               	movwf	_printErrors$1429& (0+255),b
 19081                           
 19082                           ; BSR set to: 0
 19083  004D08  0E01               	movlw	high _wrkbuf
 19084  004D0A  0100               	movlb	0	; () banked
 19085  004D0C  6F76               	movwf	(?_sprintf+1)& (0+255),b
 19086  004D0E  0E74               	movlw	low _wrkbuf
 19087  004D10  6F75               	movwf	?_sprintf& (0+255),b
 19088  004D12  C09D  F077         	movff	_printErrors$1429,?_sprintf+2
 19089  004D16  C09E  F078         	movff	_printErrors$1429+1,?_sprintf+3
 19090  004D1A  CF75 F079          	movff	3957,?_sprintf+4	;volatile
 19091  004D1E  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 19092  004D20  ECA3  F028         	call	_sprintf	;wreg free
 19093                           
 19094                           ; BSR set to: 0
 19095                           ;main.c: 2572: putsUSART(wrkbuf);
 19096  004D24  0E01               	movlw	high _wrkbuf
 19097  004D26  0100               	movlb	0	; () banked
 19098  004D28  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19099  004D2A  0E74               	movlw	low _wrkbuf
 19100  004D2C  6F60               	movwf	?_putsUSART& (0+255),b
 19101  004D2E  ECFF  F00D         	call	_putsUSART	;wreg free
 19102                           
 19103                           ;main.c: 2573: putsUSART((char *) "\r\n");
 19104  004D32  0E71               	movlw	high (STR_197+50)
 19105  004D34  0100               	movlb	0	; () banked
 19106  004D36  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19107  004D38  0EC0               	movlw	low (STR_197+50)
 19108  004D3A  6F60               	movwf	?_putsUSART& (0+255),b
 19109  004D3C  ECFF  F00D         	call	_putsUSART	;wreg free
 19110                           
 19111                           ;main.c: 2575: if (COMSTATbits.RXWARN) {
 19112  004D40  A274               	btfss	3956,1,c	;volatile
 19113  004D42  D007               	goto	l14831
 19114                           
 19115                           ;main.c: 2576: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19116  004D44  0E70               	movlw	high STR_203
 19117  004D46  0100               	movlb	0	; () banked
 19118  004D48  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19119  004D4A  0E7D               	movlw	low STR_203
 19120  004D4C  6F60               	movwf	?_putsUSART& (0+255),b
 19121  004D4E  ECFF  F00D         	call	_putsUSART	;wreg free
 19122  004D52                     l14831:
 19123                           
 19124                           ;main.c: 2577: }
 19125                           ;main.c: 2579: if (COMSTATbits.RXBP) {
 19126  004D52  A674               	btfss	3956,3,c	;volatile
 19127  004D54  D007               	goto	l14835
 19128                           
 19129                           ;main.c: 2580: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19130  004D56  0E71               	movlw	high STR_204
 19131  004D58  0100               	movlb	0	; () banked
 19132  004D5A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19133  004D5C  0E22               	movlw	low STR_204
 19134  004D5E  6F60               	movwf	?_putsUSART& (0+255),b
 19135  004D60  ECFF  F00D         	call	_putsUSART	;wreg free
 19136  004D64                     l14835:
 19137                           
 19138                           ;main.c: 2581: }
 19139                           ;main.c: 2583: if (COMSTATbits.EWARN) {
 19140  004D64  A074               	btfss	3956,0,c	;volatile
 19141  004D66  D007               	goto	l1188
 19142                           
 19143                           ;main.c: 2584: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19144  004D68  0E71               	movlw	high STR_205
 19145  004D6A  0100               	movlb	0	; () banked
 19146  004D6C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19147  004D6E  0EC3               	movlw	low STR_205
 19148  004D70  6F60               	movwf	?_putsUSART& (0+255),b
 19149  004D72  ECFF  F00D         	call	_putsUSART	;wreg free
 19150  004D76                     l1188:
 19151  004D76  0012               	return	
 19152  004D78                     __end_of_printErrors:
 19153                           	opt stack 0
 19154                           tblptru	equ	0xFF8
 19155                           tblptrh	equ	0xFF7
 19156                           tblptrl	equ	0xFF6
 19157                           tablat	equ	0xFF5
 19158                           prodh	equ	0xFF4
 19159                           prodl	equ	0xFF3
 19160                           intcon	equ	0xFF2
 19161                           indf0	equ	0xFEF
 19162                           postinc0	equ	0xFEE
 19163                           fsr0h	equ	0xFEA
 19164                           fsr0l	equ	0xFE9
 19165                           wreg	equ	0xFE8
 19166                           indf1	equ	0xFE7
 19167                           postinc1	equ	0xFE6
 19168                           postdec1	equ	0xFE5
 19169                           fsr1h	equ	0xFE2
 19170                           fsr1l	equ	0xFE1
 19171                           indf2	equ	0xFDF
 19172                           postinc2	equ	0xFDE
 19173                           postdec2	equ	0xFDD
 19174                           plusw2	equ	0xFDB
 19175                           fsr2h	equ	0xFDA
 19176                           fsr2l	equ	0xFD9
 19177                           status	equ	0xFD8
 19178                           
 19179 ;; *************** function _printStatistics *****************
 19180 ;; Defined at:
 19181 ;;		line 2504 in file "main.c"
 19182 ;; Parameters:    Size  Location     Type
 19183 ;;		None
 19184 ;; Auto vars:     Size  Location     Type
 19185 ;;		None
 19186 ;; Return value:  Size  Location     Type
 19187 ;;		None               void
 19188 ;; Registers used:
 19189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19190 ;; Tracked objects:
 19191 ;;		On entry : F/0
 19192 ;;		On exit  : 0/0
 19193 ;;		Unchanged: 0/0
 19194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19195 ;;      Params:         0       0       0       0       0       0       0
 19196 ;;      Locals:         0       8       0       0       0       0       0
 19197 ;;      Temps:          0       0       0       0       0       0       0
 19198 ;;      Totals:         0       8       0       0       0       0       0
 19199 ;;Total ram usage:        8 bytes
 19200 ;; Hardware stack levels used:    1
 19201 ;; Hardware stack levels required when called:    5
 19202 ;; This function calls:
 19203 ;;		_putsUSART
 19204 ;;		_sprintf
 19205 ;; This function is called by:
 19206 ;;		_doModeVerbose
 19207 ;; This function uses a non-reentrant model
 19208 ;;
 19209                           
 19210                           	psect	text41
 19211  003F22                     __ptext41:
 19212                           	opt stack 0
 19213  003F22                     _printStatistics:
 19214                           	opt stack 23
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;main.c: 2505: putsUSART((char *) "Sent CAN frames: ");
 19218                           
 19219                           ;incstack = 0
 19220                           ;incstack = 0
 19221  003F22  0E7B               	movlw	high STR_160
 19222  003F24  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19223  003F26  0E0A               	movlw	low STR_160
 19224  003F28  6F60               	movwf	?_putsUSART& (0+255),b
 19225  003F2A  ECFF  F00D         	call	_putsUSART	;wreg free
 19226                           
 19227                           ;main.c: 2506: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19228  003F2E  0100               	movlb	0	; () banked
 19229  003F30  67E3               	tstfsz	_bHex& (0+255),b
 19230  003F32  D004               	goto	l14683
 19231                           
 19232                           ; BSR set to: 0
 19233  003F34  0E7C               	movlw	high STR_162
 19234  003F36  6F94               	movwf	(_printStatistics$1371+1)& (0+255),b
 19235  003F38  0EE1               	movlw	low STR_162
 19236  003F3A  D003               	goto	L22
 19237  003F3C                     l14683:
 19238                           
 19239                           ; BSR set to: 0
 19240  003F3C  0E7C               	movlw	high STR_161
 19241  003F3E  6F94               	movwf	(_printStatistics$1371+1)& (0+255),b
 19242  003F40  0E73               	movlw	low STR_161
 19243  003F42                     L22:
 19244  003F42  6F93               	movwf	_printStatistics$1371& (0+255),b
 19245                           
 19246                           ; BSR set to: 0
 19247  003F44  0E01               	movlw	high _wrkbuf
 19248  003F46  0100               	movlb	0	; () banked
 19249  003F48  6F76               	movwf	(?_sprintf+1)& (0+255),b
 19250  003F4A  0E74               	movlw	low _wrkbuf
 19251  003F4C  6F75               	movwf	?_sprintf& (0+255),b
 19252  003F4E  C093  F077         	movff	_printStatistics$1371,?_sprintf+2
 19253  003F52  C094  F078         	movff	_printStatistics$1371+1,?_sprintf+3
 19254  003F56  C114  F079         	movff	_cntTxFrames,?_sprintf+4
 19255  003F5A  C115  F07A         	movff	_cntTxFrames+1,?_sprintf+5
 19256  003F5E  C116  F07B         	movff	_cntTxFrames+2,?_sprintf+6
 19257  003F62  C117  F07C         	movff	_cntTxFrames+3,?_sprintf+7
 19258  003F66  ECA3  F028         	call	_sprintf	;wreg free
 19259                           
 19260                           ; BSR set to: 0
 19261                           ;main.c: 2507: putsUSART(wrkbuf);
 19262  003F6A  0E01               	movlw	high _wrkbuf
 19263  003F6C  0100               	movlb	0	; () banked
 19264  003F6E  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19265  003F70  0E74               	movlw	low _wrkbuf
 19266  003F72  6F60               	movwf	?_putsUSART& (0+255),b
 19267  003F74  ECFF  F00D         	call	_putsUSART	;wreg free
 19268                           
 19269                           ;main.c: 2508: putsUSART((char *) "\r\n");
 19270  003F78  0E71               	movlw	high (STR_197+50)
 19271  003F7A  0100               	movlb	0	; () banked
 19272  003F7C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19273  003F7E  0EC0               	movlw	low (STR_197+50)
 19274  003F80  6F60               	movwf	?_putsUSART& (0+255),b
 19275  003F82  ECFF  F00D         	call	_putsUSART	;wreg free
 19276                           
 19277                           ;main.c: 2510: putsUSART((char *) "Sent CAN bytes: ");
 19278  003F86  0E7B               	movlw	high STR_164
 19279  003F88  0100               	movlb	0	; () banked
 19280  003F8A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19281  003F8C  0E3E               	movlw	low STR_164
 19282  003F8E  6F60               	movwf	?_putsUSART& (0+255),b
 19283  003F90  ECFF  F00D         	call	_putsUSART	;wreg free
 19284                           
 19285                           ;main.c: 2511: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19286  003F94  0100               	movlb	0	; () banked
 19287  003F96  67E3               	tstfsz	_bHex& (0+255),b
 19288  003F98  D004               	goto	l14697
 19289                           
 19290                           ; BSR set to: 0
 19291  003F9A  0E7C               	movlw	high STR_162
 19292  003F9C  6F96               	movwf	(_printStatistics$1377+1)& (0+255),b
 19293  003F9E  0EE1               	movlw	low STR_162
 19294  003FA0  D003               	goto	L23
 19295  003FA2                     l14697:
 19296                           
 19297                           ; BSR set to: 0
 19298  003FA2  0E7C               	movlw	high STR_161
 19299  003FA4  6F96               	movwf	(_printStatistics$1377+1)& (0+255),b
 19300  003FA6  0E73               	movlw	low STR_161
 19301  003FA8                     L23:
 19302  003FA8  6F95               	movwf	_printStatistics$1377& (0+255),b
 19303                           
 19304                           ; BSR set to: 0
 19305  003FAA  0E01               	movlw	high _wrkbuf
 19306  003FAC  0100               	movlb	0	; () banked
 19307  003FAE  6F76               	movwf	(?_sprintf+1)& (0+255),b
 19308  003FB0  0E74               	movlw	low _wrkbuf
 19309  003FB2  6F75               	movwf	?_sprintf& (0+255),b
 19310  003FB4  C095  F077         	movff	_printStatistics$1377,?_sprintf+2
 19311  003FB8  C096  F078         	movff	_printStatistics$1377+1,?_sprintf+3
 19312  003FBC  C110  F079         	movff	_cntTxBytes,?_sprintf+4
 19313  003FC0  C111  F07A         	movff	_cntTxBytes+1,?_sprintf+5
 19314  003FC4  C112  F07B         	movff	_cntTxBytes+2,?_sprintf+6
 19315  003FC8  C113  F07C         	movff	_cntTxBytes+3,?_sprintf+7
 19316  003FCC  ECA3  F028         	call	_sprintf	;wreg free
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;main.c: 2512: putsUSART(wrkbuf);
 19320  003FD0  0E01               	movlw	high _wrkbuf
 19321  003FD2  0100               	movlb	0	; () banked
 19322  003FD4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19323  003FD6  0E74               	movlw	low _wrkbuf
 19324  003FD8  6F60               	movwf	?_putsUSART& (0+255),b
 19325  003FDA  ECFF  F00D         	call	_putsUSART	;wreg free
 19326                           
 19327                           ;main.c: 2513: putsUSART((char *) "\r\n");
 19328  003FDE  0E71               	movlw	high (STR_197+50)
 19329  003FE0  0100               	movlb	0	; () banked
 19330  003FE2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19331  003FE4  0EC0               	movlw	low (STR_197+50)
 19332  003FE6  6F60               	movwf	?_putsUSART& (0+255),b
 19333  003FE8  ECFF  F00D         	call	_putsUSART	;wreg free
 19334                           
 19335                           ;main.c: 2515: putsUSART((char *) "Received CAN frames: ");
 19336  003FEC  0E7A               	movlw	high STR_168
 19337  003FEE  0100               	movlb	0	; () banked
 19338  003FF0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19339  003FF2  0E1C               	movlw	low STR_168
 19340  003FF4  6F60               	movwf	?_putsUSART& (0+255),b
 19341  003FF6  ECFF  F00D         	call	_putsUSART	;wreg free
 19342                           
 19343                           ;main.c: 2516: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19344  003FFA  0100               	movlb	0	; () banked
 19345  003FFC  67E3               	tstfsz	_bHex& (0+255),b
 19346  003FFE  D004               	goto	l14711
 19347                           
 19348                           ; BSR set to: 0
 19349  004000  0E7C               	movlw	high STR_162
 19350  004002  6F98               	movwf	(_printStatistics$1383+1)& (0+255),b
 19351  004004  0EE1               	movlw	low STR_162
 19352  004006  D003               	goto	L24
 19353  004008                     l14711:
 19354                           
 19355                           ; BSR set to: 0
 19356  004008  0E7C               	movlw	high STR_161
 19357  00400A  6F98               	movwf	(_printStatistics$1383+1)& (0+255),b
 19358  00400C  0E73               	movlw	low STR_161
 19359  00400E                     L24:
 19360  00400E  6F97               	movwf	_printStatistics$1383& (0+255),b
 19361                           
 19362                           ; BSR set to: 0
 19363  004010  0E01               	movlw	high _wrkbuf
 19364  004012  0100               	movlb	0	; () banked
 19365  004014  6F76               	movwf	(?_sprintf+1)& (0+255),b
 19366  004016  0E74               	movlw	low _wrkbuf
 19367  004018  6F75               	movwf	?_sprintf& (0+255),b
 19368  00401A  C097  F077         	movff	_printStatistics$1383,?_sprintf+2
 19369  00401E  C098  F078         	movff	_printStatistics$1383+1,?_sprintf+3
 19370  004022  C10C  F079         	movff	_cntRxFrames,?_sprintf+4
 19371  004026  C10D  F07A         	movff	_cntRxFrames+1,?_sprintf+5
 19372  00402A  C10E  F07B         	movff	_cntRxFrames+2,?_sprintf+6
 19373  00402E  C10F  F07C         	movff	_cntRxFrames+3,?_sprintf+7
 19374  004032  ECA3  F028         	call	_sprintf	;wreg free
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;main.c: 2517: putsUSART(wrkbuf);
 19378  004036  0E01               	movlw	high _wrkbuf
 19379  004038  0100               	movlb	0	; () banked
 19380  00403A  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19381  00403C  0E74               	movlw	low _wrkbuf
 19382  00403E  6F60               	movwf	?_putsUSART& (0+255),b
 19383  004040  ECFF  F00D         	call	_putsUSART	;wreg free
 19384                           
 19385                           ;main.c: 2518: putsUSART((char *) "\r\n");
 19386  004044  0E71               	movlw	high (STR_197+50)
 19387  004046  0100               	movlb	0	; () banked
 19388  004048  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19389  00404A  0EC0               	movlw	low (STR_197+50)
 19390  00404C  6F60               	movwf	?_putsUSART& (0+255),b
 19391  00404E  ECFF  F00D         	call	_putsUSART	;wreg free
 19392                           
 19393                           ;main.c: 2520: putsUSART((char *) "Received CAN bytes: ");
 19394  004052  0E7A               	movlw	high STR_172
 19395  004054  0100               	movlb	0	; () banked
 19396  004056  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19397  004058  0E32               	movlw	low STR_172
 19398  00405A  6F60               	movwf	?_putsUSART& (0+255),b
 19399  00405C  ECFF  F00D         	call	_putsUSART	;wreg free
 19400                           
 19401                           ;main.c: 2521: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19402  004060  0100               	movlb	0	; () banked
 19403  004062  67E3               	tstfsz	_bHex& (0+255),b
 19404  004064  D004               	goto	l14725
 19405                           
 19406                           ; BSR set to: 0
 19407  004066  0E7C               	movlw	high STR_162
 19408  004068  6F9A               	movwf	(_printStatistics$1389+1)& (0+255),b
 19409  00406A  0EE1               	movlw	low STR_162
 19410  00406C  D003               	goto	L25
 19411  00406E                     l14725:
 19412                           
 19413                           ; BSR set to: 0
 19414  00406E  0E7C               	movlw	high STR_161
 19415  004070  6F9A               	movwf	(_printStatistics$1389+1)& (0+255),b
 19416  004072  0E73               	movlw	low STR_161
 19417  004074                     L25:
 19418  004074  6F99               	movwf	_printStatistics$1389& (0+255),b
 19419                           
 19420                           ; BSR set to: 0
 19421  004076  0E01               	movlw	high _wrkbuf
 19422  004078  0100               	movlb	0	; () banked
 19423  00407A  6F76               	movwf	(?_sprintf+1)& (0+255),b
 19424  00407C  0E74               	movlw	low _wrkbuf
 19425  00407E  6F75               	movwf	?_sprintf& (0+255),b
 19426  004080  C099  F077         	movff	_printStatistics$1389,?_sprintf+2
 19427  004084  C09A  F078         	movff	_printStatistics$1389+1,?_sprintf+3
 19428  004088  C108  F079         	movff	_cntRxBytes,?_sprintf+4
 19429  00408C  C109  F07A         	movff	_cntRxBytes+1,?_sprintf+5
 19430  004090  C10A  F07B         	movff	_cntRxBytes+2,?_sprintf+6
 19431  004094  C10B  F07C         	movff	_cntRxBytes+3,?_sprintf+7
 19432  004098  ECA3  F028         	call	_sprintf	;wreg free
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;main.c: 2522: putsUSART(wrkbuf);
 19436  00409C  0E01               	movlw	high _wrkbuf
 19437  00409E  0100               	movlb	0	; () banked
 19438  0040A0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19439  0040A2  0E74               	movlw	low _wrkbuf
 19440  0040A4  6F60               	movwf	?_putsUSART& (0+255),b
 19441  0040A6  ECFF  F00D         	call	_putsUSART	;wreg free
 19442                           
 19443                           ;main.c: 2523: putsUSART((char *) "\r\n");
 19444  0040AA  0E71               	movlw	high (STR_197+50)
 19445  0040AC  0100               	movlb	0	; () banked
 19446  0040AE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 19447  0040B0  0EC0               	movlw	low (STR_197+50)
 19448  0040B2  6F60               	movwf	?_putsUSART& (0+255),b
 19449  0040B4  EFFF  F00D         	goto	_putsUSART	;wreg free
 19450  0040B8                     __end_of_printStatistics:
 19451                           	opt stack 0
 19452                           tblptru	equ	0xFF8
 19453                           tblptrh	equ	0xFF7
 19454                           tblptrl	equ	0xFF6
 19455                           tablat	equ	0xFF5
 19456                           prodh	equ	0xFF4
 19457                           prodl	equ	0xFF3
 19458                           intcon	equ	0xFF2
 19459                           indf0	equ	0xFEF
 19460                           postinc0	equ	0xFEE
 19461                           fsr0h	equ	0xFEA
 19462                           fsr0l	equ	0xFE9
 19463                           wreg	equ	0xFE8
 19464                           indf1	equ	0xFE7
 19465                           postinc1	equ	0xFE6
 19466                           postdec1	equ	0xFE5
 19467                           fsr1h	equ	0xFE2
 19468                           fsr1l	equ	0xFE1
 19469                           indf2	equ	0xFDF
 19470                           postinc2	equ	0xFDE
 19471                           postdec2	equ	0xFDD
 19472                           plusw2	equ	0xFDB
 19473                           fsr2h	equ	0xFDA
 19474                           fsr2l	equ	0xFD9
 19475                           status	equ	0xFD8
 19476                           
 19477 ;; *************** function _atoi *****************
 19478 ;; Defined at:
 19479 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19480 ;; Parameters:    Size  Location     Type
 19481 ;;  s               2    4[BANK0 ] PTR const unsigned char 
 19482 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19483 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19484 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19485 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19486 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19487 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19488 ;; Auto vars:     Size  Location     Type
 19489 ;;  a               2    9[BANK0 ] int 
 19490 ;;  sign            1    8[BANK0 ] unsigned char 
 19491 ;; Return value:  Size  Location     Type
 19492 ;;                  2    4[BANK0 ] int 
 19493 ;; Registers used:
 19494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19495 ;; Tracked objects:
 19496 ;;		On entry : C/2
 19497 ;;		On exit  : F/0
 19498 ;;		Unchanged: 0/0
 19499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19500 ;;      Params:         0       2       0       0       0       0       0
 19501 ;;      Locals:         0       3       0       0       0       0       0
 19502 ;;      Temps:          0       2       0       0       0       0       0
 19503 ;;      Totals:         0       7       0       0       0       0       0
 19504 ;;Total ram usage:        7 bytes
 19505 ;; Hardware stack levels used:    1
 19506 ;; Hardware stack levels required when called:    4
 19507 ;; This function calls:
 19508 ;;		_isdigit
 19509 ;;		___wmul
 19510 ;; This function is called by:
 19511 ;;		_doModeVerbose
 19512 ;; This function uses a non-reentrant model
 19513 ;;
 19514                           
 19515                           	psect	text42
 19516  003354                     __ptext42:
 19517                           	opt stack 0
 19518  003354                     _atoi:
 19519                           	opt stack 24
 19520                           
 19521                           ;incstack = 0
 19522                           ;incstack = 0
 19523  003354  D003               	goto	l14643
 19524  003356                     l14641:
 19525  003356  0100               	movlb	0	; () banked
 19526  003358  4B64               	infsnz	atoi@s& (0+255),f,b
 19527  00335A  2B65               	incf	(atoi@s+1)& (0+255),f,b
 19528  00335C                     l14643:
 19529  00335C  0100               	movlb	0	; () banked
 19530  00335E  D876               	call	PL16	;call to abstracted procedure
 19531  003360  64EA               	cpfsgt	fsr0h,c
 19532  003362  D003               	bra	u19757
 19533  003364  6EEA               	movwf	fsr0h,c
 19534  003366  50EF               	movf	indf0,w,c
 19535  003368  D003               	bra	u19750
 19536  00336A                     u19757:
 19537  00336A  6EF7               	movwf	tblptrh,c
 19538  00336C  0008               	tblrd		*
 19539  00336E  50F5               	movf	tablat,w,c
 19540  003370                     u19750:
 19541  003370  0A20               	xorlw	32
 19542  003372  E0F1               	bz	l14641
 19543  003374  0100               	movlb	0	; () banked
 19544  003376  D86A               	call	PL16	;call to abstracted procedure
 19545  003378  64EA               	cpfsgt	fsr0h,c
 19546  00337A  D003               	bra	u19777
 19547  00337C  6EEA               	movwf	fsr0h,c
 19548  00337E  50EF               	movf	indf0,w,c
 19549  003380  D003               	bra	u19770
 19550  003382                     u19777:
 19551  003382  6EF7               	movwf	tblptrh,c
 19552  003384  0008               	tblrd		*
 19553  003386  50F5               	movf	tablat,w,c
 19554  003388                     u19770:
 19555  003388  0A09               	xorlw	9
 19556  00338A  E0E5               	bz	l14641
 19557  00338C  0100               	movlb	0	; () banked
 19558  00338E  6B69               	clrf	atoi@a& (0+255),b
 19559  003390  6B6A               	clrf	(atoi@a+1)& (0+255),b
 19560  003392  6B68               	clrf	atoi@sign& (0+255),b
 19561                           
 19562                           ; BSR set to: 0
 19563  003394  D85B               	call	PL16	;call to abstracted procedure
 19564  003396  64EA               	cpfsgt	fsr0h,c
 19565  003398  D003               	bra	u19797
 19566  00339A  6EEA               	movwf	fsr0h,c
 19567  00339C  50EF               	movf	indf0,w,c
 19568  00339E  D003               	bra	u19790
 19569  0033A0                     u19797:
 19570  0033A0  6EF7               	movwf	tblptrh,c
 19571  0033A2  0008               	tblrd		*
 19572  0033A4  50F5               	movf	tablat,w,c
 19573  0033A6                     u19790:
 19574  0033A6  0A2D               	xorlw	45
 19575  0033A8  E103               	bnz	l14651
 19576  0033AA  0100               	movlb	0	; () banked
 19577  0033AC  2B68               	incf	atoi@sign& (0+255),f,b
 19578  0033AE  D00D               	goto	L26
 19579  0033B0                     l14651:
 19580  0033B0  0100               	movlb	0	; () banked
 19581  0033B2  D84C               	call	PL16	;call to abstracted procedure
 19582  0033B4  64EA               	cpfsgt	fsr0h,c
 19583  0033B6  D003               	bra	u19817
 19584  0033B8  6EEA               	movwf	fsr0h,c
 19585  0033BA  50EF               	movf	indf0,w,c
 19586  0033BC  D003               	bra	u19810
 19587  0033BE                     u19817:
 19588  0033BE  6EF7               	movwf	tblptrh,c
 19589  0033C0  0008               	tblrd		*
 19590  0033C2  50F5               	movf	tablat,w,c
 19591  0033C4                     u19810:
 19592  0033C4  0A2B               	xorlw	43
 19593  0033C6  E121               	bnz	l14659
 19594  0033C8                     l14653:
 19595  0033C8  0100               	movlb	0	; () banked
 19596  0033CA                     L26:
 19597  0033CA  4B64               	infsnz	atoi@s& (0+255),f,b
 19598  0033CC  2B65               	incf	(atoi@s+1)& (0+255),f,b
 19599  0033CE  D01D               	goto	l14659
 19600  0033D0                     l14655:
 19601                           
 19602                           ; BSR set to: 0
 19603  0033D0  C069  F060         	movff	atoi@a,?___wmul
 19604  0033D4  C06A  F061         	movff	atoi@a+1,?___wmul+1
 19605  0033D8  6B63               	clrf	(?___wmul+3)& (0+255),b
 19606  0033DA  0E0A               	movlw	10
 19607  0033DC  6F62               	movwf	(?___wmul+2)& (0+255),b
 19608  0033DE  ECE0  F00B         	call	___wmul	;wreg free
 19609  0033E2  D834               	call	PL16	;call to abstracted procedure
 19610  0033E4  64EA               	cpfsgt	fsr0h,c
 19611  0033E6  D003               	bra	u19837
 19612  0033E8  6EEA               	movwf	fsr0h,c
 19613  0033EA  50EF               	movf	indf0,w,c
 19614  0033EC  D003               	bra	u19830
 19615  0033EE                     u19837:
 19616  0033EE  6EF7               	movwf	tblptrh,c
 19617  0033F0  0008               	tblrd		*
 19618  0033F2  50F5               	movf	tablat,w,c
 19619  0033F4                     u19830:
 19620  0033F4  0100               	movlb	0	; () banked
 19621  0033F6  2760               	addwf	?___wmul& (0+255),f,b
 19622  0033F8  0E00               	movlw	0
 19623  0033FA  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19624  0033FC  0ED0               	movlw	208
 19625  0033FE  2560               	addwf	?___wmul& (0+255),w,b
 19626  003400  6F69               	movwf	atoi@a& (0+255),b
 19627  003402  0EFF               	movlw	255
 19628  003404  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19629  003406  6F6A               	movwf	(atoi@a+1)& (0+255),b
 19630  003408  D7DF               	goto	l14653
 19631  00340A                     l14659:
 19632  00340A  0100               	movlb	0	; () banked
 19633  00340C  D81F               	call	PL16	;call to abstracted procedure
 19634  00340E  64EA               	cpfsgt	fsr0h,c
 19635  003410  D003               	bra	u19847
 19636  003412  6EEA               	movwf	fsr0h,c
 19637  003414  50EF               	movf	indf0,w,c
 19638  003416  D003               	bra	u19840
 19639  003418                     u19847:
 19640  003418  6EF7               	movwf	tblptrh,c
 19641  00341A  0008               	tblrd		*
 19642  00341C  50F5               	movf	tablat,w,c
 19643  00341E                     u19840:
 19644  00341E  EC8A  F00B         	call	_isdigit
 19645  003422  E2D6               	bc	l14655
 19646                           
 19647                           ; BSR set to: 0
 19648  003424  5168               	movf	atoi@sign& (0+255),w,b
 19649  003426  E00D               	bz	l2063
 19650                           
 19651                           ; BSR set to: 0
 19652  003428  C069  F066         	movff	atoi@a,??_atoi
 19653  00342C  C06A  F067         	movff	atoi@a+1,??_atoi+1
 19654  003430  1F66               	comf	??_atoi& (0+255),f,b
 19655  003432  1F67               	comf	(??_atoi+1)& (0+255),f,b
 19656  003434  4B66               	infsnz	??_atoi& (0+255),f,b
 19657  003436  2B67               	incf	(??_atoi+1)& (0+255),f,b
 19658  003438  C066  F064         	movff	??_atoi,?_atoi
 19659  00343C  C067  F065         	movff	??_atoi+1,?_atoi+1
 19660  003440  D004               	goto	l2064
 19661  003442                     l2063:
 19662                           
 19663                           ; BSR set to: 0
 19664  003442  C069  F064         	movff	atoi@a,?_atoi
 19665  003446  C06A  F065         	movff	atoi@a+1,?_atoi+1
 19666  00344A                     l2064:
 19667                           
 19668                           ; BSR set to: 0
 19669  00344A  0012               	return	
 19670  00344C                     __end_of_atoi:
 19671                           	opt stack 0
 19672  00344C                     PL16:
 19673                           	opt stack 24
 19674  00344C  5164               	movf	atoi@s& (0+255),w,b
 19675  00344E  6EF6               	movwf	tblptrl,c
 19676  003450  6EE9               	movwf	fsr0l,c
 19677  003452  0E05               	movlw	(high __ramtop+-1)
 19678  003454  6EEA               	movwf	fsr0h,c
 19679  003456  5165               	movf	(atoi@s+1)& (0+255),w,b
 19680  003458  0012               	return	
 19681  00345A                     __end_ofPL16:
 19682                           	opt stack 0
 19683                           tblptru	equ	0xFF8
 19684                           tblptrh	equ	0xFF7
 19685                           tblptrl	equ	0xFF6
 19686                           tablat	equ	0xFF5
 19687                           prodh	equ	0xFF4
 19688                           prodl	equ	0xFF3
 19689                           intcon	equ	0xFF2
 19690                           indf0	equ	0xFEF
 19691                           postinc0	equ	0xFEE
 19692                           fsr0h	equ	0xFEA
 19693                           fsr0l	equ	0xFE9
 19694                           wreg	equ	0xFE8
 19695                           indf1	equ	0xFE7
 19696                           postinc1	equ	0xFE6
 19697                           postdec1	equ	0xFE5
 19698                           fsr1h	equ	0xFE2
 19699                           fsr1l	equ	0xFE1
 19700                           indf2	equ	0xFDF
 19701                           postinc2	equ	0xFDE
 19702                           postdec2	equ	0xFDD
 19703                           plusw2	equ	0xFDB
 19704                           fsr2h	equ	0xFDA
 19705                           fsr2l	equ	0xFD9
 19706                           status	equ	0xFD8
 19707                           
 19708 ;; *************** function _strtok *****************
 19709 ;; Defined at:
 19710 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19711 ;; Parameters:    Size  Location     Type
 19712 ;;  s1              2   10[BANK0 ] PTR unsigned char 
 19713 ;;		 -> NULL(0), cmdbuf(80), 
 19714 ;;  s2              2   12[BANK0 ] PTR const unsigned char 
 19715 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19716 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19717 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19718 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19719 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19720 ;;		 -> STR_31(2), STR_30(2), 
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;                  2   10[BANK0 ] PTR unsigned char 
 19725 ;; Registers used:
 19726 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : F/0
 19729 ;;		On exit  : F/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19732 ;;      Params:         0       4       0       0       0       0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0
 19735 ;;      Totals:         0       4       0       0       0       0       0
 19736 ;;Total ram usage:        4 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:    5
 19739 ;; This function calls:
 19740 ;;		_strspn
 19741 ;;		_strcspn
 19742 ;; This function is called by:
 19743 ;;		_doModeVerbose
 19744 ;; This function uses a non-reentrant model
 19745 ;;
 19746                           
 19747                           	psect	text43
 19748  0022C6                     __ptext43:
 19749                           	opt stack 0
 19750  0022C6                     _strtok:
 19751                           	opt stack 23
 19752                           
 19753                           ; BSR set to: 0
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;incstack = 0
 19757                           ;incstack = 0
 19758  0022C6  516B               	movf	(strtok@s1+1)& (0+255),w,b
 19759  0022C8  116A               	iorwf	strtok@s1& (0+255),w,b
 19760  0022CA  E104               	bnz	l11439
 19761                           
 19762                           ; BSR set to: 0
 19763  0022CC  C02B  F06A         	movff	strtok@sp,strtok@s1
 19764  0022D0  C02C  F06B         	movff	strtok@sp+1,strtok@s1+1
 19765  0022D4                     l11439:
 19766                           
 19767                           ; BSR set to: 0
 19768  0022D4  516B               	movf	(strtok@s1+1)& (0+255),w,b
 19769  0022D6  116A               	iorwf	strtok@s1& (0+255),w,b
 19770  0022D8  E016               	bz	L27
 19771                           
 19772                           ; BSR set to: 0
 19773                           
 19774                           ; BSR set to: 0
 19775  0022DA  C06A  F064         	movff	strtok@s1,?_strspn
 19776  0022DE  C06B  F065         	movff	strtok@s1+1,?_strspn+1
 19777  0022E2  C06C  F066         	movff	strtok@s2,?_strspn+2
 19778  0022E6  C06D  F067         	movff	strtok@s2+1,?_strspn+3
 19779  0022EA  EC26  F00D         	call	_strspn	;wreg free
 19780  0022EE  5164               	movf	?_strspn& (0+255),w,b
 19781  0022F0  276A               	addwf	strtok@s1& (0+255),f,b
 19782  0022F2  5165               	movf	(?_strspn+1)& (0+255),w,b
 19783  0022F4  236B               	addwfc	(strtok@s1+1)& (0+255),f,b
 19784                           
 19785                           ; BSR set to: 0
 19786  0022F6  C06A  FFD9         	movff	strtok@s1,fsr2l
 19787  0022FA  C06B  FFDA         	movff	strtok@s1+1,fsr2h
 19788  0022FE  50DF               	movf	indf2,w,c
 19789  002300  E105               	bnz	l11449
 19790                           
 19791                           ; BSR set to: 0
 19792  002302  6A2B               	clrf	strtok@sp,c
 19793  002304  6A2C               	clrf	strtok@sp+1,c
 19794  002306                     L27:
 19795  002306  6B6A               	clrf	?_strtok& (0+255),b
 19796  002308  6B6B               	clrf	(?_strtok+1)& (0+255),b
 19797  00230A  D025               	goto	l2556
 19798  00230C                     l11449:
 19799                           
 19800                           ; BSR set to: 0
 19801  00230C  C06A  F064         	movff	strtok@s1,?_strcspn
 19802  002310  C06B  F065         	movff	strtok@s1+1,?_strcspn+1
 19803  002314  C06C  F066         	movff	strtok@s2,?_strcspn+2
 19804  002318  C06D  F067         	movff	strtok@s2+1,?_strcspn+3
 19805  00231C  EC48  F00D         	call	_strcspn	;wreg free
 19806  002320  5164               	movf	?_strcspn& (0+255),w,b
 19807  002322  256A               	addwf	strtok@s1& (0+255),w,b
 19808  002324  6E2B               	movwf	strtok@sp,c
 19809  002326  5165               	movf	(?_strcspn+1)& (0+255),w,b
 19810  002328  216B               	addwfc	(strtok@s1+1)& (0+255),w,b
 19811  00232A  6E2C               	movwf	strtok@sp+1,c
 19812                           
 19813                           ; BSR set to: 0
 19814  00232C  C02B  FFD9         	movff	strtok@sp,fsr2l
 19815  002330  C02C  FFDA         	movff	strtok@sp+1,fsr2h
 19816  002334  50DF               	movf	indf2,w,c
 19817  002336  E009               	bz	l2558
 19818                           
 19819                           ; BSR set to: 0
 19820  002338  C02B  FFD9         	movff	strtok@sp,fsr2l
 19821  00233C  C02C  FFDA         	movff	strtok@sp+1,fsr2h
 19822  002340  0E00               	movlw	0
 19823  002342  6EDF               	movwf	indf2,c
 19824                           
 19825                           ; BSR set to: 0
 19826  002344  4A2B               	infsnz	strtok@sp,f,c
 19827  002346  2A2C               	incf	strtok@sp+1,f,c
 19828  002348  D002               	goto	l2559
 19829  00234A                     l2558:
 19830                           
 19831                           ; BSR set to: 0
 19832  00234A  6A2B               	clrf	strtok@sp,c
 19833  00234C  6A2C               	clrf	strtok@sp+1,c
 19834  00234E                     l2559:
 19835                           
 19836                           ; BSR set to: 0
 19837  00234E  C06A  F06A         	movff	strtok@s1,?_strtok
 19838  002352  C06B  F06B         	movff	strtok@s1+1,?_strtok+1
 19839  002356                     l2556:
 19840                           
 19841                           ; BSR set to: 0
 19842  002356  0012               	return	
 19843  002358                     __end_of_strtok:
 19844                           	opt stack 0
 19845                           tblptru	equ	0xFF8
 19846                           tblptrh	equ	0xFF7
 19847                           tblptrl	equ	0xFF6
 19848                           tablat	equ	0xFF5
 19849                           prodh	equ	0xFF4
 19850                           prodl	equ	0xFF3
 19851                           intcon	equ	0xFF2
 19852                           indf0	equ	0xFEF
 19853                           postinc0	equ	0xFEE
 19854                           fsr0h	equ	0xFEA
 19855                           fsr0l	equ	0xFE9
 19856                           wreg	equ	0xFE8
 19857                           indf1	equ	0xFE7
 19858                           postinc1	equ	0xFE6
 19859                           postdec1	equ	0xFE5
 19860                           fsr1h	equ	0xFE2
 19861                           fsr1l	equ	0xFE1
 19862                           indf2	equ	0xFDF
 19863                           postinc2	equ	0xFDE
 19864                           postdec2	equ	0xFDD
 19865                           plusw2	equ	0xFDB
 19866                           fsr2h	equ	0xFDA
 19867                           fsr2l	equ	0xFD9
 19868                           status	equ	0xFD8
 19869                           
 19870 ;; *************** function _strcspn *****************
 19871 ;; Defined at:
 19872 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19873 ;; Parameters:    Size  Location     Type
 19874 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 19875 ;;		 -> NULL(0), cmdbuf(80), 
 19876 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 19877 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19878 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19879 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19880 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19881 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19882 ;;		 -> STR_31(2), STR_30(2), 
 19883 ;; Auto vars:     Size  Location     Type
 19884 ;;  i               2    8[BANK0 ] unsigned int 
 19885 ;; Return value:  Size  Location     Type
 19886 ;;                  2    4[BANK0 ] unsigned int 
 19887 ;; Registers used:
 19888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19889 ;; Tracked objects:
 19890 ;;		On entry : F/0
 19891 ;;		On exit  : F/0
 19892 ;;		Unchanged: 0/0
 19893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19894 ;;      Params:         0       4       0       0       0       0       0
 19895 ;;      Locals:         0       2       0       0       0       0       0
 19896 ;;      Temps:          0       0       0       0       0       0       0
 19897 ;;      Totals:         0       6       0       0       0       0       0
 19898 ;;Total ram usage:        6 bytes
 19899 ;; Hardware stack levels used:    1
 19900 ;; Hardware stack levels required when called:    4
 19901 ;; This function calls:
 19902 ;;		_strchr
 19903 ;; This function is called by:
 19904 ;;		_strtok
 19905 ;; This function uses a non-reentrant model
 19906 ;;
 19907                           
 19908                           	psect	text44
 19909  001A90                     __ptext44:
 19910                           	opt stack 0
 19911  001A90                     _strcspn:
 19912                           	opt stack 23
 19913                           
 19914                           ; BSR set to: 0
 19915                           
 19916                           ; BSR set to: 0
 19917                           ;incstack = 0
 19918                           ;incstack = 0
 19919  001A90  6B68               	clrf	strcspn@i& (0+255),b
 19920  001A92  6B69               	clrf	(strcspn@i+1)& (0+255),b
 19921  001A94  D004               	goto	l13165
 19922  001A96                     l13163:
 19923                           
 19924                           ; BSR set to: 0
 19925  001A96  4B64               	infsnz	strcspn@s1& (0+255),f,b
 19926  001A98  2B65               	incf	(strcspn@s1+1)& (0+255),f,b
 19927  001A9A  4B68               	infsnz	strcspn@i& (0+255),f,b
 19928  001A9C  2B69               	incf	(strcspn@i+1)& (0+255),f,b
 19929  001A9E                     l13165:
 19930                           
 19931                           ; BSR set to: 0
 19932  001A9E  C064  FFD9         	movff	strcspn@s1,fsr2l
 19933  001AA2  C065  FFDA         	movff	strcspn@s1+1,fsr2h
 19934  001AA6  50DF               	movf	indf2,w,c
 19935  001AA8  E010               	bz	l2583
 19936                           
 19937                           ; BSR set to: 0
 19938  001AAA  C066  F060         	movff	strcspn@s2,?_strchr
 19939  001AAE  C067  F061         	movff	strcspn@s2+1,?_strchr+1
 19940  001AB2  C064  FFD9         	movff	strcspn@s1,fsr2l
 19941  001AB6  C065  FFDA         	movff	strcspn@s1+1,fsr2h
 19942  001ABA  50DF               	movf	indf2,w,c
 19943  001ABC  6F62               	movwf	(?_strchr+2)& (0+255),b
 19944  001ABE  6B63               	clrf	(?_strchr+3)& (0+255),b
 19945  001AC0  ECE6  F00E         	call	_strchr	;wreg free
 19946  001AC4  5161               	movf	(?_strchr+1)& (0+255),w,b
 19947  001AC6  1160               	iorwf	?_strchr& (0+255),w,b
 19948  001AC8  E0E6               	bz	l13163
 19949  001ACA                     l2583:
 19950                           
 19951                           ; BSR set to: 0
 19952  001ACA  C068  F064         	movff	strcspn@i,?_strcspn
 19953  001ACE  C069  F065         	movff	strcspn@i+1,?_strcspn+1
 19954                           
 19955                           ; BSR set to: 0
 19956  001AD2  0012               	return	
 19957  001AD4                     __end_of_strcspn:
 19958                           	opt stack 0
 19959                           tblptru	equ	0xFF8
 19960                           tblptrh	equ	0xFF7
 19961                           tblptrl	equ	0xFF6
 19962                           tablat	equ	0xFF5
 19963                           prodh	equ	0xFF4
 19964                           prodl	equ	0xFF3
 19965                           intcon	equ	0xFF2
 19966                           indf0	equ	0xFEF
 19967                           postinc0	equ	0xFEE
 19968                           fsr0h	equ	0xFEA
 19969                           fsr0l	equ	0xFE9
 19970                           wreg	equ	0xFE8
 19971                           indf1	equ	0xFE7
 19972                           postinc1	equ	0xFE6
 19973                           postdec1	equ	0xFE5
 19974                           fsr1h	equ	0xFE2
 19975                           fsr1l	equ	0xFE1
 19976                           indf2	equ	0xFDF
 19977                           postinc2	equ	0xFDE
 19978                           postdec2	equ	0xFDD
 19979                           plusw2	equ	0xFDB
 19980                           fsr2h	equ	0xFDA
 19981                           fsr2l	equ	0xFD9
 19982                           status	equ	0xFD8
 19983                           
 19984 ;; *************** function _strspn *****************
 19985 ;; Defined at:
 19986 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19987 ;; Parameters:    Size  Location     Type
 19988 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 19989 ;;		 -> NULL(0), cmdbuf(80), 
 19990 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 19991 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19992 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19993 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19994 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19995 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19996 ;;		 -> STR_31(2), STR_30(2), 
 19997 ;; Auto vars:     Size  Location     Type
 19998 ;;  i               2    8[BANK0 ] unsigned int 
 19999 ;; Return value:  Size  Location     Type
 20000 ;;                  2    4[BANK0 ] unsigned int 
 20001 ;; Registers used:
 20002 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20003 ;; Tracked objects:
 20004 ;;		On entry : F/0
 20005 ;;		On exit  : F/0
 20006 ;;		Unchanged: 0/0
 20007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20008 ;;      Params:         0       4       0       0       0       0       0
 20009 ;;      Locals:         0       2       0       0       0       0       0
 20010 ;;      Temps:          0       0       0       0       0       0       0
 20011 ;;      Totals:         0       6       0       0       0       0       0
 20012 ;;Total ram usage:        6 bytes
 20013 ;; Hardware stack levels used:    1
 20014 ;; Hardware stack levels required when called:    4
 20015 ;; This function calls:
 20016 ;;		_strchr
 20017 ;; This function is called by:
 20018 ;;		_strtok
 20019 ;; This function uses a non-reentrant model
 20020 ;;
 20021                           
 20022                           	psect	text45
 20023  001A4C                     __ptext45:
 20024                           	opt stack 0
 20025  001A4C                     _strspn:
 20026                           	opt stack 23
 20027                           
 20028                           ; BSR set to: 0
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;incstack = 0
 20032                           ;incstack = 0
 20033  001A4C  6B68               	clrf	strspn@i& (0+255),b
 20034  001A4E  6B69               	clrf	(strspn@i+1)& (0+255),b
 20035  001A50  D004               	goto	l13157
 20036  001A52                     l13155:
 20037                           
 20038                           ; BSR set to: 0
 20039  001A52  4B64               	infsnz	strspn@s1& (0+255),f,b
 20040  001A54  2B65               	incf	(strspn@s1+1)& (0+255),f,b
 20041  001A56  4B68               	infsnz	strspn@i& (0+255),f,b
 20042  001A58  2B69               	incf	(strspn@i+1)& (0+255),f,b
 20043  001A5A                     l13157:
 20044                           
 20045                           ; BSR set to: 0
 20046  001A5A  C064  FFD9         	movff	strspn@s1,fsr2l
 20047  001A5E  C065  FFDA         	movff	strspn@s1+1,fsr2h
 20048  001A62  50DF               	movf	indf2,w,c
 20049  001A64  E010               	bz	l2602
 20050                           
 20051                           ; BSR set to: 0
 20052  001A66  C066  F060         	movff	strspn@s2,?_strchr
 20053  001A6A  C067  F061         	movff	strspn@s2+1,?_strchr+1
 20054  001A6E  C064  FFD9         	movff	strspn@s1,fsr2l
 20055  001A72  C065  FFDA         	movff	strspn@s1+1,fsr2h
 20056  001A76  50DF               	movf	indf2,w,c
 20057  001A78  6F62               	movwf	(?_strchr+2)& (0+255),b
 20058  001A7A  6B63               	clrf	(?_strchr+3)& (0+255),b
 20059  001A7C  ECE6  F00E         	call	_strchr	;wreg free
 20060  001A80  5161               	movf	(?_strchr+1)& (0+255),w,b
 20061  001A82  1160               	iorwf	?_strchr& (0+255),w,b
 20062  001A84  E1E6               	bnz	l13155
 20063  001A86                     l2602:
 20064                           
 20065                           ; BSR set to: 0
 20066  001A86  C068  F064         	movff	strspn@i,?_strspn
 20067  001A8A  C069  F065         	movff	strspn@i+1,?_strspn+1
 20068                           
 20069                           ; BSR set to: 0
 20070  001A8E  0012               	return	
 20071  001A90                     __end_of_strspn:
 20072                           	opt stack 0
 20073                           tblptru	equ	0xFF8
 20074                           tblptrh	equ	0xFF7
 20075                           tblptrl	equ	0xFF6
 20076                           tablat	equ	0xFF5
 20077                           prodh	equ	0xFF4
 20078                           prodl	equ	0xFF3
 20079                           intcon	equ	0xFF2
 20080                           indf0	equ	0xFEF
 20081                           postinc0	equ	0xFEE
 20082                           fsr0h	equ	0xFEA
 20083                           fsr0l	equ	0xFE9
 20084                           wreg	equ	0xFE8
 20085                           indf1	equ	0xFE7
 20086                           postinc1	equ	0xFE6
 20087                           postdec1	equ	0xFE5
 20088                           fsr1h	equ	0xFE2
 20089                           fsr1l	equ	0xFE1
 20090                           indf2	equ	0xFDF
 20091                           postinc2	equ	0xFDE
 20092                           postdec2	equ	0xFDD
 20093                           plusw2	equ	0xFDB
 20094                           fsr2h	equ	0xFDA
 20095                           fsr2l	equ	0xFD9
 20096                           status	equ	0xFD8
 20097                           
 20098 ;; *************** function _strchr *****************
 20099 ;; Defined at:
 20100 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20101 ;; Parameters:    Size  Location     Type
 20102 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20103 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20104 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20105 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20106 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20107 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20108 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20109 ;;  chr             2    2[BANK0 ] int 
 20110 ;; Auto vars:     Size  Location     Type
 20111 ;;		None
 20112 ;; Return value:  Size  Location     Type
 20113 ;;                  2    0[BANK0 ] PTR unsigned char 
 20114 ;; Registers used:
 20115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20116 ;; Tracked objects:
 20117 ;;		On entry : F/0
 20118 ;;		On exit  : F/0
 20119 ;;		Unchanged: 0/0
 20120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20121 ;;      Params:         0       4       0       0       0       0       0
 20122 ;;      Locals:         0       0       0       0       0       0       0
 20123 ;;      Temps:          2       0       0       0       0       0       0
 20124 ;;      Totals:         2       4       0       0       0       0       0
 20125 ;;Total ram usage:        6 bytes
 20126 ;; Hardware stack levels used:    1
 20127 ;; Hardware stack levels required when called:    3
 20128 ;; This function calls:
 20129 ;;		Nothing
 20130 ;; This function is called by:
 20131 ;;		_doModeVerbose
 20132 ;;		_strcspn
 20133 ;;		_strspn
 20134 ;; This function uses a non-reentrant model
 20135 ;;
 20136                           
 20137                           	psect	text46
 20138  001DCC                     __ptext46:
 20139                           	opt stack 0
 20140  001DCC                     _strchr:
 20141                           	opt stack 25
 20142  001DCC                     l2504:
 20143                           
 20144                           ; BSR set to: 0
 20145  001DCC  0100               	movlb	0	; () banked
 20146  001DCE  5160               	movf	strchr@ptr& (0+255),w,b
 20147  001DD0  6EF6               	movwf	tblptrl,c
 20148  001DD2  6EE9               	movwf	fsr0l,c
 20149  001DD4  0E05               	movlw	(high __ramtop+-1)
 20150  001DD6  6EEA               	movwf	fsr0h,c
 20151  001DD8  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20152  001DDA  64EA               	cpfsgt	fsr0h,c
 20153  001DDC  D003               	bra	u14707
 20154  001DDE  6EEA               	movwf	fsr0h,c
 20155  001DE0  50EF               	movf	indf0,w,c
 20156  001DE2  D003               	bra	u14700
 20157  001DE4                     u14707:
 20158  001DE4  6EF7               	movwf	tblptrh,c
 20159  001DE6  0008               	tblrd		*
 20160  001DE8  50F5               	movf	tablat,w,c
 20161  001DEA                     u14700:
 20162  001DEA  0100               	movlb	0	; () banked
 20163  001DEC  1962               	xorwf	strchr@chr& (0+255),w,b
 20164  001DEE  E105               	bnz	l11723
 20165                           
 20166                           ; BSR set to: 0
 20167  001DF0  C060  F060         	movff	strchr@ptr,?_strchr
 20168  001DF4  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20169  001DF8  D019               	goto	l2506
 20170  001DFA                     l11723:
 20171                           
 20172                           ; BSR set to: 0
 20173  001DFA  5160               	movf	strchr@ptr& (0+255),w,b
 20174  001DFC  6E21               	movwf	??_strchr& (0+255),c
 20175  001DFE  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20176  001E00  6E22               	movwf	(??_strchr+1)& (0+255),c
 20177  001E02  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20178  001E04  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20179  001E06  5021               	movf	??_strchr,w,c
 20180  001E08  6EF6               	movwf	tblptrl,c
 20181  001E0A  6EE9               	movwf	fsr0l,c
 20182  001E0C  0E05               	movlw	(high __ramtop+-1)
 20183  001E0E  6EEA               	movwf	fsr0h,c
 20184  001E10  5022               	movf	??_strchr+1,w,c
 20185  001E12  64EA               	cpfsgt	fsr0h,c
 20186  001E14  D003               	bra	u14727
 20187  001E16  6EEA               	movwf	fsr0h,c
 20188  001E18  50EF               	movf	indf0,w,c
 20189  001E1A  D003               	bra	u14720
 20190  001E1C                     u14727:
 20191  001E1C  6EF7               	movwf	tblptrh,c
 20192  001E1E  0008               	tblrd		*
 20193  001E20  50F5               	movf	tablat,w,c
 20194  001E22                     u14720:
 20195  001E22  0900               	iorlw	0
 20196  001E24  E1D3               	bnz	l2504
 20197  001E26  0100               	movlb	0	; () banked
 20198  001E28  6B60               	clrf	?_strchr& (0+255),b
 20199  001E2A  6B61               	clrf	(?_strchr+1)& (0+255),b
 20200  001E2C                     l2506:
 20201                           
 20202                           ; BSR set to: 0
 20203  001E2C  0012               	return	
 20204  001E2E                     __end_of_strchr:
 20205                           	opt stack 0
 20206                           tblptru	equ	0xFF8
 20207                           tblptrh	equ	0xFF7
 20208                           tblptrl	equ	0xFF6
 20209                           tablat	equ	0xFF5
 20210                           prodh	equ	0xFF4
 20211                           prodl	equ	0xFF3
 20212                           intcon	equ	0xFF2
 20213                           indf0	equ	0xFEF
 20214                           postinc0	equ	0xFEE
 20215                           fsr0h	equ	0xFEA
 20216                           fsr0l	equ	0xFE9
 20217                           wreg	equ	0xFE8
 20218                           indf1	equ	0xFE7
 20219                           postinc1	equ	0xFE6
 20220                           postdec1	equ	0xFE5
 20221                           fsr1h	equ	0xFE2
 20222                           fsr1l	equ	0xFE1
 20223                           indf2	equ	0xFDF
 20224                           postinc2	equ	0xFDE
 20225                           postdec2	equ	0xFDD
 20226                           plusw2	equ	0xFDB
 20227                           fsr2h	equ	0xFDA
 20228                           fsr2l	equ	0xFD9
 20229                           status	equ	0xFD8
 20230                           
 20231 ;; *************** function _stristr *****************
 20232 ;; Defined at:
 20233 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20234 ;; Parameters:    Size  Location     Type
 20235 ;;  s1              2   11[BANK0 ] PTR const unsigned char 
 20236 ;;		 -> NULL(0), cmdbuf(80), 
 20237 ;;  s2              2   13[BANK0 ] PTR const unsigned char 
 20238 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20239 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20240 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20241 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20242 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20243 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20244 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20245 ;;		 -> STR_8(5), STR_6(5), 
 20246 ;; Auto vars:     Size  Location     Type
 20247 ;;		None
 20248 ;; Return value:  Size  Location     Type
 20249 ;;                  2   11[BANK0 ] PTR unsigned char 
 20250 ;; Registers used:
 20251 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20252 ;; Tracked objects:
 20253 ;;		On entry : F/0
 20254 ;;		On exit  : F/0
 20255 ;;		Unchanged: 0/0
 20256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20257 ;;      Params:         0       4       0       0       0       0       0
 20258 ;;      Locals:         0       0       0       0       0       0       0
 20259 ;;      Temps:          0       0       0       0       0       0       0
 20260 ;;      Totals:         0       4       0       0       0       0       0
 20261 ;;Total ram usage:        4 bytes
 20262 ;; Hardware stack levels used:    1
 20263 ;; Hardware stack levels required when called:    5
 20264 ;; This function calls:
 20265 ;;		_strlen
 20266 ;;		_strnicmp
 20267 ;;		_strichr
 20268 ;; This function is called by:
 20269 ;;		_doModeVerbose
 20270 ;; This function uses a non-reentrant model
 20271 ;;
 20272                           
 20273                           	psect	text47
 20274  0020C2                     __ptext47:
 20275                           	opt stack 0
 20276  0020C2                     _stristr:
 20277                           	opt stack 23
 20278                           
 20279                           ; BSR set to: 0
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;incstack = 0
 20283                           ;incstack = 0
 20284  0020C2  D02F               	goto	l14635
 20285  0020C4                     l14629:
 20286                           
 20287                           ; BSR set to: 0
 20288  0020C4  C06B  F062         	movff	stristr@s1,?_strnicmp
 20289  0020C8  C06C  F063         	movff	stristr@s1+1,?_strnicmp+1
 20290  0020CC  C06D  F064         	movff	stristr@s2,?_strnicmp+2
 20291  0020D0  C06E  F065         	movff	stristr@s2+1,?_strnicmp+3
 20292  0020D4  C06D  F021         	movff	stristr@s2,?_strlen
 20293  0020D8  C06E  F022         	movff	stristr@s2+1,?_strlen+1
 20294  0020DC  ECE4  F00C         	call	_strlen	;wreg free
 20295  0020E0  C021  F066         	movff	?_strlen,?_strnicmp+4
 20296  0020E4  C022  F067         	movff	?_strlen+1,?_strnicmp+5
 20297  0020E8  EC48  F00F         	call	_strnicmp	;wreg free
 20298  0020EC  5163               	movf	(?_strnicmp+1)& (0+255),w,b
 20299  0020EE  1162               	iorwf	?_strnicmp& (0+255),w,b
 20300  0020F0  E105               	bnz	l14633
 20301                           
 20302                           ; BSR set to: 0
 20303  0020F2  C06B  F06B         	movff	stristr@s1,?_stristr
 20304  0020F6  C06C  F06C         	movff	stristr@s1+1,?_stristr+1
 20305  0020FA  D01E               	goto	l2525
 20306  0020FC                     l14633:
 20307                           
 20308                           ; BSR set to: 0
 20309  0020FC  296B               	incf	stristr@s1& (0+255),w,b
 20310  0020FE  6F60               	movwf	?_strichr& (0+255),b
 20311  002100  0E00               	movlw	0
 20312  002102  216C               	addwfc	(stristr@s1+1)& (0+255),w,b
 20313  002104  6F61               	movwf	(?_strichr+1)& (0+255),b
 20314  002106  C06D  FFF6         	movff	stristr@s2,tblptrl
 20315  00210A  C06E  FFF7         	movff	stristr@s2+1,tblptrh
 20316  00210E  0008               	tblrd		*
 20317  002110  50F5               	movf	tablat,w,c
 20318  002112  6F62               	movwf	(?_strichr+2)& (0+255),b
 20319  002114  6B63               	clrf	(?_strichr+3)& (0+255),b
 20320  002116  EC86  F00C         	call	_strichr	;wreg free
 20321  00211A  C060  F06B         	movff	?_strichr,stristr@s1
 20322  00211E  C061  F06C         	movff	?_strichr+1,stristr@s1+1
 20323  002122                     l14635:
 20324                           
 20325                           ; BSR set to: 0
 20326  002122  516C               	movf	(stristr@s1+1)& (0+255),w,b
 20327  002124  116B               	iorwf	stristr@s1& (0+255),w,b
 20328  002126  E006               	bz	l2528
 20329                           
 20330                           ; BSR set to: 0
 20331  002128  C06B  FFD9         	movff	stristr@s1,fsr2l
 20332  00212C  C06C  FFDA         	movff	stristr@s1+1,fsr2h
 20333  002130  50DF               	movf	indf2,w,c
 20334  002132  E1C8               	bnz	l14629
 20335  002134                     l2528:
 20336                           
 20337                           ; BSR set to: 0
 20338  002134  6B6B               	clrf	?_stristr& (0+255),b
 20339  002136  6B6C               	clrf	(?_stristr+1)& (0+255),b
 20340  002138                     l2525:
 20341                           
 20342                           ; BSR set to: 0
 20343  002138  0012               	return	
 20344  00213A                     __end_of_stristr:
 20345                           	opt stack 0
 20346                           tblptru	equ	0xFF8
 20347                           tblptrh	equ	0xFF7
 20348                           tblptrl	equ	0xFF6
 20349                           tablat	equ	0xFF5
 20350                           prodh	equ	0xFF4
 20351                           prodl	equ	0xFF3
 20352                           intcon	equ	0xFF2
 20353                           indf0	equ	0xFEF
 20354                           postinc0	equ	0xFEE
 20355                           fsr0h	equ	0xFEA
 20356                           fsr0l	equ	0xFE9
 20357                           wreg	equ	0xFE8
 20358                           indf1	equ	0xFE7
 20359                           postinc1	equ	0xFE6
 20360                           postdec1	equ	0xFE5
 20361                           fsr1h	equ	0xFE2
 20362                           fsr1l	equ	0xFE1
 20363                           indf2	equ	0xFDF
 20364                           postinc2	equ	0xFDE
 20365                           postdec2	equ	0xFDD
 20366                           plusw2	equ	0xFDB
 20367                           fsr2h	equ	0xFDA
 20368                           fsr2l	equ	0xFD9
 20369                           status	equ	0xFD8
 20370                           
 20371 ;; *************** function _strichr *****************
 20372 ;; Defined at:
 20373 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20374 ;; Parameters:    Size  Location     Type
 20375 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20376 ;;		 -> NULL(0), cmdbuf(80), 
 20377 ;;  chr             2    2[BANK0 ] int 
 20378 ;; Auto vars:     Size  Location     Type
 20379 ;;		None
 20380 ;; Return value:  Size  Location     Type
 20381 ;;                  2    0[BANK0 ] PTR unsigned char 
 20382 ;; Registers used:
 20383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20384 ;; Tracked objects:
 20385 ;;		On entry : F/0
 20386 ;;		On exit  : F/0
 20387 ;;		Unchanged: 0/0
 20388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20389 ;;      Params:         0       4       0       0       0       0       0
 20390 ;;      Locals:         0       0       0       0       0       0       0
 20391 ;;      Temps:          0       0       0       0       0       0       0
 20392 ;;      Totals:         0       4       0       0       0       0       0
 20393 ;;Total ram usage:        4 bytes
 20394 ;; Hardware stack levels used:    1
 20395 ;; Hardware stack levels required when called:    4
 20396 ;; This function calls:
 20397 ;;		_toupper
 20398 ;; This function is called by:
 20399 ;;		_stristr
 20400 ;; This function uses a non-reentrant model
 20401 ;;
 20402                           
 20403                           	psect	text48
 20404  00190C                     __ptext48:
 20405                           	opt stack 0
 20406  00190C                     _strichr:
 20407                           	opt stack 23
 20408                           
 20409                           ; BSR set to: 0
 20410                           
 20411                           ; BSR set to: 0
 20412                           ;incstack = 0
 20413                           ;incstack = 0
 20414  00190C  5162               	movf	strichr@chr& (0+255),w,b
 20415  00190E  EC55  F00B         	call	_toupper
 20416  001912  6F62               	movwf	strichr@chr& (0+255),b
 20417  001914  6B63               	clrf	(strichr@chr+1)& (0+255),b
 20418  001916  D010               	goto	l16127
 20419  001918                     l16121:
 20420                           
 20421                           ; BSR set to: 0
 20422  001918  C060  FFD9         	movff	strichr@ptr,fsr2l
 20423  00191C  C061  FFDA         	movff	strichr@ptr+1,fsr2h
 20424  001920  50DF               	movf	indf2,w,c
 20425  001922  EC55  F00B         	call	_toupper
 20426  001926  1962               	xorwf	strichr@chr& (0+255),w,b
 20427  001928  E105               	bnz	l16125
 20428                           
 20429                           ; BSR set to: 0
 20430  00192A  C060  F060         	movff	strichr@ptr,?_strichr
 20431  00192E  C061  F061         	movff	strichr@ptr+1,?_strichr+1
 20432  001932  D00A               	goto	l2592
 20433  001934                     l16125:
 20434                           
 20435                           ; BSR set to: 0
 20436  001934  4B60               	infsnz	strichr@ptr& (0+255),f,b
 20437  001936  2B61               	incf	(strichr@ptr+1)& (0+255),f,b
 20438  001938                     l16127:
 20439                           
 20440                           ; BSR set to: 0
 20441  001938  C060  FFD9         	movff	strichr@ptr,fsr2l
 20442  00193C  C061  FFDA         	movff	strichr@ptr+1,fsr2h
 20443  001940  50DF               	movf	indf2,w,c
 20444  001942  E1EA               	bnz	l16121
 20445                           
 20446                           ; BSR set to: 0
 20447  001944  6B60               	clrf	?_strichr& (0+255),b
 20448  001946  6B61               	clrf	(?_strichr+1)& (0+255),b
 20449  001948                     l2592:
 20450                           
 20451                           ; BSR set to: 0
 20452  001948  0012               	return	
 20453  00194A                     __end_of_strichr:
 20454                           	opt stack 0
 20455                           tblptru	equ	0xFF8
 20456                           tblptrh	equ	0xFF7
 20457                           tblptrl	equ	0xFF6
 20458                           tablat	equ	0xFF5
 20459                           prodh	equ	0xFF4
 20460                           prodl	equ	0xFF3
 20461                           intcon	equ	0xFF2
 20462                           indf0	equ	0xFEF
 20463                           postinc0	equ	0xFEE
 20464                           fsr0h	equ	0xFEA
 20465                           fsr0l	equ	0xFE9
 20466                           wreg	equ	0xFE8
 20467                           indf1	equ	0xFE7
 20468                           postinc1	equ	0xFE6
 20469                           postdec1	equ	0xFE5
 20470                           fsr1h	equ	0xFE2
 20471                           fsr1l	equ	0xFE1
 20472                           indf2	equ	0xFDF
 20473                           postinc2	equ	0xFDE
 20474                           postdec2	equ	0xFDD
 20475                           plusw2	equ	0xFDB
 20476                           fsr2h	equ	0xFDA
 20477                           fsr2l	equ	0xFD9
 20478                           status	equ	0xFD8
 20479                           
 20480 ;; *************** function _strnicmp *****************
 20481 ;; Defined at:
 20482 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20483 ;; Parameters:    Size  Location     Type
 20484 ;;  s1              2    2[BANK0 ] PTR const unsigned char 
 20485 ;;		 -> NULL(0), cmdbuf(80), 
 20486 ;;  s2              2    4[BANK0 ] PTR const unsigned char 
 20487 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20488 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20489 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20490 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20491 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20492 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20493 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20494 ;;		 -> STR_8(5), STR_6(5), 
 20495 ;;  len             2    6[BANK0 ] unsigned int 
 20496 ;; Auto vars:     Size  Location     Type
 20497 ;;  r               1   10[BANK0 ] char 
 20498 ;; Return value:  Size  Location     Type
 20499 ;;                  2    2[BANK0 ] int 
 20500 ;; Registers used:
 20501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20502 ;; Tracked objects:
 20503 ;;		On entry : F/0
 20504 ;;		On exit  : F/0
 20505 ;;		Unchanged: 0/0
 20506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20507 ;;      Params:         0       6       0       0       0       0       0
 20508 ;;      Locals:         0       1       0       0       0       0       0
 20509 ;;      Temps:          0       2       0       0       0       0       0
 20510 ;;      Totals:         0       9       0       0       0       0       0
 20511 ;;Total ram usage:        9 bytes
 20512 ;; Hardware stack levels used:    1
 20513 ;; Hardware stack levels required when called:    4
 20514 ;; This function calls:
 20515 ;;		_toupper
 20516 ;; This function is called by:
 20517 ;;		_stristr
 20518 ;; This function uses a non-reentrant model
 20519 ;;
 20520                           
 20521                           	psect	text49
 20522  001E90                     __ptext49:
 20523                           	opt stack 0
 20524  001E90                     _strnicmp:
 20525                           	opt stack 23
 20526                           
 20527                           ; BSR set to: 0
 20528                           
 20529                           ; BSR set to: 0
 20530                           ;incstack = 0
 20531                           ;incstack = 0
 20532  001E90  D027               	goto	l16117
 20533  001E92                     l16107:
 20534                           
 20535                           ; BSR set to: 0
 20536  001E92  C064  FFF6         	movff	strnicmp@s2,tblptrl
 20537  001E96  C065  FFF7         	movff	strnicmp@s2+1,tblptrh
 20538  001E9A  0008               	tblrd		*
 20539  001E9C  50F5               	movf	tablat,w,c
 20540  001E9E  EC55  F00B         	call	_toupper
 20541  001EA2  6F68               	movwf	??_strnicmp& (0+255),b
 20542  001EA4  C062  FFD9         	movff	strnicmp@s1,fsr2l
 20543  001EA8  C063  FFDA         	movff	strnicmp@s1+1,fsr2h
 20544  001EAC  50DF               	movf	indf2,w,c
 20545  001EAE  EC55  F00B         	call	_toupper
 20546  001EB2  6F69               	movwf	(??_strnicmp+1)& (0+255),b
 20547  001EB4  5168               	movf	??_strnicmp& (0+255),w,b
 20548  001EB6  5D69               	subwf	(??_strnicmp+1)& (0+255),w,b
 20549  001EB8  6F6A               	movwf	strnicmp@r& (0+255),b
 20550  001EBA  0100               	movlb	0	; () banked
 20551  001EBC  676A               	tstfsz	strnicmp@r& (0+255),b
 20552  001EBE  D006               	goto	l16111
 20553                           
 20554                           ; BSR set to: 0
 20555  001EC0  C062  FFD9         	movff	strnicmp@s1,fsr2l
 20556  001EC4  C063  FFDA         	movff	strnicmp@s1+1,fsr2h
 20557  001EC8  50DF               	movf	indf2,w,c
 20558  001ECA  E106               	bnz	l16115
 20559  001ECC                     l16111:
 20560                           
 20561                           ; BSR set to: 0
 20562  001ECC  516A               	movf	strnicmp@r& (0+255),w,b
 20563  001ECE  6F62               	movwf	?_strnicmp& (0+255),b
 20564  001ED0  6B63               	clrf	(?_strnicmp+1)& (0+255),b
 20565  001ED2  BF62               	btfsc	?_strnicmp& (0+255),7,b
 20566  001ED4  0763               	decf	(?_strnicmp+1)& (0+255),f,b
 20567  001ED6  D00E               	goto	l2544
 20568  001ED8                     l16115:
 20569                           
 20570                           ; BSR set to: 0
 20571  001ED8  4B62               	infsnz	strnicmp@s1& (0+255),f,b
 20572  001EDA  2B63               	incf	(strnicmp@s1+1)& (0+255),f,b
 20573  001EDC  4B64               	infsnz	strnicmp@s2& (0+255),f,b
 20574  001EDE  2B65               	incf	(strnicmp@s2+1)& (0+255),f,b
 20575  001EE0                     l16117:
 20576                           
 20577                           ; BSR set to: 0
 20578  001EE0  0766               	decf	strnicmp@len& (0+255),f,b
 20579  001EE2  A0D8               	btfss	status,0,c
 20580  001EE4  0767               	decf	(strnicmp@len+1)& (0+255),f,b
 20581  001EE6  0100               	movlb	0	; () banked
 20582  001EE8  2966               	incf	strnicmp@len& (0+255),w,b
 20583  001EEA  B4D8               	btfsc	status,2,c
 20584  001EEC  2967               	incf	(strnicmp@len+1)& (0+255),w,b
 20585  001EEE  E1D1               	bnz	l16107
 20586                           
 20587                           ; BSR set to: 0
 20588  001EF0  6B62               	clrf	?_strnicmp& (0+255),b
 20589  001EF2  6B63               	clrf	(?_strnicmp+1)& (0+255),b
 20590  001EF4                     l2544:
 20591                           
 20592                           ; BSR set to: 0
 20593  001EF4  0012               	return	
 20594  001EF6                     __end_of_strnicmp:
 20595                           	opt stack 0
 20596                           tblptru	equ	0xFF8
 20597                           tblptrh	equ	0xFF7
 20598                           tblptrl	equ	0xFF6
 20599                           tablat	equ	0xFF5
 20600                           prodh	equ	0xFF4
 20601                           prodl	equ	0xFF3
 20602                           intcon	equ	0xFF2
 20603                           indf0	equ	0xFEF
 20604                           postinc0	equ	0xFEE
 20605                           fsr0h	equ	0xFEA
 20606                           fsr0l	equ	0xFE9
 20607                           wreg	equ	0xFE8
 20608                           indf1	equ	0xFE7
 20609                           postinc1	equ	0xFE6
 20610                           postdec1	equ	0xFE5
 20611                           fsr1h	equ	0xFE2
 20612                           fsr1l	equ	0xFE1
 20613                           indf2	equ	0xFDF
 20614                           postinc2	equ	0xFDE
 20615                           postdec2	equ	0xFDD
 20616                           plusw2	equ	0xFDB
 20617                           fsr2h	equ	0xFDA
 20618                           fsr2l	equ	0xFD9
 20619                           status	equ	0xFD8
 20620                           
 20621 ;; *************** function _toupper *****************
 20622 ;; Defined at:
 20623 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20624 ;; Parameters:    Size  Location     Type
 20625 ;;  c               1    wreg     unsigned char 
 20626 ;; Auto vars:     Size  Location     Type
 20627 ;;  c               1   32[COMRAM] unsigned char 
 20628 ;; Return value:  Size  Location     Type
 20629 ;;                  1    wreg      unsigned char 
 20630 ;; Registers used:
 20631 ;;		wreg, status,2, status,0
 20632 ;; Tracked objects:
 20633 ;;		On entry : F/0
 20634 ;;		On exit  : F/0
 20635 ;;		Unchanged: F/0
 20636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20637 ;;      Params:         0       0       0       0       0       0       0
 20638 ;;      Locals:         1       0       0       0       0       0       0
 20639 ;;      Temps:          0       0       0       0       0       0       0
 20640 ;;      Totals:         1       0       0       0       0       0       0
 20641 ;;Total ram usage:        1 bytes
 20642 ;; Hardware stack levels used:    1
 20643 ;; Hardware stack levels required when called:    3
 20644 ;; This function calls:
 20645 ;;		Nothing
 20646 ;; This function is called by:
 20647 ;;		_strnicmp
 20648 ;;		_strichr
 20649 ;; This function uses a non-reentrant model
 20650 ;;
 20651                           
 20652                           	psect	text50
 20653  0016AA                     __ptext50:
 20654                           	opt stack 0
 20655  0016AA                     _toupper:
 20656                           	opt stack 23
 20657                           
 20658                           ; BSR set to: 0
 20659                           ;incstack = 0
 20660                           ;incstack = 0
 20661                           ;toupper@c stored from wreg
 20662  0016AA  CFE8 F021          	movff	wreg,toupper@c
 20663                           
 20664                           ; BSR set to: 0
 20665  0016AE  0E7B               	movlw	123
 20666  0016B0  6021               	cpfslt	toupper@c,c
 20667  0016B2  D004               	goto	l16135
 20668                           
 20669                           ; BSR set to: 0
 20670  0016B4  0E60               	movlw	96
 20671  0016B6  6421               	cpfsgt	toupper@c,c
 20672  0016B8  D001               	goto	l16135
 20673                           
 20674                           ; BSR set to: 0
 20675  0016BA  9A21               	bcf	toupper@c,5,c
 20676  0016BC                     l16135:
 20677                           
 20678                           ; BSR set to: 0
 20679  0016BC  5021               	movf	toupper@c,w,c
 20680                           
 20681                           ; BSR set to: 0
 20682  0016BE  0012               	return	
 20683  0016C0                     __end_of_toupper:
 20684                           	opt stack 0
 20685                           tblptru	equ	0xFF8
 20686                           tblptrh	equ	0xFF7
 20687                           tblptrl	equ	0xFF6
 20688                           tablat	equ	0xFF5
 20689                           prodh	equ	0xFF4
 20690                           prodl	equ	0xFF3
 20691                           intcon	equ	0xFF2
 20692                           indf0	equ	0xFEF
 20693                           postinc0	equ	0xFEE
 20694                           fsr0h	equ	0xFEA
 20695                           fsr0l	equ	0xFE9
 20696                           wreg	equ	0xFE8
 20697                           indf1	equ	0xFE7
 20698                           postinc1	equ	0xFE6
 20699                           postdec1	equ	0xFE5
 20700                           fsr1h	equ	0xFE2
 20701                           fsr1l	equ	0xFE1
 20702                           indf2	equ	0xFDF
 20703                           postinc2	equ	0xFDE
 20704                           postdec2	equ	0xFDD
 20705                           plusw2	equ	0xFDB
 20706                           fsr2h	equ	0xFDA
 20707                           fsr2l	equ	0xFD9
 20708                           status	equ	0xFD8
 20709                           
 20710 ;; *************** function _strlen *****************
 20711 ;; Defined at:
 20712 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20713 ;; Parameters:    Size  Location     Type
 20714 ;;  s               2   32[COMRAM] PTR const unsigned char 
 20715 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20716 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20717 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20718 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20719 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20720 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20721 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20722 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20723 ;;		 -> cmdbuf(80), 
 20724 ;; Auto vars:     Size  Location     Type
 20725 ;;  cp              2    0[BANK0 ] PTR const unsigned char 
 20726 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20727 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20728 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20729 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20730 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20731 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20732 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20733 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20734 ;;		 -> cmdbuf(80), 
 20735 ;; Return value:  Size  Location     Type
 20736 ;;                  2   32[COMRAM] unsigned int 
 20737 ;; Registers used:
 20738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20739 ;; Tracked objects:
 20740 ;;		On entry : E/1
 20741 ;;		On exit  : F/0
 20742 ;;		Unchanged: 0/0
 20743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20744 ;;      Params:         2       0       0       0       0       0       0
 20745 ;;      Locals:         0       2       0       0       0       0       0
 20746 ;;      Temps:          0       0       0       0       0       0       0
 20747 ;;      Totals:         2       2       0       0       0       0       0
 20748 ;;Total ram usage:        4 bytes
 20749 ;; Hardware stack levels used:    1
 20750 ;; Hardware stack levels required when called:    3
 20751 ;; This function calls:
 20752 ;;		Nothing
 20753 ;; This function is called by:
 20754 ;;		_doModeSLCAN
 20755 ;;		_receiveSendEventSLCAN
 20756 ;;		_printGUID
 20757 ;;		_hexStringToBytes
 20758 ;;		_stristr
 20759 ;; This function uses a non-reentrant model
 20760 ;;
 20761                           
 20762                           	psect	text51
 20763  0019C8                     __ptext51:
 20764                           	opt stack 0
 20765  0019C8                     _strlen:
 20766                           	opt stack 24
 20767                           
 20768                           ; BSR set to: 0
 20769                           ;incstack = 0
 20770                           ;incstack = 0
 20771  0019C8  C021  F060         	movff	strlen@s,strlen@cp
 20772  0019CC  C022  F061         	movff	strlen@s+1,strlen@cp+1
 20773  0019D0  D003               	goto	l12687
 20774  0019D2                     l12685:
 20775  0019D2  0100               	movlb	0	; () banked
 20776  0019D4  4B60               	infsnz	strlen@cp& (0+255),f,b
 20777  0019D6  2B61               	incf	(strlen@cp+1)& (0+255),f,b
 20778  0019D8                     l12687:
 20779  0019D8  0100               	movlb	0	; () banked
 20780  0019DA  5160               	movf	strlen@cp& (0+255),w,b
 20781  0019DC  6EF6               	movwf	tblptrl,c
 20782  0019DE  6EE9               	movwf	fsr0l,c
 20783  0019E0  0E05               	movlw	(high __ramtop+-1)
 20784  0019E2  6EEA               	movwf	fsr0h,c
 20785  0019E4  5161               	movf	(strlen@cp+1)& (0+255),w,b
 20786  0019E6  64EA               	cpfsgt	fsr0h,c
 20787  0019E8  D003               	bra	u16527
 20788  0019EA  6EEA               	movwf	fsr0h,c
 20789  0019EC  50EF               	movf	indf0,w,c
 20790  0019EE  D003               	bra	u16520
 20791  0019F0                     u16527:
 20792  0019F0  6EF7               	movwf	tblptrh,c
 20793  0019F2  0008               	tblrd		*
 20794  0019F4  50F5               	movf	tablat,w,c
 20795  0019F6                     u16520:
 20796  0019F6  0900               	iorlw	0
 20797  0019F8  E1EC               	bnz	l12685
 20798  0019FA  5021               	movf	strlen@s,w,c
 20799  0019FC  0100               	movlb	0	; () banked
 20800  0019FE  5D60               	subwf	strlen@cp& (0+255),w,b
 20801  001A00  6E21               	movwf	?_strlen,c
 20802  001A02  5022               	movf	strlen@s+1,w,c
 20803  001A04  5961               	subwfb	(strlen@cp+1)& (0+255),w,b
 20804  001A06  6E22               	movwf	?_strlen+1,c
 20805                           
 20806                           ; BSR set to: 0
 20807  001A08  0012               	return	
 20808  001A0A                     __end_of_strlen:
 20809                           	opt stack 0
 20810                           tblptru	equ	0xFF8
 20811                           tblptrh	equ	0xFF7
 20812                           tblptrl	equ	0xFF6
 20813                           tablat	equ	0xFF5
 20814                           prodh	equ	0xFF4
 20815                           prodl	equ	0xFF3
 20816                           intcon	equ	0xFF2
 20817                           indf0	equ	0xFEF
 20818                           postinc0	equ	0xFEE
 20819                           fsr0h	equ	0xFEA
 20820                           fsr0l	equ	0xFE9
 20821                           wreg	equ	0xFE8
 20822                           indf1	equ	0xFE7
 20823                           postinc1	equ	0xFE6
 20824                           postdec1	equ	0xFE5
 20825                           fsr1h	equ	0xFE2
 20826                           fsr1l	equ	0xFE1
 20827                           indf2	equ	0xFDF
 20828                           postinc2	equ	0xFDE
 20829                           postdec2	equ	0xFDD
 20830                           plusw2	equ	0xFDB
 20831                           fsr2h	equ	0xFDA
 20832                           fsr2l	equ	0xFD9
 20833                           status	equ	0xFD8
 20834                           
 20835 ;; *************** function _receivePrintEventVerbose *****************
 20836 ;; Defined at:
 20837 ;;		line 1789 in file "main.c"
 20838 ;; Parameters:    Size  Location     Type
 20839 ;;		None
 20840 ;; Auto vars:     Size  Location     Type
 20841 ;;  i               1   68[BANK0 ] unsigned char 
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  1    wreg      enum E15660
 20844 ;; Registers used:
 20845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20846 ;; Tracked objects:
 20847 ;;		On entry : F/0
 20848 ;;		On exit  : 0/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20851 ;;      Params:         0       0       0       0       0       0       0
 20852 ;;      Locals:         0      13       0       0       0       0       0
 20853 ;;      Temps:          0       5       0       0       0       0       0
 20854 ;;      Totals:         0      18       0       0       0       0       0
 20855 ;;Total ram usage:       18 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:    6
 20858 ;; This function calls:
 20859 ;;		_putsUSART
 20860 ;;		_sprintf
 20861 ;;		_getVSCPFrame
 20862 ;; This function is called by:
 20863 ;;		_doModeVerbose
 20864 ;; This function uses a non-reentrant model
 20865 ;;
 20866                           
 20867                           	psect	text52
 20868  004830                     __ptext52:
 20869                           	opt stack 0
 20870  004830                     _receivePrintEventVerbose:
 20871                           	opt stack 22
 20872                           
 20873                           ; BSR set to: 0
 20874                           ;main.c: 1790: uint8_t i;
 20875                           ;main.c: 1792: if (getVSCPFrame(&vscpClass,
 20876                           ;main.c: 1793: &vscpType,
 20877                           ;main.c: 1794: &vscpNodeId,
 20878                           ;main.c: 1795: &vscpPriority,
 20879                           ;main.c: 1796: &vscpSize,
 20880                           ;main.c: 1797: vscpData)) {
 20881                           
 20882                           ; BSR set to: 0
 20883                           ;incstack = 0
 20884                           ;incstack = 0
 20885  004830  0EEC               	movlw	low _vscpType
 20886  004832  6F71               	movwf	?_getVSCPFrame& (0+255),b
 20887  004834  0EE9               	movlw	low _vscpNodeId
 20888  004836  6F72               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20889  004838  0EEA               	movlw	low _vscpPriority
 20890  00483A  6F73               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20891  00483C  0EEB               	movlw	low _vscpSize
 20892  00483E  6F74               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20893  004840  0E01               	movlw	high _vscpData
 20894  004842  0100               	movlb	0	; () banked
 20895  004844  6F76               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20896  004846  0EDC               	movlw	low _vscpData
 20897  004848  6F75               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20898  00484A  0E3B               	movlw	_vscpClass& (0+255)
 20899  00484C  EC9D  F010         	call	_getVSCPFrame
 20900  004850  0900               	iorlw	0
 20901  004852  E101 D131          	bz	l14623
 20902                           
 20903                           ; BSR set to: 0
 20904                           ;main.c: 1800: cntRxFrames++;
 20905  004856  0101               	movlb	1	; () banked
 20906  004858  2B0C               	incf	_cntRxFrames& (0+255),f,b
 20907  00485A  0E00               	movlw	0
 20908  00485C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20909  00485E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20910  004860  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20911                           
 20912                           ;main.c: 1801: cntRxBytes += vscpSize;
 20913  004862  0100               	movlb	0	; () banked
 20914  004864  51EB               	movf	_vscpSize& (0+255),w,b
 20915  004866  0101               	movlb	1	; () banked
 20916  004868  2708               	addwf	_cntRxBytes& (0+255),f,b
 20917  00486A  0E00               	movlw	0
 20918  00486C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20919  00486E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20920  004870  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20921                           
 20922                           ; BSR set to: 1
 20923                           ;main.c: 1803: putsUSART((char *) "<Prio=");
 20924  004872  0E7C               	movlw	high STR_139
 20925  004874  0100               	movlb	0	; () banked
 20926  004876  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 20927  004878  0E42               	movlw	low STR_139
 20928  00487A  6F60               	movwf	?_putsUSART& (0+255),b
 20929  00487C  ECFF  F00D         	call	_putsUSART	;wreg free
 20930                           
 20931                           ;main.c: 1804: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20932  004880  0100               	movlb	0	; () banked
 20933  004882  67E3               	tstfsz	_bHex& (0+255),b
 20934  004884  D004               	goto	l14541
 20935                           
 20936                           ; BSR set to: 0
 20937  004886  0E7C               	movlw	high STR_57
 20938  004888  6F99               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20939  00488A  0EEE               	movlw	low STR_57
 20940  00488C  D003               	goto	L28
 20941  00488E                     l14541:
 20942                           
 20943                           ; BSR set to: 0
 20944  00488E  0E7C               	movlw	high STR_56
 20945  004890  6F99               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20946  004892  0E65               	movlw	low STR_56
 20947  004894                     L28:
 20948  004894  6F98               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 20949                           
 20950                           ; BSR set to: 0
 20951  004896  0E01               	movlw	high _wrkbuf
 20952  004898  0100               	movlb	0	; () banked
 20953  00489A  6F76               	movwf	(?_sprintf+1)& (0+255),b
 20954  00489C  0E74               	movlw	low _wrkbuf
 20955  00489E  6F75               	movwf	?_sprintf& (0+255),b
 20956  0048A0  C098  F077         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 20957  0048A4  C099  F078         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 20958  0048A8  C0EA  F079         	movff	_vscpPriority,?_sprintf+4
 20959  0048AC  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 20960  0048AE  ECA3  F028         	call	_sprintf	;wreg free
 20961                           
 20962                           ; BSR set to: 0
 20963                           ;main.c: 1805: putsUSART(wrkbuf);
 20964  0048B2  0E01               	movlw	high _wrkbuf
 20965  0048B4  0100               	movlb	0	; () banked
 20966  0048B6  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 20967  0048B8  0E74               	movlw	low _wrkbuf
 20968  0048BA  6F60               	movwf	?_putsUSART& (0+255),b
 20969  0048BC  ECFF  F00D         	call	_putsUSART	;wreg free
 20970                           
 20971                           ;main.c: 1806: putsUSART((char *) ",class=");
 20972  0048C0  0E7B               	movlw	high STR_142
 20973  0048C2  0100               	movlb	0	; () banked
 20974  0048C4  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 20975  0048C6  0EF6               	movlw	low STR_142
 20976  0048C8  6F60               	movwf	?_putsUSART& (0+255),b
 20977  0048CA  ECFF  F00D         	call	_putsUSART	;wreg free
 20978                           
 20979                           ;main.c: 1807: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20980  0048CE  0100               	movlb	0	; () banked
 20981  0048D0  67E3               	tstfsz	_bHex& (0+255),b
 20982  0048D2  D004               	goto	l14553
 20983                           
 20984                           ; BSR set to: 0
 20985  0048D4  0E7C               	movlw	high STR_57
 20986  0048D6  6F9B               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20987  0048D8  0EEE               	movlw	low STR_57
 20988  0048DA  D003               	goto	L29
 20989  0048DC                     l14553:
 20990                           
 20991                           ; BSR set to: 0
 20992  0048DC  0E7C               	movlw	high STR_143
 20993  0048DE  6F9B               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20994  0048E0  0E6C               	movlw	low STR_143
 20995  0048E2                     L29:
 20996  0048E2  6F9A               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 20997                           
 20998                           ; BSR set to: 0
 20999  0048E4  0E01               	movlw	high _wrkbuf
 21000  0048E6  0100               	movlb	0	; () banked
 21001  0048E8  6F76               	movwf	(?_sprintf+1)& (0+255),b
 21002  0048EA  0E74               	movlw	low _wrkbuf
 21003  0048EC  6F75               	movwf	?_sprintf& (0+255),b
 21004  0048EE  C09A  F077         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 21005  0048F2  C09B  F078         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 21006  0048F6  C03B  F079         	movff	_vscpClass,?_sprintf+4
 21007  0048FA  C03C  F07A         	movff	_vscpClass+1,?_sprintf+5
 21008  0048FE  ECA3  F028         	call	_sprintf	;wreg free
 21009                           
 21010                           ; BSR set to: 0
 21011                           ;main.c: 1808: putsUSART(wrkbuf);
 21012  004902  0E01               	movlw	high _wrkbuf
 21013  004904  0100               	movlb	0	; () banked
 21014  004906  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21015  004908  0E74               	movlw	low _wrkbuf
 21016  00490A  6F60               	movwf	?_putsUSART& (0+255),b
 21017  00490C  ECFF  F00D         	call	_putsUSART	;wreg free
 21018                           
 21019                           ;main.c: 1809: putsUSART((char *) ",type=");
 21020  004910  0E7C               	movlw	high STR_145
 21021  004912  0100               	movlb	0	; () banked
 21022  004914  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21023  004916  0E34               	movlw	low STR_145
 21024  004918  6F60               	movwf	?_putsUSART& (0+255),b
 21025  00491A  ECFF  F00D         	call	_putsUSART	;wreg free
 21026                           
 21027                           ;main.c: 1810: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21028  00491E  0100               	movlb	0	; () banked
 21029  004920  67E3               	tstfsz	_bHex& (0+255),b
 21030  004922  D004               	goto	l14565
 21031                           
 21032                           ; BSR set to: 0
 21033  004924  0E7C               	movlw	high STR_57
 21034  004926  6F9D               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21035  004928  0EEE               	movlw	low STR_57
 21036  00492A  D003               	goto	L30
 21037  00492C                     l14565:
 21038                           
 21039                           ; BSR set to: 0
 21040  00492C  0E7C               	movlw	high STR_56
 21041  00492E  6F9D               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21042  004930  0E65               	movlw	low STR_56
 21043  004932                     L30:
 21044  004932  6F9C               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 21045                           
 21046                           ; BSR set to: 0
 21047  004934  0E01               	movlw	high _wrkbuf
 21048  004936  0100               	movlb	0	; () banked
 21049  004938  6F76               	movwf	(?_sprintf+1)& (0+255),b
 21050  00493A  0E74               	movlw	low _wrkbuf
 21051  00493C  6F75               	movwf	?_sprintf& (0+255),b
 21052  00493E  C09C  F077         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 21053  004942  C09D  F078         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 21054  004946  C0EC  F079         	movff	_vscpType,?_sprintf+4
 21055  00494A  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 21056  00494C  ECA3  F028         	call	_sprintf	;wreg free
 21057                           
 21058                           ; BSR set to: 0
 21059                           ;main.c: 1811: putsUSART(wrkbuf);
 21060  004950  0E01               	movlw	high _wrkbuf
 21061  004952  0100               	movlb	0	; () banked
 21062  004954  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21063  004956  0E74               	movlw	low _wrkbuf
 21064  004958  6F60               	movwf	?_putsUSART& (0+255),b
 21065  00495A  ECFF  F00D         	call	_putsUSART	;wreg free
 21066                           
 21067                           ;main.c: 1812: putsUSART((char *) ",nodeid=");
 21068  00495E  0E7B               	movlw	high STR_148
 21069  004960  0100               	movlb	0	; () banked
 21070  004962  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21071  004964  0EC4               	movlw	low STR_148
 21072  004966  6F60               	movwf	?_putsUSART& (0+255),b
 21073  004968  ECFF  F00D         	call	_putsUSART	;wreg free
 21074                           
 21075                           ;main.c: 1813: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21076  00496C  0100               	movlb	0	; () banked
 21077  00496E  67E3               	tstfsz	_bHex& (0+255),b
 21078  004970  D004               	goto	l14577
 21079                           
 21080                           ; BSR set to: 0
 21081  004972  0E7C               	movlw	high STR_57
 21082  004974  6F9F               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21083  004976  0EEE               	movlw	low STR_57
 21084  004978  D003               	goto	L31
 21085  00497A                     l14577:
 21086                           
 21087                           ; BSR set to: 0
 21088  00497A  0E7C               	movlw	high STR_56
 21089  00497C  6F9F               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21090  00497E  0E65               	movlw	low STR_56
 21091  004980                     L31:
 21092  004980  6F9E               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 21093                           
 21094                           ; BSR set to: 0
 21095  004982  0E01               	movlw	high _wrkbuf
 21096  004984  0100               	movlb	0	; () banked
 21097  004986  6F76               	movwf	(?_sprintf+1)& (0+255),b
 21098  004988  0E74               	movlw	low _wrkbuf
 21099  00498A  6F75               	movwf	?_sprintf& (0+255),b
 21100  00498C  C09E  F077         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 21101  004990  C09F  F078         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 21102  004994  C0E9  F079         	movff	_vscpNodeId,?_sprintf+4
 21103  004998  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 21104  00499A  ECA3  F028         	call	_sprintf	;wreg free
 21105                           
 21106                           ; BSR set to: 0
 21107                           ;main.c: 1814: putsUSART(wrkbuf);
 21108  00499E  0E01               	movlw	high _wrkbuf
 21109  0049A0  0100               	movlb	0	; () banked
 21110  0049A2  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21111  0049A4  0E74               	movlw	low _wrkbuf
 21112  0049A6  6F60               	movwf	?_putsUSART& (0+255),b
 21113  0049A8  ECFF  F00D         	call	_putsUSART	;wreg free
 21114                           
 21115                           ;main.c: 1815: putsUSART((char *) ",size=");
 21116  0049AC  0E7C               	movlw	high STR_151
 21117  0049AE  0100               	movlb	0	; () banked
 21118  0049B0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21119  0049B2  0E3B               	movlw	low STR_151
 21120  0049B4  6F60               	movwf	?_putsUSART& (0+255),b
 21121  0049B6  ECFF  F00D         	call	_putsUSART	;wreg free
 21122                           
 21123                           ;main.c: 1816: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21124  0049BA  0100               	movlb	0	; () banked
 21125  0049BC  67E3               	tstfsz	_bHex& (0+255),b
 21126  0049BE  D004               	goto	l14589
 21127                           
 21128                           ; BSR set to: 0
 21129  0049C0  0E7C               	movlw	high STR_57
 21130  0049C2  6FA1               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21131  0049C4  0EEE               	movlw	low STR_57
 21132  0049C6  D003               	goto	L32
 21133  0049C8                     l14589:
 21134                           
 21135                           ; BSR set to: 0
 21136  0049C8  0E7C               	movlw	high STR_56
 21137  0049CA  6FA1               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21138  0049CC  0E65               	movlw	low STR_56
 21139  0049CE                     L32:
 21140  0049CE  6FA0               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 21141                           
 21142                           ; BSR set to: 0
 21143  0049D0  0E01               	movlw	high _wrkbuf
 21144  0049D2  0100               	movlb	0	; () banked
 21145  0049D4  6F76               	movwf	(?_sprintf+1)& (0+255),b
 21146  0049D6  0E74               	movlw	low _wrkbuf
 21147  0049D8  6F75               	movwf	?_sprintf& (0+255),b
 21148  0049DA  C0A0  F077         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 21149  0049DE  C0A1  F078         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 21150  0049E2  C0EB  F079         	movff	_vscpSize,?_sprintf+4
 21151  0049E6  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 21152  0049E8  ECA3  F028         	call	_sprintf	;wreg free
 21153                           
 21154                           ; BSR set to: 0
 21155                           ;main.c: 1817: putsUSART(wrkbuf);
 21156  0049EC  0E01               	movlw	high _wrkbuf
 21157  0049EE  0100               	movlb	0	; () banked
 21158  0049F0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21159  0049F2  0E74               	movlw	low _wrkbuf
 21160  0049F4  6F60               	movwf	?_putsUSART& (0+255),b
 21161  0049F6  ECFF  F00D         	call	_putsUSART	;wreg free
 21162                           
 21163                           ;main.c: 1818: if (vscpSize > 0) {
 21164  0049FA  0100               	movlb	0	; () banked
 21165  0049FC  51EB               	movf	_vscpSize& (0+255),w,b
 21166  0049FE  E04D               	bz	l14617
 21167                           
 21168                           ; BSR set to: 0
 21169                           ;main.c: 1819: putsUSART((char *) ",Data=");
 21170  004A00  0E7C               	movlw	high STR_154
 21171  004A02  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21172  004A04  0E2D               	movlw	low STR_154
 21173  004A06  6F60               	movwf	?_putsUSART& (0+255),b
 21174  004A08  ECFF  F00D         	call	_putsUSART	;wreg free
 21175                           
 21176                           ;main.c: 1820: for (i = 0; i < vscpSize; i++) {
 21177  004A0C  0100               	movlb	0	; () banked
 21178  004A0E  6BA4               	clrf	receivePrintEventVerbose@i& (0+255),b
 21179  004A10  D040               	goto	l14615
 21180  004A12                     l929:
 21181                           
 21182                           ; BSR set to: 0
 21183                           ;main.c: 1822: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21184  004A12  67E3               	tstfsz	_bHex& (0+255),b
 21185  004A14  D004               	goto	l14603
 21186                           
 21187                           ; BSR set to: 0
 21188  004A16  0E7C               	movlw	high STR_57
 21189  004A18  6FA3               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 21190  004A1A  0EEE               	movlw	low STR_57
 21191  004A1C  D003               	goto	L33
 21192  004A1E                     l14603:
 21193                           
 21194                           ; BSR set to: 0
 21195  004A1E  0E7C               	movlw	high STR_56
 21196  004A20  6FA3               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 21197  004A22  0E65               	movlw	low STR_56
 21198  004A24                     L33:
 21199  004A24  6FA2               	movwf	_receivePrintEventVerbose$1303& (0+255),b
 21200                           
 21201                           ; BSR set to: 0
 21202  004A26  0E01               	movlw	high _wrkbuf
 21203  004A28  0100               	movlb	0	; () banked
 21204  004A2A  6F76               	movwf	(?_sprintf+1)& (0+255),b
 21205  004A2C  0E74               	movlw	low _wrkbuf
 21206  004A2E  6F75               	movwf	?_sprintf& (0+255),b
 21207  004A30  C0A2  F077         	movff	_receivePrintEventVerbose$1303,?_sprintf+2
 21208  004A34  C0A3  F078         	movff	_receivePrintEventVerbose$1303+1,?_sprintf+3
 21209  004A38  0EDC               	movlw	low _vscpData
 21210  004A3A  25A4               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21211  004A3C  6ED9               	movwf	fsr2l,c
 21212  004A3E  6ADA               	clrf	fsr2h,c
 21213  004A40  0E01               	movlw	high _vscpData
 21214  004A42  22DA               	addwfc	fsr2h,f,c
 21215  004A44  50DF               	movf	indf2,w,c
 21216  004A46  6F79               	movwf	(?_sprintf+4)& (0+255),b
 21217  004A48  6B7A               	clrf	(?_sprintf+5)& (0+255),b
 21218  004A4A  ECA3  F028         	call	_sprintf	;wreg free
 21219                           
 21220                           ; BSR set to: 0
 21221                           ;main.c: 1823: putsUSART(wrkbuf);
 21222  004A4E  0E01               	movlw	high _wrkbuf
 21223  004A50  0100               	movlb	0	; () banked
 21224  004A52  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21225  004A54  0E74               	movlw	low _wrkbuf
 21226  004A56  6F60               	movwf	?_putsUSART& (0+255),b
 21227  004A58  ECFF  F00D         	call	_putsUSART	;wreg free
 21228                           
 21229                           ;main.c: 1824: if (i < (vscpSize - 1)) {
 21230  004A5C  0EFF               	movlw	255
 21231  004A5E  0100               	movlb	0	; () banked
 21232  004A60  25EB               	addwf	_vscpSize& (0+255),w,b
 21233  004A62  6F93               	movwf	??_receivePrintEventVerbose& (0+255),b
 21234  004A64  6B94               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21235  004A66  0EFF               	movlw	255
 21236  004A68  2394               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21237  004A6A  51A4               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21238  004A6C  6F95               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21239  004A6E  6B96               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21240  004A70  5196               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21241  004A72  0A80               	xorlw	128
 21242  004A74  6F97               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21243  004A76  5193               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21244  004A78  5D95               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21245  004A7A  5194               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21246  004A7C  0A80               	xorlw	128
 21247  004A7E  5997               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21248  004A80  E206               	bc	l14613
 21249                           
 21250                           ; BSR set to: 0
 21251                           ;main.c: 1825: putsUSART((char *) ",");
 21252  004A82  0E7C               	movlw	high STR_30
 21253  004A84  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21254  004A86  0EF5               	movlw	low STR_30
 21255  004A88  6F60               	movwf	?_putsUSART& (0+255),b
 21256  004A8A  ECFF  F00D         	call	_putsUSART	;wreg free
 21257  004A8E                     l14613:
 21258  004A8E  0100               	movlb	0	; () banked
 21259  004A90  2BA4               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21260  004A92                     l14615:
 21261                           
 21262                           ; BSR set to: 0
 21263  004A92  51EB               	movf	_vscpSize& (0+255),w,b
 21264  004A94  5DA4               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21265  004A96  E207               	bc	l936
 21266  004A98  D7BC               	goto	l929
 21267  004A9A                     l14617:
 21268                           
 21269                           ; BSR set to: 0
 21270                           ;main.c: 1829: putsUSART((char *) ",Data=none");
 21271  004A9A  0E7B               	movlw	high STR_158
 21272  004A9C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21273  004A9E  0E92               	movlw	low STR_158
 21274  004AA0  6F60               	movwf	?_putsUSART& (0+255),b
 21275  004AA2  ECFF  F00D         	call	_putsUSART	;wreg free
 21276  004AA6                     l936:
 21277                           
 21278                           ;main.c: 1830: }
 21279                           ;main.c: 1831: putsUSART((char *) ">\r\n");
 21280  004AA6  0E7C               	movlw	high STR_159
 21281  004AA8  0100               	movlb	0	; () banked
 21282  004AAA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 21283  004AAC  0ED5               	movlw	low STR_159
 21284  004AAE  6F60               	movwf	?_putsUSART& (0+255),b
 21285  004AB0  ECFF  F00D         	call	_putsUSART	;wreg free
 21286                           
 21287                           ;main.c: 1832: return 1;
 21288  004AB4  0E01               	movlw	1
 21289  004AB6  D001               	goto	l937
 21290  004AB8                     l14623:
 21291                           
 21292                           ; BSR set to: 0
 21293                           ;main.c: 1833: }
 21294                           ;main.c: 1835: return 0;
 21295  004AB8  0E00               	movlw	0
 21296  004ABA                     l937:
 21297  004ABA  0012               	return	
 21298  004ABC                     __end_of_receivePrintEventVerbose:
 21299                           	opt stack 0
 21300                           tblptru	equ	0xFF8
 21301                           tblptrh	equ	0xFF7
 21302                           tblptrl	equ	0xFF6
 21303                           tablat	equ	0xFF5
 21304                           prodh	equ	0xFF4
 21305                           prodl	equ	0xFF3
 21306                           intcon	equ	0xFF2
 21307                           indf0	equ	0xFEF
 21308                           postinc0	equ	0xFEE
 21309                           fsr0h	equ	0xFEA
 21310                           fsr0l	equ	0xFE9
 21311                           wreg	equ	0xFE8
 21312                           indf1	equ	0xFE7
 21313                           postinc1	equ	0xFE6
 21314                           postdec1	equ	0xFE5
 21315                           fsr1h	equ	0xFE2
 21316                           fsr1l	equ	0xFE1
 21317                           indf2	equ	0xFDF
 21318                           postinc2	equ	0xFDE
 21319                           postdec2	equ	0xFDD
 21320                           plusw2	equ	0xFDB
 21321                           fsr2h	equ	0xFDA
 21322                           fsr2l	equ	0xFD9
 21323                           status	equ	0xFD8
 21324                           
 21325 ;; *************** function _getVSCPFrame *****************
 21326 ;; Defined at:
 21327 ;;		line 2997 in file "main.c"
 21328 ;; Parameters:    Size  Location     Type
 21329 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21330 ;;		 -> vscpClass(2), 
 21331 ;;  pvscptype       1   17[BANK0 ] PTR unsigned char 
 21332 ;;		 -> vscpType(1), 
 21333 ;;  pNodeId         1   18[BANK0 ] PTR unsigned char 
 21334 ;;		 -> vscpNodeId(1), 
 21335 ;;  pPriority       1   19[BANK0 ] PTR unsigned char 
 21336 ;;		 -> vscpPriority(1), 
 21337 ;;  pSize           1   20[BANK0 ] PTR unsigned char 
 21338 ;;		 -> vscpSize(1), 
 21339 ;;  pData           2   21[BANK0 ] PTR unsigned char 
 21340 ;;		 -> vscpData(8), 
 21341 ;; Auto vars:     Size  Location     Type
 21342 ;;  pvscpclass      1   27[BANK0 ] PTR unsigned short 
 21343 ;;		 -> vscpClass(2), 
 21344 ;;  id              4   28[BANK0 ] unsigned long 
 21345 ;; Return value:  Size  Location     Type
 21346 ;;                  1    wreg      unsigned char 
 21347 ;; Registers used:
 21348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21349 ;; Tracked objects:
 21350 ;;		On entry : F/0
 21351 ;;		On exit  : F/0
 21352 ;;		Unchanged: 0/0
 21353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21354 ;;      Params:         0       6       0       0       0       0       0
 21355 ;;      Locals:         0       5       0       0       0       0       0
 21356 ;;      Temps:          0       4       0       0       0       0       0
 21357 ;;      Totals:         0      15       0       0       0       0       0
 21358 ;;Total ram usage:       15 bytes
 21359 ;; Hardware stack levels used:    1
 21360 ;; Hardware stack levels required when called:    5
 21361 ;; This function calls:
 21362 ;;		_getCANFrame
 21363 ;; This function is called by:
 21364 ;;		_receivePrintEventVerbose
 21365 ;;		_readRegister
 21366 ;;		_readRegisterExtended
 21367 ;;		_writeRegisterExtended
 21368 ;; This function uses a non-reentrant model
 21369 ;;
 21370                           
 21371                           	psect	text53
 21372  00213A                     __ptext53:
 21373                           	opt stack 0
 21374  00213A                     _getVSCPFrame:
 21375                           	opt stack 21
 21376                           
 21377                           ;incstack = 0
 21378                           ;incstack = 0
 21379                           ;getVSCPFrame@pvscpclass stored from wreg
 21380  00213A  CFE8 F07B          	movff	wreg,getVSCPFrame@pvscpclass
 21381                           
 21382                           ; BSR set to: 0
 21383                           ;main.c: 2998: uint32_t id;
 21384                           ;main.c: 3000: if (!getCANFrame(&id, pSize, pData)) {
 21385  00213E  C074  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21386  002142  C075  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+1
 21387  002146  C076  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+2
 21388  00214A  0E7C               	movlw	getVSCPFrame@id& (0+255)
 21389  00214C  EC43  F012         	call	_getCANFrame
 21390  002150  0900               	iorlw	0
 21391  002152  E102               	bnz	l15869
 21392                           
 21393                           ; BSR set to: 0
 21394                           ;main.c: 3001: return 0;
 21395  002154  0E00               	movlw	0
 21396  002156  D02F               	goto	l1278
 21397  002158                     l15869:
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;main.c: 3002: }
 21401                           ;main.c: 3004: *pNodeId = id & 0x0ff;
 21402  002158  5172               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21403  00215A  6ED9               	movwf	fsr2l,c
 21404  00215C  6ADA               	clrf	fsr2h,c
 21405  00215E  C07C  FFDF         	movff	getVSCPFrame@id,indf2
 21406                           
 21407                           ;main.c: 3005: *pvscptype = (id >> 8) & 0xff;
 21408  002162  5171               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21409  002164  6ED9               	movwf	fsr2l,c
 21410  002166  6ADA               	clrf	fsr2h,c
 21411  002168  C07D  FFDF         	movff	getVSCPFrame@id+1,indf2
 21412                           
 21413                           ; BSR set to: 0
 21414                           ;main.c: 3006: *pvscpclass = (id >> 16) & 0x1ff;
 21415  00216C  0100               	movlb	0	; () banked
 21416  00216E  517E               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21417  002170  6F77               	movwf	??_getVSCPFrame& (0+255),b
 21418  002172  0E01               	movlw	1
 21419  002174  157F               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21420  002176  6F78               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21421  002178  517B               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21422  00217A  6ED9               	movwf	fsr2l,c
 21423  00217C  6ADA               	clrf	fsr2h,c
 21424  00217E  C077  FFDE         	movff	??_getVSCPFrame,postinc2
 21425  002182  C078  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;main.c: 3007: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21429  002186  5173               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21430  002188  6ED9               	movwf	fsr2l,c
 21431  00218A  6ADA               	clrf	fsr2h,c
 21432  00218C  C07C  F077         	movff	getVSCPFrame@id,??_getVSCPFrame
 21433  002190  C07D  F078         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21434  002194  C07E  F079         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21435  002198  C07F  F07A         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21436  00219C  0E1B               	movlw	27
 21437  00219E  D005               	goto	u21910
 21438  0021A0                     u21915:
 21439  0021A0  90D8               	bcf	status,0,c
 21440  0021A2  337A               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21441  0021A4  3379               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21442  0021A6  3378               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21443  0021A8  3377               	rrcf	??_getVSCPFrame& (0+255),f,b
 21444  0021AA                     u21910:
 21445  0021AA  2EE8               	decfsz	wreg,f,c
 21446  0021AC  D7F9               	goto	u21915
 21447  0021AE  5177               	movf	??_getVSCPFrame& (0+255),w,b
 21448  0021B0  0B07               	andlw	7
 21449  0021B2  6EDF               	movwf	indf2,c
 21450                           
 21451                           ; BSR set to: 0
 21452                           ;main.c: 3009: return 1;
 21453  0021B4  0E01               	movlw	1
 21454  0021B6                     l1278:
 21455                           
 21456                           ; BSR set to: 0
 21457  0021B6  0012               	return	
 21458  0021B8                     __end_of_getVSCPFrame:
 21459                           	opt stack 0
 21460                           tblptru	equ	0xFF8
 21461                           tblptrh	equ	0xFF7
 21462                           tblptrl	equ	0xFF6
 21463                           tablat	equ	0xFF5
 21464                           prodh	equ	0xFF4
 21465                           prodl	equ	0xFF3
 21466                           intcon	equ	0xFF2
 21467                           indf0	equ	0xFEF
 21468                           postinc0	equ	0xFEE
 21469                           fsr0h	equ	0xFEA
 21470                           fsr0l	equ	0xFE9
 21471                           wreg	equ	0xFE8
 21472                           indf1	equ	0xFE7
 21473                           postinc1	equ	0xFE6
 21474                           postdec1	equ	0xFE5
 21475                           fsr1h	equ	0xFE2
 21476                           fsr1l	equ	0xFE1
 21477                           indf2	equ	0xFDF
 21478                           postinc2	equ	0xFDE
 21479                           postdec2	equ	0xFDD
 21480                           plusw2	equ	0xFDB
 21481                           fsr2h	equ	0xFDA
 21482                           fsr2l	equ	0xFD9
 21483                           status	equ	0xFD8
 21484                           
 21485 ;; *************** function _getCANFrame *****************
 21486 ;; Defined at:
 21487 ;;		line 3033 in file "main.c"
 21488 ;; Parameters:    Size  Location     Type
 21489 ;;  pid             1    wreg     PTR unsigned long 
 21490 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21491 ;;  pdlc            1   14[BANK0 ] PTR unsigned char 
 21492 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21493 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21494 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21495 ;; Auto vars:     Size  Location     Type
 21496 ;;  pid             1   32[COMRAM] PTR unsigned long 
 21497 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21498 ;; Return value:  Size  Location     Type
 21499 ;;                  1    wreg      unsigned char 
 21500 ;; Registers used:
 21501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21502 ;; Tracked objects:
 21503 ;;		On entry : F/0
 21504 ;;		On exit  : F/0
 21505 ;;		Unchanged: 0/0
 21506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21507 ;;      Params:         0       3       0       0       0       0       0
 21508 ;;      Locals:         1       0       0       0       0       0       0
 21509 ;;      Temps:          0       0       0       0       0       0       0
 21510 ;;      Totals:         1       3       0       0       0       0       0
 21511 ;;Total ram usage:        4 bytes
 21512 ;; Hardware stack levels used:    1
 21513 ;; Hardware stack levels required when called:    4
 21514 ;; This function calls:
 21515 ;;		_fifo_read
 21516 ;; This function is called by:
 21517 ;;		_receiveSendEventCANAL
 21518 ;;		_receiveSendMultiEventCANAL
 21519 ;;		_receiveSendEventSLCAN
 21520 ;;		_getVSCPFrame
 21521 ;; This function uses a non-reentrant model
 21522 ;;
 21523                           
 21524                           	psect	text54
 21525  002486                     __ptext54:
 21526                           	opt stack 0
 21527  002486                     _getCANFrame:
 21528                           	opt stack 23
 21529                           
 21530                           ; BSR set to: 0
 21531                           ;incstack = 0
 21532                           ;incstack = 0
 21533                           ;getCANFrame@pid stored from wreg
 21534  002486  CFE8 F021          	movff	wreg,getCANFrame@pid
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;main.c: 3054: if ( fifo_canrxcount ) {
 21538  00248A  5036               	movf	_fifo_canrxcount,w,c	;volatile
 21539  00248C  E013               	bz	l15887
 21540                           
 21541                           ; BSR set to: 0
 21542                           ;main.c: 3057: (INTCONbits.GIE = 0);
 21543  00248E  9EF2               	bcf	intcon,7,c	;volatile
 21544                           
 21545                           ; BSR set to: 0
 21546                           ;main.c: 3058: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21547  002490  0E01               	movlw	high _canInputFifo
 21548  002492  0100               	movlb	0	; () banked
 21549  002494  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21550  002496  0EC4               	movlw	low _canInputFifo
 21551  002498  6F60               	movwf	?_fifo_read& (0+255),b
 21552  00249A  C021  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21553  00249E  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21554  0024A0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21555  0024A2  0E04               	movlw	4
 21556  0024A4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21557  0024A6  EC0E  F016         	call	_fifo_read	;wreg free
 21558  0024AA  5160               	movf	?_fifo_read& (0+255),w,b
 21559  0024AC  0A04               	xorlw	4
 21560  0024AE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21561  0024B0  E003               	bz	l15891
 21562  0024B2                     l15885:
 21563                           
 21564                           ; BSR set to: 0
 21565                           ;main.c: 3059: (INTCONbits.GIE = 1);
 21566  0024B2  8EF2               	bsf	intcon,7,c	;volatile
 21567  0024B4                     l15887:
 21568                           
 21569                           ; BSR set to: 0
 21570                           ;main.c: 3060: return 0;
 21571  0024B4  0E00               	movlw	0
 21572  0024B6  D035               	goto	l1287
 21573  0024B8                     l15891:
 21574                           
 21575                           ; BSR set to: 0
 21576                           ;main.c: 3061: }
 21577                           ;main.c: 3064: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21578  0024B8  0E01               	movlw	high _canInputFifo
 21579  0024BA  0100               	movlb	0	; () banked
 21580  0024BC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21581  0024BE  0EC4               	movlw	low _canInputFifo
 21582  0024C0  6F60               	movwf	?_fifo_read& (0+255),b
 21583  0024C2  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21584  0024C6  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21585  0024C8  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21586  0024CA  0E01               	movlw	1
 21587  0024CC  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21588  0024CE  EC0E  F016         	call	_fifo_read	;wreg free
 21589  0024D2  0560               	decf	?_fifo_read& (0+255),w,b
 21590  0024D4  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21591  0024D6  E1ED               	bnz	l15885
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;main.c: 3067: }
 21595                           ;main.c: 3070: if ( *pdlc > 8 ) {
 21596  0024D8  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21597  0024DA  6ED9               	movwf	fsr2l,c
 21598  0024DC  6ADA               	clrf	fsr2h,c
 21599  0024DE  0E08               	movlw	8
 21600  0024E0  64DF               	cpfsgt	indf2,c
 21601  0024E2  D004               	goto	l15903
 21602                           
 21603                           ; BSR set to: 0
 21604                           ;main.c: 3071: *pdlc = 0;
 21605  0024E4  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21606  0024E6  6ED9               	movwf	fsr2l,c
 21607  0024E8  6ADA               	clrf	fsr2h,c
 21608  0024EA  6ADF               	clrf	indf2,c
 21609  0024EC                     l15903:
 21610                           
 21611                           ; BSR set to: 0
 21612                           ;main.c: 3072: }
 21613                           ;main.c: 3075: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21614  0024EC  0E01               	movlw	high _canInputFifo
 21615  0024EE  0100               	movlb	0	; () banked
 21616  0024F0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21617  0024F2  0EC4               	movlw	low _canInputFifo
 21618  0024F4  6F60               	movwf	?_fifo_read& (0+255),b
 21619  0024F6  C06F  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21620  0024FA  C070  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21621  0024FE  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21622  002500  6ED9               	movwf	fsr2l,c
 21623  002502  6ADA               	clrf	fsr2h,c
 21624  002504  50DF               	movf	indf2,w,c
 21625  002506  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21626  002508  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21627  00250A  EC0E  F016         	call	_fifo_read	;wreg free
 21628  00250E  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21629  002510  6ED9               	movwf	fsr2l,c
 21630  002512  6ADA               	clrf	fsr2h,c
 21631  002514  50DF               	movf	indf2,w,c
 21632  002516  1960               	xorwf	?_fifo_read& (0+255),w,b
 21633  002518  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21634  00251A  E1CB               	bnz	l15885
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;main.c: 3078: }
 21638                           ;main.c: 3080: fifo_canrxcount--;
 21639  00251C  0636               	decf	_fifo_canrxcount,f,c	;volatile
 21640                           
 21641                           ; BSR set to: 0
 21642                           ;main.c: 3082: (INTCONbits.GIE = 1);
 21643  00251E  8EF2               	bsf	intcon,7,c	;volatile
 21644                           
 21645                           ; BSR set to: 0
 21646                           ;main.c: 3084: return 1;
 21647  002520  0E01               	movlw	1
 21648  002522                     l1287:
 21649                           
 21650                           ; BSR set to: 0
 21651  002522  0012               	return	
 21652  002524                     __end_of_getCANFrame:
 21653                           	opt stack 0
 21654                           tblptru	equ	0xFF8
 21655                           tblptrh	equ	0xFF7
 21656                           tblptrl	equ	0xFF6
 21657                           tablat	equ	0xFF5
 21658                           prodh	equ	0xFF4
 21659                           prodl	equ	0xFF3
 21660                           intcon	equ	0xFF2
 21661                           indf0	equ	0xFEF
 21662                           postinc0	equ	0xFEE
 21663                           fsr0h	equ	0xFEA
 21664                           fsr0l	equ	0xFE9
 21665                           wreg	equ	0xFE8
 21666                           indf1	equ	0xFE7
 21667                           postinc1	equ	0xFE6
 21668                           postdec1	equ	0xFE5
 21669                           fsr1h	equ	0xFE2
 21670                           fsr1l	equ	0xFE1
 21671                           indf2	equ	0xFDF
 21672                           postinc2	equ	0xFDE
 21673                           postdec2	equ	0xFDD
 21674                           plusw2	equ	0xFDB
 21675                           fsr2h	equ	0xFDA
 21676                           fsr2l	equ	0xFD9
 21677                           status	equ	0xFD8
 21678                           
 21679 ;; *************** function _fifo_read *****************
 21680 ;; Defined at:
 21681 ;;		line 29 in file "fifo.c"
 21682 ;; Parameters:    Size  Location     Type
 21683 ;;  f               2    0[BANK0 ] PTR struct .
 21684 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21685 ;;  buf             2    2[BANK0 ] PTR const void 
 21686 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21687 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21688 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21689 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21690 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21691 ;; Auto vars:     Size  Location     Type
 21692 ;;  i               2   12[BANK0 ] unsigned short 
 21693 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21694 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21695 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21696 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21697 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21698 ;; Return value:  Size  Location     Type
 21699 ;;                  2    0[BANK0 ] unsigned short 
 21700 ;; Registers used:
 21701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21702 ;; Tracked objects:
 21703 ;;		On entry : F/0
 21704 ;;		On exit  : F/0
 21705 ;;		Unchanged: 0/0
 21706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21707 ;;      Params:         0       6       0       0       0       0       0
 21708 ;;      Locals:         0       4       0       0       0       0       0
 21709 ;;      Temps:          0       4       0       0       0       0       0
 21710 ;;      Totals:         0      14       0       0       0       0       0
 21711 ;;Total ram usage:       14 bytes
 21712 ;; Hardware stack levels used:    1
 21713 ;; Hardware stack levels required when called:    3
 21714 ;; This function calls:
 21715 ;;		Nothing
 21716 ;; This function is called by:
 21717 ;;		_main
 21718 ;;		_doModeVerbose
 21719 ;;		_doModeVscp
 21720 ;;		_doModeSLCAN
 21721 ;;		_getCANFrame
 21722 ;; This function uses a non-reentrant model
 21723 ;;
 21724                           
 21725                           	psect	text55
 21726  002C1C                     __ptext55:
 21727                           	opt stack 0
 21728  002C1C                     _fifo_read:
 21729                           	opt stack 23
 21730                           
 21731                           ; BSR set to: 0
 21732                           ;fifo.c: 30: uint16_t i;
 21733                           ;fifo.c: 31: uint8_t *p;
 21734                           ;fifo.c: 32: p = buf;
 21735                           
 21736                           ; BSR set to: 0
 21737                           ;incstack = 0
 21738                           ;incstack = 0
 21739  002C1C  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21740  002C20  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21741                           
 21742                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21743  002C24  6B6C               	clrf	fifo_read@i& (0+255),b
 21744  002C26  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21745  002C28  D04A               	goto	l13475
 21746  002C2A                     l13461:
 21747                           
 21748                           ; BSR set to: 0
 21749                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21750  002C2A  EE20 F002          	lfsr	2,2
 21751  002C2E  D851               	call	PL34	;call to abstracted procedure
 21752  002C30  18E5               	xorwf	postdec1,w,c
 21753  002C32  CFDF FFE8          	movff	indf2,wreg
 21754  002C36  B4D8               	btfsc	status,2,c
 21755  002C38  18E7               	xorwf	indf1,w,c
 21756  002C3A  E03A               	bz	l1538
 21757                           
 21758                           ; BSR set to: 0
 21759                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21760  002C3C  EE20 F004          	lfsr	2,4
 21761  002C40  5160               	movf	fifo_read@f& (0+255),w,b
 21762  002C42  26D9               	addwf	fsr2l,f,c
 21763  002C44  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21764  002C46  22DA               	addwfc	fsr2h,f,c
 21765  002C48  CFDE F066          	movff	postinc2,??_fifo_read
 21766  002C4C  CFDD F067          	movff	postdec2,??_fifo_read+1
 21767  002C50  C060  FFD9         	movff	fifo_read@f,fsr2l
 21768  002C54  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21769  002C58  CFDE F068          	movff	postinc2,??_fifo_read+2
 21770  002C5C  CFDD F069          	movff	postdec2,??_fifo_read+3
 21771  002C60  5166               	movf	??_fifo_read& (0+255),w,b
 21772  002C62  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21773  002C64  6ED9               	movwf	fsr2l,c
 21774  002C66  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21775  002C68  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21776  002C6A  6EDA               	movwf	fsr2h,c
 21777  002C6C  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21778  002C70  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21779  002C74  CFDF FFE7          	movff	indf2,indf1
 21780                           
 21781                           ; BSR set to: 0
 21782  002C78  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21783  002C7A  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21784                           
 21785                           ; BSR set to: 0
 21786                           ;fifo.c: 38: f->tail++;
 21787  002C7C  EE20 F004          	lfsr	2,4
 21788  002C80  5160               	movf	fifo_read@f& (0+255),w,b
 21789  002C82  26D9               	addwf	fsr2l,f,c
 21790  002C84  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21791  002C86  22DA               	addwfc	fsr2h,f,c
 21792  002C88  2ADE               	incf	postinc2,f,c
 21793  002C8A  0E00               	movlw	0
 21794  002C8C  22DD               	addwfc	postdec2,f,c
 21795                           
 21796                           ; BSR set to: 0
 21797                           ;fifo.c: 39: if (f->tail >= f->size) {
 21798  002C8E  EE20 F006          	lfsr	2,6
 21799  002C92  D81F               	call	PL34	;call to abstracted procedure
 21800  002C94  5CE5               	subwf	postdec1,w,c
 21801  002C96  E102               	bnz	u17835
 21802  002C98  50DF               	movf	indf2,w,c
 21803  002C9A  5CE7               	subwf	indf1,w,c
 21804  002C9C                     u17835:
 21805  002C9C  E30E               	bnc	l13473
 21806                           
 21807                           ; BSR set to: 0
 21808                           ;fifo.c: 40: f->tail = 0;
 21809  002C9E  EE20 F004          	lfsr	2,4
 21810  002CA2  5160               	movf	fifo_read@f& (0+255),w,b
 21811  002CA4  26D9               	addwf	fsr2l,f,c
 21812  002CA6  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21813  002CA8  22DA               	addwfc	fsr2h,f,c
 21814  002CAA  6ADE               	clrf	postinc2,c
 21815  002CAC  6ADD               	clrf	postdec2,c
 21816  002CAE  D005               	goto	l13473
 21817  002CB0                     l1538:
 21818                           
 21819                           ; BSR set to: 0
 21820                           ;fifo.c: 43: else {
 21821                           ;fifo.c: 44: return i;
 21822  002CB0  C06C  F060         	movff	fifo_read@i,?_fifo_read
 21823  002CB4  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21824  002CB8  D00B               	goto	l1541
 21825  002CBA                     l13473:
 21826                           
 21827                           ; BSR set to: 0
 21828  002CBA  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 21829  002CBC  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 21830  002CBE                     l13475:
 21831                           
 21832                           ; BSR set to: 0
 21833  002CBE  5164               	movf	fifo_read@nbytes& (0+255),w,b
 21834  002CC0  5D6C               	subwf	fifo_read@i& (0+255),w,b
 21835  002CC2  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21836  002CC4  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21837  002CC6  E3B1               	bnc	l13461
 21838                           
 21839                           ; BSR set to: 0
 21840                           ;fifo.c: 45: }
 21841                           ;fifo.c: 47: }
 21842                           ;fifo.c: 49: return nbytes;
 21843  002CC8  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 21844  002CCC  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21845  002CD0                     l1541:
 21846                           
 21847                           ; BSR set to: 0
 21848  002CD0  0012               	return	
 21849  002CD2                     __end_of_fifo_read:
 21850                           	opt stack 0
 21851  002CD2                     PL34:
 21852                           	opt stack 23
 21853  002CD2  5160               	movf	fifo_read@f& (0+255),w,b
 21854  002CD4  26D9               	addwf	fsr2l,f,c
 21855  002CD6  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21856  002CD8  22DA               	addwfc	fsr2h,f,c
 21857  002CDA  EE10 F004          	lfsr	1,4
 21858  002CDE  5160               	movf	fifo_read@f& (0+255),w,b
 21859  002CE0  26E1               	addwf	fsr1l,f,c
 21860  002CE2  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21861  002CE4  22E2               	addwfc	fsr1h,f,c
 21862  002CE6  52E6               	movf	postinc1,f,c
 21863  002CE8  52DE               	movf	postinc2,f,c
 21864  002CEA  50DD               	movf	postdec2,w,c
 21865  002CEC  0012               	return	
 21866  002CEE                     __end_ofPL34:
 21867                           	opt stack 0
 21868                           tblptru	equ	0xFF8
 21869                           tblptrh	equ	0xFF7
 21870                           tblptrl	equ	0xFF6
 21871                           tablat	equ	0xFF5
 21872                           prodh	equ	0xFF4
 21873                           prodl	equ	0xFF3
 21874                           intcon	equ	0xFF2
 21875                           indf0	equ	0xFEF
 21876                           postinc0	equ	0xFEE
 21877                           fsr0h	equ	0xFEA
 21878                           fsr0l	equ	0xFE9
 21879                           wreg	equ	0xFE8
 21880                           indf1	equ	0xFE7
 21881                           postinc1	equ	0xFE6
 21882                           postdec1	equ	0xFE5
 21883                           fsr1h	equ	0xFE2
 21884                           fsr1l	equ	0xFE1
 21885                           indf2	equ	0xFDF
 21886                           postinc2	equ	0xFDE
 21887                           postdec2	equ	0xFDD
 21888                           plusw2	equ	0xFDB
 21889                           fsr2h	equ	0xFDA
 21890                           fsr2l	equ	0xFD9
 21891                           status	equ	0xFD8
 21892                           
 21893 ;; *************** function _sprintf *****************
 21894 ;; Defined at:
 21895 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21896 ;; Parameters:    Size  Location     Type
 21897 ;;  sp              2   21[BANK0 ] PTR unsigned char 
 21898 ;;		 -> wrkbuf(80), 
 21899 ;;  f               2   23[BANK0 ] PTR const unsigned char 
 21900 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21901 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21902 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21903 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21904 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21905 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21906 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21907 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21908 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21909 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21910 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21911 ;; Auto vars:     Size  Location     Type
 21912 ;;  idx             1   32[BANK0 ] unsigned char 
 21913 ;;  _val            4   44[BANK0 ] struct .
 21914 ;;  flag            2   49[BANK0 ] unsigned short 
 21915 ;;  width           2   42[BANK0 ] int 
 21916 ;;  prec            2   40[BANK0 ] int 
 21917 ;;  c               1   48[BANK0 ] char 
 21918 ;;  ap              1   39[BANK0 ] PTR void [1]
 21919 ;;		 -> ?_sprintf(2), 
 21920 ;; Return value:  Size  Location     Type
 21921 ;;                  2   21[BANK0 ] int 
 21922 ;; Registers used:
 21923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21924 ;; Tracked objects:
 21925 ;;		On entry : F/0
 21926 ;;		On exit  : F/0
 21927 ;;		Unchanged: 0/0
 21928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21929 ;;      Params:         0       8       0       0       0       0       0
 21930 ;;      Locals:         0      19       0       0       0       0       0
 21931 ;;      Temps:          0       3       0       0       0       0       0
 21932 ;;      Totals:         0      30       0       0       0       0       0
 21933 ;;Total ram usage:       30 bytes
 21934 ;; Hardware stack levels used:    1
 21935 ;; Hardware stack levels required when called:    4
 21936 ;; This function calls:
 21937 ;;		_isdigit
 21938 ;;		___lldiv
 21939 ;;		___llmod
 21940 ;;		___wmul
 21941 ;; This function is called by:
 21942 ;;		_doModeVerbose
 21943 ;;		_receivePrintEventVerbose
 21944 ;;		_printStatistics
 21945 ;;		_printErrors
 21946 ;; This function uses a non-reentrant model
 21947 ;;
 21948                           
 21949                           	psect	text56
 21950  005146                     __ptext56:
 21951                           	opt stack 0
 21952  005146                     _sprintf:
 21953                           	opt stack 24
 21954                           
 21955                           ; BSR set to: 0
 21956                           ;doprnt.c: 494: va_list ap;
 21957                           ;doprnt.c: 499: signed char c;
 21958                           ;doprnt.c: 501: int width;
 21959                           ;doprnt.c: 504: int prec;
 21960                           ;doprnt.c: 508: unsigned short flag;
 21961                           ;doprnt.c: 527: union {
 21962                           ;doprnt.c: 528: unsigned long _val;
 21963                           ;doprnt.c: 529: struct {
 21964                           ;doprnt.c: 530: const char * _cp;
 21965                           ;doprnt.c: 531: unsigned _len;
 21966                           ;doprnt.c: 532: } _str;
 21967                           ;doprnt.c: 533: } _val;
 21968                           ;doprnt.c: 542: *ap = __va_start();
 21969                           
 21970                           ; BSR set to: 0
 21971                           ;incstack = 0
 21972                           ;incstack = 0
 21973  005146  0E79               	movlw	low (?_sprintf+4)
 21974  005148  6F87               	movwf	sprintf@ap& (0+255),b
 21975                           
 21976                           ;doprnt.c: 545: while(c = *f++) {
 21977  00514A  D32C               	goto	l15267
 21978  00514C                     l14933:
 21979                           
 21980                           ; BSR set to: 0
 21981                           ;doprnt.c: 547: if(c != '%')
 21982  00514C  5190               	movf	sprintf@c& (0+255),w,b
 21983  00514E  0A25               	xorlw	37
 21984  005150  E009               	bz	l1625
 21985                           
 21986                           ; BSR set to: 0
 21987                           ;doprnt.c: 549: {
 21988                           ;doprnt.c: 550: ((*sp++ = (c)));
 21989  005152  C075  FFD9         	movff	sprintf@sp,fsr2l
 21990  005156  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 21991  00515A  C090  FFDF         	movff	sprintf@c,indf2
 21992                           
 21993                           ; BSR set to: 0
 21994  00515E  4B75               	infsnz	sprintf@sp& (0+255),f,b
 21995  005160  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 21996                           
 21997                           ;doprnt.c: 551: continue;
 21998  005162  D320               	goto	l15267
 21999  005164                     l1625:
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;doprnt.c: 552: }
 22003                           ;doprnt.c: 555: width = 0;
 22004  005164  6B8A               	clrf	sprintf@width& (0+255),b
 22005  005166  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22006                           
 22007                           ;doprnt.c: 557: flag = 0;
 22008  005168  6B91               	clrf	sprintf@flag& (0+255),b
 22009  00516A  6B92               	clrf	(sprintf@flag+1)& (0+255),b
 22010  00516C  D009               	goto	l14949
 22011  00516E                     l14939:
 22012                           
 22013                           ; BSR set to: 0
 22014                           ;doprnt.c: 563: flag |= 0x08;
 22015  00516E  8791               	bsf	sprintf@flag& (0+255),3,b
 22016  005170  D005               	goto	L34
 22017  005172                     l14941:
 22018                           
 22019                           ; BSR set to: 0
 22020                           ;doprnt.c: 570: flag |= 0x01;
 22021  005172  8191               	bsf	sprintf@flag& (0+255),0,b
 22022  005174  D003               	goto	L34
 22023  005176                     l14943:
 22024                           
 22025                           ; BSR set to: 0
 22026                           ;doprnt.c: 583: flag |= 0x800;
 22027  005176  8792               	bsf	(sprintf@flag+1)& (0+255),3,b
 22028  005178  D001               	goto	L34
 22029  00517A                     l14945:
 22030                           
 22031                           ; BSR set to: 0
 22032                           ;doprnt.c: 589: flag |= 0x04;
 22033  00517A  8591               	bsf	sprintf@flag& (0+255),2,b
 22034  00517C                     L34:
 22035                           
 22036                           ;doprnt.c: 590: f++;
 22037  00517C  4B77               	infsnz	sprintf@f& (0+255),f,b
 22038  00517E  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 22039  005180                     l14949:
 22040                           
 22041                           ; BSR set to: 0
 22042  005180  C077  FFF6         	movff	sprintf@f,tblptrl
 22043  005184  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22044  005188  0008               	tblrd		*
 22045  00518A  50F5               	movf	tablat,w,c
 22046                           
 22047                           ; Switch size 1, requested type "space"
 22048                           ; Number of cases is 4, Range of values is 32 to 48
 22049                           ; switch strategies available:
 22050                           ; Name         Instructions Cycles
 22051                           ; simple_byte           13     7 (average)
 22052                           ;	Chosen strategy is simple_byte
 22053  00518C  0A20               	xorlw	32	; case 32
 22054  00518E  E0F1               	bz	l14941
 22055  005190  0A03               	xorlw	3	; case 35
 22056  005192  E0F1               	bz	l14943
 22057  005194  0A0E               	xorlw	14	; case 45
 22058  005196  E0EB               	bz	l14939
 22059  005198  0A1D               	xorlw	29	; case 48
 22060  00519A  E0EF               	bz	l14945
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;doprnt.c: 602: if(flag & 0x08)
 22064  00519C  B791               	btfsc	sprintf@flag& (0+255),3,b
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;doprnt.c: 603: flag &= ~0x04;
 22068  00519E  9591               	bcf	sprintf@flag& (0+255),2,b
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22072  0051A0  C077  FFF6         	movff	sprintf@f,tblptrl
 22073  0051A4  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22074  0051A8  0008               	tblrd		*
 22075  0051AA  50F5               	movf	tablat,w,c
 22076  0051AC  EC8A  F00B         	call	_isdigit
 22077  0051B0  E325               	bnc	l14965
 22078                           
 22079                           ; BSR set to: 0
 22080                           ;doprnt.c: 607: width = 0;
 22081  0051B2  6B8A               	clrf	sprintf@width& (0+255),b
 22082  0051B4  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22083  0051B6                     l14957:
 22084                           
 22085                           ; BSR set to: 0
 22086                           ;doprnt.c: 609: width *= 10;
 22087  0051B6  C08A  F060         	movff	sprintf@width,?___wmul
 22088  0051BA  C08B  F061         	movff	sprintf@width+1,?___wmul+1
 22089  0051BE  6B63               	clrf	(?___wmul+3)& (0+255),b
 22090  0051C0  0E0A               	movlw	10
 22091  0051C2  6F62               	movwf	(?___wmul+2)& (0+255),b
 22092  0051C4  ECE0  F00B         	call	___wmul	;wreg free
 22093  0051C8  C060  F08A         	movff	?___wmul,sprintf@width
 22094  0051CC  C061  F08B         	movff	?___wmul+1,sprintf@width+1
 22095                           
 22096                           ; BSR set to: 0
 22097                           ;doprnt.c: 610: width += *f++ - '0';
 22098  0051D0  C077  FFF6         	movff	sprintf@f,tblptrl
 22099  0051D4  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22100  0051D8  0008               	tblrd		*
 22101  0051DA  CFF5 F07D          	movff	tablat,??_sprintf
 22102  0051DE  0ED0               	movlw	208
 22103  0051E0  257D               	addwf	??_sprintf& (0+255),w,b
 22104  0051E2  6F7E               	movwf	(??_sprintf+1)& (0+255),b
 22105  0051E4  6B7F               	clrf	(??_sprintf+2)& (0+255),b
 22106  0051E6  0EFF               	movlw	255
 22107  0051E8  237F               	addwfc	(??_sprintf+2)& (0+255),f,b
 22108  0051EA  517E               	movf	(??_sprintf+1)& (0+255),w,b
 22109  0051EC  278A               	addwf	sprintf@width& (0+255),f,b
 22110  0051EE  517F               	movf	(??_sprintf+2)& (0+255),w,b
 22111  0051F0  238B               	addwfc	(sprintf@width+1)& (0+255),f,b
 22112                           
 22113                           ; BSR set to: 0
 22114                           
 22115                           ; BSR set to: 0
 22116                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22117  0051F2  DB36               	call	PL76	;call to abstracted procedure
 22118  0051F4  EC8A  F00B         	call	_isdigit
 22119  0051F8  E314               	bnc	l14973
 22120  0051FA  D7DD               	goto	l14957
 22121  0051FC                     l14965:
 22122                           
 22123                           ; BSR set to: 0
 22124  0051FC  C077  FFF6         	movff	sprintf@f,tblptrl
 22125  005200  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22126  005204  0008               	tblrd		*
 22127  005206  50F5               	movf	tablat,w,c
 22128  005208  0A2A               	xorlw	42
 22129  00520A  E10B               	bnz	l14973
 22130                           
 22131                           ; BSR set to: 0
 22132                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22133  00520C  5187               	movf	sprintf@ap& (0+255),w,b
 22134  00520E  6ED9               	movwf	fsr2l,c
 22135  005210  6ADA               	clrf	fsr2h,c
 22136  005212  CFDE F08A          	movff	postinc2,sprintf@width
 22137  005216  CFDD F08B          	movff	postdec2,sprintf@width+1
 22138                           
 22139                           ; BSR set to: 0
 22140  00521A  0E02               	movlw	2
 22141  00521C  2787               	addwf	sprintf@ap& (0+255),f,b
 22142                           
 22143                           ; BSR set to: 0
 22144                           ;doprnt.c: 615: f++;
 22145  00521E  4B77               	infsnz	sprintf@f& (0+255),f,b
 22146  005220  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 22147  005222                     l14973:
 22148                           
 22149                           ; BSR set to: 0
 22150                           ;doprnt.c: 617: }
 22151                           ;doprnt.c: 620: if(*f == '.') {
 22152  005222  C077  FFF6         	movff	sprintf@f,tblptrl
 22153  005226  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22154  00522A  0008               	tblrd		*
 22155  00522C  50F5               	movf	tablat,w,c
 22156  00522E  0A2E               	xorlw	46
 22157  005230  E137               	bnz	l1641
 22158                           
 22159                           ; BSR set to: 0
 22160                           ;doprnt.c: 621: flag |= 0x4000;
 22161  005232  8D92               	bsf	(sprintf@flag+1)& (0+255),6,b
 22162                           
 22163                           ;doprnt.c: 622: f++;
 22164                           
 22165                           ; BSR set to: 0
 22166                           ;doprnt.c: 624: if(*f == '*') {
 22167  005234  DB15               	call	PL76	;call to abstracted procedure
 22168  005236  0A2A               	xorlw	42
 22169  005238  E10C               	bnz	l1642
 22170                           
 22171                           ; BSR set to: 0
 22172                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22173  00523A  5187               	movf	sprintf@ap& (0+255),w,b
 22174  00523C  6ED9               	movwf	fsr2l,c
 22175  00523E  6ADA               	clrf	fsr2h,c
 22176  005240  CFDE F088          	movff	postinc2,sprintf@prec
 22177  005244  CFDD F089          	movff	postdec2,sprintf@prec+1
 22178                           
 22179                           ; BSR set to: 0
 22180  005248  0E02               	movlw	2
 22181  00524A  2787               	addwf	sprintf@ap& (0+255),f,b
 22182                           
 22183                           ; BSR set to: 0
 22184                           ;doprnt.c: 626: f++;
 22185  00524C  4B77               	infsnz	sprintf@f& (0+255),f,b
 22186  00524E  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 22187                           
 22188                           ;doprnt.c: 627: } else
 22189  005250  D088               	goto	l15043
 22190  005252                     l1642:
 22191                           
 22192                           ; BSR set to: 0
 22193                           ;doprnt.c: 629: {
 22194                           ;doprnt.c: 630: prec = 0;
 22195  005252  6B88               	clrf	sprintf@prec& (0+255),b
 22196  005254  6B89               	clrf	(sprintf@prec+1)& (0+255),b
 22197                           
 22198                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22199  005256  D01A               	goto	l14989
 22200  005258                     l14985:
 22201                           
 22202                           ; BSR set to: 0
 22203                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22204  005258  C088  F060         	movff	sprintf@prec,?___wmul
 22205  00525C  C089  F061         	movff	sprintf@prec+1,?___wmul+1
 22206  005260  6B63               	clrf	(?___wmul+3)& (0+255),b
 22207  005262  0E0A               	movlw	10
 22208  005264  6F62               	movwf	(?___wmul+2)& (0+255),b
 22209  005266  ECE0  F00B         	call	___wmul	;wreg free
 22210  00526A  C077  FFF6         	movff	sprintf@f,tblptrl
 22211  00526E  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22212  005272  0008               	tblrd		*
 22213  005274  50F5               	movf	tablat,w,c
 22214  005276  2760               	addwf	?___wmul& (0+255),f,b
 22215  005278  0E00               	movlw	0
 22216  00527A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22217  00527C  0ED0               	movlw	208
 22218  00527E  2560               	addwf	?___wmul& (0+255),w,b
 22219  005280  6F88               	movwf	sprintf@prec& (0+255),b
 22220  005282  0EFF               	movlw	255
 22221  005284  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22222  005286  6F89               	movwf	(sprintf@prec+1)& (0+255),b
 22223                           
 22224                           ; BSR set to: 0
 22225  005288  4B77               	infsnz	sprintf@f& (0+255),f,b
 22226  00528A  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 22227  00528C                     l14989:
 22228                           
 22229                           ; BSR set to: 0
 22230  00528C  C077  FFF6         	movff	sprintf@f,tblptrl
 22231  005290  C078  FFF7         	movff	sprintf@f+1,tblptrh
 22232  005294  0008               	tblrd		*
 22233  005296  50F5               	movf	tablat,w,c
 22234  005298  EC8A  F00B         	call	_isdigit
 22235  00529C  E362               	bnc	l15043
 22236  00529E  D7DC               	goto	l14985
 22237  0052A0                     l1641:
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;doprnt.c: 635: prec = 0;
 22241  0052A0  6B88               	clrf	sprintf@prec& (0+255),b
 22242  0052A2  6B89               	clrf	(sprintf@prec+1)& (0+255),b
 22243  0052A4  D05E               	goto	l15043
 22244  0052A6                     l14991:
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;doprnt.c: 652: flag |= 0x10;
 22248  0052A6  8991               	bsf	sprintf@flag& (0+255),4,b
 22249                           
 22250                           ;doprnt.c: 653: goto loop;
 22251  0052A8  D05C               	goto	l15043
 22252  0052AA                     l14993:
 22253                           
 22254                           ; BSR set to: 0
 22255                           ;doprnt.c: 700: flag |= 0x40;
 22256  0052AA  8D91               	bsf	sprintf@flag& (0+255),6,b
 22257                           
 22258                           ;doprnt.c: 702: break;
 22259  0052AC  D06F               	goto	l15045
 22260  0052AE                     l14995:
 22261                           
 22262                           ; BSR set to: 0
 22263                           ;doprnt.c: 723: flag |= 0x20;
 22264  0052AE  8B91               	bsf	sprintf@flag& (0+255),5,b
 22265  0052B0                     l1658:
 22266                           
 22267                           ; BSR set to: 0
 22268                           ;doprnt.c: 730: flag |= 0x80;
 22269  0052B0  8F91               	bsf	sprintf@flag& (0+255),7,b
 22270                           
 22271                           ;doprnt.c: 732: break;
 22272  0052B2  D06C               	goto	l15045
 22273  0052B4                     l14997:
 22274                           
 22275                           ; BSR set to: 0
 22276                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22277  0052B4  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22278  0052B6  1188               	iorwf	sprintf@prec& (0+255),w,b
 22279  0052B8  E009               	bz	l15003
 22280                           
 22281                           ; BSR set to: 0
 22282  0052BA  518D               	movf	(sprintf@_val+1)& (0+255),w,b
 22283  0052BC  5D88               	subwf	sprintf@prec& (0+255),w,b
 22284  0052BE  518E               	movf	(sprintf@_val+2)& (0+255),w,b
 22285  0052C0  5989               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22286  0052C2  E204               	bc	l15003
 22287                           
 22288                           ; BSR set to: 0
 22289                           ;doprnt.c: 763: _val._str._len = prec;
 22290  0052C4  C088  F08D         	movff	sprintf@prec,sprintf@_val+1
 22291  0052C8  C089  F08E         	movff	sprintf@prec+1,sprintf@_val+2
 22292  0052CC                     l15003:
 22293                           
 22294                           ; BSR set to: 0
 22295                           ;doprnt.c: 766: if(width > _val._str._len)
 22296  0052CC  518A               	movf	sprintf@width& (0+255),w,b
 22297  0052CE  5D8D               	subwf	(sprintf@_val+1)& (0+255),w,b
 22298  0052D0  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22299  0052D2  598E               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22300  0052D4  E207               	bc	l1661
 22301                           
 22302                           ; BSR set to: 0
 22303                           ;doprnt.c: 767: width -= _val._str._len;
 22304  0052D6  EE20  F08D         	lfsr	2,sprintf@_val+1
 22305  0052DA  50DE               	movf	postinc2,w,c
 22306  0052DC  5F8A               	subwf	sprintf@width& (0+255),f,b
 22307  0052DE  50DD               	movf	postdec2,w,c
 22308  0052E0  5B8B               	subwfb	(sprintf@width+1)& (0+255),f,b
 22309  0052E2  D002               	goto	l1662
 22310  0052E4                     l1661:
 22311                           
 22312                           ; BSR set to: 0
 22313                           ;doprnt.c: 768: else
 22314                           ;doprnt.c: 769: width = 0;
 22315  0052E4  6B8A               	clrf	sprintf@width& (0+255),b
 22316  0052E6  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22317  0052E8                     l1662:
 22318                           
 22319                           ; BSR set to: 0
 22320                           ;doprnt.c: 771: if(!(flag & 0x08))
 22321  0052E8  A791               	btfss	sprintf@flag& (0+255),3,b
 22322  0052EA  D004               	goto	l15013
 22323  0052EC  D015               	goto	l15021
 22324  0052EE                     l15009:
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22328  0052EE  DAB1               	call	PL58	;call to abstracted procedure
 22329                           
 22330                           ; BSR set to: 0
 22331  0052F0  4B75               	infsnz	sprintf@sp& (0+255),f,b
 22332  0052F2  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 22333  0052F4                     l15013:
 22334                           
 22335                           ; BSR set to: 0
 22336  0052F4  078A               	decf	sprintf@width& (0+255),f,b
 22337  0052F6  DAC2               	call	PL102	;call to abstracted procedure
 22338  0052F8  B4D8               	btfsc	status,2,c
 22339  0052FA  298B               	incf	(sprintf@width+1)& (0+255),w,b
 22340  0052FC  E00D               	bz	l15021
 22341  0052FE  D7F7               	goto	l15009
 22342  005300                     l15015:
 22343                           
 22344                           ; BSR set to: 0
 22345                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22346  005300  518C               	movf	sprintf@_val& (0+255),w,b
 22347  005302  6ED9               	movwf	fsr2l,c
 22348  005304  6ADA               	clrf	fsr2h,c
 22349  005306  C075  FFE1         	movff	sprintf@sp,fsr1l
 22350  00530A  C076  FFE2         	movff	sprintf@sp+1,fsr1h
 22351  00530E  CFDF FFE7          	movff	indf2,indf1
 22352                           
 22353                           ; BSR set to: 0
 22354  005312  2B8C               	incf	sprintf@_val& (0+255),f,b
 22355                           
 22356                           ; BSR set to: 0
 22357  005314  4B75               	infsnz	sprintf@sp& (0+255),f,b
 22358  005316  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 22359  005318                     l15021:
 22360                           
 22361                           ; BSR set to: 0
 22362  005318  078D               	decf	(sprintf@_val+1)& (0+255),f,b
 22363  00531A  A0D8               	btfss	status,0,c
 22364  00531C  078E               	decf	(sprintf@_val+2)& (0+255),f,b
 22365  00531E  0100               	movlb	0	; () banked
 22366  005320  298D               	incf	(sprintf@_val+1)& (0+255),w,b
 22367  005322  B4D8               	btfsc	status,2,c
 22368  005324  298E               	incf	(sprintf@_val+2)& (0+255),w,b
 22369  005326  E1EC               	bnz	l15015
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;doprnt.c: 779: if(flag & 0x08)
 22373  005328  B791               	btfsc	sprintf@flag& (0+255),3,b
 22374  00532A  D004               	goto	l15029
 22375  00532C  D23B               	goto	l15267
 22376  00532E                     l15025:
 22377                           
 22378                           ; BSR set to: 0
 22379                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22380  00532E  DA91               	call	PL58	;call to abstracted procedure
 22381                           
 22382                           ; BSR set to: 0
 22383  005330  4B75               	infsnz	sprintf@sp& (0+255),f,b
 22384  005332  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 22385  005334                     l15029:
 22386                           
 22387                           ; BSR set to: 0
 22388  005334  078A               	decf	sprintf@width& (0+255),f,b
 22389  005336  DAA2               	call	PL102	;call to abstracted procedure
 22390  005338  B4D8               	btfsc	status,2,c
 22391  00533A  298B               	incf	(sprintf@width+1)& (0+255),w,b
 22392  00533C  E101 D232          	bz	l15267
 22393  005340  D7F6               	goto	l15025
 22394  005342                     l15031:
 22395                           
 22396                           ; BSR set to: 0
 22397                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22398  005342  5187               	movf	sprintf@ap& (0+255),w,b
 22399  005344  6ED9               	movwf	fsr2l,c
 22400  005346  6ADA               	clrf	fsr2h,c
 22401  005348  50DF               	movf	indf2,w,c
 22402  00534A  6F90               	movwf	sprintf@c& (0+255),b
 22403                           
 22404                           ; BSR set to: 0
 22405  00534C  0E02               	movlw	2
 22406  00534E  2787               	addwf	sprintf@ap& (0+255),f,b
 22407  005350                     l15035:
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22411  005350  0E90               	movlw	low sprintf@c
 22412  005352  6F8C               	movwf	sprintf@_val& (0+255),b
 22413                           
 22414                           ; BSR set to: 0
 22415                           ;doprnt.c: 815: _val._str._len = 1;
 22416  005354  6B8E               	clrf	(sprintf@_val+2)& (0+255),b
 22417  005356  0E01               	movlw	1
 22418  005358  6F8D               	movwf	(sprintf@_val+1)& (0+255),b
 22419                           
 22420                           ;doprnt.c: 816: goto dostring;
 22421  00535A  D7AC               	goto	l14997
 22422  00535C                     l15039:
 22423                           
 22424                           ; BSR set to: 0
 22425                           ;doprnt.c: 827: flag |= 0xC0;
 22426  00535C  0EC0               	movlw	192
 22427  00535E  1391               	iorwf	sprintf@flag& (0+255),f,b
 22428                           
 22429                           ;doprnt.c: 828: break;
 22430  005360  D015               	goto	l15045
 22431  005362                     l15043:
 22432                           
 22433                           ; BSR set to: 0
 22434  005362  DA6C               	call	PL54	;call to abstracted procedure
 22435  005364  5190               	movf	sprintf@c& (0+255),w,b
 22436                           
 22437                           ; Switch size 1, requested type "space"
 22438                           ; Number of cases is 9, Range of values is 0 to 120
 22439                           ; switch strategies available:
 22440                           ; Name         Instructions Cycles
 22441                           ; simple_byte           28    15 (average)
 22442                           ;	Chosen strategy is simple_byte
 22443  005366  E101 D220          	bz	l15269
 22444  00536A  0A58               	xorlw	88	; case 88
 22445  00536C  E0A0               	bz	l14995
 22446  00536E  0A3B               	xorlw	59	; case 99
 22447  005370  E0E8               	bz	l15031
 22448  005372  0A07               	xorlw	7	; case 100
 22449  005374  E00B               	bz	l15045
 22450  005376  0A0D               	xorlw	13	; case 105
 22451  005378  E009               	bz	l15045
 22452  00537A  0A05               	xorlw	5	; case 108
 22453  00537C  E094               	bz	l14991
 22454  00537E  0A03               	xorlw	3	; case 111
 22455  005380  E094               	bz	l14993
 22456  005382  0A1A               	xorlw	26	; case 117
 22457  005384  E0EB               	bz	l15039
 22458  005386  0A0D               	xorlw	13	; case 120
 22459  005388  E093               	bz	l1658
 22460  00538A  D7E2               	goto	l15035
 22461  00538C                     l15045:
 22462                           
 22463                           ; BSR set to: 0
 22464                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22465  00538C  5191               	movf	sprintf@flag& (0+255),w,b
 22466  00538E  0BC0               	andlw	192
 22467  005390  E120               	bnz	l1677
 22468                           
 22469                           ; BSR set to: 0
 22470                           ;doprnt.c: 1260: {
 22471                           ;doprnt.c: 1262: if(flag & 0x10)
 22472  005392  A991               	btfss	sprintf@flag& (0+255),4,b
 22473  005394  D003               	goto	l15053
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22477  005396  5187               	movf	sprintf@ap& (0+255),w,b
 22478                           
 22479                           ; BSR set to: 0
 22480  005398  DA46               	call	PL48	;call to abstracted procedure
 22481  00539A  D00D               	goto	L35
 22482  00539C                     l15053:
 22483                           
 22484                           ; BSR set to: 0
 22485                           ;doprnt.c: 1264: else
 22486                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22487  00539C  5187               	movf	sprintf@ap& (0+255),w,b
 22488  00539E  6ED9               	movwf	fsr2l,c
 22489  0053A0  6ADA               	clrf	fsr2h,c
 22490  0053A2  CFDE F08C          	movff	postinc2,sprintf@_val
 22491  0053A6  CFDD F08D          	movff	postdec2,sprintf@_val+1
 22492  0053AA  0E00               	movlw	0
 22493  0053AC  BF8D               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22494  0053AE  0EFF               	movlw	-1
 22495  0053B0  6F8E               	movwf	(sprintf@_val+2)& (0+255),b
 22496  0053B2  6F8F               	movwf	(sprintf@_val+3)& (0+255),b
 22497                           
 22498                           ; BSR set to: 0
 22499  0053B4  0E02               	movlw	2
 22500  0053B6                     L35:
 22501  0053B6  2787               	addwf	sprintf@ap& (0+255),f,b
 22502                           
 22503                           ; BSR set to: 0
 22504                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22505  0053B8  AF8F               	btfss	(sprintf@_val+3)& (0+255),7,b
 22506  0053BA  D01F               	goto	l15071
 22507                           
 22508                           ; BSR set to: 0
 22509                           ;doprnt.c: 1269: flag |= 0x03;
 22510  0053BC  0E03               	movlw	3
 22511  0053BE  1391               	iorwf	sprintf@flag& (0+255),f,b
 22512                           
 22513                           ; BSR set to: 0
 22514                           ;doprnt.c: 1270: _val._val = -_val._val;
 22515  0053C0  1F8F               	comf	(sprintf@_val+3)& (0+255),f,b
 22516  0053C2  1F8E               	comf	(sprintf@_val+2)& (0+255),f,b
 22517  0053C4  1F8D               	comf	(sprintf@_val+1)& (0+255),f,b
 22518  0053C6  6D8C               	negf	sprintf@_val& (0+255),b
 22519  0053C8  0E00               	movlw	0
 22520  0053CA  238D               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22521  0053CC  238E               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22522  0053CE  238F               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22523  0053D0  D014               	goto	l15071
 22524  0053D2                     l1677:
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;doprnt.c: 1275: else
 22528                           ;doprnt.c: 1280: {
 22529                           ;doprnt.c: 1288: if(flag & 0x10)
 22530  0053D2  A991               	btfss	sprintf@flag& (0+255),4,b
 22531  0053D4  D003               	goto	l15067
 22532                           
 22533                           ; BSR set to: 0
 22534                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22535  0053D6  5187               	movf	sprintf@ap& (0+255),w,b
 22536                           
 22537                           ; BSR set to: 0
 22538  0053D8  DA26               	call	PL48	;call to abstracted procedure
 22539  0053DA  D00E               	goto	L36
 22540  0053DC                     l15067:
 22541                           
 22542                           ; BSR set to: 0
 22543                           ;doprnt.c: 1290: else
 22544                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22545  0053DC  5187               	movf	sprintf@ap& (0+255),w,b
 22546  0053DE  6ED9               	movwf	fsr2l,c
 22547  0053E0  6ADA               	clrf	fsr2h,c
 22548  0053E2  CFDE F07D          	movff	postinc2,??_sprintf
 22549  0053E6  CFDD F07E          	movff	postdec2,??_sprintf+1
 22550  0053EA  C07D  F08C         	movff	??_sprintf,sprintf@_val
 22551  0053EE  C07E  F08D         	movff	??_sprintf+1,sprintf@_val+1
 22552  0053F2  6B8E               	clrf	(sprintf@_val+2)& (0+255),b
 22553  0053F4  6B8F               	clrf	(sprintf@_val+3)& (0+255),b
 22554                           
 22555                           ; BSR set to: 0
 22556  0053F6  0E02               	movlw	2
 22557  0053F8                     L36:
 22558  0053F8  2787               	addwf	sprintf@ap& (0+255),f,b
 22559  0053FA                     l15071:
 22560                           
 22561                           ; BSR set to: 0
 22562                           ;doprnt.c: 1294: }
 22563                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22564  0053FA  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22565  0053FC  1188               	iorwf	sprintf@prec& (0+255),w,b
 22566  0053FE  E15C               	bnz	l15121
 22567                           
 22568                           ; BSR set to: 0
 22569  005400  518F               	movf	(sprintf@_val+3)& (0+255),w,b
 22570  005402  118C               	iorwf	sprintf@_val& (0+255),w,b
 22571  005404  118D               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22572  005406  118E               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22573  005408  E157               	bnz	l15121
 22574                           
 22575                           ; BSR set to: 0
 22576                           ;doprnt.c: 1298: prec++;
 22577  00540A  4B88               	infsnz	sprintf@prec& (0+255),f,b
 22578  00540C  2B89               	incf	(sprintf@prec+1)& (0+255),f,b
 22579  00540E  D054               	goto	l15121
 22580  005410                     l15077:
 22581                           
 22582                           ; BSR set to: 0
 22583                           ;doprnt.c: 1309: case 0xC0:
 22584                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22585  005410  0E01               	movlw	1
 22586  005412  6F90               	movwf	sprintf@c& (0+255),b
 22587  005414                     l15079:
 22588                           
 22589                           ; BSR set to: 0
 22590  005414  5190               	movf	sprintf@c& (0+255),w,b
 22591  005416  0A0A               	xorlw	10
 22592  005418  E058               	bz	l15123
 22593                           
 22594                           ; BSR set to: 0
 22595                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22596  00541A  5190               	movf	sprintf@c& (0+255),w,b
 22597  00541C  0D04               	mullw	4
 22598  00541E  0EE0               	movlw	low _dpowers
 22599  005420  24F3               	addwf	prodl,w,c
 22600  005422  6EF6               	movwf	tblptrl,c
 22601  005424  0E6C               	movlw	high _dpowers
 22602  005426  20F4               	addwfc	prodh,w,c
 22603  005428  6EF7               	movwf	tblptrh,c
 22604  00542A  0009               	tblrd		*+
 22605  00542C  50F5               	movf	tablat,w,c
 22606  00542E  5D8C               	subwf	sprintf@_val& (0+255),w,b
 22607  005430  0009               	tblrd		*+
 22608  005432  50F5               	movf	tablat,w,c
 22609  005434  598D               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22610  005436  0009               	tblrd		*+
 22611  005438  50F5               	movf	tablat,w,c
 22612  00543A  598E               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22613  00543C  0009               	tblrd		*+
 22614  00543E  50F5               	movf	tablat,w,c
 22615  005440  598F               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22616  005442  E343               	bnc	l15123
 22617                           
 22618                           ; BSR set to: 0
 22619  005444  2B90               	incf	sprintf@c& (0+255),f,b
 22620  005446  D7E6               	goto	l15079
 22621  005448                     l15091:
 22622                           
 22623                           ; BSR set to: 0
 22624                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22625  005448  0E01               	movlw	1
 22626  00544A  6F90               	movwf	sprintf@c& (0+255),b
 22627  00544C                     l15093:
 22628                           
 22629                           ; BSR set to: 0
 22630  00544C  5190               	movf	sprintf@c& (0+255),w,b
 22631  00544E  0A08               	xorlw	8
 22632  005450  E03C               	bz	l15123
 22633                           
 22634                           ; BSR set to: 0
 22635                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22636  005452  5190               	movf	sprintf@c& (0+255),w,b
 22637  005454  0D04               	mullw	4
 22638  005456  0E08               	movlw	low _hexpowers
 22639  005458  24F3               	addwf	prodl,w,c
 22640  00545A  6EF6               	movwf	tblptrl,c
 22641  00545C  0E6D               	movlw	high _hexpowers
 22642  00545E  20F4               	addwfc	prodh,w,c
 22643  005460  6EF7               	movwf	tblptrh,c
 22644  005462  0009               	tblrd		*+
 22645  005464  50F5               	movf	tablat,w,c
 22646  005466  5D8C               	subwf	sprintf@_val& (0+255),w,b
 22647  005468  0009               	tblrd		*+
 22648  00546A  50F5               	movf	tablat,w,c
 22649  00546C  598D               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22650  00546E  0009               	tblrd		*+
 22651  005470  50F5               	movf	tablat,w,c
 22652  005472  598E               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22653  005474  0009               	tblrd		*+
 22654  005476  50F5               	movf	tablat,w,c
 22655  005478  598F               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22656  00547A  E327               	bnc	l15123
 22657                           
 22658                           ; BSR set to: 0
 22659  00547C  2B90               	incf	sprintf@c& (0+255),f,b
 22660  00547E  D7E6               	goto	l15093
 22661  005480                     l15105:
 22662                           
 22663                           ; BSR set to: 0
 22664                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22665  005480  0E01               	movlw	1
 22666  005482  6F90               	movwf	sprintf@c& (0+255),b
 22667  005484                     l15107:
 22668                           
 22669                           ; BSR set to: 0
 22670  005484  5190               	movf	sprintf@c& (0+255),w,b
 22671  005486  0A0C               	xorlw	12
 22672  005488  E020               	bz	l15123
 22673                           
 22674                           ; BSR set to: 0
 22675                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22676  00548A  5190               	movf	sprintf@c& (0+255),w,b
 22677  00548C  0D04               	mullw	4
 22678  00548E  0EB0               	movlw	low _octpowers
 22679  005490  24F3               	addwf	prodl,w,c
 22680  005492  6EF6               	movwf	tblptrl,c
 22681  005494  0E6C               	movlw	high _octpowers
 22682  005496  20F4               	addwfc	prodh,w,c
 22683  005498  6EF7               	movwf	tblptrh,c
 22684  00549A  0009               	tblrd		*+
 22685  00549C  50F5               	movf	tablat,w,c
 22686  00549E  5D8C               	subwf	sprintf@_val& (0+255),w,b
 22687  0054A0  0009               	tblrd		*+
 22688  0054A2  50F5               	movf	tablat,w,c
 22689  0054A4  598D               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22690  0054A6  0009               	tblrd		*+
 22691  0054A8  50F5               	movf	tablat,w,c
 22692  0054AA  598E               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22693  0054AC  0009               	tblrd		*+
 22694  0054AE  50F5               	movf	tablat,w,c
 22695  0054B0  598F               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22696  0054B2  E30B               	bnc	l15123
 22697                           
 22698                           ; BSR set to: 0
 22699  0054B4  2B90               	incf	sprintf@c& (0+255),f,b
 22700  0054B6  D7E6               	goto	l15107
 22701  0054B8                     l15121:
 22702                           
 22703                           ; BSR set to: 0
 22704  0054B8  5191               	movf	sprintf@flag& (0+255),w,b
 22705  0054BA  0BC0               	andlw	192
 22706                           
 22707                           ; Switch size 1, requested type "space"
 22708                           ; Number of cases is 4, Range of values is 0 to 192
 22709                           ; switch strategies available:
 22710                           ; Name         Instructions Cycles
 22711                           ; simple_byte           13     7 (average)
 22712                           ;	Chosen strategy is simple_byte
 22713  0054BC  E0A9               	bz	l15077
 22714  0054BE  0A40               	xorlw	64	; case 64
 22715  0054C0  E0DF               	bz	l15105
 22716  0054C2  0AC0               	xorlw	192	; case 128
 22717  0054C4  E0C1               	bz	l15091
 22718  0054C6  0A40               	xorlw	64	; case 192
 22719  0054C8  E0A3               	bz	l15077
 22720  0054CA                     l15123:
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;doprnt.c: 1346: if(c < prec)
 22724  0054CA  0E80               	movlw	128
 22725  0054CC  BF90               	btfsc	sprintf@c& (0+255),7,b
 22726  0054CE  0E7F               	movlw	127
 22727  0054D0  6F7D               	movwf	??_sprintf& (0+255),b
 22728  0054D2  5188               	movf	sprintf@prec& (0+255),w,b
 22729  0054D4  5D90               	subwf	sprintf@c& (0+255),w,b
 22730  0054D6  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22731  0054D8  0A80               	xorlw	128
 22732  0054DA  597D               	subwfb	??_sprintf& (0+255),w,b
 22733  0054DC  E203               	bc	l15127
 22734                           
 22735                           ; BSR set to: 0
 22736                           ;doprnt.c: 1347: c = prec;
 22737  0054DE  C088  F090         	movff	sprintf@prec,sprintf@c
 22738  0054E2  D00F               	goto	l15131
 22739  0054E4                     l15127:
 22740                           
 22741                           ; BSR set to: 0
 22742                           ;doprnt.c: 1348: else if(prec < c)
 22743  0054E4  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22744  0054E6  0A80               	xorlw	128
 22745  0054E8  6F7D               	movwf	??_sprintf& (0+255),b
 22746  0054EA  5190               	movf	sprintf@c& (0+255),w,b
 22747  0054EC  5D88               	subwf	sprintf@prec& (0+255),w,b
 22748  0054EE  0E80               	movlw	128
 22749  0054F0  BF90               	btfsc	sprintf@c& (0+255),7,b
 22750  0054F2  0E7F               	movlw	127
 22751  0054F4  597D               	subwfb	??_sprintf& (0+255),w,b
 22752  0054F6  E205               	bc	l15131
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;doprnt.c: 1349: prec = c;
 22756  0054F8  5190               	movf	sprintf@c& (0+255),w,b
 22757  0054FA  6F88               	movwf	sprintf@prec& (0+255),b
 22758  0054FC  6B89               	clrf	(sprintf@prec+1)& (0+255),b
 22759  0054FE  BF88               	btfsc	sprintf@prec& (0+255),7,b
 22760  005500  0789               	decf	(sprintf@prec+1)& (0+255),f,b
 22761  005502                     l15131:
 22762                           
 22763                           ; BSR set to: 0
 22764                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22765  005502  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22766  005504  118A               	iorwf	sprintf@width& (0+255),w,b
 22767  005506  E006               	bz	l15137
 22768                           
 22769                           ; BSR set to: 0
 22770  005508  5191               	movf	sprintf@flag& (0+255),w,b
 22771  00550A  0B03               	andlw	3
 22772  00550C  E003               	bz	l15137
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;doprnt.c: 1353: width--;
 22776  00550E  078A               	decf	sprintf@width& (0+255),f,b
 22777  005510  A0D8               	btfss	status,0,c
 22778  005512  078B               	decf	(sprintf@width+1)& (0+255),f,b
 22779  005514                     l15137:
 22780                           
 22781                           ; BSR set to: 0
 22782                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22783  005514  AD92               	btfss	(sprintf@flag+1)& (0+255),6,b
 22784  005516  D010               	goto	l15143
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;doprnt.c: 1356: if(width > prec)
 22788  005518  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22789  00551A  0A80               	xorlw	128
 22790  00551C  6F7D               	movwf	??_sprintf& (0+255),b
 22791  00551E  518A               	movf	sprintf@width& (0+255),w,b
 22792  005520  5D88               	subwf	sprintf@prec& (0+255),w,b
 22793  005522  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22794  005524  0A80               	xorlw	128
 22795  005526  597D               	subwfb	??_sprintf& (0+255),w,b
 22796  005528  E205               	bc	l1705
 22797                           
 22798                           ; BSR set to: 0
 22799                           ;doprnt.c: 1357: width -= prec;
 22800  00552A  5188               	movf	sprintf@prec& (0+255),w,b
 22801  00552C  5F8A               	subwf	sprintf@width& (0+255),f,b
 22802  00552E  5189               	movf	(sprintf@prec+1)& (0+255),w,b
 22803  005530  5B8B               	subwfb	(sprintf@width+1)& (0+255),f,b
 22804  005532  D002               	goto	l15143
 22805  005534                     l1705:
 22806                           
 22807                           ; BSR set to: 0
 22808                           ;doprnt.c: 1358: else
 22809                           ;doprnt.c: 1359: width = 0;
 22810  005534  6B8A               	clrf	sprintf@width& (0+255),b
 22811  005536  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22812  005538                     l15143:
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;doprnt.c: 1360: }
 22816                           ;doprnt.c: 1364: if((flag & (
 22817                           ;doprnt.c: 1366: 0x04|
 22818                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22819  005538  0EC4               	movlw	196
 22820  00553A  D94D               	call	PL14	;call to abstracted procedure
 22821  00553C  0E40               	movlw	64
 22822  00553E  B4D8               	btfsc	status,2,c
 22823  005540  197D               	xorwf	??_sprintf& (0+255),w,b
 22824  005542  E107               	bnz	l15149
 22825                           
 22826                           ; BSR set to: 0
 22827                           ;doprnt.c: 1369: if(width)
 22828  005544  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22829  005546  118A               	iorwf	sprintf@width& (0+255),w,b
 22830  005548  E018               	bz	l15155
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;doprnt.c: 1370: width--;
 22834  00554A  078A               	decf	sprintf@width& (0+255),f,b
 22835  00554C  A0D8               	btfss	status,0,c
 22836  00554E  078B               	decf	(sprintf@width+1)& (0+255),f,b
 22837  005550  D014               	goto	l15155
 22838  005552                     l15149:
 22839                           
 22840                           ; BSR set to: 0
 22841                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22842  005552  0EC0               	movlw	192
 22843  005554  D940               	call	PL14	;call to abstracted procedure
 22844  005556  0E80               	movlw	128
 22845  005558  B4D8               	btfsc	status,2,c
 22846  00555A  197D               	xorwf	??_sprintf& (0+255),w,b
 22847  00555C  E10E               	bnz	l15155
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;doprnt.c: 1379: if(width > 2)
 22851  00555E  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22852  005560  0A80               	xorlw	128
 22853  005562  0F80               	addlw	-128
 22854  005564  0E03               	movlw	3
 22855  005566  B4D8               	btfsc	status,2,c
 22856  005568  5D8A               	subwf	sprintf@width& (0+255),w,b
 22857  00556A  E305               	bnc	l1711
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;doprnt.c: 1380: width -= 2;
 22861  00556C  0EFE               	movlw	254
 22862  00556E  278A               	addwf	sprintf@width& (0+255),f,b
 22863  005570  0EFF               	movlw	255
 22864  005572  238B               	addwfc	(sprintf@width+1)& (0+255),f,b
 22865  005574  D002               	goto	l15155
 22866  005576                     l1711:
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;doprnt.c: 1381: else
 22870                           ;doprnt.c: 1382: width = 0;
 22871  005576  6B8A               	clrf	sprintf@width& (0+255),b
 22872  005578  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22873  00557A                     l15155:
 22874                           
 22875                           ; BSR set to: 0
 22876                           ;doprnt.c: 1383: }
 22877                           ;doprnt.c: 1388: if(width > c)
 22878  00557A  0E80               	movlw	128
 22879  00557C  BF90               	btfsc	sprintf@c& (0+255),7,b
 22880  00557E  0E7F               	movlw	127
 22881  005580  6F7D               	movwf	??_sprintf& (0+255),b
 22882  005582  518A               	movf	sprintf@width& (0+255),w,b
 22883  005584  5D90               	subwf	sprintf@c& (0+255),w,b
 22884  005586  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22885  005588  0A80               	xorlw	128
 22886  00558A  597D               	subwfb	??_sprintf& (0+255),w,b
 22887  00558C  E207               	bc	l1713
 22888                           
 22889                           ; BSR set to: 0
 22890                           ;doprnt.c: 1389: width -= c;
 22891  00558E  5190               	movf	sprintf@c& (0+255),w,b
 22892  005590  5F8A               	subwf	sprintf@width& (0+255),f,b
 22893  005592  0E00               	movlw	0
 22894  005594  BF90               	btfsc	sprintf@c& (0+255),7,b
 22895  005596  0EFF               	movlw	255
 22896  005598  5B8B               	subwfb	(sprintf@width+1)& (0+255),f,b
 22897  00559A  D002               	goto	l1714
 22898  00559C                     l1713:
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;doprnt.c: 1390: else
 22902                           ;doprnt.c: 1391: width = 0;
 22903  00559C  6B8A               	clrf	sprintf@width& (0+255),b
 22904  00559E  6B8B               	clrf	(sprintf@width+1)& (0+255),b
 22905  0055A0                     l1714:
 22906                           
 22907                           ; BSR set to: 0
 22908                           ;doprnt.c: 1394: if(flag & 0x04) {
 22909  0055A0  A591               	btfss	sprintf@flag& (0+255),2,b
 22910  0055A2  D03C               	goto	l15193
 22911                           
 22912                           ; BSR set to: 0
 22913                           ;doprnt.c: 1399: if(flag & 0x03)
 22914  0055A4  5191               	movf	sprintf@flag& (0+255),w,b
 22915  0055A6  0B03               	andlw	3
 22916  0055A8  E009               	bz	l1716
 22917                           
 22918                           ; BSR set to: 0
 22919                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22920  0055AA  C075  FFD9         	movff	sprintf@sp,fsr2l
 22921  0055AE  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 22922  0055B2  0E2D               	movlw	45
 22923  0055B4  6EDF               	movwf	indf2,c
 22924  0055B6                     l15163:
 22925                           
 22926                           ; BSR set to: 0
 22927  0055B6  4B75               	infsnz	sprintf@sp& (0+255),f,b
 22928  0055B8  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 22929  0055BA  D022               	goto	l15185
 22930  0055BC                     l1716:
 22931                           
 22932                           ; BSR set to: 0
 22933                           ;doprnt.c: 1403: else
 22934                           ;doprnt.c: 1406: if(flag & 0x01)
 22935  0055BC  A191               	btfss	sprintf@flag& (0+255),0,b
 22936  0055BE  D006               	goto	l15169
 22937                           
 22938                           ; BSR set to: 0
 22939                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22940  0055C0  C075  FFD9         	movff	sprintf@sp,fsr2l
 22941  0055C4  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 22942  0055C8  0E20               	movlw	32
 22943  0055CA  D7F4               	goto	L37
 22944  0055CC                     l15169:
 22945                           
 22946                           ; BSR set to: 0
 22947                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22948  0055CC  0EC0               	movlw	192
 22949  0055CE  D903               	call	PL14	;call to abstracted procedure
 22950  0055D0  0E80               	movlw	128
 22951  0055D2  B4D8               	btfsc	status,2,c
 22952  0055D4  197D               	xorwf	??_sprintf& (0+255),w,b
 22953  0055D6  E114               	bnz	l15185
 22954                           
 22955                           ; BSR set to: 0
 22956                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22957  0055D8  C075  FFD9         	movff	sprintf@sp,fsr2l
 22958  0055DC  D94A               	call	PL82	;call to abstracted procedure
 22959                           
 22960                           ; BSR set to: 0
 22961  0055DE  4B75               	infsnz	sprintf@sp& (0+255),f,b
 22962  0055E0  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 22963                           
 22964                           ; BSR set to: 0
 22965                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22966  0055E2  BB91               	btfsc	sprintf@flag& (0+255),5,b
 22967  0055E4  D003               	goto	l15179
 22968                           
 22969                           ; BSR set to: 0
 22970  0055E6  6B82               	clrf	(_sprintf$2024+1)& (0+255),b
 22971  0055E8  0E78               	movlw	120
 22972  0055EA  D002               	goto	L38
 22973  0055EC                     l15179:
 22974                           
 22975                           ; BSR set to: 0
 22976  0055EC  6B82               	clrf	(_sprintf$2024+1)& (0+255),b
 22977  0055EE  0E58               	movlw	88
 22978  0055F0                     L38:
 22979  0055F0  6F81               	movwf	_sprintf$2024& (0+255),b
 22980                           
 22981                           ; BSR set to: 0
 22982  0055F2  C075  FFD9         	movff	sprintf@sp,fsr2l
 22983  0055F6  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 22984  0055FA  C081  FFDF         	movff	_sprintf$2024,indf2
 22985  0055FE  D7DB               	goto	l15163
 22986  005600                     l15185:
 22987                           
 22988                           ; BSR set to: 0
 22989                           ;doprnt.c: 1419: }
 22990                           ;doprnt.c: 1422: if(width)
 22991  005600  518B               	movf	(sprintf@width+1)& (0+255),w,b
 22992  005602  118A               	iorwf	sprintf@width& (0+255),w,b
 22993  005604  E101 D0B9          	bz	l15257
 22994                           
 22995                           ; BSR set to: 0
 22996                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22997  005608  C075  FFD9         	movff	sprintf@sp,fsr2l
 22998  00560C  D932               	call	PL82	;call to abstracted procedure
 22999                           
 23000                           ; BSR set to: 0
 23001  00560E  4B75               	infsnz	sprintf@sp& (0+255),f,b
 23002  005610  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;doprnt.c: 1425: while(--width);
 23006  005612  078A               	decf	sprintf@width& (0+255),f,b
 23007  005614  A0D8               	btfss	status,0,c
 23008  005616  078B               	decf	(sprintf@width+1)& (0+255),f,b
 23009  005618  0100               	movlb	0	; () banked
 23010  00561A  D7F2               	goto	l15185
 23011  00561C                     l15193:
 23012                           
 23013                           ; BSR set to: 0
 23014                           ;doprnt.c: 1429: {
 23015                           ;doprnt.c: 1431: if(width
 23016                           ;doprnt.c: 1433: && !(flag & 0x08)
 23017                           ;doprnt.c: 1435: )
 23018  00561C  518B               	movf	(sprintf@width+1)& (0+255),w,b
 23019  00561E  118A               	iorwf	sprintf@width& (0+255),w,b
 23020  005620  A4D8               	btfss	status,2,c
 23021                           
 23022                           ; BSR set to: 0
 23023  005622  B791               	btfsc	sprintf@flag& (0+255),3,b
 23024  005624  D004               	goto	l15203
 23025  005626                     l15197:
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23029  005626  C075  FFD9         	movff	sprintf@sp,fsr2l
 23030                           
 23031                           ; BSR set to: 0
 23032                           
 23033                           ; BSR set to: 0
 23034                           ;doprnt.c: 1438: while(--width);
 23035  00562A  D8F0               	call	PL36	;call to abstracted procedure
 23036  00562C  E1FC               	bnz	l15197
 23037  00562E                     l15203:
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;doprnt.c: 1445: if(flag & 0x03)
 23041  00562E  5191               	movf	sprintf@flag& (0+255),w,b
 23042  005630  0B03               	andlw	3
 23043  005632  E009               	bz	l1732
 23044                           
 23045                           ; BSR set to: 0
 23046                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23047  005634  C075  FFD9         	movff	sprintf@sp,fsr2l
 23048  005638  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23049  00563C  0E2D               	movlw	45
 23050  00563E  6EDF               	movwf	indf2,c
 23051                           
 23052                           ; BSR set to: 0
 23053  005640  4B75               	infsnz	sprintf@sp& (0+255),f,b
 23054  005642  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 23055  005644  D008               	goto	l15213
 23056  005646                     l1732:
 23057                           
 23058                           ; BSR set to: 0
 23059                           ;doprnt.c: 1450: else if(flag & 0x01)
 23060  005646  A191               	btfss	sprintf@flag& (0+255),0,b
 23061  005648  D006               	goto	l15213
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23065  00564A  C075  FFD9         	movff	sprintf@sp,fsr2l
 23066  00564E  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23067  005652  0E20               	movlw	32
 23068  005654  D7F4               	goto	L39
 23069  005656                     l15213:
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23073  005656  0EC0               	movlw	192
 23074  005658  D8BE               	call	PL14	;call to abstracted procedure
 23075  00565A  0E40               	movlw	64
 23076  00565C  B4D8               	btfsc	status,2,c
 23077  00565E  197D               	xorwf	??_sprintf& (0+255),w,b
 23078  005660  E106               	bnz	l15219
 23079                           
 23080                           ; BSR set to: 0
 23081                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23082  005662  C075  FFD9         	movff	sprintf@sp,fsr2l
 23083  005666  D905               	call	PL82	;call to abstracted procedure
 23084  005668                     l15217:
 23085                           
 23086                           ; BSR set to: 0
 23087  005668  4B75               	infsnz	sprintf@sp& (0+255),f,b
 23088  00566A  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 23089  00566C  D086               	goto	l15257
 23090  00566E                     l15219:
 23091                           
 23092                           ; BSR set to: 0
 23093                           ;doprnt.c: 1457: else
 23094                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23095  00566E  0EC0               	movlw	192
 23096  005670  D8B2               	call	PL14	;call to abstracted procedure
 23097  005672  0E80               	movlw	128
 23098  005674  B4D8               	btfsc	status,2,c
 23099  005676  197D               	xorwf	??_sprintf& (0+255),w,b
 23100  005678  E001 D07F          	bnz	l15257
 23101                           
 23102                           ; BSR set to: 0
 23103                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23104  00567C  C075  FFD9         	movff	sprintf@sp,fsr2l
 23105  005680  D8F8               	call	PL82	;call to abstracted procedure
 23106                           
 23107                           ; BSR set to: 0
 23108  005682  4B75               	infsnz	sprintf@sp& (0+255),f,b
 23109  005684  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 23110                           
 23111                           ; BSR set to: 0
 23112                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23113  005686  BB91               	btfsc	sprintf@flag& (0+255),5,b
 23114  005688  D003               	goto	l15229
 23115                           
 23116                           ; BSR set to: 0
 23117  00568A  6B84               	clrf	(_sprintf$2025+1)& (0+255),b
 23118  00568C  0E78               	movlw	120
 23119  00568E  D002               	goto	L40
 23120  005690                     l15229:
 23121                           
 23122                           ; BSR set to: 0
 23123  005690  6B84               	clrf	(_sprintf$2025+1)& (0+255),b
 23124  005692  0E58               	movlw	88
 23125  005694                     L40:
 23126  005694  6F83               	movwf	_sprintf$2025& (0+255),b
 23127                           
 23128                           ; BSR set to: 0
 23129  005696  C075  FFD9         	movff	sprintf@sp,fsr2l
 23130  00569A  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23131  00569E  C083  FFDF         	movff	_sprintf$2025,indf2
 23132  0056A2  D7E2               	goto	l15217
 23133  0056A4                     l15235:
 23134                           
 23135                           ; BSR set to: 0
 23136                           ;doprnt.c: 1493: case 0xC0:
 23137                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23138  0056A4  C088  F07D         	movff	sprintf@prec,??_sprintf
 23139  0056A8  C089  F07E         	movff	sprintf@prec+1,??_sprintf+1
 23140  0056AC  90D8               	bcf	status,0,c
 23141  0056AE  377D               	rlcf	??_sprintf& (0+255),f,b
 23142  0056B0  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
 23143  0056B2  90D8               	bcf	status,0,c
 23144  0056B4  377D               	rlcf	??_sprintf& (0+255),f,b
 23145  0056B6  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
 23146  0056B8  0EE0               	movlw	low _dpowers
 23147  0056BA  257D               	addwf	??_sprintf& (0+255),w,b
 23148  0056BC  6EF6               	movwf	tblptrl,c
 23149  0056BE  0E6C               	movlw	high _dpowers
 23150  0056C0  D87B               	call	PL10	;call to abstracted procedure
 23151  0056C2  C08C  F060         	movff	sprintf@_val,?___lldiv
 23152  0056C6  C08D  F061         	movff	sprintf@_val+1,?___lldiv+1
 23153  0056CA  C08E  F062         	movff	sprintf@_val+2,?___lldiv+2
 23154  0056CE  C08F  F063         	movff	sprintf@_val+3,?___lldiv+3
 23155  0056D2  EC26  F010         	call	___lldiv	;wreg free
 23156  0056D6  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23157  0056DA  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23158  0056DE  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23159  0056E2  C060  F06D         	movff	?___lldiv,?___llmod
 23160  0056E6  0E0A               	movlw	10
 23161  0056E8  6F71               	movwf	(?___llmod+4)& (0+255),b
 23162  0056EA  0E00               	movlw	0
 23163  0056EC  6B72               	clrf	(?___llmod+5)& (0+255),b
 23164  0056EE  6B73               	clrf	(?___llmod+6)& (0+255),b
 23165  0056F0  6B74               	clrf	(?___llmod+7)& (0+255),b
 23166  0056F2  ECB5  F00E         	call	___llmod	;wreg free
 23167  0056F6  516D               	movf	?___llmod& (0+255),w,b
 23168  0056F8  D02D               	goto	L41
 23169  0056FA                     l15237:
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;doprnt.c: 1506: {
 23173                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23174  0056FA  D875               	call	PL18	;call to abstracted procedure
 23175  0056FC  0E08               	movlw	low _hexpowers
 23176  0056FE  257D               	addwf	??_sprintf& (0+255),w,b
 23177  005700  6EF6               	movwf	tblptrl,c
 23178  005702  0E6D               	movlw	high _hexpowers
 23179  005704  D859               	call	PL10	;call to abstracted procedure
 23180  005706  EC26  F010         	call	___lldiv	;wreg free
 23181  00570A  5160               	movf	?___lldiv& (0+255),w,b
 23182  00570C  0B0F               	andlw	15
 23183  00570E  6F80               	movwf	sprintf@idx& (0+255),b
 23184                           
 23185                           ; BSR set to: 0
 23186                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23187  005710  BB91               	btfsc	sprintf@flag& (0+255),5,b
 23188  005712  D004               	goto	l15243
 23189                           
 23190                           ; BSR set to: 0
 23191  005714  0E7B               	movlw	high STR_264
 23192  005716  6F86               	movwf	(_sprintf$2031+1)& (0+255),b
 23193  005718  0E2D               	movlw	low STR_264
 23194  00571A  D003               	goto	L42
 23195  00571C                     l15243:
 23196                           
 23197                           ; BSR set to: 0
 23198  00571C  0E7B               	movlw	high STR_263
 23199  00571E  6F86               	movwf	(_sprintf$2031+1)& (0+255),b
 23200  005720  0E1C               	movlw	low STR_263
 23201  005722                     L42:
 23202  005722  6F85               	movwf	_sprintf$2031& (0+255),b
 23203                           
 23204                           ; BSR set to: 0
 23205  005724  5180               	movf	sprintf@idx& (0+255),w,b
 23206  005726  2585               	addwf	_sprintf$2031& (0+255),w,b
 23207  005728  6F7D               	movwf	??_sprintf& (0+255),b
 23208  00572A  0E00               	movlw	0
 23209  00572C  2186               	addwfc	(_sprintf$2031+1)& (0+255),w,b
 23210  00572E  6F7E               	movwf	(??_sprintf+1)& (0+255),b
 23211  005730  C07D  FFF6         	movff	??_sprintf,tblptrl
 23212  005734  C07E  FFF7         	movff	??_sprintf+1,tblptrh
 23213  005738  0008               	tblrd		*
 23214  00573A  CFF5 F090          	movff	tablat,sprintf@c
 23215                           
 23216                           ;doprnt.c: 1515: }
 23217                           ;doprnt.c: 1517: break;
 23218  00573E  D016               	goto	l15253
 23219  005740                     l15247:
 23220                           
 23221                           ; BSR set to: 0
 23222                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23223  005740  D852               	call	PL18	;call to abstracted procedure
 23224  005742  0EB0               	movlw	low _octpowers
 23225  005744  257D               	addwf	??_sprintf& (0+255),w,b
 23226  005746  6EF6               	movwf	tblptrl,c
 23227  005748  0E6C               	movlw	high _octpowers
 23228  00574A  D836               	call	PL10	;call to abstracted procedure
 23229  00574C  EC26  F010         	call	___lldiv	;wreg free
 23230  005750  5160               	movf	?___lldiv& (0+255),w,b
 23231  005752  0B07               	andlw	7
 23232  005754                     L41:
 23233  005754  0F30               	addlw	48
 23234  005756  6F90               	movwf	sprintf@c& (0+255),b
 23235                           
 23236                           ;doprnt.c: 1527: break;
 23237  005758  D009               	goto	l15253
 23238  00575A                     l15251:
 23239                           
 23240                           ; BSR set to: 0
 23241  00575A  5191               	movf	sprintf@flag& (0+255),w,b
 23242  00575C  0BC0               	andlw	192
 23243                           
 23244                           ; Switch size 1, requested type "space"
 23245                           ; Number of cases is 4, Range of values is 0 to 192
 23246                           ; switch strategies available:
 23247                           ; Name         Instructions Cycles
 23248                           ; simple_byte           13     7 (average)
 23249                           ;	Chosen strategy is simple_byte
 23250  00575E  E0A2               	bz	l15235
 23251  005760  0A40               	xorlw	64	; case 64
 23252  005762  E0EE               	bz	l15247
 23253  005764  0AC0               	xorlw	192	; case 128
 23254  005766  E0C9               	bz	l15237
 23255  005768  0A40               	xorlw	64	; case 192
 23256  00576A  E09C               	bz	l15235
 23257  00576C                     l15253:
 23258                           
 23259                           ; BSR set to: 0
 23260                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23261  00576C  C075  FFD9         	movff	sprintf@sp,fsr2l
 23262  005770  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23263  005774  C090  FFDF         	movff	sprintf@c,indf2
 23264  005778  D777               	goto	l15217
 23265  00577A                     l15257:
 23266                           
 23267                           ; BSR set to: 0
 23268  00577A  0788               	decf	sprintf@prec& (0+255),f,b
 23269  00577C  A0D8               	btfss	status,0,c
 23270  00577E  0789               	decf	(sprintf@prec+1)& (0+255),f,b
 23271  005780  0100               	movlb	0	; () banked
 23272  005782  2988               	incf	sprintf@prec& (0+255),w,b
 23273  005784  B4D8               	btfsc	status,2,c
 23274  005786  2989               	incf	(sprintf@prec+1)& (0+255),w,b
 23275  005788  E1E8               	bnz	l15251
 23276                           
 23277                           ; BSR set to: 0
 23278                           ;doprnt.c: 1532: }
 23279                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23280  00578A  A791               	btfss	sprintf@flag& (0+255),3,b
 23281  00578C  D00B               	goto	l15267
 23282                           
 23283                           ; BSR set to: 0
 23284  00578E  518B               	movf	(sprintf@width+1)& (0+255),w,b
 23285  005790  0A80               	xorlw	128
 23286  005792  0F80               	addlw	-128
 23287  005794  0E01               	movlw	1
 23288  005796  B4D8               	btfsc	status,2,c
 23289  005798  5D8A               	subwf	sprintf@width& (0+255),w,b
 23290  00579A  E304               	bnc	l15267
 23291  00579C                     l15261:
 23292                           
 23293                           ; BSR set to: 0
 23294                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23295  00579C  C075  FFD9         	movff	sprintf@sp,fsr2l
 23296                           
 23297                           ; BSR set to: 0
 23298                           
 23299                           ; BSR set to: 0
 23300                           ;doprnt.c: 1538: while(--width);
 23301  0057A0  D835               	call	PL36	;call to abstracted procedure
 23302  0057A2  E1FC               	bnz	l15261
 23303  0057A4                     l15267:
 23304                           
 23305                           ; BSR set to: 0
 23306  0057A4  D84B               	call	PL54	;call to abstracted procedure
 23307  0057A6  6790               	tstfsz	sprintf@c& (0+255),b
 23308  0057A8  D4D1               	goto	l14933
 23309  0057AA                     l15269:
 23310                           
 23311                           ; BSR set to: 0
 23312                           ;doprnt.c: 1545: *sp = 0;
 23313  0057AA  C075  FFD9         	movff	sprintf@sp,fsr2l
 23314  0057AE  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23315  0057B2  0E00               	movlw	0
 23316  0057B4  6EDF               	movwf	indf2,c
 23317                           
 23318                           ; BSR set to: 0
 23319  0057B6  0C00               	retlw	0
 23320  0057B8                     __end_of_sprintf:
 23321                           	opt stack 0
 23322  0057B8                     PL10:
 23323                           	opt stack 24
 23324  0057B8  217E               	addwfc	(??_sprintf+1)& (0+255),w,b
 23325  0057BA  6EF7               	movwf	tblptrh,c
 23326  0057BC  0009               	tblrd		*+
 23327  0057BE  CFF5 F064          	movff	tablat,?___lldiv+4
 23328  0057C2  0009               	tblrd		*+
 23329  0057C4  CFF5 F065          	movff	tablat,?___lldiv+5
 23330  0057C8  0009               	tblrd		*+
 23331  0057CA  CFF5 F066          	movff	tablat,?___lldiv+6
 23332  0057CE  000A               	tblrd		*-
 23333  0057D0  CFF5 F067          	movff	tablat,?___lldiv+7
 23334  0057D4  0012               	return	
 23335  0057D6                     __end_ofPL10:
 23336                           	opt stack 0
 23337  0057D6                     PL14:
 23338                           	opt stack 24
 23339  0057D6  1591               	andwf	sprintf@flag& (0+255),w,b
 23340  0057D8  6F7D               	movwf	??_sprintf& (0+255),b
 23341  0057DA  0E08               	movlw	8
 23342  0057DC  1592               	andwf	(sprintf@flag+1)& (0+255),w,b
 23343  0057DE  6F7E               	movwf	(??_sprintf+1)& (0+255),b
 23344  0057E0  517E               	movf	(??_sprintf+1)& (0+255),w,b
 23345  0057E2  0A08               	xorlw	8
 23346  0057E4  0012               	return	
 23347  0057E6                     __end_ofPL14:
 23348                           	opt stack 0
 23349  0057E6                     PL18:
 23350                           	opt stack 24
 23351  0057E6  C08C  F060         	movff	sprintf@_val,?___lldiv
 23352  0057EA  C08D  F061         	movff	sprintf@_val+1,?___lldiv+1
 23353  0057EE  C08E  F062         	movff	sprintf@_val+2,?___lldiv+2
 23354  0057F2  C08F  F063         	movff	sprintf@_val+3,?___lldiv+3
 23355  0057F6  C088  F07D         	movff	sprintf@prec,??_sprintf
 23356  0057FA  C089  F07E         	movff	sprintf@prec+1,??_sprintf+1
 23357  0057FE  90D8               	bcf	status,0,c
 23358  005800  377D               	rlcf	??_sprintf& (0+255),f,b
 23359  005802  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
 23360  005804  90D8               	bcf	status,0,c
 23361  005806  377D               	rlcf	??_sprintf& (0+255),f,b
 23362  005808  377E               	rlcf	(??_sprintf+1)& (0+255),f,b
 23363  00580A  0012               	return	
 23364  00580C                     __end_ofPL18:
 23365                           	opt stack 0
 23366  00580C                     PL36:
 23367                           	opt stack 24
 23368  00580C  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23369  005810  0E20               	movlw	32
 23370  005812  6EDF               	movwf	indf2,c
 23371  005814  4B75               	infsnz	sprintf@sp& (0+255),f,b
 23372  005816  2B76               	incf	(sprintf@sp+1)& (0+255),f,b
 23373  005818  078A               	decf	sprintf@width& (0+255),f,b
 23374  00581A  A0D8               	btfss	status,0,c
 23375  00581C  078B               	decf	(sprintf@width+1)& (0+255),f,b
 23376  00581E  0100               	movlb	0	; () banked
 23377  005820  518B               	movf	(sprintf@width+1)& (0+255),w,b
 23378  005822  118A               	iorwf	sprintf@width& (0+255),w,b
 23379  005824  0012               	return	
 23380  005826                     __end_ofPL36:
 23381                           	opt stack 0
 23382  005826                     PL48:
 23383                           	opt stack 24
 23384  005826  6ED9               	movwf	fsr2l,c
 23385  005828  6ADA               	clrf	fsr2h,c
 23386  00582A  CFDE F08C          	movff	postinc2,sprintf@_val
 23387  00582E  CFDE F08D          	movff	postinc2,sprintf@_val+1
 23388  005832  CFDE F08E          	movff	postinc2,sprintf@_val+2
 23389  005836  CFDE F08F          	movff	postinc2,sprintf@_val+3
 23390  00583A  0C04               	retlw	4
 23391  00583C                     __end_ofPL48:
 23392                           	opt stack 0
 23393  00583C                     PL54:
 23394                           	opt stack 24
 23395  00583C  C077  FFF6         	movff	sprintf@f,tblptrl
 23396  005840  C078  FFF7         	movff	sprintf@f+1,tblptrh
 23397  005844  4B77               	infsnz	sprintf@f& (0+255),f,b
 23398  005846  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 23399  005848  0008               	tblrd		*
 23400  00584A  CFF5 F090          	movff	tablat,sprintf@c
 23401  00584E  0100               	movlb	0	; () banked
 23402  005850  0012               	return	
 23403  005852                     __end_ofPL54:
 23404                           	opt stack 0
 23405  005852                     PL58:
 23406                           	opt stack 24
 23407  005852  C075  FFD9         	movff	sprintf@sp,fsr2l
 23408  005856  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23409  00585A  0E20               	movlw	32
 23410  00585C  6EDF               	movwf	indf2,c
 23411  00585E  0C20               	retlw	32
 23412  005860                     __end_ofPL58:
 23413                           	opt stack 0
 23414  005860                     PL76:
 23415                           	opt stack 24
 23416  005860  4B77               	infsnz	sprintf@f& (0+255),f,b
 23417  005862  2B78               	incf	(sprintf@f+1)& (0+255),f,b
 23418  005864  C077  FFF6         	movff	sprintf@f,tblptrl
 23419  005868  C078  FFF7         	movff	sprintf@f+1,tblptrh
 23420  00586C  0008               	tblrd		*
 23421  00586E  50F5               	movf	tablat,w,c
 23422  005870  0012               	return	
 23423  005872                     __end_ofPL76:
 23424                           	opt stack 0
 23425  005872                     PL82:
 23426                           	opt stack 24
 23427  005872  C076  FFDA         	movff	sprintf@sp+1,fsr2h
 23428  005876  0E30               	movlw	48
 23429  005878  6EDF               	movwf	indf2,c
 23430  00587A  0C30               	retlw	48
 23431  00587C                     __end_ofPL82:
 23432                           	opt stack 0
 23433  00587C                     PL102:
 23434                           	opt stack 24
 23435  00587C  A0D8               	btfss	status,0,c
 23436  00587E  078B               	decf	(sprintf@width+1)& (0+255),f,b
 23437  005880  0100               	movlb	0	; () banked
 23438  005882  298A               	incf	sprintf@width& (0+255),w,b
 23439  005884  0012               	return	
 23440  005886                     __end_ofPL102:
 23441                           	opt stack 0
 23442                           tblptru	equ	0xFF8
 23443                           tblptrh	equ	0xFF7
 23444                           tblptrl	equ	0xFF6
 23445                           tablat	equ	0xFF5
 23446                           prodh	equ	0xFF4
 23447                           prodl	equ	0xFF3
 23448                           intcon	equ	0xFF2
 23449                           indf0	equ	0xFEF
 23450                           postinc0	equ	0xFEE
 23451                           fsr0h	equ	0xFEA
 23452                           fsr0l	equ	0xFE9
 23453                           wreg	equ	0xFE8
 23454                           indf1	equ	0xFE7
 23455                           postinc1	equ	0xFE6
 23456                           postdec1	equ	0xFE5
 23457                           fsr1h	equ	0xFE2
 23458                           fsr1l	equ	0xFE1
 23459                           indf2	equ	0xFDF
 23460                           postinc2	equ	0xFDE
 23461                           postdec2	equ	0xFDD
 23462                           plusw2	equ	0xFDB
 23463                           fsr2h	equ	0xFDA
 23464                           fsr2l	equ	0xFD9
 23465                           status	equ	0xFD8
 23466                           
 23467 ;; *************** function ___wmul *****************
 23468 ;; Defined at:
 23469 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23470 ;; Parameters:    Size  Location     Type
 23471 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23472 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23473 ;; Auto vars:     Size  Location     Type
 23474 ;;  product         2   32[COMRAM] unsigned int 
 23475 ;; Return value:  Size  Location     Type
 23476 ;;                  2    0[BANK0 ] unsigned int 
 23477 ;; Registers used:
 23478 ;;		wreg, status,2, status,0, prodl, prodh
 23479 ;; Tracked objects:
 23480 ;;		On entry : F/0
 23481 ;;		On exit  : F/0
 23482 ;;		Unchanged: 0/0
 23483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23484 ;;      Params:         0       4       0       0       0       0       0
 23485 ;;      Locals:         2       0       0       0       0       0       0
 23486 ;;      Temps:          0       0       0       0       0       0       0
 23487 ;;      Totals:         2       4       0       0       0       0       0
 23488 ;;Total ram usage:        6 bytes
 23489 ;; Hardware stack levels used:    1
 23490 ;; Hardware stack levels required when called:    3
 23491 ;; This function calls:
 23492 ;;		Nothing
 23493 ;; This function is called by:
 23494 ;;		_sprintf
 23495 ;;		_atoi
 23496 ;; This function uses a non-reentrant model
 23497 ;;
 23498                           
 23499                           	psect	text57
 23500  0017C0                     __ptext57:
 23501                           	opt stack 0
 23502  0017C0                     ___wmul:
 23503                           	opt stack 24
 23504                           
 23505                           ; BSR set to: 0
 23506                           
 23507                           ; BSR set to: 0
 23508                           ;incstack = 0
 23509                           ;incstack = 0
 23510  0017C0  5160               	movf	___wmul@multiplier& (0+255),w,b
 23511  0017C2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23512  0017C4  CFF3 F021          	movff	prodl,___wmul@product
 23513  0017C8  CFF4 F022          	movff	prodh,___wmul@product+1
 23514  0017CC  5160               	movf	___wmul@multiplier& (0+255),w,b
 23515  0017CE  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23516  0017D0  D808               	call	PL84	;call to abstracted procedure
 23517  0017D2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23518  0017D4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23519  0017D6  D805               	call	PL84	;call to abstracted procedure
 23520                           
 23521                           ; BSR set to: 0
 23522  0017D8  C021  F060         	movff	___wmul@product,?___wmul
 23523  0017DC  C022  F061         	movff	___wmul@product+1,?___wmul+1
 23524                           
 23525                           ; BSR set to: 0
 23526  0017E0  0012               	return	
 23527  0017E2                     __end_of___wmul:
 23528                           	opt stack 0
 23529  0017E2                     PL84:
 23530                           	opt stack 24
 23531  0017E2  CFF3 FFF4          	movff	prodl,prodh
 23532  0017E6  6AF3               	clrf	prodl,c
 23533  0017E8  50F3               	movf	prodl,w,c
 23534  0017EA  2621               	addwf	___wmul@product,f,c
 23535  0017EC  50F4               	movf	prodh,w,c
 23536  0017EE  2222               	addwfc	___wmul@product+1,f,c
 23537  0017F0  0012               	return	
 23538  0017F2                     __end_ofPL84:
 23539                           	opt stack 0
 23540                           tblptru	equ	0xFF8
 23541                           tblptrh	equ	0xFF7
 23542                           tblptrl	equ	0xFF6
 23543                           tablat	equ	0xFF5
 23544                           prodh	equ	0xFF4
 23545                           prodl	equ	0xFF3
 23546                           intcon	equ	0xFF2
 23547                           indf0	equ	0xFEF
 23548                           postinc0	equ	0xFEE
 23549                           fsr0h	equ	0xFEA
 23550                           fsr0l	equ	0xFE9
 23551                           wreg	equ	0xFE8
 23552                           indf1	equ	0xFE7
 23553                           postinc1	equ	0xFE6
 23554                           postdec1	equ	0xFE5
 23555                           fsr1h	equ	0xFE2
 23556                           fsr1l	equ	0xFE1
 23557                           indf2	equ	0xFDF
 23558                           postinc2	equ	0xFDE
 23559                           postdec2	equ	0xFDD
 23560                           plusw2	equ	0xFDB
 23561                           fsr2h	equ	0xFDA
 23562                           fsr2l	equ	0xFD9
 23563                           status	equ	0xFD8
 23564                           
 23565 ;; *************** function ___llmod *****************
 23566 ;; Defined at:
 23567 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23568 ;; Parameters:    Size  Location     Type
 23569 ;;  dividend        4   13[BANK0 ] unsigned long 
 23570 ;;  divisor         4   17[BANK0 ] unsigned long 
 23571 ;; Auto vars:     Size  Location     Type
 23572 ;;  counter         1   32[COMRAM] unsigned char 
 23573 ;; Return value:  Size  Location     Type
 23574 ;;                  4   13[BANK0 ] unsigned long 
 23575 ;; Registers used:
 23576 ;;		wreg, status,2, status,0
 23577 ;; Tracked objects:
 23578 ;;		On entry : F/0
 23579 ;;		On exit  : F/0
 23580 ;;		Unchanged: 0/0
 23581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23582 ;;      Params:         0       8       0       0       0       0       0
 23583 ;;      Locals:         1       0       0       0       0       0       0
 23584 ;;      Temps:          0       0       0       0       0       0       0
 23585 ;;      Totals:         1       8       0       0       0       0       0
 23586 ;;Total ram usage:        9 bytes
 23587 ;; Hardware stack levels used:    1
 23588 ;; Hardware stack levels required when called:    3
 23589 ;; This function calls:
 23590 ;;		Nothing
 23591 ;; This function is called by:
 23592 ;;		_sprintf
 23593 ;;		_ultoa
 23594 ;; This function uses a non-reentrant model
 23595 ;;
 23596                           
 23597                           	psect	text58
 23598  001D6A                     __ptext58:
 23599                           	opt stack 0
 23600  001D6A                     ___llmod:
 23601                           	opt stack 23
 23602                           
 23603                           ; BSR set to: 0
 23604                           
 23605                           ; BSR set to: 0
 23606                           ;incstack = 0
 23607                           ;incstack = 0
 23608  001D6A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23609  001D6C  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23610  001D6E  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23611  001D70  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23612  001D72  E023               	bz	l2380
 23613                           
 23614                           ; BSR set to: 0
 23615  001D74  0E01               	movlw	1
 23616  001D76  6E21               	movwf	___llmod@counter,c
 23617  001D78  D006               	goto	l13071
 23618  001D7A                     l13069:
 23619                           
 23620                           ; BSR set to: 0
 23621  001D7A  90D8               	bcf	status,0,c
 23622  001D7C  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23623  001D7E  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23624  001D80  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23625  001D82  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23626  001D84  2A21               	incf	___llmod@counter,f,c
 23627  001D86                     l13071:
 23628                           
 23629                           ; BSR set to: 0
 23630  001D86  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23631  001D88  D7F8               	goto	l13069
 23632  001D8A                     l13073:
 23633                           
 23634                           ; BSR set to: 0
 23635  001D8A  5171               	movf	___llmod@divisor& (0+255),w,b
 23636  001D8C  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23637  001D8E  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23638  001D90  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23639  001D92  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23640  001D94  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23641  001D96  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23642  001D98  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23643  001D9A  E308               	bnc	l13077
 23644                           
 23645                           ; BSR set to: 0
 23646  001D9C  5171               	movf	___llmod@divisor& (0+255),w,b
 23647  001D9E  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23648  001DA0  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23649  001DA2  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23650  001DA4  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23651  001DA6  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23652  001DA8  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23653  001DAA  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23654  001DAC                     l13077:
 23655                           
 23656                           ; BSR set to: 0
 23657  001DAC  90D8               	bcf	status,0,c
 23658  001DAE  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23659  001DB0  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23660  001DB2  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23661  001DB4  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23662                           
 23663                           ; BSR set to: 0
 23664  001DB6  2E21               	decfsz	___llmod@counter,f,c
 23665  001DB8  D7E8               	goto	l13073
 23666  001DBA                     l2380:
 23667                           
 23668                           ; BSR set to: 0
 23669  001DBA  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23670  001DBE  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23671  001DC2  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23672  001DC6  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23673                           
 23674                           ; BSR set to: 0
 23675  001DCA  0012               	return	
 23676  001DCC                     __end_of___llmod:
 23677                           	opt stack 0
 23678                           tblptru	equ	0xFF8
 23679                           tblptrh	equ	0xFF7
 23680                           tblptrl	equ	0xFF6
 23681                           tablat	equ	0xFF5
 23682                           prodh	equ	0xFF4
 23683                           prodl	equ	0xFF3
 23684                           intcon	equ	0xFF2
 23685                           indf0	equ	0xFEF
 23686                           postinc0	equ	0xFEE
 23687                           fsr0h	equ	0xFEA
 23688                           fsr0l	equ	0xFE9
 23689                           wreg	equ	0xFE8
 23690                           indf1	equ	0xFE7
 23691                           postinc1	equ	0xFE6
 23692                           postdec1	equ	0xFE5
 23693                           fsr1h	equ	0xFE2
 23694                           fsr1l	equ	0xFE1
 23695                           indf2	equ	0xFDF
 23696                           postinc2	equ	0xFDE
 23697                           postdec2	equ	0xFDD
 23698                           plusw2	equ	0xFDB
 23699                           fsr2h	equ	0xFDA
 23700                           fsr2l	equ	0xFD9
 23701                           status	equ	0xFD8
 23702                           
 23703 ;; *************** function ___lldiv *****************
 23704 ;; Defined at:
 23705 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23706 ;; Parameters:    Size  Location     Type
 23707 ;;  dividend        4    0[BANK0 ] unsigned long 
 23708 ;;  divisor         4    4[BANK0 ] unsigned long 
 23709 ;; Auto vars:     Size  Location     Type
 23710 ;;  quotient        4    8[BANK0 ] unsigned long 
 23711 ;;  counter         1   12[BANK0 ] unsigned char 
 23712 ;; Return value:  Size  Location     Type
 23713 ;;                  4    0[BANK0 ] unsigned long 
 23714 ;; Registers used:
 23715 ;;		wreg, status,2, status,0
 23716 ;; Tracked objects:
 23717 ;;		On entry : F/0
 23718 ;;		On exit  : F/0
 23719 ;;		Unchanged: 0/0
 23720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23721 ;;      Params:         0       8       0       0       0       0       0
 23722 ;;      Locals:         0       5       0       0       0       0       0
 23723 ;;      Temps:          0       0       0       0       0       0       0
 23724 ;;      Totals:         0      13       0       0       0       0       0
 23725 ;;Total ram usage:       13 bytes
 23726 ;; Hardware stack levels used:    1
 23727 ;; Hardware stack levels required when called:    3
 23728 ;; This function calls:
 23729 ;;		Nothing
 23730 ;; This function is called by:
 23731 ;;		_sprintf
 23732 ;;		_ultoa
 23733 ;; This function uses a non-reentrant model
 23734 ;;
 23735                           
 23736                           	psect	text59
 23737  00204C                     __ptext59:
 23738                           	opt stack 0
 23739  00204C                     ___lldiv:
 23740                           	opt stack 23
 23741                           
 23742                           ; BSR set to: 0
 23743                           
 23744                           ; BSR set to: 0
 23745                           ;incstack = 0
 23746                           ;incstack = 0
 23747  00204C  6B68               	clrf	___lldiv@quotient& (0+255),b
 23748  00204E  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23749  002050  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23750  002052  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23751                           
 23752                           ; BSR set to: 0
 23753  002054  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23754  002056  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23755  002058  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23756  00205A  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23757  00205C  E029               	bz	l2370
 23758                           
 23759                           ; BSR set to: 0
 23760  00205E  0E01               	movlw	1
 23761  002060  6F6C               	movwf	___lldiv@counter& (0+255),b
 23762  002062  D006               	goto	l13051
 23763  002064                     l13049:
 23764                           
 23765                           ; BSR set to: 0
 23766  002064  90D8               	bcf	status,0,c
 23767  002066  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23768  002068  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23769  00206A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23770  00206C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23771  00206E  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23772  002070                     l13051:
 23773                           
 23774                           ; BSR set to: 0
 23775  002070  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23776  002072  D7F8               	goto	l13049
 23777  002074                     l13053:
 23778                           
 23779                           ; BSR set to: 0
 23780  002074  90D8               	bcf	status,0,c
 23781  002076  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23782  002078  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23783  00207A  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23784  00207C  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23785                           
 23786                           ; BSR set to: 0
 23787  00207E  5164               	movf	___lldiv@divisor& (0+255),w,b
 23788  002080  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23789  002082  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23790  002084  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23791  002086  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23792  002088  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23793  00208A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23794  00208C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23795  00208E  E309               	bnc	l13061
 23796                           
 23797                           ; BSR set to: 0
 23798  002090  5164               	movf	___lldiv@divisor& (0+255),w,b
 23799  002092  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23800  002094  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23801  002096  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23802  002098  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23803  00209A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23804  00209C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23805  00209E  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23806                           
 23807                           ; BSR set to: 0
 23808  0020A0  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23809  0020A2                     l13061:
 23810                           
 23811                           ; BSR set to: 0
 23812  0020A2  90D8               	bcf	status,0,c
 23813  0020A4  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23814  0020A6  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23815  0020A8  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23816  0020AA  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23817                           
 23818                           ; BSR set to: 0
 23819  0020AC  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23820  0020AE  D7E2               	goto	l13053
 23821  0020B0                     l2370:
 23822                           
 23823                           ; BSR set to: 0
 23824  0020B0  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23825  0020B4  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23826  0020B8  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23827  0020BC  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23828                           
 23829                           ; BSR set to: 0
 23830  0020C0  0012               	return	
 23831  0020C2                     __end_of___lldiv:
 23832                           	opt stack 0
 23833                           tblptru	equ	0xFF8
 23834                           tblptrh	equ	0xFF7
 23835                           tblptrl	equ	0xFF6
 23836                           tablat	equ	0xFF5
 23837                           prodh	equ	0xFF4
 23838                           prodl	equ	0xFF3
 23839                           intcon	equ	0xFF2
 23840                           indf0	equ	0xFEF
 23841                           postinc0	equ	0xFEE
 23842                           fsr0h	equ	0xFEA
 23843                           fsr0l	equ	0xFE9
 23844                           wreg	equ	0xFE8
 23845                           indf1	equ	0xFE7
 23846                           postinc1	equ	0xFE6
 23847                           postdec1	equ	0xFE5
 23848                           fsr1h	equ	0xFE2
 23849                           fsr1l	equ	0xFE1
 23850                           indf2	equ	0xFDF
 23851                           postinc2	equ	0xFDE
 23852                           postdec2	equ	0xFDD
 23853                           plusw2	equ	0xFDB
 23854                           fsr2h	equ	0xFDA
 23855                           fsr2l	equ	0xFD9
 23856                           status	equ	0xFD8
 23857                           
 23858 ;; *************** function _isdigit *****************
 23859 ;; Defined at:
 23860 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23861 ;; Parameters:    Size  Location     Type
 23862 ;;  c               1    wreg     unsigned char 
 23863 ;; Auto vars:     Size  Location     Type
 23864 ;;  c               1    1[BANK0 ] unsigned char 
 23865 ;; Return value:  Size  Location     Type
 23866 ;;		None               void
 23867 ;; Registers used:
 23868 ;;		wreg, status,2, status,0
 23869 ;; Tracked objects:
 23870 ;;		On entry : 0/0
 23871 ;;		On exit  : F/0
 23872 ;;		Unchanged: 0/0
 23873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23874 ;;      Params:         0       0       0       0       0       0       0
 23875 ;;      Locals:         0       2       0       0       0       0       0
 23876 ;;      Temps:          1       0       0       0       0       0       0
 23877 ;;      Totals:         1       2       0       0       0       0       0
 23878 ;;Total ram usage:        3 bytes
 23879 ;; Hardware stack levels used:    1
 23880 ;; Hardware stack levels required when called:    3
 23881 ;; This function calls:
 23882 ;;		Nothing
 23883 ;; This function is called by:
 23884 ;;		_sprintf
 23885 ;;		_atoi
 23886 ;; This function uses a non-reentrant model
 23887 ;;
 23888                           
 23889                           	psect	text60
 23890  001714                     __ptext60:
 23891                           	opt stack 0
 23892  001714                     _isdigit:
 23893                           	opt stack 24
 23894                           
 23895                           ; BSR set to: 0
 23896                           ;incstack = 0
 23897                           ;incstack = 0
 23898                           ;isdigit@c stored from wreg
 23899  001714  CFE8 F061          	movff	wreg,isdigit@c
 23900  001718  0100               	movlb	0	; () banked
 23901  00171A  6B60               	clrf	_isdigit$2910& (0+255),b
 23902                           
 23903                           ; BSR set to: 0
 23904  00171C  0E3A               	movlw	58
 23905  00171E  6161               	cpfslt	isdigit@c& (0+255),b
 23906  001720  D005               	goto	l16049
 23907                           
 23908                           ; BSR set to: 0
 23909  001722  0E2F               	movlw	47
 23910  001724  6561               	cpfsgt	isdigit@c& (0+255),b
 23911  001726  D002               	goto	l16049
 23912                           
 23913                           ; BSR set to: 0
 23914  001728  0E01               	movlw	1
 23915  00172A  6F60               	movwf	_isdigit$2910& (0+255),b
 23916  00172C                     l16049:
 23917                           
 23918                           ; BSR set to: 0
 23919  00172C  C060  F021         	movff	_isdigit$2910,??_isdigit
 23920  001730  3021               	rrcf	??_isdigit,w,c
 23921                           
 23922                           ; BSR set to: 0
 23923  001732  0012               	return	
 23924  001734                     __end_of_isdigit:
 23925                           	opt stack 0
 23926                           tblptru	equ	0xFF8
 23927                           tblptrh	equ	0xFF7
 23928                           tblptrl	equ	0xFF6
 23929                           tablat	equ	0xFF5
 23930                           prodh	equ	0xFF4
 23931                           prodl	equ	0xFF3
 23932                           intcon	equ	0xFF2
 23933                           indf0	equ	0xFEF
 23934                           postinc0	equ	0xFEE
 23935                           fsr0h	equ	0xFEA
 23936                           fsr0l	equ	0xFE9
 23937                           wreg	equ	0xFE8
 23938                           indf1	equ	0xFE7
 23939                           postinc1	equ	0xFE6
 23940                           postdec1	equ	0xFE5
 23941                           fsr1h	equ	0xFE2
 23942                           fsr1l	equ	0xFE1
 23943                           indf2	equ	0xFDF
 23944                           postinc2	equ	0xFDE
 23945                           postdec2	equ	0xFDD
 23946                           plusw2	equ	0xFDB
 23947                           fsr2h	equ	0xFDA
 23948                           fsr2l	equ	0xFD9
 23949                           status	equ	0xFD8
 23950                           
 23951 ;; *************** function _printFirmwareVersion *****************
 23952 ;; Defined at:
 23953 ;;		line 2793 in file "main.c"
 23954 ;; Parameters:    Size  Location     Type
 23955 ;;		None
 23956 ;; Auto vars:     Size  Location     Type
 23957 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23958 ;; Return value:  Size  Location     Type
 23959 ;;		None               void
 23960 ;; Registers used:
 23961 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23962 ;; Tracked objects:
 23963 ;;		On entry : 0/0
 23964 ;;		On exit  : 0/0
 23965 ;;		Unchanged: 0/0
 23966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23967 ;;      Params:         0       0       0       0       0       0       0
 23968 ;;      Locals:         0      20       0       0       0       0       0
 23969 ;;      Temps:          0       0       0       0       0       0       0
 23970 ;;      Totals:         0      20       0       0       0       0       0
 23971 ;;Total ram usage:       20 bytes
 23972 ;; Hardware stack levels used:    1
 23973 ;; Hardware stack levels required when called:    6
 23974 ;; This function calls:
 23975 ;;		_putsUSART
 23976 ;;		_WriteUSART
 23977 ;;		_itoa
 23978 ;; This function is called by:
 23979 ;;		_main
 23980 ;;		_doModeVerbose
 23981 ;; This function uses a non-reentrant model
 23982 ;;
 23983                           
 23984                           	psect	text61
 23985  002238                     __ptext61:
 23986                           	opt stack 0
 23987  002238                     _printFirmwareVersion:
 23988                           	opt stack 22
 23989                           
 23990                           ;main.c: 2794: char wrkbuf[20];
 23991                           ;main.c: 2795: putsUSART((char *) "Version: ");
 23992                           
 23993                           ; BSR set to: 0
 23994                           ;incstack = 0
 23995                           ;incstack = 0
 23996  002238  0E7B               	movlw	high STR_254
 23997  00223A  0100               	movlb	0	; () banked
 23998  00223C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 23999  00223E  0E9D               	movlw	low STR_254
 24000  002240  6F60               	movwf	?_putsUSART& (0+255),b
 24001  002242  ECFF  F00D         	call	_putsUSART	;wreg free
 24002                           
 24003                           ;main.c: 2796: itoa(wrkbuf, 1, 10);
 24004  002246  D838               	call	PL60	;call to abstracted procedure
 24005  002248  0E01               	movlw	1
 24006  00224A  6F72               	movwf	(?_itoa+2)& (0+255),b
 24007  00224C  6B75               	clrf	(?_itoa+5)& (0+255),b
 24008  00224E  0E0A               	movlw	10
 24009  002250  6F74               	movwf	(?_itoa+4)& (0+255),b
 24010  002252  EC2E  F00C         	call	_itoa	;wreg free
 24011                           
 24012                           ; BSR set to: 0
 24013                           ;main.c: 2797: putsUSART(wrkbuf);
 24014  002256  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24015  002258  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24016  00225A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24017  00225C  6F60               	movwf	?_putsUSART& (0+255),b
 24018  00225E  ECFF  F00D         	call	_putsUSART	;wreg free
 24019  002262                     l1232:
 24020  002262  A2AC               	btfss	4012,1,c	;volatile
 24021  002264  D7FE               	goto	l1232
 24022                           
 24023                           ;main.c: 2799: WriteUSART('.');
 24024  002266  0E2E               	movlw	46
 24025  002268  EC4B  F00B         	call	_WriteUSART
 24026                           
 24027                           ;main.c: 2800: itoa(wrkbuf, 0, 10);
 24028  00226C  D825               	call	PL60	;call to abstracted procedure
 24029  00226E  6B72               	clrf	(?_itoa+2)& (0+255),b
 24030  002270  6B75               	clrf	(?_itoa+5)& (0+255),b
 24031  002272  0E0A               	movlw	10
 24032  002274  6F74               	movwf	(?_itoa+4)& (0+255),b
 24033  002276  EC2E  F00C         	call	_itoa	;wreg free
 24034                           
 24035                           ; BSR set to: 0
 24036                           ;main.c: 2801: putsUSART(wrkbuf);
 24037  00227A  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24038  00227C  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24039  00227E  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24040  002280  6F60               	movwf	?_putsUSART& (0+255),b
 24041  002282  ECFF  F00D         	call	_putsUSART	;wreg free
 24042  002286                     l1235:
 24043  002286  A2AC               	btfss	4012,1,c	;volatile
 24044  002288  D7FE               	goto	l1235
 24045                           
 24046                           ;main.c: 2803: WriteUSART('.');
 24047  00228A  0E2E               	movlw	46
 24048  00228C  EC4B  F00B         	call	_WriteUSART
 24049                           
 24050                           ;main.c: 2804: itoa(wrkbuf, 0, 10);
 24051  002290  D813               	call	PL60	;call to abstracted procedure
 24052  002292  6B72               	clrf	(?_itoa+2)& (0+255),b
 24053  002294  6B75               	clrf	(?_itoa+5)& (0+255),b
 24054  002296  0E0A               	movlw	10
 24055  002298  6F74               	movwf	(?_itoa+4)& (0+255),b
 24056  00229A  EC2E  F00C         	call	_itoa	;wreg free
 24057                           
 24058                           ; BSR set to: 0
 24059                           ;main.c: 2805: putsUSART(wrkbuf);
 24060  00229E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24061  0022A0  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24062  0022A2  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24063  0022A4  6F60               	movwf	?_putsUSART& (0+255),b
 24064  0022A6  ECFF  F00D         	call	_putsUSART	;wreg free
 24065                           
 24066                           ;main.c: 2806: putsUSART((char *) "\r\n");
 24067  0022AA  0E71               	movlw	high (STR_197+50)
 24068  0022AC  0100               	movlb	0	; () banked
 24069  0022AE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24070  0022B0  0EC0               	movlw	low (STR_197+50)
 24071  0022B2  6F60               	movwf	?_putsUSART& (0+255),b
 24072  0022B4  EFFF  F00D         	goto	_putsUSART	;wreg free
 24073  0022B8                     __end_of_printFirmwareVersion:
 24074                           	opt stack 0
 24075  0022B8                     PL60:
 24076                           	opt stack 22
 24077  0022B8  0100               	movlb	0	; () banked
 24078  0022BA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24079  0022BC  6F71               	movwf	(?_itoa+1)& (0+255),b
 24080  0022BE  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24081  0022C0  6F70               	movwf	?_itoa& (0+255),b
 24082  0022C2  6B73               	clrf	(?_itoa+3)& (0+255),b
 24083  0022C4  0012               	return	
 24084  0022C6                     __end_ofPL60:
 24085                           	opt stack 0
 24086                           tblptru	equ	0xFF8
 24087                           tblptrh	equ	0xFF7
 24088                           tblptrl	equ	0xFF6
 24089                           tablat	equ	0xFF5
 24090                           prodh	equ	0xFF4
 24091                           prodl	equ	0xFF3
 24092                           intcon	equ	0xFF2
 24093                           indf0	equ	0xFEF
 24094                           postinc0	equ	0xFEE
 24095                           fsr0h	equ	0xFEA
 24096                           fsr0l	equ	0xFE9
 24097                           wreg	equ	0xFE8
 24098                           indf1	equ	0xFE7
 24099                           postinc1	equ	0xFE6
 24100                           postdec1	equ	0xFE5
 24101                           fsr1h	equ	0xFE2
 24102                           fsr1l	equ	0xFE1
 24103                           indf2	equ	0xFDF
 24104                           postinc2	equ	0xFDE
 24105                           postdec2	equ	0xFDD
 24106                           plusw2	equ	0xFDB
 24107                           fsr2h	equ	0xFDA
 24108                           fsr2l	equ	0xFD9
 24109                           status	equ	0xFD8
 24110                           
 24111 ;; *************** function _itoa *****************
 24112 ;; Defined at:
 24113 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24114 ;; Parameters:    Size  Location     Type
 24115 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24116 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24117 ;;  val             2   18[BANK0 ] int 
 24118 ;;  base            2   20[BANK0 ] int 
 24119 ;; Auto vars:     Size  Location     Type
 24120 ;;  cp              2    0        PTR unsigned char 
 24121 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24122 ;; Return value:  Size  Location     Type
 24123 ;;                  2   16[BANK0 ] PTR unsigned char 
 24124 ;; Registers used:
 24125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24126 ;; Tracked objects:
 24127 ;;		On entry : F/0
 24128 ;;		On exit  : F/0
 24129 ;;		Unchanged: 0/0
 24130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24131 ;;      Params:         0       6       0       0       0       0       0
 24132 ;;      Locals:         0       2       0       0       0       0       0
 24133 ;;      Temps:          0       0       0       0       0       0       0
 24134 ;;      Totals:         0       8       0       0       0       0       0
 24135 ;;Total ram usage:        8 bytes
 24136 ;; Hardware stack levels used:    1
 24137 ;; Hardware stack levels required when called:    5
 24138 ;; This function calls:
 24139 ;;		_utoa
 24140 ;; This function is called by:
 24141 ;;		_receiveSendEventSLCAN
 24142 ;;		_findNodes
 24143 ;;		_printGUID
 24144 ;;		_printNodeFirmwareVersion
 24145 ;;		_printFirmwareVersion
 24146 ;; This function uses a non-reentrant model
 24147 ;;
 24148                           
 24149                           	psect	text62
 24150  00185C                     __ptext62:
 24151                           	opt stack 0
 24152  00185C                     _itoa:
 24153                           	opt stack 22
 24154                           
 24155                           ; BSR set to: 0
 24156                           
 24157                           ;incstack = 0
 24158                           ;incstack = 0
 24159  00185C  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24160  00185E  D00C               	goto	l15931
 24161                           
 24162                           ; BSR set to: 0
 24163  001860  C070  FFD9         	movff	itoa@buf,fsr2l
 24164  001864  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24165  001868  0E2D               	movlw	45
 24166  00186A  6EDF               	movwf	indf2,c
 24167                           
 24168                           ; BSR set to: 0
 24169  00186C  4B70               	infsnz	itoa@buf& (0+255),f,b
 24170  00186E  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24171                           
 24172                           ; BSR set to: 0
 24173  001870  6D72               	negf	itoa@val& (0+255),b
 24174  001872  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24175  001874  B0D8               	btfsc	status,0,c
 24176  001876  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24177  001878                     l15931:
 24178                           
 24179                           ; BSR set to: 0
 24180  001878  C070  F067         	movff	itoa@buf,?_utoa
 24181  00187C  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24182  001880  C072  F069         	movff	itoa@val,?_utoa+2
 24183  001884  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24184  001888  C074  F06B         	movff	itoa@base,?_utoa+4
 24185  00188C  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24186  001890  EF92  F012         	goto	_utoa	;wreg free
 24187  001894                     __end_of_itoa:
 24188                           	opt stack 0
 24189                           tblptru	equ	0xFF8
 24190                           tblptrh	equ	0xFF7
 24191                           tblptrl	equ	0xFF6
 24192                           tablat	equ	0xFF5
 24193                           prodh	equ	0xFF4
 24194                           prodl	equ	0xFF3
 24195                           intcon	equ	0xFF2
 24196                           indf0	equ	0xFEF
 24197                           postinc0	equ	0xFEE
 24198                           fsr0h	equ	0xFEA
 24199                           fsr0l	equ	0xFE9
 24200                           wreg	equ	0xFE8
 24201                           indf1	equ	0xFE7
 24202                           postinc1	equ	0xFE6
 24203                           postdec1	equ	0xFE5
 24204                           fsr1h	equ	0xFE2
 24205                           fsr1l	equ	0xFE1
 24206                           indf2	equ	0xFDF
 24207                           postinc2	equ	0xFDE
 24208                           postdec2	equ	0xFDD
 24209                           plusw2	equ	0xFDB
 24210                           fsr2h	equ	0xFDA
 24211                           fsr2l	equ	0xFD9
 24212                           status	equ	0xFD8
 24213                           
 24214 ;; *************** function _utoa *****************
 24215 ;; Defined at:
 24216 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24217 ;; Parameters:    Size  Location     Type
 24218 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24219 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24220 ;;  val             2    9[BANK0 ] unsigned int 
 24221 ;;  base            2   11[BANK0 ] int 
 24222 ;; Auto vars:     Size  Location     Type
 24223 ;;  v               2   13[BANK0 ] unsigned int 
 24224 ;;  c               1   15[BANK0 ] unsigned char 
 24225 ;; Return value:  Size  Location     Type
 24226 ;;                  2    7[BANK0 ] PTR unsigned char 
 24227 ;; Registers used:
 24228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24229 ;; Tracked objects:
 24230 ;;		On entry : F/0
 24231 ;;		On exit  : F/0
 24232 ;;		Unchanged: 0/0
 24233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24234 ;;      Params:         0       6       0       0       0       0       0
 24235 ;;      Locals:         0       3       0       0       0       0       0
 24236 ;;      Temps:          0       0       0       0       0       0       0
 24237 ;;      Totals:         0       9       0       0       0       0       0
 24238 ;;Total ram usage:        9 bytes
 24239 ;; Hardware stack levels used:    1
 24240 ;; Hardware stack levels required when called:    4
 24241 ;; This function calls:
 24242 ;;		___lwdiv
 24243 ;;		___lwmod
 24244 ;; This function is called by:
 24245 ;;		_itoa
 24246 ;; This function uses a non-reentrant model
 24247 ;;
 24248                           
 24249                           	psect	text63
 24250  002524                     __ptext63:
 24251                           	opt stack 0
 24252  002524                     _utoa:
 24253                           	opt stack 22
 24254                           
 24255                           ; BSR set to: 0
 24256                           
 24257                           ; BSR set to: 0
 24258                           ;incstack = 0
 24259                           ;incstack = 0
 24260  002524  C069  F06D         	movff	utoa@val,utoa@v
 24261  002528  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24262  00252C                     l16055:
 24263                           
 24264                           ; BSR set to: 0
 24265  00252C  C06D  F060         	movff	utoa@v,?___lwdiv
 24266  002530  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24267  002534  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24268  002538  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24269  00253C  EC8E  F00D         	call	___lwdiv	;wreg free
 24270  002540  C060  F06D         	movff	?___lwdiv,utoa@v
 24271  002544  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24272                           
 24273                           ; BSR set to: 0
 24274  002548  4B67               	infsnz	utoa@buf& (0+255),f,b
 24275  00254A  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24276                           
 24277                           ; BSR set to: 0
 24278  00254C  516E               	movf	(utoa@v+1)& (0+255),w,b
 24279  00254E  116D               	iorwf	utoa@v& (0+255),w,b
 24280  002550  E1ED               	bnz	l16055
 24281                           
 24282                           ; BSR set to: 0
 24283  002552  C067  FFD9         	movff	utoa@buf,fsr2l
 24284  002556  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24285  00255A  0E00               	movlw	0
 24286  00255C  6ADF               	clrf	indf2,c
 24287                           
 24288                           ; BSR set to: 0
 24289  00255E  0767               	decf	utoa@buf& (0+255),f,b
 24290  002560  A0D8               	btfss	status,0,c
 24291  002562  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24292  002564                     l16065:
 24293                           
 24294                           ; BSR set to: 0
 24295  002564  C069  F060         	movff	utoa@val,?___lwmod
 24296  002568  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24297  00256C  C06B  F062         	movff	utoa@base,?___lwmod+2
 24298  002570  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24299  002574  EC67  F00C         	call	___lwmod	;wreg free
 24300  002578  5160               	movf	?___lwmod& (0+255),w,b
 24301  00257A  6F6F               	movwf	utoa@c& (0+255),b
 24302                           
 24303                           ; BSR set to: 0
 24304  00257C  C069  F060         	movff	utoa@val,?___lwdiv
 24305  002580  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24306  002584  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24307  002588  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24308  00258C  EC8E  F00D         	call	___lwdiv	;wreg free
 24309  002590  C060  F069         	movff	?___lwdiv,utoa@val
 24310  002594  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24311                           
 24312                           ; BSR set to: 0
 24313  002598  0E09               	movlw	9
 24314  00259A  656F               	cpfsgt	utoa@c& (0+255),b
 24315  00259C  D002               	goto	l2339
 24316                           
 24317                           ; BSR set to: 0
 24318  00259E  0E07               	movlw	7
 24319  0025A0  276F               	addwf	utoa@c& (0+255),f,b
 24320  0025A2                     l2339:
 24321                           
 24322                           ; BSR set to: 0
 24323  0025A2  0E30               	movlw	48
 24324  0025A4  276F               	addwf	utoa@c& (0+255),f,b
 24325                           
 24326                           ; BSR set to: 0
 24327  0025A6  C067  FFD9         	movff	utoa@buf,fsr2l
 24328  0025AA  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24329  0025AE  C06F  FFDF         	movff	utoa@c,indf2
 24330                           
 24331                           ; BSR set to: 0
 24332  0025B2  0767               	decf	utoa@buf& (0+255),f,b
 24333  0025B4  A0D8               	btfss	status,0,c
 24334  0025B6  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24335                           
 24336                           ; BSR set to: 0
 24337  0025B8  516A               	movf	(utoa@val+1)& (0+255),w,b
 24338  0025BA  1169               	iorwf	utoa@val& (0+255),w,b
 24339  0025BC  E1D3               	bnz	l16065
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;	Return value of _utoa is never used
 24343  0025BE  4B67               	infsnz	utoa@buf& (0+255),f,b
 24344  0025C0  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24345                           
 24346                           ; BSR set to: 0
 24347  0025C2  0012               	return	
 24348  0025C4                     __end_of_utoa:
 24349                           	opt stack 0
 24350                           tblptru	equ	0xFF8
 24351                           tblptrh	equ	0xFF7
 24352                           tblptrl	equ	0xFF6
 24353                           tablat	equ	0xFF5
 24354                           prodh	equ	0xFF4
 24355                           prodl	equ	0xFF3
 24356                           intcon	equ	0xFF2
 24357                           indf0	equ	0xFEF
 24358                           postinc0	equ	0xFEE
 24359                           fsr0h	equ	0xFEA
 24360                           fsr0l	equ	0xFE9
 24361                           wreg	equ	0xFE8
 24362                           indf1	equ	0xFE7
 24363                           postinc1	equ	0xFE6
 24364                           postdec1	equ	0xFE5
 24365                           fsr1h	equ	0xFE2
 24366                           fsr1l	equ	0xFE1
 24367                           indf2	equ	0xFDF
 24368                           postinc2	equ	0xFDE
 24369                           postdec2	equ	0xFDD
 24370                           plusw2	equ	0xFDB
 24371                           fsr2h	equ	0xFDA
 24372                           fsr2l	equ	0xFD9
 24373                           status	equ	0xFD8
 24374                           
 24375 ;; *************** function ___lwmod *****************
 24376 ;; Defined at:
 24377 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24378 ;; Parameters:    Size  Location     Type
 24379 ;;  dividend        2    0[BANK0 ] unsigned int 
 24380 ;;  divisor         2    2[BANK0 ] unsigned int 
 24381 ;; Auto vars:     Size  Location     Type
 24382 ;;  counter         1   32[COMRAM] unsigned char 
 24383 ;; Return value:  Size  Location     Type
 24384 ;;                  2    0[BANK0 ] unsigned int 
 24385 ;; Registers used:
 24386 ;;		wreg, status,2, status,0
 24387 ;; Tracked objects:
 24388 ;;		On entry : F/0
 24389 ;;		On exit  : F/0
 24390 ;;		Unchanged: 0/0
 24391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24392 ;;      Params:         0       4       0       0       0       0       0
 24393 ;;      Locals:         1       0       0       0       0       0       0
 24394 ;;      Temps:          0       0       0       0       0       0       0
 24395 ;;      Totals:         1       4       0       0       0       0       0
 24396 ;;Total ram usage:        5 bytes
 24397 ;; Hardware stack levels used:    1
 24398 ;; Hardware stack levels required when called:    3
 24399 ;; This function calls:
 24400 ;;		Nothing
 24401 ;; This function is called by:
 24402 ;;		_utoa
 24403 ;; This function uses a non-reentrant model
 24404 ;;
 24405                           
 24406                           	psect	text64
 24407  0018CE                     __ptext64:
 24408                           	opt stack 0
 24409  0018CE                     ___lwmod:
 24410                           	opt stack 22
 24411                           
 24412                           ; BSR set to: 0
 24413                           
 24414                           ; BSR set to: 0
 24415                           ;incstack = 0
 24416                           ;incstack = 0
 24417  0018CE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24418  0018D0  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24419  0018D2  E017               	bz	l2463
 24420                           
 24421                           ; BSR set to: 0
 24422  0018D4  0E01               	movlw	1
 24423  0018D6  6E21               	movwf	___lwmod@counter,c
 24424  0018D8  D004               	goto	l13109
 24425  0018DA                     l13107:
 24426                           
 24427                           ; BSR set to: 0
 24428  0018DA  90D8               	bcf	status,0,c
 24429  0018DC  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24430  0018DE  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24431  0018E0  2A21               	incf	___lwmod@counter,f,c
 24432  0018E2                     l13109:
 24433                           
 24434                           ; BSR set to: 0
 24435  0018E2  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24436  0018E4  D7FA               	goto	l13107
 24437  0018E6                     l13111:
 24438                           
 24439                           ; BSR set to: 0
 24440  0018E6  5162               	movf	___lwmod@divisor& (0+255),w,b
 24441  0018E8  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24442  0018EA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24443  0018EC  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24444  0018EE  E304               	bnc	l13115
 24445                           
 24446                           ; BSR set to: 0
 24447  0018F0  5162               	movf	___lwmod@divisor& (0+255),w,b
 24448  0018F2  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24449  0018F4  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24450  0018F6  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24451  0018F8                     l13115:
 24452                           
 24453                           ; BSR set to: 0
 24454  0018F8  90D8               	bcf	status,0,c
 24455  0018FA  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24456  0018FC  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24457                           
 24458                           ; BSR set to: 0
 24459  0018FE  2E21               	decfsz	___lwmod@counter,f,c
 24460  001900  D7F2               	goto	l13111
 24461  001902                     l2463:
 24462                           
 24463                           ; BSR set to: 0
 24464  001902  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24465  001906  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24466                           
 24467                           ; BSR set to: 0
 24468  00190A  0012               	return	
 24469  00190C                     __end_of___lwmod:
 24470                           	opt stack 0
 24471                           tblptru	equ	0xFF8
 24472                           tblptrh	equ	0xFF7
 24473                           tblptrl	equ	0xFF6
 24474                           tablat	equ	0xFF5
 24475                           prodh	equ	0xFF4
 24476                           prodl	equ	0xFF3
 24477                           intcon	equ	0xFF2
 24478                           indf0	equ	0xFEF
 24479                           postinc0	equ	0xFEE
 24480                           fsr0h	equ	0xFEA
 24481                           fsr0l	equ	0xFE9
 24482                           wreg	equ	0xFE8
 24483                           indf1	equ	0xFE7
 24484                           postinc1	equ	0xFE6
 24485                           postdec1	equ	0xFE5
 24486                           fsr1h	equ	0xFE2
 24487                           fsr1l	equ	0xFE1
 24488                           indf2	equ	0xFDF
 24489                           postinc2	equ	0xFDE
 24490                           postdec2	equ	0xFDD
 24491                           plusw2	equ	0xFDB
 24492                           fsr2h	equ	0xFDA
 24493                           fsr2l	equ	0xFD9
 24494                           status	equ	0xFD8
 24495                           
 24496 ;; *************** function ___lwdiv *****************
 24497 ;; Defined at:
 24498 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24499 ;; Parameters:    Size  Location     Type
 24500 ;;  dividend        2    0[BANK0 ] unsigned int 
 24501 ;;  divisor         2    2[BANK0 ] unsigned int 
 24502 ;; Auto vars:     Size  Location     Type
 24503 ;;  quotient        2    5[BANK0 ] unsigned int 
 24504 ;;  counter         1    4[BANK0 ] unsigned char 
 24505 ;; Return value:  Size  Location     Type
 24506 ;;                  2    0[BANK0 ] unsigned int 
 24507 ;; Registers used:
 24508 ;;		wreg, status,2, status,0
 24509 ;; Tracked objects:
 24510 ;;		On entry : F/0
 24511 ;;		On exit  : F/0
 24512 ;;		Unchanged: 0/0
 24513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24514 ;;      Params:         0       4       0       0       0       0       0
 24515 ;;      Locals:         0       3       0       0       0       0       0
 24516 ;;      Temps:          0       0       0       0       0       0       0
 24517 ;;      Totals:         0       7       0       0       0       0       0
 24518 ;;Total ram usage:        7 bytes
 24519 ;; Hardware stack levels used:    1
 24520 ;; Hardware stack levels required when called:    3
 24521 ;; This function calls:
 24522 ;;		Nothing
 24523 ;; This function is called by:
 24524 ;;		_utoa
 24525 ;; This function uses a non-reentrant model
 24526 ;;
 24527                           
 24528                           	psect	text65
 24529  001B1C                     __ptext65:
 24530                           	opt stack 0
 24531  001B1C                     ___lwdiv:
 24532                           	opt stack 22
 24533                           
 24534                           ; BSR set to: 0
 24535                           
 24536                           ; BSR set to: 0
 24537                           ;incstack = 0
 24538                           ;incstack = 0
 24539  001B1C  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24540  001B1E  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24541                           
 24542                           ; BSR set to: 0
 24543  001B20  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24544  001B22  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24545  001B24  E01B               	bz	l2453
 24546                           
 24547                           ; BSR set to: 0
 24548  001B26  0E01               	movlw	1
 24549  001B28  6F64               	movwf	___lwdiv@counter& (0+255),b
 24550  001B2A  D004               	goto	l16091
 24551  001B2C                     l16089:
 24552                           
 24553                           ; BSR set to: 0
 24554  001B2C  90D8               	bcf	status,0,c
 24555  001B2E  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24556  001B30  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24557  001B32  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24558  001B34                     l16091:
 24559                           
 24560                           ; BSR set to: 0
 24561  001B34  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24562  001B36  D7FA               	goto	l16089
 24563  001B38                     l16093:
 24564                           
 24565                           ; BSR set to: 0
 24566  001B38  90D8               	bcf	status,0,c
 24567  001B3A  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24568  001B3C  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24569                           
 24570                           ; BSR set to: 0
 24571  001B3E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24572  001B40  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24573  001B42  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24574  001B44  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24575  001B46  E305               	bnc	l16101
 24576                           
 24577                           ; BSR set to: 0
 24578  001B48  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24579  001B4A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24580  001B4C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24581  001B4E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24582                           
 24583                           ; BSR set to: 0
 24584  001B50  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24585  001B52                     l16101:
 24586                           
 24587                           ; BSR set to: 0
 24588  001B52  90D8               	bcf	status,0,c
 24589  001B54  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24590  001B56  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24591                           
 24592                           ; BSR set to: 0
 24593  001B58  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24594  001B5A  D7EE               	goto	l16093
 24595  001B5C                     l2453:
 24596                           
 24597                           ; BSR set to: 0
 24598  001B5C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24599  001B60  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24600                           
 24601                           ; BSR set to: 0
 24602  001B64  0012               	return	
 24603  001B66                     __end_of___lwdiv:
 24604                           	opt stack 0
 24605                           tblptru	equ	0xFF8
 24606                           tblptrh	equ	0xFF7
 24607                           tblptrl	equ	0xFF6
 24608                           tablat	equ	0xFF5
 24609                           prodh	equ	0xFF4
 24610                           prodl	equ	0xFF3
 24611                           intcon	equ	0xFF2
 24612                           indf0	equ	0xFEF
 24613                           postinc0	equ	0xFEE
 24614                           fsr0h	equ	0xFEA
 24615                           fsr0l	equ	0xFE9
 24616                           wreg	equ	0xFE8
 24617                           indf1	equ	0xFE7
 24618                           postinc1	equ	0xFE6
 24619                           postdec1	equ	0xFE5
 24620                           fsr1h	equ	0xFE2
 24621                           fsr1l	equ	0xFE1
 24622                           indf2	equ	0xFDF
 24623                           postinc2	equ	0xFDE
 24624                           postdec2	equ	0xFDD
 24625                           plusw2	equ	0xFDB
 24626                           fsr2h	equ	0xFDA
 24627                           fsr2l	equ	0xFD9
 24628                           status	equ	0xFD8
 24629                           
 24630 ;; *************** function _printMode *****************
 24631 ;; Defined at:
 24632 ;;		line 2814 in file "main.c"
 24633 ;; Parameters:    Size  Location     Type
 24634 ;;		None
 24635 ;; Auto vars:     Size  Location     Type
 24636 ;;		None
 24637 ;; Return value:  Size  Location     Type
 24638 ;;		None               void
 24639 ;; Registers used:
 24640 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24641 ;; Tracked objects:
 24642 ;;		On entry : 0/0
 24643 ;;		On exit  : 0/0
 24644 ;;		Unchanged: 0/0
 24645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24646 ;;      Params:         0       0       0       0       0       0       0
 24647 ;;      Locals:         0       0       0       0       0       0       0
 24648 ;;      Temps:          0       0       0       0       0       0       0
 24649 ;;      Totals:         0       0       0       0       0       0       0
 24650 ;;Total ram usage:        0 bytes
 24651 ;; Hardware stack levels used:    1
 24652 ;; Hardware stack levels required when called:    5
 24653 ;; This function calls:
 24654 ;;		_putsUSART
 24655 ;; This function is called by:
 24656 ;;		_main
 24657 ;; This function uses a non-reentrant model
 24658 ;;
 24659                           
 24660                           	psect	text66
 24661  001FD6                     __ptext66:
 24662                           	opt stack 0
 24663  001FD6                     _printMode:
 24664                           	opt stack 24
 24665                           
 24666                           ;main.c: 2815: putsUSART((char *) "Mode: ");
 24667                           
 24668                           ; BSR set to: 0
 24669                           ;incstack = 0
 24670                           ;incstack = 0
 24671  001FD6  0E7C               	movlw	high STR_256
 24672  001FD8  0100               	movlb	0	; () banked
 24673  001FDA  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24674  001FDC  0E26               	movlw	low STR_256
 24675  001FDE  6F60               	movwf	?_putsUSART& (0+255),b
 24676  001FE0  ECFF  F00D         	call	_putsUSART	;wreg free
 24677                           
 24678                           ;main.c: 2816: if (0 == mode) {
 24679  001FE4  0100               	movlb	0	; () banked
 24680  001FE6  67E6               	tstfsz	_mode& (0+255),b
 24681  001FE8  D007               	goto	l13445
 24682                           
 24683                           ; BSR set to: 0
 24684                           ;main.c: 2817: putsUSART((char *) "Verbose");
 24685  001FEA  0E7C               	movlw	high STR_257
 24686  001FEC  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24687  001FEE  0E1E               	movlw	low STR_257
 24688  001FF0  6F60               	movwf	?_putsUSART& (0+255),b
 24689  001FF2  ECFF  F00D         	call	_putsUSART	;wreg free
 24690                           
 24691                           ;main.c: 2818: } else if (1 == mode) {
 24692  001FF6  D023               	goto	l1242
 24693  001FF8                     l13445:
 24694                           
 24695                           ; BSR set to: 0
 24696  001FF8  05E6               	decf	_mode& (0+255),w,b
 24697  001FFA  E107               	bnz	l13449
 24698                           
 24699                           ; BSR set to: 0
 24700                           ;main.c: 2819: putsUSART((char *) "VSCP Driver");
 24701  001FFC  0E7B               	movlw	high STR_258
 24702  001FFE  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24703  002000  0E7B               	movlw	low STR_258
 24704  002002  6F60               	movwf	?_putsUSART& (0+255),b
 24705  002004  ECFF  F00D         	call	_putsUSART	;wreg free
 24706                           
 24707                           ;main.c: 2820: } else if (2 == mode) {
 24708  002008  D01A               	goto	l1242
 24709  00200A                     l13449:
 24710                           
 24711                           ; BSR set to: 0
 24712  00200A  51E6               	movf	_mode& (0+255),w,b
 24713  00200C  0A02               	xorlw	2
 24714  00200E  E107               	bnz	l13453
 24715                           
 24716                           ; BSR set to: 0
 24717                           ;main.c: 2821: putsUSART((char *) "SL Driver");
 24718  002010  0E7B               	movlw	high STR_259
 24719  002012  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24720  002014  0EB1               	movlw	low STR_259
 24721  002016  6F60               	movwf	?_putsUSART& (0+255),b
 24722  002018  ECFF  F00D         	call	_putsUSART	;wreg free
 24723                           
 24724                           ;main.c: 2822: } else if (3 == mode) {
 24725  00201C  D010               	goto	l1242
 24726  00201E                     l13453:
 24727                           
 24728                           ; BSR set to: 0
 24729  00201E  51E6               	movf	_mode& (0+255),w,b
 24730  002020  0A03               	xorlw	3
 24731  002022  E107               	bnz	l13457
 24732                           
 24733                           ; BSR set to: 0
 24734                           ;main.c: 2823: putsUSART((char *) "VSCP Node");
 24735  002024  0E7B               	movlw	high STR_260
 24736  002026  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24737  002028  0EA7               	movlw	low STR_260
 24738  00202A  6F60               	movwf	?_putsUSART& (0+255),b
 24739  00202C  ECFF  F00D         	call	_putsUSART	;wreg free
 24740                           
 24741                           ;main.c: 2824: } else {
 24742  002030  D006               	goto	l1242
 24743  002032                     l13457:
 24744                           
 24745                           ; BSR set to: 0
 24746                           ;main.c: 2825: putsUSART((char *) "Unknown (Verbose used)");
 24747  002032  0E79               	movlw	high STR_261
 24748  002034  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24749  002036  0EEF               	movlw	low STR_261
 24750  002038  6F60               	movwf	?_putsUSART& (0+255),b
 24751  00203A  ECFF  F00D         	call	_putsUSART	;wreg free
 24752  00203E                     l1242:
 24753                           
 24754                           ;main.c: 2826: }
 24755                           ;main.c: 2827: putsUSART((char *) "\r\n");
 24756  00203E  0E71               	movlw	high (STR_197+50)
 24757  002040  0100               	movlb	0	; () banked
 24758  002042  6F61               	movwf	(?_putsUSART+1)& (0+255),b
 24759  002044  0EC0               	movlw	low (STR_197+50)
 24760  002046  6F60               	movwf	?_putsUSART& (0+255),b
 24761  002048  EFFF  F00D         	goto	_putsUSART	;wreg free
 24762  00204C                     __end_of_printMode:
 24763                           	opt stack 0
 24764                           tblptru	equ	0xFF8
 24765                           tblptrh	equ	0xFF7
 24766                           tblptrl	equ	0xFF6
 24767                           tablat	equ	0xFF5
 24768                           prodh	equ	0xFF4
 24769                           prodl	equ	0xFF3
 24770                           intcon	equ	0xFF2
 24771                           indf0	equ	0xFEF
 24772                           postinc0	equ	0xFEE
 24773                           fsr0h	equ	0xFEA
 24774                           fsr0l	equ	0xFE9
 24775                           wreg	equ	0xFE8
 24776                           indf1	equ	0xFE7
 24777                           postinc1	equ	0xFE6
 24778                           postdec1	equ	0xFE5
 24779                           fsr1h	equ	0xFE2
 24780                           fsr1l	equ	0xFE1
 24781                           indf2	equ	0xFDF
 24782                           postinc2	equ	0xFDE
 24783                           postdec2	equ	0xFDD
 24784                           plusw2	equ	0xFDB
 24785                           fsr2h	equ	0xFDA
 24786                           fsr2l	equ	0xFD9
 24787                           status	equ	0xFD8
 24788                           
 24789 ;; *************** function _putsUSART *****************
 24790 ;; Defined at:
 24791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24792 ;; Parameters:    Size  Location     Type
 24793 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24794 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24795 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24796 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24797 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24798 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24799 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24800 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24801 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24802 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24803 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24804 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24805 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24806 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24807 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24808 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24809 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24810 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24811 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24812 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24813 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24814 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24815 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24816 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24817 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24818 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24819 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24820 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24821 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24822 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24823 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24824 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24825 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24826 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24827 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24828 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24829 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24830 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24831 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24832 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24833 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24834 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 24835 ;; Auto vars:     Size  Location     Type
 24836 ;;		None
 24837 ;; Return value:  Size  Location     Type
 24838 ;;		None               void
 24839 ;; Registers used:
 24840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24841 ;; Tracked objects:
 24842 ;;		On entry : F/0
 24843 ;;		On exit  : 0/0
 24844 ;;		Unchanged: 0/0
 24845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24846 ;;      Params:         0       2       0       0       0       0       0
 24847 ;;      Locals:         0       0       0       0       0       0       0
 24848 ;;      Temps:          0       2       0       0       0       0       0
 24849 ;;      Totals:         0       4       0       0       0       0       0
 24850 ;;Total ram usage:        4 bytes
 24851 ;; Hardware stack levels used:    1
 24852 ;; Hardware stack levels required when called:    4
 24853 ;; This function calls:
 24854 ;;		_WriteUSART
 24855 ;; This function is called by:
 24856 ;;		_main
 24857 ;;		_doModeVerbose
 24858 ;;		_doModeSLCAN
 24859 ;;		_receivePrintEventVerbose
 24860 ;;		_receiveSendEventSLCAN
 24861 ;;		_printStatistics
 24862 ;;		_printErrors
 24863 ;;		_printHelp
 24864 ;;		_findNodes
 24865 ;;		_printGUID
 24866 ;;		_printMDF
 24867 ;;		_printNodeFirmwareVersion
 24868 ;;		_printFirmwareVersion
 24869 ;;		_printMode
 24870 ;; This function uses a non-reentrant model
 24871 ;;
 24872                           
 24873                           	psect	text67
 24874  001BFE                     __ptext67:
 24875                           	opt stack 0
 24876  001BFE                     _putsUSART:
 24877                           	opt stack 23
 24878  001BFE                     l1855:
 24879  001BFE  A2AC               	btfss	4012,1,c	;volatile
 24880  001C00  D7FE               	goto	l1855
 24881  001C02  0100               	movlb	0	; () banked
 24882  001C04  5160               	movf	putsUSART@data& (0+255),w,b
 24883  001C06  6EF6               	movwf	tblptrl,c
 24884  001C08  6EE9               	movwf	fsr0l,c
 24885  001C0A  0E05               	movlw	(high __ramtop+-1)
 24886  001C0C  6EEA               	movwf	fsr0h,c
 24887  001C0E  5161               	movf	(putsUSART@data+1)& (0+255),w,b
 24888  001C10  64EA               	cpfsgt	fsr0h,c
 24889  001C12  D003               	bra	u17737
 24890  001C14  6EEA               	movwf	fsr0h,c
 24891  001C16  50EF               	movf	indf0,w,c
 24892  001C18  D003               	bra	u17730
 24893  001C1A                     u17737:
 24894  001C1A  6EF7               	movwf	tblptrh,c
 24895  001C1C  0008               	tblrd		*
 24896  001C1E  50F5               	movf	tablat,w,c
 24897  001C20                     u17730:
 24898  001C20  EC4B  F00B         	call	_WriteUSART
 24899  001C24  0100               	movlb	0	; () banked
 24900  001C26  5160               	movf	putsUSART@data& (0+255),w,b
 24901  001C28  6F62               	movwf	??_putsUSART& (0+255),b
 24902  001C2A  5161               	movf	(putsUSART@data+1)& (0+255),w,b
 24903  001C2C  6F63               	movwf	(??_putsUSART+1)& (0+255),b
 24904  001C2E  4B60               	infsnz	putsUSART@data& (0+255),f,b
 24905  001C30  2B61               	incf	(putsUSART@data+1)& (0+255),f,b
 24906  001C32  5162               	movf	??_putsUSART& (0+255),w,b
 24907  001C34  6EF6               	movwf	tblptrl,c
 24908  001C36  6EE9               	movwf	fsr0l,c
 24909  001C38  0E05               	movlw	(high __ramtop+-1)
 24910  001C3A  6EEA               	movwf	fsr0h,c
 24911  001C3C  5163               	movf	(??_putsUSART+1)& (0+255),w,b
 24912  001C3E  64EA               	cpfsgt	fsr0h,c
 24913  001C40  D003               	bra	u17747
 24914  001C42  6EEA               	movwf	fsr0h,c
 24915  001C44  50EF               	movf	indf0,w,c
 24916  001C46  D003               	bra	u17740
 24917  001C48                     u17747:
 24918  001C48  6EF7               	movwf	tblptrh,c
 24919  001C4A  0008               	tblrd		*
 24920  001C4C  50F5               	movf	tablat,w,c
 24921  001C4E                     u17740:
 24922  001C4E  0900               	iorlw	0
 24923  001C50  B4D8               	btfsc	status,2,c
 24924  001C52  0012               	return	
 24925  001C54  D7D4               	goto	l1855
 24926  001C56                     __end_of_putsUSART:
 24927                           	opt stack 0
 24928                           tblptru	equ	0xFF8
 24929                           tblptrh	equ	0xFF7
 24930                           tblptrl	equ	0xFF6
 24931                           tablat	equ	0xFF5
 24932                           prodh	equ	0xFF4
 24933                           prodl	equ	0xFF3
 24934                           intcon	equ	0xFF2
 24935                           indf0	equ	0xFEF
 24936                           postinc0	equ	0xFEE
 24937                           fsr0h	equ	0xFEA
 24938                           fsr0l	equ	0xFE9
 24939                           wreg	equ	0xFE8
 24940                           indf1	equ	0xFE7
 24941                           postinc1	equ	0xFE6
 24942                           postdec1	equ	0xFE5
 24943                           fsr1h	equ	0xFE2
 24944                           fsr1l	equ	0xFE1
 24945                           indf2	equ	0xFDF
 24946                           postinc2	equ	0xFDE
 24947                           postdec2	equ	0xFDD
 24948                           plusw2	equ	0xFDB
 24949                           fsr2h	equ	0xFDA
 24950                           fsr2l	equ	0xFD9
 24951                           status	equ	0xFD8
 24952                           
 24953 ;; *************** function _WriteUSART *****************
 24954 ;; Defined at:
 24955 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24956 ;; Parameters:    Size  Location     Type
 24957 ;;  data            1    wreg     unsigned char 
 24958 ;; Auto vars:     Size  Location     Type
 24959 ;;  data            1   32[COMRAM] unsigned char 
 24960 ;; Return value:  Size  Location     Type
 24961 ;;		None               void
 24962 ;; Registers used:
 24963 ;;		wreg
 24964 ;; Tracked objects:
 24965 ;;		On entry : 0/1
 24966 ;;		On exit  : 0/0
 24967 ;;		Unchanged: 0/0
 24968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24969 ;;      Params:         0       0       0       0       0       0       0
 24970 ;;      Locals:         1       0       0       0       0       0       0
 24971 ;;      Temps:          0       0       0       0       0       0       0
 24972 ;;      Totals:         1       0       0       0       0       0       0
 24973 ;;Total ram usage:        1 bytes
 24974 ;; Hardware stack levels used:    1
 24975 ;; Hardware stack levels required when called:    3
 24976 ;; This function calls:
 24977 ;;		Nothing
 24978 ;; This function is called by:
 24979 ;;		_doModeVerbose
 24980 ;;		_sendEscapedUartData
 24981 ;;		_sendVSCPDriverErrorFrame
 24982 ;;		_sendVSCPDriverAck
 24983 ;;		_sendVSCPDriverNack
 24984 ;;		_sendVSCPDriverCommandReply
 24985 ;;		_receiveSendEventCANAL
 24986 ;;		_receiveSendMultiEventCANAL
 24987 ;;		_sendVSCPModeCapabilities
 24988 ;;		_receiveSendEventSLCAN
 24989 ;;		_printBinary
 24990 ;;		_printFirmwareVersion
 24991 ;;		_putsUSART
 24992 ;; This function uses a non-reentrant model
 24993 ;;
 24994                           
 24995                           	psect	text68
 24996  001696                     __ptext68:
 24997                           	opt stack 0
 24998  001696                     _WriteUSART:
 24999                           	opt stack 24
 25000                           
 25001                           ;incstack = 0
 25002                           ;incstack = 0
 25003                           ;WriteUSART@data stored from wreg
 25004  001696  CFE8 F021          	movff	wreg,WriteUSART@data
 25005  00169A  ACAC               	btfss	4012,6,c	;volatile
 25006  00169C  D003               	goto	l12117
 25007  00169E  90AC               	bcf	4012,0,c	;volatile
 25008  0016A0  B22D               	btfsc	_USART_Status,1,c
 25009  0016A2  80AC               	bsf	4012,0,c	;volatile
 25010  0016A4                     l12117:
 25011  0016A4  C021  FFAD         	movff	WriteUSART@data,4013	;volatile
 25012  0016A8  0012               	return	
 25013  0016AA                     __end_of_WriteUSART:
 25014                           	opt stack 0
 25015                           tblptru	equ	0xFF8
 25016                           tblptrh	equ	0xFF7
 25017                           tblptrl	equ	0xFF6
 25018                           tablat	equ	0xFF5
 25019                           prodh	equ	0xFF4
 25020                           prodl	equ	0xFF3
 25021                           intcon	equ	0xFF2
 25022                           indf0	equ	0xFEF
 25023                           postinc0	equ	0xFEE
 25024                           fsr0h	equ	0xFEA
 25025                           fsr0l	equ	0xFE9
 25026                           wreg	equ	0xFE8
 25027                           indf1	equ	0xFE7
 25028                           postinc1	equ	0xFE6
 25029                           postdec1	equ	0xFE5
 25030                           fsr1h	equ	0xFE2
 25031                           fsr1l	equ	0xFE1
 25032                           indf2	equ	0xFDF
 25033                           postinc2	equ	0xFDE
 25034                           postdec2	equ	0xFDD
 25035                           plusw2	equ	0xFDB
 25036                           fsr2h	equ	0xFDA
 25037                           fsr2l	equ	0xFD9
 25038                           status	equ	0xFD8
 25039                           
 25040 ;; *************** function _init *****************
 25041 ;; Defined at:
 25042 ;;		line 398 in file "main.c"
 25043 ;; Parameters:    Size  Location     Type
 25044 ;;		None
 25045 ;; Auto vars:     Size  Location     Type
 25046 ;;		None
 25047 ;; Return value:  Size  Location     Type
 25048 ;;		None               void
 25049 ;; Registers used:
 25050 ;;		wreg, status,2, status,0, cstack
 25051 ;; Tracked objects:
 25052 ;;		On entry : 0/0
 25053 ;;		On exit  : 0/0
 25054 ;;		Unchanged: 0/0
 25055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25056 ;;      Params:         0       0       0       0       0       0       0
 25057 ;;      Locals:         0       0       0       0       0       0       0
 25058 ;;      Temps:          0       0       0       0       0       0       0
 25059 ;;      Totals:         0       0       0       0       0       0       0
 25060 ;;Total ram usage:        0 bytes
 25061 ;; Hardware stack levels used:    1
 25062 ;; Hardware stack levels required when called:    5
 25063 ;; This function calls:
 25064 ;;		_WriteTimer0
 25065 ;;		_init_app_ram
 25066 ;;		_OpenUSART
 25067 ;;		_OpenTimer0
 25068 ;;		_ECANInitialize
 25069 ;; This function is called by:
 25070 ;;		_main
 25071 ;; This function uses a non-reentrant model
 25072 ;;
 25073                           
 25074                           	psect	text69
 25075  001AD4                     __ptext69:
 25076                           	opt stack 0
 25077  001AD4                     _init:
 25078                           	opt stack 24
 25079                           
 25080                           ;main.c: 400: init_app_ram();
 25081                           
 25082                           ;incstack = 0
 25083                           ;incstack = 0
 25084  001AD4  ECD8  F00D         	call	_init_app_ram	;wreg free
 25085                           
 25086                           ; BSR set to: 0
 25087                           ;main.c: 403: OSCCONbits.IRCF0 = 1;
 25088  001AD8  88D3               	bsf	4051,4,c	;volatile
 25089                           
 25090                           ; BSR set to: 0
 25091                           ;main.c: 404: OSCCONbits.IRCF1 = 1;
 25092  001ADA  8AD3               	bsf	4051,5,c	;volatile
 25093                           
 25094                           ; BSR set to: 0
 25095                           ;main.c: 405: OSCCONbits.IRCF2 = 1;
 25096  001ADC  8CD3               	bsf	4051,6,c	;volatile
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;main.c: 406: OSCTUNEbits.PLLEN = 1;
 25100  001ADE  8C9B               	bsf	3995,6,c	;volatile
 25101                           
 25102                           ; BSR set to: 0
 25103                           ;main.c: 408: TRISBbits.RB2 = 0;
 25104  001AE0  9493               	bcf	3987,2,c	;volatile
 25105                           
 25106                           ; BSR set to: 0
 25107                           ;main.c: 409: TRISBbits.RB3 = 1;
 25108  001AE2  8693               	bsf	3987,3,c	;volatile
 25109                           
 25110                           ; BSR set to: 0
 25111                           ;main.c: 411: TRISCbits.RC1 = 0;
 25112  001AE4  9294               	bcf	3988,1,c	;volatile
 25113                           
 25114                           ; BSR set to: 0
 25115                           ;main.c: 412: TRISCbits.RC6 = 0;
 25116  001AE6  9C94               	bcf	3988,6,c	;volatile
 25117                           
 25118                           ; BSR set to: 0
 25119                           ;main.c: 413: TRISCbits.RC7 = 1;
 25120  001AE8  8E94               	bsf	3988,7,c	;volatile
 25121                           
 25122                           ;main.c: 417: OpenUSART( 0b01111111 &
 25123                           ;main.c: 418: 0b11111111 &
 25124                           ;main.c: 419: 0b11111110 &
 25125                           ;main.c: 420: 0b11111101 &
 25126                           ;main.c: 421: 0b11111111,
 25127                           ;main.c: 422: 21 );
 25128  001AEA  6A22               	clrf	?_OpenUSART+1,c
 25129  001AEC  0E15               	movlw	21
 25130  001AEE  6E21               	movwf	?_OpenUSART,c
 25131  001AF0  0E7C               	movlw	124
 25132  001AF2  EC57  F00E         	call	_OpenUSART
 25133                           
 25134                           ; BSR set to: 0
 25135                           ;main.c: 424: RCIF = 0;
 25136  001AF6  9A9E               	bcf	3998,5,c	;volatile
 25137                           
 25138                           ; BSR set to: 0
 25139                           ;main.c: 425: RCIP = 0;
 25140  001AF8  9A9F               	bcf	3999,5,c	;volatile
 25141                           
 25142                           ; BSR set to: 0
 25143                           ;main.c: 426: RCIE = 1;
 25144  001AFA  8A9D               	bsf	3997,5,c	;volatile
 25145                           
 25146                           ; BSR set to: 0
 25147                           ;main.c: 427: PEIE = 1;
 25148  001AFC  8CF2               	bsf	intcon,6,c	;volatile
 25149                           
 25150                           ; BSR set to: 0
 25151                           ;main.c: 430: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25152  001AFE  0E92               	movlw	146
 25153  001B00  EC7B  F00B         	call	_OpenTimer0
 25154                           
 25155                           ; BSR set to: 0
 25156                           ;main.c: 431: WriteTimer0(0xfb1d);
 25157  001B04  0EFB               	movlw	251
 25158  001B06  6E22               	movwf	?_WriteTimer0+1,c
 25159  001B08  0E1D               	movlw	29
 25160  001B0A  6E21               	movwf	?_WriteTimer0,c
 25161  001B0C  EC42  F00B         	call	_WriteTimer0	;wreg free
 25162                           
 25163                           ;main.c: 434: ECANInitialize();
 25164  001B10  ECDC  F010         	call	_ECANInitialize	;wreg free
 25165                           
 25166                           ;main.c: 458: RXBnIE = 1;
 25167  001B14  82A3               	bsf	4003,1,c	;volatile
 25168                           
 25169                           ;main.c: 459: ERRIE = 1;
 25170  001B16  8AA3               	bsf	4003,5,c	;volatile
 25171                           
 25172                           ;main.c: 461: (INTCONbits.GIE = 1);
 25173  001B18  8EF2               	bsf	intcon,7,c	;volatile
 25174  001B1A  0012               	return	
 25175  001B1C                     __end_of_init:
 25176                           	opt stack 0
 25177                           tblptru	equ	0xFF8
 25178                           tblptrh	equ	0xFF7
 25179                           tblptrl	equ	0xFF6
 25180                           tablat	equ	0xFF5
 25181                           prodh	equ	0xFF4
 25182                           prodl	equ	0xFF3
 25183                           intcon	equ	0xFF2
 25184                           indf0	equ	0xFEF
 25185                           postinc0	equ	0xFEE
 25186                           fsr0h	equ	0xFEA
 25187                           fsr0l	equ	0xFE9
 25188                           wreg	equ	0xFE8
 25189                           indf1	equ	0xFE7
 25190                           postinc1	equ	0xFE6
 25191                           postdec1	equ	0xFE5
 25192                           fsr1h	equ	0xFE2
 25193                           fsr1l	equ	0xFE1
 25194                           indf2	equ	0xFDF
 25195                           postinc2	equ	0xFDE
 25196                           postdec2	equ	0xFDD
 25197                           plusw2	equ	0xFDB
 25198                           fsr2h	equ	0xFDA
 25199                           fsr2l	equ	0xFD9
 25200                           status	equ	0xFD8
 25201                           
 25202 ;; *************** function _ECANInitialize *****************
 25203 ;; Defined at:
 25204 ;;		line 168 in file "ECAN.c"
 25205 ;; Parameters:    Size  Location     Type
 25206 ;;		None
 25207 ;; Auto vars:     Size  Location     Type
 25208 ;;		None
 25209 ;; Return value:  Size  Location     Type
 25210 ;;		None               void
 25211 ;; Registers used:
 25212 ;;		wreg, status,2, status,0, cstack
 25213 ;; Tracked objects:
 25214 ;;		On entry : F/0
 25215 ;;		On exit  : 0/0
 25216 ;;		Unchanged: 0/0
 25217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25218 ;;      Params:         0       0       0       0       0       0       0
 25219 ;;      Locals:         0       0       0       0       0       0       0
 25220 ;;      Temps:          0       0       0       0       0       0       0
 25221 ;;      Totals:         0       0       0       0       0       0       0
 25222 ;;Total ram usage:        0 bytes
 25223 ;; Hardware stack levels used:    1
 25224 ;; Hardware stack levels required when called:    4
 25225 ;; This function calls:
 25226 ;;		_ECANSetOperationMode
 25227 ;; This function is called by:
 25228 ;;		_init
 25229 ;; This function uses a non-reentrant model
 25230 ;;
 25231                           
 25232                           	psect	text70
 25233  0021B8                     __ptext70:
 25234                           	opt stack 0
 25235  0021B8                     _ECANInitialize:
 25236                           	opt stack 24
 25237                           
 25238                           ; BSR set to: 0
 25239                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25240                           
 25241                           ;incstack = 0
 25242                           ;incstack = 0
 25243  0021B8  0E80               	movlw	128
 25244  0021BA  EC60  F00B         	call	_ECANSetOperationMode
 25245                           
 25246                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25247  0021BE  0E09               	movlw	9
 25248  0021C0  6E70               	movwf	3952,c	;volatile
 25249                           
 25250                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25251  0021C2  0EFC               	movlw	252
 25252  0021C4  6E71               	movwf	3953,c	;volatile
 25253                           
 25254                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25255                           ;ECAN.c: 181: (0 << 6) |
 25256                           ;ECAN.c: 182: (2-1);
 25257  0021C6  0E01               	movlw	1
 25258  0021C8  6E72               	movwf	3954,c	;volatile
 25259                           
 25260                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25261  0021CA  0E20               	movlw	32
 25262  0021CC  6E73               	movwf	3955,c	;volatile
 25263                           
 25264                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25265  0021CE  8E77               	bsf	3959,7,c	;volatile
 25266                           
 25267                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25268  0021D0  9C77               	bcf	3959,6,c	;volatile
 25269                           
 25270                           ;ECAN.c: 205: RXB0CON = 0;
 25271  0021D2  6A60               	clrf	3936,c	;volatile
 25272                           
 25273                           ;ECAN.c: 211: RXB1CON = 0;
 25274  0021D4  010F               	movlb	15	; () banked
 25275  0021D6  6B50               	clrf	80,b	;volatile
 25276                           
 25277                           ; BSR set to: 15
 25278                           ;ECAN.c: 221: B0CON = 0;
 25279  0021D8  010E               	movlb	14	; () banked
 25280  0021DA  6B20               	clrf	32,b	;volatile
 25281                           
 25282                           ; BSR set to: 14
 25283                           ;ECAN.c: 231: B1CON = 0;
 25284  0021DC  6B30               	clrf	48,b	;volatile
 25285                           
 25286                           ; BSR set to: 14
 25287                           ;ECAN.c: 241: B2CON = 0;
 25288  0021DE  6B40               	clrf	64,b	;volatile
 25289                           
 25290                           ; BSR set to: 14
 25291                           ;ECAN.c: 251: B3CON = 0;
 25292  0021E0  6B50               	clrf	80,b	;volatile
 25293                           
 25294                           ; BSR set to: 14
 25295                           ;ECAN.c: 261: B4CON = 0;
 25296  0021E2  6B60               	clrf	96,b	;volatile
 25297                           
 25298                           ; BSR set to: 14
 25299                           ;ECAN.c: 271: B5CON = 0;
 25300  0021E4  6B70               	clrf	112,b	;volatile
 25301                           
 25302                           ; BSR set to: 14
 25303                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25304  0021E6  010D               	movlb	13	; () banked
 25305  0021E8  6BF8               	clrf	248,b	;volatile
 25306                           
 25307                           ; BSR set to: 13
 25308                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25309  0021EA  010F               	movlb	15	; () banked
 25310  0021EC  6B00               	clrf	0,b	;volatile
 25311                           
 25312                           ; BSR set to: 15
 25313  0021EE  0E08               	movlw	8
 25314  0021F0  6F01               	movwf	1,b	;volatile
 25315                           
 25316                           ; BSR set to: 15
 25317  0021F2  6B02               	clrf	2,b	;volatile
 25318                           
 25319                           ; BSR set to: 15
 25320  0021F4  6B03               	clrf	3,b	;volatile
 25321                           
 25322                           ; BSR set to: 15
 25323                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25324  0021F6  0E01               	movlw	1
 25325  0021F8  010D               	movlb	13	; () banked
 25326  0021FA  6FD4               	movwf	212,b	;volatile
 25327                           
 25328                           ; BSR set to: 13
 25329                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25330  0021FC  6BD5               	clrf	213,b	;volatile
 25331                           
 25332                           ; BSR set to: 13
 25333                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25334  0021FE  6BE0               	clrf	224,b	;volatile
 25335                           
 25336                           ; BSR set to: 13
 25337                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25338  002200  0E11               	movlw	17
 25339  002202  6FE1               	movwf	225,b	;volatile
 25340                           
 25341                           ; BSR set to: 13
 25342                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25343  002204  6FE2               	movwf	226,b	;volatile
 25344                           
 25345                           ; BSR set to: 13
 25346                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25347  002206  6BE3               	clrf	227,b	;volatile
 25348                           
 25349                           ; BSR set to: 13
 25350                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25351  002208  6BE4               	clrf	228,b	;volatile
 25352                           
 25353                           ; BSR set to: 13
 25354                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25355  00220A  6BE5               	clrf	229,b	;volatile
 25356                           
 25357                           ; BSR set to: 13
 25358                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25359  00220C  6BE6               	clrf	230,b	;volatile
 25360                           
 25361                           ; BSR set to: 13
 25362                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25363  00220E  6BE7               	clrf	231,b	;volatile
 25364                           
 25365                           ; BSR set to: 13
 25366                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25367  002210  0E54               	movlw	84
 25368  002212  6FF0               	movwf	240,b	;volatile
 25369                           
 25370                           ; BSR set to: 13
 25371                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25372  002214  0E05               	movlw	5
 25373  002216  6FF1               	movwf	241,b	;volatile
 25374                           
 25375                           ; BSR set to: 13
 25376                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25377  002218  6BF2               	clrf	242,b	;volatile
 25378                           
 25379                           ; BSR set to: 13
 25380                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25381  00221A  6BF2               	clrf	242,b	;volatile
 25382                           
 25383                           ; BSR set to: 13
 25384                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25385  00221C  010F               	movlb	15	; () banked
 25386  00221E  6B18               	clrf	24,b	;volatile
 25387                           
 25388                           ; BSR set to: 15
 25389  002220  6B19               	clrf	25,b	;volatile
 25390                           
 25391                           ; BSR set to: 15
 25392  002222  6B1A               	clrf	26,b	;volatile
 25393                           
 25394                           ; BSR set to: 15
 25395  002224  6B1B               	clrf	27,b	;volatile
 25396                           
 25397                           ; BSR set to: 15
 25398                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25399  002226  8719               	bsf	25,3,b	;volatile
 25400                           
 25401                           ; BSR set to: 15
 25402                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25403  002228  6B1C               	clrf	28,b	;volatile
 25404                           
 25405                           ; BSR set to: 15
 25406  00222A  6B1D               	clrf	29,b	;volatile
 25407                           
 25408                           ; BSR set to: 15
 25409  00222C  6B1E               	clrf	30,b	;volatile
 25410                           
 25411                           ; BSR set to: 15
 25412  00222E  6B1F               	clrf	31,b	;volatile
 25413                           
 25414                           ; BSR set to: 15
 25415                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25416  002230  871D               	bsf	29,3,b	;volatile
 25417                           
 25418                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25419  002232  0E20               	movlw	32
 25420  002234  EF60  F00B         	goto	_ECANSetOperationMode
 25421  002238                     __end_of_ECANInitialize:
 25422                           	opt stack 0
 25423                           tblptru	equ	0xFF8
 25424                           tblptrh	equ	0xFF7
 25425                           tblptrl	equ	0xFF6
 25426                           tablat	equ	0xFF5
 25427                           prodh	equ	0xFF4
 25428                           prodl	equ	0xFF3
 25429                           intcon	equ	0xFF2
 25430                           indf0	equ	0xFEF
 25431                           postinc0	equ	0xFEE
 25432                           fsr0h	equ	0xFEA
 25433                           fsr0l	equ	0xFE9
 25434                           wreg	equ	0xFE8
 25435                           indf1	equ	0xFE7
 25436                           postinc1	equ	0xFE6
 25437                           postdec1	equ	0xFE5
 25438                           fsr1h	equ	0xFE2
 25439                           fsr1l	equ	0xFE1
 25440                           indf2	equ	0xFDF
 25441                           postinc2	equ	0xFDE
 25442                           postdec2	equ	0xFDD
 25443                           plusw2	equ	0xFDB
 25444                           fsr2h	equ	0xFDA
 25445                           fsr2l	equ	0xFD9
 25446                           status	equ	0xFD8
 25447                           
 25448 ;; *************** function _ECANSetOperationMode *****************
 25449 ;; Defined at:
 25450 ;;		line 1014 in file "ECAN.c"
 25451 ;; Parameters:    Size  Location     Type
 25452 ;;  mode            1    wreg     enum E16346
 25453 ;; Auto vars:     Size  Location     Type
 25454 ;;  mode            1   32[COMRAM] enum E16346
 25455 ;; Return value:  Size  Location     Type
 25456 ;;		None               void
 25457 ;; Registers used:
 25458 ;;		wreg, status,2, status,0
 25459 ;; Tracked objects:
 25460 ;;		On entry : 0/0
 25461 ;;		On exit  : 0/0
 25462 ;;		Unchanged: 0/0
 25463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25464 ;;      Params:         0       0       0       0       0       0       0
 25465 ;;      Locals:         1       0       0       0       0       0       0
 25466 ;;      Temps:          0       0       0       0       0       0       0
 25467 ;;      Totals:         1       0       0       0       0       0       0
 25468 ;;Total ram usage:        1 bytes
 25469 ;; Hardware stack levels used:    1
 25470 ;; Hardware stack levels required when called:    3
 25471 ;; This function calls:
 25472 ;;		Nothing
 25473 ;; This function is called by:
 25474 ;;		_doModeVerbose
 25475 ;;		_doModeVscp
 25476 ;;		_doModeSLCAN
 25477 ;;		_ECANInitialize
 25478 ;; This function uses a non-reentrant model
 25479 ;;
 25480                           
 25481                           	psect	text71
 25482  0016C0                     __ptext71:
 25483                           	opt stack 0
 25484  0016C0                     _ECANSetOperationMode:
 25485                           	opt stack 25
 25486                           
 25487                           ;incstack = 0
 25488                           ;incstack = 0
 25489                           ;ECANSetOperationMode@mode stored from wreg
 25490  0016C0  CFE8 F021          	movff	wreg,ECANSetOperationMode@mode
 25491                           
 25492                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25493  0016C4  0E1F               	movlw	31
 25494  0016C6  166F               	andwf	3951,f,c	;volatile
 25495                           
 25496                           ;ECAN.c: 1016: CANCON |= mode;
 25497  0016C8  5021               	movf	ECANSetOperationMode@mode,w,c
 25498  0016CA  126F               	iorwf	3951,f,c	;volatile
 25499  0016CC                     l11433:
 25500  0016CC  506F               	movf	3951,w,c	;volatile
 25501  0016CE  0BE0               	andlw	224
 25502  0016D0  1821               	xorwf	ECANSetOperationMode@mode,w,c
 25503  0016D2  B4D8               	btfsc	status,2,c
 25504  0016D4  0012               	return	
 25505  0016D6  D7FA               	goto	l11433
 25506  0016D8                     __end_of_ECANSetOperationMode:
 25507                           	opt stack 0
 25508                           tblptru	equ	0xFF8
 25509                           tblptrh	equ	0xFF7
 25510                           tblptrl	equ	0xFF6
 25511                           tablat	equ	0xFF5
 25512                           prodh	equ	0xFF4
 25513                           prodl	equ	0xFF3
 25514                           intcon	equ	0xFF2
 25515                           indf0	equ	0xFEF
 25516                           postinc0	equ	0xFEE
 25517                           fsr0h	equ	0xFEA
 25518                           fsr0l	equ	0xFE9
 25519                           wreg	equ	0xFE8
 25520                           indf1	equ	0xFE7
 25521                           postinc1	equ	0xFE6
 25522                           postdec1	equ	0xFE5
 25523                           fsr1h	equ	0xFE2
 25524                           fsr1l	equ	0xFE1
 25525                           indf2	equ	0xFDF
 25526                           postinc2	equ	0xFDE
 25527                           postdec2	equ	0xFDD
 25528                           plusw2	equ	0xFDB
 25529                           fsr2h	equ	0xFDA
 25530                           fsr2l	equ	0xFD9
 25531                           status	equ	0xFD8
 25532                           
 25533 ;; *************** function _OpenTimer0 *****************
 25534 ;; Defined at:
 25535 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25536 ;; Parameters:    Size  Location     Type
 25537 ;;  config          1    wreg     unsigned char 
 25538 ;; Auto vars:     Size  Location     Type
 25539 ;;  config          1   32[COMRAM] unsigned char 
 25540 ;; Return value:  Size  Location     Type
 25541 ;;		None               void
 25542 ;; Registers used:
 25543 ;;		wreg, status,2, status,0
 25544 ;; Tracked objects:
 25545 ;;		On entry : F/0
 25546 ;;		On exit  : F/0
 25547 ;;		Unchanged: F/0
 25548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25549 ;;      Params:         0       0       0       0       0       0       0
 25550 ;;      Locals:         1       0       0       0       0       0       0
 25551 ;;      Temps:          0       0       0       0       0       0       0
 25552 ;;      Totals:         1       0       0       0       0       0       0
 25553 ;;Total ram usage:        1 bytes
 25554 ;; Hardware stack levels used:    1
 25555 ;; Hardware stack levels required when called:    3
 25556 ;; This function calls:
 25557 ;;		Nothing
 25558 ;; This function is called by:
 25559 ;;		_init
 25560 ;; This function uses a non-reentrant model
 25561 ;;
 25562                           
 25563                           	psect	text72
 25564  0016F6                     __ptext72:
 25565                           	opt stack 0
 25566  0016F6                     _OpenTimer0:
 25567                           	opt stack 25
 25568                           
 25569                           ;incstack = 0
 25570                           ;incstack = 0
 25571                           ;OpenTimer0@config stored from wreg
 25572  0016F6  CFE8 F021          	movff	wreg,OpenTimer0@config
 25573                           
 25574                           ; BSR set to: 0
 25575  0016FA  5021               	movf	OpenTimer0@config,w,c
 25576  0016FC  0B7F               	andlw	127
 25577  0016FE  6ED5               	movwf	4053,c	;volatile
 25578                           
 25579                           ; BSR set to: 0
 25580  001700  6AD7               	clrf	4055,c	;volatile
 25581                           
 25582                           ; BSR set to: 0
 25583  001702  6AD6               	clrf	4054,c	;volatile
 25584                           
 25585                           ; BSR set to: 0
 25586  001704  94F2               	bcf	intcon,2,c	;volatile
 25587                           
 25588                           ; BSR set to: 0
 25589  001706  AE21               	btfss	OpenTimer0@config,7,c
 25590  001708  D002               	goto	l1805
 25591                           
 25592                           ; BSR set to: 0
 25593  00170A  8AF2               	bsf	intcon,5,c	;volatile
 25594  00170C  D001               	goto	l1806
 25595  00170E                     l1805:
 25596                           
 25597                           ; BSR set to: 0
 25598  00170E  9AF2               	bcf	intcon,5,c	;volatile
 25599  001710                     l1806:
 25600                           
 25601                           ; BSR set to: 0
 25602  001710  8ED5               	bsf	4053,7,c	;volatile
 25603                           
 25604                           ; BSR set to: 0
 25605  001712  0012               	return	
 25606  001714                     __end_of_OpenTimer0:
 25607                           	opt stack 0
 25608                           tblptru	equ	0xFF8
 25609                           tblptrh	equ	0xFF7
 25610                           tblptrl	equ	0xFF6
 25611                           tablat	equ	0xFF5
 25612                           prodh	equ	0xFF4
 25613                           prodl	equ	0xFF3
 25614                           intcon	equ	0xFF2
 25615                           indf0	equ	0xFEF
 25616                           postinc0	equ	0xFEE
 25617                           fsr0h	equ	0xFEA
 25618                           fsr0l	equ	0xFE9
 25619                           wreg	equ	0xFE8
 25620                           indf1	equ	0xFE7
 25621                           postinc1	equ	0xFE6
 25622                           postdec1	equ	0xFE5
 25623                           fsr1h	equ	0xFE2
 25624                           fsr1l	equ	0xFE1
 25625                           indf2	equ	0xFDF
 25626                           postinc2	equ	0xFDE
 25627                           postdec2	equ	0xFDD
 25628                           plusw2	equ	0xFDB
 25629                           fsr2h	equ	0xFDA
 25630                           fsr2l	equ	0xFD9
 25631                           status	equ	0xFD8
 25632                           
 25633 ;; *************** function _OpenUSART *****************
 25634 ;; Defined at:
 25635 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25636 ;; Parameters:    Size  Location     Type
 25637 ;;  config          1    wreg     unsigned char 
 25638 ;;  spbrg           2   32[COMRAM] unsigned int 
 25639 ;; Auto vars:     Size  Location     Type
 25640 ;;  config          1    0[BANK0 ] unsigned char 
 25641 ;; Return value:  Size  Location     Type
 25642 ;;		None               void
 25643 ;; Registers used:
 25644 ;;		wreg, status,2
 25645 ;; Tracked objects:
 25646 ;;		On entry : F/0
 25647 ;;		On exit  : F/0
 25648 ;;		Unchanged: 0/0
 25649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25650 ;;      Params:         2       0       0       0       0       0       0
 25651 ;;      Locals:         0       1       0       0       0       0       0
 25652 ;;      Temps:          0       0       0       0       0       0       0
 25653 ;;      Totals:         2       1       0       0       0       0       0
 25654 ;;Total ram usage:        3 bytes
 25655 ;; Hardware stack levels used:    1
 25656 ;; Hardware stack levels required when called:    3
 25657 ;; This function calls:
 25658 ;;		Nothing
 25659 ;; This function is called by:
 25660 ;;		_init
 25661 ;; This function uses a non-reentrant model
 25662 ;;
 25663                           
 25664                           	psect	text73
 25665  001CAE                     __ptext73:
 25666                           	opt stack 0
 25667  001CAE                     _OpenUSART:
 25668                           	opt stack 25
 25669                           
 25670                           ; BSR set to: 0
 25671                           ;incstack = 0
 25672                           ;incstack = 0
 25673                           ;OpenUSART@config stored from wreg
 25674  001CAE  CFE8 F060          	movff	wreg,OpenUSART@config
 25675                           
 25676                           ; BSR set to: 0
 25677  001CB2  6AAC               	clrf	4012,c	;volatile
 25678  001CB4  6AAB               	clrf	4011,c	;volatile
 25679                           
 25680                           ; BSR set to: 0
 25681  001CB6  B160               	btfsc	OpenUSART@config& (0+255),0,b
 25682                           
 25683                           ; BSR set to: 0
 25684  001CB8  88AC               	bsf	4012,4,c	;volatile
 25685                           
 25686                           ; BSR set to: 0
 25687  001CBA  A360               	btfss	OpenUSART@config& (0+255),1,b
 25688  001CBC  D002               	goto	l14431
 25689                           
 25690                           ; BSR set to: 0
 25691  001CBE  8CAC               	bsf	4012,6,c	;volatile
 25692  001CC0  8CAB               	bsf	4011,6,c	;volatile
 25693  001CC2                     l14431:
 25694                           
 25695                           ; BSR set to: 0
 25696  001CC2  B560               	btfsc	OpenUSART@config& (0+255),2,b
 25697                           
 25698                           ; BSR set to: 0
 25699  001CC4  8EAC               	bsf	4012,7,c	;volatile
 25700                           
 25701                           ; BSR set to: 0
 25702  001CC6  A760               	btfss	OpenUSART@config& (0+255),3,b
 25703  001CC8  D002               	goto	l1838
 25704                           
 25705                           ; BSR set to: 0
 25706  001CCA  88AB               	bsf	4011,4,c	;volatile
 25707  001CCC  D001               	goto	l14439
 25708  001CCE                     l1838:
 25709                           
 25710                           ; BSR set to: 0
 25711  001CCE  8AAB               	bsf	4011,5,c	;volatile
 25712  001CD0                     l14439:
 25713                           
 25714                           ; BSR set to: 0
 25715  001CD0  B960               	btfsc	OpenUSART@config& (0+255),4,b
 25716                           
 25717                           ; BSR set to: 0
 25718  001CD2  84AC               	bsf	4012,2,c	;volatile
 25719                           
 25720                           ; BSR set to: 0
 25721  001CD4  989E               	bcf	3998,4,c	;volatile
 25722                           
 25723                           ; BSR set to: 0
 25724  001CD6  BB60               	btfsc	OpenUSART@config& (0+255),5,b
 25725                           
 25726                           ; BSR set to: 0
 25727  001CD8  86AB               	bsf	4011,3,c	;volatile
 25728                           
 25729                           ; BSR set to: 0
 25730  001CDA  AD60               	btfss	OpenUSART@config& (0+255),6,b
 25731  001CDC  D002               	goto	l1842
 25732                           
 25733                           ; BSR set to: 0
 25734  001CDE  8A9D               	bsf	3997,5,c	;volatile
 25735  001CE0  D001               	goto	l1843
 25736  001CE2                     l1842:
 25737                           
 25738                           ; BSR set to: 0
 25739  001CE2  9A9D               	bcf	3997,5,c	;volatile
 25740  001CE4                     l1843:
 25741                           
 25742                           ; BSR set to: 0
 25743  001CE4  9A9E               	bcf	3998,5,c	;volatile
 25744                           
 25745                           ; BSR set to: 0
 25746  001CE6  AF60               	btfss	OpenUSART@config& (0+255),7,b
 25747  001CE8  D002               	goto	l1844
 25748                           
 25749                           ; BSR set to: 0
 25750  001CEA  889D               	bsf	3997,4,c	;volatile
 25751  001CEC  D001               	goto	l1845
 25752  001CEE                     l1844:
 25753                           
 25754                           ; BSR set to: 0
 25755  001CEE  989D               	bcf	3997,4,c	;volatile
 25756  001CF0                     l1845:
 25757                           
 25758                           ; BSR set to: 0
 25759  001CF0  C021  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25760                           
 25761                           ; BSR set to: 0
 25762  001CF4  5022               	movf	OpenUSART@spbrg+1,w,c
 25763  001CF6  6EB0               	movwf	4016,c	;volatile
 25764                           
 25765                           ; BSR set to: 0
 25766  001CF8  8AAC               	bsf	4012,5,c	;volatile
 25767                           
 25768                           ; BSR set to: 0
 25769  001CFA  8EAB               	bsf	4011,7,c	;volatile
 25770                           
 25771                           ; BSR set to: 0
 25772  001CFC  9C94               	bcf	3988,6,c	;volatile
 25773                           
 25774                           ; BSR set to: 0
 25775  001CFE  8E94               	bsf	3988,7,c	;volatile
 25776                           
 25777                           ; BSR set to: 0
 25778  001D00  B8AC               	btfsc	4012,4,c	;volatile
 25779                           
 25780                           ; BSR set to: 0
 25781  001D02  BEAC               	btfsc	4012,7,c	;volatile
 25782  001D04  D001               	goto	l1847
 25783                           
 25784                           ; BSR set to: 0
 25785  001D06  8C94               	bsf	3988,6,c	;volatile
 25786  001D08                     l1847:
 25787                           
 25788                           ; BSR set to: 0
 25789  001D08  0012               	return	
 25790  001D0A                     __end_of_OpenUSART:
 25791                           	opt stack 0
 25792                           tblptru	equ	0xFF8
 25793                           tblptrh	equ	0xFF7
 25794                           tblptrl	equ	0xFF6
 25795                           tablat	equ	0xFF5
 25796                           prodh	equ	0xFF4
 25797                           prodl	equ	0xFF3
 25798                           intcon	equ	0xFF2
 25799                           indf0	equ	0xFEF
 25800                           postinc0	equ	0xFEE
 25801                           fsr0h	equ	0xFEA
 25802                           fsr0l	equ	0xFE9
 25803                           wreg	equ	0xFE8
 25804                           indf1	equ	0xFE7
 25805                           postinc1	equ	0xFE6
 25806                           postdec1	equ	0xFE5
 25807                           fsr1h	equ	0xFE2
 25808                           fsr1l	equ	0xFE1
 25809                           indf2	equ	0xFDF
 25810                           postinc2	equ	0xFDE
 25811                           postdec2	equ	0xFDD
 25812                           plusw2	equ	0xFDB
 25813                           fsr2h	equ	0xFDA
 25814                           fsr2l	equ	0xFD9
 25815                           status	equ	0xFD8
 25816                           
 25817 ;; *************** function _WriteTimer0 *****************
 25818 ;; Defined at:
 25819 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25820 ;; Parameters:    Size  Location     Type
 25821 ;;  timer0          2   32[COMRAM] unsigned int 
 25822 ;; Auto vars:     Size  Location     Type
 25823 ;;  timer           2    0[BANK0 ] struct Timers
 25824 ;; Return value:  Size  Location     Type
 25825 ;;		None               void
 25826 ;; Registers used:
 25827 ;;		None
 25828 ;; Tracked objects:
 25829 ;;		On entry : F/0
 25830 ;;		On exit  : F/0
 25831 ;;		Unchanged: F/0
 25832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25833 ;;      Params:         2       0       0       0       0       0       0
 25834 ;;      Locals:         0       2       0       0       0       0       0
 25835 ;;      Temps:          0       0       0       0       0       0       0
 25836 ;;      Totals:         2       2       0       0       0       0       0
 25837 ;;Total ram usage:        4 bytes
 25838 ;; Hardware stack levels used:    1
 25839 ;; Hardware stack levels required when called:    3
 25840 ;; This function calls:
 25841 ;;		Nothing
 25842 ;; This function is called by:
 25843 ;;		_init
 25844 ;; This function uses a non-reentrant model
 25845 ;;
 25846                           
 25847                           	psect	text74
 25848  001684                     __ptext74:
 25849                           	opt stack 0
 25850  001684                     _WriteTimer0:
 25851                           	opt stack 25
 25852                           
 25853                           ; BSR set to: 0
 25854                           
 25855                           ; BSR set to: 0
 25856                           ;incstack = 0
 25857                           ;incstack = 0
 25858  001684  C021  F060         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25859  001688  C022  F061         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25860  00168C  C061  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25861  001690  C060  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25862                           
 25863                           ; BSR set to: 0
 25864  001694  0012               	return	
 25865  001696                     __end_of_WriteTimer0:
 25866                           	opt stack 0
 25867                           tblptru	equ	0xFF8
 25868                           tblptrh	equ	0xFF7
 25869                           tblptrl	equ	0xFF6
 25870                           tablat	equ	0xFF5
 25871                           prodh	equ	0xFF4
 25872                           prodl	equ	0xFF3
 25873                           intcon	equ	0xFF2
 25874                           indf0	equ	0xFEF
 25875                           postinc0	equ	0xFEE
 25876                           fsr0h	equ	0xFEA
 25877                           fsr0l	equ	0xFE9
 25878                           wreg	equ	0xFE8
 25879                           indf1	equ	0xFE7
 25880                           postinc1	equ	0xFE6
 25881                           postdec1	equ	0xFE5
 25882                           fsr1h	equ	0xFE2
 25883                           fsr1l	equ	0xFE1
 25884                           indf2	equ	0xFDF
 25885                           postinc2	equ	0xFDE
 25886                           postdec2	equ	0xFDD
 25887                           plusw2	equ	0xFDB
 25888                           fsr2h	equ	0xFDA
 25889                           fsr2l	equ	0xFD9
 25890                           status	equ	0xFD8
 25891                           
 25892 ;; *************** function _vscp_restoreDefaults *****************
 25893 ;; Defined at:
 25894 ;;		line 2783 in file "main.c"
 25895 ;; Parameters:    Size  Location     Type
 25896 ;;		None
 25897 ;; Auto vars:     Size  Location     Type
 25898 ;;		None
 25899 ;; Return value:  Size  Location     Type
 25900 ;;		None               void
 25901 ;; Registers used:
 25902 ;;		wreg, status,2, status,0, cstack
 25903 ;; Tracked objects:
 25904 ;;		On entry : 0/0
 25905 ;;		On exit  : F/0
 25906 ;;		Unchanged: 0/0
 25907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25908 ;;      Params:         0       0       0       0       0       0       0
 25909 ;;      Locals:         0       0       0       0       0       0       0
 25910 ;;      Temps:          0       0       0       0       0       0       0
 25911 ;;      Totals:         0       0       0       0       0       0       0
 25912 ;;Total ram usage:        0 bytes
 25913 ;; Hardware stack levels used:    1
 25914 ;; Hardware stack levels required when called:    5
 25915 ;; This function calls:
 25916 ;;		_init_app_ram
 25917 ;;		_init_app_eeprom
 25918 ;; This function is called by:
 25919 ;;		_main
 25920 ;; This function uses a non-reentrant model
 25921 ;;
 25922                           
 25923                           	psect	text75
 25924  001658                     __ptext75:
 25925                           	opt stack 0
 25926  001658                     _vscp_restoreDefaults:
 25927                           	opt stack 24
 25928                           
 25929                           ;main.c: 2784: init_app_eeprom();
 25930                           
 25931                           ; BSR set to: 0
 25932                           ;incstack = 0
 25933                           ;incstack = 0
 25934  001658  ECDA  F013         	call	_init_app_eeprom	;wreg free
 25935                           
 25936                           ;main.c: 2785: init_app_ram();
 25937  00165C  EFD8  F00D         	goto	_init_app_ram	;wreg free
 25938  001660                     __end_of_vscp_restoreDefaults:
 25939                           	opt stack 0
 25940                           tblptru	equ	0xFF8
 25941                           tblptrh	equ	0xFF7
 25942                           tblptrl	equ	0xFF6
 25943                           tablat	equ	0xFF5
 25944                           prodh	equ	0xFF4
 25945                           prodl	equ	0xFF3
 25946                           intcon	equ	0xFF2
 25947                           indf0	equ	0xFEF
 25948                           postinc0	equ	0xFEE
 25949                           fsr0h	equ	0xFEA
 25950                           fsr0l	equ	0xFE9
 25951                           wreg	equ	0xFE8
 25952                           indf1	equ	0xFE7
 25953                           postinc1	equ	0xFE6
 25954                           postdec1	equ	0xFE5
 25955                           fsr1h	equ	0xFE2
 25956                           fsr1l	equ	0xFE1
 25957                           indf2	equ	0xFDF
 25958                           postinc2	equ	0xFDE
 25959                           postdec2	equ	0xFDD
 25960                           plusw2	equ	0xFDB
 25961                           fsr2h	equ	0xFDA
 25962                           fsr2l	equ	0xFD9
 25963                           status	equ	0xFD8
 25964                           
 25965 ;; *************** function _init_app_eeprom *****************
 25966 ;; Defined at:
 25967 ;;		line 488 in file "main.c"
 25968 ;; Parameters:    Size  Location     Type
 25969 ;;		None
 25970 ;; Auto vars:     Size  Location     Type
 25971 ;;  i               1   33[COMRAM] unsigned char 
 25972 ;; Return value:  Size  Location     Type
 25973 ;;		None               void
 25974 ;; Registers used:
 25975 ;;		wreg, status,2, status,0, cstack
 25976 ;; Tracked objects:
 25977 ;;		On entry : 0/0
 25978 ;;		On exit  : 0/0
 25979 ;;		Unchanged: 0/0
 25980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25981 ;;      Params:         0       0       0       0       0       0       0
 25982 ;;      Locals:         1       0       0       0       0       0       0
 25983 ;;      Temps:          0       0       0       0       0       0       0
 25984 ;;      Totals:         1       0       0       0       0       0       0
 25985 ;;Total ram usage:        1 bytes
 25986 ;; Hardware stack levels used:    1
 25987 ;; Hardware stack levels required when called:    4
 25988 ;; This function calls:
 25989 ;;		_Busy_eep
 25990 ;;		_Write_b_eep
 25991 ;; This function is called by:
 25992 ;;		_vscp_restoreDefaults
 25993 ;; This function uses a non-reentrant model
 25994 ;;
 25995                           
 25996                           	psect	text76
 25997  0027B4                     __ptext76:
 25998                           	opt stack 0
 25999  0027B4                     _init_app_eeprom:
 26000                           	opt stack 24
 26001                           
 26002                           ;main.c: 489: uint8_t i;
 26003                           ;main.c: 491: (Busy_eep(), Write_b_eep(0x01,0x55));
 26004                           
 26005                           ; BSR set to: 0
 26006                           ;incstack = 0
 26007                           ;incstack = 0
 26008  0027B4  EC29  F00B         	call	_Busy_eep	;wreg free
 26009  0027B8  0100               	movlb	0	; () banked
 26010  0027BA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26011  0027BC  0E01               	movlw	1
 26012  0027BE  6F60               	movwf	?_Write_b_eep& (0+255),b
 26013  0027C0  0E55               	movlw	85
 26014  0027C2  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26015  0027C4  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26016                           
 26017                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26018  0027C8  EC29  F00B         	call	_Busy_eep	;wreg free
 26019  0027CC  0100               	movlb	0	; () banked
 26020  0027CE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26021  0027D0  0E02               	movlw	2
 26022  0027D2  6F60               	movwf	?_Write_b_eep& (0+255),b
 26023  0027D4  0EAA               	movlw	170
 26024  0027D6  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26025  0027D8  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26026                           
 26027                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x03,0));
 26028  0027DC  EC29  F00B         	call	_Busy_eep	;wreg free
 26029  0027E0  0100               	movlb	0	; () banked
 26030  0027E2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26031  0027E4  0E03               	movlw	3
 26032  0027E6  6F60               	movwf	?_Write_b_eep& (0+255),b
 26033  0027E8  0E00               	movlw	0
 26034  0027EA  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26035  0027EC  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26036                           
 26037                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x05,0));
 26038  0027F0  EC29  F00B         	call	_Busy_eep	;wreg free
 26039  0027F4  0100               	movlb	0	; () banked
 26040  0027F6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26041  0027F8  0E05               	movlw	5
 26042  0027FA  6F60               	movwf	?_Write_b_eep& (0+255),b
 26043  0027FC  0E00               	movlw	0
 26044  0027FE  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26045  002800  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26046                           
 26047                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x06,0));
 26048  002804  EC29  F00B         	call	_Busy_eep	;wreg free
 26049  002808  0100               	movlb	0	; () banked
 26050  00280A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26051  00280C  0E06               	movlw	6
 26052  00280E  6F60               	movwf	?_Write_b_eep& (0+255),b
 26053  002810  0E00               	movlw	0
 26054  002812  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26055  002814  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26056                           
 26057                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x09,10u));
 26058  002818  EC29  F00B         	call	_Busy_eep	;wreg free
 26059  00281C  0100               	movlb	0	; () banked
 26060  00281E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26061  002820  0E09               	movlw	9
 26062  002822  6F60               	movwf	?_Write_b_eep& (0+255),b
 26063  002824  0E0A               	movlw	10
 26064  002826  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26065  002828  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26066                           
 26067                           ;main.c: 499: for (i = 0x20; i < (0x5C + 4); i++) {
 26068  00282C  0E20               	movlw	32
 26069  00282E  6E22               	movwf	init_app_eeprom@i,c
 26070  002830                     l14495:
 26071                           
 26072                           ;main.c: 500: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26073  002830  EC29  F00B         	call	_Busy_eep	;wreg free
 26074  002834  D812               	call	PL62	;call to abstracted procedure
 26075  002836  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26076  00283A  2A22               	incf	init_app_eeprom@i,f,c
 26077  00283C  0E5F               	movlw	95
 26078  00283E  6422               	cpfsgt	init_app_eeprom@i,c
 26079  002840  D7F7               	goto	l14495
 26080                           
 26081                           ;main.c: 501: }
 26082                           ;main.c: 504: for (i = 0x60; i < (0x64 + 4); i++) {
 26083  002842  0E60               	movlw	96
 26084  002844  6E22               	movwf	init_app_eeprom@i,c
 26085  002846                     l14509:
 26086                           
 26087                           ;main.c: 505: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26088  002846  EC29  F00B         	call	_Busy_eep	;wreg free
 26089  00284A  D807               	call	PL62	;call to abstracted procedure
 26090  00284C  ECF9  F00B         	call	_Write_b_eep	;wreg free
 26091  002850  2A22               	incf	init_app_eeprom@i,f,c
 26092  002852  0E67               	movlw	103
 26093  002854  6422               	cpfsgt	init_app_eeprom@i,c
 26094  002856  D7F7               	goto	l14509
 26095  002858  0C67               	retlw	103
 26096  00285A                     __end_of_init_app_eeprom:
 26097                           	opt stack 0
 26098  00285A                     PL62:
 26099                           	opt stack 24
 26100  00285A  0100               	movlb	0	; () banked
 26101  00285C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26102  00285E  0E01               	movlw	1
 26103  002860  6F60               	movwf	?_Write_b_eep& (0+255),b
 26104  002862  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26105  002864  0CFF               	retlw	255
 26106  002866                     __end_ofPL62:
 26107                           	opt stack 0
 26108                           tblptru	equ	0xFF8
 26109                           tblptrh	equ	0xFF7
 26110                           tblptrl	equ	0xFF6
 26111                           tablat	equ	0xFF5
 26112                           prodh	equ	0xFF4
 26113                           prodl	equ	0xFF3
 26114                           intcon	equ	0xFF2
 26115                           indf0	equ	0xFEF
 26116                           postinc0	equ	0xFEE
 26117                           fsr0h	equ	0xFEA
 26118                           fsr0l	equ	0xFE9
 26119                           wreg	equ	0xFE8
 26120                           indf1	equ	0xFE7
 26121                           postinc1	equ	0xFE6
 26122                           postdec1	equ	0xFE5
 26123                           fsr1h	equ	0xFE2
 26124                           fsr1l	equ	0xFE1
 26125                           indf2	equ	0xFDF
 26126                           postinc2	equ	0xFDE
 26127                           postdec2	equ	0xFDD
 26128                           plusw2	equ	0xFDB
 26129                           fsr2h	equ	0xFDA
 26130                           fsr2l	equ	0xFD9
 26131                           status	equ	0xFD8
 26132                           
 26133 ;; *************** function _Write_b_eep *****************
 26134 ;; Defined at:
 26135 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26136 ;; Parameters:    Size  Location     Type
 26137 ;;  badd            2    0[BANK0 ] unsigned int 
 26138 ;;  bdat            1    2[BANK0 ] unsigned char 
 26139 ;; Auto vars:     Size  Location     Type
 26140 ;;  GIE_BIT_VAL     1   32[COMRAM] unsigned char 
 26141 ;; Return value:  Size  Location     Type
 26142 ;;		None               void
 26143 ;; Registers used:
 26144 ;;		wreg, status,2
 26145 ;; Tracked objects:
 26146 ;;		On entry : F/0
 26147 ;;		On exit  : 0/0
 26148 ;;		Unchanged: 0/0
 26149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26150 ;;      Params:         0       3       0       0       0       0       0
 26151 ;;      Locals:         1       0       0       0       0       0       0
 26152 ;;      Temps:          0       0       0       0       0       0       0
 26153 ;;      Totals:         1       3       0       0       0       0       0
 26154 ;;Total ram usage:        4 bytes
 26155 ;; Hardware stack levels used:    1
 26156 ;; Hardware stack levels required when called:    3
 26157 ;; This function calls:
 26158 ;;		Nothing
 26159 ;; This function is called by:
 26160 ;;		_init_app_eeprom
 26161 ;;		_doModeVerbose
 26162 ;;		_doModeSLCAN
 26163 ;; This function uses a non-reentrant model
 26164 ;;
 26165                           
 26166                           	psect	text77
 26167  0017F2                     __ptext77:
 26168                           	opt stack 0
 26169  0017F2                     _Write_b_eep:
 26170                           	opt stack 25
 26171                           
 26172                           ; BSR set to: 0
 26173                           
 26174                           ;incstack = 0
 26175                           ;incstack = 0
 26176  0017F2  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26177  0017F6  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26178  0017FA  9EA6               	bcf	4006,7,c	;volatile
 26179  0017FC  9CA6               	bcf	4006,6,c	;volatile
 26180  0017FE  84A6               	bsf	4006,2,c	;volatile
 26181                           
 26182                           ; BSR set to: 0
 26183  001800  0E00               	movlw	0
 26184  001802  BEF2               	btfsc	intcon,7,c	;volatile
 26185  001804  0E01               	movlw	1
 26186  001806  6E21               	movwf	Write_b_eep@GIE_BIT_VAL,c
 26187                           
 26188                           ; BSR set to: 0
 26189  001808  9EF2               	bcf	intcon,7,c	;volatile
 26190                           
 26191                           ; BSR set to: 0
 26192  00180A  0E55               	movlw	85
 26193  00180C  6EA7               	movwf	4007,c	;volatile
 26194                           
 26195                           ; BSR set to: 0
 26196  00180E  0EAA               	movlw	170
 26197  001810  6EA7               	movwf	4007,c	;volatile
 26198                           
 26199                           ; BSR set to: 0
 26200  001812  82A6               	bsf	4006,1,c	;volatile
 26201  001814                     l1789:
 26202                           
 26203                           ; BSR set to: 0
 26204  001814  B2A6               	btfsc	4006,1,c	;volatile
 26205  001816  D7FE               	goto	l1789
 26206                           
 26207                           ; BSR set to: 0
 26208  001818  B021               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 26209  00181A  D002               	bra	u19615
 26210  00181C  9EF2               	bcf	intcon,7,c	;volatile
 26211  00181E  D001               	bra	u19616
 26212  001820                     u19615:
 26213  001820  8EF2               	bsf	intcon,7,c	;volatile
 26214  001822                     u19616:
 26215  001822  94A6               	bcf	4006,2,c	;volatile
 26216  001824  0012               	return	
 26217  001826                     __end_of_Write_b_eep:
 26218                           	opt stack 0
 26219                           tblptru	equ	0xFF8
 26220                           tblptrh	equ	0xFF7
 26221                           tblptrl	equ	0xFF6
 26222                           tablat	equ	0xFF5
 26223                           prodh	equ	0xFF4
 26224                           prodl	equ	0xFF3
 26225                           intcon	equ	0xFF2
 26226                           indf0	equ	0xFEF
 26227                           postinc0	equ	0xFEE
 26228                           fsr0h	equ	0xFEA
 26229                           fsr0l	equ	0xFE9
 26230                           wreg	equ	0xFE8
 26231                           indf1	equ	0xFE7
 26232                           postinc1	equ	0xFE6
 26233                           postdec1	equ	0xFE5
 26234                           fsr1h	equ	0xFE2
 26235                           fsr1l	equ	0xFE1
 26236                           indf2	equ	0xFDF
 26237                           postinc2	equ	0xFDE
 26238                           postdec2	equ	0xFDD
 26239                           plusw2	equ	0xFDB
 26240                           fsr2h	equ	0xFDA
 26241                           fsr2l	equ	0xFD9
 26242                           status	equ	0xFD8
 26243                           
 26244 ;; *************** function _Busy_eep *****************
 26245 ;; Defined at:
 26246 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26247 ;; Parameters:    Size  Location     Type
 26248 ;;		None
 26249 ;; Auto vars:     Size  Location     Type
 26250 ;;		None
 26251 ;; Return value:  Size  Location     Type
 26252 ;;		None               void
 26253 ;; Registers used:
 26254 ;;		None
 26255 ;; Tracked objects:
 26256 ;;		On entry : 0/1
 26257 ;;		On exit  : 0/0
 26258 ;;		Unchanged: 0/0
 26259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26260 ;;      Params:         0       0       0       0       0       0       0
 26261 ;;      Locals:         0       0       0       0       0       0       0
 26262 ;;      Temps:          0       0       0       0       0       0       0
 26263 ;;      Totals:         0       0       0       0       0       0       0
 26264 ;;Total ram usage:        0 bytes
 26265 ;; Hardware stack levels used:    1
 26266 ;; Hardware stack levels required when called:    3
 26267 ;; This function calls:
 26268 ;;		Nothing
 26269 ;; This function is called by:
 26270 ;;		_init_app_eeprom
 26271 ;;		_doModeVerbose
 26272 ;;		_doModeSLCAN
 26273 ;; This function uses a non-reentrant model
 26274 ;;
 26275                           
 26276                           	psect	text78
 26277  001652                     __ptext78:
 26278                           	opt stack 0
 26279  001652                     _Busy_eep:
 26280                           	opt stack 25
 26281  001652                     l1764:
 26282  001652  A2A6               	btfss	4006,1,c	;volatile
 26283  001654  0012               	return	
 26284  001656  D7FD               	goto	l1764
 26285  001658                     __end_of_Busy_eep:
 26286                           	opt stack 0
 26287                           tblptru	equ	0xFF8
 26288                           tblptrh	equ	0xFF7
 26289                           tblptrl	equ	0xFF6
 26290                           tablat	equ	0xFF5
 26291                           prodh	equ	0xFF4
 26292                           prodl	equ	0xFF3
 26293                           intcon	equ	0xFF2
 26294                           indf0	equ	0xFEF
 26295                           postinc0	equ	0xFEE
 26296                           fsr0h	equ	0xFEA
 26297                           fsr0l	equ	0xFE9
 26298                           wreg	equ	0xFE8
 26299                           indf1	equ	0xFE7
 26300                           postinc1	equ	0xFE6
 26301                           postdec1	equ	0xFE5
 26302                           fsr1h	equ	0xFE2
 26303                           fsr1l	equ	0xFE1
 26304                           indf2	equ	0xFDF
 26305                           postinc2	equ	0xFDE
 26306                           postdec2	equ	0xFDD
 26307                           plusw2	equ	0xFDB
 26308                           fsr2h	equ	0xFDA
 26309                           fsr2l	equ	0xFD9
 26310                           status	equ	0xFD8
 26311                           
 26312 ;; *************** function _init_app_ram *****************
 26313 ;; Defined at:
 26314 ;;		line 470 in file "main.c"
 26315 ;; Parameters:    Size  Location     Type
 26316 ;;		None
 26317 ;; Auto vars:     Size  Location     Type
 26318 ;;		None
 26319 ;; Return value:  Size  Location     Type
 26320 ;;		None               void
 26321 ;; Registers used:
 26322 ;;		wreg, status,2, cstack
 26323 ;; Tracked objects:
 26324 ;;		On entry : 0/0
 26325 ;;		On exit  : F/0
 26326 ;;		Unchanged: 0/0
 26327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26328 ;;      Params:         0       0       0       0       0       0       0
 26329 ;;      Locals:         0       0       0       0       0       0       0
 26330 ;;      Temps:          0       0       0       0       0       0       0
 26331 ;;      Totals:         0       0       0       0       0       0       0
 26332 ;;Total ram usage:        0 bytes
 26333 ;; Hardware stack levels used:    1
 26334 ;; Hardware stack levels required when called:    4
 26335 ;; This function calls:
 26336 ;;		_Read_b_eep
 26337 ;; This function is called by:
 26338 ;;		_init
 26339 ;;		_vscp_restoreDefaults
 26340 ;; This function uses a non-reentrant model
 26341 ;;
 26342                           
 26343                           	psect	text79
 26344  001BB0                     __ptext79:
 26345                           	opt stack 0
 26346  001BB0                     _init_app_ram:
 26347                           	opt stack 24
 26348                           
 26349                           ;main.c: 472: can_receiveOverruns = 0;
 26350                           
 26351                           ;incstack = 0
 26352                           ;incstack = 0
 26353  001BB0  0101               	movlb	1	; () banked
 26354  001BB2  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26355  001BB4  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26356  001BB6  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26357  001BB8  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26358                           
 26359                           ;main.c: 473: can_transmitOverruns = 0;
 26360  001BBA  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26361  001BBC  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26362  001BBE  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26363  001BC0  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26364                           
 26365                           ;main.c: 474: uart_receiveOverruns = 0;
 26366  001BC2  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26367  001BC4  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26368  001BC6  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26369  001BC8  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26370                           
 26371                           ;main.c: 475: uart_transmitOverruns = 0;
 26372  001BCA  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26373  001BCC  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26374  001BCE  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26375  001BD0  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26376                           
 26377                           ; BSR set to: 1
 26378                           ;main.c: 477: bHex = Read_b_eep(0x06);
 26379  001BD2  6A22               	clrf	?_Read_b_eep+1,c
 26380  001BD4  0E06               	movlw	6
 26381  001BD6  6E21               	movwf	?_Read_b_eep,c
 26382  001BD8  EC39  F00B         	call	_Read_b_eep	;wreg free
 26383  001BDC  0100               	movlb	0	; () banked
 26384  001BDE  6FE3               	movwf	_bHex& (0+255),b
 26385                           
 26386                           ;main.c: 478: mode = Read_b_eep(0x03);
 26387  001BE0  6A22               	clrf	?_Read_b_eep+1,c
 26388  001BE2  0E03               	movlw	3
 26389  001BE4  6E21               	movwf	?_Read_b_eep,c
 26390  001BE6  EC39  F00B         	call	_Read_b_eep	;wreg free
 26391  001BEA  0100               	movlb	0	; () banked
 26392  001BEC  6FE6               	movwf	_mode& (0+255),b
 26393                           
 26394                           ;main.c: 480: rwtimeout = Read_b_eep(0x09);
 26395  001BEE  6A22               	clrf	?_Read_b_eep+1,c
 26396  001BF0  0E09               	movlw	9
 26397  001BF2  6E21               	movwf	?_Read_b_eep,c
 26398  001BF4  EC39  F00B         	call	_Read_b_eep	;wreg free
 26399  001BF8  0100               	movlb	0	; () banked
 26400  001BFA  6FE8               	movwf	_rwtimeout& (0+255),b
 26401                           
 26402                           ; BSR set to: 0
 26403  001BFC  0012               	return	
 26404  001BFE                     __end_of_init_app_ram:
 26405                           	opt stack 0
 26406                           tblptru	equ	0xFF8
 26407                           tblptrh	equ	0xFF7
 26408                           tblptrl	equ	0xFF6
 26409                           tablat	equ	0xFF5
 26410                           prodh	equ	0xFF4
 26411                           prodl	equ	0xFF3
 26412                           intcon	equ	0xFF2
 26413                           indf0	equ	0xFEF
 26414                           postinc0	equ	0xFEE
 26415                           fsr0h	equ	0xFEA
 26416                           fsr0l	equ	0xFE9
 26417                           wreg	equ	0xFE8
 26418                           indf1	equ	0xFE7
 26419                           postinc1	equ	0xFE6
 26420                           postdec1	equ	0xFE5
 26421                           fsr1h	equ	0xFE2
 26422                           fsr1l	equ	0xFE1
 26423                           indf2	equ	0xFDF
 26424                           postinc2	equ	0xFDE
 26425                           postdec2	equ	0xFDD
 26426                           plusw2	equ	0xFDB
 26427                           fsr2h	equ	0xFDA
 26428                           fsr2l	equ	0xFD9
 26429                           status	equ	0xFD8
 26430                           
 26431 ;; *************** function _Read_b_eep *****************
 26432 ;; Defined at:
 26433 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26434 ;; Parameters:    Size  Location     Type
 26435 ;;  badd            2   32[COMRAM] unsigned int 
 26436 ;; Auto vars:     Size  Location     Type
 26437 ;;		None
 26438 ;; Return value:  Size  Location     Type
 26439 ;;                  1    wreg      unsigned char 
 26440 ;; Registers used:
 26441 ;;		wreg, status,2
 26442 ;; Tracked objects:
 26443 ;;		On entry : 0/0
 26444 ;;		On exit  : 0/0
 26445 ;;		Unchanged: 0/0
 26446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26447 ;;      Params:         2       0       0       0       0       0       0
 26448 ;;      Locals:         0       0       0       0       0       0       0
 26449 ;;      Temps:          0       0       0       0       0       0       0
 26450 ;;      Totals:         2       0       0       0       0       0       0
 26451 ;;Total ram usage:        2 bytes
 26452 ;; Hardware stack levels used:    1
 26453 ;; Hardware stack levels required when called:    3
 26454 ;; This function calls:
 26455 ;;		Nothing
 26456 ;; This function is called by:
 26457 ;;		_main
 26458 ;;		_init_app_ram
 26459 ;; This function uses a non-reentrant model
 26460 ;;
 26461                           
 26462                           	psect	text80
 26463  001672                     __ptext80:
 26464                           	opt stack 0
 26465  001672                     _Read_b_eep:
 26466                           	opt stack 24
 26467                           
 26468                           ; BSR set to: 0
 26469                           ;incstack = 0
 26470                           ;incstack = 0
 26471  001672  C021  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26472  001676  9CA6               	bcf	4006,6,c	;volatile
 26473  001678  9EA6               	bcf	4006,7,c	;volatile
 26474  00167A  80A6               	bsf	4006,0,c	;volatile
 26475  00167C  F000               	nop		;# 
 26476  00167E  F000               	nop		;# 
 26477  001680  50A8               	movf	4008,w,c	;volatile
 26478  001682  0012               	return	
 26479  001684                     __end_of_Read_b_eep:
 26480                           	opt stack 0
 26481                           tblptru	equ	0xFF8
 26482                           tblptrh	equ	0xFF7
 26483                           tblptrl	equ	0xFF6
 26484                           tablat	equ	0xFF5
 26485                           prodh	equ	0xFF4
 26486                           prodl	equ	0xFF3
 26487                           intcon	equ	0xFF2
 26488                           indf0	equ	0xFEF
 26489                           postinc0	equ	0xFEE
 26490                           fsr0h	equ	0xFEA
 26491                           fsr0l	equ	0xFE9
 26492                           wreg	equ	0xFE8
 26493                           indf1	equ	0xFE7
 26494                           postinc1	equ	0xFE6
 26495                           postdec1	equ	0xFE5
 26496                           fsr1h	equ	0xFE2
 26497                           fsr1l	equ	0xFE1
 26498                           indf2	equ	0xFDF
 26499                           postinc2	equ	0xFDE
 26500                           postdec2	equ	0xFDD
 26501                           plusw2	equ	0xFDB
 26502                           fsr2h	equ	0xFDA
 26503                           fsr2l	equ	0xFD9
 26504                           status	equ	0xFD8
 26505                           
 26506 ;; *************** function _fifo_init *****************
 26507 ;; Defined at:
 26508 ;;		line 14 in file "fifo.c"
 26509 ;; Parameters:    Size  Location     Type
 26510 ;;  f               2    0[BANK0 ] PTR struct .
 26511 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26512 ;;  buf             2    2[BANK0 ] PTR const void 
 26513 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26514 ;;  size            2    4[BANK0 ] unsigned short 
 26515 ;; Auto vars:     Size  Location     Type
 26516 ;;		None
 26517 ;; Return value:  Size  Location     Type
 26518 ;;		None               void
 26519 ;; Registers used:
 26520 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26521 ;; Tracked objects:
 26522 ;;		On entry : F/0
 26523 ;;		On exit  : F/0
 26524 ;;		Unchanged: 0/0
 26525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26526 ;;      Params:         0       6       0       0       0       0       0
 26527 ;;      Locals:         0       0       0       0       0       0       0
 26528 ;;      Temps:          0       0       0       0       0       0       0
 26529 ;;      Totals:         0       6       0       0       0       0       0
 26530 ;;Total ram usage:        6 bytes
 26531 ;; Hardware stack levels used:    1
 26532 ;; Hardware stack levels required when called:    3
 26533 ;; This function calls:
 26534 ;;		Nothing
 26535 ;; This function is called by:
 26536 ;;		_main
 26537 ;; This function uses a non-reentrant model
 26538 ;;
 26539                           
 26540                           	psect	text81
 26541  001988                     __ptext81:
 26542                           	opt stack 0
 26543  001988                     _fifo_init:
 26544                           	opt stack 26
 26545                           
 26546                           ; BSR set to: 0
 26547                           ;fifo.c: 15: f->head = 0;
 26548                           
 26549                           ;incstack = 0
 26550                           ;incstack = 0
 26551  001988  EE20 F002          	lfsr	2,2
 26552  00198C  D816               	call	PL98	;call to abstracted procedure
 26553                           
 26554                           ;fifo.c: 16: f->tail = 0;
 26555  00198E  EE20 F004          	lfsr	2,4
 26556  001992  D813               	call	PL98	;call to abstracted procedure
 26557                           
 26558                           ;fifo.c: 17: f->size = size;
 26559  001994  EE20 F006          	lfsr	2,6
 26560  001998  5160               	movf	fifo_init@f& (0+255),w,b
 26561  00199A  26D9               	addwf	fsr2l,f,c
 26562  00199C  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26563  00199E  22DA               	addwfc	fsr2h,f,c
 26564  0019A0  C064  FFDE         	movff	fifo_init@size,postinc2
 26565  0019A4  C065  FFDD         	movff	fifo_init@size+1,postdec2
 26566                           
 26567                           ; BSR set to: 0
 26568                           ;fifo.c: 18: f->buf = buf;
 26569  0019A8  C060  FFD9         	movff	fifo_init@f,fsr2l
 26570  0019AC  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 26571  0019B0  C062  FFDE         	movff	fifo_init@buf,postinc2
 26572  0019B4  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 26573                           
 26574                           ; BSR set to: 0
 26575  0019B8  0012               	return	
 26576  0019BA                     __end_of_fifo_init:
 26577                           	opt stack 0
 26578  0019BA                     PL98:
 26579                           	opt stack 26
 26580  0019BA  5160               	movf	fifo_init@f& (0+255),w,b
 26581  0019BC  26D9               	addwf	fsr2l,f,c
 26582  0019BE  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26583  0019C0  22DA               	addwfc	fsr2h,f,c
 26584  0019C2  6ADE               	clrf	postinc2,c
 26585  0019C4  6ADD               	clrf	postdec2,c
 26586  0019C6  0012               	return	
 26587  0019C8                     __end_ofPL98:
 26588                           	opt stack 0
 26589                           tblptru	equ	0xFF8
 26590                           tblptrh	equ	0xFF7
 26591                           tblptrl	equ	0xFF6
 26592                           tablat	equ	0xFF5
 26593                           prodh	equ	0xFF4
 26594                           prodl	equ	0xFF3
 26595                           intcon	equ	0xFF2
 26596                           indf0	equ	0xFEF
 26597                           postinc0	equ	0xFEE
 26598                           fsr0h	equ	0xFEA
 26599                           fsr0l	equ	0xFE9
 26600                           wreg	equ	0xFE8
 26601                           indf1	equ	0xFE7
 26602                           postinc1	equ	0xFE6
 26603                           postdec1	equ	0xFE5
 26604                           fsr1h	equ	0xFE2
 26605                           fsr1l	equ	0xFE1
 26606                           indf2	equ	0xFDF
 26607                           postinc2	equ	0xFDE
 26608                           postdec2	equ	0xFDD
 26609                           plusw2	equ	0xFDB
 26610                           fsr2h	equ	0xFDA
 26611                           fsr2l	equ	0xFD9
 26612                           status	equ	0xFD8
 26613                           
 26614 ;; *************** function _Interrupt *****************
 26615 ;; Defined at:
 26616 ;;		line 151 in file "main.c"
 26617 ;; Parameters:    Size  Location     Type
 26618 ;;		None
 26619 ;; Auto vars:     Size  Location     Type
 26620 ;;  fail            1   31[COMRAM] unsigned char 
 26621 ;; Return value:  Size  Location     Type
 26622 ;;		None               void
 26623 ;; Registers used:
 26624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26625 ;; Tracked objects:
 26626 ;;		On entry : 0/0
 26627 ;;		On exit  : 0/0
 26628 ;;		Unchanged: 0/0
 26629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26630 ;;      Params:         0       0       0       0       0       0       0
 26631 ;;      Locals:         1       0       0       0       0       0       0
 26632 ;;      Temps:          9       0       0       0       0       0       0
 26633 ;;      Totals:        10       0       0       0       0       0       0
 26634 ;;Total ram usage:       10 bytes
 26635 ;; Hardware stack levels used:    1
 26636 ;; Hardware stack levels required when called:    2
 26637 ;; This function calls:
 26638 ;;		_ReadUSART
 26639 ;;		_fifo_write
 26640 ;;		_ECANReceiveMessage
 26641 ;;		_fifo_getFree
 26642 ;;		i1_WriteTimer0
 26643 ;; This function is called by:
 26644 ;;		Interrupt level 1
 26645 ;; This function uses a non-reentrant model
 26646 ;;
 26647                           
 26648                           	psect	intcodelo
 26649  000018                     __pintcodelo:
 26650                           	opt stack 0
 26651  000018                     _Interrupt:
 26652                           	opt stack 19
 26653                           
 26654                           ; BSR set to: 0
 26655                           ;incstack = 0
 26656  000018  CFD8 F019          	movff	status,??_Interrupt+2
 26657  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 26658  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 26659  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 26660  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 26661  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 26662  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 26663  000034                     
 26664                           ;main.c: 153: if ( 1 == PIR1bits.RCIF ) {
 26665  000034  AA9E               	btfss	3998,5,c	;volatile
 26666  000036  D001               	goto	i1u1730_21
 26667  000038  D001               	goto	i1u1730_20
 26668  00003A                     i1u1730_21:
 26669  00003A  D02B               	goto	i1l399
 26670  00003C                     i1u1730_20:
 26671  00003C                     
 26672                           ;main.c: 155: c = ReadUSART();
 26673  00003C  EC6C  F00B         	call	_ReadUSART	;wreg free
 26674  000040  6E3D               	movwf	_c,c
 26675  000042                     
 26676                           ;main.c: 157: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 26677  000042  0101               	movlb	1	; () banked
 26678  000044  0E01               	movlw	high _serialInputFifo
 26679  000046  6E02               	movwf	?_fifo_write+1,c
 26680  000048  0ED4               	movlw	low _serialInputFifo
 26681  00004A  6E01               	movwf	?_fifo_write,c
 26682  00004C  0E3D               	movlw	low _c
 26683  00004E  6E03               	movwf	?_fifo_write+2,c
 26684  000050  0E00               	movlw	high _c
 26685  000052  6E04               	movwf	?_fifo_write+3,c
 26686  000054  0E0F               	movlw	15
 26687  000056  6E04               	movwf	?_fifo_write+3,c
 26688  000058  0E5F               	movlw	__accesstop+-1
 26689  00005A  6403               	cpfsgt	?_fifo_write+2,c
 26690  00005C  6A04               	clrf	?_fifo_write+3,c
 26691  00005E  0E01               	movlw	1
 26692  000060  6E05               	movwf	?_fifo_write+4,c
 26693  000062  0E00               	movlw	0
 26694  000064  6E06               	movwf	?_fifo_write+5,c
 26695  000066  0E00               	movlw	0
 26696  000068  6E07               	movwf	?_fifo_write+6,c
 26697  00006A  0E00               	movlw	0
 26698  00006C  6E08               	movwf	?_fifo_write+7,c
 26699  00006E  ECB7  F01A         	call	_fifo_write	;wreg free
 26700  000072  0401               	decf	?_fifo_write,w,c
 26701  000074  1002               	iorwf	?_fifo_write+1,w,c
 26702  000076  B4D8               	btfsc	status,2,c
 26703  000078  D001               	goto	i1u1731_21
 26704  00007A  D001               	goto	i1u1731_20
 26705  00007C                     i1u1731_21:
 26706  00007C  D008               	goto	i1l13185
 26707  00007E                     i1u1731_20:
 26708  00007E                     
 26709                           ; BSR set to: 1
 26710                           ;main.c: 159: uart_receiveOverruns++;
 26711  00007E  0E01               	movlw	1
 26712  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 26713  000082  0E00               	movlw	0
 26714  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 26715  000086  0E00               	movlw	0
 26716  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 26717  00008A  0E00               	movlw	0
 26718  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 26719  00008E                     i1l13185:
 26720                           
 26721                           ; BSR set to: 1
 26722                           ;main.c: 160: }
 26723                           ;main.c: 163: PIR1bits.RCIF = 0;
 26724  00008E  9A9E               	bcf	3998,5,c	;volatile
 26725                           
 26726                           ;main.c: 165: }
 26727  000090  D07D               	goto	i1l401
 26728  000092                     i1l399:
 26729                           
 26730                           ;main.c: 167: else if (1 == INTCONbits.TMR0IF) {
 26731  000092  A4F2               	btfss	intcon,2,c	;volatile
 26732  000094  D001               	goto	i1u1732_21
 26733  000096  D001               	goto	i1u1732_20
 26734  000098                     i1u1732_21:
 26735  000098  D079               	goto	i1l401
 26736  00009A                     i1u1732_20:
 26737  00009A                     
 26738                           ;main.c: 169: WriteTimer0(0xfb1d);
 26739  00009A  0EFB               	movlw	251
 26740  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 26741  00009E  0E1D               	movlw	29
 26742  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 26743  0000A2  EC30  F00B         	call	i1_WriteTimer0	;wreg free
 26744  0000A6                     
 26745                           ;main.c: 171: timer++;
 26746  0000A6  0E01               	movlw	1
 26747  0000A8  0101               	movlb	1	; () banked
 26748  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 26749  0000AC  0E00               	movlw	0
 26750  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26751  0000B0  0E00               	movlw	0
 26752  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26753  0000B4  0E00               	movlw	0
 26754  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26755  0000B8                     
 26756                           ; BSR set to: 1
 26757                           ;main.c: 172: timekeeper++;
 26758  0000B8  0E01               	movlw	1
 26759  0000BA  2623               	addwf	_timekeeper,f,c	;volatile
 26760  0000BC  0E00               	movlw	0
 26761  0000BE  2224               	addwfc	_timekeeper+1,f,c	;volatile
 26762  0000C0  0E00               	movlw	0
 26763  0000C2  2225               	addwfc	_timekeeper+2,f,c	;volatile
 26764  0000C4  0E00               	movlw	0
 26765  0000C6  2226               	addwfc	_timekeeper+3,f,c	;volatile
 26766  0000C8                     
 26767                           ; BSR set to: 1
 26768                           ;main.c: 175: status_led_cnt++;
 26769  0000C8  4A29               	infsnz	_status_led_cnt,f,c	;volatile
 26770  0000CA  2A2A               	incf	_status_led_cnt+1,f,c	;volatile
 26771  0000CC                     
 26772                           ; BSR set to: 1
 26773                           ;main.c: 176: if ((2 == ledFunctionality) &&
 26774                           ;main.c: 177: (status_led_cnt > 1000)) {
 26775  0000CC  5037               	movf	_ledFunctionality,w,c
 26776  0000CE  0A02               	xorlw	2
 26777  0000D0  A4D8               	btfss	status,2,c
 26778  0000D2  D001               	goto	i1u1733_21
 26779  0000D4  D001               	goto	i1u1733_20
 26780  0000D6                     i1u1733_21:
 26781  0000D6  D00C               	goto	i1l13201
 26782  0000D8                     i1u1733_20:
 26783  0000D8                     
 26784                           ; BSR set to: 1
 26785  0000D8  0EE9               	movlw	233
 26786  0000DA  5C29               	subwf	_status_led_cnt,w,c	;volatile
 26787  0000DC  0E03               	movlw	3
 26788  0000DE  582A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26789  0000E0  A0D8               	btfss	status,0,c
 26790  0000E2  D001               	goto	i1u1734_21
 26791  0000E4  D001               	goto	i1u1734_20
 26792  0000E6                     i1u1734_21:
 26793  0000E6  D004               	goto	i1l13201
 26794  0000E8                     i1u1734_20:
 26795  0000E8                     i1l13199:
 26796                           
 26797                           ; BSR set to: 1
 26798                           ;main.c: 178: LATC1 = ~LATC1;
 26799  0000E8  728B               	btg	3979,1,c	;volatile
 26800                           
 26801                           ;main.c: 179: status_led_cnt = 0;
 26802  0000EA  6A29               	clrf	_status_led_cnt,c	;volatile
 26803  0000EC  6A2A               	clrf	_status_led_cnt+1,c	;volatile
 26804                           
 26805                           ;main.c: 180: }
 26806  0000EE  D04D               	goto	i1l404
 26807  0000F0                     i1l13201:
 26808                           
 26809                           ; BSR set to: 1
 26810                           ;main.c: 181: else if ((3 == ledFunctionality) &&
 26811                           ;main.c: 182: (status_led_cnt > 400)) {
 26812  0000F0  5037               	movf	_ledFunctionality,w,c
 26813  0000F2  0A03               	xorlw	3
 26814  0000F4  A4D8               	btfss	status,2,c
 26815  0000F6  D001               	goto	i1u1735_21
 26816  0000F8  D001               	goto	i1u1735_20
 26817  0000FA                     i1u1735_21:
 26818  0000FA  D009               	goto	i1l13207
 26819  0000FC                     i1u1735_20:
 26820  0000FC                     
 26821                           ; BSR set to: 1
 26822  0000FC  0E91               	movlw	145
 26823  0000FE  5C29               	subwf	_status_led_cnt,w,c	;volatile
 26824  000100  0E01               	movlw	1
 26825  000102  582A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26826  000104  A0D8               	btfss	status,0,c
 26827  000106  D001               	goto	i1u1736_21
 26828  000108  D001               	goto	i1u1736_20
 26829  00010A                     i1u1736_21:
 26830  00010A  D001               	goto	i1l13207
 26831  00010C                     i1u1736_20:
 26832  00010C  D7ED               	goto	i1l13199
 26833  00010E                     i1l13207:
 26834                           
 26835                           ; BSR set to: 1
 26836                           ;main.c: 186: else if ((4 == ledFunctionality) &&
 26837                           ;main.c: 187: (status_led_cnt > 100)) {
 26838  00010E  5037               	movf	_ledFunctionality,w,c
 26839  000110  0A04               	xorlw	4
 26840  000112  A4D8               	btfss	status,2,c
 26841  000114  D001               	goto	i1u1737_21
 26842  000116  D001               	goto	i1u1737_20
 26843  000118                     i1u1737_21:
 26844  000118  D009               	goto	i1l13213
 26845  00011A                     i1u1737_20:
 26846  00011A                     
 26847                           ; BSR set to: 1
 26848  00011A  0E65               	movlw	101
 26849  00011C  5C29               	subwf	_status_led_cnt,w,c	;volatile
 26850  00011E  0E00               	movlw	0
 26851  000120  582A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26852  000122  A0D8               	btfss	status,0,c
 26853  000124  D001               	goto	i1u1738_21
 26854  000126  D001               	goto	i1u1738_20
 26855  000128                     i1u1738_21:
 26856  000128  D001               	goto	i1l13213
 26857  00012A                     i1u1738_20:
 26858  00012A  D7DE               	goto	i1l13199
 26859  00012C                     i1l13213:
 26860                           
 26861                           ; BSR set to: 1
 26862                           ;main.c: 191: else if ((5 == ledFunctionality) &&
 26863                           ;main.c: 192: (status_led_cnt > 70)) {
 26864  00012C  5037               	movf	_ledFunctionality,w,c
 26865  00012E  0A05               	xorlw	5
 26866  000130  A4D8               	btfss	status,2,c
 26867  000132  D001               	goto	i1u1739_21
 26868  000134  D001               	goto	i1u1739_20
 26869  000136                     i1u1739_21:
 26870  000136  D009               	goto	i1l13219
 26871  000138                     i1u1739_20:
 26872  000138                     
 26873                           ; BSR set to: 1
 26874  000138  0E47               	movlw	71
 26875  00013A  5C29               	subwf	_status_led_cnt,w,c	;volatile
 26876  00013C  0E00               	movlw	0
 26877  00013E  582A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26878  000140  A0D8               	btfss	status,0,c
 26879  000142  D001               	goto	i1u1740_21
 26880  000144  D001               	goto	i1u1740_20
 26881  000146                     i1u1740_21:
 26882  000146  D001               	goto	i1l13219
 26883  000148                     i1u1740_20:
 26884  000148  D7CF               	goto	i1l13199
 26885  00014A                     i1l13219:
 26886                           
 26887                           ; BSR set to: 1
 26888                           ;main.c: 196: else if ((6 == ledFunctionality) &&
 26889                           ;main.c: 197: (status_led_cnt > 40)) {
 26890  00014A  5037               	movf	_ledFunctionality,w,c
 26891  00014C  0A06               	xorlw	6
 26892  00014E  A4D8               	btfss	status,2,c
 26893  000150  D001               	goto	i1u1741_21
 26894  000152  D001               	goto	i1u1741_20
 26895  000154                     i1u1741_21:
 26896  000154  D009               	goto	i1l13225
 26897  000156                     i1u1741_20:
 26898  000156                     
 26899                           ; BSR set to: 1
 26900  000156  0E29               	movlw	41
 26901  000158  5C29               	subwf	_status_led_cnt,w,c	;volatile
 26902  00015A  0E00               	movlw	0
 26903  00015C  582A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26904  00015E  A0D8               	btfss	status,0,c
 26905  000160  D001               	goto	i1u1742_21
 26906  000162  D001               	goto	i1u1742_20
 26907  000164                     i1u1742_21:
 26908  000164  D001               	goto	i1l13225
 26909  000166                     i1u1742_20:
 26910  000166  D7C0               	goto	i1l13199
 26911  000168                     i1l13225:
 26912                           
 26913                           ; BSR set to: 1
 26914                           ;main.c: 201: else if (1 == ledFunctionality) {
 26915  000168  0437               	decf	_ledFunctionality,w,c
 26916  00016A  A4D8               	btfss	status,2,c
 26917  00016C  D001               	goto	i1u1743_21
 26918  00016E  D001               	goto	i1u1743_20
 26919  000170                     i1u1743_21:
 26920  000170  D004               	goto	i1l413
 26921  000172                     i1u1743_20:
 26922  000172                     
 26923                           ; BSR set to: 1
 26924                           ;main.c: 202: LATC1 = 1;
 26925  000172  828B               	bsf	3979,1,c	;volatile
 26926                           
 26927                           ;main.c: 203: status_led_cnt = 0;
 26928  000174  6A29               	clrf	_status_led_cnt,c	;volatile
 26929  000176  6A2A               	clrf	_status_led_cnt+1,c	;volatile
 26930                           
 26931                           ;main.c: 204: }
 26932  000178  D008               	goto	i1l404
 26933  00017A                     i1l413:
 26934                           
 26935                           ; BSR set to: 1
 26936                           ;main.c: 205: else if (0 == ledFunctionality) {
 26937  00017A  6637               	tstfsz	_ledFunctionality,c
 26938  00017C  D001               	goto	i1u1744_21
 26939  00017E  D001               	goto	i1u1744_20
 26940  000180                     i1u1744_21:
 26941  000180  D004               	goto	i1l410
 26942  000182                     i1u1744_20:
 26943  000182                     
 26944                           ; BSR set to: 1
 26945                           ;main.c: 206: LATC1 = 0;
 26946  000182  928B               	bcf	3979,1,c	;volatile
 26947                           
 26948                           ;main.c: 207: status_led_cnt = 0;
 26949  000184  6A29               	clrf	_status_led_cnt,c	;volatile
 26950  000186  6A2A               	clrf	_status_led_cnt+1,c	;volatile
 26951  000188  D000               	goto	i1l404
 26952  00018A                     i1l410:
 26953  00018A                     i1l404:
 26954                           
 26955                           ; BSR set to: 1
 26956                           ;main.c: 208: }
 26957                           ;main.c: 210: INTCONbits.TMR0IF = 0;
 26958  00018A  94F2               	bcf	intcon,2,c	;volatile
 26959  00018C                     i1l401:
 26960                           
 26961                           ;main.c: 211: }
 26962                           ;main.c: 214: if ( 1 == IRXIF ) {
 26963  00018C  AEA4               	btfss	4004,7,c	;volatile
 26964  00018E  D001               	goto	i1u1745_21
 26965  000190  D001               	goto	i1u1745_20
 26966  000192                     i1u1745_21:
 26967  000192  D001               	goto	i1l416
 26968  000194                     i1u1745_20:
 26969  000194                     
 26970                           ;main.c: 216: IRXIF = 0;
 26971  000194  9EA4               	bcf	4004,7,c	;volatile
 26972  000196                     i1l416:
 26973                           
 26974                           ;main.c: 217: }
 26975                           ;main.c: 220: if ( RXBnIF ) {
 26976  000196  A2A4               	btfss	4004,1,c	;volatile
 26977  000198  D001               	goto	i1u1746_21
 26978  00019A  D001               	goto	i1u1746_20
 26979  00019C                     i1u1746_21:
 26980  00019C  D09F               	goto	i1l429
 26981  00019E                     i1u1746_20:
 26982  00019E                     
 26983                           ;main.c: 222: if ( ECANReceiveMessage((unsigned long *)&id,
 26984                           ;main.c: 223: (BYTE*)&data,
 26985                           ;main.c: 224: (BYTE*)&dlc,
 26986                           ;main.c: 225: &flags) ) {
 26987  00019E  0101               	movlb	1	; () banked
 26988  0001A0  0E01               	movlw	high _id
 26989  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 26990  0001A4  0EE4               	movlw	low _id
 26991  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 26992  0001A8  0E01               	movlw	high _data
 26993  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 26994  0001AC  0ECC               	movlw	low _data
 26995  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 26996  0001B0  0E3E               	movlw	low _dlc
 26997  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 26998  0001B4  0E3F               	movlw	low _flags
 26999  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 27000  0001B8  EC12  F023         	call	_ECANReceiveMessage	;wreg free
 27001  0001BC  0900               	iorlw	0
 27002  0001BE  B4D8               	btfsc	status,2,c
 27003  0001C0  D001               	goto	i1u1747_21
 27004  0001C2  D001               	goto	i1u1747_20
 27005  0001C4                     i1u1747_21:
 27006  0001C4  D08A               	goto	i1l13267
 27007  0001C6                     i1u1747_20:
 27008  0001C6                     
 27009                           ;main.c: 228: if ( flags & ECAN_RX_OVERFLOW ) {
 27010  0001C6  A63F               	btfss	_flags,3,c
 27011  0001C8  D001               	goto	i1u1748_21
 27012  0001CA  D001               	goto	i1u1748_20
 27013  0001CC                     i1u1748_21:
 27014  0001CC  D00E               	goto	i1l419
 27015  0001CE                     i1u1748_20:
 27016  0001CE                     
 27017                           ;main.c: 229: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27018  0001CE  AA3F               	btfss	_flags,5,c
 27019  0001D0  D001               	goto	i1u1749_21
 27020  0001D2  D001               	goto	i1u1749_20
 27021  0001D4                     i1u1749_21:
 27022  0001D4  D082               	goto	i1l13267
 27023  0001D6                     i1u1749_20:
 27024  0001D6                     i1l13239:
 27025  0001D6  0E01               	movlw	1
 27026  0001D8  0101               	movlb	1	; () banked
 27027  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 27028  0001DC  0E00               	movlw	0
 27029  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27030  0001E0  0E00               	movlw	0
 27031  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27032  0001E4  0E00               	movlw	0
 27033  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27034  0001E8  D078               	goto	i1l13267
 27035  0001EA                     i1l419:
 27036                           
 27037                           ;main.c: 231: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27038                           ;main.c: 232: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27039  0001EA  BC3F               	btfsc	_flags,6,c
 27040  0001EC  D001               	goto	i1u1750_21
 27041  0001EE  D001               	goto	i1u1750_20
 27042  0001F0                     i1u1750_21:
 27043  0001F0  D074               	goto	i1l13267
 27044  0001F2                     i1u1750_20:
 27045  0001F2  AA3F               	btfss	_flags,5,c
 27046  0001F4  D001               	goto	i1u1751_21
 27047  0001F6  D001               	goto	i1u1751_20
 27048  0001F8                     i1u1751_21:
 27049  0001F8  D070               	goto	i1l13267
 27050  0001FA                     i1u1751_20:
 27051  0001FA                     
 27052                           ;main.c: 234: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27053  0001FA  503E               	movf	_dlc,w,c
 27054  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 27055  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 27056  000200  0E05               	movlw	5
 27057  000202  2617               	addwf	??_Interrupt,f,c
 27058  000204  0E00               	movlw	0
 27059  000206  2218               	addwfc	??_Interrupt+1,f,c
 27060  000208  0101               	movlb	1	; () banked
 27061  00020A  0E01               	movlw	high _canInputFifo
 27062  00020C  6E02               	movwf	?_fifo_getFree+1,c
 27063  00020E  0EC4               	movlw	low _canInputFifo
 27064  000210  6E01               	movwf	?_fifo_getFree,c
 27065  000212  EC86  F013         	call	_fifo_getFree	;wreg free
 27066  000216  5017               	movf	??_Interrupt,w,c
 27067  000218  5C01               	subwf	?_fifo_getFree,w,c
 27068  00021A  5018               	movf	??_Interrupt+1,w,c
 27069  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 27070  00021E  A0D8               	btfss	status,0,c
 27071  000220  D001               	goto	i1u1752_21
 27072  000222  D001               	goto	i1u1752_20
 27073  000224                     i1u1752_21:
 27074  000224  D7D8               	goto	i1l13239
 27075  000226                     i1u1752_20:
 27076  000226                     
 27077                           ; BSR set to: 1
 27078                           ;main.c: 235: uint8_t fail = 0;
 27079  000226  6A20               	clrf	Interrupt@fail,c
 27080  000228                     
 27081                           ; BSR set to: 1
 27082                           ;main.c: 236: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 27083  000228  0E01               	movlw	high _canInputFifo
 27084  00022A  6E02               	movwf	?_fifo_write+1,c
 27085  00022C  0EC4               	movlw	low _canInputFifo
 27086  00022E  6E01               	movwf	?_fifo_write,c
 27087  000230  0E01               	movlw	high _id
 27088  000232  6E04               	movwf	?_fifo_write+3,c
 27089  000234  0EE4               	movlw	low _id
 27090  000236  6E03               	movwf	?_fifo_write+2,c
 27091  000238  0E04               	movlw	4
 27092  00023A  6E05               	movwf	?_fifo_write+4,c
 27093  00023C  0E00               	movlw	0
 27094  00023E  6E06               	movwf	?_fifo_write+5,c
 27095  000240  0E00               	movlw	0
 27096  000242  6E07               	movwf	?_fifo_write+6,c
 27097  000244  0E00               	movlw	0
 27098  000246  6E08               	movwf	?_fifo_write+7,c
 27099  000248  ECB7  F01A         	call	_fifo_write	;wreg free
 27100  00024C  5001               	movf	?_fifo_write,w,c
 27101  00024E  0A04               	xorlw	4
 27102  000250  1002               	iorwf	?_fifo_write+1,w,c
 27103  000252  B4D8               	btfsc	status,2,c
 27104  000254  D001               	goto	i1u1753_21
 27105  000256  D001               	goto	i1u1753_20
 27106  000258                     i1u1753_21:
 27107  000258  D002               	goto	i1l13251
 27108  00025A                     i1u1753_20:
 27109  00025A                     
 27110                           ; BSR set to: 1
 27111                           ;main.c: 237: fail = 1;
 27112  00025A  0E01               	movlw	1
 27113  00025C  6E20               	movwf	Interrupt@fail,c
 27114  00025E                     i1l13251:
 27115                           
 27116                           ; BSR set to: 1
 27117                           ;main.c: 238: }
 27118                           ;main.c: 239: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 27119  00025E  0E01               	movlw	high _canInputFifo
 27120  000260  6E02               	movwf	?_fifo_write+1,c
 27121  000262  0EC4               	movlw	low _canInputFifo
 27122  000264  6E01               	movwf	?_fifo_write,c
 27123  000266  0E3E               	movlw	low _dlc
 27124  000268  6E03               	movwf	?_fifo_write+2,c
 27125  00026A  0E00               	movlw	high _dlc
 27126  00026C  6E04               	movwf	?_fifo_write+3,c
 27127  00026E  0E0F               	movlw	15
 27128  000270  6E04               	movwf	?_fifo_write+3,c
 27129  000272  0E5F               	movlw	__accesstop+-1
 27130  000274  6403               	cpfsgt	?_fifo_write+2,c
 27131  000276  6A04               	clrf	?_fifo_write+3,c
 27132  000278  0E01               	movlw	1
 27133  00027A  6E05               	movwf	?_fifo_write+4,c
 27134  00027C  0E00               	movlw	0
 27135  00027E  6E06               	movwf	?_fifo_write+5,c
 27136  000280  0E00               	movlw	0
 27137  000282  6E07               	movwf	?_fifo_write+6,c
 27138  000284  0E00               	movlw	0
 27139  000286  6E08               	movwf	?_fifo_write+7,c
 27140  000288  ECB7  F01A         	call	_fifo_write	;wreg free
 27141  00028C  0401               	decf	?_fifo_write,w,c
 27142  00028E  1002               	iorwf	?_fifo_write+1,w,c
 27143  000290  B4D8               	btfsc	status,2,c
 27144  000292  D001               	goto	i1u1754_21
 27145  000294  D001               	goto	i1u1754_20
 27146  000296                     i1u1754_21:
 27147  000296  D002               	goto	i1l13255
 27148  000298                     i1u1754_20:
 27149  000298                     
 27150                           ; BSR set to: 1
 27151                           ;main.c: 240: fail = 1;
 27152  000298  0E01               	movlw	1
 27153  00029A  6E20               	movwf	Interrupt@fail,c
 27154  00029C                     i1l13255:
 27155                           
 27156                           ; BSR set to: 1
 27157                           ;main.c: 241: }
 27158                           ;main.c: 242: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 27159  00029C  0E01               	movlw	high _canInputFifo
 27160  00029E  6E02               	movwf	?_fifo_write+1,c
 27161  0002A0  0EC4               	movlw	low _canInputFifo
 27162  0002A2  6E01               	movwf	?_fifo_write,c
 27163  0002A4  0E01               	movlw	high _data
 27164  0002A6  6E04               	movwf	?_fifo_write+3,c
 27165  0002A8  0ECC               	movlw	low _data
 27166  0002AA  6E03               	movwf	?_fifo_write+2,c
 27167  0002AC  503E               	movf	_dlc,w,c
 27168  0002AE  6E05               	movwf	?_fifo_write+4,c
 27169  0002B0  6A06               	clrf	?_fifo_write+5,c
 27170  0002B2  6A07               	clrf	?_fifo_write+6,c
 27171  0002B4  6A08               	clrf	?_fifo_write+7,c
 27172  0002B6  ECB7  F01A         	call	_fifo_write	;wreg free
 27173  0002BA  503E               	movf	_dlc,w,c
 27174  0002BC  1801               	xorwf	?_fifo_write,w,c
 27175  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 27176  0002C0  B4D8               	btfsc	status,2,c
 27177  0002C2  D001               	goto	i1u1755_21
 27178  0002C4  D001               	goto	i1u1755_20
 27179  0002C6                     i1u1755_21:
 27180  0002C6  D002               	goto	i1l13259
 27181  0002C8                     i1u1755_20:
 27182  0002C8                     
 27183                           ; BSR set to: 1
 27184                           ;main.c: 243: fail = 1;
 27185  0002C8  0E01               	movlw	1
 27186  0002CA  6E20               	movwf	Interrupt@fail,c
 27187  0002CC                     i1l13259:
 27188                           
 27189                           ; BSR set to: 1
 27190                           ;main.c: 244: }
 27191                           ;main.c: 246: fifo_canrxcount++;
 27192  0002CC  2A36               	incf	_fifo_canrxcount,f,c	;volatile
 27193  0002CE                     
 27194                           ; BSR set to: 1
 27195                           ;main.c: 248: if ( fail ) {
 27196  0002CE  5020               	movf	Interrupt@fail,w,c
 27197  0002D0  B4D8               	btfsc	status,2,c
 27198  0002D2  D001               	goto	i1u1756_21
 27199  0002D4  D001               	goto	i1u1756_20
 27200  0002D6                     i1u1756_21:
 27201  0002D6  D001               	goto	i1l13267
 27202  0002D8                     i1u1756_20:
 27203  0002D8  D77E               	goto	i1l13239
 27204  0002DA                     i1l13267:
 27205                           
 27206                           ;main.c: 255: }
 27207                           ;main.c: 257: }
 27208                           ;main.c: 259: }
 27209                           ;main.c: 262: RXBnIF = 0;
 27210  0002DA  92A4               	bcf	4004,1,c	;volatile
 27211  0002DC                     i1l429:
 27212  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 27213  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 27214  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 27215  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 27216  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 27217  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 27218  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 27219  0002F8  0010               	retfie	
 27220  0002FA                     __end_of_Interrupt:
 27221                           	opt stack 0
 27222                           tblptru	equ	0xFF8
 27223                           tblptrh	equ	0xFF7
 27224                           tblptrl	equ	0xFF6
 27225                           tablat	equ	0xFF5
 27226                           prodh	equ	0xFF4
 27227                           prodl	equ	0xFF3
 27228                           intcon	equ	0xFF2
 27229                           indf0	equ	0xFEF
 27230                           postinc0	equ	0xFEE
 27231                           fsr0h	equ	0xFEA
 27232                           fsr0l	equ	0xFE9
 27233                           wreg	equ	0xFE8
 27234                           indf1	equ	0xFE7
 27235                           postinc1	equ	0xFE6
 27236                           postdec1	equ	0xFE5
 27237                           fsr1h	equ	0xFE2
 27238                           fsr1l	equ	0xFE1
 27239                           bsr	equ	0xFE0
 27240                           indf2	equ	0xFDF
 27241                           postinc2	equ	0xFDE
 27242                           postdec2	equ	0xFDD
 27243                           plusw2	equ	0xFDB
 27244                           fsr2h	equ	0xFDA
 27245                           fsr2l	equ	0xFD9
 27246                           status	equ	0xFD8
 27247                           
 27248 ;; *************** function i1_WriteTimer0 *****************
 27249 ;; Defined at:
 27250 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27251 ;; Parameters:    Size  Location     Type
 27252 ;;  timer0          2    0[COMRAM] unsigned int 
 27253 ;; Auto vars:     Size  Location     Type
 27254 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27255 ;; Return value:  Size  Location     Type
 27256 ;;		None               void
 27257 ;; Registers used:
 27258 ;;		None
 27259 ;; Tracked objects:
 27260 ;;		On entry : 0/0
 27261 ;;		On exit  : 0/0
 27262 ;;		Unchanged: 0/0
 27263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27264 ;;      Params:         2       0       0       0       0       0       0
 27265 ;;      Locals:         2       0       0       0       0       0       0
 27266 ;;      Temps:          0       0       0       0       0       0       0
 27267 ;;      Totals:         4       0       0       0       0       0       0
 27268 ;;Total ram usage:        4 bytes
 27269 ;; Hardware stack levels used:    1
 27270 ;; This function calls:
 27271 ;;		Nothing
 27272 ;; This function is called by:
 27273 ;;		_Interrupt
 27274 ;; This function uses a non-reentrant model
 27275 ;;
 27276                           
 27277                           	psect	text83
 27278  001660                     __ptext83:
 27279                           	opt stack 0
 27280  001660                     i1_WriteTimer0:
 27281                           	opt stack 20
 27282                           
 27283                           ;incstack = 0
 27284                           ;incstack = 0
 27285  001660  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27286  001664  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27287  001668  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27288  00166C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27289  001670  0012               	return	
 27290  001672                     __end_ofi1_WriteTimer0:
 27291                           	opt stack 0
 27292                           tblptru	equ	0xFF8
 27293                           tblptrh	equ	0xFF7
 27294                           tblptrl	equ	0xFF6
 27295                           tablat	equ	0xFF5
 27296                           prodh	equ	0xFF4
 27297                           prodl	equ	0xFF3
 27298                           intcon	equ	0xFF2
 27299                           indf0	equ	0xFEF
 27300                           postinc0	equ	0xFEE
 27301                           fsr0h	equ	0xFEA
 27302                           fsr0l	equ	0xFE9
 27303                           wreg	equ	0xFE8
 27304                           indf1	equ	0xFE7
 27305                           postinc1	equ	0xFE6
 27306                           postdec1	equ	0xFE5
 27307                           fsr1h	equ	0xFE2
 27308                           fsr1l	equ	0xFE1
 27309                           bsr	equ	0xFE0
 27310                           indf2	equ	0xFDF
 27311                           postinc2	equ	0xFDE
 27312                           postdec2	equ	0xFDD
 27313                           plusw2	equ	0xFDB
 27314                           fsr2h	equ	0xFDA
 27315                           fsr2l	equ	0xFD9
 27316                           status	equ	0xFD8
 27317                           
 27318 ;; *************** function _fifo_getFree *****************
 27319 ;; Defined at:
 27320 ;;		line 97 in file "fifo.c"
 27321 ;; Parameters:    Size  Location     Type
 27322 ;;  f               2    0[COMRAM] PTR struct .
 27323 ;;		 -> canInputFifo(8), 
 27324 ;; Auto vars:     Size  Location     Type
 27325 ;;		None
 27326 ;; Return value:  Size  Location     Type
 27327 ;;                  2    0[COMRAM] unsigned short 
 27328 ;; Registers used:
 27329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27330 ;; Tracked objects:
 27331 ;;		On entry : F/1
 27332 ;;		On exit  : F/1
 27333 ;;		Unchanged: F/0
 27334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27335 ;;      Params:         2       0       0       0       0       0       0
 27336 ;;      Locals:         0       0       0       0       0       0       0
 27337 ;;      Temps:          8       0       0       0       0       0       0
 27338 ;;      Totals:        10       0       0       0       0       0       0
 27339 ;;Total ram usage:       10 bytes
 27340 ;; Hardware stack levels used:    1
 27341 ;; This function calls:
 27342 ;;		Nothing
 27343 ;; This function is called by:
 27344 ;;		_Interrupt
 27345 ;; This function uses a non-reentrant model
 27346 ;;
 27347                           
 27348                           	psect	text84
 27349  00270C                     __ptext84:
 27350                           	opt stack 0
 27351  00270C                     _fifo_getFree:
 27352                           	opt stack 20
 27353                           
 27354                           ; BSR set to: 1
 27355                           ;fifo.c: 98: if (f->head < f->tail) {
 27356                           
 27357                           ;incstack = 0
 27358                           ;incstack = 0
 27359  00270C  EE20 F004          	lfsr	2,4
 27360  002710  5001               	movf	fifo_getFree@f,w,c
 27361  002712  26D9               	addwf	fsr2l,f,c
 27362  002714  5002               	movf	fifo_getFree@f+1,w,c
 27363  002716  22DA               	addwfc	fsr2h,f,c
 27364  002718  EE10 F002          	lfsr	1,2
 27365  00271C  5001               	movf	fifo_getFree@f,w,c
 27366  00271E  26E1               	addwf	fsr1l,f,c
 27367  002720  5002               	movf	fifo_getFree@f+1,w,c
 27368  002722  22E2               	addwfc	fsr1h,f,c
 27369  002724  52E6               	movf	postinc1,f,c
 27370  002726  52DE               	movf	postinc2,f,c
 27371  002728  50DD               	movf	postdec2,w,c
 27372  00272A  5CE5               	subwf	postdec1,w,c
 27373  00272C  E102               	bnz	i1u634_25
 27374  00272E  50DF               	movf	indf2,w,c
 27375  002730  5CE7               	subwf	indf1,w,c
 27376  002732                     i1u634_25:
 27377  002732  E213               	bc	i1l6449
 27378                           
 27379                           ; BSR set to: 1
 27380                           ;fifo.c: 99: return (f->tail - f->head);
 27381  002734  EE20 F002          	lfsr	2,2
 27382  002738  D834               	call	PL74	;call to abstracted procedure
 27383  00273A  EE20 F004          	lfsr	2,4
 27384  00273E  5001               	movf	fifo_getFree@f,w,c
 27385  002740  26D9               	addwf	fsr2l,f,c
 27386  002742  5002               	movf	fifo_getFree@f+1,w,c
 27387  002744  22DA               	addwfc	fsr2h,f,c
 27388  002746  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27389  00274A  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27390  00274E  5003               	movf	??_fifo_getFree,w,c
 27391  002750  5C05               	subwf	??_fifo_getFree+2,w,c
 27392  002752  6E01               	movwf	?_fifo_getFree,c
 27393  002754  5004               	movf	??_fifo_getFree+1,w,c
 27394  002756  5806               	subwfb	??_fifo_getFree+3,w,c
 27395  002758  D022               	goto	L43
 27396  00275A                     i1l6449:
 27397                           
 27398                           ; BSR set to: 1
 27399                           ;fifo.c: 101: else {
 27400                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27401  00275A  EE20 F004          	lfsr	2,4
 27402  00275E  D821               	call	PL74	;call to abstracted procedure
 27403  002760  EE20 F002          	lfsr	2,2
 27404  002764  5001               	movf	fifo_getFree@f,w,c
 27405  002766  26D9               	addwf	fsr2l,f,c
 27406  002768  5002               	movf	fifo_getFree@f+1,w,c
 27407  00276A  22DA               	addwfc	fsr2h,f,c
 27408  00276C  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27409  002770  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27410  002774  EE20 F006          	lfsr	2,6
 27411  002778  5001               	movf	fifo_getFree@f,w,c
 27412  00277A  26D9               	addwf	fsr2l,f,c
 27413  00277C  5002               	movf	fifo_getFree@f+1,w,c
 27414  00277E  22DA               	addwfc	fsr2h,f,c
 27415  002780  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27416  002784  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27417  002788  5005               	movf	??_fifo_getFree+2,w,c
 27418  00278A  5C07               	subwf	??_fifo_getFree+4,w,c
 27419  00278C  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27420  00278E  5006               	movf	??_fifo_getFree+3,w,c
 27421  002790  5808               	subwfb	??_fifo_getFree+5,w,c
 27422  002792  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27423  002794  5003               	movf	??_fifo_getFree,w,c
 27424  002796  2409               	addwf	??_fifo_getFree+6,w,c
 27425  002798  6E01               	movwf	?_fifo_getFree,c
 27426  00279A  5004               	movf	??_fifo_getFree+1,w,c
 27427  00279C  200A               	addwfc	??_fifo_getFree+7,w,c
 27428  00279E                     L43:
 27429  00279E  6E02               	movwf	?_fifo_getFree+1,c
 27430                           
 27431                           ; BSR set to: 1
 27432  0027A0  0012               	return	
 27433  0027A2                     __end_of_fifo_getFree:
 27434                           	opt stack 0
 27435  0027A2                     PL74:
 27436                           	opt stack 20
 27437  0027A2  5001               	movf	fifo_getFree@f,w,c
 27438  0027A4  26D9               	addwf	fsr2l,f,c
 27439  0027A6  5002               	movf	fifo_getFree@f+1,w,c
 27440  0027A8  22DA               	addwfc	fsr2h,f,c
 27441  0027AA  CFDE F003          	movff	postinc2,??_fifo_getFree
 27442  0027AE  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27443  0027B2  0012               	return	
 27444  0027B4                     __end_ofPL74:
 27445                           	opt stack 0
 27446                           tblptru	equ	0xFF8
 27447                           tblptrh	equ	0xFF7
 27448                           tblptrl	equ	0xFF6
 27449                           tablat	equ	0xFF5
 27450                           prodh	equ	0xFF4
 27451                           prodl	equ	0xFF3
 27452                           intcon	equ	0xFF2
 27453                           indf0	equ	0xFEF
 27454                           postinc0	equ	0xFEE
 27455                           fsr0h	equ	0xFEA
 27456                           fsr0l	equ	0xFE9
 27457                           wreg	equ	0xFE8
 27458                           indf1	equ	0xFE7
 27459                           postinc1	equ	0xFE6
 27460                           postdec1	equ	0xFE5
 27461                           fsr1h	equ	0xFE2
 27462                           fsr1l	equ	0xFE1
 27463                           bsr	equ	0xFE0
 27464                           indf2	equ	0xFDF
 27465                           postinc2	equ	0xFDE
 27466                           postdec2	equ	0xFDD
 27467                           plusw2	equ	0xFDB
 27468                           fsr2h	equ	0xFDA
 27469                           fsr2l	equ	0xFD9
 27470                           status	equ	0xFD8
 27471                           
 27472 ;; *************** function _ECANReceiveMessage *****************
 27473 ;; Defined at:
 27474 ;;		line 803 in file "ECAN.c"
 27475 ;; Parameters:    Size  Location     Type
 27476 ;;  id              2    9[COMRAM] PTR unsigned long 
 27477 ;;		 -> id(4), 
 27478 ;;  data            2   11[COMRAM] PTR unsigned char 
 27479 ;;		 -> data(8), 
 27480 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 27481 ;;		 -> dlc(1), 
 27482 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 27483 ;;		 -> flags(1), 
 27484 ;; Auto vars:     Size  Location     Type
 27485 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 27486 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27487 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27488 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 27489 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27490 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27491 ;;  temp            1   19[COMRAM] struct .
 27492 ;;  mode            1   18[COMRAM] unsigned char 
 27493 ;;  i               1   17[COMRAM] unsigned char 
 27494 ;; Return value:  Size  Location     Type
 27495 ;;                  1    wreg      enum E15660
 27496 ;; Registers used:
 27497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27498 ;; Tracked objects:
 27499 ;;		On entry : F/1
 27500 ;;		On exit  : 0/0
 27501 ;;		Unchanged: 0/0
 27502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27503 ;;      Params:         6       0       0       0       0       0       0
 27504 ;;      Locals:         7       0       0       0       0       0       0
 27505 ;;      Temps:          0       0       0       0       0       0       0
 27506 ;;      Totals:        13       0       0       0       0       0       0
 27507 ;;Total ram usage:       13 bytes
 27508 ;; Hardware stack levels used:    1
 27509 ;; Hardware stack levels required when called:    1
 27510 ;; This function calls:
 27511 ;;		__ECANPointBuffer
 27512 ;;		__RegsToCANID
 27513 ;; This function is called by:
 27514 ;;		_Interrupt
 27515 ;; This function uses a non-reentrant model
 27516 ;;
 27517                           
 27518                           	psect	text85
 27519  004624                     __ptext85:
 27520                           	opt stack 0
 27521  004624                     _ECANReceiveMessage:
 27522                           	opt stack 19
 27523                           
 27524                           ; BSR set to: 1
 27525                           ;ECAN.c: 805: BYTE mode;
 27526                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27527                           ;ECAN.c: 809: char i;
 27528                           ;ECAN.c: 810: BYTE_VAL temp;
 27529                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27530                           
 27531                           ; BSR set to: 1
 27532                           ;incstack = 0
 27533                           ;incstack = 0
 27534  004624  6A2E               	clrf	__ECANRxFilterHitInfo,c
 27535                           
 27536                           ; BSR set to: 1
 27537                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27538  004626  5077               	movf	3959,w,c	;volatile
 27539  004628  0BC0               	andlw	192
 27540  00462A  6E13               	movwf	ECANReceiveMessage@mode,c
 27541                           
 27542                           ; BSR set to: 1
 27543                           ;ECAN.c: 816: if ( mode == 0x00 )
 27544  00462C  6613               	tstfsz	ECANReceiveMessage@mode,c
 27545  00462E  D032               	goto	i1l9783
 27546                           
 27547                           ; BSR set to: 1
 27548                           ;ECAN.c: 822: {
 27549                           ;ECAN.c: 824: if ( RXB0FUL )
 27550  004630  AE60               	btfss	3936,7,c	;volatile
 27551  004632  D012               	goto	i1l1463
 27552                           
 27553                           ; BSR set to: 1
 27554                           ;ECAN.c: 825: {
 27555                           ;ECAN.c: 827: RXB0IF = 0;
 27556  004634  90A4               	bcf	4004,0,c	;volatile
 27557                           
 27558                           ;ECAN.c: 830: if ( RXB0OVFL )
 27559  004636  AE74               	btfss	3956,7,c	;volatile
 27560  004638  D006               	goto	i1l9759
 27561                           
 27562                           ; BSR set to: 1
 27563                           ;ECAN.c: 831: {
 27564                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27565  00463A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27566  00463C  6ED9               	movwf	fsr2l,c
 27567  00463E  6ADA               	clrf	fsr2h,c
 27568  004640  0E00               	movlw	0
 27569  004642  86DB               	bsf	plusw2,3,c
 27570                           
 27571                           ; BSR set to: 1
 27572                           ;ECAN.c: 833: RXB0OVFL = 0;
 27573  004644  9E74               	bcf	3956,7,c	;volatile
 27574  004646                     i1l9759:
 27575                           
 27576                           ; BSR set to: 1
 27577                           ;ECAN.c: 834: }
 27578                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27579  004646  A060               	btfss	3936,0,c	;volatile
 27580  004648  D002               	bra	i1u1165_25
 27581  00464A  802E               	bsf	__ECANRxFilterHitInfo,0,c
 27582  00464C  D001               	bra	i1u1165_27
 27583  00464E                     i1u1165_25:
 27584  00464E  902E               	bcf	__ECANRxFilterHitInfo,0,c
 27585  004650                     i1u1165_27:
 27586                           
 27587                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27588  004650  0E0F               	movlw	15	;volatile
 27589  004652  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27590  004654  0E60               	movlw	96	;volatile
 27591  004656  D01A               	goto	L44
 27592  004658                     i1l1463:
 27593                           
 27594                           ; BSR set to: 1
 27595                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27596  004658  010F               	movlb	15	; () banked
 27597  00465A  AF50               	btfss	80,7,b	;volatile
 27598  00465C  D019               	goto	i1l9777
 27599                           
 27600                           ; BSR set to: 15
 27601                           ;ECAN.c: 842: {
 27602                           ;ECAN.c: 844: RXB1IF = 0;
 27603  00465E  92A4               	bcf	4004,1,c	;volatile
 27604                           
 27605                           ;ECAN.c: 847: if ( RXB1OVFL )
 27606  004660  AC74               	btfss	3956,6,c	;volatile
 27607  004662  D006               	goto	i1l9769
 27608                           
 27609                           ; BSR set to: 15
 27610                           ;ECAN.c: 848: {
 27611                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27612  004664  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27613  004666  6ED9               	movwf	fsr2l,c
 27614  004668  6ADA               	clrf	fsr2h,c
 27615  00466A  0E00               	movlw	0
 27616  00466C  86DB               	bsf	plusw2,3,c
 27617                           
 27618                           ; BSR set to: 15
 27619                           ;ECAN.c: 850: RXB1OVFL = 0;
 27620  00466E  9C74               	bcf	3956,6,c	;volatile
 27621  004670                     i1l9769:
 27622                           
 27623                           ; BSR set to: 15
 27624                           ;ECAN.c: 851: }
 27625                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27626  004670  5150               	movf	80,w,b	;volatile
 27627  004672  0B07               	andlw	7
 27628  004674  6E2E               	movwf	__ECANRxFilterHitInfo,c
 27629                           
 27630                           ; BSR set to: 15
 27631                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27632  004676  0E02               	movlw	2
 27633  004678  602E               	cpfslt	__ECANRxFilterHitInfo,c
 27634  00467A  D005               	goto	i1l9775
 27635                           
 27636                           ; BSR set to: 15
 27637                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27638  00467C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27639  00467E  6ED9               	movwf	fsr2l,c
 27640  004680  6ADA               	clrf	fsr2h,c
 27641  004682  0E00               	movlw	0
 27642  004684  8EDB               	bsf	plusw2,7,c
 27643  004686                     i1l9775:
 27644                           
 27645                           ; BSR set to: 15
 27646                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27647  004686  0E0F               	movlw	15	;volatile
 27648  004688  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27649  00468A  0E50               	movlw	80	;volatile
 27650  00468C                     L44:
 27651  00468C  6E15               	movwf	ECANReceiveMessage@ptr,c
 27652                           
 27653                           ;ECAN.c: 860: }
 27654  00468E  D065               	goto	i1l9837
 27655  004690                     i1l9777:
 27656                           
 27657                           ;ECAN.c: 861: else
 27658                           ;ECAN.c: 862: return FALSE;
 27659  004690  0E00               	movlw	0
 27660  004692  D0C6               	goto	i1l1470
 27661  004694                     i1l9783:
 27662                           
 27663                           ; BSR set to: 1
 27664                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27665  004694  5013               	movf	ECANReceiveMessage@mode,w,c
 27666  004696  0A40               	xorlw	64
 27667  004698  E146               	bnz	i1l1473
 27668                           
 27669                           ; BSR set to: 1
 27670                           ;ECAN.c: 875: {
 27671                           ;ECAN.c: 876: if ( RXB0FUL )
 27672  00469A  AE60               	btfss	3936,7,c	;volatile
 27673  00469C  D004               	goto	i1l1474
 27674                           
 27675                           ; BSR set to: 1
 27676                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27677  00469E  0E0F               	movlw	15	;volatile
 27678  0046A0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27679  0046A2  0E60               	movlw	96	;volatile
 27680  0046A4  D03E               	goto	L51
 27681  0046A6                     i1l1474:
 27682                           
 27683                           ; BSR set to: 1
 27684                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27685  0046A6  010F               	movlb	15	; () banked
 27686  0046A8  AF50               	btfss	80,7,b	;volatile
 27687  0046AA  D004               	goto	i1l1476
 27688                           
 27689                           ; BSR set to: 15
 27690                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27691  0046AC  0E0F               	movlw	15	;volatile
 27692  0046AE  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27693  0046B0  0E50               	movlw	80	;volatile
 27694  0046B2  D037               	goto	L51
 27695  0046B4                     i1l1476:
 27696                           
 27697                           ; BSR set to: 15
 27698                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27699  0046B4  010D               	movlb	13
 27700  0046B6  B5F8               	btfsc	248,2,b	;volatile
 27701  0046B8  D007               	goto	i1l1478
 27702  0046BA  010E               	movlb	14
 27703  0046BC  AF20               	btfss	32,7,b	;volatile
 27704  0046BE  D004               	goto	i1l1478
 27705                           
 27706                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27707  0046C0  0E0E               	movlw	14	;volatile
 27708  0046C2  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27709  0046C4  0E20               	movlw	32	;volatile
 27710  0046C6  D02D               	goto	L51
 27711  0046C8                     i1l1478:
 27712                           
 27713                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27714  0046C8  010D               	movlb	13
 27715  0046CA  B7F8               	btfsc	248,3,b	;volatile
 27716  0046CC  D007               	goto	i1l1480
 27717  0046CE  010E               	movlb	14
 27718  0046D0  AF30               	btfss	48,7,b	;volatile
 27719  0046D2  D004               	goto	i1l1480
 27720                           
 27721                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27722  0046D4  0E0E               	movlw	14	;volatile
 27723  0046D6  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27724  0046D8  0E30               	movlw	48	;volatile
 27725  0046DA  D023               	goto	L51
 27726  0046DC                     i1l1480:
 27727                           
 27728                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27729  0046DC  010D               	movlb	13
 27730  0046DE  B9F8               	btfsc	248,4,b	;volatile
 27731  0046E0  D007               	goto	i1l1482
 27732  0046E2  010E               	movlb	14
 27733  0046E4  AF40               	btfss	64,7,b	;volatile
 27734  0046E6  D004               	goto	i1l1482
 27735                           
 27736                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27737  0046E8  0E0E               	movlw	14	;volatile
 27738  0046EA  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27739  0046EC  0E40               	movlw	64	;volatile
 27740  0046EE  D019               	goto	L51
 27741  0046F0                     i1l1482:
 27742                           
 27743                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27744  0046F0  010D               	movlb	13
 27745  0046F2  BBF8               	btfsc	248,5,b	;volatile
 27746  0046F4  D005               	goto	i1l1484
 27747  0046F6  010E               	movlb	14
 27748  0046F8  AF50               	btfss	80,7,b	;volatile
 27749  0046FA  D002               	goto	i1l1484
 27750                           
 27751                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27752  0046FC  0E0E               	movlw	14	;volatile
 27753  0046FE  D7D7               	goto	L52
 27754  004700                     i1l1484:
 27755                           
 27756                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27757  004700  010D               	movlb	13
 27758  004702  BDF8               	btfsc	248,6,b	;volatile
 27759  004704  D005               	goto	i1l1486
 27760  004706  010E               	movlb	14
 27761  004708  AF60               	btfss	96,7,b	;volatile
 27762  00470A  D002               	goto	i1l1486
 27763                           
 27764                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27765  00470C  0E0E               	movlw	14	;volatile
 27766  00470E  D7C8               	goto	L53
 27767  004710                     i1l1486:
 27768                           
 27769                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27770  004710  010D               	movlb	13
 27771  004712  BFF8               	btfsc	248,7,b	;volatile
 27772  004714  D7BD               	goto	i1l9777
 27773  004716  010E               	movlb	14
 27774  004718  AF70               	btfss	112,7,b	;volatile
 27775  00471A  D7BA               	goto	i1l9777
 27776                           
 27777                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27778  00471C  0E0E               	movlw	14	;volatile
 27779  00471E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27780  004720  0E70               	movlw	112	;volatile
 27781  004722                     L51:
 27782  004722  6E15               	movwf	ECANReceiveMessage@ptr,c
 27783  004724  D00A               	goto	i1l9827
 27784  004726                     i1l1473:
 27785                           
 27786                           ; BSR set to: 1
 27787                           ;ECAN.c: 910: else
 27788                           ;ECAN.c: 915: {
 27789                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27790  004726  AE74               	btfss	3956,7,c	;volatile
 27791  004728  D7B3               	goto	i1l9777
 27792                           
 27793                           ; BSR set to: 1
 27794                           ;ECAN.c: 919: {
 27795                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27796  00472A  506F               	movf	3951,w,c	;volatile
 27797  00472C  0B07               	andlw	7
 27798  00472E  ECB0  F00F         	call	__ECANPointBuffer
 27799  004732  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27800  004736  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27801  00473A                     i1l9827:
 27802                           
 27803                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27804  00473A  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27805  00473E  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27806  004742  50DF               	movf	indf2,w,c
 27807  004744  0B1F               	andlw	31
 27808  004746  6E2E               	movwf	__ECANRxFilterHitInfo,c
 27809                           
 27810                           ;ECAN.c: 934: RXB1IF = 0;
 27811  004748  92A4               	bcf	4004,1,c	;volatile
 27812                           
 27813                           ;ECAN.c: 936: if ( RXB1OVFL )
 27814  00474A  AC74               	btfss	3956,6,c	;volatile
 27815  00474C  D006               	goto	i1l9837
 27816                           
 27817                           ;ECAN.c: 937: {
 27818                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27819  00474E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27820  004750  6ED9               	movwf	fsr2l,c
 27821  004752  6ADA               	clrf	fsr2h,c
 27822  004754  0E00               	movlw	0
 27823  004756  86DB               	bsf	plusw2,3,c
 27824                           
 27825                           ;ECAN.c: 939: RXB1OVFL = 0;
 27826  004758  9C74               	bcf	3956,6,c	;volatile
 27827  00475A                     i1l9837:
 27828                           
 27829                           ;ECAN.c: 944: savedPtr = ptr;
 27830  00475A  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27831  00475E  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27832                           
 27833                           ;ECAN.c: 945: *msgFlags = 0;
 27834  004762  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27835  004764  6ED9               	movwf	fsr2l,c
 27836  004766  6ADA               	clrf	fsr2h,c
 27837  004768  6ADF               	clrf	indf2,c
 27838                           
 27839                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27840  00476A  EE20 F005          	lfsr	2,5
 27841  00476E  D859               	call	PL94	;call to abstracted procedure
 27842                           
 27843                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27844  004770  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27845  004772  6ED9               	movwf	fsr2l,c
 27846  004774  6ADA               	clrf	fsr2h,c
 27847  004776  5014               	movf	ECANReceiveMessage@temp,w,c
 27848  004778  0B0F               	andlw	15
 27849  00477A  6EDF               	movwf	indf2,c
 27850                           
 27851                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27852  00477C  AC14               	btfss	ECANReceiveMessage@temp,6,c
 27853  00477E  D005               	goto	i1l1494
 27854                           
 27855                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27856  004780  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27857  004782  6ED9               	movwf	fsr2l,c
 27858  004784  6ADA               	clrf	fsr2h,c
 27859  004786  0E00               	movlw	0
 27860  004788  8CDB               	bsf	plusw2,6,c
 27861  00478A                     i1l1494:
 27862                           
 27863                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27864  00478A  EE20 F002          	lfsr	2,2
 27865  00478E  D849               	call	PL94	;call to abstracted procedure
 27866                           
 27867                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27868  004790  A614               	btfss	ECANReceiveMessage@temp,3,c
 27869  004792  D008               	goto	i1l1495
 27870                           
 27871                           ;ECAN.c: 958: {
 27872                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27873  004794  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27874  004796  6ED9               	movwf	fsr2l,c
 27875  004798  6ADA               	clrf	fsr2h,c
 27876  00479A  0E00               	movlw	0
 27877  00479C  8ADB               	bsf	plusw2,5,c
 27878                           
 27879                           ;ECAN.c: 960: temp.Val = 1;
 27880  00479E  0E01               	movlw	1
 27881  0047A0  6E14               	movwf	ECANReceiveMessage@temp,c
 27882                           
 27883                           ;ECAN.c: 961: }
 27884  0047A2  D001               	goto	i1l9855
 27885  0047A4                     i1l1495:
 27886                           
 27887                           ;ECAN.c: 962: else
 27888                           ;ECAN.c: 963: temp.Val = 0;
 27889  0047A4  6A14               	clrf	ECANReceiveMessage@temp,c
 27890  0047A6                     i1l9855:
 27891                           
 27892                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27893  0047A6  2815               	incf	ECANReceiveMessage@ptr,w,c
 27894  0047A8  6E01               	movwf	?__RegsToCANID,c
 27895  0047AA  0E00               	movlw	0
 27896  0047AC  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27897  0047AE  6E02               	movwf	?__RegsToCANID+1,c
 27898  0047B0  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27899  0047B4  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 27900  0047B8  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 27901  0047BC  EC4D  F01B         	call	__RegsToCANID	;wreg free
 27902                           
 27903                           ;ECAN.c: 968: ptr += 6;
 27904  0047C0  0E06               	movlw	6
 27905  0047C2  2615               	addwf	ECANReceiveMessage@ptr,f,c
 27906  0047C4  0E00               	movlw	0
 27907  0047C6  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27908                           
 27909                           ;ECAN.c: 969: temp.Val = *dataLen;
 27910  0047C8  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27911  0047CA  6ED9               	movwf	fsr2l,c
 27912  0047CC  6ADA               	clrf	fsr2h,c
 27913  0047CE  50DF               	movf	indf2,w,c
 27914  0047D0  6E14               	movwf	ECANReceiveMessage@temp,c
 27915                           
 27916                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27917  0047D2  6A12               	clrf	ECANReceiveMessage@i,c
 27918  0047D4  D00F               	goto	i1l9871
 27919  0047D6                     i1l9863:
 27920                           
 27921                           ;ECAN.c: 971: *data++ = *ptr++;
 27922  0047D6  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27923  0047DA  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27924  0047DE  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 27925  0047E2  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 27926  0047E6  CFDF FFE7          	movff	indf2,indf1
 27927  0047EA  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 27928  0047EC  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 27929  0047EE  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 27930  0047F0  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 27931  0047F2  2A12               	incf	ECANReceiveMessage@i,f,c
 27932  0047F4                     i1l9871:
 27933  0047F4  5014               	movf	ECANReceiveMessage@temp,w,c
 27934  0047F6  5C12               	subwf	ECANReceiveMessage@i,w,c
 27935  0047F8  E3EE               	bnc	i1l9863
 27936                           
 27937                           ;ECAN.c: 974: if ( IRXIF )
 27938  0047FA  AEA4               	btfss	4004,7,c	;volatile
 27939  0047FC  D006               	goto	i1l9877
 27940                           
 27941                           ;ECAN.c: 975: {
 27942                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27943  0047FE  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27944  004800  6ED9               	movwf	fsr2l,c
 27945  004802  6ADA               	clrf	fsr2h,c
 27946  004804  0E00               	movlw	0
 27947  004806  88DB               	bsf	plusw2,4,c
 27948                           
 27949                           ;ECAN.c: 977: IRXIF = 0;
 27950  004808  9EA4               	bcf	4004,7,c	;volatile
 27951  00480A                     i1l9877:
 27952                           
 27953                           ;ECAN.c: 978: }
 27954                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27955  00480A  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27956  00480E  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27957  004812  0E7F               	movlw	127
 27958  004814  16DF               	andwf	indf2,f,c
 27959                           
 27960                           ;ECAN.c: 985: if ( mode == 0x80 )
 27961  004816  5013               	movf	ECANReceiveMessage@mode,w,c
 27962  004818  0A80               	xorlw	128
 27963  00481A  B4D8               	btfsc	status,2,c
 27964                           
 27965                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27966  00481C  9E74               	bcf	3956,7,c	;volatile
 27967                           
 27968                           ;ECAN.c: 992: return TRUE;
 27969  00481E  0E01               	movlw	1
 27970  004820                     i1l1470:
 27971  004820  0012               	return	
 27972  004822                     __end_of_ECANReceiveMessage:
 27973                           	opt stack 0
 27974  004822                     PL94:
 27975                           	opt stack 19
 27976  004822  5015               	movf	ECANReceiveMessage@ptr,w,c
 27977  004824  26D9               	addwf	fsr2l,f,c
 27978  004826  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 27979  004828  22DA               	addwfc	fsr2h,f,c
 27980  00482A  50DF               	movf	indf2,w,c
 27981  00482C  6E14               	movwf	ECANReceiveMessage@temp,c
 27982  00482E  0012               	return	
 27983  004830                     __end_ofPL94:
 27984                           	opt stack 0
 27985                           tblptru	equ	0xFF8
 27986                           tblptrh	equ	0xFF7
 27987                           tblptrl	equ	0xFF6
 27988                           tablat	equ	0xFF5
 27989                           prodh	equ	0xFF4
 27990                           prodl	equ	0xFF3
 27991                           intcon	equ	0xFF2
 27992                           indf0	equ	0xFEF
 27993                           postinc0	equ	0xFEE
 27994                           fsr0h	equ	0xFEA
 27995                           fsr0l	equ	0xFE9
 27996                           wreg	equ	0xFE8
 27997                           indf1	equ	0xFE7
 27998                           postinc1	equ	0xFE6
 27999                           postdec1	equ	0xFE5
 28000                           fsr1h	equ	0xFE2
 28001                           fsr1l	equ	0xFE1
 28002                           bsr	equ	0xFE0
 28003                           indf2	equ	0xFDF
 28004                           postinc2	equ	0xFDE
 28005                           postdec2	equ	0xFDD
 28006                           plusw2	equ	0xFDB
 28007                           fsr2h	equ	0xFDA
 28008                           fsr2l	equ	0xFD9
 28009                           status	equ	0xFD8
 28010                           
 28011 ;; *************** function __RegsToCANID *****************
 28012 ;; Defined at:
 28013 ;;		line 1158 in file "ECAN.c"
 28014 ;; Parameters:    Size  Location     Type
 28015 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 28016 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28017 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28018 ;;  val             2    2[COMRAM] PTR unsigned long 
 28019 ;;		 -> id(4), 
 28020 ;;  type            1    4[COMRAM] unsigned char 
 28021 ;; Auto vars:     Size  Location     Type
 28022 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 28023 ;;		 -> id(4), 
 28024 ;; Return value:  Size  Location     Type
 28025 ;;		None               void
 28026 ;; Registers used:
 28027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28028 ;; Tracked objects:
 28029 ;;		On entry : 0/1
 28030 ;;		On exit  : 0/0
 28031 ;;		Unchanged: 0/0
 28032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28033 ;;      Params:         5       0       0       0       0       0       0
 28034 ;;      Locals:         2       0       0       0       0       0       0
 28035 ;;      Temps:          2       0       0       0       0       0       0
 28036 ;;      Totals:         9       0       0       0       0       0       0
 28037 ;;Total ram usage:        9 bytes
 28038 ;; Hardware stack levels used:    1
 28039 ;; This function calls:
 28040 ;;		Nothing
 28041 ;; This function is called by:
 28042 ;;		_ECANReceiveMessage
 28043 ;; This function uses a non-reentrant model
 28044 ;;
 28045                           
 28046                           	psect	text86
 28047  00369A                     __ptext86:
 28048                           	opt stack 0
 28049  00369A                     __RegsToCANID:
 28050                           	opt stack 19
 28051                           
 28052                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28053                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28054                           
 28055                           ;incstack = 0
 28056                           ;incstack = 0
 28057  00369A  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28058  00369E  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 28059                           
 28060                           ;ECAN.c: 1163: if ( type == 0 )
 28061  0036A2  6605               	tstfsz	__RegsToCANID@type,c
 28062  0036A4  D038               	goto	i1l9527
 28063                           
 28064                           ;ECAN.c: 1164: {
 28065                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28066  0036A6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28067  0036AA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28068  0036AE  50DF               	movf	indf2,w,c
 28069  0036B0  6E06               	movwf	??__RegsToCANID& (0+255),c
 28070  0036B2  90D8               	bcf	status,0,c
 28071  0036B4  3606               	rlcf	??__RegsToCANID,f,c
 28072  0036B6  90D8               	bcf	status,0,c
 28073  0036B8  3606               	rlcf	??__RegsToCANID,f,c
 28074  0036BA  90D8               	bcf	status,0,c
 28075  0036BC  3406               	rlcf	??__RegsToCANID,w,c
 28076  0036BE  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28077  0036C2  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28078  0036C6  6EDF               	movwf	indf2,c
 28079                           
 28080                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28081  0036C8  EE20 F001          	lfsr	2,1
 28082  0036CC  D864               	call	PL20	;call to abstracted procedure
 28083  0036CE  0E05               	movlw	5
 28084  0036D0  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28085  0036D2                     i1u1125_25:
 28086  0036D2  90D8               	bcf	status,0,c
 28087  0036D4  3206               	rrcf	??__RegsToCANID,f,c
 28088  0036D6  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28089  0036D8  D7FC               	goto	i1u1125_25
 28090  0036DA  5006               	movf	??__RegsToCANID,w,c
 28091                           
 28092                           ;ECAN.c: 1168: ptr++;
 28093                           
 28094                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28095  0036DC  D871               	call	PL70	;call to abstracted procedure
 28096  0036DE  0E05               	movlw	5
 28097  0036E0  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28098  0036E2                     i1u1126_25:
 28099  0036E2  90D8               	bcf	status,0,c
 28100  0036E4  3206               	rrcf	??__RegsToCANID,f,c
 28101  0036E6  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28102  0036E8  D7FC               	goto	i1u1126_25
 28103  0036EA  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28104  0036EE  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28105  0036F2  5006               	movf	??__RegsToCANID,w,c
 28106  0036F4  12DF               	iorwf	indf2,f,c
 28107                           
 28108                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28109  0036F6  EE20 F002          	lfsr	2,2
 28110  0036FA  5008               	movf	__RegsToCANID@Value,w,c
 28111  0036FC  26D9               	addwf	fsr2l,f,c
 28112  0036FE  5009               	movf	__RegsToCANID@Value+1,w,c
 28113  003700  22DA               	addwfc	fsr2h,f,c
 28114  003702  6ADF               	clrf	indf2,c
 28115                           
 28116                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28117  003704  EE20 F003          	lfsr	2,3
 28118  003708  5008               	movf	__RegsToCANID@Value,w,c
 28119  00370A  26D9               	addwf	fsr2l,f,c
 28120  00370C  5009               	movf	__RegsToCANID@Value+1,w,c
 28121  00370E  22DA               	addwfc	fsr2h,f,c
 28122  003710  0E00               	movlw	0
 28123  003712  6EDF               	movwf	indf2,c
 28124                           
 28125                           ;ECAN.c: 1172: }
 28126  003714  D03F               	goto	i1l1517
 28127  003716                     i1l9527:
 28128                           
 28129                           ;ECAN.c: 1173: else
 28130                           ;ECAN.c: 1174: {
 28131                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28132  003716  EE20 F002          	lfsr	2,2
 28133  00371A  D83D               	call	PL20	;call to abstracted procedure
 28134  00371C  0E05               	movlw	5
 28135  00371E  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28136  003720                     i1u1127_25:
 28137  003720  90D8               	bcf	status,0,c
 28138  003722  3606               	rlcf	??__RegsToCANID,f,c
 28139  003724  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28140  003726  D7FC               	goto	i1u1127_25
 28141  003728  5006               	movf	??__RegsToCANID,w,c
 28142  00372A  6EDF               	movwf	indf2,c
 28143                           
 28144                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28145  00372C  EE20 F003          	lfsr	2,3
 28146  003730  D832               	call	PL20	;call to abstracted procedure
 28147  003732  90D8               	bcf	status,0,c
 28148  003734  3206               	rrcf	??__RegsToCANID,f,c
 28149  003736  90D8               	bcf	status,0,c
 28150  003738  3206               	rrcf	??__RegsToCANID,f,c
 28151  00373A  90D8               	bcf	status,0,c
 28152  00373C  3006               	rrcf	??__RegsToCANID,w,c
 28153                           
 28154                           ;ECAN.c: 1178: ptr++;
 28155                           
 28156                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28157  00373E  D840               	call	PL70	;call to abstracted procedure
 28158  003740  0E03               	movlw	3
 28159  003742  D834               	call	PL68	;call to abstracted procedure
 28160                           
 28161                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28162  003744  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28163  003748  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28164  00374C  50DF               	movf	indf2,w,c
 28165  00374E  6E06               	movwf	??__RegsToCANID& (0+255),c
 28166  003750  90D8               	bcf	status,0,c
 28167  003752  3206               	rrcf	??__RegsToCANID,f,c
 28168  003754  90D8               	bcf	status,0,c
 28169  003756  3206               	rrcf	??__RegsToCANID,f,c
 28170  003758  90D8               	bcf	status,0,c
 28171  00375A  3206               	rrcf	??__RegsToCANID,f,c
 28172  00375C  0E1C               	movlw	28
 28173  00375E  D826               	call	PL68	;call to abstracted procedure
 28174                           
 28175                           ;ECAN.c: 1182: ptr++;
 28176  003760  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28177  003762  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28178                           
 28179                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28180  003764  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28181  003768  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28182  00376C  EE10 F001          	lfsr	1,1
 28183  003770  5008               	movf	__RegsToCANID@Value,w,c
 28184  003772  26E1               	addwf	fsr1l,f,c
 28185  003774  5009               	movf	__RegsToCANID@Value+1,w,c
 28186  003776  22E2               	addwfc	fsr1h,f,c
 28187  003778  CFDF FFE7          	movff	indf2,indf1
 28188                           
 28189                           ;ECAN.c: 1184: ptr++;
 28190  00377C  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28191  00377E  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28192                           
 28193                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28194  003780  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28195  003784  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28196  003788  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 28197  00378C  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 28198  003790  CFDF FFE7          	movff	indf2,indf1
 28199  003794                     i1l1517:
 28200  003794  0012               	return	
 28201  003796                     __end_of__RegsToCANID:
 28202                           	opt stack 0
 28203  003796                     PL20:
 28204                           	opt stack 19
 28205  003796  5008               	movf	__RegsToCANID@Value,w,c
 28206  003798  26D9               	addwf	fsr2l,f,c
 28207  00379A  5009               	movf	__RegsToCANID@Value+1,w,c
 28208  00379C  22DA               	addwfc	fsr2h,f,c
 28209  00379E  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28210  0037A2  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28211  0037A6  50E7               	movf	indf1,w,c
 28212  0037A8  6E06               	movwf	??__RegsToCANID& (0+255),c
 28213  0037AA  0012               	return	
 28214  0037AC                     __end_ofPL20:
 28215                           	opt stack 0
 28216  0037AC                     PL68:
 28217                           	opt stack 19
 28218  0037AC  1606               	andwf	??__RegsToCANID,f,c
 28219  0037AE  EE20 F002          	lfsr	2,2
 28220  0037B2  5008               	movf	__RegsToCANID@Value,w,c
 28221  0037B4  26D9               	addwf	fsr2l,f,c
 28222  0037B6  5009               	movf	__RegsToCANID@Value+1,w,c
 28223  0037B8  22DA               	addwfc	fsr2h,f,c
 28224  0037BA  5006               	movf	??__RegsToCANID,w,c
 28225  0037BC  12DF               	iorwf	indf2,f,c
 28226  0037BE  0012               	return	
 28227  0037C0                     __end_ofPL68:
 28228                           	opt stack 0
 28229  0037C0                     PL70:
 28230                           	opt stack 19
 28231  0037C0  6EDF               	movwf	indf2,c
 28232  0037C2  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28233  0037C4  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28234  0037C6  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28235  0037CA  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28236  0037CE  50DF               	movf	indf2,w,c
 28237  0037D0  6E06               	movwf	??__RegsToCANID& (0+255),c
 28238  0037D2  0012               	return	
 28239  0037D4                     __end_ofPL70:
 28240                           	opt stack 0
 28241                           tblptru	equ	0xFF8
 28242                           tblptrh	equ	0xFF7
 28243                           tblptrl	equ	0xFF6
 28244                           tablat	equ	0xFF5
 28245                           prodh	equ	0xFF4
 28246                           prodl	equ	0xFF3
 28247                           intcon	equ	0xFF2
 28248                           indf0	equ	0xFEF
 28249                           postinc0	equ	0xFEE
 28250                           fsr0h	equ	0xFEA
 28251                           fsr0l	equ	0xFE9
 28252                           wreg	equ	0xFE8
 28253                           indf1	equ	0xFE7
 28254                           postinc1	equ	0xFE6
 28255                           postdec1	equ	0xFE5
 28256                           fsr1h	equ	0xFE2
 28257                           fsr1l	equ	0xFE1
 28258                           bsr	equ	0xFE0
 28259                           indf2	equ	0xFDF
 28260                           postinc2	equ	0xFDE
 28261                           postdec2	equ	0xFDD
 28262                           plusw2	equ	0xFDB
 28263                           fsr2h	equ	0xFDA
 28264                           fsr2l	equ	0xFD9
 28265                           status	equ	0xFD8
 28266                           
 28267 ;; *************** function __ECANPointBuffer *****************
 28268 ;; Defined at:
 28269 ;;		line 1209 in file "ECAN.c"
 28270 ;; Parameters:    Size  Location     Type
 28271 ;;  b               1    wreg     unsigned char 
 28272 ;; Auto vars:     Size  Location     Type
 28273 ;;  b               1    3[COMRAM] unsigned char 
 28274 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28275 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28276 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28277 ;; Return value:  Size  Location     Type
 28278 ;;                  2    0[COMRAM] PTR unsigned char 
 28279 ;; Registers used:
 28280 ;;		wreg, status,2, status,0
 28281 ;; Tracked objects:
 28282 ;;		On entry : F/1
 28283 ;;		On exit  : 0/0
 28284 ;;		Unchanged: 0/0
 28285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28286 ;;      Params:         3       0       0       0       0       0       0
 28287 ;;      Locals:         3       0       0       0       0       0       0
 28288 ;;      Temps:          0       0       0       0       0       0       0
 28289 ;;      Totals:         6       0       0       0       0       0       0
 28290 ;;Total ram usage:        6 bytes
 28291 ;; Hardware stack levels used:    1
 28292 ;; This function calls:
 28293 ;;		Nothing
 28294 ;; This function is called by:
 28295 ;;		_ECANReceiveMessage
 28296 ;; This function uses a non-reentrant model
 28297 ;;
 28298                           
 28299                           	psect	text87
 28300  001F60                     __ptext87:
 28301                           	opt stack 0
 28302  001F60                     __ECANPointBuffer:
 28303                           	opt stack 19
 28304                           
 28305                           ;incstack = 0
 28306                           ;incstack = 0
 28307                           ;__ECANPointBuffer@b stored from wreg
 28308  001F60  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28309                           
 28310                           ; BSR set to: 1
 28311                           ;ECAN.c: 1210: BYTE* pt;
 28312                           ;ECAN.c: 1212: switch(b)
 28313  001F64  D024               	goto	i1l9511
 28314  001F66                     i1l9493:
 28315                           
 28316                           ; BSR set to: 1
 28317                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28318  001F66  0E0F               	movlw	15	;volatile
 28319  001F68  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28320  001F6A  0E60               	movlw	96	;volatile
 28321  001F6C  D01E               	goto	L60
 28322  001F6E                     i1l9495:
 28323                           
 28324                           ; BSR set to: 1
 28325                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28326  001F6E  010F               	movlb	15	; () banked
 28327  001F70  0E0F               	movlw	15	;volatile
 28328  001F72  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28329  001F74  0E50               	movlw	80	;volatile
 28330  001F76  D019               	goto	L60
 28331  001F78                     i1l9497:
 28332                           
 28333                           ; BSR set to: 1
 28334                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28335  001F78  010E               	movlb	14	; () banked
 28336  001F7A  0E0E               	movlw	14	;volatile
 28337  001F7C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28338  001F7E  0E20               	movlw	32	;volatile
 28339  001F80  D014               	goto	L60
 28340  001F82                     i1l9499:
 28341                           
 28342                           ; BSR set to: 1
 28343                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28344  001F82  010E               	movlb	14	; () banked
 28345  001F84  0E0E               	movlw	14	;volatile
 28346  001F86  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28347  001F88  0E30               	movlw	48	;volatile
 28348  001F8A  D00F               	goto	L60
 28349  001F8C                     i1l9501:
 28350                           
 28351                           ; BSR set to: 1
 28352                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28353  001F8C  010E               	movlb	14	; () banked
 28354  001F8E  0E0E               	movlw	14	;volatile
 28355  001F90  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28356  001F92  0E40               	movlw	64	;volatile
 28357  001F94  D00A               	goto	L60
 28358  001F96                     i1l9503:
 28359                           
 28360                           ; BSR set to: 1
 28361                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28362  001F96  010E               	movlb	14	; () banked
 28363  001F98  0E0E               	movlw	14	;volatile
 28364  001F9A  D7EB               	goto	L61
 28365  001F9C                     i1l9505:
 28366                           
 28367                           ; BSR set to: 1
 28368                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28369  001F9C  010E               	movlb	14	; () banked
 28370  001F9E  0E0E               	movlw	14	;volatile
 28371  001FA0  D7E3               	goto	L62
 28372  001FA2                     i1l9507:
 28373                           
 28374                           ; BSR set to: 1
 28375                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28376  001FA2  010E               	movlb	14	; () banked
 28377  001FA4  0E0E               	movlw	14	;volatile
 28378  001FA6  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28379  001FA8  0E70               	movlw	112	;volatile
 28380  001FAA                     L60:
 28381  001FAA  6E05               	movwf	__ECANPointBuffer@pt,c
 28382                           
 28383                           ;ECAN.c: 1237: break;
 28384  001FAC  D00F               	goto	i1l1522
 28385  001FAE                     i1l9511:
 28386                           
 28387                           ; BSR set to: 1
 28388  001FAE  5004               	movf	__ECANPointBuffer@b,w,c
 28389                           
 28390                           ; Switch size 1, requested type "space"
 28391                           ; Number of cases is 7, Range of values is 0 to 6
 28392                           ; switch strategies available:
 28393                           ; Name         Instructions Cycles
 28394                           ; simple_byte           22    12 (average)
 28395                           ;	Chosen strategy is simple_byte
 28396  001FB0  E0DA               	bz	i1l9493
 28397  001FB2  0A01               	xorlw	1	; case 1
 28398  001FB4  E0DC               	bz	i1l9495
 28399  001FB6  0A03               	xorlw	3	; case 2
 28400  001FB8  E0DF               	bz	i1l9497
 28401  001FBA  0A01               	xorlw	1	; case 3
 28402  001FBC  E0E2               	bz	i1l9499
 28403  001FBE  0A07               	xorlw	7	; case 4
 28404  001FC0  E0E5               	bz	i1l9501
 28405  001FC2  0A01               	xorlw	1	; case 5
 28406  001FC4  E0E8               	bz	i1l9503
 28407  001FC6  0A03               	xorlw	3	; case 6
 28408  001FC8  E0E9               	bz	i1l9505
 28409  001FCA  D7EB               	goto	i1l9507
 28410  001FCC                     i1l1522:
 28411                           
 28412                           ;ECAN.c: 1239: return (pt);
 28413  001FCC  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28414  001FD0  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28415  001FD4  0012               	return	
 28416  001FD6                     __end_of__ECANPointBuffer:
 28417                           	opt stack 0
 28418                           tblptru	equ	0xFF8
 28419                           tblptrh	equ	0xFF7
 28420                           tblptrl	equ	0xFF6
 28421                           tablat	equ	0xFF5
 28422                           prodh	equ	0xFF4
 28423                           prodl	equ	0xFF3
 28424                           intcon	equ	0xFF2
 28425                           indf0	equ	0xFEF
 28426                           postinc0	equ	0xFEE
 28427                           fsr0h	equ	0xFEA
 28428                           fsr0l	equ	0xFE9
 28429                           wreg	equ	0xFE8
 28430                           indf1	equ	0xFE7
 28431                           postinc1	equ	0xFE6
 28432                           postdec1	equ	0xFE5
 28433                           fsr1h	equ	0xFE2
 28434                           fsr1l	equ	0xFE1
 28435                           bsr	equ	0xFE0
 28436                           indf2	equ	0xFDF
 28437                           postinc2	equ	0xFDE
 28438                           postdec2	equ	0xFDD
 28439                           plusw2	equ	0xFDB
 28440                           fsr2h	equ	0xFDA
 28441                           fsr2l	equ	0xFD9
 28442                           status	equ	0xFD8
 28443                           
 28444 ;; *************** function _fifo_write *****************
 28445 ;; Defined at:
 28446 ;;		line 61 in file "fifo.c"
 28447 ;; Parameters:    Size  Location     Type
 28448 ;;  f               2    0[COMRAM] PTR struct .
 28449 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28450 ;;  buf             2    2[COMRAM] PTR const void 
 28451 ;;		 -> dlc(1), data(8), id(4), c(1), 
 28452 ;;  nbytes          4    4[COMRAM] unsigned long 
 28453 ;; Auto vars:     Size  Location     Type
 28454 ;;  i               4   14[COMRAM] unsigned long 
 28455 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28456 ;;		 -> dlc(1), data(8), id(4), c(1), 
 28457 ;; Return value:  Size  Location     Type
 28458 ;;                  2    0[COMRAM] unsigned short 
 28459 ;; Registers used:
 28460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28461 ;; Tracked objects:
 28462 ;;		On entry : F/1
 28463 ;;		On exit  : F/1
 28464 ;;		Unchanged: F/0
 28465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28466 ;;      Params:         8       0       0       0       0       0       0
 28467 ;;      Locals:         6       0       0       0       0       0       0
 28468 ;;      Temps:          4       0       0       0       0       0       0
 28469 ;;      Totals:        18       0       0       0       0       0       0
 28470 ;;Total ram usage:       18 bytes
 28471 ;; Hardware stack levels used:    1
 28472 ;; This function calls:
 28473 ;;		Nothing
 28474 ;; This function is called by:
 28475 ;;		_Interrupt
 28476 ;; This function uses a non-reentrant model
 28477 ;;
 28478                           
 28479                           	psect	text88
 28480  00356E                     __ptext88:
 28481                           	opt stack 0
 28482  00356E                     _fifo_write:
 28483                           	opt stack 20
 28484                           
 28485                           ; BSR set to: 1
 28486                           ;fifo.c: 62: uint32_t i;
 28487                           ;fifo.c: 63: const uint8_t *p;
 28488                           ;fifo.c: 64: p = buf;
 28489                           
 28490                           ;incstack = 0
 28491                           ;incstack = 0
 28492  00356E  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28493  003572  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28494                           
 28495                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28496  003576  6A0F               	clrf	fifo_write@i,c
 28497  003578  6A10               	clrf	fifo_write@i+1,c
 28498  00357A  6A11               	clrf	fifo_write@i+2,c
 28499  00357C  6A12               	clrf	fifo_write@i+3,c
 28500  00357E  D068               	goto	i1l6437
 28501  003580                     i1l6417:
 28502                           
 28503                           ; BSR set to: 1
 28504                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28505                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28506  003580  EE20 F004          	lfsr	2,4
 28507  003584  5001               	movf	fifo_write@f,w,c
 28508  003586  D872               	call	PL12	;call to abstracted procedure
 28509  003588  E102               	bnz	i1u629_25
 28510  00358A  5009               	movf	??_fifo_write,w,c
 28511  00358C  180B               	xorwf	??_fifo_write+2,w,c
 28512  00358E                     i1u629_25:
 28513  00358E  E011               	bz	i1l1549
 28514                           
 28515                           ; BSR set to: 1
 28516  003590  EE20 F006          	lfsr	2,6
 28517  003594  5001               	movf	fifo_write@f,w,c
 28518  003596  D86A               	call	PL12	;call to abstracted procedure
 28519  003598  E102               	bnz	i1u630_25
 28520  00359A  5009               	movf	??_fifo_write,w,c
 28521  00359C  180B               	xorwf	??_fifo_write+2,w,c
 28522  00359E                     i1u630_25:
 28523  00359E  E10E               	bnz	i1l6425
 28524                           
 28525                           ; BSR set to: 1
 28526  0035A0  EE20 F004          	lfsr	2,4
 28527  0035A4  5001               	movf	fifo_write@f,w,c
 28528  0035A6  26D9               	addwf	fsr2l,f,c
 28529  0035A8  5002               	movf	fifo_write@f+1,w,c
 28530  0035AA  22DA               	addwfc	fsr2h,f,c
 28531  0035AC  50DE               	movf	postinc2,w,c
 28532  0035AE  10DD               	iorwf	postdec2,w,c
 28533  0035B0  E105               	bnz	i1l6425
 28534  0035B2                     i1l1549:
 28535                           
 28536                           ; BSR set to: 1
 28537                           ;fifo.c: 71: return i;
 28538  0035B2  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28539  0035B6  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28540  0035BA  D057               	goto	i1l1550
 28541  0035BC                     i1l6425:
 28542                           
 28543                           ; BSR set to: 1
 28544                           ;fifo.c: 73: else {
 28545                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28546  0035BC  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28547  0035C0  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28548  0035C4  EE10 F002          	lfsr	1,2
 28549  0035C8  5001               	movf	fifo_write@f,w,c
 28550  0035CA  26E1               	addwf	fsr1l,f,c
 28551  0035CC  5002               	movf	fifo_write@f+1,w,c
 28552  0035CE  22E2               	addwfc	fsr1h,f,c
 28553  0035D0  CFE6 F009          	movff	postinc1,??_fifo_write
 28554  0035D4  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28555  0035D8  C001  FFE1         	movff	fifo_write@f,fsr1l
 28556  0035DC  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28557  0035E0  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28558  0035E4  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28559  0035E8  5009               	movf	??_fifo_write,w,c
 28560  0035EA  240B               	addwf	??_fifo_write+2,w,c
 28561  0035EC  6EE1               	movwf	fsr1l,c
 28562  0035EE  500A               	movf	??_fifo_write+1,w,c
 28563  0035F0  200C               	addwfc	??_fifo_write+3,w,c
 28564  0035F2  6EE2               	movwf	fsr1h,c
 28565  0035F4  CFDF FFE7          	movff	indf2,indf1
 28566                           
 28567                           ; BSR set to: 1
 28568  0035F8  4A0D               	infsnz	fifo_write@p,f,c
 28569  0035FA  2A0E               	incf	fifo_write@p+1,f,c
 28570                           
 28571                           ; BSR set to: 1
 28572                           ;fifo.c: 75: f->head++;
 28573  0035FC  EE20 F002          	lfsr	2,2
 28574  003600  5001               	movf	fifo_write@f,w,c
 28575  003602  26D9               	addwf	fsr2l,f,c
 28576  003604  5002               	movf	fifo_write@f+1,w,c
 28577  003606  22DA               	addwfc	fsr2h,f,c
 28578  003608  2ADE               	incf	postinc2,f,c
 28579  00360A  0E00               	movlw	0
 28580  00360C  22DD               	addwfc	postdec2,f,c
 28581                           
 28582                           ; BSR set to: 1
 28583                           ;fifo.c: 77: if (f->head >= f->size) {
 28584  00360E  EE20 F006          	lfsr	2,6
 28585  003612  5001               	movf	fifo_write@f,w,c
 28586  003614  26D9               	addwf	fsr2l,f,c
 28587  003616  5002               	movf	fifo_write@f+1,w,c
 28588  003618  22DA               	addwfc	fsr2h,f,c
 28589  00361A  EE10 F002          	lfsr	1,2
 28590  00361E  5001               	movf	fifo_write@f,w,c
 28591  003620  26E1               	addwf	fsr1l,f,c
 28592  003622  5002               	movf	fifo_write@f+1,w,c
 28593  003624  22E2               	addwfc	fsr1h,f,c
 28594  003626  52E6               	movf	postinc1,f,c
 28595  003628  52DE               	movf	postinc2,f,c
 28596  00362A  50DD               	movf	postdec2,w,c
 28597  00362C  5CE5               	subwf	postdec1,w,c
 28598  00362E  E102               	bnz	i1u632_25
 28599  003630  50DF               	movf	indf2,w,c
 28600  003632  5CE7               	subwf	indf1,w,c
 28601  003634                     i1u632_25:
 28602  003634  E308               	bnc	i1l6435
 28603                           
 28604                           ; BSR set to: 1
 28605                           ;fifo.c: 78: f->head = 0;
 28606  003636  EE20 F002          	lfsr	2,2
 28607  00363A  5001               	movf	fifo_write@f,w,c
 28608  00363C  26D9               	addwf	fsr2l,f,c
 28609  00363E  5002               	movf	fifo_write@f+1,w,c
 28610  003640  22DA               	addwfc	fsr2h,f,c
 28611  003642  6ADE               	clrf	postinc2,c
 28612  003644  6ADD               	clrf	postdec2,c
 28613  003646                     i1l6435:
 28614                           
 28615                           ; BSR set to: 1
 28616  003646  2A0F               	incf	fifo_write@i,f,c
 28617  003648  0E00               	movlw	0
 28618  00364A  2210               	addwfc	fifo_write@i+1,f,c
 28619  00364C  2211               	addwfc	fifo_write@i+2,f,c
 28620  00364E  2212               	addwfc	fifo_write@i+3,f,c
 28621  003650                     i1l6437:
 28622                           
 28623                           ; BSR set to: 1
 28624  003650  5005               	movf	fifo_write@nbytes,w,c
 28625  003652  5C0F               	subwf	fifo_write@i,w,c
 28626  003654  5006               	movf	fifo_write@nbytes+1,w,c
 28627  003656  5810               	subwfb	fifo_write@i+1,w,c
 28628  003658  5007               	movf	fifo_write@nbytes+2,w,c
 28629  00365A  5811               	subwfb	fifo_write@i+2,w,c
 28630  00365C  5008               	movf	fifo_write@nbytes+3,w,c
 28631  00365E  5812               	subwfb	fifo_write@i+3,w,c
 28632  003660  E38F               	bnc	i1l6417
 28633                           
 28634                           ; BSR set to: 1
 28635                           ;fifo.c: 79: }
 28636                           ;fifo.c: 80: }
 28637                           ;fifo.c: 82: }
 28638                           ;fifo.c: 84: return nbytes;
 28639  003662  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28640  003666  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28641  00366A                     i1l1550:
 28642                           
 28643                           ; BSR set to: 1
 28644  00366A  0012               	return	
 28645  00366C                     __end_of_fifo_write:
 28646                           	opt stack 0
 28647  00366C                     PL12:
 28648                           	opt stack 20
 28649  00366C  26D9               	addwf	fsr2l,f,c
 28650  00366E  5002               	movf	fifo_write@f+1,w,c
 28651  003670  22DA               	addwfc	fsr2h,f,c
 28652  003672  CFDE F009          	movff	postinc2,??_fifo_write
 28653  003676  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28654  00367A  EE20 F002          	lfsr	2,2
 28655  00367E  5001               	movf	fifo_write@f,w,c
 28656  003680  26D9               	addwf	fsr2l,f,c
 28657  003682  5002               	movf	fifo_write@f+1,w,c
 28658  003684  22DA               	addwfc	fsr2h,f,c
 28659  003686  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28660  00368A  CFDD F00C          	movff	postdec2,??_fifo_write+3
 28661  00368E  2A0B               	incf	??_fifo_write+2,f,c
 28662  003690  0E00               	movlw	0
 28663  003692  220C               	addwfc	??_fifo_write+3,f,c
 28664  003694  500A               	movf	??_fifo_write+1,w,c
 28665  003696  180C               	xorwf	??_fifo_write+3,w,c
 28666  003698  0012               	return	
 28667  00369A                     __end_ofPL12:
 28668                           	opt stack 0
 28669                           tblptru	equ	0xFF8
 28670                           tblptrh	equ	0xFF7
 28671                           tblptrl	equ	0xFF6
 28672                           tablat	equ	0xFF5
 28673                           prodh	equ	0xFF4
 28674                           prodl	equ	0xFF3
 28675                           intcon	equ	0xFF2
 28676                           indf0	equ	0xFEF
 28677                           postinc0	equ	0xFEE
 28678                           fsr0h	equ	0xFEA
 28679                           fsr0l	equ	0xFE9
 28680                           wreg	equ	0xFE8
 28681                           indf1	equ	0xFE7
 28682                           postinc1	equ	0xFE6
 28683                           postdec1	equ	0xFE5
 28684                           fsr1h	equ	0xFE2
 28685                           fsr1l	equ	0xFE1
 28686                           bsr	equ	0xFE0
 28687                           indf2	equ	0xFDF
 28688                           postinc2	equ	0xFDE
 28689                           postdec2	equ	0xFDD
 28690                           plusw2	equ	0xFDB
 28691                           fsr2h	equ	0xFDA
 28692                           fsr2l	equ	0xFD9
 28693                           status	equ	0xFD8
 28694                           
 28695 ;; *************** function _ReadUSART *****************
 28696 ;; Defined at:
 28697 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28698 ;; Parameters:    Size  Location     Type
 28699 ;;		None
 28700 ;; Auto vars:     Size  Location     Type
 28701 ;;  data            1    0[COMRAM] unsigned char 
 28702 ;; Return value:  Size  Location     Type
 28703 ;;                  1    wreg      unsigned char 
 28704 ;; Registers used:
 28705 ;;		wreg, status,2, status,0
 28706 ;; Tracked objects:
 28707 ;;		On entry : 0/0
 28708 ;;		On exit  : 0/0
 28709 ;;		Unchanged: 0/0
 28710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28711 ;;      Params:         0       0       0       0       0       0       0
 28712 ;;      Locals:         1       0       0       0       0       0       0
 28713 ;;      Temps:          0       0       0       0       0       0       0
 28714 ;;      Totals:         1       0       0       0       0       0       0
 28715 ;;Total ram usage:        1 bytes
 28716 ;; Hardware stack levels used:    1
 28717 ;; This function calls:
 28718 ;;		Nothing
 28719 ;; This function is called by:
 28720 ;;		_Interrupt
 28721 ;; This function uses a non-reentrant model
 28722 ;;
 28723                           
 28724                           	psect	text89
 28725  0016D8                     __ptext89:
 28726                           	opt stack 0
 28727  0016D8                     _ReadUSART:
 28728                           	opt stack 20
 28729                           
 28730                           ; BSR set to: 1
 28731                           ;incstack = 0
 28732                           ;incstack = 0
 28733  0016D8  0EF2               	movlw	242
 28734  0016DA  162D               	andwf	_USART_Status,f,c
 28735  0016DC  ACAB               	btfss	4011,6,c	;volatile
 28736  0016DE  D003               	goto	i1l1868
 28737  0016E0  902D               	bcf	_USART_Status,0,c
 28738  0016E2  B0AB               	btfsc	4011,0,c	;volatile
 28739  0016E4  802D               	bsf	_USART_Status,0,c
 28740  0016E6                     i1l1868:
 28741  0016E6  B4AB               	btfsc	4011,2,c	;volatile
 28742  0016E8  842D               	bsf	_USART_Status,2,c
 28743  0016EA  B2AB               	btfsc	4011,1,c	;volatile
 28744  0016EC  862D               	bsf	_USART_Status,3,c
 28745  0016EE  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28746  0016F2  5001               	movf	ReadUSART@data,w,c
 28747  0016F4  0012               	return	
 28748  0016F6                     __end_of_ReadUSART:
 28749                           	opt stack 0
 28750                           tblptru	equ	0xFF8
 28751                           tblptrh	equ	0xFF7
 28752                           tblptrl	equ	0xFF6
 28753                           tablat	equ	0xFF5
 28754                           prodh	equ	0xFF4
 28755                           prodl	equ	0xFF3
 28756                           intcon	equ	0xFF2
 28757                           indf0	equ	0xFEF
 28758                           postinc0	equ	0xFEE
 28759                           fsr0h	equ	0xFEA
 28760                           fsr0l	equ	0xFE9
 28761                           wreg	equ	0xFE8
 28762                           indf1	equ	0xFE7
 28763                           postinc1	equ	0xFE6
 28764                           postdec1	equ	0xFE5
 28765                           fsr1h	equ	0xFE2
 28766                           fsr1l	equ	0xFE1
 28767                           bsr	equ	0xFE0
 28768                           indf2	equ	0xFDF
 28769                           postinc2	equ	0xFDE
 28770                           postdec2	equ	0xFDD
 28771                           plusw2	equ	0xFDB
 28772                           fsr2h	equ	0xFDA
 28773                           fsr2l	equ	0xFD9
 28774                           status	equ	0xFD8
 28775                           tblptru	equ	0xFF8
 28776                           tblptrh	equ	0xFF7
 28777                           tblptrl	equ	0xFF6
 28778                           tablat	equ	0xFF5
 28779                           prodh	equ	0xFF4
 28780                           prodl	equ	0xFF3
 28781                           intcon	equ	0xFF2
 28782                           indf0	equ	0xFEF
 28783                           postinc0	equ	0xFEE
 28784                           fsr0h	equ	0xFEA
 28785                           fsr0l	equ	0xFE9
 28786                           wreg	equ	0xFE8
 28787                           indf1	equ	0xFE7
 28788                           postinc1	equ	0xFE6
 28789                           postdec1	equ	0xFE5
 28790                           fsr1h	equ	0xFE2
 28791                           fsr1l	equ	0xFE1
 28792                           bsr	equ	0xFE0
 28793                           indf2	equ	0xFDF
 28794                           postinc2	equ	0xFDE
 28795                           postdec2	equ	0xFDD
 28796                           plusw2	equ	0xFDB
 28797                           fsr2h	equ	0xFDA
 28798                           fsr2l	equ	0xFD9
 28799                           status	equ	0xFD8
 28800                           
 28801                           	psect	rparam
 28802  0000                     tblptru	equ	0xFF8
 28803                           tblptrh	equ	0xFF7
 28804                           tblptrl	equ	0xFF6
 28805                           tablat	equ	0xFF5
 28806                           prodh	equ	0xFF4
 28807                           prodl	equ	0xFF3
 28808                           intcon	equ	0xFF2
 28809                           indf0	equ	0xFEF
 28810                           postinc0	equ	0xFEE
 28811                           fsr0h	equ	0xFEA
 28812                           fsr0l	equ	0xFE9
 28813                           wreg	equ	0xFE8
 28814                           indf1	equ	0xFE7
 28815                           postinc1	equ	0xFE6
 28816                           postdec1	equ	0xFE5
 28817                           fsr1h	equ	0xFE2
 28818                           fsr1l	equ	0xFE1
 28819                           bsr	equ	0xFE0
 28820                           indf2	equ	0xFDF
 28821                           postinc2	equ	0xFDE
 28822                           postdec2	equ	0xFDD
 28823                           plusw2	equ	0xFDB
 28824                           fsr2h	equ	0xFDA
 28825                           fsr2l	equ	0xFD9
 28826                           status	equ	0xFD8
 28827                           tblptru	equ	0xFF8
 28828                           tblptrh	equ	0xFF7
 28829                           tblptrl	equ	0xFF6
 28830                           tablat	equ	0xFF5
 28831                           prodh	equ	0xFF4
 28832                           prodl	equ	0xFF3
 28833                           intcon	equ	0xFF2
 28834                           indf0	equ	0xFEF
 28835                           postinc0	equ	0xFEE
 28836                           fsr0h	equ	0xFEA
 28837                           fsr0l	equ	0xFE9
 28838                           wreg	equ	0xFE8
 28839                           indf1	equ	0xFE7
 28840                           postinc1	equ	0xFE6
 28841                           postdec1	equ	0xFE5
 28842                           fsr1h	equ	0xFE2
 28843                           fsr1l	equ	0xFE1
 28844                           bsr	equ	0xFE0
 28845                           indf2	equ	0xFDF
 28846                           postinc2	equ	0xFDE
 28847                           postdec2	equ	0xFDD
 28848                           plusw2	equ	0xFDB
 28849                           fsr2h	equ	0xFDA
 28850                           fsr2l	equ	0xFD9
 28851                           status	equ	0xFD8


Data Sizes:
    Strings     4055
    Constant    120
    Data        0
    BSS         1149
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      63
    BANK0           160    131     141
    BANK1           256      0     235
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2031	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2011$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1429	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1414	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1389	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1164(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1303	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1210	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1190	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1181	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1169	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1165	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1156	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1152	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1146	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1129	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1117	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _main->_Read_b_eep
    _doModeSLCAN->_memset
    _doModeSLCAN->_strlen
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_strlen
    _ultoa->___llmod
    _sendVSCPDriverCommandReply->_crc8
    _sendVSCPModeCapabilities->_crc8
    _sendVSCPDriverAck->_crc8
    _sendVSCPDriverErrorFrame->_crc8
    _sendVSCPDriverNack->_crc8
    _calcCRC->_crc8
    _receiveSendEventCANAL->_crc8
    _receiveSendMultiEventCANAL->_crc8
    _sendEscapedUartData->_crc8
    _doModeVerbose->_memset
    _doModeVerbose->_strcpy
    _doModeVerbose->_strchr
    _doModeVerbose->__CANIDToRegs
    _printBinary->_WriteUSART
    _printMDF->_memset
    _printGUID->_memset
    _printGUID->_strlen
    _printGUID->_strcat
    _printNodeFirmwareVersion->_memset
    _printNodeFirmwareVersion->_strcat
    _ECANSendMessage->__CANIDToRegs
    _atoi->___wmul
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strlen
    _strichr->_toupper
    _strnicmp->_strlen
    _getVSCPFrame->_getCANFrame
    _sprintf->___wmul
    _printFirmwareVersion->_WriteUSART
    _utoa->___lwmod
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _init->_OpenUSART
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _init->_WriteTimer0
    _init_app_eeprom->_Write_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  137712
                                            124 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9639
                                             52 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              2 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4194
                                             34 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             21 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   20266
                                             85 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1720
                                             13 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1636
                                             13 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3234
                                             52 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1552
                                             13 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1636
                                             13 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1552
                                             13 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     748
                                             10 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3382
                                             17 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3826
                                             17 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     785
                                             10 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     460
                                             32 COMRAM     2     2      0
                                              7 BANK0      3     0      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0  103479
                                            104 BANK0     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4962
                                             84 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     211
                                              0 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4878
                                             84 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   26433
                                             99 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5340
                                             93 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    7277
                                             93 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    7057
                                             93 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4710
                                             84 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             52 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             45 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                              8 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             32 COMRAM     2     2      0
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                             32 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     115
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7288
                                             51 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7180
                                             51 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     838
                                              4 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             10 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              4 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              4 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1186
                                             11 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              0 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              2 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8806
                                             51 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1380
                                             17 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     1      3     906
                                             32 COMRAM     1     1      0
                                             14 BANK0      3     0      3
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     612
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    6849
                                             21 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                             32 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             32 COMRAM     1     1      0
                                             13 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0     138
                                             32 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1954
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1508
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1188
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             32 COMRAM     1     1      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     115
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     115
                                              0 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     542
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             32 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                             32 COMRAM     2     0      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     352
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     330
                                             33 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                             32 COMRAM     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      22
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      22
                                             32 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           10    10      0    2047
                                             22 COMRAM    10    10      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     3D      BD       8       73.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EB       6       91.8%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     83      8D       4       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     22      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     374      15        0.0%
DATA                 0      0     570      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Oct 02 14:01:51 2015

        ??_receiveVSCPModeMultiCanalMsg 0021                   __end_of_doModeVerbose 6B8A  
                          printBinary@i 0063                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                                     _c 003D                          ??_fifo_getFree 0003  
                 __end_of_sendVSCPFrame 29D0              doModeVerbose@filter_nodeid 0290  
                                    PL2 6B8A                                      PL4 6BA6  
                                    PL6 6BB4                                      PL8 6BCE  
                                    _id 01E4                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 1652                                     PL10 57B8  
                                   PL20 3796                                     PL12 366C  
                                   PL30 6C28                                     PL22 3F04  
                                   PL14 57D6                                     PL40 6C68  
                                   PL32 6C3C                                     PL24 4436  
                                   PL16 344C                                     PL50 353E  
                                   PL42 26FE                                     PL34 2CD2  
                                   PL26 6C18                                     PL18 57E6  
                                   PL60 22B8                                     PL52 6C82  
                                   PL44 352E                                     PL36 580C  
                                   PL28 351A                                     PL70 37C0  
                                   PL62 285A                                     PL54 583C  
                                   PL46 265A                                     PL38 6C4E  
                                   PL80 2DBA                                     PL72 2F7C  
                                   PL64 3340                                     PL56 6C9A  
                                   PL48 5826                                     PL90 390E  
                                   PL82 5872                                     PL74 27A2  
                                   PL66 3550                                     PL58 5852  
                                   PL92 3F14                                     PL84 17E2  
                                   PL76 5860                                     PL68 37AC  
                                   PL94 4822                                     PL86 3D88  
                                   PL78 513A                                     PL96 2A7E  
                                   PL88 2B40                                     PL98 19BA  
               sendEscapedUartData@pcrc 006A                                     l441 3BAE  
                                   l442 3BB8                                     l540 6B88  
                                   l444 3BC4                                     l437 3B58  
                                   l438 3B96                                     l545 600A  
                                   l801 2AC2                                     l554 6092  
                                   l810 2B2C                                     l804 2AE4  
                                   l900 2DB0                                     l581 61D0  
                                   l573 615A                                     l565 6130  
                                   l549 617A                                     l813 2B36  
                                   l725 5138                                     l822 2676  
                                   l807 2AF4                                     l831 26BE  
                                   l735 4E2E                                     l568 613A  
                                   l840 26F4                                     l760 5030  
                                   l825 2680                                     l834 26CE  
                                   l674 4434                                     l819 266C  
                                   l780 1D20                                     l852 25DC  
                                   l828 269C                                     l941 380C  
                                   l861 262A                                     l837 26EA  
                                   l669 42C0                                     l950 383C  
                                   l846 25C8                                     l855 25F8  
                                   l936 4AA6                                     l944 3816  
                                   l864 2646                                     l792 2A92  
                                   l937 4ABA                                     l929 4A12  
                                   l777 1D16                                     l785 1D44  
                                   l849 25D2                                     l873 2CF4  
                                   l962 390C                                     l858 261A  
                                   l882 2D24                                     l947 3820  
                                   l867 2650                                     l795 2A9C  
                                   l891 2D72                                     l972 3DDC  
                                   l956 38F8                                     l876 2CFE  
                                   l789 1D68                                     l885 2D46  
                                   l966 3DC8                                     l798 2AA6  
                                   l894 2D86                                     l991 3EF8  
                                   l975 3DF8                                     l959 3902  
                                   l879 2D08                                     l888 2D56  
                                   l969 3DD2                                     l897 2DA6  
                                   l994 3F02                                     l988 3EEE  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 007C  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _dlc 003E  
                                   _pos 00E7                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00EC                                     wreg 000FE8  
         __end_of_writeRegisterExtended 3164                                    PL100 3564  
                                  PL102 587C                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1110 30C8  
                                  l1022 29D4                                    l1031 2A04  
                                  l1113 3162                                    l1025 29DE  
                                  l1034 2A6A                                    l1028 29E8  
                                  l1052 3CAC                                    l1044 3C42  
                                  l1133 1B98                                    l1037 2A74  
                                  l1071 3D86                                    l1232 2262  
                                  l1129 1B8C                                    l1065 3D5E  
                                  l1049 3C74                                    l1242 203E  
                                  l1058 3CFC                                    l1235 2286  
                                  l1083 289E                                    l1075 3076  
                                  l1180 4CE4                                    l1092 2E10  
                                  l1260 4528                                    l1068 3D7C  
                                  l1261 453A                                    l1253 44BC  
                                  l1086 2918                                    l1262 454C  
                                  l1270 4622                                    l2063 3442  
                                  l1095 2EA8                                    l1263 455E  
                                  l1255 44CE                                    l2064 344A  
                                  l1512 3518                                    l1264 4570  
                                  l1256 44E0                                    l1265 4582  
                                  l1257 44F2                                    l1450 39EC  
                                  l1282 18CC                                    l1194 3178  
                                  l1266 4594                                    l1258 4504  
                                  l1267 45A6                                    l1259 4516  
                                  l1188 4D76                                    l1452 3A0A  
                                  l1268 45B8                                    l1541 2CD0  
                                  l1269 45CA                                    l1278 21B6  
                                  l1711 5576                                    l1287 2522  
                                  l2504 1DCC                                    l1713 559C  
                                  l1705 5534                                    l1641 52A0  
                                  l1625 5164                                    l2370 20B0  
                                  l1714 55A0                                    l1642 5252  
                                  l1538 2CB0                                    l2506 1E2C  
                                  l2602 1A86                                    l1458 3A88  
                                  l2339 25A2                                    l2380 1DBA  
                                  l1732 5646                                    l1716 55BC  
                                  l1805 170E                                    l2453 1B5C  
                                  l1661 52E4                                    l2525 2138  
                                  l1806 1710                                    l1662 52E8  
                                  l1566 1F00                                    l1574 1F5E  
                                  l2438 2F58                                    l2463 1902  
                                  l2544 1EF4                                    l2528 2134  
                                  l1568 1F08                                    l1593 241E  
                                  l1842 1CE2                                    l1658 52B0  
                                  l1594 2484                                    l1843 1CE4  
                                  l1764 1652                                    l1844 1CEE  
                                  l2556 2356                                    l1588 1986  
                                  l1845 1CF0                                    l1677 53D2  
                                  l1838 1CCE                                    l2558 234A  
                                  l1847 1D08                                    l1855 1BFE  
                                  l2583 1ACA                                    l2559 234E  
                                  l2592 1948                                    l1789 1814  
                                  STR_1 7630                                    STR_2 6FD2  
                                  STR_3 769E                                    STR_4 70EB  
                                  STR_5 782B                                    STR_6 7CD0  
                                  STR_7 77ED                                    STR_8 7CB7  
                                  STR_9 7C80                                    _PEIE 007F96  
                        sendCANFrame@id 008D                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0022                                    _bDLE 0034  
                          __CFG_PWRT$ON 000000                                    ___IT 000101  
            __end_of_sendVSCPDriverNack 265A                                    _bHex 00E3  
          doModeVerbose@filter_priority 028E                                    _crc8 1826  
                                  _data 01CC                                    _caps 01E8  
                                  _atoi 3354                                    _main 3A8A  
                                  _init 1AD4                                    _mode 00E6  
                                  _itoa 185C                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 2524                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 02FA                            _sprintf$2031 0085  
                          _sprintf$2024 0081                            _sprintf$2025 0083  
          receiveSendMultiEventCANAL@id 007B               ECANReceiveMessage@dataLen 000E  
    __end_of_receiveSendMultiEventCANAL 3F04              _receiveSendMultiEventCANAL 3D96  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0073  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 21B8  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 009E                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10111 1F18  
                                 l10109 1F12                                   _B0CON 000E20  
                                 l12117 16A4                                   l13111 18E6  
                                 _B1CON 000E30                                   l11433 16CC  
                                 l14001 67F6                                   l13115 18F8  
                                 l13107 18DA                                   l13051 2070  
                                 l14011 685A                                   l13109 18E2  
                                 l13061 20A2                                   l13053 2074  
                                 l14013 6868                                   l13301 3AEC  
                                 l13071 1D86                                   l11439 22D4  
                                 l14103 6B86                                   l14111 428C  
                                 _B2CON 000E40                                   l13049 2064  
                                 l13073 1D8A                                   l11449 230C  
                                 l14025 6900                                   l14009 684C  
                                 l14201 4374                                   l15003 52CC  
                                 l11723 1DFA                                   l13155 1A52  
                                 l13163 1A96                                   l11715 176C  
                                 l12275 45DC                                   l14035 694E  
                                 l13077 1DAC                                   l13069 1D7A  
                                 l15013 52F4                                   l15021 5318  
                                 l13157 1A5A                                   l13165 1A9E  
                                 l11485 173E                                   l11717 1774  
                                 l14053 69EC                                   l14045 69A2  
                                 l14133 42DE                                   l14109 4288  
                                 l12701 242C                                   l14301 4E38  
                                 l13333 3B98                                   l15031 5342  
                                 l15015 5300                                   l14231 43C6  
                                 l14143 42F4                                   l13343 3BC0  
                                 l13335 3BAA                                   _B3CON 000E50  
                                 l15105 5480                                   l15121 54B8  
                                 l15025 532E                                   l15009 52EE  
                                 l11489 174E                                   l14049 69C6  
                                 l12721 1A38                                   l14225 43AE  
                                 l14153 4310                                   l14129 42D8  
                                 l14401 5086                                   l14313 4E66  
                                 l13361 3BEE                                   l15203 562E  
                                 l15131 5502                                   l15107 5484  
                                 l15123 54CA                                   l15035 5350  
                                 l15043 5362                                   l16003 39F0  
                                 l14091 6B38                                   l14075 6A94  
                                 l14067 6A50                                   l14083 6AD8  
                                 l13611 5C5A                                   l13531 59EE  
                                 l13523 59AA                                   l13515 5966  
                                 l13507 5924                                   l12715 1A1C  
                                 l14243 43FA                                   l14219 439A  
                                 l12707 2470                                   l14323 4E8C  
                                 l13363 3BF4                                   l13355 3BDE  
                                 l13453 201E                                   l13445 1FF8  
                                 l16101 1B52                                   l15213 5656  
                                 l15053 539C                                   l15029 5334  
                                 l15045 538C                                   l13461 2C2A  
                                 l14093 6B46                                   l13605 5C2E  
                                 l14237 43E0                                   l14253 4426  
                                 l14181 434E                                   l12821 2EBA  
                                 l14413 5110                                   l14431 1CC2  
                                 l15143 5538                                   l15127 54E4  
                                 l15071 53FA                                   l15039 535C  
                                 l16111 1ECC                                   l16015 3A3A  
                                 l16023 3A58                                   l14087 6B14  
                                 l13703 5FD8                                   l13623 5CB2  
                                 l14183 4352                                   l14255 442C  
                                 l12831 2EFE                                   l14415 511C  
                                 l14407 509E                                   l13367 3C00  
                                 l13359 3BEA                                   _B4CON 000E60  
                                 l13457 2032                                   l13449 200A  
                                 l15217 5668                                   l15137 5514  
                                 l13473 2CBA                                   l16121 1918  
                                 l16009 3A0C                                   l16033 3A7E  
                                 l14097 6B5E                                   l13801 624C  
                                 l13721 605E                                   l13713 6012  
                                 l13641 5D6E                                   l13633 5D0C  
                                 l13617 5C86                                   l13553 5AB0  
                                 l13481 588E                                   l14249 4414  
                                 l14193 4368                                   l14185 4358  
                                 l14177 4342                                   l14169 4318  
                                 l14409 50FC                                   l15251 575A  
                                 l15243 571C                                   l15235 56A4  
                                 l15219 566E                                   l15163 55B6  
                                 l15155 557A                                   l15091 5448  
                                 l15067 53DC                                   l13475 2CBE  
                                 l14603 4A1E                                   l16115 1ED8  
                                 l16107 1E92                                   l16035 3A80  
                                 l15411 23BA                                   l13803 625E  
                                 l13651 5DD4                                   l13635 5D16  
                                 l13627 5CD0                                   l13643 5D80  
                                 l13571 5B34                                   l13563 5AFA  
                                 l13547 5A72                                   l13539 5A30  
                                 l14099 6B6C                                   l14179 4348  
                                 l14259 4432                                   l14347 4FA6  
                                 l14339 4F2E                                   l14291 4E04  
                                 l14283 4DDC                                   l14419 5136  
                                 l14509 2846                                   l15261 579C  
                                 l15237 56FA                                   l15253 576C  
                                 l15229 5690                                   l15149 5552  
                                 l15093 544C                                   l15077 5410  
                                 l14613 4A8E                                   l14541 488E  
                                 l12685 19D2                                   l16117 1EE0  
                                 l16125 1934                                   l16029 3A7A  
                                 l15405 238C                                   l13733 60AC  
                                 l14381 5046                                   l14357 4FD0  
                                 l14285 4DE0                                   l14439 1CD0  
                                 l16055 252C                                   l15247 5740  
                                 l15079 5414                                   l14615 4A92  
                                 l14623 4AB8                                   l12687 19D8  
                                 l16135 16BC                                   l16127 1938  
                                 l14711 4008                                   l15431 34A6  
                                 l15351 2BDC                                   l15343 2B7A  
                                 l15415 23C8                                   l15327 3140  
                                 l13903 656E                                   l13831 6366  
                                 l13815 62C2                                   l13663 5E50  
                                 l13583 5B7C                                   l13575 5B4C  
                                 l13567 5B1A                                   l13495 58CA  
                                 l14391 5068                                   l14279 4DBA  
                                 _B5CON 000E70                                   l16065 2564  
                                 l16049 172C                                   l15257 577A  
                                 l15169 55CC                                   l15185 5600  
                                 l15193 561C                                   l14617 4A9A  
                                 l14553 48DC                                   l14633 20FC  
                                 l14641 3356                                   l15409 23B2  
                                 l15329 3160                                   l13913 65AC  
                                 l13825 6340                                   l13745 60FC  
                                 l13673 5ECC                                   l13657 5E12  
                                 l13649 5DC2                                   l15513 3EBC  
                                 l14377 5036                                   l14369 5010  
                                 l14297 4E28                                   l16091 1B34  
                                 l15179 55EC                                   l15267 57A4  
                                 l14635 2122                                   l14651 33B0  
                                 l14643 335C                                   l14811 4CD2  
                                 l12891 1C60                                   l15355 2BF8  
                                 l15371 327E                                   l13923 65E6  
                                 l13843 63D8                                   l13835 6392  
                                 l13827 6354                                   l13819 62D4  
                                 l13691 5F46                                   l13667 5E8E  
                                 l13587 5B94                                   l13579 5B64  
                                 l16093 1B38                                   l15197 5626  
                                 l15269 57AA                                   l14565 492C  
                                 l14629 20C4                                   l14653 33C8  
                                 l14725 406E                                   l12893 1C64  
                                 l15349 2BC6                                   l15381 32EA  
                                 l13933 6622                                   l13909 659C  
                                 l13941 6686                                   l13845 63E8  
                                 l13773 619C                                   l13589 5BA6  
                                 l15517 3EDE                                   l15509 3E98  
                                 l12981 1960                                   l14495 2830  
                                 l14655 33D0                                   l14831 4D52  
                                 l14807 4CC0                                   l12895 1C72  
                                 l15383 3300                                   l15287 1BA2  
                                 l15279 1B72                                   l13919 65D6  
                                 l13839 63A2                                   l13759 6154  
                                 l13687 5F34                                   l13599 5BFC  
                                 l15471 3E26                                   l16089 1B2C  
                                 l14577 497A                                   l14753 4B3C  
                                 l12897 1C7C                                   l13961 6706  
                                 l13929 6612                                   l13857 6448  
                                 l13873 64B2                                   l13785 61EA  
                                 l13793 622A                                   l13697 5FB2  
                                 l14659 340A                                   l14683 3F3C  
                                 l14835 4D64                                   l14819 4D00  
                                 l14739 4AD6                                   l15387 331C  
                                 l15379 32E2                                   l13971 6742  
                                 l13795 622E                                   l13699 5FC6  
                                 l15803 3D1A                                   l14941 5172  
                                 l14933 514C                                   l14589 49C8  
                                 l14781 4C08                                   l14925 2E86  
                                 l13981 6780                                   l13957 66F6  
                                 l13893 6532                                   l15493 3E56  
                                 l15565 38CE                                   l15581 1796  
                                 l12997 1984                                   l12989 1972  
                                 ?_crc8 0067                                   l14943 5176  
                                 l15903 24EC                                   l14767 4BA2  
                                 l14927 2EA6                                   l13991 67BA  
                                 l13967 6732                                   l14945 517A  
                                 l14697 3FA2                                   l13977 6770  
                                 l13889 6522                                   l15569 38E8  
                                 l15585 17B6                                   l15931 1878  
                                 l14939 516E                                   l14795 4C6E  
                                 l15835 18CA                                   l14859 31AE  
                                 l13987 67AA                                   l13899 655E  
                                 l15499 3E74                                   l15691 3034  
                                 l14973 5222                                   l14957 51B6  
                                 l14965 51FC                                   l14949 5180  
                                 l14877 3216                                   l13997 67E6  
                                 l14991 52A6                                   l15791 3CC0  
                                 l14993 52AA                                   l14985 5258  
                                 l15961 28F6                                   l14995 52AE  
                                 l15891 24B8                                   l15963 2916  
                                 l14997 52B4                                   l14989 528C  
                                 l15885 24B2                                   l15869 2158  
                                 l15981 3986                                   l15887 24B4  
                                 l15975 3974                                   l15799 3D06  
                                 l15993 39B0                    __size_of_doModeSLCAN 03C2  
                                 ?_atoi 0064                                   ?_main 00DC  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 1660                                   _EEADR 000FA9  
                                 STR_10 7C5E                                   STR_11 7C80  
                                 STR_12 7C92                                   STR_20 7C49  
                                 STR_13 7C80                                   STR_21 7A83  
                                 STR_30 7CF5                                   STR_14 7BCD  
                                 STR_22 7A97                                   STR_15 7C80  
                                 STR_31 7CF5                                   STR_23 7AD3  
                                 STR_32 7CF5                                   STR_16 7C50  
                                 STR_40 7AF8                                   STR_24 7A06  
                                 STR_17 7C80                                   STR_33 7CF5  
                                 STR_41 7CCB                                   STR_25 78CF  
                                 STR_42 7C80                                   STR_50 7C2B  
                                 STR_34 7CF5                                   STR_18 7C0E  
                                 STR_26 7A6F                                   STR_19 7C80  
                                 STR_35 7CF5                                   STR_43 7CD9  
                                 STR_27 7AE6                                   STR_51 7931  
                                 STR_44 7C80                                   STR_36 7C80  
                                 STR_52 7C2B                                   STR_60 7BEA  
                                 STR_28 7949                                   STR_61 7C65  
                                 STR_29 7CEB                                   STR_45 7CC6  
                                 STR_53 77AC                                   STR_37 7749  
                                 STR_70 7C80                                   STR_46 7C80  
                                 STR_54 7C2B                                   STR_62 7CEE  
                                 STR_38 7CE8                                   STR_63 71C0  
                                 STR_39 7C80                                   STR_47 7CA3  
                                 STR_55 7B5E                                   STR_71 7158  
                                 STR_48 7C80                                   STR_72 7CAD  
                                 STR_56 7C65                                   STR_80 778B  
                                 STR_64 7706                                   STR_73 7C2B  
                                 STR_65 7C65                                   STR_57 7CEE  
                                 STR_81 7CBC                                   STR_49 7CA8  
                                 STR_74 7931                                   STR_58 7C65  
                                 STR_66 7CEE                                   STR_82 7AAB  
                                 STR_90 74FB                                   STR_75 7C2B  
                                 STR_91 7CF5                                   STR_83 7C65  
                                 STR_67 7C65                                   STR_59 7CEE  
                                 STR_76 77AC                                   STR_84 7CEE  
                                 STR_68 7CEE                                   STR_92 7430  
                                 STR_85 71C0                                   STR_69 71C0  
                                 STR_77 7C2B                                   STR_93 7CF5  
                                 STR_86 7C80                                   STR_78 7961  
                                 STR_94 7597                                   STR_95 7CF5  
                                 STR_87 7C57                                   STR_79 76C1  
                                 STR_88 7CF5                                   STR_96 75E5  
                                 STR_97 7CF5                                   STR_89 6F18  
                                 STR_98 745A                                   STR_99 7C80  
          __end_of_printFirmwareVersion 22B8                                   _BSEL0 000DF8  
                       __end_of___lldiv 20C2                                   ?_utoa 0067  
                       __end_of_calcCRC 17C0                                   _T0CON 000FD5  
                       __end_of___llmod 1DCC                                   u21045 3480  
                                 u21055 3490                                   u21065 34AE  
                                 _LATC1 007C59                                   u22307 3AFC  
                                 u21525 2FCC                                   u14700 1DEA  
                                 u21910 21AA                                   u14720 1E22  
                                 u20794 1B82                                   u21915 21A0  
                                 u14707 1DE4                                   u20795 1B7E  
                                 u14727 1E1C                                   u16520 19F6  
                                 u15715 4460                                   u15716 4466  
                                 u15725 4494                                   u15717 4474  
                                 u18205 5EB4                                   u15726 449A  
                                 u16527 19F0                                   u15727 44A8  
                                 u18215 5EF2                                   u18065 5BCC  
                                 u18155 5DA6                                   u18175 5DFA  
                                 u18505 64D8                                   u18425 6284  
                                 u18185 5E38                                   u17730 1C20  
                                 u16850 1CA4                         __end_of___lwdiv 1B66  
                                 u18195 5E76                                   u17740 1C4E  
                                 u19260 4EFA                                   u19270 4F04  
                                 _ERRIE 007D1D                                   u19280 4F0E  
                                 u17737 1C1A                                   u16857 1C9A  
                                 u17905 594A                                   u19265 4EF8  
                                 u17747 1C48                                   u17835 2C9C  
                                 u17915 598C                                   u19275 4F02  
                                 u18485 640E                                   u17925 59D0  
                                 u19285 4F0C                                   u19615 1820  
                                 u18575 6BD6                                   u17935 5A14  
                                 u19616 1822                                   u18585 66AC  
                                 u17945 5A56                                   u19810 33C4  
                                 u18675 688E                                   u17955 5A98  
                                 u18685 68D6                                   u17965 5AD6  
                                 u19830 33F4                                   u19750 3370  
                                 u18695 6926                                   u17895 58FE  
                          _vscpPriority 00EA                                   u19840 341E  
                                 i1l401 018C                                   u19817 33BE  
                                 i1l410 018A                                   u19770 3388  
                                 u18890 42FA                                   i1l404 018A  
                                 i1l413 017A                                   u19837 33EE  
                                 u19757 336A                                   u19790 33A6  
                                 u19847 3418                                   i1l416 0196  
                       __end_of___lwmod 190C                                   u19777 3382  
                                 i1l419 01EA                                   u19875 2956  
                                 i1l429 02DC                                   u19797 33A0  
                                 i1l399 0092                         sendCANFrame@dlc 0091  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0062                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B6                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00E4  
               readRegisterExtended@reg 00B6                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0021                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 23EC                                   crc8@m 0069  
                                 _flags 003F                         __end_of_dpowers 6D08  
                Write_b_eep@GIE_BIT_VAL 0021                         __end_of_isdigit 1734  
                                 _timer 0118                                   atoi@a 0069  
                                 atoi@s 0064                                   main@c 00E2  
                                 _ultoa 2EAA              ??_printNodeFirmwareVersion 0023  
                      _printErrors$1402 0095                        _printErrors$1420 009B  
                      _printErrors$1414 0099                        _printErrors$1408 0097  
                      _printErrors$1429 009D                                   tablat 000FF5  
                      _printErrors$1396 0093                 ??_receiveSendEventCANAL 0023  
           __end_of_sendEscapedUartData 1D6A                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 57B8  
               ??_receiveSendEventSLCAN 0082                         __end_of_strichr 194A  
                       __end_of_strcspn 1AD4                         __end_of_toupper 16C0  
                       __end_of_stristr 213A                            __end_ofPL100 356E  
                          __end_ofPL102 5886       __size_of_receivePrintEventVerbose 028C  
                   doModeVerbose@i_1111 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1210 02BB                     doModeVerbose@p_1117 02B2  
                   doModeVerbose@p_1165 02B4                     doModeVerbose@p_1190 02B9  
                        WriteUSART@data 0021                    _ECANSetOperationMode 16C0  
                          _canInputFifo 01C4                         __initialization 1E2E  
                doModeVerbose@page_1162 02A1           receiveSendMultiEventCANAL@dlc 007F  
                          __end_of_crc8 185C           receiveSendMultiEventCANAL@crc 0080  
                          __end_of_atoi 344C           receiveSendMultiEventCANAL@pos 0081  
                          __end_of_main 3C0C                            __end_of_init 1B1C  
                          __end_of_itoa 1894                            __end_of_utoa 25C4  
                   doModeVerbose@ifmode 02B6                              _Read_b_eep 1672  
                   doModeVerbose@maskno 02A8                        __end_of_Busy_eep 1658  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009B  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A1  
                     ??_ECANSendMessage 0070                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00B9                                  ??_crc8 0021  
                 getVSCPFrame@pvscptype 0071                                  ??_atoi 0066  
                ??_vscp_restoreDefaults 0023                                  ??_main 00E1  
                     readRegister@value 00B7                                  ??_init 0023  
                                ??_itoa 0022                                  ??_utoa 0022  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 003A                       __RegsToCANID@type 0005  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000F  
                         ?_readRegister 00B4               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1169 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B7  
            ECANReceiveMessage@savedPtr 0010                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7CB2  
                                STR_101 7CF5                                  STR_110 7CF5  
                                STR_102 722A                                  STR_103 760B  
                                STR_111 7570                                  STR_112 7C80  
                                STR_104 7CF5                                  STR_200 7C65  
                                STR_120 7BBB                                  STR_201 7CEE  
                                STR_113 7C9E                                  STR_121 7C86  
                                STR_105 74AB                                  STR_202 71C0  
                                STR_106 7CF5                                  STR_114 7CDD  
                                STR_122 7BFE                                  STR_130 776A  
                                STR_210 737E                                  STR_131 7C80  
                                STR_123 7848                                  STR_107 7655  
                                STR_115 7404                                  STR_211 71F7  
                                STR_203 707D                                  STR_108 7CF5  
                                STR_140 7C65                                  STR_124 7CC1  
                                STR_116 7C06                                  STR_132 787F  
                                STR_220 7522                                  STR_212 725C  
                                STR_204 7122                                  STR_141 7CEE  
                                STR_133 7A5B                                  STR_213 780C  
                                STR_125 77CD                                  STR_109 767A  
                                STR_117 74D3                                  STR_221 7483  
                                STR_205 71C3                                  STR_150 7CEE  
                                STR_126 7C98                                  STR_142 7BF6  
                                STR_134 7BD6                                  STR_118 7B87  
                                STR_230 76E4                                  STR_206 7549  
                                STR_222 734F                                  STR_214 728E  
                                STR_207 6E6B                                  STR_119 7C80  
                                STR_143 7C6C                                  STR_151 7C3B  
                                STR_135 7BDE                                  STR_127 78B5  
                                STR_215 73AC                                  STR_231 7320  
                                STR_223 6E0A                                  STR_240 71C0  
                                STR_152 7C65                                  STR_144 7CEE  
                                STR_136 7C7A                                  STR_128 7BEE  
                                STR_160 7B0A                                  STR_216 7901  
                                STR_208 7864                                  STR_232 72F1  
                                STR_224 6ED5                                  STR_241 6E4F  
                                STR_153 7CEE                                  STR_137 7CF3  
                                STR_129 7C8C                                  STR_161 7C73  
                                STR_145 7C34                                  STR_209 73D8  
                                STR_217 7045                                  STR_233 6E92  
                                STR_225 6D76                                  STR_146 7C65  
                                STR_170 7CE1                                  STR_138 7CF1  
                                STR_162 7CE1                                  STR_154 7C2D  
                                STR_242 7B4F                                  STR_250 7ABF  
                                STR_218 79C1                                  STR_226 7919  
                                STR_234 72C0                                  STR_171 71C0  
                                STR_163 71C0                                  STR_155 7C65  
                                STR_147 7CEE                                  STR_251 7CFD  
                                STR_139 7C42                                  STR_243 7BE6  
                                STR_219 7728                                  STR_235 70B4  
                                STR_227 6D28                                  STR_156 7CEE  
                                STR_244 7CF9                                  STR_252 7CF7  
                                STR_148 7BC4                                  STR_260 7BA7  
                                STR_164 7B3E                                  STR_228 7A47  
                                STR_172 7A32                                  STR_180 79A9  
                                STR_236 6F5A                                  STR_253 71C0  
                                STR_157 7CF5                                  STR_149 7C65  
                                STR_173 7C73                                  STR_165 7C73  
                                STR_181 7C16                                  STR_245 7CE5  
                                STR_261 79EF                                  STR_237 75BE  
                                STR_229 6DC3                                  _EEDATA 000FA8  
                                STR_262 71C0                                  STR_190 7CE1  
                                STR_182 7CE1                                  STR_174 7CE1  
                                STR_166 7CE1                                  STR_246 7CFB  
                                STR_254 7B9D                                  STR_158 7B92  
                                STR_238 6E4F                                  STR_255 71C0  
                                STR_247 71C0                                  STR_191 71C0  
                                STR_183 71C0                                  STR_175 71C0  
                                STR_167 71C0                                  STR_159 7CD5  
                                STR_263 7B1C                                  STR_239 789A  
                                STR_256 7C26                                  STR_248 7B6D  
                                STR_264 7B2D                                  STR_168 7A1C  
                                STR_176 79D8                                  STR_184 7991  
                                STR_192 78E8                                  STR_249 71C0  
                                STR_193 7C65                                  STR_169 7C73  
                                STR_185 7C16                                  STR_257 7C1E  
                                STR_177 7C16                                  STR_194 7CEE  
                                STR_186 7CE1                                  STR_178 7CE1  
                                STR_258 7B7B                                  STR_195 71C0  
                                STR_187 71C0                                  STR_179 71C0  
                                STR_259 7BB1                                  STR_188 7991  
                                STR_196 6F98                                  STR_189 7C16  
                                STR_197 718E                                  STR_198 700C  
                                STR_199 7979                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 2EAA                                  _CIOCON 000F73  
                                ?_ultoa 0075            ??_sendVSCPDriverCommandReply 0023  
                  __end_of_fifo_getFree 27A2                           ?_init_app_ram 0001  
                                i1l1522 1FCC                                  _MDSEL0 007BBE  
                                i1l1517 3794                                  _MDSEL1 007BBF  
                                i1l1550 366A                                  i1l1470 4820  
                                i1l1463 4658                                  i1l1480 46DC  
                                i1l1473 4726                                  i1l1482 46F0  
                                i1l1474 46A6                                  i1l1484 4700  
                                i1l1476 46B4                                  i1l1549 35B2  
                                i1l1494 478A                                  i1l1486 4710  
                                i1l1478 46C8                                  i1l1495 47A4  
                                i1l1868 16E6                                  i1l6425 35BC  
                                i1l6417 3580                              _OpenTimer0 16F6  
                                i1l6435 3646                                  i1l6437 3650  
                                i1l6449 275A                                  i1l9501 1F8C  
                                i1l9503 1F96                                  i1l9511 1FAE  
                                i1l9505 1F9C                                  i1l9507 1FA2  
                                i1l9527 3716                                  i1l9493 1F66  
                                i1l9495 1F6E                                  i1l9497 1F78  
                                i1l9499 1F82                                  i1l9827 473A  
                                i1l9837 475A                                  i1l9863 47D6  
                                i1l9871 47F4                                  i1l9855 47A6  
                                i1l9775 4686                                  i1l9759 4646  
                                i1l9783 4694                                  i1l9769 4670  
                                i1l9777 4690                                  i1l9877 480A  
                       _init_app_eeprom 27B4                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 000C  
                ECANReceiveMessage@mode 0013                  ECANReceiveMessage@temp 0014  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 0075              ??_sendVSCPDriverErrorFrame 0023  
                     getVSCPFrame@pSize 0074                      _doModeVerbose$1141 0296  
                    _doModeVerbose$1152 029A                      _doModeVerbose$1129 0294  
                    _doModeVerbose$1146 0298                      _doModeVerbose$1156 029C  
                    _doModeVerbose$1181 029E                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0067                      __size_of_Interrupt 02E2  
              readRegisterExtended@page 00B4                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0021  
                                ___wmul 17C0                              _bInitiated 0035  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0021  
                             ??_calcCRC 0023                                  _cmdbuf 0124  
                             ??___llmod 0021                        OpenTimer0@config 0021  
                receiveSendEventCANAL@i 0079                               ??___lwdiv 0021  
                             ??___lwmod 0021           _receivePrintEventVerbose$1303 00A2  
         _receivePrintEventVerbose$1283 009A           _receivePrintEventVerbose$1293 009E  
         _receivePrintEventVerbose$1278 0098           _receivePrintEventVerbose$1288 009C  
         _receivePrintEventVerbose$1298 00A0                                  _memcpy 1A0A  
                                _memset 1734                                  clear_0 1E36  
                                clear_1 1E4A                                  clear_2 1E5C  
                                clear_3 1E68                                  clear_4 1E74  
                                clear_5 1E80                           ?_sendCANFrame 008D  
                                _strcat 1C56                                  _strchr 1DCC  
                                _strcpy 1762                                  _strlen 19C8  
                                _wrkbuf 0174                                  _strtok 22C6  
                                _strspn 1A4C     __size_of_sendVSCPDriverCommandReply 00CC  
                             ??_isdigit 0021                  receiveSendEventSLCAN@i 008A  
                      __end_of_printMDF 23EC                            __mediumconst 6CB0  
                        ??_readRegister 00B8                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0081                                  ultoa@v 007D  
                          ?_printErrors 0001                               ??_sprintf 007D  
                             ??_strichr 0022                               ??_strcspn 0023  
                             ??_toupper 0021                          ??_init_app_ram 0023  
                             ??_stristr 0023              ??_sendVSCPModeCapabilities 0023  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 1EF6  
                            __accesstop 0060                 __end_of__initialization 1E86  
                  _printFirmwareVersion 2238                   __size_of_getVSCPFrame 007E  
             receiveSendEventCANAL@data 0071                    doModeVerbose@id_1222 02A3  
                            _WriteUSART 1696                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0196                    _printStatistics$1371 0093  
                  _printStatistics$1383 0097                    _printStatistics$1377 0095  
                  _printStatistics$1389 0099                   _uart_transmitOverruns 0120  
                           ?_Read_b_eep 0021                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 2F7C                              __end_ofPL2 6BA6  
                            __end_ofPL4 6BB4                              __end_ofPL6 6BCE  
                            __end_ofPL8 6C18                          ??_sendCANFrame 0023  
                     __end_of_ReadUSART 16F6                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009A  
                       readRegister@reg 00B4                    sendVSCPDriverAck@crc 006D  
                    __size_of_findNodes 00EE                          doModeSLCAN@dlc 009F  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007B                         _fifo_canrxcount 0036  
               __end_of_init_app_eeprom 285A                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00BC  
                        _status_led_cnt 0029                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 1D0A  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C2  
                       setFilter@filter 006A                            sprintf@width 008A  
      __end_of_printNodeFirmwareVersion 2C1C                              _doModeVscp 4276  
                               ??_ultoa 0022                            _getVSCPFrame 213A  
                            __pbssBANK0 00E3                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 006E  
                             ?_Busy_eep 0001                              calcCRC@len 006C  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0021  
                    __size_of_init_crc8 006A                            __IT_INT_MASK 002F  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                          __IT_SAVE_BSR 0030                           setFilter@sidh 006B  
                         setFilter@sidl 006C                        ??_doModeVscpNode 0021  
                            _nTimeStamp 0038             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 2486                ECANSetOperationMode@mode 0021  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 002E                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 25C4                                 _B5RXFUL 007387  
                         putsUSART@data 0060                        WriteTimer0@timer 0060  
                  _readRegisterExtended 2DC8                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0023                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0021                   sendVSCPFrame@priority 0098  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0021                                 ?_strtok 006A  
                               ?_strspn 0064                              _cntRxBytes 0108  
                            _cntTxBytes 0110                                 i1l13201 00F0  
                               i1l13203 00FC                      __size_of_printGUID 00EE  
                               i1l13221 0156                                 i1l13213 012C  
                               i1l13231 0194                                 i1l13215 0138  
                               i1l13207 010E                     ?_sendVSCPDriverNack 0001  
                               i1l13241 01F2                                 i1l13233 019E  
                               i1l13225 0168                                 i1l13209 011A  
                               i1l13251 025E                                 i1l13243 01FA  
                               i1l13235 01C6                                 i1l13227 0172  
                               i1l13219 014A                                 i1l13261 02CE  
                               i1l13253 0298                                 i1l13245 0226  
                               i1l13237 01CE                                 i1l13229 0182  
                               i1l13181 0042                                 i1l13255 029C  
                               i1l13247 0228                                 i1l13239 01D6  
                               i1l13191 00B8                                 i1l13183 007E  
                               i1l13257 02C8                                 i1l13249 025A  
                               i1l13193 00C8                                 i1l13185 008E  
                               i1l13177 0034                                 i1l13259 02CC  
                               i1l13267 02DA                                 i1l13195 00CC  
                               i1l13187 009A                                 i1l13179 003C  
                               i1l13197 00D8                                 i1l13189 00A6  
                               i1l13199 00E8                              _fifo_write 356E  
                    __size_of_printHelp 01BE                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0096                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1164 02AA                       sendCANFrame@pdata 0092  
                            _made_table 0027                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 1F60                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2DBA  
            _sendVSCPDriverCommandReply 2CEE                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 3078  
      __size_of_receiveVSCPModeCanalMsg 00E8                  __size_of_doModeVerbose 1304  
                  sendEscapedUartData@c 006C                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0021  
      __end_of_sendVSCPDriverErrorFrame 2B40          __size_of_receiveSendEventCANAL 013A  
         __end_of_receiveSendEventCANAL 390E                    ??_sendVSCPDriverNack 0023  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017C  
                       _ECANSendMessage 391C           __end_of_receiveSendEventSLCAN 3D88  
                               __Hparam 0000                       __end_of_findNodes 3252  
                               __Lparam 0000                       __end_of_fifo_init 19BA  
                     __end_of_fifo_read 2CD2                           ??_getCANFrame 0021  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B4  
                  __end_of_readRegister 291A                               ?_printMDF 0001  
                               _bSilent 00E5               receiveVSCPModeCanalMsg@id 00B0  
                         ??_doModeSLCAN 0094                                 ___lldiv 204C  
                       __size_of___wmul 0022                                 _calcCRC 1790  
                       getCANFrame@pdlc 006E                                 ___llmod 1D6A  
                               ___lwdiv 1B1C                               _FIFOEMPTY 007BA7  
                               ___lwmod 18CE                   ?_readRegisterExtended 00B4  
           printNodeFirmwareVersion@buf 00BE                    __end_of_init_app_ram 1BFE  
                          _fifo_getFree 270C                            init_crc8@crc 0064  
                               __pcinit 1E2E                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0062  
                               __ptext0 3A8A                                 __ptext1 1650  
                               __ptext2 4D78                                 __ptext3 23EC  
                               __ptext4 194A                 receiveSendEventCANAL@id 007A  
                               __ptext5 3C0C                                 __ptext6 2EAA  
                               __ptext7 4276                                 __ptext8 2CEE  
                               __ptext9 29D0                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C1                       ??_printStatistics 0023  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0042                       __end_of_hexpowers 6D28  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6CE0                       __end_of_init_crc8 1F60  
                               _isdigit 1714          printNodeFirmwareVersion@nodeid 00BD  
                   __end_of_WriteTimer0 1696                          _nibbleFromChar 194A  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 1826  
                               _sprintf 5146        __end_of_sendVSCPModeCapabilities 2A7E  
                     __end_of_setFilter 4624                                 _strichr 190C  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02A9  
                        doModeVerbose@p 02B7                                 _strcspn 1A90  
                               _toupper 16AA                             ?_doModeVscp 0001  
                               _stristr 20C2                    __size_of_printBinary 004A  
                  end_of_initialization 1E86                       __end_of_octpowers 6CE0  
                  __size_of_printErrors 02BC                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0022                                 itoa@buf 0070  
                               memset@c 0062                               i1u1125_25 36D2  
                               itoa@val 0072                                 memset@n 0064  
                             i1u1126_25 36E2                                 memset@p 0021  
                             i1u1127_25 3720                           __Lmediumconst 6CB0  
                  __end_of_sendCANFrame 18CE                               i1u1165_25 464E  
                             i1u1165_27 4650                               i1u1730_20 003C  
                             i1u1730_21 003A                               i1u1731_20 007E  
                             i1u1731_21 007C                               i1u1740_20 0148  
                             i1u1732_20 009A                               i1u1740_21 0146  
                             i1u1732_21 0098                               i1u1741_20 0156  
                             i1u1733_20 00D8                               i1u1741_21 0154  
                             i1u1733_21 00D6                               i1u1750_20 01F2  
                             i1u1742_20 0166                               i1u1734_20 00E8  
                             i1u1750_21 01F0                               i1u1742_21 0164  
                             i1u1734_21 00E6                               i1u1751_20 01FA  
                             i1u1743_20 0172                               i1u1735_20 00FC  
                             i1u1751_21 01F8                               i1u1743_21 0170  
                             i1u1735_21 00FA                               i1u1752_20 0226  
                             i1u1744_20 0182                               i1u1736_20 010C  
                             i1u1752_21 0224                               i1u1744_21 0180  
                             i1u1736_21 010A                               i1u1753_20 025A  
                             i1u1745_20 0194                               i1u1737_20 011A  
                             i1u1753_21 0258                               i1u1745_21 0192  
                             i1u1737_21 0118                               i1u1754_20 0298  
                             i1u1746_20 019E                               i1u1738_20 012A  
                             i1u1754_21 0296                               i1u1746_21 019C  
                             i1u1738_21 0128                               i1u1755_20 02C8  
                             i1u1747_20 01C6                               i1u1739_20 0138  
                             i1u1755_21 02C6                               i1u1747_21 01C4  
                             i1u1739_21 0136                               i1u1756_20 02D8  
                             i1u1748_20 01CE                               i1u1756_21 02D6  
                             i1u1748_21 01CC                               i1u1749_20 01D6  
                             i1u1749_21 01D4                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0085                       __end_of_printGUID 3340  
                       ___lldiv@divisor 0064                       __end_of_printHelp 4276  
                       ___lldiv@counter 006C                       __end_of_printMode 204C  
                     ECANSendMessage@id 0068                       ECANSendMessage@pb 0071  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0023  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1C56  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 5886  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 291A                                 strlen@s 0021  
                            _sequencyno 0039                              _timekeeper 0023  
                             _RXM0EXIDM 0078CB                                 strspn@i 0068  
                            ??_strnicmp 0068                     __end_of_getCANFrame 2524  
                            findNodes@i 00C7                  __end_of_nibbleFromChar 1988  
                   __end_of_doModeSLCAN 513A                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B4  
     sendVSCPDriverCommandReply@cmdCode 006D                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006D                 __end_of_ECANSendMessage 3A8A  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 4830  
                            _vscpNodeId 00E9                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 3796                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                  ??_readRegisterExtended 00BB  
                        _init_crc8$1962 0060                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0023                          ?_sendVSCPFrame 0094  
                        __end_of___wmul 17E2                     __size_of_doModeVscp 01C0  
                           _WriteTimer0 1684                             _Write_b_eep 17F2  
                        __end_of_memcpy 1A4C                          __end_of_memset 1762  
     __size_of_sendVSCPDriverErrorFrame 00B6               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01EA  
                        __end_of_strcat 1CAE                          __end_of_strchr 1E2E  
                        __end_of_strcpy 1790                          __end_of_strlen 1A0A  
              doModeVerbose@filter_type 028F                          __end_of_strtok 2358  
                        __end_of_strspn 1A90                             __end_ofPL10 57D6  
                           __end_ofPL20 37AC                             __end_ofPL12 369A  
                           __end_ofPL30 6C3C                             __end_ofPL22 3F14  
                           __end_ofPL14 57E6                             __end_ofPL40 6C82  
                           __end_ofPL32 6C4E                             __end_ofPL24 4446  
                           __end_ofPL16 345A                             __end_ofPL50 3550  
                           __end_ofPL42 270C                             __end_ofPL34 2CEE  
                           __end_ofPL26 6C28                             __end_ofPL18 580C  
                           __end_ofPL60 22C6                             __end_ofPL52 6C9A  
                           __end_ofPL44 353E                             __end_ofPL36 5826  
                           __end_ofPL28 352E                             __end_ofPL70 37D4  
                           __end_ofPL62 2866                             __end_ofPL54 5852  
                           __end_ofPL46 2668                             __end_ofPL38 6C68  
                           __end_ofPL80 2DC8                             __end_ofPL72 2F90  
                           __end_ofPL64 3354                             __end_ofPL56 6CB0  
                           __end_ofPL48 583C                             __end_ofPL90 391C  
                           __end_ofPL82 587C                             __end_ofPL74 27B4  
                           __end_ofPL66 3564                             __end_ofPL58 5860  
                           __end_ofPL92 3F22                             __end_ofPL84 17F2  
                           __end_ofPL76 5872                             __end_ofPL68 37C0  
                           __end_ofPL94 4830                             __end_ofPL86 3D96  
                           __end_ofPL78 5146                             __end_ofPL96 2A8A  
                           __end_ofPL88 2B4E                             __end_ofPL98 19C8  
                   start_initialization 1E2E                               _ReadUSART 16D8  
                       findNodes@nFound 00C5                   doModeVerbose@reg_1163 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 2F90  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A0  
                          ??_OpenTimer0 0021  sendVSCPDriverCommandReply@cmdReplyCode 006E  
                             _Interrupt 0018                          ??__CANIDToRegs 0021  
            readRegisterExtended@nodeid 00BF                               _OpenUSART 1CAE  
                    __end_of_Read_b_eep 1684                     sendVSCPFrame@nodeid 0097  
                       ___llmod@divisor 0071                   __size_of_readRegister 00B4  
                       ___llmod@counter 0021                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 004E                          _findNodes$1473 00C3  
              __end_of__ECANPointBuffer 1FD6                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 2486                                ??___wmul 0021  
     __size_of_sendVSCPModeCapabilities 00AE                       ?_hexStringToBytes 0062  
                           _doModeSLCAN 4D78               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 4822                                ??_memcpy 0021  
                   readRegister@timeout 00B5                                ??_memset 0021  
                 sendVSCPDriverNack@crc 006D                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 1672                      ??_hexStringToBytes 0067  
                              ??_strcat 0021                                ??_strchr 0021  
                              ??_strcpy 0021                                ??_strlen 0023  
                    __end_of_OpenTimer0 1714                                ??_strtok 0023  
                              ??_strspn 0023                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0023                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 0031                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFF  
                          _readRegister 2866                            _isdigit$2910 0060  
                 __size_of_sendCANFrame 003A             ?_sendVSCPDriverCommandReply 006D  
           sendVSCPDriverErrorFrame@crc 006E                        ?_ECANSendMessage 0068  
                     sendVSCPFrame@size 0099                            _init_app_ram 1BB0  
                            ?_Interrupt 0001                              ?_OpenUSART 0021  
                           sprintf@_val 008C                             sprintf@flag 0091  
                           sprintf@prec 0088                               __pnvBANK1 01E8  
                         __IT_SAVE_WREG 0032                        _ledFunctionality 0037  
              doModeVerbose@nodeid_1161 028D                doModeVerbose@nodeid_1176 02AF  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00C8           __size_of_ECANSetOperationMode 0018  
                       _printStatistics 3F22                            ??_WriteUSART 0021  
                       ??_sendVSCPFrame 009C                          _ECANInitialize 21B8  
                     _sendVSCPDriverAck 2668                           __pmediumconst 6CB0  
                              ?___lldiv 0060                                ?_calcCRC 006A  
                              ?___llmod 006D                               _findNodes 3164  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 1988                               _fifo_read 2C1C  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 1894  
                     WriteTimer0@timer0 0021                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0094  
                   ??_sendVSCPDriverAck 0023                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BD                     _sendEscapedUartData 1D0A  
                             _hexpowers 6D08                        ___lwdiv@quotient 0065  
                             _init_crc8 1EF6                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0075  
                              ?_strichr 0060                             _cntRxFrames 010C  
                          ??_doModeVscp 0023                                ?_strcspn 0064  
                              ?_toupper 0001                                ?_stristr 006B  
                    __end_of_WriteUSART 16AA                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0021                  sendVSCPFrame@vscpclass 0094  
                             _setFilter 4446                             strnicmp@len 0066  
                             _octpowers 6CB0                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0096                  __end_of_ECANInitialize 2238  
             __end_of_sendVSCPDriverAck 26FE                                i1u630_25 359E  
                              i1u632_25 3634                                i1u634_25 2732  
                              i1u629_25 358E                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 37D4                        ECANSendMessage@i 008A  
                      ECANSendMessage@j 0085                    ?_sendEscapedUartData 006A  
                 _receiveSendEventSLCAN 3C0C                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007A                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 006E                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006C  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3252                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C2  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 40B8  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 1FD6                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 4436                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 351A                               _putsUSART 1BFE  
                           __stringdata 6D28                       ___wmul@multiplier 0060  
                          __RegsToCANID 369A                               _vscpClass 003B  
               ??_writeRegisterExtended 00BB                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0093  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0072  
                         ??_printBinary 0060                        doModeVerbose@reg 02AE  
                         ??_printErrors 0023                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 00E8  
             writeRegisterExtended@page 00B4                                ___DCByte 0033  
  __end_of_receiveVSCPModeMultiCanalMsg 1650   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 164E                             ??_Interrupt 0017  
               __end_of_printStatistics 40B8                             ??_OpenUSART 0023  
          writeRegisterExtended@timeout 00B7                                _Busy_eep 1652  
              __size_of_init_app_eeprom 00A6                              ?_setFilter 0060  
                       OpenUSART@config 0060                          findNodes@value 00C6  
          __end_of_vscp_restoreDefaults 1660                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 3078  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 0023  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 366C                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00A8                              ?_printGUID 0001  
                           doModeVscp@c 00B5                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0021  
                      ??_nibbleFromChar 0021                        __size_of___lldiv 0076  
                      __size_of_calcCRC 0030                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0021                        getCANFrame@pdata 006F  
                          ?_Write_b_eep 0060                              ?_putsUSART 0060  
                       fifo_read@nbytes 0064                              sprintf@idx 0080  
                 hexStringToBytes@inhex 0065                                calcCRC@j 006D  
                              calcCRC@p 006A                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 164E  
                              __ptext11 2F90                                __ptext20 1826  
                              __ptext12 1A0A                                __ptext21 1EF6  
                              __ptext13 2668                                __ptext30 3252  
                              __ptext22 5886                                __ptext14 2A8A  
                              __ptext31 2B4E                                __ptext23 4446  
                              __ptext15 25C4                                __ptext40 4ABC  
                              __ptext32 1C56                                __ptext24 3078  
                              __ptext16 1790                                __ptext41 3F22  
                              __ptext33 2866                                __ptext25 1B66  
                              __ptext17 37D4                                __ptext50 16AA  
                              __ptext42 3354                                __ptext34 291A  
                              __ptext26 2DC8                                __ptext18 3D96  
                              __ptext51 19C8                                __ptext43 22C6  
                              __ptext35 1894                                __ptext27 1762  
                              __ptext19 1D0A                                __ptext60 1714  
                              __ptext52 4830                                __ptext44 1A90  
                              __ptext36 391C                                __ptext28 3164  
                              __ptext61 2238                                __ptext53 213A  
                              __ptext45 1A4C                                __ptext37 345A  
                              __ptext29 2358                                __ptext70 21B8  
                              __ptext62 185C                                __ptext54 2486  
                              __ptext46 1DCC                                __ptext38 1734  
                              __ptext71 16C0                                __ptext63 2524  
                              __ptext55 2C1C                                __ptext47 20C2  
                              __ptext39 40B8                                __ptext80 1672  
                              __ptext72 16F6                                __ptext64 18CE  
                              __ptext56 5146                                __ptext48 190C  
                              __ptext81 1988                                __ptext73 1CAE  
                              __ptext65 1B1C                                __ptext57 17C0  
                              __ptext49 1E90                                __ptext74 1684  
                              __ptext66 1FD6                                __ptext58 1D6A  
                              __ptext83 1660                                __ptext75 1658  
                              __ptext67 1BFE                                __ptext59 204C  
                              __ptext84 270C                                __ptext76 27B4  
                              __ptext68 1696                                __ptext85 4624  
                              __ptext77 17F2                                __ptext69 1AD4  
                              __ptext86 369A                                __ptext78 1652  
                              __ptext87 1F60                                __ptext79 1BB0  
                              __ptext88 356E                                __ptext89 16D8  
              receiveSendEventCANAL@dlc 007E                receiveSendEventCANAL@crc 007F  
                        printMDF@nodeid 00BD                           ?_getVSCPFrame 0071  
                            strichr@chr 0062                        __size_of_sprintf 0672  
                            strichr@ptr 0060                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C1                     __end_of_printBinary 1BB0  
                         __size_of_crc8 0036                           __size_of_atoi 00F8  
                         __size_of_main 0182                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 4D78                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0062  
                            strnicmp@s2 0064              __size_of_sendVSCPDriverAck 0096  
        receiveSendMultiEventCANAL@data 0071                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 2B4E                     ECANSendMessage@data 006C  
              ECANSendMessage@tempBSEL0 0086                                _printMDF 2358  
                             printMDF@i 00C1                               printMDF@p 00BF  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0083  
                   ECANSendMessage@temp 0089                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0023                                atoi@sign 0068  
                           ??_findNodes 0023                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0021                             ??_fifo_read 0066  
                              _vscpData 01DC           __size_of_readRegisterExtended 00E2  
                              main@argc 00DC                                main@argv 00DE  
                              _vscpSize 00EB                      ??__ECANPointBuffer 0004  
                              _vscpType 00EC                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006D                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 1E90  
                      init_app_eeprom@i 0022             writeRegisterExtended@nodeid 00BF  
                         Interrupt@fail 0020                         _serialInputFifo 01D4  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0021  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A4  
                              itoa@base 0074                                isdigit@c 0061  
                    _ECANReceiveMessage 4624                                memset@p1 0060  
                           ??_init_crc8 0021                               ultoa@base 007B  
                        ??_getVSCPFrame 0077               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B0                                intlevel1 0000  
                             sprintf@ap 0087                               sprintf@sp 0075  
                  hexStringToBytes@size 0064                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 0089  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00BE  
   __size_of_receiveSendMultiEventCANAL 016E                           fifo_getFree@f 0001  
                             strcspn@s1 0064                               strcspn@s2 0066  
    receiveSendMultiEventCANAL@msgcount 0079                 ECANSendMessage@msgFlags 006F  
                            _OSCCONbits 000FD3                               strnicmp@r 006A  
                             stristr@s1 006B                               stristr@s2 006D  
                    ECANSendMessage@ptr 008B                       ??_init_app_eeprom 0022  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 0023  
                           ??_printHelp 0022                             ??_printMode 0022  
              _sendVSCPDriverErrorFrame 2A8A                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 006E                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0062  
                              utoa@base 006B                                ultoa@buf 0075  
                              ultoa@val 0077                           fifo_init@size 0064  
                              sprintf@c 0090                                sprintf@f 0077  
                   hexStringToBytes@buf 0062                                strcat@cp 0021  
                   hexStringToBytes@len 006A                          _doModeVscpNode 1650  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 4ABC  
                ECANSendMessage@buffers 0084                        ___lldiv@quotient 0068  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 16D8  
                  _vscp_restoreDefaults 1658                            printGUID@buf 00BE  
                              strcpy@cp 0021                                strlen@cp 0060  
                              strcpy@to 0060                         ___lwmod@counter 0021  
                              strcspn@i 0068                                toupper@c 0021  
                           _printBinary 1B66                                strtok@s1 006A  
                              strtok@s2 006C                                strspn@s1 0064  
                              strspn@s2 0066                              _RXM1EXIDEN 0078EB  
                              strtok@sp 002B                  ECANSendMessage@tempPtr 0087  
                           _printErrors 4ABC                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 006F  
                          __CANIDToRegs 345A                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002D               readRegisterExtended@value 00B9  
              _sendVSCPModeCapabilities 29D0                __size_of_ECANSendMessage 016E  
